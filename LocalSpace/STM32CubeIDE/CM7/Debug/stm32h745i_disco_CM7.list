
stm32h745i_disco_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002af24  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004a78  0802b1c4  0802b1c4  0003b1c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 00000028  0802fc3c  0802fc3c  0003fc3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0802fc64  0802fc64  000b8ae0  2**0
                  CONTENTS
  5 .ARM          00000000  0802fc64  0802fc64  000b8ae0  2**0
                  CONTENTS
  6 .preinit_array 00000000  0802fc64  0802fc64  000b8ae0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000014  0802fc64  0802fc64  0003fc64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  0802fc78  0802fc78  0003fc78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000134  24000000  0802fc80  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000ba6c  24000134  0802fdb4  00040134  2**2
                  ALLOC
 11 ._user_heap_stack 00002000  2400bba0  0802fdb4  0004bba0  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  000b8ae0  2**0
                  CONTENTS, READONLY
 13 FontFlashSection 00000bd4  90000000  90000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 TextFlashSection 0000021c  90000bd4  90000bd4  00050bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 ExtFlashSection 00067cf0  90000df0  90000df0  00050df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .debug_info   000dac01  00000000  00000000  000b8b0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0001644c  00000000  00000000  0019370f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00004780  00000000  00000000  001a9b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00004118  00000000  00000000  001ae2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00013f5f  00000000  00000000  001b23f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   000547c2  00000000  00000000  001c6357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    001b8fda  00000000  00000000  0021ab19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000d2  00000000  00000000  003d3af3  2**0
                  CONTENTS, READONLY
 24 .debug_frame  000131b8  00000000  00000000  003d3bc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000134 	.word	0x24000134
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0802b1ac 	.word	0x0802b1ac

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000138 	.word	0x24000138
 80002dc:	0802b1ac 	.word	0x0802b1ac

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b086      	sub	sp, #24
 8000384:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000386:	f000 fc29 	bl	8000bdc <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800038a:	4b6f      	ldr	r3, [pc, #444]	; (8000548 <main+0x1c8>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000392:	2b00      	cmp	r3, #0
 8000394:	d11b      	bne.n	80003ce <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000396:	f3bf 8f4f 	dsb	sy
}
 800039a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800039c:	f3bf 8f6f 	isb	sy
}
 80003a0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80003a2:	4b69      	ldr	r3, [pc, #420]	; (8000548 <main+0x1c8>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80003aa:	f3bf 8f4f 	dsb	sy
}
 80003ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003b0:	f3bf 8f6f 	isb	sy
}
 80003b4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80003b6:	4b64      	ldr	r3, [pc, #400]	; (8000548 <main+0x1c8>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	4a63      	ldr	r2, [pc, #396]	; (8000548 <main+0x1c8>)
 80003bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003c0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80003c2:	f3bf 8f4f 	dsb	sy
}
 80003c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003c8:	f3bf 8f6f 	isb	sy
}
 80003cc:	e000      	b.n	80003d0 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003ce:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80003d0:	4b5d      	ldr	r3, [pc, #372]	; (8000548 <main+0x1c8>)
 80003d2:	695b      	ldr	r3, [r3, #20]
 80003d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d138      	bne.n	800044e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80003dc:	4b5a      	ldr	r3, [pc, #360]	; (8000548 <main+0x1c8>)
 80003de:	2200      	movs	r2, #0
 80003e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80003e4:	f3bf 8f4f 	dsb	sy
}
 80003e8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80003ea:	4b57      	ldr	r3, [pc, #348]	; (8000548 <main+0x1c8>)
 80003ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80003f0:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80003f2:	693b      	ldr	r3, [r7, #16]
 80003f4:	0b5b      	lsrs	r3, r3, #13
 80003f6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80003fa:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80003fc:	693b      	ldr	r3, [r7, #16]
 80003fe:	08db      	lsrs	r3, r3, #3
 8000400:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000404:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	015a      	lsls	r2, r3, #5
 800040a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800040e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000410:	68ba      	ldr	r2, [r7, #8]
 8000412:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000414:	494c      	ldr	r1, [pc, #304]	; (8000548 <main+0x1c8>)
 8000416:	4313      	orrs	r3, r2
 8000418:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800041c:	68bb      	ldr	r3, [r7, #8]
 800041e:	1e5a      	subs	r2, r3, #1
 8000420:	60ba      	str	r2, [r7, #8]
 8000422:	2b00      	cmp	r3, #0
 8000424:	d1ef      	bne.n	8000406 <main+0x86>
    } while(sets-- != 0U);
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	1e5a      	subs	r2, r3, #1
 800042a:	60fa      	str	r2, [r7, #12]
 800042c:	2b00      	cmp	r3, #0
 800042e:	d1e5      	bne.n	80003fc <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000430:	f3bf 8f4f 	dsb	sy
}
 8000434:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000436:	4b44      	ldr	r3, [pc, #272]	; (8000548 <main+0x1c8>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	4a43      	ldr	r2, [pc, #268]	; (8000548 <main+0x1c8>)
 800043c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000440:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000442:	f3bf 8f4f 	dsb	sy
}
 8000446:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000448:	f3bf 8f6f 	isb	sy
}
 800044c:	e000      	b.n	8000450 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800044e:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000450:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000454:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000456:	bf00      	nop
 8000458:	4b3c      	ldr	r3, [pc, #240]	; (800054c <main+0x1cc>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000460:	2b00      	cmp	r3, #0
 8000462:	d004      	beq.n	800046e <main+0xee>
 8000464:	697b      	ldr	r3, [r7, #20]
 8000466:	1e5a      	subs	r2, r3, #1
 8000468:	617a      	str	r2, [r7, #20]
 800046a:	2b00      	cmp	r3, #0
 800046c:	dcf4      	bgt.n	8000458 <main+0xd8>
  //}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800046e:	f010 f827 	bl	80104c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000472:	f000 f87d 	bl	8000570 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000476:	4b35      	ldr	r3, [pc, #212]	; (800054c <main+0x1cc>)
 8000478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800047c:	4a33      	ldr	r2, [pc, #204]	; (800054c <main+0x1cc>)
 800047e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000482:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000486:	4b31      	ldr	r3, [pc, #196]	; (800054c <main+0x1cc>)
 8000488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800048c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000490:	607b      	str	r3, [r7, #4]
 8000492:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000494:	2000      	movs	r0, #0
 8000496:	f010 ff53 	bl	8011340 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800049a:	2100      	movs	r1, #0
 800049c:	2000      	movs	r0, #0
 800049e:	f010 ff69 	bl	8011374 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80004a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004a6:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80004a8:	bf00      	nop
 80004aa:	4b28      	ldr	r3, [pc, #160]	; (800054c <main+0x1cc>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d104      	bne.n	80004c0 <main+0x140>
 80004b6:	697b      	ldr	r3, [r7, #20]
 80004b8:	1e5a      	subs	r2, r3, #1
 80004ba:	617a      	str	r2, [r7, #20]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	dcf4      	bgt.n	80004aa <main+0x12a>
if ( timeout < 0 )
 80004c0:	697b      	ldr	r3, [r7, #20]
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	da01      	bge.n	80004ca <main+0x14a>
{
Error_Handler();
 80004c6:	f000 fbd3 	bl	8000c70 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ca:	f000 fa79 	bl	80009c0 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 80004ce:	f000 f9a1 	bl	8000814 <MX_QUADSPI_Init>
  MX_FMC_Init();
 80004d2:	f000 fa1f 	bl	8000914 <MX_FMC_Init>
  MX_LTDC_Init();
 80004d6:	f000 f919 	bl	800070c <MX_LTDC_Init>
  MX_CRC_Init();
 80004da:	f000 f8d7 	bl	800068c <MX_CRC_Init>
  MX_DMA2D_Init();
 80004de:	f000 f8f7 	bl	80006d0 <MX_DMA2D_Init>
  MX_TIM4_Init();
 80004e2:	f000 f9c5 	bl	8000870 <MX_TIM4_Init>
  MX_TouchGFX_Init();
 80004e6:	f001 f9c2 	bl	800186e <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */

  TIM4->SMCR &= ~TIM_SMCR_SMS;
 80004ea:	4b19      	ldr	r3, [pc, #100]	; (8000550 <main+0x1d0>)
 80004ec:	689a      	ldr	r2, [r3, #8]
 80004ee:	4918      	ldr	r1, [pc, #96]	; (8000550 <main+0x1d0>)
 80004f0:	4b18      	ldr	r3, [pc, #96]	; (8000554 <main+0x1d4>)
 80004f2:	4013      	ands	r3, r2
 80004f4:	608b      	str	r3, [r1, #8]
  // only need to set the low 3 bits of SMS
  TIM4->SMCR |= 0b011;
 80004f6:	4b16      	ldr	r3, [pc, #88]	; (8000550 <main+0x1d0>)
 80004f8:	689b      	ldr	r3, [r3, #8]
 80004fa:	4a15      	ldr	r2, [pc, #84]	; (8000550 <main+0x1d0>)
 80004fc:	f043 0303 	orr.w	r3, r3, #3
 8000500:	6093      	str	r3, [r2, #8]

  // set timer channel inputs
  TIM4->CCMR1 |= (0x01 << 0) | (0x01 << 8);
 8000502:	4b13      	ldr	r3, [pc, #76]	; (8000550 <main+0x1d0>)
 8000504:	699a      	ldr	r2, [r3, #24]
 8000506:	4912      	ldr	r1, [pc, #72]	; (8000550 <main+0x1d0>)
 8000508:	f240 1301 	movw	r3, #257	; 0x101
 800050c:	4313      	orrs	r3, r2
 800050e:	618b      	str	r3, [r1, #24]

  // start/enable timer
  TIM4->CR1 |= TIM_CR1_CEN;
 8000510:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <main+0x1d0>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a0e      	ldr	r2, [pc, #56]	; (8000550 <main+0x1d0>)
 8000516:	f043 0301 	orr.w	r3, r3, #1
 800051a:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800051c:	f009 ffa8 	bl	800a470 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000520:	4a0d      	ldr	r2, [pc, #52]	; (8000558 <main+0x1d8>)
 8000522:	2100      	movs	r1, #0
 8000524:	480d      	ldr	r0, [pc, #52]	; (800055c <main+0x1dc>)
 8000526:	f009 ffed 	bl	800a504 <osThreadNew>
 800052a:	4603      	mov	r3, r0
 800052c:	4a0c      	ldr	r2, [pc, #48]	; (8000560 <main+0x1e0>)
 800052e:	6013      	str	r3, [r2, #0]

  /* creation of TouchGFXTask */
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000530:	4a0c      	ldr	r2, [pc, #48]	; (8000564 <main+0x1e4>)
 8000532:	2100      	movs	r1, #0
 8000534:	480c      	ldr	r0, [pc, #48]	; (8000568 <main+0x1e8>)
 8000536:	f009 ffe5 	bl	800a504 <osThreadNew>
 800053a:	4603      	mov	r3, r0
 800053c:	4a0b      	ldr	r2, [pc, #44]	; (800056c <main+0x1ec>)
 800053e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000540:	f009 ffba 	bl	800a4b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000544:	e7fe      	b.n	8000544 <main+0x1c4>
 8000546:	bf00      	nop
 8000548:	e000ed00 	.word	0xe000ed00
 800054c:	58024400 	.word	0x58024400
 8000550:	40000800 	.word	0x40000800
 8000554:	fffefff8 	.word	0xfffefff8
 8000558:	0802bfc4 	.word	0x0802bfc4
 800055c:	08000bcd 	.word	0x08000bcd
 8000560:	2400b86c 	.word	0x2400b86c
 8000564:	0802bfe8 	.word	0x0802bfe8
 8000568:	0800187b 	.word	0x0800187b
 800056c:	2400b9bc 	.word	0x2400b9bc

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b09c      	sub	sp, #112	; 0x70
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800057a:	224c      	movs	r2, #76	; 0x4c
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f029 feb6 	bl	802a2f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	2220      	movs	r2, #32
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f029 feb0 	bl	802a2f0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000590:	2004      	movs	r0, #4
 8000592:	f012 fa59 	bl	8012a48 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000596:	2300      	movs	r3, #0
 8000598:	603b      	str	r3, [r7, #0]
 800059a:	4b39      	ldr	r3, [pc, #228]	; (8000680 <SystemClock_Config+0x110>)
 800059c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800059e:	4a38      	ldr	r2, [pc, #224]	; (8000680 <SystemClock_Config+0x110>)
 80005a0:	f023 0301 	bic.w	r3, r3, #1
 80005a4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80005a6:	4b36      	ldr	r3, [pc, #216]	; (8000680 <SystemClock_Config+0x110>)
 80005a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	603b      	str	r3, [r7, #0]
 80005b0:	4b34      	ldr	r3, [pc, #208]	; (8000684 <SystemClock_Config+0x114>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	4a33      	ldr	r2, [pc, #204]	; (8000684 <SystemClock_Config+0x114>)
 80005b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005ba:	6193      	str	r3, [r2, #24]
 80005bc:	4b31      	ldr	r3, [pc, #196]	; (8000684 <SystemClock_Config+0x114>)
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005c4:	603b      	str	r3, [r7, #0]
 80005c6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80005c8:	bf00      	nop
 80005ca:	4b2e      	ldr	r3, [pc, #184]	; (8000684 <SystemClock_Config+0x114>)
 80005cc:	699b      	ldr	r3, [r3, #24]
 80005ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005d6:	d1f8      	bne.n	80005ca <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80005d8:	4b2b      	ldr	r3, [pc, #172]	; (8000688 <SystemClock_Config+0x118>)
 80005da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005dc:	f023 0303 	bic.w	r3, r3, #3
 80005e0:	4a29      	ldr	r2, [pc, #164]	; (8000688 <SystemClock_Config+0x118>)
 80005e2:	f043 0302 	orr.w	r3, r3, #2
 80005e6:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80005e8:	2303      	movs	r3, #3
 80005ea:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80005f2:	2301      	movs	r3, #1
 80005f4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f6:	2340      	movs	r3, #64	; 0x40
 80005f8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fa:	2302      	movs	r3, #2
 80005fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fe:	2302      	movs	r3, #2
 8000600:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000602:	2305      	movs	r3, #5
 8000604:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000606:	23a0      	movs	r3, #160	; 0xa0
 8000608:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800060a:	2302      	movs	r3, #2
 800060c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800060e:	2304      	movs	r3, #4
 8000610:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000612:	2302      	movs	r3, #2
 8000614:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000616:	2308      	movs	r3, #8
 8000618:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800061a:	2300      	movs	r3, #0
 800061c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000622:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000626:	4618      	mov	r0, r3
 8000628:	f013 f94a 	bl	80138c0 <HAL_RCC_OscConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000632:	f000 fb1d 	bl	8000c70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000636:	233f      	movs	r3, #63	; 0x3f
 8000638:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063a:	2303      	movs	r3, #3
 800063c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000642:	2308      	movs	r3, #8
 8000644:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000646:	2340      	movs	r3, #64	; 0x40
 8000648:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800064a:	2340      	movs	r3, #64	; 0x40
 800064c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800064e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000652:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000654:	2340      	movs	r3, #64	; 0x40
 8000656:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	2102      	movs	r1, #2
 800065c:	4618      	mov	r0, r3
 800065e:	f013 fd5b 	bl	8014118 <HAL_RCC_ClockConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000668:	f000 fb02 	bl	8000c70 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 800066c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000670:	2100      	movs	r1, #0
 8000672:	2000      	movs	r0, #0
 8000674:	f013 ff06 	bl	8014484 <HAL_RCC_MCOConfig>
}
 8000678:	bf00      	nop
 800067a:	3770      	adds	r7, #112	; 0x70
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	58000400 	.word	0x58000400
 8000684:	58024800 	.word	0x58024800
 8000688:	58024400 	.word	0x58024400

0800068c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000690:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <MX_CRC_Init+0x3c>)
 8000692:	4a0e      	ldr	r2, [pc, #56]	; (80006cc <MX_CRC_Init+0x40>)
 8000694:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000696:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <MX_CRC_Init+0x3c>)
 8000698:	2200      	movs	r2, #0
 800069a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800069c:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <MX_CRC_Init+0x3c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80006a2:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <MX_CRC_Init+0x3c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80006a8:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <MX_CRC_Init+0x3c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80006ae:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <MX_CRC_Init+0x3c>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006b4:	4804      	ldr	r0, [pc, #16]	; (80006c8 <MX_CRC_Init+0x3c>)
 80006b6:	f010 f8f9 	bl	80108ac <HAL_CRC_Init>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80006c0:	f000 fad6 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	2400b8bc 	.word	0x2400b8bc
 80006cc:	58024c00 	.word	0x58024c00

080006d0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80006d4:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <MX_DMA2D_Init+0x34>)
 80006d6:	4a0c      	ldr	r2, [pc, #48]	; (8000708 <MX_DMA2D_Init+0x38>)
 80006d8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 80006da:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <MX_DMA2D_Init+0x34>)
 80006dc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80006e0:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80006e2:	4b08      	ldr	r3, [pc, #32]	; (8000704 <MX_DMA2D_Init+0x34>)
 80006e4:	2202      	movs	r2, #2
 80006e6:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_DMA2D_Init+0x34>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80006ee:	4805      	ldr	r0, [pc, #20]	; (8000704 <MX_DMA2D_Init+0x34>)
 80006f0:	f010 f9c6 	bl	8010a80 <HAL_DMA2D_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_DMA2D_Init+0x2e>
  {
    Error_Handler();
 80006fa:	f000 fab9 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	2400b9c0 	.word	0x2400b9c0
 8000708:	52001000 	.word	0x52001000

0800070c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08e      	sub	sp, #56	; 0x38
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */
  initLtdcClocks();
 8000712:	f000 fab3 	bl	8000c7c <initLtdcClocks>
  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	2234      	movs	r2, #52	; 0x34
 800071a:	2100      	movs	r1, #0
 800071c:	4618      	mov	r0, r3
 800071e:	f029 fde7 	bl	802a2f0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000722:	4b3a      	ldr	r3, [pc, #232]	; (800080c <MX_LTDC_Init+0x100>)
 8000724:	4a3a      	ldr	r2, [pc, #232]	; (8000810 <MX_LTDC_Init+0x104>)
 8000726:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000728:	4b38      	ldr	r3, [pc, #224]	; (800080c <MX_LTDC_Init+0x100>)
 800072a:	2200      	movs	r2, #0
 800072c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800072e:	4b37      	ldr	r3, [pc, #220]	; (800080c <MX_LTDC_Init+0x100>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000734:	4b35      	ldr	r3, [pc, #212]	; (800080c <MX_LTDC_Init+0x100>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800073a:	4b34      	ldr	r3, [pc, #208]	; (800080c <MX_LTDC_Init+0x100>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000740:	4b32      	ldr	r3, [pc, #200]	; (800080c <MX_LTDC_Init+0x100>)
 8000742:	2228      	movs	r2, #40	; 0x28
 8000744:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000746:	4b31      	ldr	r3, [pc, #196]	; (800080c <MX_LTDC_Init+0x100>)
 8000748:	2209      	movs	r2, #9
 800074a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 800074c:	4b2f      	ldr	r3, [pc, #188]	; (800080c <MX_LTDC_Init+0x100>)
 800074e:	2235      	movs	r2, #53	; 0x35
 8000750:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000752:	4b2e      	ldr	r3, [pc, #184]	; (800080c <MX_LTDC_Init+0x100>)
 8000754:	220b      	movs	r2, #11
 8000756:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000758:	4b2c      	ldr	r3, [pc, #176]	; (800080c <MX_LTDC_Init+0x100>)
 800075a:	f240 2215 	movw	r2, #533	; 0x215
 800075e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000760:	4b2a      	ldr	r3, [pc, #168]	; (800080c <MX_LTDC_Init+0x100>)
 8000762:	f240 121b 	movw	r2, #283	; 0x11b
 8000766:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000768:	4b28      	ldr	r3, [pc, #160]	; (800080c <MX_LTDC_Init+0x100>)
 800076a:	f240 2235 	movw	r2, #565	; 0x235
 800076e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000770:	4b26      	ldr	r3, [pc, #152]	; (800080c <MX_LTDC_Init+0x100>)
 8000772:	f240 121d 	movw	r2, #285	; 0x11d
 8000776:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000778:	4b24      	ldr	r3, [pc, #144]	; (800080c <MX_LTDC_Init+0x100>)
 800077a:	2200      	movs	r2, #0
 800077c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000780:	4b22      	ldr	r3, [pc, #136]	; (800080c <MX_LTDC_Init+0x100>)
 8000782:	2200      	movs	r2, #0
 8000784:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000788:	4b20      	ldr	r3, [pc, #128]	; (800080c <MX_LTDC_Init+0x100>)
 800078a:	2200      	movs	r2, #0
 800078c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000790:	481e      	ldr	r0, [pc, #120]	; (800080c <MX_LTDC_Init+0x100>)
 8000792:	f011 fc5d 	bl	8012050 <HAL_LTDC_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_LTDC_Init+0x94>
  {
    Error_Handler();
 800079c:	f000 fa68 	bl	8000c70 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80007a4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80007a8:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80007ae:	f44f 7388 	mov.w	r3, #272	; 0x110
 80007b2:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80007b4:	2302      	movs	r3, #2
 80007b6:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80007b8:	23ff      	movs	r3, #255	; 0xff
 80007ba:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80007c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007c4:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80007c6:	2305      	movs	r3, #5
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 80007ca:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80007ce:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 80007d0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80007d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 80007d6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80007da:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	2200      	movs	r2, #0
 80007f2:	4619      	mov	r1, r3
 80007f4:	4805      	ldr	r0, [pc, #20]	; (800080c <MX_LTDC_Init+0x100>)
 80007f6:	f011 fdb3 	bl	8012360 <HAL_LTDC_ConfigLayer>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_LTDC_Init+0xf8>
  {
    Error_Handler();
 8000800:	f000 fa36 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000804:	bf00      	nop
 8000806:	3738      	adds	r7, #56	; 0x38
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	2400b8e0 	.word	0x2400b8e0
 8000810:	50001000 	.word	0x50001000

08000814 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000818:	4b12      	ldr	r3, [pc, #72]	; (8000864 <MX_QUADSPI_Init+0x50>)
 800081a:	4a13      	ldr	r2, [pc, #76]	; (8000868 <MX_QUADSPI_Init+0x54>)
 800081c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <MX_QUADSPI_Init+0x50>)
 8000820:	2201      	movs	r2, #1
 8000822:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_QUADSPI_Init+0x50>)
 8000826:	2201      	movs	r2, #1
 8000828:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_QUADSPI_Init+0x50>)
 800082c:	2210      	movs	r2, #16
 800082e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 26;
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_QUADSPI_Init+0x50>)
 8000832:	221a      	movs	r2, #26
 8000834:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_3_CYCLE;
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <MX_QUADSPI_Init+0x50>)
 8000838:	f44f 7200 	mov.w	r2, #512	; 0x200
 800083c:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_QUADSPI_Init+0x50>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8000844:	4b07      	ldr	r3, [pc, #28]	; (8000864 <MX_QUADSPI_Init+0x50>)
 8000846:	2240      	movs	r2, #64	; 0x40
 8000848:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800084a:	4806      	ldr	r0, [pc, #24]	; (8000864 <MX_QUADSPI_Init+0x50>)
 800084c:	f012 f956 	bl	8012afc <HAL_QSPI_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_QUADSPI_Init+0x46>
  {
    Error_Handler();
 8000856:	f000 fa0b 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */
  initBspQuadSpi(&Error_Handler);
 800085a:	4804      	ldr	r0, [pc, #16]	; (800086c <MX_QUADSPI_Init+0x58>)
 800085c:	f000 fa82 	bl	8000d64 <initBspQuadSpi>
  /* USER CODE END QUADSPI_Init 2 */

}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}
 8000864:	2400ba28 	.word	0x2400ba28
 8000868:	52005000 	.word	0x52005000
 800086c:	08000c71 	.word	0x08000c71

08000870 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b088      	sub	sp, #32
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000876:	f107 030c 	add.w	r3, r7, #12
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
 8000884:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000886:	463b      	mov	r3, r7
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000890:	4b1e      	ldr	r3, [pc, #120]	; (800090c <MX_TIM4_Init+0x9c>)
 8000892:	4a1f      	ldr	r2, [pc, #124]	; (8000910 <MX_TIM4_Init+0xa0>)
 8000894:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000896:	4b1d      	ldr	r3, [pc, #116]	; (800090c <MX_TIM4_Init+0x9c>)
 8000898:	2200      	movs	r2, #0
 800089a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089c:	4b1b      	ldr	r3, [pc, #108]	; (800090c <MX_TIM4_Init+0x9c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80008a2:	4b1a      	ldr	r3, [pc, #104]	; (800090c <MX_TIM4_Init+0x9c>)
 80008a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008a8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008aa:	4b18      	ldr	r3, [pc, #96]	; (800090c <MX_TIM4_Init+0x9c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b0:	4b16      	ldr	r3, [pc, #88]	; (800090c <MX_TIM4_Init+0x9c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80008b6:	4815      	ldr	r0, [pc, #84]	; (800090c <MX_TIM4_Init+0x9c>)
 80008b8:	f015 f9bf 	bl	8015c3a <HAL_TIM_Base_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80008c2:	f000 f9d5 	bl	8000c70 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80008c6:	2307      	movs	r3, #7
 80008c8:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 80008ca:	2340      	movs	r3, #64	; 0x40
 80008cc:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerFilter = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 80008d2:	f107 030c 	add.w	r3, r7, #12
 80008d6:	4619      	mov	r1, r3
 80008d8:	480c      	ldr	r0, [pc, #48]	; (800090c <MX_TIM4_Init+0x9c>)
 80008da:	f015 fb9c 	bl	8016016 <HAL_TIM_SlaveConfigSynchro>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80008e4:	f000 f9c4 	bl	8000c70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e8:	2300      	movs	r3, #0
 80008ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008f0:	463b      	mov	r3, r7
 80008f2:	4619      	mov	r1, r3
 80008f4:	4805      	ldr	r0, [pc, #20]	; (800090c <MX_TIM4_Init+0x9c>)
 80008f6:	f015 fdfd 	bl	80164f4 <HAL_TIMEx_MasterConfigSynchronization>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000900:	f000 f9b6 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000904:	bf00      	nop
 8000906:	3720      	adds	r7, #32
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	2400b870 	.word	0x2400b870
 8000910:	40000800 	.word	0x40000800

08000914 <MX_FMC_Init>:

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b088      	sub	sp, #32
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
 8000928:	615a      	str	r2, [r3, #20]
 800092a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM2 memory initialization sequence
  */
  hsdram2.Instance = FMC_SDRAM_DEVICE;
 800092c:	4b21      	ldr	r3, [pc, #132]	; (80009b4 <MX_FMC_Init+0xa0>)
 800092e:	4a22      	ldr	r2, [pc, #136]	; (80009b8 <MX_FMC_Init+0xa4>)
 8000930:	601a      	str	r2, [r3, #0]
  /* hsdram2.Init */
  hsdram2.Init.SDBank = FMC_SDRAM_BANK2;
 8000932:	4b20      	ldr	r3, [pc, #128]	; (80009b4 <MX_FMC_Init+0xa0>)
 8000934:	2201      	movs	r2, #1
 8000936:	605a      	str	r2, [r3, #4]
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000938:	4b1e      	ldr	r3, [pc, #120]	; (80009b4 <MX_FMC_Init+0xa0>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800093e:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <MX_FMC_Init+0xa0>)
 8000940:	2204      	movs	r2, #4
 8000942:	60da      	str	r2, [r3, #12]
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000944:	4b1b      	ldr	r3, [pc, #108]	; (80009b4 <MX_FMC_Init+0xa0>)
 8000946:	2210      	movs	r2, #16
 8000948:	611a      	str	r2, [r3, #16]
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800094a:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <MX_FMC_Init+0xa0>)
 800094c:	2240      	movs	r2, #64	; 0x40
 800094e:	615a      	str	r2, [r3, #20]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000950:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <MX_FMC_Init+0xa0>)
 8000952:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000956:	619a      	str	r2, [r3, #24]
  hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000958:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <MX_FMC_Init+0xa0>)
 800095a:	2200      	movs	r2, #0
 800095c:	61da      	str	r2, [r3, #28]
  hsdram2.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800095e:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <MX_FMC_Init+0xa0>)
 8000960:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000964:	621a      	str	r2, [r3, #32]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000966:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <MX_FMC_Init+0xa0>)
 8000968:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800096c:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800096e:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <MX_FMC_Init+0xa0>)
 8000970:	2200      	movs	r2, #0
 8000972:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000974:	2302      	movs	r3, #2
 8000976:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 8000978:	2306      	movs	r3, #6
 800097a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800097c:	2304      	movs	r3, #4
 800097e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 8000980:	2306      	movs	r3, #6
 8000982:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 8000984:	2302      	movs	r3, #2
 8000986:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000988:	2302      	movs	r3, #2
 800098a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800098c:	2302      	movs	r3, #2
 800098e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	4619      	mov	r1, r3
 8000994:	4807      	ldr	r0, [pc, #28]	; (80009b4 <MX_FMC_Init+0xa0>)
 8000996:	f015 f89b 	bl	8015ad0 <HAL_SDRAM_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80009a0:	f000 f966 	bl	8000c70 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  initBspSdRam(&Error_Handler);
 80009a4:	4805      	ldr	r0, [pc, #20]	; (80009bc <MX_FMC_Init+0xa8>)
 80009a6:	f000 f9fe 	bl	8000da6 <initBspSdRam>
  /* USER CODE END FMC_Init 2 */
}
 80009aa:	bf00      	nop
 80009ac:	3720      	adds	r7, #32
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	2400b988 	.word	0x2400b988
 80009b8:	52004140 	.word	0x52004140
 80009bc:	08000c71 	.word	0x08000c71

080009c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b090      	sub	sp, #64	; 0x40
 80009c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
 80009d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80009d6:	4b77      	ldr	r3, [pc, #476]	; (8000bb4 <MX_GPIO_Init+0x1f4>)
 80009d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009dc:	4a75      	ldr	r2, [pc, #468]	; (8000bb4 <MX_GPIO_Init+0x1f4>)
 80009de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009e6:	4b73      	ldr	r3, [pc, #460]	; (8000bb4 <MX_GPIO_Init+0x1f4>)
 80009e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80009f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009f4:	4b6f      	ldr	r3, [pc, #444]	; (8000bb4 <MX_GPIO_Init+0x1f4>)
 80009f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009fa:	4a6e      	ldr	r2, [pc, #440]	; (8000bb4 <MX_GPIO_Init+0x1f4>)
 80009fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a04:	4b6b      	ldr	r3, [pc, #428]	; (8000bb4 <MX_GPIO_Init+0x1f4>)
 8000a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8000a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a12:	4b68      	ldr	r3, [pc, #416]	; (8000bb4 <MX_GPIO_Init+0x1f4>)
 8000a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a18:	4a66      	ldr	r2, [pc, #408]	; (8000bb4 <MX_GPIO_Init+0x1f4>)
 8000a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a22:	4b64      	ldr	r3, [pc, #400]	; (8000bb4 <MX_GPIO_Init+0x1f4>)
 8000a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a2c:	623b      	str	r3, [r7, #32]
 8000a2e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a30:	4b60      	ldr	r3, [pc, #384]	; (8000bb4 <MX_GPIO_Init+0x1f4>)
 8000a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a36:	4a5f      	ldr	r2, [pc, #380]	; (8000bb4 <MX_GPIO_Init+0x1f4>)
 8000a38:	f043 0310 	orr.w	r3, r3, #16
 8000a3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a40:	4b5c      	ldr	r3, [pc, #368]	; (8000bb4 <MX_GPIO_Init+0x1f4>)
 8000a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a46:	f003 0310 	and.w	r3, r3, #16
 8000a4a:	61fb      	str	r3, [r7, #28]
 8000a4c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000a4e:	4b59      	ldr	r3, [pc, #356]	; (8000bb4 <MX_GPIO_Init+0x1f4>)
 8000a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a54:	4a57      	ldr	r2, [pc, #348]	; (8000bb4 <MX_GPIO_Init+0x1f4>)
 8000a56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a5e:	4b55      	ldr	r3, [pc, #340]	; (8000bb4 <MX_GPIO_Init+0x1f4>)
 8000a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a68:	61bb      	str	r3, [r7, #24]
 8000a6a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a6c:	4b51      	ldr	r3, [pc, #324]	; (8000bb4 <MX_GPIO_Init+0x1f4>)
 8000a6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a72:	4a50      	ldr	r2, [pc, #320]	; (8000bb4 <MX_GPIO_Init+0x1f4>)
 8000a74:	f043 0308 	orr.w	r3, r3, #8
 8000a78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a7c:	4b4d      	ldr	r3, [pc, #308]	; (8000bb4 <MX_GPIO_Init+0x1f4>)
 8000a7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a82:	f003 0308 	and.w	r3, r3, #8
 8000a86:	617b      	str	r3, [r7, #20]
 8000a88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a8a:	4b4a      	ldr	r3, [pc, #296]	; (8000bb4 <MX_GPIO_Init+0x1f4>)
 8000a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a90:	4a48      	ldr	r2, [pc, #288]	; (8000bb4 <MX_GPIO_Init+0x1f4>)
 8000a92:	f043 0304 	orr.w	r3, r3, #4
 8000a96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a9a:	4b46      	ldr	r3, [pc, #280]	; (8000bb4 <MX_GPIO_Init+0x1f4>)
 8000a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa0:	f003 0304 	and.w	r3, r3, #4
 8000aa4:	613b      	str	r3, [r7, #16]
 8000aa6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa8:	4b42      	ldr	r3, [pc, #264]	; (8000bb4 <MX_GPIO_Init+0x1f4>)
 8000aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aae:	4a41      	ldr	r2, [pc, #260]	; (8000bb4 <MX_GPIO_Init+0x1f4>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ab8:	4b3e      	ldr	r3, [pc, #248]	; (8000bb4 <MX_GPIO_Init+0x1f4>)
 8000aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ac6:	4b3b      	ldr	r3, [pc, #236]	; (8000bb4 <MX_GPIO_Init+0x1f4>)
 8000ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000acc:	4a39      	ldr	r2, [pc, #228]	; (8000bb4 <MX_GPIO_Init+0x1f4>)
 8000ace:	f043 0320 	orr.w	r3, r3, #32
 8000ad2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ad6:	4b37      	ldr	r3, [pc, #220]	; (8000bb4 <MX_GPIO_Init+0x1f4>)
 8000ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000adc:	f003 0320 	and.w	r3, r3, #32
 8000ae0:	60bb      	str	r3, [r7, #8]
 8000ae2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ae4:	4b33      	ldr	r3, [pc, #204]	; (8000bb4 <MX_GPIO_Init+0x1f4>)
 8000ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aea:	4a32      	ldr	r2, [pc, #200]	; (8000bb4 <MX_GPIO_Init+0x1f4>)
 8000aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000af4:	4b2f      	ldr	r3, [pc, #188]	; (8000bb4 <MX_GPIO_Init+0x1f4>)
 8000af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D3_ImprGnD_GPIO_Port, D3_ImprGnD_Pin, GPIO_PIN_RESET);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2140      	movs	r1, #64	; 0x40
 8000b06:	482c      	ldr	r0, [pc, #176]	; (8000bb8 <MX_GPIO_Init+0x1f8>)
 8000b08:	f010 fc00 	bl	801130c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b0c:	2308      	movs	r3, #8
 8000b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b10:	2300      	movs	r3, #0
 8000b12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4827      	ldr	r0, [pc, #156]	; (8000bbc <MX_GPIO_Init+0x1fc>)
 8000b20:	f010 f922 	bl	8010d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b36:	4619      	mov	r1, r3
 8000b38:	4821      	ldr	r0, [pc, #132]	; (8000bc0 <MX_GPIO_Init+0x200>)
 8000b3a:	f010 f915 	bl	8010d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b44:	2302      	movs	r3, #2
 8000b46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000b50:	2300      	movs	r3, #0
 8000b52:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4817      	ldr	r0, [pc, #92]	; (8000bb8 <MX_GPIO_Init+0x1f8>)
 8000b5c:	f010 f904 	bl	8010d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : D2_SWToggle_Pin */
  GPIO_InitStruct.Pin = D2_SWToggle_Pin;
 8000b60:	2308      	movs	r3, #8
 8000b62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b64:	2300      	movs	r3, #0
 8000b66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(D2_SWToggle_GPIO_Port, &GPIO_InitStruct);
 8000b6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b70:	4619      	mov	r1, r3
 8000b72:	4814      	ldr	r0, [pc, #80]	; (8000bc4 <MX_GPIO_Init+0x204>)
 8000b74:	f010 f8f8 	bl	8010d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : D4_MoButton_Pin */
  GPIO_InitStruct.Pin = D4_MoButton_Pin;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b80:	2301      	movs	r3, #1
 8000b82:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(D4_MoButton_GPIO_Port, &GPIO_InitStruct);
 8000b84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b88:	4619      	mov	r1, r3
 8000b8a:	480f      	ldr	r0, [pc, #60]	; (8000bc8 <MX_GPIO_Init+0x208>)
 8000b8c:	f010 f8ec 	bl	8010d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : D3_ImprGnD_Pin */
  GPIO_InitStruct.Pin = D3_ImprGnD_Pin;
 8000b90:	2340      	movs	r3, #64	; 0x40
 8000b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b94:	2301      	movs	r3, #1
 8000b96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(D3_ImprGnD_GPIO_Port, &GPIO_InitStruct);
 8000ba0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4804      	ldr	r0, [pc, #16]	; (8000bb8 <MX_GPIO_Init+0x1f8>)
 8000ba8:	f010 f8de 	bl	8010d68 <HAL_GPIO_Init>

}
 8000bac:	bf00      	nop
 8000bae:	3740      	adds	r7, #64	; 0x40
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	58024400 	.word	0x58024400
 8000bb8:	58020000 	.word	0x58020000
 8000bbc:	58022000 	.word	0x58022000
 8000bc0:	58020800 	.word	0x58020800
 8000bc4:	58021800 	.word	0x58021800
 8000bc8:	58022800 	.word	0x58022800

08000bcc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	f009 fd27 	bl	800a628 <osDelay>
 8000bda:	e7fb      	b.n	8000bd4 <StartDefaultTask+0x8>

08000bdc <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000be2:	463b      	mov	r3, r7
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000bee:	f00f fde1 	bl	80107b4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8000bfa:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000bfe:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1MB;
 8000c00:	2313      	movs	r3, #19
 8000c02:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000c10:	2301      	movs	r3, #1
 8000c12:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000c14:	2300      	movs	r3, #0
 8000c16:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c20:	463b      	mov	r3, r7
 8000c22:	4618      	mov	r0, r3
 8000c24:	f00f fdfe 	bl	8010824 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 8000c2c:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8000c30:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8000c32:	231a      	movs	r3, #26
 8000c34:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c36:	463b      	mov	r3, r7
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f00f fdf3 	bl	8010824 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c3e:	2004      	movs	r0, #4
 8000c40:	f00f fdd0 	bl	80107e4 <HAL_MPU_Enable>

}
 8000c44:	bf00      	nop
 8000c46:	3710      	adds	r7, #16
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d101      	bne.n	8000c62 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c5e:	f00f fc6b 	bl	8010538 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40001000 	.word	0x40001000

08000c70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c74:	b672      	cpsid	i
}
 8000c76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <Error_Handler+0x8>
	...

08000c7c <initLtdcClocks>:

/**
 * @brief initLtdcClocks initialize LTDC clocks
 */
void initLtdcClocks(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08c      	sub	sp, #48	; 0x30
 8000c80:	af00      	add	r7, sp, #0
   // enable the LTDC and DMA2D clocks
   __HAL_RCC_LTDC_CLK_ENABLE();
 8000c82:	4b36      	ldr	r3, [pc, #216]	; (8000d5c <initLtdcClocks+0xe0>)
 8000c84:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000c88:	4a34      	ldr	r2, [pc, #208]	; (8000d5c <initLtdcClocks+0xe0>)
 8000c8a:	f043 0308 	orr.w	r3, r3, #8
 8000c8e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8000c92:	4b32      	ldr	r3, [pc, #200]	; (8000d5c <initLtdcClocks+0xe0>)
 8000c94:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000c98:	f003 0308 	and.w	r3, r3, #8
 8000c9c:	61bb      	str	r3, [r7, #24]
 8000c9e:	69bb      	ldr	r3, [r7, #24]

   // enable GPIOs clock
   __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ca0:	4b2e      	ldr	r3, [pc, #184]	; (8000d5c <initLtdcClocks+0xe0>)
 8000ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca6:	4a2d      	ldr	r2, [pc, #180]	; (8000d5c <initLtdcClocks+0xe0>)
 8000ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cb0:	4b2a      	ldr	r3, [pc, #168]	; (8000d5c <initLtdcClocks+0xe0>)
 8000cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cba:	617b      	str	r3, [r7, #20]
 8000cbc:	697b      	ldr	r3, [r7, #20]
   __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000cbe:	4b27      	ldr	r3, [pc, #156]	; (8000d5c <initLtdcClocks+0xe0>)
 8000cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc4:	4a25      	ldr	r2, [pc, #148]	; (8000d5c <initLtdcClocks+0xe0>)
 8000cc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cce:	4b23      	ldr	r3, [pc, #140]	; (8000d5c <initLtdcClocks+0xe0>)
 8000cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	693b      	ldr	r3, [r7, #16]
   __HAL_RCC_GPIOK_CLK_ENABLE();
 8000cdc:	4b1f      	ldr	r3, [pc, #124]	; (8000d5c <initLtdcClocks+0xe0>)
 8000cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce2:	4a1e      	ldr	r2, [pc, #120]	; (8000d5c <initLtdcClocks+0xe0>)
 8000ce4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ce8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cec:	4b1b      	ldr	r3, [pc, #108]	; (8000d5c <initLtdcClocks+0xe0>)
 8000cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
   __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cfa:	4b18      	ldr	r3, [pc, #96]	; (8000d5c <initLtdcClocks+0xe0>)
 8000cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d00:	4a16      	ldr	r2, [pc, #88]	; (8000d5c <initLtdcClocks+0xe0>)
 8000d02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d0a:	4b14      	ldr	r3, [pc, #80]	; (8000d5c <initLtdcClocks+0xe0>)
 8000d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d14:	60bb      	str	r3, [r7, #8]
 8000d16:	68bb      	ldr	r3, [r7, #8]
   __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d18:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <initLtdcClocks+0xe0>)
 8000d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d1e:	4a0f      	ldr	r2, [pc, #60]	; (8000d5c <initLtdcClocks+0xe0>)
 8000d20:	f043 0308 	orr.w	r3, r3, #8
 8000d24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <initLtdcClocks+0xe0>)
 8000d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d2e:	f003 0308 	and.w	r3, r3, #8
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]

   // LCD_DISP pin has to be manually controlled
   GPIO_InitTypeDef gpio_init_structure;
   gpio_init_structure.Pin = GPIO_PIN_7;
 8000d36:	2380      	movs	r3, #128	; 0x80
 8000d38:	61fb      	str	r3, [r7, #28]
   gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	623b      	str	r3, [r7, #32]
   HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8000d3e:	f107 031c 	add.w	r3, r7, #28
 8000d42:	4619      	mov	r1, r3
 8000d44:	4806      	ldr	r0, [pc, #24]	; (8000d60 <initLtdcClocks+0xe4>)
 8000d46:	f010 f80f 	bl	8010d68 <HAL_GPIO_Init>

   // assert display enable LCD_DISP pin
   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	2180      	movs	r1, #128	; 0x80
 8000d4e:	4804      	ldr	r0, [pc, #16]	; (8000d60 <initLtdcClocks+0xe4>)
 8000d50:	f010 fadc 	bl	801130c <HAL_GPIO_WritePin>
}
 8000d54:	bf00      	nop
 8000d56:	3730      	adds	r7, #48	; 0x30
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	58024400 	.word	0x58024400
 8000d60:	58020c00 	.word	0x58020c00

08000d64 <initBspQuadSpi>:
/**
 * @brief initBspQuadSpi initialize QSPI via BSP
 * @param error_handler callback to error handler
 */
void initBspQuadSpi(void (*error_handler)())
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
   BSP_QSPI_Init_t init;

   init.InterfaceMode = MT25TL01G_QPI_MODE;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	733b      	strb	r3, [r7, #12]
   init.TransferRate = MT25TL01G_DTR_TRANSFER;
 8000d70:	2301      	movs	r3, #1
 8000d72:	737b      	strb	r3, [r7, #13]
   init.DualFlashMode = MT25TL01G_DUALFLASH_ENABLE;
 8000d74:	2340      	movs	r3, #64	; 0x40
 8000d76:	73bb      	strb	r3, [r7, #14]

   if (BSP_QSPI_Init(0, &init) != BSP_ERROR_NONE)
 8000d78:	f107 030c 	add.w	r3, r7, #12
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	2000      	movs	r0, #0
 8000d80:	f00e fb58 	bl	800f434 <BSP_QSPI_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <initBspQuadSpi+0x2a>
   {
      error_handler();
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4798      	blx	r3
   }

   if (BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000d8e:	2000      	movs	r0, #0
 8000d90:	f00e fc2a 	bl	800f5e8 <BSP_QSPI_EnableMemoryMappedMode>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <initBspQuadSpi+0x3a>
   {
      error_handler();
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4798      	blx	r3
   }
}
 8000d9e:	bf00      	nop
 8000da0:	3710      	adds	r7, #16
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <initBspSdRam>:
/**
 * @brief initBspSdRam initialize SDRAM/FMC via BSP
 * @param error_handler callback to error handler
 */
void initBspSdRam(void (*error_handler)())
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
   BSP_SDRAM_DeInit(0);
 8000dae:	2000      	movs	r0, #0
 8000db0:	f00e ff88 	bl	800fcc4 <BSP_SDRAM_DeInit>

   if (BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8000db4:	2000      	movs	r0, #0
 8000db6:	f00e ff29 	bl	800fc0c <BSP_SDRAM_Init>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <initBspSdRam+0x1e>
   {
      error_handler();
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4798      	blx	r3
   }
}
 8000dc4:	bf00      	nop
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd2:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <HAL_MspInit+0x38>)
 8000dd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000dd8:	4a0a      	ldr	r2, [pc, #40]	; (8000e04 <HAL_MspInit+0x38>)
 8000dda:	f043 0302 	orr.w	r3, r3, #2
 8000dde:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000de2:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <HAL_MspInit+0x38>)
 8000de4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000de8:	f003 0302 	and.w	r3, r3, #2
 8000dec:	607b      	str	r3, [r7, #4]
 8000dee:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000df0:	2200      	movs	r2, #0
 8000df2:	210f      	movs	r1, #15
 8000df4:	f06f 0001 	mvn.w	r0, #1
 8000df8:	f00f fca6 	bl	8010748 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	58024400 	.word	0x58024400

08000e08 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a0b      	ldr	r2, [pc, #44]	; (8000e44 <HAL_CRC_MspInit+0x3c>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d10e      	bne.n	8000e38 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e1a:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <HAL_CRC_MspInit+0x40>)
 8000e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e20:	4a09      	ldr	r2, [pc, #36]	; (8000e48 <HAL_CRC_MspInit+0x40>)
 8000e22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e2a:	4b07      	ldr	r3, [pc, #28]	; (8000e48 <HAL_CRC_MspInit+0x40>)
 8000e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000e38:	bf00      	nop
 8000e3a:	3714      	adds	r7, #20
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	58024c00 	.word	0x58024c00
 8000e48:	58024400 	.word	0x58024400

08000e4c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a0e      	ldr	r2, [pc, #56]	; (8000e94 <HAL_DMA2D_MspInit+0x48>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d116      	bne.n	8000e8c <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <HAL_DMA2D_MspInit+0x4c>)
 8000e60:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000e64:	4a0c      	ldr	r2, [pc, #48]	; (8000e98 <HAL_DMA2D_MspInit+0x4c>)
 8000e66:	f043 0310 	orr.w	r3, r3, #16
 8000e6a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <HAL_DMA2D_MspInit+0x4c>)
 8000e70:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000e74:	f003 0310 	and.w	r3, r3, #16
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2105      	movs	r1, #5
 8000e80:	205a      	movs	r0, #90	; 0x5a
 8000e82:	f00f fc61 	bl	8010748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000e86:	205a      	movs	r0, #90	; 0x5a
 8000e88:	f00f fc78 	bl	801077c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000e8c:	bf00      	nop
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	52001000 	.word	0x52001000
 8000e98:	58024400 	.word	0x58024400

08000e9c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b0bc      	sub	sp, #240	; 0xf0
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eb4:	f107 0320 	add.w	r3, r7, #32
 8000eb8:	22bc      	movs	r2, #188	; 0xbc
 8000eba:	2100      	movs	r1, #0
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f029 fa17 	bl	802a2f0 <memset>
  if(hltdc->Instance==LTDC)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a68      	ldr	r2, [pc, #416]	; (8001068 <HAL_LTDC_MspInit+0x1cc>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	f040 80c8 	bne.w	800105e <HAL_LTDC_MspInit+0x1c2>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000ece:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000ed2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 5;
 8000ed4:	2305      	movs	r3, #5
 8000ed6:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3N = 160;
 8000ed8:	23a0      	movs	r3, #160	; 0xa0
 8000eda:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000edc:	2302      	movs	r3, #2
 8000ede:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3R = 83;
 8000ee4:	2353      	movs	r3, #83	; 0x53
 8000ee6:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8000ee8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000eec:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ef6:	f107 0320 	add.w	r3, r7, #32
 8000efa:	4618      	mov	r0, r3
 8000efc:	f013 fd44 	bl	8014988 <HAL_RCCEx_PeriphCLKConfig>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <HAL_LTDC_MspInit+0x6e>
    {
      Error_Handler();
 8000f06:	f7ff feb3 	bl	8000c70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000f0a:	4b58      	ldr	r3, [pc, #352]	; (800106c <HAL_LTDC_MspInit+0x1d0>)
 8000f0c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000f10:	4a56      	ldr	r2, [pc, #344]	; (800106c <HAL_LTDC_MspInit+0x1d0>)
 8000f12:	f043 0308 	orr.w	r3, r3, #8
 8000f16:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8000f1a:	4b54      	ldr	r3, [pc, #336]	; (800106c <HAL_LTDC_MspInit+0x1d0>)
 8000f1c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000f20:	f003 0308 	and.w	r3, r3, #8
 8000f24:	61fb      	str	r3, [r7, #28]
 8000f26:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000f28:	4b50      	ldr	r3, [pc, #320]	; (800106c <HAL_LTDC_MspInit+0x1d0>)
 8000f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2e:	4a4f      	ldr	r2, [pc, #316]	; (800106c <HAL_LTDC_MspInit+0x1d0>)
 8000f30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f38:	4b4c      	ldr	r3, [pc, #304]	; (800106c <HAL_LTDC_MspInit+0x1d0>)
 8000f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f42:	61bb      	str	r3, [r7, #24]
 8000f44:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000f46:	4b49      	ldr	r3, [pc, #292]	; (800106c <HAL_LTDC_MspInit+0x1d0>)
 8000f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f4c:	4a47      	ldr	r2, [pc, #284]	; (800106c <HAL_LTDC_MspInit+0x1d0>)
 8000f4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f56:	4b45      	ldr	r3, [pc, #276]	; (800106c <HAL_LTDC_MspInit+0x1d0>)
 8000f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f60:	617b      	str	r3, [r7, #20]
 8000f62:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000f64:	4b41      	ldr	r3, [pc, #260]	; (800106c <HAL_LTDC_MspInit+0x1d0>)
 8000f66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f6a:	4a40      	ldr	r2, [pc, #256]	; (800106c <HAL_LTDC_MspInit+0x1d0>)
 8000f6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f74:	4b3d      	ldr	r3, [pc, #244]	; (800106c <HAL_LTDC_MspInit+0x1d0>)
 8000f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f7e:	613b      	str	r3, [r7, #16]
 8000f80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f82:	4b3a      	ldr	r3, [pc, #232]	; (800106c <HAL_LTDC_MspInit+0x1d0>)
 8000f84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f88:	4a38      	ldr	r2, [pc, #224]	; (800106c <HAL_LTDC_MspInit+0x1d0>)
 8000f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f92:	4b36      	ldr	r3, [pc, #216]	; (800106c <HAL_LTDC_MspInit+0x1d0>)
 8000f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	68fb      	ldr	r3, [r7, #12]
    PJ5     ------> LTDC_R6
    PH9     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 8000fa0:	23fc      	movs	r3, #252	; 0xfc
 8000fa2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_7|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fb8:	230e      	movs	r3, #14
 8000fba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000fbe:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	482a      	ldr	r0, [pc, #168]	; (8001070 <HAL_LTDC_MspInit+0x1d4>)
 8000fc6:	f00f fecf 	bl	8010d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 8000fca:	f24d 2303 	movw	r3, #53763	; 0xd203
 8000fce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fe4:	230e      	movs	r3, #14
 8000fe6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000fea:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4820      	ldr	r0, [pc, #128]	; (8001074 <HAL_LTDC_MspInit+0x1d8>)
 8000ff2:	f00f feb9 	bl	8010d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 8000ff6:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8000ffa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffe:	2302      	movs	r3, #2
 8001000:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800100a:	2302      	movs	r3, #2
 800100c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001010:	230e      	movs	r3, #14
 8001012:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001016:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800101a:	4619      	mov	r1, r3
 800101c:	4816      	ldr	r0, [pc, #88]	; (8001078 <HAL_LTDC_MspInit+0x1dc>)
 800101e:	f00f fea3 	bl	8010d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001022:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001026:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102a:	2302      	movs	r3, #2
 800102c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001036:	2302      	movs	r3, #2
 8001038:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800103c:	230e      	movs	r3, #14
 800103e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001042:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001046:	4619      	mov	r1, r3
 8001048:	480c      	ldr	r0, [pc, #48]	; (800107c <HAL_LTDC_MspInit+0x1e0>)
 800104a:	f00f fe8d 	bl	8010d68 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800104e:	2200      	movs	r2, #0
 8001050:	2105      	movs	r1, #5
 8001052:	2058      	movs	r0, #88	; 0x58
 8001054:	f00f fb78 	bl	8010748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001058:	2058      	movs	r0, #88	; 0x58
 800105a:	f00f fb8f 	bl	801077c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800105e:	bf00      	nop
 8001060:	37f0      	adds	r7, #240	; 0xf0
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	50001000 	.word	0x50001000
 800106c:	58024400 	.word	0x58024400
 8001070:	58022800 	.word	0x58022800
 8001074:	58022000 	.word	0x58022000
 8001078:	58022400 	.word	0x58022400
 800107c:	58021c00 	.word	0x58021c00

08001080 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b0bc      	sub	sp, #240	; 0xf0
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001088:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001098:	f107 0320 	add.w	r3, r7, #32
 800109c:	22bc      	movs	r2, #188	; 0xbc
 800109e:	2100      	movs	r1, #0
 80010a0:	4618      	mov	r0, r3
 80010a2:	f029 f925 	bl	802a2f0 <memset>
  if(hqspi->Instance==QUADSPI)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a76      	ldr	r2, [pc, #472]	; (8001284 <HAL_QSPI_MspInit+0x204>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	f040 80e4 	bne.w	800127a <HAL_QSPI_MspInit+0x1fa>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80010b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010b6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 80010b8:	2300      	movs	r3, #0
 80010ba:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010bc:	f107 0320 	add.w	r3, r7, #32
 80010c0:	4618      	mov	r0, r3
 80010c2:	f013 fc61 	bl	8014988 <HAL_RCCEx_PeriphCLKConfig>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
 80010cc:	f7ff fdd0 	bl	8000c70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80010d0:	4b6d      	ldr	r3, [pc, #436]	; (8001288 <HAL_QSPI_MspInit+0x208>)
 80010d2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80010d6:	4a6c      	ldr	r2, [pc, #432]	; (8001288 <HAL_QSPI_MspInit+0x208>)
 80010d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010dc:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80010e0:	4b69      	ldr	r3, [pc, #420]	; (8001288 <HAL_QSPI_MspInit+0x208>)
 80010e2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80010e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ea:	61fb      	str	r3, [r7, #28]
 80010ec:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80010ee:	4b66      	ldr	r3, [pc, #408]	; (8001288 <HAL_QSPI_MspInit+0x208>)
 80010f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f4:	4a64      	ldr	r2, [pc, #400]	; (8001288 <HAL_QSPI_MspInit+0x208>)
 80010f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010fe:	4b62      	ldr	r3, [pc, #392]	; (8001288 <HAL_QSPI_MspInit+0x208>)
 8001100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001108:	61bb      	str	r3, [r7, #24]
 800110a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800110c:	4b5e      	ldr	r3, [pc, #376]	; (8001288 <HAL_QSPI_MspInit+0x208>)
 800110e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001112:	4a5d      	ldr	r2, [pc, #372]	; (8001288 <HAL_QSPI_MspInit+0x208>)
 8001114:	f043 0320 	orr.w	r3, r3, #32
 8001118:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800111c:	4b5a      	ldr	r3, [pc, #360]	; (8001288 <HAL_QSPI_MspInit+0x208>)
 800111e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001122:	f003 0320 	and.w	r3, r3, #32
 8001126:	617b      	str	r3, [r7, #20]
 8001128:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800112a:	4b57      	ldr	r3, [pc, #348]	; (8001288 <HAL_QSPI_MspInit+0x208>)
 800112c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001130:	4a55      	ldr	r2, [pc, #340]	; (8001288 <HAL_QSPI_MspInit+0x208>)
 8001132:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001136:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800113a:	4b53      	ldr	r3, [pc, #332]	; (8001288 <HAL_QSPI_MspInit+0x208>)
 800113c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001144:	613b      	str	r3, [r7, #16]
 8001146:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001148:	4b4f      	ldr	r3, [pc, #316]	; (8001288 <HAL_QSPI_MspInit+0x208>)
 800114a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800114e:	4a4e      	ldr	r2, [pc, #312]	; (8001288 <HAL_QSPI_MspInit+0x208>)
 8001150:	f043 0308 	orr.w	r3, r3, #8
 8001154:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001158:	4b4b      	ldr	r3, [pc, #300]	; (8001288 <HAL_QSPI_MspInit+0x208>)
 800115a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800115e:	f003 0308 	and.w	r3, r3, #8
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PH2     ------> QUADSPI_BK2_IO0
    PH3     ------> QUADSPI_BK2_IO1
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8001166:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 800116a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116e:	2302      	movs	r3, #2
 8001170:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117a:	2303      	movs	r3, #3
 800117c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001180:	2309      	movs	r3, #9
 8001182:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001186:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800118a:	4619      	mov	r1, r3
 800118c:	483f      	ldr	r0, [pc, #252]	; (800128c <HAL_QSPI_MspInit+0x20c>)
 800118e:	f00f fdeb 	bl	8010d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001192:	2340      	movs	r3, #64	; 0x40
 8001194:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001198:	2302      	movs	r3, #2
 800119a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800119e:	2301      	movs	r3, #1
 80011a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a4:	2303      	movs	r3, #3
 80011a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80011aa:	230a      	movs	r3, #10
 80011ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011b0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011b4:	4619      	mov	r1, r3
 80011b6:	4835      	ldr	r0, [pc, #212]	; (800128c <HAL_QSPI_MspInit+0x20c>)
 80011b8:	f00f fdd6 	bl	8010d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 80011bc:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80011c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c4:	2302      	movs	r3, #2
 80011c6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d0:	2303      	movs	r3, #3
 80011d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80011d6:	2309      	movs	r3, #9
 80011d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011dc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011e0:	4619      	mov	r1, r3
 80011e2:	482b      	ldr	r0, [pc, #172]	; (8001290 <HAL_QSPI_MspInit+0x210>)
 80011e4:	f00f fdc0 	bl	8010d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f0:	2302      	movs	r3, #2
 80011f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fc:	2303      	movs	r3, #3
 80011fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001202:	230a      	movs	r3, #10
 8001204:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001208:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800120c:	4619      	mov	r1, r3
 800120e:	4820      	ldr	r0, [pc, #128]	; (8001290 <HAL_QSPI_MspInit+0x210>)
 8001210:	f00f fdaa 	bl	8010d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001214:	230c      	movs	r3, #12
 8001216:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121a:	2302      	movs	r3, #2
 800121c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001226:	2303      	movs	r3, #3
 8001228:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800122c:	2309      	movs	r3, #9
 800122e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001232:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001236:	4619      	mov	r1, r3
 8001238:	4816      	ldr	r0, [pc, #88]	; (8001294 <HAL_QSPI_MspInit+0x214>)
 800123a:	f00f fd95 	bl	8010d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800123e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001242:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001246:	2302      	movs	r3, #2
 8001248:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001252:	2303      	movs	r3, #3
 8001254:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001258:	2309      	movs	r3, #9
 800125a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800125e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001262:	4619      	mov	r1, r3
 8001264:	480c      	ldr	r0, [pc, #48]	; (8001298 <HAL_QSPI_MspInit+0x218>)
 8001266:	f00f fd7f 	bl	8010d68 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 5, 0);
 800126a:	2200      	movs	r2, #0
 800126c:	2105      	movs	r1, #5
 800126e:	205c      	movs	r0, #92	; 0x5c
 8001270:	f00f fa6a 	bl	8010748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8001274:	205c      	movs	r0, #92	; 0x5c
 8001276:	f00f fa81 	bl	801077c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800127a:	bf00      	nop
 800127c:	37f0      	adds	r7, #240	; 0xf0
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	52005000 	.word	0x52005000
 8001288:	58024400 	.word	0x58024400
 800128c:	58021800 	.word	0x58021800
 8001290:	58021400 	.word	0x58021400
 8001294:	58021c00 	.word	0x58021c00
 8001298:	58020c00 	.word	0x58020c00

0800129c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	; 0x28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM4)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a1a      	ldr	r2, [pc, #104]	; (8001324 <HAL_TIM_Base_MspInit+0x88>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d12d      	bne.n	800131a <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80012be:	4b1a      	ldr	r3, [pc, #104]	; (8001328 <HAL_TIM_Base_MspInit+0x8c>)
 80012c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012c4:	4a18      	ldr	r2, [pc, #96]	; (8001328 <HAL_TIM_Base_MspInit+0x8c>)
 80012c6:	f043 0304 	orr.w	r3, r3, #4
 80012ca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80012ce:	4b16      	ldr	r3, [pc, #88]	; (8001328 <HAL_TIM_Base_MspInit+0x8c>)
 80012d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012dc:	4b12      	ldr	r3, [pc, #72]	; (8001328 <HAL_TIM_Base_MspInit+0x8c>)
 80012de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012e2:	4a11      	ldr	r2, [pc, #68]	; (8001328 <HAL_TIM_Base_MspInit+0x8c>)
 80012e4:	f043 0302 	orr.w	r3, r3, #2
 80012e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012ec:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <HAL_TIM_Base_MspInit+0x8c>)
 80012ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012fa:	23c0      	movs	r3, #192	; 0xc0
 80012fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fe:	2302      	movs	r3, #2
 8001300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001302:	2301      	movs	r3, #1
 8001304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001306:	2300      	movs	r3, #0
 8001308:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800130a:	2302      	movs	r3, #2
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	4619      	mov	r1, r3
 8001314:	4805      	ldr	r0, [pc, #20]	; (800132c <HAL_TIM_Base_MspInit+0x90>)
 8001316:	f00f fd27 	bl	8010d68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800131a:	bf00      	nop
 800131c:	3728      	adds	r7, #40	; 0x28
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40000800 	.word	0x40000800
 8001328:	58024400 	.word	0x58024400
 800132c:	58020400 	.word	0x58020400

08001330 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001330:	b580      	push	{r7, lr}
 8001332:	b0b6      	sub	sp, #216	; 0xd8
 8001334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001336:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]
 8001342:	60da      	str	r2, [r3, #12]
 8001344:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001346:	4b4f      	ldr	r3, [pc, #316]	; (8001484 <HAL_FMC_MspInit+0x154>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	f040 8096 	bne.w	800147c <HAL_FMC_MspInit+0x14c>
    return;
  }
  FMC_Initialized = 1;
 8001350:	4b4c      	ldr	r3, [pc, #304]	; (8001484 <HAL_FMC_MspInit+0x154>)
 8001352:	2201      	movs	r2, #1
 8001354:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001356:	f107 0308 	add.w	r3, r7, #8
 800135a:	22bc      	movs	r2, #188	; 0xbc
 800135c:	2100      	movs	r1, #0
 800135e:	4618      	mov	r0, r3
 8001360:	f028 ffc6 	bl	802a2f0 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8001364:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001368:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 800136a:	2300      	movs	r3, #0
 800136c:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800136e:	f107 0308 	add.w	r3, r7, #8
 8001372:	4618      	mov	r0, r3
 8001374:	f013 fb08 	bl	8014988 <HAL_RCCEx_PeriphCLKConfig>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <HAL_FMC_MspInit+0x52>
    {
      Error_Handler();
 800137e:	f7ff fc77 	bl	8000c70 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001382:	4b41      	ldr	r3, [pc, #260]	; (8001488 <HAL_FMC_MspInit+0x158>)
 8001384:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001388:	4a3f      	ldr	r2, [pc, #252]	; (8001488 <HAL_FMC_MspInit+0x158>)
 800138a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800138e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001392:	4b3d      	ldr	r3, [pc, #244]	; (8001488 <HAL_FMC_MspInit+0x158>)
 8001394:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001398:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800139c:	607b      	str	r3, [r7, #4]
 800139e:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 80013a0:	f64f 7383 	movw	r3, #65411	; 0xff83
 80013a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a8:	2302      	movs	r3, #2
 80013aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b4:	2303      	movs	r3, #3
 80013b6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013ba:	230c      	movs	r3, #12
 80013bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013c0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80013c4:	4619      	mov	r1, r3
 80013c6:	4831      	ldr	r0, [pc, #196]	; (800148c <HAL_FMC_MspInit+0x15c>)
 80013c8:	f00f fcce 	bl	8010d68 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 80013cc:	f248 1333 	movw	r3, #33075	; 0x8133
 80013d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d4:	2302      	movs	r3, #2
 80013d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e0:	2303      	movs	r3, #3
 80013e2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013e6:	230c      	movs	r3, #12
 80013e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013ec:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80013f0:	4619      	mov	r1, r3
 80013f2:	4827      	ldr	r0, [pc, #156]	; (8001490 <HAL_FMC_MspInit+0x160>)
 80013f4:	f00f fcb8 	bl	8010d68 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 80013f8:	f24c 7303 	movw	r3, #50947	; 0xc703
 80013fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001400:	2302      	movs	r3, #2
 8001402:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140c:	2303      	movs	r3, #3
 800140e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001412:	230c      	movs	r3, #12
 8001414:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001418:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800141c:	4619      	mov	r1, r3
 800141e:	481d      	ldr	r0, [pc, #116]	; (8001494 <HAL_FMC_MspInit+0x164>)
 8001420:	f00f fca2 	bl	8010d68 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8001424:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001428:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142c:	2302      	movs	r3, #2
 800142e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001438:	2303      	movs	r3, #3
 800143a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800143e:	230c      	movs	r3, #12
 8001440:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001444:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001448:	4619      	mov	r1, r3
 800144a:	4813      	ldr	r0, [pc, #76]	; (8001498 <HAL_FMC_MspInit+0x168>)
 800144c:	f00f fc8c 	bl	8010d68 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001450:	23e0      	movs	r3, #224	; 0xe0
 8001452:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001456:	2302      	movs	r3, #2
 8001458:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001462:	2303      	movs	r3, #3
 8001464:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001468:	230c      	movs	r3, #12
 800146a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800146e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001472:	4619      	mov	r1, r3
 8001474:	4809      	ldr	r0, [pc, #36]	; (800149c <HAL_FMC_MspInit+0x16c>)
 8001476:	f00f fc77 	bl	8010d68 <HAL_GPIO_Init>
 800147a:	e000      	b.n	800147e <HAL_FMC_MspInit+0x14e>
    return;
 800147c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800147e:	37d8      	adds	r7, #216	; 0xd8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	24000150 	.word	0x24000150
 8001488:	58024400 	.word	0x58024400
 800148c:	58021000 	.word	0x58021000
 8001490:	58021800 	.word	0x58021800
 8001494:	58020c00 	.word	0x58020c00
 8001498:	58021400 	.word	0x58021400
 800149c:	58021c00 	.word	0x58021c00

080014a0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80014a8:	f7ff ff42 	bl	8001330 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80014ac:	bf00      	nop
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <HAL_FMC_MspDeInit>:

static uint32_t FMC_DeInitialized = 0;

static void HAL_FMC_MspDeInit(void){
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
 80014b8:	4b14      	ldr	r3, [pc, #80]	; (800150c <HAL_FMC_MspDeInit+0x58>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d123      	bne.n	8001508 <HAL_FMC_MspDeInit+0x54>
    return;
  }
  FMC_DeInitialized = 1;
 80014c0:	4b12      	ldr	r3, [pc, #72]	; (800150c <HAL_FMC_MspDeInit+0x58>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_DISABLE();
 80014c6:	4b12      	ldr	r3, [pc, #72]	; (8001510 <HAL_FMC_MspDeInit+0x5c>)
 80014c8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80014cc:	4a10      	ldr	r2, [pc, #64]	; (8001510 <HAL_FMC_MspDeInit+0x5c>)
 80014ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80014d2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 80014d6:	f64f 7183 	movw	r1, #65411	; 0xff83
 80014da:	480e      	ldr	r0, [pc, #56]	; (8001514 <HAL_FMC_MspDeInit+0x60>)
 80014dc:	f00f fdf4 	bl	80110c8 <HAL_GPIO_DeInit>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14);

  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 80014e0:	f248 1133 	movw	r1, #33075	; 0x8133
 80014e4:	480c      	ldr	r0, [pc, #48]	; (8001518 <HAL_FMC_MspDeInit+0x64>)
 80014e6:	f00f fdef 	bl	80110c8 <HAL_GPIO_DeInit>
                          |GPIO_PIN_0|GPIO_PIN_1);

  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 80014ea:	f24c 7103 	movw	r1, #50947	; 0xc703
 80014ee:	480b      	ldr	r0, [pc, #44]	; (800151c <HAL_FMC_MspDeInit+0x68>)
 80014f0:	f00f fdea 	bl	80110c8 <HAL_GPIO_DeInit>
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8);

  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 80014f4:	f64f 013f 	movw	r1, #63551	; 0xf83f
 80014f8:	4809      	ldr	r0, [pc, #36]	; (8001520 <HAL_FMC_MspDeInit+0x6c>)
 80014fa:	f00f fde5 	bl	80110c8 <HAL_GPIO_DeInit>
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11);

  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 80014fe:	21e0      	movs	r1, #224	; 0xe0
 8001500:	4808      	ldr	r0, [pc, #32]	; (8001524 <HAL_FMC_MspDeInit+0x70>)
 8001502:	f00f fde1 	bl	80110c8 <HAL_GPIO_DeInit>
 8001506:	e000      	b.n	800150a <HAL_FMC_MspDeInit+0x56>
    return;
 8001508:	bf00      	nop

  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}
 800150a:	bd80      	pop	{r7, pc}
 800150c:	24000154 	.word	0x24000154
 8001510:	58024400 	.word	0x58024400
 8001514:	58021000 	.word	0x58021000
 8001518:	58021800 	.word	0x58021800
 800151c:	58020c00 	.word	0x58020c00
 8001520:	58021400 	.word	0x58021400
 8001524:	58021c00 	.word	0x58021c00

08001528 <HAL_SDRAM_MspDeInit>:

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspDeInit 0 */

  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
 8001530:	f7ff ffc0 	bl	80014b4 <HAL_FMC_MspDeInit>
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
 8001534:	bf00      	nop
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b090      	sub	sp, #64	; 0x40
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b0f      	cmp	r3, #15
 8001548:	d827      	bhi.n	800159a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800154a:	2200      	movs	r2, #0
 800154c:	6879      	ldr	r1, [r7, #4]
 800154e:	2036      	movs	r0, #54	; 0x36
 8001550:	f00f f8fa 	bl	8010748 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001554:	2036      	movs	r0, #54	; 0x36
 8001556:	f00f f911 	bl	801077c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800155a:	4a29      	ldr	r2, [pc, #164]	; (8001600 <HAL_InitTick+0xc4>)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001560:	4b28      	ldr	r3, [pc, #160]	; (8001604 <HAL_InitTick+0xc8>)
 8001562:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001566:	4a27      	ldr	r2, [pc, #156]	; (8001604 <HAL_InitTick+0xc8>)
 8001568:	f043 0310 	orr.w	r3, r3, #16
 800156c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001570:	4b24      	ldr	r3, [pc, #144]	; (8001604 <HAL_InitTick+0xc8>)
 8001572:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001576:	f003 0310 	and.w	r3, r3, #16
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800157e:	f107 0210 	add.w	r2, r7, #16
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	4611      	mov	r1, r2
 8001588:	4618      	mov	r0, r3
 800158a:	f013 f9bb 	bl	8014904 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800158e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001590:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001594:	2b00      	cmp	r3, #0
 8001596:	d106      	bne.n	80015a6 <HAL_InitTick+0x6a>
 8001598:	e001      	b.n	800159e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e02b      	b.n	80015f6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800159e:	f013 f985 	bl	80148ac <HAL_RCC_GetPCLK1Freq>
 80015a2:	63f8      	str	r0, [r7, #60]	; 0x3c
 80015a4:	e004      	b.n	80015b0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80015a6:	f013 f981 	bl	80148ac <HAL_RCC_GetPCLK1Freq>
 80015aa:	4603      	mov	r3, r0
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015b2:	4a15      	ldr	r2, [pc, #84]	; (8001608 <HAL_InitTick+0xcc>)
 80015b4:	fba2 2303 	umull	r2, r3, r2, r3
 80015b8:	0c9b      	lsrs	r3, r3, #18
 80015ba:	3b01      	subs	r3, #1
 80015bc:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80015be:	4b13      	ldr	r3, [pc, #76]	; (800160c <HAL_InitTick+0xd0>)
 80015c0:	4a13      	ldr	r2, [pc, #76]	; (8001610 <HAL_InitTick+0xd4>)
 80015c2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80015c4:	4b11      	ldr	r3, [pc, #68]	; (800160c <HAL_InitTick+0xd0>)
 80015c6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015ca:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80015cc:	4a0f      	ldr	r2, [pc, #60]	; (800160c <HAL_InitTick+0xd0>)
 80015ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015d0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80015d2:	4b0e      	ldr	r3, [pc, #56]	; (800160c <HAL_InitTick+0xd0>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d8:	4b0c      	ldr	r3, [pc, #48]	; (800160c <HAL_InitTick+0xd0>)
 80015da:	2200      	movs	r2, #0
 80015dc:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80015de:	480b      	ldr	r0, [pc, #44]	; (800160c <HAL_InitTick+0xd0>)
 80015e0:	f014 fb2b 	bl	8015c3a <HAL_TIM_Base_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d104      	bne.n	80015f4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80015ea:	4808      	ldr	r0, [pc, #32]	; (800160c <HAL_InitTick+0xd0>)
 80015ec:	f014 fb7c 	bl	8015ce8 <HAL_TIM_Base_Start_IT>
 80015f0:	4603      	mov	r3, r0
 80015f2:	e000      	b.n	80015f6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3740      	adds	r7, #64	; 0x40
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	24000050 	.word	0x24000050
 8001604:	58024400 	.word	0x58024400
 8001608:	431bde83 	.word	0x431bde83
 800160c:	2400ba74 	.word	0x2400ba74
 8001610:	40001000 	.word	0x40001000

08001614 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001618:	e7fe      	b.n	8001618 <NMI_Handler+0x4>

0800161a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800161e:	e7fe      	b.n	800161e <HardFault_Handler+0x4>

08001620 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001624:	e7fe      	b.n	8001624 <MemManage_Handler+0x4>

08001626 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800162a:	e7fe      	b.n	800162a <BusFault_Handler+0x4>

0800162c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001630:	e7fe      	b.n	8001630 <UsageFault_Handler+0x4>

08001632 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001644:	4802      	ldr	r0, [pc, #8]	; (8001650 <TIM6_DAC_IRQHandler+0x10>)
 8001646:	f014 fbc7 	bl	8015dd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	2400ba74 	.word	0x2400ba74

08001654 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001658:	4802      	ldr	r0, [pc, #8]	; (8001664 <LTDC_IRQHandler+0x10>)
 800165a:	f010 fdc9 	bl	80121f0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	2400b8e0 	.word	0x2400b8e0

08001668 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800166c:	4802      	ldr	r0, [pc, #8]	; (8001678 <DMA2D_IRQHandler+0x10>)
 800166e:	f00f fa6b 	bl	8010b48 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	2400b9c0 	.word	0x2400b9c0

0800167c <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8001680:	4802      	ldr	r0, [pc, #8]	; (800168c <QUADSPI_IRQHandler+0x10>)
 8001682:	f011 faaf 	bl	8012be4 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	2400ba28 	.word	0x2400ba28

08001690 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
	return 1;
 8001694:	2301      	movs	r3, #1
}
 8001696:	4618      	mov	r0, r3
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <_kill>:

int _kill(int pid, int sig)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80016aa:	f028 fccd 	bl	802a048 <__errno>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2216      	movs	r2, #22
 80016b2:	601a      	str	r2, [r3, #0]
	return -1;
 80016b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <_exit>:

void _exit (int status)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80016c8:	f04f 31ff 	mov.w	r1, #4294967295
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f7ff ffe7 	bl	80016a0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80016d2:	e7fe      	b.n	80016d2 <_exit+0x12>

080016d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]
 80016e4:	e00a      	b.n	80016fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016e6:	f3af 8000 	nop.w
 80016ea:	4601      	mov	r1, r0
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	1c5a      	adds	r2, r3, #1
 80016f0:	60ba      	str	r2, [r7, #8]
 80016f2:	b2ca      	uxtb	r2, r1
 80016f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	3301      	adds	r3, #1
 80016fa:	617b      	str	r3, [r7, #20]
 80016fc:	697a      	ldr	r2, [r7, #20]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	429a      	cmp	r2, r3
 8001702:	dbf0      	blt.n	80016e6 <_read+0x12>
	}

return len;
 8001704:	687b      	ldr	r3, [r7, #4]
}
 8001706:	4618      	mov	r0, r3
 8001708:	3718      	adds	r7, #24
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b086      	sub	sp, #24
 8001712:	af00      	add	r7, sp, #0
 8001714:	60f8      	str	r0, [r7, #12]
 8001716:	60b9      	str	r1, [r7, #8]
 8001718:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800171a:	2300      	movs	r3, #0
 800171c:	617b      	str	r3, [r7, #20]
 800171e:	e009      	b.n	8001734 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	1c5a      	adds	r2, r3, #1
 8001724:	60ba      	str	r2, [r7, #8]
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	3301      	adds	r3, #1
 8001732:	617b      	str	r3, [r7, #20]
 8001734:	697a      	ldr	r2, [r7, #20]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	429a      	cmp	r2, r3
 800173a:	dbf1      	blt.n	8001720 <_write+0x12>
	}
	return len;
 800173c:	687b      	ldr	r3, [r7, #4]
}
 800173e:	4618      	mov	r0, r3
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <_close>:

int _close(int file)
{
 8001746:	b480      	push	{r7}
 8001748:	b083      	sub	sp, #12
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
	return -1;
 800174e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001752:	4618      	mov	r0, r3
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800175e:	b480      	push	{r7}
 8001760:	b083      	sub	sp, #12
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
 8001766:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800176e:	605a      	str	r2, [r3, #4]
	return 0;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <_isatty>:

int _isatty(int file)
{
 800177e:	b480      	push	{r7}
 8001780:	b083      	sub	sp, #12
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
	return 1;
 8001786:	2301      	movs	r3, #1
}
 8001788:	4618      	mov	r0, r3
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
	return 0;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
	...

080017b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017b8:	4a14      	ldr	r2, [pc, #80]	; (800180c <_sbrk+0x5c>)
 80017ba:	4b15      	ldr	r3, [pc, #84]	; (8001810 <_sbrk+0x60>)
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017c4:	4b13      	ldr	r3, [pc, #76]	; (8001814 <_sbrk+0x64>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d102      	bne.n	80017d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017cc:	4b11      	ldr	r3, [pc, #68]	; (8001814 <_sbrk+0x64>)
 80017ce:	4a12      	ldr	r2, [pc, #72]	; (8001818 <_sbrk+0x68>)
 80017d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017d2:	4b10      	ldr	r3, [pc, #64]	; (8001814 <_sbrk+0x64>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4413      	add	r3, r2
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d207      	bcs.n	80017f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017e0:	f028 fc32 	bl	802a048 <__errno>
 80017e4:	4603      	mov	r3, r0
 80017e6:	220c      	movs	r2, #12
 80017e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ea:	f04f 33ff 	mov.w	r3, #4294967295
 80017ee:	e009      	b.n	8001804 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017f0:	4b08      	ldr	r3, [pc, #32]	; (8001814 <_sbrk+0x64>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017f6:	4b07      	ldr	r3, [pc, #28]	; (8001814 <_sbrk+0x64>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4413      	add	r3, r2
 80017fe:	4a05      	ldr	r2, [pc, #20]	; (8001814 <_sbrk+0x64>)
 8001800:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001802:	68fb      	ldr	r3, [r7, #12]
}
 8001804:	4618      	mov	r0, r3
 8001806:	3718      	adds	r7, #24
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	24080000 	.word	0x24080000
 8001810:	00001000 	.word	0x00001000
 8001814:	24000158 	.word	0x24000158
 8001818:	2400bba0 	.word	0x2400bba0

0800181c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800181c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001854 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001820:	f00c fa14 	bl	800dc4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001824:	480c      	ldr	r0, [pc, #48]	; (8001858 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001826:	490d      	ldr	r1, [pc, #52]	; (800185c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001828:	4a0d      	ldr	r2, [pc, #52]	; (8001860 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800182a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800182c:	e002      	b.n	8001834 <LoopCopyDataInit>

0800182e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800182e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001830:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001832:	3304      	adds	r3, #4

08001834 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001834:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001836:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001838:	d3f9      	bcc.n	800182e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800183a:	4a0a      	ldr	r2, [pc, #40]	; (8001864 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800183c:	4c0a      	ldr	r4, [pc, #40]	; (8001868 <LoopFillZerobss+0x22>)
  movs r3, #0
 800183e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001840:	e001      	b.n	8001846 <LoopFillZerobss>

08001842 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001842:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001844:	3204      	adds	r2, #4

08001846 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001846:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001848:	d3fb      	bcc.n	8001842 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800184a:	f028 fd0b 	bl	802a264 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800184e:	f7fe fd97 	bl	8000380 <main>
  bx  lr
 8001852:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001854:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001858:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800185c:	24000134 	.word	0x24000134
  ldr r2, =_sidata
 8001860:	0802fc80 	.word	0x0802fc80
  ldr r2, =_sbss
 8001864:	24000134 	.word	0x24000134
  ldr r4, =_ebss
 8001868:	2400bba0 	.word	0x2400bba0

0800186c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800186c:	e7fe      	b.n	800186c <ADC3_IRQHandler>

0800186e <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 8001872:	f001 fc69 	bl	8003148 <touchgfx_init>
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}

0800187a <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b082      	sub	sp, #8
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 8001882:	f001 fc8b 	bl	800319c <touchgfx_taskEntry>
}
 8001886:	bf00      	nop
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
	...

08001890 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
    {
 8001898:	4a04      	ldr	r2, [pc, #16]	; (80018ac <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	601a      	str	r2, [r3, #0]
    }
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4618      	mov	r0, r3
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	0802c02c 	.word	0x0802c02c

080018b0 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
    }
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f7ff ffe9 	bl	8001890 <_ZN8touchgfx15TouchControllerD1Ev>
 80018be:	2104      	movs	r1, #4
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f028 fb60 	bl	8029f86 <_ZdlPvj>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4618      	mov	r0, r3
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <_ZN20STM32TouchController4initEv>:

#include <STM32TouchController.hpp>
#include "stm32h745i_touchcontroller.hpp"

void STM32TouchController::init()
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
    STM32H745ITouchController::init();
 80018d8:	f000 faa8 	bl	8001e2c <_ZN25STM32H745ITouchController4initEv>
}
 80018dc:	bf00      	nop
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return STM32H745ITouchController::sampleTouch(x, y);
 80018f0:	6879      	ldr	r1, [r7, #4]
 80018f2:	68b8      	ldr	r0, [r7, #8]
 80018f4:	f000 fabe 	bl	8001e74 <_ZN25STM32H745ITouchController11sampleTouchERlS0_>
 80018f8:	4603      	mov	r3, r0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
	...

08001904 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	4a05      	ldr	r2, [pc, #20]	; (8001924 <_ZN20STM32TouchControllerD1Ev+0x20>)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff ffbb 	bl	8001890 <_ZN8touchgfx15TouchControllerD1Ev>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4618      	mov	r0, r3
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	0802c014 	.word	0x0802c014

08001928 <_ZN20STM32TouchControllerD0Ev>:
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff ffe7 	bl	8001904 <_ZN20STM32TouchControllerD1Ev>
 8001936:	2104      	movs	r1, #4
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f028 fb24 	bl	8029f86 <_ZdlPvj>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4618      	mov	r0, r3
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8001952:	79fb      	ldrb	r3, [r7, #7]
 8001954:	2b03      	cmp	r3, #3
 8001956:	d80c      	bhi.n	8001972 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 8001958:	a201      	add	r2, pc, #4	; (adr r2, 8001960 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 800195a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800195e:	bf00      	nop
 8001960:	08001971 	.word	0x08001971
 8001964:	08001971 	.word	0x08001971
 8001968:	08001971 	.word	0x08001971
 800196c:	08001971 	.word	0x08001971
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
 8001970:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    }
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop

08001980 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	2b03      	cmp	r3, #3
 800198e:	d80c      	bhi.n	80019aa <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 8001990:	a201      	add	r2, pc, #4	; (adr r2, 8001998 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 8001992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001996:	bf00      	nop
 8001998:	080019a9 	.word	0x080019a9
 800199c:	080019a9 	.word	0x080019a9
 80019a0:	080019a9 	.word	0x080019a9
 80019a4:	080019a9 	.word	0x080019a9
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
 80019a8:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    }
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop

080019b8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	71fb      	strb	r3, [r7, #7]
    switch (id)
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	2b03      	cmp	r3, #3
 80019c6:	d80c      	bhi.n	80019e2 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 80019c8:	a201      	add	r2, pc, #4	; (adr r2, 80019d0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 80019ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ce:	bf00      	nop
 80019d0:	080019e1 	.word	0x080019e1
 80019d4:	080019e1 	.word	0x080019e1
 80019d8:	080019e1 	.word	0x080019e1
 80019dc:	080019e1 	.word	0x080019e1
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 80019e0:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop

080019f0 <_ZN8touchgfx3HALD1Ev>:
        DISPLAY_ROTATION = rotate0;
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
    }

    /** Finalizes an instance of the HAL class. */
    virtual ~HAL()
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
    {
 80019f8:	4a04      	ldr	r2, [pc, #16]	; (8001a0c <_ZN8touchgfx3HALD1Ev+0x1c>)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	601a      	str	r2, [r3, #0]
    }
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4618      	mov	r0, r3
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	0802d804 	.word	0x0802d804

08001a10 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
    }
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff ffe9 	bl	80019f0 <_ZN8touchgfx3HALD1Ev>
 8001a1e:	217c      	movs	r1, #124	; 0x7c
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f028 fab0 	bl	8029f86 <_ZdlPvj>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @param  orientation The desired display orientation.
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	70fb      	strb	r3, [r7, #3]
    {
        requestedOrientation = orientation;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	78fa      	ldrb	r2, [r7, #3]
 8001a40:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
     * @param   width   The width of the framebuffer.
     * @param   height  The height of the framebuffer.
     *
     * @see touchgfx_generic_init
     */
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	807b      	strh	r3, [r7, #2]
 8001a64:	4613      	mov	r3, r2
 8001a66:	803b      	strh	r3, [r7, #0]
    {
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001a68:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 8001a6a:	881b      	ldrh	r3, [r3, #0]
 8001a6c:	887a      	ldrh	r2, [r7, #2]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d304      	bcc.n	8001a7c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 8001a72:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 8001a74:	881b      	ldrh	r3, [r3, #0]
 8001a76:	883a      	ldrh	r2, [r7, #0]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d205      	bcs.n	8001a88 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 8001a7c:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 8001a7e:	4a0a      	ldr	r2, [pc, #40]	; (8001aa8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 8001a80:	219e      	movs	r1, #158	; 0x9e
 8001a82:	480a      	ldr	r0, [pc, #40]	; (8001aac <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 8001a84:	f028 faae 	bl	8029fe4 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001a88:	4a09      	ldr	r2, [pc, #36]	; (8001ab0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 8001a8a:	887b      	ldrh	r3, [r7, #2]
 8001a8c:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001a8e:	4a09      	ldr	r2, [pc, #36]	; (8001ab4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 8001a90:	883b      	ldrh	r3, [r7, #0]
 8001a92:	8013      	strh	r3, [r2, #0]
    }
 8001a94:	bf00      	nop
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	2400b5c4 	.word	0x2400b5c4
 8001aa0:	2400b5c6 	.word	0x2400b5c6
 8001aa4:	0802b1e0 	.word	0x0802b1e0
 8001aa8:	0802b244 	.word	0x0802b244
 8001aac:	0802b288 	.word	0x0802b288
 8001ab0:	2400b5ca 	.word	0x2400b5ca
 8001ab4:	2400b5cc 	.word	0x2400b5cc

08001ab8 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d009      	beq.n	8001ade <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685a      	ldr	r2, [r3, #4]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4610      	mov	r0, r2
 8001ad8:	4798      	blx	r3
 8001ada:	4603      	mov	r3, r0
 8001adc:	e000      	b.n	8001ae0 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 8001ade:	2300      	movs	r3, #0
    }
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f016 fdc7 	bl	8018684 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	33a4      	adds	r3, #164	; 0xa4
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	4798      	blx	r3
    }
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
 8001b12:	6039      	str	r1, [r7, #0]
    {
        return false;
 8001b14:	2300      	movs	r3, #0
    }
 8001b16:	4618      	mov	r0, r3
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
	...

08001b24 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double
     *                              buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
 8001b30:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d106      	bne.n	8001b46 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8001b38:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8001b3a:	4a12      	ldr	r2, [pc, #72]	; (8001b84 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8001b3c:	f44f 712b 	mov.w	r1, #684	; 0x2ac
 8001b40:	4811      	ldr	r0, [pc, #68]	; (8001b88 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8001b42:	f028 fa4f 	bl	8029fe4 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	68ba      	ldr	r2, [r7, #8]
 8001b4a:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	683a      	ldr	r2, [r7, #0]
 8001b56:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	bf14      	ite	ne
 8001b5e:	2301      	movne	r3, #1
 8001b60:	2300      	moveq	r3, #0
 8001b62:	b2da      	uxtb	r2, r3
 8001b64:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8001b66:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	bf14      	ite	ne
 8001b6e:	2301      	movne	r3, #1
 8001b70:	2300      	moveq	r3, #0
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8001b76:	701a      	strb	r2, [r3, #0]
    }
 8001b78:	bf00      	nop
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	0802b2dc 	.word	0x0802b2dc
 8001b84:	0802b314 	.word	0x0802b314
 8001b88:	0802b288 	.word	0x0802b288
 8001b8c:	2400b5ce 	.word	0x2400b5ce
 8001b90:	2400b5cf 	.word	0x2400b5cf

08001b94 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8001b9c:	2300      	movs	r3, #0
    }
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d004      	beq.n	8001bc8 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bc2:	887a      	ldrh	r2, [r7, #2]
 8001bc4:	4610      	mov	r0, r2
 8001bc6:	4798      	blx	r3
        }
    }
 8001bc8:	bf00      	nop
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 8001bd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 8001bdc:	4618      	mov	r0, r3
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685a      	ldr	r2, [r3, #4]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	3318      	adds	r3, #24
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4610      	mov	r0, r2
 8001c00:	4798      	blx	r3
 8001c02:	4603      	mov	r3, r0
    }
 8001c04:	4618      	mov	r0, r3
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d011      	beq.n	8001c48 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 8001c24:	4b14      	ldr	r3, [pc, #80]	; (8001c78 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d11e      	bne.n	8001c6a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001c2c:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001c2e:	881b      	ldrh	r3, [r3, #0]
 8001c30:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001c32:	4b13      	ldr	r3, [pc, #76]	; (8001c80 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001c34:	881a      	ldrh	r2, [r3, #0]
 8001c36:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001c38:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 8001c3a:	4a11      	ldr	r2, [pc, #68]	; (8001c80 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001c3c:	89bb      	ldrh	r3, [r7, #12]
 8001c3e:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001c40:	4b0d      	ldr	r3, [pc, #52]	; (8001c78 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001c42:	2201      	movs	r2, #1
 8001c44:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8001c46:	e010      	b.n	8001c6a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 8001c48:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d00c      	beq.n	8001c6a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001c50:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001c52:	881b      	ldrh	r3, [r3, #0]
 8001c54:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001c56:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001c58:	881a      	ldrh	r2, [r3, #0]
 8001c5a:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001c5c:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 8001c5e:	4a08      	ldr	r2, [pc, #32]	; (8001c80 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001c60:	89fb      	ldrh	r3, [r7, #14]
 8001c62:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001c64:	4b04      	ldr	r3, [pc, #16]	; (8001c78 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	701a      	strb	r2, [r3, #0]
    }
 8001c6a:	bf00      	nop
 8001c6c:	3714      	adds	r7, #20
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	2400b5c8 	.word	0x2400b5c8
 8001c7c:	2400b5c6 	.word	0x2400b5c6
 8001c80:	2400b5c4 	.word	0x2400b5c4

08001c84 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f015 fead 	bl	80179ee <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8001c94:	bf00      	nop
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	4a05      	ldr	r2, [pc, #20]	; (8001cbc <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff fe9f 	bl	80019f0 <_ZN8touchgfx3HALD1Ev>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	0802c394 	.word	0x0802c394

08001cc0 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f7ff ffe7 	bl	8001c9c <_ZN20TouchGFXGeneratedHALD1Ev>
 8001cce:	217c      	movs	r1, #124	; 0x7c
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f028 f958 	bl	8029f86 <_ZdlPvj>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff ffca 	bl	8001c84 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8001cf0:	bf00      	nop
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <_ZN11TouchGFXHAL10initializeEv>:
/* USER CODE BEGIN TouchGFXHAL.cpp */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f001 fd3a 	bl	800377c <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8001d08:	bf00      	nop
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f001 fdc6 	bl	80038ac <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8001d20:	4603      	mov	r3, r0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b082      	sub	sp, #8
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
 8001d32:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6839      	ldr	r1, [r7, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f001 fdc5 	bl	80038c8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b082      	sub	sp, #8
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
 8001d4e:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6839      	ldr	r1, [r7, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f001 fdcd 	bl	80038f4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b084      	sub	sp, #16
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	60f8      	str	r0, [r7, #12]
 8001d6a:	60b9      	str	r1, [r7, #8]
 8001d6c:	607a      	str	r2, [r7, #4]
 8001d6e:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8001d70:	68f8      	ldr	r0, [r7, #12]
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	68b9      	ldr	r1, [r7, #8]
 8001d78:	f001 fe14 	bl	80039a4 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8001d7c:	4603      	mov	r3, r0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f001 fd17 	bl	80037c4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b082      	sub	sp, #8
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f001 fd1b 	bl	80037e4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b082      	sub	sp, #8
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f001 fd1d 	bl	8003800 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b082      	sub	sp, #8
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f001 fd1f 	bl	800381c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
	...

08001de8 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	4a05      	ldr	r2, [pc, #20]	; (8001e08 <_ZN11TouchGFXHALD1Ev+0x20>)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff ff4f 	bl	8001c9c <_ZN20TouchGFXGeneratedHALD1Ev>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4618      	mov	r0, r3
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	0802c044 	.word	0x0802c044

08001e0c <_ZN11TouchGFXHALD0Ev>:
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f7ff ffe7 	bl	8001de8 <_ZN11TouchGFXHALD1Ev>
 8001e1a:	217c      	movs	r1, #124	; 0x7c
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f028 f8b2 	bl	8029f86 <_ZdlPvj>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4618      	mov	r0, r3
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <_ZN25STM32H745ITouchController4initEv>:

/**
 * @brief initializes the touch controller
 */
void STM32H745ITouchController::init()
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
    static const uint32_t width = 480;
    static const uint32_t height = 272;

    TS_Init_t config;
    config.Width = width;
 8001e32:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001e36:	603b      	str	r3, [r7, #0]
    config.Height = height;
 8001e38:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001e3c:	607b      	str	r3, [r7, #4]
    config.Orientation = TS_SWAP_XY;
 8001e3e:	2308      	movs	r3, #8
 8001e40:	60bb      	str	r3, [r7, #8]
    config.Accuracy = 0;
 8001e42:	2300      	movs	r3, #0
 8001e44:	60fb      	str	r3, [r7, #12]

    if (BSP_TS_Init(0, &config) != BSP_ERROR_NONE)
 8001e46:	463b      	mov	r3, r7
 8001e48:	4619      	mov	r1, r3
 8001e4a:	2000      	movs	r0, #0
 8001e4c:	f00e f8c0 	bl	800ffd0 <BSP_TS_Init>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	bf14      	ite	ne
 8001e56:	2301      	movne	r3, #1
 8001e58:	2300      	moveq	r3, #0
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d103      	bne.n	8001e68 <_ZN25STM32H745ITouchController4initEv+0x3c>
    {
        return;
    }

    _bsp_ts_initialized = true;
 8001e60:	4b03      	ldr	r3, [pc, #12]	; (8001e70 <_ZN25STM32H745ITouchController4initEv+0x44>)
 8001e62:	2201      	movs	r2, #1
 8001e64:	701a      	strb	r2, [r3, #0]
 8001e66:	e000      	b.n	8001e6a <_ZN25STM32H745ITouchController4initEv+0x3e>
        return;
 8001e68:	bf00      	nop
}
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	2400015c 	.word	0x2400015c

08001e74 <_ZN25STM32H745ITouchController11sampleTouchERlS0_>:
 * @param x touch x coordinate
 * @param y touch y coordinate
 * @return \c true if a touch event was detected, else \c false
 */
bool STM32H745ITouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
    static TS_State_t state;

    if (!_bsp_ts_initialized)
 8001e7e:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x50>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	f083 0301 	eor.w	r3, r3, #1
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x1c>
    {
        return false;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	e014      	b.n	8001eba <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x46>
    }

    BSP_TS_GetState(0, &state);
 8001e90:	490d      	ldr	r1, [pc, #52]	; (8001ec8 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8001e92:	2000      	movs	r0, #0
 8001e94:	f00e f958 	bl	8010148 <BSP_TS_GetState>

    if (!state.TouchDetected)
 8001e98:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d101      	bne.n	8001ea4 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x30>
    {
        return false;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	e00a      	b.n	8001eba <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x46>
    }

    x = state.TouchX;
 8001ea4:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	601a      	str	r2, [r3, #0]
    y = state.TouchY;
 8001eae:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	601a      	str	r2, [r3, #0]
    return true;
 8001eb8:	2301      	movs	r3, #1
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	2400015c 	.word	0x2400015c
 8001ec8:	24000160 	.word	0x24000160

08001ecc <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	2001      	movs	r0, #1
 8001ed6:	f008 fbc2 	bl	800a65e <osSemaphoreNew>
 8001eda:	4603      	mov	r3, r0
 8001edc:	4a0f      	ldr	r2, [pc, #60]	; (8001f1c <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8001ede:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8001ee0:	4b0e      	ldr	r3, [pc, #56]	; (8001f1c <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d105      	bne.n	8001ef4 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8001ee8:	4b0d      	ldr	r3, [pc, #52]	; (8001f20 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8001eea:	4a0e      	ldr	r2, [pc, #56]	; (8001f24 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8001eec:	2128      	movs	r1, #40	; 0x28
 8001eee:	480e      	ldr	r0, [pc, #56]	; (8001f28 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8001ef0:	f028 f878 	bl	8029fe4 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	2104      	movs	r1, #4
 8001ef8:	2001      	movs	r0, #1
 8001efa:	f008 fccf 	bl	800a89c <osMessageQueueNew>
 8001efe:	4603      	mov	r3, r0
 8001f00:	4a0a      	ldr	r2, [pc, #40]	; (8001f2c <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8001f02:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001f04:	4b09      	ldr	r3, [pc, #36]	; (8001f2c <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d105      	bne.n	8001f18 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8001f0c:	4b08      	ldr	r3, [pc, #32]	; (8001f30 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8001f0e:	4a05      	ldr	r2, [pc, #20]	; (8001f24 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8001f10:	212c      	movs	r1, #44	; 0x2c
 8001f12:	4805      	ldr	r0, [pc, #20]	; (8001f28 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8001f14:	f028 f866 	bl	8029fe4 <__assert_func>
}
 8001f18:	bf00      	nop
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	2400016c 	.word	0x2400016c
 8001f20:	0802b364 	.word	0x0802b364
 8001f24:	0802b3b0 	.word	0x0802b3b0
 8001f28:	0802b3e0 	.word	0x0802b3e0
 8001f2c:	24000170 	.word	0x24000170
 8001f30:	0802b484 	.word	0x0802b484

08001f34 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8001f38:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f40:	4618      	mov	r0, r3
 8001f42:	f008 fc15 	bl	800a770 <osSemaphoreAcquire>
}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	2400016c 	.word	0x2400016c

08001f50 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8001f54:	4b03      	ldr	r3, [pc, #12]	; (8001f64 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f008 fc5b 	bl	800a814 <osSemaphoreRelease>
}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	2400016c 	.word	0x2400016c

08001f68 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8001f6c:	4b03      	ldr	r3, [pc, #12]	; (8001f7c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2100      	movs	r1, #0
 8001f72:	4618      	mov	r0, r3
 8001f74:	f008 fbfc 	bl	800a770 <osSemaphoreAcquire>
}
 8001f78:	bf00      	nop
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	2400016c 	.word	0x2400016c

08001f80 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8001f84:	4b03      	ldr	r3, [pc, #12]	; (8001f94 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f008 fc43 	bl	800a814 <osSemaphoreRelease>
}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	2400016c 	.word	0x2400016c

08001f98 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8001f9c:	4b04      	ldr	r3, [pc, #16]	; (8001fb0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 8001f9e:	6818      	ldr	r0, [r3, #0]
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	4903      	ldr	r1, [pc, #12]	; (8001fb4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 8001fa6:	f008 fced 	bl	800a984 <osMessageQueuePut>
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	24000170 	.word	0x24000170
 8001fb4:	24000004 	.word	0x24000004

08001fb8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8001fbe:	4b09      	ldr	r3, [pc, #36]	; (8001fe4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8001fc0:	6818      	ldr	r0, [r3, #0]
 8001fc2:	1d39      	adds	r1, r7, #4
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f008 fd3c 	bl	800aa44 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8001fcc:	4b05      	ldr	r3, [pc, #20]	; (8001fe4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8001fce:	6818      	ldr	r0, [r3, #0]
 8001fd0:	1d39      	adds	r1, r7, #4
 8001fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f008 fd34 	bl	800aa44 <osMessageQueueGet>
}
 8001fdc:	bf00      	nop
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	24000170 	.word	0x24000170

08001fe8 <__NVIC_EnableIRQ>:
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ff2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	db0b      	blt.n	8002012 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ffa:	88fb      	ldrh	r3, [r7, #6]
 8001ffc:	f003 021f 	and.w	r2, r3, #31
 8002000:	4907      	ldr	r1, [pc, #28]	; (8002020 <__NVIC_EnableIRQ+0x38>)
 8002002:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002006:	095b      	lsrs	r3, r3, #5
 8002008:	2001      	movs	r0, #1
 800200a:	fa00 f202 	lsl.w	r2, r0, r2
 800200e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	e000e100 	.word	0xe000e100

08002024 <__NVIC_DisableIRQ>:
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800202e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002032:	2b00      	cmp	r3, #0
 8002034:	db12      	blt.n	800205c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002036:	88fb      	ldrh	r3, [r7, #6]
 8002038:	f003 021f 	and.w	r2, r3, #31
 800203c:	490a      	ldr	r1, [pc, #40]	; (8002068 <__NVIC_DisableIRQ+0x44>)
 800203e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002042:	095b      	lsrs	r3, r3, #5
 8002044:	2001      	movs	r0, #1
 8002046:	fa00 f202 	lsl.w	r2, r0, r2
 800204a:	3320      	adds	r3, #32
 800204c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002050:	f3bf 8f4f 	dsb	sy
}
 8002054:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002056:	f3bf 8f6f 	isb	sy
}
 800205a:	bf00      	nop
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	e000e100 	.word	0xe000e100

0800206c <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
        : color(0)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
    {
    }
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4618      	mov	r0, r3
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <_ZNK8touchgfx9colortypecvmEv>:
    /**
     * Cast that converts the given colortype to an uint32_t.
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
    {
        return color;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
    }
 8002094:	4618      	mov	r0, r3
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
    {
 80020a8:	4a04      	ldr	r2, [pc, #16]	; (80020bc <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	601a      	str	r2, [r3, #0]
    }
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4618      	mov	r0, r3
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	0802c164 	.word	0x0802c164

080020c0 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
    }
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f7ff ffe9 	bl	80020a0 <_ZN8touchgfx9DMA_QueueD1Ev>
 80020ce:	2104      	movs	r1, #4
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f027 ff58 	bl	8029f86 <_ZdlPvj>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4618      	mov	r0, r3
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	3344      	adds	r3, #68	; 0x44
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	4798      	blx	r3
    }
 80020f4:	bf00      	nop
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
    {
 8002104:	4a04      	ldr	r2, [pc, #16]	; (8002118 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	601a      	str	r2, [r3, #0]
    }
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4618      	mov	r0, r3
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	0802dd5c 	.word	0x0802dd5c

0800211c <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
    }
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f7ff ffe9 	bl	80020fc <_ZN8touchgfx13DMA_InterfaceD1Ev>
 800212a:	210c      	movs	r1, #12
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f027 ff2a 	bl	8029f86 <_ZdlPvj>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4618      	mov	r0, r3
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8002146:	4a09      	ldr	r2, [pc, #36]	; (800216c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	605a      	str	r2, [r3, #4]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	721a      	strb	r2, [r3, #8]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	725a      	strb	r2, [r3, #9]
    {
    }
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4618      	mov	r0, r3
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	0802dd5c 	.word	0x0802dd5c

08002170 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8002178:	2301      	movs	r3, #1
    }
 800217a:	4618      	mov	r0, r3
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8002186:	b580      	push	{r7, lr}
 8002188:	b082      	sub	sp, #8
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	3328      	adds	r3, #40	; 0x28
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4610      	mov	r0, r2
 800219a:	4798      	blx	r3
    }
 800219c:	bf00      	nop
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <_ZN8touchgfx3HAL11getInstanceEv>:
    static HAL* getInstance()
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
        return instance;
 80021a8:	4b03      	ldr	r3, [pc, #12]	; (80021b8 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 80021aa:	681b      	ldr	r3, [r3, #0]
    }
 80021ac:	4618      	mov	r0, r3
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	2400b5d0 	.word	0x2400b5d0

080021bc <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685a      	ldr	r2, [r3, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	3314      	adds	r3, #20
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4610      	mov	r0, r2
 80021d4:	4798      	blx	r3
    }
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 80021e6:	f7ff ffdd 	bl	80021a4 <_ZN8touchgfx3HAL11getInstanceEv>
 80021ea:	4603      	mov	r3, r0
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff ffe5 	bl	80021bc <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 80021f2:	bf00      	nop
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b082      	sub	sp, #8
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	330c      	adds	r3, #12
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff ff30 	bl	800206c <_ZN8touchgfx9colortypeC1Ev>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4618      	mov	r0, r3
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
	...

08002218 <_ZN8STM32DMAC1Ev>:
}

STM32DMA::STM32DMA()
 8002218:	b5b0      	push	{r4, r5, r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	330c      	adds	r3, #12
 8002226:	4619      	mov	r1, r3
 8002228:	4610      	mov	r0, r2
 800222a:	f7ff ff87 	bl	800213c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 800222e:	4a0e      	ldr	r2, [pc, #56]	; (8002268 <_ZN8STM32DMAC1Ev+0x50>)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f103 000c 	add.w	r0, r3, #12
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	3320      	adds	r3, #32
 800223e:	2260      	movs	r2, #96	; 0x60
 8002240:	4619      	mov	r1, r3
 8002242:	f016 fb85 	bl	8018950 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	3320      	adds	r3, #32
 800224a:	245f      	movs	r4, #95	; 0x5f
 800224c:	461d      	mov	r5, r3
 800224e:	2c00      	cmp	r4, #0
 8002250:	db05      	blt.n	800225e <_ZN8STM32DMAC1Ev+0x46>
 8002252:	4628      	mov	r0, r5
 8002254:	f7ff ffd1 	bl	80021fa <_ZN8touchgfx6BlitOpC1Ev>
 8002258:	3520      	adds	r5, #32
 800225a:	3c01      	subs	r4, #1
 800225c:	e7f7      	b.n	800224e <_ZN8STM32DMAC1Ev+0x36>
{
}
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4618      	mov	r0, r3
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bdb0      	pop	{r4, r5, r7, pc}
 8002268:	0802c114 	.word	0x0802c114

0800226c <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	4a09      	ldr	r2, [pc, #36]	; (800229c <_ZN8STM32DMAD1Ev+0x30>)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 800227a:	205a      	movs	r0, #90	; 0x5a
 800227c:	f7ff fed2 	bl	8002024 <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	330c      	adds	r3, #12
 8002284:	4618      	mov	r0, r3
 8002286:	f000 fac7 	bl	8002818 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff ff35 	bl	80020fc <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4618      	mov	r0, r3
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	0802c114 	.word	0x0802c114

080022a0 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
}
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f7ff ffdf 	bl	800226c <_ZN8STM32DMAD1Ev>
 80022ae:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f027 fe67 	bl	8029f86 <_ZdlPvj>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4618      	mov	r0, r3
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
	...

080022c4 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80022cc:	4b12      	ldr	r3, [pc, #72]	; (8002318 <_ZN8STM32DMA10initializeEv+0x54>)
 80022ce:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80022d2:	4a11      	ldr	r2, [pc, #68]	; (8002318 <_ZN8STM32DMA10initializeEv+0x54>)
 80022d4:	f043 0310 	orr.w	r3, r3, #16
 80022d8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80022dc:	4b0e      	ldr	r3, [pc, #56]	; (8002318 <_ZN8STM32DMA10initializeEv+0x54>)
 80022de:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80022e2:	f003 0310 	and.w	r3, r3, #16
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 80022ea:	4b0b      	ldr	r3, [pc, #44]	; (8002318 <_ZN8STM32DMA10initializeEv+0x54>)
 80022ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022ee:	4a0a      	ldr	r2, [pc, #40]	; (8002318 <_ZN8STM32DMA10initializeEv+0x54>)
 80022f0:	f043 0310 	orr.w	r3, r3, #16
 80022f4:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 80022f6:	4b08      	ldr	r3, [pc, #32]	; (8002318 <_ZN8STM32DMA10initializeEv+0x54>)
 80022f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022fa:	4a07      	ldr	r2, [pc, #28]	; (8002318 <_ZN8STM32DMA10initializeEv+0x54>)
 80022fc:	f023 0310 	bic.w	r3, r3, #16
 8002300:	67d3      	str	r3, [r2, #124]	; 0x7c

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8002302:	4b06      	ldr	r3, [pc, #24]	; (800231c <_ZN8STM32DMA10initializeEv+0x58>)
 8002304:	4a06      	ldr	r2, [pc, #24]	; (8002320 <_ZN8STM32DMA10initializeEv+0x5c>)
 8002306:	621a      	str	r2, [r3, #32]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 8002308:	205a      	movs	r0, #90	; 0x5a
 800230a:	f7ff fe6d 	bl	8001fe8 <__NVIC_EnableIRQ>
}
 800230e:	bf00      	nop
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	58024400 	.word	0x58024400
 800231c:	2400b9c0 	.word	0x2400b9c0
 8002320:	080021df 	.word	0x080021df

08002324 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	460b      	mov	r3, r1
 800232e:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002330:	2300      	movs	r3, #0
 8002332:	60fb      	str	r3, [r7, #12]

    switch (format)
 8002334:	78fb      	ldrb	r3, [r7, #3]
 8002336:	2b0b      	cmp	r3, #11
 8002338:	d826      	bhi.n	8002388 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 800233a:	a201      	add	r2, pc, #4	; (adr r2, 8002340 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 800233c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002340:	0800237d 	.word	0x0800237d
 8002344:	08002377 	.word	0x08002377
 8002348:	08002371 	.word	0x08002371
 800234c:	08002389 	.word	0x08002389
 8002350:	08002389 	.word	0x08002389
 8002354:	08002389 	.word	0x08002389
 8002358:	08002389 	.word	0x08002389
 800235c:	08002383 	.word	0x08002383
 8002360:	08002383 	.word	0x08002383
 8002364:	08002383 	.word	0x08002383
 8002368:	08002383 	.word	0x08002383
 800236c:	08002383 	.word	0x08002383
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002370:	2300      	movs	r3, #0
 8002372:	60fb      	str	r3, [r7, #12]
        break;
 8002374:	e00e      	b.n	8002394 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8002376:	2301      	movs	r3, #1
 8002378:	60fb      	str	r3, [r7, #12]
        break;
 800237a:	e00b      	b.n	8002394 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 800237c:	2302      	movs	r3, #2
 800237e:	60fb      	str	r3, [r7, #12]
        break;
 8002380:	e008      	b.n	8002394 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 8002382:	2305      	movs	r3, #5
 8002384:	60fb      	str	r3, [r7, #12]
        break;
 8002386:	e005      	b.n	8002394 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 8002388:	4b05      	ldr	r3, [pc, #20]	; (80023a0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 800238a:	4a06      	ldr	r2, [pc, #24]	; (80023a4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 800238c:	2166      	movs	r1, #102	; 0x66
 800238e:	4806      	ldr	r0, [pc, #24]	; (80023a8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 8002390:	f027 fe28 	bl	8029fe4 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8002394:	68fb      	ldr	r3, [r7, #12]
}
 8002396:	4618      	mov	r0, r3
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	0802b4c8 	.word	0x0802b4c8
 80023a4:	0802b4e4 	.word	0x0802b4e4
 80023a8:	0802b530 	.word	0x0802b530

080023ac <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	460b      	mov	r3, r1
 80023b6:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 80023b8:	2300      	movs	r3, #0
 80023ba:	60fb      	str	r3, [r7, #12]

    switch (format)
 80023bc:	78fb      	ldrb	r3, [r7, #3]
 80023be:	2b0a      	cmp	r3, #10
 80023c0:	d821      	bhi.n	8002406 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 80023c2:	a201      	add	r2, pc, #4	; (adr r2, 80023c8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 80023c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c8:	08002401 	.word	0x08002401
 80023cc:	080023fb 	.word	0x080023fb
 80023d0:	080023f5 	.word	0x080023f5
 80023d4:	08002407 	.word	0x08002407
 80023d8:	08002407 	.word	0x08002407
 80023dc:	08002407 	.word	0x08002407
 80023e0:	08002407 	.word	0x08002407
 80023e4:	080023fb 	.word	0x080023fb
 80023e8:	080023fb 	.word	0x080023fb
 80023ec:	080023fb 	.word	0x080023fb
 80023f0:	080023fb 	.word	0x080023fb
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 80023f4:	2300      	movs	r3, #0
 80023f6:	60fb      	str	r3, [r7, #12]
        break;
 80023f8:	e00b      	b.n	8002412 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 80023fa:	2301      	movs	r3, #1
 80023fc:	60fb      	str	r3, [r7, #12]
        break;
 80023fe:	e008      	b.n	8002412 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8002400:	2302      	movs	r3, #2
 8002402:	60fb      	str	r3, [r7, #12]
        break;
 8002404:	e005      	b.n	8002412 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8002406:	4b05      	ldr	r3, [pc, #20]	; (800241c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8002408:	4a05      	ldr	r2, [pc, #20]	; (8002420 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 800240a:	2187      	movs	r1, #135	; 0x87
 800240c:	4805      	ldr	r0, [pc, #20]	; (8002424 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 800240e:	f027 fde9 	bl	8029fe4 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8002412:	68fb      	ldr	r3, [r7, #12]
}
 8002414:	4618      	mov	r0, r3
 8002416:	3710      	adds	r7, #16
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	0802b4c8 	.word	0x0802b4c8
 8002420:	0802b5d0 	.word	0x0802b5d0
 8002424:	0802b530 	.word	0x0802b530

08002428 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8002430:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 8002434:	4618      	mov	r0, r3
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8002440:	b590      	push	{r4, r7, lr}
 8002442:	b089      	sub	sp, #36	; 0x24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	7f5b      	ldrb	r3, [r3, #29]
 800244e:	4619      	mov	r1, r3
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f7ff ff67 	bl	8002324 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8002456:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	7f9b      	ldrb	r3, [r3, #30]
 800245c:	4619      	mov	r1, r3
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f7ff ff60 	bl	8002324 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8002464:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	7f9b      	ldrb	r3, [r3, #30]
 800246a:	4619      	mov	r1, r3
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f7ff ff9d 	bl	80023ac <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8002472:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	8b5b      	ldrh	r3, [r3, #26]
 8002478:	461a      	mov	r2, r3
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	8a9b      	ldrh	r3, [r3, #20]
 800247e:	1ad2      	subs	r2, r2, r3
 8002480:	4b96      	ldr	r3, [pc, #600]	; (80026dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002482:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	8b5b      	ldrh	r3, [r3, #26]
 8002488:	461a      	mov	r2, r3
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	8a9b      	ldrh	r3, [r3, #20]
 800248e:	1ad2      	subs	r2, r2, r3
 8002490:	4b92      	ldr	r3, [pc, #584]	; (80026dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002492:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	8b1b      	ldrh	r3, [r3, #24]
 8002498:	461a      	mov	r2, r3
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	8a9b      	ldrh	r3, [r3, #20]
 800249e:	1ad2      	subs	r2, r2, r3
 80024a0:	4b8e      	ldr	r3, [pc, #568]	; (80026dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80024a2:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80024a4:	4a8d      	ldr	r2, [pc, #564]	; (80026dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	8adb      	ldrh	r3, [r3, #22]
 80024ae:	461a      	mov	r2, r3
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	8a9b      	ldrh	r3, [r3, #20]
 80024b4:	041b      	lsls	r3, r3, #16
 80024b6:	431a      	orrs	r2, r3
 80024b8:	4b88      	ldr	r3, [pc, #544]	; (80026dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80024ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	691a      	ldr	r2, [r3, #16]
 80024c0:	4b86      	ldr	r3, [pc, #536]	; (80026dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80024c2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	4b84      	ldr	r3, [pc, #528]	; (80026dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80024ca:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024d4:	d036      	beq.n	8002544 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x104>
 80024d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024da:	f200 80e2 	bhi.w	80026a2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 80024de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024e2:	d014      	beq.n	800250e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xce>
 80024e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024e8:	f200 80db 	bhi.w	80026a2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 80024ec:	2b80      	cmp	r3, #128	; 0x80
 80024ee:	d059      	beq.n	80025a4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x164>
 80024f0:	2b80      	cmp	r3, #128	; 0x80
 80024f2:	f200 80d6 	bhi.w	80026a2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 80024f6:	2b40      	cmp	r3, #64	; 0x40
 80024f8:	f000 80be 	beq.w	8002678 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>
 80024fc:	2b40      	cmp	r3, #64	; 0x40
 80024fe:	f200 80d0 	bhi.w	80026a2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 8002502:	2b04      	cmp	r3, #4
 8002504:	d039      	beq.n	800257a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13a>
 8002506:	2b20      	cmp	r3, #32
 8002508:	f000 80b6 	beq.w	8002678 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>
 800250c:	e0c9      	b.n	80026a2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	7f1b      	ldrb	r3, [r3, #28]
 8002512:	061b      	lsls	r3, r3, #24
 8002514:	4619      	mov	r1, r3
 8002516:	4a71      	ldr	r2, [pc, #452]	; (80026dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002518:	4b71      	ldr	r3, [pc, #452]	; (80026e0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800251a:	430b      	orrs	r3, r1
 800251c:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	330c      	adds	r3, #12
 8002522:	4c6e      	ldr	r4, [pc, #440]	; (80026dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff fdaf 	bl	8002088 <_ZNK8touchgfx9colortypecvmEv>
 800252a:	4603      	mov	r3, r0
 800252c:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800252e:	4a6b      	ldr	r2, [pc, #428]	; (80026dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	691a      	ldr	r2, [r3, #16]
 8002538:	4b68      	ldr	r3, [pc, #416]	; (80026dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800253a:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800253c:	4b67      	ldr	r3, [pc, #412]	; (80026dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800253e:	4a69      	ldr	r2, [pc, #420]	; (80026e4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8002540:	601a      	str	r2, [r3, #0]
        break;
 8002542:	e0c7      	b.n	80026d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	7f1b      	ldrb	r3, [r3, #28]
 8002548:	061b      	lsls	r3, r3, #24
 800254a:	4619      	mov	r1, r3
 800254c:	4a63      	ldr	r2, [pc, #396]	; (80026dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800254e:	4b66      	ldr	r3, [pc, #408]	; (80026e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8002550:	430b      	orrs	r3, r1
 8002552:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	330c      	adds	r3, #12
 8002558:	4c60      	ldr	r4, [pc, #384]	; (80026dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff fd94 	bl	8002088 <_ZNK8touchgfx9colortypecvmEv>
 8002560:	4603      	mov	r3, r0
 8002562:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002564:	4a5d      	ldr	r2, [pc, #372]	; (80026dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	691a      	ldr	r2, [r3, #16]
 800256e:	4b5b      	ldr	r3, [pc, #364]	; (80026dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002570:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002572:	4b5a      	ldr	r3, [pc, #360]	; (80026dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002574:	4a5b      	ldr	r2, [pc, #364]	; (80026e4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8002576:	601a      	str	r2, [r3, #0]
        break;
 8002578:	e0ac      	b.n	80026d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	7f1b      	ldrb	r3, [r3, #28]
 800257e:	061b      	lsls	r3, r3, #24
 8002580:	461a      	mov	r2, r3
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	4313      	orrs	r3, r2
 8002586:	4a55      	ldr	r2, [pc, #340]	; (80026dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800258c:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800258e:	4a53      	ldr	r2, [pc, #332]	; (80026dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	691a      	ldr	r2, [r3, #16]
 8002598:	4b50      	ldr	r3, [pc, #320]	; (80026dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800259a:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800259c:	4b4f      	ldr	r3, [pc, #316]	; (80026dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800259e:	4a51      	ldr	r2, [pc, #324]	; (80026e4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80025a0:	601a      	str	r2, [r3, #0]
        break;
 80025a2:	e097      	b.n	80026d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 80025a4:	2301      	movs	r3, #1
 80025a6:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	1d1a      	adds	r2, r3, #4
 80025b2:	4b4a      	ldr	r3, [pc, #296]	; (80026dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80025b4:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	7f1b      	ldrb	r3, [r3, #28]
 80025ba:	061b      	lsls	r3, r3, #24
 80025bc:	461a      	mov	r2, r3
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	4a46      	ldr	r2, [pc, #280]	; (80026dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80025c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025c8:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80025ca:	4a44      	ldr	r2, [pc, #272]	; (80026dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	6253      	str	r3, [r2, #36]	; 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	691a      	ldr	r2, [r3, #16]
 80025d4:	4b41      	ldr	r3, [pc, #260]	; (80026dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80025d6:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	881b      	ldrh	r3, [r3, #0]
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d002      	beq.n	80025e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a8>
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d00d      	beq.n	8002602 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
 80025e6:	e020      	b.n	800262a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ea>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 80025e8:	4b3c      	ldr	r3, [pc, #240]	; (80026dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80025ea:	69da      	ldr	r2, [r3, #28]
 80025ec:	4b3f      	ldr	r3, [pc, #252]	; (80026ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 80025ee:	4013      	ands	r3, r2
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	8852      	ldrh	r2, [r2, #2]
 80025f4:	3a01      	subs	r2, #1
 80025f6:	0212      	lsls	r2, r2, #8
 80025f8:	4611      	mov	r1, r2
 80025fa:	4a38      	ldr	r2, [pc, #224]	; (80026dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80025fc:	430b      	orrs	r3, r1
 80025fe:	61d3      	str	r3, [r2, #28]
                break;
 8002600:	e01a      	b.n	8002638 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f8>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if(blitOp.alpha == 255)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	7f1b      	ldrb	r3, [r3, #28]
 8002606:	2bff      	cmp	r3, #255	; 0xff
 8002608:	d101      	bne.n	800260e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ce>
                {
                  blend = false;
 800260a:	2300      	movs	r3, #0
 800260c:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800260e:	4b33      	ldr	r3, [pc, #204]	; (80026dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002610:	69da      	ldr	r2, [r3, #28]
 8002612:	4b36      	ldr	r3, [pc, #216]	; (80026ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8002614:	4013      	ands	r3, r2
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	8852      	ldrh	r2, [r2, #2]
 800261a:	3a01      	subs	r2, #1
 800261c:	0212      	lsls	r2, r2, #8
 800261e:	4313      	orrs	r3, r2
 8002620:	4a2e      	ldr	r2, [pc, #184]	; (80026dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002622:	f043 0310 	orr.w	r3, r3, #16
 8002626:	61d3      	str	r3, [r2, #28]
                break;
 8002628:	e006      	b.n	8002638 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f8>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 800262a:	4b31      	ldr	r3, [pc, #196]	; (80026f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 800262c:	4a31      	ldr	r2, [pc, #196]	; (80026f4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b4>)
 800262e:	f240 1111 	movw	r1, #273	; 0x111
 8002632:	4831      	ldr	r0, [pc, #196]	; (80026f8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>)
 8002634:	f027 fcd6 	bl	8029fe4 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8002638:	4b28      	ldr	r3, [pc, #160]	; (80026dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800263a:	69db      	ldr	r3, [r3, #28]
 800263c:	4a27      	ldr	r2, [pc, #156]	; (80026dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800263e:	f043 0320 	orr.w	r3, r3, #32
 8002642:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8002644:	4b25      	ldr	r3, [pc, #148]	; (80026dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002646:	69db      	ldr	r3, [r3, #28]
 8002648:	f003 0320 	and.w	r3, r3, #32
 800264c:	2b00      	cmp	r3, #0
 800264e:	bf14      	ite	ne
 8002650:	2301      	movne	r3, #1
 8002652:	2300      	moveq	r3, #0
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d000      	beq.n	800265c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>
 800265a:	e7f3      	b.n	8002644 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x204>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 800265c:	4b1f      	ldr	r3, [pc, #124]	; (80026dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800265e:	2210      	movs	r2, #16
 8002660:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if(blend)
 8002662:	7ffb      	ldrb	r3, [r7, #31]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d003      	beq.n	8002670 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002668:	4b1c      	ldr	r3, [pc, #112]	; (80026dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800266a:	4a1e      	ldr	r2, [pc, #120]	; (80026e4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 800266c:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
      break;
 800266e:	e031      	b.n	80026d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8002670:	4b1a      	ldr	r3, [pc, #104]	; (80026dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002672:	4a22      	ldr	r2, [pc, #136]	; (80026fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2bc>)
 8002674:	601a      	str	r2, [r3, #0]
      break;
 8002676:	e02d      	b.n	80026d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	7f1b      	ldrb	r3, [r3, #28]
 800267c:	061b      	lsls	r3, r3, #24
 800267e:	461a      	mov	r2, r3
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	4313      	orrs	r3, r2
 8002684:	4a15      	ldr	r2, [pc, #84]	; (80026dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002686:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800268a:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800268c:	4a13      	ldr	r2, [pc, #76]	; (80026dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	691a      	ldr	r2, [r3, #16]
 8002696:	4b11      	ldr	r3, [pc, #68]	; (80026dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002698:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800269a:	4b10      	ldr	r3, [pc, #64]	; (80026dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800269c:	4a11      	ldr	r2, [pc, #68]	; (80026e4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 800269e:	601a      	str	r2, [r3, #0]
        break;
 80026a0:	e018      	b.n	80026d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	7f1b      	ldrb	r3, [r3, #28]
 80026a6:	061b      	lsls	r3, r3, #24
 80026a8:	461a      	mov	r2, r3
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	4a0b      	ldr	r2, [pc, #44]	; (80026dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80026b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026b4:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	7f5a      	ldrb	r2, [r3, #29]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	7f9b      	ldrb	r3, [r3, #30]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d003      	beq.n	80026ca <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28a>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80026c2:	4b06      	ldr	r3, [pc, #24]	; (80026dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80026c4:	4a0d      	ldr	r2, [pc, #52]	; (80026fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2bc>)
 80026c6:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 80026c8:	e003      	b.n	80026d2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x292>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 80026ca:	4b04      	ldr	r3, [pc, #16]	; (80026dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80026cc:	f240 2201 	movw	r2, #513	; 0x201
 80026d0:	601a      	str	r2, [r3, #0]
        break;
 80026d2:	bf00      	nop
    }
}
 80026d4:	bf00      	nop
 80026d6:	3724      	adds	r7, #36	; 0x24
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd90      	pop	{r4, r7, pc}
 80026dc:	52001000 	.word	0x52001000
 80026e0:	0002000a 	.word	0x0002000a
 80026e4:	00020201 	.word	0x00020201
 80026e8:	00020009 	.word	0x00020009
 80026ec:	ffff00ef 	.word	0xffff00ef
 80026f0:	0802b61c 	.word	0x0802b61c
 80026f4:	0802b638 	.word	0x0802b638
 80026f8:	0802b530 	.word	0x0802b530
 80026fc:	00010201 	.word	0x00010201

08002700 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8002700:	b590      	push	{r4, r7, lr}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	7f9b      	ldrb	r3, [r3, #30]
 800270e:	4619      	mov	r1, r3
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f7ff fe4b 	bl	80023ac <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8002716:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002718:	4a3b      	ldr	r2, [pc, #236]	; (8002808 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	8adb      	ldrh	r3, [r3, #22]
 8002722:	461a      	mov	r2, r3
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	8a9b      	ldrh	r3, [r3, #20]
 8002728:	041b      	lsls	r3, r3, #16
 800272a:	431a      	orrs	r2, r3
 800272c:	4b36      	ldr	r3, [pc, #216]	; (8002808 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800272e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	691a      	ldr	r2, [r3, #16]
 8002734:	4b34      	ldr	r3, [pc, #208]	; (8002808 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002736:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	8b5b      	ldrh	r3, [r3, #26]
 800273c:	461a      	mov	r2, r3
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	8a9b      	ldrh	r3, [r3, #20]
 8002742:	1ad2      	subs	r2, r2, r3
 8002744:	4b30      	ldr	r3, [pc, #192]	; (8002808 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002746:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2b08      	cmp	r3, #8
 800274e:	d12e      	bne.n	80027ae <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xae>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	8b5b      	ldrh	r3, [r3, #26]
 8002754:	461a      	mov	r2, r3
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	8a9b      	ldrh	r3, [r3, #20]
 800275a:	1ad2      	subs	r2, r2, r3
 800275c:	4b2a      	ldr	r3, [pc, #168]	; (8002808 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800275e:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	8b5b      	ldrh	r3, [r3, #26]
 8002764:	461a      	mov	r2, r3
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	8a9b      	ldrh	r3, [r3, #20]
 800276a:	1ad2      	subs	r2, r2, r3
 800276c:	4b26      	ldr	r3, [pc, #152]	; (8002808 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800276e:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002770:	4a25      	ldr	r2, [pc, #148]	; (8002808 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	7f1b      	ldrb	r3, [r3, #28]
 800277a:	061b      	lsls	r3, r3, #24
 800277c:	4619      	mov	r1, r3
 800277e:	4a22      	ldr	r2, [pc, #136]	; (8002808 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002780:	4b22      	ldr	r3, [pc, #136]	; (800280c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>)
 8002782:	430b      	orrs	r3, r1
 8002784:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	330c      	adds	r3, #12
 800278a:	4c1f      	ldr	r4, [pc, #124]	; (8002808 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff fc7b 	bl	8002088 <_ZNK8touchgfx9colortypecvmEv>
 8002792:	4603      	mov	r3, r0
 8002794:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	691a      	ldr	r2, [r3, #16]
 800279a:	4b1b      	ldr	r3, [pc, #108]	; (8002808 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800279c:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	691a      	ldr	r2, [r3, #16]
 80027a2:	4b19      	ldr	r3, [pc, #100]	; (8002808 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80027a4:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 80027a6:	4b18      	ldr	r3, [pc, #96]	; (8002808 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80027a8:	4a19      	ldr	r2, [pc, #100]	; (8002810 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 80027aa:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 80027ac:	e027      	b.n	80027fe <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfe>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80027ae:	4a16      	ldr	r2, [pc, #88]	; (8002808 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 80027b4:	4b14      	ldr	r3, [pc, #80]	; (8002808 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	330c      	adds	r3, #12
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff fc62 	bl	8002088 <_ZNK8touchgfx9colortypecvmEv>
 80027c4:	4603      	mov	r3, r0
 80027c6:	0a1b      	lsrs	r3, r3, #8
 80027c8:	f403 4478 	and.w	r4, r3, #63488	; 0xf800
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	330c      	adds	r3, #12
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff fc59 	bl	8002088 <_ZNK8touchgfx9colortypecvmEv>
 80027d6:	4603      	mov	r3, r0
 80027d8:	095b      	lsrs	r3, r3, #5
 80027da:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80027de:	431c      	orrs	r4, r3
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	330c      	adds	r3, #12
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff fc4f 	bl	8002088 <_ZNK8touchgfx9colortypecvmEv>
 80027ea:	4603      	mov	r3, r0
 80027ec:	08db      	lsrs	r3, r3, #3
 80027ee:	f003 031f 	and.w	r3, r3, #31
 80027f2:	4a05      	ldr	r2, [pc, #20]	; (8002808 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80027f4:	4323      	orrs	r3, r4
 80027f6:	6393      	str	r3, [r2, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 80027f8:	4b03      	ldr	r3, [pc, #12]	; (8002808 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80027fa:	4a06      	ldr	r2, [pc, #24]	; (8002814 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x114>)
 80027fc:	601a      	str	r2, [r3, #0]
}
 80027fe:	bf00      	nop
 8002800:	3714      	adds	r7, #20
 8002802:	46bd      	mov	sp, r7
 8002804:	bd90      	pop	{r4, r7, pc}
 8002806:	bf00      	nop
 8002808:	52001000 	.word	0x52001000
 800280c:	00010009 	.word	0x00010009
 8002810:	00020201 	.word	0x00020201
 8002814:	00030201 	.word	0x00030201

08002818 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	4a05      	ldr	r2, [pc, #20]	; (8002838 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff fc39 	bl	80020a0 <_ZN8touchgfx9DMA_QueueD1Ev>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4618      	mov	r0, r3
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	0802ddac 	.word	0x0802ddac

0800283c <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f7ff ffe7 	bl	8002818 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800284a:	2114      	movs	r1, #20
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f027 fb9a 	bl	8029f86 <_ZdlPvj>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4618      	mov	r0, r3
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	801a      	strh	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	805a      	strh	r2, [r3, #2]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	809a      	strh	r2, [r3, #4]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	80da      	strh	r2, [r3, #6]
    {
    }
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4618      	mov	r0, r3
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
	...

0800288c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8002894:	4a04      	ldr	r2, [pc, #16]	; (80028a8 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6013      	str	r3, [r2, #0]
    }
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	2400b62c 	.word	0x2400b62c

080028ac <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
    {
 80028b4:	4a04      	ldr	r2, [pc, #16]	; (80028c8 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	601a      	str	r2, [r3, #0]
    }
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4618      	mov	r0, r3
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	0802c380 	.word	0x0802c380

080028cc <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
    }
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f7ff ffe9 	bl	80028ac <_ZN8touchgfx12FontProviderD1Ev>
 80028da:	2104      	movs	r1, #4
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f027 fb52 	bl	8029f86 <_ZdlPvj>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
 80028f8:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 80028fa:	4a0b      	ldr	r2, [pc, #44]	; (8002928 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	68ba      	ldr	r2, [r7, #8]
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	609a      	str	r2, [r3, #8]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	60da      	str	r2, [r3, #12]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	611a      	str	r2, [r3, #16]
    {
    }
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	4618      	mov	r0, r3
 800291c:	3714      	adds	r7, #20
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	0802c370 	.word	0x0802c370

0800292c <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
    {
 8002934:	4a04      	ldr	r2, [pc, #16]	; (8002948 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	601a      	str	r2, [r3, #0]
    }
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4618      	mov	r0, r3
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	0802c370 	.word	0x0802c370

0800294c <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
    }
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f7ff ffe9 	bl	800292c <_ZN8touchgfx7MVPHeapD1Ev>
 800295a:	2114      	movs	r1, #20
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f027 fb12 	bl	8029f86 <_ZdlPvj>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4618      	mov	r0, r3
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
    {
    }
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8002982:	b480      	push	{r7}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
 800298a:	6039      	str	r1, [r7, #0]
    {
    }
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
    {
    }
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr

080029ae <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 80029ae:	b480      	push	{r7}
 80029b0:	b083      	sub	sp, #12
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
 80029b6:	460b      	mov	r3, r1
 80029b8:	70fb      	strb	r3, [r7, #3]
    {
    }
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr

080029c6 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 80029c6:	b480      	push	{r7}
 80029c8:	b083      	sub	sp, #12
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
    {
    }
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr

080029da <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 80029da:	b480      	push	{r7}
 80029dc:	b083      	sub	sp, #12
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
    {
    }
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
	...

080029f0 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
    {
 80029f8:	4a04      	ldr	r2, [pc, #16]	; (8002a0c <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	601a      	str	r2, [r3, #0]
    }
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4618      	mov	r0, r3
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr
 8002a0c:	0802c348 	.word	0x0802c348

08002a10 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
    }
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f7ff ffe9 	bl	80029f0 <_ZN8touchgfx15UIEventListenerD1Ev>
 8002a1e:	2104      	movs	r1, #4
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f027 fab0 	bl	8029f86 <_ZdlPvj>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3708      	adds	r7, #8
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
    {
 8002a38:	4a04      	ldr	r2, [pc, #16]	; (8002a4c <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	601a      	str	r2, [r3, #0]
    }
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4618      	mov	r0, r3
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	0802e3a4 	.word	0x0802e3a4

08002a50 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
    }
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f7ff ffe9 	bl	8002a30 <_ZN8touchgfx3LCDD1Ev>
 8002a5e:	2108      	movs	r1, #8
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f027 fa90 	bl	8029f86 <_ZdlPvj>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	460b      	mov	r3, r1
 8002a7a:	70fb      	strb	r3, [r7, #3]
    {
    }
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8002a9a:	6810      	ldr	r0, [r2, #0]
 8002a9c:	6851      	ldr	r1, [r2, #4]
 8002a9e:	c303      	stmia	r3!, {r0, r1}
    }
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
    {
 8002ab4:	4a04      	ldr	r2, [pc, #16]	; (8002ac8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	601a      	str	r2, [r3, #0]
    }
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4618      	mov	r0, r3
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	0802c330 	.word	0x0802c330

08002acc <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
    }
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f7ff ffe9 	bl	8002aac <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8002ada:	2104      	movs	r1, #4
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f027 fa52 	bl	8029f86 <_ZdlPvj>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	801a      	strh	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	805a      	strh	r2, [r3, #2]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	809a      	strh	r2, [r3, #4]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	80da      	strh	r2, [r3, #6]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	811a      	strh	r2, [r3, #8]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	815a      	strh	r2, [r3, #10]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	819a      	strh	r2, [r3, #12]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	739a      	strb	r2, [r3, #14]
        {
        }
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4618      	mov	r0, r3
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr

08002b32 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b082      	sub	sp, #8
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff ffd5 	bl	8002aec <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	611a      	str	r2, [r3, #16]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	829a      	strh	r2, [r3, #20]
    {
    }
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4618      	mov	r0, r3
 8002b52:	3708      	adds	r7, #8
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
 8002b64:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 8002b66:	4a55      	ldr	r2, [pc, #340]	; (8002cbc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	605a      	str	r2, [r3, #4]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	609a      	str	r2, [r3, #8]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	60da      	str	r2, [r3, #12]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	611a      	str	r2, [r3, #16]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	615a      	str	r2, [r3, #20]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	619a      	str	r2, [r3, #24]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	331c      	adds	r3, #28
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff ffcc 	bl	8002b32 <_ZN8touchgfx8GesturesC1Ev>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	639a      	str	r2, [r3, #56]	; 0x38
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	63da      	str	r2, [r3, #60]	; 0x3c
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	641a      	str	r2, [r3, #64]	; 0x40
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	645a      	str	r2, [r3, #68]	; 0x44
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	64da      	str	r2, [r3, #76]	; 0x4c
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	3350      	adds	r3, #80	; 0x50
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff fe39 	bl	800285c <_ZN8touchgfx4RectC1Ev>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	659a      	str	r2, [r3, #88]	; 0x58
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	65da      	str	r2, [r3, #92]	; 0x5c
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	661a      	str	r2, [r3, #96]	; 0x60
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	671a      	str	r2, [r3, #112]	; 0x70
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 8002c72:	4a13      	ldr	r2, [pc, #76]	; (8002cc0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002c78:	4a12      	ldr	r2, [pc, #72]	; (8002cc4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8002c7a:	8b3b      	ldrh	r3, [r7, #24]
 8002c7c:	8013      	strh	r3, [r2, #0]
 8002c7e:	4b11      	ldr	r3, [pc, #68]	; (8002cc4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8002c80:	881a      	ldrh	r2, [r3, #0]
 8002c82:	4b11      	ldr	r3, [pc, #68]	; (8002cc8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8002c84:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002c86:	4a11      	ldr	r2, [pc, #68]	; (8002ccc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8002c88:	8bbb      	ldrh	r3, [r7, #28]
 8002c8a:	8013      	strh	r3, [r2, #0]
 8002c8c:	4b0f      	ldr	r3, [pc, #60]	; (8002ccc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8002c8e:	881a      	ldrh	r2, [r3, #0]
 8002c90:	4b0f      	ldr	r3, [pc, #60]	; (8002cd0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 8002c92:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8002c94:	4b0f      	ldr	r3, [pc, #60]	; (8002cd4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002c9a:	8b3a      	ldrh	r2, [r7, #24]
 8002c9c:	8bbb      	ldrh	r3, [r7, #28]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	bf34      	ite	cc
 8002ca2:	2301      	movcc	r3, #1
 8002ca4:	2300      	movcs	r3, #0
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	461a      	mov	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	0802d804 	.word	0x0802d804
 8002cc0:	2400b5d0 	.word	0x2400b5d0
 8002cc4:	2400b5c4 	.word	0x2400b5c4
 8002cc8:	2400b5ca 	.word	0x2400b5ca
 8002ccc:	2400b5c6 	.word	0x2400b5c6
 8002cd0:	2400b5cc 	.word	0x2400b5cc
 8002cd4:	2400b5c8 	.word	0x2400b5c8

08002cd8 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	4a05      	ldr	r2, [pc, #20]	; (8002cf8 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff fe81 	bl	80029f0 <_ZN8touchgfx15UIEventListenerD1Ev>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3708      	adds	r7, #8
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	0802e4b8 	.word	0x0802e4b8

08002cfc <_ZN8touchgfx11ApplicationD0Ev>:
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f7ff ffe7 	bl	8002cd8 <_ZN8touchgfx11ApplicationD1Ev>
 8002d0a:	f44f 719c 	mov.w	r1, #312	; 0x138
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f027 f939 	bl	8029f86 <_ZdlPvj>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4618      	mov	r0, r3
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b082      	sub	sp, #8
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f804 	bl	8002d34 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8002d2c:	bf00      	nop
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00f      	beq.n	8002d66 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	330c      	adds	r3, #12
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4610      	mov	r0, r2
 8002d5a:	4798      	blx	r3
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8002d62:	2301      	movs	r3, #1
 8002d64:	e000      	b.n	8002d68 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8002d66:	2300      	movs	r3, #0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00e      	beq.n	8002d8a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	3308      	adds	r3, #8
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4610      	mov	r0, r2
 8002d80:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 8002d8a:	bf00      	nop
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
	...

08002d94 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	4a05      	ldr	r2, [pc, #20]	; (8002db4 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff ff97 	bl	8002cd8 <_ZN8touchgfx11ApplicationD1Ev>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4618      	mov	r0, r3
 8002dae:	3708      	adds	r7, #8
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	0802c2ec 	.word	0x0802c2ec

08002db8 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f7ff ffe7 	bl	8002d94 <_ZN8touchgfx14MVPApplicationD1Ev>
 8002dc6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f027 f8db 	bl	8029f86 <_ZdlPvj>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
	...

08002ddc <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	4a08      	ldr	r2, [pc, #32]	; (8002e08 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	601a      	str	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8002df0:	4618      	mov	r0, r3
 8002df2:	f000 fae9 	bl	80033c8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff ffcb 	bl	8002d94 <_ZN8touchgfx14MVPApplicationD1Ev>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4618      	mov	r0, r3
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	0802c290 	.word	0x0802c290

08002e0c <_ZN23FrontendApplicationBaseD0Ev>:
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f7ff ffe1 	bl	8002ddc <_ZN23FrontendApplicationBaseD1Ev>
 8002e1a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f027 f8b1 	bl	8029f86 <_ZdlPvj>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4618      	mov	r0, r3
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
	...

08002e30 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	4a05      	ldr	r2, [pc, #20]	; (8002e50 <_ZN19FrontendApplicationD1Ev+0x20>)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	601a      	str	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff ffcb 	bl	8002ddc <_ZN23FrontendApplicationBaseD1Ev>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3708      	adds	r7, #8
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	0802c24c 	.word	0x0802c24c

08002e54 <_ZN19FrontendApplicationD0Ev>:
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f7ff ffe7 	bl	8002e30 <_ZN19FrontendApplicationD1Ev>
 8002e62:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f027 f88d 	bl	8029f86 <_ZdlPvj>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b082      	sub	sp, #8
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002e84:	4618      	mov	r0, r3
 8002e86:	f007 f9f3 	bl	800a270 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f017 fe0f 	bl	801aab0 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8002e92:	bf00      	nop
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b082      	sub	sp, #8
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
 8002ea2:	6039      	str	r1, [r7, #0]
    {
        app.gotoMainScreenNoTransition();
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f001 fb28 	bl	80044fc <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
    }
 8002eac:	bf00      	nop
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af02      	add	r7, sp, #8
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
 8002ec0:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	68b9      	ldr	r1, [r7, #8]
 8002ece:	f7ff fd0d 	bl	80028ec <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8002ed2:	4a04      	ldr	r2, [pc, #16]	; (8002ee4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	601a      	str	r2, [r3, #0]
    {

    }
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	4618      	mov	r0, r3
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	0802c238 	.word	0x0802c238

08002ee8 <__tcf_0>:
            > > CombinedTransitionTypes;
    typedef meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	4801      	ldr	r0, [pc, #4]	; (8002ef4 <__tcf_0+0xc>)
 8002eee:	f000 f95f 	bl	80031b0 <_ZN12FrontendHeapD1Ev>
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	24000174 	.word	0x24000174

08002ef8 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8002efc:	4b12      	ldr	r3, [pc, #72]	; (8002f48 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	f3bf 8f5b 	dmb	ish
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	bf0c      	ite	eq
 8002f0e:	2301      	moveq	r3, #1
 8002f10:	2300      	movne	r3, #0
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d013      	beq.n	8002f40 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8002f18:	480b      	ldr	r0, [pc, #44]	; (8002f48 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8002f1a:	f027 f836 	bl	8029f8a <__cxa_guard_acquire>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	bf14      	ite	ne
 8002f24:	2301      	movne	r3, #1
 8002f26:	2300      	moveq	r3, #0
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d008      	beq.n	8002f40 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8002f2e:	4807      	ldr	r0, [pc, #28]	; (8002f4c <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8002f30:	f000 f868 	bl	8003004 <_ZN12FrontendHeapC1Ev>
 8002f34:	4804      	ldr	r0, [pc, #16]	; (8002f48 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8002f36:	f027 f834 	bl	8029fa2 <__cxa_guard_release>
 8002f3a:	4805      	ldr	r0, [pc, #20]	; (8002f50 <_ZN12FrontendHeap11getInstanceEv+0x58>)
 8002f3c:	f027 f870 	bl	802a020 <atexit>
        return instance;
 8002f40:	4b02      	ldr	r3, [pc, #8]	; (8002f4c <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 8002f42:	4618      	mov	r0, r3
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	24000e5c 	.word	0x24000e5c
 8002f4c:	24000174 	.word	0x24000174
 8002f50:	08002ee9 	.word	0x08002ee9

08002f54 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	4a05      	ldr	r2, [pc, #20]	; (8002f74 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	601a      	str	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7ff fce1 	bl	800292c <_ZN8touchgfx7MVPHeapD1Ev>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3708      	adds	r7, #8
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	0802c238 	.word	0x0802c238

08002f78 <_ZN16FrontendHeapBaseD0Ev>:
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f7ff ffe7 	bl	8002f54 <_ZN16FrontendHeapBaseD1Ev>
 8002f86:	2114      	movs	r1, #20
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f026 fffc 	bl	8029f86 <_ZdlPvj>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4618      	mov	r0, r3
 8002f92:	3708      	adds	r7, #8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f013 fcfc 	bl	80169a0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002fa8:	4a03      	ldr	r2, [pc, #12]	; (8002fb8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	601a      	str	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	0802c204 	.word	0x0802c204

08002fbc <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f013 fcea 	bl	80169a0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002fcc:	4a03      	ldr	r2, [pc, #12]	; (8002fdc <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	601a      	str	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	0802c1d0 	.word	0x0802c1d0

08002fe0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f013 fcd8 	bl	80169a0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002ff0:	4a03      	ldr	r2, [pc, #12]	; (8003000 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	601a      	str	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3708      	adds	r7, #8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	0802c19c 	.word	0x0802c19c

08003004 <_ZN12FrontendHeapC1Ev>:
    Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8003004:	b590      	push	{r4, r7, lr}
 8003006:	b085      	sub	sp, #20
 8003008:	af02      	add	r7, sp, #8
 800300a:	6078      	str	r0, [r7, #4]
        app(model, *this)
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f103 0114 	add.w	r1, r3, #20
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f603 344c 	addw	r4, r3, #2892	; 0xb4c
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f603 338c 	addw	r3, r3, #2956	; 0xb8c
        app(model, *this)
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	4623      	mov	r3, r4
 800302a:	f7ff ff43 	bl	8002eb4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 800302e:	4a18      	ldr	r2, [pc, #96]	; (8003090 <_ZN12FrontendHeapC1Ev+0x8c>)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	3314      	adds	r3, #20
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff ffad 	bl	8002f98 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	332c      	adds	r3, #44	; 0x2c
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff ffba 	bl	8002fbc <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f603 334c 	addw	r3, r3, #2892	; 0xb4c
 800304e:	4618      	mov	r0, r3
 8003050:	f7ff ffc6 	bl	8002fe0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f603 308c 	addw	r0, r3, #2956	; 0xb8c
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f603 43e4 	addw	r3, r3, #3300	; 0xce4
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	4619      	mov	r1, r3
 8003064:	f006 fc90 	bl	8009988 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f603 43e4 	addw	r3, r3, #3300	; 0xce4
 800306e:	4618      	mov	r0, r3
 8003070:	f007 f8f0 	bl	800a254 <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f603 338c 	addw	r3, r3, #2956	; 0xb8c
 800307c:	4619      	mov	r1, r3
 800307e:	4610      	mov	r0, r2
 8003080:	f7ff ff0b 	bl	8002e9a <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4618      	mov	r0, r3
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	bd90      	pop	{r4, r7, pc}
 800308e:	bf00      	nop
 8003090:	0802c188 	.word	0x0802c188

08003094 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8003094:	b580      	push	{r7, lr}
 8003096:	b086      	sub	sp, #24
 8003098:	af02      	add	r7, sp, #8
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
 80030a0:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	8bbb      	ldrh	r3, [r7, #28]
 80030a6:	9301      	str	r3, [sp, #4]
 80030a8:	8b3b      	ldrh	r3, [r7, #24]
 80030aa:	9300      	str	r3, [sp, #0]
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	68b9      	ldr	r1, [r7, #8]
 80030b2:	f7ff fd51 	bl	8002b58 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 80030b6:	4a04      	ldr	r2, [pc, #16]	; (80030c8 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	601a      	str	r2, [r3, #0]
    }
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	4618      	mov	r0, r3
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	0802c394 	.word	0x0802c394

080030cc <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af02      	add	r7, sp, #8
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
 80030d8:	603b      	str	r3, [r7, #0]
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	8bbb      	ldrh	r3, [r7, #28]
 80030de:	9301      	str	r3, [sp, #4]
 80030e0:	8b3b      	ldrh	r3, [r7, #24]
 80030e2:	9300      	str	r3, [sp, #0]
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	68b9      	ldr	r1, [r7, #8]
 80030ea:	f7ff ffd3 	bl	8003094 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80030ee:	4a04      	ldr	r2, [pc, #16]	; (8003100 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	601a      	str	r2, [r3, #0]
    }
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	4618      	mov	r0, r3
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	0802c044 	.word	0x0802c044

08003104 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	4a04      	ldr	r2, [pc, #16]	; (8003120 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	601a      	str	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4618      	mov	r0, r3
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr
 8003120:	0802c02c 	.word	0x0802c02c

08003124 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4618      	mov	r0, r3
 8003130:	f7ff ffe8 	bl	8003104 <_ZN8touchgfx15TouchControllerC1Ev>
 8003134:	4a03      	ldr	r2, [pc, #12]	; (8003144 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	601a      	str	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4618      	mov	r0, r3
 800313e:	3708      	adds	r7, #8
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	0802c014 	.word	0x0802c014

08003148 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8003148:	b590      	push	{r4, r7, lr}
 800314a:	b085      	sub	sp, #20
 800314c:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 800314e:	f000 fd5f 	bl	8003c10 <_ZN14BitmapDatabase11getInstanceEv>
 8003152:	4604      	mov	r4, r0
 8003154:	f000 fd66 	bl	8003c24 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8003158:	4603      	mov	r3, r0
 800315a:	4619      	mov	r1, r3
 800315c:	2300      	movs	r3, #0
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	2300      	movs	r3, #0
 8003162:	2200      	movs	r2, #0
 8003164:	4620      	mov	r0, r4
 8003166:	f01a feb7 	bl	801ded8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 800316a:	4809      	ldr	r0, [pc, #36]	; (8003190 <touchgfx_init+0x48>)
 800316c:	f7ff fb8e 	bl	800288c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8003170:	2000      	movs	r0, #0
 8003172:	f006 fb53 	bl	800981c <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8003176:	4807      	ldr	r0, [pc, #28]	; (8003194 <touchgfx_init+0x4c>)
 8003178:	f01a fdf0 	bl	801dd5c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 800317c:	f7ff febc 	bl	8002ef8 <_ZN12FrontendHeap11getInstanceEv>
 8003180:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8003182:	4805      	ldr	r0, [pc, #20]	; (8003198 <touchgfx_init+0x50>)
 8003184:	f7fe fdb8 	bl	8001cf8 <_ZN11TouchGFXHAL10initializeEv>
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	bd90      	pop	{r4, r7, pc}
 8003190:	24001afc 	.word	0x24001afc
 8003194:	24000008 	.word	0x24000008
 8003198:	24001b00 	.word	0x24001b00

0800319c <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80031a0:	4802      	ldr	r0, [pc, #8]	; (80031ac <touchgfx_taskEntry+0x10>)
 80031a2:	f014 fc8c 	bl	8017abe <_ZN8touchgfx3HAL9taskEntryEv>
}
 80031a6:	bf00      	nop
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	24001b00 	.word	0x24001b00

080031b0 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	4a10      	ldr	r2, [pc, #64]	; (80031fc <_ZN12FrontendHeapD1Ev+0x4c>)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	601a      	str	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f603 338c 	addw	r3, r3, #2956	; 0xb8c
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7ff fe33 	bl	8002e30 <_ZN19FrontendApplicationD1Ev>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f603 334c 	addw	r3, r3, #2892	; 0xb4c
 80031d0:	4618      	mov	r0, r3
 80031d2:	f000 f827 	bl	8003224 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	332c      	adds	r3, #44	; 0x2c
 80031da:	4618      	mov	r0, r3
 80031dc:	f000 f844 	bl	8003268 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	3314      	adds	r3, #20
 80031e4:	4618      	mov	r0, r3
 80031e6:	f000 f863 	bl	80032b0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff feb1 	bl	8002f54 <_ZN16FrontendHeapBaseD1Ev>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4618      	mov	r0, r3
 80031f6:	3708      	adds	r7, #8
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	0802c188 	.word	0x0802c188

08003200 <_ZN12FrontendHeapD0Ev>:
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f7ff ffd1 	bl	80031b0 <_ZN12FrontendHeapD1Ev>
 800320e:	f640 41e8 	movw	r1, #3304	; 0xce8
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f026 feb7 	bl	8029f86 <_ZdlPvj>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4618      	mov	r0, r3
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
	...

08003224 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	4a05      	ldr	r2, [pc, #20]	; (8003244 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4618      	mov	r0, r3
 8003236:	f013 fbb1 	bl	801699c <_ZN8touchgfx17AbstractPartitionD1Ev>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4618      	mov	r0, r3
 800323e:	3708      	adds	r7, #8
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	0802c19c 	.word	0x0802c19c

08003248 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f7ff ffe7 	bl	8003224 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8003256:	2140      	movs	r1, #64	; 0x40
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f026 fe94 	bl	8029f86 <_ZdlPvj>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4618      	mov	r0, r3
 8003262:	3708      	adds	r7, #8
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	4a05      	ldr	r2, [pc, #20]	; (8003288 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	601a      	str	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4618      	mov	r0, r3
 800327a:	f013 fb8f 	bl	801699c <_ZN8touchgfx17AbstractPartitionD1Ev>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4618      	mov	r0, r3
 8003282:	3708      	adds	r7, #8
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	0802c1d0 	.word	0x0802c1d0

0800328c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f7ff ffe7 	bl	8003268 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800329a:	f44f 6132 	mov.w	r1, #2848	; 0xb20
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f026 fe71 	bl	8029f86 <_ZdlPvj>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4618      	mov	r0, r3
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
	...

080032b0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	4a05      	ldr	r2, [pc, #20]	; (80032d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f013 fb6b 	bl	801699c <_ZN8touchgfx17AbstractPartitionD1Ev>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4618      	mov	r0, r3
 80032ca:	3708      	adds	r7, #8
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	0802c204 	.word	0x0802c204

080032d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f7ff ffe7 	bl	80032b0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80032e2:	2118      	movs	r1, #24
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f026 fe4e 	bl	8029f86 <_ZdlPvj>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4618      	mov	r0, r3
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	4a05      	ldr	r2, [pc, #20]	; (8003314 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	601a      	str	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4618      	mov	r0, r3
 8003306:	f7ff fb93 	bl	8002a30 <_ZN8touchgfx3LCDD1Ev>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4618      	mov	r0, r3
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	0802f648 	.word	0x0802f648

08003318 <_ZN8touchgfx8LCD16bppD0Ev>:
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f7ff ffe7 	bl	80032f4 <_ZN8touchgfx8LCD16bppD1Ev>
 8003326:	2178      	movs	r1, #120	; 0x78
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f026 fe2c 	bl	8029f86 <_ZdlPvj>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4618      	mov	r0, r3
 8003332:	3708      	adds	r7, #8
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <_Z41__static_initialization_and_destruction_0ii>:
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af02      	add	r7, sp, #8
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d119      	bne.n	800337c <_Z41__static_initialization_and_destruction_0ii+0x44>
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800334e:	4293      	cmp	r3, r2
 8003350:	d114      	bne.n	800337c <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 8003352:	4818      	ldr	r0, [pc, #96]	; (80033b4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003354:	f7ff fee6 	bl	8003124 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 8003358:	4817      	ldr	r0, [pc, #92]	; (80033b8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800335a:	f7fe ff5d 	bl	8002218 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 800335e:	4817      	ldr	r0, [pc, #92]	; (80033bc <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003360:	f01d fe82 	bl	8021068 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 8003364:	f44f 7388 	mov.w	r3, #272	; 0x110
 8003368:	9301      	str	r3, [sp, #4]
 800336a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800336e:	9300      	str	r3, [sp, #0]
 8003370:	4b10      	ldr	r3, [pc, #64]	; (80033b4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003372:	4a12      	ldr	r2, [pc, #72]	; (80033bc <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003374:	4910      	ldr	r1, [pc, #64]	; (80033b8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003376:	4812      	ldr	r0, [pc, #72]	; (80033c0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8003378:	f7ff fea8 	bl	80030cc <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d113      	bne.n	80033aa <_Z41__static_initialization_and_destruction_0ii+0x72>
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003388:	4293      	cmp	r3, r2
 800338a:	d10e      	bne.n	80033aa <_Z41__static_initialization_and_destruction_0ii+0x72>
 800338c:	480c      	ldr	r0, [pc, #48]	; (80033c0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800338e:	f7fe fd2b 	bl	8001de8 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8003392:	480c      	ldr	r0, [pc, #48]	; (80033c4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8003394:	f000 f83a 	bl	800340c <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 8003398:	4808      	ldr	r0, [pc, #32]	; (80033bc <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800339a:	f7ff ffab 	bl	80032f4 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 800339e:	4806      	ldr	r0, [pc, #24]	; (80033b8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80033a0:	f7fe ff64 	bl	800226c <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 80033a4:	4803      	ldr	r0, [pc, #12]	; (80033b4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80033a6:	f7fe faad 	bl	8001904 <_ZN20STM32TouchControllerD1Ev>
}
 80033aa:	bf00      	nop
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	24000e60 	.word	0x24000e60
 80033b8:	24000e64 	.word	0x24000e64
 80033bc:	24001a84 	.word	0x24001a84
 80033c0:	24001b00 	.word	0x24001b00
 80033c4:	24000008 	.word	0x24000008

080033c8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	4a05      	ldr	r2, [pc, #20]	; (80033e8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	601a      	str	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4618      	mov	r0, r3
 80033da:	f7ff fb67 	bl	8002aac <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4618      	mov	r0, r3
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	0802c2d4 	.word	0x0802c2d4

080033ec <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f7ff ffe7 	bl	80033c8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 80033fa:	2110      	movs	r1, #16
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f026 fdc2 	bl	8029f86 <_ZdlPvj>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4618      	mov	r0, r3
 8003406:	3708      	adds	r7, #8
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId TYPOGRAPHY_01 = 0; // verdana_20_4bpp
    static const touchgfx::FontId TYPOGRAPHY_02 = 4; // verdanab_12_4bpp
    static const uint16_t NUMBER_OF_FONTS = 5;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	4a05      	ldr	r2, [pc, #20]	; (800342c <_ZN23ApplicationFontProviderD1Ev+0x20>)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	601a      	str	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4618      	mov	r0, r3
 800341e:	f7ff fa45 	bl	80028ac <_ZN8touchgfx12FontProviderD1Ev>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4618      	mov	r0, r3
 8003426:	3708      	adds	r7, #8
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	0802c464 	.word	0x0802c464

08003430 <_ZN23ApplicationFontProviderD0Ev>:
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f7ff ffe7 	bl	800340c <_ZN23ApplicationFontProviderD1Ev>
 800343e:	2104      	movs	r1, #4
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f026 fda0 	bl	8029f86 <_ZdlPvj>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4618      	mov	r0, r3
 800344a:	3708      	adds	r7, #8
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8003458:	2301      	movs	r3, #1
    }
 800345a:	4618      	mov	r0, r3
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8003466:	b480      	push	{r7}
 8003468:	b083      	sub	sp, #12
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 800346e:	2338      	movs	r3, #56	; 0x38
    }
 8003470:	4618      	mov	r0, r3
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	460b      	mov	r3, r1
 8003486:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8003488:	887a      	ldrh	r2, [r7, #2]
 800348a:	4613      	mov	r3, r2
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	1a9b      	subs	r3, r3, r2
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	3308      	adds	r3, #8
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	4413      	add	r3, r2
    }
 8003498:	4618      	mov	r0, r3
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	460b      	mov	r3, r1
 80034ae:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80034b0:	887a      	ldrh	r2, [r7, #2]
 80034b2:	4613      	mov	r3, r2
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	1a9b      	subs	r3, r3, r2
 80034b8:	00db      	lsls	r3, r3, #3
 80034ba:	3308      	adds	r3, #8
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	4413      	add	r3, r2
    }
 80034c0:	4618      	mov	r0, r3
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80034d4:	2301      	movs	r3, #1
    }
 80034d6:	4618      	mov	r0, r3
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr

080034e2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80034e2:	b480      	push	{r7}
 80034e4:	b083      	sub	sp, #12
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80034ea:	f640 3318 	movw	r3, #2840	; 0xb18
    }
 80034ee:	4618      	mov	r0, r3
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr

080034fa <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80034fa:	b480      	push	{r7}
 80034fc:	b083      	sub	sp, #12
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
 8003502:	460b      	mov	r3, r1
 8003504:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003506:	887b      	ldrh	r3, [r7, #2]
 8003508:	f640 3218 	movw	r2, #2840	; 0xb18
 800350c:	fb02 f303 	mul.w	r3, r2, r3
 8003510:	3308      	adds	r3, #8
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	4413      	add	r3, r2
    }
 8003516:	4618      	mov	r0, r3
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8003522:	b480      	push	{r7}
 8003524:	b083      	sub	sp, #12
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
 800352a:	460b      	mov	r3, r1
 800352c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800352e:	887b      	ldrh	r3, [r7, #2]
 8003530:	f640 3218 	movw	r2, #2840	; 0xb18
 8003534:	fb02 f303 	mul.w	r3, r2, r3
 8003538:	3308      	adds	r3, #8
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	4413      	add	r3, r2
    }
 800353e:	4618      	mov	r0, r3
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800354a:	b480      	push	{r7}
 800354c:	b083      	sub	sp, #12
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8003552:	2301      	movs	r3, #1
    }
 8003554:	4618      	mov	r0, r3
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8003568:	2310      	movs	r3, #16
    }
 800356a:	4618      	mov	r0, r3
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr

08003576 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8003576:	b480      	push	{r7}
 8003578:	b083      	sub	sp, #12
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
 800357e:	460b      	mov	r3, r1
 8003580:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003582:	887b      	ldrh	r3, [r7, #2]
 8003584:	011b      	lsls	r3, r3, #4
 8003586:	3308      	adds	r3, #8
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	4413      	add	r3, r2
    }
 800358c:	4618      	mov	r0, r3
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	460b      	mov	r3, r1
 80035a2:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80035a4:	887b      	ldrh	r3, [r7, #2]
 80035a6:	011b      	lsls	r3, r3, #4
 80035a8:	3308      	adds	r3, #8
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	4413      	add	r3, r2
    }
 80035ae:	4618      	mov	r0, r3
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b082      	sub	sp, #8
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	68d2      	ldr	r2, [r2, #12]
 80035ca:	1052      	asrs	r2, r2, #1
 80035cc:	1899      	adds	r1, r3, r2
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d102      	bne.n	80035e0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	e00a      	b.n	80035f6 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	68d2      	ldr	r2, [r2, #12]
 80035e8:	1052      	asrs	r2, r2, #1
 80035ea:	4413      	add	r3, r2
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	6892      	ldr	r2, [r2, #8]
 80035f2:	4413      	add	r3, r2
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4608      	mov	r0, r1
 80035f8:	4798      	blx	r3
    }
 80035fa:	bf00      	nop
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8003602:	b480      	push	{r7}
 8003604:	b083      	sub	sp, #12
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d010      	beq.n	8003634 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d107      	bne.n	800362a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8003626:	2301      	movs	r3, #1
 8003628:	e000      	b.n	800362c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800362a:	2300      	movs	r3, #0
 800362c:	2b01      	cmp	r3, #1
 800362e:	d001      	beq.n	8003634 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8003630:	2301      	movs	r3, #1
 8003632:	e000      	b.n	8003636 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 8003634:	2300      	movs	r3, #0
    }
 8003636:	4618      	mov	r0, r3
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <_GLOBAL__sub_I_touchgfx_init>:
 8003642:	b580      	push	{r7, lr}
 8003644:	af00      	add	r7, sp, #0
 8003646:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800364a:	2001      	movs	r0, #1
 800364c:	f7ff fe74 	bl	8003338 <_Z41__static_initialization_and_destruction_0ii>
 8003650:	bd80      	pop	{r7, pc}

08003652 <_GLOBAL__sub_D_touchgfx_init>:
 8003652:	b580      	push	{r7, lr}
 8003654:	af00      	add	r7, sp, #0
 8003656:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800365a:	2000      	movs	r0, #0
 800365c:	f7ff fe6c 	bl	8003338 <_Z41__static_initialization_and_destruction_0ii>
 8003660:	bd80      	pop	{r7, pc}

08003662 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8003662:	b580      	push	{r7, lr}
 8003664:	b082      	sub	sp, #8
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	3320      	adds	r3, #32
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	4798      	blx	r3
    }
 8003676:	bf00      	nop
 8003678:	3708      	adds	r7, #8
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 800367e:	b480      	push	{r7}
 8003680:	b083      	sub	sp, #12
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800368c:	3301      	adds	r3, #1
 800368e:	b2da      	uxtb	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
	...

080036a4 <__NVIC_EnableIRQ>:
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	4603      	mov	r3, r0
 80036ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80036ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	db0b      	blt.n	80036ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036b6:	88fb      	ldrh	r3, [r7, #6]
 80036b8:	f003 021f 	and.w	r2, r3, #31
 80036bc:	4907      	ldr	r1, [pc, #28]	; (80036dc <__NVIC_EnableIRQ+0x38>)
 80036be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036c2:	095b      	lsrs	r3, r3, #5
 80036c4:	2001      	movs	r0, #1
 80036c6:	fa00 f202 	lsl.w	r2, r0, r2
 80036ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	e000e100 	.word	0xe000e100

080036e0 <__NVIC_DisableIRQ>:
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	4603      	mov	r3, r0
 80036e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80036ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	db12      	blt.n	8003718 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036f2:	88fb      	ldrh	r3, [r7, #6]
 80036f4:	f003 021f 	and.w	r2, r3, #31
 80036f8:	490a      	ldr	r1, [pc, #40]	; (8003724 <__NVIC_DisableIRQ+0x44>)
 80036fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036fe:	095b      	lsrs	r3, r3, #5
 8003700:	2001      	movs	r0, #1
 8003702:	fa00 f202 	lsl.w	r2, r0, r2
 8003706:	3320      	adds	r3, #32
 8003708:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800370c:	f3bf 8f4f 	dsb	sy
}
 8003710:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003712:	f3bf 8f6f 	isb	sy
}
 8003716:	bf00      	nop
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	e000e100 	.word	0xe000e100

08003728 <__NVIC_SetPriority>:
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	4603      	mov	r3, r0
 8003730:	6039      	str	r1, [r7, #0]
 8003732:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003734:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003738:	2b00      	cmp	r3, #0
 800373a:	db0a      	blt.n	8003752 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	b2da      	uxtb	r2, r3
 8003740:	490c      	ldr	r1, [pc, #48]	; (8003774 <__NVIC_SetPriority+0x4c>)
 8003742:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003746:	0112      	lsls	r2, r2, #4
 8003748:	b2d2      	uxtb	r2, r2
 800374a:	440b      	add	r3, r1
 800374c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003750:	e00a      	b.n	8003768 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	b2da      	uxtb	r2, r3
 8003756:	4908      	ldr	r1, [pc, #32]	; (8003778 <__NVIC_SetPriority+0x50>)
 8003758:	88fb      	ldrh	r3, [r7, #6]
 800375a:	f003 030f 	and.w	r3, r3, #15
 800375e:	3b04      	subs	r3, #4
 8003760:	0112      	lsls	r2, r2, #4
 8003762:	b2d2      	uxtb	r2, r2
 8003764:	440b      	add	r3, r1
 8003766:	761a      	strb	r2, [r3, #24]
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr
 8003774:	e000e100 	.word	0xe000e100
 8003778:	e000ed00 	.word	0xe000ed00

0800377c <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 800377c:	b5b0      	push	{r4, r5, r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4618      	mov	r0, r3
 8003788:	f014 f987 	bl	8017a9a <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 800378c:	687d      	ldr	r5, [r7, #4]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	3360      	adds	r3, #96	; 0x60
 8003794:	681c      	ldr	r4, [r3, #0]
 8003796:	f017 fab7 	bl	801ad08 <_ZN8touchgfx11Application11getInstanceEv>
 800379a:	4603      	mov	r3, r0
 800379c:	4619      	mov	r1, r3
 800379e:	4628      	mov	r0, r5
 80037a0:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0xD0200000, (void*)0);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	3384      	adds	r3, #132	; 0x84
 80037aa:	681c      	ldr	r4, [r3, #0]
 80037ac:	2300      	movs	r3, #0
 80037ae:	4a04      	ldr	r2, [pc, #16]	; (80037c0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 80037b0:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80037b4:	47a0      	blx	r4
}
 80037b6:	bf00      	nop
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bdb0      	pop	{r4, r5, r7, pc}
 80037be:	bf00      	nop
 80037c0:	d0200000 	.word	0xd0200000

080037c4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 80037cc:	2109      	movs	r1, #9
 80037ce:	205a      	movs	r0, #90	; 0x5a
 80037d0:	f7ff ffaa 	bl	8003728 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 80037d4:	2109      	movs	r1, #9
 80037d6:	2058      	movs	r0, #88	; 0x58
 80037d8:	f7ff ffa6 	bl	8003728 <__NVIC_SetPriority>
}
 80037dc:	bf00      	nop
 80037de:	3708      	adds	r7, #8
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 80037ec:	205a      	movs	r0, #90	; 0x5a
 80037ee:	f7ff ff59 	bl	80036a4 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 80037f2:	2058      	movs	r0, #88	; 0x58
 80037f4:	f7ff ff56 	bl	80036a4 <__NVIC_EnableIRQ>
}
 80037f8:	bf00      	nop
 80037fa:	3708      	adds	r7, #8
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8003808:	205a      	movs	r0, #90	; 0x5a
 800380a:	f7ff ff69 	bl	80036e0 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 800380e:	2058      	movs	r0, #88	; 0x58
 8003810:	f7ff ff66 	bl	80036e0 <__NVIC_DisableIRQ>
}
 8003814:	bf00      	nop
 8003816:	3708      	adds	r7, #8
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8003824:	4b11      	ldr	r3, [pc, #68]	; (800386c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	b29b      	uxth	r3, r3
 800382a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800382e:	b29b      	uxth	r3, r3
 8003830:	3b01      	subs	r3, #1
 8003832:	b29a      	uxth	r2, r3
 8003834:	4b0e      	ldr	r3, [pc, #56]	; (8003870 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8003836:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8003838:	4b0c      	ldr	r3, [pc, #48]	; (800386c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	b29b      	uxth	r3, r3
 800383e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003842:	b29b      	uxth	r3, r3
 8003844:	3b01      	subs	r3, #1
 8003846:	b29a      	uxth	r2, r3
 8003848:	4b0a      	ldr	r3, [pc, #40]	; (8003874 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 800384a:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 800384c:	4b08      	ldr	r3, [pc, #32]	; (8003870 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800384e:	881a      	ldrh	r2, [r3, #0]
 8003850:	4b06      	ldr	r3, [pc, #24]	; (800386c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8003852:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8003854:	4b05      	ldr	r3, [pc, #20]	; (800386c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8003856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003858:	4a04      	ldr	r2, [pc, #16]	; (800386c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800385a:	f043 0301 	orr.w	r3, r3, #1
 800385e:	6353      	str	r3, [r2, #52]	; 0x34
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr
 800386c:	50001000 	.word	0x50001000
 8003870:	24001b7c 	.word	0x24001b7c
 8003874:	24001b7e 	.word	0x24001b7e

08003878 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4618      	mov	r0, r3
 8003884:	f014 f8f0 	bl	8017a68 <_ZN8touchgfx3HAL10beginFrameEv>
 8003888:	4603      	mov	r3, r0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3708      	adds	r7, #8
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b082      	sub	sp, #8
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4618      	mov	r0, r3
 800389e:	f014 f8ef 	bl	8017a80 <_ZN8touchgfx3HAL8endFrameEv>

}
 80038a2:	bf00      	nop
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
	...

080038ac <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 80038b4:	4b03      	ldr	r3, [pc, #12]	; (80038c4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 80038b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	50001084 	.word	0x50001084

080038c8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80038d2:	4a06      	ldr	r2, [pc, #24]	; (80038ec <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80038d8:	4b05      	ldr	r3, [pc, #20]	; (80038f0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 80038da:	2201      	movs	r2, #1
 80038dc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80038de:	bf00      	nop
 80038e0:	370c      	adds	r7, #12
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	50001084 	.word	0x50001084
 80038f0:	50001000 	.word	0x50001000

080038f4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6839      	ldr	r1, [r7, #0]
 8003902:	4618      	mov	r0, r3
 8003904:	f014 f879 	bl	80179fa <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003908:	4b25      	ldr	r3, [pc, #148]	; (80039a0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003910:	2b00      	cmp	r3, #0
 8003912:	bf14      	ite	ne
 8003914:	2301      	movne	r3, #1
 8003916:	2300      	moveq	r3, #0
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d03c      	beq.n	8003998 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xa4>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800391e:	4b20      	ldr	r3, [pc, #128]	; (80039a0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 8003920:	2200      	movs	r2, #0
 8003922:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003926:	f3bf 8f4f 	dsb	sy
}
 800392a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800392c:	4b1c      	ldr	r3, [pc, #112]	; (80039a0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 800392e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003932:	617b      	str	r3, [r7, #20]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	0b5b      	lsrs	r3, r3, #13
 8003938:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800393c:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	08db      	lsrs	r3, r3, #3
 8003942:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003946:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	015a      	lsls	r2, r3, #5
 800394c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8003950:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003956:	4912      	ldr	r1, [pc, #72]	; (80039a0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 8003958:	4313      	orrs	r3, r2
 800395a:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	1e5a      	subs	r2, r3, #1
 8003962:	60fa      	str	r2, [r7, #12]
 8003964:	2b00      	cmp	r3, #0
 8003966:	bf14      	ite	ne
 8003968:	2301      	movne	r3, #1
 800396a:	2300      	moveq	r3, #0
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d000      	beq.n	8003974 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x80>
      do {
 8003972:	e7e9      	b.n	8003948 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x54>
    } while(sets-- != 0U);
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	1e5a      	subs	r2, r3, #1
 8003978:	613a      	str	r2, [r7, #16]
 800397a:	2b00      	cmp	r3, #0
 800397c:	bf14      	ite	ne
 800397e:	2301      	movne	r3, #1
 8003980:	2300      	moveq	r3, #0
 8003982:	b2db      	uxtb	r3, r3
 8003984:	2b00      	cmp	r3, #0
 8003986:	d000      	beq.n	800398a <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x96>
    do {
 8003988:	e7d9      	b.n	800393e <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 800398a:	f3bf 8f4f 	dsb	sy
}
 800398e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003990:	f3bf 8f6f 	isb	sy
}
 8003994:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8003996:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003998:	bf00      	nop
 800399a:	3718      	adds	r7, #24
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	e000ed00 	.word	0xe000ed00

080039a4 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
 80039b0:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	68b9      	ldr	r1, [r7, #8]
 80039ba:	f014 f98a 	bl	8017cd2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 80039be:	4603      	mov	r3, r0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3710      	adds	r7, #16
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 80039c8:	b480      	push	{r7}
 80039ca:	b087      	sub	sp, #28
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80039d0:	4b26      	ldr	r3, [pc, #152]	; (8003a6c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 80039d2:	695b      	ldr	r3, [r3, #20]
 80039d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	bf14      	ite	ne
 80039dc:	2301      	movne	r3, #1
 80039de:	2300      	moveq	r3, #0
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d03c      	beq.n	8003a60 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x98>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80039e6:	4b21      	ldr	r3, [pc, #132]	; (8003a6c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80039ee:	f3bf 8f4f 	dsb	sy
}
 80039f2:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 80039f4:	4b1d      	ldr	r3, [pc, #116]	; (8003a6c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 80039f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039fa:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	0b5b      	lsrs	r3, r3, #13
 8003a00:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003a04:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	08db      	lsrs	r3, r3, #3
 8003a0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a0e:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	015a      	lsls	r2, r3, #5
 8003a14:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8003a18:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003a1e:	4913      	ldr	r1, [pc, #76]	; (8003a6c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	1e5a      	subs	r2, r3, #1
 8003a2a:	60fa      	str	r2, [r7, #12]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	bf14      	ite	ne
 8003a30:	2301      	movne	r3, #1
 8003a32:	2300      	moveq	r3, #0
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d000      	beq.n	8003a3c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x74>
      do {
 8003a3a:	e7e9      	b.n	8003a10 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x48>
    } while(sets-- != 0U);
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	1e5a      	subs	r2, r3, #1
 8003a40:	613a      	str	r2, [r7, #16]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	bf14      	ite	ne
 8003a46:	2301      	movne	r3, #1
 8003a48:	2300      	moveq	r3, #0
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d000      	beq.n	8003a52 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x8a>
    do {
 8003a50:	e7d9      	b.n	8003a06 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 8003a52:	f3bf 8f4f 	dsb	sy
}
 8003a56:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003a58:	f3bf 8f6f 	isb	sy
}
 8003a5c:	bf00      	nop
}
 8003a5e:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003a60:	bf00      	nop
 8003a62:	371c      	adds	r7, #28
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr
 8003a6c:	e000ed00 	.word	0xe000ed00

08003a70 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 8003a70:	b480      	push	{r7}
 8003a72:	b087      	sub	sp, #28
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003a78:	4b26      	ldr	r3, [pc, #152]	; (8003b14 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	bf14      	ite	ne
 8003a84:	2301      	movne	r3, #1
 8003a86:	2300      	moveq	r3, #0
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d03c      	beq.n	8003b08 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x98>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8003a8e:	4b21      	ldr	r3, [pc, #132]	; (8003b14 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003a96:	f3bf 8f4f 	dsb	sy
}
 8003a9a:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8003a9c:	4b1d      	ldr	r3, [pc, #116]	; (8003b14 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8003a9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003aa2:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	0b5b      	lsrs	r3, r3, #13
 8003aa8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003aac:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	08db      	lsrs	r3, r3, #3
 8003ab2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ab6:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	015a      	lsls	r2, r3, #5
 8003abc:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8003ac0:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003ac6:	4913      	ldr	r1, [pc, #76]	; (8003b14 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	1e5a      	subs	r2, r3, #1
 8003ad2:	60fa      	str	r2, [r7, #12]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	bf14      	ite	ne
 8003ad8:	2301      	movne	r3, #1
 8003ada:	2300      	moveq	r3, #0
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d000      	beq.n	8003ae4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x74>
      do {
 8003ae2:	e7e9      	b.n	8003ab8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    } while(sets-- != 0U);
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	1e5a      	subs	r2, r3, #1
 8003ae8:	613a      	str	r2, [r7, #16]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	bf14      	ite	ne
 8003aee:	2301      	movne	r3, #1
 8003af0:	2300      	moveq	r3, #0
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d000      	beq.n	8003afa <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x8a>
    do {
 8003af8:	e7d9      	b.n	8003aae <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 8003afa:	f3bf 8f4f 	dsb	sy
}
 8003afe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003b00:	f3bf 8f6f 	isb	sy
}
 8003b04:	bf00      	nop
}
 8003b06:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003b08:	bf00      	nop
 8003b0a:	371c      	adds	r7, #28
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr
 8003b14:	e000ed00 	.word	0xe000ed00

08003b18 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8003b20:	4b1a      	ldr	r3, [pc, #104]	; (8003b8c <HAL_LTDC_LineEventCallback+0x74>)
 8003b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b24:	4a1a      	ldr	r2, [pc, #104]	; (8003b90 <HAL_LTDC_LineEventCallback+0x78>)
 8003b26:	8812      	ldrh	r2, [r2, #0]
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	bf0c      	ite	eq
 8003b2c:	2301      	moveq	r3, #1
 8003b2e:	2300      	movne	r3, #0
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d017      	beq.n	8003b66 <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8003b36:	4b17      	ldr	r3, [pc, #92]	; (8003b94 <HAL_LTDC_LineEventCallback+0x7c>)
 8003b38:	881b      	ldrh	r3, [r3, #0]
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f00e fc4d 	bl	80123dc <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8003b42:	f7fe fb2f 	bl	80021a4 <_ZN8touchgfx3HAL11getInstanceEv>
 8003b46:	4603      	mov	r3, r0
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7ff fd98 	bl	800367e <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8003b4e:	f7fe fa23 	bl	8001f98 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8003b52:	f7fe fb27 	bl	80021a4 <_ZN8touchgfx3HAL11getInstanceEv>
 8003b56:	4603      	mov	r3, r0
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f014 fd93 	bl	8018684 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8003b5e:	2000      	movs	r0, #0
 8003b60:	f7fd fef2 	bl	8001948 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8003b64:	e00e      	b.n	8003b84 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8003b66:	4b0a      	ldr	r3, [pc, #40]	; (8003b90 <HAL_LTDC_LineEventCallback+0x78>)
 8003b68:	881b      	ldrh	r3, [r3, #0]
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f00e fc35 	bl	80123dc <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8003b72:	2000      	movs	r0, #0
 8003b74:	f7fd ff04 	bl	8001980 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8003b78:	f7fe fb14 	bl	80021a4 <_ZN8touchgfx3HAL11getInstanceEv>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7ff fd6f 	bl	8003662 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8003b84:	bf00      	nop
 8003b86:	3708      	adds	r7, #8
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	50001000 	.word	0x50001000
 8003b90:	24001b7c 	.word	0x24001b7c
 8003b94:	24001b7e 	.word	0x24001b7e

08003b98 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8003ba4:	887b      	ldrh	r3, [r7, #2]
 8003ba6:	2b05      	cmp	r3, #5
 8003ba8:	d82c      	bhi.n	8003c04 <_ZN23ApplicationFontProvider7getFontEt+0x6c>
 8003baa:	a201      	add	r2, pc, #4	; (adr r2, 8003bb0 <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 8003bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb0:	08003bc9 	.word	0x08003bc9
 8003bb4:	08003bd3 	.word	0x08003bd3
 8003bb8:	08003bdd 	.word	0x08003bdd
 8003bbc:	08003be7 	.word	0x08003be7
 8003bc0:	08003bf1 	.word	0x08003bf1
 8003bc4:	08003bfb 	.word	0x08003bfb
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8003bc8:	f005 fea0 	bl	800990c <_ZN17TypedTextDatabase8getFontsEv>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	e019      	b.n	8003c06 <_ZN23ApplicationFontProvider7getFontEt+0x6e>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8003bd2:	f005 fe9b 	bl	800990c <_ZN17TypedTextDatabase8getFontsEv>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	e014      	b.n	8003c06 <_ZN23ApplicationFontProvider7getFontEt+0x6e>
    case Typography::SMALL:
        // verdanab_8_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8003bdc:	f005 fe96 	bl	800990c <_ZN17TypedTextDatabase8getFontsEv>
 8003be0:	4603      	mov	r3, r0
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	e00f      	b.n	8003c06 <_ZN23ApplicationFontProvider7getFontEt+0x6e>
    case Typography::TYPOGRAPHY_00:
        // verdanab_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 8003be6:	f005 fe91 	bl	800990c <_ZN17TypedTextDatabase8getFontsEv>
 8003bea:	4603      	mov	r3, r0
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	e00a      	b.n	8003c06 <_ZN23ApplicationFontProvider7getFontEt+0x6e>
    case Typography::TYPOGRAPHY_01:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8003bf0:	f005 fe8c 	bl	800990c <_ZN17TypedTextDatabase8getFontsEv>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	e005      	b.n	8003c06 <_ZN23ApplicationFontProvider7getFontEt+0x6e>
    case Typography::TYPOGRAPHY_02:
        // verdanab_12_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 8003bfa:	f005 fe87 	bl	800990c <_ZN17TypedTextDatabase8getFontsEv>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	e000      	b.n	8003c06 <_ZN23ApplicationFontProvider7getFontEt+0x6e>
    default:
        return 0;
 8003c04:	2300      	movs	r3, #0
    }
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3708      	adds	r7, #8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop

08003c10 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
    return bitmap_database;
 8003c14:	4b02      	ldr	r3, [pc, #8]	; (8003c20 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	0802c470 	.word	0x0802c470

08003c24 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8003c28:	230e      	movs	r3, #14
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
    {
 8003c3c:	4a04      	ldr	r2, [pc, #16]	; (8003c50 <_ZN8touchgfx4FontD1Ev+0x1c>)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	601a      	str	r2, [r3, #0]
    }
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4618      	mov	r0, r3
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr
 8003c50:	0802c914 	.word	0x0802c914

08003c54 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
    }
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f7ff ffe9 	bl	8003c34 <_ZN8touchgfx4FontD1Ev>
 8003c62:	2110      	movs	r1, #16
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f026 f98e 	bl	8029f86 <_ZdlPvj>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3708      	adds	r7, #8
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8003c74:	b590      	push	{r4, r7, lr}
 8003c76:	b087      	sub	sp, #28
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 8003c80:	887b      	ldrh	r3, [r7, #2]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 8003c86:	2300      	movs	r3, #0
 8003c88:	e010      	b.n	8003cac <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	3308      	adds	r3, #8
 8003c98:	681c      	ldr	r4, [r3, #0]
 8003c9a:	f107 030f 	add.w	r3, r7, #15
 8003c9e:	f107 0210 	add.w	r2, r7, #16
 8003ca2:	8879      	ldrh	r1, [r7, #2]
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	47a0      	blx	r4
 8003ca8:	6178      	str	r0, [r7, #20]
        return glyph;
 8003caa:	697b      	ldr	r3, [r7, #20]
    }
 8003cac:	4618      	mov	r0, r3
 8003cae:	371c      	adds	r7, #28
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd90      	pop	{r4, r7, pc}

08003cb4 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	895b      	ldrh	r3, [r3, #10]
    }
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	899b      	ldrh	r3, [r3, #12]
    }
 8003cd8:	4618      	mov	r0, r3
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	889b      	ldrh	r3, [r3, #4]
    }
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	889a      	ldrh	r2, [r3, #4]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	799b      	ldrb	r3, [r3, #6]
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	4413      	add	r3, r2
 8003d10:	b29b      	uxth	r3, r3
    }
 8003d12:	4618      	mov	r0, r3
 8003d14:	370c      	adds	r7, #12
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 8003d1e:	b480      	push	{r7}
 8003d20:	b083      	sub	sp, #12
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	79db      	ldrb	r3, [r3, #7]
 8003d2a:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8003d2e:	b2db      	uxtb	r3, r3
    }
 8003d30:	4618      	mov	r0, r3
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	79db      	ldrb	r3, [r3, #7]
 8003d48:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003d4c:	b2db      	uxtb	r3, r3
    }
 8003d4e:	4618      	mov	r0, r3
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
	...

08003d5c <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	4a05      	ldr	r2, [pc, #20]	; (8003d7c <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	601a      	str	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7ff ff61 	bl	8003c34 <_ZN8touchgfx4FontD1Ev>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4618      	mov	r0, r3
 8003d76:	3708      	adds	r7, #8
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	0802e77c 	.word	0x0802e77c

08003d80 <_ZN8touchgfx9ConstFontD0Ev>:
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f7ff ffe7 	bl	8003d5c <_ZN8touchgfx9ConstFontD1Ev>
 8003d8e:	2118      	movs	r1, #24
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f026 f8f8 	bl	8029f86 <_ZdlPvj>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3708      	adds	r7, #8
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	4a05      	ldr	r2, [pc, #20]	; (8003dc0 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	601a      	str	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7ff ffd3 	bl	8003d5c <_ZN8touchgfx9ConstFontD1Ev>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4618      	mov	r0, r3
 8003dba:	3708      	adds	r7, #8
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	0802c75c 	.word	0x0802c75c

08003dc4 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f7ff ffe7 	bl	8003da0 <_ZN8touchgfx13GeneratedFontD1Ev>
 8003dd2:	2128      	movs	r1, #40	; 0x28
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f026 f8d6 	bl	8029f86 <_ZdlPvj>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3708      	adds	r7, #8
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <_ZN8touchgfx9TypedTextD1Ev>:
    virtual ~TypedText()
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
    {
 8003dec:	4a04      	ldr	r2, [pc, #16]	; (8003e00 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	601a      	str	r2, [r3, #0]
    }
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4618      	mov	r0, r3
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	0802c590 	.word	0x0802c590

08003e04 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
    }
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f7ff ffe9 	bl	8003de4 <_ZN8touchgfx9TypedTextD1Ev>
 8003e12:	2108      	movs	r1, #8
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f026 f8b6 	bl	8029f86 <_ZdlPvj>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3708      	adds	r7, #8
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	4618      	mov	r0, r3
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <_ZN8touchgfx4RectC1Essss>:
     * @param  x      The x coordinate.
     * @param  y      The y coordinate.
     * @param  width  The width.
     * @param  height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	4608      	mov	r0, r1
 8003e46:	4611      	mov	r1, r2
 8003e48:	461a      	mov	r2, r3
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	817b      	strh	r3, [r7, #10]
 8003e4e:	460b      	mov	r3, r1
 8003e50:	813b      	strh	r3, [r7, #8]
 8003e52:	4613      	mov	r3, r2
 8003e54:	80fb      	strh	r3, [r7, #6]
        : x(x), y(y), width(width), height(height)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	897a      	ldrh	r2, [r7, #10]
 8003e5a:	801a      	strh	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	893a      	ldrh	r2, [r7, #8]
 8003e60:	805a      	strh	r2, [r3, #2]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	88fa      	ldrh	r2, [r7, #6]
 8003e66:	809a      	strh	r2, [r3, #4]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	8b3a      	ldrh	r2, [r7, #24]
 8003e6c:	80da      	strh	r2, [r3, #6]
    {
    }
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	4618      	mov	r0, r3
 8003e72:	3714      	adds	r7, #20
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 8003e84:	4a14      	ldr	r2, [pc, #80]	; (8003ed8 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	601a      	str	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	3304      	adds	r3, #4
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7fe fce4 	bl	800285c <_ZN8touchgfx4RectC1Ev>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	330c      	adds	r3, #12
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7fe fcdf 	bl	800285c <_ZN8touchgfx4RectC1Ev>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	615a      	str	r2, [r3, #20]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	619a      	str	r2, [r3, #24]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	61da      	str	r2, [r3, #28]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	841a      	strh	r2, [r3, #32]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	845a      	strh	r2, [r3, #34]	; 0x22
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	0802e718 	.word	0x0802e718

08003edc <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
    {
 8003ee4:	4a04      	ldr	r2, [pc, #16]	; (8003ef8 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	601a      	str	r2, [r3, #0]
    }
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4618      	mov	r0, r3
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr
 8003ef8:	0802e718 	.word	0x0802e718

08003efc <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
    }
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f7ff ffe9 	bl	8003edc <_ZN8touchgfx8DrawableD1Ev>
 8003f0a:	2128      	movs	r1, #40	; 0x28
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f026 f83a 	bl	8029f86 <_ZdlPvj>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4618      	mov	r0, r3
 8003f16:	3708      	adds	r7, #8
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8003f24:	2300      	movs	r3, #0
    }
 8003f26:	4618      	mov	r0, r3
 8003f28:	370c      	adds	r7, #12
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr

08003f32 <_ZNK8touchgfx8Drawable7getRectEv>:
     * @return The rectangle this Drawable covers expressed in coordinates relative to its
     *         parent.
     *
     * @see getAbsoluteRect
     */
    const Rect& getRect() const
 8003f32:	b480      	push	{r7}
 8003f34:	b083      	sub	sp, #12
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
    {
        return rect;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	3304      	adds	r3, #4
    }
 8003f3e:	4618      	mov	r0, r3
 8003f40:	370c      	adds	r7, #12
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr

08003f4a <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param  width  The width of this Drawable.
     * @param  height The height of this Drawable.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b084      	sub	sp, #16
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	60f8      	str	r0, [r7, #12]
 8003f52:	4608      	mov	r0, r1
 8003f54:	4611      	mov	r1, r2
 8003f56:	461a      	mov	r2, r3
 8003f58:	4603      	mov	r3, r0
 8003f5a:	817b      	strh	r3, [r7, #10]
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	813b      	strh	r3, [r7, #8]
 8003f60:	4613      	mov	r3, r2
 8003f62:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8003f64:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003f68:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f000 f844 	bl	8003ffc <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8003f74:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003f78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f000 f898 	bl	80040b4 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 8003f84:	bf00      	nop
 8003f86:	3710      	adds	r7, #16
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <_ZNK8touchgfx8Drawable4getYEv>:
    /**
     * Gets the y coordinate of this Drawable, relative to its parent.
     *
     * @return The y value, relative to the parent.
     */
    int16_t getY() const
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
    {
        return rect.y;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    }
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr

08003fa6 <_ZNK8touchgfx8Drawable9getHeightEv>:
    /**
     * Gets the height of this Drawable.
     *
     * @return The height of this Drawable.
     */
    int16_t getHeight() const
 8003fa6:	b480      	push	{r7}
 8003fa8:	b083      	sub	sp, #12
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
    {
        return rect.height;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	460b      	mov	r3, r1
 8003fca:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	887a      	ldrh	r2, [r7, #2]
 8003fd0:	809a      	strh	r2, [r3, #4]
    }
 8003fd2:	bf00      	nop
 8003fd4:	370c      	adds	r7, #12
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr

08003fde <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 8003fde:	b480      	push	{r7}
 8003fe0:	b083      	sub	sp, #12
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	887a      	ldrh	r2, [r7, #2]
 8003fee:	80da      	strh	r2, [r3, #6]
    }
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	460b      	mov	r3, r1
 8004006:	807b      	strh	r3, [r7, #2]
 8004008:	4613      	mov	r3, r2
 800400a:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	332c      	adds	r3, #44	; 0x2c
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004018:	4611      	mov	r1, r2
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	4798      	blx	r3
        setY(y);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	3330      	adds	r3, #48	; 0x30
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f9b7 2000 	ldrsh.w	r2, [r7]
 800402a:	4611      	mov	r1, r2
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	4798      	blx	r3
    }
 8004030:	bf00      	nop
 8004032:	3708      	adds	r7, #8
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	460b      	mov	r3, r1
 8004042:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	887a      	ldrh	r2, [r7, #2]
 8004048:	811a      	strh	r2, [r3, #8]
    }
 800404a:	bf00      	nop
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr

08004056 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 8004056:	b480      	push	{r7}
 8004058:	b083      	sub	sp, #12
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
 800405e:	460b      	mov	r3, r1
 8004060:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	887a      	ldrh	r2, [r7, #2]
 8004066:	815a      	strh	r2, [r3, #10]
    }
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
    {
    }
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
    {
    }
 8004092:	bf00      	nop
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800409e:	b480      	push	{r7}
 80040a0:	b083      	sub	sp, #12
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
 80040a6:	6039      	str	r1, [r7, #0]
    {
    }
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	460b      	mov	r3, r1
 80040be:	807b      	strh	r3, [r7, #2]
 80040c0:	4613      	mov	r3, r2
 80040c2:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	3334      	adds	r3, #52	; 0x34
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80040d0:	4611      	mov	r1, r2
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	4798      	blx	r3
        setHeight(height);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	3338      	adds	r3, #56	; 0x38
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f9b7 2000 	ldrsh.w	r2, [r7]
 80040e2:	4611      	mov	r1, r2
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	4798      	blx	r3
    }
 80040e8:	bf00      	nop
 80040ea:	3708      	adds	r7, #8
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
    {
    }
 80040fa:	bf00      	nop
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr

08004106 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 8004106:	b480      	push	{r7}
 8004108:	b083      	sub	sp, #12
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
    {
    }
 800410e:	bf00      	nop
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr

0800411a <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800411a:	b480      	push	{r7}
 800411c:	b083      	sub	sp, #12
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 8004128:	4618      	mov	r0, r3
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 8004142:	4618      	mov	r0, r3
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr

0800414e <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800414e:	b580      	push	{r7, lr}
 8004150:	b082      	sub	sp, #8
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
 8004156:	460b      	mov	r3, r1
 8004158:	807b      	strh	r3, [r7, #2]
 800415a:	4613      	mov	r3, r2
 800415c:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	3350      	adds	r3, #80	; 0x50
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	8879      	ldrh	r1, [r7, #2]
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800416e:	b292      	uxth	r2, r2
 8004170:	1a8a      	subs	r2, r1, r2
 8004172:	b292      	uxth	r2, r2
 8004174:	b210      	sxth	r0, r2
 8004176:	8839      	ldrh	r1, [r7, #0]
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800417e:	b292      	uxth	r2, r2
 8004180:	1a8a      	subs	r2, r1, r2
 8004182:	b292      	uxth	r2, r2
 8004184:	b212      	sxth	r2, r2
 8004186:	4601      	mov	r1, r0
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	4798      	blx	r3
    }
 800418c:	bf00      	nop
 800418e:	3708      	adds	r7, #8
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041a2:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041aa:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041b2:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	f7ff ffe1 	bl	8004194 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	601a      	str	r2, [r3, #0]
    }
 80041e0:	bf00      	nop
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <_ZN8touchgfx3HAL3lcdEv>:
    static LCD& lcd()
 80041e8:	b480      	push	{r7}
 80041ea:	af00      	add	r7, sp, #0
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80041ec:	4b0b      	ldr	r3, [pc, #44]	; (800421c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d008      	beq.n	800420a <_ZN8touchgfx3HAL3lcdEv+0x22>
 80041f8:	4b08      	ldr	r3, [pc, #32]	; (800421c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <_ZN8touchgfx3HAL3lcdEv+0x22>
            return *instance->auxiliaryLCD;
 8004202:	4b06      	ldr	r3, [pc, #24]	; (800421c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004208:	e002      	b.n	8004210 <_ZN8touchgfx3HAL3lcdEv+0x28>
        return instance->lcdRef;
 800420a:	4b04      	ldr	r3, [pc, #16]	; (800421c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	689b      	ldr	r3, [r3, #8]
    }
 8004210:	4618      	mov	r0, r3
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	2400b5d0 	.word	0x2400b5d0

08004220 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 8004228:	4a07      	ldr	r2, [pc, #28]	; (8004248 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	601a      	str	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	605a      	str	r2, [r3, #4]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	721a      	strb	r2, [r3, #8]
    {
    }
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4618      	mov	r0, r3
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr
 8004248:	0802c738 	.word	0x0802c738

0800424c <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
    {
 8004254:	4a04      	ldr	r2, [pc, #16]	; (8004268 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	601a      	str	r2, [r3, #0]
    }
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4618      	mov	r0, r3
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr
 8004268:	0802c738 	.word	0x0802c738

0800426c <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
    }
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f7ff ffe9 	bl	800424c <_ZN8touchgfx10TransitionD1Ev>
 800427a:	210c      	movs	r1, #12
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f025 fe82 	bl	8029f86 <_ZdlPvj>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4618      	mov	r0, r3
 8004286:	3708      	adds	r7, #8
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
    {
    }
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
    {
    }
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
    {
    }
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->draw();
 80042d0:	f016 fd1a 	bl	801ad08 <_ZN8touchgfx11Application11getInstanceEv>
 80042d4:	4603      	mov	r3, r0
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	3230      	adds	r2, #48	; 0x30
 80042da:	6812      	ldr	r2, [r2, #0]
 80042dc:	4618      	mov	r0, r3
 80042de:	4790      	blx	r2
    }
 80042e0:	bf00      	nop
 80042e2:	3708      	adds	r7, #8
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	605a      	str	r2, [r3, #4]
    }
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <_ZN8touchgfx14MVPApplicationC1Ev>:
    MVPApplication()
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
          pendingScreenTransitionCallback(0)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4618      	mov	r0, r3
 8004310:	f016 fd64 	bl	801addc <_ZN8touchgfx11ApplicationC1Ev>
 8004314:	4a09      	ldr	r2, [pc, #36]	; (800433c <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	601a      	str	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        instance = this;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a04      	ldr	r2, [pc, #16]	; (8004340 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800432e:	6013      	str	r3, [r2, #0]
    }
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4618      	mov	r0, r3
 8004334:	3708      	adds	r7, #8
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	0802c2ec 	.word	0x0802c2ec
 8004340:	2400b61c 	.word	0x2400b61c

08004344 <_ZN5Model4bindEP13ModelListener>:

    /**
     * Sets the modelListener to point to the currently active presenter. Called automatically
     * when switching screen.
     */
    void bind(ModelListener* listener)
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	683a      	ldr	r2, [r7, #0]
 8004352:	601a      	str	r2, [r3, #0]
    }
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	721a      	strb	r2, [r3, #8]
    }
 800436e:	bf00      	nop
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 800437a:	b580      	push	{r7, lr}
 800437c:	b084      	sub	sp, #16
 800437e:	af00      	add	r7, sp, #0
 8004380:	60f8      	str	r0, [r7, #12]
 8004382:	607b      	str	r3, [r7, #4]
 8004384:	460b      	mov	r3, r1
 8004386:	817b      	strh	r3, [r7, #10]
 8004388:	4613      	mov	r3, r2
 800438a:	813b      	strh	r3, [r7, #8]
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	4618      	mov	r0, r3
 8004390:	f7ff fec3 	bl	800411a <_ZNK8touchgfx8Drawable9isVisibleEv>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d008      	beq.n	80043ac <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	4618      	mov	r0, r3
 800439e:	f7ff fec9 	bl	8004134 <_ZNK8touchgfx8Drawable11isTouchableEv>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d001      	beq.n	80043ac <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 80043a8:	2301      	movs	r3, #1
 80043aa:	e000      	b.n	80043ae <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 80043ac:	2300      	movs	r3, #0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d002      	beq.n	80043b8 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	601a      	str	r2, [r3, #0]
        }
    }
 80043b8:	bf00      	nop
 80043ba:	3710      	adds	r7, #16
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <_ZN13ModelListener4bindEP5Model>:

    /**
     * Sets the model pointer to point to the Model object. Called automatically
     * when switching screen.
     */
    void bind(Model* m)
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
    {
        model = m;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	683a      	ldr	r2, [r7, #0]
 80043ce:	605a      	str	r2, [r3, #4]
    }
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7ff fd48 	bl	8003e7c <_ZN8touchgfx8DrawableC1Ev>
 80043ec:	4a03      	ldr	r2, [pc, #12]	; (80043fc <_ZN8touchgfx6WidgetC1Ev+0x20>)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	601a      	str	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4618      	mov	r0, r3
 80043f6:	3708      	adds	r7, #8
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	0802c6b0 	.word	0x0802c6b0

08004400 <_ZN8touchgfx6WidgetD1Ev>:
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	4a05      	ldr	r2, [pc, #20]	; (8004420 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	601a      	str	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4618      	mov	r0, r3
 8004412:	f7ff fd63 	bl	8003edc <_ZN8touchgfx8DrawableD1Ev>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4618      	mov	r0, r3
 800441a:	3708      	adds	r7, #8
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	0802c6b0 	.word	0x0802c6b0

08004424 <_ZN8touchgfx6WidgetD0Ev>:
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f7ff ffe7 	bl	8004400 <_ZN8touchgfx6WidgetD1Ev>
 8004432:	2128      	movs	r1, #40	; 0x28
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f025 fda6 	bl	8029f86 <_ZdlPvj>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4618      	mov	r0, r3
 800443e:	3708      	adds	r7, #8
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/localize_anomaly_screen/Localize_AnomalyView.hpp>
#include <gui/localize_anomaly_screen/Localize_AnomalyPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	4618      	mov	r0, r3
 8004454:	f7ff ff56 	bl	8004304 <_ZN8touchgfx14MVPApplicationC1Ev>
 8004458:	4a13      	ldr	r2, [pc, #76]	; (80044a8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	601a      	str	r2, [r3, #0]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004464:	4618      	mov	r0, r3
 8004466:	f000 f92b 	bl	80046c0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	68ba      	ldr	r2, [r7, #8]
 8004476:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800447a:	f7fd fe93 	bl	80021a4 <_ZN8touchgfx3HAL11getInstanceEv>
 800447e:	4603      	mov	r3, r0
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	3208      	adds	r2, #8
 8004484:	6812      	ldr	r2, [r2, #0]
 8004486:	2100      	movs	r1, #0
 8004488:	4618      	mov	r0, r3
 800448a:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 800448c:	2000      	movs	r0, #0
 800448e:	f005 f9c5 	bl	800981c <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8004492:	f7ff fea9 	bl	80041e8 <_ZN8touchgfx3HAL3lcdEv>
 8004496:	4603      	mov	r3, r0
 8004498:	4618      	mov	r0, r3
 800449a:	f01e fc30 	bl	8022cfe <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	4618      	mov	r0, r3
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	0802c290 	.word	0x0802c290

080044ac <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4618      	mov	r0, r3
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	683a      	ldr	r2, [r7, #0]
 80044d2:	4611      	mov	r1, r2
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7ff ffe9 	bl	80044ac <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	685a      	ldr	r2, [r3, #4]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	605a      	str	r2, [r3, #4]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	683a      	ldr	r2, [r7, #0]
 80044e6:	3308      	adds	r3, #8
 80044e8:	3208      	adds	r2, #8
 80044ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80044ee:	e883 0003 	stmia.w	r3, {r0, r1}
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4618      	mov	r0, r3
 80044f6:	3708      	adds	r7, #8
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>:
 */

// Main

void FrontendApplicationBase::gotoMainScreenNoTransition()
{
 80044fc:	b590      	push	{r4, r7, lr}
 80044fe:	b089      	sub	sp, #36	; 0x24
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenNoTransitionImpl);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800450a:	4b10      	ldr	r3, [pc, #64]	; (800454c <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv+0x50>)
 800450c:	61bb      	str	r3, [r7, #24]
 800450e:	2300      	movs	r3, #0
 8004510:	61fb      	str	r3, [r7, #28]
 8004512:	f107 0008 	add.w	r0, r7, #8
 8004516:	f107 0318 	add.w	r3, r7, #24
 800451a:	cb0c      	ldmia	r3, {r2, r3}
 800451c:	6879      	ldr	r1, [r7, #4]
 800451e:	f000 f8eb 	bl	80046f8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8004522:	f107 0308 	add.w	r3, r7, #8
 8004526:	4619      	mov	r1, r3
 8004528:	4620      	mov	r0, r4
 800452a:	f7ff ffcb 	bl	80044c4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800452e:	f107 0308 	add.w	r3, r7, #8
 8004532:	4618      	mov	r0, r3
 8004534:	f7fe ff48 	bl	80033c8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8004544:	bf00      	nop
 8004546:	3724      	adds	r7, #36	; 0x24
 8004548:	46bd      	mov	sp, r7
 800454a:	bd90      	pop	{r4, r7, pc}
 800454c:	08004551 	.word	0x08004551

08004550 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMainScreenNoTransitionImpl()
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af02      	add	r7, sp, #8
 8004556:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8004564:	461a      	mov	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800456c:	9300      	str	r3, [sp, #0]
 800456e:	4b04      	ldr	r3, [pc, #16]	; (8004580 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x30>)
 8004570:	4804      	ldr	r0, [pc, #16]	; (8004584 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x34>)
 8004572:	f000 f8f3 	bl	800475c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8004576:	bf00      	nop
 8004578:	3708      	adds	r7, #8
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	2400b610 	.word	0x2400b610
 8004584:	2400b60c 	.word	0x2400b60c

08004588 <_ZN23FrontendApplicationBase33gotoMainScreenWipeTransitionSouthEv>:

void FrontendApplicationBase::gotoMainScreenWipeTransitionSouth()
{
 8004588:	b590      	push	{r4, r7, lr}
 800458a:	b089      	sub	sp, #36	; 0x24
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenWipeTransitionSouthImpl);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8004596:	4b10      	ldr	r3, [pc, #64]	; (80045d8 <_ZN23FrontendApplicationBase33gotoMainScreenWipeTransitionSouthEv+0x50>)
 8004598:	61bb      	str	r3, [r7, #24]
 800459a:	2300      	movs	r3, #0
 800459c:	61fb      	str	r3, [r7, #28]
 800459e:	f107 0008 	add.w	r0, r7, #8
 80045a2:	f107 0318 	add.w	r3, r7, #24
 80045a6:	cb0c      	ldmia	r3, {r2, r3}
 80045a8:	6879      	ldr	r1, [r7, #4]
 80045aa:	f000 f8a5 	bl	80046f8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 80045ae:	f107 0308 	add.w	r3, r7, #8
 80045b2:	4619      	mov	r1, r3
 80045b4:	4620      	mov	r0, r4
 80045b6:	f7ff ff85 	bl	80044c4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 80045ba:	f107 0308 	add.w	r3, r7, #8
 80045be:	4618      	mov	r0, r3
 80045c0:	f7fe ff02 	bl	80033c8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 80045d0:	bf00      	nop
 80045d2:	3724      	adds	r7, #36	; 0x24
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd90      	pop	{r4, r7, pc}
 80045d8:	080045dd 	.word	0x080045dd

080045dc <_ZN23FrontendApplicationBase37gotoMainScreenWipeTransitionSouthImplEv>:

void FrontendApplicationBase::gotoMainScreenWipeTransitionSouthImpl()
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af02      	add	r7, sp, #8
 80045e2:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::WipeTransition<SOUTH>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f503 719c 	add.w	r1, r3, #312	; 0x138
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80045f0:	461a      	mov	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80045f8:	9300      	str	r3, [sp, #0]
 80045fa:	4b04      	ldr	r3, [pc, #16]	; (800460c <_ZN23FrontendApplicationBase37gotoMainScreenWipeTransitionSouthImplEv+0x30>)
 80045fc:	4804      	ldr	r0, [pc, #16]	; (8004610 <_ZN23FrontendApplicationBase37gotoMainScreenWipeTransitionSouthImplEv+0x34>)
 80045fe:	f000 f9cb 	bl	8004998 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8004602:	bf00      	nop
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	2400b610 	.word	0x2400b610
 8004610:	2400b60c 	.word	0x2400b60c

08004614 <_ZN23FrontendApplicationBase45gotoLocalize_AnomalyScreenWipeTransitionNorthEv>:

// Localize_Anomaly

void FrontendApplicationBase::gotoLocalize_AnomalyScreenWipeTransitionNorth()
{
 8004614:	b590      	push	{r4, r7, lr}
 8004616:	b089      	sub	sp, #36	; 0x24
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoLocalize_AnomalyScreenWipeTransitionNorthImpl);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8004622:	4b10      	ldr	r3, [pc, #64]	; (8004664 <_ZN23FrontendApplicationBase45gotoLocalize_AnomalyScreenWipeTransitionNorthEv+0x50>)
 8004624:	61bb      	str	r3, [r7, #24]
 8004626:	2300      	movs	r3, #0
 8004628:	61fb      	str	r3, [r7, #28]
 800462a:	f107 0008 	add.w	r0, r7, #8
 800462e:	f107 0318 	add.w	r3, r7, #24
 8004632:	cb0c      	ldmia	r3, {r2, r3}
 8004634:	6879      	ldr	r1, [r7, #4]
 8004636:	f000 f85f 	bl	80046f8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800463a:	f107 0308 	add.w	r3, r7, #8
 800463e:	4619      	mov	r1, r3
 8004640:	4620      	mov	r0, r4
 8004642:	f7ff ff3f 	bl	80044c4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8004646:	f107 0308 	add.w	r3, r7, #8
 800464a:	4618      	mov	r0, r3
 800464c:	f7fe febc 	bl	80033c8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800465c:	bf00      	nop
 800465e:	3724      	adds	r7, #36	; 0x24
 8004660:	46bd      	mov	sp, r7
 8004662:	bd90      	pop	{r4, r7, pc}
 8004664:	08004669 	.word	0x08004669

08004668 <_ZN23FrontendApplicationBase49gotoLocalize_AnomalyScreenWipeTransitionNorthImplEv>:

void FrontendApplicationBase::gotoLocalize_AnomalyScreenWipeTransitionNorthImpl()
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af02      	add	r7, sp, #8
 800466e:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Localize_AnomalyView, Localize_AnomalyPresenter, touchgfx::WipeTransition<NORTH>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f503 719c 	add.w	r1, r3, #312	; 0x138
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800467c:	461a      	mov	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004684:	9300      	str	r3, [sp, #0]
 8004686:	4b04      	ldr	r3, [pc, #16]	; (8004698 <_ZN23FrontendApplicationBase49gotoLocalize_AnomalyScreenWipeTransitionNorthImplEv+0x30>)
 8004688:	4804      	ldr	r0, [pc, #16]	; (800469c <_ZN23FrontendApplicationBase49gotoLocalize_AnomalyScreenWipeTransitionNorthImplEv+0x34>)
 800468a:	f000 faa3 	bl	8004bd4 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800468e:	bf00      	nop
 8004690:	3708      	adds	r7, #8
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	2400b610 	.word	0x2400b610
 800469c:	2400b60c 	.word	0x2400b60c

080046a0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	4a04      	ldr	r2, [pc, #16]	; (80046bc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	601a      	str	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4618      	mov	r0, r3
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr
 80046bc:	0802c330 	.word	0x0802c330

080046c0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
    Callback()
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7ff ffe8 	bl	80046a0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 80046d0:	4a08      	ldr	r2, [pc, #32]	; (80046f4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	601a      	str	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	605a      	str	r2, [r3, #4]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	609a      	str	r2, [r3, #8]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	60da      	str	r2, [r3, #12]
    }
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4618      	mov	r0, r3
 80046ec:	3708      	adds	r7, #8
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	0802c2d4 	.word	0x0802c2d4

080046f8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	4639      	mov	r1, r7
 8004704:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_0(pmemfun_0)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	4618      	mov	r0, r3
 800470c:	f7ff ffc8 	bl	80046a0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8004710:	4a08      	ldr	r2, [pc, #32]	; (8004734 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	601a      	str	r2, [r3, #0]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	68ba      	ldr	r2, [r7, #8]
 800471a:	605a      	str	r2, [r3, #4]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	3308      	adds	r3, #8
 8004720:	463a      	mov	r2, r7
 8004722:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004726:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	4618      	mov	r0, r3
 800472e:	3710      	adds	r7, #16
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	0802c2d4 	.word	0x0802c2d4

08004738 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4618      	mov	r0, r3
 8004744:	f7ff fd6c 	bl	8004220 <_ZN8touchgfx10TransitionC1Ev>
 8004748:	4a03      	ldr	r2, [pc, #12]	; (8004758 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	601a      	str	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4618      	mov	r0, r3
 8004752:	3708      	adds	r7, #8
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	0802c714 	.word	0x0802c714

0800475c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800475c:	b590      	push	{r4, r7, lr}
 800475e:	b08f      	sub	sp, #60	; 0x3c
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
 8004768:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	689a      	ldr	r2, [r3, #8]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	3320      	adds	r3, #32
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4610      	mov	r0, r2
 800477a:	4798      	blx	r3
 800477c:	4603      	mov	r3, r0
 800477e:	f640 3217 	movw	r2, #2839	; 0xb17
 8004782:	4293      	cmp	r3, r2
 8004784:	d805      	bhi.n	8004792 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 8004786:	4b7f      	ldr	r3, [pc, #508]	; (8004984 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004788:	4a7f      	ldr	r2, [pc, #508]	; (8004988 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800478a:	21a3      	movs	r1, #163	; 0xa3
 800478c:	487f      	ldr	r0, [pc, #508]	; (800498c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800478e:	f025 fc29 	bl	8029fe4 <__assert_func>
 8004792:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685a      	ldr	r2, [r3, #4]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	3320      	adds	r3, #32
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4610      	mov	r0, r2
 80047a4:	4798      	blx	r3
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b0f      	cmp	r3, #15
 80047aa:	d805      	bhi.n	80047b8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 80047ac:	4b78      	ldr	r3, [pc, #480]	; (8004990 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 80047ae:	4a76      	ldr	r2, [pc, #472]	; (8004988 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80047b0:	21a4      	movs	r1, #164	; 0xa4
 80047b2:	4876      	ldr	r0, [pc, #472]	; (800498c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 80047b4:	f025 fc16 	bl	8029fe4 <__assert_func>
 80047b8:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	68da      	ldr	r2, [r3, #12]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	3320      	adds	r3, #32
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4610      	mov	r0, r2
 80047ca:	4798      	blx	r3
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b0b      	cmp	r3, #11
 80047d0:	d805      	bhi.n	80047de <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 80047d2:	4b70      	ldr	r3, [pc, #448]	; (8004994 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 80047d4:	4a6c      	ldr	r2, [pc, #432]	; (8004988 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80047d6:	21a5      	movs	r1, #165	; 0xa5
 80047d8:	486c      	ldr	r0, [pc, #432]	; (800498c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 80047da:	f025 fc03 	bl	8029fe4 <__assert_func>
 80047de:	bf00      	nop
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	627b      	str	r3, [r7, #36]	; 0x24
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 80047ec:	f016 fa8c 	bl	801ad08 <_ZN8touchgfx11Application11getInstanceEv>
 80047f0:	4603      	mov	r3, r0
 80047f2:	4618      	mov	r0, r3
 80047f4:	f016 fad6 	bl	801ada4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 80047f8:	6a3b      	ldr	r3, [r7, #32]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d008      	beq.n	8004812 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
        (*currentTrans)->tearDown();
 8004800:	6a3b      	ldr	r3, [r7, #32]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	6a3b      	ldr	r3, [r7, #32]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	330c      	adds	r3, #12
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4610      	mov	r0, r2
 8004810:	4798      	blx	r3
    if (*currentTrans)
 8004812:	6a3b      	ldr	r3, [r7, #32]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d007      	beq.n	800482a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xce>
        (*currentTrans)->~Transition();
 800481a:	6a3b      	ldr	r3, [r7, #32]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	6a3b      	ldr	r3, [r7, #32]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4610      	mov	r0, r2
 8004828:	4798      	blx	r3
    if (*currentScreen)
 800482a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d008      	beq.n	8004844 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
        (*currentScreen)->tearDownScreen();
 8004832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	3314      	adds	r3, #20
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4610      	mov	r0, r2
 8004842:	4798      	blx	r3
    if (*currentPresenter)
 8004844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d008      	beq.n	800485e <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x102>
        (*currentPresenter)->deactivate();
 800484c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	3304      	adds	r3, #4
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4610      	mov	r0, r2
 800485c:	4798      	blx	r3
    if (*currentScreen)
 800485e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d007      	beq.n	8004876 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
        (*currentScreen)->~Screen();
 8004866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4610      	mov	r0, r2
 8004874:	4798      	blx	r3
    if (*currentPresenter)
 8004876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d008      	beq.n	8004890 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->~Presenter();
 800487e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	3308      	adds	r3, #8
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4610      	mov	r0, r2
 800488e:	4798      	blx	r3
}
 8004890:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	2100      	movs	r1, #0
 8004898:	4618      	mov	r0, r3
 800489a:	f000 fab9 	bl	8004e10 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800489e:	4603      	mov	r3, r0
 80048a0:	4619      	mov	r1, r3
 80048a2:	200c      	movs	r0, #12
 80048a4:	f7ff fabe 	bl	8003e24 <_ZnwjPv>
 80048a8:	4604      	mov	r4, r0
 80048aa:	4620      	mov	r0, r4
 80048ac:	f7ff ff44 	bl	8004738 <_ZN8touchgfx12NoTransitionC1Ev>
 80048b0:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	2100      	movs	r1, #0
 80048b8:	4618      	mov	r0, r3
 80048ba:	f000 fabc 	bl	8004e36 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 80048be:	4603      	mov	r3, r0
 80048c0:	4619      	mov	r1, r3
 80048c2:	f640 3018 	movw	r0, #2840	; 0xb18
 80048c6:	f7ff faad 	bl	8003e24 <_ZnwjPv>
 80048ca:	4604      	mov	r4, r0
 80048cc:	4620      	mov	r0, r4
 80048ce:	f005 fa61 	bl	8009d94 <_ZN8MainViewC1Ev>
 80048d2:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	2100      	movs	r1, #0
 80048da:	4618      	mov	r0, r3
 80048dc:	f000 fabe 	bl	8004e5c <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 80048e0:	4603      	mov	r3, r0
 80048e2:	4619      	mov	r1, r3
 80048e4:	2010      	movs	r0, #16
 80048e6:	f7ff fa9d 	bl	8003e24 <_ZnwjPv>
 80048ea:	4604      	mov	r4, r0
 80048ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048ee:	4620      	mov	r0, r4
 80048f0:	f005 f9c2 	bl	8009c78 <_ZN13MainPresenterC1ER8MainView>
 80048f4:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048fa:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004900:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004906:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8004908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800490a:	2b00      	cmp	r3, #0
 800490c:	d002      	beq.n	8004914 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 800490e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004910:	3304      	adds	r3, #4
 8004912:	e000      	b.n	8004916 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 8004914:	2300      	movs	r3, #0
 8004916:	4619      	mov	r1, r3
 8004918:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800491a:	f7ff fd13 	bl	8004344 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800491e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004920:	3304      	adds	r3, #4
 8004922:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004924:	4618      	mov	r0, r3
 8004926:	f7ff fd4b 	bl	80043c0 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800492a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800492e:	4618      	mov	r0, r3
 8004930:	f000 faa7 	bl	8004e82 <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>
 8004934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004936:	61fb      	str	r3, [r7, #28]
 8004938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800493a:	61bb      	str	r3, [r7, #24]
 800493c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800493e:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	330c      	adds	r3, #12
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	69f8      	ldr	r0, [r7, #28]
 800494a:	4798      	blx	r3
    newPresenter->activate();
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	69b8      	ldr	r0, [r7, #24]
 8004954:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8004956:	6979      	ldr	r1, [r7, #20]
 8004958:	69f8      	ldr	r0, [r7, #28]
 800495a:	f017 fe69 	bl	801c630 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	3310      	adds	r3, #16
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	6978      	ldr	r0, [r7, #20]
 8004968:	4798      	blx	r3
    newTransition->invalidate();
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	3314      	adds	r3, #20
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	6978      	ldr	r0, [r7, #20]
 8004974:	4798      	blx	r3
}
 8004976:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 8004978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800497a:	4618      	mov	r0, r3
 800497c:	373c      	adds	r7, #60	; 0x3c
 800497e:	46bd      	mov	sp, r7
 8004980:	bd90      	pop	{r4, r7, pc}
 8004982:	bf00      	nop
 8004984:	0802b678 	.word	0x0802b678
 8004988:	0802b708 	.word	0x0802b708
 800498c:	0802b808 	.word	0x0802b808
 8004990:	0802b860 	.word	0x0802b860
 8004994:	0802b904 	.word	0x0802b904

08004998 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8004998:	b590      	push	{r4, r7, lr}
 800499a:	b08f      	sub	sp, #60	; 0x3c
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
 80049a4:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	689a      	ldr	r2, [r3, #8]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	3320      	adds	r3, #32
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4610      	mov	r0, r2
 80049b6:	4798      	blx	r3
 80049b8:	4603      	mov	r3, r0
 80049ba:	f640 3217 	movw	r2, #2839	; 0xb17
 80049be:	4293      	cmp	r3, r2
 80049c0:	d805      	bhi.n	80049ce <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 80049c2:	4b7f      	ldr	r3, [pc, #508]	; (8004bc0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 80049c4:	4a7f      	ldr	r2, [pc, #508]	; (8004bc4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80049c6:	21a3      	movs	r1, #163	; 0xa3
 80049c8:	487f      	ldr	r0, [pc, #508]	; (8004bc8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 80049ca:	f025 fb0b 	bl	8029fe4 <__assert_func>
 80049ce:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685a      	ldr	r2, [r3, #4]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	3320      	adds	r3, #32
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4610      	mov	r0, r2
 80049e0:	4798      	blx	r3
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b0f      	cmp	r3, #15
 80049e6:	d805      	bhi.n	80049f4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 80049e8:	4b78      	ldr	r3, [pc, #480]	; (8004bcc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 80049ea:	4a76      	ldr	r2, [pc, #472]	; (8004bc4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80049ec:	21a4      	movs	r1, #164	; 0xa4
 80049ee:	4876      	ldr	r0, [pc, #472]	; (8004bc8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 80049f0:	f025 faf8 	bl	8029fe4 <__assert_func>
 80049f4:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	68da      	ldr	r2, [r3, #12]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	3320      	adds	r3, #32
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4610      	mov	r0, r2
 8004a06:	4798      	blx	r3
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b37      	cmp	r3, #55	; 0x37
 8004a0c:	d805      	bhi.n	8004a1a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 8004a0e:	4b70      	ldr	r3, [pc, #448]	; (8004bd0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 8004a10:	4a6c      	ldr	r2, [pc, #432]	; (8004bc4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004a12:	21a5      	movs	r1, #165	; 0xa5
 8004a14:	486c      	ldr	r0, [pc, #432]	; (8004bc8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8004a16:	f025 fae5 	bl	8029fe4 <__assert_func>
 8004a1a:	bf00      	nop
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	627b      	str	r3, [r7, #36]	; 0x24
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8004a28:	f016 f96e 	bl	801ad08 <_ZN8touchgfx11Application11getInstanceEv>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f016 f9b8 	bl	801ada4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8004a34:	6a3b      	ldr	r3, [r7, #32]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d008      	beq.n	8004a4e <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
        (*currentTrans)->tearDown();
 8004a3c:	6a3b      	ldr	r3, [r7, #32]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	6a3b      	ldr	r3, [r7, #32]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	330c      	adds	r3, #12
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4610      	mov	r0, r2
 8004a4c:	4798      	blx	r3
    if (*currentTrans)
 8004a4e:	6a3b      	ldr	r3, [r7, #32]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d007      	beq.n	8004a66 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xce>
        (*currentTrans)->~Transition();
 8004a56:	6a3b      	ldr	r3, [r7, #32]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	6a3b      	ldr	r3, [r7, #32]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4610      	mov	r0, r2
 8004a64:	4798      	blx	r3
    if (*currentScreen)
 8004a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d008      	beq.n	8004a80 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
        (*currentScreen)->tearDownScreen();
 8004a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	3314      	adds	r3, #20
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4610      	mov	r0, r2
 8004a7e:	4798      	blx	r3
    if (*currentPresenter)
 8004a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d008      	beq.n	8004a9a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x102>
        (*currentPresenter)->deactivate();
 8004a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	3304      	adds	r3, #4
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4610      	mov	r0, r2
 8004a98:	4798      	blx	r3
    if (*currentScreen)
 8004a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d007      	beq.n	8004ab2 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
        (*currentScreen)->~Screen();
 8004aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4610      	mov	r0, r2
 8004ab0:	4798      	blx	r3
    if (*currentPresenter)
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d008      	beq.n	8004acc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->~Presenter();
 8004aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	3308      	adds	r3, #8
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4610      	mov	r0, r2
 8004aca:	4798      	blx	r3
}
 8004acc:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	2100      	movs	r1, #0
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f000 f9e2 	bl	8004e9e <_ZN8touchgfx17AbstractPartition2atINS_14WipeTransitionILNS_9DirectionE1EEEEERT_t>
 8004ada:	4603      	mov	r3, r0
 8004adc:	4619      	mov	r1, r3
 8004ade:	2038      	movs	r0, #56	; 0x38
 8004ae0:	f7ff f9a0 	bl	8003e24 <_ZnwjPv>
 8004ae4:	4604      	mov	r4, r0
 8004ae6:	2114      	movs	r1, #20
 8004ae8:	4620      	mov	r0, r4
 8004aea:	f000 fa1f 	bl	8004f2c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EEC1Eh>
 8004aee:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	2100      	movs	r1, #0
 8004af6:	4618      	mov	r0, r3
 8004af8:	f000 f99d 	bl	8004e36 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 8004afc:	4603      	mov	r3, r0
 8004afe:	4619      	mov	r1, r3
 8004b00:	f640 3018 	movw	r0, #2840	; 0xb18
 8004b04:	f7ff f98e 	bl	8003e24 <_ZnwjPv>
 8004b08:	4604      	mov	r4, r0
 8004b0a:	4620      	mov	r0, r4
 8004b0c:	f005 f942 	bl	8009d94 <_ZN8MainViewC1Ev>
 8004b10:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	2100      	movs	r1, #0
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f000 f99f 	bl	8004e5c <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	4619      	mov	r1, r3
 8004b22:	2010      	movs	r0, #16
 8004b24:	f7ff f97e 	bl	8003e24 <_ZnwjPv>
 8004b28:	4604      	mov	r4, r0
 8004b2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b2c:	4620      	mov	r0, r4
 8004b2e:	f005 f8a3 	bl	8009c78 <_ZN13MainPresenterC1ER8MainView>
 8004b32:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b38:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b3e:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b44:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8004b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d002      	beq.n	8004b52 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 8004b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b4e:	3304      	adds	r3, #4
 8004b50:	e000      	b.n	8004b54 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1bc>
 8004b52:	2300      	movs	r3, #0
 8004b54:	4619      	mov	r1, r3
 8004b56:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004b58:	f7ff fbf4 	bl	8004344 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8004b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b5e:	3304      	adds	r3, #4
 8004b60:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7ff fc2c 	bl	80043c0 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8004b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f000 f988 	bl	8004e82 <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>
 8004b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b74:	61fb      	str	r3, [r7, #28]
 8004b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b78:	61bb      	str	r3, [r7, #24]
 8004b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b7c:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	330c      	adds	r3, #12
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	69f8      	ldr	r0, [r7, #28]
 8004b88:	4798      	blx	r3
    newPresenter->activate();
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	69b8      	ldr	r0, [r7, #24]
 8004b92:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8004b94:	6979      	ldr	r1, [r7, #20]
 8004b96:	69f8      	ldr	r0, [r7, #28]
 8004b98:	f017 fd4a 	bl	801c630 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	3310      	adds	r3, #16
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	6978      	ldr	r0, [r7, #20]
 8004ba6:	4798      	blx	r3
    newTransition->invalidate();
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	3314      	adds	r3, #20
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6978      	ldr	r0, [r7, #20]
 8004bb2:	4798      	blx	r3
}
 8004bb4:	bf00      	nop
    return newPresenter;
 8004bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	373c      	adds	r7, #60	; 0x3c
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd90      	pop	{r4, r7, pc}
 8004bc0:	0802b678 	.word	0x0802b678
 8004bc4:	0802b9a8 	.word	0x0802b9a8
 8004bc8:	0802b808 	.word	0x0802b808
 8004bcc:	0802b860 	.word	0x0802b860
 8004bd0:	0802b904 	.word	0x0802b904

08004bd4 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8004bd4:	b590      	push	{r4, r7, lr}
 8004bd6:	b08f      	sub	sp, #60	; 0x3c
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
 8004be0:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	689a      	ldr	r2, [r3, #8]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	3320      	adds	r3, #32
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4610      	mov	r0, r2
 8004bf2:	4798      	blx	r3
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 8004bfa:	d205      	bcs.n	8004c08 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8004bfc:	4b7f      	ldr	r3, [pc, #508]	; (8004dfc <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004bfe:	4a80      	ldr	r2, [pc, #512]	; (8004e00 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004c00:	21a3      	movs	r1, #163	; 0xa3
 8004c02:	4880      	ldr	r0, [pc, #512]	; (8004e04 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8004c04:	f025 f9ee 	bl	8029fe4 <__assert_func>
 8004c08:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685a      	ldr	r2, [r3, #4]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	3320      	adds	r3, #32
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4610      	mov	r0, r2
 8004c1a:	4798      	blx	r3
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b0f      	cmp	r3, #15
 8004c20:	d805      	bhi.n	8004c2e <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 8004c22:	4b79      	ldr	r3, [pc, #484]	; (8004e08 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 8004c24:	4a76      	ldr	r2, [pc, #472]	; (8004e00 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004c26:	21a4      	movs	r1, #164	; 0xa4
 8004c28:	4876      	ldr	r0, [pc, #472]	; (8004e04 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8004c2a:	f025 f9db 	bl	8029fe4 <__assert_func>
 8004c2e:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	68da      	ldr	r2, [r3, #12]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	3320      	adds	r3, #32
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4610      	mov	r0, r2
 8004c40:	4798      	blx	r3
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b37      	cmp	r3, #55	; 0x37
 8004c46:	d805      	bhi.n	8004c54 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 8004c48:	4b70      	ldr	r3, [pc, #448]	; (8004e0c <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 8004c4a:	4a6d      	ldr	r2, [pc, #436]	; (8004e00 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004c4c:	21a5      	movs	r1, #165	; 0xa5
 8004c4e:	486d      	ldr	r0, [pc, #436]	; (8004e04 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8004c50:	f025 f9c8 	bl	8029fe4 <__assert_func>
 8004c54:	bf00      	nop
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8004c62:	f016 f851 	bl	801ad08 <_ZN8touchgfx11Application11getInstanceEv>
 8004c66:	4603      	mov	r3, r0
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f016 f89b 	bl	801ada4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8004c6e:	6a3b      	ldr	r3, [r7, #32]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d008      	beq.n	8004c88 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 8004c76:	6a3b      	ldr	r3, [r7, #32]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	6a3b      	ldr	r3, [r7, #32]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	330c      	adds	r3, #12
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4610      	mov	r0, r2
 8004c86:	4798      	blx	r3
    if (*currentTrans)
 8004c88:	6a3b      	ldr	r3, [r7, #32]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d007      	beq.n	8004ca0 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 8004c90:	6a3b      	ldr	r3, [r7, #32]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	6a3b      	ldr	r3, [r7, #32]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4610      	mov	r0, r2
 8004c9e:	4798      	blx	r3
    if (*currentScreen)
 8004ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d008      	beq.n	8004cba <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 8004ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	3314      	adds	r3, #20
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4610      	mov	r0, r2
 8004cb8:	4798      	blx	r3
    if (*currentPresenter)
 8004cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d008      	beq.n	8004cd4 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 8004cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	3304      	adds	r3, #4
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4610      	mov	r0, r2
 8004cd2:	4798      	blx	r3
    if (*currentScreen)
 8004cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d007      	beq.n	8004cec <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 8004cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4610      	mov	r0, r2
 8004cea:	4798      	blx	r3
    if (*currentPresenter)
 8004cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d008      	beq.n	8004d06 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 8004cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	3308      	adds	r3, #8
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4610      	mov	r0, r2
 8004d04:	4798      	blx	r3
}
 8004d06:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	2100      	movs	r1, #0
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f000 f94e 	bl	8004fb0 <_ZN8touchgfx17AbstractPartition2atINS_14WipeTransitionILNS_9DirectionE0EEEEERT_t>
 8004d14:	4603      	mov	r3, r0
 8004d16:	4619      	mov	r1, r3
 8004d18:	2038      	movs	r0, #56	; 0x38
 8004d1a:	f7ff f883 	bl	8003e24 <_ZnwjPv>
 8004d1e:	4604      	mov	r4, r0
 8004d20:	2114      	movs	r1, #20
 8004d22:	4620      	mov	r0, r4
 8004d24:	f000 f98c 	bl	8005040 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EEC1Eh>
 8004d28:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	2100      	movs	r1, #0
 8004d30:	4618      	mov	r0, r3
 8004d32:	f000 f9c7 	bl	80050c4 <_ZN8touchgfx17AbstractPartition2atI20Localize_AnomalyViewEERT_t>
 8004d36:	4603      	mov	r3, r0
 8004d38:	4619      	mov	r1, r3
 8004d3a:	f44f 7070 	mov.w	r0, #960	; 0x3c0
 8004d3e:	f7ff f871 	bl	8003e24 <_ZnwjPv>
 8004d42:	4604      	mov	r4, r0
 8004d44:	4620      	mov	r0, r4
 8004d46:	f004 ff39 	bl	8009bbc <_ZN20Localize_AnomalyViewC1Ev>
 8004d4a:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	2100      	movs	r1, #0
 8004d52:	4618      	mov	r0, r3
 8004d54:	f000 f9c9 	bl	80050ea <_ZN8touchgfx17AbstractPartition2atI25Localize_AnomalyPresenterEERT_t>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	2010      	movs	r0, #16
 8004d5e:	f7ff f861 	bl	8003e24 <_ZnwjPv>
 8004d62:	4604      	mov	r4, r0
 8004d64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d66:	4620      	mov	r0, r4
 8004d68:	f004 fed0 	bl	8009b0c <_ZN25Localize_AnomalyPresenterC1ER20Localize_AnomalyView>
 8004d6c:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d72:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d78:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d7e:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8004d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d002      	beq.n	8004d8c <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 8004d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d88:	3304      	adds	r3, #4
 8004d8a:	e000      	b.n	8004d8e <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	4619      	mov	r1, r3
 8004d90:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004d92:	f7ff fad7 	bl	8004344 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8004d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d98:	3304      	adds	r3, #4
 8004d9a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7ff fb0f 	bl	80043c0 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8004da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 f9b2 	bl	8005110 <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterE4bindERS1_>
 8004dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dae:	61fb      	str	r3, [r7, #28]
 8004db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db2:	61bb      	str	r3, [r7, #24]
 8004db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db6:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	330c      	adds	r3, #12
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	69f8      	ldr	r0, [r7, #28]
 8004dc2:	4798      	blx	r3
    newPresenter->activate();
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	69b8      	ldr	r0, [r7, #24]
 8004dcc:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8004dce:	6979      	ldr	r1, [r7, #20]
 8004dd0:	69f8      	ldr	r0, [r7, #28]
 8004dd2:	f017 fc2d 	bl	801c630 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	3310      	adds	r3, #16
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	6978      	ldr	r0, [r7, #20]
 8004de0:	4798      	blx	r3
    newTransition->invalidate();
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	3314      	adds	r3, #20
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	6978      	ldr	r0, [r7, #20]
 8004dec:	4798      	blx	r3
}
 8004dee:	bf00      	nop
    return newPresenter;
 8004df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	373c      	adds	r7, #60	; 0x3c
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd90      	pop	{r4, r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	0802b678 	.word	0x0802b678
 8004e00:	0802babc 	.word	0x0802babc
 8004e04:	0802b808 	.word	0x0802b808
 8004e08:	0802b860 	.word	0x0802b860
 8004e0c:	0802b904 	.word	0x0802b904

08004e10 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	460b      	mov	r3, r1
 8004e1a:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	3324      	adds	r3, #36	; 0x24
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	887a      	ldrh	r2, [r7, #2]
 8004e26:	4611      	mov	r1, r2
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	4798      	blx	r3
 8004e2c:	4603      	mov	r3, r0
    }
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3708      	adds	r7, #8
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>:
    T& at(const uint16_t index)
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b082      	sub	sp, #8
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
 8004e3e:	460b      	mov	r3, r1
 8004e40:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	3324      	adds	r3, #36	; 0x24
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	887a      	ldrh	r2, [r7, #2]
 8004e4c:	4611      	mov	r1, r2
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	4798      	blx	r3
 8004e52:	4603      	mov	r3, r0
    }
 8004e54:	4618      	mov	r0, r3
 8004e56:	3708      	adds	r7, #8
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>:
    T& at(const uint16_t index)
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	460b      	mov	r3, r1
 8004e66:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	3324      	adds	r3, #36	; 0x24
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	887a      	ldrh	r2, [r7, #2]
 8004e72:	4611      	mov	r1, r2
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	4798      	blx	r3
 8004e78:	4603      	mov	r3, r0
    }
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3708      	adds	r7, #8
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 8004e82:	b480      	push	{r7}
 8004e84:	b083      	sub	sp, #12
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
 8004e8a:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	683a      	ldr	r2, [r7, #0]
 8004e90:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8004e92:	bf00      	nop
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr

08004e9e <_ZN8touchgfx17AbstractPartition2atINS_14WipeTransitionILNS_9DirectionE1EEEEERT_t>:
    T& at(const uint16_t index)
 8004e9e:	b580      	push	{r7, lr}
 8004ea0:	b082      	sub	sp, #8
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	3324      	adds	r3, #36	; 0x24
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	887a      	ldrh	r2, [r7, #2]
 8004eb4:	4611      	mov	r1, r2
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	4798      	blx	r3
 8004eba:	4603      	mov	r3, r0
    }
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3708      	adds	r7, #8
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRectC1Ev>:
{
public:
    /**
     * A Widget that reports solid and but does not draw anything.
     */
    class FullSolidRect : public Widget
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f7ff fa84 	bl	80043dc <_ZN8touchgfx6WidgetC1Ev>
 8004ed4:	4a03      	ldr	r2, [pc, #12]	; (8004ee4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRectC1Ev+0x20>)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	601a      	str	r2, [r3, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4618      	mov	r0, r3
 8004ede:	3708      	adds	r7, #8
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	0802c5c4 	.word	0x0802c5c4

08004ee8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRectD1Ev>:
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	4a05      	ldr	r2, [pc, #20]	; (8004f08 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRectD1Ev+0x20>)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	601a      	str	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7ff fa81 	bl	8004400 <_ZN8touchgfx6WidgetD1Ev>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4618      	mov	r0, r3
 8004f02:	3708      	adds	r7, #8
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	0802c5c4 	.word	0x0802c5c4

08004f0c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRectD0Ev>:
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f7ff ffe7 	bl	8004ee8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRectD1Ev>
 8004f1a:	2128      	movs	r1, #40	; 0x28
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f025 f832 	bl	8029f86 <_ZdlPvj>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4618      	mov	r0, r3
 8004f26:	3708      	adds	r7, #8
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EEC1Eh>:
    /**
     * Initializes a new instance of the WipeTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps in the transition animation.
     */
    WipeTransition(const uint8_t transitionSteps = 20)
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af02      	add	r7, sp, #8
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	460b      	mov	r3, r1
 8004f36:	70fb      	strb	r3, [r7, #3]
        : Transition(),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0),
          solid()
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7ff f970 	bl	8004220 <_ZN8touchgfx10TransitionC1Ev>
 8004f40:	4a18      	ldr	r2, [pc, #96]	; (8004fa4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EEC1Eh+0x78>)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	601a      	str	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	78fa      	ldrb	r2, [r7, #3]
 8004f4a:	725a      	strb	r2, [r3, #9]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	729a      	strb	r2, [r3, #10]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	81da      	strh	r2, [r3, #14]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	3310      	adds	r3, #16
 8004f5c:	2228      	movs	r2, #40	; 0x28
 8004f5e:	2100      	movs	r1, #0
 8004f60:	4618      	mov	r0, r3
 8004f62:	f025 f9c5 	bl	802a2f0 <memset>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	3310      	adds	r3, #16
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7ff ffaa 	bl	8004ec4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRectC1Ev>
        case WEST:
            targetValue = HAL::DISPLAY_WIDTH;
            break;
        case NORTH:
        case SOUTH:
            targetValue = HAL::DISPLAY_HEIGHT;
 8004f70:	4b0d      	ldr	r3, [pc, #52]	; (8004fa8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EEC1Eh+0x7c>)
 8004f72:	881b      	ldrh	r3, [r3, #0]
 8004f74:	b21a      	sxth	r2, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	819a      	strh	r2, [r3, #12]
            break;
 8004f7a:	bf00      	nop
            // Nothing to do here
            break;
        }

        // Ensure that the solid area covers the entire screen
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f103 0010 	add.w	r0, r3, #16
 8004f82:	4b0a      	ldr	r3, [pc, #40]	; (8004fac <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EEC1Eh+0x80>)
 8004f84:	881b      	ldrh	r3, [r3, #0]
 8004f86:	b21a      	sxth	r2, r3
 8004f88:	4b07      	ldr	r3, [pc, #28]	; (8004fa8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EEC1Eh+0x7c>)
 8004f8a:	881b      	ldrh	r3, [r3, #0]
 8004f8c:	b21b      	sxth	r3, r3
 8004f8e:	9300      	str	r3, [sp, #0]
 8004f90:	4613      	mov	r3, r2
 8004f92:	2200      	movs	r2, #0
 8004f94:	2100      	movs	r1, #0
 8004f96:	f7fe ffd8 	bl	8003f4a <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3708      	adds	r7, #8
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	0802c5a0 	.word	0x0802c5a0
 8004fa8:	2400b5c6 	.word	0x2400b5c6
 8004fac:	2400b5c4 	.word	0x2400b5c4

08004fb0 <_ZN8touchgfx17AbstractPartition2atINS_14WipeTransitionILNS_9DirectionE0EEEEERT_t>:
    T& at(const uint16_t index)
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	460b      	mov	r3, r1
 8004fba:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	3324      	adds	r3, #36	; 0x24
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	887a      	ldrh	r2, [r7, #2]
 8004fc6:	4611      	mov	r1, r2
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	4798      	blx	r3
 8004fcc:	4603      	mov	r3, r0
    }
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3708      	adds	r7, #8
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
	...

08004fd8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRectC1Ev>:
    class FullSolidRect : public Widget
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7ff f9fa 	bl	80043dc <_ZN8touchgfx6WidgetC1Ev>
 8004fe8:	4a03      	ldr	r2, [pc, #12]	; (8004ff8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRectC1Ev+0x20>)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3708      	adds	r7, #8
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	0802c64c 	.word	0x0802c64c

08004ffc <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRectD1Ev>:
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	4a05      	ldr	r2, [pc, #20]	; (800501c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRectD1Ev+0x20>)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	601a      	str	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4618      	mov	r0, r3
 800500e:	f7ff f9f7 	bl	8004400 <_ZN8touchgfx6WidgetD1Ev>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4618      	mov	r0, r3
 8005016:	3708      	adds	r7, #8
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}
 800501c:	0802c64c 	.word	0x0802c64c

08005020 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRectD0Ev>:
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f7ff ffe7 	bl	8004ffc <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRectD1Ev>
 800502e:	2128      	movs	r1, #40	; 0x28
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f024 ffa8 	bl	8029f86 <_ZdlPvj>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4618      	mov	r0, r3
 800503a:	3708      	adds	r7, #8
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EEC1Eh>:
    WipeTransition(const uint8_t transitionSteps = 20)
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af02      	add	r7, sp, #8
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	460b      	mov	r3, r1
 800504a:	70fb      	strb	r3, [r7, #3]
          solid()
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4618      	mov	r0, r3
 8005050:	f7ff f8e6 	bl	8004220 <_ZN8touchgfx10TransitionC1Ev>
 8005054:	4a18      	ldr	r2, [pc, #96]	; (80050b8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EEC1Eh+0x78>)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	601a      	str	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	78fa      	ldrb	r2, [r7, #3]
 800505e:	725a      	strb	r2, [r3, #9]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	729a      	strb	r2, [r3, #10]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	81da      	strh	r2, [r3, #14]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	3310      	adds	r3, #16
 8005070:	2228      	movs	r2, #40	; 0x28
 8005072:	2100      	movs	r1, #0
 8005074:	4618      	mov	r0, r3
 8005076:	f025 f93b 	bl	802a2f0 <memset>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	3310      	adds	r3, #16
 800507e:	4618      	mov	r0, r3
 8005080:	f7ff ffaa 	bl	8004fd8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRectC1Ev>
            targetValue = HAL::DISPLAY_HEIGHT;
 8005084:	4b0d      	ldr	r3, [pc, #52]	; (80050bc <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EEC1Eh+0x7c>)
 8005086:	881b      	ldrh	r3, [r3, #0]
 8005088:	b21a      	sxth	r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	819a      	strh	r2, [r3, #12]
            break;
 800508e:	bf00      	nop
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f103 0010 	add.w	r0, r3, #16
 8005096:	4b0a      	ldr	r3, [pc, #40]	; (80050c0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EEC1Eh+0x80>)
 8005098:	881b      	ldrh	r3, [r3, #0]
 800509a:	b21a      	sxth	r2, r3
 800509c:	4b07      	ldr	r3, [pc, #28]	; (80050bc <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EEC1Eh+0x7c>)
 800509e:	881b      	ldrh	r3, [r3, #0]
 80050a0:	b21b      	sxth	r3, r3
 80050a2:	9300      	str	r3, [sp, #0]
 80050a4:	4613      	mov	r3, r2
 80050a6:	2200      	movs	r2, #0
 80050a8:	2100      	movs	r1, #0
 80050aa:	f7fe ff4e 	bl	8003f4a <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4618      	mov	r0, r3
 80050b2:	3708      	adds	r7, #8
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	0802c628 	.word	0x0802c628
 80050bc:	2400b5c6 	.word	0x2400b5c6
 80050c0:	2400b5c4 	.word	0x2400b5c4

080050c4 <_ZN8touchgfx17AbstractPartition2atI20Localize_AnomalyViewEERT_t>:
    T& at(const uint16_t index)
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	460b      	mov	r3, r1
 80050ce:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	3324      	adds	r3, #36	; 0x24
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	887a      	ldrh	r2, [r7, #2]
 80050da:	4611      	mov	r1, r2
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	4798      	blx	r3
 80050e0:	4603      	mov	r3, r0
    }
 80050e2:	4618      	mov	r0, r3
 80050e4:	3708      	adds	r7, #8
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}

080050ea <_ZN8touchgfx17AbstractPartition2atI25Localize_AnomalyPresenterEERT_t>:
    T& at(const uint16_t index)
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b082      	sub	sp, #8
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
 80050f2:	460b      	mov	r3, r1
 80050f4:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	3324      	adds	r3, #36	; 0x24
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	887a      	ldrh	r2, [r7, #2]
 8005100:	4611      	mov	r1, r2
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	4798      	blx	r3
 8005106:	4603      	mov	r3, r0
    }
 8005108:	4618      	mov	r0, r3
 800510a:	3708      	adds	r7, #8
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterE4bindERS1_>:
    void bind(T& presenter)
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	683a      	ldr	r2, [r7, #0]
 800511e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EED1Ev>:
class WipeTransition : public Transition
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	4a08      	ldr	r2, [pc, #32]	; (8005158 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EED1Ev+0x2c>)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	601a      	str	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	3310      	adds	r3, #16
 800513e:	4618      	mov	r0, r3
 8005140:	f7ff fed2 	bl	8004ee8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRectD1Ev>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4618      	mov	r0, r3
 8005148:	f7ff f880 	bl	800424c <_ZN8touchgfx10TransitionD1Ev>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4618      	mov	r0, r3
 8005150:	3708      	adds	r7, #8
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	0802c5a0 	.word	0x0802c5a0

0800515c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EED0Ev>:
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f7ff ffe1 	bl	800512c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EED1Ev>
 800516a:	2138      	movs	r1, #56	; 0x38
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f024 ff0a 	bl	8029f86 <_ZdlPvj>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4618      	mov	r0, r3
 8005176:	3708      	adds	r7, #8
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EED1Ev>:
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	4a08      	ldr	r2, [pc, #32]	; (80051a8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EED1Ev+0x2c>)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	601a      	str	r2, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	3310      	adds	r3, #16
 800518e:	4618      	mov	r0, r3
 8005190:	f7ff ff34 	bl	8004ffc <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRectD1Ev>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4618      	mov	r0, r3
 8005198:	f7ff f858 	bl	800424c <_ZN8touchgfx10TransitionD1Ev>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4618      	mov	r0, r3
 80051a0:	3708      	adds	r7, #8
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	0802c628 	.word	0x0802c628

080051ac <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EED0Ev>:
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f7ff ffe1 	bl	800517c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EED1Ev>
 80051ba:	2138      	movs	r1, #56	; 0x38
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f024 fee2 	bl	8029f86 <_ZdlPvj>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4618      	mov	r0, r3
 80051c6:	3708      	adds	r7, #8
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <_ZN8touchgfx12NoTransitionD1Ev>:
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	4a05      	ldr	r2, [pc, #20]	; (80051ec <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	601a      	str	r2, [r3, #0]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4618      	mov	r0, r3
 80051de:	f7ff f835 	bl	800424c <_ZN8touchgfx10TransitionD1Ev>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4618      	mov	r0, r3
 80051e6:	3708      	adds	r7, #8
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	0802c714 	.word	0x0802c714

080051f0 <_ZN8touchgfx12NoTransitionD0Ev>:
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f7ff ffe7 	bl	80051cc <_ZN8touchgfx12NoTransitionD1Ev>
 80051fe:	210c      	movs	r1, #12
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f024 fec0 	bl	8029f86 <_ZdlPvj>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4618      	mov	r0, r3
 800520a:	3708      	adds	r7, #8
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv>:

    /**
     * Handles the tick event when transitioning. It uncovers and
     * invalidates increasing parts of the new screen elements.
     */
    virtual void handleTickEvent()
 8005210:	b590      	push	{r4, r7, lr}
 8005212:	b093      	sub	sp, #76	; 0x4c
 8005214:	af02      	add	r7, sp, #8
 8005216:	6078      	str	r0, [r7, #4]
    {
        Transition::handleTickEvent();
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4618      	mov	r0, r3
 800521c:	f7ff f836 	bl	800428c <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	7a9b      	ldrb	r3, [r3, #10]
 8005224:	3301      	adds	r3, #1
 8005226:	b2da      	uxtb	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	729a      	strb	r2, [r3, #10]

        // Calculate new position or stop animation
        if (animationCounter <= (animationSteps))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	7a9a      	ldrb	r2, [r3, #10]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	7a5b      	ldrb	r3, [r3, #9]
 8005234:	429a      	cmp	r2, r3
 8005236:	d82b      	bhi.n	8005290 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x80>
        {
            // Calculate value in [0;targetValue]
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	7a9b      	ldrb	r3, [r3, #10]
 800523c:	b298      	uxth	r0, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	7a5b      	ldrb	r3, [r3, #9]
 8005248:	b29b      	uxth	r3, r3
 800524a:	2100      	movs	r1, #0
 800524c:	f017 f9f6 	bl	801c63c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8005250:	4603      	mov	r3, r0
 8005252:	461a      	mov	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	81da      	strh	r2, [r3, #14]

            // Note: Result of "calculatedValue & 1" is compiler dependent for negative values of calculatedValue
            if (calculatedValue % 2)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800525e:	b29b      	uxth	r3, r3
 8005260:	f003 0301 	and.w	r3, r3, #1
 8005264:	b29b      	uxth	r3, r3
 8005266:	2b00      	cmp	r3, #0
 8005268:	d019      	beq.n	800529e <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x8e>
            {
                // Optimization: calculatedValue is odd, add 1/-1 to move drawables modulo 32 bits in framebuffer
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005270:	b29b      	uxth	r3, r3
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8005278:	2a00      	cmp	r2, #0
 800527a:	dd01      	ble.n	8005280 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x70>
 800527c:	2201      	movs	r2, #1
 800527e:	e001      	b.n	8005284 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x74>
 8005280:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005284:	4413      	add	r3, r2
 8005286:	b29b      	uxth	r3, r3
 8005288:	b21a      	sxth	r2, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	81da      	strh	r2, [r3, #14]
 800528e:	e006      	b.n	800529e <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x8e>
            }
        }
        else
        {
            // Final step: stop the animation
            done = true;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	729a      	strb	r2, [r3, #10]
            return;
 800529c:	e07e      	b.n	800539c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x18c>
                break;
            }
        case SOUTH:
            {
                // Cover must have height of remaining part
                const uint16_t prevSolidHeight = solid.getHeight();
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	3310      	adds	r3, #16
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7fe fe7f 	bl	8003fa6 <_ZNK8touchgfx8Drawable9getHeightEv>
 80052a8:	4603      	mov	r3, r0
 80052aa:	877b      	strh	r3, [r7, #58]	; 0x3a
                solid.setHeight(HAL::DISPLAY_HEIGHT - calculatedValue);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f103 0010 	add.w	r0, r3, #16
 80052b2:	4b3c      	ldr	r3, [pc, #240]	; (80053a4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x194>)
 80052b4:	881a      	ldrh	r2, [r3, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80052bc:	b29b      	uxth	r3, r3
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	b21b      	sxth	r3, r3
 80052c4:	4619      	mov	r1, r3
 80052c6:	f7fe fec6 	bl	8004056 <_ZN8touchgfx8Drawable9setHeightEs>

                // Invalidate the uncovered part
                const uint16_t delta = prevSolidHeight - solid.getHeight();
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	3310      	adds	r3, #16
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7fe fe69 	bl	8003fa6 <_ZNK8touchgfx8Drawable9getHeightEv>
 80052d4:	4603      	mov	r3, r0
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	873b      	strh	r3, [r7, #56]	; 0x38
                Rect r(0, solid.getHeight(), HAL::DISPLAY_WIDTH, delta);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	3310      	adds	r3, #16
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7fe fe5f 	bl	8003fa6 <_ZNK8touchgfx8Drawable9getHeightEv>
 80052e8:	4603      	mov	r3, r0
 80052ea:	4619      	mov	r1, r3
 80052ec:	4b2e      	ldr	r3, [pc, #184]	; (80053a8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x198>)
 80052ee:	881b      	ldrh	r3, [r3, #0]
 80052f0:	b21a      	sxth	r2, r3
 80052f2:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 80052f6:	f107 0018 	add.w	r0, r7, #24
 80052fa:	9300      	str	r3, [sp, #0]
 80052fc:	4613      	mov	r3, r2
 80052fe:	460a      	mov	r2, r1
 8005300:	2100      	movs	r1, #0
 8005302:	f7fe fd9b 	bl	8003e3c <_ZN8touchgfx4RectC1Essss>
                screenContainer->invalidateRect(r);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	4618      	mov	r0, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	3310      	adds	r3, #16
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f107 0218 	add.w	r2, r7, #24
 800531a:	4611      	mov	r1, r2
 800531c:	4798      	blx	r3
                break;
 800531e:	bf00      	nop
        //
        // In the first tick WipeTransition cover "calculatedValue"
        // pixels vertically or horizontally depending on the speed of
        // the transition, so there's no need to transfer that. The
        // solid Widget covers the rest, so we copy those pixels.
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	7a9b      	ldrb	r3, [r3, #10]
 8005324:	2b01      	cmp	r3, #1
 8005326:	d139      	bne.n	800539c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x18c>
 8005328:	4b20      	ldr	r3, [pc, #128]	; (80053ac <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x19c>)
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d035      	beq.n	800539c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x18c>
        {
            Rect rect = solid.getRect(); // Part to copy between buffers
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	3310      	adds	r3, #16
 8005334:	4618      	mov	r0, r3
 8005336:	f7fe fdfc 	bl	8003f32 <_ZNK8touchgfx8Drawable7getRectEv>
 800533a:	4602      	mov	r2, r0
 800533c:	f107 0310 	add.w	r3, r7, #16
 8005340:	6810      	ldr	r0, [r2, #0]
 8005342:	6851      	ldr	r1, [r2, #4]
 8005344:	c303      	stmia	r3!, {r0, r1}

            // Get the currently displayed framebuffer
            uint16_t* tftFb = HAL::getInstance()->getTFTFrameBuffer();
 8005346:	f7fc ff2d 	bl	80021a4 <_ZN8touchgfx3HAL11getInstanceEv>
 800534a:	4603      	mov	r3, r0
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	3230      	adds	r2, #48	; 0x30
 8005350:	6812      	ldr	r2, [r2, #0]
 8005352:	4618      	mov	r0, r3
 8005354:	4790      	blx	r2
 8005356:	63f8      	str	r0, [r7, #60]	; 0x3c

            Rect source;
 8005358:	f107 0308 	add.w	r3, r7, #8
 800535c:	4618      	mov	r0, r3
 800535e:	f7fd fa7d 	bl	800285c <_ZN8touchgfx4RectC1Ev>
            source.x = 0;
 8005362:	2300      	movs	r3, #0
 8005364:	813b      	strh	r3, [r7, #8]
            source.y = 0;
 8005366:	2300      	movs	r3, #0
 8005368:	817b      	strh	r3, [r7, #10]
            source.width = HAL::DISPLAY_WIDTH;
 800536a:	4b0f      	ldr	r3, [pc, #60]	; (80053a8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x198>)
 800536c:	881b      	ldrh	r3, [r3, #0]
 800536e:	b21b      	sxth	r3, r3
 8005370:	81bb      	strh	r3, [r7, #12]
            source.height = HAL::DISPLAY_HEIGHT;
 8005372:	4b0c      	ldr	r3, [pc, #48]	; (80053a4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x194>)
 8005374:	881b      	ldrh	r3, [r3, #0]
 8005376:	b21b      	sxth	r3, r3
 8005378:	81fb      	strh	r3, [r7, #14]

            // Copy rect from tft to client framebuffer
            HAL::getInstance()->lcd().blitCopy((const uint16_t*)tftFb, source, rect, 255, false);
 800537a:	f7fc ff13 	bl	80021a4 <_ZN8touchgfx3HAL11getInstanceEv>
 800537e:	f7fe ff33 	bl	80041e8 <_ZN8touchgfx3HAL3lcdEv>
 8005382:	6803      	ldr	r3, [r0, #0]
 8005384:	330c      	adds	r3, #12
 8005386:	681c      	ldr	r4, [r3, #0]
 8005388:	f107 0310 	add.w	r3, r7, #16
 800538c:	f107 0208 	add.w	r2, r7, #8
 8005390:	2100      	movs	r1, #0
 8005392:	9101      	str	r1, [sp, #4]
 8005394:	21ff      	movs	r1, #255	; 0xff
 8005396:	9100      	str	r1, [sp, #0]
 8005398:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800539a:	47a0      	blx	r4
        }
    }
 800539c:	3744      	adds	r7, #68	; 0x44
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd90      	pop	{r4, r7, pc}
 80053a2:	bf00      	nop
 80053a4:	2400b5c6 	.word	0x2400b5c6
 80053a8:	2400b5c4 	.word	0x2400b5c4
 80053ac:	2400b5ce 	.word	0x2400b5ce

080053b0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE8tearDownEv>:

    virtual void tearDown()
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
    {
        screenContainer->remove(solid);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6858      	ldr	r0, [r3, #4]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	3360      	adds	r3, #96	; 0x60
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	3210      	adds	r2, #16
 80053ca:	4611      	mov	r1, r2
 80053cc:	4798      	blx	r3
    }
 80053ce:	bf00      	nop
 80053d0:	3708      	adds	r7, #8
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE4initEv>:

    virtual void init()
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b082      	sub	sp, #8
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
    {
        Transition::init();
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4618      	mov	r0, r3
 80053e2:	f7fe ff67 	bl	80042b4 <_ZN8touchgfx10Transition4initEv>
        // Add the solid (and not-drawing-anything) widget on top to cover the other widgets
        screenContainer->add(solid);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6858      	ldr	r0, [r3, #4]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	335c      	adds	r3, #92	; 0x5c
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	3210      	adds	r2, #16
 80053f8:	4611      	mov	r1, r2
 80053fa:	4798      	blx	r3
    }
 80053fc:	bf00      	nop
 80053fe:	3708      	adds	r7, #8
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE10invalidateEv>:

    /**
     * Wipe transition does not require an invalidation. Invalidation
     * is handled by the class. Do no invalidation initially.
     */
    virtual void invalidate()
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
    {
    }
 800540c:	bf00      	nop
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <_ZNK8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRect4drawERKNS_4RectE>:
        virtual void draw(const Rect& area) const
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
        }
 8005422:	bf00      	nop
 8005424:	370c      	adds	r7, #12
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <_ZNK8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRect12getSolidRectEv>:
        virtual Rect getSolidRect() const
 800542e:	b580      	push	{r7, lr}
 8005430:	b084      	sub	sp, #16
 8005432:	af02      	add	r7, sp, #8
 8005434:	6078      	str	r0, [r7, #4]
 8005436:	6039      	str	r1, [r7, #0]
            return Rect(0U, 0U, rect.width, rect.height);
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8005444:	9300      	str	r3, [sp, #0]
 8005446:	4613      	mov	r3, r2
 8005448:	2200      	movs	r2, #0
 800544a:	2100      	movs	r1, #0
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f7fe fcf5 	bl	8003e3c <_ZN8touchgfx4RectC1Essss>
        }
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	3708      	adds	r7, #8
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
	...

0800545c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv>:
    virtual void handleTickEvent()
 800545c:	b590      	push	{r4, r7, lr}
 800545e:	b093      	sub	sp, #76	; 0x4c
 8005460:	af02      	add	r7, sp, #8
 8005462:	6078      	str	r0, [r7, #4]
        Transition::handleTickEvent();
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4618      	mov	r0, r3
 8005468:	f7fe ff10 	bl	800428c <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	7a9b      	ldrb	r3, [r3, #10]
 8005470:	3301      	adds	r3, #1
 8005472:	b2da      	uxtb	r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	729a      	strb	r2, [r3, #10]
        if (animationCounter <= (animationSteps))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	7a9a      	ldrb	r2, [r3, #10]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	7a5b      	ldrb	r3, [r3, #9]
 8005480:	429a      	cmp	r2, r3
 8005482:	d82b      	bhi.n	80054dc <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x80>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	7a9b      	ldrb	r3, [r3, #10]
 8005488:	b298      	uxth	r0, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	7a5b      	ldrb	r3, [r3, #9]
 8005494:	b29b      	uxth	r3, r3
 8005496:	2100      	movs	r1, #0
 8005498:	f017 f8d0 	bl	801c63c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 800549c:	4603      	mov	r3, r0
 800549e:	461a      	mov	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	81da      	strh	r2, [r3, #14]
            if (calculatedValue % 2)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	f003 0301 	and.w	r3, r3, #1
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d019      	beq.n	80054ea <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x8e>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80054bc:	b29b      	uxth	r3, r3
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 80054c4:	2a00      	cmp	r2, #0
 80054c6:	dd01      	ble.n	80054cc <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x70>
 80054c8:	2201      	movs	r2, #1
 80054ca:	e001      	b.n	80054d0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x74>
 80054cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80054d0:	4413      	add	r3, r2
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	b21a      	sxth	r2, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	81da      	strh	r2, [r3, #14]
 80054da:	e006      	b.n	80054ea <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x8e>
            done = true;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	729a      	strb	r2, [r3, #10]
            return;
 80054e8:	e07f      	b.n	80055ea <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x18e>
                const uint16_t prevSolidPos = solid.getY();
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	3310      	adds	r3, #16
 80054ee:	4618      	mov	r0, r3
 80054f0:	f7fe fd4c 	bl	8003f8c <_ZNK8touchgfx8Drawable4getYEv>
 80054f4:	4603      	mov	r3, r0
 80054f6:	877b      	strh	r3, [r7, #58]	; 0x3a
                solid.setHeight(HAL::DISPLAY_HEIGHT - calculatedValue);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f103 0010 	add.w	r0, r3, #16
 80054fe:	4b3c      	ldr	r3, [pc, #240]	; (80055f0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x194>)
 8005500:	881a      	ldrh	r2, [r3, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005508:	b29b      	uxth	r3, r3
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	b29b      	uxth	r3, r3
 800550e:	b21b      	sxth	r3, r3
 8005510:	4619      	mov	r1, r3
 8005512:	f7fe fda0 	bl	8004056 <_ZN8touchgfx8Drawable9setHeightEs>
                solid.setY(calculatedValue);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f103 0210 	add.w	r2, r3, #16
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005522:	4619      	mov	r1, r3
 8005524:	4610      	mov	r0, r2
 8005526:	f7fe fd5a 	bl	8003fde <_ZN8touchgfx8Drawable4setYEs>
                const uint16_t delta = calculatedValue - prevSolidPos;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005530:	b29a      	uxth	r2, r3
 8005532:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	873b      	strh	r3, [r7, #56]	; 0x38
                Rect r(0, prevSolidPos, HAL::DISPLAY_WIDTH, delta);
 8005538:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 800553c:	4b2d      	ldr	r3, [pc, #180]	; (80055f4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x198>)
 800553e:	881b      	ldrh	r3, [r3, #0]
 8005540:	b219      	sxth	r1, r3
 8005542:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8005546:	f107 0020 	add.w	r0, r7, #32
 800554a:	9300      	str	r3, [sp, #0]
 800554c:	460b      	mov	r3, r1
 800554e:	2100      	movs	r1, #0
 8005550:	f7fe fc74 	bl	8003e3c <_ZN8touchgfx4RectC1Essss>
                screenContainer->invalidateRect(r);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	4618      	mov	r0, r3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	3310      	adds	r3, #16
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f107 0220 	add.w	r2, r7, #32
 8005568:	4611      	mov	r1, r2
 800556a:	4798      	blx	r3
                break;
 800556c:	bf00      	nop
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	7a9b      	ldrb	r3, [r3, #10]
 8005572:	2b01      	cmp	r3, #1
 8005574:	d139      	bne.n	80055ea <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x18e>
 8005576:	4b20      	ldr	r3, [pc, #128]	; (80055f8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x19c>)
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d035      	beq.n	80055ea <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x18e>
            Rect rect = solid.getRect(); // Part to copy between buffers
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	3310      	adds	r3, #16
 8005582:	4618      	mov	r0, r3
 8005584:	f7fe fcd5 	bl	8003f32 <_ZNK8touchgfx8Drawable7getRectEv>
 8005588:	4602      	mov	r2, r0
 800558a:	f107 0310 	add.w	r3, r7, #16
 800558e:	6810      	ldr	r0, [r2, #0]
 8005590:	6851      	ldr	r1, [r2, #4]
 8005592:	c303      	stmia	r3!, {r0, r1}
            uint16_t* tftFb = HAL::getInstance()->getTFTFrameBuffer();
 8005594:	f7fc fe06 	bl	80021a4 <_ZN8touchgfx3HAL11getInstanceEv>
 8005598:	4603      	mov	r3, r0
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	3230      	adds	r2, #48	; 0x30
 800559e:	6812      	ldr	r2, [r2, #0]
 80055a0:	4618      	mov	r0, r3
 80055a2:	4790      	blx	r2
 80055a4:	63f8      	str	r0, [r7, #60]	; 0x3c
            Rect source;
 80055a6:	f107 0308 	add.w	r3, r7, #8
 80055aa:	4618      	mov	r0, r3
 80055ac:	f7fd f956 	bl	800285c <_ZN8touchgfx4RectC1Ev>
            source.x = 0;
 80055b0:	2300      	movs	r3, #0
 80055b2:	813b      	strh	r3, [r7, #8]
            source.y = 0;
 80055b4:	2300      	movs	r3, #0
 80055b6:	817b      	strh	r3, [r7, #10]
            source.width = HAL::DISPLAY_WIDTH;
 80055b8:	4b0e      	ldr	r3, [pc, #56]	; (80055f4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x198>)
 80055ba:	881b      	ldrh	r3, [r3, #0]
 80055bc:	b21b      	sxth	r3, r3
 80055be:	81bb      	strh	r3, [r7, #12]
            source.height = HAL::DISPLAY_HEIGHT;
 80055c0:	4b0b      	ldr	r3, [pc, #44]	; (80055f0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x194>)
 80055c2:	881b      	ldrh	r3, [r3, #0]
 80055c4:	b21b      	sxth	r3, r3
 80055c6:	81fb      	strh	r3, [r7, #14]
            HAL::getInstance()->lcd().blitCopy((const uint16_t*)tftFb, source, rect, 255, false);
 80055c8:	f7fc fdec 	bl	80021a4 <_ZN8touchgfx3HAL11getInstanceEv>
 80055cc:	f7fe fe0c 	bl	80041e8 <_ZN8touchgfx3HAL3lcdEv>
 80055d0:	6803      	ldr	r3, [r0, #0]
 80055d2:	330c      	adds	r3, #12
 80055d4:	681c      	ldr	r4, [r3, #0]
 80055d6:	f107 0310 	add.w	r3, r7, #16
 80055da:	f107 0208 	add.w	r2, r7, #8
 80055de:	2100      	movs	r1, #0
 80055e0:	9101      	str	r1, [sp, #4]
 80055e2:	21ff      	movs	r1, #255	; 0xff
 80055e4:	9100      	str	r1, [sp, #0]
 80055e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80055e8:	47a0      	blx	r4
    }
 80055ea:	3744      	adds	r7, #68	; 0x44
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd90      	pop	{r4, r7, pc}
 80055f0:	2400b5c6 	.word	0x2400b5c6
 80055f4:	2400b5c4 	.word	0x2400b5c4
 80055f8:	2400b5ce 	.word	0x2400b5ce

080055fc <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE8tearDownEv>:
    virtual void tearDown()
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
        screenContainer->remove(solid);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6858      	ldr	r0, [r3, #4]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	3360      	adds	r3, #96	; 0x60
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	3210      	adds	r2, #16
 8005616:	4611      	mov	r1, r2
 8005618:	4798      	blx	r3
    }
 800561a:	bf00      	nop
 800561c:	3708      	adds	r7, #8
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE4initEv>:
    virtual void init()
 8005622:	b580      	push	{r7, lr}
 8005624:	b082      	sub	sp, #8
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
        Transition::init();
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4618      	mov	r0, r3
 800562e:	f7fe fe41 	bl	80042b4 <_ZN8touchgfx10Transition4initEv>
        screenContainer->add(solid);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6858      	ldr	r0, [r3, #4]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	335c      	adds	r3, #92	; 0x5c
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	3210      	adds	r2, #16
 8005644:	4611      	mov	r1, r2
 8005646:	4798      	blx	r3
    }
 8005648:	bf00      	nop
 800564a:	3708      	adds	r7, #8
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE10invalidateEv>:
    virtual void invalidate()
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
    }
 8005658:	bf00      	nop
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <_ZNK8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRect4drawERKNS_4RectE>:
        virtual void draw(const Rect& area) const
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
        }
 800566e:	bf00      	nop
 8005670:	370c      	adds	r7, #12
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr

0800567a <_ZNK8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRect12getSolidRectEv>:
        virtual Rect getSolidRect() const
 800567a:	b580      	push	{r7, lr}
 800567c:	b084      	sub	sp, #16
 800567e:	af02      	add	r7, sp, #8
 8005680:	6078      	str	r0, [r7, #4]
 8005682:	6039      	str	r1, [r7, #0]
            return Rect(0U, 0U, rect.width, rect.height);
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8005690:	9300      	str	r3, [sp, #0]
 8005692:	4613      	mov	r3, r2
 8005694:	2200      	movs	r2, #0
 8005696:	2100      	movs	r1, #0
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f7fe fbcf 	bl	8003e3c <_ZN8touchgfx4RectC1Essss>
        }
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	3708      	adds	r7, #8
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 80056a6:	b480      	push	{r7}
 80056a8:	b083      	sub	sp, #12
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a1b      	ldr	r3, [r3, #32]
    }
 80056b2:	4618      	mov	r0, r3
 80056b4:	370c      	adds	r7, #12
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr

080056be <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 80056be:	b480      	push	{r7}
 80056c0:	b083      	sub	sp, #12
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 80056ca:	4618      	mov	r0, r3
 80056cc:	370c      	adds	r7, #12
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
	...

080056d8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 80056d8:	b580      	push	{r7, lr}
 80056da:	b08c      	sub	sp, #48	; 0x30
 80056dc:	af08      	add	r7, sp, #32
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	4611      	mov	r1, r2
 80056e4:	461a      	mov	r2, r3
 80056e6:	460b      	mov	r3, r1
 80056e8:	80fb      	strh	r3, [r7, #6]
 80056ea:	4613      	mov	r3, r2
 80056ec:	80bb      	strh	r3, [r7, #4]
    : ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	88b9      	ldrh	r1, [r7, #4]
 80056f2:	88fa      	ldrh	r2, [r7, #6]
 80056f4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80056f6:	9306      	str	r3, [sp, #24]
 80056f8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80056fa:	9305      	str	r3, [sp, #20]
 80056fc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005700:	9304      	str	r3, [sp, #16]
 8005702:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005706:	9303      	str	r3, [sp, #12]
 8005708:	f897 3020 	ldrb.w	r3, [r7, #32]
 800570c:	9302      	str	r3, [sp, #8]
 800570e:	7f3b      	ldrb	r3, [r7, #28]
 8005710:	9301      	str	r3, [sp, #4]
 8005712:	7e3b      	ldrb	r3, [r7, #24]
 8005714:	9300      	str	r3, [sp, #0]
 8005716:	460b      	mov	r3, r1
 8005718:	68b9      	ldr	r1, [r7, #8]
 800571a:	f016 fb69 	bl	801bdf0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800571e:	4a0a      	ldr	r2, [pc, #40]	; (8005748 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	601a      	str	r2, [r3, #0]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005728:	619a      	str	r2, [r3, #24]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800572e:	61da      	str	r2, [r3, #28]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005734:	621a      	str	r2, [r3, #32]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800573a:	625a      	str	r2, [r3, #36]	; 0x24
{
}
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	4618      	mov	r0, r3
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	0802c75c 	.word	0x0802c75c

0800574c <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	889b      	ldrh	r3, [r3, #4]
 8005760:	0adb      	lsrs	r3, r3, #11
 8005762:	b29b      	uxth	r3, r3
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	4413      	add	r3, r2
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4413      	add	r3, r2
}
 8005772:	4618      	mov	r0, r3
 8005774:	3714      	adds	r7, #20
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr

0800577e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800577e:	b480      	push	{r7}
 8005780:	b089      	sub	sp, #36	; 0x24
 8005782:	af00      	add	r7, sp, #0
 8005784:	60f8      	str	r0, [r7, #12]
 8005786:	460b      	mov	r3, r1
 8005788:	607a      	str	r2, [r7, #4]
 800578a:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d003      	beq.n	800579a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	7b1b      	ldrb	r3, [r3, #12]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d101      	bne.n	800579e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800579a:	2300      	movs	r3, #0
 800579c:	e030      	b.n	8005800 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	69da      	ldr	r2, [r3, #28]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	7b5b      	ldrb	r3, [r3, #13]
 80057aa:	021b      	lsls	r3, r3, #8
 80057ac:	b21b      	sxth	r3, r3
 80057ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80057b2:	b219      	sxth	r1, r3
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	7adb      	ldrb	r3, [r3, #11]
 80057b8:	b21b      	sxth	r3, r3
 80057ba:	430b      	orrs	r3, r1
 80057bc:	b21b      	sxth	r3, r3
 80057be:	b29b      	uxth	r3, r3
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	4413      	add	r3, r2
 80057c4:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	7b1b      	ldrb	r3, [r3, #12]
 80057ca:	837b      	strh	r3, [r7, #26]
 80057cc:	8b7b      	ldrh	r3, [r7, #26]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d015      	beq.n	80057fe <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	881b      	ldrh	r3, [r3, #0]
 80057d6:	897a      	ldrh	r2, [r7, #10]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d103      	bne.n	80057e4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80057e2:	e00d      	b.n	8005800 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	881b      	ldrh	r3, [r3, #0]
 80057e8:	897a      	ldrh	r2, [r7, #10]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d306      	bcc.n	80057fc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80057ee:	8b7b      	ldrh	r3, [r7, #26]
 80057f0:	3b01      	subs	r3, #1
 80057f2:	837b      	strh	r3, [r7, #26]
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	3304      	adds	r3, #4
 80057f8:	61fb      	str	r3, [r7, #28]
 80057fa:	e7e7      	b.n	80057cc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 80057fc:	bf00      	nop
        }
    }
    return 0;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	3724      	adds	r7, #36	; 0x24
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
        : color(col)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	683a      	ldr	r2, [r7, #0]
 800581a:	601a      	str	r2, [r3, #0]
    }
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4618      	mov	r0, r3
 8005820:	370c      	adds	r7, #12
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr

0800582a <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 800582a:	b480      	push	{r7}
 800582c:	b083      	sub	sp, #12
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
 8005832:	460b      	mov	r3, r1
 8005834:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	887a      	ldrh	r2, [r7, #2]
 800583a:	801a      	strh	r2, [r3, #0]
    {
    }
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4618      	mov	r0, r3
 8005840:	370c      	adds	r7, #12
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr

0800584a <_ZN8touchgfx8Drawable12setTouchableEb>:
    void setTouchable(bool touch)
 800584a:	b480      	push	{r7}
 800584c:	b083      	sub	sp, #12
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
 8005852:	460b      	mov	r3, r1
 8005854:	70fb      	strb	r3, [r7, #3]
        touchable = touch;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	78fa      	ldrb	r2, [r7, #3]
 800585a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 800585e:	bf00      	nop
 8005860:	370c      	adds	r7, #12
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
	...

0800586c <_ZN8touchgfx9ContainerC1Ev>:
 * @see Drawable
 */
class Container : public Drawable
{
public:
    Container()
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
        : Drawable(),
          firstChild(0)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4618      	mov	r0, r3
 8005878:	f7fe fb00 	bl	8003e7c <_ZN8touchgfx8DrawableC1Ev>
 800587c:	4a05      	ldr	r2, [pc, #20]	; (8005894 <_ZN8touchgfx9ContainerC1Ev+0x28>)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	601a      	str	r2, [r3, #0]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	629a      	str	r2, [r3, #40]	; 0x28
    {
    }
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4618      	mov	r0, r3
 800588c:	3708      	adds	r7, #8
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	0802d050 	.word	0x0802d050

08005898 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
    {
 80058a0:	4a06      	ldr	r2, [pc, #24]	; (80058bc <_ZN8touchgfx6ScreenD1Ev+0x24>)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	601a      	str	r2, [r3, #0]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	3304      	adds	r3, #4
 80058aa:	4618      	mov	r0, r3
 80058ac:	f001 f820 	bl	80068f0 <_ZN8touchgfx9ContainerD1Ev>
    }
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4618      	mov	r0, r3
 80058b4:	3708      	adds	r7, #8
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	0802e810 	.word	0x0802e810

080058c0 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
    }
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f7ff ffe5 	bl	8005898 <_ZN8touchgfx6ScreenD1Ev>
 80058ce:	213c      	movs	r1, #60	; 0x3c
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f024 fb58 	bl	8029f86 <_ZdlPvj>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4618      	mov	r0, r3
 80058da:	3708      	adds	r7, #8
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
    {
    }
 80058e8:	bf00      	nop
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
    {
    }
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
    {
    }
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
    {
    }
 8005924:	bf00      	nop
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	460b      	mov	r3, r1
 800593a:	70fb      	strb	r3, [r7, #3]
    {
    }
 800593c:	bf00      	nop
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	3304      	adds	r3, #4
 8005956:	6839      	ldr	r1, [r7, #0]
 8005958:	4618      	mov	r0, r3
 800595a:	f011 fb21 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800595e:	bf00      	nop
 8005960:	3708      	adds	r7, #8
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
	...

08005968 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4618      	mov	r0, r3
 8005974:	2326      	movs	r3, #38	; 0x26
 8005976:	461a      	mov	r2, r3
 8005978:	2100      	movs	r1, #0
 800597a:	f024 fcb9 	bl	802a2f0 <memset>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4618      	mov	r0, r3
 8005982:	f7fe fd2b 	bl	80043dc <_ZN8touchgfx6WidgetC1Ev>
 8005986:	4a09      	ldr	r2, [pc, #36]	; (80059ac <_ZN8touchgfx3BoxC1Ev+0x44>)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	601a      	str	r2, [r3, #0]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	22ff      	movs	r2, #255	; 0xff
 8005990:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	3328      	adds	r3, #40	; 0x28
 8005998:	2100      	movs	r1, #0
 800599a:	4618      	mov	r0, r3
 800599c:	f7ff ff36 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
    {
    }
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4618      	mov	r0, r3
 80059a4:	3708      	adds	r7, #8
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	0802e0c4 	.word	0x0802e0c4

080059b0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	683a      	ldr	r2, [r7, #0]
 80059be:	629a      	str	r2, [r3, #40]	; 0x28
    }
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param  bitmap (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bitmap = Bitmap())
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
        : Widget(), bitmap(bitmap), alpha(255)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4618      	mov	r0, r3
 80059da:	2326      	movs	r3, #38	; 0x26
 80059dc:	461a      	mov	r2, r3
 80059de:	2100      	movs	r1, #0
 80059e0:	f024 fc86 	bl	802a2f0 <memset>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4618      	mov	r0, r3
 80059e8:	f7fe fcf8 	bl	80043dc <_ZN8touchgfx6WidgetC1Ev>
 80059ec:	4a09      	ldr	r2, [pc, #36]	; (8005a14 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x48>)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	601a      	str	r2, [r3, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	683a      	ldr	r2, [r7, #0]
 80059f6:	8812      	ldrh	r2, [r2, #0]
 80059f8:	84da      	strh	r2, [r3, #38]	; 0x26
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	22ff      	movs	r2, #255	; 0xff
 80059fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        Image::setBitmap(bitmap);
 8005a02:	6839      	ldr	r1, [r7, #0]
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f013 fc70 	bl	80192ea <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3708      	adds	r7, #8
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	0802e33c 	.word	0x0802e33c

08005a18 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	4a05      	ldr	r2, [pc, #20]	; (8005a38 <_ZN8touchgfx3BoxD1Ev+0x20>)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	601a      	str	r2, [r3, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7fe fce9 	bl	8004400 <_ZN8touchgfx6WidgetD1Ev>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4618      	mov	r0, r3
 8005a32:	3708      	adds	r7, #8
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	0802e0c4 	.word	0x0802e0c4

08005a3c <_ZN8touchgfx3BoxD0Ev>:
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f7ff ffe7 	bl	8005a18 <_ZN8touchgfx3BoxD1Ev>
 8005a4a:	212c      	movs	r1, #44	; 0x2c
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f024 fa9a 	bl	8029f86 <_ZdlPvj>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4618      	mov	r0, r3
 8005a56:	3708      	adds	r7, #8
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <_ZN8touchgfx13BoxWithBorderC1Ev>:
 * BoxWithBorder will function just like a Box.
 */
class BoxWithBorder : public Box
{
public:
    BoxWithBorder()
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
        : Box(), borderColor(0), borderSize(0)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7ff ff7e 	bl	8005968 <_ZN8touchgfx3BoxC1Ev>
 8005a6c:	4a08      	ldr	r2, [pc, #32]	; (8005a90 <_ZN8touchgfx13BoxWithBorderC1Ev+0x34>)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	601a      	str	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	332c      	adds	r3, #44	; 0x2c
 8005a76:	2100      	movs	r1, #0
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f7ff fec7 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	861a      	strh	r2, [r3, #48]	; 0x30
    {
    }
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4618      	mov	r0, r3
 8005a88:	3708      	adds	r7, #8
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	0802e2d8 	.word	0x0802e2d8

08005a94 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>:
     * Sets the color of the border drawn along the edge of the BoxWithBorder.
     *
     * @param  color The color of the border.
     * @see setColor, getBorderColor, Color::getColorFrom24BitRGB
     */
    void setBorderColor(colortype color)
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
    {
        borderColor = color;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	683a      	ldr	r2, [r7, #0]
 8005aa2:	62da      	str	r2, [r3, #44]	; 0x2c
    }
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>:
     *
     * @param  size The width of the border.
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	460b      	mov	r3, r1
 8005aba:	807b      	strh	r3, [r7, #2]
    {
        borderSize = size;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	887a      	ldrh	r2, [r7, #2]
 8005ac0:	861a      	strh	r2, [r3, #48]	; 0x30
    }
 8005ac2:	bf00      	nop
 8005ac4:	370c      	adds	r7, #12
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
	...

08005ad0 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	460b      	mov	r3, r1
 8005ada:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 8005adc:	4a06      	ldr	r2, [pc, #24]	; (8005af8 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	601a      	str	r2, [r3, #0]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	887a      	ldrh	r2, [r7, #2]
 8005ae6:	809a      	strh	r2, [r3, #4]
    }
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4618      	mov	r0, r3
 8005aec:	370c      	adds	r7, #12
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	0802c590 	.word	0x0802c590

08005afc <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4618      	mov	r0, r3
 8005b08:	2326      	movs	r3, #38	; 0x26
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	2100      	movs	r1, #0
 8005b0e:	f024 fbef 	bl	802a2f0 <memset>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7fe fc61 	bl	80043dc <_ZN8touchgfx6WidgetC1Ev>
 8005b1a:	4a14      	ldr	r2, [pc, #80]	; (8005b6c <_ZN8touchgfx8TextAreaC1Ev+0x70>)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	601a      	str	r2, [r3, #0]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	3328      	adds	r3, #40	; 0x28
 8005b24:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f7ff ffd1 	bl	8005ad0 <_ZN8touchgfx9TypedTextC1Et>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	3330      	adds	r3, #48	; 0x30
 8005b32:	2100      	movs	r1, #0
 8005b34:	4618      	mov	r0, r3
 8005b36:	f7ff fe69 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	869a      	strh	r2, [r3, #52]	; 0x34
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	22ff      	movs	r2, #255	; 0xff
 8005b44:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    {
    }
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4618      	mov	r0, r3
 8005b64:	3708      	adds	r7, #8
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	0802e01c 	.word	0x0802e01c

08005b70 <_ZN8touchgfx14AbstractButtonC1Ev>:
 */
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b082      	sub	sp, #8
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	2326      	movs	r3, #38	; 0x26
 8005b7e:	461a      	mov	r2, r3
 8005b80:	2100      	movs	r1, #0
 8005b82:	f024 fbb5 	bl	802a2f0 <memset>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f7fe fc27 	bl	80043dc <_ZN8touchgfx6WidgetC1Ev>
 8005b8e:	4a0a      	ldr	r2, [pc, #40]	; (8005bb8 <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	601a      	str	r2, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	629a      	str	r2, [r3, #40]	; 0x28
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
        setTouchable(true);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2101      	movs	r1, #1
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7ff fe4f 	bl	800584a <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3708      	adds	r7, #8
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	0802de80 	.word	0x0802de80

08005bbc <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param  callback The callback to be executed. The callback will be executed with a
     *                  reference to the AbstractButton.
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	683a      	ldr	r2, [r7, #0]
 8005bca:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8005bcc:	bf00      	nop
 8005bce:	370c      	adds	r7, #12
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	4a05      	ldr	r2, [pc, #20]	; (8005bf8 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	601a      	str	r2, [r3, #0]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4618      	mov	r0, r3
 8005bea:	f7fe fc09 	bl	8004400 <_ZN8touchgfx6WidgetD1Ev>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3708      	adds	r7, #8
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	0802de80 	.word	0x0802de80

08005bfc <_ZN8touchgfx14AbstractButtonD0Ev>:
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f7ff ffe7 	bl	8005bd8 <_ZN8touchgfx14AbstractButtonD1Ev>
 8005c0a:	2130      	movs	r1, #48	; 0x30
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f024 f9ba 	bl	8029f86 <_ZdlPvj>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4618      	mov	r0, r3
 8005c16:	3708      	adds	r7, #8
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4618      	mov	r0, r3
 8005c28:	f7ff ffa2 	bl	8005b70 <_ZN8touchgfx14AbstractButtonC1Ev>
 8005c2c:	4a0c      	ldr	r2, [pc, #48]	; (8005c60 <_ZN8touchgfx6ButtonC1Ev+0x44>)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	601a      	str	r2, [r3, #0]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	332e      	adds	r3, #46	; 0x2e
 8005c36:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f7ff fdf5 	bl	800582a <_ZN8touchgfx6BitmapC1Et>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	3330      	adds	r3, #48	; 0x30
 8005c44:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f7ff fdee 	bl	800582a <_ZN8touchgfx6BitmapC1Et>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	22ff      	movs	r2, #255	; 0xff
 8005c52:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    {
    }
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3708      	adds	r7, #8
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	0802e18c 	.word	0x0802e18c

08005c64 <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterED1Ev>:
class View : public Screen
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	4a05      	ldr	r2, [pc, #20]	; (8005c84 <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterED1Ev+0x20>)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	601a      	str	r2, [r3, #0]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4618      	mov	r0, r3
 8005c76:	f7ff fe0f 	bl	8005898 <_ZN8touchgfx6ScreenD1Ev>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3708      	adds	r7, #8
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	0802c804 	.word	0x0802c804

08005c88 <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterED0Ev>:
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f7ff ffe7 	bl	8005c64 <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterED1Ev>
 8005c96:	2140      	movs	r1, #64	; 0x40
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f024 f974 	bl	8029f86 <_ZdlPvj>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3708      	adds	r7, #8
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <_ZN24Localize_AnomalyViewBaseD1Ev>:

class Localize_AnomalyViewBase : public touchgfx::View<Localize_AnomalyPresenter>
{
public:
    Localize_AnomalyViewBase();
    virtual ~Localize_AnomalyViewBase() {}
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b082      	sub	sp, #8
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	4a3c      	ldr	r2, [pc, #240]	; (8005da4 <_ZN24Localize_AnomalyViewBaseD1Ev+0xfc>)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	601a      	str	r2, [r3, #0]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f503 736c 	add.w	r3, r3, #944	; 0x3b0
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f000 fdf5 	bl	80068ac <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f503 735d 	add.w	r3, r3, #884	; 0x374
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f000 fe77 	bl	80069bc <_ZN8touchgfx8TextAreaD1Ev>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f000 fe4f 	bl	8006978 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f000 fe05 	bl	80068f0 <_ZN8touchgfx9ContainerD1Ev>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8005cec:	4618      	mov	r0, r3
 8005cee:	f000 fe21 	bl	8006934 <_ZN8touchgfx5ImageD1Ev>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f000 fe3d 	bl	8006978 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005d04:	4618      	mov	r0, r3
 8005d06:	f000 fdf3 	bl	80068f0 <_ZN8touchgfx9ContainerD1Ev>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8005d10:	4618      	mov	r0, r3
 8005d12:	f000 fe31 	bl	8006978 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f000 fde7 	bl	80068f0 <_ZN8touchgfx9ContainerD1Ev>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f000 fe6f 	bl	8006a0c <_ZN8touchgfx6ButtonD1Ev>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005d34:	4618      	mov	r0, r3
 8005d36:	f000 fe41 	bl	80069bc <_ZN8touchgfx8TextAreaD1Ev>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8005d40:	4618      	mov	r0, r3
 8005d42:	f000 fe19 	bl	8006978 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f000 fdcf 	bl	80068f0 <_ZN8touchgfx9ContainerD1Ev>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f000 fe0d 	bl	8006978 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	33f8      	adds	r3, #248	; 0xf8
 8005d62:	4618      	mov	r0, r3
 8005d64:	f000 fdc4 	bl	80068f0 <_ZN8touchgfx9ContainerD1Ev>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	33c4      	adds	r3, #196	; 0xc4
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f000 fe03 	bl	8006978 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	3398      	adds	r3, #152	; 0x98
 8005d76:	4618      	mov	r0, r3
 8005d78:	f000 fdba 	bl	80068f0 <_ZN8touchgfx9ContainerD1Ev>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	336c      	adds	r3, #108	; 0x6c
 8005d80:	4618      	mov	r0, r3
 8005d82:	f000 fdd7 	bl	8006934 <_ZN8touchgfx5ImageD1Ev>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	3340      	adds	r3, #64	; 0x40
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f7ff fe44 	bl	8005a18 <_ZN8touchgfx3BoxD1Ev>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4618      	mov	r0, r3
 8005d94:	f7ff ff66 	bl	8005c64 <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterED1Ev>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3708      	adds	r7, #8
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	0802c7b4 	.word	0x0802c7b4

08005da8 <_ZN24Localize_AnomalyViewBaseD0Ev>:
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f7ff ff79 	bl	8005ca8 <_ZN24Localize_AnomalyViewBaseD1Ev>
 8005db6:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f024 f8e3 	bl	8029f86 <_ZdlPvj>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3708      	adds	r7, #8
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <_ZN24Localize_AnomalyViewBase9function1Ev>:
    virtual void afterTransition();

    /*
     * Virtual Action Handlers
     */
    virtual void function1()
 8005dca:	b480      	push	{r7}
 8005dcc:	b083      	sub	sp, #12
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Localize_Anomaly
    }
 8005dd2:	bf00      	nop
 8005dd4:	370c      	adds	r7, #12
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr

08005dde <_ZN24Localize_AnomalyViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 8005dde:	b580      	push	{r7, lr}
 8005de0:	b082      	sub	sp, #8
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8005de6:	f014 ff8f 	bl	801ad08 <_ZN8touchgfx11Application11getInstanceEv>
 8005dea:	4603      	mov	r3, r0
    }
 8005dec:	4618      	mov	r0, r3
 8005dee:	3708      	adds	r7, #8
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <_ZN24Localize_AnomalyViewBaseC1Ev>:
#include <gui_generated/localize_anomaly_screen/Localize_AnomalyViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Localize_AnomalyViewBase::Localize_AnomalyViewBase() :
 8005df4:	b590      	push	{r4, r7, lr}
 8005df6:	b0b5      	sub	sp, #212	; 0xd4
 8005df8:	af02      	add	r7, sp, #8
 8005dfa:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Localize_AnomalyViewBase::buttonCallbackHandler)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f000 fcee 	bl	80067e0 <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterEC1Ev>
 8005e04:	4ae0      	ldr	r2, [pc, #896]	; (8006188 <_ZN24Localize_AnomalyViewBaseC1Ev+0x394>)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	601a      	str	r2, [r3, #0]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	3340      	adds	r3, #64	; 0x40
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f7ff fdaa 	bl	8005968 <_ZN8touchgfx3BoxC1Ev>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8005e1a:	f107 0314 	add.w	r3, r7, #20
 8005e1e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7ff fd01 	bl	800582a <_ZN8touchgfx6BitmapC1Et>
 8005e28:	f107 0314 	add.w	r3, r7, #20
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	4620      	mov	r0, r4
 8005e30:	f7ff fdcc 	bl	80059cc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	3398      	adds	r3, #152	; 0x98
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f7ff fd17 	bl	800586c <_ZN8touchgfx9ContainerC1Ev>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	33c4      	adds	r3, #196	; 0xc4
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7ff fe0a 	bl	8005a5c <_ZN8touchgfx13BoxWithBorderC1Ev>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	33f8      	adds	r3, #248	; 0xf8
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f7ff fd0d 	bl	800586c <_ZN8touchgfx9ContainerC1Ev>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7ff fdff 	bl	8005a5c <_ZN8touchgfx13BoxWithBorderC1Ev>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005e64:	4618      	mov	r0, r3
 8005e66:	f7ff fd01 	bl	800586c <_ZN8touchgfx9ContainerC1Ev>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7ff fdf3 	bl	8005a5c <_ZN8touchgfx13BoxWithBorderC1Ev>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f7ff fe3d 	bl	8005afc <_ZN8touchgfx8TextAreaC1Ev>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f7ff fec7 	bl	8005c1c <_ZN8touchgfx6ButtonC1Ev>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8005e94:	4618      	mov	r0, r3
 8005e96:	f7ff fce9 	bl	800586c <_ZN8touchgfx9ContainerC1Ev>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7ff fddb 	bl	8005a5c <_ZN8touchgfx13BoxWithBorderC1Ev>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005eac:	4618      	mov	r0, r3
 8005eae:	f7ff fcdd 	bl	800586c <_ZN8touchgfx9ContainerC1Ev>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f7ff fdcf 	bl	8005a5c <_ZN8touchgfx13BoxWithBorderC1Ev>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f503 743a 	add.w	r4, r3, #744	; 0x2e8
 8005ec4:	f107 0318 	add.w	r3, r7, #24
 8005ec8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f7ff fcac 	bl	800582a <_ZN8touchgfx6BitmapC1Et>
 8005ed2:	f107 0318 	add.w	r3, r7, #24
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	4620      	mov	r0, r4
 8005eda:	f7ff fd77 	bl	80059cc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f7ff fcc1 	bl	800586c <_ZN8touchgfx9ContainerC1Ev>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f7ff fdb3 	bl	8005a5c <_ZN8touchgfx13BoxWithBorderC1Ev>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f503 735d 	add.w	r3, r3, #884	; 0x374
 8005efc:	4618      	mov	r0, r3
 8005efe:	f7ff fdfd 	bl	8005afc <_ZN8touchgfx8TextAreaC1Ev>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f503 706c 	add.w	r0, r3, #944	; 0x3b0
 8005f08:	4ba0      	ldr	r3, [pc, #640]	; (800618c <_ZN24Localize_AnomalyViewBaseC1Ev+0x398>)
 8005f0a:	61fb      	str	r3, [r7, #28]
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	623b      	str	r3, [r7, #32]
 8005f10:	f107 031c 	add.w	r3, r7, #28
 8005f14:	cb0c      	ldmia	r3, {r2, r3}
 8005f16:	6879      	ldr	r1, [r7, #4]
 8005f18:	f000 fc88 	bl	800682c <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    __background.setPosition(0, 0, 480, 272);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8005f22:	f44f 7388 	mov.w	r3, #272	; 0x110
 8005f26:	9300      	str	r3, [sp, #0]
 8005f28:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	2100      	movs	r1, #0
 8005f30:	f7fe f80b 	bl	8003f4a <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 8005f40:	2300      	movs	r3, #0
 8005f42:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 8005f46:	2300      	movs	r3, #0
 8005f48:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8005f4c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8005f50:	041b      	lsls	r3, r3, #16
 8005f52:	461a      	mov	r2, r3
 8005f54:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8005f58:	021b      	lsls	r3, r3, #8
 8005f5a:	431a      	orrs	r2, r3
 8005f5c:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8005f60:	4313      	orrs	r3, r2
 8005f62:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005f66:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005f6a:	4611      	mov	r1, r2
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f7ff fc4d 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 8005f72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f74:	4619      	mov	r1, r3
 8005f76:	4620      	mov	r0, r4
 8005f78:	f7ff fd1a 	bl	80059b0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    Main_Background.setXY(0, 0);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	336c      	adds	r3, #108	; 0x6c
 8005f80:	2200      	movs	r2, #0
 8005f82:	2100      	movs	r1, #0
 8005f84:	4618      	mov	r0, r3
 8005f86:	f7fe f839 	bl	8003ffc <_ZN8touchgfx8Drawable5setXYEss>
    Main_Background.setBitmap(touchgfx::Bitmap(BITMAP_BACKGROUND_1_ID));
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8005f90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f94:	2100      	movs	r1, #0
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7ff fc47 	bl	800582a <_ZN8touchgfx6BitmapC1Et>
 8005f9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	4620      	mov	r0, r4
 8005fa4:	f013 f9a1 	bl	80192ea <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    Button_Panel.setPosition(10, 187, 460, 77);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f103 0098 	add.w	r0, r3, #152	; 0x98
 8005fae:	234d      	movs	r3, #77	; 0x4d
 8005fb0:	9300      	str	r3, [sp, #0]
 8005fb2:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
 8005fb6:	22bb      	movs	r2, #187	; 0xbb
 8005fb8:	210a      	movs	r1, #10
 8005fba:	f7fd ffc6 	bl	8003f4a <_ZN8touchgfx8Drawable11setPositionEssss>

    Button_Panel_Background.setPosition(0, 0, 460, 77);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
 8005fc4:	234d      	movs	r3, #77	; 0x4d
 8005fc6:	9300      	str	r3, [sp, #0]
 8005fc8:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
 8005fcc:	2200      	movs	r2, #0
 8005fce:	2100      	movs	r1, #0
 8005fd0:	f7fd ffbb 	bl	8003f4a <_ZN8touchgfx8Drawable11setPositionEssss>
    Button_Panel_Background.setColor(touchgfx::Color::getColorFromRGB(78, 137, 174));
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f103 04c4 	add.w	r4, r3, #196	; 0xc4
 8005fda:	234e      	movs	r3, #78	; 0x4e
 8005fdc:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
 8005fe0:	2389      	movs	r3, #137	; 0x89
 8005fe2:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
 8005fe6:	23ae      	movs	r3, #174	; 0xae
 8005fe8:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8005fec:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8005ff0:	041b      	lsls	r3, r3, #16
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8005ff8:	021b      	lsls	r3, r3, #8
 8005ffa:	431a      	orrs	r2, r3
 8005ffc:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8006000:	4313      	orrs	r3, r2
 8006002:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006006:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800600a:	4611      	mov	r1, r2
 800600c:	4618      	mov	r0, r3
 800600e:	f7ff fbfd 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 8006012:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006014:	4619      	mov	r1, r3
 8006016:	4620      	mov	r0, r4
 8006018:	f7ff fcca 	bl	80059b0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Button_Panel_Background.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f103 04c4 	add.w	r4, r3, #196	; 0xc4
 8006022:	23ed      	movs	r3, #237	; 0xed
 8006024:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
 8006028:	2366      	movs	r3, #102	; 0x66
 800602a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800602e:	2363      	movs	r3, #99	; 0x63
 8006030:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8006034:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8006038:	041b      	lsls	r3, r3, #16
 800603a:	461a      	mov	r2, r3
 800603c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8006040:	021b      	lsls	r3, r3, #8
 8006042:	431a      	orrs	r2, r3
 8006044:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8006048:	4313      	orrs	r3, r2
 800604a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800604e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006052:	4611      	mov	r1, r2
 8006054:	4618      	mov	r0, r3
 8006056:	f7ff fbd9 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 800605a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800605c:	4619      	mov	r1, r3
 800605e:	4620      	mov	r0, r4
 8006060:	f7ff fd18 	bl	8005a94 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Button_Panel_Background.setBorderSize(5);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	33c4      	adds	r3, #196	; 0xc4
 8006068:	2105      	movs	r1, #5
 800606a:	4618      	mov	r0, r3
 800606c:	f7ff fd20 	bl	8005ab0 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Button_Panel.add(Button_Panel_Background);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	33c4      	adds	r3, #196	; 0xc4
 800607a:	4619      	mov	r1, r3
 800607c:	4610      	mov	r0, r2
 800607e:	f010 ff8f 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Anomaly_Detection_Panel.setPosition(5, 4, 450, 73);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f103 00f8 	add.w	r0, r3, #248	; 0xf8
 8006088:	2349      	movs	r3, #73	; 0x49
 800608a:	9300      	str	r3, [sp, #0]
 800608c:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 8006090:	2204      	movs	r2, #4
 8006092:	2105      	movs	r1, #5
 8006094:	f7fd ff59 	bl	8003f4a <_ZN8touchgfx8Drawable11setPositionEssss>

    Anomaly_Detection_Background.setPosition(0, 1, 450, 67);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f503 7092 	add.w	r0, r3, #292	; 0x124
 800609e:	2343      	movs	r3, #67	; 0x43
 80060a0:	9300      	str	r3, [sp, #0]
 80060a2:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 80060a6:	2201      	movs	r2, #1
 80060a8:	2100      	movs	r1, #0
 80060aa:	f7fd ff4e 	bl	8003f4a <_ZN8touchgfx8Drawable11setPositionEssss>
    Anomaly_Detection_Background.setColor(touchgfx::Color::getColorFromRGB(67, 101, 139));
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f503 7492 	add.w	r4, r3, #292	; 0x124
 80060b4:	2343      	movs	r3, #67	; 0x43
 80060b6:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 80060ba:	2365      	movs	r3, #101	; 0x65
 80060bc:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
 80060c0:	238b      	movs	r3, #139	; 0x8b
 80060c2:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
 80060c6:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80060ca:	041b      	lsls	r3, r3, #16
 80060cc:	461a      	mov	r2, r3
 80060ce:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 80060d2:	021b      	lsls	r3, r3, #8
 80060d4:	431a      	orrs	r2, r3
 80060d6:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 80060da:	4313      	orrs	r3, r2
 80060dc:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80060e0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80060e4:	4611      	mov	r1, r2
 80060e6:	4618      	mov	r0, r3
 80060e8:	f7ff fb90 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 80060ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060ee:	4619      	mov	r1, r3
 80060f0:	4620      	mov	r0, r4
 80060f2:	f7ff fc5d 	bl	80059b0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Anomaly_Detection_Background.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f503 7492 	add.w	r4, r3, #292	; 0x124
 80060fc:	2300      	movs	r3, #0
 80060fe:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 8006102:	2300      	movs	r3, #0
 8006104:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
 8006108:	2300      	movs	r3, #0
 800610a:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
 800610e:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8006112:	041b      	lsls	r3, r3, #16
 8006114:	461a      	mov	r2, r3
 8006116:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800611a:	021b      	lsls	r3, r3, #8
 800611c:	431a      	orrs	r2, r3
 800611e:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8006122:	4313      	orrs	r3, r2
 8006124:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006128:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800612c:	4611      	mov	r1, r2
 800612e:	4618      	mov	r0, r3
 8006130:	f7ff fb6c 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 8006134:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006136:	4619      	mov	r1, r3
 8006138:	4620      	mov	r0, r4
 800613a:	f7ff fcab 	bl	8005a94 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Anomaly_Detection_Background.setBorderSize(2);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006144:	2102      	movs	r1, #2
 8006146:	4618      	mov	r0, r3
 8006148:	f7ff fcb2 	bl	8005ab0 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Anomaly_Detection_Panel.add(Anomaly_Detection_Background);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f103 02f8 	add.w	r2, r3, #248	; 0xf8
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006158:	4619      	mov	r1, r3
 800615a:	4610      	mov	r0, r2
 800615c:	f010 ff20 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Button_Panel.add(Anomaly_Detection_Panel);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	33f8      	adds	r3, #248	; 0xf8
 800616a:	4619      	mov	r1, r3
 800616c:	4610      	mov	r0, r2
 800616e:	f010 ff17 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Alarm_Mute_Indicator_Textbox_1_1_1.setPosition(142, 47, 177, 20);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f503 70ac 	add.w	r0, r3, #344	; 0x158
 8006178:	2314      	movs	r3, #20
 800617a:	9300      	str	r3, [sp, #0]
 800617c:	23b1      	movs	r3, #177	; 0xb1
 800617e:	222f      	movs	r2, #47	; 0x2f
 8006180:	218e      	movs	r1, #142	; 0x8e
 8006182:	f7fd fee2 	bl	8003f4a <_ZN8touchgfx8Drawable11setPositionEssss>
 8006186:	e003      	b.n	8006190 <_ZN24Localize_AnomalyViewBaseC1Ev+0x39c>
 8006188:	0802c7b4 	.word	0x0802c7b4
 800618c:	080067b5 	.word	0x080067b5

    AnomalyDetection_Border_1_1_1_1.setPosition(0, 3, 177, 17);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f503 70c2 	add.w	r0, r3, #388	; 0x184
 8006196:	2311      	movs	r3, #17
 8006198:	9300      	str	r3, [sp, #0]
 800619a:	23b1      	movs	r3, #177	; 0xb1
 800619c:	2203      	movs	r2, #3
 800619e:	2100      	movs	r1, #0
 80061a0:	f7fd fed3 	bl	8003f4a <_ZN8touchgfx8Drawable11setPositionEssss>
    AnomalyDetection_Border_1_1_1_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f503 74c2 	add.w	r4, r3, #388	; 0x184
 80061aa:	2300      	movs	r3, #0
 80061ac:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
 80061b0:	2300      	movs	r3, #0
 80061b2:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
 80061b6:	2300      	movs	r3, #0
 80061b8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80061bc:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 80061c0:	041b      	lsls	r3, r3, #16
 80061c2:	461a      	mov	r2, r3
 80061c4:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 80061c8:	021b      	lsls	r3, r3, #8
 80061ca:	431a      	orrs	r2, r3
 80061cc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80061d0:	4313      	orrs	r3, r2
 80061d2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80061d6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80061da:	4611      	mov	r1, r2
 80061dc:	4618      	mov	r0, r3
 80061de:	f7ff fb15 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 80061e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061e4:	4619      	mov	r1, r3
 80061e6:	4620      	mov	r0, r4
 80061e8:	f7ff fbe2 	bl	80059b0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    AnomalyDetection_Border_1_1_1_1.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f503 74c2 	add.w	r4, r3, #388	; 0x184
 80061f2:	23ed      	movs	r3, #237	; 0xed
 80061f4:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
 80061f8:	2366      	movs	r3, #102	; 0x66
 80061fa:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 80061fe:	2363      	movs	r3, #99	; 0x63
 8006200:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
 8006204:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8006208:	041b      	lsls	r3, r3, #16
 800620a:	461a      	mov	r2, r3
 800620c:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8006210:	021b      	lsls	r3, r3, #8
 8006212:	431a      	orrs	r2, r3
 8006214:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 8006218:	4313      	orrs	r3, r2
 800621a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800621e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006222:	4611      	mov	r1, r2
 8006224:	4618      	mov	r0, r3
 8006226:	f7ff faf1 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 800622a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800622c:	4619      	mov	r1, r3
 800622e:	4620      	mov	r0, r4
 8006230:	f7ff fc30 	bl	8005a94 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    AnomalyDetection_Border_1_1_1_1.setBorderSize(3);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800623a:	2103      	movs	r1, #3
 800623c:	4618      	mov	r0, r3
 800623e:	f7ff fc37 	bl	8005ab0 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Alarm_Mute_Indicator_Textbox_1_1_1.add(AnomalyDetection_Border_1_1_1_1);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f503 72ac 	add.w	r2, r3, #344	; 0x158
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800624e:	4619      	mov	r1, r3
 8006250:	4610      	mov	r0, r2
 8006252:	f010 fea5 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    AnomalyDetection_Text.setXY(7, 5);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800625c:	2205      	movs	r2, #5
 800625e:	2107      	movs	r1, #7
 8006260:	4618      	mov	r0, r3
 8006262:	f7fd fecb 	bl	8003ffc <_ZN8touchgfx8Drawable5setXYEss>
    AnomalyDetection_Text.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f503 74dc 	add.w	r4, r3, #440	; 0x1b8
 800626c:	23ff      	movs	r3, #255	; 0xff
 800626e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8006272:	23ff      	movs	r3, #255	; 0xff
 8006274:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8006278:	23ff      	movs	r3, #255	; 0xff
 800627a:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 800627e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006282:	041b      	lsls	r3, r3, #16
 8006284:	461a      	mov	r2, r3
 8006286:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800628a:	021b      	lsls	r3, r3, #8
 800628c:	431a      	orrs	r2, r3
 800628e:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8006292:	4313      	orrs	r3, r2
 8006294:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006298:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800629c:	4611      	mov	r1, r2
 800629e:	4618      	mov	r0, r3
 80062a0:	f7ff fab4 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 80062a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062a6:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80062aa:	613b      	str	r3, [r7, #16]
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 80062ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062b0:	693a      	ldr	r2, [r7, #16]
 80062b2:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80062b4:	bf00      	nop
    AnomalyDetection_Text.setLinespacing(0);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80062bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80062c0:	2300      	movs	r3, #0
 80062c2:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 80062c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80062ca:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 80062ce:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80062d0:	bf00      	nop
    AnomalyDetection_Text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_6CIV));
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f503 74dc 	add.w	r4, r3, #440	; 0x1b8
 80062d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80062dc:	2107      	movs	r1, #7
 80062de:	4618      	mov	r0, r3
 80062e0:	f7ff fbf6 	bl	8005ad0 <_ZN8touchgfx9TypedTextC1Et>
 80062e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80062e8:	4619      	mov	r1, r3
 80062ea:	4620      	mov	r0, r4
 80062ec:	f012 fd83 	bl	8018df6 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80062f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80062f4:	4618      	mov	r0, r3
 80062f6:	f7fd fd75 	bl	8003de4 <_ZN8touchgfx9TypedTextD1Ev>
    Alarm_Mute_Indicator_Textbox_1_1_1.add(AnomalyDetection_Text);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f503 72ac 	add.w	r2, r3, #344	; 0x158
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006306:	4619      	mov	r1, r3
 8006308:	4610      	mov	r0, r2
 800630a:	f010 fe49 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Button_Panel.add(Alarm_Mute_Indicator_Textbox_1_1_1);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800631a:	4619      	mov	r1, r3
 800631c:	4610      	mov	r0, r2
 800631e:	f010 fe3f 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Localize_Button.setXY(188, 15);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006328:	220f      	movs	r2, #15
 800632a:	21bc      	movs	r1, #188	; 0xbc
 800632c:	4618      	mov	r0, r3
 800632e:	f7fd fe65 	bl	8003ffc <_ZN8touchgfx8Drawable5setXYEss>
    Localize_Button.setBitmaps(touchgfx::Bitmap(BITMAP_RECT_BUTTON_UNPRESSED_ID), touchgfx::Bitmap(BITMAP_RECT_BUTTON_PRESSED_ID));
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f503 74fa 	add.w	r4, r3, #500	; 0x1f4
 8006338:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800633c:	2103      	movs	r1, #3
 800633e:	4618      	mov	r0, r3
 8006340:	f7ff fa73 	bl	800582a <_ZN8touchgfx6BitmapC1Et>
 8006344:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006348:	2102      	movs	r1, #2
 800634a:	4618      	mov	r0, r3
 800634c:	f7ff fa6d 	bl	800582a <_ZN8touchgfx6BitmapC1Et>
 8006350:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8006354:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006358:	4619      	mov	r1, r3
 800635a:	4620      	mov	r0, r4
 800635c:	f012 fd82 	bl	8018e64 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    Localize_Button.setAction(buttonCallback);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f503 736c 	add.w	r3, r3, #944	; 0x3b0
 800636c:	4619      	mov	r1, r3
 800636e:	4610      	mov	r0, r2
 8006370:	f7ff fc24 	bl	8005bbc <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>
    Button_Panel.add(Localize_Button);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f103 0298 	add.w	r2, r3, #152	; 0x98
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006380:	4619      	mov	r1, r3
 8006382:	4610      	mov	r0, r2
 8006384:	f010 fe0c 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Message_panel.setPosition(10, 8, 460, 194);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f503 700a 	add.w	r0, r3, #552	; 0x228
 800638e:	23c2      	movs	r3, #194	; 0xc2
 8006390:	9300      	str	r3, [sp, #0]
 8006392:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
 8006396:	2208      	movs	r2, #8
 8006398:	210a      	movs	r1, #10
 800639a:	f7fd fdd6 	bl	8003f4a <_ZN8touchgfx8Drawable11setPositionEssss>

    Button_Panel_Background_1.setPosition(0, 0, 460, 183);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f503 7015 	add.w	r0, r3, #596	; 0x254
 80063a4:	23b7      	movs	r3, #183	; 0xb7
 80063a6:	9300      	str	r3, [sp, #0]
 80063a8:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
 80063ac:	2200      	movs	r2, #0
 80063ae:	2100      	movs	r1, #0
 80063b0:	f7fd fdcb 	bl	8003f4a <_ZN8touchgfx8Drawable11setPositionEssss>
    Button_Panel_Background_1.setColor(touchgfx::Color::getColorFromRGB(78, 137, 174));
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f503 7415 	add.w	r4, r3, #596	; 0x254
 80063ba:	234e      	movs	r3, #78	; 0x4e
 80063bc:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
 80063c0:	2389      	movs	r3, #137	; 0x89
 80063c2:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
 80063c6:	23ae      	movs	r3, #174	; 0xae
 80063c8:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80063cc:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 80063d0:	041b      	lsls	r3, r3, #16
 80063d2:	461a      	mov	r2, r3
 80063d4:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 80063d8:	021b      	lsls	r3, r3, #8
 80063da:	431a      	orrs	r2, r3
 80063dc:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80063e0:	4313      	orrs	r3, r2
 80063e2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80063e6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80063ea:	4611      	mov	r1, r2
 80063ec:	4618      	mov	r0, r3
 80063ee:	f7ff fa0d 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 80063f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063f4:	4619      	mov	r1, r3
 80063f6:	4620      	mov	r0, r4
 80063f8:	f7ff fada 	bl	80059b0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Button_Panel_Background_1.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f503 7415 	add.w	r4, r3, #596	; 0x254
 8006402:	23ed      	movs	r3, #237	; 0xed
 8006404:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
 8006408:	2366      	movs	r3, #102	; 0x66
 800640a:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
 800640e:	2363      	movs	r3, #99	; 0x63
 8006410:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
 8006414:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8006418:	041b      	lsls	r3, r3, #16
 800641a:	461a      	mov	r2, r3
 800641c:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8006420:	021b      	lsls	r3, r3, #8
 8006422:	431a      	orrs	r2, r3
 8006424:	f897 30aa 	ldrb.w	r3, [r7, #170]	; 0xaa
 8006428:	4313      	orrs	r3, r2
 800642a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800642e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006432:	4611      	mov	r1, r2
 8006434:	4618      	mov	r0, r3
 8006436:	f7ff f9e9 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 800643a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800643c:	4619      	mov	r1, r3
 800643e:	4620      	mov	r0, r4
 8006440:	f7ff fb28 	bl	8005a94 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Button_Panel_Background_1.setBorderSize(5);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800644a:	2105      	movs	r1, #5
 800644c:	4618      	mov	r0, r3
 800644e:	f7ff fb2f 	bl	8005ab0 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Message_panel.add(Button_Panel_Background_1);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f503 720a 	add.w	r2, r3, #552	; 0x228
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800645e:	4619      	mov	r1, r3
 8006460:	4610      	mov	r0, r2
 8006462:	f010 fd9d 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Message_Board_Panel_1.setPosition(5, 4, 450, 175);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f503 7022 	add.w	r0, r3, #648	; 0x288
 800646c:	23af      	movs	r3, #175	; 0xaf
 800646e:	9300      	str	r3, [sp, #0]
 8006470:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 8006474:	2204      	movs	r2, #4
 8006476:	2105      	movs	r1, #5
 8006478:	f7fd fd67 	bl	8003f4a <_ZN8touchgfx8Drawable11setPositionEssss>

    MessageBoard_Background_1.setPosition(0, 0, 450, 175);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f503 702d 	add.w	r0, r3, #692	; 0x2b4
 8006482:	23af      	movs	r3, #175	; 0xaf
 8006484:	9300      	str	r3, [sp, #0]
 8006486:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 800648a:	2200      	movs	r2, #0
 800648c:	2100      	movs	r1, #0
 800648e:	f7fd fd5c 	bl	8003f4a <_ZN8touchgfx8Drawable11setPositionEssss>
    MessageBoard_Background_1.setColor(touchgfx::Color::getColorFromRGB(67, 101, 139));
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f503 742d 	add.w	r4, r3, #692	; 0x2b4
 8006498:	2343      	movs	r3, #67	; 0x43
 800649a:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 800649e:	2365      	movs	r3, #101	; 0x65
 80064a0:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 80064a4:	238b      	movs	r3, #139	; 0x8b
 80064a6:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
 80064aa:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80064ae:	041b      	lsls	r3, r3, #16
 80064b0:	461a      	mov	r2, r3
 80064b2:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 80064b6:	021b      	lsls	r3, r3, #8
 80064b8:	431a      	orrs	r2, r3
 80064ba:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 80064be:	4313      	orrs	r3, r2
 80064c0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80064c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80064c8:	4611      	mov	r1, r2
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7ff f99e 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 80064d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064d2:	4619      	mov	r1, r3
 80064d4:	4620      	mov	r0, r4
 80064d6:	f7ff fa6b 	bl	80059b0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    MessageBoard_Background_1.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f503 742d 	add.w	r4, r3, #692	; 0x2b4
 80064e0:	2300      	movs	r3, #0
 80064e2:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
 80064e6:	2300      	movs	r3, #0
 80064e8:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 80064ec:	2300      	movs	r3, #0
 80064ee:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
 80064f2:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 80064f6:	041b      	lsls	r3, r3, #16
 80064f8:	461a      	mov	r2, r3
 80064fa:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 80064fe:	021b      	lsls	r3, r3, #8
 8006500:	431a      	orrs	r2, r3
 8006502:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 8006506:	4313      	orrs	r3, r2
 8006508:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800650c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006510:	4611      	mov	r1, r2
 8006512:	4618      	mov	r0, r3
 8006514:	f7ff f97a 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 8006518:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800651a:	4619      	mov	r1, r3
 800651c:	4620      	mov	r0, r4
 800651e:	f7ff fab9 	bl	8005a94 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    MessageBoard_Background_1.setBorderSize(2);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8006528:	2102      	movs	r1, #2
 800652a:	4618      	mov	r0, r3
 800652c:	f7ff fac0 	bl	8005ab0 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Message_Board_Panel_1.add(MessageBoard_Background_1);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f503 7222 	add.w	r2, r3, #648	; 0x288
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800653c:	4619      	mov	r1, r3
 800653e:	4610      	mov	r0, r2
 8006540:	f010 fd2e 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Directional_Vector.setXY(95, 9);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 800654a:	2209      	movs	r2, #9
 800654c:	215f      	movs	r1, #95	; 0x5f
 800654e:	4618      	mov	r0, r3
 8006550:	f7fd fd54 	bl	8003ffc <_ZN8touchgfx8Drawable5setXYEss>
    Directional_Vector.setBitmap(touchgfx::Bitmap(BITMAP_VECTOR_IMAGE_ID));
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f503 743a 	add.w	r4, r3, #744	; 0x2e8
 800655a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800655e:	210c      	movs	r1, #12
 8006560:	4618      	mov	r0, r3
 8006562:	f7ff f962 	bl	800582a <_ZN8touchgfx6BitmapC1Et>
 8006566:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800656a:	4619      	mov	r1, r3
 800656c:	4620      	mov	r0, r4
 800656e:	f012 febc 	bl	80192ea <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    Message_Board_Panel_1.add(Directional_Vector);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f503 7222 	add.w	r2, r3, #648	; 0x288
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 800657e:	4619      	mov	r1, r3
 8006580:	4610      	mov	r0, r2
 8006582:	f010 fd0d 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Message_Board_Textbox_1.setPosition(167, 0, 117, 20);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f503 7045 	add.w	r0, r3, #788	; 0x314
 800658c:	2314      	movs	r3, #20
 800658e:	9300      	str	r3, [sp, #0]
 8006590:	2375      	movs	r3, #117	; 0x75
 8006592:	2200      	movs	r2, #0
 8006594:	21a7      	movs	r1, #167	; 0xa7
 8006596:	f7fd fcd8 	bl	8003f4a <_ZN8touchgfx8Drawable11setPositionEssss>

    MessageBoard_Border_1_1.setPosition(0, 3, 117, 17);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f503 7050 	add.w	r0, r3, #832	; 0x340
 80065a0:	2311      	movs	r3, #17
 80065a2:	9300      	str	r3, [sp, #0]
 80065a4:	2375      	movs	r3, #117	; 0x75
 80065a6:	2203      	movs	r2, #3
 80065a8:	2100      	movs	r1, #0
 80065aa:	f7fd fcce 	bl	8003f4a <_ZN8touchgfx8Drawable11setPositionEssss>
    MessageBoard_Border_1_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f503 7450 	add.w	r4, r3, #832	; 0x340
 80065b4:	2300      	movs	r3, #0
 80065b6:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
 80065ba:	2300      	movs	r3, #0
 80065bc:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 80065c0:	2300      	movs	r3, #0
 80065c2:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 80065c6:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 80065ca:	041b      	lsls	r3, r3, #16
 80065cc:	461a      	mov	r2, r3
 80065ce:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 80065d2:	021b      	lsls	r3, r3, #8
 80065d4:	431a      	orrs	r2, r3
 80065d6:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 80065da:	4313      	orrs	r3, r2
 80065dc:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80065e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80065e4:	4611      	mov	r1, r2
 80065e6:	4618      	mov	r0, r3
 80065e8:	f7ff f910 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 80065ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065ee:	4619      	mov	r1, r3
 80065f0:	4620      	mov	r0, r4
 80065f2:	f7ff f9dd 	bl	80059b0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    MessageBoard_Border_1_1.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f503 7450 	add.w	r4, r3, #832	; 0x340
 80065fc:	23ed      	movs	r3, #237	; 0xed
 80065fe:	f887 30b8 	strb.w	r3, [r7, #184]	; 0xb8
 8006602:	2366      	movs	r3, #102	; 0x66
 8006604:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 8006608:	2363      	movs	r3, #99	; 0x63
 800660a:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
 800660e:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 8006612:	041b      	lsls	r3, r3, #16
 8006614:	461a      	mov	r2, r3
 8006616:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800661a:	021b      	lsls	r3, r3, #8
 800661c:	431a      	orrs	r2, r3
 800661e:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8006622:	4313      	orrs	r3, r2
 8006624:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006628:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800662c:	4611      	mov	r1, r2
 800662e:	4618      	mov	r0, r3
 8006630:	f7ff f8ec 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 8006634:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006636:	4619      	mov	r1, r3
 8006638:	4620      	mov	r0, r4
 800663a:	f7ff fa2b 	bl	8005a94 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    MessageBoard_Border_1_1.setBorderSize(3);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8006644:	2103      	movs	r1, #3
 8006646:	4618      	mov	r0, r3
 8006648:	f7ff fa32 	bl	8005ab0 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Message_Board_Textbox_1.add(MessageBoard_Border_1_1);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f503 7245 	add.w	r2, r3, #788	; 0x314
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8006658:	4619      	mov	r1, r3
 800665a:	4610      	mov	r0, r2
 800665c:	f010 fca0 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    MessageBoard_Text_1.setXY(4, 5);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f503 735d 	add.w	r3, r3, #884	; 0x374
 8006666:	2205      	movs	r2, #5
 8006668:	2104      	movs	r1, #4
 800666a:	4618      	mov	r0, r3
 800666c:	f7fd fcc6 	bl	8003ffc <_ZN8touchgfx8Drawable5setXYEss>
    MessageBoard_Text_1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f503 745d 	add.w	r4, r3, #884	; 0x374
 8006676:	23ff      	movs	r3, #255	; 0xff
 8006678:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
 800667c:	23ff      	movs	r3, #255	; 0xff
 800667e:	f887 30ba 	strb.w	r3, [r7, #186]	; 0xba
 8006682:	23ff      	movs	r3, #255	; 0xff
 8006684:	f887 30b9 	strb.w	r3, [r7, #185]	; 0xb9
 8006688:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 800668c:	041b      	lsls	r3, r3, #16
 800668e:	461a      	mov	r2, r3
 8006690:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 8006694:	021b      	lsls	r3, r3, #8
 8006696:	431a      	orrs	r2, r3
 8006698:	f897 30b9 	ldrb.w	r3, [r7, #185]	; 0xb9
 800669c:	4313      	orrs	r3, r2
 800669e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80066a2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80066a6:	4611      	mov	r1, r2
 80066a8:	4618      	mov	r0, r3
 80066aa:	f7ff f8af 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 80066ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066b0:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
 80066b4:	60fb      	str	r3, [r7, #12]
        this->color = color;
 80066b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80066be:	bf00      	nop
    MessageBoard_Text_1.setLinespacing(0);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f503 735d 	add.w	r3, r3, #884	; 0x374
 80066c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80066ca:	2300      	movs	r3, #0
 80066cc:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
        linespace = space;
 80066d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80066d4:	f8b7 20c2 	ldrh.w	r2, [r7, #194]	; 0xc2
 80066d8:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80066da:	bf00      	nop
    MessageBoard_Text_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_HV8G));
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f503 745d 	add.w	r4, r3, #884	; 0x374
 80066e2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80066e6:	2108      	movs	r1, #8
 80066e8:	4618      	mov	r0, r3
 80066ea:	f7ff f9f1 	bl	8005ad0 <_ZN8touchgfx9TypedTextC1Et>
 80066ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80066f2:	4619      	mov	r1, r3
 80066f4:	4620      	mov	r0, r4
 80066f6:	f012 fb7e 	bl	8018df6 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80066fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80066fe:	4618      	mov	r0, r3
 8006700:	f7fd fb70 	bl	8003de4 <_ZN8touchgfx9TypedTextD1Ev>
    Message_Board_Textbox_1.add(MessageBoard_Text_1);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f503 7245 	add.w	r2, r3, #788	; 0x314
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f503 735d 	add.w	r3, r3, #884	; 0x374
 8006710:	4619      	mov	r1, r3
 8006712:	4610      	mov	r0, r2
 8006714:	f010 fc44 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Message_Board_Panel_1.add(Message_Board_Textbox_1);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f503 7222 	add.w	r2, r3, #648	; 0x288
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8006724:	4619      	mov	r1, r3
 8006726:	4610      	mov	r0, r2
 8006728:	f010 fc3a 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Message_panel.add(Message_Board_Panel_1);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f503 720a 	add.w	r2, r3, #552	; 0x228
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8006738:	4619      	mov	r1, r3
 800673a:	4610      	mov	r0, r2
 800673c:	f010 fc30 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    add(__background);
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	3340      	adds	r3, #64	; 0x40
 8006746:	4619      	mov	r1, r3
 8006748:	4610      	mov	r0, r2
 800674a:	f7ff f8fd 	bl	8005948 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Main_Background);
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	336c      	adds	r3, #108	; 0x6c
 8006754:	4619      	mov	r1, r3
 8006756:	4610      	mov	r0, r2
 8006758:	f7ff f8f6 	bl	8005948 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Button_Panel);
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	3398      	adds	r3, #152	; 0x98
 8006762:	4619      	mov	r1, r3
 8006764:	4610      	mov	r0, r2
 8006766:	f7ff f8ef 	bl	8005948 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Message_panel);
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8006772:	4619      	mov	r1, r3
 8006774:	4610      	mov	r0, r2
 8006776:	f7ff f8e7 	bl	8005948 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4618      	mov	r0, r3
 800677e:	37cc      	adds	r7, #204	; 0xcc
 8006780:	46bd      	mov	sp, r7
 8006782:	bd90      	pop	{r4, r7, pc}

08006784 <_ZN24Localize_AnomalyViewBase11setupScreenEv>:

void Localize_AnomalyViewBase::setupScreen()
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]

}
 800678c:	bf00      	nop
 800678e:	370c      	adds	r7, #12
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <_ZN24Localize_AnomalyViewBase15afterTransitionEv>:

//Called when the screen transition ends
void Localize_AnomalyViewBase::afterTransition()
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
    //Interaction1
    //When screen transition ends call virtual function
    //Call function1
    function1();
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	332c      	adds	r3, #44	; 0x2c
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	4798      	blx	r3
}
 80067ac:	bf00      	nop
 80067ae:	3708      	adds	r7, #8
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <_ZN24Localize_AnomalyViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Localize_AnomalyViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
    if (&src == &Localize_Button)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80067c4:	683a      	ldr	r2, [r7, #0]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d106      	bne.n	80067d8 <_ZN24Localize_AnomalyViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x24>
    {
        //Switch_Main_Screen
        //When Localize_Button clicked change screen to Main
        //Go to Main with screen transition towards South
        application().gotoMainScreenWipeTransitionSouth();
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f7ff fb07 	bl	8005dde <_ZN24Localize_AnomalyViewBase11applicationEv>
 80067d0:	4603      	mov	r3, r0
 80067d2:	4618      	mov	r0, r3
 80067d4:	f7fd fed8 	bl	8004588 <_ZN23FrontendApplicationBase33gotoMainScreenWipeTransitionSouthEv>
    }
}
 80067d8:	bf00      	nop
 80067da:	3708      	adds	r7, #8
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterEC1Ev>:
    View()
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
        : presenter(0)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4618      	mov	r0, r3
 80067ec:	f015 fd74 	bl	801c2d8 <_ZN8touchgfx6ScreenC1Ev>
 80067f0:	4a05      	ldr	r2, [pc, #20]	; (8006808 <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterEC1Ev+0x28>)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	601a      	str	r2, [r3, #0]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4618      	mov	r0, r3
 8006800:	3708      	adds	r7, #8
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	0802c804 	.word	0x0802c804

0800680c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	4a04      	ldr	r2, [pc, #16]	; (8006828 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	601a      	str	r2, [r3, #0]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4618      	mov	r0, r3
 800681e:	370c      	adds	r7, #12
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr
 8006828:	0802c838 	.word	0x0802c838

0800682c <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	4639      	mov	r1, r7
 8006838:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_1(pmemfun_1)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	4618      	mov	r0, r3
 8006840:	f7ff ffe4 	bl	800680c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8006844:	4a08      	ldr	r2, [pc, #32]	; (8006868 <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	601a      	str	r2, [r3, #0]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	68ba      	ldr	r2, [r7, #8]
 800684e:	605a      	str	r2, [r3, #4]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	3308      	adds	r3, #8
 8006854:	463a      	mov	r2, r7
 8006856:	e892 0003 	ldmia.w	r2, {r0, r1}
 800685a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	4618      	mov	r0, r3
 8006862:	3710      	adds	r7, #16
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}
 8006868:	0802c7ec 	.word	0x0802c7ec

0800686c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
    }
 8006874:	4a04      	ldr	r2, [pc, #16]	; (8006888 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	601a      	str	r2, [r3, #0]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4618      	mov	r0, r3
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr
 8006888:	0802c838 	.word	0x0802c838

0800688c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 800688c:	b580      	push	{r7, lr}
 800688e:	b082      	sub	sp, #8
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
    }
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f7ff ffe9 	bl	800686c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800689a:	2104      	movs	r1, #4
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f023 fb72 	bl	8029f86 <_ZdlPvj>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4618      	mov	r0, r3
 80068a6:	3708      	adds	r7, #8
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	4a05      	ldr	r2, [pc, #20]	; (80068cc <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	601a      	str	r2, [r3, #0]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4618      	mov	r0, r3
 80068be:	f7ff ffd5 	bl	800686c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4618      	mov	r0, r3
 80068c6:	3708      	adds	r7, #8
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	0802c7ec 	.word	0x0802c7ec

080068d0 <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f7ff ffe7 	bl	80068ac <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvED1Ev>
 80068de:	2110      	movs	r1, #16
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f023 fb50 	bl	8029f86 <_ZdlPvj>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4618      	mov	r0, r3
 80068ea:	3708      	adds	r7, #8
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <_ZN8touchgfx9ContainerD1Ev>:
class Container : public Drawable
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b082      	sub	sp, #8
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	4a05      	ldr	r2, [pc, #20]	; (8006910 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	601a      	str	r2, [r3, #0]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4618      	mov	r0, r3
 8006902:	f7fd faeb 	bl	8003edc <_ZN8touchgfx8DrawableD1Ev>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4618      	mov	r0, r3
 800690a:	3708      	adds	r7, #8
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}
 8006910:	0802d050 	.word	0x0802d050

08006914 <_ZN8touchgfx9ContainerD0Ev>:
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f7ff ffe7 	bl	80068f0 <_ZN8touchgfx9ContainerD1Ev>
 8006922:	212c      	movs	r1, #44	; 0x2c
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f023 fb2e 	bl	8029f86 <_ZdlPvj>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4618      	mov	r0, r3
 800692e:	3708      	adds	r7, #8
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	4a05      	ldr	r2, [pc, #20]	; (8006954 <_ZN8touchgfx5ImageD1Ev+0x20>)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	601a      	str	r2, [r3, #0]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4618      	mov	r0, r3
 8006946:	f7fd fd5b 	bl	8004400 <_ZN8touchgfx6WidgetD1Ev>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4618      	mov	r0, r3
 800694e:	3708      	adds	r7, #8
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}
 8006954:	0802e33c 	.word	0x0802e33c

08006958 <_ZN8touchgfx5ImageD0Ev>:
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f7ff ffe7 	bl	8006934 <_ZN8touchgfx5ImageD1Ev>
 8006966:	212c      	movs	r1, #44	; 0x2c
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f023 fb0c 	bl	8029f86 <_ZdlPvj>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4618      	mov	r0, r3
 8006972:	3708      	adds	r7, #8
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <_ZN8touchgfx13BoxWithBorderD1Ev>:
class BoxWithBorder : public Box
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	4a05      	ldr	r2, [pc, #20]	; (8006998 <_ZN8touchgfx13BoxWithBorderD1Ev+0x20>)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	601a      	str	r2, [r3, #0]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4618      	mov	r0, r3
 800698a:	f7ff f845 	bl	8005a18 <_ZN8touchgfx3BoxD1Ev>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4618      	mov	r0, r3
 8006992:	3708      	adds	r7, #8
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	0802e2d8 	.word	0x0802e2d8

0800699c <_ZN8touchgfx13BoxWithBorderD0Ev>:
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f7ff ffe7 	bl	8006978 <_ZN8touchgfx13BoxWithBorderD1Ev>
 80069aa:	2134      	movs	r1, #52	; 0x34
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f023 faea 	bl	8029f86 <_ZdlPvj>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4618      	mov	r0, r3
 80069b6:	3708      	adds	r7, #8
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	4a08      	ldr	r2, [pc, #32]	; (80069e8 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	601a      	str	r2, [r3, #0]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	3328      	adds	r3, #40	; 0x28
 80069ce:	4618      	mov	r0, r3
 80069d0:	f7fd fa08 	bl	8003de4 <_ZN8touchgfx9TypedTextD1Ev>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4618      	mov	r0, r3
 80069d8:	f7fd fd12 	bl	8004400 <_ZN8touchgfx6WidgetD1Ev>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4618      	mov	r0, r3
 80069e0:	3708      	adds	r7, #8
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop
 80069e8:	0802e01c 	.word	0x0802e01c

080069ec <_ZN8touchgfx8TextAreaD0Ev>:
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b082      	sub	sp, #8
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f7ff ffe1 	bl	80069bc <_ZN8touchgfx8TextAreaD1Ev>
 80069fa:	213c      	movs	r1, #60	; 0x3c
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f023 fac2 	bl	8029f86 <_ZdlPvj>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4618      	mov	r0, r3
 8006a06:	3708      	adds	r7, #8
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <_ZN8touchgfx6ButtonD1Ev>:
class Button : public AbstractButton
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b082      	sub	sp, #8
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	4a05      	ldr	r2, [pc, #20]	; (8006a2c <_ZN8touchgfx6ButtonD1Ev+0x20>)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	601a      	str	r2, [r3, #0]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f7ff f8db 	bl	8005bd8 <_ZN8touchgfx14AbstractButtonD1Ev>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4618      	mov	r0, r3
 8006a26:	3708      	adds	r7, #8
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	0802e18c 	.word	0x0802e18c

08006a30 <_ZN8touchgfx6ButtonD0Ev>:
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b082      	sub	sp, #8
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f7ff ffe7 	bl	8006a0c <_ZN8touchgfx6ButtonD1Ev>
 8006a3e:	2134      	movs	r1, #52	; 0x34
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f023 faa0 	bl	8029f86 <_ZdlPvj>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3708      	adds	r7, #8
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b082      	sub	sp, #8
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	68d2      	ldr	r2, [r2, #12]
 8006a62:	1052      	asrs	r2, r2, #1
 8006a64:	1898      	adds	r0, r3, r2
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	f003 0301 	and.w	r3, r3, #1
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d102      	bne.n	8006a78 <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	e00a      	b.n	8006a8e <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	68d2      	ldr	r2, [r2, #12]
 8006a80:	1052      	asrs	r2, r2, #1
 8006a82:	4413      	add	r3, r2
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	6892      	ldr	r2, [r2, #8]
 8006a8a:	4413      	add	r3, r2
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	6839      	ldr	r1, [r7, #0]
 8006a90:	4798      	blx	r3
    }
 8006a92:	bf00      	nop
 8006a94:	3708      	adds	r7, #8
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}

08006a9a <_ZNK8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8006a9a:	b480      	push	{r7}
 8006a9c:	b083      	sub	sp, #12
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d010      	beq.n	8006acc <_ZNK8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d107      	bne.n	8006ac2 <_ZNK8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	f003 0301 	and.w	r3, r3, #1
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d101      	bne.n	8006ac2 <_ZNK8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e000      	b.n	8006ac4 <_ZNK8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d001      	beq.n	8006acc <_ZNK8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e000      	b.n	8006ace <_ZNK8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8006acc:	2300      	movs	r3, #0
    }
 8006ace:	4618      	mov	r0, r3
 8006ad0:	370c      	adds	r7, #12
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr

08006ada <_ZN8touchgfx8Drawable10setVisibleEb>:
    void setVisible(bool vis)
 8006ada:	b480      	push	{r7}
 8006adc:	b083      	sub	sp, #12
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	70fb      	strb	r3, [r7, #3]
        visible = vis;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	78fa      	ldrb	r2, [r7, #3]
 8006aea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 8006aee:	bf00      	nop
 8006af0:	370c      	adds	r7, #12
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr

08006afa <_ZN8touchgfx6Slider19setNewValueCallbackERNS_15GenericCallbackIRKS0_ivEE>:
     * @param  callback The callback to be executed. The callback will be given a reference
     *                  to the Slider and the current value of the slider.
     *
     * @see GenericCallback
     */
    void setNewValueCallback(GenericCallback<const Slider&, int>& callback)
 8006afa:	b480      	push	{r7}
 8006afc:	b083      	sub	sp, #12
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
 8006b02:	6039      	str	r1, [r7, #0]
    {
        newValueCallback = &callback;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	683a      	ldr	r2, [r7, #0]
 8006b08:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    }
 8006b0c:	bf00      	nop
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>:
 * when it is subsequently pressed, it will pop back out.
 */
class ToggleButton : public Button
{
public:
    virtual void setBitmaps(const Bitmap& bitmapReleased, const Bitmap& bitmapPressed)
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	607a      	str	r2, [r7, #4]
    {
        originalPressed = bitmapPressed;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	8812      	ldrh	r2, [r2, #0]
 8006b2a:	869a      	strh	r2, [r3, #52]	; 0x34
        Button::setBitmaps(bitmapReleased, bitmapPressed);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	68b9      	ldr	r1, [r7, #8]
 8006b32:	4618      	mov	r0, r3
 8006b34:	f012 f996 	bl	8018e64 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    }
 8006b38:	bf00      	nop
 8006b3a:	3710      	adds	r7, #16
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>:
class View : public Screen
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b082      	sub	sp, #8
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	4a05      	ldr	r2, [pc, #20]	; (8006b60 <_ZN8touchgfx4ViewI13MainPresenterED1Ev+0x20>)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	601a      	str	r2, [r3, #0]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4618      	mov	r0, r3
 8006b52:	f7fe fea1 	bl	8005898 <_ZN8touchgfx6ScreenD1Ev>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3708      	adds	r7, #8
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	0802c8c8 	.word	0x0802c8c8

08006b64 <_ZN8touchgfx4ViewI13MainPresenterED0Ev>:
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b082      	sub	sp, #8
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f7ff ffe7 	bl	8006b40 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 8006b72:	2140      	movs	r1, #64	; 0x40
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f023 fa06 	bl	8029f86 <_ZdlPvj>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3708      	adds	r7, #8
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <_ZN12MainViewBaseD1Ev>:

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase() {}
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	4a93      	ldr	r2, [pc, #588]	; (8006ddc <_ZN12MainViewBaseD1Ev+0x258>)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	601a      	str	r2, [r3, #0]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f603 3308 	addw	r3, r3, #2824	; 0xb08
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f002 f9b5 	bl	8008f08 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivED1Ev>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f002 f9d1 	bl	8008f4c <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f603 23bc 	addw	r3, r3, #2748	; 0xabc
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f7ff ff03 	bl	80069bc <_ZN8touchgfx8TextAreaD1Ev>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f603 2388 	addw	r3, r3, #2696	; 0xa88
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f7ff fedb 	bl	8006978 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f603 235c 	addw	r3, r3, #2652	; 0xa5c
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f7ff fe91 	bl	80068f0 <_ZN8touchgfx9ContainerD1Ev>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f7ff ff19 	bl	8006a0c <_ZN8touchgfx6ButtonD1Ev>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f603 13f4 	addw	r3, r3, #2548	; 0x9f4
 8006be0:	4618      	mov	r0, r3
 8006be2:	f7ff ff13 	bl	8006a0c <_ZN8touchgfx6ButtonD1Ev>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f603 13c8 	addw	r3, r3, #2504	; 0x9c8
 8006bec:	4618      	mov	r0, r3
 8006bee:	f7ff fea1 	bl	8006934 <_ZN8touchgfx5ImageD1Ev>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f603 139c 	addw	r3, r3, #2460	; 0x99c
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f7ff fe9b 	bl	8006934 <_ZN8touchgfx5ImageD1Ev>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 8006c04:	4618      	mov	r0, r3
 8006c06:	f7ff fed9 	bl	80069bc <_ZN8touchgfx8TextAreaD1Ev>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f603 132c 	addw	r3, r3, #2348	; 0x92c
 8006c10:	4618      	mov	r0, r3
 8006c12:	f7ff feb1 	bl	8006978 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f7ff fe67 	bl	80068f0 <_ZN8touchgfx9ContainerD1Ev>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f603 03c4 	addw	r3, r3, #2244	; 0x8c4
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f7ff fec7 	bl	80069bc <_ZN8touchgfx8TextAreaD1Ev>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f603 0388 	addw	r3, r3, #2184	; 0x888
 8006c34:	4618      	mov	r0, r3
 8006c36:	f7ff fec1 	bl	80069bc <_ZN8touchgfx8TextAreaD1Ev>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f603 0354 	addw	r3, r3, #2132	; 0x854
 8006c40:	4618      	mov	r0, r3
 8006c42:	f7ff fe99 	bl	8006978 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f7ff fe93 	bl	8006978 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f203 73f4 	addw	r3, r3, #2036	; 0x7f4
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f7ff fe49 	bl	80068f0 <_ZN8touchgfx9ContainerD1Ev>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 8006c64:	4618      	mov	r0, r3
 8006c66:	f7ff fea9 	bl	80069bc <_ZN8touchgfx8TextAreaD1Ev>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8006c70:	4618      	mov	r0, r3
 8006c72:	f7ff fea3 	bl	80069bc <_ZN8touchgfx8TextAreaD1Ev>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f7ff fe7b 	bl	8006978 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f203 7314 	addw	r3, r3, #1812	; 0x714
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f7ff fe75 	bl	8006978 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f503 63dd 	add.w	r3, r3, #1768	; 0x6e8
 8006c94:	4618      	mov	r0, r3
 8006c96:	f7ff fe2b 	bl	80068f0 <_ZN8touchgfx9ContainerD1Ev>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f203 63ac 	addw	r3, r3, #1708	; 0x6ac
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f7ff fe8b 	bl	80069bc <_ZN8touchgfx8TextAreaD1Ev>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f503 63cf 	add.w	r3, r3, #1656	; 0x678
 8006cac:	4618      	mov	r0, r3
 8006cae:	f7ff fe63 	bl	8006978 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f7ff fe19 	bl	80068f0 <_ZN8touchgfx9ContainerD1Ev>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f503 63c3 	add.w	r3, r3, #1560	; 0x618
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f7ff fe57 	bl	8006978 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f203 53ec 	addw	r3, r3, #1516	; 0x5ec
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f7ff fe0d 	bl	80068f0 <_ZN8touchgfx9ContainerD1Ev>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f7ff fe4b 	bl	8006978 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f203 538c 	addw	r3, r3, #1420	; 0x58c
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f7ff fe01 	bl	80068f0 <_ZN8touchgfx9ContainerD1Ev>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f7ff fe3f 	bl	8006978 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f203 532c 	addw	r3, r3, #1324	; 0x52c
 8006d00:	4618      	mov	r0, r3
 8006d02:	f7ff fdf5 	bl	80068f0 <_ZN8touchgfx9ContainerD1Ev>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f203 43f4 	addw	r3, r3, #1268	; 0x4f4
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f002 f9ed 	bl	80090ec <_ZN8touchgfx12ToggleButtonD1Ev>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f002 f9b1 	bl	8009080 <_ZN8touchgfx6SliderD1Ev>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8006d24:	4618      	mov	r0, r3
 8006d26:	f7ff fe49 	bl	80069bc <_ZN8touchgfx8TextAreaD1Ev>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f503 7362 	add.w	r3, r3, #904	; 0x388
 8006d30:	4618      	mov	r0, r3
 8006d32:	f7ff fe21 	bl	8006978 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f503 7357 	add.w	r3, r3, #860	; 0x35c
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f7ff fdd7 	bl	80068f0 <_ZN8touchgfx9ContainerD1Ev>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f002 f96f 	bl	800902c <_ZN8touchgfx12TextProgressD1Ev>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8006d54:	4618      	mov	r0, r3
 8006d56:	f7ff fe0f 	bl	8006978 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006d60:	4618      	mov	r0, r3
 8006d62:	f7ff fdc5 	bl	80068f0 <_ZN8touchgfx9ContainerD1Ev>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f7ff fe25 	bl	80069bc <_ZN8touchgfx8TextAreaD1Ev>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f7ff fdfd 	bl	8006978 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006d84:	4618      	mov	r0, r3
 8006d86:	f7ff fdb3 	bl	80068f0 <_ZN8touchgfx9ContainerD1Ev>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006d90:	4618      	mov	r0, r3
 8006d92:	f7ff fdf1 	bl	8006978 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	33f8      	adds	r3, #248	; 0xf8
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f7ff fda8 	bl	80068f0 <_ZN8touchgfx9ContainerD1Ev>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	33c4      	adds	r3, #196	; 0xc4
 8006da4:	4618      	mov	r0, r3
 8006da6:	f7ff fde7 	bl	8006978 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	3398      	adds	r3, #152	; 0x98
 8006dae:	4618      	mov	r0, r3
 8006db0:	f7ff fd9e 	bl	80068f0 <_ZN8touchgfx9ContainerD1Ev>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	336c      	adds	r3, #108	; 0x6c
 8006db8:	4618      	mov	r0, r3
 8006dba:	f7ff fdbb 	bl	8006934 <_ZN8touchgfx5ImageD1Ev>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	3340      	adds	r3, #64	; 0x40
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f7fe fe28 	bl	8005a18 <_ZN8touchgfx3BoxD1Ev>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7ff feb8 	bl	8006b40 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3708      	adds	r7, #8
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	0802c850 	.word	0x0802c850

08006de0 <_ZN12MainViewBaseD0Ev>:
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f7ff fecb 	bl	8006b84 <_ZN12MainViewBaseD1Ev>
 8006dee:	f640 3118 	movw	r1, #2840	; 0xb18
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f023 f8c7 	bl	8029f86 <_ZdlPvj>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3708      	adds	r7, #8
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}

08006e02 <_ZN12MainViewBase17set_volume_sliderEi>:
    virtual void handleKeyEvent(uint8_t key);

    /*
     * Virtual Action Handlers
     */
    virtual void set_volume_slider(int value)
 8006e02:	b480      	push	{r7}
 8006e04:	b083      	sub	sp, #12
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
 8006e0a:	6039      	str	r1, [r7, #0]
    {
        // Override and implement this function in Main
    }
 8006e0c:	bf00      	nop
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <_ZN12MainViewBase20update_anomaly_alertEv>:

    virtual void update_anomaly_alert()
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Main
    }
 8006e20:	bf00      	nop
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <_ZN12MainViewBase12toggle_voiceEv>:

    virtual void toggle_voice()
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Main
    }
 8006e34:	bf00      	nop
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <_ZN12MainViewBase18alert_mute_pressedEv>:

    virtual void alert_mute_pressed()
 8006e40:	b480      	push	{r7}
 8006e42:	b083      	sub	sp, #12
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Main
    }
 8006e48:	bf00      	nop
 8006e4a:	370c      	adds	r7, #12
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <_ZN12MainViewBase18set_volume_encoderEv>:

    virtual void set_volume_encoder()
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Main
    }
 8006e5c:	bf00      	nop
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <_ZN12MainViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b082      	sub	sp, #8
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8006e70:	f013 ff4a 	bl	801ad08 <_ZN8touchgfx11Application11getInstanceEv>
 8006e74:	4603      	mov	r3, r0
    }
 8006e76:	4618      	mov	r0, r3
 8006e78:	3708      	adds	r7, #8
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
	...

08006e80 <_ZN8touchgfx12ToggleButtonC1Ev>:
class ToggleButton : public Button
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f7fe fec6 	bl	8005c1c <_ZN8touchgfx6ButtonC1Ev>
 8006e90:	4a07      	ldr	r2, [pc, #28]	; (8006eb0 <_ZN8touchgfx12ToggleButtonC1Ev+0x30>)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	601a      	str	r2, [r3, #0]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	3334      	adds	r3, #52	; 0x34
 8006e9a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7fe fcc3 	bl	800582a <_ZN8touchgfx6BitmapC1Et>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3708      	adds	r7, #8
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	0802deec 	.word	0x0802deec

08006eb4 <_ZN12MainViewBaseC1Ev>:
#include <gui_generated/main_screen/MainViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

MainViewBase::MainViewBase() :
 8006eb4:	b590      	push	{r4, r7, lr}
 8006eb6:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
 8006eba:	af02      	add	r7, sp, #8
 8006ebc:	1d3b      	adds	r3, r7, #4
 8006ebe:	6018      	str	r0, [r3, #0]
    buttonCallback(this, &MainViewBase::buttonCallbackHandler),
    sliderValueChangedCallback(this, &MainViewBase::sliderValueChangedCallbackHandler)
 8006ec0:	1d3b      	adds	r3, r7, #4
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f001 ff99 	bl	8008dfc <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>
 8006eca:	4ade      	ldr	r2, [pc, #888]	; (8007244 <_ZN12MainViewBaseC1Ev+0x390>)
 8006ecc:	1d3b      	adds	r3, r7, #4
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	601a      	str	r2, [r3, #0]
 8006ed2:	1d3b      	adds	r3, r7, #4
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	3340      	adds	r3, #64	; 0x40
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f7fe fd45 	bl	8005968 <_ZN8touchgfx3BoxC1Ev>
 8006ede:	1d3b      	adds	r3, r7, #4
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8006ee6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006eea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f7fe fc9b 	bl	800582a <_ZN8touchgfx6BitmapC1Et>
 8006ef4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006ef8:	4619      	mov	r1, r3
 8006efa:	4620      	mov	r0, r4
 8006efc:	f7fe fd66 	bl	80059cc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8006f00:	1d3b      	adds	r3, r7, #4
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	3398      	adds	r3, #152	; 0x98
 8006f06:	4618      	mov	r0, r3
 8006f08:	f7fe fcb0 	bl	800586c <_ZN8touchgfx9ContainerC1Ev>
 8006f0c:	1d3b      	adds	r3, r7, #4
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	33c4      	adds	r3, #196	; 0xc4
 8006f12:	4618      	mov	r0, r3
 8006f14:	f7fe fda2 	bl	8005a5c <_ZN8touchgfx13BoxWithBorderC1Ev>
 8006f18:	1d3b      	adds	r3, r7, #4
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	33f8      	adds	r3, #248	; 0xf8
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f7fe fca4 	bl	800586c <_ZN8touchgfx9ContainerC1Ev>
 8006f24:	1d3b      	adds	r3, r7, #4
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f7fe fd95 	bl	8005a5c <_ZN8touchgfx13BoxWithBorderC1Ev>
 8006f32:	1d3b      	adds	r3, r7, #4
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f7fe fc96 	bl	800586c <_ZN8touchgfx9ContainerC1Ev>
 8006f40:	1d3b      	adds	r3, r7, #4
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7fe fd87 	bl	8005a5c <_ZN8touchgfx13BoxWithBorderC1Ev>
 8006f4e:	1d3b      	adds	r3, r7, #4
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006f56:	4618      	mov	r0, r3
 8006f58:	f7fe fdd0 	bl	8005afc <_ZN8touchgfx8TextAreaC1Ev>
 8006f5c:	1d3b      	adds	r3, r7, #4
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006f64:	4618      	mov	r0, r3
 8006f66:	f7fe fc81 	bl	800586c <_ZN8touchgfx9ContainerC1Ev>
 8006f6a:	1d3b      	adds	r3, r7, #4
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7fe fd72 	bl	8005a5c <_ZN8touchgfx13BoxWithBorderC1Ev>
 8006f78:	1d3b      	adds	r3, r7, #4
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8006f80:	4618      	mov	r0, r3
 8006f82:	f00f fdab 	bl	8016adc <_ZN8touchgfx12TextProgressC1Ev>
 8006f86:	1d3b      	adds	r3, r7, #4
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f503 7357 	add.w	r3, r3, #860	; 0x35c
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f7fe fc6c 	bl	800586c <_ZN8touchgfx9ContainerC1Ev>
 8006f94:	1d3b      	adds	r3, r7, #4
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f503 7362 	add.w	r3, r3, #904	; 0x388
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f7fe fd5d 	bl	8005a5c <_ZN8touchgfx13BoxWithBorderC1Ev>
 8006fa2:	1d3b      	adds	r3, r7, #4
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8006faa:	4618      	mov	r0, r3
 8006fac:	f7fe fda6 	bl	8005afc <_ZN8touchgfx8TextAreaC1Ev>
 8006fb0:	1d3b      	adds	r3, r7, #4
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f010 fc71 	bl	80178a0 <_ZN8touchgfx6SliderC1Ev>
 8006fbe:	1d3b      	adds	r3, r7, #4
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f203 43f4 	addw	r3, r3, #1268	; 0x4f4
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f7ff ff5a 	bl	8006e80 <_ZN8touchgfx12ToggleButtonC1Ev>
 8006fcc:	1d3b      	adds	r3, r7, #4
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f203 532c 	addw	r3, r3, #1324	; 0x52c
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f7fe fc49 	bl	800586c <_ZN8touchgfx9ContainerC1Ev>
 8006fda:	1d3b      	adds	r3, r7, #4
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f7fe fd3a 	bl	8005a5c <_ZN8touchgfx13BoxWithBorderC1Ev>
 8006fe8:	1d3b      	adds	r3, r7, #4
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f203 538c 	addw	r3, r3, #1420	; 0x58c
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f7fe fc3b 	bl	800586c <_ZN8touchgfx9ContainerC1Ev>
 8006ff6:	1d3b      	adds	r3, r7, #4
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 8006ffe:	4618      	mov	r0, r3
 8007000:	f7fe fd2c 	bl	8005a5c <_ZN8touchgfx13BoxWithBorderC1Ev>
 8007004:	1d3b      	adds	r3, r7, #4
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f203 53ec 	addw	r3, r3, #1516	; 0x5ec
 800700c:	4618      	mov	r0, r3
 800700e:	f7fe fc2d 	bl	800586c <_ZN8touchgfx9ContainerC1Ev>
 8007012:	1d3b      	adds	r3, r7, #4
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f503 63c3 	add.w	r3, r3, #1560	; 0x618
 800701a:	4618      	mov	r0, r3
 800701c:	f7fe fd1e 	bl	8005a5c <_ZN8touchgfx13BoxWithBorderC1Ev>
 8007020:	1d3b      	adds	r3, r7, #4
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 8007028:	4618      	mov	r0, r3
 800702a:	f7fe fc1f 	bl	800586c <_ZN8touchgfx9ContainerC1Ev>
 800702e:	1d3b      	adds	r3, r7, #4
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f503 63cf 	add.w	r3, r3, #1656	; 0x678
 8007036:	4618      	mov	r0, r3
 8007038:	f7fe fd10 	bl	8005a5c <_ZN8touchgfx13BoxWithBorderC1Ev>
 800703c:	1d3b      	adds	r3, r7, #4
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f203 63ac 	addw	r3, r3, #1708	; 0x6ac
 8007044:	4618      	mov	r0, r3
 8007046:	f7fe fd59 	bl	8005afc <_ZN8touchgfx8TextAreaC1Ev>
 800704a:	1d3b      	adds	r3, r7, #4
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f503 63dd 	add.w	r3, r3, #1768	; 0x6e8
 8007052:	4618      	mov	r0, r3
 8007054:	f7fe fc0a 	bl	800586c <_ZN8touchgfx9ContainerC1Ev>
 8007058:	1d3b      	adds	r3, r7, #4
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f203 7314 	addw	r3, r3, #1812	; 0x714
 8007060:	4618      	mov	r0, r3
 8007062:	f7fe fcfb 	bl	8005a5c <_ZN8touchgfx13BoxWithBorderC1Ev>
 8007066:	1d3b      	adds	r3, r7, #4
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
 800706e:	4618      	mov	r0, r3
 8007070:	f7fe fcf4 	bl	8005a5c <_ZN8touchgfx13BoxWithBorderC1Ev>
 8007074:	1d3b      	adds	r3, r7, #4
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 800707c:	4618      	mov	r0, r3
 800707e:	f7fe fd3d 	bl	8005afc <_ZN8touchgfx8TextAreaC1Ev>
 8007082:	1d3b      	adds	r3, r7, #4
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 800708a:	4618      	mov	r0, r3
 800708c:	f7fe fd36 	bl	8005afc <_ZN8touchgfx8TextAreaC1Ev>
 8007090:	1d3b      	adds	r3, r7, #4
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f203 73f4 	addw	r3, r3, #2036	; 0x7f4
 8007098:	4618      	mov	r0, r3
 800709a:	f7fe fbe7 	bl	800586c <_ZN8touchgfx9ContainerC1Ev>
 800709e:	1d3b      	adds	r3, r7, #4
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 80070a6:	4618      	mov	r0, r3
 80070a8:	f7fe fcd8 	bl	8005a5c <_ZN8touchgfx13BoxWithBorderC1Ev>
 80070ac:	1d3b      	adds	r3, r7, #4
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f603 0354 	addw	r3, r3, #2132	; 0x854
 80070b4:	4618      	mov	r0, r3
 80070b6:	f7fe fcd1 	bl	8005a5c <_ZN8touchgfx13BoxWithBorderC1Ev>
 80070ba:	1d3b      	adds	r3, r7, #4
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f603 0388 	addw	r3, r3, #2184	; 0x888
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7fe fd1a 	bl	8005afc <_ZN8touchgfx8TextAreaC1Ev>
 80070c8:	1d3b      	adds	r3, r7, #4
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f603 03c4 	addw	r3, r3, #2244	; 0x8c4
 80070d0:	4618      	mov	r0, r3
 80070d2:	f7fe fd13 	bl	8005afc <_ZN8touchgfx8TextAreaC1Ev>
 80070d6:	1d3b      	adds	r3, r7, #4
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070de:	4618      	mov	r0, r3
 80070e0:	f7fe fbc4 	bl	800586c <_ZN8touchgfx9ContainerC1Ev>
 80070e4:	1d3b      	adds	r3, r7, #4
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f603 132c 	addw	r3, r3, #2348	; 0x92c
 80070ec:	4618      	mov	r0, r3
 80070ee:	f7fe fcb5 	bl	8005a5c <_ZN8touchgfx13BoxWithBorderC1Ev>
 80070f2:	1d3b      	adds	r3, r7, #4
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7fe fcfe 	bl	8005afc <_ZN8touchgfx8TextAreaC1Ev>
 8007100:	1d3b      	adds	r3, r7, #4
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f603 149c 	addw	r4, r3, #2460	; 0x99c
 8007108:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800710c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007110:	4618      	mov	r0, r3
 8007112:	f7fe fb8a 	bl	800582a <_ZN8touchgfx6BitmapC1Et>
 8007116:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800711a:	4619      	mov	r1, r3
 800711c:	4620      	mov	r0, r4
 800711e:	f7fe fc55 	bl	80059cc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8007122:	1d3b      	adds	r3, r7, #4
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f603 14c8 	addw	r4, r3, #2504	; 0x9c8
 800712a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800712e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007132:	4618      	mov	r0, r3
 8007134:	f7fe fb79 	bl	800582a <_ZN8touchgfx6BitmapC1Et>
 8007138:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800713c:	4619      	mov	r1, r3
 800713e:	4620      	mov	r0, r4
 8007140:	f7fe fc44 	bl	80059cc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8007144:	1d3b      	adds	r3, r7, #4
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f603 13f4 	addw	r3, r3, #2548	; 0x9f4
 800714c:	4618      	mov	r0, r3
 800714e:	f7fe fd65 	bl	8005c1c <_ZN8touchgfx6ButtonC1Ev>
 8007152:	1d3b      	adds	r3, r7, #4
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 800715a:	4618      	mov	r0, r3
 800715c:	f7fe fd5e 	bl	8005c1c <_ZN8touchgfx6ButtonC1Ev>
 8007160:	1d3b      	adds	r3, r7, #4
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f603 235c 	addw	r3, r3, #2652	; 0xa5c
 8007168:	4618      	mov	r0, r3
 800716a:	f7fe fb7f 	bl	800586c <_ZN8touchgfx9ContainerC1Ev>
 800716e:	1d3b      	adds	r3, r7, #4
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f603 2388 	addw	r3, r3, #2696	; 0xa88
 8007176:	4618      	mov	r0, r3
 8007178:	f7fe fc70 	bl	8005a5c <_ZN8touchgfx13BoxWithBorderC1Ev>
 800717c:	1d3b      	adds	r3, r7, #4
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f603 23bc 	addw	r3, r3, #2748	; 0xabc
 8007184:	4618      	mov	r0, r3
 8007186:	f7fe fcb9 	bl	8005afc <_ZN8touchgfx8TextAreaC1Ev>
 800718a:	1d3b      	adds	r3, r7, #4
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f603 20f8 	addw	r0, r3, #2808	; 0xaf8
 8007192:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007196:	4a2c      	ldr	r2, [pc, #176]	; (8007248 <_ZN12MainViewBaseC1Ev+0x394>)
 8007198:	601a      	str	r2, [r3, #0]
 800719a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800719e:	2200      	movs	r2, #0
 80071a0:	605a      	str	r2, [r3, #4]
 80071a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80071a6:	1d39      	adds	r1, r7, #4
 80071a8:	cb0c      	ldmia	r3, {r2, r3}
 80071aa:	6809      	ldr	r1, [r1, #0]
 80071ac:	f001 fe3c 	bl	8008e28 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
 80071b0:	1d3b      	adds	r3, r7, #4
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f603 3008 	addw	r0, r3, #2824	; 0xb08
 80071b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80071bc:	4a23      	ldr	r2, [pc, #140]	; (800724c <_ZN12MainViewBaseC1Ev+0x398>)
 80071be:	601a      	str	r2, [r3, #0]
 80071c0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80071c4:	2200      	movs	r2, #0
 80071c6:	605a      	str	r2, [r3, #4]
 80071c8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80071cc:	1d39      	adds	r1, r7, #4
 80071ce:	cb0c      	ldmia	r3, {r2, r3}
 80071d0:	6809      	ldr	r1, [r1, #0]
 80071d2:	f001 fe59 	bl	8008e88 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE>
{

    __background.setPosition(0, 0, 480, 272);
 80071d6:	1d3b      	adds	r3, r7, #4
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80071de:	f44f 7388 	mov.w	r3, #272	; 0x110
 80071e2:	9300      	str	r3, [sp, #0]
 80071e4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80071e8:	2200      	movs	r2, #0
 80071ea:	2100      	movs	r1, #0
 80071ec:	f7fc fead 	bl	8003f4a <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80071f0:	1d3b      	adds	r3, r7, #4
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80071f8:	2300      	movs	r3, #0
 80071fa:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
 80071fe:	2300      	movs	r3, #0
 8007200:	f887 3175 	strb.w	r3, [r7, #373]	; 0x175
 8007204:	2300      	movs	r3, #0
 8007206:	f887 3174 	strb.w	r3, [r7, #372]	; 0x174
 800720a:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 800720e:	041b      	lsls	r3, r3, #16
 8007210:	461a      	mov	r2, r3
 8007212:	f897 3175 	ldrb.w	r3, [r7, #373]	; 0x175
 8007216:	021b      	lsls	r3, r3, #8
 8007218:	431a      	orrs	r2, r3
 800721a:	f897 3174 	ldrb.w	r3, [r7, #372]	; 0x174
 800721e:	4313      	orrs	r3, r2
 8007220:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007224:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8007228:	4611      	mov	r1, r2
 800722a:	4618      	mov	r0, r3
 800722c:	f7fe faee 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 8007230:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8007234:	4619      	mov	r1, r3
 8007236:	4620      	mov	r0, r4
 8007238:	f7fe fbba 	bl	80059b0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    Main_Background.setXY(0, 0);
 800723c:	1d3b      	adds	r3, r7, #4
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	e006      	b.n	8007250 <_ZN12MainViewBaseC1Ev+0x39c>
 8007242:	bf00      	nop
 8007244:	0802c850 	.word	0x0802c850
 8007248:	08008d6d 	.word	0x08008d6d
 800724c:	08008dcd 	.word	0x08008dcd
 8007250:	336c      	adds	r3, #108	; 0x6c
 8007252:	2200      	movs	r2, #0
 8007254:	2100      	movs	r1, #0
 8007256:	4618      	mov	r0, r3
 8007258:	f7fc fed0 	bl	8003ffc <_ZN8touchgfx8Drawable5setXYEss>
    Main_Background.setBitmap(touchgfx::Bitmap(BITMAP_BACKGROUND_1_ID));
 800725c:	1d3b      	adds	r3, r7, #4
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8007264:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007268:	2100      	movs	r1, #0
 800726a:	4618      	mov	r0, r3
 800726c:	f7fe fadd 	bl	800582a <_ZN8touchgfx6BitmapC1Et>
 8007270:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007274:	4619      	mov	r1, r3
 8007276:	4620      	mov	r0, r4
 8007278:	f012 f837 	bl	80192ea <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    Button_Panel.setPosition(10, 94, 460, 170);
 800727c:	1d3b      	adds	r3, r7, #4
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f103 0098 	add.w	r0, r3, #152	; 0x98
 8007284:	23aa      	movs	r3, #170	; 0xaa
 8007286:	9300      	str	r3, [sp, #0]
 8007288:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
 800728c:	225e      	movs	r2, #94	; 0x5e
 800728e:	210a      	movs	r1, #10
 8007290:	f7fc fe5b 	bl	8003f4a <_ZN8touchgfx8Drawable11setPositionEssss>

    Button_Panel_Background.setPosition(0, 18, 460, 153);
 8007294:	1d3b      	adds	r3, r7, #4
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
 800729c:	2399      	movs	r3, #153	; 0x99
 800729e:	9300      	str	r3, [sp, #0]
 80072a0:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
 80072a4:	2212      	movs	r2, #18
 80072a6:	2100      	movs	r1, #0
 80072a8:	f7fc fe4f 	bl	8003f4a <_ZN8touchgfx8Drawable11setPositionEssss>
    Button_Panel_Background.setColor(touchgfx::Color::getColorFromRGB(78, 137, 174));
 80072ac:	1d3b      	adds	r3, r7, #4
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f103 04c4 	add.w	r4, r3, #196	; 0xc4
 80072b4:	234e      	movs	r3, #78	; 0x4e
 80072b6:	f887 3179 	strb.w	r3, [r7, #377]	; 0x179
 80072ba:	2389      	movs	r3, #137	; 0x89
 80072bc:	f887 3178 	strb.w	r3, [r7, #376]	; 0x178
 80072c0:	23ae      	movs	r3, #174	; 0xae
 80072c2:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
 80072c6:	f897 3179 	ldrb.w	r3, [r7, #377]	; 0x179
 80072ca:	041b      	lsls	r3, r3, #16
 80072cc:	461a      	mov	r2, r3
 80072ce:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 80072d2:	021b      	lsls	r3, r3, #8
 80072d4:	431a      	orrs	r2, r3
 80072d6:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 80072da:	4313      	orrs	r3, r2
 80072dc:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80072e0:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 80072e4:	4611      	mov	r1, r2
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7fe fa90 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 80072ec:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80072f0:	4619      	mov	r1, r3
 80072f2:	4620      	mov	r0, r4
 80072f4:	f7fe fb5c 	bl	80059b0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Button_Panel_Background.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 80072f8:	1d3b      	adds	r3, r7, #4
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f103 04c4 	add.w	r4, r3, #196	; 0xc4
 8007300:	23ed      	movs	r3, #237	; 0xed
 8007302:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 8007306:	2366      	movs	r3, #102	; 0x66
 8007308:	f887 317b 	strb.w	r3, [r7, #379]	; 0x17b
 800730c:	2363      	movs	r3, #99	; 0x63
 800730e:	f887 317a 	strb.w	r3, [r7, #378]	; 0x17a
 8007312:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 8007316:	041b      	lsls	r3, r3, #16
 8007318:	461a      	mov	r2, r3
 800731a:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 800731e:	021b      	lsls	r3, r3, #8
 8007320:	431a      	orrs	r2, r3
 8007322:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 8007326:	4313      	orrs	r3, r2
 8007328:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800732c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8007330:	4611      	mov	r1, r2
 8007332:	4618      	mov	r0, r3
 8007334:	f7fe fa6a 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 8007338:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4619      	mov	r1, r3
 8007340:	4620      	mov	r0, r4
 8007342:	f7fe fba7 	bl	8005a94 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Button_Panel_Background.setBorderSize(5);
 8007346:	1d3b      	adds	r3, r7, #4
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	33c4      	adds	r3, #196	; 0xc4
 800734c:	2105      	movs	r1, #5
 800734e:	4618      	mov	r0, r3
 8007350:	f7fe fbae 	bl	8005ab0 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Button_Panel.add(Button_Panel_Background);
 8007354:	1d3b      	adds	r3, r7, #4
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f103 0298 	add.w	r2, r3, #152	; 0x98
 800735c:	1d3b      	adds	r3, r7, #4
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	33c4      	adds	r3, #196	; 0xc4
 8007362:	4619      	mov	r1, r3
 8007364:	4610      	mov	r0, r2
 8007366:	f00f fe1b 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Voice_Comm_Panel.setPosition(5, 84, 450, 82);
 800736a:	1d3b      	adds	r3, r7, #4
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f103 00f8 	add.w	r0, r3, #248	; 0xf8
 8007372:	2352      	movs	r3, #82	; 0x52
 8007374:	9300      	str	r3, [sp, #0]
 8007376:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 800737a:	2254      	movs	r2, #84	; 0x54
 800737c:	2105      	movs	r1, #5
 800737e:	f7fc fde4 	bl	8003f4a <_ZN8touchgfx8Drawable11setPositionEssss>

    Voice_Comm_Background.setPosition(0, 0, 450, 82);
 8007382:	1d3b      	adds	r3, r7, #4
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f503 7092 	add.w	r0, r3, #292	; 0x124
 800738a:	2352      	movs	r3, #82	; 0x52
 800738c:	9300      	str	r3, [sp, #0]
 800738e:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 8007392:	2200      	movs	r2, #0
 8007394:	2100      	movs	r1, #0
 8007396:	f7fc fdd8 	bl	8003f4a <_ZN8touchgfx8Drawable11setPositionEssss>
    Voice_Comm_Background.setColor(touchgfx::Color::getColorFromRGB(67, 101, 139));
 800739a:	1d3b      	adds	r3, r7, #4
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f503 7492 	add.w	r4, r3, #292	; 0x124
 80073a2:	2343      	movs	r3, #67	; 0x43
 80073a4:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 80073a8:	2365      	movs	r3, #101	; 0x65
 80073aa:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 80073ae:	238b      	movs	r3, #139	; 0x8b
 80073b0:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 80073b4:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 80073b8:	041b      	lsls	r3, r3, #16
 80073ba:	461a      	mov	r2, r3
 80073bc:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 80073c0:	021b      	lsls	r3, r3, #8
 80073c2:	431a      	orrs	r2, r3
 80073c4:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 80073c8:	4313      	orrs	r3, r2
 80073ca:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80073ce:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80073d2:	4611      	mov	r1, r2
 80073d4:	4618      	mov	r0, r3
 80073d6:	f7fe fa19 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 80073da:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4619      	mov	r1, r3
 80073e2:	4620      	mov	r0, r4
 80073e4:	f7fe fae4 	bl	80059b0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Voice_Comm_Background.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80073e8:	1d3b      	adds	r3, r7, #4
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f503 7492 	add.w	r4, r3, #292	; 0x124
 80073f0:	2300      	movs	r3, #0
 80073f2:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
 80073f6:	2300      	movs	r3, #0
 80073f8:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
 80073fc:	2300      	movs	r3, #0
 80073fe:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
 8007402:	f897 3182 	ldrb.w	r3, [r7, #386]	; 0x182
 8007406:	041b      	lsls	r3, r3, #16
 8007408:	461a      	mov	r2, r3
 800740a:	f897 3181 	ldrb.w	r3, [r7, #385]	; 0x181
 800740e:	021b      	lsls	r3, r3, #8
 8007410:	431a      	orrs	r2, r3
 8007412:	f897 3180 	ldrb.w	r3, [r7, #384]	; 0x180
 8007416:	4313      	orrs	r3, r2
 8007418:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800741c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8007420:	4611      	mov	r1, r2
 8007422:	4618      	mov	r0, r3
 8007424:	f7fe f9f2 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 8007428:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4619      	mov	r1, r3
 8007430:	4620      	mov	r0, r4
 8007432:	f7fe fb2f 	bl	8005a94 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Voice_Comm_Background.setBorderSize(2);
 8007436:	1d3b      	adds	r3, r7, #4
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800743e:	2102      	movs	r1, #2
 8007440:	4618      	mov	r0, r3
 8007442:	f7fe fb35 	bl	8005ab0 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Voice_Comm_Panel.add(Voice_Comm_Background);
 8007446:	1d3b      	adds	r3, r7, #4
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f103 02f8 	add.w	r2, r3, #248	; 0xf8
 800744e:	1d3b      	adds	r3, r7, #4
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8007456:	4619      	mov	r1, r3
 8007458:	4610      	mov	r0, r2
 800745a:	f00f fda1 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Voicecomm_Textbox.setPosition(157, 0, 137, 20);
 800745e:	1d3b      	adds	r3, r7, #4
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f503 70ac 	add.w	r0, r3, #344	; 0x158
 8007466:	2314      	movs	r3, #20
 8007468:	9300      	str	r3, [sp, #0]
 800746a:	2389      	movs	r3, #137	; 0x89
 800746c:	2200      	movs	r2, #0
 800746e:	219d      	movs	r1, #157	; 0x9d
 8007470:	f7fc fd6b 	bl	8003f4a <_ZN8touchgfx8Drawable11setPositionEssss>

    Voicecomm_Border.setPosition(-1, 3, 138, 17);
 8007474:	1d3b      	adds	r3, r7, #4
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f503 70c2 	add.w	r0, r3, #388	; 0x184
 800747c:	2311      	movs	r3, #17
 800747e:	9300      	str	r3, [sp, #0]
 8007480:	238a      	movs	r3, #138	; 0x8a
 8007482:	2203      	movs	r2, #3
 8007484:	f04f 31ff 	mov.w	r1, #4294967295
 8007488:	f7fc fd5f 	bl	8003f4a <_ZN8touchgfx8Drawable11setPositionEssss>
    Voicecomm_Border.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800748c:	1d3b      	adds	r3, r7, #4
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f503 74c2 	add.w	r4, r3, #388	; 0x184
 8007494:	2300      	movs	r3, #0
 8007496:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 800749a:	2300      	movs	r3, #0
 800749c:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 80074a0:	2300      	movs	r3, #0
 80074a2:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 80074a6:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 80074aa:	041b      	lsls	r3, r3, #16
 80074ac:	461a      	mov	r2, r3
 80074ae:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 80074b2:	021b      	lsls	r3, r3, #8
 80074b4:	431a      	orrs	r2, r3
 80074b6:	f897 3183 	ldrb.w	r3, [r7, #387]	; 0x183
 80074ba:	4313      	orrs	r3, r2
 80074bc:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80074c0:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 80074c4:	4611      	mov	r1, r2
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7fe f9a0 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 80074cc:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4619      	mov	r1, r3
 80074d4:	4620      	mov	r0, r4
 80074d6:	f7fe fa6b 	bl	80059b0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Voicecomm_Border.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 80074da:	1d3b      	adds	r3, r7, #4
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f503 74c2 	add.w	r4, r3, #388	; 0x184
 80074e2:	23ed      	movs	r3, #237	; 0xed
 80074e4:	f887 3188 	strb.w	r3, [r7, #392]	; 0x188
 80074e8:	2366      	movs	r3, #102	; 0x66
 80074ea:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 80074ee:	2363      	movs	r3, #99	; 0x63
 80074f0:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 80074f4:	f897 3188 	ldrb.w	r3, [r7, #392]	; 0x188
 80074f8:	041b      	lsls	r3, r3, #16
 80074fa:	461a      	mov	r2, r3
 80074fc:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8007500:	021b      	lsls	r3, r3, #8
 8007502:	431a      	orrs	r2, r3
 8007504:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 8007508:	4313      	orrs	r3, r2
 800750a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800750e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8007512:	4611      	mov	r1, r2
 8007514:	4618      	mov	r0, r3
 8007516:	f7fe f979 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 800751a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4619      	mov	r1, r3
 8007522:	4620      	mov	r0, r4
 8007524:	f7fe fab6 	bl	8005a94 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Voicecomm_Border.setBorderSize(3);
 8007528:	1d3b      	adds	r3, r7, #4
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8007530:	2103      	movs	r1, #3
 8007532:	4618      	mov	r0, r3
 8007534:	f7fe fabc 	bl	8005ab0 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Voicecomm_Textbox.add(Voicecomm_Border);
 8007538:	1d3b      	adds	r3, r7, #4
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f503 72ac 	add.w	r2, r3, #344	; 0x158
 8007540:	1d3b      	adds	r3, r7, #4
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8007548:	4619      	mov	r1, r3
 800754a:	4610      	mov	r0, r2
 800754c:	f00f fd28 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Voicecomm_Text.setXY(7, 5);
 8007550:	1d3b      	adds	r3, r7, #4
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007558:	2205      	movs	r2, #5
 800755a:	2107      	movs	r1, #7
 800755c:	4618      	mov	r0, r3
 800755e:	f7fc fd4d 	bl	8003ffc <_ZN8touchgfx8Drawable5setXYEss>
    Voicecomm_Text.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8007562:	1d3b      	adds	r3, r7, #4
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f503 74dc 	add.w	r4, r3, #440	; 0x1b8
 800756a:	23ff      	movs	r3, #255	; 0xff
 800756c:	f887 318b 	strb.w	r3, [r7, #395]	; 0x18b
 8007570:	23ff      	movs	r3, #255	; 0xff
 8007572:	f887 318a 	strb.w	r3, [r7, #394]	; 0x18a
 8007576:	23ff      	movs	r3, #255	; 0xff
 8007578:	f887 3189 	strb.w	r3, [r7, #393]	; 0x189
 800757c:	f897 318b 	ldrb.w	r3, [r7, #395]	; 0x18b
 8007580:	041b      	lsls	r3, r3, #16
 8007582:	461a      	mov	r2, r3
 8007584:	f897 318a 	ldrb.w	r3, [r7, #394]	; 0x18a
 8007588:	021b      	lsls	r3, r3, #8
 800758a:	431a      	orrs	r2, r3
 800758c:	f897 3189 	ldrb.w	r3, [r7, #393]	; 0x189
 8007590:	4313      	orrs	r3, r2
 8007592:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007596:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800759a:	4611      	mov	r1, r2
 800759c:	4618      	mov	r0, r3
 800759e:	f7fe f935 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 80075a2:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	461a      	mov	r2, r3
 80075aa:	f8c7 418c 	str.w	r4, [r7, #396]	; 0x18c
 80075ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80075b2:	601a      	str	r2, [r3, #0]
        this->color = color;
 80075b4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80075b8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80075bc:	6812      	ldr	r2, [r2, #0]
 80075be:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80075c0:	bf00      	nop
    Voicecomm_Text.setLinespacing(0);
 80075c2:	1d3b      	adds	r3, r7, #4
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80075ca:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 80075ce:	2300      	movs	r3, #0
 80075d0:	f8a7 3192 	strh.w	r3, [r7, #402]	; 0x192
        linespace = space;
 80075d4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80075d8:	f8b7 2192 	ldrh.w	r2, [r7, #402]	; 0x192
 80075dc:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80075de:	bf00      	nop
    Voicecomm_Text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_2Q8N));
 80075e0:	1d3b      	adds	r3, r7, #4
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f503 74dc 	add.w	r4, r3, #440	; 0x1b8
 80075e8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80075ec:	2101      	movs	r1, #1
 80075ee:	4618      	mov	r0, r3
 80075f0:	f7fe fa6e 	bl	8005ad0 <_ZN8touchgfx9TypedTextC1Et>
 80075f4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80075f8:	4619      	mov	r1, r3
 80075fa:	4620      	mov	r0, r4
 80075fc:	f011 fbfb 	bl	8018df6 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8007600:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007604:	4618      	mov	r0, r3
 8007606:	f7fc fbed 	bl	8003de4 <_ZN8touchgfx9TypedTextD1Ev>
    Voicecomm_Textbox.add(Voicecomm_Text);
 800760a:	1d3b      	adds	r3, r7, #4
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f503 72ac 	add.w	r2, r3, #344	; 0x158
 8007612:	1d3b      	adds	r3, r7, #4
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800761a:	4619      	mov	r1, r3
 800761c:	4610      	mov	r0, r2
 800761e:	f00f fcbf 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Voice_Comm_Panel.add(Voicecomm_Textbox);
 8007622:	1d3b      	adds	r3, r7, #4
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f103 02f8 	add.w	r2, r3, #248	; 0xf8
 800762a:	1d3b      	adds	r3, r7, #4
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007632:	4619      	mov	r1, r3
 8007634:	4610      	mov	r0, r2
 8007636:	f00f fcb3 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Volume_Textbox.setPosition(143, 58, 70, 16);
 800763a:	1d3b      	adds	r3, r7, #4
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f503 70fa 	add.w	r0, r3, #500	; 0x1f4
 8007642:	2310      	movs	r3, #16
 8007644:	9300      	str	r3, [sp, #0]
 8007646:	2346      	movs	r3, #70	; 0x46
 8007648:	223a      	movs	r2, #58	; 0x3a
 800764a:	218f      	movs	r1, #143	; 0x8f
 800764c:	f7fc fc7d 	bl	8003f4a <_ZN8touchgfx8Drawable11setPositionEssss>

    Volume_Text_Border.setPosition(0, 0, 70, 16);
 8007650:	1d3b      	adds	r3, r7, #4
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f503 7008 	add.w	r0, r3, #544	; 0x220
 8007658:	2310      	movs	r3, #16
 800765a:	9300      	str	r3, [sp, #0]
 800765c:	2346      	movs	r3, #70	; 0x46
 800765e:	2200      	movs	r2, #0
 8007660:	2100      	movs	r1, #0
 8007662:	f7fc fc72 	bl	8003f4a <_ZN8touchgfx8Drawable11setPositionEssss>
    Volume_Text_Border.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8007666:	1d3b      	adds	r3, r7, #4
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f503 7408 	add.w	r4, r3, #544	; 0x220
 800766e:	2300      	movs	r3, #0
 8007670:	f887 319c 	strb.w	r3, [r7, #412]	; 0x19c
 8007674:	2300      	movs	r3, #0
 8007676:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
 800767a:	2300      	movs	r3, #0
 800767c:	f887 319a 	strb.w	r3, [r7, #410]	; 0x19a
 8007680:	f897 319c 	ldrb.w	r3, [r7, #412]	; 0x19c
 8007684:	041b      	lsls	r3, r3, #16
 8007686:	461a      	mov	r2, r3
 8007688:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 800768c:	021b      	lsls	r3, r3, #8
 800768e:	431a      	orrs	r2, r3
 8007690:	f897 319a 	ldrb.w	r3, [r7, #410]	; 0x19a
 8007694:	4313      	orrs	r3, r2
 8007696:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800769a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800769e:	4611      	mov	r1, r2
 80076a0:	4618      	mov	r0, r3
 80076a2:	f7fe f8b3 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 80076a6:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4619      	mov	r1, r3
 80076ae:	4620      	mov	r0, r4
 80076b0:	f7fe f97e 	bl	80059b0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Volume_Text_Border.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 80076b4:	1d3b      	adds	r3, r7, #4
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f503 7408 	add.w	r4, r3, #544	; 0x220
 80076bc:	23ed      	movs	r3, #237	; 0xed
 80076be:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
 80076c2:	2366      	movs	r3, #102	; 0x66
 80076c4:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 80076c8:	2363      	movs	r3, #99	; 0x63
 80076ca:	f887 319d 	strb.w	r3, [r7, #413]	; 0x19d
 80076ce:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 80076d2:	041b      	lsls	r3, r3, #16
 80076d4:	461a      	mov	r2, r3
 80076d6:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 80076da:	021b      	lsls	r3, r3, #8
 80076dc:	431a      	orrs	r2, r3
 80076de:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
 80076e2:	4313      	orrs	r3, r2
 80076e4:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80076e8:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 80076ec:	4611      	mov	r1, r2
 80076ee:	4618      	mov	r0, r3
 80076f0:	f7fe f88c 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 80076f4:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4619      	mov	r1, r3
 80076fc:	4620      	mov	r0, r4
 80076fe:	f7fe f9c9 	bl	8005a94 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Volume_Text_Border.setBorderSize(3);
 8007702:	1d3b      	adds	r3, r7, #4
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f503 7308 	add.w	r3, r3, #544	; 0x220
 800770a:	2103      	movs	r1, #3
 800770c:	4618      	mov	r0, r3
 800770e:	f7fe f9cf 	bl	8005ab0 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Volume_Textbox.add(Volume_Text_Border);
 8007712:	1d3b      	adds	r3, r7, #4
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 800771a:	1d3b      	adds	r3, r7, #4
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8007722:	4619      	mov	r1, r3
 8007724:	4610      	mov	r0, r2
 8007726:	f00f fc3b 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    textProgress1.setXY(3, 3);
 800772a:	1d3b      	adds	r3, r7, #4
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8007732:	2203      	movs	r2, #3
 8007734:	2103      	movs	r1, #3
 8007736:	4618      	mov	r0, r3
 8007738:	f7fc fc60 	bl	8003ffc <_ZN8touchgfx8Drawable5setXYEss>
    textProgress1.setProgressIndicatorPosition(0, 0, 64, 20);
 800773c:	1d3b      	adds	r3, r7, #4
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f503 7015 	add.w	r0, r3, #596	; 0x254
 8007744:	2314      	movs	r3, #20
 8007746:	9300      	str	r3, [sp, #0]
 8007748:	2340      	movs	r3, #64	; 0x40
 800774a:	2200      	movs	r2, #0
 800774c:	2100      	movs	r1, #0
 800774e:	f00f f9a7 	bl	8016aa0 <_ZN8touchgfx12TextProgress28setProgressIndicatorPositionEssss>
    textProgress1.setRange(0, 100);
 8007752:	1d3b      	adds	r3, r7, #4
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f503 7015 	add.w	r0, r3, #596	; 0x254
 800775a:	2300      	movs	r3, #0
 800775c:	9300      	str	r3, [sp, #0]
 800775e:	2300      	movs	r3, #0
 8007760:	2264      	movs	r2, #100	; 0x64
 8007762:	2100      	movs	r1, #0
 8007764:	f00f faa4 	bl	8016cb0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    textProgress1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8007768:	1d3b      	adds	r3, r7, #4
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f503 7415 	add.w	r4, r3, #596	; 0x254
 8007770:	23ff      	movs	r3, #255	; 0xff
 8007772:	f887 31a2 	strb.w	r3, [r7, #418]	; 0x1a2
 8007776:	23ff      	movs	r3, #255	; 0xff
 8007778:	f887 31a1 	strb.w	r3, [r7, #417]	; 0x1a1
 800777c:	23ff      	movs	r3, #255	; 0xff
 800777e:	f887 31a0 	strb.w	r3, [r7, #416]	; 0x1a0
 8007782:	f897 31a2 	ldrb.w	r3, [r7, #418]	; 0x1a2
 8007786:	041b      	lsls	r3, r3, #16
 8007788:	461a      	mov	r2, r3
 800778a:	f897 31a1 	ldrb.w	r3, [r7, #417]	; 0x1a1
 800778e:	021b      	lsls	r3, r3, #8
 8007790:	431a      	orrs	r2, r3
 8007792:	f897 31a0 	ldrb.w	r3, [r7, #416]	; 0x1a0
 8007796:	4313      	orrs	r3, r2
 8007798:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800779c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80077a0:	4611      	mov	r1, r2
 80077a2:	4618      	mov	r0, r3
 80077a4:	f7fe f832 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 80077a8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4619      	mov	r1, r3
 80077b0:	4620      	mov	r0, r4
 80077b2:	f00f f907 	bl	80169c4 <_ZN8touchgfx12TextProgress8setColorENS_9colortypeE>
    textProgress1.setNumberOfDecimals(0);
 80077b6:	1d3b      	adds	r3, r7, #4
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80077be:	2100      	movs	r1, #0
 80077c0:	4618      	mov	r0, r3
 80077c2:	f00f f905 	bl	80169d0 <_ZN8touchgfx12TextProgress19setNumberOfDecimalsEt>
    textProgress1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_F9M9));
 80077c6:	1d3b      	adds	r3, r7, #4
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f503 7415 	add.w	r4, r3, #596	; 0x254
 80077ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80077d2:	2109      	movs	r1, #9
 80077d4:	4618      	mov	r0, r3
 80077d6:	f7fe f97b 	bl	8005ad0 <_ZN8touchgfx9TypedTextC1Et>
 80077da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80077de:	4619      	mov	r1, r3
 80077e0:	4620      	mov	r0, r4
 80077e2:	f00f f90b 	bl	80169fc <_ZN8touchgfx12TextProgress12setTypedTextERKNS_9TypedTextE>
 80077e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80077ea:	4618      	mov	r0, r3
 80077ec:	f7fc fafa 	bl	8003de4 <_ZN8touchgfx9TypedTextD1Ev>
    textProgress1.setBackground(touchgfx::Bitmap(BITMAP_VOLUME_BACKGROUND2_ID));
 80077f0:	1d3b      	adds	r3, r7, #4
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f503 7415 	add.w	r4, r3, #596	; 0x254
 80077f8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80077fc:	210d      	movs	r1, #13
 80077fe:	4618      	mov	r0, r3
 8007800:	f7fe f813 	bl	800582a <_ZN8touchgfx6BitmapC1Et>
 8007804:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007808:	4619      	mov	r1, r3
 800780a:	4620      	mov	r0, r4
 800780c:	f00f fafd 	bl	8016e0a <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    textProgress1.setValue(50);
 8007810:	1d3b      	adds	r3, r7, #4
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8007818:	2132      	movs	r1, #50	; 0x32
 800781a:	4618      	mov	r0, r3
 800781c:	f00f f8fa 	bl	8016a14 <_ZN8touchgfx12TextProgress8setValueEi>
    Volume_Textbox.add(textProgress1);
 8007820:	1d3b      	adds	r3, r7, #4
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 8007828:	1d3b      	adds	r3, r7, #4
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8007830:	4619      	mov	r1, r3
 8007832:	4610      	mov	r0, r2
 8007834:	f00f fbb4 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Voice_Comm_Panel.add(Volume_Textbox);
 8007838:	1d3b      	adds	r3, r7, #4
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f103 02f8 	add.w	r2, r3, #248	; 0xf8
 8007840:	1d3b      	adds	r3, r7, #4
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007848:	4619      	mov	r1, r3
 800784a:	4610      	mov	r0, r2
 800784c:	f00f fba8 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Toggle_Textbox.setPosition(388, 58, 39, 17);
 8007850:	1d3b      	adds	r3, r7, #4
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f503 7057 	add.w	r0, r3, #860	; 0x35c
 8007858:	2311      	movs	r3, #17
 800785a:	9300      	str	r3, [sp, #0]
 800785c:	2327      	movs	r3, #39	; 0x27
 800785e:	223a      	movs	r2, #58	; 0x3a
 8007860:	f44f 71c2 	mov.w	r1, #388	; 0x184
 8007864:	f7fc fb71 	bl	8003f4a <_ZN8touchgfx8Drawable11setPositionEssss>

    Toggle_Text_Border.setPosition(0, 0, 38, 16);
 8007868:	1d3b      	adds	r3, r7, #4
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f503 7062 	add.w	r0, r3, #904	; 0x388
 8007870:	2310      	movs	r3, #16
 8007872:	9300      	str	r3, [sp, #0]
 8007874:	2326      	movs	r3, #38	; 0x26
 8007876:	2200      	movs	r2, #0
 8007878:	2100      	movs	r1, #0
 800787a:	f7fc fb66 	bl	8003f4a <_ZN8touchgfx8Drawable11setPositionEssss>
    Toggle_Text_Border.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800787e:	1d3b      	adds	r3, r7, #4
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f503 7462 	add.w	r4, r3, #904	; 0x388
 8007886:	2300      	movs	r3, #0
 8007888:	f887 31a5 	strb.w	r3, [r7, #421]	; 0x1a5
 800788c:	2300      	movs	r3, #0
 800788e:	f887 31a4 	strb.w	r3, [r7, #420]	; 0x1a4
 8007892:	2300      	movs	r3, #0
 8007894:	f887 31a3 	strb.w	r3, [r7, #419]	; 0x1a3
 8007898:	f897 31a5 	ldrb.w	r3, [r7, #421]	; 0x1a5
 800789c:	041b      	lsls	r3, r3, #16
 800789e:	461a      	mov	r2, r3
 80078a0:	f897 31a4 	ldrb.w	r3, [r7, #420]	; 0x1a4
 80078a4:	021b      	lsls	r3, r3, #8
 80078a6:	431a      	orrs	r2, r3
 80078a8:	f897 31a3 	ldrb.w	r3, [r7, #419]	; 0x1a3
 80078ac:	4313      	orrs	r3, r2
 80078ae:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80078b2:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80078b6:	4611      	mov	r1, r2
 80078b8:	4618      	mov	r0, r3
 80078ba:	f7fd ffa7 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 80078be:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4619      	mov	r1, r3
 80078c6:	4620      	mov	r0, r4
 80078c8:	f7fe f872 	bl	80059b0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Toggle_Text_Border.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 80078cc:	1d3b      	adds	r3, r7, #4
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f503 7462 	add.w	r4, r3, #904	; 0x388
 80078d4:	23ed      	movs	r3, #237	; 0xed
 80078d6:	f887 31a8 	strb.w	r3, [r7, #424]	; 0x1a8
 80078da:	2366      	movs	r3, #102	; 0x66
 80078dc:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
 80078e0:	2363      	movs	r3, #99	; 0x63
 80078e2:	f887 31a6 	strb.w	r3, [r7, #422]	; 0x1a6
 80078e6:	f897 31a8 	ldrb.w	r3, [r7, #424]	; 0x1a8
 80078ea:	041b      	lsls	r3, r3, #16
 80078ec:	461a      	mov	r2, r3
 80078ee:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 80078f2:	021b      	lsls	r3, r3, #8
 80078f4:	431a      	orrs	r2, r3
 80078f6:	f897 31a6 	ldrb.w	r3, [r7, #422]	; 0x1a6
 80078fa:	4313      	orrs	r3, r2
 80078fc:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007900:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007904:	4611      	mov	r1, r2
 8007906:	4618      	mov	r0, r3
 8007908:	f7fd ff80 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 800790c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4619      	mov	r1, r3
 8007914:	4620      	mov	r0, r4
 8007916:	f7fe f8bd 	bl	8005a94 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Toggle_Text_Border.setBorderSize(3);
 800791a:	1d3b      	adds	r3, r7, #4
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f503 7362 	add.w	r3, r3, #904	; 0x388
 8007922:	2103      	movs	r1, #3
 8007924:	4618      	mov	r0, r3
 8007926:	f7fe f8c3 	bl	8005ab0 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Toggle_Textbox.add(Toggle_Text_Border);
 800792a:	1d3b      	adds	r3, r7, #4
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f503 7257 	add.w	r2, r3, #860	; 0x35c
 8007932:	1d3b      	adds	r3, r7, #4
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f503 7362 	add.w	r3, r3, #904	; 0x388
 800793a:	4619      	mov	r1, r3
 800793c:	4610      	mov	r0, r2
 800793e:	f00f fb2f 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Toggle_Text.setXY(4, 3);
 8007942:	1d3b      	adds	r3, r7, #4
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 800794a:	2203      	movs	r2, #3
 800794c:	2104      	movs	r1, #4
 800794e:	4618      	mov	r0, r3
 8007950:	f7fc fb54 	bl	8003ffc <_ZN8touchgfx8Drawable5setXYEss>
    Toggle_Text.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8007954:	1d3b      	adds	r3, r7, #4
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f503 746f 	add.w	r4, r3, #956	; 0x3bc
 800795c:	23ff      	movs	r3, #255	; 0xff
 800795e:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab
 8007962:	23ff      	movs	r3, #255	; 0xff
 8007964:	f887 31aa 	strb.w	r3, [r7, #426]	; 0x1aa
 8007968:	23ff      	movs	r3, #255	; 0xff
 800796a:	f887 31a9 	strb.w	r3, [r7, #425]	; 0x1a9
 800796e:	f897 31ab 	ldrb.w	r3, [r7, #427]	; 0x1ab
 8007972:	041b      	lsls	r3, r3, #16
 8007974:	461a      	mov	r2, r3
 8007976:	f897 31aa 	ldrb.w	r3, [r7, #426]	; 0x1aa
 800797a:	021b      	lsls	r3, r3, #8
 800797c:	431a      	orrs	r2, r3
 800797e:	f897 31a9 	ldrb.w	r3, [r7, #425]	; 0x1a9
 8007982:	4313      	orrs	r3, r2
 8007984:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007988:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800798c:	4611      	mov	r1, r2
 800798e:	4618      	mov	r0, r3
 8007990:	f7fd ff3c 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 8007994:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	461a      	mov	r2, r3
 800799c:	f8c7 41ac 	str.w	r4, [r7, #428]	; 0x1ac
 80079a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80079a4:	601a      	str	r2, [r3, #0]
        this->color = color;
 80079a6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80079aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80079ae:	6812      	ldr	r2, [r2, #0]
 80079b0:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80079b2:	bf00      	nop
    Toggle_Text.setLinespacing(0);
 80079b4:	1d3b      	adds	r3, r7, #4
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80079bc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 80079c0:	2300      	movs	r3, #0
 80079c2:	f8a7 31b2 	strh.w	r3, [r7, #434]	; 0x1b2
        linespace = space;
 80079c6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80079ca:	f8b7 21b2 	ldrh.w	r2, [r7, #434]	; 0x1b2
 80079ce:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80079d0:	bf00      	nop
    Toggle_Text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_P64J));
 80079d2:	1d3b      	adds	r3, r7, #4
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f503 746f 	add.w	r4, r3, #956	; 0x3bc
 80079da:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80079de:	2100      	movs	r1, #0
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7fe f875 	bl	8005ad0 <_ZN8touchgfx9TypedTextC1Et>
 80079e6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80079ea:	4619      	mov	r1, r3
 80079ec:	4620      	mov	r0, r4
 80079ee:	f011 fa02 	bl	8018df6 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80079f2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80079f6:	4618      	mov	r0, r3
 80079f8:	f7fc f9f4 	bl	8003de4 <_ZN8touchgfx9TypedTextD1Ev>
    Toggle_Textbox.add(Toggle_Text);
 80079fc:	1d3b      	adds	r3, r7, #4
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f503 7257 	add.w	r2, r3, #860	; 0x35c
 8007a04:	1d3b      	adds	r3, r7, #4
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	4610      	mov	r0, r2
 8007a10:	f00f fac6 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Voice_Comm_Panel.add(Toggle_Textbox);
 8007a14:	1d3b      	adds	r3, r7, #4
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f103 02f8 	add.w	r2, r3, #248	; 0xf8
 8007a1c:	1d3b      	adds	r3, r7, #4
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f503 7357 	add.w	r3, r3, #860	; 0x35c
 8007a24:	4619      	mov	r1, r3
 8007a26:	4610      	mov	r0, r2
 8007a28:	f00f faba 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Volume_Slider.setXY(8, 25);
 8007a2c:	1d3b      	adds	r3, r7, #4
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 8007a34:	2219      	movs	r2, #25
 8007a36:	2108      	movs	r1, #8
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f7fc fadf 	bl	8003ffc <_ZN8touchgfx8Drawable5setXYEss>
    Volume_Slider.setBitmaps(touchgfx::Bitmap(BITMAP_SLIDER_DARK_ID), touchgfx::Bitmap(BITMAP_SLIDER_LIGHT_ID), touchgfx::Bitmap(BITMAP_UNPRESSED_BUTTON_ID));
 8007a3e:	1d3b      	adds	r3, r7, #4
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f503 747e 	add.w	r4, r3, #1016	; 0x3f8
 8007a46:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007a4a:	2104      	movs	r1, #4
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f7fd feec 	bl	800582a <_ZN8touchgfx6BitmapC1Et>
 8007a52:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007a56:	2105      	movs	r1, #5
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f7fd fee6 	bl	800582a <_ZN8touchgfx6BitmapC1Et>
 8007a5e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007a62:	210b      	movs	r1, #11
 8007a64:	4618      	mov	r0, r3
 8007a66:	f7fd fee0 	bl	800582a <_ZN8touchgfx6BitmapC1Et>
 8007a6a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007a6e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8007a72:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8007a76:	4620      	mov	r0, r4
 8007a78:	f00f ff6e 	bl	8017958 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>
    Volume_Slider.setupHorizontalSlider(2, 9, 0, 0, 310);
 8007a7c:	1d3b      	adds	r3, r7, #4
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f503 707e 	add.w	r0, r3, #1016	; 0x3f8
 8007a84:	f44f 739b 	mov.w	r3, #310	; 0x136
 8007a88:	9301      	str	r3, [sp, #4]
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	9300      	str	r3, [sp, #0]
 8007a8e:	2300      	movs	r3, #0
 8007a90:	2209      	movs	r2, #9
 8007a92:	2102      	movs	r1, #2
 8007a94:	f00f fdd4 	bl	8017640 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt>
    Volume_Slider.setValueRange(0, 100);
 8007a98:	1d3b      	adds	r3, r7, #4
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 8007aa0:	2264      	movs	r2, #100	; 0x64
 8007aa2:	2100      	movs	r1, #0
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f00f fd40 	bl	801752a <_ZN8touchgfx6Slider13setValueRangeEii>
    Volume_Slider.setValue(50);
 8007aaa:	1d3b      	adds	r3, r7, #4
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 8007ab2:	2132      	movs	r1, #50	; 0x32
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f00f fcc4 	bl	8017442 <_ZN8touchgfx6Slider8setValueEi>
    Volume_Slider.setNewValueCallback(sliderValueChangedCallback);
 8007aba:	1d3b      	adds	r3, r7, #4
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f503 727e 	add.w	r2, r3, #1016	; 0x3f8
 8007ac2:	1d3b      	adds	r3, r7, #4
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f603 3308 	addw	r3, r3, #2824	; 0xb08
 8007aca:	4619      	mov	r1, r3
 8007acc:	4610      	mov	r0, r2
 8007ace:	f7ff f814 	bl	8006afa <_ZN8touchgfx6Slider19setNewValueCallbackERNS_15GenericCallbackIRKS0_ivEE>
    Voice_Comm_Panel.add(Volume_Slider);
 8007ad2:	1d3b      	adds	r3, r7, #4
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f103 02f8 	add.w	r2, r3, #248	; 0xf8
 8007ada:	1d3b      	adds	r3, r7, #4
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	4610      	mov	r0, r2
 8007ae6:	f00f fa5b 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Voice_Toggle_Button.setXY(372, 23);
 8007aea:	1d3b      	adds	r3, r7, #4
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f203 43f4 	addw	r3, r3, #1268	; 0x4f4
 8007af2:	2217      	movs	r2, #23
 8007af4:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8007af8:	4618      	mov	r0, r3
 8007afa:	f7fc fa7f 	bl	8003ffc <_ZN8touchgfx8Drawable5setXYEss>
    Voice_Toggle_Button.setBitmaps(touchgfx::Bitmap(BITMAP_TOGGLE_BUTTON_ON2_ID), touchgfx::Bitmap(BITMAP_TOGGLE_BUTTON_OFF2_ID));
 8007afe:	1d3b      	adds	r3, r7, #4
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f203 44f4 	addw	r4, r3, #1268	; 0x4f4
 8007b06:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007b0a:	210a      	movs	r1, #10
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f7fd fe8c 	bl	800582a <_ZN8touchgfx6BitmapC1Et>
 8007b12:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007b16:	2108      	movs	r1, #8
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f7fd fe86 	bl	800582a <_ZN8touchgfx6BitmapC1Et>
 8007b1e:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8007b22:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007b26:	4619      	mov	r1, r3
 8007b28:	4620      	mov	r0, r4
 8007b2a:	f7fe fff5 	bl	8006b18 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>
    Voice_Toggle_Button.setAction(buttonCallback);
 8007b2e:	1d3b      	adds	r3, r7, #4
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f203 42f4 	addw	r2, r3, #1268	; 0x4f4
 8007b36:	1d3b      	adds	r3, r7, #4
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 8007b3e:	4619      	mov	r1, r3
 8007b40:	4610      	mov	r0, r2
 8007b42:	f7fe f83b 	bl	8005bbc <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>
    Voice_Comm_Panel.add(Voice_Toggle_Button);
 8007b46:	1d3b      	adds	r3, r7, #4
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f103 02f8 	add.w	r2, r3, #248	; 0xf8
 8007b4e:	1d3b      	adds	r3, r7, #4
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f203 43f4 	addw	r3, r3, #1268	; 0x4f4
 8007b56:	4619      	mov	r1, r3
 8007b58:	4610      	mov	r0, r2
 8007b5a:	f00f fa21 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Button_Panel.add(Voice_Comm_Panel);
 8007b5e:	1d3b      	adds	r3, r7, #4
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8007b66:	1d3b      	adds	r3, r7, #4
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	33f8      	adds	r3, #248	; 0xf8
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	4610      	mov	r0, r2
 8007b70:	f00f fa16 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Anomaly_Detection_Panel.setPosition(5, 23, 450, 67);
 8007b74:	1d3b      	adds	r3, r7, #4
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f203 502c 	addw	r0, r3, #1324	; 0x52c
 8007b7c:	2343      	movs	r3, #67	; 0x43
 8007b7e:	9300      	str	r3, [sp, #0]
 8007b80:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 8007b84:	2217      	movs	r2, #23
 8007b86:	2105      	movs	r1, #5
 8007b88:	f7fc f9df 	bl	8003f4a <_ZN8touchgfx8Drawable11setPositionEssss>

    Anomaly_Detection_Background.setPosition(0, 0, 450, 63);
 8007b8c:	1d3b      	adds	r3, r7, #4
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f503 60ab 	add.w	r0, r3, #1368	; 0x558
 8007b94:	233f      	movs	r3, #63	; 0x3f
 8007b96:	9300      	str	r3, [sp, #0]
 8007b98:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	2100      	movs	r1, #0
 8007ba0:	f7fc f9d3 	bl	8003f4a <_ZN8touchgfx8Drawable11setPositionEssss>
    Anomaly_Detection_Background.setColor(touchgfx::Color::getColorFromRGB(67, 101, 139));
 8007ba4:	1d3b      	adds	r3, r7, #4
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f503 64ab 	add.w	r4, r3, #1368	; 0x558
 8007bac:	2343      	movs	r3, #67	; 0x43
 8007bae:	f887 31bb 	strb.w	r3, [r7, #443]	; 0x1bb
 8007bb2:	2365      	movs	r3, #101	; 0x65
 8007bb4:	f887 31ba 	strb.w	r3, [r7, #442]	; 0x1ba
 8007bb8:	238b      	movs	r3, #139	; 0x8b
 8007bba:	f887 31b9 	strb.w	r3, [r7, #441]	; 0x1b9
 8007bbe:	f897 31bb 	ldrb.w	r3, [r7, #443]	; 0x1bb
 8007bc2:	041b      	lsls	r3, r3, #16
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	f897 31ba 	ldrb.w	r3, [r7, #442]	; 0x1ba
 8007bca:	021b      	lsls	r3, r3, #8
 8007bcc:	431a      	orrs	r2, r3
 8007bce:	f897 31b9 	ldrb.w	r3, [r7, #441]	; 0x1b9
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007bd8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007bdc:	4611      	mov	r1, r2
 8007bde:	4618      	mov	r0, r3
 8007be0:	f7fd fe14 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 8007be4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4619      	mov	r1, r3
 8007bec:	4620      	mov	r0, r4
 8007bee:	f7fd fedf 	bl	80059b0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Anomaly_Detection_Background.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8007bf2:	1d3b      	adds	r3, r7, #4
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f503 64ab 	add.w	r4, r3, #1368	; 0x558
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
 8007c00:	2300      	movs	r3, #0
 8007c02:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
 8007c06:	2300      	movs	r3, #0
 8007c08:	f887 31bc 	strb.w	r3, [r7, #444]	; 0x1bc
 8007c0c:	f897 31be 	ldrb.w	r3, [r7, #446]	; 0x1be
 8007c10:	041b      	lsls	r3, r3, #16
 8007c12:	461a      	mov	r2, r3
 8007c14:	f897 31bd 	ldrb.w	r3, [r7, #445]	; 0x1bd
 8007c18:	021b      	lsls	r3, r3, #8
 8007c1a:	431a      	orrs	r2, r3
 8007c1c:	f897 31bc 	ldrb.w	r3, [r7, #444]	; 0x1bc
 8007c20:	4313      	orrs	r3, r2
 8007c22:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007c26:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8007c2a:	4611      	mov	r1, r2
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f7fd fded 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 8007c32:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4619      	mov	r1, r3
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	f7fd ff2a 	bl	8005a94 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Anomaly_Detection_Background.setBorderSize(2);
 8007c40:	1d3b      	adds	r3, r7, #4
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 8007c48:	2102      	movs	r1, #2
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f7fd ff30 	bl	8005ab0 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Anomaly_Detection_Panel.add(Anomaly_Detection_Background);
 8007c50:	1d3b      	adds	r3, r7, #4
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f203 522c 	addw	r2, r3, #1324	; 0x52c
 8007c58:	1d3b      	adds	r3, r7, #4
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 8007c60:	4619      	mov	r1, r3
 8007c62:	4610      	mov	r0, r2
 8007c64:	f00f f99c 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Button_Panel.add(Anomaly_Detection_Panel);
 8007c68:	1d3b      	adds	r3, r7, #4
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8007c70:	1d3b      	adds	r3, r7, #4
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f203 532c 	addw	r3, r3, #1324	; 0x52c
 8007c78:	4619      	mov	r1, r3
 8007c7a:	4610      	mov	r0, r2
 8007c7c:	f00f f990 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Message_panel.setPosition(10, 8, 460, 109);
 8007c80:	1d3b      	adds	r3, r7, #4
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f203 508c 	addw	r0, r3, #1420	; 0x58c
 8007c88:	236d      	movs	r3, #109	; 0x6d
 8007c8a:	9300      	str	r3, [sp, #0]
 8007c8c:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
 8007c90:	2208      	movs	r2, #8
 8007c92:	210a      	movs	r1, #10
 8007c94:	f7fc f959 	bl	8003f4a <_ZN8touchgfx8Drawable11setPositionEssss>

    Button_Panel_Background_1.setPosition(0, 0, 460, 109);
 8007c98:	1d3b      	adds	r3, r7, #4
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f503 60b7 	add.w	r0, r3, #1464	; 0x5b8
 8007ca0:	236d      	movs	r3, #109	; 0x6d
 8007ca2:	9300      	str	r3, [sp, #0]
 8007ca4:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
 8007ca8:	2200      	movs	r2, #0
 8007caa:	2100      	movs	r1, #0
 8007cac:	f7fc f94d 	bl	8003f4a <_ZN8touchgfx8Drawable11setPositionEssss>
    Button_Panel_Background_1.setColor(touchgfx::Color::getColorFromRGB(78, 137, 174));
 8007cb0:	1d3b      	adds	r3, r7, #4
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f503 64b7 	add.w	r4, r3, #1464	; 0x5b8
 8007cb8:	234e      	movs	r3, #78	; 0x4e
 8007cba:	f887 31c1 	strb.w	r3, [r7, #449]	; 0x1c1
 8007cbe:	2389      	movs	r3, #137	; 0x89
 8007cc0:	f887 31c0 	strb.w	r3, [r7, #448]	; 0x1c0
 8007cc4:	23ae      	movs	r3, #174	; 0xae
 8007cc6:	f887 31bf 	strb.w	r3, [r7, #447]	; 0x1bf
 8007cca:	f897 31c1 	ldrb.w	r3, [r7, #449]	; 0x1c1
 8007cce:	041b      	lsls	r3, r3, #16
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	f897 31c0 	ldrb.w	r3, [r7, #448]	; 0x1c0
 8007cd6:	021b      	lsls	r3, r3, #8
 8007cd8:	431a      	orrs	r2, r3
 8007cda:	f897 31bf 	ldrb.w	r3, [r7, #447]	; 0x1bf
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007ce4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ce8:	4611      	mov	r1, r2
 8007cea:	4618      	mov	r0, r3
 8007cec:	f7fd fd8e 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 8007cf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	4620      	mov	r0, r4
 8007cfa:	f7fd fe59 	bl	80059b0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Button_Panel_Background_1.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8007cfe:	1d3b      	adds	r3, r7, #4
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f503 64b7 	add.w	r4, r3, #1464	; 0x5b8
 8007d06:	23ed      	movs	r3, #237	; 0xed
 8007d08:	f887 31c4 	strb.w	r3, [r7, #452]	; 0x1c4
 8007d0c:	2366      	movs	r3, #102	; 0x66
 8007d0e:	f887 31c3 	strb.w	r3, [r7, #451]	; 0x1c3
 8007d12:	2363      	movs	r3, #99	; 0x63
 8007d14:	f887 31c2 	strb.w	r3, [r7, #450]	; 0x1c2
 8007d18:	f897 31c4 	ldrb.w	r3, [r7, #452]	; 0x1c4
 8007d1c:	041b      	lsls	r3, r3, #16
 8007d1e:	461a      	mov	r2, r3
 8007d20:	f897 31c3 	ldrb.w	r3, [r7, #451]	; 0x1c3
 8007d24:	021b      	lsls	r3, r3, #8
 8007d26:	431a      	orrs	r2, r3
 8007d28:	f897 31c2 	ldrb.w	r3, [r7, #450]	; 0x1c2
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007d32:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8007d36:	4611      	mov	r1, r2
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f7fd fd67 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 8007d3e:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4619      	mov	r1, r3
 8007d46:	4620      	mov	r0, r4
 8007d48:	f7fd fea4 	bl	8005a94 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Button_Panel_Background_1.setBorderSize(5);
 8007d4c:	1d3b      	adds	r3, r7, #4
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 8007d54:	2105      	movs	r1, #5
 8007d56:	4618      	mov	r0, r3
 8007d58:	f7fd feaa 	bl	8005ab0 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Message_panel.add(Button_Panel_Background_1);
 8007d5c:	1d3b      	adds	r3, r7, #4
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f203 528c 	addw	r2, r3, #1420	; 0x58c
 8007d64:	1d3b      	adds	r3, r7, #4
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	4610      	mov	r0, r2
 8007d70:	f00f f916 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Message_Board_Panel_1.setPosition(5, 4, 450, 100);
 8007d74:	1d3b      	adds	r3, r7, #4
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f203 50ec 	addw	r0, r3, #1516	; 0x5ec
 8007d7c:	2364      	movs	r3, #100	; 0x64
 8007d7e:	9300      	str	r3, [sp, #0]
 8007d80:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 8007d84:	2204      	movs	r2, #4
 8007d86:	2105      	movs	r1, #5
 8007d88:	f7fc f8df 	bl	8003f4a <_ZN8touchgfx8Drawable11setPositionEssss>

    MessageBoard_Background_1.setPosition(0, 0, 450, 100);
 8007d8c:	1d3b      	adds	r3, r7, #4
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f503 60c3 	add.w	r0, r3, #1560	; 0x618
 8007d94:	2364      	movs	r3, #100	; 0x64
 8007d96:	9300      	str	r3, [sp, #0]
 8007d98:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	2100      	movs	r1, #0
 8007da0:	f7fc f8d3 	bl	8003f4a <_ZN8touchgfx8Drawable11setPositionEssss>
    MessageBoard_Background_1.setColor(touchgfx::Color::getColorFromRGB(67, 101, 139));
 8007da4:	1d3b      	adds	r3, r7, #4
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f503 64c3 	add.w	r4, r3, #1560	; 0x618
 8007dac:	2343      	movs	r3, #67	; 0x43
 8007dae:	f887 31c7 	strb.w	r3, [r7, #455]	; 0x1c7
 8007db2:	2365      	movs	r3, #101	; 0x65
 8007db4:	f887 31c6 	strb.w	r3, [r7, #454]	; 0x1c6
 8007db8:	238b      	movs	r3, #139	; 0x8b
 8007dba:	f887 31c5 	strb.w	r3, [r7, #453]	; 0x1c5
 8007dbe:	f897 31c7 	ldrb.w	r3, [r7, #455]	; 0x1c7
 8007dc2:	041b      	lsls	r3, r3, #16
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	f897 31c6 	ldrb.w	r3, [r7, #454]	; 0x1c6
 8007dca:	021b      	lsls	r3, r3, #8
 8007dcc:	431a      	orrs	r2, r3
 8007dce:	f897 31c5 	ldrb.w	r3, [r7, #453]	; 0x1c5
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007dd8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8007ddc:	4611      	mov	r1, r2
 8007dde:	4618      	mov	r0, r3
 8007de0:	f7fd fd14 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 8007de4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4619      	mov	r1, r3
 8007dec:	4620      	mov	r0, r4
 8007dee:	f7fd fddf 	bl	80059b0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    MessageBoard_Background_1.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8007df2:	1d3b      	adds	r3, r7, #4
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f503 64c3 	add.w	r4, r3, #1560	; 0x618
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	f887 31ca 	strb.w	r3, [r7, #458]	; 0x1ca
 8007e00:	2300      	movs	r3, #0
 8007e02:	f887 31c9 	strb.w	r3, [r7, #457]	; 0x1c9
 8007e06:	2300      	movs	r3, #0
 8007e08:	f887 31c8 	strb.w	r3, [r7, #456]	; 0x1c8
 8007e0c:	f897 31ca 	ldrb.w	r3, [r7, #458]	; 0x1ca
 8007e10:	041b      	lsls	r3, r3, #16
 8007e12:	461a      	mov	r2, r3
 8007e14:	f897 31c9 	ldrb.w	r3, [r7, #457]	; 0x1c9
 8007e18:	021b      	lsls	r3, r3, #8
 8007e1a:	431a      	orrs	r2, r3
 8007e1c:	f897 31c8 	ldrb.w	r3, [r7, #456]	; 0x1c8
 8007e20:	4313      	orrs	r3, r2
 8007e22:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007e26:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8007e2a:	4611      	mov	r1, r2
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f7fd fced 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 8007e32:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4619      	mov	r1, r3
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	f7fd fe2a 	bl	8005a94 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    MessageBoard_Background_1.setBorderSize(2);
 8007e40:	1d3b      	adds	r3, r7, #4
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f503 63c3 	add.w	r3, r3, #1560	; 0x618
 8007e48:	2102      	movs	r1, #2
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f7fd fe30 	bl	8005ab0 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Message_Board_Panel_1.add(MessageBoard_Background_1);
 8007e50:	1d3b      	adds	r3, r7, #4
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f203 52ec 	addw	r2, r3, #1516	; 0x5ec
 8007e58:	1d3b      	adds	r3, r7, #4
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f503 63c3 	add.w	r3, r3, #1560	; 0x618
 8007e60:	4619      	mov	r1, r3
 8007e62:	4610      	mov	r0, r2
 8007e64:	f00f f89c 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Message_Board_Textbox_1.setPosition(176, 0, 99, 20);
 8007e68:	1d3b      	adds	r3, r7, #4
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f203 604c 	addw	r0, r3, #1612	; 0x64c
 8007e70:	2314      	movs	r3, #20
 8007e72:	9300      	str	r3, [sp, #0]
 8007e74:	2363      	movs	r3, #99	; 0x63
 8007e76:	2200      	movs	r2, #0
 8007e78:	21b0      	movs	r1, #176	; 0xb0
 8007e7a:	f7fc f866 	bl	8003f4a <_ZN8touchgfx8Drawable11setPositionEssss>

    MessageBoard_Border_1_1.setPosition(0, 3, 99, 17);
 8007e7e:	1d3b      	adds	r3, r7, #4
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f503 60cf 	add.w	r0, r3, #1656	; 0x678
 8007e86:	2311      	movs	r3, #17
 8007e88:	9300      	str	r3, [sp, #0]
 8007e8a:	2363      	movs	r3, #99	; 0x63
 8007e8c:	2203      	movs	r2, #3
 8007e8e:	2100      	movs	r1, #0
 8007e90:	f7fc f85b 	bl	8003f4a <_ZN8touchgfx8Drawable11setPositionEssss>
    MessageBoard_Border_1_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8007e94:	1d3b      	adds	r3, r7, #4
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f503 64cf 	add.w	r4, r3, #1656	; 0x678
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	f887 31cd 	strb.w	r3, [r7, #461]	; 0x1cd
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	f887 31cc 	strb.w	r3, [r7, #460]	; 0x1cc
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	f887 31cb 	strb.w	r3, [r7, #459]	; 0x1cb
 8007eae:	f897 31cd 	ldrb.w	r3, [r7, #461]	; 0x1cd
 8007eb2:	041b      	lsls	r3, r3, #16
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 8007eba:	021b      	lsls	r3, r3, #8
 8007ebc:	431a      	orrs	r2, r3
 8007ebe:	f897 31cb 	ldrb.w	r3, [r7, #459]	; 0x1cb
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007ec8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007ecc:	4611      	mov	r1, r2
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7fd fc9c 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 8007ed4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4619      	mov	r1, r3
 8007edc:	4620      	mov	r0, r4
 8007ede:	f7fd fd67 	bl	80059b0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    MessageBoard_Border_1_1.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8007ee2:	1d3b      	adds	r3, r7, #4
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f503 64cf 	add.w	r4, r3, #1656	; 0x678
 8007eea:	23ed      	movs	r3, #237	; 0xed
 8007eec:	f887 31d0 	strb.w	r3, [r7, #464]	; 0x1d0
 8007ef0:	2366      	movs	r3, #102	; 0x66
 8007ef2:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
 8007ef6:	2363      	movs	r3, #99	; 0x63
 8007ef8:	f887 31ce 	strb.w	r3, [r7, #462]	; 0x1ce
 8007efc:	f897 31d0 	ldrb.w	r3, [r7, #464]	; 0x1d0
 8007f00:	041b      	lsls	r3, r3, #16
 8007f02:	461a      	mov	r2, r3
 8007f04:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 8007f08:	021b      	lsls	r3, r3, #8
 8007f0a:	431a      	orrs	r2, r3
 8007f0c:	f897 31ce 	ldrb.w	r3, [r7, #462]	; 0x1ce
 8007f10:	4313      	orrs	r3, r2
 8007f12:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007f16:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8007f1a:	4611      	mov	r1, r2
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f7fd fc75 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 8007f22:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4619      	mov	r1, r3
 8007f2a:	4620      	mov	r0, r4
 8007f2c:	f7fd fdb2 	bl	8005a94 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    MessageBoard_Border_1_1.setBorderSize(3);
 8007f30:	1d3b      	adds	r3, r7, #4
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f503 63cf 	add.w	r3, r3, #1656	; 0x678
 8007f38:	2103      	movs	r1, #3
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f7fd fdb8 	bl	8005ab0 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Message_Board_Textbox_1.add(MessageBoard_Border_1_1);
 8007f40:	1d3b      	adds	r3, r7, #4
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f203 624c 	addw	r2, r3, #1612	; 0x64c
 8007f48:	1d3b      	adds	r3, r7, #4
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f503 63cf 	add.w	r3, r3, #1656	; 0x678
 8007f50:	4619      	mov	r1, r3
 8007f52:	4610      	mov	r0, r2
 8007f54:	f00f f824 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    MessageBoard_Text_1.setXY(7, 5);
 8007f58:	1d3b      	adds	r3, r7, #4
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f203 63ac 	addw	r3, r3, #1708	; 0x6ac
 8007f60:	2205      	movs	r2, #5
 8007f62:	2107      	movs	r1, #7
 8007f64:	4618      	mov	r0, r3
 8007f66:	f7fc f849 	bl	8003ffc <_ZN8touchgfx8Drawable5setXYEss>
    MessageBoard_Text_1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8007f6a:	1d3b      	adds	r3, r7, #4
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f203 64ac 	addw	r4, r3, #1708	; 0x6ac
 8007f72:	23ff      	movs	r3, #255	; 0xff
 8007f74:	f887 31d3 	strb.w	r3, [r7, #467]	; 0x1d3
 8007f78:	23ff      	movs	r3, #255	; 0xff
 8007f7a:	f887 31d2 	strb.w	r3, [r7, #466]	; 0x1d2
 8007f7e:	23ff      	movs	r3, #255	; 0xff
 8007f80:	f887 31d1 	strb.w	r3, [r7, #465]	; 0x1d1
 8007f84:	f897 31d3 	ldrb.w	r3, [r7, #467]	; 0x1d3
 8007f88:	041b      	lsls	r3, r3, #16
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	f897 31d2 	ldrb.w	r3, [r7, #466]	; 0x1d2
 8007f90:	021b      	lsls	r3, r3, #8
 8007f92:	431a      	orrs	r2, r3
 8007f94:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007f9e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007fa2:	4611      	mov	r1, r2
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f7fd fc31 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 8007faa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	f8c7 41d4 	str.w	r4, [r7, #468]	; 0x1d4
 8007fb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fba:	601a      	str	r2, [r3, #0]
        this->color = color;
 8007fbc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8007fc0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007fc4:	6812      	ldr	r2, [r2, #0]
 8007fc6:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8007fc8:	bf00      	nop
    MessageBoard_Text_1.setLinespacing(0);
 8007fca:	1d3b      	adds	r3, r7, #4
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f203 63ac 	addw	r3, r3, #1708	; 0x6ac
 8007fd2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	f8a7 31da 	strh.w	r3, [r7, #474]	; 0x1da
        linespace = space;
 8007fdc:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8007fe0:	f8b7 21da 	ldrh.w	r2, [r7, #474]	; 0x1da
 8007fe4:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8007fe6:	bf00      	nop
    MessageBoard_Text_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_0Y28));
 8007fe8:	1d3b      	adds	r3, r7, #4
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f203 64ac 	addw	r4, r3, #1708	; 0x6ac
 8007ff0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007ff4:	2102      	movs	r1, #2
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f7fd fd6a 	bl	8005ad0 <_ZN8touchgfx9TypedTextC1Et>
 8007ffc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8008000:	4619      	mov	r1, r3
 8008002:	4620      	mov	r0, r4
 8008004:	f010 fef7 	bl	8018df6 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8008008:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800800c:	4618      	mov	r0, r3
 800800e:	f7fb fee9 	bl	8003de4 <_ZN8touchgfx9TypedTextD1Ev>
    Message_Board_Textbox_1.add(MessageBoard_Text_1);
 8008012:	1d3b      	adds	r3, r7, #4
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f203 624c 	addw	r2, r3, #1612	; 0x64c
 800801a:	1d3b      	adds	r3, r7, #4
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f203 63ac 	addw	r3, r3, #1708	; 0x6ac
 8008022:	4619      	mov	r1, r3
 8008024:	4610      	mov	r0, r2
 8008026:	f00e ffbb 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Message_Board_Panel_1.add(Message_Board_Textbox_1);
 800802a:	1d3b      	adds	r3, r7, #4
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f203 52ec 	addw	r2, r3, #1516	; 0x5ec
 8008032:	1d3b      	adds	r3, r7, #4
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 800803a:	4619      	mov	r1, r3
 800803c:	4610      	mov	r0, r2
 800803e:	f00e ffaf 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    VoiceComm_Textbox_1.setPosition(294, 0, 114, 98);
 8008042:	1d3b      	adds	r3, r7, #4
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f503 60dd 	add.w	r0, r3, #1768	; 0x6e8
 800804a:	2362      	movs	r3, #98	; 0x62
 800804c:	9300      	str	r3, [sp, #0]
 800804e:	2372      	movs	r3, #114	; 0x72
 8008050:	2200      	movs	r2, #0
 8008052:	f44f 7193 	mov.w	r1, #294	; 0x126
 8008056:	f7fb ff78 	bl	8003f4a <_ZN8touchgfx8Drawable11setPositionEssss>

    VoiceCommMess_Background.setPosition(2, 2, 112, 96);
 800805a:	1d3b      	adds	r3, r7, #4
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f203 7014 	addw	r0, r3, #1812	; 0x714
 8008062:	2360      	movs	r3, #96	; 0x60
 8008064:	9300      	str	r3, [sp, #0]
 8008066:	2370      	movs	r3, #112	; 0x70
 8008068:	2202      	movs	r2, #2
 800806a:	2102      	movs	r1, #2
 800806c:	f7fb ff6d 	bl	8003f4a <_ZN8touchgfx8Drawable11setPositionEssss>
    VoiceCommMess_Background.setColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8008070:	1d3b      	adds	r3, r7, #4
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f203 7414 	addw	r4, r3, #1812	; 0x714
 8008078:	23ed      	movs	r3, #237	; 0xed
 800807a:	f887 31e3 	strb.w	r3, [r7, #483]	; 0x1e3
 800807e:	2366      	movs	r3, #102	; 0x66
 8008080:	f887 31e2 	strb.w	r3, [r7, #482]	; 0x1e2
 8008084:	2363      	movs	r3, #99	; 0x63
 8008086:	f887 31e1 	strb.w	r3, [r7, #481]	; 0x1e1
 800808a:	f897 31e3 	ldrb.w	r3, [r7, #483]	; 0x1e3
 800808e:	041b      	lsls	r3, r3, #16
 8008090:	461a      	mov	r2, r3
 8008092:	f897 31e2 	ldrb.w	r3, [r7, #482]	; 0x1e2
 8008096:	021b      	lsls	r3, r3, #8
 8008098:	431a      	orrs	r2, r3
 800809a:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 800809e:	4313      	orrs	r3, r2
 80080a0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80080a4:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80080a8:	4611      	mov	r1, r2
 80080aa:	4618      	mov	r0, r3
 80080ac:	f7fd fbae 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 80080b0:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4619      	mov	r1, r3
 80080b8:	4620      	mov	r0, r4
 80080ba:	f7fd fc79 	bl	80059b0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    VoiceCommMess_Background.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80080be:	1d3b      	adds	r3, r7, #4
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f203 7414 	addw	r4, r3, #1812	; 0x714
 80080c6:	2300      	movs	r3, #0
 80080c8:	f887 31e6 	strb.w	r3, [r7, #486]	; 0x1e6
 80080cc:	2300      	movs	r3, #0
 80080ce:	f887 31e5 	strb.w	r3, [r7, #485]	; 0x1e5
 80080d2:	2300      	movs	r3, #0
 80080d4:	f887 31e4 	strb.w	r3, [r7, #484]	; 0x1e4
 80080d8:	f897 31e6 	ldrb.w	r3, [r7, #486]	; 0x1e6
 80080dc:	041b      	lsls	r3, r3, #16
 80080de:	461a      	mov	r2, r3
 80080e0:	f897 31e5 	ldrb.w	r3, [r7, #485]	; 0x1e5
 80080e4:	021b      	lsls	r3, r3, #8
 80080e6:	431a      	orrs	r2, r3
 80080e8:	f897 31e4 	ldrb.w	r3, [r7, #484]	; 0x1e4
 80080ec:	4313      	orrs	r3, r2
 80080ee:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80080f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80080f6:	4611      	mov	r1, r2
 80080f8:	4618      	mov	r0, r3
 80080fa:	f7fd fb87 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 80080fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4619      	mov	r1, r3
 8008106:	4620      	mov	r0, r4
 8008108:	f7fd fcc4 	bl	8005a94 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    VoiceCommMess_Background.setBorderSize(3);
 800810c:	1d3b      	adds	r3, r7, #4
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f203 7314 	addw	r3, r3, #1812	; 0x714
 8008114:	2103      	movs	r1, #3
 8008116:	4618      	mov	r0, r3
 8008118:	f7fd fcca 	bl	8005ab0 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    VoiceComm_Textbox_1.add(VoiceCommMess_Background);
 800811c:	1d3b      	adds	r3, r7, #4
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f503 62dd 	add.w	r2, r3, #1768	; 0x6e8
 8008124:	1d3b      	adds	r3, r7, #4
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f203 7314 	addw	r3, r3, #1812	; 0x714
 800812c:	4619      	mov	r1, r3
 800812e:	4610      	mov	r0, r2
 8008130:	f00e ff36 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    VoiceCommMess_Background2.setPosition(16, 10, 84, 80);
 8008134:	1d3b      	adds	r3, r7, #4
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f503 60e9 	add.w	r0, r3, #1864	; 0x748
 800813c:	2350      	movs	r3, #80	; 0x50
 800813e:	9300      	str	r3, [sp, #0]
 8008140:	2354      	movs	r3, #84	; 0x54
 8008142:	220a      	movs	r2, #10
 8008144:	2110      	movs	r1, #16
 8008146:	f7fb ff00 	bl	8003f4a <_ZN8touchgfx8Drawable11setPositionEssss>
    VoiceCommMess_Background2.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800814a:	1d3b      	adds	r3, r7, #4
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f503 64e9 	add.w	r4, r3, #1864	; 0x748
 8008152:	2300      	movs	r3, #0
 8008154:	f887 31e9 	strb.w	r3, [r7, #489]	; 0x1e9
 8008158:	2300      	movs	r3, #0
 800815a:	f887 31e8 	strb.w	r3, [r7, #488]	; 0x1e8
 800815e:	2300      	movs	r3, #0
 8008160:	f887 31e7 	strb.w	r3, [r7, #487]	; 0x1e7
 8008164:	f897 31e9 	ldrb.w	r3, [r7, #489]	; 0x1e9
 8008168:	041b      	lsls	r3, r3, #16
 800816a:	461a      	mov	r2, r3
 800816c:	f897 31e8 	ldrb.w	r3, [r7, #488]	; 0x1e8
 8008170:	021b      	lsls	r3, r3, #8
 8008172:	431a      	orrs	r2, r3
 8008174:	f897 31e7 	ldrb.w	r3, [r7, #487]	; 0x1e7
 8008178:	4313      	orrs	r3, r2
 800817a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800817e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8008182:	4611      	mov	r1, r2
 8008184:	4618      	mov	r0, r3
 8008186:	f7fd fb41 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 800818a:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4619      	mov	r1, r3
 8008192:	4620      	mov	r0, r4
 8008194:	f7fd fc0c 	bl	80059b0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    VoiceCommMess_Background2.setBorderColor(touchgfx::Color::getColorFromRGB(67, 101, 139));
 8008198:	1d3b      	adds	r3, r7, #4
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f503 64e9 	add.w	r4, r3, #1864	; 0x748
 80081a0:	2343      	movs	r3, #67	; 0x43
 80081a2:	f887 31ec 	strb.w	r3, [r7, #492]	; 0x1ec
 80081a6:	2365      	movs	r3, #101	; 0x65
 80081a8:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
 80081ac:	238b      	movs	r3, #139	; 0x8b
 80081ae:	f887 31ea 	strb.w	r3, [r7, #490]	; 0x1ea
 80081b2:	f897 31ec 	ldrb.w	r3, [r7, #492]	; 0x1ec
 80081b6:	041b      	lsls	r3, r3, #16
 80081b8:	461a      	mov	r2, r3
 80081ba:	f897 31eb 	ldrb.w	r3, [r7, #491]	; 0x1eb
 80081be:	021b      	lsls	r3, r3, #8
 80081c0:	431a      	orrs	r2, r3
 80081c2:	f897 31ea 	ldrb.w	r3, [r7, #490]	; 0x1ea
 80081c6:	4313      	orrs	r3, r2
 80081c8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80081cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081d0:	4611      	mov	r1, r2
 80081d2:	4618      	mov	r0, r3
 80081d4:	f7fd fb1a 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 80081d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4619      	mov	r1, r3
 80081e0:	4620      	mov	r0, r4
 80081e2:	f7fd fc57 	bl	8005a94 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    VoiceCommMess_Background2.setBorderSize(3);
 80081e6:	1d3b      	adds	r3, r7, #4
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
 80081ee:	2103      	movs	r1, #3
 80081f0:	4618      	mov	r0, r3
 80081f2:	f7fd fc5d 	bl	8005ab0 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    VoiceComm_Textbox_1.add(VoiceCommMess_Background2);
 80081f6:	1d3b      	adds	r3, r7, #4
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f503 62dd 	add.w	r2, r3, #1768	; 0x6e8
 80081fe:	1d3b      	adds	r3, r7, #4
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
 8008206:	4619      	mov	r1, r3
 8008208:	4610      	mov	r0, r2
 800820a:	f00e fec9 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    VoiceCommMess_Text_On.setXY(36, 13);
 800820e:	1d3b      	adds	r3, r7, #4
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8008216:	220d      	movs	r2, #13
 8008218:	2124      	movs	r1, #36	; 0x24
 800821a:	4618      	mov	r0, r3
 800821c:	f7fb feee 	bl	8003ffc <_ZN8touchgfx8Drawable5setXYEss>
    VoiceCommMess_Text_On.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8008220:	1d3b      	adds	r3, r7, #4
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f203 747c 	addw	r4, r3, #1916	; 0x77c
 8008228:	23ff      	movs	r3, #255	; 0xff
 800822a:	f887 31ef 	strb.w	r3, [r7, #495]	; 0x1ef
 800822e:	23ff      	movs	r3, #255	; 0xff
 8008230:	f887 31ee 	strb.w	r3, [r7, #494]	; 0x1ee
 8008234:	23ff      	movs	r3, #255	; 0xff
 8008236:	f887 31ed 	strb.w	r3, [r7, #493]	; 0x1ed
 800823a:	f897 31ef 	ldrb.w	r3, [r7, #495]	; 0x1ef
 800823e:	041b      	lsls	r3, r3, #16
 8008240:	461a      	mov	r2, r3
 8008242:	f897 31ee 	ldrb.w	r3, [r7, #494]	; 0x1ee
 8008246:	021b      	lsls	r3, r3, #8
 8008248:	431a      	orrs	r2, r3
 800824a:	f897 31ed 	ldrb.w	r3, [r7, #493]	; 0x1ed
 800824e:	4313      	orrs	r3, r2
 8008250:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008254:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8008258:	4611      	mov	r1, r2
 800825a:	4618      	mov	r0, r3
 800825c:	f7fd fad6 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 8008260:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	461a      	mov	r2, r3
 8008268:	f8c7 41f0 	str.w	r4, [r7, #496]	; 0x1f0
 800826c:	f107 0320 	add.w	r3, r7, #32
 8008270:	601a      	str	r2, [r3, #0]
        this->color = color;
 8008272:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8008276:	f107 0220 	add.w	r2, r7, #32
 800827a:	6812      	ldr	r2, [r2, #0]
 800827c:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800827e:	bf00      	nop
    VoiceCommMess_Text_On.setLinespacing(0);
 8008280:	1d3b      	adds	r3, r7, #4
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8008288:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 800828c:	2300      	movs	r3, #0
 800828e:	f8a7 31f6 	strh.w	r3, [r7, #502]	; 0x1f6
        linespace = space;
 8008292:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008296:	f8b7 21f6 	ldrh.w	r2, [r7, #502]	; 0x1f6
 800829a:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 800829c:	bf00      	nop
    VoiceCommMess_Text_On.setTypedText(touchgfx::TypedText(T___SINGLEUSE_LNSV));
 800829e:	1d3b      	adds	r3, r7, #4
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f203 747c 	addw	r4, r3, #1916	; 0x77c
 80082a6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80082aa:	2105      	movs	r1, #5
 80082ac:	4618      	mov	r0, r3
 80082ae:	f7fd fc0f 	bl	8005ad0 <_ZN8touchgfx9TypedTextC1Et>
 80082b2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80082b6:	4619      	mov	r1, r3
 80082b8:	4620      	mov	r0, r4
 80082ba:	f010 fd9c 	bl	8018df6 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80082be:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7fb fd8e 	bl	8003de4 <_ZN8touchgfx9TypedTextD1Ev>
    VoiceComm_Textbox_1.add(VoiceCommMess_Text_On);
 80082c8:	1d3b      	adds	r3, r7, #4
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f503 62dd 	add.w	r2, r3, #1768	; 0x6e8
 80082d0:	1d3b      	adds	r3, r7, #4
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 80082d8:	4619      	mov	r1, r3
 80082da:	4610      	mov	r0, r2
 80082dc:	f00e fe60 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    VoiceCommMess_Text_Off.setXY(36, 13);
 80082e0:	1d3b      	adds	r3, r7, #4
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 80082e8:	220d      	movs	r2, #13
 80082ea:	2124      	movs	r1, #36	; 0x24
 80082ec:	4618      	mov	r0, r3
 80082ee:	f7fb fe85 	bl	8003ffc <_ZN8touchgfx8Drawable5setXYEss>
    VoiceCommMess_Text_Off.setVisible(false);
 80082f2:	1d3b      	adds	r3, r7, #4
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 80082fa:	2100      	movs	r1, #0
 80082fc:	4618      	mov	r0, r3
 80082fe:	f7fe fbec 	bl	8006ada <_ZN8touchgfx8Drawable10setVisibleEb>
    VoiceCommMess_Text_Off.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8008302:	1d3b      	adds	r3, r7, #4
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f503 64f7 	add.w	r4, r3, #1976	; 0x7b8
 800830a:	23ff      	movs	r3, #255	; 0xff
 800830c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
 8008310:	23ff      	movs	r3, #255	; 0xff
 8008312:	f887 31fe 	strb.w	r3, [r7, #510]	; 0x1fe
 8008316:	23ff      	movs	r3, #255	; 0xff
 8008318:	f887 31fd 	strb.w	r3, [r7, #509]	; 0x1fd
 800831c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8008320:	041b      	lsls	r3, r3, #16
 8008322:	461a      	mov	r2, r3
 8008324:	f897 31fe 	ldrb.w	r3, [r7, #510]	; 0x1fe
 8008328:	021b      	lsls	r3, r3, #8
 800832a:	431a      	orrs	r2, r3
 800832c:	f897 31fd 	ldrb.w	r3, [r7, #509]	; 0x1fd
 8008330:	4313      	orrs	r3, r2
 8008332:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008336:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800833a:	4611      	mov	r1, r2
 800833c:	4618      	mov	r0, r3
 800833e:	f7fd fa65 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 8008342:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	461a      	mov	r2, r3
 800834a:	f8c7 4200 	str.w	r4, [r7, #512]	; 0x200
 800834e:	f107 031c 	add.w	r3, r7, #28
 8008352:	601a      	str	r2, [r3, #0]
        this->color = color;
 8008354:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008358:	f107 021c 	add.w	r2, r7, #28
 800835c:	6812      	ldr	r2, [r2, #0]
 800835e:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8008360:	bf00      	nop
    VoiceCommMess_Text_Off.setLinespacing(0);
 8008362:	1d3b      	adds	r3, r7, #4
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 800836a:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 800836e:	2300      	movs	r3, #0
 8008370:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
        linespace = space;
 8008374:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8008378:	f8b7 2206 	ldrh.w	r2, [r7, #518]	; 0x206
 800837c:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 800837e:	bf00      	nop
    VoiceCommMess_Text_Off.setTypedText(touchgfx::TypedText(T___SINGLEUSE_GO11));
 8008380:	1d3b      	adds	r3, r7, #4
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f503 64f7 	add.w	r4, r3, #1976	; 0x7b8
 8008388:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800838c:	210a      	movs	r1, #10
 800838e:	4618      	mov	r0, r3
 8008390:	f7fd fb9e 	bl	8005ad0 <_ZN8touchgfx9TypedTextC1Et>
 8008394:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008398:	4619      	mov	r1, r3
 800839a:	4620      	mov	r0, r4
 800839c:	f010 fd2b 	bl	8018df6 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80083a0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80083a4:	4618      	mov	r0, r3
 80083a6:	f7fb fd1d 	bl	8003de4 <_ZN8touchgfx9TypedTextD1Ev>
    VoiceComm_Textbox_1.add(VoiceCommMess_Text_Off);
 80083aa:	1d3b      	adds	r3, r7, #4
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f503 62dd 	add.w	r2, r3, #1768	; 0x6e8
 80083b2:	1d3b      	adds	r3, r7, #4
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 80083ba:	4619      	mov	r1, r3
 80083bc:	4610      	mov	r0, r2
 80083be:	f00e fdef 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Message_Board_Panel_1.add(VoiceComm_Textbox_1);
 80083c2:	1d3b      	adds	r3, r7, #4
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f203 52ec 	addw	r2, r3, #1516	; 0x5ec
 80083ca:	1d3b      	adds	r3, r7, #4
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f503 63dd 	add.w	r3, r3, #1768	; 0x6e8
 80083d2:	4619      	mov	r1, r3
 80083d4:	4610      	mov	r0, r2
 80083d6:	f00e fde3 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    AnomalyWarning_Textbox_1_1.setPosition(42, 0, 117, 98);
 80083da:	1d3b      	adds	r3, r7, #4
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f203 70f4 	addw	r0, r3, #2036	; 0x7f4
 80083e2:	2362      	movs	r3, #98	; 0x62
 80083e4:	9300      	str	r3, [sp, #0]
 80083e6:	2375      	movs	r3, #117	; 0x75
 80083e8:	2200      	movs	r2, #0
 80083ea:	212a      	movs	r1, #42	; 0x2a
 80083ec:	f7fb fdad 	bl	8003f4a <_ZN8touchgfx8Drawable11setPositionEssss>

    MessageBoard_Border_1_1_1_2.setPosition(2, 2, 115, 96);
 80083f0:	1d3b      	adds	r3, r7, #4
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f503 6002 	add.w	r0, r3, #2080	; 0x820
 80083f8:	2360      	movs	r3, #96	; 0x60
 80083fa:	9300      	str	r3, [sp, #0]
 80083fc:	2373      	movs	r3, #115	; 0x73
 80083fe:	2202      	movs	r2, #2
 8008400:	2102      	movs	r1, #2
 8008402:	f7fb fda2 	bl	8003f4a <_ZN8touchgfx8Drawable11setPositionEssss>
    MessageBoard_Border_1_1_1_2.setColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8008406:	1d3b      	adds	r3, r7, #4
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f503 6402 	add.w	r4, r3, #2080	; 0x820
 800840e:	23ed      	movs	r3, #237	; 0xed
 8008410:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 8008414:	2366      	movs	r3, #102	; 0x66
 8008416:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 800841a:	2363      	movs	r3, #99	; 0x63
 800841c:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 8008420:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8008424:	041b      	lsls	r3, r3, #16
 8008426:	461a      	mov	r2, r3
 8008428:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 800842c:	021b      	lsls	r3, r3, #8
 800842e:	431a      	orrs	r2, r3
 8008430:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8008434:	4313      	orrs	r3, r2
 8008436:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800843a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800843e:	4611      	mov	r1, r2
 8008440:	4618      	mov	r0, r3
 8008442:	f7fd f9e3 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 8008446:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4619      	mov	r1, r3
 800844e:	4620      	mov	r0, r4
 8008450:	f7fd faae 	bl	80059b0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    MessageBoard_Border_1_1_1_2.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8008454:	1d3b      	adds	r3, r7, #4
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f503 6402 	add.w	r4, r3, #2080	; 0x820
 800845c:	2300      	movs	r3, #0
 800845e:	f887 3212 	strb.w	r3, [r7, #530]	; 0x212
 8008462:	2300      	movs	r3, #0
 8008464:	f887 3211 	strb.w	r3, [r7, #529]	; 0x211
 8008468:	2300      	movs	r3, #0
 800846a:	f887 3210 	strb.w	r3, [r7, #528]	; 0x210
 800846e:	f897 3212 	ldrb.w	r3, [r7, #530]	; 0x212
 8008472:	041b      	lsls	r3, r3, #16
 8008474:	461a      	mov	r2, r3
 8008476:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 800847a:	021b      	lsls	r3, r3, #8
 800847c:	431a      	orrs	r2, r3
 800847e:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 8008482:	4313      	orrs	r3, r2
 8008484:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008488:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800848c:	4611      	mov	r1, r2
 800848e:	4618      	mov	r0, r3
 8008490:	f7fd f9bc 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 8008494:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4619      	mov	r1, r3
 800849c:	4620      	mov	r0, r4
 800849e:	f7fd faf9 	bl	8005a94 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    MessageBoard_Border_1_1_1_2.setBorderSize(3);
 80084a2:	1d3b      	adds	r3, r7, #4
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 80084aa:	2103      	movs	r1, #3
 80084ac:	4618      	mov	r0, r3
 80084ae:	f7fd faff 	bl	8005ab0 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    AnomalyWarning_Textbox_1_1.add(MessageBoard_Border_1_1_1_2);
 80084b2:	1d3b      	adds	r3, r7, #4
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f203 72f4 	addw	r2, r3, #2036	; 0x7f4
 80084ba:	1d3b      	adds	r3, r7, #4
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 80084c2:	4619      	mov	r1, r3
 80084c4:	4610      	mov	r0, r2
 80084c6:	f00e fd6b 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    MessageBoard_Border_1_1_1_1_1.setPosition(16, 10, 89, 80);
 80084ca:	1d3b      	adds	r3, r7, #4
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f603 0054 	addw	r0, r3, #2132	; 0x854
 80084d2:	2350      	movs	r3, #80	; 0x50
 80084d4:	9300      	str	r3, [sp, #0]
 80084d6:	2359      	movs	r3, #89	; 0x59
 80084d8:	220a      	movs	r2, #10
 80084da:	2110      	movs	r1, #16
 80084dc:	f7fb fd35 	bl	8003f4a <_ZN8touchgfx8Drawable11setPositionEssss>
    MessageBoard_Border_1_1_1_1_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80084e0:	1d3b      	adds	r3, r7, #4
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f603 0454 	addw	r4, r3, #2132	; 0x854
 80084e8:	2300      	movs	r3, #0
 80084ea:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215
 80084ee:	2300      	movs	r3, #0
 80084f0:	f887 3214 	strb.w	r3, [r7, #532]	; 0x214
 80084f4:	2300      	movs	r3, #0
 80084f6:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
 80084fa:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 80084fe:	041b      	lsls	r3, r3, #16
 8008500:	461a      	mov	r2, r3
 8008502:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 8008506:	021b      	lsls	r3, r3, #8
 8008508:	431a      	orrs	r2, r3
 800850a:	f897 3213 	ldrb.w	r3, [r7, #531]	; 0x213
 800850e:	4313      	orrs	r3, r2
 8008510:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008514:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8008518:	4611      	mov	r1, r2
 800851a:	4618      	mov	r0, r3
 800851c:	f7fd f976 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 8008520:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4619      	mov	r1, r3
 8008528:	4620      	mov	r0, r4
 800852a:	f7fd fa41 	bl	80059b0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    MessageBoard_Border_1_1_1_1_1.setBorderColor(touchgfx::Color::getColorFromRGB(67, 101, 139));
 800852e:	1d3b      	adds	r3, r7, #4
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f603 0454 	addw	r4, r3, #2132	; 0x854
 8008536:	2343      	movs	r3, #67	; 0x43
 8008538:	f887 3218 	strb.w	r3, [r7, #536]	; 0x218
 800853c:	2365      	movs	r3, #101	; 0x65
 800853e:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
 8008542:	238b      	movs	r3, #139	; 0x8b
 8008544:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216
 8008548:	f897 3218 	ldrb.w	r3, [r7, #536]	; 0x218
 800854c:	041b      	lsls	r3, r3, #16
 800854e:	461a      	mov	r2, r3
 8008550:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8008554:	021b      	lsls	r3, r3, #8
 8008556:	431a      	orrs	r2, r3
 8008558:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 800855c:	4313      	orrs	r3, r2
 800855e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008562:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8008566:	4611      	mov	r1, r2
 8008568:	4618      	mov	r0, r3
 800856a:	f7fd f94f 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 800856e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4619      	mov	r1, r3
 8008576:	4620      	mov	r0, r4
 8008578:	f7fd fa8c 	bl	8005a94 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    MessageBoard_Border_1_1_1_1_1.setBorderSize(3);
 800857c:	1d3b      	adds	r3, r7, #4
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f603 0354 	addw	r3, r3, #2132	; 0x854
 8008584:	2103      	movs	r1, #3
 8008586:	4618      	mov	r0, r3
 8008588:	f7fd fa92 	bl	8005ab0 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    AnomalyWarning_Textbox_1_1.add(MessageBoard_Border_1_1_1_1_1);
 800858c:	1d3b      	adds	r3, r7, #4
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f203 72f4 	addw	r2, r3, #2036	; 0x7f4
 8008594:	1d3b      	adds	r3, r7, #4
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f603 0354 	addw	r3, r3, #2132	; 0x854
 800859c:	4619      	mov	r1, r3
 800859e:	4610      	mov	r0, r2
 80085a0:	f00e fcfe 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    MessageBoard_Message_1.setXY(29, 13);
 80085a4:	1d3b      	adds	r3, r7, #4
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f603 0388 	addw	r3, r3, #2184	; 0x888
 80085ac:	220d      	movs	r2, #13
 80085ae:	211d      	movs	r1, #29
 80085b0:	4618      	mov	r0, r3
 80085b2:	f7fb fd23 	bl	8003ffc <_ZN8touchgfx8Drawable5setXYEss>
    MessageBoard_Message_1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80085b6:	1d3b      	adds	r3, r7, #4
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f603 0488 	addw	r4, r3, #2184	; 0x888
 80085be:	23ff      	movs	r3, #255	; 0xff
 80085c0:	f887 321b 	strb.w	r3, [r7, #539]	; 0x21b
 80085c4:	23ff      	movs	r3, #255	; 0xff
 80085c6:	f887 321a 	strb.w	r3, [r7, #538]	; 0x21a
 80085ca:	23ff      	movs	r3, #255	; 0xff
 80085cc:	f887 3219 	strb.w	r3, [r7, #537]	; 0x219
 80085d0:	f897 321b 	ldrb.w	r3, [r7, #539]	; 0x21b
 80085d4:	041b      	lsls	r3, r3, #16
 80085d6:	461a      	mov	r2, r3
 80085d8:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 80085dc:	021b      	lsls	r3, r3, #8
 80085de:	431a      	orrs	r2, r3
 80085e0:	f897 3219 	ldrb.w	r3, [r7, #537]	; 0x219
 80085e4:	4313      	orrs	r3, r2
 80085e6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80085ea:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80085ee:	4611      	mov	r1, r2
 80085f0:	4618      	mov	r0, r3
 80085f2:	f7fd f90b 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 80085f6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	461a      	mov	r2, r3
 80085fe:	f8c7 421c 	str.w	r4, [r7, #540]	; 0x21c
 8008602:	f107 0318 	add.w	r3, r7, #24
 8008606:	601a      	str	r2, [r3, #0]
        this->color = color;
 8008608:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800860c:	f107 0218 	add.w	r2, r7, #24
 8008610:	6812      	ldr	r2, [r2, #0]
 8008612:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8008614:	bf00      	nop
    MessageBoard_Message_1.setLinespacing(0);
 8008616:	1d3b      	adds	r3, r7, #4
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f603 0388 	addw	r3, r3, #2184	; 0x888
 800861e:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8008622:	2300      	movs	r3, #0
 8008624:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
        linespace = space;
 8008628:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800862c:	f8b7 2222 	ldrh.w	r2, [r7, #546]	; 0x222
 8008630:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8008632:	bf00      	nop
    MessageBoard_Message_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_RLM0));
 8008634:	1d3b      	adds	r3, r7, #4
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f603 0488 	addw	r4, r3, #2184	; 0x888
 800863c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008640:	2106      	movs	r1, #6
 8008642:	4618      	mov	r0, r3
 8008644:	f7fd fa44 	bl	8005ad0 <_ZN8touchgfx9TypedTextC1Et>
 8008648:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800864c:	4619      	mov	r1, r3
 800864e:	4620      	mov	r0, r4
 8008650:	f010 fbd1 	bl	8018df6 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8008654:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008658:	4618      	mov	r0, r3
 800865a:	f7fb fbc3 	bl	8003de4 <_ZN8touchgfx9TypedTextD1Ev>
    AnomalyWarning_Textbox_1_1.add(MessageBoard_Message_1);
 800865e:	1d3b      	adds	r3, r7, #4
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f203 72f4 	addw	r2, r3, #2036	; 0x7f4
 8008666:	1d3b      	adds	r3, r7, #4
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f603 0388 	addw	r3, r3, #2184	; 0x888
 800866e:	4619      	mov	r1, r3
 8008670:	4610      	mov	r0, r2
 8008672:	f00e fc95 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    MessageBoard_Message_Muted.setXY(30, 13);
 8008676:	1d3b      	adds	r3, r7, #4
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f603 03c4 	addw	r3, r3, #2244	; 0x8c4
 800867e:	220d      	movs	r2, #13
 8008680:	211e      	movs	r1, #30
 8008682:	4618      	mov	r0, r3
 8008684:	f7fb fcba 	bl	8003ffc <_ZN8touchgfx8Drawable5setXYEss>
    MessageBoard_Message_Muted.setVisible(false);
 8008688:	1d3b      	adds	r3, r7, #4
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f603 03c4 	addw	r3, r3, #2244	; 0x8c4
 8008690:	2100      	movs	r1, #0
 8008692:	4618      	mov	r0, r3
 8008694:	f7fe fa21 	bl	8006ada <_ZN8touchgfx8Drawable10setVisibleEb>
    MessageBoard_Message_Muted.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8008698:	1d3b      	adds	r3, r7, #4
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f603 04c4 	addw	r4, r3, #2244	; 0x8c4
 80086a0:	23ff      	movs	r3, #255	; 0xff
 80086a2:	f887 322b 	strb.w	r3, [r7, #555]	; 0x22b
 80086a6:	23ff      	movs	r3, #255	; 0xff
 80086a8:	f887 322a 	strb.w	r3, [r7, #554]	; 0x22a
 80086ac:	23ff      	movs	r3, #255	; 0xff
 80086ae:	f887 3229 	strb.w	r3, [r7, #553]	; 0x229
 80086b2:	f897 322b 	ldrb.w	r3, [r7, #555]	; 0x22b
 80086b6:	041b      	lsls	r3, r3, #16
 80086b8:	461a      	mov	r2, r3
 80086ba:	f897 322a 	ldrb.w	r3, [r7, #554]	; 0x22a
 80086be:	021b      	lsls	r3, r3, #8
 80086c0:	431a      	orrs	r2, r3
 80086c2:	f897 3229 	ldrb.w	r3, [r7, #553]	; 0x229
 80086c6:	4313      	orrs	r3, r2
 80086c8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80086cc:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80086d0:	4611      	mov	r1, r2
 80086d2:	4618      	mov	r0, r3
 80086d4:	f7fd f89a 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 80086d8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	461a      	mov	r2, r3
 80086e0:	f8c7 422c 	str.w	r4, [r7, #556]	; 0x22c
 80086e4:	f107 0314 	add.w	r3, r7, #20
 80086e8:	601a      	str	r2, [r3, #0]
        this->color = color;
 80086ea:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80086ee:	f107 0214 	add.w	r2, r7, #20
 80086f2:	6812      	ldr	r2, [r2, #0]
 80086f4:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80086f6:	bf00      	nop
    MessageBoard_Message_Muted.setLinespacing(0);
 80086f8:	1d3b      	adds	r3, r7, #4
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f603 03c4 	addw	r3, r3, #2244	; 0x8c4
 8008700:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 8008704:	2300      	movs	r3, #0
 8008706:	f8a7 3232 	strh.w	r3, [r7, #562]	; 0x232
        linespace = space;
 800870a:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800870e:	f8b7 2232 	ldrh.w	r2, [r7, #562]	; 0x232
 8008712:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8008714:	bf00      	nop
    MessageBoard_Message_Muted.setTypedText(touchgfx::TypedText(T___SINGLEUSE_RFKN));
 8008716:	1d3b      	adds	r3, r7, #4
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f603 04c4 	addw	r4, r3, #2244	; 0x8c4
 800871e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008722:	210b      	movs	r1, #11
 8008724:	4618      	mov	r0, r3
 8008726:	f7fd f9d3 	bl	8005ad0 <_ZN8touchgfx9TypedTextC1Et>
 800872a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800872e:	4619      	mov	r1, r3
 8008730:	4620      	mov	r0, r4
 8008732:	f010 fb60 	bl	8018df6 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8008736:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800873a:	4618      	mov	r0, r3
 800873c:	f7fb fb52 	bl	8003de4 <_ZN8touchgfx9TypedTextD1Ev>
    AnomalyWarning_Textbox_1_1.add(MessageBoard_Message_Muted);
 8008740:	1d3b      	adds	r3, r7, #4
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f203 72f4 	addw	r2, r3, #2036	; 0x7f4
 8008748:	1d3b      	adds	r3, r7, #4
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f603 03c4 	addw	r3, r3, #2244	; 0x8c4
 8008750:	4619      	mov	r1, r3
 8008752:	4610      	mov	r0, r2
 8008754:	f00e fc24 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Message_Board_Panel_1.add(AnomalyWarning_Textbox_1_1);
 8008758:	1d3b      	adds	r3, r7, #4
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f203 52ec 	addw	r2, r3, #1516	; 0x5ec
 8008760:	1d3b      	adds	r3, r7, #4
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f203 73f4 	addw	r3, r3, #2036	; 0x7f4
 8008768:	4619      	mov	r1, r3
 800876a:	4610      	mov	r0, r2
 800876c:	f00e fc18 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Message_panel.add(Message_Board_Panel_1);
 8008770:	1d3b      	adds	r3, r7, #4
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f203 528c 	addw	r2, r3, #1420	; 0x58c
 8008778:	1d3b      	adds	r3, r7, #4
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f203 53ec 	addw	r3, r3, #1516	; 0x5ec
 8008780:	4619      	mov	r1, r3
 8008782:	4610      	mov	r0, r2
 8008784:	f00e fc0c 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Alarm_Mute_Indicator_Textbox_1_1.setPosition(64, 117, 129, 20);
 8008788:	1d3b      	adds	r3, r7, #4
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f503 6010 	add.w	r0, r3, #2304	; 0x900
 8008790:	2314      	movs	r3, #20
 8008792:	9300      	str	r3, [sp, #0]
 8008794:	2381      	movs	r3, #129	; 0x81
 8008796:	2275      	movs	r2, #117	; 0x75
 8008798:	2140      	movs	r1, #64	; 0x40
 800879a:	f7fb fbd6 	bl	8003f4a <_ZN8touchgfx8Drawable11setPositionEssss>

    AnomalyDetection_Border_1_1_1.setPosition(0, 3, 129, 17);
 800879e:	1d3b      	adds	r3, r7, #4
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f603 102c 	addw	r0, r3, #2348	; 0x92c
 80087a6:	2311      	movs	r3, #17
 80087a8:	9300      	str	r3, [sp, #0]
 80087aa:	2381      	movs	r3, #129	; 0x81
 80087ac:	2203      	movs	r2, #3
 80087ae:	2100      	movs	r1, #0
 80087b0:	f7fb fbcb 	bl	8003f4a <_ZN8touchgfx8Drawable11setPositionEssss>
    AnomalyDetection_Border_1_1_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80087b4:	1d3b      	adds	r3, r7, #4
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f603 142c 	addw	r4, r3, #2348	; 0x92c
 80087bc:	2300      	movs	r3, #0
 80087be:	f887 323d 	strb.w	r3, [r7, #573]	; 0x23d
 80087c2:	2300      	movs	r3, #0
 80087c4:	f887 323c 	strb.w	r3, [r7, #572]	; 0x23c
 80087c8:	2300      	movs	r3, #0
 80087ca:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
 80087ce:	f897 323d 	ldrb.w	r3, [r7, #573]	; 0x23d
 80087d2:	041b      	lsls	r3, r3, #16
 80087d4:	461a      	mov	r2, r3
 80087d6:	f897 323c 	ldrb.w	r3, [r7, #572]	; 0x23c
 80087da:	021b      	lsls	r3, r3, #8
 80087dc:	431a      	orrs	r2, r3
 80087de:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
 80087e2:	4313      	orrs	r3, r2
 80087e4:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80087e8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80087ec:	4611      	mov	r1, r2
 80087ee:	4618      	mov	r0, r3
 80087f0:	f7fd f80c 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 80087f4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4619      	mov	r1, r3
 80087fc:	4620      	mov	r0, r4
 80087fe:	f7fd f8d7 	bl	80059b0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    AnomalyDetection_Border_1_1_1.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8008802:	1d3b      	adds	r3, r7, #4
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f603 142c 	addw	r4, r3, #2348	; 0x92c
 800880a:	23ed      	movs	r3, #237	; 0xed
 800880c:	f887 3240 	strb.w	r3, [r7, #576]	; 0x240
 8008810:	2366      	movs	r3, #102	; 0x66
 8008812:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
 8008816:	2363      	movs	r3, #99	; 0x63
 8008818:	f887 323e 	strb.w	r3, [r7, #574]	; 0x23e
 800881c:	f897 3240 	ldrb.w	r3, [r7, #576]	; 0x240
 8008820:	041b      	lsls	r3, r3, #16
 8008822:	461a      	mov	r2, r3
 8008824:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8008828:	021b      	lsls	r3, r3, #8
 800882a:	431a      	orrs	r2, r3
 800882c:	f897 323e 	ldrb.w	r3, [r7, #574]	; 0x23e
 8008830:	4313      	orrs	r3, r2
 8008832:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008836:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800883a:	4611      	mov	r1, r2
 800883c:	4618      	mov	r0, r3
 800883e:	f7fc ffe5 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 8008842:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4619      	mov	r1, r3
 800884a:	4620      	mov	r0, r4
 800884c:	f7fd f922 	bl	8005a94 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    AnomalyDetection_Border_1_1_1.setBorderSize(3);
 8008850:	1d3b      	adds	r3, r7, #4
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f603 132c 	addw	r3, r3, #2348	; 0x92c
 8008858:	2103      	movs	r1, #3
 800885a:	4618      	mov	r0, r3
 800885c:	f7fd f928 	bl	8005ab0 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Alarm_Mute_Indicator_Textbox_1_1.add(AnomalyDetection_Border_1_1_1);
 8008860:	1d3b      	adds	r3, r7, #4
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f503 6210 	add.w	r2, r3, #2304	; 0x900
 8008868:	1d3b      	adds	r3, r7, #4
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f603 132c 	addw	r3, r3, #2348	; 0x92c
 8008870:	4619      	mov	r1, r3
 8008872:	4610      	mov	r0, r2
 8008874:	f00e fb94 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    AnomalyDetection_Text_1_1.setXY(9, 5);
 8008878:	1d3b      	adds	r3, r7, #4
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 8008880:	2205      	movs	r2, #5
 8008882:	2109      	movs	r1, #9
 8008884:	4618      	mov	r0, r3
 8008886:	f7fb fbb9 	bl	8003ffc <_ZN8touchgfx8Drawable5setXYEss>
    AnomalyDetection_Text_1_1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800888a:	1d3b      	adds	r3, r7, #4
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f503 6416 	add.w	r4, r3, #2400	; 0x960
 8008892:	23ff      	movs	r3, #255	; 0xff
 8008894:	f887 3243 	strb.w	r3, [r7, #579]	; 0x243
 8008898:	23ff      	movs	r3, #255	; 0xff
 800889a:	f887 3242 	strb.w	r3, [r7, #578]	; 0x242
 800889e:	23ff      	movs	r3, #255	; 0xff
 80088a0:	f887 3241 	strb.w	r3, [r7, #577]	; 0x241
 80088a4:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 80088a8:	041b      	lsls	r3, r3, #16
 80088aa:	461a      	mov	r2, r3
 80088ac:	f897 3242 	ldrb.w	r3, [r7, #578]	; 0x242
 80088b0:	021b      	lsls	r3, r3, #8
 80088b2:	431a      	orrs	r2, r3
 80088b4:	f897 3241 	ldrb.w	r3, [r7, #577]	; 0x241
 80088b8:	4313      	orrs	r3, r2
 80088ba:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80088be:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80088c2:	4611      	mov	r1, r2
 80088c4:	4618      	mov	r0, r3
 80088c6:	f7fc ffa1 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 80088ca:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	461a      	mov	r2, r3
 80088d2:	f8c7 4244 	str.w	r4, [r7, #580]	; 0x244
 80088d6:	f107 0310 	add.w	r3, r7, #16
 80088da:	601a      	str	r2, [r3, #0]
        this->color = color;
 80088dc:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80088e0:	f107 0210 	add.w	r2, r7, #16
 80088e4:	6812      	ldr	r2, [r2, #0]
 80088e6:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80088e8:	bf00      	nop
    AnomalyDetection_Text_1_1.setLinespacing(0);
 80088ea:	1d3b      	adds	r3, r7, #4
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 80088f2:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80088f6:	2300      	movs	r3, #0
 80088f8:	f8a7 324a 	strh.w	r3, [r7, #586]	; 0x24a
        linespace = space;
 80088fc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008900:	f8b7 224a 	ldrh.w	r2, [r7, #586]	; 0x24a
 8008904:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8008906:	bf00      	nop
    AnomalyDetection_Text_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_BBOL));
 8008908:	1d3b      	adds	r3, r7, #4
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f503 6416 	add.w	r4, r3, #2400	; 0x960
 8008910:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8008914:	2103      	movs	r1, #3
 8008916:	4618      	mov	r0, r3
 8008918:	f7fd f8da 	bl	8005ad0 <_ZN8touchgfx9TypedTextC1Et>
 800891c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8008920:	4619      	mov	r1, r3
 8008922:	4620      	mov	r0, r4
 8008924:	f010 fa67 	bl	8018df6 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8008928:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800892c:	4618      	mov	r0, r3
 800892e:	f7fb fa59 	bl	8003de4 <_ZN8touchgfx9TypedTextD1Ev>
    Alarm_Mute_Indicator_Textbox_1_1.add(AnomalyDetection_Text_1_1);
 8008932:	1d3b      	adds	r3, r7, #4
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f503 6210 	add.w	r2, r3, #2304	; 0x900
 800893a:	1d3b      	adds	r3, r7, #4
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 8008942:	4619      	mov	r1, r3
 8008944:	4610      	mov	r0, r2
 8008946:	f00e fb2b 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Disabled_Button2.setXY(92, 140);
 800894a:	1d3b      	adds	r3, r7, #4
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f603 139c 	addw	r3, r3, #2460	; 0x99c
 8008952:	228c      	movs	r2, #140	; 0x8c
 8008954:	215c      	movs	r1, #92	; 0x5c
 8008956:	4618      	mov	r0, r3
 8008958:	f7fb fb50 	bl	8003ffc <_ZN8touchgfx8Drawable5setXYEss>
    Disabled_Button2.setBitmap(touchgfx::Bitmap(BITMAP_RECT_BUTTON_PRESSED_ID));
 800895c:	1d3b      	adds	r3, r7, #4
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f603 149c 	addw	r4, r3, #2460	; 0x99c
 8008964:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8008968:	2102      	movs	r1, #2
 800896a:	4618      	mov	r0, r3
 800896c:	f7fc ff5d 	bl	800582a <_ZN8touchgfx6BitmapC1Et>
 8008970:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8008974:	4619      	mov	r1, r3
 8008976:	4620      	mov	r0, r4
 8008978:	f010 fcb7 	bl	80192ea <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    Disabled_Button1.setXY(309, 141);
 800897c:	1d3b      	adds	r3, r7, #4
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f603 13c8 	addw	r3, r3, #2504	; 0x9c8
 8008984:	228d      	movs	r2, #141	; 0x8d
 8008986:	f240 1135 	movw	r1, #309	; 0x135
 800898a:	4618      	mov	r0, r3
 800898c:	f7fb fb36 	bl	8003ffc <_ZN8touchgfx8Drawable5setXYEss>
    Disabled_Button1.setBitmap(touchgfx::Bitmap(BITMAP_RECT_BUTTON_PRESSED_ID));
 8008990:	1d3b      	adds	r3, r7, #4
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f603 14c8 	addw	r4, r3, #2504	; 0x9c8
 8008998:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800899c:	2102      	movs	r1, #2
 800899e:	4618      	mov	r0, r3
 80089a0:	f7fc ff43 	bl	800582a <_ZN8touchgfx6BitmapC1Et>
 80089a4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80089a8:	4619      	mov	r1, r3
 80089aa:	4620      	mov	r0, r4
 80089ac:	f010 fc9d 	bl	80192ea <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    Alert_Mute_Button.setXY(92, 140);
 80089b0:	1d3b      	adds	r3, r7, #4
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f603 13f4 	addw	r3, r3, #2548	; 0x9f4
 80089b8:	228c      	movs	r2, #140	; 0x8c
 80089ba:	215c      	movs	r1, #92	; 0x5c
 80089bc:	4618      	mov	r0, r3
 80089be:	f7fb fb1d 	bl	8003ffc <_ZN8touchgfx8Drawable5setXYEss>
    Alert_Mute_Button.setBitmaps(touchgfx::Bitmap(BITMAP_RECT_BUTTON_UNPRESSED_ID), touchgfx::Bitmap(BITMAP_RECT_BUTTON_PRESSED_ID));
 80089c2:	1d3b      	adds	r3, r7, #4
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f603 14f4 	addw	r4, r3, #2548	; 0x9f4
 80089ca:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80089ce:	2103      	movs	r1, #3
 80089d0:	4618      	mov	r0, r3
 80089d2:	f7fc ff2a 	bl	800582a <_ZN8touchgfx6BitmapC1Et>
 80089d6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80089da:	2102      	movs	r1, #2
 80089dc:	4618      	mov	r0, r3
 80089de:	f7fc ff24 	bl	800582a <_ZN8touchgfx6BitmapC1Et>
 80089e2:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 80089e6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80089ea:	4619      	mov	r1, r3
 80089ec:	4620      	mov	r0, r4
 80089ee:	f010 fa39 	bl	8018e64 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    Alert_Mute_Button.setAction(buttonCallback);
 80089f2:	1d3b      	adds	r3, r7, #4
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f603 12f4 	addw	r2, r3, #2548	; 0x9f4
 80089fa:	1d3b      	adds	r3, r7, #4
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 8008a02:	4619      	mov	r1, r3
 8008a04:	4610      	mov	r0, r2
 8008a06:	f7fd f8d9 	bl	8005bbc <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    Localize_Button.setXY(309, 140);
 8008a0a:	1d3b      	adds	r3, r7, #4
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 8008a12:	228c      	movs	r2, #140	; 0x8c
 8008a14:	f240 1135 	movw	r1, #309	; 0x135
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f7fb faef 	bl	8003ffc <_ZN8touchgfx8Drawable5setXYEss>
    Localize_Button.setBitmaps(touchgfx::Bitmap(BITMAP_RECT_BUTTON_UNPRESSED_ID), touchgfx::Bitmap(BITMAP_RECT_BUTTON_PRESSED_ID));
 8008a1e:	1d3b      	adds	r3, r7, #4
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f603 2428 	addw	r4, r3, #2600	; 0xa28
 8008a26:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8008a2a:	2103      	movs	r1, #3
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f7fc fefc 	bl	800582a <_ZN8touchgfx6BitmapC1Et>
 8008a32:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008a36:	2102      	movs	r1, #2
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f7fc fef6 	bl	800582a <_ZN8touchgfx6BitmapC1Et>
 8008a3e:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8008a42:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8008a46:	4619      	mov	r1, r3
 8008a48:	4620      	mov	r0, r4
 8008a4a:	f010 fa0b 	bl	8018e64 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    Localize_Button.setAction(buttonCallback);
 8008a4e:	1d3b      	adds	r3, r7, #4
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f603 2228 	addw	r2, r3, #2600	; 0xa28
 8008a56:	1d3b      	adds	r3, r7, #4
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 8008a5e:	4619      	mov	r1, r3
 8008a60:	4610      	mov	r0, r2
 8008a62:	f7fd f8ab 	bl	8005bbc <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    Alarm_Mute_Indicator_Textbox_1_1_1.setPosition(283, 117, 129, 20);
 8008a66:	1d3b      	adds	r3, r7, #4
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f603 205c 	addw	r0, r3, #2652	; 0xa5c
 8008a6e:	2314      	movs	r3, #20
 8008a70:	9300      	str	r3, [sp, #0]
 8008a72:	2381      	movs	r3, #129	; 0x81
 8008a74:	2275      	movs	r2, #117	; 0x75
 8008a76:	f240 111b 	movw	r1, #283	; 0x11b
 8008a7a:	f7fb fa66 	bl	8003f4a <_ZN8touchgfx8Drawable11setPositionEssss>

    AnomalyDetection_Border_1_1_1_1.setPosition(0, 3, 129, 17);
 8008a7e:	1d3b      	adds	r3, r7, #4
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f603 2088 	addw	r0, r3, #2696	; 0xa88
 8008a86:	2311      	movs	r3, #17
 8008a88:	9300      	str	r3, [sp, #0]
 8008a8a:	2381      	movs	r3, #129	; 0x81
 8008a8c:	2203      	movs	r2, #3
 8008a8e:	2100      	movs	r1, #0
 8008a90:	f7fb fa5b 	bl	8003f4a <_ZN8touchgfx8Drawable11setPositionEssss>
    AnomalyDetection_Border_1_1_1_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8008a94:	1d3b      	adds	r3, r7, #4
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f603 2488 	addw	r4, r3, #2696	; 0xa88
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	f887 3255 	strb.w	r3, [r7, #597]	; 0x255
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	f887 3254 	strb.w	r3, [r7, #596]	; 0x254
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	f887 3253 	strb.w	r3, [r7, #595]	; 0x253
 8008aae:	f897 3255 	ldrb.w	r3, [r7, #597]	; 0x255
 8008ab2:	041b      	lsls	r3, r3, #16
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	f897 3254 	ldrb.w	r3, [r7, #596]	; 0x254
 8008aba:	021b      	lsls	r3, r3, #8
 8008abc:	431a      	orrs	r2, r3
 8008abe:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008ac8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8008acc:	4611      	mov	r1, r2
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f7fc fe9c 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 8008ad4:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4619      	mov	r1, r3
 8008adc:	4620      	mov	r0, r4
 8008ade:	f7fc ff67 	bl	80059b0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    AnomalyDetection_Border_1_1_1_1.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8008ae2:	1d3b      	adds	r3, r7, #4
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f603 2488 	addw	r4, r3, #2696	; 0xa88
 8008aea:	23ed      	movs	r3, #237	; 0xed
 8008aec:	f887 3258 	strb.w	r3, [r7, #600]	; 0x258
 8008af0:	2366      	movs	r3, #102	; 0x66
 8008af2:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 8008af6:	2363      	movs	r3, #99	; 0x63
 8008af8:	f887 3256 	strb.w	r3, [r7, #598]	; 0x256
 8008afc:	f897 3258 	ldrb.w	r3, [r7, #600]	; 0x258
 8008b00:	041b      	lsls	r3, r3, #16
 8008b02:	461a      	mov	r2, r3
 8008b04:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 8008b08:	021b      	lsls	r3, r3, #8
 8008b0a:	431a      	orrs	r2, r3
 8008b0c:	f897 3256 	ldrb.w	r3, [r7, #598]	; 0x256
 8008b10:	4313      	orrs	r3, r2
 8008b12:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008b16:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8008b1a:	4611      	mov	r1, r2
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f7fc fe75 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 8008b22:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4619      	mov	r1, r3
 8008b2a:	4620      	mov	r0, r4
 8008b2c:	f7fc ffb2 	bl	8005a94 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    AnomalyDetection_Border_1_1_1_1.setBorderSize(3);
 8008b30:	1d3b      	adds	r3, r7, #4
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f603 2388 	addw	r3, r3, #2696	; 0xa88
 8008b38:	2103      	movs	r1, #3
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7fc ffb8 	bl	8005ab0 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Alarm_Mute_Indicator_Textbox_1_1_1.add(AnomalyDetection_Border_1_1_1_1);
 8008b40:	1d3b      	adds	r3, r7, #4
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f603 225c 	addw	r2, r3, #2652	; 0xa5c
 8008b48:	1d3b      	adds	r3, r7, #4
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f603 2388 	addw	r3, r3, #2696	; 0xa88
 8008b50:	4619      	mov	r1, r3
 8008b52:	4610      	mov	r0, r2
 8008b54:	f00e fa24 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    AnomalyDetection_Text_1_1_1.setXY(15, 5);
 8008b58:	1d3b      	adds	r3, r7, #4
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f603 23bc 	addw	r3, r3, #2748	; 0xabc
 8008b60:	2205      	movs	r2, #5
 8008b62:	210f      	movs	r1, #15
 8008b64:	4618      	mov	r0, r3
 8008b66:	f7fb fa49 	bl	8003ffc <_ZN8touchgfx8Drawable5setXYEss>
    AnomalyDetection_Text_1_1_1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8008b6a:	1d3b      	adds	r3, r7, #4
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f603 24bc 	addw	r4, r3, #2748	; 0xabc
 8008b72:	23ff      	movs	r3, #255	; 0xff
 8008b74:	f887 325b 	strb.w	r3, [r7, #603]	; 0x25b
 8008b78:	23ff      	movs	r3, #255	; 0xff
 8008b7a:	f887 325a 	strb.w	r3, [r7, #602]	; 0x25a
 8008b7e:	23ff      	movs	r3, #255	; 0xff
 8008b80:	f887 3259 	strb.w	r3, [r7, #601]	; 0x259
 8008b84:	f897 325b 	ldrb.w	r3, [r7, #603]	; 0x25b
 8008b88:	041b      	lsls	r3, r3, #16
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	f897 325a 	ldrb.w	r3, [r7, #602]	; 0x25a
 8008b90:	021b      	lsls	r3, r3, #8
 8008b92:	431a      	orrs	r2, r3
 8008b94:	f897 3259 	ldrb.w	r3, [r7, #601]	; 0x259
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008b9e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8008ba2:	4611      	mov	r1, r2
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f7fc fe31 	bl	800580c <_ZN8touchgfx9colortypeC1Em>
 8008baa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	f8c7 425c 	str.w	r4, [r7, #604]	; 0x25c
 8008bb6:	f107 030c 	add.w	r3, r7, #12
 8008bba:	601a      	str	r2, [r3, #0]
        this->color = color;
 8008bbc:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8008bc0:	f107 020c 	add.w	r2, r7, #12
 8008bc4:	6812      	ldr	r2, [r2, #0]
 8008bc6:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8008bc8:	bf00      	nop
    AnomalyDetection_Text_1_1_1.setLinespacing(0);
 8008bca:	1d3b      	adds	r3, r7, #4
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f603 23bc 	addw	r3, r3, #2748	; 0xabc
 8008bd2:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	f8a7 3262 	strh.w	r3, [r7, #610]	; 0x262
        linespace = space;
 8008bdc:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008be0:	f8b7 2262 	ldrh.w	r2, [r7, #610]	; 0x262
 8008be4:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8008be6:	bf00      	nop
    AnomalyDetection_Text_1_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_V6ST));
 8008be8:	1d3b      	adds	r3, r7, #4
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f603 24bc 	addw	r4, r3, #2748	; 0xabc
 8008bf0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8008bf4:	2104      	movs	r1, #4
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f7fc ff6a 	bl	8005ad0 <_ZN8touchgfx9TypedTextC1Et>
 8008bfc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8008c00:	4619      	mov	r1, r3
 8008c02:	4620      	mov	r0, r4
 8008c04:	f010 f8f7 	bl	8018df6 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8008c08:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f7fb f8e9 	bl	8003de4 <_ZN8touchgfx9TypedTextD1Ev>
    Alarm_Mute_Indicator_Textbox_1_1_1.add(AnomalyDetection_Text_1_1_1);
 8008c12:	1d3b      	adds	r3, r7, #4
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f603 225c 	addw	r2, r3, #2652	; 0xa5c
 8008c1a:	1d3b      	adds	r3, r7, #4
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f603 23bc 	addw	r3, r3, #2748	; 0xabc
 8008c22:	4619      	mov	r1, r3
 8008c24:	4610      	mov	r0, r2
 8008c26:	f00e f9bb 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    add(__background);
 8008c2a:	1d3b      	adds	r3, r7, #4
 8008c2c:	681a      	ldr	r2, [r3, #0]
 8008c2e:	1d3b      	adds	r3, r7, #4
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	3340      	adds	r3, #64	; 0x40
 8008c34:	4619      	mov	r1, r3
 8008c36:	4610      	mov	r0, r2
 8008c38:	f7fc fe86 	bl	8005948 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Main_Background);
 8008c3c:	1d3b      	adds	r3, r7, #4
 8008c3e:	681a      	ldr	r2, [r3, #0]
 8008c40:	1d3b      	adds	r3, r7, #4
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	336c      	adds	r3, #108	; 0x6c
 8008c46:	4619      	mov	r1, r3
 8008c48:	4610      	mov	r0, r2
 8008c4a:	f7fc fe7d 	bl	8005948 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Button_Panel);
 8008c4e:	1d3b      	adds	r3, r7, #4
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	1d3b      	adds	r3, r7, #4
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	3398      	adds	r3, #152	; 0x98
 8008c58:	4619      	mov	r1, r3
 8008c5a:	4610      	mov	r0, r2
 8008c5c:	f7fc fe74 	bl	8005948 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Message_panel);
 8008c60:	1d3b      	adds	r3, r7, #4
 8008c62:	681a      	ldr	r2, [r3, #0]
 8008c64:	1d3b      	adds	r3, r7, #4
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f203 538c 	addw	r3, r3, #1420	; 0x58c
 8008c6c:	4619      	mov	r1, r3
 8008c6e:	4610      	mov	r0, r2
 8008c70:	f7fc fe6a 	bl	8005948 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Alarm_Mute_Indicator_Textbox_1_1);
 8008c74:	1d3b      	adds	r3, r7, #4
 8008c76:	681a      	ldr	r2, [r3, #0]
 8008c78:	1d3b      	adds	r3, r7, #4
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c80:	4619      	mov	r1, r3
 8008c82:	4610      	mov	r0, r2
 8008c84:	f7fc fe60 	bl	8005948 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Disabled_Button2);
 8008c88:	1d3b      	adds	r3, r7, #4
 8008c8a:	681a      	ldr	r2, [r3, #0]
 8008c8c:	1d3b      	adds	r3, r7, #4
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f603 139c 	addw	r3, r3, #2460	; 0x99c
 8008c94:	4619      	mov	r1, r3
 8008c96:	4610      	mov	r0, r2
 8008c98:	f7fc fe56 	bl	8005948 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Disabled_Button1);
 8008c9c:	1d3b      	adds	r3, r7, #4
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	1d3b      	adds	r3, r7, #4
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f603 13c8 	addw	r3, r3, #2504	; 0x9c8
 8008ca8:	4619      	mov	r1, r3
 8008caa:	4610      	mov	r0, r2
 8008cac:	f7fc fe4c 	bl	8005948 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Alert_Mute_Button);
 8008cb0:	1d3b      	adds	r3, r7, #4
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	1d3b      	adds	r3, r7, #4
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f603 13f4 	addw	r3, r3, #2548	; 0x9f4
 8008cbc:	4619      	mov	r1, r3
 8008cbe:	4610      	mov	r0, r2
 8008cc0:	f7fc fe42 	bl	8005948 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Localize_Button);
 8008cc4:	1d3b      	adds	r3, r7, #4
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	1d3b      	adds	r3, r7, #4
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	4610      	mov	r0, r2
 8008cd4:	f7fc fe38 	bl	8005948 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Alarm_Mute_Indicator_Textbox_1_1_1);
 8008cd8:	1d3b      	adds	r3, r7, #4
 8008cda:	681a      	ldr	r2, [r3, #0]
 8008cdc:	1d3b      	adds	r3, r7, #4
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f603 235c 	addw	r3, r3, #2652	; 0xa5c
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	4610      	mov	r0, r2
 8008ce8:	f7fc fe2e 	bl	8005948 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8008cec:	1d3b      	adds	r3, r7, #4
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f507 771b 	add.w	r7, r7, #620	; 0x26c
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd90      	pop	{r4, r7, pc}
 8008cfa:	bf00      	nop

08008cfc <_ZN12MainViewBase11setupScreenEv>:

void MainViewBase::setupScreen()
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]

}
 8008d04:	bf00      	nop
 8008d06:	370c      	adds	r7, #12
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <_ZN12MainViewBase14handleKeyEventEh>:

//Handles when a key is pressed
void MainViewBase::handleKeyEvent(uint8_t key)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	460b      	mov	r3, r1
 8008d1a:	70fb      	strb	r3, [r7, #3]
    if(87 == key)
 8008d1c:	78fb      	ldrb	r3, [r7, #3]
 8008d1e:	2b57      	cmp	r3, #87	; 0x57
 8008d20:	d105      	bne.n	8008d2e <_ZN12MainViewBase14handleKeyEventEh+0x1e>
    {
        //Anomaly_Alert_Handler
        //When hardware button 87 clicked call virtual function
        //Call update_anomaly_alert
        update_anomaly_alert();
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	3330      	adds	r3, #48	; 0x30
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	4798      	blx	r3
    }
    if(88 == key)
 8008d2e:	78fb      	ldrb	r3, [r7, #3]
 8008d30:	2b58      	cmp	r3, #88	; 0x58
 8008d32:	d105      	bne.n	8008d40 <_ZN12MainViewBase14handleKeyEventEh+0x30>
    {
        //Set_Volume_Rotary_Encoder
        //When hardware button 88 clicked call virtual function
        //Call set_volume_encoder
        set_volume_encoder();
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	333c      	adds	r3, #60	; 0x3c
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	4798      	blx	r3
    }
    if(89 == key)
 8008d40:	78fb      	ldrb	r3, [r7, #3]
 8008d42:	2b59      	cmp	r3, #89	; 0x59
 8008d44:	d105      	bne.n	8008d52 <_ZN12MainViewBase14handleKeyEventEh+0x42>
    {
        //Toggle_Voice_SW
        //When hardware button 89 clicked call virtual function
        //Call toggle_voice
        toggle_voice();
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	3334      	adds	r3, #52	; 0x34
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	4798      	blx	r3
    }
    if(90 == key)
 8008d52:	78fb      	ldrb	r3, [r7, #3]
 8008d54:	2b5a      	cmp	r3, #90	; 0x5a
 8008d56:	d105      	bne.n	8008d64 <_ZN12MainViewBase14handleKeyEventEh+0x54>
    {
        //Alert_Mute_Pressed_Button
        //When hardware button 90 clicked call virtual function
        //Call alert_mute_pressed
        alert_mute_pressed();
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	3338      	adds	r3, #56	; 0x38
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	4798      	blx	r3
    }
}
 8008d64:	bf00      	nop
 8008d66:	3708      	adds	r7, #8
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void MainViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b082      	sub	sp, #8
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	6039      	str	r1, [r7, #0]
    if (&src == &Voice_Toggle_Button)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f203 43f4 	addw	r3, r3, #1268	; 0x4f4
 8008d7c:	683a      	ldr	r2, [r7, #0]
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d106      	bne.n	8008d90 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x24>
    {
        //Toggle_Voice
        //When Voice_Toggle_Button clicked call virtual function
        //Call toggle_voice
        toggle_voice();
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	3334      	adds	r3, #52	; 0x34
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	4798      	blx	r3
        //Switch_To_Anomaly_Screen
        //When Localize_Button clicked change screen to Localize_Anomaly
        //Go to Localize_Anomaly with screen transition towards North
        application().gotoLocalize_AnomalyScreenWipeTransitionNorth();
    }
}
 8008d8e:	e019      	b.n	8008dc4 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x58>
    else if (&src == &Alert_Mute_Button)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f603 13f4 	addw	r3, r3, #2548	; 0x9f4
 8008d96:	683a      	ldr	r2, [r7, #0]
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d106      	bne.n	8008daa <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3e>
        alert_mute_pressed();
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	3338      	adds	r3, #56	; 0x38
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	4798      	blx	r3
}
 8008da8:	e00c      	b.n	8008dc4 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x58>
    else if (&src == &Localize_Button)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 8008db0:	683a      	ldr	r2, [r7, #0]
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d106      	bne.n	8008dc4 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x58>
        application().gotoLocalize_AnomalyScreenWipeTransitionNorth();
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f7fe f856 	bl	8006e68 <_ZN12MainViewBase11applicationEv>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f7fb fc28 	bl	8004614 <_ZN23FrontendApplicationBase45gotoLocalize_AnomalyScreenWipeTransitionNorthEv>
}
 8008dc4:	bf00      	nop
 8008dc6:	3708      	adds	r7, #8
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <_ZN12MainViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi>:

void MainViewBase::sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b084      	sub	sp, #16
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	60f8      	str	r0, [r7, #12]
 8008dd4:	60b9      	str	r1, [r7, #8]
 8008dd6:	607a      	str	r2, [r7, #4]
    if (&src == &Volume_Slider)
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 8008dde:	68ba      	ldr	r2, [r7, #8]
 8008de0:	429a      	cmp	r2, r3
 8008de2:	d106      	bne.n	8008df2 <_ZN12MainViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi+0x26>
    {
        //Set_Volume_Slider
        //When Volume_Slider value changed call virtual function
        //Call set_volume_slider
        set_volume_slider(value);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	332c      	adds	r3, #44	; 0x2c
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	6879      	ldr	r1, [r7, #4]
 8008dee:	68f8      	ldr	r0, [r7, #12]
 8008df0:	4798      	blx	r3
    }
}
 8008df2:	bf00      	nop
 8008df4:	3710      	adds	r7, #16
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}
	...

08008dfc <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>:
    View()
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b082      	sub	sp, #8
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	4618      	mov	r0, r3
 8008e08:	f013 fa66 	bl	801c2d8 <_ZN8touchgfx6ScreenC1Ev>
 8008e0c:	4a05      	ldr	r2, [pc, #20]	; (8008e24 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev+0x28>)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	601a      	str	r2, [r3, #0]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2200      	movs	r2, #0
 8008e16:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3708      	adds	r7, #8
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop
 8008e24:	0802c8c8 	.word	0x0802c8c8

08008e28 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b084      	sub	sp, #16
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	60f8      	str	r0, [r7, #12]
 8008e30:	60b9      	str	r1, [r7, #8]
 8008e32:	4639      	mov	r1, r7
 8008e34:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_1(pmemfun_1)
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f7fd fce6 	bl	800680c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8008e40:	4a08      	ldr	r2, [pc, #32]	; (8008e64 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	601a      	str	r2, [r3, #0]
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	68ba      	ldr	r2, [r7, #8]
 8008e4a:	605a      	str	r2, [r3, #4]
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	3308      	adds	r3, #8
 8008e50:	463a      	mov	r2, r7
 8008e52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008e56:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3710      	adds	r7, #16
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}
 8008e64:	0802c8b0 	.word	0x0802c8b0

08008e68 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev>:
class GenericCallback<T1, T2, void>
 8008e68:	b480      	push	{r7}
 8008e6a:	b083      	sub	sp, #12
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	4a04      	ldr	r2, [pc, #16]	; (8008e84 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev+0x1c>)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	601a      	str	r2, [r3, #0]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	4618      	mov	r0, r3
 8008e7a:	370c      	adds	r7, #12
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr
 8008e84:	0802c8fc 	.word	0x0802c8fc

08008e88 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_2)(T1, T2))
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b084      	sub	sp, #16
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	60f8      	str	r0, [r7, #12]
 8008e90:	60b9      	str	r1, [r7, #8]
 8008e92:	4639      	mov	r1, r7
 8008e94:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_2(pmemfun_2)
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f7ff ffe4 	bl	8008e68 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev>
 8008ea0:	4a08      	ldr	r2, [pc, #32]	; (8008ec4 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE+0x3c>)
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	601a      	str	r2, [r3, #0]
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	68ba      	ldr	r2, [r7, #8]
 8008eaa:	605a      	str	r2, [r3, #4]
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	3308      	adds	r3, #8
 8008eb0:	463a      	mov	r2, r7
 8008eb2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008eb6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3710      	adds	r7, #16
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}
 8008ec4:	0802c898 	.word	0x0802c898

08008ec8 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>:
    virtual ~GenericCallback()
 8008ec8:	b480      	push	{r7}
 8008eca:	b083      	sub	sp, #12
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
    }
 8008ed0:	4a04      	ldr	r2, [pc, #16]	; (8008ee4 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev+0x1c>)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	601a      	str	r2, [r3, #0]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	4618      	mov	r0, r3
 8008eda:	370c      	adds	r7, #12
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr
 8008ee4:	0802c8fc 	.word	0x0802c8fc

08008ee8 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED0Ev>:
    virtual ~GenericCallback()
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b082      	sub	sp, #8
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
    }
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f7ff ffe9 	bl	8008ec8 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>
 8008ef6:	2104      	movs	r1, #4
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f021 f844 	bl	8029f86 <_ZdlPvj>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	4618      	mov	r0, r3
 8008f02:	3708      	adds	r7, #8
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivED1Ev>:
struct Callback<dest_type, T1, T2, void> : public GenericCallback<T1, T2>
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	4a05      	ldr	r2, [pc, #20]	; (8008f28 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivED1Ev+0x20>)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	601a      	str	r2, [r3, #0]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f7ff ffd5 	bl	8008ec8 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	4618      	mov	r0, r3
 8008f22:	3708      	adds	r7, #8
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}
 8008f28:	0802c898 	.word	0x0802c898

08008f2c <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivED0Ev>:
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f7ff ffe7 	bl	8008f08 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivED1Ev>
 8008f3a:	2110      	movs	r1, #16
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f021 f822 	bl	8029f86 <_ZdlPvj>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	4618      	mov	r0, r3
 8008f46:	3708      	adds	r7, #8
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b082      	sub	sp, #8
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	4a05      	ldr	r2, [pc, #20]	; (8008f6c <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	601a      	str	r2, [r3, #0]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f7fd fc85 	bl	800686c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	4618      	mov	r0, r3
 8008f66:	3708      	adds	r7, #8
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}
 8008f6c:	0802c8b0 	.word	0x0802c8b0

08008f70 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b082      	sub	sp, #8
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f7ff ffe7 	bl	8008f4c <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8008f7e:	2110      	movs	r1, #16
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f021 f800 	bl	8029f86 <_ZdlPvj>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3708      	adds	r7, #8
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 * to implement a progress indicator. For more specific implementations see classes that
 * inherit from AbstractProgressIndicator.
 *
 * @see BoxProgress, CircleProgress, ImageProgress, LineProgress, TextProgress
 */
class AbstractProgressIndicator : public Container
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b082      	sub	sp, #8
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	4a0a      	ldr	r2, [pc, #40]	; (8008fc4 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev+0x34>)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	601a      	str	r2, [r3, #0]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	3358      	adds	r3, #88	; 0x58
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f7fd fca4 	bl	80068f0 <_ZN8touchgfx9ContainerD1Ev>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	332c      	adds	r3, #44	; 0x2c
 8008fac:	4618      	mov	r0, r3
 8008fae:	f7fd fcc1 	bl	8006934 <_ZN8touchgfx5ImageD1Ev>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f7fd fc9b 	bl	80068f0 <_ZN8touchgfx9ContainerD1Ev>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3708      	adds	r7, #8
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}
 8008fc4:	0802ce5c 	.word	0x0802ce5c

08008fc8 <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f7ff ffdd 	bl	8008f90 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 8008fd6:	21b4      	movs	r1, #180	; 0xb4
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f020 ffd4 	bl	8029f86 <_ZdlPvj>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3708      	adds	r7, #8
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
 * expected to contain a wildcard &lt;placeholder> from the text.
 *
 * @note the text converter tool converts the <...> to ascii value 2 which is then being
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextArea
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b082      	sub	sp, #8
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	4a05      	ldr	r2, [pc, #20]	; (8009008 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	601a      	str	r2, [r3, #0]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f7fd fcdf 	bl	80069bc <_ZN8touchgfx8TextAreaD1Ev>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	4618      	mov	r0, r3
 8009002:	3708      	adds	r7, #8
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}
 8009008:	0802e230 	.word	0x0802e230

0800900c <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 800900c:	b580      	push	{r7, lr}
 800900e:	b082      	sub	sp, #8
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f7ff ffe7 	bl	8008fe8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800901a:	2140      	movs	r1, #64	; 0x40
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f020 ffb2 	bl	8029f86 <_ZdlPvj>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	4618      	mov	r0, r3
 8009026:	3708      	adds	r7, #8
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}

0800902c <_ZN8touchgfx12TextProgressD1Ev>:
/**
 * A text progress will display progress as a number with a given number of decimals.
 *
 * @note The implementation does not use floating point variables to calculate the progress.
 */
class TextProgress : public AbstractProgressIndicator
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	4a08      	ldr	r2, [pc, #32]	; (8009058 <_ZN8touchgfx12TextProgressD1Ev+0x2c>)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	601a      	str	r2, [r3, #0]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	33b4      	adds	r3, #180	; 0xb4
 800903e:	4618      	mov	r0, r3
 8009040:	f7ff ffd2 	bl	8008fe8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	4618      	mov	r0, r3
 8009048:	f7ff ffa2 	bl	8008f90 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	4618      	mov	r0, r3
 8009050:	3708      	adds	r7, #8
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}
 8009056:	bf00      	nop
 8009058:	0802ccf8 	.word	0x0802ccf8

0800905c <_ZN8touchgfx12TextProgressD0Ev>:
 800905c:	b580      	push	{r7, lr}
 800905e:	b082      	sub	sp, #8
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f7ff ffe1 	bl	800902c <_ZN8touchgfx12TextProgressD1Ev>
 800906a:	f44f 7184 	mov.w	r1, #264	; 0x108
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f020 ff89 	bl	8029f86 <_ZdlPvj>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	4618      	mov	r0, r3
 8009078:	3708      	adds	r7, #8
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
	...

08009080 <_ZN8touchgfx6SliderD1Ev>:
class Slider : public Container
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	4a0f      	ldr	r2, [pc, #60]	; (80090c8 <_ZN8touchgfx6SliderD1Ev+0x48>)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	601a      	str	r2, [r3, #0]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	33c0      	adds	r3, #192	; 0xc0
 8009092:	4618      	mov	r0, r3
 8009094:	f7fd fc2c 	bl	80068f0 <_ZN8touchgfx9ContainerD1Ev>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	3394      	adds	r3, #148	; 0x94
 800909c:	4618      	mov	r0, r3
 800909e:	f7fd fc49 	bl	8006934 <_ZN8touchgfx5ImageD1Ev>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	3368      	adds	r3, #104	; 0x68
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7fd fc44 	bl	8006934 <_ZN8touchgfx5ImageD1Ev>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	333c      	adds	r3, #60	; 0x3c
 80090b0:	4618      	mov	r0, r3
 80090b2:	f7fd fc3f 	bl	8006934 <_ZN8touchgfx5ImageD1Ev>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	4618      	mov	r0, r3
 80090ba:	f7fd fc19 	bl	80068f0 <_ZN8touchgfx9ContainerD1Ev>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	4618      	mov	r0, r3
 80090c2:	3708      	adds	r7, #8
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}
 80090c8:	0802d364 	.word	0x0802d364

080090cc <_ZN8touchgfx6SliderD0Ev>:
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b082      	sub	sp, #8
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f7ff ffd3 	bl	8009080 <_ZN8touchgfx6SliderD1Ev>
 80090da:	21fc      	movs	r1, #252	; 0xfc
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f020 ff52 	bl	8029f86 <_ZdlPvj>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	4618      	mov	r0, r3
 80090e6:	3708      	adds	r7, #8
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <_ZN8touchgfx12ToggleButtonD1Ev>:
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b082      	sub	sp, #8
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	4a05      	ldr	r2, [pc, #20]	; (800910c <_ZN8touchgfx12ToggleButtonD1Ev+0x20>)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	601a      	str	r2, [r3, #0]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	4618      	mov	r0, r3
 80090fe:	f7fd fc85 	bl	8006a0c <_ZN8touchgfx6ButtonD1Ev>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	4618      	mov	r0, r3
 8009106:	3708      	adds	r7, #8
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}
 800910c:	0802deec 	.word	0x0802deec

08009110 <_ZN8touchgfx12ToggleButtonD0Ev>:
 8009110:	b580      	push	{r7, lr}
 8009112:	b082      	sub	sp, #8
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f7ff ffe7 	bl	80090ec <_ZN8touchgfx12ToggleButtonD1Ev>
 800911e:	2138      	movs	r1, #56	; 0x38
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f020 ff30 	bl	8029f86 <_ZdlPvj>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	4618      	mov	r0, r3
 800912a:	3708      	adds	r7, #8
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7executeES4_i>:
    virtual void execute(T1 t1, T2 t2)
 8009130:	b580      	push	{r7, lr}
 8009132:	b084      	sub	sp, #16
 8009134:	af00      	add	r7, sp, #0
 8009136:	60f8      	str	r0, [r7, #12]
 8009138:	60b9      	str	r1, [r7, #8]
 800913a:	607a      	str	r2, [r7, #4]
        (pobject->*pmemfun_2)(t1, t2);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	68fa      	ldr	r2, [r7, #12]
 8009142:	68d2      	ldr	r2, [r2, #12]
 8009144:	1052      	asrs	r2, r2, #1
 8009146:	1898      	adds	r0, r3, r2
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	68db      	ldr	r3, [r3, #12]
 800914c:	f003 0301 	and.w	r3, r3, #1
 8009150:	2b00      	cmp	r3, #0
 8009152:	d102      	bne.n	800915a <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7executeES4_i+0x2a>
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	689b      	ldr	r3, [r3, #8]
 8009158:	e00a      	b.n	8009170 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7executeES4_i+0x40>
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	68fa      	ldr	r2, [r7, #12]
 8009160:	68d2      	ldr	r2, [r2, #12]
 8009162:	1052      	asrs	r2, r2, #1
 8009164:	4413      	add	r3, r2
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	68fa      	ldr	r2, [r7, #12]
 800916a:	6892      	ldr	r2, [r2, #8]
 800916c:	4413      	add	r3, r2
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	68b9      	ldr	r1, [r7, #8]
 8009174:	4798      	blx	r3
    }
 8009176:	bf00      	nop
 8009178:	3710      	adds	r7, #16
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}

0800917e <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7isValidEv>:
    virtual bool isValid() const
 800917e:	b480      	push	{r7}
 8009180:	b083      	sub	sp, #12
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_2 != 0);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d010      	beq.n	80091b0 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7isValidEv+0x32>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	689b      	ldr	r3, [r3, #8]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d107      	bne.n	80091a6 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7isValidEv+0x28>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	68db      	ldr	r3, [r3, #12]
 800919a:	f003 0301 	and.w	r3, r3, #1
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d101      	bne.n	80091a6 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7isValidEv+0x28>
 80091a2:	2301      	movs	r3, #1
 80091a4:	e000      	b.n	80091a8 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7isValidEv+0x2a>
 80091a6:	2300      	movs	r3, #0
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d001      	beq.n	80091b0 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7isValidEv+0x32>
 80091ac:	2301      	movs	r3, #1
 80091ae:	e000      	b.n	80091b2 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7isValidEv+0x34>
 80091b0:	2300      	movs	r3, #0
    }
 80091b2:	4618      	mov	r0, r3
 80091b4:	370c      	adds	r7, #12
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr

080091be <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80091be:	b580      	push	{r7, lr}
 80091c0:	b082      	sub	sp, #8
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	6078      	str	r0, [r7, #4]
 80091c6:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	687a      	ldr	r2, [r7, #4]
 80091ce:	68d2      	ldr	r2, [r2, #12]
 80091d0:	1052      	asrs	r2, r2, #1
 80091d2:	1898      	adds	r0, r3, r2
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	68db      	ldr	r3, [r3, #12]
 80091d8:	f003 0301 	and.w	r3, r3, #1
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d102      	bne.n	80091e6 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	689b      	ldr	r3, [r3, #8]
 80091e4:	e00a      	b.n	80091fc <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	687a      	ldr	r2, [r7, #4]
 80091ec:	68d2      	ldr	r2, [r2, #12]
 80091ee:	1052      	asrs	r2, r2, #1
 80091f0:	4413      	add	r3, r2
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	6892      	ldr	r2, [r2, #8]
 80091f8:	4413      	add	r3, r2
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	6839      	ldr	r1, [r7, #0]
 80091fe:	4798      	blx	r3
    }
 8009200:	bf00      	nop
 8009202:	3708      	adds	r7, #8
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}

08009208 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8009208:	b480      	push	{r7}
 800920a:	b083      	sub	sp, #12
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d010      	beq.n	800923a <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d107      	bne.n	8009230 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	68db      	ldr	r3, [r3, #12]
 8009224:	f003 0301 	and.w	r3, r3, #1
 8009228:	2b00      	cmp	r3, #0
 800922a:	d101      	bne.n	8009230 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800922c:	2301      	movs	r3, #1
 800922e:	e000      	b.n	8009232 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8009230:	2300      	movs	r3, #0
 8009232:	2b01      	cmp	r3, #1
 8009234:	d001      	beq.n	800923a <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8009236:	2301      	movs	r3, #1
 8009238:	e000      	b.n	800923c <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 800923a:	2300      	movs	r3, #0
    }
 800923c:	4618      	mov	r0, r3
 800923e:	370c      	adds	r7, #12
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr

08009248 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8009248:	b580      	push	{r7, lr}
 800924a:	af00      	add	r7, sp, #0
 800924c:	4801      	ldr	r0, [pc, #4]	; (8009254 <__tcf_0+0xc>)
 800924e:	f7fa fda7 	bl	8003da0 <_ZN8touchgfx13GeneratedFontD1Ev>
 8009252:	bd80      	pop	{r7, pc}
 8009254:	24001b80 	.word	0x24001b80

08009258 <_Z23getFont_verdana_20_4bppv>:
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b08c      	sub	sp, #48	; 0x30
 800925c:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800925e:	4b1f      	ldr	r3, [pc, #124]	; (80092dc <_Z23getFont_verdana_20_4bppv+0x84>)
 8009260:	781b      	ldrb	r3, [r3, #0]
 8009262:	f3bf 8f5b 	dmb	ish
 8009266:	b2db      	uxtb	r3, r3
 8009268:	f003 0301 	and.w	r3, r3, #1
 800926c:	2b00      	cmp	r3, #0
 800926e:	bf0c      	ite	eq
 8009270:	2301      	moveq	r3, #1
 8009272:	2300      	movne	r3, #0
 8009274:	b2db      	uxtb	r3, r3
 8009276:	2b00      	cmp	r3, #0
 8009278:	d02c      	beq.n	80092d4 <_Z23getFont_verdana_20_4bppv+0x7c>
 800927a:	4818      	ldr	r0, [pc, #96]	; (80092dc <_Z23getFont_verdana_20_4bppv+0x84>)
 800927c:	f020 fe85 	bl	8029f8a <__cxa_guard_acquire>
 8009280:	4603      	mov	r3, r0
 8009282:	2b00      	cmp	r3, #0
 8009284:	bf14      	ite	ne
 8009286:	2301      	movne	r3, #1
 8009288:	2300      	moveq	r3, #0
 800928a:	b2db      	uxtb	r3, r3
 800928c:	2b00      	cmp	r3, #0
 800928e:	d021      	beq.n	80092d4 <_Z23getFont_verdana_20_4bppv+0x7c>
 8009290:	2300      	movs	r3, #0
 8009292:	930a      	str	r3, [sp, #40]	; 0x28
 8009294:	2300      	movs	r3, #0
 8009296:	9309      	str	r3, [sp, #36]	; 0x24
 8009298:	2300      	movs	r3, #0
 800929a:	9308      	str	r3, [sp, #32]
 800929c:	233f      	movs	r3, #63	; 0x3f
 800929e:	9307      	str	r3, [sp, #28]
 80092a0:	4b0f      	ldr	r3, [pc, #60]	; (80092e0 <_Z23getFont_verdana_20_4bppv+0x88>)
 80092a2:	9306      	str	r3, [sp, #24]
 80092a4:	4b0f      	ldr	r3, [pc, #60]	; (80092e4 <_Z23getFont_verdana_20_4bppv+0x8c>)
 80092a6:	9305      	str	r3, [sp, #20]
 80092a8:	2300      	movs	r3, #0
 80092aa:	9304      	str	r3, [sp, #16]
 80092ac:	2300      	movs	r3, #0
 80092ae:	9303      	str	r3, [sp, #12]
 80092b0:	2301      	movs	r3, #1
 80092b2:	9302      	str	r3, [sp, #8]
 80092b4:	2304      	movs	r3, #4
 80092b6:	9301      	str	r3, [sp, #4]
 80092b8:	2300      	movs	r3, #0
 80092ba:	9300      	str	r3, [sp, #0]
 80092bc:	2314      	movs	r3, #20
 80092be:	2201      	movs	r2, #1
 80092c0:	4909      	ldr	r1, [pc, #36]	; (80092e8 <_Z23getFont_verdana_20_4bppv+0x90>)
 80092c2:	480a      	ldr	r0, [pc, #40]	; (80092ec <_Z23getFont_verdana_20_4bppv+0x94>)
 80092c4:	f7fc fa08 	bl	80056d8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80092c8:	4804      	ldr	r0, [pc, #16]	; (80092dc <_Z23getFont_verdana_20_4bppv+0x84>)
 80092ca:	f020 fe6a 	bl	8029fa2 <__cxa_guard_release>
 80092ce:	4808      	ldr	r0, [pc, #32]	; (80092f0 <_Z23getFont_verdana_20_4bppv+0x98>)
 80092d0:	f020 fea6 	bl	802a020 <atexit>
    return verdana_20_4bpp;
 80092d4:	4b05      	ldr	r3, [pc, #20]	; (80092ec <_Z23getFont_verdana_20_4bppv+0x94>)
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}
 80092dc:	24001ba8 	.word	0x24001ba8
 80092e0:	0802fc3c 	.word	0x0802fc3c
 80092e4:	0802fc50 	.word	0x0802fc50
 80092e8:	900007ec 	.word	0x900007ec
 80092ec:	24001b80 	.word	0x24001b80
 80092f0:	08009249 	.word	0x08009249

080092f4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80092f4:	b580      	push	{r7, lr}
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	4801      	ldr	r0, [pc, #4]	; (8009300 <__tcf_0+0xc>)
 80092fa:	f7fa fd51 	bl	8003da0 <_ZN8touchgfx13GeneratedFontD1Ev>
 80092fe:	bd80      	pop	{r7, pc}
 8009300:	24001bac 	.word	0x24001bac

08009304 <_Z23getFont_verdana_40_4bppv>:
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b08c      	sub	sp, #48	; 0x30
 8009308:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800930a:	4b1f      	ldr	r3, [pc, #124]	; (8009388 <_Z23getFont_verdana_40_4bppv+0x84>)
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	f3bf 8f5b 	dmb	ish
 8009312:	b2db      	uxtb	r3, r3
 8009314:	f003 0301 	and.w	r3, r3, #1
 8009318:	2b00      	cmp	r3, #0
 800931a:	bf0c      	ite	eq
 800931c:	2301      	moveq	r3, #1
 800931e:	2300      	movne	r3, #0
 8009320:	b2db      	uxtb	r3, r3
 8009322:	2b00      	cmp	r3, #0
 8009324:	d02c      	beq.n	8009380 <_Z23getFont_verdana_40_4bppv+0x7c>
 8009326:	4818      	ldr	r0, [pc, #96]	; (8009388 <_Z23getFont_verdana_40_4bppv+0x84>)
 8009328:	f020 fe2f 	bl	8029f8a <__cxa_guard_acquire>
 800932c:	4603      	mov	r3, r0
 800932e:	2b00      	cmp	r3, #0
 8009330:	bf14      	ite	ne
 8009332:	2301      	movne	r3, #1
 8009334:	2300      	moveq	r3, #0
 8009336:	b2db      	uxtb	r3, r3
 8009338:	2b00      	cmp	r3, #0
 800933a:	d021      	beq.n	8009380 <_Z23getFont_verdana_40_4bppv+0x7c>
 800933c:	2300      	movs	r3, #0
 800933e:	930a      	str	r3, [sp, #40]	; 0x28
 8009340:	2300      	movs	r3, #0
 8009342:	9309      	str	r3, [sp, #36]	; 0x24
 8009344:	2300      	movs	r3, #0
 8009346:	9308      	str	r3, [sp, #32]
 8009348:	233f      	movs	r3, #63	; 0x3f
 800934a:	9307      	str	r3, [sp, #28]
 800934c:	4b0f      	ldr	r3, [pc, #60]	; (800938c <_Z23getFont_verdana_40_4bppv+0x88>)
 800934e:	9306      	str	r3, [sp, #24]
 8009350:	4b0f      	ldr	r3, [pc, #60]	; (8009390 <_Z23getFont_verdana_40_4bppv+0x8c>)
 8009352:	9305      	str	r3, [sp, #20]
 8009354:	2300      	movs	r3, #0
 8009356:	9304      	str	r3, [sp, #16]
 8009358:	2300      	movs	r3, #0
 800935a:	9303      	str	r3, [sp, #12]
 800935c:	2301      	movs	r3, #1
 800935e:	9302      	str	r3, [sp, #8]
 8009360:	2304      	movs	r3, #4
 8009362:	9301      	str	r3, [sp, #4]
 8009364:	2300      	movs	r3, #0
 8009366:	9300      	str	r3, [sp, #0]
 8009368:	2328      	movs	r3, #40	; 0x28
 800936a:	2201      	movs	r2, #1
 800936c:	4909      	ldr	r1, [pc, #36]	; (8009394 <_Z23getFont_verdana_40_4bppv+0x90>)
 800936e:	480a      	ldr	r0, [pc, #40]	; (8009398 <_Z23getFont_verdana_40_4bppv+0x94>)
 8009370:	f7fc f9b2 	bl	80056d8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8009374:	4804      	ldr	r0, [pc, #16]	; (8009388 <_Z23getFont_verdana_40_4bppv+0x84>)
 8009376:	f020 fe14 	bl	8029fa2 <__cxa_guard_release>
 800937a:	4808      	ldr	r0, [pc, #32]	; (800939c <_Z23getFont_verdana_40_4bppv+0x98>)
 800937c:	f020 fe50 	bl	802a020 <atexit>
    return verdana_40_4bpp;
 8009380:	4b05      	ldr	r3, [pc, #20]	; (8009398 <_Z23getFont_verdana_40_4bppv+0x94>)
}
 8009382:	4618      	mov	r0, r3
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}
 8009388:	24001bd4 	.word	0x24001bd4
 800938c:	0802fc40 	.word	0x0802fc40
 8009390:	0802fc54 	.word	0x0802fc54
 8009394:	900007fc 	.word	0x900007fc
 8009398:	24001bac 	.word	0x24001bac
 800939c:	080092f5 	.word	0x080092f5

080093a0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdanab_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdanab_10_4bpp();

touchgfx::GeneratedFont& getFont_verdanab_10_4bpp()
{
    static touchgfx::GeneratedFont verdanab_10_4bpp(glyphs_verdanab_10_4bpp, 26, 10, 2, 4, 1, 0, 1, unicodes_verdanab_10_4bpp, kerning_verdanab_10_4bpp, 63, 0, 0, 0);
 80093a0:	b580      	push	{r7, lr}
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	4801      	ldr	r0, [pc, #4]	; (80093ac <__tcf_0+0xc>)
 80093a6:	f7fa fcfb 	bl	8003da0 <_ZN8touchgfx13GeneratedFontD1Ev>
 80093aa:	bd80      	pop	{r7, pc}
 80093ac:	24001bd8 	.word	0x24001bd8

080093b0 <_Z24getFont_verdanab_10_4bppv>:
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b08c      	sub	sp, #48	; 0x30
 80093b4:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdanab_10_4bpp(glyphs_verdanab_10_4bpp, 26, 10, 2, 4, 1, 0, 1, unicodes_verdanab_10_4bpp, kerning_verdanab_10_4bpp, 63, 0, 0, 0);
 80093b6:	4b1f      	ldr	r3, [pc, #124]	; (8009434 <_Z24getFont_verdanab_10_4bppv+0x84>)
 80093b8:	781b      	ldrb	r3, [r3, #0]
 80093ba:	f3bf 8f5b 	dmb	ish
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	f003 0301 	and.w	r3, r3, #1
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	bf0c      	ite	eq
 80093c8:	2301      	moveq	r3, #1
 80093ca:	2300      	movne	r3, #0
 80093cc:	b2db      	uxtb	r3, r3
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d02c      	beq.n	800942c <_Z24getFont_verdanab_10_4bppv+0x7c>
 80093d2:	4818      	ldr	r0, [pc, #96]	; (8009434 <_Z24getFont_verdanab_10_4bppv+0x84>)
 80093d4:	f020 fdd9 	bl	8029f8a <__cxa_guard_acquire>
 80093d8:	4603      	mov	r3, r0
 80093da:	2b00      	cmp	r3, #0
 80093dc:	bf14      	ite	ne
 80093de:	2301      	movne	r3, #1
 80093e0:	2300      	moveq	r3, #0
 80093e2:	b2db      	uxtb	r3, r3
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d021      	beq.n	800942c <_Z24getFont_verdanab_10_4bppv+0x7c>
 80093e8:	2300      	movs	r3, #0
 80093ea:	930a      	str	r3, [sp, #40]	; 0x28
 80093ec:	2300      	movs	r3, #0
 80093ee:	9309      	str	r3, [sp, #36]	; 0x24
 80093f0:	2300      	movs	r3, #0
 80093f2:	9308      	str	r3, [sp, #32]
 80093f4:	233f      	movs	r3, #63	; 0x3f
 80093f6:	9307      	str	r3, [sp, #28]
 80093f8:	4b0f      	ldr	r3, [pc, #60]	; (8009438 <_Z24getFont_verdanab_10_4bppv+0x88>)
 80093fa:	9306      	str	r3, [sp, #24]
 80093fc:	4b0f      	ldr	r3, [pc, #60]	; (800943c <_Z24getFont_verdanab_10_4bppv+0x8c>)
 80093fe:	9305      	str	r3, [sp, #20]
 8009400:	2301      	movs	r3, #1
 8009402:	9304      	str	r3, [sp, #16]
 8009404:	2300      	movs	r3, #0
 8009406:	9303      	str	r3, [sp, #12]
 8009408:	2301      	movs	r3, #1
 800940a:	9302      	str	r3, [sp, #8]
 800940c:	2304      	movs	r3, #4
 800940e:	9301      	str	r3, [sp, #4]
 8009410:	2302      	movs	r3, #2
 8009412:	9300      	str	r3, [sp, #0]
 8009414:	230a      	movs	r3, #10
 8009416:	221a      	movs	r2, #26
 8009418:	4909      	ldr	r1, [pc, #36]	; (8009440 <_Z24getFont_verdanab_10_4bppv+0x90>)
 800941a:	480a      	ldr	r0, [pc, #40]	; (8009444 <_Z24getFont_verdanab_10_4bppv+0x94>)
 800941c:	f7fc f95c 	bl	80056d8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8009420:	4804      	ldr	r0, [pc, #16]	; (8009434 <_Z24getFont_verdanab_10_4bppv+0x84>)
 8009422:	f020 fdbe 	bl	8029fa2 <__cxa_guard_release>
 8009426:	4808      	ldr	r0, [pc, #32]	; (8009448 <_Z24getFont_verdanab_10_4bppv+0x98>)
 8009428:	f020 fdfa 	bl	802a020 <atexit>
    return verdanab_10_4bpp;
 800942c:	4b05      	ldr	r3, [pc, #20]	; (8009444 <_Z24getFont_verdanab_10_4bppv+0x94>)
}
 800942e:	4618      	mov	r0, r3
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}
 8009434:	24001c00 	.word	0x24001c00
 8009438:	0802fc44 	.word	0x0802fc44
 800943c:	0802fc58 	.word	0x0802fc58
 8009440:	9000080c 	.word	0x9000080c
 8009444:	24001bd8 	.word	0x24001bd8
 8009448:	080093a1 	.word	0x080093a1

0800944c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdanab_12_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdanab_12_4bpp();

touchgfx::GeneratedFont& getFont_verdanab_12_4bpp()
{
    static touchgfx::GeneratedFont verdanab_12_4bpp(glyphs_verdanab_12_4bpp, 21, 12, 2, 4, 1, 0, 1, unicodes_verdanab_12_4bpp, kerning_verdanab_12_4bpp, 63, 0, 0, 0);
 800944c:	b580      	push	{r7, lr}
 800944e:	af00      	add	r7, sp, #0
 8009450:	4801      	ldr	r0, [pc, #4]	; (8009458 <__tcf_0+0xc>)
 8009452:	f7fa fca5 	bl	8003da0 <_ZN8touchgfx13GeneratedFontD1Ev>
 8009456:	bd80      	pop	{r7, pc}
 8009458:	24001c04 	.word	0x24001c04

0800945c <_Z24getFont_verdanab_12_4bppv>:
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b08c      	sub	sp, #48	; 0x30
 8009460:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdanab_12_4bpp(glyphs_verdanab_12_4bpp, 21, 12, 2, 4, 1, 0, 1, unicodes_verdanab_12_4bpp, kerning_verdanab_12_4bpp, 63, 0, 0, 0);
 8009462:	4b1f      	ldr	r3, [pc, #124]	; (80094e0 <_Z24getFont_verdanab_12_4bppv+0x84>)
 8009464:	781b      	ldrb	r3, [r3, #0]
 8009466:	f3bf 8f5b 	dmb	ish
 800946a:	b2db      	uxtb	r3, r3
 800946c:	f003 0301 	and.w	r3, r3, #1
 8009470:	2b00      	cmp	r3, #0
 8009472:	bf0c      	ite	eq
 8009474:	2301      	moveq	r3, #1
 8009476:	2300      	movne	r3, #0
 8009478:	b2db      	uxtb	r3, r3
 800947a:	2b00      	cmp	r3, #0
 800947c:	d02c      	beq.n	80094d8 <_Z24getFont_verdanab_12_4bppv+0x7c>
 800947e:	4818      	ldr	r0, [pc, #96]	; (80094e0 <_Z24getFont_verdanab_12_4bppv+0x84>)
 8009480:	f020 fd83 	bl	8029f8a <__cxa_guard_acquire>
 8009484:	4603      	mov	r3, r0
 8009486:	2b00      	cmp	r3, #0
 8009488:	bf14      	ite	ne
 800948a:	2301      	movne	r3, #1
 800948c:	2300      	moveq	r3, #0
 800948e:	b2db      	uxtb	r3, r3
 8009490:	2b00      	cmp	r3, #0
 8009492:	d021      	beq.n	80094d8 <_Z24getFont_verdanab_12_4bppv+0x7c>
 8009494:	2300      	movs	r3, #0
 8009496:	930a      	str	r3, [sp, #40]	; 0x28
 8009498:	2300      	movs	r3, #0
 800949a:	9309      	str	r3, [sp, #36]	; 0x24
 800949c:	2300      	movs	r3, #0
 800949e:	9308      	str	r3, [sp, #32]
 80094a0:	233f      	movs	r3, #63	; 0x3f
 80094a2:	9307      	str	r3, [sp, #28]
 80094a4:	4b0f      	ldr	r3, [pc, #60]	; (80094e4 <_Z24getFont_verdanab_12_4bppv+0x88>)
 80094a6:	9306      	str	r3, [sp, #24]
 80094a8:	4b0f      	ldr	r3, [pc, #60]	; (80094e8 <_Z24getFont_verdanab_12_4bppv+0x8c>)
 80094aa:	9305      	str	r3, [sp, #20]
 80094ac:	2301      	movs	r3, #1
 80094ae:	9304      	str	r3, [sp, #16]
 80094b0:	2300      	movs	r3, #0
 80094b2:	9303      	str	r3, [sp, #12]
 80094b4:	2301      	movs	r3, #1
 80094b6:	9302      	str	r3, [sp, #8]
 80094b8:	2304      	movs	r3, #4
 80094ba:	9301      	str	r3, [sp, #4]
 80094bc:	2302      	movs	r3, #2
 80094be:	9300      	str	r3, [sp, #0]
 80094c0:	230c      	movs	r3, #12
 80094c2:	2215      	movs	r2, #21
 80094c4:	4909      	ldr	r1, [pc, #36]	; (80094ec <_Z24getFont_verdanab_12_4bppv+0x90>)
 80094c6:	480a      	ldr	r0, [pc, #40]	; (80094f0 <_Z24getFont_verdanab_12_4bppv+0x94>)
 80094c8:	f7fc f906 	bl	80056d8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80094cc:	4804      	ldr	r0, [pc, #16]	; (80094e0 <_Z24getFont_verdanab_12_4bppv+0x84>)
 80094ce:	f020 fd68 	bl	8029fa2 <__cxa_guard_release>
 80094d2:	4808      	ldr	r0, [pc, #32]	; (80094f4 <_Z24getFont_verdanab_12_4bppv+0x98>)
 80094d4:	f020 fda4 	bl	802a020 <atexit>
    return verdanab_12_4bpp;
 80094d8:	4b05      	ldr	r3, [pc, #20]	; (80094f0 <_Z24getFont_verdanab_12_4bppv+0x94>)
}
 80094da:	4618      	mov	r0, r3
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}
 80094e0:	24001c2c 	.word	0x24001c2c
 80094e4:	0802fc48 	.word	0x0802fc48
 80094e8:	0802fc5c 	.word	0x0802fc5c
 80094ec:	90000978 	.word	0x90000978
 80094f0:	24001c04 	.word	0x24001c04
 80094f4:	0800944d 	.word	0x0800944d

080094f8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdanab_8_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdanab_8_4bpp();

touchgfx::GeneratedFont& getFont_verdanab_8_4bpp()
{
    static touchgfx::GeneratedFont verdanab_8_4bpp(glyphs_verdanab_8_4bpp, 22, 8, 2, 4, 1, 0, 1, unicodes_verdanab_8_4bpp, kerning_verdanab_8_4bpp, 63, 0, 0, 0);
 80094f8:	b580      	push	{r7, lr}
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	4801      	ldr	r0, [pc, #4]	; (8009504 <__tcf_0+0xc>)
 80094fe:	f7fa fc4f 	bl	8003da0 <_ZN8touchgfx13GeneratedFontD1Ev>
 8009502:	bd80      	pop	{r7, pc}
 8009504:	24001c30 	.word	0x24001c30

08009508 <_Z23getFont_verdanab_8_4bppv>:
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b08c      	sub	sp, #48	; 0x30
 800950c:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdanab_8_4bpp(glyphs_verdanab_8_4bpp, 22, 8, 2, 4, 1, 0, 1, unicodes_verdanab_8_4bpp, kerning_verdanab_8_4bpp, 63, 0, 0, 0);
 800950e:	4b1f      	ldr	r3, [pc, #124]	; (800958c <_Z23getFont_verdanab_8_4bppv+0x84>)
 8009510:	781b      	ldrb	r3, [r3, #0]
 8009512:	f3bf 8f5b 	dmb	ish
 8009516:	b2db      	uxtb	r3, r3
 8009518:	f003 0301 	and.w	r3, r3, #1
 800951c:	2b00      	cmp	r3, #0
 800951e:	bf0c      	ite	eq
 8009520:	2301      	moveq	r3, #1
 8009522:	2300      	movne	r3, #0
 8009524:	b2db      	uxtb	r3, r3
 8009526:	2b00      	cmp	r3, #0
 8009528:	d02c      	beq.n	8009584 <_Z23getFont_verdanab_8_4bppv+0x7c>
 800952a:	4818      	ldr	r0, [pc, #96]	; (800958c <_Z23getFont_verdanab_8_4bppv+0x84>)
 800952c:	f020 fd2d 	bl	8029f8a <__cxa_guard_acquire>
 8009530:	4603      	mov	r3, r0
 8009532:	2b00      	cmp	r3, #0
 8009534:	bf14      	ite	ne
 8009536:	2301      	movne	r3, #1
 8009538:	2300      	moveq	r3, #0
 800953a:	b2db      	uxtb	r3, r3
 800953c:	2b00      	cmp	r3, #0
 800953e:	d021      	beq.n	8009584 <_Z23getFont_verdanab_8_4bppv+0x7c>
 8009540:	2300      	movs	r3, #0
 8009542:	930a      	str	r3, [sp, #40]	; 0x28
 8009544:	2300      	movs	r3, #0
 8009546:	9309      	str	r3, [sp, #36]	; 0x24
 8009548:	2300      	movs	r3, #0
 800954a:	9308      	str	r3, [sp, #32]
 800954c:	233f      	movs	r3, #63	; 0x3f
 800954e:	9307      	str	r3, [sp, #28]
 8009550:	4b0f      	ldr	r3, [pc, #60]	; (8009590 <_Z23getFont_verdanab_8_4bppv+0x88>)
 8009552:	9306      	str	r3, [sp, #24]
 8009554:	4b0f      	ldr	r3, [pc, #60]	; (8009594 <_Z23getFont_verdanab_8_4bppv+0x8c>)
 8009556:	9305      	str	r3, [sp, #20]
 8009558:	2301      	movs	r3, #1
 800955a:	9304      	str	r3, [sp, #16]
 800955c:	2300      	movs	r3, #0
 800955e:	9303      	str	r3, [sp, #12]
 8009560:	2301      	movs	r3, #1
 8009562:	9302      	str	r3, [sp, #8]
 8009564:	2304      	movs	r3, #4
 8009566:	9301      	str	r3, [sp, #4]
 8009568:	2302      	movs	r3, #2
 800956a:	9300      	str	r3, [sp, #0]
 800956c:	2308      	movs	r3, #8
 800956e:	2216      	movs	r2, #22
 8009570:	4909      	ldr	r1, [pc, #36]	; (8009598 <_Z23getFont_verdanab_8_4bppv+0x90>)
 8009572:	480a      	ldr	r0, [pc, #40]	; (800959c <_Z23getFont_verdanab_8_4bppv+0x94>)
 8009574:	f7fc f8b0 	bl	80056d8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8009578:	4804      	ldr	r0, [pc, #16]	; (800958c <_Z23getFont_verdanab_8_4bppv+0x84>)
 800957a:	f020 fd12 	bl	8029fa2 <__cxa_guard_release>
 800957e:	4808      	ldr	r0, [pc, #32]	; (80095a0 <_Z23getFont_verdanab_8_4bppv+0x98>)
 8009580:	f020 fd4e 	bl	802a020 <atexit>
    return verdanab_8_4bpp;
 8009584:	4b05      	ldr	r3, [pc, #20]	; (800959c <_Z23getFont_verdanab_8_4bppv+0x94>)
}
 8009586:	4618      	mov	r0, r3
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}
 800958c:	24001c58 	.word	0x24001c58
 8009590:	0802fc4c 	.word	0x0802fc4c
 8009594:	0802fc60 	.word	0x0802fc60
 8009598:	90000aa0 	.word	0x90000aa0
 800959c:	24001c30 	.word	0x24001c30
 80095a0:	080094f9 	.word	0x080094f9

080095a4 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 80095a4:	b480      	push	{r7}
 80095a6:	b085      	sub	sp, #20
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	60f8      	str	r0, [r7, #12]
 80095ac:	460b      	mov	r3, r1
 80095ae:	607a      	str	r2, [r7, #4]
 80095b0:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 80095b2:	2300      	movs	r3, #0
    }
 80095b4:	4618      	mov	r0, r3
 80095b6:	3714      	adds	r7, #20
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr

080095c0 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 80095c0:	b480      	push	{r7}
 80095c2:	b083      	sub	sp, #12
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80095c8:	2300      	movs	r3, #0
    }
 80095ca:	4618      	mov	r0, r3
 80095cc:	370c      	adds	r7, #12
 80095ce:	46bd      	mov	sp, r7
 80095d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d4:	4770      	bx	lr

080095d6 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 80095d6:	b480      	push	{r7}
 80095d8:	b083      	sub	sp, #12
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]
    {
        return 0;
 80095de:	2300      	movs	r3, #0
    }
 80095e0:	4618      	mov	r0, r3
 80095e2:	370c      	adds	r7, #12
 80095e4:	46bd      	mov	sp, r7
 80095e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ea:	4770      	bx	lr

080095ec <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 80095ec:	b480      	push	{r7}
 80095ee:	b085      	sub	sp, #20
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	60f8      	str	r0, [r7, #12]
 80095f4:	60b9      	str	r1, [r7, #8]
 80095f6:	4613      	mov	r3, r2
 80095f8:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 80095fa:	4a07      	ldr	r2, [pc, #28]	; (8009618 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	6013      	str	r3, [r2, #0]
        fonts = f;
 8009600:	4a06      	ldr	r2, [pc, #24]	; (800961c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8009606:	4a06      	ldr	r2, [pc, #24]	; (8009620 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8009608:	88fb      	ldrh	r3, [r7, #6]
 800960a:	8013      	strh	r3, [r2, #0]
    }
 800960c:	bf00      	nop
 800960e:	3714      	adds	r7, #20
 8009610:	46bd      	mov	sp, r7
 8009612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009616:	4770      	bx	lr
 8009618:	2400b620 	.word	0x2400b620
 800961c:	2400b628 	.word	0x2400b628
 8009620:	2400b624 	.word	0x2400b624

08009624 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8009624:	b40e      	push	{r1, r2, r3}
 8009626:	b580      	push	{r7, lr}
 8009628:	b085      	sub	sp, #20
 800962a:	af00      	add	r7, sp, #0
 800962c:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 800962e:	f107 0320 	add.w	r3, r7, #32
 8009632:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	69fa      	ldr	r2, [r7, #28]
 8009638:	2100      	movs	r1, #0
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f012 fa0c 	bl	801ba58 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8009640:	4603      	mov	r3, r0
 8009642:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8009644:	89fb      	ldrh	r3, [r7, #14]
}
 8009646:	4618      	mov	r0, r3
 8009648:	3714      	adds	r7, #20
 800964a:	46bd      	mov	sp, r7
 800964c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009650:	b003      	add	sp, #12
 8009652:	4770      	bx	lr

08009654 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8009654:	b40c      	push	{r2, r3}
 8009656:	b580      	push	{r7, lr}
 8009658:	b084      	sub	sp, #16
 800965a:	af00      	add	r7, sp, #0
 800965c:	6078      	str	r0, [r7, #4]
 800965e:	460b      	mov	r3, r1
 8009660:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8009662:	f107 031c 	add.w	r3, r7, #28
 8009666:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8009668:	78f9      	ldrb	r1, [r7, #3]
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	69ba      	ldr	r2, [r7, #24]
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f012 f9f2 	bl	801ba58 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8009674:	4603      	mov	r3, r0
 8009676:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8009678:	89fb      	ldrh	r3, [r7, #14]
}
 800967a:	4618      	mov	r0, r3
 800967c:	3710      	adds	r7, #16
 800967e:	46bd      	mov	sp, r7
 8009680:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009684:	b002      	add	sp, #8
 8009686:	4770      	bx	lr

08009688 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b08a      	sub	sp, #40	; 0x28
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	460b      	mov	r3, r1
 8009692:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009698:	2b00      	cmp	r3, #0
 800969a:	d016      	beq.n	80096ca <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	3322      	adds	r3, #34	; 0x22
 80096a0:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 80096a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a4:	8adb      	ldrh	r3, [r3, #22]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d105      	bne.n	80096b6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 80096aa:	4b43      	ldr	r3, [pc, #268]	; (80097b8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 80096ac:	4a43      	ldr	r2, [pc, #268]	; (80097bc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 80096ae:	21c0      	movs	r1, #192	; 0xc0
 80096b0:	4843      	ldr	r0, [pc, #268]	; (80097c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80096b2:	f020 fc97 	bl	8029fe4 <__assert_func>
            return buffer[pos];
 80096b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b8:	8a9b      	ldrh	r3, [r3, #20]
 80096ba:	461a      	mov	r2, r3
 80096bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096be:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d001      	beq.n	80096ca <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 80096c6:	2301      	movs	r3, #1
 80096c8:	e000      	b.n	80096cc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 80096ca:	2300      	movs	r3, #0
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d06a      	beq.n	80097a6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f013 fd7d 	bl	801d1d0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	3322      	adds	r3, #34	; 0x22
 80096da:	623b      	str	r3, [r7, #32]
 80096dc:	2301      	movs	r3, #1
 80096de:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 80096e0:	6a3b      	ldr	r3, [r7, #32]
 80096e2:	8adb      	ldrh	r3, [r3, #22]
 80096e4:	8bfa      	ldrh	r2, [r7, #30]
 80096e6:	429a      	cmp	r2, r3
 80096e8:	d305      	bcc.n	80096f6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 80096ea:	4b36      	ldr	r3, [pc, #216]	; (80097c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 80096ec:	4a36      	ldr	r2, [pc, #216]	; (80097c8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 80096ee:	21c5      	movs	r1, #197	; 0xc5
 80096f0:	4833      	ldr	r0, [pc, #204]	; (80097c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80096f2:	f020 fc77 	bl	8029fe4 <__assert_func>
            const uint16_t index = pos + offset;
 80096f6:	6a3b      	ldr	r3, [r7, #32]
 80096f8:	8a9a      	ldrh	r2, [r3, #20]
 80096fa:	8bfb      	ldrh	r3, [r7, #30]
 80096fc:	4413      	add	r3, r2
 80096fe:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8009700:	8bbb      	ldrh	r3, [r7, #28]
 8009702:	2b09      	cmp	r3, #9
 8009704:	d801      	bhi.n	800970a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8009706:	8bbb      	ldrh	r3, [r7, #28]
 8009708:	e001      	b.n	800970e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 800970a:	8bbb      	ldrh	r3, [r7, #28]
 800970c:	3b0a      	subs	r3, #10
 800970e:	6a3a      	ldr	r2, [r7, #32]
 8009710:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009714:	f640 123f 	movw	r2, #2367	; 0x93f
 8009718:	4293      	cmp	r3, r2
 800971a:	bf0c      	ite	eq
 800971c:	2301      	moveq	r3, #1
 800971e:	2300      	movne	r3, #0
 8009720:	b2db      	uxtb	r3, r3
 8009722:	2b00      	cmp	r3, #0
 8009724:	d03f      	beq.n	80097a6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	3322      	adds	r3, #34	; 0x22
 800972a:	687a      	ldr	r2, [r7, #4]
 800972c:	3222      	adds	r2, #34	; 0x22
 800972e:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8009730:	68ba      	ldr	r2, [r7, #8]
 8009732:	8ad2      	ldrh	r2, [r2, #22]
 8009734:	2a00      	cmp	r2, #0
 8009736:	d105      	bne.n	8009744 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8009738:	4b1f      	ldr	r3, [pc, #124]	; (80097b8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800973a:	4a20      	ldr	r2, [pc, #128]	; (80097bc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800973c:	21c0      	movs	r1, #192	; 0xc0
 800973e:	4820      	ldr	r0, [pc, #128]	; (80097c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8009740:	f020 fc50 	bl	8029fe4 <__assert_func>
            return buffer[pos];
 8009744:	68ba      	ldr	r2, [r7, #8]
 8009746:	8a92      	ldrh	r2, [r2, #20]
 8009748:	4611      	mov	r1, r2
 800974a:	68ba      	ldr	r2, [r7, #8]
 800974c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8009750:	613b      	str	r3, [r7, #16]
 8009752:	4613      	mov	r3, r2
 8009754:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	8adb      	ldrh	r3, [r3, #22]
 800975a:	2b01      	cmp	r3, #1
 800975c:	d806      	bhi.n	800976c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 800975e:	4b1b      	ldr	r3, [pc, #108]	; (80097cc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8009760:	4a1b      	ldr	r2, [pc, #108]	; (80097d0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8009762:	f240 110d 	movw	r1, #269	; 0x10d
 8009766:	4816      	ldr	r0, [pc, #88]	; (80097c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8009768:	f020 fc3c 	bl	8029fe4 <__assert_func>
            const uint16_t index = pos + 1;
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	8a9b      	ldrh	r3, [r3, #20]
 8009770:	3301      	adds	r3, #1
 8009772:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8009774:	89bb      	ldrh	r3, [r7, #12]
 8009776:	2b09      	cmp	r3, #9
 8009778:	d801      	bhi.n	800977e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 800977a:	89bb      	ldrh	r3, [r7, #12]
 800977c:	e000      	b.n	8009780 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 800977e:	2300      	movs	r3, #0
 8009780:	693a      	ldr	r2, [r7, #16]
 8009782:	89f9      	ldrh	r1, [r7, #14]
 8009784:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8009788:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	3322      	adds	r3, #34	; 0x22
 800978e:	61bb      	str	r3, [r7, #24]
 8009790:	f640 133f 	movw	r3, #2367	; 0x93f
 8009794:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8009796:	69bb      	ldr	r3, [r7, #24]
 8009798:	8a9b      	ldrh	r3, [r3, #20]
 800979a:	4619      	mov	r1, r3
 800979c:	69bb      	ldr	r3, [r7, #24]
 800979e:	8afa      	ldrh	r2, [r7, #22]
 80097a0:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 80097a4:	bf00      	nop
        }
    }
    return getNextChar();
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f013 fbf6 	bl	801cf98 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80097ac:	4603      	mov	r3, r0
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3728      	adds	r7, #40	; 0x28
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}
 80097b6:	bf00      	nop
 80097b8:	0802bbe8 	.word	0x0802bbe8
 80097bc:	0802bbf4 	.word	0x0802bbf4
 80097c0:	0802bca0 	.word	0x0802bca0
 80097c4:	0802bcf8 	.word	0x0802bcf8
 80097c8:	0802bd08 	.word	0x0802bd08
 80097cc:	0802bddc 	.word	0x0802bddc
 80097d0:	0802bde8 	.word	0x0802bde8

080097d4 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b082      	sub	sp, #8
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f013 fb93 	bl	801cf08 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 80097e2:	bf00      	nop
 80097e4:	3708      	adds	r7, #8
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}

080097ea <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 80097ea:	b580      	push	{r7, lr}
 80097ec:	b088      	sub	sp, #32
 80097ee:	af02      	add	r7, sp, #8
 80097f0:	60f8      	str	r0, [r7, #12]
 80097f2:	1d38      	adds	r0, r7, #4
 80097f4:	e880 0006 	stmia.w	r0, {r1, r2}
 80097f8:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 80097fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80097fe:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8009800:	1d39      	adds	r1, r7, #4
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	9301      	str	r3, [sp, #4]
 8009806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009808:	9300      	str	r3, [sp, #0]
 800980a:	6a3b      	ldr	r3, [r7, #32]
 800980c:	683a      	ldr	r2, [r7, #0]
 800980e:	68f8      	ldr	r0, [r7, #12]
 8009810:	f010 fdfa 	bl	801a408 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8009814:	bf00      	nop
 8009816:	3718      	adds	r7, #24
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}

0800981c <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 800981c:	b590      	push	{r4, r7, lr}
 800981e:	b085      	sub	sp, #20
 8009820:	af00      	add	r7, sp, #0
 8009822:	4603      	mov	r3, r0
 8009824:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8009826:	2300      	movs	r3, #0
 8009828:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 800982a:	88fb      	ldrh	r3, [r7, #6]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d127      	bne.n	8009880 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8009830:	88fb      	ldrh	r3, [r7, #6]
 8009832:	4a1e      	ldr	r2, [pc, #120]	; (80098ac <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8009834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d016      	beq.n	800986a <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 800983c:	88fb      	ldrh	r3, [r7, #6]
 800983e:	4a1b      	ldr	r2, [pc, #108]	; (80098ac <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8009840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009844:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	68ba      	ldr	r2, [r7, #8]
 800984c:	4413      	add	r3, r2
 800984e:	4a18      	ldr	r2, [pc, #96]	; (80098b0 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8009850:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	685b      	ldr	r3, [r3, #4]
 8009856:	68ba      	ldr	r2, [r7, #8]
 8009858:	4413      	add	r3, r2
 800985a:	4a16      	ldr	r2, [pc, #88]	; (80098b4 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800985c:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	689b      	ldr	r3, [r3, #8]
 8009862:	68ba      	ldr	r2, [r7, #8]
 8009864:	4413      	add	r3, r2
 8009866:	60fb      	str	r3, [r7, #12]
 8009868:	e00a      	b.n	8009880 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 800986a:	4b11      	ldr	r3, [pc, #68]	; (80098b0 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800986c:	4a12      	ldr	r2, [pc, #72]	; (80098b8 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 800986e:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8009870:	4a12      	ldr	r2, [pc, #72]	; (80098bc <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8009872:	4b10      	ldr	r3, [pc, #64]	; (80098b4 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8009874:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8009876:	88fb      	ldrh	r3, [r7, #6]
 8009878:	4a11      	ldr	r2, [pc, #68]	; (80098c0 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 800987a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800987e:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d00d      	beq.n	80098a2 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8009886:	4a0f      	ldr	r2, [pc, #60]	; (80098c4 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8009888:	88fb      	ldrh	r3, [r7, #6]
 800988a:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800988c:	f000 f83e 	bl	800990c <_ZN17TypedTextDatabase8getFontsEv>
 8009890:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8009892:	f000 f833 	bl	80098fc <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8009896:	4603      	mov	r3, r0
 8009898:	461a      	mov	r2, r3
 800989a:	4621      	mov	r1, r4
 800989c:	68f8      	ldr	r0, [r7, #12]
 800989e:	f7ff fea5 	bl	80095ec <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 80098a2:	bf00      	nop
 80098a4:	3714      	adds	r7, #20
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd90      	pop	{r4, r7, pc}
 80098aa:	bf00      	nop
 80098ac:	24001c5c 	.word	0x24001c5c
 80098b0:	24001c64 	.word	0x24001c64
 80098b4:	24001c68 	.word	0x24001c68
 80098b8:	90000c04 	.word	0x90000c04
 80098bc:	90000bd4 	.word	0x90000bd4
 80098c0:	90000dec 	.word	0x90000dec
 80098c4:	24001c60 	.word	0x24001c60

080098c8 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 80098c8:	b480      	push	{r7}
 80098ca:	b083      	sub	sp, #12
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	460b      	mov	r3, r1
 80098d2:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 80098d4:	4b07      	ldr	r3, [pc, #28]	; (80098f4 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 80098d6:	681a      	ldr	r2, [r3, #0]
 80098d8:	4b07      	ldr	r3, [pc, #28]	; (80098f8 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 80098da:	6819      	ldr	r1, [r3, #0]
 80098dc:	887b      	ldrh	r3, [r7, #2]
 80098de:	009b      	lsls	r3, r3, #2
 80098e0:	440b      	add	r3, r1
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	005b      	lsls	r3, r3, #1
 80098e6:	4413      	add	r3, r2
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	370c      	adds	r7, #12
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr
 80098f4:	24001c64 	.word	0x24001c64
 80098f8:	24001c68 	.word	0x24001c68

080098fc <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 80098fc:	b480      	push	{r7}
 80098fe:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8009900:	230c      	movs	r3, #12
}
 8009902:	4618      	mov	r0, r3
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr

0800990c <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 800990c:	b480      	push	{r7}
 800990e:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8009910:	4b02      	ldr	r3, [pc, #8]	; (800991c <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8009912:	4618      	mov	r0, r3
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr
 800991c:	24001c6c 	.word	0x24001c6c

08009920 <_Z41__static_initialization_and_destruction_0ii>:
    case 4:
        touchgfx_fonts[4] = &(getFont_verdanab_12_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8009920:	b580      	push	{r7, lr}
 8009922:	b082      	sub	sp, #8
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
 8009928:	6039      	str	r1, [r7, #0]
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2b01      	cmp	r3, #1
 800992e:	d11d      	bne.n	800996c <_Z41__static_initialization_and_destruction_0ii+0x4c>
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009936:	4293      	cmp	r3, r2
 8009938:	d118      	bne.n	800996c <_Z41__static_initialization_and_destruction_0ii+0x4c>
    &(getFont_verdana_20_4bpp()),
 800993a:	f7ff fc8d 	bl	8009258 <_Z23getFont_verdana_20_4bppv>
 800993e:	4603      	mov	r3, r0
};
 8009940:	4a0c      	ldr	r2, [pc, #48]	; (8009974 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8009942:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 8009944:	f7ff fcde 	bl	8009304 <_Z23getFont_verdana_40_4bppv>
 8009948:	4603      	mov	r3, r0
};
 800994a:	4a0a      	ldr	r2, [pc, #40]	; (8009974 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800994c:	6053      	str	r3, [r2, #4]
    &(getFont_verdanab_8_4bpp()),
 800994e:	f7ff fddb 	bl	8009508 <_Z23getFont_verdanab_8_4bppv>
 8009952:	4603      	mov	r3, r0
};
 8009954:	4a07      	ldr	r2, [pc, #28]	; (8009974 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8009956:	6093      	str	r3, [r2, #8]
    &(getFont_verdanab_10_4bpp()),
 8009958:	f7ff fd2a 	bl	80093b0 <_Z24getFont_verdanab_10_4bppv>
 800995c:	4603      	mov	r3, r0
};
 800995e:	4a05      	ldr	r2, [pc, #20]	; (8009974 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8009960:	60d3      	str	r3, [r2, #12]
    &(getFont_verdanab_12_4bpp())
 8009962:	f7ff fd7b 	bl	800945c <_Z24getFont_verdanab_12_4bppv>
 8009966:	4603      	mov	r3, r0
};
 8009968:	4a02      	ldr	r2, [pc, #8]	; (8009974 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800996a:	6113      	str	r3, [r2, #16]
} // namespace TypedTextDatabase
 800996c:	bf00      	nop
 800996e:	3708      	adds	r7, #8
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}
 8009974:	24001c6c 	.word	0x24001c6c

08009978 <_GLOBAL__sub_I_touchgfx_fonts>:
 8009978:	b580      	push	{r7, lr}
 800997a:	af00      	add	r7, sp, #0
 800997c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009980:	2001      	movs	r0, #1
 8009982:	f7ff ffcd 	bl	8009920 <_Z41__static_initialization_and_destruction_0ii>
 8009986:	bd80      	pop	{r7, pc}

08009988 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8009988:	b580      	push	{r7, lr}
 800998a:	b084      	sub	sp, #16
 800998c:	af00      	add	r7, sp, #0
 800998e:	60f8      	str	r0, [r7, #12]
 8009990:	60b9      	str	r1, [r7, #8]
 8009992:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	687a      	ldr	r2, [r7, #4]
 8009998:	68b9      	ldr	r1, [r7, #8]
 800999a:	4618      	mov	r0, r3
 800999c:	f7fa fd52 	bl	8004444 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80099a0:	4a03      	ldr	r2, [pc, #12]	; (80099b0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	601a      	str	r2, [r3, #0]
{
}
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	4618      	mov	r0, r3
 80099aa:	3710      	adds	r7, #16
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}
 80099b0:	0802c24c 	.word	0x0802c24c

080099b4 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 80099b4:	b480      	push	{r7}
 80099b6:	b083      	sub	sp, #12
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
    {
    }
 80099bc:	bf00      	nop
 80099be:	370c      	adds	r7, #12
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr

080099c8 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 80099c8:	b480      	push	{r7}
 80099ca:	b083      	sub	sp, #12
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
    {
    }
 80099d0:	bf00      	nop
 80099d2:	370c      	adds	r7, #12
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr

080099dc <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 80099dc:	b480      	push	{r7}
 80099de:	b083      	sub	sp, #12
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
    {
 80099e4:	4a04      	ldr	r2, [pc, #16]	; (80099f8 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	601a      	str	r2, [r3, #0]
    }
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	4618      	mov	r0, r3
 80099ee:	370c      	adds	r7, #12
 80099f0:	46bd      	mov	sp, r7
 80099f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f6:	4770      	bx	lr
 80099f8:	0802c9a0 	.word	0x0802c9a0

080099fc <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b082      	sub	sp, #8
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
    }
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f7ff ffe9 	bl	80099dc <_ZN8touchgfx9PresenterD1Ev>
 8009a0a:	2104      	movs	r1, #4
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f020 faba 	bl	8029f86 <_ZdlPvj>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	4618      	mov	r0, r3
 8009a16:	3708      	adds	r7, #8
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8009a1c:	b480      	push	{r7}
 8009a1e:	b083      	sub	sp, #12
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
    {
 8009a24:	4a04      	ldr	r2, [pc, #16]	; (8009a38 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	601a      	str	r2, [r3, #0]
    }
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	370c      	adds	r7, #12
 8009a30:	46bd      	mov	sp, r7
 8009a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a36:	4770      	bx	lr
 8009a38:	0802c9a0 	.word	0x0802c9a0

08009a3c <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8009a3c:	b480      	push	{r7}
 8009a3e:	b083      	sub	sp, #12
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
 8009a44:	4a06      	ldr	r2, [pc, #24]	; (8009a60 <_ZN13ModelListenerC1Ev+0x24>)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	601a      	str	r2, [r3, #0]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	605a      	str	r2, [r3, #4]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	4618      	mov	r0, r3
 8009a54:	370c      	adds	r7, #12
 8009a56:	46bd      	mov	sp, r7
 8009a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5c:	4770      	bx	lr
 8009a5e:	bf00      	nop
 8009a60:	0802c990 	.word	0x0802c990

08009a64 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8009a64:	b480      	push	{r7}
 8009a66:	b083      	sub	sp, #12
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	4a04      	ldr	r2, [pc, #16]	; (8009a80 <_ZN13ModelListenerD1Ev+0x1c>)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	601a      	str	r2, [r3, #0]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	4618      	mov	r0, r3
 8009a76:	370c      	adds	r7, #12
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr
 8009a80:	0802c990 	.word	0x0802c990

08009a84 <_ZN13ModelListenerD0Ev>:
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b082      	sub	sp, #8
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f7ff ffe9 	bl	8009a64 <_ZN13ModelListenerD1Ev>
 8009a92:	2108      	movs	r1, #8
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f020 fa76 	bl	8029f86 <_ZdlPvj>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3708      	adds	r7, #8
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}

08009aa4 <_ZN25Localize_AnomalyPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Localize_AnomalyPresenter() {};
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b082      	sub	sp, #8
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	4a09      	ldr	r2, [pc, #36]	; (8009ad4 <_ZN25Localize_AnomalyPresenterD1Ev+0x30>)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	601a      	str	r2, [r3, #0]
 8009ab2:	4a09      	ldr	r2, [pc, #36]	; (8009ad8 <_ZN25Localize_AnomalyPresenterD1Ev+0x34>)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	605a      	str	r2, [r3, #4]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	3304      	adds	r3, #4
 8009abc:	4618      	mov	r0, r3
 8009abe:	f7ff ffd1 	bl	8009a64 <_ZN13ModelListenerD1Ev>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f7ff ff89 	bl	80099dc <_ZN8touchgfx9PresenterD1Ev>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	4618      	mov	r0, r3
 8009ace:	3708      	adds	r7, #8
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}
 8009ad4:	0802c968 	.word	0x0802c968
 8009ad8:	0802c980 	.word	0x0802c980

08009adc <_ZThn4_N25Localize_AnomalyPresenterD1Ev>:
 8009adc:	f1a0 0004 	sub.w	r0, r0, #4
 8009ae0:	e7e0      	b.n	8009aa4 <_ZN25Localize_AnomalyPresenterD1Ev>
 8009ae2:	bf00      	nop

08009ae4 <_ZN25Localize_AnomalyPresenterD0Ev>:
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b082      	sub	sp, #8
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f7ff ffd9 	bl	8009aa4 <_ZN25Localize_AnomalyPresenterD1Ev>
 8009af2:	2110      	movs	r1, #16
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f020 fa46 	bl	8029f86 <_ZdlPvj>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	4618      	mov	r0, r3
 8009afe:	3708      	adds	r7, #8
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <_ZThn4_N25Localize_AnomalyPresenterD0Ev>:
 8009b04:	f1a0 0004 	sub.w	r0, r0, #4
 8009b08:	e7ec      	b.n	8009ae4 <_ZN25Localize_AnomalyPresenterD0Ev>
	...

08009b0c <_ZN25Localize_AnomalyPresenterC1ER20Localize_AnomalyView>:
#include <gui/localize_anomaly_screen/Localize_AnomalyView.hpp>
#include <gui/localize_anomaly_screen/Localize_AnomalyPresenter.hpp>

Localize_AnomalyPresenter::Localize_AnomalyPresenter(Localize_AnomalyView& v)
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b082      	sub	sp, #8
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	6039      	str	r1, [r7, #0]
    : view(v)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f7ff ff7f 	bl	8009a1c <_ZN8touchgfx9PresenterC1Ev>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	3304      	adds	r3, #4
 8009b22:	4618      	mov	r0, r3
 8009b24:	f7ff ff8a 	bl	8009a3c <_ZN13ModelListenerC1Ev>
 8009b28:	4a06      	ldr	r2, [pc, #24]	; (8009b44 <_ZN25Localize_AnomalyPresenterC1ER20Localize_AnomalyView+0x38>)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	601a      	str	r2, [r3, #0]
 8009b2e:	4a06      	ldr	r2, [pc, #24]	; (8009b48 <_ZN25Localize_AnomalyPresenterC1ER20Localize_AnomalyView+0x3c>)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	605a      	str	r2, [r3, #4]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	683a      	ldr	r2, [r7, #0]
 8009b38:	60da      	str	r2, [r3, #12]
{

}
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	3708      	adds	r7, #8
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}
 8009b44:	0802c968 	.word	0x0802c968
 8009b48:	0802c980 	.word	0x0802c980

08009b4c <_ZN25Localize_AnomalyPresenter8activateEv>:

void Localize_AnomalyPresenter::activate()
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b083      	sub	sp, #12
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]

}
 8009b54:	bf00      	nop
 8009b56:	370c      	adds	r7, #12
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr

08009b60 <_ZN25Localize_AnomalyPresenter10deactivateEv>:

void Localize_AnomalyPresenter::deactivate()
{
 8009b60:	b480      	push	{r7}
 8009b62:	b083      	sub	sp, #12
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]

}
 8009b68:	bf00      	nop
 8009b6a:	370c      	adds	r7, #12
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b72:	4770      	bx	lr

08009b74 <_ZN20Localize_AnomalyViewD1Ev>:

class Localize_AnomalyView : public Localize_AnomalyViewBase
{
public:
    Localize_AnomalyView();
    virtual ~Localize_AnomalyView() {}
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b082      	sub	sp, #8
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
 8009b7c:	4a05      	ldr	r2, [pc, #20]	; (8009b94 <_ZN20Localize_AnomalyViewD1Ev+0x20>)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	601a      	str	r2, [r3, #0]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	4618      	mov	r0, r3
 8009b86:	f7fc f88f 	bl	8005ca8 <_ZN24Localize_AnomalyViewBaseD1Ev>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3708      	adds	r7, #8
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}
 8009b94:	0802c9b8 	.word	0x0802c9b8

08009b98 <_ZN20Localize_AnomalyViewD0Ev>:
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b082      	sub	sp, #8
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f7ff ffe7 	bl	8009b74 <_ZN20Localize_AnomalyViewD1Ev>
 8009ba6:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f020 f9eb 	bl	8029f86 <_ZdlPvj>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3708      	adds	r7, #8
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
	...

08009bbc <_ZN20Localize_AnomalyViewC1Ev>:
#include <gui/localize_anomaly_screen/Localize_AnomalyView.hpp>

Localize_AnomalyView::Localize_AnomalyView()
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b082      	sub	sp, #8
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f7fc f914 	bl	8005df4 <_ZN24Localize_AnomalyViewBaseC1Ev>
 8009bcc:	4a03      	ldr	r2, [pc, #12]	; (8009bdc <_ZN20Localize_AnomalyViewC1Ev+0x20>)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	601a      	str	r2, [r3, #0]
{

}
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3708      	adds	r7, #8
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}
 8009bdc:	0802c9b8 	.word	0x0802c9b8

08009be0 <_ZN20Localize_AnomalyView11setupScreenEv>:

void Localize_AnomalyView::setupScreen()
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b082      	sub	sp, #8
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
    Localize_AnomalyViewBase::setupScreen();
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	4618      	mov	r0, r3
 8009bec:	f7fc fdca 	bl	8006784 <_ZN24Localize_AnomalyViewBase11setupScreenEv>
}
 8009bf0:	bf00      	nop
 8009bf2:	3708      	adds	r7, #8
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}

08009bf8 <_ZN20Localize_AnomalyView14tearDownScreenEv>:

void Localize_AnomalyView::tearDownScreen()
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b082      	sub	sp, #8
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
    Localize_AnomalyViewBase::tearDownScreen();
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	4618      	mov	r0, r3
 8009c04:	f7fb fe80 	bl	8005908 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8009c08:	bf00      	nop
 8009c0a:	3708      	adds	r7, #8
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}

08009c10 <_ZN13MainPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MainPresenter() {};
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b082      	sub	sp, #8
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	4a09      	ldr	r2, [pc, #36]	; (8009c40 <_ZN13MainPresenterD1Ev+0x30>)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	601a      	str	r2, [r3, #0]
 8009c1e:	4a09      	ldr	r2, [pc, #36]	; (8009c44 <_ZN13MainPresenterD1Ev+0x34>)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	605a      	str	r2, [r3, #4]
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	3304      	adds	r3, #4
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f7ff ff1b 	bl	8009a64 <_ZN13ModelListenerD1Ev>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	4618      	mov	r0, r3
 8009c32:	f7ff fed3 	bl	80099dc <_ZN8touchgfx9PresenterD1Ev>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3708      	adds	r7, #8
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}
 8009c40:	0802c9f0 	.word	0x0802c9f0
 8009c44:	0802ca08 	.word	0x0802ca08

08009c48 <_ZThn4_N13MainPresenterD1Ev>:
 8009c48:	f1a0 0004 	sub.w	r0, r0, #4
 8009c4c:	e7e0      	b.n	8009c10 <_ZN13MainPresenterD1Ev>
 8009c4e:	bf00      	nop

08009c50 <_ZN13MainPresenterD0Ev>:
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b082      	sub	sp, #8
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f7ff ffd9 	bl	8009c10 <_ZN13MainPresenterD1Ev>
 8009c5e:	2110      	movs	r1, #16
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f020 f990 	bl	8029f86 <_ZdlPvj>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3708      	adds	r7, #8
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}

08009c70 <_ZThn4_N13MainPresenterD0Ev>:
 8009c70:	f1a0 0004 	sub.w	r0, r0, #4
 8009c74:	e7ec      	b.n	8009c50 <_ZN13MainPresenterD0Ev>
	...

08009c78 <_ZN13MainPresenterC1ER8MainView>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

MainPresenter::MainPresenter(MainView& v)
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b082      	sub	sp, #8
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	6039      	str	r1, [r7, #0]
    : view(v)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	4618      	mov	r0, r3
 8009c86:	f7ff fec9 	bl	8009a1c <_ZN8touchgfx9PresenterC1Ev>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	3304      	adds	r3, #4
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f7ff fed4 	bl	8009a3c <_ZN13ModelListenerC1Ev>
 8009c94:	4a06      	ldr	r2, [pc, #24]	; (8009cb0 <_ZN13MainPresenterC1ER8MainView+0x38>)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	601a      	str	r2, [r3, #0]
 8009c9a:	4a06      	ldr	r2, [pc, #24]	; (8009cb4 <_ZN13MainPresenterC1ER8MainView+0x3c>)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	605a      	str	r2, [r3, #4]
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	683a      	ldr	r2, [r7, #0]
 8009ca4:	60da      	str	r2, [r3, #12]
{
}
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3708      	adds	r7, #8
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}
 8009cb0:	0802c9f0 	.word	0x0802c9f0
 8009cb4:	0802ca08 	.word	0x0802ca08

08009cb8 <_ZN13MainPresenter8activateEv>:

void MainPresenter::activate()
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b083      	sub	sp, #12
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
}
 8009cc0:	bf00      	nop
 8009cc2:	370c      	adds	r7, #12
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr

08009ccc <_ZN13MainPresenter10deactivateEv>:

void MainPresenter::deactivate()
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b083      	sub	sp, #12
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
}
 8009cd4:	bf00      	nop
 8009cd6:	370c      	adds	r7, #12
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cde:	4770      	bx	lr

08009ce0 <_ZNK8touchgfx6Bitmap5getIdEv>:
    /**
     * Gets the id of this Bitmap.
     *
     * @return The id of this Bitmap.
     */
    BitmapId getId() const
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b082      	sub	sp, #8
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
    {
        assert(bitmaps != 0 && "Bitmap database has not been initialized.");
 8009ce8:	4b07      	ldr	r3, [pc, #28]	; (8009d08 <_ZNK8touchgfx6Bitmap5getIdEv+0x28>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d105      	bne.n	8009cfc <_ZNK8touchgfx6Bitmap5getIdEv+0x1c>
 8009cf0:	4b06      	ldr	r3, [pc, #24]	; (8009d0c <_ZNK8touchgfx6Bitmap5getIdEv+0x2c>)
 8009cf2:	4a07      	ldr	r2, [pc, #28]	; (8009d10 <_ZNK8touchgfx6Bitmap5getIdEv+0x30>)
 8009cf4:	2187      	movs	r1, #135	; 0x87
 8009cf6:	4807      	ldr	r0, [pc, #28]	; (8009d14 <_ZNK8touchgfx6Bitmap5getIdEv+0x34>)
 8009cf8:	f020 f974 	bl	8029fe4 <__assert_func>
        return bitmapId;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	881b      	ldrh	r3, [r3, #0]
    }
 8009d00:	4618      	mov	r0, r3
 8009d02:	3708      	adds	r7, #8
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}
 8009d08:	2400b658 	.word	0x2400b658
 8009d0c:	0802be9c 	.word	0x0802be9c
 8009d10:	0802bed8 	.word	0x0802bed8
 8009d14:	0802bf0c 	.word	0x0802bf0c

08009d18 <_ZNK8touchgfx12ToggleButton8getStateEv>:
     * Gets the state of the ToggleButton as set with forceState.
     *
     * @return True if the button has been toggled, i.e. the pressed state is shown when the
     *         button is not pressed.
     */
    bool getState() const
 8009d18:	b590      	push	{r4, r7, lr}
 8009d1a:	b083      	sub	sp, #12
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
    {
        return up.getId() == originalPressed.getId();
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	332e      	adds	r3, #46	; 0x2e
 8009d24:	4618      	mov	r0, r3
 8009d26:	f7ff ffdb 	bl	8009ce0 <_ZNK8touchgfx6Bitmap5getIdEv>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	461c      	mov	r4, r3
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	3334      	adds	r3, #52	; 0x34
 8009d32:	4618      	mov	r0, r3
 8009d34:	f7ff ffd4 	bl	8009ce0 <_ZNK8touchgfx6Bitmap5getIdEv>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	429c      	cmp	r4, r3
 8009d3c:	bf0c      	ite	eq
 8009d3e:	2301      	moveq	r3, #1
 8009d40:	2300      	movne	r3, #0
 8009d42:	b2db      	uxtb	r3, r3
    }
 8009d44:	4618      	mov	r0, r3
 8009d46:	370c      	adds	r7, #12
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd90      	pop	{r4, r7, pc}

08009d4c <_ZN8MainViewD1Ev>:

class MainView : public MainViewBase
{
public:
    MainView();
    virtual ~MainView() {}
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b082      	sub	sp, #8
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	4a05      	ldr	r2, [pc, #20]	; (8009d6c <_ZN8MainViewD1Ev+0x20>)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	601a      	str	r2, [r3, #0]
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f7fc ff11 	bl	8006b84 <_ZN12MainViewBaseD1Ev>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	4618      	mov	r0, r3
 8009d66:	3708      	adds	r7, #8
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}
 8009d6c:	0802ca18 	.word	0x0802ca18

08009d70 <_ZN8MainViewD0Ev>:
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b082      	sub	sp, #8
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f7ff ffe7 	bl	8009d4c <_ZN8MainViewD1Ev>
 8009d7e:	f640 3118 	movw	r1, #2840	; 0xb18
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f020 f8ff 	bl	8029f86 <_ZdlPvj>
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3708      	adds	r7, #8
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
	...

08009d94 <_ZN8MainViewC1Ev>:
#include <gui/main_screen/MainView.hpp>

systemState state;
int currentDelta = 0;

MainView::MainView()
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b082      	sub	sp, #8
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f7fd f888 	bl	8006eb4 <_ZN12MainViewBaseC1Ev>
 8009da4:	4a03      	ldr	r2, [pc, #12]	; (8009db4 <_ZN8MainViewC1Ev+0x20>)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	601a      	str	r2, [r3, #0]
{
}
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	4618      	mov	r0, r3
 8009dae:	3708      	adds	r7, #8
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}
 8009db4:	0802ca18 	.word	0x0802ca18

08009db8 <_ZN8MainView11setupScreenEv>:

void MainView::setupScreen()
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b082      	sub	sp, #8
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
	//setup voiceToggle
	if(!state.voiceToggle) {
 8009dc0:	4b60      	ldr	r3, [pc, #384]	; (8009f44 <_ZN8MainView11setupScreenEv+0x18c>)
 8009dc2:	791b      	ldrb	r3, [r3, #4]
 8009dc4:	f083 0301 	eor.w	r3, r3, #1
 8009dc8:	b2db      	uxtb	r3, r3
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d026      	beq.n	8009e1c <_ZN8MainView11setupScreenEv+0x64>
		VoiceCommMess_Text_On.setVisible(false);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8009dd4:	2100      	movs	r1, #0
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f7fc fe7f 	bl	8006ada <_ZN8touchgfx8Drawable10setVisibleEb>
		VoiceCommMess_Text_Off.setVisible(true);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 8009de2:	2101      	movs	r1, #1
 8009de4:	4618      	mov	r0, r3
 8009de6:	f7fc fe78 	bl	8006ada <_ZN8touchgfx8Drawable10setVisibleEb>

		VoiceCommMess_Text_On.invalidate();
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8009df0:	4618      	mov	r0, r3
 8009df2:	f011 ff53 	bl	801bc9c <_ZNK8touchgfx8Drawable10invalidateEv>
		VoiceCommMess_Text_Off.invalidate();
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f011 ff4d 	bl	801bc9c <_ZNK8touchgfx8Drawable10invalidateEv>

		Voice_Toggle_Button.forceState(true);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f203 43f4 	addw	r3, r3, #1268	; 0x4f4
 8009e08:	2101      	movs	r1, #1
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f00e fdee 	bl	80189ec <_ZN8touchgfx12ToggleButton10forceStateEb>
		Voice_Toggle_Button.invalidate();
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f203 43f4 	addw	r3, r3, #1268	; 0x4f4
 8009e16:	4618      	mov	r0, r3
 8009e18:	f011 ff40 	bl	801bc9c <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	//setup volume
	textProgress1.setValue(state.volume);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8009e22:	4a48      	ldr	r2, [pc, #288]	; (8009f44 <_ZN8MainView11setupScreenEv+0x18c>)
 8009e24:	6812      	ldr	r2, [r2, #0]
 8009e26:	4611      	mov	r1, r2
 8009e28:	4618      	mov	r0, r3
 8009e2a:	f00c fdf3 	bl	8016a14 <_ZN8touchgfx12TextProgress8setValueEi>
	Volume_Slider.setValue(state.volume);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 8009e34:	4a43      	ldr	r2, [pc, #268]	; (8009f44 <_ZN8MainView11setupScreenEv+0x18c>)
 8009e36:	6812      	ldr	r2, [r2, #0]
 8009e38:	4611      	mov	r1, r2
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f00d fb01 	bl	8017442 <_ZN8touchgfx6Slider8setValueEi>
	Volume_Slider.invalidate();
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 8009e46:	4618      	mov	r0, r3
 8009e48:	f011 ff28 	bl	801bc9c <_ZNK8touchgfx8Drawable10invalidateEv>

	//setup anomaly message
	AnomalyWarning_Textbox_1_1.setVisible(state.anomalyDetected);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f203 73f4 	addw	r3, r3, #2036	; 0x7f4
 8009e52:	4a3c      	ldr	r2, [pc, #240]	; (8009f44 <_ZN8MainView11setupScreenEv+0x18c>)
 8009e54:	7952      	ldrb	r2, [r2, #5]
 8009e56:	b2d2      	uxtb	r2, r2
 8009e58:	4611      	mov	r1, r2
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f7fc fe3d 	bl	8006ada <_ZN8touchgfx8Drawable10setVisibleEb>
	AnomalyWarning_Textbox_1_1.invalidate();
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f203 73f4 	addw	r3, r3, #2036	; 0x7f4
 8009e66:	4618      	mov	r0, r3
 8009e68:	f011 ff18 	bl	801bc9c <_ZNK8touchgfx8Drawable10invalidateEv>

	MessageBoard_Message_1.setVisible(state.alert);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f603 0388 	addw	r3, r3, #2184	; 0x888
 8009e72:	4a34      	ldr	r2, [pc, #208]	; (8009f44 <_ZN8MainView11setupScreenEv+0x18c>)
 8009e74:	7992      	ldrb	r2, [r2, #6]
 8009e76:	4611      	mov	r1, r2
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f7fc fe2e 	bl	8006ada <_ZN8touchgfx8Drawable10setVisibleEb>
	MessageBoard_Message_1.invalidate();
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f603 0388 	addw	r3, r3, #2184	; 0x888
 8009e84:	4618      	mov	r0, r3
 8009e86:	f011 ff09 	bl	801bc9c <_ZNK8touchgfx8Drawable10invalidateEv>
	MessageBoard_Message_Muted.setVisible(!state.alert);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f603 02c4 	addw	r2, r3, #2244	; 0x8c4
 8009e90:	4b2c      	ldr	r3, [pc, #176]	; (8009f44 <_ZN8MainView11setupScreenEv+0x18c>)
 8009e92:	799b      	ldrb	r3, [r3, #6]
 8009e94:	f083 0301 	eor.w	r3, r3, #1
 8009e98:	b2db      	uxtb	r3, r3
 8009e9a:	4619      	mov	r1, r3
 8009e9c:	4610      	mov	r0, r2
 8009e9e:	f7fc fe1c 	bl	8006ada <_ZN8touchgfx8Drawable10setVisibleEb>
	MessageBoard_Message_Muted.invalidate();
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f603 03c4 	addw	r3, r3, #2244	; 0x8c4
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f011 fef7 	bl	801bc9c <_ZNK8touchgfx8Drawable10invalidateEv>

	//Set buttons
	Localize_Button.setVisible(state.anomalyDetected);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 8009eb4:	4a23      	ldr	r2, [pc, #140]	; (8009f44 <_ZN8MainView11setupScreenEv+0x18c>)
 8009eb6:	7952      	ldrb	r2, [r2, #5]
 8009eb8:	b2d2      	uxtb	r2, r2
 8009eba:	4611      	mov	r1, r2
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f7fc fe0c 	bl	8006ada <_ZN8touchgfx8Drawable10setVisibleEb>
	Localize_Button.invalidate();
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 8009ec8:	4618      	mov	r0, r3
 8009eca:	f011 fee7 	bl	801bc9c <_ZNK8touchgfx8Drawable10invalidateEv>
	Alert_Mute_Button.setVisible(state.anomalyDetected);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f603 13f4 	addw	r3, r3, #2548	; 0x9f4
 8009ed4:	4a1b      	ldr	r2, [pc, #108]	; (8009f44 <_ZN8MainView11setupScreenEv+0x18c>)
 8009ed6:	7952      	ldrb	r2, [r2, #5]
 8009ed8:	b2d2      	uxtb	r2, r2
 8009eda:	4611      	mov	r1, r2
 8009edc:	4618      	mov	r0, r3
 8009ede:	f7fc fdfc 	bl	8006ada <_ZN8touchgfx8Drawable10setVisibleEb>
	Alert_Mute_Button.invalidate();
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f603 13f4 	addw	r3, r3, #2548	; 0x9f4
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f011 fed7 	bl	801bc9c <_ZNK8touchgfx8Drawable10invalidateEv>

	//Set disabled button images
	Disabled_Button1.setVisible(!state.anomalyDetected);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f603 12c8 	addw	r2, r3, #2504	; 0x9c8
 8009ef4:	4b13      	ldr	r3, [pc, #76]	; (8009f44 <_ZN8MainView11setupScreenEv+0x18c>)
 8009ef6:	795b      	ldrb	r3, [r3, #5]
 8009ef8:	b2db      	uxtb	r3, r3
 8009efa:	f083 0301 	eor.w	r3, r3, #1
 8009efe:	b2db      	uxtb	r3, r3
 8009f00:	4619      	mov	r1, r3
 8009f02:	4610      	mov	r0, r2
 8009f04:	f7fc fde9 	bl	8006ada <_ZN8touchgfx8Drawable10setVisibleEb>
	Disabled_Button1.invalidate();
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f603 13c8 	addw	r3, r3, #2504	; 0x9c8
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f011 fec4 	bl	801bc9c <_ZNK8touchgfx8Drawable10invalidateEv>
	Disabled_Button2.setVisible(!state.anomalyDetected);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f603 129c 	addw	r2, r3, #2460	; 0x99c
 8009f1a:	4b0a      	ldr	r3, [pc, #40]	; (8009f44 <_ZN8MainView11setupScreenEv+0x18c>)
 8009f1c:	795b      	ldrb	r3, [r3, #5]
 8009f1e:	b2db      	uxtb	r3, r3
 8009f20:	f083 0301 	eor.w	r3, r3, #1
 8009f24:	b2db      	uxtb	r3, r3
 8009f26:	4619      	mov	r1, r3
 8009f28:	4610      	mov	r0, r2
 8009f2a:	f7fc fdd6 	bl	8006ada <_ZN8touchgfx8Drawable10setVisibleEb>
	Disabled_Button2.invalidate();
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f603 139c 	addw	r3, r3, #2460	; 0x99c
 8009f34:	4618      	mov	r0, r3
 8009f36:	f011 feb1 	bl	801bc9c <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8009f3a:	bf00      	nop
 8009f3c:	3708      	adds	r7, #8
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}
 8009f42:	bf00      	nop
 8009f44:	2400000c 	.word	0x2400000c

08009f48 <_ZN8MainView14tearDownScreenEv>:

void MainView::tearDownScreen()
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b083      	sub	sp, #12
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
}
 8009f50:	bf00      	nop
 8009f52:	370c      	adds	r7, #12
 8009f54:	46bd      	mov	sp, r7
 8009f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5a:	4770      	bx	lr

08009f5c <_ZN8MainView17set_volume_sliderEi>:

void MainView::set_volume_slider(int value) {
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b082      	sub	sp, #8
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	6039      	str	r1, [r7, #0]
	state.volume = value;
 8009f66:	4a07      	ldr	r2, [pc, #28]	; (8009f84 <_ZN8MainView17set_volume_sliderEi+0x28>)
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	6013      	str	r3, [r2, #0]
	textProgress1.setValue(value);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8009f72:	6839      	ldr	r1, [r7, #0]
 8009f74:	4618      	mov	r0, r3
 8009f76:	f00c fd4d 	bl	8016a14 <_ZN8touchgfx12TextProgress8setValueEi>
}
 8009f7a:	bf00      	nop
 8009f7c:	3708      	adds	r7, #8
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}
 8009f82:	bf00      	nop
 8009f84:	2400000c 	.word	0x2400000c

08009f88 <_ZN8MainView18set_volume_encoderEv>:

void MainView::set_volume_encoder() {
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b084      	sub	sp, #16
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
	int tempVolume = state.volume + currentDelta;
 8009f90:	4b17      	ldr	r3, [pc, #92]	; (8009ff0 <_ZN8MainView18set_volume_encoderEv+0x68>)
 8009f92:	681a      	ldr	r2, [r3, #0]
 8009f94:	4b17      	ldr	r3, [pc, #92]	; (8009ff4 <_ZN8MainView18set_volume_encoderEv+0x6c>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	4413      	add	r3, r2
 8009f9a:	60fb      	str	r3, [r7, #12]
	if(tempVolume > 100) {
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	2b64      	cmp	r3, #100	; 0x64
 8009fa0:	dd02      	ble.n	8009fa8 <_ZN8MainView18set_volume_encoderEv+0x20>
		tempVolume = 100;
 8009fa2:	2364      	movs	r3, #100	; 0x64
 8009fa4:	60fb      	str	r3, [r7, #12]
 8009fa6:	e004      	b.n	8009fb2 <_ZN8MainView18set_volume_encoderEv+0x2a>
	}
	else if(tempVolume < 0) {
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	da01      	bge.n	8009fb2 <_ZN8MainView18set_volume_encoderEv+0x2a>
		tempVolume = 0;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	60fb      	str	r3, [r7, #12]
	}
	state.volume = tempVolume;
 8009fb2:	4a0f      	ldr	r2, [pc, #60]	; (8009ff0 <_ZN8MainView18set_volume_encoderEv+0x68>)
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	6013      	str	r3, [r2, #0]
	//setup volume
	textProgress1.setValue(state.volume);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8009fbe:	4a0c      	ldr	r2, [pc, #48]	; (8009ff0 <_ZN8MainView18set_volume_encoderEv+0x68>)
 8009fc0:	6812      	ldr	r2, [r2, #0]
 8009fc2:	4611      	mov	r1, r2
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f00c fd25 	bl	8016a14 <_ZN8touchgfx12TextProgress8setValueEi>
	Volume_Slider.setValue(state.volume);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 8009fd0:	4a07      	ldr	r2, [pc, #28]	; (8009ff0 <_ZN8MainView18set_volume_encoderEv+0x68>)
 8009fd2:	6812      	ldr	r2, [r2, #0]
 8009fd4:	4611      	mov	r1, r2
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f00d fa33 	bl	8017442 <_ZN8touchgfx6Slider8setValueEi>
	Volume_Slider.invalidate();
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f011 fe5a 	bl	801bc9c <_ZNK8touchgfx8Drawable10invalidateEv>

}
 8009fe8:	bf00      	nop
 8009fea:	3710      	adds	r7, #16
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}
 8009ff0:	2400000c 	.word	0x2400000c
 8009ff4:	24001c80 	.word	0x24001c80

08009ff8 <_ZN8MainView12toggle_voiceEv>:

/*
 * Virtual function called when either toggle button is pressed
 */
void MainView::toggle_voice() {
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b082      	sub	sp, #8
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
	//Toggle voiceToggle variable
	state.voiceToggle = !state.voiceToggle;
 800a000:	4b33      	ldr	r3, [pc, #204]	; (800a0d0 <_ZN8MainView12toggle_voiceEv+0xd8>)
 800a002:	791b      	ldrb	r3, [r3, #4]
 800a004:	f083 0301 	eor.w	r3, r3, #1
 800a008:	b2da      	uxtb	r2, r3
 800a00a:	4b31      	ldr	r3, [pc, #196]	; (800a0d0 <_ZN8MainView12toggle_voiceEv+0xd8>)
 800a00c:	711a      	strb	r2, [r3, #4]

	//Update GUI accordingly
	if(state.voiceToggle) {
 800a00e:	4b30      	ldr	r3, [pc, #192]	; (800a0d0 <_ZN8MainView12toggle_voiceEv+0xd8>)
 800a010:	791b      	ldrb	r3, [r3, #4]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d01a      	beq.n	800a04c <_ZN8MainView12toggle_voiceEv+0x54>
		VoiceCommMess_Text_On.setVisible(true);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 800a01c:	2101      	movs	r1, #1
 800a01e:	4618      	mov	r0, r3
 800a020:	f7fc fd5b 	bl	8006ada <_ZN8touchgfx8Drawable10setVisibleEb>
		VoiceCommMess_Text_Off.setVisible(false);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 800a02a:	2100      	movs	r1, #0
 800a02c:	4618      	mov	r0, r3
 800a02e:	f7fc fd54 	bl	8006ada <_ZN8touchgfx8Drawable10setVisibleEb>

		VoiceCommMess_Text_On.invalidate();
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 800a038:	4618      	mov	r0, r3
 800a03a:	f011 fe2f 	bl	801bc9c <_ZNK8touchgfx8Drawable10invalidateEv>
		VoiceCommMess_Text_Off.invalidate();
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 800a044:	4618      	mov	r0, r3
 800a046:	f011 fe29 	bl	801bc9c <_ZNK8touchgfx8Drawable10invalidateEv>
 800a04a:	e019      	b.n	800a080 <_ZN8MainView12toggle_voiceEv+0x88>

	} else {
		VoiceCommMess_Text_On.setVisible(false);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 800a052:	2100      	movs	r1, #0
 800a054:	4618      	mov	r0, r3
 800a056:	f7fc fd40 	bl	8006ada <_ZN8touchgfx8Drawable10setVisibleEb>
		VoiceCommMess_Text_Off.setVisible(true);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 800a060:	2101      	movs	r1, #1
 800a062:	4618      	mov	r0, r3
 800a064:	f7fc fd39 	bl	8006ada <_ZN8touchgfx8Drawable10setVisibleEb>

		VoiceCommMess_Text_On.invalidate();
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 800a06e:	4618      	mov	r0, r3
 800a070:	f011 fe14 	bl	801bc9c <_ZNK8touchgfx8Drawable10invalidateEv>
		VoiceCommMess_Text_Off.invalidate();
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 800a07a:	4618      	mov	r0, r3
 800a07c:	f011 fe0e 	bl	801bc9c <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(Voice_Toggle_Button.getState() == state.voiceToggle) {
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f203 43f4 	addw	r3, r3, #1268	; 0x4f4
 800a086:	4618      	mov	r0, r3
 800a088:	f7ff fe46 	bl	8009d18 <_ZNK8touchgfx12ToggleButton8getStateEv>
 800a08c:	4603      	mov	r3, r0
 800a08e:	461a      	mov	r2, r3
 800a090:	4b0f      	ldr	r3, [pc, #60]	; (800a0d0 <_ZN8MainView12toggle_voiceEv+0xd8>)
 800a092:	791b      	ldrb	r3, [r3, #4]
 800a094:	429a      	cmp	r2, r3
 800a096:	bf0c      	ite	eq
 800a098:	2301      	moveq	r3, #1
 800a09a:	2300      	movne	r3, #0
 800a09c:	b2db      	uxtb	r3, r3
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d011      	beq.n	800a0c6 <_ZN8MainView12toggle_voiceEv+0xce>
		Voice_Toggle_Button.forceState(!state.voiceToggle);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f203 42f4 	addw	r2, r3, #1268	; 0x4f4
 800a0a8:	4b09      	ldr	r3, [pc, #36]	; (800a0d0 <_ZN8MainView12toggle_voiceEv+0xd8>)
 800a0aa:	791b      	ldrb	r3, [r3, #4]
 800a0ac:	f083 0301 	eor.w	r3, r3, #1
 800a0b0:	b2db      	uxtb	r3, r3
 800a0b2:	4619      	mov	r1, r3
 800a0b4:	4610      	mov	r0, r2
 800a0b6:	f00e fc99 	bl	80189ec <_ZN8touchgfx12ToggleButton10forceStateEb>
		Voice_Toggle_Button.invalidate();
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	f203 43f4 	addw	r3, r3, #1268	; 0x4f4
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f011 fdeb 	bl	801bc9c <_ZNK8touchgfx8Drawable10invalidateEv>
	}
}
 800a0c6:	bf00      	nop
 800a0c8:	3708      	adds	r7, #8
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}
 800a0ce:	bf00      	nop
 800a0d0:	2400000c 	.word	0x2400000c

0800a0d4 <_ZN8MainView20update_anomaly_alertEv>:

void MainView::update_anomaly_alert() {
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b082      	sub	sp, #8
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
	state.anomalyDetected = !state.anomalyDetected;
 800a0dc:	4b43      	ldr	r3, [pc, #268]	; (800a1ec <_ZN8MainView20update_anomaly_alertEv+0x118>)
 800a0de:	795b      	ldrb	r3, [r3, #5]
 800a0e0:	b2db      	uxtb	r3, r3
 800a0e2:	f083 0301 	eor.w	r3, r3, #1
 800a0e6:	b2da      	uxtb	r2, r3
 800a0e8:	4b40      	ldr	r3, [pc, #256]	; (800a1ec <_ZN8MainView20update_anomaly_alertEv+0x118>)
 800a0ea:	715a      	strb	r2, [r3, #5]
	state.alert = state.anomalyDetected;
 800a0ec:	4b3f      	ldr	r3, [pc, #252]	; (800a1ec <_ZN8MainView20update_anomaly_alertEv+0x118>)
 800a0ee:	795b      	ldrb	r3, [r3, #5]
 800a0f0:	b2da      	uxtb	r2, r3
 800a0f2:	4b3e      	ldr	r3, [pc, #248]	; (800a1ec <_ZN8MainView20update_anomaly_alertEv+0x118>)
 800a0f4:	719a      	strb	r2, [r3, #6]

	//Set alert message
	AnomalyWarning_Textbox_1_1.setVisible(state.anomalyDetected);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f203 73f4 	addw	r3, r3, #2036	; 0x7f4
 800a0fc:	4a3b      	ldr	r2, [pc, #236]	; (800a1ec <_ZN8MainView20update_anomaly_alertEv+0x118>)
 800a0fe:	7952      	ldrb	r2, [r2, #5]
 800a100:	b2d2      	uxtb	r2, r2
 800a102:	4611      	mov	r1, r2
 800a104:	4618      	mov	r0, r3
 800a106:	f7fc fce8 	bl	8006ada <_ZN8touchgfx8Drawable10setVisibleEb>
	AnomalyWarning_Textbox_1_1.invalidate();
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f203 73f4 	addw	r3, r3, #2036	; 0x7f4
 800a110:	4618      	mov	r0, r3
 800a112:	f011 fdc3 	bl	801bc9c <_ZNK8touchgfx8Drawable10invalidateEv>

	//Set text of alert message
	MessageBoard_Message_1.setVisible(state.alert);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f603 0388 	addw	r3, r3, #2184	; 0x888
 800a11c:	4a33      	ldr	r2, [pc, #204]	; (800a1ec <_ZN8MainView20update_anomaly_alertEv+0x118>)
 800a11e:	7992      	ldrb	r2, [r2, #6]
 800a120:	4611      	mov	r1, r2
 800a122:	4618      	mov	r0, r3
 800a124:	f7fc fcd9 	bl	8006ada <_ZN8touchgfx8Drawable10setVisibleEb>
	MessageBoard_Message_1.invalidate();
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f603 0388 	addw	r3, r3, #2184	; 0x888
 800a12e:	4618      	mov	r0, r3
 800a130:	f011 fdb4 	bl	801bc9c <_ZNK8touchgfx8Drawable10invalidateEv>
	MessageBoard_Message_Muted.setVisible(!state.alert);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f603 02c4 	addw	r2, r3, #2244	; 0x8c4
 800a13a:	4b2c      	ldr	r3, [pc, #176]	; (800a1ec <_ZN8MainView20update_anomaly_alertEv+0x118>)
 800a13c:	799b      	ldrb	r3, [r3, #6]
 800a13e:	f083 0301 	eor.w	r3, r3, #1
 800a142:	b2db      	uxtb	r3, r3
 800a144:	4619      	mov	r1, r3
 800a146:	4610      	mov	r0, r2
 800a148:	f7fc fcc7 	bl	8006ada <_ZN8touchgfx8Drawable10setVisibleEb>
	MessageBoard_Message_Muted.invalidate();
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f603 03c4 	addw	r3, r3, #2244	; 0x8c4
 800a152:	4618      	mov	r0, r3
 800a154:	f011 fda2 	bl	801bc9c <_ZNK8touchgfx8Drawable10invalidateEv>

	//Set buttons
	Localize_Button.setVisible(state.anomalyDetected);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 800a15e:	4a23      	ldr	r2, [pc, #140]	; (800a1ec <_ZN8MainView20update_anomaly_alertEv+0x118>)
 800a160:	7952      	ldrb	r2, [r2, #5]
 800a162:	b2d2      	uxtb	r2, r2
 800a164:	4611      	mov	r1, r2
 800a166:	4618      	mov	r0, r3
 800a168:	f7fc fcb7 	bl	8006ada <_ZN8touchgfx8Drawable10setVisibleEb>
	Localize_Button.invalidate();
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 800a172:	4618      	mov	r0, r3
 800a174:	f011 fd92 	bl	801bc9c <_ZNK8touchgfx8Drawable10invalidateEv>
	Alert_Mute_Button.setVisible(state.anomalyDetected);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f603 13f4 	addw	r3, r3, #2548	; 0x9f4
 800a17e:	4a1b      	ldr	r2, [pc, #108]	; (800a1ec <_ZN8MainView20update_anomaly_alertEv+0x118>)
 800a180:	7952      	ldrb	r2, [r2, #5]
 800a182:	b2d2      	uxtb	r2, r2
 800a184:	4611      	mov	r1, r2
 800a186:	4618      	mov	r0, r3
 800a188:	f7fc fca7 	bl	8006ada <_ZN8touchgfx8Drawable10setVisibleEb>
	Alert_Mute_Button.invalidate();
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f603 13f4 	addw	r3, r3, #2548	; 0x9f4
 800a192:	4618      	mov	r0, r3
 800a194:	f011 fd82 	bl	801bc9c <_ZNK8touchgfx8Drawable10invalidateEv>

	//Set disabled button images
	Disabled_Button1.setVisible(!state.anomalyDetected);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f603 12c8 	addw	r2, r3, #2504	; 0x9c8
 800a19e:	4b13      	ldr	r3, [pc, #76]	; (800a1ec <_ZN8MainView20update_anomaly_alertEv+0x118>)
 800a1a0:	795b      	ldrb	r3, [r3, #5]
 800a1a2:	b2db      	uxtb	r3, r3
 800a1a4:	f083 0301 	eor.w	r3, r3, #1
 800a1a8:	b2db      	uxtb	r3, r3
 800a1aa:	4619      	mov	r1, r3
 800a1ac:	4610      	mov	r0, r2
 800a1ae:	f7fc fc94 	bl	8006ada <_ZN8touchgfx8Drawable10setVisibleEb>
	Disabled_Button1.invalidate();
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f603 13c8 	addw	r3, r3, #2504	; 0x9c8
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f011 fd6f 	bl	801bc9c <_ZNK8touchgfx8Drawable10invalidateEv>
	Disabled_Button2.setVisible(!state.anomalyDetected);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f603 129c 	addw	r2, r3, #2460	; 0x99c
 800a1c4:	4b09      	ldr	r3, [pc, #36]	; (800a1ec <_ZN8MainView20update_anomaly_alertEv+0x118>)
 800a1c6:	795b      	ldrb	r3, [r3, #5]
 800a1c8:	b2db      	uxtb	r3, r3
 800a1ca:	f083 0301 	eor.w	r3, r3, #1
 800a1ce:	b2db      	uxtb	r3, r3
 800a1d0:	4619      	mov	r1, r3
 800a1d2:	4610      	mov	r0, r2
 800a1d4:	f7fc fc81 	bl	8006ada <_ZN8touchgfx8Drawable10setVisibleEb>
	Disabled_Button2.invalidate();
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f603 139c 	addw	r3, r3, #2460	; 0x99c
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f011 fd5c 	bl	801bc9c <_ZNK8touchgfx8Drawable10invalidateEv>



}
 800a1e4:	bf00      	nop
 800a1e6:	3708      	adds	r7, #8
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}
 800a1ec:	2400000c 	.word	0x2400000c

0800a1f0 <_ZN8MainView18alert_mute_pressedEv>:

void MainView::alert_mute_pressed() {
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b082      	sub	sp, #8
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
	if(state.alert) {
 800a1f8:	4b15      	ldr	r3, [pc, #84]	; (800a250 <_ZN8MainView18alert_mute_pressedEv+0x60>)
 800a1fa:	799b      	ldrb	r3, [r3, #6]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d023      	beq.n	800a248 <_ZN8MainView18alert_mute_pressedEv+0x58>
		state.alert = false;
 800a200:	4b13      	ldr	r3, [pc, #76]	; (800a250 <_ZN8MainView18alert_mute_pressedEv+0x60>)
 800a202:	2200      	movs	r2, #0
 800a204:	719a      	strb	r2, [r3, #6]

		MessageBoard_Message_1.setVisible(state.alert);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f603 0388 	addw	r3, r3, #2184	; 0x888
 800a20c:	4a10      	ldr	r2, [pc, #64]	; (800a250 <_ZN8MainView18alert_mute_pressedEv+0x60>)
 800a20e:	7992      	ldrb	r2, [r2, #6]
 800a210:	4611      	mov	r1, r2
 800a212:	4618      	mov	r0, r3
 800a214:	f7fc fc61 	bl	8006ada <_ZN8touchgfx8Drawable10setVisibleEb>
		MessageBoard_Message_1.invalidate();
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f603 0388 	addw	r3, r3, #2184	; 0x888
 800a21e:	4618      	mov	r0, r3
 800a220:	f011 fd3c 	bl	801bc9c <_ZNK8touchgfx8Drawable10invalidateEv>
		MessageBoard_Message_Muted.setVisible(!state.alert);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f603 02c4 	addw	r2, r3, #2244	; 0x8c4
 800a22a:	4b09      	ldr	r3, [pc, #36]	; (800a250 <_ZN8MainView18alert_mute_pressedEv+0x60>)
 800a22c:	799b      	ldrb	r3, [r3, #6]
 800a22e:	f083 0301 	eor.w	r3, r3, #1
 800a232:	b2db      	uxtb	r3, r3
 800a234:	4619      	mov	r1, r3
 800a236:	4610      	mov	r0, r2
 800a238:	f7fc fc4f 	bl	8006ada <_ZN8touchgfx8Drawable10setVisibleEb>
		MessageBoard_Message_Muted.invalidate();
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f603 03c4 	addw	r3, r3, #2244	; 0x8c4
 800a242:	4618      	mov	r0, r3
 800a244:	f011 fd2a 	bl	801bc9c <_ZNK8touchgfx8Drawable10invalidateEv>
	}
}
 800a248:	bf00      	nop
 800a24a:	3708      	adds	r7, #8
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}
 800a250:	2400000c 	.word	0x2400000c

0800a254 <_ZN5ModelC1Ev>:
#include "../../../../../STM32CubeIDE/CM7/Application/User/gui/Definitions.hpp"

//#include "main.h"
boolean_t led1 = TRUE;
extern int currentDelta;
Model::Model() : modelListener(0)
 800a254:	b480      	push	{r7}
 800a256:	b083      	sub	sp, #12
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2200      	movs	r2, #0
 800a260:	601a      	str	r2, [r3, #0]
{

}
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	4618      	mov	r0, r3
 800a266:	370c      	adds	r7, #12
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr

0800a270 <_ZN5Model4tickEv>:
bool muteStatus = false;
bool muteFilter = false;

uint16_t encoderCount = 0;
void Model::tick()
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b084      	sub	sp, #16
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
	bool currentB1Status = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 800a278:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a27c:	484e      	ldr	r0, [pc, #312]	; (800a3b8 <_ZN5Model4tickEv+0x148>)
 800a27e:	f007 f82d 	bl	80112dc <HAL_GPIO_ReadPin>
 800a282:	4603      	mov	r3, r0
 800a284:	2b00      	cmp	r3, #0
 800a286:	bf14      	ite	ne
 800a288:	2301      	movne	r3, #1
 800a28a:	2300      	moveq	r3, #0
 800a28c:	73fb      	strb	r3, [r7, #15]
	//bool currentButtonStatus = HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_3);
    if(currentB1Status != b1Status){
 800a28e:	4b4b      	ldr	r3, [pc, #300]	; (800a3bc <_ZN5Model4tickEv+0x14c>)
 800a290:	781b      	ldrb	r3, [r3, #0]
 800a292:	7bfa      	ldrb	r2, [r7, #15]
 800a294:	429a      	cmp	r2, r3
 800a296:	d017      	beq.n	800a2c8 <_ZN5Model4tickEv+0x58>
	   b1Status = currentB1Status;
 800a298:	4a48      	ldr	r2, [pc, #288]	; (800a3bc <_ZN5Model4tickEv+0x14c>)
 800a29a:	7bfb      	ldrb	r3, [r7, #15]
 800a29c:	7013      	strb	r3, [r2, #0]
	   if(b1Filter) {
 800a29e:	4b48      	ldr	r3, [pc, #288]	; (800a3c0 <_ZN5Model4tickEv+0x150>)
 800a2a0:	781b      	ldrb	r3, [r3, #0]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d009      	beq.n	800a2ba <_ZN5Model4tickEv+0x4a>
		   static_cast<FrontendApplication*>(Application::getInstance())->handleKeyEvent(87);
 800a2a6:	f010 fd2f 	bl	801ad08 <_ZN8touchgfx11Application11getInstanceEv>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	461a      	mov	r2, r3
 800a2ae:	6813      	ldr	r3, [r2, #0]
 800a2b0:	330c      	adds	r3, #12
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	2157      	movs	r1, #87	; 0x57
 800a2b6:	4610      	mov	r0, r2
 800a2b8:	4798      	blx	r3
	   }
	   b1Filter = !b1Filter;
 800a2ba:	4b41      	ldr	r3, [pc, #260]	; (800a3c0 <_ZN5Model4tickEv+0x150>)
 800a2bc:	781b      	ldrb	r3, [r3, #0]
 800a2be:	f083 0301 	eor.w	r3, r3, #1
 800a2c2:	b2da      	uxtb	r2, r3
 800a2c4:	4b3e      	ldr	r3, [pc, #248]	; (800a3c0 <_ZN5Model4tickEv+0x150>)
 800a2c6:	701a      	strb	r2, [r3, #0]
	}


	bool currentSWStatus = HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_3);
 800a2c8:	2108      	movs	r1, #8
 800a2ca:	483e      	ldr	r0, [pc, #248]	; (800a3c4 <_ZN5Model4tickEv+0x154>)
 800a2cc:	f007 f806 	bl	80112dc <HAL_GPIO_ReadPin>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	bf14      	ite	ne
 800a2d6:	2301      	movne	r3, #1
 800a2d8:	2300      	moveq	r3, #0
 800a2da:	73bb      	strb	r3, [r7, #14]
    if(currentSWStatus != swStatus){
 800a2dc:	4b3a      	ldr	r3, [pc, #232]	; (800a3c8 <_ZN5Model4tickEv+0x158>)
 800a2de:	781b      	ldrb	r3, [r3, #0]
 800a2e0:	7bba      	ldrb	r2, [r7, #14]
 800a2e2:	429a      	cmp	r2, r3
 800a2e4:	d017      	beq.n	800a316 <_ZN5Model4tickEv+0xa6>
	   swStatus = currentSWStatus;
 800a2e6:	4a38      	ldr	r2, [pc, #224]	; (800a3c8 <_ZN5Model4tickEv+0x158>)
 800a2e8:	7bbb      	ldrb	r3, [r7, #14]
 800a2ea:	7013      	strb	r3, [r2, #0]
	   if(swFilter) {
 800a2ec:	4b37      	ldr	r3, [pc, #220]	; (800a3cc <_ZN5Model4tickEv+0x15c>)
 800a2ee:	781b      	ldrb	r3, [r3, #0]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d009      	beq.n	800a308 <_ZN5Model4tickEv+0x98>
		   static_cast<FrontendApplication*>(Application::getInstance())->handleKeyEvent(89);
 800a2f4:	f010 fd08 	bl	801ad08 <_ZN8touchgfx11Application11getInstanceEv>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	461a      	mov	r2, r3
 800a2fc:	6813      	ldr	r3, [r2, #0]
 800a2fe:	330c      	adds	r3, #12
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	2159      	movs	r1, #89	; 0x59
 800a304:	4610      	mov	r0, r2
 800a306:	4798      	blx	r3
	   }
	   swFilter = !swFilter;
 800a308:	4b30      	ldr	r3, [pc, #192]	; (800a3cc <_ZN5Model4tickEv+0x15c>)
 800a30a:	781b      	ldrb	r3, [r3, #0]
 800a30c:	f083 0301 	eor.w	r3, r3, #1
 800a310:	b2da      	uxtb	r2, r3
 800a312:	4b2e      	ldr	r3, [pc, #184]	; (800a3cc <_ZN5Model4tickEv+0x15c>)
 800a314:	701a      	strb	r2, [r3, #0]
	}

	bool currentMuteStatus = HAL_GPIO_ReadPin(GPIOK, GPIO_PIN_1);
 800a316:	2102      	movs	r1, #2
 800a318:	482d      	ldr	r0, [pc, #180]	; (800a3d0 <_ZN5Model4tickEv+0x160>)
 800a31a:	f006 ffdf 	bl	80112dc <HAL_GPIO_ReadPin>
 800a31e:	4603      	mov	r3, r0
 800a320:	2b00      	cmp	r3, #0
 800a322:	bf14      	ite	ne
 800a324:	2301      	movne	r3, #1
 800a326:	2300      	moveq	r3, #0
 800a328:	737b      	strb	r3, [r7, #13]
    if(currentMuteStatus != muteStatus){
 800a32a:	4b2a      	ldr	r3, [pc, #168]	; (800a3d4 <_ZN5Model4tickEv+0x164>)
 800a32c:	781b      	ldrb	r3, [r3, #0]
 800a32e:	7b7a      	ldrb	r2, [r7, #13]
 800a330:	429a      	cmp	r2, r3
 800a332:	d017      	beq.n	800a364 <_ZN5Model4tickEv+0xf4>
	   muteStatus = currentMuteStatus;
 800a334:	4a27      	ldr	r2, [pc, #156]	; (800a3d4 <_ZN5Model4tickEv+0x164>)
 800a336:	7b7b      	ldrb	r3, [r7, #13]
 800a338:	7013      	strb	r3, [r2, #0]
	   if(muteFilter) {
 800a33a:	4b27      	ldr	r3, [pc, #156]	; (800a3d8 <_ZN5Model4tickEv+0x168>)
 800a33c:	781b      	ldrb	r3, [r3, #0]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d009      	beq.n	800a356 <_ZN5Model4tickEv+0xe6>
		   static_cast<FrontendApplication*>(Application::getInstance())->handleKeyEvent(90);
 800a342:	f010 fce1 	bl	801ad08 <_ZN8touchgfx11Application11getInstanceEv>
 800a346:	4603      	mov	r3, r0
 800a348:	461a      	mov	r2, r3
 800a34a:	6813      	ldr	r3, [r2, #0]
 800a34c:	330c      	adds	r3, #12
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	215a      	movs	r1, #90	; 0x5a
 800a352:	4610      	mov	r0, r2
 800a354:	4798      	blx	r3
	   }
	   muteFilter = !muteFilter;
 800a356:	4b20      	ldr	r3, [pc, #128]	; (800a3d8 <_ZN5Model4tickEv+0x168>)
 800a358:	781b      	ldrb	r3, [r3, #0]
 800a35a:	f083 0301 	eor.w	r3, r3, #1
 800a35e:	b2da      	uxtb	r2, r3
 800a360:	4b1d      	ldr	r3, [pc, #116]	; (800a3d8 <_ZN5Model4tickEv+0x168>)
 800a362:	701a      	strb	r2, [r3, #0]
	}

    if (TIM4->CNT != encoderCount)
 800a364:	4b1d      	ldr	r3, [pc, #116]	; (800a3dc <_ZN5Model4tickEv+0x16c>)
 800a366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a368:	4a1d      	ldr	r2, [pc, #116]	; (800a3e0 <_ZN5Model4tickEv+0x170>)
 800a36a:	8812      	ldrh	r2, [r2, #0]
 800a36c:	4293      	cmp	r3, r2
 800a36e:	bf14      	ite	ne
 800a370:	2301      	movne	r3, #1
 800a372:	2300      	moveq	r3, #0
 800a374:	b2db      	uxtb	r3, r3
 800a376:	2b00      	cmp	r3, #0
 800a378:	d01a      	beq.n	800a3b0 <_ZN5Model4tickEv+0x140>
    {
    	int16_t encoderDelta = TIM4->CNT - encoderCount;
 800a37a:	4b18      	ldr	r3, [pc, #96]	; (800a3dc <_ZN5Model4tickEv+0x16c>)
 800a37c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a37e:	b29a      	uxth	r2, r3
 800a380:	4b17      	ldr	r3, [pc, #92]	; (800a3e0 <_ZN5Model4tickEv+0x170>)
 800a382:	881b      	ldrh	r3, [r3, #0]
 800a384:	1ad3      	subs	r3, r2, r3
 800a386:	b29b      	uxth	r3, r3
 800a388:	817b      	strh	r3, [r7, #10]
    	encoderCount = TIM4->CNT;
 800a38a:	4b14      	ldr	r3, [pc, #80]	; (800a3dc <_ZN5Model4tickEv+0x16c>)
 800a38c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a38e:	b29a      	uxth	r2, r3
 800a390:	4b13      	ldr	r3, [pc, #76]	; (800a3e0 <_ZN5Model4tickEv+0x170>)
 800a392:	801a      	strh	r2, [r3, #0]
    	currentDelta = encoderDelta;
 800a394:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800a398:	4a12      	ldr	r2, [pc, #72]	; (800a3e4 <_ZN5Model4tickEv+0x174>)
 800a39a:	6013      	str	r3, [r2, #0]

    	static_cast<FrontendApplication*>(Application::getInstance())->handleKeyEvent(88);
 800a39c:	f010 fcb4 	bl	801ad08 <_ZN8touchgfx11Application11getInstanceEv>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	461a      	mov	r2, r3
 800a3a4:	6813      	ldr	r3, [r2, #0]
 800a3a6:	330c      	adds	r3, #12
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	2158      	movs	r1, #88	; 0x58
 800a3ac:	4610      	mov	r0, r2
 800a3ae:	4798      	blx	r3
	if (HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_3) != GPIO_PIN_RESET) {
		led1 = led1 ? FALSE : TRUE;
		setUserLED1State(TRUE);
		static_cast<FrontendApplication*>(Application::getInstance())->handleKeyEvent(87);
	} */
}
 800a3b0:	bf00      	nop
 800a3b2:	3710      	adds	r7, #16
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}
 800a3b8:	58020800 	.word	0x58020800
 800a3bc:	24001c84 	.word	0x24001c84
 800a3c0:	24001c85 	.word	0x24001c85
 800a3c4:	58021800 	.word	0x58021800
 800a3c8:	24001c86 	.word	0x24001c86
 800a3cc:	24001c87 	.word	0x24001c87
 800a3d0:	58022800 	.word	0x58022800
 800a3d4:	24001c88 	.word	0x24001c88
 800a3d8:	24001c89 	.word	0x24001c89
 800a3dc:	40000800 	.word	0x40000800
 800a3e0:	24001c8a 	.word	0x24001c8a
 800a3e4:	24001c80 	.word	0x24001c80

0800a3e8 <__NVIC_SetPriority>:
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b083      	sub	sp, #12
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	6039      	str	r1, [r7, #0]
 800a3f2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800a3f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	db0a      	blt.n	800a412 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	b2da      	uxtb	r2, r3
 800a400:	490c      	ldr	r1, [pc, #48]	; (800a434 <__NVIC_SetPriority+0x4c>)
 800a402:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a406:	0112      	lsls	r2, r2, #4
 800a408:	b2d2      	uxtb	r2, r2
 800a40a:	440b      	add	r3, r1
 800a40c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a410:	e00a      	b.n	800a428 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	b2da      	uxtb	r2, r3
 800a416:	4908      	ldr	r1, [pc, #32]	; (800a438 <__NVIC_SetPriority+0x50>)
 800a418:	88fb      	ldrh	r3, [r7, #6]
 800a41a:	f003 030f 	and.w	r3, r3, #15
 800a41e:	3b04      	subs	r3, #4
 800a420:	0112      	lsls	r2, r2, #4
 800a422:	b2d2      	uxtb	r2, r2
 800a424:	440b      	add	r3, r1
 800a426:	761a      	strb	r2, [r3, #24]
}
 800a428:	bf00      	nop
 800a42a:	370c      	adds	r7, #12
 800a42c:	46bd      	mov	sp, r7
 800a42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a432:	4770      	bx	lr
 800a434:	e000e100 	.word	0xe000e100
 800a438:	e000ed00 	.word	0xe000ed00

0800a43c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a43c:	b580      	push	{r7, lr}
 800a43e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a440:	4b05      	ldr	r3, [pc, #20]	; (800a458 <SysTick_Handler+0x1c>)
 800a442:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a444:	f002 fed6 	bl	800d1f4 <xTaskGetSchedulerState>
 800a448:	4603      	mov	r3, r0
 800a44a:	2b01      	cmp	r3, #1
 800a44c:	d001      	beq.n	800a452 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a44e:	f000 ffeb 	bl	800b428 <xPortSysTickHandler>
  }
}
 800a452:	bf00      	nop
 800a454:	bd80      	pop	{r7, pc}
 800a456:	bf00      	nop
 800a458:	e000e010 	.word	0xe000e010

0800a45c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a45c:	b580      	push	{r7, lr}
 800a45e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a460:	2100      	movs	r1, #0
 800a462:	f06f 0004 	mvn.w	r0, #4
 800a466:	f7ff ffbf 	bl	800a3e8 <__NVIC_SetPriority>
#endif
}
 800a46a:	bf00      	nop
 800a46c:	bd80      	pop	{r7, pc}
	...

0800a470 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a470:	b480      	push	{r7}
 800a472:	b083      	sub	sp, #12
 800a474:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a476:	f3ef 8305 	mrs	r3, IPSR
 800a47a:	603b      	str	r3, [r7, #0]
  return(result);
 800a47c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d003      	beq.n	800a48a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a482:	f06f 0305 	mvn.w	r3, #5
 800a486:	607b      	str	r3, [r7, #4]
 800a488:	e00c      	b.n	800a4a4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a48a:	4b0a      	ldr	r3, [pc, #40]	; (800a4b4 <osKernelInitialize+0x44>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d105      	bne.n	800a49e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a492:	4b08      	ldr	r3, [pc, #32]	; (800a4b4 <osKernelInitialize+0x44>)
 800a494:	2201      	movs	r2, #1
 800a496:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a498:	2300      	movs	r3, #0
 800a49a:	607b      	str	r3, [r7, #4]
 800a49c:	e002      	b.n	800a4a4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a49e:	f04f 33ff 	mov.w	r3, #4294967295
 800a4a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a4a4:	687b      	ldr	r3, [r7, #4]
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	370c      	adds	r7, #12
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b0:	4770      	bx	lr
 800a4b2:	bf00      	nop
 800a4b4:	24001c8c 	.word	0x24001c8c

0800a4b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b082      	sub	sp, #8
 800a4bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a4be:	f3ef 8305 	mrs	r3, IPSR
 800a4c2:	603b      	str	r3, [r7, #0]
  return(result);
 800a4c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d003      	beq.n	800a4d2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a4ca:	f06f 0305 	mvn.w	r3, #5
 800a4ce:	607b      	str	r3, [r7, #4]
 800a4d0:	e010      	b.n	800a4f4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a4d2:	4b0b      	ldr	r3, [pc, #44]	; (800a500 <osKernelStart+0x48>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	2b01      	cmp	r3, #1
 800a4d8:	d109      	bne.n	800a4ee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a4da:	f7ff ffbf 	bl	800a45c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a4de:	4b08      	ldr	r3, [pc, #32]	; (800a500 <osKernelStart+0x48>)
 800a4e0:	2202      	movs	r2, #2
 800a4e2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a4e4:	f002 fa2a 	bl	800c93c <vTaskStartScheduler>
      stat = osOK;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	607b      	str	r3, [r7, #4]
 800a4ec:	e002      	b.n	800a4f4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a4ee:	f04f 33ff 	mov.w	r3, #4294967295
 800a4f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a4f4:	687b      	ldr	r3, [r7, #4]
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3708      	adds	r7, #8
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}
 800a4fe:	bf00      	nop
 800a500:	24001c8c 	.word	0x24001c8c

0800a504 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a504:	b580      	push	{r7, lr}
 800a506:	b08e      	sub	sp, #56	; 0x38
 800a508:	af04      	add	r7, sp, #16
 800a50a:	60f8      	str	r0, [r7, #12]
 800a50c:	60b9      	str	r1, [r7, #8]
 800a50e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a510:	2300      	movs	r3, #0
 800a512:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a514:	f3ef 8305 	mrs	r3, IPSR
 800a518:	617b      	str	r3, [r7, #20]
  return(result);
 800a51a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d17e      	bne.n	800a61e <osThreadNew+0x11a>
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d07b      	beq.n	800a61e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a526:	2380      	movs	r3, #128	; 0x80
 800a528:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a52a:	2318      	movs	r3, #24
 800a52c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a52e:	2300      	movs	r3, #0
 800a530:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a532:	f04f 33ff 	mov.w	r3, #4294967295
 800a536:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d045      	beq.n	800a5ca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d002      	beq.n	800a54c <osThreadNew+0x48>
        name = attr->name;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	699b      	ldr	r3, [r3, #24]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d002      	beq.n	800a55a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	699b      	ldr	r3, [r3, #24]
 800a558:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a55a:	69fb      	ldr	r3, [r7, #28]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d008      	beq.n	800a572 <osThreadNew+0x6e>
 800a560:	69fb      	ldr	r3, [r7, #28]
 800a562:	2b38      	cmp	r3, #56	; 0x38
 800a564:	d805      	bhi.n	800a572 <osThreadNew+0x6e>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	685b      	ldr	r3, [r3, #4]
 800a56a:	f003 0301 	and.w	r3, r3, #1
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d001      	beq.n	800a576 <osThreadNew+0x72>
        return (NULL);
 800a572:	2300      	movs	r3, #0
 800a574:	e054      	b.n	800a620 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	695b      	ldr	r3, [r3, #20]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d003      	beq.n	800a586 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	695b      	ldr	r3, [r3, #20]
 800a582:	089b      	lsrs	r3, r3, #2
 800a584:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	689b      	ldr	r3, [r3, #8]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d00e      	beq.n	800a5ac <osThreadNew+0xa8>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	68db      	ldr	r3, [r3, #12]
 800a592:	2bbb      	cmp	r3, #187	; 0xbb
 800a594:	d90a      	bls.n	800a5ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d006      	beq.n	800a5ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	695b      	ldr	r3, [r3, #20]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d002      	beq.n	800a5ac <osThreadNew+0xa8>
        mem = 1;
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	61bb      	str	r3, [r7, #24]
 800a5aa:	e010      	b.n	800a5ce <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	689b      	ldr	r3, [r3, #8]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d10c      	bne.n	800a5ce <osThreadNew+0xca>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	68db      	ldr	r3, [r3, #12]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d108      	bne.n	800a5ce <osThreadNew+0xca>
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	691b      	ldr	r3, [r3, #16]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d104      	bne.n	800a5ce <osThreadNew+0xca>
          mem = 0;
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	61bb      	str	r3, [r7, #24]
 800a5c8:	e001      	b.n	800a5ce <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a5ce:	69bb      	ldr	r3, [r7, #24]
 800a5d0:	2b01      	cmp	r3, #1
 800a5d2:	d110      	bne.n	800a5f6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a5d8:	687a      	ldr	r2, [r7, #4]
 800a5da:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a5dc:	9202      	str	r2, [sp, #8]
 800a5de:	9301      	str	r3, [sp, #4]
 800a5e0:	69fb      	ldr	r3, [r7, #28]
 800a5e2:	9300      	str	r3, [sp, #0]
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	6a3a      	ldr	r2, [r7, #32]
 800a5e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a5ea:	68f8      	ldr	r0, [r7, #12]
 800a5ec:	f001 ffba 	bl	800c564 <xTaskCreateStatic>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	613b      	str	r3, [r7, #16]
 800a5f4:	e013      	b.n	800a61e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a5f6:	69bb      	ldr	r3, [r7, #24]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d110      	bne.n	800a61e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a5fc:	6a3b      	ldr	r3, [r7, #32]
 800a5fe:	b29a      	uxth	r2, r3
 800a600:	f107 0310 	add.w	r3, r7, #16
 800a604:	9301      	str	r3, [sp, #4]
 800a606:	69fb      	ldr	r3, [r7, #28]
 800a608:	9300      	str	r3, [sp, #0]
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a60e:	68f8      	ldr	r0, [r7, #12]
 800a610:	f002 f805 	bl	800c61e <xTaskCreate>
 800a614:	4603      	mov	r3, r0
 800a616:	2b01      	cmp	r3, #1
 800a618:	d001      	beq.n	800a61e <osThreadNew+0x11a>
            hTask = NULL;
 800a61a:	2300      	movs	r3, #0
 800a61c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a61e:	693b      	ldr	r3, [r7, #16]
}
 800a620:	4618      	mov	r0, r3
 800a622:	3728      	adds	r7, #40	; 0x28
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}

0800a628 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a628:	b580      	push	{r7, lr}
 800a62a:	b084      	sub	sp, #16
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a630:	f3ef 8305 	mrs	r3, IPSR
 800a634:	60bb      	str	r3, [r7, #8]
  return(result);
 800a636:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d003      	beq.n	800a644 <osDelay+0x1c>
    stat = osErrorISR;
 800a63c:	f06f 0305 	mvn.w	r3, #5
 800a640:	60fb      	str	r3, [r7, #12]
 800a642:	e007      	b.n	800a654 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a644:	2300      	movs	r3, #0
 800a646:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d002      	beq.n	800a654 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f002 f940 	bl	800c8d4 <vTaskDelay>
    }
  }

  return (stat);
 800a654:	68fb      	ldr	r3, [r7, #12]
}
 800a656:	4618      	mov	r0, r3
 800a658:	3710      	adds	r7, #16
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}

0800a65e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800a65e:	b580      	push	{r7, lr}
 800a660:	b08a      	sub	sp, #40	; 0x28
 800a662:	af02      	add	r7, sp, #8
 800a664:	60f8      	str	r0, [r7, #12]
 800a666:	60b9      	str	r1, [r7, #8]
 800a668:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800a66a:	2300      	movs	r3, #0
 800a66c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a66e:	f3ef 8305 	mrs	r3, IPSR
 800a672:	613b      	str	r3, [r7, #16]
  return(result);
 800a674:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a676:	2b00      	cmp	r3, #0
 800a678:	d175      	bne.n	800a766 <osSemaphoreNew+0x108>
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d072      	beq.n	800a766 <osSemaphoreNew+0x108>
 800a680:	68ba      	ldr	r2, [r7, #8]
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	429a      	cmp	r2, r3
 800a686:	d86e      	bhi.n	800a766 <osSemaphoreNew+0x108>
    mem = -1;
 800a688:	f04f 33ff 	mov.w	r3, #4294967295
 800a68c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d015      	beq.n	800a6c0 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	689b      	ldr	r3, [r3, #8]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d006      	beq.n	800a6aa <osSemaphoreNew+0x4c>
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	68db      	ldr	r3, [r3, #12]
 800a6a0:	2b4f      	cmp	r3, #79	; 0x4f
 800a6a2:	d902      	bls.n	800a6aa <osSemaphoreNew+0x4c>
        mem = 1;
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	61bb      	str	r3, [r7, #24]
 800a6a8:	e00c      	b.n	800a6c4 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	689b      	ldr	r3, [r3, #8]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d108      	bne.n	800a6c4 <osSemaphoreNew+0x66>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	68db      	ldr	r3, [r3, #12]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d104      	bne.n	800a6c4 <osSemaphoreNew+0x66>
          mem = 0;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	61bb      	str	r3, [r7, #24]
 800a6be:	e001      	b.n	800a6c4 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800a6c4:	69bb      	ldr	r3, [r7, #24]
 800a6c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6ca:	d04c      	beq.n	800a766 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	2b01      	cmp	r3, #1
 800a6d0:	d128      	bne.n	800a724 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800a6d2:	69bb      	ldr	r3, [r7, #24]
 800a6d4:	2b01      	cmp	r3, #1
 800a6d6:	d10a      	bne.n	800a6ee <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	689b      	ldr	r3, [r3, #8]
 800a6dc:	2203      	movs	r2, #3
 800a6de:	9200      	str	r2, [sp, #0]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	2100      	movs	r1, #0
 800a6e4:	2001      	movs	r0, #1
 800a6e6:	f000 ff97 	bl	800b618 <xQueueGenericCreateStatic>
 800a6ea:	61f8      	str	r0, [r7, #28]
 800a6ec:	e005      	b.n	800a6fa <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800a6ee:	2203      	movs	r2, #3
 800a6f0:	2100      	movs	r1, #0
 800a6f2:	2001      	movs	r0, #1
 800a6f4:	f001 f808 	bl	800b708 <xQueueGenericCreate>
 800a6f8:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800a6fa:	69fb      	ldr	r3, [r7, #28]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d022      	beq.n	800a746 <osSemaphoreNew+0xe8>
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d01f      	beq.n	800a746 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a706:	2300      	movs	r3, #0
 800a708:	2200      	movs	r2, #0
 800a70a:	2100      	movs	r1, #0
 800a70c:	69f8      	ldr	r0, [r7, #28]
 800a70e:	f001 f8c3 	bl	800b898 <xQueueGenericSend>
 800a712:	4603      	mov	r3, r0
 800a714:	2b01      	cmp	r3, #1
 800a716:	d016      	beq.n	800a746 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800a718:	69f8      	ldr	r0, [r7, #28]
 800a71a:	f001 fd4f 	bl	800c1bc <vQueueDelete>
            hSemaphore = NULL;
 800a71e:	2300      	movs	r3, #0
 800a720:	61fb      	str	r3, [r7, #28]
 800a722:	e010      	b.n	800a746 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800a724:	69bb      	ldr	r3, [r7, #24]
 800a726:	2b01      	cmp	r3, #1
 800a728:	d108      	bne.n	800a73c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	689b      	ldr	r3, [r3, #8]
 800a72e:	461a      	mov	r2, r3
 800a730:	68b9      	ldr	r1, [r7, #8]
 800a732:	68f8      	ldr	r0, [r7, #12]
 800a734:	f001 f845 	bl	800b7c2 <xQueueCreateCountingSemaphoreStatic>
 800a738:	61f8      	str	r0, [r7, #28]
 800a73a:	e004      	b.n	800a746 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800a73c:	68b9      	ldr	r1, [r7, #8]
 800a73e:	68f8      	ldr	r0, [r7, #12]
 800a740:	f001 f876 	bl	800b830 <xQueueCreateCountingSemaphore>
 800a744:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800a746:	69fb      	ldr	r3, [r7, #28]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d00c      	beq.n	800a766 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d003      	beq.n	800a75a <osSemaphoreNew+0xfc>
          name = attr->name;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	617b      	str	r3, [r7, #20]
 800a758:	e001      	b.n	800a75e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800a75a:	2300      	movs	r3, #0
 800a75c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800a75e:	6979      	ldr	r1, [r7, #20]
 800a760:	69f8      	ldr	r0, [r7, #28]
 800a762:	f001 fe77 	bl	800c454 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800a766:	69fb      	ldr	r3, [r7, #28]
}
 800a768:	4618      	mov	r0, r3
 800a76a:	3720      	adds	r7, #32
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}

0800a770 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800a770:	b580      	push	{r7, lr}
 800a772:	b086      	sub	sp, #24
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a77e:	2300      	movs	r3, #0
 800a780:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d103      	bne.n	800a790 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800a788:	f06f 0303 	mvn.w	r3, #3
 800a78c:	617b      	str	r3, [r7, #20]
 800a78e:	e039      	b.n	800a804 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a790:	f3ef 8305 	mrs	r3, IPSR
 800a794:	60fb      	str	r3, [r7, #12]
  return(result);
 800a796:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d022      	beq.n	800a7e2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d003      	beq.n	800a7aa <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800a7a2:	f06f 0303 	mvn.w	r3, #3
 800a7a6:	617b      	str	r3, [r7, #20]
 800a7a8:	e02c      	b.n	800a804 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800a7ae:	f107 0308 	add.w	r3, r7, #8
 800a7b2:	461a      	mov	r2, r3
 800a7b4:	2100      	movs	r1, #0
 800a7b6:	6938      	ldr	r0, [r7, #16]
 800a7b8:	f001 fc80 	bl	800c0bc <xQueueReceiveFromISR>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	2b01      	cmp	r3, #1
 800a7c0:	d003      	beq.n	800a7ca <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800a7c2:	f06f 0302 	mvn.w	r3, #2
 800a7c6:	617b      	str	r3, [r7, #20]
 800a7c8:	e01c      	b.n	800a804 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d019      	beq.n	800a804 <osSemaphoreAcquire+0x94>
 800a7d0:	4b0f      	ldr	r3, [pc, #60]	; (800a810 <osSemaphoreAcquire+0xa0>)
 800a7d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7d6:	601a      	str	r2, [r3, #0]
 800a7d8:	f3bf 8f4f 	dsb	sy
 800a7dc:	f3bf 8f6f 	isb	sy
 800a7e0:	e010      	b.n	800a804 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800a7e2:	6839      	ldr	r1, [r7, #0]
 800a7e4:	6938      	ldr	r0, [r7, #16]
 800a7e6:	f001 fb5d 	bl	800bea4 <xQueueSemaphoreTake>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	d009      	beq.n	800a804 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d003      	beq.n	800a7fe <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800a7f6:	f06f 0301 	mvn.w	r3, #1
 800a7fa:	617b      	str	r3, [r7, #20]
 800a7fc:	e002      	b.n	800a804 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800a7fe:	f06f 0302 	mvn.w	r3, #2
 800a802:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800a804:	697b      	ldr	r3, [r7, #20]
}
 800a806:	4618      	mov	r0, r3
 800a808:	3718      	adds	r7, #24
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}
 800a80e:	bf00      	nop
 800a810:	e000ed04 	.word	0xe000ed04

0800a814 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800a814:	b580      	push	{r7, lr}
 800a816:	b086      	sub	sp, #24
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a820:	2300      	movs	r3, #0
 800a822:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d103      	bne.n	800a832 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800a82a:	f06f 0303 	mvn.w	r3, #3
 800a82e:	617b      	str	r3, [r7, #20]
 800a830:	e02c      	b.n	800a88c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a832:	f3ef 8305 	mrs	r3, IPSR
 800a836:	60fb      	str	r3, [r7, #12]
  return(result);
 800a838:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d01a      	beq.n	800a874 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800a83e:	2300      	movs	r3, #0
 800a840:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a842:	f107 0308 	add.w	r3, r7, #8
 800a846:	4619      	mov	r1, r3
 800a848:	6938      	ldr	r0, [r7, #16]
 800a84a:	f001 f9be 	bl	800bbca <xQueueGiveFromISR>
 800a84e:	4603      	mov	r3, r0
 800a850:	2b01      	cmp	r3, #1
 800a852:	d003      	beq.n	800a85c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800a854:	f06f 0302 	mvn.w	r3, #2
 800a858:	617b      	str	r3, [r7, #20]
 800a85a:	e017      	b.n	800a88c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d014      	beq.n	800a88c <osSemaphoreRelease+0x78>
 800a862:	4b0d      	ldr	r3, [pc, #52]	; (800a898 <osSemaphoreRelease+0x84>)
 800a864:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a868:	601a      	str	r2, [r3, #0]
 800a86a:	f3bf 8f4f 	dsb	sy
 800a86e:	f3bf 8f6f 	isb	sy
 800a872:	e00b      	b.n	800a88c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a874:	2300      	movs	r3, #0
 800a876:	2200      	movs	r2, #0
 800a878:	2100      	movs	r1, #0
 800a87a:	6938      	ldr	r0, [r7, #16]
 800a87c:	f001 f80c 	bl	800b898 <xQueueGenericSend>
 800a880:	4603      	mov	r3, r0
 800a882:	2b01      	cmp	r3, #1
 800a884:	d002      	beq.n	800a88c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800a886:	f06f 0302 	mvn.w	r3, #2
 800a88a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800a88c:	697b      	ldr	r3, [r7, #20]
}
 800a88e:	4618      	mov	r0, r3
 800a890:	3718      	adds	r7, #24
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}
 800a896:	bf00      	nop
 800a898:	e000ed04 	.word	0xe000ed04

0800a89c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b08a      	sub	sp, #40	; 0x28
 800a8a0:	af02      	add	r7, sp, #8
 800a8a2:	60f8      	str	r0, [r7, #12]
 800a8a4:	60b9      	str	r1, [r7, #8]
 800a8a6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a8ac:	f3ef 8305 	mrs	r3, IPSR
 800a8b0:	613b      	str	r3, [r7, #16]
  return(result);
 800a8b2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d15f      	bne.n	800a978 <osMessageQueueNew+0xdc>
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d05c      	beq.n	800a978 <osMessageQueueNew+0xdc>
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d059      	beq.n	800a978 <osMessageQueueNew+0xdc>
    mem = -1;
 800a8c4:	f04f 33ff 	mov.w	r3, #4294967295
 800a8c8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d029      	beq.n	800a924 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	689b      	ldr	r3, [r3, #8]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d012      	beq.n	800a8fe <osMessageQueueNew+0x62>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	68db      	ldr	r3, [r3, #12]
 800a8dc:	2b4f      	cmp	r3, #79	; 0x4f
 800a8de:	d90e      	bls.n	800a8fe <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d00a      	beq.n	800a8fe <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	695a      	ldr	r2, [r3, #20]
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	68b9      	ldr	r1, [r7, #8]
 800a8f0:	fb01 f303 	mul.w	r3, r1, r3
 800a8f4:	429a      	cmp	r2, r3
 800a8f6:	d302      	bcc.n	800a8fe <osMessageQueueNew+0x62>
        mem = 1;
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	61bb      	str	r3, [r7, #24]
 800a8fc:	e014      	b.n	800a928 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	689b      	ldr	r3, [r3, #8]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d110      	bne.n	800a928 <osMessageQueueNew+0x8c>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	68db      	ldr	r3, [r3, #12]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d10c      	bne.n	800a928 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a912:	2b00      	cmp	r3, #0
 800a914:	d108      	bne.n	800a928 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	695b      	ldr	r3, [r3, #20]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d104      	bne.n	800a928 <osMessageQueueNew+0x8c>
          mem = 0;
 800a91e:	2300      	movs	r3, #0
 800a920:	61bb      	str	r3, [r7, #24]
 800a922:	e001      	b.n	800a928 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800a924:	2300      	movs	r3, #0
 800a926:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a928:	69bb      	ldr	r3, [r7, #24]
 800a92a:	2b01      	cmp	r3, #1
 800a92c:	d10b      	bne.n	800a946 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	691a      	ldr	r2, [r3, #16]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	689b      	ldr	r3, [r3, #8]
 800a936:	2100      	movs	r1, #0
 800a938:	9100      	str	r1, [sp, #0]
 800a93a:	68b9      	ldr	r1, [r7, #8]
 800a93c:	68f8      	ldr	r0, [r7, #12]
 800a93e:	f000 fe6b 	bl	800b618 <xQueueGenericCreateStatic>
 800a942:	61f8      	str	r0, [r7, #28]
 800a944:	e008      	b.n	800a958 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a946:	69bb      	ldr	r3, [r7, #24]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d105      	bne.n	800a958 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a94c:	2200      	movs	r2, #0
 800a94e:	68b9      	ldr	r1, [r7, #8]
 800a950:	68f8      	ldr	r0, [r7, #12]
 800a952:	f000 fed9 	bl	800b708 <xQueueGenericCreate>
 800a956:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a958:	69fb      	ldr	r3, [r7, #28]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d00c      	beq.n	800a978 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d003      	beq.n	800a96c <osMessageQueueNew+0xd0>
        name = attr->name;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	617b      	str	r3, [r7, #20]
 800a96a:	e001      	b.n	800a970 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a96c:	2300      	movs	r3, #0
 800a96e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a970:	6979      	ldr	r1, [r7, #20]
 800a972:	69f8      	ldr	r0, [r7, #28]
 800a974:	f001 fd6e 	bl	800c454 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a978:	69fb      	ldr	r3, [r7, #28]
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3720      	adds	r7, #32
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}
	...

0800a984 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a984:	b580      	push	{r7, lr}
 800a986:	b088      	sub	sp, #32
 800a988:	af00      	add	r7, sp, #0
 800a98a:	60f8      	str	r0, [r7, #12]
 800a98c:	60b9      	str	r1, [r7, #8]
 800a98e:	603b      	str	r3, [r7, #0]
 800a990:	4613      	mov	r3, r2
 800a992:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a998:	2300      	movs	r3, #0
 800a99a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a99c:	f3ef 8305 	mrs	r3, IPSR
 800a9a0:	617b      	str	r3, [r7, #20]
  return(result);
 800a9a2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d028      	beq.n	800a9fa <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a9a8:	69bb      	ldr	r3, [r7, #24]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d005      	beq.n	800a9ba <osMessageQueuePut+0x36>
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d002      	beq.n	800a9ba <osMessageQueuePut+0x36>
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d003      	beq.n	800a9c2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800a9ba:	f06f 0303 	mvn.w	r3, #3
 800a9be:	61fb      	str	r3, [r7, #28]
 800a9c0:	e038      	b.n	800aa34 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a9c6:	f107 0210 	add.w	r2, r7, #16
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	68b9      	ldr	r1, [r7, #8]
 800a9ce:	69b8      	ldr	r0, [r7, #24]
 800a9d0:	f001 f860 	bl	800ba94 <xQueueGenericSendFromISR>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	2b01      	cmp	r3, #1
 800a9d8:	d003      	beq.n	800a9e2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800a9da:	f06f 0302 	mvn.w	r3, #2
 800a9de:	61fb      	str	r3, [r7, #28]
 800a9e0:	e028      	b.n	800aa34 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d025      	beq.n	800aa34 <osMessageQueuePut+0xb0>
 800a9e8:	4b15      	ldr	r3, [pc, #84]	; (800aa40 <osMessageQueuePut+0xbc>)
 800a9ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9ee:	601a      	str	r2, [r3, #0]
 800a9f0:	f3bf 8f4f 	dsb	sy
 800a9f4:	f3bf 8f6f 	isb	sy
 800a9f8:	e01c      	b.n	800aa34 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a9fa:	69bb      	ldr	r3, [r7, #24]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d002      	beq.n	800aa06 <osMessageQueuePut+0x82>
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d103      	bne.n	800aa0e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800aa06:	f06f 0303 	mvn.w	r3, #3
 800aa0a:	61fb      	str	r3, [r7, #28]
 800aa0c:	e012      	b.n	800aa34 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800aa0e:	2300      	movs	r3, #0
 800aa10:	683a      	ldr	r2, [r7, #0]
 800aa12:	68b9      	ldr	r1, [r7, #8]
 800aa14:	69b8      	ldr	r0, [r7, #24]
 800aa16:	f000 ff3f 	bl	800b898 <xQueueGenericSend>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	2b01      	cmp	r3, #1
 800aa1e:	d009      	beq.n	800aa34 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d003      	beq.n	800aa2e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800aa26:	f06f 0301 	mvn.w	r3, #1
 800aa2a:	61fb      	str	r3, [r7, #28]
 800aa2c:	e002      	b.n	800aa34 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800aa2e:	f06f 0302 	mvn.w	r3, #2
 800aa32:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800aa34:	69fb      	ldr	r3, [r7, #28]
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3720      	adds	r7, #32
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}
 800aa3e:	bf00      	nop
 800aa40:	e000ed04 	.word	0xe000ed04

0800aa44 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b088      	sub	sp, #32
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	60f8      	str	r0, [r7, #12]
 800aa4c:	60b9      	str	r1, [r7, #8]
 800aa4e:	607a      	str	r2, [r7, #4]
 800aa50:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800aa56:	2300      	movs	r3, #0
 800aa58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa5a:	f3ef 8305 	mrs	r3, IPSR
 800aa5e:	617b      	str	r3, [r7, #20]
  return(result);
 800aa60:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d028      	beq.n	800aab8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800aa66:	69bb      	ldr	r3, [r7, #24]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d005      	beq.n	800aa78 <osMessageQueueGet+0x34>
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d002      	beq.n	800aa78 <osMessageQueueGet+0x34>
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d003      	beq.n	800aa80 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800aa78:	f06f 0303 	mvn.w	r3, #3
 800aa7c:	61fb      	str	r3, [r7, #28]
 800aa7e:	e037      	b.n	800aaf0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800aa80:	2300      	movs	r3, #0
 800aa82:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800aa84:	f107 0310 	add.w	r3, r7, #16
 800aa88:	461a      	mov	r2, r3
 800aa8a:	68b9      	ldr	r1, [r7, #8]
 800aa8c:	69b8      	ldr	r0, [r7, #24]
 800aa8e:	f001 fb15 	bl	800c0bc <xQueueReceiveFromISR>
 800aa92:	4603      	mov	r3, r0
 800aa94:	2b01      	cmp	r3, #1
 800aa96:	d003      	beq.n	800aaa0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800aa98:	f06f 0302 	mvn.w	r3, #2
 800aa9c:	61fb      	str	r3, [r7, #28]
 800aa9e:	e027      	b.n	800aaf0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d024      	beq.n	800aaf0 <osMessageQueueGet+0xac>
 800aaa6:	4b15      	ldr	r3, [pc, #84]	; (800aafc <osMessageQueueGet+0xb8>)
 800aaa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aaac:	601a      	str	r2, [r3, #0]
 800aaae:	f3bf 8f4f 	dsb	sy
 800aab2:	f3bf 8f6f 	isb	sy
 800aab6:	e01b      	b.n	800aaf0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800aab8:	69bb      	ldr	r3, [r7, #24]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d002      	beq.n	800aac4 <osMessageQueueGet+0x80>
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d103      	bne.n	800aacc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800aac4:	f06f 0303 	mvn.w	r3, #3
 800aac8:	61fb      	str	r3, [r7, #28]
 800aaca:	e011      	b.n	800aaf0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800aacc:	683a      	ldr	r2, [r7, #0]
 800aace:	68b9      	ldr	r1, [r7, #8]
 800aad0:	69b8      	ldr	r0, [r7, #24]
 800aad2:	f001 f907 	bl	800bce4 <xQueueReceive>
 800aad6:	4603      	mov	r3, r0
 800aad8:	2b01      	cmp	r3, #1
 800aada:	d009      	beq.n	800aaf0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d003      	beq.n	800aaea <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800aae2:	f06f 0301 	mvn.w	r3, #1
 800aae6:	61fb      	str	r3, [r7, #28]
 800aae8:	e002      	b.n	800aaf0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800aaea:	f06f 0302 	mvn.w	r3, #2
 800aaee:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800aaf0:	69fb      	ldr	r3, [r7, #28]
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3720      	adds	r7, #32
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}
 800aafa:	bf00      	nop
 800aafc:	e000ed04 	.word	0xe000ed04

0800ab00 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ab00:	b480      	push	{r7}
 800ab02:	b085      	sub	sp, #20
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	60f8      	str	r0, [r7, #12]
 800ab08:	60b9      	str	r1, [r7, #8]
 800ab0a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	4a07      	ldr	r2, [pc, #28]	; (800ab2c <vApplicationGetIdleTaskMemory+0x2c>)
 800ab10:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	4a06      	ldr	r2, [pc, #24]	; (800ab30 <vApplicationGetIdleTaskMemory+0x30>)
 800ab16:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2280      	movs	r2, #128	; 0x80
 800ab1c:	601a      	str	r2, [r3, #0]
}
 800ab1e:	bf00      	nop
 800ab20:	3714      	adds	r7, #20
 800ab22:	46bd      	mov	sp, r7
 800ab24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab28:	4770      	bx	lr
 800ab2a:	bf00      	nop
 800ab2c:	24001c90 	.word	0x24001c90
 800ab30:	24001d4c 	.word	0x24001d4c

0800ab34 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ab34:	b480      	push	{r7}
 800ab36:	b085      	sub	sp, #20
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	60f8      	str	r0, [r7, #12]
 800ab3c:	60b9      	str	r1, [r7, #8]
 800ab3e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	4a07      	ldr	r2, [pc, #28]	; (800ab60 <vApplicationGetTimerTaskMemory+0x2c>)
 800ab44:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	4a06      	ldr	r2, [pc, #24]	; (800ab64 <vApplicationGetTimerTaskMemory+0x30>)
 800ab4a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ab52:	601a      	str	r2, [r3, #0]
}
 800ab54:	bf00      	nop
 800ab56:	3714      	adds	r7, #20
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5e:	4770      	bx	lr
 800ab60:	24001f4c 	.word	0x24001f4c
 800ab64:	24002008 	.word	0x24002008

0800ab68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b08a      	sub	sp, #40	; 0x28
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ab70:	2300      	movs	r3, #0
 800ab72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ab74:	f001 ff52 	bl	800ca1c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ab78:	4b5b      	ldr	r3, [pc, #364]	; (800ace8 <pvPortMalloc+0x180>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d101      	bne.n	800ab84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ab80:	f000 f920 	bl	800adc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ab84:	4b59      	ldr	r3, [pc, #356]	; (800acec <pvPortMalloc+0x184>)
 800ab86:	681a      	ldr	r2, [r3, #0]
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	4013      	ands	r3, r2
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	f040 8093 	bne.w	800acb8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d01d      	beq.n	800abd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ab98:	2208      	movs	r2, #8
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	4413      	add	r3, r2
 800ab9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f003 0307 	and.w	r3, r3, #7
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d014      	beq.n	800abd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	f023 0307 	bic.w	r3, r3, #7
 800abb0:	3308      	adds	r3, #8
 800abb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f003 0307 	and.w	r3, r3, #7
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d00a      	beq.n	800abd4 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800abbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc2:	f383 8811 	msr	BASEPRI, r3
 800abc6:	f3bf 8f6f 	isb	sy
 800abca:	f3bf 8f4f 	dsb	sy
 800abce:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800abd0:	bf00      	nop
 800abd2:	e7fe      	b.n	800abd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d06e      	beq.n	800acb8 <pvPortMalloc+0x150>
 800abda:	4b45      	ldr	r3, [pc, #276]	; (800acf0 <pvPortMalloc+0x188>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	687a      	ldr	r2, [r7, #4]
 800abe0:	429a      	cmp	r2, r3
 800abe2:	d869      	bhi.n	800acb8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800abe4:	4b43      	ldr	r3, [pc, #268]	; (800acf4 <pvPortMalloc+0x18c>)
 800abe6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800abe8:	4b42      	ldr	r3, [pc, #264]	; (800acf4 <pvPortMalloc+0x18c>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800abee:	e004      	b.n	800abfa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800abf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800abf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800abfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abfc:	685b      	ldr	r3, [r3, #4]
 800abfe:	687a      	ldr	r2, [r7, #4]
 800ac00:	429a      	cmp	r2, r3
 800ac02:	d903      	bls.n	800ac0c <pvPortMalloc+0xa4>
 800ac04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d1f1      	bne.n	800abf0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ac0c:	4b36      	ldr	r3, [pc, #216]	; (800ace8 <pvPortMalloc+0x180>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac12:	429a      	cmp	r2, r3
 800ac14:	d050      	beq.n	800acb8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ac16:	6a3b      	ldr	r3, [r7, #32]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	2208      	movs	r2, #8
 800ac1c:	4413      	add	r3, r2
 800ac1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ac20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac22:	681a      	ldr	r2, [r3, #0]
 800ac24:	6a3b      	ldr	r3, [r7, #32]
 800ac26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ac28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac2a:	685a      	ldr	r2, [r3, #4]
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	1ad2      	subs	r2, r2, r3
 800ac30:	2308      	movs	r3, #8
 800ac32:	005b      	lsls	r3, r3, #1
 800ac34:	429a      	cmp	r2, r3
 800ac36:	d91f      	bls.n	800ac78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ac38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	4413      	add	r3, r2
 800ac3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac40:	69bb      	ldr	r3, [r7, #24]
 800ac42:	f003 0307 	and.w	r3, r3, #7
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d00a      	beq.n	800ac60 <pvPortMalloc+0xf8>
	__asm volatile
 800ac4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac4e:	f383 8811 	msr	BASEPRI, r3
 800ac52:	f3bf 8f6f 	isb	sy
 800ac56:	f3bf 8f4f 	dsb	sy
 800ac5a:	613b      	str	r3, [r7, #16]
}
 800ac5c:	bf00      	nop
 800ac5e:	e7fe      	b.n	800ac5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ac60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac62:	685a      	ldr	r2, [r3, #4]
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	1ad2      	subs	r2, r2, r3
 800ac68:	69bb      	ldr	r3, [r7, #24]
 800ac6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ac6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac6e:	687a      	ldr	r2, [r7, #4]
 800ac70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ac72:	69b8      	ldr	r0, [r7, #24]
 800ac74:	f000 f908 	bl	800ae88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ac78:	4b1d      	ldr	r3, [pc, #116]	; (800acf0 <pvPortMalloc+0x188>)
 800ac7a:	681a      	ldr	r2, [r3, #0]
 800ac7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac7e:	685b      	ldr	r3, [r3, #4]
 800ac80:	1ad3      	subs	r3, r2, r3
 800ac82:	4a1b      	ldr	r2, [pc, #108]	; (800acf0 <pvPortMalloc+0x188>)
 800ac84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ac86:	4b1a      	ldr	r3, [pc, #104]	; (800acf0 <pvPortMalloc+0x188>)
 800ac88:	681a      	ldr	r2, [r3, #0]
 800ac8a:	4b1b      	ldr	r3, [pc, #108]	; (800acf8 <pvPortMalloc+0x190>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	429a      	cmp	r2, r3
 800ac90:	d203      	bcs.n	800ac9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ac92:	4b17      	ldr	r3, [pc, #92]	; (800acf0 <pvPortMalloc+0x188>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	4a18      	ldr	r2, [pc, #96]	; (800acf8 <pvPortMalloc+0x190>)
 800ac98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ac9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac9c:	685a      	ldr	r2, [r3, #4]
 800ac9e:	4b13      	ldr	r3, [pc, #76]	; (800acec <pvPortMalloc+0x184>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	431a      	orrs	r2, r3
 800aca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acaa:	2200      	movs	r2, #0
 800acac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800acae:	4b13      	ldr	r3, [pc, #76]	; (800acfc <pvPortMalloc+0x194>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	3301      	adds	r3, #1
 800acb4:	4a11      	ldr	r2, [pc, #68]	; (800acfc <pvPortMalloc+0x194>)
 800acb6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800acb8:	f001 febe 	bl	800ca38 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800acbc:	69fb      	ldr	r3, [r7, #28]
 800acbe:	f003 0307 	and.w	r3, r3, #7
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d00a      	beq.n	800acdc <pvPortMalloc+0x174>
	__asm volatile
 800acc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acca:	f383 8811 	msr	BASEPRI, r3
 800acce:	f3bf 8f6f 	isb	sy
 800acd2:	f3bf 8f4f 	dsb	sy
 800acd6:	60fb      	str	r3, [r7, #12]
}
 800acd8:	bf00      	nop
 800acda:	e7fe      	b.n	800acda <pvPortMalloc+0x172>
	return pvReturn;
 800acdc:	69fb      	ldr	r3, [r7, #28]
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3728      	adds	r7, #40	; 0x28
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}
 800ace6:	bf00      	nop
 800ace8:	2400a410 	.word	0x2400a410
 800acec:	2400a424 	.word	0x2400a424
 800acf0:	2400a414 	.word	0x2400a414
 800acf4:	2400a408 	.word	0x2400a408
 800acf8:	2400a418 	.word	0x2400a418
 800acfc:	2400a41c 	.word	0x2400a41c

0800ad00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b086      	sub	sp, #24
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d04d      	beq.n	800adae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ad12:	2308      	movs	r3, #8
 800ad14:	425b      	negs	r3, r3
 800ad16:	697a      	ldr	r2, [r7, #20]
 800ad18:	4413      	add	r3, r2
 800ad1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ad1c:	697b      	ldr	r3, [r7, #20]
 800ad1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	685a      	ldr	r2, [r3, #4]
 800ad24:	4b24      	ldr	r3, [pc, #144]	; (800adb8 <vPortFree+0xb8>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	4013      	ands	r3, r2
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d10a      	bne.n	800ad44 <vPortFree+0x44>
	__asm volatile
 800ad2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad32:	f383 8811 	msr	BASEPRI, r3
 800ad36:	f3bf 8f6f 	isb	sy
 800ad3a:	f3bf 8f4f 	dsb	sy
 800ad3e:	60fb      	str	r3, [r7, #12]
}
 800ad40:	bf00      	nop
 800ad42:	e7fe      	b.n	800ad42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d00a      	beq.n	800ad62 <vPortFree+0x62>
	__asm volatile
 800ad4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad50:	f383 8811 	msr	BASEPRI, r3
 800ad54:	f3bf 8f6f 	isb	sy
 800ad58:	f3bf 8f4f 	dsb	sy
 800ad5c:	60bb      	str	r3, [r7, #8]
}
 800ad5e:	bf00      	nop
 800ad60:	e7fe      	b.n	800ad60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	685a      	ldr	r2, [r3, #4]
 800ad66:	4b14      	ldr	r3, [pc, #80]	; (800adb8 <vPortFree+0xb8>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	4013      	ands	r3, r2
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d01e      	beq.n	800adae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d11a      	bne.n	800adae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ad78:	693b      	ldr	r3, [r7, #16]
 800ad7a:	685a      	ldr	r2, [r3, #4]
 800ad7c:	4b0e      	ldr	r3, [pc, #56]	; (800adb8 <vPortFree+0xb8>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	43db      	mvns	r3, r3
 800ad82:	401a      	ands	r2, r3
 800ad84:	693b      	ldr	r3, [r7, #16]
 800ad86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ad88:	f001 fe48 	bl	800ca1c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ad8c:	693b      	ldr	r3, [r7, #16]
 800ad8e:	685a      	ldr	r2, [r3, #4]
 800ad90:	4b0a      	ldr	r3, [pc, #40]	; (800adbc <vPortFree+0xbc>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	4413      	add	r3, r2
 800ad96:	4a09      	ldr	r2, [pc, #36]	; (800adbc <vPortFree+0xbc>)
 800ad98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ad9a:	6938      	ldr	r0, [r7, #16]
 800ad9c:	f000 f874 	bl	800ae88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ada0:	4b07      	ldr	r3, [pc, #28]	; (800adc0 <vPortFree+0xc0>)
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	3301      	adds	r3, #1
 800ada6:	4a06      	ldr	r2, [pc, #24]	; (800adc0 <vPortFree+0xc0>)
 800ada8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800adaa:	f001 fe45 	bl	800ca38 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800adae:	bf00      	nop
 800adb0:	3718      	adds	r7, #24
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}
 800adb6:	bf00      	nop
 800adb8:	2400a424 	.word	0x2400a424
 800adbc:	2400a414 	.word	0x2400a414
 800adc0:	2400a420 	.word	0x2400a420

0800adc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800adc4:	b480      	push	{r7}
 800adc6:	b085      	sub	sp, #20
 800adc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800adca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800adce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800add0:	4b27      	ldr	r3, [pc, #156]	; (800ae70 <prvHeapInit+0xac>)
 800add2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	f003 0307 	and.w	r3, r3, #7
 800adda:	2b00      	cmp	r3, #0
 800addc:	d00c      	beq.n	800adf8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	3307      	adds	r3, #7
 800ade2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	f023 0307 	bic.w	r3, r3, #7
 800adea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800adec:	68ba      	ldr	r2, [r7, #8]
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	1ad3      	subs	r3, r2, r3
 800adf2:	4a1f      	ldr	r2, [pc, #124]	; (800ae70 <prvHeapInit+0xac>)
 800adf4:	4413      	add	r3, r2
 800adf6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800adfc:	4a1d      	ldr	r2, [pc, #116]	; (800ae74 <prvHeapInit+0xb0>)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ae02:	4b1c      	ldr	r3, [pc, #112]	; (800ae74 <prvHeapInit+0xb0>)
 800ae04:	2200      	movs	r2, #0
 800ae06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	68ba      	ldr	r2, [r7, #8]
 800ae0c:	4413      	add	r3, r2
 800ae0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ae10:	2208      	movs	r2, #8
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	1a9b      	subs	r3, r3, r2
 800ae16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	f023 0307 	bic.w	r3, r3, #7
 800ae1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	4a15      	ldr	r2, [pc, #84]	; (800ae78 <prvHeapInit+0xb4>)
 800ae24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ae26:	4b14      	ldr	r3, [pc, #80]	; (800ae78 <prvHeapInit+0xb4>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ae2e:	4b12      	ldr	r3, [pc, #72]	; (800ae78 <prvHeapInit+0xb4>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	2200      	movs	r2, #0
 800ae34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	68fa      	ldr	r2, [r7, #12]
 800ae3e:	1ad2      	subs	r2, r2, r3
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ae44:	4b0c      	ldr	r3, [pc, #48]	; (800ae78 <prvHeapInit+0xb4>)
 800ae46:	681a      	ldr	r2, [r3, #0]
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	685b      	ldr	r3, [r3, #4]
 800ae50:	4a0a      	ldr	r2, [pc, #40]	; (800ae7c <prvHeapInit+0xb8>)
 800ae52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	685b      	ldr	r3, [r3, #4]
 800ae58:	4a09      	ldr	r2, [pc, #36]	; (800ae80 <prvHeapInit+0xbc>)
 800ae5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ae5c:	4b09      	ldr	r3, [pc, #36]	; (800ae84 <prvHeapInit+0xc0>)
 800ae5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ae62:	601a      	str	r2, [r3, #0]
}
 800ae64:	bf00      	nop
 800ae66:	3714      	adds	r7, #20
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr
 800ae70:	24002408 	.word	0x24002408
 800ae74:	2400a408 	.word	0x2400a408
 800ae78:	2400a410 	.word	0x2400a410
 800ae7c:	2400a418 	.word	0x2400a418
 800ae80:	2400a414 	.word	0x2400a414
 800ae84:	2400a424 	.word	0x2400a424

0800ae88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ae88:	b480      	push	{r7}
 800ae8a:	b085      	sub	sp, #20
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ae90:	4b28      	ldr	r3, [pc, #160]	; (800af34 <prvInsertBlockIntoFreeList+0xac>)
 800ae92:	60fb      	str	r3, [r7, #12]
 800ae94:	e002      	b.n	800ae9c <prvInsertBlockIntoFreeList+0x14>
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	60fb      	str	r3, [r7, #12]
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	687a      	ldr	r2, [r7, #4]
 800aea2:	429a      	cmp	r2, r3
 800aea4:	d8f7      	bhi.n	800ae96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	685b      	ldr	r3, [r3, #4]
 800aeae:	68ba      	ldr	r2, [r7, #8]
 800aeb0:	4413      	add	r3, r2
 800aeb2:	687a      	ldr	r2, [r7, #4]
 800aeb4:	429a      	cmp	r2, r3
 800aeb6:	d108      	bne.n	800aeca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	685a      	ldr	r2, [r3, #4]
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	685b      	ldr	r3, [r3, #4]
 800aec0:	441a      	add	r2, r3
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	685b      	ldr	r3, [r3, #4]
 800aed2:	68ba      	ldr	r2, [r7, #8]
 800aed4:	441a      	add	r2, r3
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	429a      	cmp	r2, r3
 800aedc:	d118      	bne.n	800af10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	681a      	ldr	r2, [r3, #0]
 800aee2:	4b15      	ldr	r3, [pc, #84]	; (800af38 <prvInsertBlockIntoFreeList+0xb0>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	429a      	cmp	r2, r3
 800aee8:	d00d      	beq.n	800af06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	685a      	ldr	r2, [r3, #4]
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	685b      	ldr	r3, [r3, #4]
 800aef4:	441a      	add	r2, r3
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	681a      	ldr	r2, [r3, #0]
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	601a      	str	r2, [r3, #0]
 800af04:	e008      	b.n	800af18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800af06:	4b0c      	ldr	r3, [pc, #48]	; (800af38 <prvInsertBlockIntoFreeList+0xb0>)
 800af08:	681a      	ldr	r2, [r3, #0]
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	601a      	str	r2, [r3, #0]
 800af0e:	e003      	b.n	800af18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	681a      	ldr	r2, [r3, #0]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800af18:	68fa      	ldr	r2, [r7, #12]
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	429a      	cmp	r2, r3
 800af1e:	d002      	beq.n	800af26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	687a      	ldr	r2, [r7, #4]
 800af24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af26:	bf00      	nop
 800af28:	3714      	adds	r7, #20
 800af2a:	46bd      	mov	sp, r7
 800af2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af30:	4770      	bx	lr
 800af32:	bf00      	nop
 800af34:	2400a408 	.word	0x2400a408
 800af38:	2400a410 	.word	0x2400a410

0800af3c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800af3c:	b480      	push	{r7}
 800af3e:	b083      	sub	sp, #12
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f103 0208 	add.w	r2, r3, #8
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f04f 32ff 	mov.w	r2, #4294967295
 800af54:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f103 0208 	add.w	r2, r3, #8
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f103 0208 	add.w	r2, r3, #8
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2200      	movs	r2, #0
 800af6e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800af70:	bf00      	nop
 800af72:	370c      	adds	r7, #12
 800af74:	46bd      	mov	sp, r7
 800af76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7a:	4770      	bx	lr

0800af7c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800af7c:	b480      	push	{r7}
 800af7e:	b083      	sub	sp, #12
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2200      	movs	r2, #0
 800af88:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800af8a:	bf00      	nop
 800af8c:	370c      	adds	r7, #12
 800af8e:	46bd      	mov	sp, r7
 800af90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af94:	4770      	bx	lr

0800af96 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800af96:	b480      	push	{r7}
 800af98:	b085      	sub	sp, #20
 800af9a:	af00      	add	r7, sp, #0
 800af9c:	6078      	str	r0, [r7, #4]
 800af9e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	685b      	ldr	r3, [r3, #4]
 800afa4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	68fa      	ldr	r2, [r7, #12]
 800afaa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	689a      	ldr	r2, [r3, #8]
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	689b      	ldr	r3, [r3, #8]
 800afb8:	683a      	ldr	r2, [r7, #0]
 800afba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	683a      	ldr	r2, [r7, #0]
 800afc0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	687a      	ldr	r2, [r7, #4]
 800afc6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	1c5a      	adds	r2, r3, #1
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	601a      	str	r2, [r3, #0]
}
 800afd2:	bf00      	nop
 800afd4:	3714      	adds	r7, #20
 800afd6:	46bd      	mov	sp, r7
 800afd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afdc:	4770      	bx	lr

0800afde <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800afde:	b480      	push	{r7}
 800afe0:	b085      	sub	sp, #20
 800afe2:	af00      	add	r7, sp, #0
 800afe4:	6078      	str	r0, [r7, #4]
 800afe6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aff4:	d103      	bne.n	800affe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	691b      	ldr	r3, [r3, #16]
 800affa:	60fb      	str	r3, [r7, #12]
 800affc:	e00c      	b.n	800b018 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	3308      	adds	r3, #8
 800b002:	60fb      	str	r3, [r7, #12]
 800b004:	e002      	b.n	800b00c <vListInsert+0x2e>
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	685b      	ldr	r3, [r3, #4]
 800b00a:	60fb      	str	r3, [r7, #12]
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	685b      	ldr	r3, [r3, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	68ba      	ldr	r2, [r7, #8]
 800b014:	429a      	cmp	r2, r3
 800b016:	d2f6      	bcs.n	800b006 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	685a      	ldr	r2, [r3, #4]
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	685b      	ldr	r3, [r3, #4]
 800b024:	683a      	ldr	r2, [r7, #0]
 800b026:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	68fa      	ldr	r2, [r7, #12]
 800b02c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	683a      	ldr	r2, [r7, #0]
 800b032:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	687a      	ldr	r2, [r7, #4]
 800b038:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	1c5a      	adds	r2, r3, #1
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	601a      	str	r2, [r3, #0]
}
 800b044:	bf00      	nop
 800b046:	3714      	adds	r7, #20
 800b048:	46bd      	mov	sp, r7
 800b04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04e:	4770      	bx	lr

0800b050 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b050:	b480      	push	{r7}
 800b052:	b085      	sub	sp, #20
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	691b      	ldr	r3, [r3, #16]
 800b05c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	685b      	ldr	r3, [r3, #4]
 800b062:	687a      	ldr	r2, [r7, #4]
 800b064:	6892      	ldr	r2, [r2, #8]
 800b066:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	689b      	ldr	r3, [r3, #8]
 800b06c:	687a      	ldr	r2, [r7, #4]
 800b06e:	6852      	ldr	r2, [r2, #4]
 800b070:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	685b      	ldr	r3, [r3, #4]
 800b076:	687a      	ldr	r2, [r7, #4]
 800b078:	429a      	cmp	r2, r3
 800b07a:	d103      	bne.n	800b084 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	689a      	ldr	r2, [r3, #8]
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2200      	movs	r2, #0
 800b088:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	1e5a      	subs	r2, r3, #1
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	681b      	ldr	r3, [r3, #0]
}
 800b098:	4618      	mov	r0, r3
 800b09a:	3714      	adds	r7, #20
 800b09c:	46bd      	mov	sp, r7
 800b09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a2:	4770      	bx	lr

0800b0a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b0a4:	b480      	push	{r7}
 800b0a6:	b085      	sub	sp, #20
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	60f8      	str	r0, [r7, #12]
 800b0ac:	60b9      	str	r1, [r7, #8]
 800b0ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	3b04      	subs	r3, #4
 800b0b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b0bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	3b04      	subs	r3, #4
 800b0c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	f023 0201 	bic.w	r2, r3, #1
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	3b04      	subs	r3, #4
 800b0d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b0d4:	4a0c      	ldr	r2, [pc, #48]	; (800b108 <pxPortInitialiseStack+0x64>)
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	3b14      	subs	r3, #20
 800b0de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b0e0:	687a      	ldr	r2, [r7, #4]
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	3b04      	subs	r3, #4
 800b0ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	f06f 0202 	mvn.w	r2, #2
 800b0f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	3b20      	subs	r3, #32
 800b0f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	3714      	adds	r7, #20
 800b100:	46bd      	mov	sp, r7
 800b102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b106:	4770      	bx	lr
 800b108:	0800b10d 	.word	0x0800b10d

0800b10c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b10c:	b480      	push	{r7}
 800b10e:	b085      	sub	sp, #20
 800b110:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b112:	2300      	movs	r3, #0
 800b114:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b116:	4b12      	ldr	r3, [pc, #72]	; (800b160 <prvTaskExitError+0x54>)
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b11e:	d00a      	beq.n	800b136 <prvTaskExitError+0x2a>
	__asm volatile
 800b120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b124:	f383 8811 	msr	BASEPRI, r3
 800b128:	f3bf 8f6f 	isb	sy
 800b12c:	f3bf 8f4f 	dsb	sy
 800b130:	60fb      	str	r3, [r7, #12]
}
 800b132:	bf00      	nop
 800b134:	e7fe      	b.n	800b134 <prvTaskExitError+0x28>
	__asm volatile
 800b136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b13a:	f383 8811 	msr	BASEPRI, r3
 800b13e:	f3bf 8f6f 	isb	sy
 800b142:	f3bf 8f4f 	dsb	sy
 800b146:	60bb      	str	r3, [r7, #8]
}
 800b148:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b14a:	bf00      	nop
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d0fc      	beq.n	800b14c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b152:	bf00      	nop
 800b154:	bf00      	nop
 800b156:	3714      	adds	r7, #20
 800b158:	46bd      	mov	sp, r7
 800b15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15e:	4770      	bx	lr
 800b160:	24000014 	.word	0x24000014
	...

0800b170 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b170:	4b07      	ldr	r3, [pc, #28]	; (800b190 <pxCurrentTCBConst2>)
 800b172:	6819      	ldr	r1, [r3, #0]
 800b174:	6808      	ldr	r0, [r1, #0]
 800b176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b17a:	f380 8809 	msr	PSP, r0
 800b17e:	f3bf 8f6f 	isb	sy
 800b182:	f04f 0000 	mov.w	r0, #0
 800b186:	f380 8811 	msr	BASEPRI, r0
 800b18a:	4770      	bx	lr
 800b18c:	f3af 8000 	nop.w

0800b190 <pxCurrentTCBConst2>:
 800b190:	2400a430 	.word	0x2400a430
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b194:	bf00      	nop
 800b196:	bf00      	nop

0800b198 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b198:	4808      	ldr	r0, [pc, #32]	; (800b1bc <prvPortStartFirstTask+0x24>)
 800b19a:	6800      	ldr	r0, [r0, #0]
 800b19c:	6800      	ldr	r0, [r0, #0]
 800b19e:	f380 8808 	msr	MSP, r0
 800b1a2:	f04f 0000 	mov.w	r0, #0
 800b1a6:	f380 8814 	msr	CONTROL, r0
 800b1aa:	b662      	cpsie	i
 800b1ac:	b661      	cpsie	f
 800b1ae:	f3bf 8f4f 	dsb	sy
 800b1b2:	f3bf 8f6f 	isb	sy
 800b1b6:	df00      	svc	0
 800b1b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b1ba:	bf00      	nop
 800b1bc:	e000ed08 	.word	0xe000ed08

0800b1c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b086      	sub	sp, #24
 800b1c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b1c6:	4b46      	ldr	r3, [pc, #280]	; (800b2e0 <xPortStartScheduler+0x120>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	4a46      	ldr	r2, [pc, #280]	; (800b2e4 <xPortStartScheduler+0x124>)
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d10a      	bne.n	800b1e6 <xPortStartScheduler+0x26>
	__asm volatile
 800b1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d4:	f383 8811 	msr	BASEPRI, r3
 800b1d8:	f3bf 8f6f 	isb	sy
 800b1dc:	f3bf 8f4f 	dsb	sy
 800b1e0:	613b      	str	r3, [r7, #16]
}
 800b1e2:	bf00      	nop
 800b1e4:	e7fe      	b.n	800b1e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b1e6:	4b3e      	ldr	r3, [pc, #248]	; (800b2e0 <xPortStartScheduler+0x120>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	4a3f      	ldr	r2, [pc, #252]	; (800b2e8 <xPortStartScheduler+0x128>)
 800b1ec:	4293      	cmp	r3, r2
 800b1ee:	d10a      	bne.n	800b206 <xPortStartScheduler+0x46>
	__asm volatile
 800b1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f4:	f383 8811 	msr	BASEPRI, r3
 800b1f8:	f3bf 8f6f 	isb	sy
 800b1fc:	f3bf 8f4f 	dsb	sy
 800b200:	60fb      	str	r3, [r7, #12]
}
 800b202:	bf00      	nop
 800b204:	e7fe      	b.n	800b204 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b206:	4b39      	ldr	r3, [pc, #228]	; (800b2ec <xPortStartScheduler+0x12c>)
 800b208:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	781b      	ldrb	r3, [r3, #0]
 800b20e:	b2db      	uxtb	r3, r3
 800b210:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b212:	697b      	ldr	r3, [r7, #20]
 800b214:	22ff      	movs	r2, #255	; 0xff
 800b216:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	781b      	ldrb	r3, [r3, #0]
 800b21c:	b2db      	uxtb	r3, r3
 800b21e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b220:	78fb      	ldrb	r3, [r7, #3]
 800b222:	b2db      	uxtb	r3, r3
 800b224:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b228:	b2da      	uxtb	r2, r3
 800b22a:	4b31      	ldr	r3, [pc, #196]	; (800b2f0 <xPortStartScheduler+0x130>)
 800b22c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b22e:	4b31      	ldr	r3, [pc, #196]	; (800b2f4 <xPortStartScheduler+0x134>)
 800b230:	2207      	movs	r2, #7
 800b232:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b234:	e009      	b.n	800b24a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b236:	4b2f      	ldr	r3, [pc, #188]	; (800b2f4 <xPortStartScheduler+0x134>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	3b01      	subs	r3, #1
 800b23c:	4a2d      	ldr	r2, [pc, #180]	; (800b2f4 <xPortStartScheduler+0x134>)
 800b23e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b240:	78fb      	ldrb	r3, [r7, #3]
 800b242:	b2db      	uxtb	r3, r3
 800b244:	005b      	lsls	r3, r3, #1
 800b246:	b2db      	uxtb	r3, r3
 800b248:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b24a:	78fb      	ldrb	r3, [r7, #3]
 800b24c:	b2db      	uxtb	r3, r3
 800b24e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b252:	2b80      	cmp	r3, #128	; 0x80
 800b254:	d0ef      	beq.n	800b236 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b256:	4b27      	ldr	r3, [pc, #156]	; (800b2f4 <xPortStartScheduler+0x134>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f1c3 0307 	rsb	r3, r3, #7
 800b25e:	2b04      	cmp	r3, #4
 800b260:	d00a      	beq.n	800b278 <xPortStartScheduler+0xb8>
	__asm volatile
 800b262:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b266:	f383 8811 	msr	BASEPRI, r3
 800b26a:	f3bf 8f6f 	isb	sy
 800b26e:	f3bf 8f4f 	dsb	sy
 800b272:	60bb      	str	r3, [r7, #8]
}
 800b274:	bf00      	nop
 800b276:	e7fe      	b.n	800b276 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b278:	4b1e      	ldr	r3, [pc, #120]	; (800b2f4 <xPortStartScheduler+0x134>)
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	021b      	lsls	r3, r3, #8
 800b27e:	4a1d      	ldr	r2, [pc, #116]	; (800b2f4 <xPortStartScheduler+0x134>)
 800b280:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b282:	4b1c      	ldr	r3, [pc, #112]	; (800b2f4 <xPortStartScheduler+0x134>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b28a:	4a1a      	ldr	r2, [pc, #104]	; (800b2f4 <xPortStartScheduler+0x134>)
 800b28c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	b2da      	uxtb	r2, r3
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b296:	4b18      	ldr	r3, [pc, #96]	; (800b2f8 <xPortStartScheduler+0x138>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	4a17      	ldr	r2, [pc, #92]	; (800b2f8 <xPortStartScheduler+0x138>)
 800b29c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b2a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b2a2:	4b15      	ldr	r3, [pc, #84]	; (800b2f8 <xPortStartScheduler+0x138>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	4a14      	ldr	r2, [pc, #80]	; (800b2f8 <xPortStartScheduler+0x138>)
 800b2a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b2ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b2ae:	f000 f8dd 	bl	800b46c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b2b2:	4b12      	ldr	r3, [pc, #72]	; (800b2fc <xPortStartScheduler+0x13c>)
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b2b8:	f000 f8fc 	bl	800b4b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b2bc:	4b10      	ldr	r3, [pc, #64]	; (800b300 <xPortStartScheduler+0x140>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	4a0f      	ldr	r2, [pc, #60]	; (800b300 <xPortStartScheduler+0x140>)
 800b2c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b2c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b2c8:	f7ff ff66 	bl	800b198 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b2cc:	f001 fd1c 	bl	800cd08 <vTaskSwitchContext>
	prvTaskExitError();
 800b2d0:	f7ff ff1c 	bl	800b10c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b2d4:	2300      	movs	r3, #0
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	3718      	adds	r7, #24
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}
 800b2de:	bf00      	nop
 800b2e0:	e000ed00 	.word	0xe000ed00
 800b2e4:	410fc271 	.word	0x410fc271
 800b2e8:	410fc270 	.word	0x410fc270
 800b2ec:	e000e400 	.word	0xe000e400
 800b2f0:	2400a428 	.word	0x2400a428
 800b2f4:	2400a42c 	.word	0x2400a42c
 800b2f8:	e000ed20 	.word	0xe000ed20
 800b2fc:	24000014 	.word	0x24000014
 800b300:	e000ef34 	.word	0xe000ef34

0800b304 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b304:	b480      	push	{r7}
 800b306:	b083      	sub	sp, #12
 800b308:	af00      	add	r7, sp, #0
	__asm volatile
 800b30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b30e:	f383 8811 	msr	BASEPRI, r3
 800b312:	f3bf 8f6f 	isb	sy
 800b316:	f3bf 8f4f 	dsb	sy
 800b31a:	607b      	str	r3, [r7, #4]
}
 800b31c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b31e:	4b0f      	ldr	r3, [pc, #60]	; (800b35c <vPortEnterCritical+0x58>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	3301      	adds	r3, #1
 800b324:	4a0d      	ldr	r2, [pc, #52]	; (800b35c <vPortEnterCritical+0x58>)
 800b326:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b328:	4b0c      	ldr	r3, [pc, #48]	; (800b35c <vPortEnterCritical+0x58>)
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	2b01      	cmp	r3, #1
 800b32e:	d10f      	bne.n	800b350 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b330:	4b0b      	ldr	r3, [pc, #44]	; (800b360 <vPortEnterCritical+0x5c>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	b2db      	uxtb	r3, r3
 800b336:	2b00      	cmp	r3, #0
 800b338:	d00a      	beq.n	800b350 <vPortEnterCritical+0x4c>
	__asm volatile
 800b33a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b33e:	f383 8811 	msr	BASEPRI, r3
 800b342:	f3bf 8f6f 	isb	sy
 800b346:	f3bf 8f4f 	dsb	sy
 800b34a:	603b      	str	r3, [r7, #0]
}
 800b34c:	bf00      	nop
 800b34e:	e7fe      	b.n	800b34e <vPortEnterCritical+0x4a>
	}
}
 800b350:	bf00      	nop
 800b352:	370c      	adds	r7, #12
 800b354:	46bd      	mov	sp, r7
 800b356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35a:	4770      	bx	lr
 800b35c:	24000014 	.word	0x24000014
 800b360:	e000ed04 	.word	0xe000ed04

0800b364 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b364:	b480      	push	{r7}
 800b366:	b083      	sub	sp, #12
 800b368:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b36a:	4b12      	ldr	r3, [pc, #72]	; (800b3b4 <vPortExitCritical+0x50>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d10a      	bne.n	800b388 <vPortExitCritical+0x24>
	__asm volatile
 800b372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b376:	f383 8811 	msr	BASEPRI, r3
 800b37a:	f3bf 8f6f 	isb	sy
 800b37e:	f3bf 8f4f 	dsb	sy
 800b382:	607b      	str	r3, [r7, #4]
}
 800b384:	bf00      	nop
 800b386:	e7fe      	b.n	800b386 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b388:	4b0a      	ldr	r3, [pc, #40]	; (800b3b4 <vPortExitCritical+0x50>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	3b01      	subs	r3, #1
 800b38e:	4a09      	ldr	r2, [pc, #36]	; (800b3b4 <vPortExitCritical+0x50>)
 800b390:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b392:	4b08      	ldr	r3, [pc, #32]	; (800b3b4 <vPortExitCritical+0x50>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d105      	bne.n	800b3a6 <vPortExitCritical+0x42>
 800b39a:	2300      	movs	r3, #0
 800b39c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b3a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b3a6:	bf00      	nop
 800b3a8:	370c      	adds	r7, #12
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b0:	4770      	bx	lr
 800b3b2:	bf00      	nop
 800b3b4:	24000014 	.word	0x24000014
	...

0800b3c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b3c0:	f3ef 8009 	mrs	r0, PSP
 800b3c4:	f3bf 8f6f 	isb	sy
 800b3c8:	4b15      	ldr	r3, [pc, #84]	; (800b420 <pxCurrentTCBConst>)
 800b3ca:	681a      	ldr	r2, [r3, #0]
 800b3cc:	f01e 0f10 	tst.w	lr, #16
 800b3d0:	bf08      	it	eq
 800b3d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b3d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3da:	6010      	str	r0, [r2, #0]
 800b3dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b3e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b3e4:	f380 8811 	msr	BASEPRI, r0
 800b3e8:	f3bf 8f4f 	dsb	sy
 800b3ec:	f3bf 8f6f 	isb	sy
 800b3f0:	f001 fc8a 	bl	800cd08 <vTaskSwitchContext>
 800b3f4:	f04f 0000 	mov.w	r0, #0
 800b3f8:	f380 8811 	msr	BASEPRI, r0
 800b3fc:	bc09      	pop	{r0, r3}
 800b3fe:	6819      	ldr	r1, [r3, #0]
 800b400:	6808      	ldr	r0, [r1, #0]
 800b402:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b406:	f01e 0f10 	tst.w	lr, #16
 800b40a:	bf08      	it	eq
 800b40c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b410:	f380 8809 	msr	PSP, r0
 800b414:	f3bf 8f6f 	isb	sy
 800b418:	4770      	bx	lr
 800b41a:	bf00      	nop
 800b41c:	f3af 8000 	nop.w

0800b420 <pxCurrentTCBConst>:
 800b420:	2400a430 	.word	0x2400a430
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b424:	bf00      	nop
 800b426:	bf00      	nop

0800b428 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b082      	sub	sp, #8
 800b42c:	af00      	add	r7, sp, #0
	__asm volatile
 800b42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b432:	f383 8811 	msr	BASEPRI, r3
 800b436:	f3bf 8f6f 	isb	sy
 800b43a:	f3bf 8f4f 	dsb	sy
 800b43e:	607b      	str	r3, [r7, #4]
}
 800b440:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b442:	f001 fba7 	bl	800cb94 <xTaskIncrementTick>
 800b446:	4603      	mov	r3, r0
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d003      	beq.n	800b454 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b44c:	4b06      	ldr	r3, [pc, #24]	; (800b468 <xPortSysTickHandler+0x40>)
 800b44e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b452:	601a      	str	r2, [r3, #0]
 800b454:	2300      	movs	r3, #0
 800b456:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	f383 8811 	msr	BASEPRI, r3
}
 800b45e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b460:	bf00      	nop
 800b462:	3708      	adds	r7, #8
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}
 800b468:	e000ed04 	.word	0xe000ed04

0800b46c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b46c:	b480      	push	{r7}
 800b46e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b470:	4b0b      	ldr	r3, [pc, #44]	; (800b4a0 <vPortSetupTimerInterrupt+0x34>)
 800b472:	2200      	movs	r2, #0
 800b474:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b476:	4b0b      	ldr	r3, [pc, #44]	; (800b4a4 <vPortSetupTimerInterrupt+0x38>)
 800b478:	2200      	movs	r2, #0
 800b47a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b47c:	4b0a      	ldr	r3, [pc, #40]	; (800b4a8 <vPortSetupTimerInterrupt+0x3c>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	4a0a      	ldr	r2, [pc, #40]	; (800b4ac <vPortSetupTimerInterrupt+0x40>)
 800b482:	fba2 2303 	umull	r2, r3, r2, r3
 800b486:	099b      	lsrs	r3, r3, #6
 800b488:	4a09      	ldr	r2, [pc, #36]	; (800b4b0 <vPortSetupTimerInterrupt+0x44>)
 800b48a:	3b01      	subs	r3, #1
 800b48c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b48e:	4b04      	ldr	r3, [pc, #16]	; (800b4a0 <vPortSetupTimerInterrupt+0x34>)
 800b490:	2207      	movs	r2, #7
 800b492:	601a      	str	r2, [r3, #0]
}
 800b494:	bf00      	nop
 800b496:	46bd      	mov	sp, r7
 800b498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49c:	4770      	bx	lr
 800b49e:	bf00      	nop
 800b4a0:	e000e010 	.word	0xe000e010
 800b4a4:	e000e018 	.word	0xe000e018
 800b4a8:	24000018 	.word	0x24000018
 800b4ac:	10624dd3 	.word	0x10624dd3
 800b4b0:	e000e014 	.word	0xe000e014

0800b4b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b4b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b4c4 <vPortEnableVFP+0x10>
 800b4b8:	6801      	ldr	r1, [r0, #0]
 800b4ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b4be:	6001      	str	r1, [r0, #0]
 800b4c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b4c2:	bf00      	nop
 800b4c4:	e000ed88 	.word	0xe000ed88

0800b4c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b085      	sub	sp, #20
 800b4cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b4ce:	f3ef 8305 	mrs	r3, IPSR
 800b4d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	2b0f      	cmp	r3, #15
 800b4d8:	d914      	bls.n	800b504 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b4da:	4a17      	ldr	r2, [pc, #92]	; (800b538 <vPortValidateInterruptPriority+0x70>)
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	4413      	add	r3, r2
 800b4e0:	781b      	ldrb	r3, [r3, #0]
 800b4e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b4e4:	4b15      	ldr	r3, [pc, #84]	; (800b53c <vPortValidateInterruptPriority+0x74>)
 800b4e6:	781b      	ldrb	r3, [r3, #0]
 800b4e8:	7afa      	ldrb	r2, [r7, #11]
 800b4ea:	429a      	cmp	r2, r3
 800b4ec:	d20a      	bcs.n	800b504 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4f2:	f383 8811 	msr	BASEPRI, r3
 800b4f6:	f3bf 8f6f 	isb	sy
 800b4fa:	f3bf 8f4f 	dsb	sy
 800b4fe:	607b      	str	r3, [r7, #4]
}
 800b500:	bf00      	nop
 800b502:	e7fe      	b.n	800b502 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b504:	4b0e      	ldr	r3, [pc, #56]	; (800b540 <vPortValidateInterruptPriority+0x78>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b50c:	4b0d      	ldr	r3, [pc, #52]	; (800b544 <vPortValidateInterruptPriority+0x7c>)
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	429a      	cmp	r2, r3
 800b512:	d90a      	bls.n	800b52a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b518:	f383 8811 	msr	BASEPRI, r3
 800b51c:	f3bf 8f6f 	isb	sy
 800b520:	f3bf 8f4f 	dsb	sy
 800b524:	603b      	str	r3, [r7, #0]
}
 800b526:	bf00      	nop
 800b528:	e7fe      	b.n	800b528 <vPortValidateInterruptPriority+0x60>
	}
 800b52a:	bf00      	nop
 800b52c:	3714      	adds	r7, #20
 800b52e:	46bd      	mov	sp, r7
 800b530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b534:	4770      	bx	lr
 800b536:	bf00      	nop
 800b538:	e000e3f0 	.word	0xe000e3f0
 800b53c:	2400a428 	.word	0x2400a428
 800b540:	e000ed0c 	.word	0xe000ed0c
 800b544:	2400a42c 	.word	0x2400a42c

0800b548 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b084      	sub	sp, #16
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
 800b550:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d10a      	bne.n	800b572 <xQueueGenericReset+0x2a>
	__asm volatile
 800b55c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b560:	f383 8811 	msr	BASEPRI, r3
 800b564:	f3bf 8f6f 	isb	sy
 800b568:	f3bf 8f4f 	dsb	sy
 800b56c:	60bb      	str	r3, [r7, #8]
}
 800b56e:	bf00      	nop
 800b570:	e7fe      	b.n	800b570 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b572:	f7ff fec7 	bl	800b304 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	681a      	ldr	r2, [r3, #0]
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b57e:	68f9      	ldr	r1, [r7, #12]
 800b580:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b582:	fb01 f303 	mul.w	r3, r1, r3
 800b586:	441a      	add	r2, r3
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	2200      	movs	r2, #0
 800b590:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	681a      	ldr	r2, [r3, #0]
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	681a      	ldr	r2, [r3, #0]
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5a2:	3b01      	subs	r3, #1
 800b5a4:	68f9      	ldr	r1, [r7, #12]
 800b5a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b5a8:	fb01 f303 	mul.w	r3, r1, r3
 800b5ac:	441a      	add	r2, r3
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	22ff      	movs	r2, #255	; 0xff
 800b5b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	22ff      	movs	r2, #255	; 0xff
 800b5be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d114      	bne.n	800b5f2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	691b      	ldr	r3, [r3, #16]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d01a      	beq.n	800b606 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	3310      	adds	r3, #16
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f001 fc4b 	bl	800ce70 <xTaskRemoveFromEventList>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d012      	beq.n	800b606 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b5e0:	4b0c      	ldr	r3, [pc, #48]	; (800b614 <xQueueGenericReset+0xcc>)
 800b5e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5e6:	601a      	str	r2, [r3, #0]
 800b5e8:	f3bf 8f4f 	dsb	sy
 800b5ec:	f3bf 8f6f 	isb	sy
 800b5f0:	e009      	b.n	800b606 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	3310      	adds	r3, #16
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f7ff fca0 	bl	800af3c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	3324      	adds	r3, #36	; 0x24
 800b600:	4618      	mov	r0, r3
 800b602:	f7ff fc9b 	bl	800af3c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b606:	f7ff fead 	bl	800b364 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b60a:	2301      	movs	r3, #1
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	3710      	adds	r7, #16
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}
 800b614:	e000ed04 	.word	0xe000ed04

0800b618 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b08e      	sub	sp, #56	; 0x38
 800b61c:	af02      	add	r7, sp, #8
 800b61e:	60f8      	str	r0, [r7, #12]
 800b620:	60b9      	str	r1, [r7, #8]
 800b622:	607a      	str	r2, [r7, #4]
 800b624:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d10a      	bne.n	800b642 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b630:	f383 8811 	msr	BASEPRI, r3
 800b634:	f3bf 8f6f 	isb	sy
 800b638:	f3bf 8f4f 	dsb	sy
 800b63c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b63e:	bf00      	nop
 800b640:	e7fe      	b.n	800b640 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d10a      	bne.n	800b65e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b64c:	f383 8811 	msr	BASEPRI, r3
 800b650:	f3bf 8f6f 	isb	sy
 800b654:	f3bf 8f4f 	dsb	sy
 800b658:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b65a:	bf00      	nop
 800b65c:	e7fe      	b.n	800b65c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d002      	beq.n	800b66a <xQueueGenericCreateStatic+0x52>
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d001      	beq.n	800b66e <xQueueGenericCreateStatic+0x56>
 800b66a:	2301      	movs	r3, #1
 800b66c:	e000      	b.n	800b670 <xQueueGenericCreateStatic+0x58>
 800b66e:	2300      	movs	r3, #0
 800b670:	2b00      	cmp	r3, #0
 800b672:	d10a      	bne.n	800b68a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b674:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b678:	f383 8811 	msr	BASEPRI, r3
 800b67c:	f3bf 8f6f 	isb	sy
 800b680:	f3bf 8f4f 	dsb	sy
 800b684:	623b      	str	r3, [r7, #32]
}
 800b686:	bf00      	nop
 800b688:	e7fe      	b.n	800b688 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d102      	bne.n	800b696 <xQueueGenericCreateStatic+0x7e>
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d101      	bne.n	800b69a <xQueueGenericCreateStatic+0x82>
 800b696:	2301      	movs	r3, #1
 800b698:	e000      	b.n	800b69c <xQueueGenericCreateStatic+0x84>
 800b69a:	2300      	movs	r3, #0
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d10a      	bne.n	800b6b6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a4:	f383 8811 	msr	BASEPRI, r3
 800b6a8:	f3bf 8f6f 	isb	sy
 800b6ac:	f3bf 8f4f 	dsb	sy
 800b6b0:	61fb      	str	r3, [r7, #28]
}
 800b6b2:	bf00      	nop
 800b6b4:	e7fe      	b.n	800b6b4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b6b6:	2350      	movs	r3, #80	; 0x50
 800b6b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b6ba:	697b      	ldr	r3, [r7, #20]
 800b6bc:	2b50      	cmp	r3, #80	; 0x50
 800b6be:	d00a      	beq.n	800b6d6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b6c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6c4:	f383 8811 	msr	BASEPRI, r3
 800b6c8:	f3bf 8f6f 	isb	sy
 800b6cc:	f3bf 8f4f 	dsb	sy
 800b6d0:	61bb      	str	r3, [r7, #24]
}
 800b6d2:	bf00      	nop
 800b6d4:	e7fe      	b.n	800b6d4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b6d6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b6dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d00d      	beq.n	800b6fe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b6e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6e4:	2201      	movs	r2, #1
 800b6e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b6ea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6f0:	9300      	str	r3, [sp, #0]
 800b6f2:	4613      	mov	r3, r2
 800b6f4:	687a      	ldr	r2, [r7, #4]
 800b6f6:	68b9      	ldr	r1, [r7, #8]
 800b6f8:	68f8      	ldr	r0, [r7, #12]
 800b6fa:	f000 f83f 	bl	800b77c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b700:	4618      	mov	r0, r3
 800b702:	3730      	adds	r7, #48	; 0x30
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}

0800b708 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b08a      	sub	sp, #40	; 0x28
 800b70c:	af02      	add	r7, sp, #8
 800b70e:	60f8      	str	r0, [r7, #12]
 800b710:	60b9      	str	r1, [r7, #8]
 800b712:	4613      	mov	r3, r2
 800b714:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d10a      	bne.n	800b732 <xQueueGenericCreate+0x2a>
	__asm volatile
 800b71c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b720:	f383 8811 	msr	BASEPRI, r3
 800b724:	f3bf 8f6f 	isb	sy
 800b728:	f3bf 8f4f 	dsb	sy
 800b72c:	613b      	str	r3, [r7, #16]
}
 800b72e:	bf00      	nop
 800b730:	e7fe      	b.n	800b730 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	68ba      	ldr	r2, [r7, #8]
 800b736:	fb02 f303 	mul.w	r3, r2, r3
 800b73a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b73c:	69fb      	ldr	r3, [r7, #28]
 800b73e:	3350      	adds	r3, #80	; 0x50
 800b740:	4618      	mov	r0, r3
 800b742:	f7ff fa11 	bl	800ab68 <pvPortMalloc>
 800b746:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b748:	69bb      	ldr	r3, [r7, #24]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d011      	beq.n	800b772 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b74e:	69bb      	ldr	r3, [r7, #24]
 800b750:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b752:	697b      	ldr	r3, [r7, #20]
 800b754:	3350      	adds	r3, #80	; 0x50
 800b756:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b758:	69bb      	ldr	r3, [r7, #24]
 800b75a:	2200      	movs	r2, #0
 800b75c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b760:	79fa      	ldrb	r2, [r7, #7]
 800b762:	69bb      	ldr	r3, [r7, #24]
 800b764:	9300      	str	r3, [sp, #0]
 800b766:	4613      	mov	r3, r2
 800b768:	697a      	ldr	r2, [r7, #20]
 800b76a:	68b9      	ldr	r1, [r7, #8]
 800b76c:	68f8      	ldr	r0, [r7, #12]
 800b76e:	f000 f805 	bl	800b77c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b772:	69bb      	ldr	r3, [r7, #24]
	}
 800b774:	4618      	mov	r0, r3
 800b776:	3720      	adds	r7, #32
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}

0800b77c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b084      	sub	sp, #16
 800b780:	af00      	add	r7, sp, #0
 800b782:	60f8      	str	r0, [r7, #12]
 800b784:	60b9      	str	r1, [r7, #8]
 800b786:	607a      	str	r2, [r7, #4]
 800b788:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b78a:	68bb      	ldr	r3, [r7, #8]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d103      	bne.n	800b798 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b790:	69bb      	ldr	r3, [r7, #24]
 800b792:	69ba      	ldr	r2, [r7, #24]
 800b794:	601a      	str	r2, [r3, #0]
 800b796:	e002      	b.n	800b79e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b798:	69bb      	ldr	r3, [r7, #24]
 800b79a:	687a      	ldr	r2, [r7, #4]
 800b79c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b79e:	69bb      	ldr	r3, [r7, #24]
 800b7a0:	68fa      	ldr	r2, [r7, #12]
 800b7a2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b7a4:	69bb      	ldr	r3, [r7, #24]
 800b7a6:	68ba      	ldr	r2, [r7, #8]
 800b7a8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b7aa:	2101      	movs	r1, #1
 800b7ac:	69b8      	ldr	r0, [r7, #24]
 800b7ae:	f7ff fecb 	bl	800b548 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b7b2:	69bb      	ldr	r3, [r7, #24]
 800b7b4:	78fa      	ldrb	r2, [r7, #3]
 800b7b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b7ba:	bf00      	nop
 800b7bc:	3710      	adds	r7, #16
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}

0800b7c2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800b7c2:	b580      	push	{r7, lr}
 800b7c4:	b08a      	sub	sp, #40	; 0x28
 800b7c6:	af02      	add	r7, sp, #8
 800b7c8:	60f8      	str	r0, [r7, #12]
 800b7ca:	60b9      	str	r1, [r7, #8]
 800b7cc:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d10a      	bne.n	800b7ea <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800b7d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7d8:	f383 8811 	msr	BASEPRI, r3
 800b7dc:	f3bf 8f6f 	isb	sy
 800b7e0:	f3bf 8f4f 	dsb	sy
 800b7e4:	61bb      	str	r3, [r7, #24]
}
 800b7e6:	bf00      	nop
 800b7e8:	e7fe      	b.n	800b7e8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b7ea:	68ba      	ldr	r2, [r7, #8]
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	429a      	cmp	r2, r3
 800b7f0:	d90a      	bls.n	800b808 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800b7f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f6:	f383 8811 	msr	BASEPRI, r3
 800b7fa:	f3bf 8f6f 	isb	sy
 800b7fe:	f3bf 8f4f 	dsb	sy
 800b802:	617b      	str	r3, [r7, #20]
}
 800b804:	bf00      	nop
 800b806:	e7fe      	b.n	800b806 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b808:	2302      	movs	r3, #2
 800b80a:	9300      	str	r3, [sp, #0]
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2200      	movs	r2, #0
 800b810:	2100      	movs	r1, #0
 800b812:	68f8      	ldr	r0, [r7, #12]
 800b814:	f7ff ff00 	bl	800b618 <xQueueGenericCreateStatic>
 800b818:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800b81a:	69fb      	ldr	r3, [r7, #28]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d002      	beq.n	800b826 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b820:	69fb      	ldr	r3, [r7, #28]
 800b822:	68ba      	ldr	r2, [r7, #8]
 800b824:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b826:	69fb      	ldr	r3, [r7, #28]
	}
 800b828:	4618      	mov	r0, r3
 800b82a:	3720      	adds	r7, #32
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd80      	pop	{r7, pc}

0800b830 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800b830:	b580      	push	{r7, lr}
 800b832:	b086      	sub	sp, #24
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
 800b838:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d10a      	bne.n	800b856 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800b840:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b844:	f383 8811 	msr	BASEPRI, r3
 800b848:	f3bf 8f6f 	isb	sy
 800b84c:	f3bf 8f4f 	dsb	sy
 800b850:	613b      	str	r3, [r7, #16]
}
 800b852:	bf00      	nop
 800b854:	e7fe      	b.n	800b854 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b856:	683a      	ldr	r2, [r7, #0]
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	429a      	cmp	r2, r3
 800b85c:	d90a      	bls.n	800b874 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800b85e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b862:	f383 8811 	msr	BASEPRI, r3
 800b866:	f3bf 8f6f 	isb	sy
 800b86a:	f3bf 8f4f 	dsb	sy
 800b86e:	60fb      	str	r3, [r7, #12]
}
 800b870:	bf00      	nop
 800b872:	e7fe      	b.n	800b872 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b874:	2202      	movs	r2, #2
 800b876:	2100      	movs	r1, #0
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	f7ff ff45 	bl	800b708 <xQueueGenericCreate>
 800b87e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800b880:	697b      	ldr	r3, [r7, #20]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d002      	beq.n	800b88c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	683a      	ldr	r2, [r7, #0]
 800b88a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b88c:	697b      	ldr	r3, [r7, #20]
	}
 800b88e:	4618      	mov	r0, r3
 800b890:	3718      	adds	r7, #24
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}
	...

0800b898 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b08e      	sub	sp, #56	; 0x38
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	60f8      	str	r0, [r7, #12]
 800b8a0:	60b9      	str	r1, [r7, #8]
 800b8a2:	607a      	str	r2, [r7, #4]
 800b8a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b8ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d10a      	bne.n	800b8ca <xQueueGenericSend+0x32>
	__asm volatile
 800b8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b8:	f383 8811 	msr	BASEPRI, r3
 800b8bc:	f3bf 8f6f 	isb	sy
 800b8c0:	f3bf 8f4f 	dsb	sy
 800b8c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b8c6:	bf00      	nop
 800b8c8:	e7fe      	b.n	800b8c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b8ca:	68bb      	ldr	r3, [r7, #8]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d103      	bne.n	800b8d8 <xQueueGenericSend+0x40>
 800b8d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d101      	bne.n	800b8dc <xQueueGenericSend+0x44>
 800b8d8:	2301      	movs	r3, #1
 800b8da:	e000      	b.n	800b8de <xQueueGenericSend+0x46>
 800b8dc:	2300      	movs	r3, #0
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d10a      	bne.n	800b8f8 <xQueueGenericSend+0x60>
	__asm volatile
 800b8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e6:	f383 8811 	msr	BASEPRI, r3
 800b8ea:	f3bf 8f6f 	isb	sy
 800b8ee:	f3bf 8f4f 	dsb	sy
 800b8f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b8f4:	bf00      	nop
 800b8f6:	e7fe      	b.n	800b8f6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	2b02      	cmp	r3, #2
 800b8fc:	d103      	bne.n	800b906 <xQueueGenericSend+0x6e>
 800b8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b902:	2b01      	cmp	r3, #1
 800b904:	d101      	bne.n	800b90a <xQueueGenericSend+0x72>
 800b906:	2301      	movs	r3, #1
 800b908:	e000      	b.n	800b90c <xQueueGenericSend+0x74>
 800b90a:	2300      	movs	r3, #0
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d10a      	bne.n	800b926 <xQueueGenericSend+0x8e>
	__asm volatile
 800b910:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b914:	f383 8811 	msr	BASEPRI, r3
 800b918:	f3bf 8f6f 	isb	sy
 800b91c:	f3bf 8f4f 	dsb	sy
 800b920:	623b      	str	r3, [r7, #32]
}
 800b922:	bf00      	nop
 800b924:	e7fe      	b.n	800b924 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b926:	f001 fc65 	bl	800d1f4 <xTaskGetSchedulerState>
 800b92a:	4603      	mov	r3, r0
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d102      	bne.n	800b936 <xQueueGenericSend+0x9e>
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d101      	bne.n	800b93a <xQueueGenericSend+0xa2>
 800b936:	2301      	movs	r3, #1
 800b938:	e000      	b.n	800b93c <xQueueGenericSend+0xa4>
 800b93a:	2300      	movs	r3, #0
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d10a      	bne.n	800b956 <xQueueGenericSend+0xbe>
	__asm volatile
 800b940:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b944:	f383 8811 	msr	BASEPRI, r3
 800b948:	f3bf 8f6f 	isb	sy
 800b94c:	f3bf 8f4f 	dsb	sy
 800b950:	61fb      	str	r3, [r7, #28]
}
 800b952:	bf00      	nop
 800b954:	e7fe      	b.n	800b954 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b956:	f7ff fcd5 	bl	800b304 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b95c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b962:	429a      	cmp	r2, r3
 800b964:	d302      	bcc.n	800b96c <xQueueGenericSend+0xd4>
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	2b02      	cmp	r3, #2
 800b96a:	d129      	bne.n	800b9c0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b96c:	683a      	ldr	r2, [r7, #0]
 800b96e:	68b9      	ldr	r1, [r7, #8]
 800b970:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b972:	f000 fc5e 	bl	800c232 <prvCopyDataToQueue>
 800b976:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b97a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d010      	beq.n	800b9a2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b982:	3324      	adds	r3, #36	; 0x24
 800b984:	4618      	mov	r0, r3
 800b986:	f001 fa73 	bl	800ce70 <xTaskRemoveFromEventList>
 800b98a:	4603      	mov	r3, r0
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d013      	beq.n	800b9b8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b990:	4b3f      	ldr	r3, [pc, #252]	; (800ba90 <xQueueGenericSend+0x1f8>)
 800b992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b996:	601a      	str	r2, [r3, #0]
 800b998:	f3bf 8f4f 	dsb	sy
 800b99c:	f3bf 8f6f 	isb	sy
 800b9a0:	e00a      	b.n	800b9b8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b9a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d007      	beq.n	800b9b8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b9a8:	4b39      	ldr	r3, [pc, #228]	; (800ba90 <xQueueGenericSend+0x1f8>)
 800b9aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9ae:	601a      	str	r2, [r3, #0]
 800b9b0:	f3bf 8f4f 	dsb	sy
 800b9b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b9b8:	f7ff fcd4 	bl	800b364 <vPortExitCritical>
				return pdPASS;
 800b9bc:	2301      	movs	r3, #1
 800b9be:	e063      	b.n	800ba88 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d103      	bne.n	800b9ce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b9c6:	f7ff fccd 	bl	800b364 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	e05c      	b.n	800ba88 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b9ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d106      	bne.n	800b9e2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b9d4:	f107 0314 	add.w	r3, r7, #20
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f001 faad 	bl	800cf38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b9de:	2301      	movs	r3, #1
 800b9e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b9e2:	f7ff fcbf 	bl	800b364 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b9e6:	f001 f819 	bl	800ca1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b9ea:	f7ff fc8b 	bl	800b304 <vPortEnterCritical>
 800b9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b9f4:	b25b      	sxtb	r3, r3
 800b9f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9fa:	d103      	bne.n	800ba04 <xQueueGenericSend+0x16c>
 800b9fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9fe:	2200      	movs	r2, #0
 800ba00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba0a:	b25b      	sxtb	r3, r3
 800ba0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba10:	d103      	bne.n	800ba1a <xQueueGenericSend+0x182>
 800ba12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba14:	2200      	movs	r2, #0
 800ba16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba1a:	f7ff fca3 	bl	800b364 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ba1e:	1d3a      	adds	r2, r7, #4
 800ba20:	f107 0314 	add.w	r3, r7, #20
 800ba24:	4611      	mov	r1, r2
 800ba26:	4618      	mov	r0, r3
 800ba28:	f001 fa9c 	bl	800cf64 <xTaskCheckForTimeOut>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d124      	bne.n	800ba7c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ba32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba34:	f000 fcf5 	bl	800c422 <prvIsQueueFull>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d018      	beq.n	800ba70 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ba3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba40:	3310      	adds	r3, #16
 800ba42:	687a      	ldr	r2, [r7, #4]
 800ba44:	4611      	mov	r1, r2
 800ba46:	4618      	mov	r0, r3
 800ba48:	f001 f9c2 	bl	800cdd0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ba4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba4e:	f000 fc80 	bl	800c352 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ba52:	f000 fff1 	bl	800ca38 <xTaskResumeAll>
 800ba56:	4603      	mov	r3, r0
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	f47f af7c 	bne.w	800b956 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ba5e:	4b0c      	ldr	r3, [pc, #48]	; (800ba90 <xQueueGenericSend+0x1f8>)
 800ba60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba64:	601a      	str	r2, [r3, #0]
 800ba66:	f3bf 8f4f 	dsb	sy
 800ba6a:	f3bf 8f6f 	isb	sy
 800ba6e:	e772      	b.n	800b956 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ba70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba72:	f000 fc6e 	bl	800c352 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ba76:	f000 ffdf 	bl	800ca38 <xTaskResumeAll>
 800ba7a:	e76c      	b.n	800b956 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ba7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba7e:	f000 fc68 	bl	800c352 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ba82:	f000 ffd9 	bl	800ca38 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ba86:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	3738      	adds	r7, #56	; 0x38
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}
 800ba90:	e000ed04 	.word	0xe000ed04

0800ba94 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b090      	sub	sp, #64	; 0x40
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	60f8      	str	r0, [r7, #12]
 800ba9c:	60b9      	str	r1, [r7, #8]
 800ba9e:	607a      	str	r2, [r7, #4]
 800baa0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800baa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d10a      	bne.n	800bac2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800baac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab0:	f383 8811 	msr	BASEPRI, r3
 800bab4:	f3bf 8f6f 	isb	sy
 800bab8:	f3bf 8f4f 	dsb	sy
 800babc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800babe:	bf00      	nop
 800bac0:	e7fe      	b.n	800bac0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bac2:	68bb      	ldr	r3, [r7, #8]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d103      	bne.n	800bad0 <xQueueGenericSendFromISR+0x3c>
 800bac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d101      	bne.n	800bad4 <xQueueGenericSendFromISR+0x40>
 800bad0:	2301      	movs	r3, #1
 800bad2:	e000      	b.n	800bad6 <xQueueGenericSendFromISR+0x42>
 800bad4:	2300      	movs	r3, #0
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d10a      	bne.n	800baf0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800bada:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bade:	f383 8811 	msr	BASEPRI, r3
 800bae2:	f3bf 8f6f 	isb	sy
 800bae6:	f3bf 8f4f 	dsb	sy
 800baea:	627b      	str	r3, [r7, #36]	; 0x24
}
 800baec:	bf00      	nop
 800baee:	e7fe      	b.n	800baee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	2b02      	cmp	r3, #2
 800baf4:	d103      	bne.n	800bafe <xQueueGenericSendFromISR+0x6a>
 800baf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bafa:	2b01      	cmp	r3, #1
 800bafc:	d101      	bne.n	800bb02 <xQueueGenericSendFromISR+0x6e>
 800bafe:	2301      	movs	r3, #1
 800bb00:	e000      	b.n	800bb04 <xQueueGenericSendFromISR+0x70>
 800bb02:	2300      	movs	r3, #0
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d10a      	bne.n	800bb1e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800bb08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb0c:	f383 8811 	msr	BASEPRI, r3
 800bb10:	f3bf 8f6f 	isb	sy
 800bb14:	f3bf 8f4f 	dsb	sy
 800bb18:	623b      	str	r3, [r7, #32]
}
 800bb1a:	bf00      	nop
 800bb1c:	e7fe      	b.n	800bb1c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bb1e:	f7ff fcd3 	bl	800b4c8 <vPortValidateInterruptPriority>
	__asm volatile
 800bb22:	f3ef 8211 	mrs	r2, BASEPRI
 800bb26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb2a:	f383 8811 	msr	BASEPRI, r3
 800bb2e:	f3bf 8f6f 	isb	sy
 800bb32:	f3bf 8f4f 	dsb	sy
 800bb36:	61fa      	str	r2, [r7, #28]
 800bb38:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800bb3a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bb3c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bb3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb46:	429a      	cmp	r2, r3
 800bb48:	d302      	bcc.n	800bb50 <xQueueGenericSendFromISR+0xbc>
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	2b02      	cmp	r3, #2
 800bb4e:	d12f      	bne.n	800bbb0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bb50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bb5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb5e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bb60:	683a      	ldr	r2, [r7, #0]
 800bb62:	68b9      	ldr	r1, [r7, #8]
 800bb64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bb66:	f000 fb64 	bl	800c232 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bb6a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800bb6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb72:	d112      	bne.n	800bb9a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bb74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d016      	beq.n	800bbaa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bb7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb7e:	3324      	adds	r3, #36	; 0x24
 800bb80:	4618      	mov	r0, r3
 800bb82:	f001 f975 	bl	800ce70 <xTaskRemoveFromEventList>
 800bb86:	4603      	mov	r3, r0
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d00e      	beq.n	800bbaa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d00b      	beq.n	800bbaa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	2201      	movs	r2, #1
 800bb96:	601a      	str	r2, [r3, #0]
 800bb98:	e007      	b.n	800bbaa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bb9a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bb9e:	3301      	adds	r3, #1
 800bba0:	b2db      	uxtb	r3, r3
 800bba2:	b25a      	sxtb	r2, r3
 800bba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bba6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bbaa:	2301      	movs	r3, #1
 800bbac:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800bbae:	e001      	b.n	800bbb4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bbb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbb6:	617b      	str	r3, [r7, #20]
	__asm volatile
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	f383 8811 	msr	BASEPRI, r3
}
 800bbbe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bbc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	3740      	adds	r7, #64	; 0x40
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}

0800bbca <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bbca:	b580      	push	{r7, lr}
 800bbcc:	b08e      	sub	sp, #56	; 0x38
 800bbce:	af00      	add	r7, sp, #0
 800bbd0:	6078      	str	r0, [r7, #4]
 800bbd2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800bbd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d10a      	bne.n	800bbf4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800bbde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbe2:	f383 8811 	msr	BASEPRI, r3
 800bbe6:	f3bf 8f6f 	isb	sy
 800bbea:	f3bf 8f4f 	dsb	sy
 800bbee:	623b      	str	r3, [r7, #32]
}
 800bbf0:	bf00      	nop
 800bbf2:	e7fe      	b.n	800bbf2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bbf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d00a      	beq.n	800bc12 <xQueueGiveFromISR+0x48>
	__asm volatile
 800bbfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc00:	f383 8811 	msr	BASEPRI, r3
 800bc04:	f3bf 8f6f 	isb	sy
 800bc08:	f3bf 8f4f 	dsb	sy
 800bc0c:	61fb      	str	r3, [r7, #28]
}
 800bc0e:	bf00      	nop
 800bc10:	e7fe      	b.n	800bc10 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800bc12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d103      	bne.n	800bc22 <xQueueGiveFromISR+0x58>
 800bc1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc1c:	689b      	ldr	r3, [r3, #8]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d101      	bne.n	800bc26 <xQueueGiveFromISR+0x5c>
 800bc22:	2301      	movs	r3, #1
 800bc24:	e000      	b.n	800bc28 <xQueueGiveFromISR+0x5e>
 800bc26:	2300      	movs	r3, #0
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d10a      	bne.n	800bc42 <xQueueGiveFromISR+0x78>
	__asm volatile
 800bc2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc30:	f383 8811 	msr	BASEPRI, r3
 800bc34:	f3bf 8f6f 	isb	sy
 800bc38:	f3bf 8f4f 	dsb	sy
 800bc3c:	61bb      	str	r3, [r7, #24]
}
 800bc3e:	bf00      	nop
 800bc40:	e7fe      	b.n	800bc40 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bc42:	f7ff fc41 	bl	800b4c8 <vPortValidateInterruptPriority>
	__asm volatile
 800bc46:	f3ef 8211 	mrs	r2, BASEPRI
 800bc4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc4e:	f383 8811 	msr	BASEPRI, r3
 800bc52:	f3bf 8f6f 	isb	sy
 800bc56:	f3bf 8f4f 	dsb	sy
 800bc5a:	617a      	str	r2, [r7, #20]
 800bc5c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800bc5e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bc60:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bc62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc66:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800bc68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc6e:	429a      	cmp	r2, r3
 800bc70:	d22b      	bcs.n	800bcca <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bc72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bc7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc7e:	1c5a      	adds	r2, r3, #1
 800bc80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc82:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bc84:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bc88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc8c:	d112      	bne.n	800bcb4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bc8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d016      	beq.n	800bcc4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bc96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc98:	3324      	adds	r3, #36	; 0x24
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f001 f8e8 	bl	800ce70 <xTaskRemoveFromEventList>
 800bca0:	4603      	mov	r3, r0
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d00e      	beq.n	800bcc4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d00b      	beq.n	800bcc4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	2201      	movs	r2, #1
 800bcb0:	601a      	str	r2, [r3, #0]
 800bcb2:	e007      	b.n	800bcc4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bcb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bcb8:	3301      	adds	r3, #1
 800bcba:	b2db      	uxtb	r3, r3
 800bcbc:	b25a      	sxtb	r2, r3
 800bcbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	637b      	str	r3, [r7, #52]	; 0x34
 800bcc8:	e001      	b.n	800bcce <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bcca:	2300      	movs	r3, #0
 800bccc:	637b      	str	r3, [r7, #52]	; 0x34
 800bcce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcd0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	f383 8811 	msr	BASEPRI, r3
}
 800bcd8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bcda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	3738      	adds	r7, #56	; 0x38
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bd80      	pop	{r7, pc}

0800bce4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b08c      	sub	sp, #48	; 0x30
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	60f8      	str	r0, [r7, #12]
 800bcec:	60b9      	str	r1, [r7, #8]
 800bcee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bcf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d10a      	bne.n	800bd14 <xQueueReceive+0x30>
	__asm volatile
 800bcfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd02:	f383 8811 	msr	BASEPRI, r3
 800bd06:	f3bf 8f6f 	isb	sy
 800bd0a:	f3bf 8f4f 	dsb	sy
 800bd0e:	623b      	str	r3, [r7, #32]
}
 800bd10:	bf00      	nop
 800bd12:	e7fe      	b.n	800bd12 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bd14:	68bb      	ldr	r3, [r7, #8]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d103      	bne.n	800bd22 <xQueueReceive+0x3e>
 800bd1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d101      	bne.n	800bd26 <xQueueReceive+0x42>
 800bd22:	2301      	movs	r3, #1
 800bd24:	e000      	b.n	800bd28 <xQueueReceive+0x44>
 800bd26:	2300      	movs	r3, #0
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d10a      	bne.n	800bd42 <xQueueReceive+0x5e>
	__asm volatile
 800bd2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd30:	f383 8811 	msr	BASEPRI, r3
 800bd34:	f3bf 8f6f 	isb	sy
 800bd38:	f3bf 8f4f 	dsb	sy
 800bd3c:	61fb      	str	r3, [r7, #28]
}
 800bd3e:	bf00      	nop
 800bd40:	e7fe      	b.n	800bd40 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bd42:	f001 fa57 	bl	800d1f4 <xTaskGetSchedulerState>
 800bd46:	4603      	mov	r3, r0
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d102      	bne.n	800bd52 <xQueueReceive+0x6e>
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d101      	bne.n	800bd56 <xQueueReceive+0x72>
 800bd52:	2301      	movs	r3, #1
 800bd54:	e000      	b.n	800bd58 <xQueueReceive+0x74>
 800bd56:	2300      	movs	r3, #0
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d10a      	bne.n	800bd72 <xQueueReceive+0x8e>
	__asm volatile
 800bd5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd60:	f383 8811 	msr	BASEPRI, r3
 800bd64:	f3bf 8f6f 	isb	sy
 800bd68:	f3bf 8f4f 	dsb	sy
 800bd6c:	61bb      	str	r3, [r7, #24]
}
 800bd6e:	bf00      	nop
 800bd70:	e7fe      	b.n	800bd70 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bd72:	f7ff fac7 	bl	800b304 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bd76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd7a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bd7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d01f      	beq.n	800bdc2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bd82:	68b9      	ldr	r1, [r7, #8]
 800bd84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd86:	f000 fabe 	bl	800c306 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bd8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd8c:	1e5a      	subs	r2, r3, #1
 800bd8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd90:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bd92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd94:	691b      	ldr	r3, [r3, #16]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d00f      	beq.n	800bdba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bd9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd9c:	3310      	adds	r3, #16
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f001 f866 	bl	800ce70 <xTaskRemoveFromEventList>
 800bda4:	4603      	mov	r3, r0
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d007      	beq.n	800bdba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bdaa:	4b3d      	ldr	r3, [pc, #244]	; (800bea0 <xQueueReceive+0x1bc>)
 800bdac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdb0:	601a      	str	r2, [r3, #0]
 800bdb2:	f3bf 8f4f 	dsb	sy
 800bdb6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bdba:	f7ff fad3 	bl	800b364 <vPortExitCritical>
				return pdPASS;
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	e069      	b.n	800be96 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d103      	bne.n	800bdd0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bdc8:	f7ff facc 	bl	800b364 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bdcc:	2300      	movs	r3, #0
 800bdce:	e062      	b.n	800be96 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bdd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d106      	bne.n	800bde4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bdd6:	f107 0310 	add.w	r3, r7, #16
 800bdda:	4618      	mov	r0, r3
 800bddc:	f001 f8ac 	bl	800cf38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bde0:	2301      	movs	r3, #1
 800bde2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bde4:	f7ff fabe 	bl	800b364 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bde8:	f000 fe18 	bl	800ca1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bdec:	f7ff fa8a 	bl	800b304 <vPortEnterCritical>
 800bdf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdf2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bdf6:	b25b      	sxtb	r3, r3
 800bdf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdfc:	d103      	bne.n	800be06 <xQueueReceive+0x122>
 800bdfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be00:	2200      	movs	r2, #0
 800be02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be0c:	b25b      	sxtb	r3, r3
 800be0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be12:	d103      	bne.n	800be1c <xQueueReceive+0x138>
 800be14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be16:	2200      	movs	r2, #0
 800be18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be1c:	f7ff faa2 	bl	800b364 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800be20:	1d3a      	adds	r2, r7, #4
 800be22:	f107 0310 	add.w	r3, r7, #16
 800be26:	4611      	mov	r1, r2
 800be28:	4618      	mov	r0, r3
 800be2a:	f001 f89b 	bl	800cf64 <xTaskCheckForTimeOut>
 800be2e:	4603      	mov	r3, r0
 800be30:	2b00      	cmp	r3, #0
 800be32:	d123      	bne.n	800be7c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800be34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be36:	f000 fade 	bl	800c3f6 <prvIsQueueEmpty>
 800be3a:	4603      	mov	r3, r0
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d017      	beq.n	800be70 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800be40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be42:	3324      	adds	r3, #36	; 0x24
 800be44:	687a      	ldr	r2, [r7, #4]
 800be46:	4611      	mov	r1, r2
 800be48:	4618      	mov	r0, r3
 800be4a:	f000 ffc1 	bl	800cdd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800be4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be50:	f000 fa7f 	bl	800c352 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800be54:	f000 fdf0 	bl	800ca38 <xTaskResumeAll>
 800be58:	4603      	mov	r3, r0
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d189      	bne.n	800bd72 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800be5e:	4b10      	ldr	r3, [pc, #64]	; (800bea0 <xQueueReceive+0x1bc>)
 800be60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be64:	601a      	str	r2, [r3, #0]
 800be66:	f3bf 8f4f 	dsb	sy
 800be6a:	f3bf 8f6f 	isb	sy
 800be6e:	e780      	b.n	800bd72 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800be70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be72:	f000 fa6e 	bl	800c352 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800be76:	f000 fddf 	bl	800ca38 <xTaskResumeAll>
 800be7a:	e77a      	b.n	800bd72 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800be7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be7e:	f000 fa68 	bl	800c352 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800be82:	f000 fdd9 	bl	800ca38 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800be86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be88:	f000 fab5 	bl	800c3f6 <prvIsQueueEmpty>
 800be8c:	4603      	mov	r3, r0
 800be8e:	2b00      	cmp	r3, #0
 800be90:	f43f af6f 	beq.w	800bd72 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800be94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800be96:	4618      	mov	r0, r3
 800be98:	3730      	adds	r7, #48	; 0x30
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd80      	pop	{r7, pc}
 800be9e:	bf00      	nop
 800bea0:	e000ed04 	.word	0xe000ed04

0800bea4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b08e      	sub	sp, #56	; 0x38
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
 800beac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800beae:	2300      	movs	r3, #0
 800beb0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800beb6:	2300      	movs	r3, #0
 800beb8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800beba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d10a      	bne.n	800bed6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800bec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bec4:	f383 8811 	msr	BASEPRI, r3
 800bec8:	f3bf 8f6f 	isb	sy
 800becc:	f3bf 8f4f 	dsb	sy
 800bed0:	623b      	str	r3, [r7, #32]
}
 800bed2:	bf00      	nop
 800bed4:	e7fe      	b.n	800bed4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d00a      	beq.n	800bef4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800bede:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bee2:	f383 8811 	msr	BASEPRI, r3
 800bee6:	f3bf 8f6f 	isb	sy
 800beea:	f3bf 8f4f 	dsb	sy
 800beee:	61fb      	str	r3, [r7, #28]
}
 800bef0:	bf00      	nop
 800bef2:	e7fe      	b.n	800bef2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bef4:	f001 f97e 	bl	800d1f4 <xTaskGetSchedulerState>
 800bef8:	4603      	mov	r3, r0
 800befa:	2b00      	cmp	r3, #0
 800befc:	d102      	bne.n	800bf04 <xQueueSemaphoreTake+0x60>
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d101      	bne.n	800bf08 <xQueueSemaphoreTake+0x64>
 800bf04:	2301      	movs	r3, #1
 800bf06:	e000      	b.n	800bf0a <xQueueSemaphoreTake+0x66>
 800bf08:	2300      	movs	r3, #0
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d10a      	bne.n	800bf24 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800bf0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf12:	f383 8811 	msr	BASEPRI, r3
 800bf16:	f3bf 8f6f 	isb	sy
 800bf1a:	f3bf 8f4f 	dsb	sy
 800bf1e:	61bb      	str	r3, [r7, #24]
}
 800bf20:	bf00      	nop
 800bf22:	e7fe      	b.n	800bf22 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bf24:	f7ff f9ee 	bl	800b304 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bf28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf2c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bf2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d024      	beq.n	800bf7e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800bf34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf36:	1e5a      	subs	r2, r3, #1
 800bf38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf3a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bf3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d104      	bne.n	800bf4e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bf44:	f001 facc 	bl	800d4e0 <pvTaskIncrementMutexHeldCount>
 800bf48:	4602      	mov	r2, r0
 800bf4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf4c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bf4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf50:	691b      	ldr	r3, [r3, #16]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d00f      	beq.n	800bf76 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf58:	3310      	adds	r3, #16
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f000 ff88 	bl	800ce70 <xTaskRemoveFromEventList>
 800bf60:	4603      	mov	r3, r0
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d007      	beq.n	800bf76 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bf66:	4b54      	ldr	r3, [pc, #336]	; (800c0b8 <xQueueSemaphoreTake+0x214>)
 800bf68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf6c:	601a      	str	r2, [r3, #0]
 800bf6e:	f3bf 8f4f 	dsb	sy
 800bf72:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bf76:	f7ff f9f5 	bl	800b364 <vPortExitCritical>
				return pdPASS;
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	e097      	b.n	800c0ae <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d111      	bne.n	800bfa8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800bf84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d00a      	beq.n	800bfa0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800bf8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf8e:	f383 8811 	msr	BASEPRI, r3
 800bf92:	f3bf 8f6f 	isb	sy
 800bf96:	f3bf 8f4f 	dsb	sy
 800bf9a:	617b      	str	r3, [r7, #20]
}
 800bf9c:	bf00      	nop
 800bf9e:	e7fe      	b.n	800bf9e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bfa0:	f7ff f9e0 	bl	800b364 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	e082      	b.n	800c0ae <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bfa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d106      	bne.n	800bfbc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bfae:	f107 030c 	add.w	r3, r7, #12
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f000 ffc0 	bl	800cf38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bfb8:	2301      	movs	r3, #1
 800bfba:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bfbc:	f7ff f9d2 	bl	800b364 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bfc0:	f000 fd2c 	bl	800ca1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bfc4:	f7ff f99e 	bl	800b304 <vPortEnterCritical>
 800bfc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bfce:	b25b      	sxtb	r3, r3
 800bfd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfd4:	d103      	bne.n	800bfde <xQueueSemaphoreTake+0x13a>
 800bfd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfd8:	2200      	movs	r2, #0
 800bfda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bfde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfe0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bfe4:	b25b      	sxtb	r3, r3
 800bfe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfea:	d103      	bne.n	800bff4 <xQueueSemaphoreTake+0x150>
 800bfec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfee:	2200      	movs	r2, #0
 800bff0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bff4:	f7ff f9b6 	bl	800b364 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bff8:	463a      	mov	r2, r7
 800bffa:	f107 030c 	add.w	r3, r7, #12
 800bffe:	4611      	mov	r1, r2
 800c000:	4618      	mov	r0, r3
 800c002:	f000 ffaf 	bl	800cf64 <xTaskCheckForTimeOut>
 800c006:	4603      	mov	r3, r0
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d132      	bne.n	800c072 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c00c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c00e:	f000 f9f2 	bl	800c3f6 <prvIsQueueEmpty>
 800c012:	4603      	mov	r3, r0
 800c014:	2b00      	cmp	r3, #0
 800c016:	d026      	beq.n	800c066 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d109      	bne.n	800c034 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c020:	f7ff f970 	bl	800b304 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c026:	689b      	ldr	r3, [r3, #8]
 800c028:	4618      	mov	r0, r3
 800c02a:	f001 f901 	bl	800d230 <xTaskPriorityInherit>
 800c02e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c030:	f7ff f998 	bl	800b364 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c036:	3324      	adds	r3, #36	; 0x24
 800c038:	683a      	ldr	r2, [r7, #0]
 800c03a:	4611      	mov	r1, r2
 800c03c:	4618      	mov	r0, r3
 800c03e:	f000 fec7 	bl	800cdd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c042:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c044:	f000 f985 	bl	800c352 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c048:	f000 fcf6 	bl	800ca38 <xTaskResumeAll>
 800c04c:	4603      	mov	r3, r0
 800c04e:	2b00      	cmp	r3, #0
 800c050:	f47f af68 	bne.w	800bf24 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c054:	4b18      	ldr	r3, [pc, #96]	; (800c0b8 <xQueueSemaphoreTake+0x214>)
 800c056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c05a:	601a      	str	r2, [r3, #0]
 800c05c:	f3bf 8f4f 	dsb	sy
 800c060:	f3bf 8f6f 	isb	sy
 800c064:	e75e      	b.n	800bf24 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c066:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c068:	f000 f973 	bl	800c352 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c06c:	f000 fce4 	bl	800ca38 <xTaskResumeAll>
 800c070:	e758      	b.n	800bf24 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c072:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c074:	f000 f96d 	bl	800c352 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c078:	f000 fcde 	bl	800ca38 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c07c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c07e:	f000 f9ba 	bl	800c3f6 <prvIsQueueEmpty>
 800c082:	4603      	mov	r3, r0
 800c084:	2b00      	cmp	r3, #0
 800c086:	f43f af4d 	beq.w	800bf24 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d00d      	beq.n	800c0ac <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c090:	f7ff f938 	bl	800b304 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c094:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c096:	f000 f8b4 	bl	800c202 <prvGetDisinheritPriorityAfterTimeout>
 800c09a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c09c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c09e:	689b      	ldr	r3, [r3, #8]
 800c0a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f001 f99a 	bl	800d3dc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c0a8:	f7ff f95c 	bl	800b364 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c0ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	3738      	adds	r7, #56	; 0x38
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}
 800c0b6:	bf00      	nop
 800c0b8:	e000ed04 	.word	0xe000ed04

0800c0bc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b08e      	sub	sp, #56	; 0x38
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	60f8      	str	r0, [r7, #12]
 800c0c4:	60b9      	str	r1, [r7, #8]
 800c0c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c0cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d10a      	bne.n	800c0e8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c0d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d6:	f383 8811 	msr	BASEPRI, r3
 800c0da:	f3bf 8f6f 	isb	sy
 800c0de:	f3bf 8f4f 	dsb	sy
 800c0e2:	623b      	str	r3, [r7, #32]
}
 800c0e4:	bf00      	nop
 800c0e6:	e7fe      	b.n	800c0e6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c0e8:	68bb      	ldr	r3, [r7, #8]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d103      	bne.n	800c0f6 <xQueueReceiveFromISR+0x3a>
 800c0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d101      	bne.n	800c0fa <xQueueReceiveFromISR+0x3e>
 800c0f6:	2301      	movs	r3, #1
 800c0f8:	e000      	b.n	800c0fc <xQueueReceiveFromISR+0x40>
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d10a      	bne.n	800c116 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c104:	f383 8811 	msr	BASEPRI, r3
 800c108:	f3bf 8f6f 	isb	sy
 800c10c:	f3bf 8f4f 	dsb	sy
 800c110:	61fb      	str	r3, [r7, #28]
}
 800c112:	bf00      	nop
 800c114:	e7fe      	b.n	800c114 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c116:	f7ff f9d7 	bl	800b4c8 <vPortValidateInterruptPriority>
	__asm volatile
 800c11a:	f3ef 8211 	mrs	r2, BASEPRI
 800c11e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c122:	f383 8811 	msr	BASEPRI, r3
 800c126:	f3bf 8f6f 	isb	sy
 800c12a:	f3bf 8f4f 	dsb	sy
 800c12e:	61ba      	str	r2, [r7, #24]
 800c130:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c132:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c134:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c13a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d02f      	beq.n	800c1a2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c144:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c148:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c14c:	68b9      	ldr	r1, [r7, #8]
 800c14e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c150:	f000 f8d9 	bl	800c306 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c156:	1e5a      	subs	r2, r3, #1
 800c158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c15a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c15c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c160:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c164:	d112      	bne.n	800c18c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c168:	691b      	ldr	r3, [r3, #16]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d016      	beq.n	800c19c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c170:	3310      	adds	r3, #16
 800c172:	4618      	mov	r0, r3
 800c174:	f000 fe7c 	bl	800ce70 <xTaskRemoveFromEventList>
 800c178:	4603      	mov	r3, r0
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d00e      	beq.n	800c19c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d00b      	beq.n	800c19c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2201      	movs	r2, #1
 800c188:	601a      	str	r2, [r3, #0]
 800c18a:	e007      	b.n	800c19c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c18c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c190:	3301      	adds	r3, #1
 800c192:	b2db      	uxtb	r3, r3
 800c194:	b25a      	sxtb	r2, r3
 800c196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c19c:	2301      	movs	r3, #1
 800c19e:	637b      	str	r3, [r7, #52]	; 0x34
 800c1a0:	e001      	b.n	800c1a6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	637b      	str	r3, [r7, #52]	; 0x34
 800c1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1a8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c1aa:	693b      	ldr	r3, [r7, #16]
 800c1ac:	f383 8811 	msr	BASEPRI, r3
}
 800c1b0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c1b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	3738      	adds	r7, #56	; 0x38
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	bd80      	pop	{r7, pc}

0800c1bc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b084      	sub	sp, #16
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d10a      	bne.n	800c1e4 <vQueueDelete+0x28>
	__asm volatile
 800c1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1d2:	f383 8811 	msr	BASEPRI, r3
 800c1d6:	f3bf 8f6f 	isb	sy
 800c1da:	f3bf 8f4f 	dsb	sy
 800c1de:	60bb      	str	r3, [r7, #8]
}
 800c1e0:	bf00      	nop
 800c1e2:	e7fe      	b.n	800c1e2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c1e4:	68f8      	ldr	r0, [r7, #12]
 800c1e6:	f000 f95f 	bl	800c4a8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d102      	bne.n	800c1fa <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800c1f4:	68f8      	ldr	r0, [r7, #12]
 800c1f6:	f7fe fd83 	bl	800ad00 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c1fa:	bf00      	nop
 800c1fc:	3710      	adds	r7, #16
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}

0800c202 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c202:	b480      	push	{r7}
 800c204:	b085      	sub	sp, #20
 800c206:	af00      	add	r7, sp, #0
 800c208:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d006      	beq.n	800c220 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800c21c:	60fb      	str	r3, [r7, #12]
 800c21e:	e001      	b.n	800c224 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c220:	2300      	movs	r3, #0
 800c222:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c224:	68fb      	ldr	r3, [r7, #12]
	}
 800c226:	4618      	mov	r0, r3
 800c228:	3714      	adds	r7, #20
 800c22a:	46bd      	mov	sp, r7
 800c22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c230:	4770      	bx	lr

0800c232 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c232:	b580      	push	{r7, lr}
 800c234:	b086      	sub	sp, #24
 800c236:	af00      	add	r7, sp, #0
 800c238:	60f8      	str	r0, [r7, #12]
 800c23a:	60b9      	str	r1, [r7, #8]
 800c23c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c23e:	2300      	movs	r3, #0
 800c240:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c246:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d10d      	bne.n	800c26c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d14d      	bne.n	800c2f4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	689b      	ldr	r3, [r3, #8]
 800c25c:	4618      	mov	r0, r3
 800c25e:	f001 f84f 	bl	800d300 <xTaskPriorityDisinherit>
 800c262:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	2200      	movs	r2, #0
 800c268:	609a      	str	r2, [r3, #8]
 800c26a:	e043      	b.n	800c2f4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d119      	bne.n	800c2a6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	6858      	ldr	r0, [r3, #4]
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c27a:	461a      	mov	r2, r3
 800c27c:	68b9      	ldr	r1, [r7, #8]
 800c27e:	f01e f829 	bl	802a2d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	685a      	ldr	r2, [r3, #4]
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c28a:	441a      	add	r2, r3
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	685a      	ldr	r2, [r3, #4]
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	689b      	ldr	r3, [r3, #8]
 800c298:	429a      	cmp	r2, r3
 800c29a:	d32b      	bcc.n	800c2f4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	681a      	ldr	r2, [r3, #0]
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	605a      	str	r2, [r3, #4]
 800c2a4:	e026      	b.n	800c2f4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	68d8      	ldr	r0, [r3, #12]
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2ae:	461a      	mov	r2, r3
 800c2b0:	68b9      	ldr	r1, [r7, #8]
 800c2b2:	f01e f80f 	bl	802a2d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	68da      	ldr	r2, [r3, #12]
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2be:	425b      	negs	r3, r3
 800c2c0:	441a      	add	r2, r3
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	68da      	ldr	r2, [r3, #12]
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	429a      	cmp	r2, r3
 800c2d0:	d207      	bcs.n	800c2e2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	689a      	ldr	r2, [r3, #8]
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2da:	425b      	negs	r3, r3
 800c2dc:	441a      	add	r2, r3
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2b02      	cmp	r3, #2
 800c2e6:	d105      	bne.n	800c2f4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c2e8:	693b      	ldr	r3, [r7, #16]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d002      	beq.n	800c2f4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c2ee:	693b      	ldr	r3, [r7, #16]
 800c2f0:	3b01      	subs	r3, #1
 800c2f2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c2f4:	693b      	ldr	r3, [r7, #16]
 800c2f6:	1c5a      	adds	r2, r3, #1
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c2fc:	697b      	ldr	r3, [r7, #20]
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	3718      	adds	r7, #24
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}

0800c306 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c306:	b580      	push	{r7, lr}
 800c308:	b082      	sub	sp, #8
 800c30a:	af00      	add	r7, sp, #0
 800c30c:	6078      	str	r0, [r7, #4]
 800c30e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c314:	2b00      	cmp	r3, #0
 800c316:	d018      	beq.n	800c34a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	68da      	ldr	r2, [r3, #12]
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c320:	441a      	add	r2, r3
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	68da      	ldr	r2, [r3, #12]
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	689b      	ldr	r3, [r3, #8]
 800c32e:	429a      	cmp	r2, r3
 800c330:	d303      	bcc.n	800c33a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681a      	ldr	r2, [r3, #0]
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	68d9      	ldr	r1, [r3, #12]
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c342:	461a      	mov	r2, r3
 800c344:	6838      	ldr	r0, [r7, #0]
 800c346:	f01d ffc5 	bl	802a2d4 <memcpy>
	}
}
 800c34a:	bf00      	nop
 800c34c:	3708      	adds	r7, #8
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd80      	pop	{r7, pc}

0800c352 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c352:	b580      	push	{r7, lr}
 800c354:	b084      	sub	sp, #16
 800c356:	af00      	add	r7, sp, #0
 800c358:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c35a:	f7fe ffd3 	bl	800b304 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c364:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c366:	e011      	b.n	800c38c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d012      	beq.n	800c396 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	3324      	adds	r3, #36	; 0x24
 800c374:	4618      	mov	r0, r3
 800c376:	f000 fd7b 	bl	800ce70 <xTaskRemoveFromEventList>
 800c37a:	4603      	mov	r3, r0
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d001      	beq.n	800c384 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c380:	f000 fe52 	bl	800d028 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c384:	7bfb      	ldrb	r3, [r7, #15]
 800c386:	3b01      	subs	r3, #1
 800c388:	b2db      	uxtb	r3, r3
 800c38a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c38c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c390:	2b00      	cmp	r3, #0
 800c392:	dce9      	bgt.n	800c368 <prvUnlockQueue+0x16>
 800c394:	e000      	b.n	800c398 <prvUnlockQueue+0x46>
					break;
 800c396:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	22ff      	movs	r2, #255	; 0xff
 800c39c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c3a0:	f7fe ffe0 	bl	800b364 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c3a4:	f7fe ffae 	bl	800b304 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c3ae:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c3b0:	e011      	b.n	800c3d6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	691b      	ldr	r3, [r3, #16]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d012      	beq.n	800c3e0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	3310      	adds	r3, #16
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f000 fd56 	bl	800ce70 <xTaskRemoveFromEventList>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d001      	beq.n	800c3ce <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c3ca:	f000 fe2d 	bl	800d028 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c3ce:	7bbb      	ldrb	r3, [r7, #14]
 800c3d0:	3b01      	subs	r3, #1
 800c3d2:	b2db      	uxtb	r3, r3
 800c3d4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c3d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	dce9      	bgt.n	800c3b2 <prvUnlockQueue+0x60>
 800c3de:	e000      	b.n	800c3e2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c3e0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	22ff      	movs	r2, #255	; 0xff
 800c3e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c3ea:	f7fe ffbb 	bl	800b364 <vPortExitCritical>
}
 800c3ee:	bf00      	nop
 800c3f0:	3710      	adds	r7, #16
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	bd80      	pop	{r7, pc}

0800c3f6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c3f6:	b580      	push	{r7, lr}
 800c3f8:	b084      	sub	sp, #16
 800c3fa:	af00      	add	r7, sp, #0
 800c3fc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c3fe:	f7fe ff81 	bl	800b304 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c406:	2b00      	cmp	r3, #0
 800c408:	d102      	bne.n	800c410 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c40a:	2301      	movs	r3, #1
 800c40c:	60fb      	str	r3, [r7, #12]
 800c40e:	e001      	b.n	800c414 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c410:	2300      	movs	r3, #0
 800c412:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c414:	f7fe ffa6 	bl	800b364 <vPortExitCritical>

	return xReturn;
 800c418:	68fb      	ldr	r3, [r7, #12]
}
 800c41a:	4618      	mov	r0, r3
 800c41c:	3710      	adds	r7, #16
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}

0800c422 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c422:	b580      	push	{r7, lr}
 800c424:	b084      	sub	sp, #16
 800c426:	af00      	add	r7, sp, #0
 800c428:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c42a:	f7fe ff6b 	bl	800b304 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c436:	429a      	cmp	r2, r3
 800c438:	d102      	bne.n	800c440 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c43a:	2301      	movs	r3, #1
 800c43c:	60fb      	str	r3, [r7, #12]
 800c43e:	e001      	b.n	800c444 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c440:	2300      	movs	r3, #0
 800c442:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c444:	f7fe ff8e 	bl	800b364 <vPortExitCritical>

	return xReturn;
 800c448:	68fb      	ldr	r3, [r7, #12]
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	3710      	adds	r7, #16
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}
	...

0800c454 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c454:	b480      	push	{r7}
 800c456:	b085      	sub	sp, #20
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
 800c45c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c45e:	2300      	movs	r3, #0
 800c460:	60fb      	str	r3, [r7, #12]
 800c462:	e014      	b.n	800c48e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c464:	4a0f      	ldr	r2, [pc, #60]	; (800c4a4 <vQueueAddToRegistry+0x50>)
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d10b      	bne.n	800c488 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c470:	490c      	ldr	r1, [pc, #48]	; (800c4a4 <vQueueAddToRegistry+0x50>)
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	683a      	ldr	r2, [r7, #0]
 800c476:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c47a:	4a0a      	ldr	r2, [pc, #40]	; (800c4a4 <vQueueAddToRegistry+0x50>)
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	00db      	lsls	r3, r3, #3
 800c480:	4413      	add	r3, r2
 800c482:	687a      	ldr	r2, [r7, #4]
 800c484:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c486:	e006      	b.n	800c496 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	3301      	adds	r3, #1
 800c48c:	60fb      	str	r3, [r7, #12]
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	2b07      	cmp	r3, #7
 800c492:	d9e7      	bls.n	800c464 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c494:	bf00      	nop
 800c496:	bf00      	nop
 800c498:	3714      	adds	r7, #20
 800c49a:	46bd      	mov	sp, r7
 800c49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a0:	4770      	bx	lr
 800c4a2:	bf00      	nop
 800c4a4:	2400bac0 	.word	0x2400bac0

0800c4a8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c4a8:	b480      	push	{r7}
 800c4aa:	b085      	sub	sp, #20
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	60fb      	str	r3, [r7, #12]
 800c4b4:	e016      	b.n	800c4e4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c4b6:	4a10      	ldr	r2, [pc, #64]	; (800c4f8 <vQueueUnregisterQueue+0x50>)
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	00db      	lsls	r3, r3, #3
 800c4bc:	4413      	add	r3, r2
 800c4be:	685b      	ldr	r3, [r3, #4]
 800c4c0:	687a      	ldr	r2, [r7, #4]
 800c4c2:	429a      	cmp	r2, r3
 800c4c4:	d10b      	bne.n	800c4de <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c4c6:	4a0c      	ldr	r2, [pc, #48]	; (800c4f8 <vQueueUnregisterQueue+0x50>)
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	2100      	movs	r1, #0
 800c4cc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c4d0:	4a09      	ldr	r2, [pc, #36]	; (800c4f8 <vQueueUnregisterQueue+0x50>)
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	00db      	lsls	r3, r3, #3
 800c4d6:	4413      	add	r3, r2
 800c4d8:	2200      	movs	r2, #0
 800c4da:	605a      	str	r2, [r3, #4]
				break;
 800c4dc:	e006      	b.n	800c4ec <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	3301      	adds	r3, #1
 800c4e2:	60fb      	str	r3, [r7, #12]
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	2b07      	cmp	r3, #7
 800c4e8:	d9e5      	bls.n	800c4b6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c4ea:	bf00      	nop
 800c4ec:	bf00      	nop
 800c4ee:	3714      	adds	r7, #20
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f6:	4770      	bx	lr
 800c4f8:	2400bac0 	.word	0x2400bac0

0800c4fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b086      	sub	sp, #24
 800c500:	af00      	add	r7, sp, #0
 800c502:	60f8      	str	r0, [r7, #12]
 800c504:	60b9      	str	r1, [r7, #8]
 800c506:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c50c:	f7fe fefa 	bl	800b304 <vPortEnterCritical>
 800c510:	697b      	ldr	r3, [r7, #20]
 800c512:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c516:	b25b      	sxtb	r3, r3
 800c518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c51c:	d103      	bne.n	800c526 <vQueueWaitForMessageRestricted+0x2a>
 800c51e:	697b      	ldr	r3, [r7, #20]
 800c520:	2200      	movs	r2, #0
 800c522:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c526:	697b      	ldr	r3, [r7, #20]
 800c528:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c52c:	b25b      	sxtb	r3, r3
 800c52e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c532:	d103      	bne.n	800c53c <vQueueWaitForMessageRestricted+0x40>
 800c534:	697b      	ldr	r3, [r7, #20]
 800c536:	2200      	movs	r2, #0
 800c538:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c53c:	f7fe ff12 	bl	800b364 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c540:	697b      	ldr	r3, [r7, #20]
 800c542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c544:	2b00      	cmp	r3, #0
 800c546:	d106      	bne.n	800c556 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c548:	697b      	ldr	r3, [r7, #20]
 800c54a:	3324      	adds	r3, #36	; 0x24
 800c54c:	687a      	ldr	r2, [r7, #4]
 800c54e:	68b9      	ldr	r1, [r7, #8]
 800c550:	4618      	mov	r0, r3
 800c552:	f000 fc61 	bl	800ce18 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c556:	6978      	ldr	r0, [r7, #20]
 800c558:	f7ff fefb 	bl	800c352 <prvUnlockQueue>
	}
 800c55c:	bf00      	nop
 800c55e:	3718      	adds	r7, #24
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}

0800c564 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c564:	b580      	push	{r7, lr}
 800c566:	b08e      	sub	sp, #56	; 0x38
 800c568:	af04      	add	r7, sp, #16
 800c56a:	60f8      	str	r0, [r7, #12]
 800c56c:	60b9      	str	r1, [r7, #8]
 800c56e:	607a      	str	r2, [r7, #4]
 800c570:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c574:	2b00      	cmp	r3, #0
 800c576:	d10a      	bne.n	800c58e <xTaskCreateStatic+0x2a>
	__asm volatile
 800c578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c57c:	f383 8811 	msr	BASEPRI, r3
 800c580:	f3bf 8f6f 	isb	sy
 800c584:	f3bf 8f4f 	dsb	sy
 800c588:	623b      	str	r3, [r7, #32]
}
 800c58a:	bf00      	nop
 800c58c:	e7fe      	b.n	800c58c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c58e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c590:	2b00      	cmp	r3, #0
 800c592:	d10a      	bne.n	800c5aa <xTaskCreateStatic+0x46>
	__asm volatile
 800c594:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c598:	f383 8811 	msr	BASEPRI, r3
 800c59c:	f3bf 8f6f 	isb	sy
 800c5a0:	f3bf 8f4f 	dsb	sy
 800c5a4:	61fb      	str	r3, [r7, #28]
}
 800c5a6:	bf00      	nop
 800c5a8:	e7fe      	b.n	800c5a8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c5aa:	23bc      	movs	r3, #188	; 0xbc
 800c5ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c5ae:	693b      	ldr	r3, [r7, #16]
 800c5b0:	2bbc      	cmp	r3, #188	; 0xbc
 800c5b2:	d00a      	beq.n	800c5ca <xTaskCreateStatic+0x66>
	__asm volatile
 800c5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5b8:	f383 8811 	msr	BASEPRI, r3
 800c5bc:	f3bf 8f6f 	isb	sy
 800c5c0:	f3bf 8f4f 	dsb	sy
 800c5c4:	61bb      	str	r3, [r7, #24]
}
 800c5c6:	bf00      	nop
 800c5c8:	e7fe      	b.n	800c5c8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c5ca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c5cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d01e      	beq.n	800c610 <xTaskCreateStatic+0xac>
 800c5d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d01b      	beq.n	800c610 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c5d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5da:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c5e0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c5e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5e4:	2202      	movs	r2, #2
 800c5e6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	9303      	str	r3, [sp, #12]
 800c5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5f0:	9302      	str	r3, [sp, #8]
 800c5f2:	f107 0314 	add.w	r3, r7, #20
 800c5f6:	9301      	str	r3, [sp, #4]
 800c5f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5fa:	9300      	str	r3, [sp, #0]
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	687a      	ldr	r2, [r7, #4]
 800c600:	68b9      	ldr	r1, [r7, #8]
 800c602:	68f8      	ldr	r0, [r7, #12]
 800c604:	f000 f850 	bl	800c6a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c608:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c60a:	f000 f8f3 	bl	800c7f4 <prvAddNewTaskToReadyList>
 800c60e:	e001      	b.n	800c614 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c610:	2300      	movs	r3, #0
 800c612:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c614:	697b      	ldr	r3, [r7, #20]
	}
 800c616:	4618      	mov	r0, r3
 800c618:	3728      	adds	r7, #40	; 0x28
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd80      	pop	{r7, pc}

0800c61e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c61e:	b580      	push	{r7, lr}
 800c620:	b08c      	sub	sp, #48	; 0x30
 800c622:	af04      	add	r7, sp, #16
 800c624:	60f8      	str	r0, [r7, #12]
 800c626:	60b9      	str	r1, [r7, #8]
 800c628:	603b      	str	r3, [r7, #0]
 800c62a:	4613      	mov	r3, r2
 800c62c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c62e:	88fb      	ldrh	r3, [r7, #6]
 800c630:	009b      	lsls	r3, r3, #2
 800c632:	4618      	mov	r0, r3
 800c634:	f7fe fa98 	bl	800ab68 <pvPortMalloc>
 800c638:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c63a:	697b      	ldr	r3, [r7, #20]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d00e      	beq.n	800c65e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c640:	20bc      	movs	r0, #188	; 0xbc
 800c642:	f7fe fa91 	bl	800ab68 <pvPortMalloc>
 800c646:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c648:	69fb      	ldr	r3, [r7, #28]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d003      	beq.n	800c656 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c64e:	69fb      	ldr	r3, [r7, #28]
 800c650:	697a      	ldr	r2, [r7, #20]
 800c652:	631a      	str	r2, [r3, #48]	; 0x30
 800c654:	e005      	b.n	800c662 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c656:	6978      	ldr	r0, [r7, #20]
 800c658:	f7fe fb52 	bl	800ad00 <vPortFree>
 800c65c:	e001      	b.n	800c662 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c65e:	2300      	movs	r3, #0
 800c660:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c662:	69fb      	ldr	r3, [r7, #28]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d017      	beq.n	800c698 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c668:	69fb      	ldr	r3, [r7, #28]
 800c66a:	2200      	movs	r2, #0
 800c66c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c670:	88fa      	ldrh	r2, [r7, #6]
 800c672:	2300      	movs	r3, #0
 800c674:	9303      	str	r3, [sp, #12]
 800c676:	69fb      	ldr	r3, [r7, #28]
 800c678:	9302      	str	r3, [sp, #8]
 800c67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c67c:	9301      	str	r3, [sp, #4]
 800c67e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c680:	9300      	str	r3, [sp, #0]
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	68b9      	ldr	r1, [r7, #8]
 800c686:	68f8      	ldr	r0, [r7, #12]
 800c688:	f000 f80e 	bl	800c6a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c68c:	69f8      	ldr	r0, [r7, #28]
 800c68e:	f000 f8b1 	bl	800c7f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c692:	2301      	movs	r3, #1
 800c694:	61bb      	str	r3, [r7, #24]
 800c696:	e002      	b.n	800c69e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c698:	f04f 33ff 	mov.w	r3, #4294967295
 800c69c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c69e:	69bb      	ldr	r3, [r7, #24]
	}
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	3720      	adds	r7, #32
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}

0800c6a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b088      	sub	sp, #32
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	60f8      	str	r0, [r7, #12]
 800c6b0:	60b9      	str	r1, [r7, #8]
 800c6b2:	607a      	str	r2, [r7, #4]
 800c6b4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6b8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	009b      	lsls	r3, r3, #2
 800c6be:	461a      	mov	r2, r3
 800c6c0:	21a5      	movs	r1, #165	; 0xa5
 800c6c2:	f01d fe15 	bl	802a2f0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c6ca:	6879      	ldr	r1, [r7, #4]
 800c6cc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c6d0:	440b      	add	r3, r1
 800c6d2:	009b      	lsls	r3, r3, #2
 800c6d4:	4413      	add	r3, r2
 800c6d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c6d8:	69bb      	ldr	r3, [r7, #24]
 800c6da:	f023 0307 	bic.w	r3, r3, #7
 800c6de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c6e0:	69bb      	ldr	r3, [r7, #24]
 800c6e2:	f003 0307 	and.w	r3, r3, #7
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d00a      	beq.n	800c700 <prvInitialiseNewTask+0x58>
	__asm volatile
 800c6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ee:	f383 8811 	msr	BASEPRI, r3
 800c6f2:	f3bf 8f6f 	isb	sy
 800c6f6:	f3bf 8f4f 	dsb	sy
 800c6fa:	617b      	str	r3, [r7, #20]
}
 800c6fc:	bf00      	nop
 800c6fe:	e7fe      	b.n	800c6fe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d01f      	beq.n	800c746 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c706:	2300      	movs	r3, #0
 800c708:	61fb      	str	r3, [r7, #28]
 800c70a:	e012      	b.n	800c732 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c70c:	68ba      	ldr	r2, [r7, #8]
 800c70e:	69fb      	ldr	r3, [r7, #28]
 800c710:	4413      	add	r3, r2
 800c712:	7819      	ldrb	r1, [r3, #0]
 800c714:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c716:	69fb      	ldr	r3, [r7, #28]
 800c718:	4413      	add	r3, r2
 800c71a:	3334      	adds	r3, #52	; 0x34
 800c71c:	460a      	mov	r2, r1
 800c71e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c720:	68ba      	ldr	r2, [r7, #8]
 800c722:	69fb      	ldr	r3, [r7, #28]
 800c724:	4413      	add	r3, r2
 800c726:	781b      	ldrb	r3, [r3, #0]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d006      	beq.n	800c73a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c72c:	69fb      	ldr	r3, [r7, #28]
 800c72e:	3301      	adds	r3, #1
 800c730:	61fb      	str	r3, [r7, #28]
 800c732:	69fb      	ldr	r3, [r7, #28]
 800c734:	2b0f      	cmp	r3, #15
 800c736:	d9e9      	bls.n	800c70c <prvInitialiseNewTask+0x64>
 800c738:	e000      	b.n	800c73c <prvInitialiseNewTask+0x94>
			{
				break;
 800c73a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c73c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c73e:	2200      	movs	r2, #0
 800c740:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c744:	e003      	b.n	800c74e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c748:	2200      	movs	r2, #0
 800c74a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c750:	2b37      	cmp	r3, #55	; 0x37
 800c752:	d901      	bls.n	800c758 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c754:	2337      	movs	r3, #55	; 0x37
 800c756:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c75a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c75c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c760:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c762:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c766:	2200      	movs	r2, #0
 800c768:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c76c:	3304      	adds	r3, #4
 800c76e:	4618      	mov	r0, r3
 800c770:	f7fe fc04 	bl	800af7c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c776:	3318      	adds	r3, #24
 800c778:	4618      	mov	r0, r3
 800c77a:	f7fe fbff 	bl	800af7c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c780:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c782:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c786:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c78c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c790:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c792:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c796:	2200      	movs	r2, #0
 800c798:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c79e:	2200      	movs	r2, #0
 800c7a0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c7a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a6:	3354      	adds	r3, #84	; 0x54
 800c7a8:	2260      	movs	r2, #96	; 0x60
 800c7aa:	2100      	movs	r1, #0
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f01d fd9f 	bl	802a2f0 <memset>
 800c7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b4:	4a0c      	ldr	r2, [pc, #48]	; (800c7e8 <prvInitialiseNewTask+0x140>)
 800c7b6:	659a      	str	r2, [r3, #88]	; 0x58
 800c7b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ba:	4a0c      	ldr	r2, [pc, #48]	; (800c7ec <prvInitialiseNewTask+0x144>)
 800c7bc:	65da      	str	r2, [r3, #92]	; 0x5c
 800c7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c0:	4a0b      	ldr	r2, [pc, #44]	; (800c7f0 <prvInitialiseNewTask+0x148>)
 800c7c2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c7c4:	683a      	ldr	r2, [r7, #0]
 800c7c6:	68f9      	ldr	r1, [r7, #12]
 800c7c8:	69b8      	ldr	r0, [r7, #24]
 800c7ca:	f7fe fc6b 	bl	800b0a4 <pxPortInitialiseStack>
 800c7ce:	4602      	mov	r2, r0
 800c7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c7d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d002      	beq.n	800c7e0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7de:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c7e0:	bf00      	nop
 800c7e2:	3720      	adds	r7, #32
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}
 800c7e8:	0802fbc0 	.word	0x0802fbc0
 800c7ec:	0802fbe0 	.word	0x0802fbe0
 800c7f0:	0802fba0 	.word	0x0802fba0

0800c7f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b082      	sub	sp, #8
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c7fc:	f7fe fd82 	bl	800b304 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c800:	4b2d      	ldr	r3, [pc, #180]	; (800c8b8 <prvAddNewTaskToReadyList+0xc4>)
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	3301      	adds	r3, #1
 800c806:	4a2c      	ldr	r2, [pc, #176]	; (800c8b8 <prvAddNewTaskToReadyList+0xc4>)
 800c808:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c80a:	4b2c      	ldr	r3, [pc, #176]	; (800c8bc <prvAddNewTaskToReadyList+0xc8>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d109      	bne.n	800c826 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c812:	4a2a      	ldr	r2, [pc, #168]	; (800c8bc <prvAddNewTaskToReadyList+0xc8>)
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c818:	4b27      	ldr	r3, [pc, #156]	; (800c8b8 <prvAddNewTaskToReadyList+0xc4>)
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	2b01      	cmp	r3, #1
 800c81e:	d110      	bne.n	800c842 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c820:	f000 fc26 	bl	800d070 <prvInitialiseTaskLists>
 800c824:	e00d      	b.n	800c842 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c826:	4b26      	ldr	r3, [pc, #152]	; (800c8c0 <prvAddNewTaskToReadyList+0xcc>)
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d109      	bne.n	800c842 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c82e:	4b23      	ldr	r3, [pc, #140]	; (800c8bc <prvAddNewTaskToReadyList+0xc8>)
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c838:	429a      	cmp	r2, r3
 800c83a:	d802      	bhi.n	800c842 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c83c:	4a1f      	ldr	r2, [pc, #124]	; (800c8bc <prvAddNewTaskToReadyList+0xc8>)
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c842:	4b20      	ldr	r3, [pc, #128]	; (800c8c4 <prvAddNewTaskToReadyList+0xd0>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	3301      	adds	r3, #1
 800c848:	4a1e      	ldr	r2, [pc, #120]	; (800c8c4 <prvAddNewTaskToReadyList+0xd0>)
 800c84a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c84c:	4b1d      	ldr	r3, [pc, #116]	; (800c8c4 <prvAddNewTaskToReadyList+0xd0>)
 800c84e:	681a      	ldr	r2, [r3, #0]
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c858:	4b1b      	ldr	r3, [pc, #108]	; (800c8c8 <prvAddNewTaskToReadyList+0xd4>)
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	429a      	cmp	r2, r3
 800c85e:	d903      	bls.n	800c868 <prvAddNewTaskToReadyList+0x74>
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c864:	4a18      	ldr	r2, [pc, #96]	; (800c8c8 <prvAddNewTaskToReadyList+0xd4>)
 800c866:	6013      	str	r3, [r2, #0]
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c86c:	4613      	mov	r3, r2
 800c86e:	009b      	lsls	r3, r3, #2
 800c870:	4413      	add	r3, r2
 800c872:	009b      	lsls	r3, r3, #2
 800c874:	4a15      	ldr	r2, [pc, #84]	; (800c8cc <prvAddNewTaskToReadyList+0xd8>)
 800c876:	441a      	add	r2, r3
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	3304      	adds	r3, #4
 800c87c:	4619      	mov	r1, r3
 800c87e:	4610      	mov	r0, r2
 800c880:	f7fe fb89 	bl	800af96 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c884:	f7fe fd6e 	bl	800b364 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c888:	4b0d      	ldr	r3, [pc, #52]	; (800c8c0 <prvAddNewTaskToReadyList+0xcc>)
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d00e      	beq.n	800c8ae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c890:	4b0a      	ldr	r3, [pc, #40]	; (800c8bc <prvAddNewTaskToReadyList+0xc8>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c89a:	429a      	cmp	r2, r3
 800c89c:	d207      	bcs.n	800c8ae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c89e:	4b0c      	ldr	r3, [pc, #48]	; (800c8d0 <prvAddNewTaskToReadyList+0xdc>)
 800c8a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8a4:	601a      	str	r2, [r3, #0]
 800c8a6:	f3bf 8f4f 	dsb	sy
 800c8aa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c8ae:	bf00      	nop
 800c8b0:	3708      	adds	r7, #8
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bd80      	pop	{r7, pc}
 800c8b6:	bf00      	nop
 800c8b8:	2400a904 	.word	0x2400a904
 800c8bc:	2400a430 	.word	0x2400a430
 800c8c0:	2400a910 	.word	0x2400a910
 800c8c4:	2400a920 	.word	0x2400a920
 800c8c8:	2400a90c 	.word	0x2400a90c
 800c8cc:	2400a434 	.word	0x2400a434
 800c8d0:	e000ed04 	.word	0xe000ed04

0800c8d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b084      	sub	sp, #16
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c8dc:	2300      	movs	r3, #0
 800c8de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d017      	beq.n	800c916 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c8e6:	4b13      	ldr	r3, [pc, #76]	; (800c934 <vTaskDelay+0x60>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d00a      	beq.n	800c904 <vTaskDelay+0x30>
	__asm volatile
 800c8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8f2:	f383 8811 	msr	BASEPRI, r3
 800c8f6:	f3bf 8f6f 	isb	sy
 800c8fa:	f3bf 8f4f 	dsb	sy
 800c8fe:	60bb      	str	r3, [r7, #8]
}
 800c900:	bf00      	nop
 800c902:	e7fe      	b.n	800c902 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c904:	f000 f88a 	bl	800ca1c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c908:	2100      	movs	r1, #0
 800c90a:	6878      	ldr	r0, [r7, #4]
 800c90c:	f000 fdfc 	bl	800d508 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c910:	f000 f892 	bl	800ca38 <xTaskResumeAll>
 800c914:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d107      	bne.n	800c92c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c91c:	4b06      	ldr	r3, [pc, #24]	; (800c938 <vTaskDelay+0x64>)
 800c91e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c922:	601a      	str	r2, [r3, #0]
 800c924:	f3bf 8f4f 	dsb	sy
 800c928:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c92c:	bf00      	nop
 800c92e:	3710      	adds	r7, #16
 800c930:	46bd      	mov	sp, r7
 800c932:	bd80      	pop	{r7, pc}
 800c934:	2400a92c 	.word	0x2400a92c
 800c938:	e000ed04 	.word	0xe000ed04

0800c93c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b08a      	sub	sp, #40	; 0x28
 800c940:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c942:	2300      	movs	r3, #0
 800c944:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c946:	2300      	movs	r3, #0
 800c948:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c94a:	463a      	mov	r2, r7
 800c94c:	1d39      	adds	r1, r7, #4
 800c94e:	f107 0308 	add.w	r3, r7, #8
 800c952:	4618      	mov	r0, r3
 800c954:	f7fe f8d4 	bl	800ab00 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c958:	6839      	ldr	r1, [r7, #0]
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	68ba      	ldr	r2, [r7, #8]
 800c95e:	9202      	str	r2, [sp, #8]
 800c960:	9301      	str	r3, [sp, #4]
 800c962:	2300      	movs	r3, #0
 800c964:	9300      	str	r3, [sp, #0]
 800c966:	2300      	movs	r3, #0
 800c968:	460a      	mov	r2, r1
 800c96a:	4924      	ldr	r1, [pc, #144]	; (800c9fc <vTaskStartScheduler+0xc0>)
 800c96c:	4824      	ldr	r0, [pc, #144]	; (800ca00 <vTaskStartScheduler+0xc4>)
 800c96e:	f7ff fdf9 	bl	800c564 <xTaskCreateStatic>
 800c972:	4603      	mov	r3, r0
 800c974:	4a23      	ldr	r2, [pc, #140]	; (800ca04 <vTaskStartScheduler+0xc8>)
 800c976:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c978:	4b22      	ldr	r3, [pc, #136]	; (800ca04 <vTaskStartScheduler+0xc8>)
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d002      	beq.n	800c986 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c980:	2301      	movs	r3, #1
 800c982:	617b      	str	r3, [r7, #20]
 800c984:	e001      	b.n	800c98a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c986:	2300      	movs	r3, #0
 800c988:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c98a:	697b      	ldr	r3, [r7, #20]
 800c98c:	2b01      	cmp	r3, #1
 800c98e:	d102      	bne.n	800c996 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c990:	f000 fe0e 	bl	800d5b0 <xTimerCreateTimerTask>
 800c994:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c996:	697b      	ldr	r3, [r7, #20]
 800c998:	2b01      	cmp	r3, #1
 800c99a:	d11b      	bne.n	800c9d4 <vTaskStartScheduler+0x98>
	__asm volatile
 800c99c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9a0:	f383 8811 	msr	BASEPRI, r3
 800c9a4:	f3bf 8f6f 	isb	sy
 800c9a8:	f3bf 8f4f 	dsb	sy
 800c9ac:	613b      	str	r3, [r7, #16]
}
 800c9ae:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c9b0:	4b15      	ldr	r3, [pc, #84]	; (800ca08 <vTaskStartScheduler+0xcc>)
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	3354      	adds	r3, #84	; 0x54
 800c9b6:	4a15      	ldr	r2, [pc, #84]	; (800ca0c <vTaskStartScheduler+0xd0>)
 800c9b8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c9ba:	4b15      	ldr	r3, [pc, #84]	; (800ca10 <vTaskStartScheduler+0xd4>)
 800c9bc:	f04f 32ff 	mov.w	r2, #4294967295
 800c9c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c9c2:	4b14      	ldr	r3, [pc, #80]	; (800ca14 <vTaskStartScheduler+0xd8>)
 800c9c4:	2201      	movs	r2, #1
 800c9c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c9c8:	4b13      	ldr	r3, [pc, #76]	; (800ca18 <vTaskStartScheduler+0xdc>)
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c9ce:	f7fe fbf7 	bl	800b1c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c9d2:	e00e      	b.n	800c9f2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c9d4:	697b      	ldr	r3, [r7, #20]
 800c9d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9da:	d10a      	bne.n	800c9f2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800c9dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9e0:	f383 8811 	msr	BASEPRI, r3
 800c9e4:	f3bf 8f6f 	isb	sy
 800c9e8:	f3bf 8f4f 	dsb	sy
 800c9ec:	60fb      	str	r3, [r7, #12]
}
 800c9ee:	bf00      	nop
 800c9f0:	e7fe      	b.n	800c9f0 <vTaskStartScheduler+0xb4>
}
 800c9f2:	bf00      	nop
 800c9f4:	3718      	adds	r7, #24
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	bd80      	pop	{r7, pc}
 800c9fa:	bf00      	nop
 800c9fc:	0802bf60 	.word	0x0802bf60
 800ca00:	0800d041 	.word	0x0800d041
 800ca04:	2400a928 	.word	0x2400a928
 800ca08:	2400a430 	.word	0x2400a430
 800ca0c:	240000cc 	.word	0x240000cc
 800ca10:	2400a924 	.word	0x2400a924
 800ca14:	2400a910 	.word	0x2400a910
 800ca18:	2400a908 	.word	0x2400a908

0800ca1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ca1c:	b480      	push	{r7}
 800ca1e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ca20:	4b04      	ldr	r3, [pc, #16]	; (800ca34 <vTaskSuspendAll+0x18>)
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	3301      	adds	r3, #1
 800ca26:	4a03      	ldr	r2, [pc, #12]	; (800ca34 <vTaskSuspendAll+0x18>)
 800ca28:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ca2a:	bf00      	nop
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca32:	4770      	bx	lr
 800ca34:	2400a92c 	.word	0x2400a92c

0800ca38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b084      	sub	sp, #16
 800ca3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ca42:	2300      	movs	r3, #0
 800ca44:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ca46:	4b42      	ldr	r3, [pc, #264]	; (800cb50 <xTaskResumeAll+0x118>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d10a      	bne.n	800ca64 <xTaskResumeAll+0x2c>
	__asm volatile
 800ca4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca52:	f383 8811 	msr	BASEPRI, r3
 800ca56:	f3bf 8f6f 	isb	sy
 800ca5a:	f3bf 8f4f 	dsb	sy
 800ca5e:	603b      	str	r3, [r7, #0]
}
 800ca60:	bf00      	nop
 800ca62:	e7fe      	b.n	800ca62 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ca64:	f7fe fc4e 	bl	800b304 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ca68:	4b39      	ldr	r3, [pc, #228]	; (800cb50 <xTaskResumeAll+0x118>)
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	3b01      	subs	r3, #1
 800ca6e:	4a38      	ldr	r2, [pc, #224]	; (800cb50 <xTaskResumeAll+0x118>)
 800ca70:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca72:	4b37      	ldr	r3, [pc, #220]	; (800cb50 <xTaskResumeAll+0x118>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d162      	bne.n	800cb40 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ca7a:	4b36      	ldr	r3, [pc, #216]	; (800cb54 <xTaskResumeAll+0x11c>)
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d05e      	beq.n	800cb40 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ca82:	e02f      	b.n	800cae4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca84:	4b34      	ldr	r3, [pc, #208]	; (800cb58 <xTaskResumeAll+0x120>)
 800ca86:	68db      	ldr	r3, [r3, #12]
 800ca88:	68db      	ldr	r3, [r3, #12]
 800ca8a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	3318      	adds	r3, #24
 800ca90:	4618      	mov	r0, r3
 800ca92:	f7fe fadd 	bl	800b050 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	3304      	adds	r3, #4
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	f7fe fad8 	bl	800b050 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caa4:	4b2d      	ldr	r3, [pc, #180]	; (800cb5c <xTaskResumeAll+0x124>)
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	429a      	cmp	r2, r3
 800caaa:	d903      	bls.n	800cab4 <xTaskResumeAll+0x7c>
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cab0:	4a2a      	ldr	r2, [pc, #168]	; (800cb5c <xTaskResumeAll+0x124>)
 800cab2:	6013      	str	r3, [r2, #0]
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cab8:	4613      	mov	r3, r2
 800caba:	009b      	lsls	r3, r3, #2
 800cabc:	4413      	add	r3, r2
 800cabe:	009b      	lsls	r3, r3, #2
 800cac0:	4a27      	ldr	r2, [pc, #156]	; (800cb60 <xTaskResumeAll+0x128>)
 800cac2:	441a      	add	r2, r3
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	3304      	adds	r3, #4
 800cac8:	4619      	mov	r1, r3
 800caca:	4610      	mov	r0, r2
 800cacc:	f7fe fa63 	bl	800af96 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cad4:	4b23      	ldr	r3, [pc, #140]	; (800cb64 <xTaskResumeAll+0x12c>)
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cada:	429a      	cmp	r2, r3
 800cadc:	d302      	bcc.n	800cae4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800cade:	4b22      	ldr	r3, [pc, #136]	; (800cb68 <xTaskResumeAll+0x130>)
 800cae0:	2201      	movs	r2, #1
 800cae2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cae4:	4b1c      	ldr	r3, [pc, #112]	; (800cb58 <xTaskResumeAll+0x120>)
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d1cb      	bne.n	800ca84 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d001      	beq.n	800caf6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800caf2:	f000 fb5f 	bl	800d1b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800caf6:	4b1d      	ldr	r3, [pc, #116]	; (800cb6c <xTaskResumeAll+0x134>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d010      	beq.n	800cb24 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cb02:	f000 f847 	bl	800cb94 <xTaskIncrementTick>
 800cb06:	4603      	mov	r3, r0
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d002      	beq.n	800cb12 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800cb0c:	4b16      	ldr	r3, [pc, #88]	; (800cb68 <xTaskResumeAll+0x130>)
 800cb0e:	2201      	movs	r2, #1
 800cb10:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	3b01      	subs	r3, #1
 800cb16:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d1f1      	bne.n	800cb02 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800cb1e:	4b13      	ldr	r3, [pc, #76]	; (800cb6c <xTaskResumeAll+0x134>)
 800cb20:	2200      	movs	r2, #0
 800cb22:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cb24:	4b10      	ldr	r3, [pc, #64]	; (800cb68 <xTaskResumeAll+0x130>)
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d009      	beq.n	800cb40 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cb2c:	2301      	movs	r3, #1
 800cb2e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cb30:	4b0f      	ldr	r3, [pc, #60]	; (800cb70 <xTaskResumeAll+0x138>)
 800cb32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb36:	601a      	str	r2, [r3, #0]
 800cb38:	f3bf 8f4f 	dsb	sy
 800cb3c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cb40:	f7fe fc10 	bl	800b364 <vPortExitCritical>

	return xAlreadyYielded;
 800cb44:	68bb      	ldr	r3, [r7, #8]
}
 800cb46:	4618      	mov	r0, r3
 800cb48:	3710      	adds	r7, #16
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	bd80      	pop	{r7, pc}
 800cb4e:	bf00      	nop
 800cb50:	2400a92c 	.word	0x2400a92c
 800cb54:	2400a904 	.word	0x2400a904
 800cb58:	2400a8c4 	.word	0x2400a8c4
 800cb5c:	2400a90c 	.word	0x2400a90c
 800cb60:	2400a434 	.word	0x2400a434
 800cb64:	2400a430 	.word	0x2400a430
 800cb68:	2400a918 	.word	0x2400a918
 800cb6c:	2400a914 	.word	0x2400a914
 800cb70:	e000ed04 	.word	0xe000ed04

0800cb74 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cb74:	b480      	push	{r7}
 800cb76:	b083      	sub	sp, #12
 800cb78:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cb7a:	4b05      	ldr	r3, [pc, #20]	; (800cb90 <xTaskGetTickCount+0x1c>)
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cb80:	687b      	ldr	r3, [r7, #4]
}
 800cb82:	4618      	mov	r0, r3
 800cb84:	370c      	adds	r7, #12
 800cb86:	46bd      	mov	sp, r7
 800cb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8c:	4770      	bx	lr
 800cb8e:	bf00      	nop
 800cb90:	2400a908 	.word	0x2400a908

0800cb94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b086      	sub	sp, #24
 800cb98:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb9e:	4b4f      	ldr	r3, [pc, #316]	; (800ccdc <xTaskIncrementTick+0x148>)
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	f040 808f 	bne.w	800ccc6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cba8:	4b4d      	ldr	r3, [pc, #308]	; (800cce0 <xTaskIncrementTick+0x14c>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	3301      	adds	r3, #1
 800cbae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cbb0:	4a4b      	ldr	r2, [pc, #300]	; (800cce0 <xTaskIncrementTick+0x14c>)
 800cbb2:	693b      	ldr	r3, [r7, #16]
 800cbb4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cbb6:	693b      	ldr	r3, [r7, #16]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d120      	bne.n	800cbfe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cbbc:	4b49      	ldr	r3, [pc, #292]	; (800cce4 <xTaskIncrementTick+0x150>)
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d00a      	beq.n	800cbdc <xTaskIncrementTick+0x48>
	__asm volatile
 800cbc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbca:	f383 8811 	msr	BASEPRI, r3
 800cbce:	f3bf 8f6f 	isb	sy
 800cbd2:	f3bf 8f4f 	dsb	sy
 800cbd6:	603b      	str	r3, [r7, #0]
}
 800cbd8:	bf00      	nop
 800cbda:	e7fe      	b.n	800cbda <xTaskIncrementTick+0x46>
 800cbdc:	4b41      	ldr	r3, [pc, #260]	; (800cce4 <xTaskIncrementTick+0x150>)
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	60fb      	str	r3, [r7, #12]
 800cbe2:	4b41      	ldr	r3, [pc, #260]	; (800cce8 <xTaskIncrementTick+0x154>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	4a3f      	ldr	r2, [pc, #252]	; (800cce4 <xTaskIncrementTick+0x150>)
 800cbe8:	6013      	str	r3, [r2, #0]
 800cbea:	4a3f      	ldr	r2, [pc, #252]	; (800cce8 <xTaskIncrementTick+0x154>)
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	6013      	str	r3, [r2, #0]
 800cbf0:	4b3e      	ldr	r3, [pc, #248]	; (800ccec <xTaskIncrementTick+0x158>)
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	3301      	adds	r3, #1
 800cbf6:	4a3d      	ldr	r2, [pc, #244]	; (800ccec <xTaskIncrementTick+0x158>)
 800cbf8:	6013      	str	r3, [r2, #0]
 800cbfa:	f000 fadb 	bl	800d1b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cbfe:	4b3c      	ldr	r3, [pc, #240]	; (800ccf0 <xTaskIncrementTick+0x15c>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	693a      	ldr	r2, [r7, #16]
 800cc04:	429a      	cmp	r2, r3
 800cc06:	d349      	bcc.n	800cc9c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cc08:	4b36      	ldr	r3, [pc, #216]	; (800cce4 <xTaskIncrementTick+0x150>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d104      	bne.n	800cc1c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc12:	4b37      	ldr	r3, [pc, #220]	; (800ccf0 <xTaskIncrementTick+0x15c>)
 800cc14:	f04f 32ff 	mov.w	r2, #4294967295
 800cc18:	601a      	str	r2, [r3, #0]
					break;
 800cc1a:	e03f      	b.n	800cc9c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc1c:	4b31      	ldr	r3, [pc, #196]	; (800cce4 <xTaskIncrementTick+0x150>)
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	68db      	ldr	r3, [r3, #12]
 800cc22:	68db      	ldr	r3, [r3, #12]
 800cc24:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cc26:	68bb      	ldr	r3, [r7, #8]
 800cc28:	685b      	ldr	r3, [r3, #4]
 800cc2a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cc2c:	693a      	ldr	r2, [r7, #16]
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	429a      	cmp	r2, r3
 800cc32:	d203      	bcs.n	800cc3c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cc34:	4a2e      	ldr	r2, [pc, #184]	; (800ccf0 <xTaskIncrementTick+0x15c>)
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cc3a:	e02f      	b.n	800cc9c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cc3c:	68bb      	ldr	r3, [r7, #8]
 800cc3e:	3304      	adds	r3, #4
 800cc40:	4618      	mov	r0, r3
 800cc42:	f7fe fa05 	bl	800b050 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cc46:	68bb      	ldr	r3, [r7, #8]
 800cc48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d004      	beq.n	800cc58 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cc4e:	68bb      	ldr	r3, [r7, #8]
 800cc50:	3318      	adds	r3, #24
 800cc52:	4618      	mov	r0, r3
 800cc54:	f7fe f9fc 	bl	800b050 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cc58:	68bb      	ldr	r3, [r7, #8]
 800cc5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc5c:	4b25      	ldr	r3, [pc, #148]	; (800ccf4 <xTaskIncrementTick+0x160>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	429a      	cmp	r2, r3
 800cc62:	d903      	bls.n	800cc6c <xTaskIncrementTick+0xd8>
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc68:	4a22      	ldr	r2, [pc, #136]	; (800ccf4 <xTaskIncrementTick+0x160>)
 800cc6a:	6013      	str	r3, [r2, #0]
 800cc6c:	68bb      	ldr	r3, [r7, #8]
 800cc6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc70:	4613      	mov	r3, r2
 800cc72:	009b      	lsls	r3, r3, #2
 800cc74:	4413      	add	r3, r2
 800cc76:	009b      	lsls	r3, r3, #2
 800cc78:	4a1f      	ldr	r2, [pc, #124]	; (800ccf8 <xTaskIncrementTick+0x164>)
 800cc7a:	441a      	add	r2, r3
 800cc7c:	68bb      	ldr	r3, [r7, #8]
 800cc7e:	3304      	adds	r3, #4
 800cc80:	4619      	mov	r1, r3
 800cc82:	4610      	mov	r0, r2
 800cc84:	f7fe f987 	bl	800af96 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc8c:	4b1b      	ldr	r3, [pc, #108]	; (800ccfc <xTaskIncrementTick+0x168>)
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc92:	429a      	cmp	r2, r3
 800cc94:	d3b8      	bcc.n	800cc08 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cc96:	2301      	movs	r3, #1
 800cc98:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cc9a:	e7b5      	b.n	800cc08 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cc9c:	4b17      	ldr	r3, [pc, #92]	; (800ccfc <xTaskIncrementTick+0x168>)
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cca2:	4915      	ldr	r1, [pc, #84]	; (800ccf8 <xTaskIncrementTick+0x164>)
 800cca4:	4613      	mov	r3, r2
 800cca6:	009b      	lsls	r3, r3, #2
 800cca8:	4413      	add	r3, r2
 800ccaa:	009b      	lsls	r3, r3, #2
 800ccac:	440b      	add	r3, r1
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	2b01      	cmp	r3, #1
 800ccb2:	d901      	bls.n	800ccb8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ccb8:	4b11      	ldr	r3, [pc, #68]	; (800cd00 <xTaskIncrementTick+0x16c>)
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d007      	beq.n	800ccd0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ccc0:	2301      	movs	r3, #1
 800ccc2:	617b      	str	r3, [r7, #20]
 800ccc4:	e004      	b.n	800ccd0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ccc6:	4b0f      	ldr	r3, [pc, #60]	; (800cd04 <xTaskIncrementTick+0x170>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	3301      	adds	r3, #1
 800cccc:	4a0d      	ldr	r2, [pc, #52]	; (800cd04 <xTaskIncrementTick+0x170>)
 800ccce:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ccd0:	697b      	ldr	r3, [r7, #20]
}
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	3718      	adds	r7, #24
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	bd80      	pop	{r7, pc}
 800ccda:	bf00      	nop
 800ccdc:	2400a92c 	.word	0x2400a92c
 800cce0:	2400a908 	.word	0x2400a908
 800cce4:	2400a8bc 	.word	0x2400a8bc
 800cce8:	2400a8c0 	.word	0x2400a8c0
 800ccec:	2400a91c 	.word	0x2400a91c
 800ccf0:	2400a924 	.word	0x2400a924
 800ccf4:	2400a90c 	.word	0x2400a90c
 800ccf8:	2400a434 	.word	0x2400a434
 800ccfc:	2400a430 	.word	0x2400a430
 800cd00:	2400a918 	.word	0x2400a918
 800cd04:	2400a914 	.word	0x2400a914

0800cd08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cd08:	b480      	push	{r7}
 800cd0a:	b085      	sub	sp, #20
 800cd0c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cd0e:	4b2a      	ldr	r3, [pc, #168]	; (800cdb8 <vTaskSwitchContext+0xb0>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d003      	beq.n	800cd1e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cd16:	4b29      	ldr	r3, [pc, #164]	; (800cdbc <vTaskSwitchContext+0xb4>)
 800cd18:	2201      	movs	r2, #1
 800cd1a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cd1c:	e046      	b.n	800cdac <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800cd1e:	4b27      	ldr	r3, [pc, #156]	; (800cdbc <vTaskSwitchContext+0xb4>)
 800cd20:	2200      	movs	r2, #0
 800cd22:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd24:	4b26      	ldr	r3, [pc, #152]	; (800cdc0 <vTaskSwitchContext+0xb8>)
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	60fb      	str	r3, [r7, #12]
 800cd2a:	e010      	b.n	800cd4e <vTaskSwitchContext+0x46>
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d10a      	bne.n	800cd48 <vTaskSwitchContext+0x40>
	__asm volatile
 800cd32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd36:	f383 8811 	msr	BASEPRI, r3
 800cd3a:	f3bf 8f6f 	isb	sy
 800cd3e:	f3bf 8f4f 	dsb	sy
 800cd42:	607b      	str	r3, [r7, #4]
}
 800cd44:	bf00      	nop
 800cd46:	e7fe      	b.n	800cd46 <vTaskSwitchContext+0x3e>
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	3b01      	subs	r3, #1
 800cd4c:	60fb      	str	r3, [r7, #12]
 800cd4e:	491d      	ldr	r1, [pc, #116]	; (800cdc4 <vTaskSwitchContext+0xbc>)
 800cd50:	68fa      	ldr	r2, [r7, #12]
 800cd52:	4613      	mov	r3, r2
 800cd54:	009b      	lsls	r3, r3, #2
 800cd56:	4413      	add	r3, r2
 800cd58:	009b      	lsls	r3, r3, #2
 800cd5a:	440b      	add	r3, r1
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d0e4      	beq.n	800cd2c <vTaskSwitchContext+0x24>
 800cd62:	68fa      	ldr	r2, [r7, #12]
 800cd64:	4613      	mov	r3, r2
 800cd66:	009b      	lsls	r3, r3, #2
 800cd68:	4413      	add	r3, r2
 800cd6a:	009b      	lsls	r3, r3, #2
 800cd6c:	4a15      	ldr	r2, [pc, #84]	; (800cdc4 <vTaskSwitchContext+0xbc>)
 800cd6e:	4413      	add	r3, r2
 800cd70:	60bb      	str	r3, [r7, #8]
 800cd72:	68bb      	ldr	r3, [r7, #8]
 800cd74:	685b      	ldr	r3, [r3, #4]
 800cd76:	685a      	ldr	r2, [r3, #4]
 800cd78:	68bb      	ldr	r3, [r7, #8]
 800cd7a:	605a      	str	r2, [r3, #4]
 800cd7c:	68bb      	ldr	r3, [r7, #8]
 800cd7e:	685a      	ldr	r2, [r3, #4]
 800cd80:	68bb      	ldr	r3, [r7, #8]
 800cd82:	3308      	adds	r3, #8
 800cd84:	429a      	cmp	r2, r3
 800cd86:	d104      	bne.n	800cd92 <vTaskSwitchContext+0x8a>
 800cd88:	68bb      	ldr	r3, [r7, #8]
 800cd8a:	685b      	ldr	r3, [r3, #4]
 800cd8c:	685a      	ldr	r2, [r3, #4]
 800cd8e:	68bb      	ldr	r3, [r7, #8]
 800cd90:	605a      	str	r2, [r3, #4]
 800cd92:	68bb      	ldr	r3, [r7, #8]
 800cd94:	685b      	ldr	r3, [r3, #4]
 800cd96:	68db      	ldr	r3, [r3, #12]
 800cd98:	4a0b      	ldr	r2, [pc, #44]	; (800cdc8 <vTaskSwitchContext+0xc0>)
 800cd9a:	6013      	str	r3, [r2, #0]
 800cd9c:	4a08      	ldr	r2, [pc, #32]	; (800cdc0 <vTaskSwitchContext+0xb8>)
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cda2:	4b09      	ldr	r3, [pc, #36]	; (800cdc8 <vTaskSwitchContext+0xc0>)
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	3354      	adds	r3, #84	; 0x54
 800cda8:	4a08      	ldr	r2, [pc, #32]	; (800cdcc <vTaskSwitchContext+0xc4>)
 800cdaa:	6013      	str	r3, [r2, #0]
}
 800cdac:	bf00      	nop
 800cdae:	3714      	adds	r7, #20
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb6:	4770      	bx	lr
 800cdb8:	2400a92c 	.word	0x2400a92c
 800cdbc:	2400a918 	.word	0x2400a918
 800cdc0:	2400a90c 	.word	0x2400a90c
 800cdc4:	2400a434 	.word	0x2400a434
 800cdc8:	2400a430 	.word	0x2400a430
 800cdcc:	240000cc 	.word	0x240000cc

0800cdd0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b084      	sub	sp, #16
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
 800cdd8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d10a      	bne.n	800cdf6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800cde0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cde4:	f383 8811 	msr	BASEPRI, r3
 800cde8:	f3bf 8f6f 	isb	sy
 800cdec:	f3bf 8f4f 	dsb	sy
 800cdf0:	60fb      	str	r3, [r7, #12]
}
 800cdf2:	bf00      	nop
 800cdf4:	e7fe      	b.n	800cdf4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cdf6:	4b07      	ldr	r3, [pc, #28]	; (800ce14 <vTaskPlaceOnEventList+0x44>)
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	3318      	adds	r3, #24
 800cdfc:	4619      	mov	r1, r3
 800cdfe:	6878      	ldr	r0, [r7, #4]
 800ce00:	f7fe f8ed 	bl	800afde <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ce04:	2101      	movs	r1, #1
 800ce06:	6838      	ldr	r0, [r7, #0]
 800ce08:	f000 fb7e 	bl	800d508 <prvAddCurrentTaskToDelayedList>
}
 800ce0c:	bf00      	nop
 800ce0e:	3710      	adds	r7, #16
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bd80      	pop	{r7, pc}
 800ce14:	2400a430 	.word	0x2400a430

0800ce18 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b086      	sub	sp, #24
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	60f8      	str	r0, [r7, #12]
 800ce20:	60b9      	str	r1, [r7, #8]
 800ce22:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d10a      	bne.n	800ce40 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ce2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce2e:	f383 8811 	msr	BASEPRI, r3
 800ce32:	f3bf 8f6f 	isb	sy
 800ce36:	f3bf 8f4f 	dsb	sy
 800ce3a:	617b      	str	r3, [r7, #20]
}
 800ce3c:	bf00      	nop
 800ce3e:	e7fe      	b.n	800ce3e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ce40:	4b0a      	ldr	r3, [pc, #40]	; (800ce6c <vTaskPlaceOnEventListRestricted+0x54>)
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	3318      	adds	r3, #24
 800ce46:	4619      	mov	r1, r3
 800ce48:	68f8      	ldr	r0, [r7, #12]
 800ce4a:	f7fe f8a4 	bl	800af96 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d002      	beq.n	800ce5a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ce54:	f04f 33ff 	mov.w	r3, #4294967295
 800ce58:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ce5a:	6879      	ldr	r1, [r7, #4]
 800ce5c:	68b8      	ldr	r0, [r7, #8]
 800ce5e:	f000 fb53 	bl	800d508 <prvAddCurrentTaskToDelayedList>
	}
 800ce62:	bf00      	nop
 800ce64:	3718      	adds	r7, #24
 800ce66:	46bd      	mov	sp, r7
 800ce68:	bd80      	pop	{r7, pc}
 800ce6a:	bf00      	nop
 800ce6c:	2400a430 	.word	0x2400a430

0800ce70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b086      	sub	sp, #24
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	68db      	ldr	r3, [r3, #12]
 800ce7c:	68db      	ldr	r3, [r3, #12]
 800ce7e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ce80:	693b      	ldr	r3, [r7, #16]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d10a      	bne.n	800ce9c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ce86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce8a:	f383 8811 	msr	BASEPRI, r3
 800ce8e:	f3bf 8f6f 	isb	sy
 800ce92:	f3bf 8f4f 	dsb	sy
 800ce96:	60fb      	str	r3, [r7, #12]
}
 800ce98:	bf00      	nop
 800ce9a:	e7fe      	b.n	800ce9a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ce9c:	693b      	ldr	r3, [r7, #16]
 800ce9e:	3318      	adds	r3, #24
 800cea0:	4618      	mov	r0, r3
 800cea2:	f7fe f8d5 	bl	800b050 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cea6:	4b1e      	ldr	r3, [pc, #120]	; (800cf20 <xTaskRemoveFromEventList+0xb0>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d11d      	bne.n	800ceea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ceae:	693b      	ldr	r3, [r7, #16]
 800ceb0:	3304      	adds	r3, #4
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	f7fe f8cc 	bl	800b050 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ceb8:	693b      	ldr	r3, [r7, #16]
 800ceba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cebc:	4b19      	ldr	r3, [pc, #100]	; (800cf24 <xTaskRemoveFromEventList+0xb4>)
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	429a      	cmp	r2, r3
 800cec2:	d903      	bls.n	800cecc <xTaskRemoveFromEventList+0x5c>
 800cec4:	693b      	ldr	r3, [r7, #16]
 800cec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cec8:	4a16      	ldr	r2, [pc, #88]	; (800cf24 <xTaskRemoveFromEventList+0xb4>)
 800ceca:	6013      	str	r3, [r2, #0]
 800cecc:	693b      	ldr	r3, [r7, #16]
 800cece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ced0:	4613      	mov	r3, r2
 800ced2:	009b      	lsls	r3, r3, #2
 800ced4:	4413      	add	r3, r2
 800ced6:	009b      	lsls	r3, r3, #2
 800ced8:	4a13      	ldr	r2, [pc, #76]	; (800cf28 <xTaskRemoveFromEventList+0xb8>)
 800ceda:	441a      	add	r2, r3
 800cedc:	693b      	ldr	r3, [r7, #16]
 800cede:	3304      	adds	r3, #4
 800cee0:	4619      	mov	r1, r3
 800cee2:	4610      	mov	r0, r2
 800cee4:	f7fe f857 	bl	800af96 <vListInsertEnd>
 800cee8:	e005      	b.n	800cef6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ceea:	693b      	ldr	r3, [r7, #16]
 800ceec:	3318      	adds	r3, #24
 800ceee:	4619      	mov	r1, r3
 800cef0:	480e      	ldr	r0, [pc, #56]	; (800cf2c <xTaskRemoveFromEventList+0xbc>)
 800cef2:	f7fe f850 	bl	800af96 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cef6:	693b      	ldr	r3, [r7, #16]
 800cef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cefa:	4b0d      	ldr	r3, [pc, #52]	; (800cf30 <xTaskRemoveFromEventList+0xc0>)
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf00:	429a      	cmp	r2, r3
 800cf02:	d905      	bls.n	800cf10 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cf04:	2301      	movs	r3, #1
 800cf06:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cf08:	4b0a      	ldr	r3, [pc, #40]	; (800cf34 <xTaskRemoveFromEventList+0xc4>)
 800cf0a:	2201      	movs	r2, #1
 800cf0c:	601a      	str	r2, [r3, #0]
 800cf0e:	e001      	b.n	800cf14 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800cf10:	2300      	movs	r3, #0
 800cf12:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cf14:	697b      	ldr	r3, [r7, #20]
}
 800cf16:	4618      	mov	r0, r3
 800cf18:	3718      	adds	r7, #24
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	bd80      	pop	{r7, pc}
 800cf1e:	bf00      	nop
 800cf20:	2400a92c 	.word	0x2400a92c
 800cf24:	2400a90c 	.word	0x2400a90c
 800cf28:	2400a434 	.word	0x2400a434
 800cf2c:	2400a8c4 	.word	0x2400a8c4
 800cf30:	2400a430 	.word	0x2400a430
 800cf34:	2400a918 	.word	0x2400a918

0800cf38 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cf38:	b480      	push	{r7}
 800cf3a:	b083      	sub	sp, #12
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cf40:	4b06      	ldr	r3, [pc, #24]	; (800cf5c <vTaskInternalSetTimeOutState+0x24>)
 800cf42:	681a      	ldr	r2, [r3, #0]
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cf48:	4b05      	ldr	r3, [pc, #20]	; (800cf60 <vTaskInternalSetTimeOutState+0x28>)
 800cf4a:	681a      	ldr	r2, [r3, #0]
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	605a      	str	r2, [r3, #4]
}
 800cf50:	bf00      	nop
 800cf52:	370c      	adds	r7, #12
 800cf54:	46bd      	mov	sp, r7
 800cf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5a:	4770      	bx	lr
 800cf5c:	2400a91c 	.word	0x2400a91c
 800cf60:	2400a908 	.word	0x2400a908

0800cf64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b088      	sub	sp, #32
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
 800cf6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d10a      	bne.n	800cf8a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800cf74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf78:	f383 8811 	msr	BASEPRI, r3
 800cf7c:	f3bf 8f6f 	isb	sy
 800cf80:	f3bf 8f4f 	dsb	sy
 800cf84:	613b      	str	r3, [r7, #16]
}
 800cf86:	bf00      	nop
 800cf88:	e7fe      	b.n	800cf88 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cf8a:	683b      	ldr	r3, [r7, #0]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d10a      	bne.n	800cfa6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800cf90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf94:	f383 8811 	msr	BASEPRI, r3
 800cf98:	f3bf 8f6f 	isb	sy
 800cf9c:	f3bf 8f4f 	dsb	sy
 800cfa0:	60fb      	str	r3, [r7, #12]
}
 800cfa2:	bf00      	nop
 800cfa4:	e7fe      	b.n	800cfa4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800cfa6:	f7fe f9ad 	bl	800b304 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cfaa:	4b1d      	ldr	r3, [pc, #116]	; (800d020 <xTaskCheckForTimeOut+0xbc>)
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	685b      	ldr	r3, [r3, #4]
 800cfb4:	69ba      	ldr	r2, [r7, #24]
 800cfb6:	1ad3      	subs	r3, r2, r3
 800cfb8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfc2:	d102      	bne.n	800cfca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	61fb      	str	r3, [r7, #28]
 800cfc8:	e023      	b.n	800d012 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681a      	ldr	r2, [r3, #0]
 800cfce:	4b15      	ldr	r3, [pc, #84]	; (800d024 <xTaskCheckForTimeOut+0xc0>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	429a      	cmp	r2, r3
 800cfd4:	d007      	beq.n	800cfe6 <xTaskCheckForTimeOut+0x82>
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	685b      	ldr	r3, [r3, #4]
 800cfda:	69ba      	ldr	r2, [r7, #24]
 800cfdc:	429a      	cmp	r2, r3
 800cfde:	d302      	bcc.n	800cfe6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cfe0:	2301      	movs	r3, #1
 800cfe2:	61fb      	str	r3, [r7, #28]
 800cfe4:	e015      	b.n	800d012 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	697a      	ldr	r2, [r7, #20]
 800cfec:	429a      	cmp	r2, r3
 800cfee:	d20b      	bcs.n	800d008 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	681a      	ldr	r2, [r3, #0]
 800cff4:	697b      	ldr	r3, [r7, #20]
 800cff6:	1ad2      	subs	r2, r2, r3
 800cff8:	683b      	ldr	r3, [r7, #0]
 800cffa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cffc:	6878      	ldr	r0, [r7, #4]
 800cffe:	f7ff ff9b 	bl	800cf38 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d002:	2300      	movs	r3, #0
 800d004:	61fb      	str	r3, [r7, #28]
 800d006:	e004      	b.n	800d012 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	2200      	movs	r2, #0
 800d00c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d00e:	2301      	movs	r3, #1
 800d010:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d012:	f7fe f9a7 	bl	800b364 <vPortExitCritical>

	return xReturn;
 800d016:	69fb      	ldr	r3, [r7, #28]
}
 800d018:	4618      	mov	r0, r3
 800d01a:	3720      	adds	r7, #32
 800d01c:	46bd      	mov	sp, r7
 800d01e:	bd80      	pop	{r7, pc}
 800d020:	2400a908 	.word	0x2400a908
 800d024:	2400a91c 	.word	0x2400a91c

0800d028 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d028:	b480      	push	{r7}
 800d02a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d02c:	4b03      	ldr	r3, [pc, #12]	; (800d03c <vTaskMissedYield+0x14>)
 800d02e:	2201      	movs	r2, #1
 800d030:	601a      	str	r2, [r3, #0]
}
 800d032:	bf00      	nop
 800d034:	46bd      	mov	sp, r7
 800d036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03a:	4770      	bx	lr
 800d03c:	2400a918 	.word	0x2400a918

0800d040 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b082      	sub	sp, #8
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d048:	f000 f852 	bl	800d0f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d04c:	4b06      	ldr	r3, [pc, #24]	; (800d068 <prvIdleTask+0x28>)
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	2b01      	cmp	r3, #1
 800d052:	d9f9      	bls.n	800d048 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d054:	4b05      	ldr	r3, [pc, #20]	; (800d06c <prvIdleTask+0x2c>)
 800d056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d05a:	601a      	str	r2, [r3, #0]
 800d05c:	f3bf 8f4f 	dsb	sy
 800d060:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d064:	e7f0      	b.n	800d048 <prvIdleTask+0x8>
 800d066:	bf00      	nop
 800d068:	2400a434 	.word	0x2400a434
 800d06c:	e000ed04 	.word	0xe000ed04

0800d070 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b082      	sub	sp, #8
 800d074:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d076:	2300      	movs	r3, #0
 800d078:	607b      	str	r3, [r7, #4]
 800d07a:	e00c      	b.n	800d096 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d07c:	687a      	ldr	r2, [r7, #4]
 800d07e:	4613      	mov	r3, r2
 800d080:	009b      	lsls	r3, r3, #2
 800d082:	4413      	add	r3, r2
 800d084:	009b      	lsls	r3, r3, #2
 800d086:	4a12      	ldr	r2, [pc, #72]	; (800d0d0 <prvInitialiseTaskLists+0x60>)
 800d088:	4413      	add	r3, r2
 800d08a:	4618      	mov	r0, r3
 800d08c:	f7fd ff56 	bl	800af3c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	3301      	adds	r3, #1
 800d094:	607b      	str	r3, [r7, #4]
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	2b37      	cmp	r3, #55	; 0x37
 800d09a:	d9ef      	bls.n	800d07c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d09c:	480d      	ldr	r0, [pc, #52]	; (800d0d4 <prvInitialiseTaskLists+0x64>)
 800d09e:	f7fd ff4d 	bl	800af3c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d0a2:	480d      	ldr	r0, [pc, #52]	; (800d0d8 <prvInitialiseTaskLists+0x68>)
 800d0a4:	f7fd ff4a 	bl	800af3c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d0a8:	480c      	ldr	r0, [pc, #48]	; (800d0dc <prvInitialiseTaskLists+0x6c>)
 800d0aa:	f7fd ff47 	bl	800af3c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d0ae:	480c      	ldr	r0, [pc, #48]	; (800d0e0 <prvInitialiseTaskLists+0x70>)
 800d0b0:	f7fd ff44 	bl	800af3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d0b4:	480b      	ldr	r0, [pc, #44]	; (800d0e4 <prvInitialiseTaskLists+0x74>)
 800d0b6:	f7fd ff41 	bl	800af3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d0ba:	4b0b      	ldr	r3, [pc, #44]	; (800d0e8 <prvInitialiseTaskLists+0x78>)
 800d0bc:	4a05      	ldr	r2, [pc, #20]	; (800d0d4 <prvInitialiseTaskLists+0x64>)
 800d0be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d0c0:	4b0a      	ldr	r3, [pc, #40]	; (800d0ec <prvInitialiseTaskLists+0x7c>)
 800d0c2:	4a05      	ldr	r2, [pc, #20]	; (800d0d8 <prvInitialiseTaskLists+0x68>)
 800d0c4:	601a      	str	r2, [r3, #0]
}
 800d0c6:	bf00      	nop
 800d0c8:	3708      	adds	r7, #8
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	bd80      	pop	{r7, pc}
 800d0ce:	bf00      	nop
 800d0d0:	2400a434 	.word	0x2400a434
 800d0d4:	2400a894 	.word	0x2400a894
 800d0d8:	2400a8a8 	.word	0x2400a8a8
 800d0dc:	2400a8c4 	.word	0x2400a8c4
 800d0e0:	2400a8d8 	.word	0x2400a8d8
 800d0e4:	2400a8f0 	.word	0x2400a8f0
 800d0e8:	2400a8bc 	.word	0x2400a8bc
 800d0ec:	2400a8c0 	.word	0x2400a8c0

0800d0f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b082      	sub	sp, #8
 800d0f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d0f6:	e019      	b.n	800d12c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d0f8:	f7fe f904 	bl	800b304 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0fc:	4b10      	ldr	r3, [pc, #64]	; (800d140 <prvCheckTasksWaitingTermination+0x50>)
 800d0fe:	68db      	ldr	r3, [r3, #12]
 800d100:	68db      	ldr	r3, [r3, #12]
 800d102:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	3304      	adds	r3, #4
 800d108:	4618      	mov	r0, r3
 800d10a:	f7fd ffa1 	bl	800b050 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d10e:	4b0d      	ldr	r3, [pc, #52]	; (800d144 <prvCheckTasksWaitingTermination+0x54>)
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	3b01      	subs	r3, #1
 800d114:	4a0b      	ldr	r2, [pc, #44]	; (800d144 <prvCheckTasksWaitingTermination+0x54>)
 800d116:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d118:	4b0b      	ldr	r3, [pc, #44]	; (800d148 <prvCheckTasksWaitingTermination+0x58>)
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	3b01      	subs	r3, #1
 800d11e:	4a0a      	ldr	r2, [pc, #40]	; (800d148 <prvCheckTasksWaitingTermination+0x58>)
 800d120:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d122:	f7fe f91f 	bl	800b364 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d126:	6878      	ldr	r0, [r7, #4]
 800d128:	f000 f810 	bl	800d14c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d12c:	4b06      	ldr	r3, [pc, #24]	; (800d148 <prvCheckTasksWaitingTermination+0x58>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d1e1      	bne.n	800d0f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d134:	bf00      	nop
 800d136:	bf00      	nop
 800d138:	3708      	adds	r7, #8
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bd80      	pop	{r7, pc}
 800d13e:	bf00      	nop
 800d140:	2400a8d8 	.word	0x2400a8d8
 800d144:	2400a904 	.word	0x2400a904
 800d148:	2400a8ec 	.word	0x2400a8ec

0800d14c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b084      	sub	sp, #16
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	3354      	adds	r3, #84	; 0x54
 800d158:	4618      	mov	r0, r3
 800d15a:	f01d fc77 	bl	802aa4c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d164:	2b00      	cmp	r3, #0
 800d166:	d108      	bne.n	800d17a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d16c:	4618      	mov	r0, r3
 800d16e:	f7fd fdc7 	bl	800ad00 <vPortFree>
				vPortFree( pxTCB );
 800d172:	6878      	ldr	r0, [r7, #4]
 800d174:	f7fd fdc4 	bl	800ad00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d178:	e018      	b.n	800d1ac <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d180:	2b01      	cmp	r3, #1
 800d182:	d103      	bne.n	800d18c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d184:	6878      	ldr	r0, [r7, #4]
 800d186:	f7fd fdbb 	bl	800ad00 <vPortFree>
	}
 800d18a:	e00f      	b.n	800d1ac <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d192:	2b02      	cmp	r3, #2
 800d194:	d00a      	beq.n	800d1ac <prvDeleteTCB+0x60>
	__asm volatile
 800d196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d19a:	f383 8811 	msr	BASEPRI, r3
 800d19e:	f3bf 8f6f 	isb	sy
 800d1a2:	f3bf 8f4f 	dsb	sy
 800d1a6:	60fb      	str	r3, [r7, #12]
}
 800d1a8:	bf00      	nop
 800d1aa:	e7fe      	b.n	800d1aa <prvDeleteTCB+0x5e>
	}
 800d1ac:	bf00      	nop
 800d1ae:	3710      	adds	r7, #16
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	bd80      	pop	{r7, pc}

0800d1b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d1b4:	b480      	push	{r7}
 800d1b6:	b083      	sub	sp, #12
 800d1b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d1ba:	4b0c      	ldr	r3, [pc, #48]	; (800d1ec <prvResetNextTaskUnblockTime+0x38>)
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d104      	bne.n	800d1ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d1c4:	4b0a      	ldr	r3, [pc, #40]	; (800d1f0 <prvResetNextTaskUnblockTime+0x3c>)
 800d1c6:	f04f 32ff 	mov.w	r2, #4294967295
 800d1ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d1cc:	e008      	b.n	800d1e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1ce:	4b07      	ldr	r3, [pc, #28]	; (800d1ec <prvResetNextTaskUnblockTime+0x38>)
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	68db      	ldr	r3, [r3, #12]
 800d1d4:	68db      	ldr	r3, [r3, #12]
 800d1d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	685b      	ldr	r3, [r3, #4]
 800d1dc:	4a04      	ldr	r2, [pc, #16]	; (800d1f0 <prvResetNextTaskUnblockTime+0x3c>)
 800d1de:	6013      	str	r3, [r2, #0]
}
 800d1e0:	bf00      	nop
 800d1e2:	370c      	adds	r7, #12
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ea:	4770      	bx	lr
 800d1ec:	2400a8bc 	.word	0x2400a8bc
 800d1f0:	2400a924 	.word	0x2400a924

0800d1f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d1f4:	b480      	push	{r7}
 800d1f6:	b083      	sub	sp, #12
 800d1f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d1fa:	4b0b      	ldr	r3, [pc, #44]	; (800d228 <xTaskGetSchedulerState+0x34>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d102      	bne.n	800d208 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d202:	2301      	movs	r3, #1
 800d204:	607b      	str	r3, [r7, #4]
 800d206:	e008      	b.n	800d21a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d208:	4b08      	ldr	r3, [pc, #32]	; (800d22c <xTaskGetSchedulerState+0x38>)
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d102      	bne.n	800d216 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d210:	2302      	movs	r3, #2
 800d212:	607b      	str	r3, [r7, #4]
 800d214:	e001      	b.n	800d21a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d216:	2300      	movs	r3, #0
 800d218:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d21a:	687b      	ldr	r3, [r7, #4]
	}
 800d21c:	4618      	mov	r0, r3
 800d21e:	370c      	adds	r7, #12
 800d220:	46bd      	mov	sp, r7
 800d222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d226:	4770      	bx	lr
 800d228:	2400a910 	.word	0x2400a910
 800d22c:	2400a92c 	.word	0x2400a92c

0800d230 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d230:	b580      	push	{r7, lr}
 800d232:	b084      	sub	sp, #16
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d23c:	2300      	movs	r3, #0
 800d23e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d051      	beq.n	800d2ea <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d246:	68bb      	ldr	r3, [r7, #8]
 800d248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d24a:	4b2a      	ldr	r3, [pc, #168]	; (800d2f4 <xTaskPriorityInherit+0xc4>)
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d250:	429a      	cmp	r2, r3
 800d252:	d241      	bcs.n	800d2d8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d254:	68bb      	ldr	r3, [r7, #8]
 800d256:	699b      	ldr	r3, [r3, #24]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	db06      	blt.n	800d26a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d25c:	4b25      	ldr	r3, [pc, #148]	; (800d2f4 <xTaskPriorityInherit+0xc4>)
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d262:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d266:	68bb      	ldr	r3, [r7, #8]
 800d268:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d26a:	68bb      	ldr	r3, [r7, #8]
 800d26c:	6959      	ldr	r1, [r3, #20]
 800d26e:	68bb      	ldr	r3, [r7, #8]
 800d270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d272:	4613      	mov	r3, r2
 800d274:	009b      	lsls	r3, r3, #2
 800d276:	4413      	add	r3, r2
 800d278:	009b      	lsls	r3, r3, #2
 800d27a:	4a1f      	ldr	r2, [pc, #124]	; (800d2f8 <xTaskPriorityInherit+0xc8>)
 800d27c:	4413      	add	r3, r2
 800d27e:	4299      	cmp	r1, r3
 800d280:	d122      	bne.n	800d2c8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d282:	68bb      	ldr	r3, [r7, #8]
 800d284:	3304      	adds	r3, #4
 800d286:	4618      	mov	r0, r3
 800d288:	f7fd fee2 	bl	800b050 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d28c:	4b19      	ldr	r3, [pc, #100]	; (800d2f4 <xTaskPriorityInherit+0xc4>)
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d292:	68bb      	ldr	r3, [r7, #8]
 800d294:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d29a:	4b18      	ldr	r3, [pc, #96]	; (800d2fc <xTaskPriorityInherit+0xcc>)
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	429a      	cmp	r2, r3
 800d2a0:	d903      	bls.n	800d2aa <xTaskPriorityInherit+0x7a>
 800d2a2:	68bb      	ldr	r3, [r7, #8]
 800d2a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2a6:	4a15      	ldr	r2, [pc, #84]	; (800d2fc <xTaskPriorityInherit+0xcc>)
 800d2a8:	6013      	str	r3, [r2, #0]
 800d2aa:	68bb      	ldr	r3, [r7, #8]
 800d2ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2ae:	4613      	mov	r3, r2
 800d2b0:	009b      	lsls	r3, r3, #2
 800d2b2:	4413      	add	r3, r2
 800d2b4:	009b      	lsls	r3, r3, #2
 800d2b6:	4a10      	ldr	r2, [pc, #64]	; (800d2f8 <xTaskPriorityInherit+0xc8>)
 800d2b8:	441a      	add	r2, r3
 800d2ba:	68bb      	ldr	r3, [r7, #8]
 800d2bc:	3304      	adds	r3, #4
 800d2be:	4619      	mov	r1, r3
 800d2c0:	4610      	mov	r0, r2
 800d2c2:	f7fd fe68 	bl	800af96 <vListInsertEnd>
 800d2c6:	e004      	b.n	800d2d2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d2c8:	4b0a      	ldr	r3, [pc, #40]	; (800d2f4 <xTaskPriorityInherit+0xc4>)
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2ce:	68bb      	ldr	r3, [r7, #8]
 800d2d0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d2d2:	2301      	movs	r3, #1
 800d2d4:	60fb      	str	r3, [r7, #12]
 800d2d6:	e008      	b.n	800d2ea <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d2d8:	68bb      	ldr	r3, [r7, #8]
 800d2da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d2dc:	4b05      	ldr	r3, [pc, #20]	; (800d2f4 <xTaskPriorityInherit+0xc4>)
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2e2:	429a      	cmp	r2, r3
 800d2e4:	d201      	bcs.n	800d2ea <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d2e6:	2301      	movs	r3, #1
 800d2e8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d2ea:	68fb      	ldr	r3, [r7, #12]
	}
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	3710      	adds	r7, #16
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}
 800d2f4:	2400a430 	.word	0x2400a430
 800d2f8:	2400a434 	.word	0x2400a434
 800d2fc:	2400a90c 	.word	0x2400a90c

0800d300 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d300:	b580      	push	{r7, lr}
 800d302:	b086      	sub	sp, #24
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d30c:	2300      	movs	r3, #0
 800d30e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d056      	beq.n	800d3c4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d316:	4b2e      	ldr	r3, [pc, #184]	; (800d3d0 <xTaskPriorityDisinherit+0xd0>)
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	693a      	ldr	r2, [r7, #16]
 800d31c:	429a      	cmp	r2, r3
 800d31e:	d00a      	beq.n	800d336 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d320:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d324:	f383 8811 	msr	BASEPRI, r3
 800d328:	f3bf 8f6f 	isb	sy
 800d32c:	f3bf 8f4f 	dsb	sy
 800d330:	60fb      	str	r3, [r7, #12]
}
 800d332:	bf00      	nop
 800d334:	e7fe      	b.n	800d334 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d336:	693b      	ldr	r3, [r7, #16]
 800d338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d10a      	bne.n	800d354 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d342:	f383 8811 	msr	BASEPRI, r3
 800d346:	f3bf 8f6f 	isb	sy
 800d34a:	f3bf 8f4f 	dsb	sy
 800d34e:	60bb      	str	r3, [r7, #8]
}
 800d350:	bf00      	nop
 800d352:	e7fe      	b.n	800d352 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d354:	693b      	ldr	r3, [r7, #16]
 800d356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d358:	1e5a      	subs	r2, r3, #1
 800d35a:	693b      	ldr	r3, [r7, #16]
 800d35c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d35e:	693b      	ldr	r3, [r7, #16]
 800d360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d362:	693b      	ldr	r3, [r7, #16]
 800d364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d366:	429a      	cmp	r2, r3
 800d368:	d02c      	beq.n	800d3c4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d36a:	693b      	ldr	r3, [r7, #16]
 800d36c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d128      	bne.n	800d3c4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d372:	693b      	ldr	r3, [r7, #16]
 800d374:	3304      	adds	r3, #4
 800d376:	4618      	mov	r0, r3
 800d378:	f7fd fe6a 	bl	800b050 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d37c:	693b      	ldr	r3, [r7, #16]
 800d37e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d380:	693b      	ldr	r3, [r7, #16]
 800d382:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d384:	693b      	ldr	r3, [r7, #16]
 800d386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d388:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d38c:	693b      	ldr	r3, [r7, #16]
 800d38e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d390:	693b      	ldr	r3, [r7, #16]
 800d392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d394:	4b0f      	ldr	r3, [pc, #60]	; (800d3d4 <xTaskPriorityDisinherit+0xd4>)
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	429a      	cmp	r2, r3
 800d39a:	d903      	bls.n	800d3a4 <xTaskPriorityDisinherit+0xa4>
 800d39c:	693b      	ldr	r3, [r7, #16]
 800d39e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3a0:	4a0c      	ldr	r2, [pc, #48]	; (800d3d4 <xTaskPriorityDisinherit+0xd4>)
 800d3a2:	6013      	str	r3, [r2, #0]
 800d3a4:	693b      	ldr	r3, [r7, #16]
 800d3a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3a8:	4613      	mov	r3, r2
 800d3aa:	009b      	lsls	r3, r3, #2
 800d3ac:	4413      	add	r3, r2
 800d3ae:	009b      	lsls	r3, r3, #2
 800d3b0:	4a09      	ldr	r2, [pc, #36]	; (800d3d8 <xTaskPriorityDisinherit+0xd8>)
 800d3b2:	441a      	add	r2, r3
 800d3b4:	693b      	ldr	r3, [r7, #16]
 800d3b6:	3304      	adds	r3, #4
 800d3b8:	4619      	mov	r1, r3
 800d3ba:	4610      	mov	r0, r2
 800d3bc:	f7fd fdeb 	bl	800af96 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d3c0:	2301      	movs	r3, #1
 800d3c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d3c4:	697b      	ldr	r3, [r7, #20]
	}
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	3718      	adds	r7, #24
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bd80      	pop	{r7, pc}
 800d3ce:	bf00      	nop
 800d3d0:	2400a430 	.word	0x2400a430
 800d3d4:	2400a90c 	.word	0x2400a90c
 800d3d8:	2400a434 	.word	0x2400a434

0800d3dc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b088      	sub	sp, #32
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
 800d3e4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d06a      	beq.n	800d4ca <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d3f4:	69bb      	ldr	r3, [r7, #24]
 800d3f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d10a      	bne.n	800d412 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d3fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d400:	f383 8811 	msr	BASEPRI, r3
 800d404:	f3bf 8f6f 	isb	sy
 800d408:	f3bf 8f4f 	dsb	sy
 800d40c:	60fb      	str	r3, [r7, #12]
}
 800d40e:	bf00      	nop
 800d410:	e7fe      	b.n	800d410 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d412:	69bb      	ldr	r3, [r7, #24]
 800d414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d416:	683a      	ldr	r2, [r7, #0]
 800d418:	429a      	cmp	r2, r3
 800d41a:	d902      	bls.n	800d422 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d41c:	683b      	ldr	r3, [r7, #0]
 800d41e:	61fb      	str	r3, [r7, #28]
 800d420:	e002      	b.n	800d428 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d422:	69bb      	ldr	r3, [r7, #24]
 800d424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d426:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d428:	69bb      	ldr	r3, [r7, #24]
 800d42a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d42c:	69fa      	ldr	r2, [r7, #28]
 800d42e:	429a      	cmp	r2, r3
 800d430:	d04b      	beq.n	800d4ca <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d432:	69bb      	ldr	r3, [r7, #24]
 800d434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d436:	697a      	ldr	r2, [r7, #20]
 800d438:	429a      	cmp	r2, r3
 800d43a:	d146      	bne.n	800d4ca <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d43c:	4b25      	ldr	r3, [pc, #148]	; (800d4d4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	69ba      	ldr	r2, [r7, #24]
 800d442:	429a      	cmp	r2, r3
 800d444:	d10a      	bne.n	800d45c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d44a:	f383 8811 	msr	BASEPRI, r3
 800d44e:	f3bf 8f6f 	isb	sy
 800d452:	f3bf 8f4f 	dsb	sy
 800d456:	60bb      	str	r3, [r7, #8]
}
 800d458:	bf00      	nop
 800d45a:	e7fe      	b.n	800d45a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d45c:	69bb      	ldr	r3, [r7, #24]
 800d45e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d460:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d462:	69bb      	ldr	r3, [r7, #24]
 800d464:	69fa      	ldr	r2, [r7, #28]
 800d466:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d468:	69bb      	ldr	r3, [r7, #24]
 800d46a:	699b      	ldr	r3, [r3, #24]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	db04      	blt.n	800d47a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d470:	69fb      	ldr	r3, [r7, #28]
 800d472:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d476:	69bb      	ldr	r3, [r7, #24]
 800d478:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d47a:	69bb      	ldr	r3, [r7, #24]
 800d47c:	6959      	ldr	r1, [r3, #20]
 800d47e:	693a      	ldr	r2, [r7, #16]
 800d480:	4613      	mov	r3, r2
 800d482:	009b      	lsls	r3, r3, #2
 800d484:	4413      	add	r3, r2
 800d486:	009b      	lsls	r3, r3, #2
 800d488:	4a13      	ldr	r2, [pc, #76]	; (800d4d8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d48a:	4413      	add	r3, r2
 800d48c:	4299      	cmp	r1, r3
 800d48e:	d11c      	bne.n	800d4ca <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d490:	69bb      	ldr	r3, [r7, #24]
 800d492:	3304      	adds	r3, #4
 800d494:	4618      	mov	r0, r3
 800d496:	f7fd fddb 	bl	800b050 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d49a:	69bb      	ldr	r3, [r7, #24]
 800d49c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d49e:	4b0f      	ldr	r3, [pc, #60]	; (800d4dc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	429a      	cmp	r2, r3
 800d4a4:	d903      	bls.n	800d4ae <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800d4a6:	69bb      	ldr	r3, [r7, #24]
 800d4a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4aa:	4a0c      	ldr	r2, [pc, #48]	; (800d4dc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d4ac:	6013      	str	r3, [r2, #0]
 800d4ae:	69bb      	ldr	r3, [r7, #24]
 800d4b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4b2:	4613      	mov	r3, r2
 800d4b4:	009b      	lsls	r3, r3, #2
 800d4b6:	4413      	add	r3, r2
 800d4b8:	009b      	lsls	r3, r3, #2
 800d4ba:	4a07      	ldr	r2, [pc, #28]	; (800d4d8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d4bc:	441a      	add	r2, r3
 800d4be:	69bb      	ldr	r3, [r7, #24]
 800d4c0:	3304      	adds	r3, #4
 800d4c2:	4619      	mov	r1, r3
 800d4c4:	4610      	mov	r0, r2
 800d4c6:	f7fd fd66 	bl	800af96 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d4ca:	bf00      	nop
 800d4cc:	3720      	adds	r7, #32
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bd80      	pop	{r7, pc}
 800d4d2:	bf00      	nop
 800d4d4:	2400a430 	.word	0x2400a430
 800d4d8:	2400a434 	.word	0x2400a434
 800d4dc:	2400a90c 	.word	0x2400a90c

0800d4e0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d4e0:	b480      	push	{r7}
 800d4e2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d4e4:	4b07      	ldr	r3, [pc, #28]	; (800d504 <pvTaskIncrementMutexHeldCount+0x24>)
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d004      	beq.n	800d4f6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d4ec:	4b05      	ldr	r3, [pc, #20]	; (800d504 <pvTaskIncrementMutexHeldCount+0x24>)
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d4f2:	3201      	adds	r2, #1
 800d4f4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800d4f6:	4b03      	ldr	r3, [pc, #12]	; (800d504 <pvTaskIncrementMutexHeldCount+0x24>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
	}
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d502:	4770      	bx	lr
 800d504:	2400a430 	.word	0x2400a430

0800d508 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b084      	sub	sp, #16
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
 800d510:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d512:	4b21      	ldr	r3, [pc, #132]	; (800d598 <prvAddCurrentTaskToDelayedList+0x90>)
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d518:	4b20      	ldr	r3, [pc, #128]	; (800d59c <prvAddCurrentTaskToDelayedList+0x94>)
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	3304      	adds	r3, #4
 800d51e:	4618      	mov	r0, r3
 800d520:	f7fd fd96 	bl	800b050 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d52a:	d10a      	bne.n	800d542 <prvAddCurrentTaskToDelayedList+0x3a>
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d007      	beq.n	800d542 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d532:	4b1a      	ldr	r3, [pc, #104]	; (800d59c <prvAddCurrentTaskToDelayedList+0x94>)
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	3304      	adds	r3, #4
 800d538:	4619      	mov	r1, r3
 800d53a:	4819      	ldr	r0, [pc, #100]	; (800d5a0 <prvAddCurrentTaskToDelayedList+0x98>)
 800d53c:	f7fd fd2b 	bl	800af96 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d540:	e026      	b.n	800d590 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d542:	68fa      	ldr	r2, [r7, #12]
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	4413      	add	r3, r2
 800d548:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d54a:	4b14      	ldr	r3, [pc, #80]	; (800d59c <prvAddCurrentTaskToDelayedList+0x94>)
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	68ba      	ldr	r2, [r7, #8]
 800d550:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d552:	68ba      	ldr	r2, [r7, #8]
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	429a      	cmp	r2, r3
 800d558:	d209      	bcs.n	800d56e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d55a:	4b12      	ldr	r3, [pc, #72]	; (800d5a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d55c:	681a      	ldr	r2, [r3, #0]
 800d55e:	4b0f      	ldr	r3, [pc, #60]	; (800d59c <prvAddCurrentTaskToDelayedList+0x94>)
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	3304      	adds	r3, #4
 800d564:	4619      	mov	r1, r3
 800d566:	4610      	mov	r0, r2
 800d568:	f7fd fd39 	bl	800afde <vListInsert>
}
 800d56c:	e010      	b.n	800d590 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d56e:	4b0e      	ldr	r3, [pc, #56]	; (800d5a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d570:	681a      	ldr	r2, [r3, #0]
 800d572:	4b0a      	ldr	r3, [pc, #40]	; (800d59c <prvAddCurrentTaskToDelayedList+0x94>)
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	3304      	adds	r3, #4
 800d578:	4619      	mov	r1, r3
 800d57a:	4610      	mov	r0, r2
 800d57c:	f7fd fd2f 	bl	800afde <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d580:	4b0a      	ldr	r3, [pc, #40]	; (800d5ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	68ba      	ldr	r2, [r7, #8]
 800d586:	429a      	cmp	r2, r3
 800d588:	d202      	bcs.n	800d590 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d58a:	4a08      	ldr	r2, [pc, #32]	; (800d5ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800d58c:	68bb      	ldr	r3, [r7, #8]
 800d58e:	6013      	str	r3, [r2, #0]
}
 800d590:	bf00      	nop
 800d592:	3710      	adds	r7, #16
 800d594:	46bd      	mov	sp, r7
 800d596:	bd80      	pop	{r7, pc}
 800d598:	2400a908 	.word	0x2400a908
 800d59c:	2400a430 	.word	0x2400a430
 800d5a0:	2400a8f0 	.word	0x2400a8f0
 800d5a4:	2400a8c0 	.word	0x2400a8c0
 800d5a8:	2400a8bc 	.word	0x2400a8bc
 800d5ac:	2400a924 	.word	0x2400a924

0800d5b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b08a      	sub	sp, #40	; 0x28
 800d5b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d5ba:	f000 fb07 	bl	800dbcc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d5be:	4b1c      	ldr	r3, [pc, #112]	; (800d630 <xTimerCreateTimerTask+0x80>)
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d021      	beq.n	800d60a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d5ce:	1d3a      	adds	r2, r7, #4
 800d5d0:	f107 0108 	add.w	r1, r7, #8
 800d5d4:	f107 030c 	add.w	r3, r7, #12
 800d5d8:	4618      	mov	r0, r3
 800d5da:	f7fd faab 	bl	800ab34 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d5de:	6879      	ldr	r1, [r7, #4]
 800d5e0:	68bb      	ldr	r3, [r7, #8]
 800d5e2:	68fa      	ldr	r2, [r7, #12]
 800d5e4:	9202      	str	r2, [sp, #8]
 800d5e6:	9301      	str	r3, [sp, #4]
 800d5e8:	2302      	movs	r3, #2
 800d5ea:	9300      	str	r3, [sp, #0]
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	460a      	mov	r2, r1
 800d5f0:	4910      	ldr	r1, [pc, #64]	; (800d634 <xTimerCreateTimerTask+0x84>)
 800d5f2:	4811      	ldr	r0, [pc, #68]	; (800d638 <xTimerCreateTimerTask+0x88>)
 800d5f4:	f7fe ffb6 	bl	800c564 <xTaskCreateStatic>
 800d5f8:	4603      	mov	r3, r0
 800d5fa:	4a10      	ldr	r2, [pc, #64]	; (800d63c <xTimerCreateTimerTask+0x8c>)
 800d5fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d5fe:	4b0f      	ldr	r3, [pc, #60]	; (800d63c <xTimerCreateTimerTask+0x8c>)
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d001      	beq.n	800d60a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d606:	2301      	movs	r3, #1
 800d608:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d60a:	697b      	ldr	r3, [r7, #20]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d10a      	bne.n	800d626 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d610:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d614:	f383 8811 	msr	BASEPRI, r3
 800d618:	f3bf 8f6f 	isb	sy
 800d61c:	f3bf 8f4f 	dsb	sy
 800d620:	613b      	str	r3, [r7, #16]
}
 800d622:	bf00      	nop
 800d624:	e7fe      	b.n	800d624 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d626:	697b      	ldr	r3, [r7, #20]
}
 800d628:	4618      	mov	r0, r3
 800d62a:	3718      	adds	r7, #24
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bd80      	pop	{r7, pc}
 800d630:	2400a960 	.word	0x2400a960
 800d634:	0802bf68 	.word	0x0802bf68
 800d638:	0800d775 	.word	0x0800d775
 800d63c:	2400a964 	.word	0x2400a964

0800d640 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b08a      	sub	sp, #40	; 0x28
 800d644:	af00      	add	r7, sp, #0
 800d646:	60f8      	str	r0, [r7, #12]
 800d648:	60b9      	str	r1, [r7, #8]
 800d64a:	607a      	str	r2, [r7, #4]
 800d64c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d64e:	2300      	movs	r3, #0
 800d650:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d10a      	bne.n	800d66e <xTimerGenericCommand+0x2e>
	__asm volatile
 800d658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d65c:	f383 8811 	msr	BASEPRI, r3
 800d660:	f3bf 8f6f 	isb	sy
 800d664:	f3bf 8f4f 	dsb	sy
 800d668:	623b      	str	r3, [r7, #32]
}
 800d66a:	bf00      	nop
 800d66c:	e7fe      	b.n	800d66c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d66e:	4b1a      	ldr	r3, [pc, #104]	; (800d6d8 <xTimerGenericCommand+0x98>)
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d02a      	beq.n	800d6cc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d676:	68bb      	ldr	r3, [r7, #8]
 800d678:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d682:	68bb      	ldr	r3, [r7, #8]
 800d684:	2b05      	cmp	r3, #5
 800d686:	dc18      	bgt.n	800d6ba <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d688:	f7ff fdb4 	bl	800d1f4 <xTaskGetSchedulerState>
 800d68c:	4603      	mov	r3, r0
 800d68e:	2b02      	cmp	r3, #2
 800d690:	d109      	bne.n	800d6a6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d692:	4b11      	ldr	r3, [pc, #68]	; (800d6d8 <xTimerGenericCommand+0x98>)
 800d694:	6818      	ldr	r0, [r3, #0]
 800d696:	f107 0110 	add.w	r1, r7, #16
 800d69a:	2300      	movs	r3, #0
 800d69c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d69e:	f7fe f8fb 	bl	800b898 <xQueueGenericSend>
 800d6a2:	6278      	str	r0, [r7, #36]	; 0x24
 800d6a4:	e012      	b.n	800d6cc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d6a6:	4b0c      	ldr	r3, [pc, #48]	; (800d6d8 <xTimerGenericCommand+0x98>)
 800d6a8:	6818      	ldr	r0, [r3, #0]
 800d6aa:	f107 0110 	add.w	r1, r7, #16
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	f7fe f8f1 	bl	800b898 <xQueueGenericSend>
 800d6b6:	6278      	str	r0, [r7, #36]	; 0x24
 800d6b8:	e008      	b.n	800d6cc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d6ba:	4b07      	ldr	r3, [pc, #28]	; (800d6d8 <xTimerGenericCommand+0x98>)
 800d6bc:	6818      	ldr	r0, [r3, #0]
 800d6be:	f107 0110 	add.w	r1, r7, #16
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	683a      	ldr	r2, [r7, #0]
 800d6c6:	f7fe f9e5 	bl	800ba94 <xQueueGenericSendFromISR>
 800d6ca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	3728      	adds	r7, #40	; 0x28
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	bd80      	pop	{r7, pc}
 800d6d6:	bf00      	nop
 800d6d8:	2400a960 	.word	0x2400a960

0800d6dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b088      	sub	sp, #32
 800d6e0:	af02      	add	r7, sp, #8
 800d6e2:	6078      	str	r0, [r7, #4]
 800d6e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6e6:	4b22      	ldr	r3, [pc, #136]	; (800d770 <prvProcessExpiredTimer+0x94>)
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	68db      	ldr	r3, [r3, #12]
 800d6ec:	68db      	ldr	r3, [r3, #12]
 800d6ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d6f0:	697b      	ldr	r3, [r7, #20]
 800d6f2:	3304      	adds	r3, #4
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	f7fd fcab 	bl	800b050 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d6fa:	697b      	ldr	r3, [r7, #20]
 800d6fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d700:	f003 0304 	and.w	r3, r3, #4
 800d704:	2b00      	cmp	r3, #0
 800d706:	d022      	beq.n	800d74e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d708:	697b      	ldr	r3, [r7, #20]
 800d70a:	699a      	ldr	r2, [r3, #24]
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	18d1      	adds	r1, r2, r3
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	683a      	ldr	r2, [r7, #0]
 800d714:	6978      	ldr	r0, [r7, #20]
 800d716:	f000 f8d1 	bl	800d8bc <prvInsertTimerInActiveList>
 800d71a:	4603      	mov	r3, r0
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d01f      	beq.n	800d760 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d720:	2300      	movs	r3, #0
 800d722:	9300      	str	r3, [sp, #0]
 800d724:	2300      	movs	r3, #0
 800d726:	687a      	ldr	r2, [r7, #4]
 800d728:	2100      	movs	r1, #0
 800d72a:	6978      	ldr	r0, [r7, #20]
 800d72c:	f7ff ff88 	bl	800d640 <xTimerGenericCommand>
 800d730:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d732:	693b      	ldr	r3, [r7, #16]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d113      	bne.n	800d760 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d73c:	f383 8811 	msr	BASEPRI, r3
 800d740:	f3bf 8f6f 	isb	sy
 800d744:	f3bf 8f4f 	dsb	sy
 800d748:	60fb      	str	r3, [r7, #12]
}
 800d74a:	bf00      	nop
 800d74c:	e7fe      	b.n	800d74c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d74e:	697b      	ldr	r3, [r7, #20]
 800d750:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d754:	f023 0301 	bic.w	r3, r3, #1
 800d758:	b2da      	uxtb	r2, r3
 800d75a:	697b      	ldr	r3, [r7, #20]
 800d75c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d760:	697b      	ldr	r3, [r7, #20]
 800d762:	6a1b      	ldr	r3, [r3, #32]
 800d764:	6978      	ldr	r0, [r7, #20]
 800d766:	4798      	blx	r3
}
 800d768:	bf00      	nop
 800d76a:	3718      	adds	r7, #24
 800d76c:	46bd      	mov	sp, r7
 800d76e:	bd80      	pop	{r7, pc}
 800d770:	2400a958 	.word	0x2400a958

0800d774 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b084      	sub	sp, #16
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d77c:	f107 0308 	add.w	r3, r7, #8
 800d780:	4618      	mov	r0, r3
 800d782:	f000 f857 	bl	800d834 <prvGetNextExpireTime>
 800d786:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d788:	68bb      	ldr	r3, [r7, #8]
 800d78a:	4619      	mov	r1, r3
 800d78c:	68f8      	ldr	r0, [r7, #12]
 800d78e:	f000 f803 	bl	800d798 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d792:	f000 f8d5 	bl	800d940 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d796:	e7f1      	b.n	800d77c <prvTimerTask+0x8>

0800d798 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b084      	sub	sp, #16
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
 800d7a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d7a2:	f7ff f93b 	bl	800ca1c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d7a6:	f107 0308 	add.w	r3, r7, #8
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	f000 f866 	bl	800d87c <prvSampleTimeNow>
 800d7b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d7b2:	68bb      	ldr	r3, [r7, #8]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d130      	bne.n	800d81a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d7b8:	683b      	ldr	r3, [r7, #0]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d10a      	bne.n	800d7d4 <prvProcessTimerOrBlockTask+0x3c>
 800d7be:	687a      	ldr	r2, [r7, #4]
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	429a      	cmp	r2, r3
 800d7c4:	d806      	bhi.n	800d7d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d7c6:	f7ff f937 	bl	800ca38 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d7ca:	68f9      	ldr	r1, [r7, #12]
 800d7cc:	6878      	ldr	r0, [r7, #4]
 800d7ce:	f7ff ff85 	bl	800d6dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d7d2:	e024      	b.n	800d81e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d008      	beq.n	800d7ec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d7da:	4b13      	ldr	r3, [pc, #76]	; (800d828 <prvProcessTimerOrBlockTask+0x90>)
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d101      	bne.n	800d7e8 <prvProcessTimerOrBlockTask+0x50>
 800d7e4:	2301      	movs	r3, #1
 800d7e6:	e000      	b.n	800d7ea <prvProcessTimerOrBlockTask+0x52>
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d7ec:	4b0f      	ldr	r3, [pc, #60]	; (800d82c <prvProcessTimerOrBlockTask+0x94>)
 800d7ee:	6818      	ldr	r0, [r3, #0]
 800d7f0:	687a      	ldr	r2, [r7, #4]
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	1ad3      	subs	r3, r2, r3
 800d7f6:	683a      	ldr	r2, [r7, #0]
 800d7f8:	4619      	mov	r1, r3
 800d7fa:	f7fe fe7f 	bl	800c4fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d7fe:	f7ff f91b 	bl	800ca38 <xTaskResumeAll>
 800d802:	4603      	mov	r3, r0
 800d804:	2b00      	cmp	r3, #0
 800d806:	d10a      	bne.n	800d81e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d808:	4b09      	ldr	r3, [pc, #36]	; (800d830 <prvProcessTimerOrBlockTask+0x98>)
 800d80a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d80e:	601a      	str	r2, [r3, #0]
 800d810:	f3bf 8f4f 	dsb	sy
 800d814:	f3bf 8f6f 	isb	sy
}
 800d818:	e001      	b.n	800d81e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d81a:	f7ff f90d 	bl	800ca38 <xTaskResumeAll>
}
 800d81e:	bf00      	nop
 800d820:	3710      	adds	r7, #16
 800d822:	46bd      	mov	sp, r7
 800d824:	bd80      	pop	{r7, pc}
 800d826:	bf00      	nop
 800d828:	2400a95c 	.word	0x2400a95c
 800d82c:	2400a960 	.word	0x2400a960
 800d830:	e000ed04 	.word	0xe000ed04

0800d834 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d834:	b480      	push	{r7}
 800d836:	b085      	sub	sp, #20
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d83c:	4b0e      	ldr	r3, [pc, #56]	; (800d878 <prvGetNextExpireTime+0x44>)
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d101      	bne.n	800d84a <prvGetNextExpireTime+0x16>
 800d846:	2201      	movs	r2, #1
 800d848:	e000      	b.n	800d84c <prvGetNextExpireTime+0x18>
 800d84a:	2200      	movs	r2, #0
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d105      	bne.n	800d864 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d858:	4b07      	ldr	r3, [pc, #28]	; (800d878 <prvGetNextExpireTime+0x44>)
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	68db      	ldr	r3, [r3, #12]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	60fb      	str	r3, [r7, #12]
 800d862:	e001      	b.n	800d868 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d864:	2300      	movs	r3, #0
 800d866:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d868:	68fb      	ldr	r3, [r7, #12]
}
 800d86a:	4618      	mov	r0, r3
 800d86c:	3714      	adds	r7, #20
 800d86e:	46bd      	mov	sp, r7
 800d870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d874:	4770      	bx	lr
 800d876:	bf00      	nop
 800d878:	2400a958 	.word	0x2400a958

0800d87c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b084      	sub	sp, #16
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d884:	f7ff f976 	bl	800cb74 <xTaskGetTickCount>
 800d888:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d88a:	4b0b      	ldr	r3, [pc, #44]	; (800d8b8 <prvSampleTimeNow+0x3c>)
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	68fa      	ldr	r2, [r7, #12]
 800d890:	429a      	cmp	r2, r3
 800d892:	d205      	bcs.n	800d8a0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d894:	f000 f936 	bl	800db04 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2201      	movs	r2, #1
 800d89c:	601a      	str	r2, [r3, #0]
 800d89e:	e002      	b.n	800d8a6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d8a6:	4a04      	ldr	r2, [pc, #16]	; (800d8b8 <prvSampleTimeNow+0x3c>)
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d8ac:	68fb      	ldr	r3, [r7, #12]
}
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	3710      	adds	r7, #16
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	bd80      	pop	{r7, pc}
 800d8b6:	bf00      	nop
 800d8b8:	2400a968 	.word	0x2400a968

0800d8bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b086      	sub	sp, #24
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	60f8      	str	r0, [r7, #12]
 800d8c4:	60b9      	str	r1, [r7, #8]
 800d8c6:	607a      	str	r2, [r7, #4]
 800d8c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	68ba      	ldr	r2, [r7, #8]
 800d8d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	68fa      	ldr	r2, [r7, #12]
 800d8d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d8da:	68ba      	ldr	r2, [r7, #8]
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	429a      	cmp	r2, r3
 800d8e0:	d812      	bhi.n	800d908 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8e2:	687a      	ldr	r2, [r7, #4]
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	1ad2      	subs	r2, r2, r3
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	699b      	ldr	r3, [r3, #24]
 800d8ec:	429a      	cmp	r2, r3
 800d8ee:	d302      	bcc.n	800d8f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d8f0:	2301      	movs	r3, #1
 800d8f2:	617b      	str	r3, [r7, #20]
 800d8f4:	e01b      	b.n	800d92e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d8f6:	4b10      	ldr	r3, [pc, #64]	; (800d938 <prvInsertTimerInActiveList+0x7c>)
 800d8f8:	681a      	ldr	r2, [r3, #0]
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	3304      	adds	r3, #4
 800d8fe:	4619      	mov	r1, r3
 800d900:	4610      	mov	r0, r2
 800d902:	f7fd fb6c 	bl	800afde <vListInsert>
 800d906:	e012      	b.n	800d92e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d908:	687a      	ldr	r2, [r7, #4]
 800d90a:	683b      	ldr	r3, [r7, #0]
 800d90c:	429a      	cmp	r2, r3
 800d90e:	d206      	bcs.n	800d91e <prvInsertTimerInActiveList+0x62>
 800d910:	68ba      	ldr	r2, [r7, #8]
 800d912:	683b      	ldr	r3, [r7, #0]
 800d914:	429a      	cmp	r2, r3
 800d916:	d302      	bcc.n	800d91e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d918:	2301      	movs	r3, #1
 800d91a:	617b      	str	r3, [r7, #20]
 800d91c:	e007      	b.n	800d92e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d91e:	4b07      	ldr	r3, [pc, #28]	; (800d93c <prvInsertTimerInActiveList+0x80>)
 800d920:	681a      	ldr	r2, [r3, #0]
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	3304      	adds	r3, #4
 800d926:	4619      	mov	r1, r3
 800d928:	4610      	mov	r0, r2
 800d92a:	f7fd fb58 	bl	800afde <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d92e:	697b      	ldr	r3, [r7, #20]
}
 800d930:	4618      	mov	r0, r3
 800d932:	3718      	adds	r7, #24
 800d934:	46bd      	mov	sp, r7
 800d936:	bd80      	pop	{r7, pc}
 800d938:	2400a95c 	.word	0x2400a95c
 800d93c:	2400a958 	.word	0x2400a958

0800d940 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d940:	b580      	push	{r7, lr}
 800d942:	b08e      	sub	sp, #56	; 0x38
 800d944:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d946:	e0ca      	b.n	800dade <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	da18      	bge.n	800d980 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d94e:	1d3b      	adds	r3, r7, #4
 800d950:	3304      	adds	r3, #4
 800d952:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d956:	2b00      	cmp	r3, #0
 800d958:	d10a      	bne.n	800d970 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d95a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d95e:	f383 8811 	msr	BASEPRI, r3
 800d962:	f3bf 8f6f 	isb	sy
 800d966:	f3bf 8f4f 	dsb	sy
 800d96a:	61fb      	str	r3, [r7, #28]
}
 800d96c:	bf00      	nop
 800d96e:	e7fe      	b.n	800d96e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d976:	6850      	ldr	r0, [r2, #4]
 800d978:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d97a:	6892      	ldr	r2, [r2, #8]
 800d97c:	4611      	mov	r1, r2
 800d97e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2b00      	cmp	r3, #0
 800d984:	f2c0 80aa 	blt.w	800dadc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d98e:	695b      	ldr	r3, [r3, #20]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d004      	beq.n	800d99e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d996:	3304      	adds	r3, #4
 800d998:	4618      	mov	r0, r3
 800d99a:	f7fd fb59 	bl	800b050 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d99e:	463b      	mov	r3, r7
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	f7ff ff6b 	bl	800d87c <prvSampleTimeNow>
 800d9a6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	2b09      	cmp	r3, #9
 800d9ac:	f200 8097 	bhi.w	800dade <prvProcessReceivedCommands+0x19e>
 800d9b0:	a201      	add	r2, pc, #4	; (adr r2, 800d9b8 <prvProcessReceivedCommands+0x78>)
 800d9b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9b6:	bf00      	nop
 800d9b8:	0800d9e1 	.word	0x0800d9e1
 800d9bc:	0800d9e1 	.word	0x0800d9e1
 800d9c0:	0800d9e1 	.word	0x0800d9e1
 800d9c4:	0800da55 	.word	0x0800da55
 800d9c8:	0800da69 	.word	0x0800da69
 800d9cc:	0800dab3 	.word	0x0800dab3
 800d9d0:	0800d9e1 	.word	0x0800d9e1
 800d9d4:	0800d9e1 	.word	0x0800d9e1
 800d9d8:	0800da55 	.word	0x0800da55
 800d9dc:	0800da69 	.word	0x0800da69
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d9e6:	f043 0301 	orr.w	r3, r3, #1
 800d9ea:	b2da      	uxtb	r2, r3
 800d9ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d9f2:	68ba      	ldr	r2, [r7, #8]
 800d9f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9f6:	699b      	ldr	r3, [r3, #24]
 800d9f8:	18d1      	adds	r1, r2, r3
 800d9fa:	68bb      	ldr	r3, [r7, #8]
 800d9fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da00:	f7ff ff5c 	bl	800d8bc <prvInsertTimerInActiveList>
 800da04:	4603      	mov	r3, r0
 800da06:	2b00      	cmp	r3, #0
 800da08:	d069      	beq.n	800dade <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800da0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da0c:	6a1b      	ldr	r3, [r3, #32]
 800da0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da10:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800da12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da18:	f003 0304 	and.w	r3, r3, #4
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d05e      	beq.n	800dade <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800da20:	68ba      	ldr	r2, [r7, #8]
 800da22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da24:	699b      	ldr	r3, [r3, #24]
 800da26:	441a      	add	r2, r3
 800da28:	2300      	movs	r3, #0
 800da2a:	9300      	str	r3, [sp, #0]
 800da2c:	2300      	movs	r3, #0
 800da2e:	2100      	movs	r1, #0
 800da30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da32:	f7ff fe05 	bl	800d640 <xTimerGenericCommand>
 800da36:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800da38:	6a3b      	ldr	r3, [r7, #32]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d14f      	bne.n	800dade <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800da3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da42:	f383 8811 	msr	BASEPRI, r3
 800da46:	f3bf 8f6f 	isb	sy
 800da4a:	f3bf 8f4f 	dsb	sy
 800da4e:	61bb      	str	r3, [r7, #24]
}
 800da50:	bf00      	nop
 800da52:	e7fe      	b.n	800da52 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800da54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da5a:	f023 0301 	bic.w	r3, r3, #1
 800da5e:	b2da      	uxtb	r2, r3
 800da60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800da66:	e03a      	b.n	800dade <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800da68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800da6e:	f043 0301 	orr.w	r3, r3, #1
 800da72:	b2da      	uxtb	r2, r3
 800da74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800da7a:	68ba      	ldr	r2, [r7, #8]
 800da7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da7e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800da80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da82:	699b      	ldr	r3, [r3, #24]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d10a      	bne.n	800da9e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800da88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da8c:	f383 8811 	msr	BASEPRI, r3
 800da90:	f3bf 8f6f 	isb	sy
 800da94:	f3bf 8f4f 	dsb	sy
 800da98:	617b      	str	r3, [r7, #20]
}
 800da9a:	bf00      	nop
 800da9c:	e7fe      	b.n	800da9c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800da9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daa0:	699a      	ldr	r2, [r3, #24]
 800daa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daa4:	18d1      	adds	r1, r2, r3
 800daa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800daaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800daac:	f7ff ff06 	bl	800d8bc <prvInsertTimerInActiveList>
					break;
 800dab0:	e015      	b.n	800dade <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800dab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dab4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dab8:	f003 0302 	and.w	r3, r3, #2
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d103      	bne.n	800dac8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800dac0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dac2:	f7fd f91d 	bl	800ad00 <vPortFree>
 800dac6:	e00a      	b.n	800dade <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dace:	f023 0301 	bic.w	r3, r3, #1
 800dad2:	b2da      	uxtb	r2, r3
 800dad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dad6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800dada:	e000      	b.n	800dade <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800dadc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dade:	4b08      	ldr	r3, [pc, #32]	; (800db00 <prvProcessReceivedCommands+0x1c0>)
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	1d39      	adds	r1, r7, #4
 800dae4:	2200      	movs	r2, #0
 800dae6:	4618      	mov	r0, r3
 800dae8:	f7fe f8fc 	bl	800bce4 <xQueueReceive>
 800daec:	4603      	mov	r3, r0
 800daee:	2b00      	cmp	r3, #0
 800daf0:	f47f af2a 	bne.w	800d948 <prvProcessReceivedCommands+0x8>
	}
}
 800daf4:	bf00      	nop
 800daf6:	bf00      	nop
 800daf8:	3730      	adds	r7, #48	; 0x30
 800dafa:	46bd      	mov	sp, r7
 800dafc:	bd80      	pop	{r7, pc}
 800dafe:	bf00      	nop
 800db00:	2400a960 	.word	0x2400a960

0800db04 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b088      	sub	sp, #32
 800db08:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800db0a:	e048      	b.n	800db9e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800db0c:	4b2d      	ldr	r3, [pc, #180]	; (800dbc4 <prvSwitchTimerLists+0xc0>)
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	68db      	ldr	r3, [r3, #12]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db16:	4b2b      	ldr	r3, [pc, #172]	; (800dbc4 <prvSwitchTimerLists+0xc0>)
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	68db      	ldr	r3, [r3, #12]
 800db1c:	68db      	ldr	r3, [r3, #12]
 800db1e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	3304      	adds	r3, #4
 800db24:	4618      	mov	r0, r3
 800db26:	f7fd fa93 	bl	800b050 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	6a1b      	ldr	r3, [r3, #32]
 800db2e:	68f8      	ldr	r0, [r7, #12]
 800db30:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800db38:	f003 0304 	and.w	r3, r3, #4
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d02e      	beq.n	800db9e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	699b      	ldr	r3, [r3, #24]
 800db44:	693a      	ldr	r2, [r7, #16]
 800db46:	4413      	add	r3, r2
 800db48:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800db4a:	68ba      	ldr	r2, [r7, #8]
 800db4c:	693b      	ldr	r3, [r7, #16]
 800db4e:	429a      	cmp	r2, r3
 800db50:	d90e      	bls.n	800db70 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	68ba      	ldr	r2, [r7, #8]
 800db56:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	68fa      	ldr	r2, [r7, #12]
 800db5c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800db5e:	4b19      	ldr	r3, [pc, #100]	; (800dbc4 <prvSwitchTimerLists+0xc0>)
 800db60:	681a      	ldr	r2, [r3, #0]
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	3304      	adds	r3, #4
 800db66:	4619      	mov	r1, r3
 800db68:	4610      	mov	r0, r2
 800db6a:	f7fd fa38 	bl	800afde <vListInsert>
 800db6e:	e016      	b.n	800db9e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800db70:	2300      	movs	r3, #0
 800db72:	9300      	str	r3, [sp, #0]
 800db74:	2300      	movs	r3, #0
 800db76:	693a      	ldr	r2, [r7, #16]
 800db78:	2100      	movs	r1, #0
 800db7a:	68f8      	ldr	r0, [r7, #12]
 800db7c:	f7ff fd60 	bl	800d640 <xTimerGenericCommand>
 800db80:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d10a      	bne.n	800db9e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800db88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db8c:	f383 8811 	msr	BASEPRI, r3
 800db90:	f3bf 8f6f 	isb	sy
 800db94:	f3bf 8f4f 	dsb	sy
 800db98:	603b      	str	r3, [r7, #0]
}
 800db9a:	bf00      	nop
 800db9c:	e7fe      	b.n	800db9c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800db9e:	4b09      	ldr	r3, [pc, #36]	; (800dbc4 <prvSwitchTimerLists+0xc0>)
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d1b1      	bne.n	800db0c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800dba8:	4b06      	ldr	r3, [pc, #24]	; (800dbc4 <prvSwitchTimerLists+0xc0>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800dbae:	4b06      	ldr	r3, [pc, #24]	; (800dbc8 <prvSwitchTimerLists+0xc4>)
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	4a04      	ldr	r2, [pc, #16]	; (800dbc4 <prvSwitchTimerLists+0xc0>)
 800dbb4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800dbb6:	4a04      	ldr	r2, [pc, #16]	; (800dbc8 <prvSwitchTimerLists+0xc4>)
 800dbb8:	697b      	ldr	r3, [r7, #20]
 800dbba:	6013      	str	r3, [r2, #0]
}
 800dbbc:	bf00      	nop
 800dbbe:	3718      	adds	r7, #24
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	bd80      	pop	{r7, pc}
 800dbc4:	2400a958 	.word	0x2400a958
 800dbc8:	2400a95c 	.word	0x2400a95c

0800dbcc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b082      	sub	sp, #8
 800dbd0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800dbd2:	f7fd fb97 	bl	800b304 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800dbd6:	4b15      	ldr	r3, [pc, #84]	; (800dc2c <prvCheckForValidListAndQueue+0x60>)
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d120      	bne.n	800dc20 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800dbde:	4814      	ldr	r0, [pc, #80]	; (800dc30 <prvCheckForValidListAndQueue+0x64>)
 800dbe0:	f7fd f9ac 	bl	800af3c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800dbe4:	4813      	ldr	r0, [pc, #76]	; (800dc34 <prvCheckForValidListAndQueue+0x68>)
 800dbe6:	f7fd f9a9 	bl	800af3c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800dbea:	4b13      	ldr	r3, [pc, #76]	; (800dc38 <prvCheckForValidListAndQueue+0x6c>)
 800dbec:	4a10      	ldr	r2, [pc, #64]	; (800dc30 <prvCheckForValidListAndQueue+0x64>)
 800dbee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800dbf0:	4b12      	ldr	r3, [pc, #72]	; (800dc3c <prvCheckForValidListAndQueue+0x70>)
 800dbf2:	4a10      	ldr	r2, [pc, #64]	; (800dc34 <prvCheckForValidListAndQueue+0x68>)
 800dbf4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	9300      	str	r3, [sp, #0]
 800dbfa:	4b11      	ldr	r3, [pc, #68]	; (800dc40 <prvCheckForValidListAndQueue+0x74>)
 800dbfc:	4a11      	ldr	r2, [pc, #68]	; (800dc44 <prvCheckForValidListAndQueue+0x78>)
 800dbfe:	2110      	movs	r1, #16
 800dc00:	200a      	movs	r0, #10
 800dc02:	f7fd fd09 	bl	800b618 <xQueueGenericCreateStatic>
 800dc06:	4603      	mov	r3, r0
 800dc08:	4a08      	ldr	r2, [pc, #32]	; (800dc2c <prvCheckForValidListAndQueue+0x60>)
 800dc0a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800dc0c:	4b07      	ldr	r3, [pc, #28]	; (800dc2c <prvCheckForValidListAndQueue+0x60>)
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d005      	beq.n	800dc20 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800dc14:	4b05      	ldr	r3, [pc, #20]	; (800dc2c <prvCheckForValidListAndQueue+0x60>)
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	490b      	ldr	r1, [pc, #44]	; (800dc48 <prvCheckForValidListAndQueue+0x7c>)
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	f7fe fc1a 	bl	800c454 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dc20:	f7fd fba0 	bl	800b364 <vPortExitCritical>
}
 800dc24:	bf00      	nop
 800dc26:	46bd      	mov	sp, r7
 800dc28:	bd80      	pop	{r7, pc}
 800dc2a:	bf00      	nop
 800dc2c:	2400a960 	.word	0x2400a960
 800dc30:	2400a930 	.word	0x2400a930
 800dc34:	2400a944 	.word	0x2400a944
 800dc38:	2400a958 	.word	0x2400a958
 800dc3c:	2400a95c 	.word	0x2400a95c
 800dc40:	2400aa0c 	.word	0x2400aa0c
 800dc44:	2400a96c 	.word	0x2400a96c
 800dc48:	0802bf70 	.word	0x0802bf70

0800dc4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800dc4c:	b480      	push	{r7}
 800dc4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800dc50:	4b3f      	ldr	r3, [pc, #252]	; (800dd50 <SystemInit+0x104>)
 800dc52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dc56:	4a3e      	ldr	r2, [pc, #248]	; (800dd50 <SystemInit+0x104>)
 800dc58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800dc5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800dc60:	4b3b      	ldr	r3, [pc, #236]	; (800dd50 <SystemInit+0x104>)
 800dc62:	691b      	ldr	r3, [r3, #16]
 800dc64:	4a3a      	ldr	r2, [pc, #232]	; (800dd50 <SystemInit+0x104>)
 800dc66:	f043 0310 	orr.w	r3, r3, #16
 800dc6a:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800dc6c:	4b39      	ldr	r3, [pc, #228]	; (800dd54 <SystemInit+0x108>)
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	f003 030f 	and.w	r3, r3, #15
 800dc74:	2b06      	cmp	r3, #6
 800dc76:	d807      	bhi.n	800dc88 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800dc78:	4b36      	ldr	r3, [pc, #216]	; (800dd54 <SystemInit+0x108>)
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	f023 030f 	bic.w	r3, r3, #15
 800dc80:	4a34      	ldr	r2, [pc, #208]	; (800dd54 <SystemInit+0x108>)
 800dc82:	f043 0307 	orr.w	r3, r3, #7
 800dc86:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800dc88:	4b33      	ldr	r3, [pc, #204]	; (800dd58 <SystemInit+0x10c>)
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	4a32      	ldr	r2, [pc, #200]	; (800dd58 <SystemInit+0x10c>)
 800dc8e:	f043 0301 	orr.w	r3, r3, #1
 800dc92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800dc94:	4b30      	ldr	r3, [pc, #192]	; (800dd58 <SystemInit+0x10c>)
 800dc96:	2200      	movs	r2, #0
 800dc98:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800dc9a:	4b2f      	ldr	r3, [pc, #188]	; (800dd58 <SystemInit+0x10c>)
 800dc9c:	681a      	ldr	r2, [r3, #0]
 800dc9e:	492e      	ldr	r1, [pc, #184]	; (800dd58 <SystemInit+0x10c>)
 800dca0:	4b2e      	ldr	r3, [pc, #184]	; (800dd5c <SystemInit+0x110>)
 800dca2:	4013      	ands	r3, r2
 800dca4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800dca6:	4b2b      	ldr	r3, [pc, #172]	; (800dd54 <SystemInit+0x108>)
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	f003 0308 	and.w	r3, r3, #8
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d007      	beq.n	800dcc2 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800dcb2:	4b28      	ldr	r3, [pc, #160]	; (800dd54 <SystemInit+0x108>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	f023 030f 	bic.w	r3, r3, #15
 800dcba:	4a26      	ldr	r2, [pc, #152]	; (800dd54 <SystemInit+0x108>)
 800dcbc:	f043 0307 	orr.w	r3, r3, #7
 800dcc0:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800dcc2:	4b25      	ldr	r3, [pc, #148]	; (800dd58 <SystemInit+0x10c>)
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800dcc8:	4b23      	ldr	r3, [pc, #140]	; (800dd58 <SystemInit+0x10c>)
 800dcca:	2200      	movs	r2, #0
 800dccc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800dcce:	4b22      	ldr	r3, [pc, #136]	; (800dd58 <SystemInit+0x10c>)
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800dcd4:	4b20      	ldr	r3, [pc, #128]	; (800dd58 <SystemInit+0x10c>)
 800dcd6:	4a22      	ldr	r2, [pc, #136]	; (800dd60 <SystemInit+0x114>)
 800dcd8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800dcda:	4b1f      	ldr	r3, [pc, #124]	; (800dd58 <SystemInit+0x10c>)
 800dcdc:	4a21      	ldr	r2, [pc, #132]	; (800dd64 <SystemInit+0x118>)
 800dcde:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800dce0:	4b1d      	ldr	r3, [pc, #116]	; (800dd58 <SystemInit+0x10c>)
 800dce2:	4a21      	ldr	r2, [pc, #132]	; (800dd68 <SystemInit+0x11c>)
 800dce4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800dce6:	4b1c      	ldr	r3, [pc, #112]	; (800dd58 <SystemInit+0x10c>)
 800dce8:	2200      	movs	r2, #0
 800dcea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800dcec:	4b1a      	ldr	r3, [pc, #104]	; (800dd58 <SystemInit+0x10c>)
 800dcee:	4a1e      	ldr	r2, [pc, #120]	; (800dd68 <SystemInit+0x11c>)
 800dcf0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800dcf2:	4b19      	ldr	r3, [pc, #100]	; (800dd58 <SystemInit+0x10c>)
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800dcf8:	4b17      	ldr	r3, [pc, #92]	; (800dd58 <SystemInit+0x10c>)
 800dcfa:	4a1b      	ldr	r2, [pc, #108]	; (800dd68 <SystemInit+0x11c>)
 800dcfc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800dcfe:	4b16      	ldr	r3, [pc, #88]	; (800dd58 <SystemInit+0x10c>)
 800dd00:	2200      	movs	r2, #0
 800dd02:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800dd04:	4b14      	ldr	r3, [pc, #80]	; (800dd58 <SystemInit+0x10c>)
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	4a13      	ldr	r2, [pc, #76]	; (800dd58 <SystemInit+0x10c>)
 800dd0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800dd0e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800dd10:	4b11      	ldr	r3, [pc, #68]	; (800dd58 <SystemInit+0x10c>)
 800dd12:	2200      	movs	r2, #0
 800dd14:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800dd16:	4b15      	ldr	r3, [pc, #84]	; (800dd6c <SystemInit+0x120>)
 800dd18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd1a:	4a14      	ldr	r2, [pc, #80]	; (800dd6c <SystemInit+0x120>)
 800dd1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800dd20:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800dd22:	4b13      	ldr	r3, [pc, #76]	; (800dd70 <SystemInit+0x124>)
 800dd24:	681a      	ldr	r2, [r3, #0]
 800dd26:	4b13      	ldr	r3, [pc, #76]	; (800dd74 <SystemInit+0x128>)
 800dd28:	4013      	ands	r3, r2
 800dd2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dd2e:	d202      	bcs.n	800dd36 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800dd30:	4b11      	ldr	r3, [pc, #68]	; (800dd78 <SystemInit+0x12c>)
 800dd32:	2201      	movs	r2, #1
 800dd34:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800dd36:	4b11      	ldr	r3, [pc, #68]	; (800dd7c <SystemInit+0x130>)
 800dd38:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800dd3c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800dd3e:	4b04      	ldr	r3, [pc, #16]	; (800dd50 <SystemInit+0x104>)
 800dd40:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800dd44:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800dd46:	bf00      	nop
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4e:	4770      	bx	lr
 800dd50:	e000ed00 	.word	0xe000ed00
 800dd54:	52002000 	.word	0x52002000
 800dd58:	58024400 	.word	0x58024400
 800dd5c:	eaf6ed7f 	.word	0xeaf6ed7f
 800dd60:	02020200 	.word	0x02020200
 800dd64:	01ff0000 	.word	0x01ff0000
 800dd68:	01010280 	.word	0x01010280
 800dd6c:	580000c0 	.word	0x580000c0
 800dd70:	5c001000 	.word	0x5c001000
 800dd74:	ffff0000 	.word	0xffff0000
 800dd78:	51008108 	.word	0x51008108
 800dd7c:	52004000 	.word	0x52004000

0800dd80 <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b084      	sub	sp, #16
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
 800dd88:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d103      	bne.n	800dd98 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 800dd90:	f04f 33ff 	mov.w	r3, #4294967295
 800dd94:	60fb      	str	r3, [r7, #12]
 800dd96:	e02c      	b.n	800ddf2 <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800dd98:	683b      	ldr	r3, [r7, #0]
 800dd9a:	681a      	ldr	r2, [r3, #0]
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800dda0:	683b      	ldr	r3, [r7, #0]
 800dda2:	685a      	ldr	r2, [r3, #4]
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 800dda8:	683b      	ldr	r3, [r7, #0]
 800ddaa:	891a      	ldrh	r2, [r3, #8]
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800ddb0:	683b      	ldr	r3, [r7, #0]
 800ddb2:	68da      	ldr	r2, [r3, #12]
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800ddb8:	683b      	ldr	r3, [r7, #0]
 800ddba:	691a      	ldr	r2, [r3, #16]
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	695a      	ldr	r2, [r3, #20]
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	4a0c      	ldr	r2, [pc, #48]	; (800ddfc <FT5336_RegisterBusIO+0x7c>)
 800ddcc:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	4a0b      	ldr	r2, [pc, #44]	; (800de00 <FT5336_RegisterBusIO+0x80>)
 800ddd2:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	687a      	ldr	r2, [r7, #4]
 800ddd8:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d004      	beq.n	800ddec <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	4798      	blx	r3
 800dde8:	60f8      	str	r0, [r7, #12]
 800ddea:	e002      	b.n	800ddf2 <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 800ddec:	f04f 33ff 	mov.w	r3, #4294967295
 800ddf0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800ddf2:	68fb      	ldr	r3, [r7, #12]
}
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	3710      	adds	r7, #16
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	bd80      	pop	{r7, pc}
 800ddfc:	0800e207 	.word	0x0800e207
 800de00:	0800e23b 	.word	0x0800e23b

0800de04 <FT5336_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to FT5336 sensor capabilities
  * @retval Component status
  */
int32_t FT5336_GetCapabilities(FT5336_Object_t *pObj, FT5336_Capabilities_t *Capabilities)
{
 800de04:	b480      	push	{r7}
 800de06:	b083      	sub	sp, #12
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
 800de0c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 800de0e:	683b      	ldr	r3, [r7, #0]
 800de10:	2201      	movs	r2, #1
 800de12:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 1;
 800de14:	683b      	ldr	r3, [r7, #0]
 800de16:	2201      	movs	r2, #1
 800de18:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 800de1a:	683b      	ldr	r3, [r7, #0]
 800de1c:	2205      	movs	r2, #5
 800de1e:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 800de20:	683b      	ldr	r3, [r7, #0]
 800de22:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800de26:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 800de28:	683b      	ldr	r3, [r7, #0]
 800de2a:	f44f 7288 	mov.w	r2, #272	; 0x110
 800de2e:	609a      	str	r2, [r3, #8]

  return FT5336_OK;
 800de30:	2300      	movs	r3, #0
}
 800de32:	4618      	mov	r0, r3
 800de34:	370c      	adds	r7, #12
 800de36:	46bd      	mov	sp, r7
 800de38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3c:	4770      	bx	lr

0800de3e <FT5336_Init>:
  * @param  pObj Component object pointer
  * @param  GestureInit: Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_Init(FT5336_Object_t *pObj)
{
 800de3e:	b580      	push	{r7, lr}
 800de40:	b084      	sub	sp, #16
 800de42:	af00      	add	r7, sp, #0
 800de44:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 800de46:	2300      	movs	r3, #0
 800de48:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 0U)
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800de50:	2b00      	cmp	r3, #0
 800de52:	d10d      	bne.n	800de70 <FT5336_Init+0x32>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	4798      	blx	r3
    /* This is called internal calibration of the touch screen                 */
    ret += FT5336_TS_Calibration(pObj);
#endif /* (FT5336_AUTO_CALIBRATION_ENABLED == 1) */
    /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
    /* Note TS_INT is active low                                                                      */
    ret += FT5336_DisableIT(pObj);
 800de5a:	6878      	ldr	r0, [r7, #4]
 800de5c:	f000 f98e 	bl	800e17c <FT5336_DisableIT>
 800de60:	4602      	mov	r2, r0
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	4413      	add	r3, r2
 800de66:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 1;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	2201      	movs	r2, #1
 800de6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  if(ret != FT5336_OK)
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d002      	beq.n	800de7c <FT5336_Init+0x3e>
  {
    ret = FT5336_ERROR;
 800de76:	f04f 33ff 	mov.w	r3, #4294967295
 800de7a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800de7c:	68fb      	ldr	r3, [r7, #12]
}
 800de7e:	4618      	mov	r0, r3
 800de80:	3710      	adds	r7, #16
 800de82:	46bd      	mov	sp, r7
 800de84:	bd80      	pop	{r7, pc}

0800de86 <FT5336_DeInit>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval FT5336_OK
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
 800de86:	b480      	push	{r7}
 800de88:	b085      	sub	sp, #20
 800de8a:	af00      	add	r7, sp, #0
 800de8c:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 800de8e:	2300      	movs	r3, #0
 800de90:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 1U)
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800de98:	2b01      	cmp	r3, #1
 800de9a:	d103      	bne.n	800dea4 <FT5336_DeInit+0x1e>
  {
    pObj->IsInitialized = 0;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	2200      	movs	r2, #0
 800dea0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return ret;
 800dea4:	68fb      	ldr	r3, [r7, #12]
}
 800dea6:	4618      	mov	r0, r3
 800dea8:	3714      	adds	r7, #20
 800deaa:	46bd      	mov	sp, r7
 800deac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb0:	4770      	bx	lr

0800deb2 <FT5336_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_GestureConfig(FT5336_Object_t *pObj, FT5336_Gesture_Init_t *GestureInit)
{
 800deb2:	b580      	push	{r7, lr}
 800deb4:	b084      	sub	sp, #16
 800deb6:	af00      	add	r7, sp, #0
 800deb8:	6078      	str	r0, [r7, #4]
 800deba:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	f103 0218 	add.w	r2, r3, #24
 800dec2:	683b      	ldr	r3, [r7, #0]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	b2db      	uxtb	r3, r3
 800dec8:	4619      	mov	r1, r3
 800deca:	4610      	mov	r0, r2
 800decc:	f000 fa2c 	bl	800e328 <ft5336_radian_value>
 800ded0:	60f8      	str	r0, [r7, #12]
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	f103 0218 	add.w	r2, r3, #24
 800ded8:	683b      	ldr	r3, [r7, #0]
 800deda:	685b      	ldr	r3, [r3, #4]
 800dedc:	b2db      	uxtb	r3, r3
 800dede:	4619      	mov	r1, r3
 800dee0:	4610      	mov	r0, r2
 800dee2:	f000 fa32 	bl	800e34a <ft5336_offset_left_right>
 800dee6:	4602      	mov	r2, r0
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	4413      	add	r3, r2
 800deec:	60fb      	str	r3, [r7, #12]
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	f103 0218 	add.w	r2, r3, #24
 800def4:	683b      	ldr	r3, [r7, #0]
 800def6:	689b      	ldr	r3, [r3, #8]
 800def8:	b2db      	uxtb	r3, r3
 800defa:	4619      	mov	r1, r3
 800defc:	4610      	mov	r0, r2
 800defe:	f000 fa35 	bl	800e36c <ft5336_offset_up_down>
 800df02:	4602      	mov	r2, r0
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	4413      	add	r3, r2
 800df08:	60fb      	str	r3, [r7, #12]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	f103 0218 	add.w	r2, r3, #24
 800df10:	683b      	ldr	r3, [r7, #0]
 800df12:	68db      	ldr	r3, [r3, #12]
 800df14:	b2db      	uxtb	r3, r3
 800df16:	4619      	mov	r1, r3
 800df18:	4610      	mov	r0, r2
 800df1a:	f000 fa38 	bl	800e38e <ft5336_disatnce_left_right>
 800df1e:	4602      	mov	r2, r0
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	4413      	add	r3, r2
 800df24:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	f103 0218 	add.w	r2, r3, #24
 800df2c:	683b      	ldr	r3, [r7, #0]
 800df2e:	691b      	ldr	r3, [r3, #16]
 800df30:	b2db      	uxtb	r3, r3
 800df32:	4619      	mov	r1, r3
 800df34:	4610      	mov	r0, r2
 800df36:	f000 fa3b 	bl	800e3b0 <ft5336_distance_up_down>
 800df3a:	4602      	mov	r2, r0
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	4413      	add	r3, r2
 800df40:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	f103 0218 	add.w	r2, r3, #24
 800df48:	683b      	ldr	r3, [r7, #0]
 800df4a:	695b      	ldr	r3, [r3, #20]
 800df4c:	b2db      	uxtb	r3, r3
 800df4e:	4619      	mov	r1, r3
 800df50:	4610      	mov	r0, r2
 800df52:	f000 fa3e 	bl	800e3d2 <ft5336_distance_zoom>
 800df56:	4602      	mov	r2, r0
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	4413      	add	r3, r2
 800df5c:	60fb      	str	r3, [r7, #12]

  if(ret != FT5336_OK)
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d002      	beq.n	800df6a <FT5336_GestureConfig+0xb8>
  {
    ret = FT5336_ERROR;
 800df64:	f04f 33ff 	mov.w	r3, #4294967295
 800df68:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800df6a:	68fb      	ldr	r3, [r7, #12]
}
 800df6c:	4618      	mov	r0, r3
 800df6e:	3710      	adds	r7, #16
 800df70:	46bd      	mov	sp, r7
 800df72:	bd80      	pop	{r7, pc}

0800df74 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b082      	sub	sp, #8
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
 800df7c:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	3318      	adds	r3, #24
 800df82:	6839      	ldr	r1, [r7, #0]
 800df84:	4618      	mov	r0, r3
 800df86:	f000 fa46 	bl	800e416 <ft5336_chip_id>
 800df8a:	4603      	mov	r3, r0
}
 800df8c:	4618      	mov	r0, r3
 800df8e:	3708      	adds	r7, #8
 800df90:	46bd      	mov	sp, r7
 800df92:	bd80      	pop	{r7, pc}

0800df94 <FT5336_GetState>:
  * @param  pObj Component object pointer
  * @param  State: Single Touch stucture pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetState(FT5336_Object_t *pObj, FT5336_State_t *State)
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b084      	sub	sp, #16
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
 800df9c:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 800df9e:	2300      	movs	r3, #0
 800dfa0:	60fb      	str	r3, [r7, #12]
  uint8_t  data[4];

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 800dfa2:	6878      	ldr	r0, [r7, #4]
 800dfa4:	f000 f90f 	bl	800e1c6 <FT5336_DetectTouch>
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	461a      	mov	r2, r3
 800dfac:	683b      	ldr	r3, [r7, #0]
 800dfae:	601a      	str	r2, [r3, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	f103 0018 	add.w	r0, r3, #24
 800dfb6:	f107 0208 	add.w	r2, r7, #8
 800dfba:	2304      	movs	r3, #4
 800dfbc:	2103      	movs	r1, #3
 800dfbe:	f000 f956 	bl	800e26e <ft5336_read_reg>
 800dfc2:	4603      	mov	r3, r0
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d003      	beq.n	800dfd0 <FT5336_GetState+0x3c>
  {
    ret = FT5336_ERROR;
 800dfc8:	f04f 33ff 	mov.w	r3, #4294967295
 800dfcc:	60fb      	str	r3, [r7, #12]
 800dfce:	e00f      	b.n	800dff0 <FT5336_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 800dfd0:	7a3b      	ldrb	r3, [r7, #8]
 800dfd2:	021b      	lsls	r3, r3, #8
 800dfd4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800dfd8:	7a7a      	ldrb	r2, [r7, #9]
 800dfda:	431a      	orrs	r2, r3
 800dfdc:	683b      	ldr	r3, [r7, #0]
 800dfde:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 800dfe0:	7abb      	ldrb	r3, [r7, #10]
 800dfe2:	021b      	lsls	r3, r3, #8
 800dfe4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800dfe8:	7afa      	ldrb	r2, [r7, #11]
 800dfea:	431a      	orrs	r2, r3
 800dfec:	683b      	ldr	r3, [r7, #0]
 800dfee:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800dff0:	68fb      	ldr	r3, [r7, #12]
}
 800dff2:	4618      	mov	r0, r3
 800dff4:	3710      	adds	r7, #16
 800dff6:	46bd      	mov	sp, r7
 800dff8:	bd80      	pop	{r7, pc}

0800dffa <FT5336_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetMultiTouchState(FT5336_Object_t *pObj, FT5336_MultiTouch_State_t *State)
{
 800dffa:	b580      	push	{r7, lr}
 800dffc:	b08c      	sub	sp, #48	; 0x30
 800dffe:	af00      	add	r7, sp, #0
 800e000:	6078      	str	r0, [r7, #4]
 800e002:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 800e004:	2300      	movs	r3, #0
 800e006:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t  data[30];
  uint32_t i;

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 800e008:	6878      	ldr	r0, [r7, #4]
 800e00a:	f000 f8dc 	bl	800e1c6 <FT5336_DetectTouch>
 800e00e:	4603      	mov	r3, r0
 800e010:	461a      	mov	r2, r3
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	601a      	str	r2, [r3, #0]

  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	f103 0018 	add.w	r0, r3, #24
 800e01c:	f107 0208 	add.w	r2, r7, #8
 800e020:	231e      	movs	r3, #30
 800e022:	2103      	movs	r1, #3
 800e024:	f000 f923 	bl	800e26e <ft5336_read_reg>
 800e028:	4603      	mov	r3, r0
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d003      	beq.n	800e036 <FT5336_GetMultiTouchState+0x3c>
  {
    ret = FT5336_ERROR;
 800e02e:	f04f 33ff 	mov.w	r3, #4294967295
 800e032:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e034:	e07e      	b.n	800e134 <FT5336_GetMultiTouchState+0x13a>
  }
  else
  {
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 800e036:	2300      	movs	r3, #0
 800e038:	62bb      	str	r3, [r7, #40]	; 0x28
 800e03a:	e078      	b.n	800e12e <FT5336_GetMultiTouchState+0x134>
    {
    /* Send back first ready X position to caller */
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 800e03c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e03e:	4613      	mov	r3, r2
 800e040:	005b      	lsls	r3, r3, #1
 800e042:	4413      	add	r3, r2
 800e044:	005b      	lsls	r3, r3, #1
 800e046:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e04a:	4413      	add	r3, r2
 800e04c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800e050:	021b      	lsls	r3, r3, #8
 800e052:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 800e056:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e058:	4613      	mov	r3, r2
 800e05a:	005b      	lsls	r3, r3, #1
 800e05c:	4413      	add	r3, r2
 800e05e:	005b      	lsls	r3, r3, #1
 800e060:	3301      	adds	r3, #1
 800e062:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e066:	4413      	add	r3, r2
 800e068:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800e06c:	ea41 0203 	orr.w	r2, r1, r3
 800e070:	6839      	ldr	r1, [r7, #0]
 800e072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e074:	009b      	lsls	r3, r3, #2
 800e076:	440b      	add	r3, r1
 800e078:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 800e07a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e07c:	4613      	mov	r3, r2
 800e07e:	005b      	lsls	r3, r3, #1
 800e080:	4413      	add	r3, r2
 800e082:	005b      	lsls	r3, r3, #1
 800e084:	3302      	adds	r3, #2
 800e086:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e08a:	4413      	add	r3, r2
 800e08c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800e090:	021b      	lsls	r3, r3, #8
 800e092:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 800e096:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e098:	4613      	mov	r3, r2
 800e09a:	005b      	lsls	r3, r3, #1
 800e09c:	4413      	add	r3, r2
 800e09e:	005b      	lsls	r3, r3, #1
 800e0a0:	3303      	adds	r3, #3
 800e0a2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e0a6:	4413      	add	r3, r2
 800e0a8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800e0ac:	4319      	orrs	r1, r3
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e0b2:	3206      	adds	r2, #6
 800e0b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Event to caller */
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 800e0b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e0ba:	4613      	mov	r3, r2
 800e0bc:	005b      	lsls	r3, r3, #1
 800e0be:	4413      	add	r3, r2
 800e0c0:	005b      	lsls	r3, r3, #1
 800e0c2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e0c6:	4413      	add	r3, r2
 800e0c8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800e0cc:	099b      	lsrs	r3, r3, #6
 800e0ce:	b2db      	uxtb	r3, r3
 800e0d0:	4619      	mov	r1, r3
 800e0d2:	683b      	ldr	r3, [r7, #0]
 800e0d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e0d6:	3210      	adds	r2, #16
 800e0d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Weight to caller */
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 800e0dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e0de:	4613      	mov	r3, r2
 800e0e0:	005b      	lsls	r3, r3, #1
 800e0e2:	4413      	add	r3, r2
 800e0e4:	005b      	lsls	r3, r3, #1
 800e0e6:	3304      	adds	r3, #4
 800e0e8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e0ec:	4413      	add	r3, r2
 800e0ee:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800e0f2:	4619      	mov	r1, r3
 800e0f4:	683a      	ldr	r2, [r7, #0]
 800e0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0f8:	330a      	adds	r3, #10
 800e0fa:	009b      	lsls	r3, r3, #2
 800e0fc:	4413      	add	r3, r2
 800e0fe:	6059      	str	r1, [r3, #4]
    /* Send back first ready Area to caller */
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 800e100:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e102:	4613      	mov	r3, r2
 800e104:	005b      	lsls	r3, r3, #1
 800e106:	4413      	add	r3, r2
 800e108:	005b      	lsls	r3, r3, #1
 800e10a:	3305      	adds	r3, #5
 800e10c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e110:	4413      	add	r3, r2
 800e112:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800e116:	091b      	lsrs	r3, r3, #4
 800e118:	b2db      	uxtb	r3, r3
 800e11a:	4619      	mov	r1, r3
 800e11c:	683a      	ldr	r2, [r7, #0]
 800e11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e120:	3314      	adds	r3, #20
 800e122:	009b      	lsls	r3, r3, #2
 800e124:	4413      	add	r3, r2
 800e126:	6059      	str	r1, [r3, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 800e128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e12a:	3301      	adds	r3, #1
 800e12c:	62bb      	str	r3, [r7, #40]	; 0x28
 800e12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e130:	2b04      	cmp	r3, #4
 800e132:	d983      	bls.n	800e03c <FT5336_GetMultiTouchState+0x42>
    }
  }

  return ret;
 800e134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800e136:	4618      	mov	r0, r3
 800e138:	3730      	adds	r7, #48	; 0x30
 800e13a:	46bd      	mov	sp, r7
 800e13c:	bd80      	pop	{r7, pc}

0800e13e <FT5336_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId: gesture ID
  * @retval Gesture ID.
  */
int32_t FT5336_GetGesture(FT5336_Object_t *pObj, uint8_t *GestureId)
{
 800e13e:	b580      	push	{r7, lr}
 800e140:	b082      	sub	sp, #8
 800e142:	af00      	add	r7, sp, #0
 800e144:	6078      	str	r0, [r7, #4]
 800e146:	6039      	str	r1, [r7, #0]
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	3318      	adds	r3, #24
 800e14c:	6839      	ldr	r1, [r7, #0]
 800e14e:	4618      	mov	r0, r3
 800e150:	f000 f8bb 	bl	800e2ca <ft5336_gest_id>
 800e154:	4603      	mov	r3, r0
}
 800e156:	4618      	mov	r0, r3
 800e158:	3708      	adds	r7, #8
 800e15a:	46bd      	mov	sp, r7
 800e15c:	bd80      	pop	{r7, pc}

0800e15e <FT5336_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_EnableIT(FT5336_Object_t *pObj)
{
 800e15e:	b580      	push	{r7, lr}
 800e160:	b082      	sub	sp, #8
 800e162:	af00      	add	r7, sp, #0
 800e164:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	3318      	adds	r3, #24
 800e16a:	2101      	movs	r1, #1
 800e16c:	4618      	mov	r0, r3
 800e16e:	f000 f941 	bl	800e3f4 <ft5336_g_mode>
 800e172:	4603      	mov	r3, r0
}
 800e174:	4618      	mov	r0, r3
 800e176:	3708      	adds	r7, #8
 800e178:	46bd      	mov	sp, r7
 800e17a:	bd80      	pop	{r7, pc}

0800e17c <FT5336_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_DisableIT(FT5336_Object_t *pObj)
{
 800e17c:	b580      	push	{r7, lr}
 800e17e:	b082      	sub	sp, #8
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	3318      	adds	r3, #24
 800e188:	2100      	movs	r1, #0
 800e18a:	4618      	mov	r0, r3
 800e18c:	f000 f932 	bl	800e3f4 <ft5336_g_mode>
 800e190:	4603      	mov	r3, r0
}
 800e192:	4618      	mov	r0, r3
 800e194:	3708      	adds	r7, #8
 800e196:	46bd      	mov	sp, r7
 800e198:	bd80      	pop	{r7, pc}

0800e19a <FT5336_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval TS interrupts status : always return 0 here
  */
int32_t FT5336_ITStatus(FT5336_Object_t *pObj)
{
 800e19a:	b480      	push	{r7}
 800e19c:	b083      	sub	sp, #12
 800e19e:	af00      	add	r7, sp, #0
 800e1a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 800e1a2:	2300      	movs	r3, #0
}
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	370c      	adds	r7, #12
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ae:	4770      	bx	lr

0800e1b0 <FT5336_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
{
 800e1b0:	b480      	push	{r7}
 800e1b2:	b083      	sub	sp, #12
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 800e1b8:	2300      	movs	r3, #0
}
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	370c      	adds	r7, #12
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c4:	4770      	bx	lr

0800e1c6 <FT5336_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0, 1 or 2) or FT5336_ERROR
  *         in case of error
  */
static int32_t FT5336_DetectTouch(FT5336_Object_t *pObj)
{
 800e1c6:	b580      	push	{r7, lr}
 800e1c8:	b084      	sub	sp, #16
 800e1ca:	af00      	add	r7, sp, #0
 800e1cc:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch;

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	3318      	adds	r3, #24
 800e1d2:	f107 020b 	add.w	r2, r7, #11
 800e1d6:	4611      	mov	r1, r2
 800e1d8:	4618      	mov	r0, r3
 800e1da:	f000 f886 	bl	800e2ea <ft5336_td_status>
 800e1de:	4603      	mov	r3, r0
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d003      	beq.n	800e1ec <FT5336_DetectTouch+0x26>
  {
    ret = FT5336_ERROR;
 800e1e4:	f04f 33ff 	mov.w	r3, #4294967295
 800e1e8:	60fb      	str	r3, [r7, #12]
 800e1ea:	e007      	b.n	800e1fc <FT5336_DetectTouch+0x36>
  }
  else
  {
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 800e1ec:	7afb      	ldrb	r3, [r7, #11]
 800e1ee:	2b05      	cmp	r3, #5
 800e1f0:	d902      	bls.n	800e1f8 <FT5336_DetectTouch+0x32>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	60fb      	str	r3, [r7, #12]
 800e1f6:	e001      	b.n	800e1fc <FT5336_DetectTouch+0x36>
    }
    else
    {
      ret = (int32_t)nb_touch;
 800e1f8:	7afb      	ldrb	r3, [r7, #11]
 800e1fa:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 800e1fc:	68fb      	ldr	r3, [r7, #12]
}
 800e1fe:	4618      	mov	r0, r3
 800e200:	3710      	adds	r7, #16
 800e202:	46bd      	mov	sp, r7
 800e204:	bd80      	pop	{r7, pc}

0800e206 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800e206:	b590      	push	{r4, r7, lr}
 800e208:	b087      	sub	sp, #28
 800e20a:	af00      	add	r7, sp, #0
 800e20c:	60f8      	str	r0, [r7, #12]
 800e20e:	607a      	str	r2, [r7, #4]
 800e210:	461a      	mov	r2, r3
 800e212:	460b      	mov	r3, r1
 800e214:	72fb      	strb	r3, [r7, #11]
 800e216:	4613      	mov	r3, r2
 800e218:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800e21e:	697b      	ldr	r3, [r7, #20]
 800e220:	691c      	ldr	r4, [r3, #16]
 800e222:	697b      	ldr	r3, [r7, #20]
 800e224:	8918      	ldrh	r0, [r3, #8]
 800e226:	7afb      	ldrb	r3, [r7, #11]
 800e228:	b299      	uxth	r1, r3
 800e22a:	893b      	ldrh	r3, [r7, #8]
 800e22c:	687a      	ldr	r2, [r7, #4]
 800e22e:	47a0      	blx	r4
 800e230:	4603      	mov	r3, r0
}
 800e232:	4618      	mov	r0, r3
 800e234:	371c      	adds	r7, #28
 800e236:	46bd      	mov	sp, r7
 800e238:	bd90      	pop	{r4, r7, pc}

0800e23a <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800e23a:	b590      	push	{r4, r7, lr}
 800e23c:	b087      	sub	sp, #28
 800e23e:	af00      	add	r7, sp, #0
 800e240:	60f8      	str	r0, [r7, #12]
 800e242:	607a      	str	r2, [r7, #4]
 800e244:	461a      	mov	r2, r3
 800e246:	460b      	mov	r3, r1
 800e248:	72fb      	strb	r3, [r7, #11]
 800e24a:	4613      	mov	r3, r2
 800e24c:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800e252:	697b      	ldr	r3, [r7, #20]
 800e254:	68dc      	ldr	r4, [r3, #12]
 800e256:	697b      	ldr	r3, [r7, #20]
 800e258:	8918      	ldrh	r0, [r3, #8]
 800e25a:	7afb      	ldrb	r3, [r7, #11]
 800e25c:	b299      	uxth	r1, r3
 800e25e:	893b      	ldrh	r3, [r7, #8]
 800e260:	687a      	ldr	r2, [r7, #4]
 800e262:	47a0      	blx	r4
 800e264:	4603      	mov	r3, r0
}
 800e266:	4618      	mov	r0, r3
 800e268:	371c      	adds	r7, #28
 800e26a:	46bd      	mov	sp, r7
 800e26c:	bd90      	pop	{r4, r7, pc}

0800e26e <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 800e26e:	b590      	push	{r4, r7, lr}
 800e270:	b085      	sub	sp, #20
 800e272:	af00      	add	r7, sp, #0
 800e274:	60f8      	str	r0, [r7, #12]
 800e276:	607a      	str	r2, [r7, #4]
 800e278:	461a      	mov	r2, r3
 800e27a:	460b      	mov	r3, r1
 800e27c:	72fb      	strb	r3, [r7, #11]
 800e27e:	4613      	mov	r3, r2
 800e280:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	685c      	ldr	r4, [r3, #4]
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	6898      	ldr	r0, [r3, #8]
 800e28a:	893b      	ldrh	r3, [r7, #8]
 800e28c:	7af9      	ldrb	r1, [r7, #11]
 800e28e:	687a      	ldr	r2, [r7, #4]
 800e290:	47a0      	blx	r4
 800e292:	4603      	mov	r3, r0
}
 800e294:	4618      	mov	r0, r3
 800e296:	3714      	adds	r7, #20
 800e298:	46bd      	mov	sp, r7
 800e29a:	bd90      	pop	{r4, r7, pc}

0800e29c <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 800e29c:	b590      	push	{r4, r7, lr}
 800e29e:	b085      	sub	sp, #20
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	60f8      	str	r0, [r7, #12]
 800e2a4:	607a      	str	r2, [r7, #4]
 800e2a6:	461a      	mov	r2, r3
 800e2a8:	460b      	mov	r3, r1
 800e2aa:	72fb      	strb	r3, [r7, #11]
 800e2ac:	4613      	mov	r3, r2
 800e2ae:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	681c      	ldr	r4, [r3, #0]
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	6898      	ldr	r0, [r3, #8]
 800e2b8:	893b      	ldrh	r3, [r7, #8]
 800e2ba:	7af9      	ldrb	r1, [r7, #11]
 800e2bc:	687a      	ldr	r2, [r7, #4]
 800e2be:	47a0      	blx	r4
 800e2c0:	4603      	mov	r3, r0
}
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	3714      	adds	r7, #20
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	bd90      	pop	{r4, r7, pc}

0800e2ca <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 800e2ca:	b580      	push	{r7, lr}
 800e2cc:	b082      	sub	sp, #8
 800e2ce:	af00      	add	r7, sp, #0
 800e2d0:	6078      	str	r0, [r7, #4]
 800e2d2:	6039      	str	r1, [r7, #0]
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 800e2d4:	2301      	movs	r3, #1
 800e2d6:	683a      	ldr	r2, [r7, #0]
 800e2d8:	2101      	movs	r1, #1
 800e2da:	6878      	ldr	r0, [r7, #4]
 800e2dc:	f7ff ffc7 	bl	800e26e <ft5336_read_reg>
 800e2e0:	4603      	mov	r3, r0
}
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	3708      	adds	r7, #8
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	bd80      	pop	{r7, pc}

0800e2ea <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 800e2ea:	b580      	push	{r7, lr}
 800e2ec:	b084      	sub	sp, #16
 800e2ee:	af00      	add	r7, sp, #0
 800e2f0:	6078      	str	r0, [r7, #4]
 800e2f2:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 800e2f4:	2301      	movs	r3, #1
 800e2f6:	683a      	ldr	r2, [r7, #0]
 800e2f8:	2102      	movs	r1, #2
 800e2fa:	6878      	ldr	r0, [r7, #4]
 800e2fc:	f7ff ffb7 	bl	800e26e <ft5336_read_reg>
 800e300:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d10a      	bne.n	800e31e <ft5336_td_status+0x34>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 800e308:	683b      	ldr	r3, [r7, #0]
 800e30a:	781b      	ldrb	r3, [r3, #0]
 800e30c:	f003 030f 	and.w	r3, r3, #15
 800e310:	b2da      	uxtb	r2, r3
 800e312:	683b      	ldr	r3, [r7, #0]
 800e314:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
 800e316:	683b      	ldr	r3, [r7, #0]
 800e318:	781a      	ldrb	r2, [r3, #0]
 800e31a:	683b      	ldr	r3, [r7, #0]
 800e31c:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 800e31e:	68fb      	ldr	r3, [r7, #12]
}
 800e320:	4618      	mov	r0, r3
 800e322:	3710      	adds	r7, #16
 800e324:	46bd      	mov	sp, r7
 800e326:	bd80      	pop	{r7, pc}

0800e328 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b082      	sub	sp, #8
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
 800e330:	460b      	mov	r3, r1
 800e332:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 800e334:	1cfa      	adds	r2, r7, #3
 800e336:	2301      	movs	r3, #1
 800e338:	2191      	movs	r1, #145	; 0x91
 800e33a:	6878      	ldr	r0, [r7, #4]
 800e33c:	f7ff ffae 	bl	800e29c <ft5336_write_reg>
 800e340:	4603      	mov	r3, r0
}
 800e342:	4618      	mov	r0, r3
 800e344:	3708      	adds	r7, #8
 800e346:	46bd      	mov	sp, r7
 800e348:	bd80      	pop	{r7, pc}

0800e34a <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 800e34a:	b580      	push	{r7, lr}
 800e34c:	b082      	sub	sp, #8
 800e34e:	af00      	add	r7, sp, #0
 800e350:	6078      	str	r0, [r7, #4]
 800e352:	460b      	mov	r3, r1
 800e354:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 800e356:	1cfa      	adds	r2, r7, #3
 800e358:	2301      	movs	r3, #1
 800e35a:	2192      	movs	r1, #146	; 0x92
 800e35c:	6878      	ldr	r0, [r7, #4]
 800e35e:	f7ff ff9d 	bl	800e29c <ft5336_write_reg>
 800e362:	4603      	mov	r3, r0
}
 800e364:	4618      	mov	r0, r3
 800e366:	3708      	adds	r7, #8
 800e368:	46bd      	mov	sp, r7
 800e36a:	bd80      	pop	{r7, pc}

0800e36c <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b082      	sub	sp, #8
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
 800e374:	460b      	mov	r3, r1
 800e376:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 800e378:	1cfa      	adds	r2, r7, #3
 800e37a:	2301      	movs	r3, #1
 800e37c:	2193      	movs	r1, #147	; 0x93
 800e37e:	6878      	ldr	r0, [r7, #4]
 800e380:	f7ff ff8c 	bl	800e29c <ft5336_write_reg>
 800e384:	4603      	mov	r3, r0
}
 800e386:	4618      	mov	r0, r3
 800e388:	3708      	adds	r7, #8
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd80      	pop	{r7, pc}

0800e38e <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 800e38e:	b580      	push	{r7, lr}
 800e390:	b082      	sub	sp, #8
 800e392:	af00      	add	r7, sp, #0
 800e394:	6078      	str	r0, [r7, #4]
 800e396:	460b      	mov	r3, r1
 800e398:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 800e39a:	1cfa      	adds	r2, r7, #3
 800e39c:	2301      	movs	r3, #1
 800e39e:	2194      	movs	r1, #148	; 0x94
 800e3a0:	6878      	ldr	r0, [r7, #4]
 800e3a2:	f7ff ff7b 	bl	800e29c <ft5336_write_reg>
 800e3a6:	4603      	mov	r3, r0
}
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	3708      	adds	r7, #8
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	bd80      	pop	{r7, pc}

0800e3b0 <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b082      	sub	sp, #8
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6078      	str	r0, [r7, #4]
 800e3b8:	460b      	mov	r3, r1
 800e3ba:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 800e3bc:	1cfa      	adds	r2, r7, #3
 800e3be:	2301      	movs	r3, #1
 800e3c0:	2195      	movs	r1, #149	; 0x95
 800e3c2:	6878      	ldr	r0, [r7, #4]
 800e3c4:	f7ff ff6a 	bl	800e29c <ft5336_write_reg>
 800e3c8:	4603      	mov	r3, r0
}
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	3708      	adds	r7, #8
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	bd80      	pop	{r7, pc}

0800e3d2 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 800e3d2:	b580      	push	{r7, lr}
 800e3d4:	b082      	sub	sp, #8
 800e3d6:	af00      	add	r7, sp, #0
 800e3d8:	6078      	str	r0, [r7, #4]
 800e3da:	460b      	mov	r3, r1
 800e3dc:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 800e3de:	1cfa      	adds	r2, r7, #3
 800e3e0:	2301      	movs	r3, #1
 800e3e2:	2196      	movs	r1, #150	; 0x96
 800e3e4:	6878      	ldr	r0, [r7, #4]
 800e3e6:	f7ff ff59 	bl	800e29c <ft5336_write_reg>
 800e3ea:	4603      	mov	r3, r0
}
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	3708      	adds	r7, #8
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	bd80      	pop	{r7, pc}

0800e3f4 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b082      	sub	sp, #8
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
 800e3fc:	460b      	mov	r3, r1
 800e3fe:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 800e400:	1cfa      	adds	r2, r7, #3
 800e402:	2301      	movs	r3, #1
 800e404:	21a4      	movs	r1, #164	; 0xa4
 800e406:	6878      	ldr	r0, [r7, #4]
 800e408:	f7ff ff48 	bl	800e29c <ft5336_write_reg>
 800e40c:	4603      	mov	r3, r0
}
 800e40e:	4618      	mov	r0, r3
 800e410:	3708      	adds	r7, #8
 800e412:	46bd      	mov	sp, r7
 800e414:	bd80      	pop	{r7, pc}

0800e416 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 800e416:	b580      	push	{r7, lr}
 800e418:	b084      	sub	sp, #16
 800e41a:	af00      	add	r7, sp, #0
 800e41c:	6078      	str	r0, [r7, #4]
 800e41e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 800e420:	2301      	movs	r3, #1
 800e422:	683a      	ldr	r2, [r7, #0]
 800e424:	21a8      	movs	r1, #168	; 0xa8
 800e426:	6878      	ldr	r0, [r7, #4]
 800e428:	f7ff ff21 	bl	800e26e <ft5336_read_reg>
 800e42c:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d107      	bne.n	800e444 <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 800e434:	683b      	ldr	r3, [r7, #0]
 800e436:	781a      	ldrb	r2, [r3, #0]
 800e438:	683b      	ldr	r3, [r7, #0]
 800e43a:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 800e43c:	683b      	ldr	r3, [r7, #0]
 800e43e:	781a      	ldrb	r2, [r3, #0]
 800e440:	683b      	ldr	r3, [r7, #0]
 800e442:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 800e444:	68fb      	ldr	r3, [r7, #12]
}
 800e446:	4618      	mov	r0, r3
 800e448:	3710      	adds	r7, #16
 800e44a:	46bd      	mov	sp, r7
 800e44c:	bd80      	pop	{r7, pc}

0800e44e <MT25TL01G_GetFlashInfo>:
  * @brief  Return the configuration of the QSPI memory.
  * @param  pInfo pointer on the configuration structure
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
 800e44e:	b480      	push	{r7}
 800e450:	b083      	sub	sp, #12
 800e452:	af00      	add	r7, sp, #0
 800e454:	6078      	str	r0, [r7, #4]
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e45c:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800e464:	605a      	str	r2, [r3, #4]
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e46c:	60da      	str	r2, [r3, #12]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	685b      	ldr	r3, [r3, #4]
 800e472:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e476:	fbb2 f2f3 	udiv	r2, r2, r3
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	609a      	str	r2, [r3, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	68db      	ldr	r3, [r3, #12]
 800e482:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e486:	fbb2 f2f3 	udiv	r2, r2, r3
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	611a      	str	r2, [r3, #16]
  return MT25TL01G_OK;
 800e48e:	2300      	movs	r3, #0
}
 800e490:	4618      	mov	r0, r3
 800e492:	370c      	adds	r7, #12
 800e494:	46bd      	mov	sp, r7
 800e496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49a:	4770      	bx	lr

0800e49c <MT25TL01G_Enter4BytesAddressMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_Enter4BytesAddressMode(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b090      	sub	sp, #64	; 0x40
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	6078      	str	r0, [r7, #4]
 800e4a4:	460b      	mov	r3, r1
 800e4a6:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800e4a8:	78fb      	ldrb	r3, [r7, #3]
 800e4aa:	2b03      	cmp	r3, #3
 800e4ac:	d102      	bne.n	800e4b4 <MT25TL01G_Enter4BytesAddressMode+0x18>
 800e4ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 800e4b2:	e001      	b.n	800e4b8 <MT25TL01G_Enter4BytesAddressMode+0x1c>
 800e4b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e4b8:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 800e4ba:	23b7      	movs	r3, #183	; 0xb7
 800e4bc:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800e4be:	2300      	movs	r3, #0
 800e4c0:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /*write enable */
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 800e4da:	78fb      	ldrb	r3, [r7, #3]
 800e4dc:	4619      	mov	r1, r3
 800e4de:	6878      	ldr	r0, [r7, #4]
 800e4e0:	f000 f860 	bl	800e5a4 <MT25TL01G_WriteEnable>
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d002      	beq.n	800e4f0 <MT25TL01G_Enter4BytesAddressMode+0x54>
  {
    return MT25TL01G_ERROR_COMMAND;
 800e4ea:	f06f 0301 	mvn.w	r3, #1
 800e4ee:	e019      	b.n	800e524 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }
  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800e4f0:	f107 0308 	add.w	r3, r7, #8
 800e4f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800e4f8:	4619      	mov	r1, r3
 800e4fa:	6878      	ldr	r0, [r7, #4]
 800e4fc:	f004 fd2c 	bl	8012f58 <HAL_QSPI_Command>
 800e500:	4603      	mov	r3, r0
 800e502:	2b00      	cmp	r3, #0
 800e504:	d002      	beq.n	800e50c <MT25TL01G_Enter4BytesAddressMode+0x70>
  {
    return MT25TL01G_ERROR_COMMAND;
 800e506:	f06f 0301 	mvn.w	r3, #1
 800e50a:	e00b      	b.n	800e524 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 800e50c:	78fb      	ldrb	r3, [r7, #3]
 800e50e:	4619      	mov	r1, r3
 800e510:	6878      	ldr	r0, [r7, #4]
 800e512:	f000 f80b 	bl	800e52c <MT25TL01G_AutoPollingMemReady>
 800e516:	4603      	mov	r3, r0
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d002      	beq.n	800e522 <MT25TL01G_Enter4BytesAddressMode+0x86>
  {
    return MT25TL01G_ERROR_COMMAND;
 800e51c:	f06f 0301 	mvn.w	r3, #1
 800e520:	e000      	b.n	800e524 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }

  return MT25TL01G_OK;
 800e522:	2300      	movs	r3, #0
}
 800e524:	4618      	mov	r0, r3
 800e526:	3740      	adds	r7, #64	; 0x40
 800e528:	46bd      	mov	sp, r7
 800e52a:	bd80      	pop	{r7, pc}

0800e52c <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b096      	sub	sp, #88	; 0x58
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
 800e534:	460b      	mov	r3, r1
 800e536:	70fb      	strb	r3, [r7, #3]

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800e538:	f44f 7340 	mov.w	r3, #768	; 0x300
 800e53c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 800e53e:	2305      	movs	r3, #5
 800e540:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800e542:	2300      	movs	r3, #0
 800e544:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800e546:	2300      	movs	r3, #0
 800e548:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800e54a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800e54e:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 2;
 800e550:	2302      	movs	r3, #2
 800e552:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800e554:	2300      	movs	r3, #0
 800e556:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800e558:	2300      	movs	r3, #0
 800e55a:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800e55c:	2300      	movs	r3, #0
 800e55e:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 800e560:	2300      	movs	r3, #0
 800e562:	60bb      	str	r3, [r7, #8]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800e564:	2300      	movs	r3, #0
 800e566:	61bb      	str	r3, [r7, #24]
  s_config.Interval        = 0x10;
 800e568:	2310      	movs	r3, #16
 800e56a:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800e56c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e570:	61fb      	str	r3, [r7, #28]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 800e572:	f240 1301 	movw	r3, #257	; 0x101
 800e576:	60fb      	str	r3, [r7, #12]
  s_config.StatusBytesSize = 2;
 800e578:	2302      	movs	r3, #2
 800e57a:	617b      	str	r3, [r7, #20]

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800e57c:	f107 0208 	add.w	r2, r7, #8
 800e580:	f107 0120 	add.w	r1, r7, #32
 800e584:	f241 3388 	movw	r3, #5000	; 0x1388
 800e588:	6878      	ldr	r0, [r7, #4]
 800e58a:	f004 fe72 	bl	8013272 <HAL_QSPI_AutoPolling>
 800e58e:	4603      	mov	r3, r0
 800e590:	2b00      	cmp	r3, #0
 800e592:	d002      	beq.n	800e59a <MT25TL01G_AutoPollingMemReady+0x6e>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 800e594:	f06f 0304 	mvn.w	r3, #4
 800e598:	e000      	b.n	800e59c <MT25TL01G_AutoPollingMemReady+0x70>
  }

  return MT25TL01G_OK;
 800e59a:	2300      	movs	r3, #0

}
 800e59c:	4618      	mov	r0, r3
 800e59e:	3758      	adds	r7, #88	; 0x58
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	bd80      	pop	{r7, pc}

0800e5a4 <MT25TL01G_WriteEnable>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_WriteEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b096      	sub	sp, #88	; 0x58
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]
 800e5ac:	460b      	mov	r3, r1
 800e5ae:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800e5b0:	78fb      	ldrb	r3, [r7, #3]
 800e5b2:	2b03      	cmp	r3, #3
 800e5b4:	d102      	bne.n	800e5bc <MT25TL01G_WriteEnable+0x18>
 800e5b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 800e5ba:	e001      	b.n	800e5c0 <MT25TL01G_WriteEnable+0x1c>
 800e5bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e5c0:	63bb      	str	r3, [r7, #56]	; 0x38

  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 800e5c2:	2306      	movs	r3, #6
 800e5c4:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800e5da:	2300      	movs	r3, #0
 800e5dc:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800e5de:	2300      	movs	r3, #0
 800e5e0:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800e5e2:	f107 0320 	add.w	r3, r7, #32
 800e5e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800e5ea:	4619      	mov	r1, r3
 800e5ec:	6878      	ldr	r0, [r7, #4]
 800e5ee:	f004 fcb3 	bl	8012f58 <HAL_QSPI_Command>
 800e5f2:	4603      	mov	r3, r0
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d002      	beq.n	800e5fe <MT25TL01G_WriteEnable+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800e5f8:	f06f 0301 	mvn.w	r3, #1
 800e5fc:	e029      	b.n	800e652 <MT25TL01G_WriteEnable+0xae>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 800e5fe:	f240 2302 	movw	r3, #514	; 0x202
 800e602:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 800e604:	f240 2302 	movw	r3, #514	; 0x202
 800e608:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800e60a:	2300      	movs	r3, #0
 800e60c:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 2;
 800e60e:	2302      	movs	r3, #2
 800e610:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 800e612:	2310      	movs	r3, #16
 800e614:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800e616:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e61a:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 800e61c:	2305      	movs	r3, #5
 800e61e:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 800e620:	78fb      	ldrb	r3, [r7, #3]
 800e622:	2b03      	cmp	r3, #3
 800e624:	d102      	bne.n	800e62c <MT25TL01G_WriteEnable+0x88>
 800e626:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800e62a:	e001      	b.n	800e630 <MT25TL01G_WriteEnable+0x8c>
 800e62c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e630:	647b      	str	r3, [r7, #68]	; 0x44


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800e632:	f107 0208 	add.w	r2, r7, #8
 800e636:	f107 0120 	add.w	r1, r7, #32
 800e63a:	f241 3388 	movw	r3, #5000	; 0x1388
 800e63e:	6878      	ldr	r0, [r7, #4]
 800e640:	f004 fe17 	bl	8013272 <HAL_QSPI_AutoPolling>
 800e644:	4603      	mov	r3, r0
 800e646:	2b00      	cmp	r3, #0
 800e648:	d002      	beq.n	800e650 <MT25TL01G_WriteEnable+0xac>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 800e64a:	f06f 0304 	mvn.w	r3, #4
 800e64e:	e000      	b.n	800e652 <MT25TL01G_WriteEnable+0xae>
  }

  return MT25TL01G_OK;
 800e650:	2300      	movs	r3, #0
}
 800e652:	4618      	mov	r0, r3
 800e654:	3758      	adds	r7, #88	; 0x58
 800e656:	46bd      	mov	sp, r7
 800e658:	bd80      	pop	{r7, pc}

0800e65a <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 800e65a:	b580      	push	{r7, lr}
 800e65c:	b090      	sub	sp, #64	; 0x40
 800e65e:	af00      	add	r7, sp, #0
 800e660:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800e662:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e666:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 800e668:	2335      	movs	r3, #53	; 0x35
 800e66a:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800e66c:	2300      	movs	r3, #0
 800e66e:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800e670:	2300      	movs	r3, #0
 800e672:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800e674:	2300      	movs	r3, #0
 800e676:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800e678:	2300      	movs	r3, #0
 800e67a:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800e67c:	2300      	movs	r3, #0
 800e67e:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800e680:	2300      	movs	r3, #0
 800e682:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800e684:	2300      	movs	r3, #0
 800e686:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800e688:	f107 0308 	add.w	r3, r7, #8
 800e68c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e690:	4619      	mov	r1, r3
 800e692:	6878      	ldr	r0, [r7, #4]
 800e694:	f004 fc60 	bl	8012f58 <HAL_QSPI_Command>
 800e698:	4603      	mov	r3, r0
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d002      	beq.n	800e6a4 <MT25TL01G_EnterQPIMode+0x4a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800e69e:	f06f 0301 	mvn.w	r3, #1
 800e6a2:	e000      	b.n	800e6a6 <MT25TL01G_EnterQPIMode+0x4c>
  }

  return MT25TL01G_OK;
 800e6a4:	2300      	movs	r3, #0
}
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	3740      	adds	r7, #64	; 0x40
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	bd80      	pop	{r7, pc}

0800e6ae <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 800e6ae:	b580      	push	{r7, lr}
 800e6b0:	b090      	sub	sp, #64	; 0x40
 800e6b2:	af00      	add	r7, sp, #0
 800e6b4:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800e6b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e6ba:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 800e6bc:	23f5      	movs	r3, #245	; 0xf5
 800e6be:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800e6d0:	2300      	movs	r3, #0
 800e6d2:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800e6d8:	2300      	movs	r3, #0
 800e6da:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800e6dc:	f107 0308 	add.w	r3, r7, #8
 800e6e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e6e4:	4619      	mov	r1, r3
 800e6e6:	6878      	ldr	r0, [r7, #4]
 800e6e8:	f004 fc36 	bl	8012f58 <HAL_QSPI_Command>
 800e6ec:	4603      	mov	r3, r0
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d002      	beq.n	800e6f8 <MT25TL01G_ExitQPIMode+0x4a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800e6f2:	f06f 0301 	mvn.w	r3, #1
 800e6f6:	e000      	b.n	800e6fa <MT25TL01G_ExitQPIMode+0x4c>
  }

  return MT25TL01G_OK;
 800e6f8:	2300      	movs	r3, #0
}
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	3740      	adds	r7, #64	; 0x40
 800e6fe:	46bd      	mov	sp, r7
 800e700:	bd80      	pop	{r7, pc}
	...

0800e704 <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800e704:	b580      	push	{r7, lr}
 800e706:	b092      	sub	sp, #72	; 0x48
 800e708:	af00      	add	r7, sp, #0
 800e70a:	6078      	str	r0, [r7, #4]
 800e70c:	460b      	mov	r3, r1
 800e70e:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 800e710:	78fb      	ldrb	r3, [r7, #3]
 800e712:	2b03      	cmp	r3, #3
 800e714:	d83a      	bhi.n	800e78c <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
 800e716:	a201      	add	r2, pc, #4	; (adr r2, 800e71c <MT25TL01G_EnableMemoryMappedModeDTR+0x18>)
 800e718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e71c:	0800e72d 	.word	0x0800e72d
 800e720:	0800e745 	.word	0x0800e745
 800e724:	0800e75d 	.word	0x0800e75d
 800e728:	0800e775 	.word	0x0800e775
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800e72c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e730:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 800e732:	230e      	movs	r3, #14
 800e734:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800e736:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e73a:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_1_LINE;
 800e73c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e740:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800e742:	e023      	b.n	800e78c <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_SPI_2IO_MODE:           /* 1-1-2 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800e744:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e748:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 800e74a:	233d      	movs	r3, #61	; 0x3d
 800e74c:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800e74e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e752:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_2_LINES;
 800e754:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e758:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800e75a:	e017      	b.n	800e78c <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800e75c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e760:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 800e762:	23ee      	movs	r3, #238	; 0xee
 800e764:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800e766:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800e76a:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800e76c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800e770:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800e772:	e00b      	b.n	800e78c <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800e774:	f44f 7340 	mov.w	r3, #768	; 0x300
 800e778:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 800e77a:	23ed      	movs	r3, #237	; 0xed
 800e77c:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800e77e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800e782:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800e784:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800e788:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800e78a:	bf00      	nop
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800e78c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800e790:	61fb      	str	r3, [r7, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800e792:	2300      	movs	r3, #0
 800e794:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 800e796:	2308      	movs	r3, #8
 800e798:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
 800e79a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e79e:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 800e7a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e7a4:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	60fb      	str	r3, [r7, #12]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	60bb      	str	r3, [r7, #8]

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800e7b2:	f107 0208 	add.w	r2, r7, #8
 800e7b6:	f107 0310 	add.w	r3, r7, #16
 800e7ba:	4619      	mov	r1, r3
 800e7bc:	6878      	ldr	r0, [r7, #4]
 800e7be:	f004 fdcf 	bl	8013360 <HAL_QSPI_MemoryMapped>
 800e7c2:	4603      	mov	r3, r0
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d002      	beq.n	800e7ce <MT25TL01G_EnableMemoryMappedModeDTR+0xca>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 800e7c8:	f06f 0305 	mvn.w	r3, #5
 800e7cc:	e000      	b.n	800e7d0 <MT25TL01G_EnableMemoryMappedModeDTR+0xcc>
  }

  return MT25TL01G_OK;
 800e7ce:	2300      	movs	r3, #0
}
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	3748      	adds	r7, #72	; 0x48
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	bd80      	pop	{r7, pc}

0800e7d8 <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b092      	sub	sp, #72	; 0x48
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
 800e7e0:	460b      	mov	r3, r1
 800e7e2:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 800e7e4:	78fb      	ldrb	r3, [r7, #3]
 800e7e6:	2b03      	cmp	r3, #3
 800e7e8:	d83a      	bhi.n	800e860 <MT25TL01G_EnableMemoryMappedModeSTR+0x88>
 800e7ea:	a201      	add	r2, pc, #4	; (adr r2, 800e7f0 <MT25TL01G_EnableMemoryMappedModeSTR+0x18>)
 800e7ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7f0:	0800e801 	.word	0x0800e801
 800e7f4:	0800e819 	.word	0x0800e819
 800e7f8:	0800e831 	.word	0x0800e831
 800e7fc:	0800e849 	.word	0x0800e849
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800e800:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e804:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 800e806:	230c      	movs	r3, #12
 800e808:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800e80a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e80e:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_1_LINE;
 800e810:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e814:	637b      	str	r3, [r7, #52]	; 0x34


    break;
 800e816:	e023      	b.n	800e860 <MT25TL01G_EnableMemoryMappedModeSTR+0x88>
  case MT25TL01G_SPI_2IO_MODE:           /* 1-2-2 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800e818:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e81c:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800e81e:	23bc      	movs	r3, #188	; 0xbc
 800e820:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 800e822:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e826:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_2_LINES;
 800e828:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e82c:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800e82e:	e017      	b.n	800e860 <MT25TL01G_EnableMemoryMappedModeSTR+0x88>

  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800e830:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e834:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800e836:	23ec      	movs	r3, #236	; 0xec
 800e838:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800e83a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800e83e:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800e840:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800e844:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800e846:	e00b      	b.n	800e860 <MT25TL01G_EnableMemoryMappedModeSTR+0x88>

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800e848:	f44f 7340 	mov.w	r3, #768	; 0x300
 800e84c:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 800e84e:	23eb      	movs	r3, #235	; 0xeb
 800e850:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800e852:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800e856:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800e858:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800e85c:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800e85e:	bf00      	nop

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 800e860:	2308      	movs	r3, #8
 800e862:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800e864:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800e868:	61fb      	str	r3, [r7, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800e86a:	2300      	movs	r3, #0
 800e86c:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800e86e:	2300      	movs	r3, #0
 800e870:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800e872:	2300      	movs	r3, #0
 800e874:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800e876:	2300      	movs	r3, #0
 800e878:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 800e87a:	2300      	movs	r3, #0
 800e87c:	60fb      	str	r3, [r7, #12]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800e87e:	2300      	movs	r3, #0
 800e880:	60bb      	str	r3, [r7, #8]

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800e882:	f107 0208 	add.w	r2, r7, #8
 800e886:	f107 0310 	add.w	r3, r7, #16
 800e88a:	4619      	mov	r1, r3
 800e88c:	6878      	ldr	r0, [r7, #4]
 800e88e:	f004 fd67 	bl	8013360 <HAL_QSPI_MemoryMapped>
 800e892:	4603      	mov	r3, r0
 800e894:	2b00      	cmp	r3, #0
 800e896:	d002      	beq.n	800e89e <MT25TL01G_EnableMemoryMappedModeSTR+0xc6>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 800e898:	f06f 0305 	mvn.w	r3, #5
 800e89c:	e000      	b.n	800e8a0 <MT25TL01G_EnableMemoryMappedModeSTR+0xc8>
  }

  return MT25TL01G_OK;
 800e89e:	2300      	movs	r3, #0
}
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	3748      	adds	r7, #72	; 0x48
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	bd80      	pop	{r7, pc}

0800e8a8 <MT25TL01G_ResetEnable>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b090      	sub	sp, #64	; 0x40
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
 800e8b0:	460b      	mov	r3, r1
 800e8b2:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800e8b4:	78fb      	ldrb	r3, [r7, #3]
 800e8b6:	2b03      	cmp	r3, #3
 800e8b8:	d102      	bne.n	800e8c0 <MT25TL01G_ResetEnable+0x18>
 800e8ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 800e8be:	e001      	b.n	800e8c4 <MT25TL01G_ResetEnable+0x1c>
 800e8c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e8c4:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 800e8c6:	2366      	movs	r3, #102	; 0x66
 800e8c8:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800e8da:	2300      	movs	r3, #0
 800e8dc:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800e8de:	2300      	movs	r3, #0
 800e8e0:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800e8e6:	f107 0308 	add.w	r3, r7, #8
 800e8ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800e8ee:	4619      	mov	r1, r3
 800e8f0:	6878      	ldr	r0, [r7, #4]
 800e8f2:	f004 fb31 	bl	8012f58 <HAL_QSPI_Command>
 800e8f6:	4603      	mov	r3, r0
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d002      	beq.n	800e902 <MT25TL01G_ResetEnable+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800e8fc:	f06f 0301 	mvn.w	r3, #1
 800e900:	e000      	b.n	800e904 <MT25TL01G_ResetEnable+0x5c>
  }

  return MT25TL01G_OK;
 800e902:	2300      	movs	r3, #0
}
 800e904:	4618      	mov	r0, r3
 800e906:	3740      	adds	r7, #64	; 0x40
 800e908:	46bd      	mov	sp, r7
 800e90a:	bd80      	pop	{r7, pc}

0800e90c <MT25TL01G_ResetMemory>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b090      	sub	sp, #64	; 0x40
 800e910:	af00      	add	r7, sp, #0
 800e912:	6078      	str	r0, [r7, #4]
 800e914:	460b      	mov	r3, r1
 800e916:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800e918:	78fb      	ldrb	r3, [r7, #3]
 800e91a:	2b03      	cmp	r3, #3
 800e91c:	d102      	bne.n	800e924 <MT25TL01G_ResetMemory+0x18>
 800e91e:	f44f 7340 	mov.w	r3, #768	; 0x300
 800e922:	e001      	b.n	800e928 <MT25TL01G_ResetMemory+0x1c>
 800e924:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e928:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 800e92a:	2399      	movs	r3, #153	; 0x99
 800e92c:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800e92e:	2300      	movs	r3, #0
 800e930:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800e932:	2300      	movs	r3, #0
 800e934:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800e936:	2300      	movs	r3, #0
 800e938:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800e93a:	2300      	movs	r3, #0
 800e93c:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800e93e:	2300      	movs	r3, #0
 800e940:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800e942:	2300      	movs	r3, #0
 800e944:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800e946:	2300      	movs	r3, #0
 800e948:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800e94a:	f107 0308 	add.w	r3, r7, #8
 800e94e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e952:	4619      	mov	r1, r3
 800e954:	6878      	ldr	r0, [r7, #4]
 800e956:	f004 faff 	bl	8012f58 <HAL_QSPI_Command>
 800e95a:	4603      	mov	r3, r0
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d002      	beq.n	800e966 <MT25TL01G_ResetMemory+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800e960:	f06f 0301 	mvn.w	r3, #1
 800e964:	e000      	b.n	800e968 <MT25TL01G_ResetMemory+0x5c>
  }

  return MT25TL01G_OK;
 800e966:	2300      	movs	r3, #0
}
 800e968:	4618      	mov	r0, r3
 800e96a:	3740      	adds	r7, #64	; 0x40
 800e96c:	46bd      	mov	sp, r7
 800e96e:	bd80      	pop	{r7, pc}

0800e970 <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b084      	sub	sp, #16
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
 800e978:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
 800e97a:	f04f 33ff 	mov.w	r3, #4294967295
 800e97e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 800e980:	683b      	ldr	r3, [r7, #0]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	4619      	mov	r1, r3
 800e986:	6878      	ldr	r0, [r7, #4]
 800e988:	f000 f832 	bl	800e9f0 <MT48LC4M32B2_ClockEnable>
 800e98c:	4603      	mov	r3, r0
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d128      	bne.n	800e9e4 <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
 800e992:	2001      	movs	r0, #1
 800e994:	f000 f8e2 	bl	800eb5c <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 800e998:	683b      	ldr	r3, [r7, #0]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	4619      	mov	r1, r3
 800e99e:	6878      	ldr	r0, [r7, #4]
 800e9a0:	f000 f84a 	bl	800ea38 <MT48LC4M32B2_Precharge>
 800e9a4:	4603      	mov	r3, r0
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d11c      	bne.n	800e9e4 <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
 800e9aa:	683b      	ldr	r3, [r7, #0]
 800e9ac:	6819      	ldr	r1, [r3, #0]
 800e9ae:	683b      	ldr	r3, [r7, #0]
 800e9b0:	685b      	ldr	r3, [r3, #4]
 800e9b2:	461a      	mov	r2, r3
 800e9b4:	6878      	ldr	r0, [r7, #4]
 800e9b6:	f000 f897 	bl	800eae8 <MT48LC4M32B2_RefreshMode>
 800e9ba:	4603      	mov	r3, r0
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d111      	bne.n	800e9e4 <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
 800e9c0:	6839      	ldr	r1, [r7, #0]
 800e9c2:	6878      	ldr	r0, [r7, #4]
 800e9c4:	f000 f85c 	bl	800ea80 <MT48LC4M32B2_ModeRegConfig>
 800e9c8:	4603      	mov	r3, r0
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d10a      	bne.n	800e9e4 <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
 800e9ce:	683b      	ldr	r3, [r7, #0]
 800e9d0:	689b      	ldr	r3, [r3, #8]
 800e9d2:	4619      	mov	r1, r3
 800e9d4:	6878      	ldr	r0, [r7, #4]
 800e9d6:	f000 f8ad 	bl	800eb34 <MT48LC4M32B2_RefreshRate>
 800e9da:	4603      	mov	r3, r0
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d101      	bne.n	800e9e4 <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
 800e9e0:	2300      	movs	r3, #0
 800e9e2:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 800e9e4:	68fb      	ldr	r3, [r7, #12]
}
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	3710      	adds	r7, #16
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	bd80      	pop	{r7, pc}
	...

0800e9f0 <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 800e9f0:	b580      	push	{r7, lr}
 800e9f2:	b082      	sub	sp, #8
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	6078      	str	r0, [r7, #4]
 800e9f8:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
 800e9fa:	4b0e      	ldr	r3, [pc, #56]	; (800ea34 <MT48LC4M32B2_ClockEnable+0x44>)
 800e9fc:	2201      	movs	r2, #1
 800e9fe:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 800ea00:	4a0c      	ldr	r2, [pc, #48]	; (800ea34 <MT48LC4M32B2_ClockEnable+0x44>)
 800ea02:	683b      	ldr	r3, [r7, #0]
 800ea04:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800ea06:	4b0b      	ldr	r3, [pc, #44]	; (800ea34 <MT48LC4M32B2_ClockEnable+0x44>)
 800ea08:	2201      	movs	r2, #1
 800ea0a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800ea0c:	4b09      	ldr	r3, [pc, #36]	; (800ea34 <MT48LC4M32B2_ClockEnable+0x44>)
 800ea0e:	2200      	movs	r2, #0
 800ea10:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800ea12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ea16:	4907      	ldr	r1, [pc, #28]	; (800ea34 <MT48LC4M32B2_ClockEnable+0x44>)
 800ea18:	6878      	ldr	r0, [r7, #4]
 800ea1a:	f007 f8b1 	bl	8015b80 <HAL_SDRAM_SendCommand>
 800ea1e:	4603      	mov	r3, r0
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d002      	beq.n	800ea2a <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 800ea24:	f04f 33ff 	mov.w	r3, #4294967295
 800ea28:	e000      	b.n	800ea2c <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800ea2a:	2300      	movs	r3, #0
  }
}
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	3708      	adds	r7, #8
 800ea30:	46bd      	mov	sp, r7
 800ea32:	bd80      	pop	{r7, pc}
 800ea34:	2400aa5c 	.word	0x2400aa5c

0800ea38 <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b082      	sub	sp, #8
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
 800ea40:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
 800ea42:	4b0e      	ldr	r3, [pc, #56]	; (800ea7c <MT48LC4M32B2_Precharge+0x44>)
 800ea44:	2202      	movs	r2, #2
 800ea46:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 800ea48:	4a0c      	ldr	r2, [pc, #48]	; (800ea7c <MT48LC4M32B2_Precharge+0x44>)
 800ea4a:	683b      	ldr	r3, [r7, #0]
 800ea4c:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800ea4e:	4b0b      	ldr	r3, [pc, #44]	; (800ea7c <MT48LC4M32B2_Precharge+0x44>)
 800ea50:	2201      	movs	r2, #1
 800ea52:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800ea54:	4b09      	ldr	r3, [pc, #36]	; (800ea7c <MT48LC4M32B2_Precharge+0x44>)
 800ea56:	2200      	movs	r2, #0
 800ea58:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800ea5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ea5e:	4907      	ldr	r1, [pc, #28]	; (800ea7c <MT48LC4M32B2_Precharge+0x44>)
 800ea60:	6878      	ldr	r0, [r7, #4]
 800ea62:	f007 f88d 	bl	8015b80 <HAL_SDRAM_SendCommand>
 800ea66:	4603      	mov	r3, r0
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d002      	beq.n	800ea72 <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 800ea6c:	f04f 33ff 	mov.w	r3, #4294967295
 800ea70:	e000      	b.n	800ea74 <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800ea72:	2300      	movs	r3, #0
  }
}
 800ea74:	4618      	mov	r0, r3
 800ea76:	3708      	adds	r7, #8
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	bd80      	pop	{r7, pc}
 800ea7c:	2400aa5c 	.word	0x2400aa5c

0800ea80 <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b084      	sub	sp, #16
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	6078      	str	r0, [r7, #4]
 800ea88:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800ea8a:	683b      	ldr	r3, [r7, #0]
 800ea8c:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 800ea8e:	683b      	ldr	r3, [r7, #0]
 800ea90:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800ea92:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 800ea94:	683b      	ldr	r3, [r7, #0]
 800ea96:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 800ea98:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 800ea9a:	683b      	ldr	r3, [r7, #0]
 800ea9c:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 800ea9e:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 800eaa0:	683b      	ldr	r3, [r7, #0]
 800eaa2:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800eaa4:	4313      	orrs	r3, r2
 800eaa6:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
 800eaa8:	4b0e      	ldr	r3, [pc, #56]	; (800eae4 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800eaaa:	2204      	movs	r2, #4
 800eaac:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 800eaae:	683b      	ldr	r3, [r7, #0]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	4a0c      	ldr	r2, [pc, #48]	; (800eae4 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800eab4:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800eab6:	4b0b      	ldr	r3, [pc, #44]	; (800eae4 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800eab8:	2201      	movs	r2, #1
 800eaba:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800eabc:	4a09      	ldr	r2, [pc, #36]	; (800eae4 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800eac2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eac6:	4907      	ldr	r1, [pc, #28]	; (800eae4 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800eac8:	6878      	ldr	r0, [r7, #4]
 800eaca:	f007 f859 	bl	8015b80 <HAL_SDRAM_SendCommand>
 800eace:	4603      	mov	r3, r0
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d002      	beq.n	800eada <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
 800ead4:	f04f 33ff 	mov.w	r3, #4294967295
 800ead8:	e000      	b.n	800eadc <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800eada:	2300      	movs	r3, #0
  }
}
 800eadc:	4618      	mov	r0, r3
 800eade:	3710      	adds	r7, #16
 800eae0:	46bd      	mov	sp, r7
 800eae2:	bd80      	pop	{r7, pc}
 800eae4:	2400aa5c 	.word	0x2400aa5c

0800eae8 <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 800eae8:	b580      	push	{r7, lr}
 800eaea:	b084      	sub	sp, #16
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	60f8      	str	r0, [r7, #12]
 800eaf0:	60b9      	str	r1, [r7, #8]
 800eaf2:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 800eaf4:	4a0e      	ldr	r2, [pc, #56]	; (800eb30 <MT48LC4M32B2_RefreshMode+0x48>)
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 800eafa:	4a0d      	ldr	r2, [pc, #52]	; (800eb30 <MT48LC4M32B2_RefreshMode+0x48>)
 800eafc:	68bb      	ldr	r3, [r7, #8]
 800eafe:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 800eb00:	4b0b      	ldr	r3, [pc, #44]	; (800eb30 <MT48LC4M32B2_RefreshMode+0x48>)
 800eb02:	2208      	movs	r2, #8
 800eb04:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800eb06:	4b0a      	ldr	r3, [pc, #40]	; (800eb30 <MT48LC4M32B2_RefreshMode+0x48>)
 800eb08:	2200      	movs	r2, #0
 800eb0a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800eb0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eb10:	4907      	ldr	r1, [pc, #28]	; (800eb30 <MT48LC4M32B2_RefreshMode+0x48>)
 800eb12:	68f8      	ldr	r0, [r7, #12]
 800eb14:	f007 f834 	bl	8015b80 <HAL_SDRAM_SendCommand>
 800eb18:	4603      	mov	r3, r0
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d002      	beq.n	800eb24 <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
 800eb1e:	f04f 33ff 	mov.w	r3, #4294967295
 800eb22:	e000      	b.n	800eb26 <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800eb24:	2300      	movs	r3, #0
  }
}
 800eb26:	4618      	mov	r0, r3
 800eb28:	3710      	adds	r7, #16
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	bd80      	pop	{r7, pc}
 800eb2e:	bf00      	nop
 800eb30:	2400aa5c 	.word	0x2400aa5c

0800eb34 <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b082      	sub	sp, #8
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
 800eb3c:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 800eb3e:	6839      	ldr	r1, [r7, #0]
 800eb40:	6878      	ldr	r0, [r7, #4]
 800eb42:	f007 f852 	bl	8015bea <HAL_SDRAM_ProgramRefreshRate>
 800eb46:	4603      	mov	r3, r0
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d002      	beq.n	800eb52 <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
 800eb4c:	f04f 33ff 	mov.w	r3, #4294967295
 800eb50:	e000      	b.n	800eb54 <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800eb52:	2300      	movs	r3, #0
  }
}
 800eb54:	4618      	mov	r0, r3
 800eb56:	3708      	adds	r7, #8
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	bd80      	pop	{r7, pc}

0800eb5c <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b084      	sub	sp, #16
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 800eb64:	f001 fcfc 	bl	8010560 <HAL_GetTick>
 800eb68:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 800eb6a:	bf00      	nop
 800eb6c:	f001 fcf8 	bl	8010560 <HAL_GetTick>
 800eb70:	4602      	mov	r2, r0
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	1ad3      	subs	r3, r2, r3
 800eb76:	687a      	ldr	r2, [r7, #4]
 800eb78:	429a      	cmp	r2, r3
 800eb7a:	d8f7      	bhi.n	800eb6c <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
 800eb7c:	2300      	movs	r3, #0
}
 800eb7e:	4618      	mov	r0, r3
 800eb80:	3710      	adds	r7, #16
 800eb82:	46bd      	mov	sp, r7
 800eb84:	bd80      	pop	{r7, pc}
	...

0800eb88 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	b082      	sub	sp, #8
 800eb8c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800eb8e:	2300      	movs	r3, #0
 800eb90:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 800eb92:	4b16      	ldr	r3, [pc, #88]	; (800ebec <BSP_I2C4_Init+0x64>)
 800eb94:	4a16      	ldr	r2, [pc, #88]	; (800ebf0 <BSP_I2C4_Init+0x68>)
 800eb96:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 800eb98:	4b16      	ldr	r3, [pc, #88]	; (800ebf4 <BSP_I2C4_Init+0x6c>)
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d11f      	bne.n	800ebe0 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 800eba0:	4b14      	ldr	r3, [pc, #80]	; (800ebf4 <BSP_I2C4_Init+0x6c>)
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	3301      	adds	r3, #1
 800eba6:	4a13      	ldr	r2, [pc, #76]	; (800ebf4 <BSP_I2C4_Init+0x6c>)
 800eba8:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800ebaa:	4810      	ldr	r0, [pc, #64]	; (800ebec <BSP_I2C4_Init+0x64>)
 800ebac:	f002 fef8 	bl	80119a0 <HAL_I2C_GetState>
 800ebb0:	4603      	mov	r3, r0
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d114      	bne.n	800ebe0 <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 800ebb6:	480d      	ldr	r0, [pc, #52]	; (800ebec <BSP_I2C4_Init+0x64>)
 800ebb8:	f000 fb60 	bl	800f27c <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800ebbc:	f005 fe8c 	bl	80148d8 <HAL_RCC_GetPCLK2Freq>
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	490d      	ldr	r1, [pc, #52]	; (800ebf8 <BSP_I2C4_Init+0x70>)
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	f000 f8e3 	bl	800ed90 <I2C_GetTiming>
 800ebca:	4603      	mov	r3, r0
 800ebcc:	4619      	mov	r1, r3
 800ebce:	4807      	ldr	r0, [pc, #28]	; (800ebec <BSP_I2C4_Init+0x64>)
 800ebd0:	f000 f838 	bl	800ec44 <MX_I2C4_Init>
 800ebd4:	4603      	mov	r3, r0
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d002      	beq.n	800ebe0 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800ebda:	f06f 0307 	mvn.w	r3, #7
 800ebde:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 800ebe0:	687b      	ldr	r3, [r7, #4]
}
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	3708      	adds	r7, #8
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	bd80      	pop	{r7, pc}
 800ebea:	bf00      	nop
 800ebec:	2400bb00 	.word	0x2400bb00
 800ebf0:	58001c00 	.word	0x58001c00
 800ebf4:	2400aa6c 	.word	0x2400aa6c
 800ebf8:	000186a0 	.word	0x000186a0

0800ebfc <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b082      	sub	sp, #8
 800ec00:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 800ec02:	2300      	movs	r3, #0
 800ec04:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 800ec06:	4b0d      	ldr	r3, [pc, #52]	; (800ec3c <BSP_I2C4_DeInit+0x40>)
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	3b01      	subs	r3, #1
 800ec0c:	4a0b      	ldr	r2, [pc, #44]	; (800ec3c <BSP_I2C4_DeInit+0x40>)
 800ec0e:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 800ec10:	4b0a      	ldr	r3, [pc, #40]	; (800ec3c <BSP_I2C4_DeInit+0x40>)
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d10b      	bne.n	800ec30 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 800ec18:	4809      	ldr	r0, [pc, #36]	; (800ec40 <BSP_I2C4_DeInit+0x44>)
 800ec1a:	f000 fb9b 	bl	800f354 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800ec1e:	4808      	ldr	r0, [pc, #32]	; (800ec40 <BSP_I2C4_DeInit+0x44>)
 800ec20:	f002 fc4c 	bl	80114bc <HAL_I2C_DeInit>
 800ec24:	4603      	mov	r3, r0
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d002      	beq.n	800ec30 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 800ec2a:	f06f 0307 	mvn.w	r3, #7
 800ec2e:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 800ec30:	687b      	ldr	r3, [r7, #4]
}
 800ec32:	4618      	mov	r0, r3
 800ec34:	3708      	adds	r7, #8
 800ec36:	46bd      	mov	sp, r7
 800ec38:	bd80      	pop	{r7, pc}
 800ec3a:	bf00      	nop
 800ec3c:	2400aa6c 	.word	0x2400aa6c
 800ec40:	2400bb00 	.word	0x2400bb00

0800ec44 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b084      	sub	sp, #16
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	6078      	str	r0, [r7, #4]
 800ec4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ec4e:	2300      	movs	r3, #0
 800ec50:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	683a      	ldr	r2, [r7, #0]
 800ec56:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	2201      	movs	r2, #1
 800ec62:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	2200      	movs	r2, #0
 800ec68:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	2200      	movs	r2, #0
 800ec74:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	2200      	movs	r2, #0
 800ec7a:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	2200      	movs	r2, #0
 800ec80:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800ec82:	6878      	ldr	r0, [r7, #4]
 800ec84:	f002 fb8a 	bl	801139c <HAL_I2C_Init>
 800ec88:	4603      	mov	r3, r0
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d002      	beq.n	800ec94 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 800ec8e:	2301      	movs	r3, #1
 800ec90:	73fb      	strb	r3, [r7, #15]
 800ec92:	e014      	b.n	800ecbe <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 800ec94:	2300      	movs	r3, #0
 800ec96:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 800ec98:	68b9      	ldr	r1, [r7, #8]
 800ec9a:	6878      	ldr	r0, [r7, #4]
 800ec9c:	f003 f940 	bl	8011f20 <HAL_I2CEx_ConfigAnalogFilter>
 800eca0:	4603      	mov	r3, r0
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d002      	beq.n	800ecac <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 800eca6:	2301      	movs	r3, #1
 800eca8:	73fb      	strb	r3, [r7, #15]
 800ecaa:	e008      	b.n	800ecbe <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 800ecac:	2100      	movs	r1, #0
 800ecae:	6878      	ldr	r0, [r7, #4]
 800ecb0:	f003 f981 	bl	8011fb6 <HAL_I2CEx_ConfigDigitalFilter>
 800ecb4:	4603      	mov	r3, r0
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d001      	beq.n	800ecbe <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 800ecba:	2301      	movs	r3, #1
 800ecbc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 800ecbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	3710      	adds	r7, #16
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	bd80      	pop	{r7, pc}

0800ecc8 <BSP_I2C4_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b088      	sub	sp, #32
 800eccc:	af02      	add	r7, sp, #8
 800ecce:	60ba      	str	r2, [r7, #8]
 800ecd0:	461a      	mov	r2, r3
 800ecd2:	4603      	mov	r3, r0
 800ecd4:	81fb      	strh	r3, [r7, #14]
 800ecd6:	460b      	mov	r3, r1
 800ecd8:	81bb      	strh	r3, [r7, #12]
 800ecda:	4613      	mov	r3, r2
 800ecdc:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800ecde:	89b9      	ldrh	r1, [r7, #12]
 800ece0:	89f8      	ldrh	r0, [r7, #14]
 800ece2:	88fb      	ldrh	r3, [r7, #6]
 800ece4:	9300      	str	r3, [sp, #0]
 800ece6:	68bb      	ldr	r3, [r7, #8]
 800ece8:	2201      	movs	r2, #1
 800ecea:	f000 fb57 	bl	800f39c <I2C4_WriteReg>
 800ecee:	4603      	mov	r3, r0
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d102      	bne.n	800ecfa <BSP_I2C4_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	617b      	str	r3, [r7, #20]
 800ecf8:	e00c      	b.n	800ed14 <BSP_I2C4_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800ecfa:	4809      	ldr	r0, [pc, #36]	; (800ed20 <BSP_I2C4_WriteReg+0x58>)
 800ecfc:	f002 fe5e 	bl	80119bc <HAL_I2C_GetError>
 800ed00:	4603      	mov	r3, r0
 800ed02:	2b04      	cmp	r3, #4
 800ed04:	d103      	bne.n	800ed0e <BSP_I2C4_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800ed06:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800ed0a:	617b      	str	r3, [r7, #20]
 800ed0c:	e002      	b.n	800ed14 <BSP_I2C4_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800ed0e:	f06f 0303 	mvn.w	r3, #3
 800ed12:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 800ed14:	697b      	ldr	r3, [r7, #20]
}
 800ed16:	4618      	mov	r0, r3
 800ed18:	3718      	adds	r7, #24
 800ed1a:	46bd      	mov	sp, r7
 800ed1c:	bd80      	pop	{r7, pc}
 800ed1e:	bf00      	nop
 800ed20:	2400bb00 	.word	0x2400bb00

0800ed24 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800ed24:	b580      	push	{r7, lr}
 800ed26:	b088      	sub	sp, #32
 800ed28:	af02      	add	r7, sp, #8
 800ed2a:	60ba      	str	r2, [r7, #8]
 800ed2c:	461a      	mov	r2, r3
 800ed2e:	4603      	mov	r3, r0
 800ed30:	81fb      	strh	r3, [r7, #14]
 800ed32:	460b      	mov	r3, r1
 800ed34:	81bb      	strh	r3, [r7, #12]
 800ed36:	4613      	mov	r3, r2
 800ed38:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800ed3a:	89b9      	ldrh	r1, [r7, #12]
 800ed3c:	89f8      	ldrh	r0, [r7, #14]
 800ed3e:	88fb      	ldrh	r3, [r7, #6]
 800ed40:	9300      	str	r3, [sp, #0]
 800ed42:	68bb      	ldr	r3, [r7, #8]
 800ed44:	2201      	movs	r2, #1
 800ed46:	f000 fb4f 	bl	800f3e8 <I2C4_ReadReg>
 800ed4a:	4603      	mov	r3, r0
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d102      	bne.n	800ed56 <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 800ed50:	2300      	movs	r3, #0
 800ed52:	617b      	str	r3, [r7, #20]
 800ed54:	e00c      	b.n	800ed70 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800ed56:	4809      	ldr	r0, [pc, #36]	; (800ed7c <BSP_I2C4_ReadReg+0x58>)
 800ed58:	f002 fe30 	bl	80119bc <HAL_I2C_GetError>
 800ed5c:	4603      	mov	r3, r0
 800ed5e:	2b04      	cmp	r3, #4
 800ed60:	d103      	bne.n	800ed6a <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800ed62:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800ed66:	617b      	str	r3, [r7, #20]
 800ed68:	e002      	b.n	800ed70 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800ed6a:	f06f 0303 	mvn.w	r3, #3
 800ed6e:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 800ed70:	697b      	ldr	r3, [r7, #20]
}
 800ed72:	4618      	mov	r0, r3
 800ed74:	3718      	adds	r7, #24
 800ed76:	46bd      	mov	sp, r7
 800ed78:	bd80      	pop	{r7, pc}
 800ed7a:	bf00      	nop
 800ed7c:	2400bb00 	.word	0x2400bb00

0800ed80 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 800ed84:	f001 fbec 	bl	8010560 <HAL_GetTick>
 800ed88:	4603      	mov	r3, r0
}
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	bd80      	pop	{r7, pc}
	...

0800ed90 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b086      	sub	sp, #24
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	6078      	str	r0, [r7, #4]
 800ed98:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d06b      	beq.n	800ee7c <I2C_GetTiming+0xec>
 800eda4:	683b      	ldr	r3, [r7, #0]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d068      	beq.n	800ee7c <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800edaa:	2300      	movs	r3, #0
 800edac:	613b      	str	r3, [r7, #16]
 800edae:	e060      	b.n	800ee72 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800edb0:	4a35      	ldr	r2, [pc, #212]	; (800ee88 <I2C_GetTiming+0xf8>)
 800edb2:	693b      	ldr	r3, [r7, #16]
 800edb4:	212c      	movs	r1, #44	; 0x2c
 800edb6:	fb01 f303 	mul.w	r3, r1, r3
 800edba:	4413      	add	r3, r2
 800edbc:	3304      	adds	r3, #4
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	683a      	ldr	r2, [r7, #0]
 800edc2:	429a      	cmp	r2, r3
 800edc4:	d352      	bcc.n	800ee6c <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 800edc6:	4a30      	ldr	r2, [pc, #192]	; (800ee88 <I2C_GetTiming+0xf8>)
 800edc8:	693b      	ldr	r3, [r7, #16]
 800edca:	212c      	movs	r1, #44	; 0x2c
 800edcc:	fb01 f303 	mul.w	r3, r1, r3
 800edd0:	4413      	add	r3, r2
 800edd2:	3308      	adds	r3, #8
 800edd4:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800edd6:	683a      	ldr	r2, [r7, #0]
 800edd8:	429a      	cmp	r2, r3
 800edda:	d847      	bhi.n	800ee6c <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 800eddc:	6939      	ldr	r1, [r7, #16]
 800edde:	6878      	ldr	r0, [r7, #4]
 800ede0:	f000 f856 	bl	800ee90 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 800ede4:	6939      	ldr	r1, [r7, #16]
 800ede6:	6878      	ldr	r0, [r7, #4]
 800ede8:	f000 f940 	bl	800f06c <I2C_Compute_SCLL_SCLH>
 800edec:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	2b7f      	cmp	r3, #127	; 0x7f
 800edf2:	d842      	bhi.n	800ee7a <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800edf4:	4925      	ldr	r1, [pc, #148]	; (800ee8c <I2C_GetTiming+0xfc>)
 800edf6:	68fa      	ldr	r2, [r7, #12]
 800edf8:	4613      	mov	r3, r2
 800edfa:	009b      	lsls	r3, r3, #2
 800edfc:	4413      	add	r3, r2
 800edfe:	009b      	lsls	r3, r3, #2
 800ee00:	440b      	add	r3, r1
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800ee06:	4821      	ldr	r0, [pc, #132]	; (800ee8c <I2C_GetTiming+0xfc>)
 800ee08:	68fa      	ldr	r2, [r7, #12]
 800ee0a:	4613      	mov	r3, r2
 800ee0c:	009b      	lsls	r3, r3, #2
 800ee0e:	4413      	add	r3, r2
 800ee10:	009b      	lsls	r3, r3, #2
 800ee12:	4403      	add	r3, r0
 800ee14:	3304      	adds	r3, #4
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	051b      	lsls	r3, r3, #20
 800ee1a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800ee1e:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800ee20:	481a      	ldr	r0, [pc, #104]	; (800ee8c <I2C_GetTiming+0xfc>)
 800ee22:	68fa      	ldr	r2, [r7, #12]
 800ee24:	4613      	mov	r3, r2
 800ee26:	009b      	lsls	r3, r3, #2
 800ee28:	4413      	add	r3, r2
 800ee2a:	009b      	lsls	r3, r3, #2
 800ee2c:	4403      	add	r3, r0
 800ee2e:	3308      	adds	r3, #8
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	041b      	lsls	r3, r3, #16
 800ee34:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800ee38:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800ee3a:	4814      	ldr	r0, [pc, #80]	; (800ee8c <I2C_GetTiming+0xfc>)
 800ee3c:	68fa      	ldr	r2, [r7, #12]
 800ee3e:	4613      	mov	r3, r2
 800ee40:	009b      	lsls	r3, r3, #2
 800ee42:	4413      	add	r3, r2
 800ee44:	009b      	lsls	r3, r3, #2
 800ee46:	4403      	add	r3, r0
 800ee48:	330c      	adds	r3, #12
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	021b      	lsls	r3, r3, #8
 800ee4e:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800ee50:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800ee52:	480e      	ldr	r0, [pc, #56]	; (800ee8c <I2C_GetTiming+0xfc>)
 800ee54:	68fa      	ldr	r2, [r7, #12]
 800ee56:	4613      	mov	r3, r2
 800ee58:	009b      	lsls	r3, r3, #2
 800ee5a:	4413      	add	r3, r2
 800ee5c:	009b      	lsls	r3, r3, #2
 800ee5e:	4403      	add	r3, r0
 800ee60:	3310      	adds	r3, #16
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800ee66:	430b      	orrs	r3, r1
 800ee68:	617b      	str	r3, [r7, #20]
        }
        break;
 800ee6a:	e006      	b.n	800ee7a <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800ee6c:	693b      	ldr	r3, [r7, #16]
 800ee6e:	3301      	adds	r3, #1
 800ee70:	613b      	str	r3, [r7, #16]
 800ee72:	693b      	ldr	r3, [r7, #16]
 800ee74:	2b02      	cmp	r3, #2
 800ee76:	d99b      	bls.n	800edb0 <I2C_GetTiming+0x20>
 800ee78:	e000      	b.n	800ee7c <I2C_GetTiming+0xec>
        break;
 800ee7a:	bf00      	nop
      }
    }
  }

  return ret;
 800ee7c:	697b      	ldr	r3, [r7, #20]
}
 800ee7e:	4618      	mov	r0, r3
 800ee80:	3718      	adds	r7, #24
 800ee82:	46bd      	mov	sp, r7
 800ee84:	bd80      	pop	{r7, pc}
 800ee86:	bf00      	nop
 800ee88:	0802ca68 	.word	0x0802ca68
 800ee8c:	2400aa70 	.word	0x2400aa70

0800ee90 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800ee90:	b480      	push	{r7}
 800ee92:	b08f      	sub	sp, #60	; 0x3c
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	6078      	str	r0, [r7, #4]
 800ee98:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 800ee9a:	2310      	movs	r3, #16
 800ee9c:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	085a      	lsrs	r2, r3, #1
 800eea2:	4b6e      	ldr	r3, [pc, #440]	; (800f05c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 800eea4:	4413      	add	r3, r2
 800eea6:	687a      	ldr	r2, [r7, #4]
 800eea8:	fbb3 f3f2 	udiv	r3, r3, r2
 800eeac:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800eeae:	2332      	movs	r3, #50	; 0x32
 800eeb0:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 800eeb2:	f44f 7382 	mov.w	r3, #260	; 0x104
 800eeb6:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800eeb8:	4a69      	ldr	r2, [pc, #420]	; (800f060 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800eeba:	683b      	ldr	r3, [r7, #0]
 800eebc:	212c      	movs	r1, #44	; 0x2c
 800eebe:	fb01 f303 	mul.w	r3, r1, r3
 800eec2:	4413      	add	r3, r2
 800eec4:	3324      	adds	r3, #36	; 0x24
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	4618      	mov	r0, r3
 800eeca:	4a65      	ldr	r2, [pc, #404]	; (800f060 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800eecc:	683b      	ldr	r3, [r7, #0]
 800eece:	212c      	movs	r1, #44	; 0x2c
 800eed0:	fb01 f303 	mul.w	r3, r1, r3
 800eed4:	4413      	add	r3, r2
 800eed6:	330c      	adds	r3, #12
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800eedc:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800eede:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800eee0:	495f      	ldr	r1, [pc, #380]	; (800f060 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800eee2:	683b      	ldr	r3, [r7, #0]
 800eee4:	202c      	movs	r0, #44	; 0x2c
 800eee6:	fb00 f303 	mul.w	r3, r0, r3
 800eeea:	440b      	add	r3, r1
 800eeec:	3328      	adds	r3, #40	; 0x28
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	3303      	adds	r3, #3
 800eef2:	69f9      	ldr	r1, [r7, #28]
 800eef4:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800eef8:	1ad3      	subs	r3, r2, r3
 800eefa:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800eefc:	4a58      	ldr	r2, [pc, #352]	; (800f060 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800eefe:	683b      	ldr	r3, [r7, #0]
 800ef00:	212c      	movs	r1, #44	; 0x2c
 800ef02:	fb01 f303 	mul.w	r3, r1, r3
 800ef06:	4413      	add	r3, r2
 800ef08:	3310      	adds	r3, #16
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	4a54      	ldr	r2, [pc, #336]	; (800f060 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800ef10:	683b      	ldr	r3, [r7, #0]
 800ef12:	212c      	movs	r1, #44	; 0x2c
 800ef14:	fb01 f303 	mul.w	r3, r1, r3
 800ef18:	4413      	add	r3, r2
 800ef1a:	3320      	adds	r3, #32
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800ef20:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800ef22:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800ef24:	494e      	ldr	r1, [pc, #312]	; (800f060 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800ef26:	683b      	ldr	r3, [r7, #0]
 800ef28:	202c      	movs	r0, #44	; 0x2c
 800ef2a:	fb00 f303 	mul.w	r3, r0, r3
 800ef2e:	440b      	add	r3, r1
 800ef30:	3328      	adds	r3, #40	; 0x28
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	3304      	adds	r3, #4
 800ef36:	69f9      	ldr	r1, [r7, #28]
 800ef38:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800ef3c:	1ad3      	subs	r3, r2, r3
 800ef3e:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 800ef40:	4a47      	ldr	r2, [pc, #284]	; (800f060 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800ef42:	683b      	ldr	r3, [r7, #0]
 800ef44:	212c      	movs	r1, #44	; 0x2c
 800ef46:	fb01 f303 	mul.w	r3, r1, r3
 800ef4a:	4413      	add	r3, r2
 800ef4c:	3320      	adds	r3, #32
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	4618      	mov	r0, r3
 800ef52:	4a43      	ldr	r2, [pc, #268]	; (800f060 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800ef54:	683b      	ldr	r3, [r7, #0]
 800ef56:	212c      	movs	r1, #44	; 0x2c
 800ef58:	fb01 f303 	mul.w	r3, r1, r3
 800ef5c:	4413      	add	r3, r2
 800ef5e:	3314      	adds	r3, #20
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	4403      	add	r3, r0
 800ef64:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 800ef66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	dc01      	bgt.n	800ef70 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 800ef70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	dc01      	bgt.n	800ef7a <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 800ef76:	2300      	movs	r3, #0
 800ef78:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ef7e:	e062      	b.n	800f046 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800ef80:	2300      	movs	r3, #0
 800ef82:	627b      	str	r3, [r7, #36]	; 0x24
 800ef84:	e059      	b.n	800f03a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800ef86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef88:	3301      	adds	r3, #1
 800ef8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef8c:	3201      	adds	r2, #1
 800ef8e:	fb02 f203 	mul.w	r2, r2, r3
 800ef92:	69fb      	ldr	r3, [r7, #28]
 800ef94:	fb02 f303 	mul.w	r3, r2, r3
 800ef98:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 800ef9a:	693b      	ldr	r3, [r7, #16]
 800ef9c:	68fa      	ldr	r2, [r7, #12]
 800ef9e:	429a      	cmp	r2, r3
 800efa0:	d348      	bcc.n	800f034 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800efa2:	2300      	movs	r3, #0
 800efa4:	623b      	str	r3, [r7, #32]
 800efa6:	e042      	b.n	800f02e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 800efa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efaa:	3301      	adds	r3, #1
 800efac:	6a3a      	ldr	r2, [r7, #32]
 800efae:	fb02 f203 	mul.w	r2, r2, r3
 800efb2:	69fb      	ldr	r3, [r7, #28]
 800efb4:	fb02 f303 	mul.w	r3, r2, r3
 800efb8:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800efba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efbc:	68ba      	ldr	r2, [r7, #8]
 800efbe:	429a      	cmp	r2, r3
 800efc0:	d332      	bcc.n	800f028 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 800efc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efc4:	68ba      	ldr	r2, [r7, #8]
 800efc6:	429a      	cmp	r2, r3
 800efc8:	d82e      	bhi.n	800f028 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 800efca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800efcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efce:	429a      	cmp	r2, r3
 800efd0:	d02a      	beq.n	800f028 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800efd2:	4b24      	ldr	r3, [pc, #144]	; (800f064 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800efd4:	681a      	ldr	r2, [r3, #0]
 800efd6:	4924      	ldr	r1, [pc, #144]	; (800f068 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800efd8:	4613      	mov	r3, r2
 800efda:	009b      	lsls	r3, r3, #2
 800efdc:	4413      	add	r3, r2
 800efde:	009b      	lsls	r3, r3, #2
 800efe0:	440b      	add	r3, r1
 800efe2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800efe4:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800efe6:	4b1f      	ldr	r3, [pc, #124]	; (800f064 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800efe8:	681a      	ldr	r2, [r3, #0]
 800efea:	491f      	ldr	r1, [pc, #124]	; (800f068 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800efec:	4613      	mov	r3, r2
 800efee:	009b      	lsls	r3, r3, #2
 800eff0:	4413      	add	r3, r2
 800eff2:	009b      	lsls	r3, r3, #2
 800eff4:	440b      	add	r3, r1
 800eff6:	3304      	adds	r3, #4
 800eff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800effa:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800effc:	4b19      	ldr	r3, [pc, #100]	; (800f064 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800effe:	681a      	ldr	r2, [r3, #0]
 800f000:	4919      	ldr	r1, [pc, #100]	; (800f068 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800f002:	4613      	mov	r3, r2
 800f004:	009b      	lsls	r3, r3, #2
 800f006:	4413      	add	r3, r2
 800f008:	009b      	lsls	r3, r3, #2
 800f00a:	440b      	add	r3, r1
 800f00c:	3308      	adds	r3, #8
 800f00e:	6a3a      	ldr	r2, [r7, #32]
 800f010:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 800f012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f014:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 800f016:	4b13      	ldr	r3, [pc, #76]	; (800f064 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	3301      	adds	r3, #1
 800f01c:	4a11      	ldr	r2, [pc, #68]	; (800f064 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800f01e:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800f020:	4b10      	ldr	r3, [pc, #64]	; (800f064 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	2b7f      	cmp	r3, #127	; 0x7f
 800f026:	d812      	bhi.n	800f04e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800f028:	6a3b      	ldr	r3, [r7, #32]
 800f02a:	3301      	adds	r3, #1
 800f02c:	623b      	str	r3, [r7, #32]
 800f02e:	6a3b      	ldr	r3, [r7, #32]
 800f030:	2b0f      	cmp	r3, #15
 800f032:	d9b9      	bls.n	800efa8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800f034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f036:	3301      	adds	r3, #1
 800f038:	627b      	str	r3, [r7, #36]	; 0x24
 800f03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f03c:	2b0f      	cmp	r3, #15
 800f03e:	d9a2      	bls.n	800ef86 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800f040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f042:	3301      	adds	r3, #1
 800f044:	62bb      	str	r3, [r7, #40]	; 0x28
 800f046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f048:	2b0f      	cmp	r3, #15
 800f04a:	d999      	bls.n	800ef80 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 800f04c:	e000      	b.n	800f050 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 800f04e:	bf00      	nop
          }
        }
      }
    }
  }
}
 800f050:	373c      	adds	r7, #60	; 0x3c
 800f052:	46bd      	mov	sp, r7
 800f054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f058:	4770      	bx	lr
 800f05a:	bf00      	nop
 800f05c:	3b9aca00 	.word	0x3b9aca00
 800f060:	0802ca68 	.word	0x0802ca68
 800f064:	2400b470 	.word	0x2400b470
 800f068:	2400aa70 	.word	0x2400aa70

0800f06c <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800f06c:	b480      	push	{r7}
 800f06e:	b093      	sub	sp, #76	; 0x4c
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]
 800f074:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 800f076:	f04f 33ff 	mov.w	r3, #4294967295
 800f07a:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	085a      	lsrs	r2, r3, #1
 800f080:	4b7a      	ldr	r3, [pc, #488]	; (800f26c <I2C_Compute_SCLL_SCLH+0x200>)
 800f082:	4413      	add	r3, r2
 800f084:	687a      	ldr	r2, [r7, #4]
 800f086:	fbb3 f3f2 	udiv	r3, r3, r2
 800f08a:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 800f08c:	4a78      	ldr	r2, [pc, #480]	; (800f270 <I2C_Compute_SCLL_SCLH+0x204>)
 800f08e:	683b      	ldr	r3, [r7, #0]
 800f090:	212c      	movs	r1, #44	; 0x2c
 800f092:	fb01 f303 	mul.w	r3, r1, r3
 800f096:	4413      	add	r3, r2
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	085a      	lsrs	r2, r3, #1
 800f09c:	4b73      	ldr	r3, [pc, #460]	; (800f26c <I2C_Compute_SCLL_SCLH+0x200>)
 800f09e:	4413      	add	r3, r2
 800f0a0:	4973      	ldr	r1, [pc, #460]	; (800f270 <I2C_Compute_SCLL_SCLH+0x204>)
 800f0a2:	683a      	ldr	r2, [r7, #0]
 800f0a4:	202c      	movs	r0, #44	; 0x2c
 800f0a6:	fb00 f202 	mul.w	r2, r0, r2
 800f0aa:	440a      	add	r2, r1
 800f0ac:	6812      	ldr	r2, [r2, #0]
 800f0ae:	fbb3 f3f2 	udiv	r3, r3, r2
 800f0b2:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800f0b4:	2332      	movs	r3, #50	; 0x32
 800f0b6:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 800f0b8:	4a6d      	ldr	r2, [pc, #436]	; (800f270 <I2C_Compute_SCLL_SCLH+0x204>)
 800f0ba:	683b      	ldr	r3, [r7, #0]
 800f0bc:	212c      	movs	r1, #44	; 0x2c
 800f0be:	fb01 f303 	mul.w	r3, r1, r3
 800f0c2:	4413      	add	r3, r2
 800f0c4:	3328      	adds	r3, #40	; 0x28
 800f0c6:	681a      	ldr	r2, [r3, #0]
 800f0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ca:	fb02 f303 	mul.w	r3, r2, r3
 800f0ce:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 800f0d0:	4a67      	ldr	r2, [pc, #412]	; (800f270 <I2C_Compute_SCLL_SCLH+0x204>)
 800f0d2:	683b      	ldr	r3, [r7, #0]
 800f0d4:	212c      	movs	r1, #44	; 0x2c
 800f0d6:	fb01 f303 	mul.w	r3, r1, r3
 800f0da:	4413      	add	r3, r2
 800f0dc:	3304      	adds	r3, #4
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	4a62      	ldr	r2, [pc, #392]	; (800f26c <I2C_Compute_SCLL_SCLH+0x200>)
 800f0e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f0e6:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 800f0e8:	4a61      	ldr	r2, [pc, #388]	; (800f270 <I2C_Compute_SCLL_SCLH+0x204>)
 800f0ea:	683b      	ldr	r3, [r7, #0]
 800f0ec:	212c      	movs	r1, #44	; 0x2c
 800f0ee:	fb01 f303 	mul.w	r3, r1, r3
 800f0f2:	4413      	add	r3, r2
 800f0f4:	3308      	adds	r3, #8
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	4a5c      	ldr	r2, [pc, #368]	; (800f26c <I2C_Compute_SCLL_SCLH+0x200>)
 800f0fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800f0fe:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 800f100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f102:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800f104:	2300      	movs	r3, #0
 800f106:	637b      	str	r3, [r7, #52]	; 0x34
 800f108:	e0a3      	b.n	800f252 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800f10a:	495a      	ldr	r1, [pc, #360]	; (800f274 <I2C_Compute_SCLL_SCLH+0x208>)
 800f10c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f10e:	4613      	mov	r3, r2
 800f110:	009b      	lsls	r3, r3, #2
 800f112:	4413      	add	r3, r2
 800f114:	009b      	lsls	r3, r3, #2
 800f116:	440b      	add	r3, r1
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	1c5a      	adds	r2, r3, #1
 800f11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f11e:	fb02 f303 	mul.w	r3, r2, r3
 800f122:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800f124:	2300      	movs	r3, #0
 800f126:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f128:	e08c      	b.n	800f244 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800f12a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f12c:	6a3b      	ldr	r3, [r7, #32]
 800f12e:	441a      	add	r2, r3
 800f130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f132:	3301      	adds	r3, #1
 800f134:	6979      	ldr	r1, [r7, #20]
 800f136:	fb01 f103 	mul.w	r1, r1, r3
 800f13a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f13c:	005b      	lsls	r3, r3, #1
 800f13e:	440b      	add	r3, r1
 800f140:	4413      	add	r3, r2
 800f142:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800f144:	4a4a      	ldr	r2, [pc, #296]	; (800f270 <I2C_Compute_SCLL_SCLH+0x204>)
 800f146:	683b      	ldr	r3, [r7, #0]
 800f148:	212c      	movs	r1, #44	; 0x2c
 800f14a:	fb01 f303 	mul.w	r3, r1, r3
 800f14e:	4413      	add	r3, r2
 800f150:	3318      	adds	r3, #24
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	693a      	ldr	r2, [r7, #16]
 800f156:	429a      	cmp	r2, r3
 800f158:	d971      	bls.n	800f23e <I2C_Compute_SCLL_SCLH+0x1d2>
 800f15a:	693a      	ldr	r2, [r7, #16]
 800f15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f15e:	1ad2      	subs	r2, r2, r3
 800f160:	6a3b      	ldr	r3, [r7, #32]
 800f162:	1ad3      	subs	r3, r2, r3
 800f164:	089b      	lsrs	r3, r3, #2
 800f166:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f168:	429a      	cmp	r2, r3
 800f16a:	d268      	bcs.n	800f23e <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800f16c:	2300      	movs	r3, #0
 800f16e:	63bb      	str	r3, [r7, #56]	; 0x38
 800f170:	e062      	b.n	800f238 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800f172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f174:	6a3b      	ldr	r3, [r7, #32]
 800f176:	441a      	add	r2, r3
 800f178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f17a:	3301      	adds	r3, #1
 800f17c:	6979      	ldr	r1, [r7, #20]
 800f17e:	fb01 f103 	mul.w	r1, r1, r3
 800f182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f184:	005b      	lsls	r3, r3, #1
 800f186:	440b      	add	r3, r1
 800f188:	4413      	add	r3, r2
 800f18a:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 800f18c:	693a      	ldr	r2, [r7, #16]
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	441a      	add	r2, r3
 800f192:	4937      	ldr	r1, [pc, #220]	; (800f270 <I2C_Compute_SCLL_SCLH+0x204>)
 800f194:	683b      	ldr	r3, [r7, #0]
 800f196:	202c      	movs	r0, #44	; 0x2c
 800f198:	fb00 f303 	mul.w	r3, r0, r3
 800f19c:	440b      	add	r3, r1
 800f19e:	3320      	adds	r3, #32
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	441a      	add	r2, r3
 800f1a4:	4932      	ldr	r1, [pc, #200]	; (800f270 <I2C_Compute_SCLL_SCLH+0x204>)
 800f1a6:	683b      	ldr	r3, [r7, #0]
 800f1a8:	202c      	movs	r0, #44	; 0x2c
 800f1aa:	fb00 f303 	mul.w	r3, r0, r3
 800f1ae:	440b      	add	r3, r1
 800f1b0:	3324      	adds	r3, #36	; 0x24
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	4413      	add	r3, r2
 800f1b6:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800f1b8:	68ba      	ldr	r2, [r7, #8]
 800f1ba:	69bb      	ldr	r3, [r7, #24]
 800f1bc:	429a      	cmp	r2, r3
 800f1be:	d338      	bcc.n	800f232 <I2C_Compute_SCLL_SCLH+0x1c6>
 800f1c0:	68ba      	ldr	r2, [r7, #8]
 800f1c2:	69fb      	ldr	r3, [r7, #28]
 800f1c4:	429a      	cmp	r2, r3
 800f1c6:	d834      	bhi.n	800f232 <I2C_Compute_SCLL_SCLH+0x1c6>
 800f1c8:	4a29      	ldr	r2, [pc, #164]	; (800f270 <I2C_Compute_SCLL_SCLH+0x204>)
 800f1ca:	683b      	ldr	r3, [r7, #0]
 800f1cc:	212c      	movs	r1, #44	; 0x2c
 800f1ce:	fb01 f303 	mul.w	r3, r1, r3
 800f1d2:	4413      	add	r3, r2
 800f1d4:	331c      	adds	r3, #28
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	68fa      	ldr	r2, [r7, #12]
 800f1da:	429a      	cmp	r2, r3
 800f1dc:	d329      	bcc.n	800f232 <I2C_Compute_SCLL_SCLH+0x1c6>
 800f1de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	429a      	cmp	r2, r3
 800f1e4:	d225      	bcs.n	800f232 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 800f1e6:	68ba      	ldr	r2, [r7, #8]
 800f1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1ea:	1ad3      	subs	r3, r2, r3
 800f1ec:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 800f1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	da02      	bge.n	800f1fa <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 800f1f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1f6:	425b      	negs	r3, r3
 800f1f8:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 800f1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f1fe:	429a      	cmp	r2, r3
 800f200:	d917      	bls.n	800f232 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 800f202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f204:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 800f206:	491b      	ldr	r1, [pc, #108]	; (800f274 <I2C_Compute_SCLL_SCLH+0x208>)
 800f208:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f20a:	4613      	mov	r3, r2
 800f20c:	009b      	lsls	r3, r3, #2
 800f20e:	4413      	add	r3, r2
 800f210:	009b      	lsls	r3, r3, #2
 800f212:	440b      	add	r3, r1
 800f214:	3310      	adds	r3, #16
 800f216:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f218:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 800f21a:	4916      	ldr	r1, [pc, #88]	; (800f274 <I2C_Compute_SCLL_SCLH+0x208>)
 800f21c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f21e:	4613      	mov	r3, r2
 800f220:	009b      	lsls	r3, r3, #2
 800f222:	4413      	add	r3, r2
 800f224:	009b      	lsls	r3, r3, #2
 800f226:	440b      	add	r3, r1
 800f228:	330c      	adds	r3, #12
 800f22a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f22c:	601a      	str	r2, [r3, #0]
              ret = count;
 800f22e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f230:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800f232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f234:	3301      	adds	r3, #1
 800f236:	63bb      	str	r3, [r7, #56]	; 0x38
 800f238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f23a:	2bff      	cmp	r3, #255	; 0xff
 800f23c:	d999      	bls.n	800f172 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800f23e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f240:	3301      	adds	r3, #1
 800f242:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f246:	2bff      	cmp	r3, #255	; 0xff
 800f248:	f67f af6f 	bls.w	800f12a <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800f24c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f24e:	3301      	adds	r3, #1
 800f250:	637b      	str	r3, [r7, #52]	; 0x34
 800f252:	4b09      	ldr	r3, [pc, #36]	; (800f278 <I2C_Compute_SCLL_SCLH+0x20c>)
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f258:	429a      	cmp	r2, r3
 800f25a:	f4ff af56 	bcc.w	800f10a <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 800f25e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800f260:	4618      	mov	r0, r3
 800f262:	374c      	adds	r7, #76	; 0x4c
 800f264:	46bd      	mov	sp, r7
 800f266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f26a:	4770      	bx	lr
 800f26c:	3b9aca00 	.word	0x3b9aca00
 800f270:	0802ca68 	.word	0x0802ca68
 800f274:	2400aa70 	.word	0x2400aa70
 800f278:	2400b470 	.word	0x2400b470

0800f27c <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b08a      	sub	sp, #40	; 0x28
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800f284:	4b31      	ldr	r3, [pc, #196]	; (800f34c <I2C4_MspInit+0xd0>)
 800f286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f28a:	4a30      	ldr	r2, [pc, #192]	; (800f34c <I2C4_MspInit+0xd0>)
 800f28c:	f043 0308 	orr.w	r3, r3, #8
 800f290:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f294:	4b2d      	ldr	r3, [pc, #180]	; (800f34c <I2C4_MspInit+0xd0>)
 800f296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f29a:	f003 0308 	and.w	r3, r3, #8
 800f29e:	613b      	str	r3, [r7, #16]
 800f2a0:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800f2a2:	4b2a      	ldr	r3, [pc, #168]	; (800f34c <I2C4_MspInit+0xd0>)
 800f2a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f2a8:	4a28      	ldr	r2, [pc, #160]	; (800f34c <I2C4_MspInit+0xd0>)
 800f2aa:	f043 0308 	orr.w	r3, r3, #8
 800f2ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f2b2:	4b26      	ldr	r3, [pc, #152]	; (800f34c <I2C4_MspInit+0xd0>)
 800f2b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f2b8:	f003 0308 	and.w	r3, r3, #8
 800f2bc:	60fb      	str	r3, [r7, #12]
 800f2be:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 800f2c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f2c4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800f2c6:	2312      	movs	r3, #18
 800f2c8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800f2ce:	2302      	movs	r3, #2
 800f2d0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800f2d2:	2304      	movs	r3, #4
 800f2d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800f2d6:	f107 0314 	add.w	r3, r7, #20
 800f2da:	4619      	mov	r1, r3
 800f2dc:	481c      	ldr	r0, [pc, #112]	; (800f350 <I2C4_MspInit+0xd4>)
 800f2de:	f001 fd43 	bl	8010d68 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800f2e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f2e6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800f2e8:	2312      	movs	r3, #18
 800f2ea:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800f2f0:	2302      	movs	r3, #2
 800f2f2:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 800f2f4:	2304      	movs	r3, #4
 800f2f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800f2f8:	f107 0314 	add.w	r3, r7, #20
 800f2fc:	4619      	mov	r1, r3
 800f2fe:	4814      	ldr	r0, [pc, #80]	; (800f350 <I2C4_MspInit+0xd4>)
 800f300:	f001 fd32 	bl	8010d68 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 800f304:	4b11      	ldr	r3, [pc, #68]	; (800f34c <I2C4_MspInit+0xd0>)
 800f306:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f30a:	4a10      	ldr	r2, [pc, #64]	; (800f34c <I2C4_MspInit+0xd0>)
 800f30c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f310:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800f314:	4b0d      	ldr	r3, [pc, #52]	; (800f34c <I2C4_MspInit+0xd0>)
 800f316:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f31a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f31e:	60bb      	str	r3, [r7, #8]
 800f320:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 800f322:	4b0a      	ldr	r3, [pc, #40]	; (800f34c <I2C4_MspInit+0xd0>)
 800f324:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f328:	4a08      	ldr	r2, [pc, #32]	; (800f34c <I2C4_MspInit+0xd0>)
 800f32a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f32e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 800f332:	4b06      	ldr	r3, [pc, #24]	; (800f34c <I2C4_MspInit+0xd0>)
 800f334:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f338:	4a04      	ldr	r2, [pc, #16]	; (800f34c <I2C4_MspInit+0xd0>)
 800f33a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f33e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 800f342:	bf00      	nop
 800f344:	3728      	adds	r7, #40	; 0x28
 800f346:	46bd      	mov	sp, r7
 800f348:	bd80      	pop	{r7, pc}
 800f34a:	bf00      	nop
 800f34c:	58024400 	.word	0x58024400
 800f350:	58020c00 	.word	0x58020c00

0800f354 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 800f354:	b580      	push	{r7, lr}
 800f356:	b088      	sub	sp, #32
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 800f35c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f360:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	4619      	mov	r1, r3
 800f366:	480b      	ldr	r0, [pc, #44]	; (800f394 <I2C4_MspDeInit+0x40>)
 800f368:	f001 feae 	bl	80110c8 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 800f36c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f370:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	4619      	mov	r1, r3
 800f376:	4807      	ldr	r0, [pc, #28]	; (800f394 <I2C4_MspDeInit+0x40>)
 800f378:	f001 fea6 	bl	80110c8 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 800f37c:	4b06      	ldr	r3, [pc, #24]	; (800f398 <I2C4_MspDeInit+0x44>)
 800f37e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f382:	4a05      	ldr	r2, [pc, #20]	; (800f398 <I2C4_MspDeInit+0x44>)
 800f384:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f388:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
}
 800f38c:	bf00      	nop
 800f38e:	3720      	adds	r7, #32
 800f390:	46bd      	mov	sp, r7
 800f392:	bd80      	pop	{r7, pc}
 800f394:	58020c00 	.word	0x58020c00
 800f398:	58024400 	.word	0x58024400

0800f39c <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b088      	sub	sp, #32
 800f3a0:	af04      	add	r7, sp, #16
 800f3a2:	607b      	str	r3, [r7, #4]
 800f3a4:	4603      	mov	r3, r0
 800f3a6:	81fb      	strh	r3, [r7, #14]
 800f3a8:	460b      	mov	r3, r1
 800f3aa:	81bb      	strh	r3, [r7, #12]
 800f3ac:	4613      	mov	r3, r2
 800f3ae:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800f3b0:	8978      	ldrh	r0, [r7, #10]
 800f3b2:	89ba      	ldrh	r2, [r7, #12]
 800f3b4:	89f9      	ldrh	r1, [r7, #14]
 800f3b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f3ba:	9302      	str	r3, [sp, #8]
 800f3bc:	8b3b      	ldrh	r3, [r7, #24]
 800f3be:	9301      	str	r3, [sp, #4]
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	9300      	str	r3, [sp, #0]
 800f3c4:	4603      	mov	r3, r0
 800f3c6:	4807      	ldr	r0, [pc, #28]	; (800f3e4 <I2C4_WriteReg+0x48>)
 800f3c8:	f002 f8bc 	bl	8011544 <HAL_I2C_Mem_Write>
 800f3cc:	4603      	mov	r3, r0
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d101      	bne.n	800f3d6 <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	e001      	b.n	800f3da <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800f3d6:	f06f 0307 	mvn.w	r3, #7
}
 800f3da:	4618      	mov	r0, r3
 800f3dc:	3710      	adds	r7, #16
 800f3de:	46bd      	mov	sp, r7
 800f3e0:	bd80      	pop	{r7, pc}
 800f3e2:	bf00      	nop
 800f3e4:	2400bb00 	.word	0x2400bb00

0800f3e8 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800f3e8:	b580      	push	{r7, lr}
 800f3ea:	b088      	sub	sp, #32
 800f3ec:	af04      	add	r7, sp, #16
 800f3ee:	607b      	str	r3, [r7, #4]
 800f3f0:	4603      	mov	r3, r0
 800f3f2:	81fb      	strh	r3, [r7, #14]
 800f3f4:	460b      	mov	r3, r1
 800f3f6:	81bb      	strh	r3, [r7, #12]
 800f3f8:	4613      	mov	r3, r2
 800f3fa:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800f3fc:	8978      	ldrh	r0, [r7, #10]
 800f3fe:	89ba      	ldrh	r2, [r7, #12]
 800f400:	89f9      	ldrh	r1, [r7, #14]
 800f402:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f406:	9302      	str	r3, [sp, #8]
 800f408:	8b3b      	ldrh	r3, [r7, #24]
 800f40a:	9301      	str	r3, [sp, #4]
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	9300      	str	r3, [sp, #0]
 800f410:	4603      	mov	r3, r0
 800f412:	4807      	ldr	r0, [pc, #28]	; (800f430 <I2C4_ReadReg+0x48>)
 800f414:	f002 f9aa 	bl	801176c <HAL_I2C_Mem_Read>
 800f418:	4603      	mov	r3, r0
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d101      	bne.n	800f422 <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800f41e:	2300      	movs	r3, #0
 800f420:	e001      	b.n	800f426 <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800f422:	f06f 0307 	mvn.w	r3, #7
}
 800f426:	4618      	mov	r0, r3
 800f428:	3710      	adds	r7, #16
 800f42a:	46bd      	mov	sp, r7
 800f42c:	bd80      	pop	{r7, pc}
 800f42e:	bf00      	nop
 800f430:	2400bb00 	.word	0x2400bb00

0800f434 <BSP_QSPI_Init>:
  * @param  Instance   QSPI Instance
  * @param  Init       QSPI Init structure
  * @retval BSP status
  */
int32_t BSP_QSPI_Init(uint32_t Instance, BSP_QSPI_Init_t *Init)
{
 800f434:	b580      	push	{r7, lr}
 800f436:	b090      	sub	sp, #64	; 0x40
 800f438:	af00      	add	r7, sp, #0
 800f43a:	6078      	str	r0, [r7, #4]
 800f43c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800f43e:	2300      	movs	r3, #0
 800f440:	63fb      	str	r3, [r7, #60]	; 0x3c
  3: For DTR mode to reach max 54Mhz
  */
  static const uint32_t PrescalerTab[2] = {1, 3};

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	2b00      	cmp	r3, #0
 800f446:	d003      	beq.n	800f450 <BSP_QSPI_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800f448:	f06f 0301 	mvn.w	r3, #1
 800f44c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f44e:	e090      	b.n	800f572 <BSP_QSPI_Init+0x13e>
  }
  else
  {
    /* Check if instance is already initialized */
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 800f450:	494a      	ldr	r1, [pc, #296]	; (800f57c <BSP_QSPI_Init+0x148>)
 800f452:	687a      	ldr	r2, [r7, #4]
 800f454:	4613      	mov	r3, r2
 800f456:	005b      	lsls	r3, r3, #1
 800f458:	4413      	add	r3, r2
 800f45a:	009b      	lsls	r3, r3, #2
 800f45c:	440b      	add	r3, r1
 800f45e:	781b      	ldrb	r3, [r3, #0]
 800f460:	2b00      	cmp	r3, #0
 800f462:	f040 8086 	bne.w	800f572 <BSP_QSPI_Init+0x13e>
          ret = BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      /* Msp QSPI initialization */
      QSPI_MspInit(&hqspi);
 800f466:	4846      	ldr	r0, [pc, #280]	; (800f580 <BSP_QSPI_Init+0x14c>)
 800f468:	f000 f99c 	bl	800f7a4 <QSPI_MspInit>
#endif /* USE_HAL_QSPI_REGISTER_CALLBACKS */

      if(ret == BSP_ERROR_NONE)
 800f46c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d17f      	bne.n	800f572 <BSP_QSPI_Init+0x13e>
      {
        /* STM32 QSPI interface initialization */
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 800f472:	f107 031c 	add.w	r3, r7, #28
 800f476:	4618      	mov	r0, r3
 800f478:	f7fe ffe9 	bl	800e44e <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 800f47c:	683b      	ldr	r3, [r7, #0]
 800f47e:	785b      	ldrb	r3, [r3, #1]
 800f480:	461a      	mov	r2, r3
 800f482:	4b40      	ldr	r3, [pc, #256]	; (800f584 <BSP_QSPI_Init+0x150>)
 800f484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f488:	613b      	str	r3, [r7, #16]
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 800f48a:	2340      	movs	r3, #64	; 0x40
 800f48c:	61bb      	str	r3, [r7, #24]
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 800f48e:	69fb      	ldr	r3, [r7, #28]
 800f490:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f494:	fa93 f3a3 	rbit	r3, r3
 800f498:	633b      	str	r3, [r7, #48]	; 0x30
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800f49a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f49c:	63bb      	str	r3, [r7, #56]	; 0x38
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800f49e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d101      	bne.n	800f4a8 <BSP_QSPI_Init+0x74>
  {
    return 32U;
 800f4a4:	2320      	movs	r3, #32
 800f4a6:	e003      	b.n	800f4b0 <BSP_QSPI_Init+0x7c>
  }
  return __builtin_clz(value);
 800f4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4aa:	fab3 f383 	clz	r3, r3
 800f4ae:	b2db      	uxtb	r3, r3
 800f4b0:	3b01      	subs	r3, #1
 800f4b2:	60fb      	str	r3, [r7, #12]
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800f4b4:	683b      	ldr	r3, [r7, #0]
 800f4b6:	785b      	ldrb	r3, [r3, #1]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d101      	bne.n	800f4c0 <BSP_QSPI_Init+0x8c>
 800f4bc:	2310      	movs	r3, #16
 800f4be:	e000      	b.n	800f4c2 <BSP_QSPI_Init+0x8e>
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	617b      	str	r3, [r7, #20]

        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 800f4c4:	f107 030c 	add.w	r3, r7, #12
 800f4c8:	4619      	mov	r1, r3
 800f4ca:	482d      	ldr	r0, [pc, #180]	; (800f580 <BSP_QSPI_Init+0x14c>)
 800f4cc:	f000 f85c 	bl	800f588 <MX_QSPI_Init>
 800f4d0:	4603      	mov	r3, r0
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d003      	beq.n	800f4de <BSP_QSPI_Init+0xaa>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800f4d6:	f06f 0303 	mvn.w	r3, #3
 800f4da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f4dc:	e049      	b.n	800f572 <BSP_QSPI_Init+0x13e>
        }/* QSPI memory reset */
        else if(QSPI_ResetMemory(Instance) != BSP_ERROR_NONE)
 800f4de:	6878      	ldr	r0, [r7, #4]
 800f4e0:	f000 faa8 	bl	800fa34 <QSPI_ResetMemory>
 800f4e4:	4603      	mov	r3, r0
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d003      	beq.n	800f4f2 <BSP_QSPI_Init+0xbe>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800f4ea:	f06f 0304 	mvn.w	r3, #4
 800f4ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f4f0:	e03f      	b.n	800f572 <BSP_QSPI_Init+0x13e>
        }/* Force Flash enter 4 Byte address mode */
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800f4f2:	4922      	ldr	r1, [pc, #136]	; (800f57c <BSP_QSPI_Init+0x148>)
 800f4f4:	687a      	ldr	r2, [r7, #4]
 800f4f6:	4613      	mov	r3, r2
 800f4f8:	005b      	lsls	r3, r3, #1
 800f4fa:	4413      	add	r3, r2
 800f4fc:	009b      	lsls	r3, r3, #2
 800f4fe:	440b      	add	r3, r1
 800f500:	3301      	adds	r3, #1
 800f502:	781b      	ldrb	r3, [r3, #0]
 800f504:	4619      	mov	r1, r3
 800f506:	481e      	ldr	r0, [pc, #120]	; (800f580 <BSP_QSPI_Init+0x14c>)
 800f508:	f7ff f810 	bl	800e52c <MT25TL01G_AutoPollingMemReady>
 800f50c:	4603      	mov	r3, r0
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d003      	beq.n	800f51a <BSP_QSPI_Init+0xe6>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800f512:	f06f 0304 	mvn.w	r3, #4
 800f516:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f518:	e02b      	b.n	800f572 <BSP_QSPI_Init+0x13e>
        }
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800f51a:	4918      	ldr	r1, [pc, #96]	; (800f57c <BSP_QSPI_Init+0x148>)
 800f51c:	687a      	ldr	r2, [r7, #4]
 800f51e:	4613      	mov	r3, r2
 800f520:	005b      	lsls	r3, r3, #1
 800f522:	4413      	add	r3, r2
 800f524:	009b      	lsls	r3, r3, #2
 800f526:	440b      	add	r3, r1
 800f528:	3301      	adds	r3, #1
 800f52a:	781b      	ldrb	r3, [r3, #0]
 800f52c:	4619      	mov	r1, r3
 800f52e:	4814      	ldr	r0, [pc, #80]	; (800f580 <BSP_QSPI_Init+0x14c>)
 800f530:	f7fe ffb4 	bl	800e49c <MT25TL01G_Enter4BytesAddressMode>
 800f534:	4603      	mov	r3, r0
 800f536:	2b00      	cmp	r3, #0
 800f538:	d003      	beq.n	800f542 <BSP_QSPI_Init+0x10e>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800f53a:	f06f 0304 	mvn.w	r3, #4
 800f53e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f540:	e017      	b.n	800f572 <BSP_QSPI_Init+0x13e>
        }/* Configuration of the dummy cycles on QSPI memory side */
        else if(QSPI_DummyCyclesCfg(Instance) != BSP_ERROR_NONE)
 800f542:	6878      	ldr	r0, [r7, #4]
 800f544:	f000 fae2 	bl	800fb0c <QSPI_DummyCyclesCfg>
 800f548:	4603      	mov	r3, r0
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d003      	beq.n	800f556 <BSP_QSPI_Init+0x122>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800f54e:	f06f 0304 	mvn.w	r3, #4
 800f552:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f554:	e00d      	b.n	800f572 <BSP_QSPI_Init+0x13e>
        }
        else
        {
          /* Configure Flash to desired mode */
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 800f556:	683b      	ldr	r3, [r7, #0]
 800f558:	7819      	ldrb	r1, [r3, #0]
 800f55a:	683b      	ldr	r3, [r7, #0]
 800f55c:	785b      	ldrb	r3, [r3, #1]
 800f55e:	461a      	mov	r2, r3
 800f560:	6878      	ldr	r0, [r7, #4]
 800f562:	f000 f89d 	bl	800f6a0 <BSP_QSPI_ConfigFlash>
 800f566:	4603      	mov	r3, r0
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d002      	beq.n	800f572 <BSP_QSPI_Init+0x13e>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 800f56c:	f06f 0304 	mvn.w	r3, #4
 800f570:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
  }

  /* Return BSP status */
  return ret;
 800f572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800f574:	4618      	mov	r0, r3
 800f576:	3740      	adds	r7, #64	; 0x40
 800f578:	46bd      	mov	sp, r7
 800f57a:	bd80      	pop	{r7, pc}
 800f57c:	2400bb4c 	.word	0x2400bb4c
 800f580:	2400ba28 	.word	0x2400ba28
 800f584:	0802caec 	.word	0x0802caec

0800f588 <MX_QSPI_Init>:
  * @param  hQspi       QSPI handle
  * @param  Config      QSPI configuration structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b082      	sub	sp, #8
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
 800f590:	6039      	str	r1, [r7, #0]
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	4a13      	ldr	r2, [pc, #76]	; (800f5e4 <MX_QSPI_Init+0x5c>)
 800f596:	601a      	str	r2, [r3, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 800f598:	683b      	ldr	r3, [r7, #0]
 800f59a:	685a      	ldr	r2, [r3, #4]
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	605a      	str	r2, [r3, #4]
  hQspi->Init.FifoThreshold      = 1;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	2201      	movs	r2, #1
 800f5a4:	609a      	str	r2, [r3, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 800f5a6:	683b      	ldr	r3, [r7, #0]
 800f5a8:	689a      	ldr	r2, [r3, #8]
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	60da      	str	r2, [r3, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 800f5ae:	683b      	ldr	r3, [r7, #0]
 800f5b0:	681a      	ldr	r2, [r3, #0]
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	611a      	str	r2, [r3, #16]
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	f44f 7240 	mov.w	r2, #768	; 0x300
 800f5bc:	615a      	str	r2, [r3, #20]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	2200      	movs	r2, #0
 800f5c2:	619a      	str	r2, [r3, #24]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	2200      	movs	r2, #0
 800f5c8:	61da      	str	r2, [r3, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 800f5ca:	683b      	ldr	r3, [r7, #0]
 800f5cc:	68da      	ldr	r2, [r3, #12]
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	621a      	str	r2, [r3, #32]

  return HAL_QSPI_Init(hQspi);
 800f5d2:	6878      	ldr	r0, [r7, #4]
 800f5d4:	f003 fa92 	bl	8012afc <HAL_QSPI_Init>
 800f5d8:	4603      	mov	r3, r0
}
 800f5da:	4618      	mov	r0, r3
 800f5dc:	3708      	adds	r7, #8
 800f5de:	46bd      	mov	sp, r7
 800f5e0:	bd80      	pop	{r7, pc}
 800f5e2:	bf00      	nop
 800f5e4:	52005000 	.word	0x52005000

0800f5e8 <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 800f5e8:	b580      	push	{r7, lr}
 800f5ea:	b084      	sub	sp, #16
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d003      	beq.n	800f602 <BSP_QSPI_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800f5fa:	f06f 0301 	mvn.w	r3, #1
 800f5fe:	60fb      	str	r3, [r7, #12]
 800f600:	e045      	b.n	800f68e <BSP_QSPI_EnableMemoryMappedMode+0xa6>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 800f602:	4925      	ldr	r1, [pc, #148]	; (800f698 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800f604:	687a      	ldr	r2, [r7, #4]
 800f606:	4613      	mov	r3, r2
 800f608:	005b      	lsls	r3, r3, #1
 800f60a:	4413      	add	r3, r2
 800f60c:	009b      	lsls	r3, r3, #2
 800f60e:	440b      	add	r3, r1
 800f610:	3302      	adds	r3, #2
 800f612:	781b      	ldrb	r3, [r3, #0]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d11d      	bne.n	800f654 <BSP_QSPI_EnableMemoryMappedMode+0x6c>
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800f618:	491f      	ldr	r1, [pc, #124]	; (800f698 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800f61a:	687a      	ldr	r2, [r7, #4]
 800f61c:	4613      	mov	r3, r2
 800f61e:	005b      	lsls	r3, r3, #1
 800f620:	4413      	add	r3, r2
 800f622:	009b      	lsls	r3, r3, #2
 800f624:	440b      	add	r3, r1
 800f626:	3301      	adds	r3, #1
 800f628:	781b      	ldrb	r3, [r3, #0]
 800f62a:	4619      	mov	r1, r3
 800f62c:	481b      	ldr	r0, [pc, #108]	; (800f69c <BSP_QSPI_EnableMemoryMappedMode+0xb4>)
 800f62e:	f7ff f8d3 	bl	800e7d8 <MT25TL01G_EnableMemoryMappedModeSTR>
 800f632:	4603      	mov	r3, r0
 800f634:	2b00      	cmp	r3, #0
 800f636:	d003      	beq.n	800f640 <BSP_QSPI_EnableMemoryMappedMode+0x58>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800f638:	f06f 0304 	mvn.w	r3, #4
 800f63c:	60fb      	str	r3, [r7, #12]
 800f63e:	e026      	b.n	800f68e <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
      else /* Update QSPI context if all operations are well done */
      {
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800f640:	4915      	ldr	r1, [pc, #84]	; (800f698 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800f642:	687a      	ldr	r2, [r7, #4]
 800f644:	4613      	mov	r3, r2
 800f646:	005b      	lsls	r3, r3, #1
 800f648:	4413      	add	r3, r2
 800f64a:	009b      	lsls	r3, r3, #2
 800f64c:	440b      	add	r3, r1
 800f64e:	2202      	movs	r2, #2
 800f650:	701a      	strb	r2, [r3, #0]
 800f652:	e01c      	b.n	800f68e <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
    }
    else
    {
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800f654:	4910      	ldr	r1, [pc, #64]	; (800f698 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800f656:	687a      	ldr	r2, [r7, #4]
 800f658:	4613      	mov	r3, r2
 800f65a:	005b      	lsls	r3, r3, #1
 800f65c:	4413      	add	r3, r2
 800f65e:	009b      	lsls	r3, r3, #2
 800f660:	440b      	add	r3, r1
 800f662:	3301      	adds	r3, #1
 800f664:	781b      	ldrb	r3, [r3, #0]
 800f666:	4619      	mov	r1, r3
 800f668:	480c      	ldr	r0, [pc, #48]	; (800f69c <BSP_QSPI_EnableMemoryMappedMode+0xb4>)
 800f66a:	f7ff f84b 	bl	800e704 <MT25TL01G_EnableMemoryMappedModeDTR>
 800f66e:	4603      	mov	r3, r0
 800f670:	2b00      	cmp	r3, #0
 800f672:	d003      	beq.n	800f67c <BSP_QSPI_EnableMemoryMappedMode+0x94>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800f674:	f06f 0304 	mvn.w	r3, #4
 800f678:	60fb      	str	r3, [r7, #12]
 800f67a:	e008      	b.n	800f68e <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
      else /* Update QSPI context if all operations are well done */
      {
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800f67c:	4906      	ldr	r1, [pc, #24]	; (800f698 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800f67e:	687a      	ldr	r2, [r7, #4]
 800f680:	4613      	mov	r3, r2
 800f682:	005b      	lsls	r3, r3, #1
 800f684:	4413      	add	r3, r2
 800f686:	009b      	lsls	r3, r3, #2
 800f688:	440b      	add	r3, r1
 800f68a:	2202      	movs	r2, #2
 800f68c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800f68e:	68fb      	ldr	r3, [r7, #12]
}
 800f690:	4618      	mov	r0, r3
 800f692:	3710      	adds	r7, #16
 800f694:	46bd      	mov	sp, r7
 800f696:	bd80      	pop	{r7, pc}
 800f698:	2400bb4c 	.word	0x2400bb4c
 800f69c:	2400ba28 	.word	0x2400ba28

0800f6a0 <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 800f6a0:	b580      	push	{r7, lr}
 800f6a2:	b084      	sub	sp, #16
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	6078      	str	r0, [r7, #4]
 800f6a8:	460b      	mov	r3, r1
 800f6aa:	70fb      	strb	r3, [r7, #3]
 800f6ac:	4613      	mov	r3, r2
 800f6ae:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d003      	beq.n	800f6c2 <BSP_QSPI_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800f6ba:	f06f 0301 	mvn.w	r3, #1
 800f6be:	60fb      	str	r3, [r7, #12]
 800f6c0:	e067      	b.n	800f792 <BSP_QSPI_ConfigFlash+0xf2>
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 800f6c2:	4936      	ldr	r1, [pc, #216]	; (800f79c <BSP_QSPI_ConfigFlash+0xfc>)
 800f6c4:	687a      	ldr	r2, [r7, #4]
 800f6c6:	4613      	mov	r3, r2
 800f6c8:	005b      	lsls	r3, r3, #1
 800f6ca:	4413      	add	r3, r2
 800f6cc:	009b      	lsls	r3, r3, #2
 800f6ce:	440b      	add	r3, r1
 800f6d0:	781b      	ldrb	r3, [r3, #0]
 800f6d2:	2b02      	cmp	r3, #2
 800f6d4:	d103      	bne.n	800f6de <BSP_QSPI_ConfigFlash+0x3e>
    {
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 800f6d6:	f06f 0319 	mvn.w	r3, #25
 800f6da:	60fb      	str	r3, [r7, #12]
 800f6dc:	e059      	b.n	800f792 <BSP_QSPI_ConfigFlash+0xf2>
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800f6de:	78bb      	ldrb	r3, [r7, #2]
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d101      	bne.n	800f6e8 <BSP_QSPI_ConfigFlash+0x48>
 800f6e4:	2310      	movs	r3, #16
 800f6e6:	e000      	b.n	800f6ea <BSP_QSPI_ConfigFlash+0x4a>
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	4a2d      	ldr	r2, [pc, #180]	; (800f7a0 <BSP_QSPI_ConfigFlash+0x100>)
 800f6ec:	60d3      	str	r3, [r2, #12]

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 800f6ee:	482c      	ldr	r0, [pc, #176]	; (800f7a0 <BSP_QSPI_ConfigFlash+0x100>)
 800f6f0:	f003 fa04 	bl	8012afc <HAL_QSPI_Init>
 800f6f4:	4603      	mov	r3, r0
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d003      	beq.n	800f702 <BSP_QSPI_ConfigFlash+0x62>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 800f6fa:	f06f 0303 	mvn.w	r3, #3
 800f6fe:	60fb      	str	r3, [r7, #12]
 800f700:	e047      	b.n	800f792 <BSP_QSPI_ConfigFlash+0xf2>
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 800f702:	4926      	ldr	r1, [pc, #152]	; (800f79c <BSP_QSPI_ConfigFlash+0xfc>)
 800f704:	687a      	ldr	r2, [r7, #4]
 800f706:	4613      	mov	r3, r2
 800f708:	005b      	lsls	r3, r3, #1
 800f70a:	4413      	add	r3, r2
 800f70c:	009b      	lsls	r3, r3, #2
 800f70e:	440b      	add	r3, r1
 800f710:	3301      	adds	r3, #1
 800f712:	781b      	ldrb	r3, [r3, #0]
 800f714:	2b03      	cmp	r3, #3
 800f716:	d10c      	bne.n	800f732 <BSP_QSPI_ConfigFlash+0x92>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 800f718:	78fb      	ldrb	r3, [r7, #3]
 800f71a:	2b03      	cmp	r3, #3
 800f71c:	d016      	beq.n	800f74c <BSP_QSPI_ConfigFlash+0xac>
          {
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 800f71e:	4820      	ldr	r0, [pc, #128]	; (800f7a0 <BSP_QSPI_ConfigFlash+0x100>)
 800f720:	f7fe ffc5 	bl	800e6ae <MT25TL01G_ExitQPIMode>
 800f724:	4603      	mov	r3, r0
 800f726:	2b00      	cmp	r3, #0
 800f728:	d010      	beq.n	800f74c <BSP_QSPI_ConfigFlash+0xac>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 800f72a:	f06f 0304 	mvn.w	r3, #4
 800f72e:	60fb      	str	r3, [r7, #12]
            }
          }
          break;
 800f730:	e00c      	b.n	800f74c <BSP_QSPI_ConfigFlash+0xac>

        case BSP_QSPI_SPI_MODE :               /* 1-1-1 commands, Power on H/W default setting */
        case BSP_QSPI_SPI_2IO_MODE :           /* 1-2-2 read commands */
        case BSP_QSPI_SPI_4IO_MODE :           /* 1-4-4 read commands */
        default :
          if(Mode == MT25TL01G_QPI_MODE)
 800f732:	78fb      	ldrb	r3, [r7, #3]
 800f734:	2b03      	cmp	r3, #3
 800f736:	d10b      	bne.n	800f750 <BSP_QSPI_ConfigFlash+0xb0>
          {
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 800f738:	4819      	ldr	r0, [pc, #100]	; (800f7a0 <BSP_QSPI_ConfigFlash+0x100>)
 800f73a:	f7fe ff8e 	bl	800e65a <MT25TL01G_EnterQPIMode>
 800f73e:	4603      	mov	r3, r0
 800f740:	2b00      	cmp	r3, #0
 800f742:	d005      	beq.n	800f750 <BSP_QSPI_ConfigFlash+0xb0>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 800f744:	f06f 0304 	mvn.w	r3, #4
 800f748:	60fb      	str	r3, [r7, #12]
            }
          }
          break;
 800f74a:	e001      	b.n	800f750 <BSP_QSPI_ConfigFlash+0xb0>
          break;
 800f74c:	bf00      	nop
 800f74e:	e000      	b.n	800f752 <BSP_QSPI_ConfigFlash+0xb2>
          break;
 800f750:	bf00      	nop
        }

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d11c      	bne.n	800f792 <BSP_QSPI_ConfigFlash+0xf2>
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 800f758:	4910      	ldr	r1, [pc, #64]	; (800f79c <BSP_QSPI_ConfigFlash+0xfc>)
 800f75a:	687a      	ldr	r2, [r7, #4]
 800f75c:	4613      	mov	r3, r2
 800f75e:	005b      	lsls	r3, r3, #1
 800f760:	4413      	add	r3, r2
 800f762:	009b      	lsls	r3, r3, #2
 800f764:	440b      	add	r3, r1
 800f766:	2201      	movs	r2, #1
 800f768:	701a      	strb	r2, [r3, #0]
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 800f76a:	490c      	ldr	r1, [pc, #48]	; (800f79c <BSP_QSPI_ConfigFlash+0xfc>)
 800f76c:	687a      	ldr	r2, [r7, #4]
 800f76e:	4613      	mov	r3, r2
 800f770:	005b      	lsls	r3, r3, #1
 800f772:	4413      	add	r3, r2
 800f774:	009b      	lsls	r3, r3, #2
 800f776:	440b      	add	r3, r1
 800f778:	3301      	adds	r3, #1
 800f77a:	78fa      	ldrb	r2, [r7, #3]
 800f77c:	701a      	strb	r2, [r3, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 800f77e:	4907      	ldr	r1, [pc, #28]	; (800f79c <BSP_QSPI_ConfigFlash+0xfc>)
 800f780:	687a      	ldr	r2, [r7, #4]
 800f782:	4613      	mov	r3, r2
 800f784:	005b      	lsls	r3, r3, #1
 800f786:	4413      	add	r3, r2
 800f788:	009b      	lsls	r3, r3, #2
 800f78a:	440b      	add	r3, r1
 800f78c:	3302      	adds	r3, #2
 800f78e:	78ba      	ldrb	r2, [r7, #2]
 800f790:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800f792:	68fb      	ldr	r3, [r7, #12]
}
 800f794:	4618      	mov	r0, r3
 800f796:	3710      	adds	r7, #16
 800f798:	46bd      	mov	sp, r7
 800f79a:	bd80      	pop	{r7, pc}
 800f79c:	2400bb4c 	.word	0x2400bb4c
 800f7a0:	2400ba28 	.word	0x2400ba28

0800f7a4 <QSPI_MspInit>:
  *           - Peripheral's GPIO Configuration
  *           - NVIC configuration for QSPI interrupt
  * @retval None
  */
static void QSPI_MspInit(QSPI_HandleTypeDef *hQspi)
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b094      	sub	sp, #80	; 0x50
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hQspi);

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 800f7ac:	4b9c      	ldr	r3, [pc, #624]	; (800fa20 <QSPI_MspInit+0x27c>)
 800f7ae:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f7b2:	4a9b      	ldr	r2, [pc, #620]	; (800fa20 <QSPI_MspInit+0x27c>)
 800f7b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f7b8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800f7bc:	4b98      	ldr	r3, [pc, #608]	; (800fa20 <QSPI_MspInit+0x27c>)
 800f7be:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800f7c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f7c6:	63bb      	str	r3, [r7, #56]	; 0x38
 800f7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  /* Reset the QuadSPI memory interface */
  QSPI_FORCE_RESET();
 800f7ca:	4b95      	ldr	r3, [pc, #596]	; (800fa20 <QSPI_MspInit+0x27c>)
 800f7cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f7ce:	4a94      	ldr	r2, [pc, #592]	; (800fa20 <QSPI_MspInit+0x27c>)
 800f7d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f7d4:	67d3      	str	r3, [r2, #124]	; 0x7c
  QSPI_RELEASE_RESET();
 800f7d6:	4b92      	ldr	r3, [pc, #584]	; (800fa20 <QSPI_MspInit+0x27c>)
 800f7d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f7da:	4a91      	ldr	r2, [pc, #580]	; (800fa20 <QSPI_MspInit+0x27c>)
 800f7dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f7e0:	67d3      	str	r3, [r2, #124]	; 0x7c
  /* Enable GPIO clocks */
  QSPI_CLK_GPIO_CLK_ENABLE();
 800f7e2:	4b8f      	ldr	r3, [pc, #572]	; (800fa20 <QSPI_MspInit+0x27c>)
 800f7e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f7e8:	4a8d      	ldr	r2, [pc, #564]	; (800fa20 <QSPI_MspInit+0x27c>)
 800f7ea:	f043 0320 	orr.w	r3, r3, #32
 800f7ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f7f2:	4b8b      	ldr	r3, [pc, #556]	; (800fa20 <QSPI_MspInit+0x27c>)
 800f7f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f7f8:	f003 0320 	and.w	r3, r3, #32
 800f7fc:	637b      	str	r3, [r7, #52]	; 0x34
 800f7fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 800f800:	4b87      	ldr	r3, [pc, #540]	; (800fa20 <QSPI_MspInit+0x27c>)
 800f802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f806:	4a86      	ldr	r2, [pc, #536]	; (800fa20 <QSPI_MspInit+0x27c>)
 800f808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f80c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f810:	4b83      	ldr	r3, [pc, #524]	; (800fa20 <QSPI_MspInit+0x27c>)
 800f812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f81a:	633b      	str	r3, [r7, #48]	; 0x30
 800f81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 800f81e:	4b80      	ldr	r3, [pc, #512]	; (800fa20 <QSPI_MspInit+0x27c>)
 800f820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f824:	4a7e      	ldr	r2, [pc, #504]	; (800fa20 <QSPI_MspInit+0x27c>)
 800f826:	f043 0308 	orr.w	r3, r3, #8
 800f82a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f82e:	4b7c      	ldr	r3, [pc, #496]	; (800fa20 <QSPI_MspInit+0x27c>)
 800f830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f834:	f003 0308 	and.w	r3, r3, #8
 800f838:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f83a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 800f83c:	4b78      	ldr	r3, [pc, #480]	; (800fa20 <QSPI_MspInit+0x27c>)
 800f83e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f842:	4a77      	ldr	r2, [pc, #476]	; (800fa20 <QSPI_MspInit+0x27c>)
 800f844:	f043 0320 	orr.w	r3, r3, #32
 800f848:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f84c:	4b74      	ldr	r3, [pc, #464]	; (800fa20 <QSPI_MspInit+0x27c>)
 800f84e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f852:	f003 0320 	and.w	r3, r3, #32
 800f856:	62bb      	str	r3, [r7, #40]	; 0x28
 800f858:	6abb      	ldr	r3, [r7, #40]	; 0x28
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 800f85a:	4b71      	ldr	r3, [pc, #452]	; (800fa20 <QSPI_MspInit+0x27c>)
 800f85c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f860:	4a6f      	ldr	r2, [pc, #444]	; (800fa20 <QSPI_MspInit+0x27c>)
 800f862:	f043 0320 	orr.w	r3, r3, #32
 800f866:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f86a:	4b6d      	ldr	r3, [pc, #436]	; (800fa20 <QSPI_MspInit+0x27c>)
 800f86c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f870:	f003 0320 	and.w	r3, r3, #32
 800f874:	627b      	str	r3, [r7, #36]	; 0x24
 800f876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 800f878:	4b69      	ldr	r3, [pc, #420]	; (800fa20 <QSPI_MspInit+0x27c>)
 800f87a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f87e:	4a68      	ldr	r2, [pc, #416]	; (800fa20 <QSPI_MspInit+0x27c>)
 800f880:	f043 0320 	orr.w	r3, r3, #32
 800f884:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f888:	4b65      	ldr	r3, [pc, #404]	; (800fa20 <QSPI_MspInit+0x27c>)
 800f88a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f88e:	f003 0320 	and.w	r3, r3, #32
 800f892:	623b      	str	r3, [r7, #32]
 800f894:	6a3b      	ldr	r3, [r7, #32]

  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 800f896:	4b62      	ldr	r3, [pc, #392]	; (800fa20 <QSPI_MspInit+0x27c>)
 800f898:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f89c:	4a60      	ldr	r2, [pc, #384]	; (800fa20 <QSPI_MspInit+0x27c>)
 800f89e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f8a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f8a6:	4b5e      	ldr	r3, [pc, #376]	; (800fa20 <QSPI_MspInit+0x27c>)
 800f8a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f8ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f8b0:	61fb      	str	r3, [r7, #28]
 800f8b2:	69fb      	ldr	r3, [r7, #28]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 800f8b4:	4b5a      	ldr	r3, [pc, #360]	; (800fa20 <QSPI_MspInit+0x27c>)
 800f8b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f8ba:	4a59      	ldr	r2, [pc, #356]	; (800fa20 <QSPI_MspInit+0x27c>)
 800f8bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f8c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f8c4:	4b56      	ldr	r3, [pc, #344]	; (800fa20 <QSPI_MspInit+0x27c>)
 800f8c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f8ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f8ce:	61bb      	str	r3, [r7, #24]
 800f8d0:	69bb      	ldr	r3, [r7, #24]
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 800f8d2:	4b53      	ldr	r3, [pc, #332]	; (800fa20 <QSPI_MspInit+0x27c>)
 800f8d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f8d8:	4a51      	ldr	r2, [pc, #324]	; (800fa20 <QSPI_MspInit+0x27c>)
 800f8da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f8de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f8e2:	4b4f      	ldr	r3, [pc, #316]	; (800fa20 <QSPI_MspInit+0x27c>)
 800f8e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f8e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f8ec:	617b      	str	r3, [r7, #20]
 800f8ee:	697b      	ldr	r3, [r7, #20]
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 800f8f0:	4b4b      	ldr	r3, [pc, #300]	; (800fa20 <QSPI_MspInit+0x27c>)
 800f8f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f8f6:	4a4a      	ldr	r2, [pc, #296]	; (800fa20 <QSPI_MspInit+0x27c>)
 800f8f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f8fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f900:	4b47      	ldr	r3, [pc, #284]	; (800fa20 <QSPI_MspInit+0x27c>)
 800f902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f90a:	613b      	str	r3, [r7, #16]
 800f90c:	693b      	ldr	r3, [r7, #16]
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 800f90e:	4b44      	ldr	r3, [pc, #272]	; (800fa20 <QSPI_MspInit+0x27c>)
 800f910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f914:	4a42      	ldr	r2, [pc, #264]	; (800fa20 <QSPI_MspInit+0x27c>)
 800f916:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f91a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f91e:	4b40      	ldr	r3, [pc, #256]	; (800fa20 <QSPI_MspInit+0x27c>)
 800f920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f928:	60fb      	str	r3, [r7, #12]
 800f92a:	68fb      	ldr	r3, [r7, #12]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 800f92c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f930:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800f932:	2302      	movs	r3, #2
 800f934:	643b      	str	r3, [r7, #64]	; 0x40
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800f936:	2303      	movs	r3, #3
 800f938:	64bb      	str	r3, [r7, #72]	; 0x48
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800f93a:	2300      	movs	r3, #0
 800f93c:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800f93e:	2309      	movs	r3, #9
 800f940:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800f942:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f946:	4619      	mov	r1, r3
 800f948:	4836      	ldr	r0, [pc, #216]	; (800fa24 <QSPI_MspInit+0x280>)
 800f94a:	f001 fa0d 	bl	8010d68 <HAL_GPIO_Init>

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 800f94e:	2340      	movs	r3, #64	; 0x40
 800f950:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800f952:	2301      	movs	r3, #1
 800f954:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800f956:	230a      	movs	r3, #10
 800f958:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 800f95a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f95e:	4619      	mov	r1, r3
 800f960:	4831      	ldr	r0, [pc, #196]	; (800fa28 <QSPI_MspInit+0x284>)
 800f962:	f001 fa01 	bl	8010d68 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 800f966:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f96a:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800f96c:	2300      	movs	r3, #0
 800f96e:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800f970:	2309      	movs	r3, #9
 800f972:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 800f974:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f978:	4619      	mov	r1, r3
 800f97a:	482c      	ldr	r0, [pc, #176]	; (800fa2c <QSPI_MspInit+0x288>)
 800f97c:	f001 f9f4 	bl	8010d68 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 800f980:	2304      	movs	r3, #4
 800f982:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800f984:	2309      	movs	r3, #9
 800f986:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 800f988:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f98c:	4619      	mov	r1, r3
 800f98e:	4828      	ldr	r0, [pc, #160]	; (800fa30 <QSPI_MspInit+0x28c>)
 800f990:	f001 f9ea 	bl	8010d68 <HAL_GPIO_Init>

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 800f994:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f998:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800f99a:	230a      	movs	r3, #10
 800f99c:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 800f99e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f9a2:	4619      	mov	r1, r3
 800f9a4:	481f      	ldr	r0, [pc, #124]	; (800fa24 <QSPI_MspInit+0x280>)
 800f9a6:	f001 f9df 	bl	8010d68 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 800f9aa:	2308      	movs	r3, #8
 800f9ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800f9ae:	2309      	movs	r3, #9
 800f9b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 800f9b2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f9b6:	4619      	mov	r1, r3
 800f9b8:	481d      	ldr	r0, [pc, #116]	; (800fa30 <QSPI_MspInit+0x28c>)
 800f9ba:	f001 f9d5 	bl	8010d68 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 800f9be:	2380      	movs	r3, #128	; 0x80
 800f9c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800f9c2:	2309      	movs	r3, #9
 800f9c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 800f9c6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f9ca:	4619      	mov	r1, r3
 800f9cc:	4815      	ldr	r0, [pc, #84]	; (800fa24 <QSPI_MspInit+0x280>)
 800f9ce:	f001 f9cb 	bl	8010d68 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 800f9d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f9d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 800f9d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f9dc:	4619      	mov	r1, r3
 800f9de:	4812      	ldr	r0, [pc, #72]	; (800fa28 <QSPI_MspInit+0x284>)
 800f9e0:	f001 f9c2 	bl	8010d68 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 800f9e4:	2340      	movs	r3, #64	; 0x40
 800f9e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 800f9e8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f9ec:	4619      	mov	r1, r3
 800f9ee:	480d      	ldr	r0, [pc, #52]	; (800fa24 <QSPI_MspInit+0x280>)
 800f9f0:	f001 f9ba 	bl	8010d68 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 800f9f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f9f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 800f9fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f9fe:	4619      	mov	r1, r3
 800fa00:	4809      	ldr	r0, [pc, #36]	; (800fa28 <QSPI_MspInit+0x284>)
 800fa02:	f001 f9b1 	bl	8010d68 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 800fa06:	2200      	movs	r2, #0
 800fa08:	210f      	movs	r1, #15
 800fa0a:	205c      	movs	r0, #92	; 0x5c
 800fa0c:	f000 fe9c 	bl	8010748 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 800fa10:	205c      	movs	r0, #92	; 0x5c
 800fa12:	f000 feb3 	bl	801077c <HAL_NVIC_EnableIRQ>
}
 800fa16:	bf00      	nop
 800fa18:	3750      	adds	r7, #80	; 0x50
 800fa1a:	46bd      	mov	sp, r7
 800fa1c:	bd80      	pop	{r7, pc}
 800fa1e:	bf00      	nop
 800fa20:	58024400 	.word	0x58024400
 800fa24:	58021400 	.word	0x58021400
 800fa28:	58021800 	.word	0x58021800
 800fa2c:	58020c00 	.word	0x58020c00
 800fa30:	58021c00 	.word	0x58021c00

0800fa34 <QSPI_ResetMemory>:
  *         Flash accept 1-1-1, 1-1-2, 1-2-2 commands after reset.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b084      	sub	sp, #16
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	60fb      	str	r3, [r7, #12]

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 800fa40:	2103      	movs	r1, #3
 800fa42:	4830      	ldr	r0, [pc, #192]	; (800fb04 <QSPI_ResetMemory+0xd0>)
 800fa44:	f7fe ff30 	bl	800e8a8 <MT25TL01G_ResetEnable>
 800fa48:	4603      	mov	r3, r0
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d003      	beq.n	800fa56 <QSPI_ResetMemory+0x22>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
 800fa4e:	f06f 0304 	mvn.w	r3, #4
 800fa52:	60fb      	str	r3, [r7, #12]
 800fa54:	e051      	b.n	800fafa <QSPI_ResetMemory+0xc6>
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 800fa56:	2103      	movs	r1, #3
 800fa58:	482a      	ldr	r0, [pc, #168]	; (800fb04 <QSPI_ResetMemory+0xd0>)
 800fa5a:	f7fe ff57 	bl	800e90c <MT25TL01G_ResetMemory>
 800fa5e:	4603      	mov	r3, r0
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d003      	beq.n	800fa6c <QSPI_ResetMemory+0x38>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800fa64:	f06f 0304 	mvn.w	r3, #4
 800fa68:	60fb      	str	r3, [r7, #12]
 800fa6a:	e046      	b.n	800fafa <QSPI_ResetMemory+0xc6>
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800fa6c:	4926      	ldr	r1, [pc, #152]	; (800fb08 <QSPI_ResetMemory+0xd4>)
 800fa6e:	687a      	ldr	r2, [r7, #4]
 800fa70:	4613      	mov	r3, r2
 800fa72:	005b      	lsls	r3, r3, #1
 800fa74:	4413      	add	r3, r2
 800fa76:	009b      	lsls	r3, r3, #2
 800fa78:	440b      	add	r3, r1
 800fa7a:	3301      	adds	r3, #1
 800fa7c:	781b      	ldrb	r3, [r3, #0]
 800fa7e:	4619      	mov	r1, r3
 800fa80:	4820      	ldr	r0, [pc, #128]	; (800fb04 <QSPI_ResetMemory+0xd0>)
 800fa82:	f7fe fd53 	bl	800e52c <MT25TL01G_AutoPollingMemReady>
 800fa86:	4603      	mov	r3, r0
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d003      	beq.n	800fa94 <QSPI_ResetMemory+0x60>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800fa8c:	f06f 0304 	mvn.w	r3, #4
 800fa90:	60fb      	str	r3, [r7, #12]
 800fa92:	e032      	b.n	800fafa <QSPI_ResetMemory+0xc6>
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 800fa94:	2100      	movs	r1, #0
 800fa96:	481b      	ldr	r0, [pc, #108]	; (800fb04 <QSPI_ResetMemory+0xd0>)
 800fa98:	f7fe ff06 	bl	800e8a8 <MT25TL01G_ResetEnable>
 800fa9c:	4603      	mov	r3, r0
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d003      	beq.n	800faaa <QSPI_ResetMemory+0x76>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800faa2:	f06f 0304 	mvn.w	r3, #4
 800faa6:	60fb      	str	r3, [r7, #12]
 800faa8:	e027      	b.n	800fafa <QSPI_ResetMemory+0xc6>
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 800faaa:	2100      	movs	r1, #0
 800faac:	4815      	ldr	r0, [pc, #84]	; (800fb04 <QSPI_ResetMemory+0xd0>)
 800faae:	f7fe ff2d 	bl	800e90c <MT25TL01G_ResetMemory>
 800fab2:	4603      	mov	r3, r0
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d003      	beq.n	800fac0 <QSPI_ResetMemory+0x8c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800fab8:	f06f 0304 	mvn.w	r3, #4
 800fabc:	60fb      	str	r3, [r7, #12]
 800fabe:	e01c      	b.n	800fafa <QSPI_ResetMemory+0xc6>
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 800fac0:	4911      	ldr	r1, [pc, #68]	; (800fb08 <QSPI_ResetMemory+0xd4>)
 800fac2:	687a      	ldr	r2, [r7, #4]
 800fac4:	4613      	mov	r3, r2
 800fac6:	005b      	lsls	r3, r3, #1
 800fac8:	4413      	add	r3, r2
 800faca:	009b      	lsls	r3, r3, #2
 800facc:	440b      	add	r3, r1
 800face:	2201      	movs	r2, #1
 800fad0:	701a      	strb	r2, [r3, #0]
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
 800fad2:	490d      	ldr	r1, [pc, #52]	; (800fb08 <QSPI_ResetMemory+0xd4>)
 800fad4:	687a      	ldr	r2, [r7, #4]
 800fad6:	4613      	mov	r3, r2
 800fad8:	005b      	lsls	r3, r3, #1
 800fada:	4413      	add	r3, r2
 800fadc:	009b      	lsls	r3, r3, #2
 800fade:	440b      	add	r3, r1
 800fae0:	3301      	adds	r3, #1
 800fae2:	2200      	movs	r2, #0
 800fae4:	701a      	strb	r2, [r3, #0]
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 800fae6:	4908      	ldr	r1, [pc, #32]	; (800fb08 <QSPI_ResetMemory+0xd4>)
 800fae8:	687a      	ldr	r2, [r7, #4]
 800faea:	4613      	mov	r3, r2
 800faec:	005b      	lsls	r3, r3, #1
 800faee:	4413      	add	r3, r2
 800faf0:	009b      	lsls	r3, r3, #2
 800faf2:	440b      	add	r3, r1
 800faf4:	3302      	adds	r3, #2
 800faf6:	2200      	movs	r2, #0
 800faf8:	701a      	strb	r2, [r3, #0]

  }

  /* Return BSP status */
  return ret;
 800fafa:	68fb      	ldr	r3, [r7, #12]
}
 800fafc:	4618      	mov	r0, r3
 800fafe:	3710      	adds	r7, #16
 800fb00:	46bd      	mov	sp, r7
 800fb02:	bd80      	pop	{r7, pc}
 800fb04:	2400ba28 	.word	0x2400ba28
 800fb08:	2400bb4c 	.word	0x2400bb4c

0800fb0c <QSPI_DummyCyclesCfg>:
  *         Dummy cycle bit locate in Configuration Register[7:6]
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
static int32_t QSPI_DummyCyclesCfg(uint32_t Instance)
{
 800fb0c:	b580      	push	{r7, lr}
 800fb0e:	b092      	sub	sp, #72	; 0x48
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	6078      	str	r0, [r7, #4]
    int32_t ret= BSP_ERROR_NONE;
 800fb14:	2300      	movs	r3, #0
 800fb16:	647b      	str	r3, [r7, #68]	; 0x44
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;
 800fb18:	2300      	movs	r3, #0
 800fb1a:	817b      	strh	r3, [r7, #10]

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800fb1c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800fb20:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 800fb22:	2385      	movs	r3, #133	; 0x85
 800fb24:	60fb      	str	r3, [r7, #12]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800fb26:	2300      	movs	r3, #0
 800fb28:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800fb2e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800fb32:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DummyCycles       = 0;
 800fb34:	2300      	movs	r3, #0
 800fb36:	623b      	str	r3, [r7, #32]
  s_command.NbData            = 2;
 800fb38:	2302      	movs	r3, #2
 800fb3a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800fb3c:	2300      	movs	r3, #0
 800fb3e:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800fb40:	2300      	movs	r3, #0
 800fb42:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800fb44:	2300      	movs	r3, #0
 800fb46:	643b      	str	r3, [r7, #64]	; 0x40

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800fb48:	f107 030c 	add.w	r3, r7, #12
 800fb4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800fb50:	4619      	mov	r1, r3
 800fb52:	482b      	ldr	r0, [pc, #172]	; (800fc00 <QSPI_DummyCyclesCfg+0xf4>)
 800fb54:	f003 fa00 	bl	8012f58 <HAL_QSPI_Command>
 800fb58:	4603      	mov	r3, r0
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d002      	beq.n	800fb64 <QSPI_DummyCyclesCfg+0x58>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 800fb5e:	f06f 0304 	mvn.w	r3, #4
 800fb62:	e048      	b.n	800fbf6 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800fb64:	f107 030a 	add.w	r3, r7, #10
 800fb68:	f241 3288 	movw	r2, #5000	; 0x1388
 800fb6c:	4619      	mov	r1, r3
 800fb6e:	4824      	ldr	r0, [pc, #144]	; (800fc00 <QSPI_DummyCyclesCfg+0xf4>)
 800fb70:	f003 fae2 	bl	8013138 <HAL_QSPI_Receive>
 800fb74:	4603      	mov	r3, r0
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d002      	beq.n	800fb80 <QSPI_DummyCyclesCfg+0x74>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 800fb7a:	f06f 0304 	mvn.w	r3, #4
 800fb7e:	e03a      	b.n	800fbf6 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800fb80:	4920      	ldr	r1, [pc, #128]	; (800fc04 <QSPI_DummyCyclesCfg+0xf8>)
 800fb82:	687a      	ldr	r2, [r7, #4]
 800fb84:	4613      	mov	r3, r2
 800fb86:	005b      	lsls	r3, r3, #1
 800fb88:	4413      	add	r3, r2
 800fb8a:	009b      	lsls	r3, r3, #2
 800fb8c:	440b      	add	r3, r1
 800fb8e:	3301      	adds	r3, #1
 800fb90:	781b      	ldrb	r3, [r3, #0]
 800fb92:	4619      	mov	r1, r3
 800fb94:	481a      	ldr	r0, [pc, #104]	; (800fc00 <QSPI_DummyCyclesCfg+0xf4>)
 800fb96:	f7fe fd05 	bl	800e5a4 <MT25TL01G_WriteEnable>
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d002      	beq.n	800fba6 <QSPI_DummyCyclesCfg+0x9a>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 800fba0:	f06f 0304 	mvn.w	r3, #4
 800fba4:	e027      	b.n	800fbf6 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 800fba6:	2381      	movs	r3, #129	; 0x81
 800fba8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 800fbaa:	897a      	ldrh	r2, [r7, #10]
 800fbac:	f640 730f 	movw	r3, #3855	; 0xf0f
 800fbb0:	4013      	ands	r3, r2
 800fbb2:	b29a      	uxth	r2, r3
 800fbb4:	4b14      	ldr	r3, [pc, #80]	; (800fc08 <QSPI_DummyCyclesCfg+0xfc>)
 800fbb6:	4313      	orrs	r3, r2
 800fbb8:	b29b      	uxth	r3, r3
 800fbba:	817b      	strh	r3, [r7, #10]
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800fbbc:	f107 030c 	add.w	r3, r7, #12
 800fbc0:	f241 3288 	movw	r2, #5000	; 0x1388
 800fbc4:	4619      	mov	r1, r3
 800fbc6:	480e      	ldr	r0, [pc, #56]	; (800fc00 <QSPI_DummyCyclesCfg+0xf4>)
 800fbc8:	f003 f9c6 	bl	8012f58 <HAL_QSPI_Command>
 800fbcc:	4603      	mov	r3, r0
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d002      	beq.n	800fbd8 <QSPI_DummyCyclesCfg+0xcc>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 800fbd2:	f06f 0304 	mvn.w	r3, #4
 800fbd6:	e00e      	b.n	800fbf6 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800fbd8:	f107 030a 	add.w	r3, r7, #10
 800fbdc:	f241 3288 	movw	r2, #5000	; 0x1388
 800fbe0:	4619      	mov	r1, r3
 800fbe2:	4807      	ldr	r0, [pc, #28]	; (800fc00 <QSPI_DummyCyclesCfg+0xf4>)
 800fbe4:	f003 fa16 	bl	8013014 <HAL_QSPI_Transmit>
 800fbe8:	4603      	mov	r3, r0
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d002      	beq.n	800fbf4 <QSPI_DummyCyclesCfg+0xe8>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 800fbee:	f06f 0304 	mvn.w	r3, #4
 800fbf2:	e000      	b.n	800fbf6 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Return BSP status */
  return ret;
 800fbf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	3748      	adds	r7, #72	; 0x48
 800fbfa:	46bd      	mov	sp, r7
 800fbfc:	bd80      	pop	{r7, pc}
 800fbfe:	bf00      	nop
 800fc00:	2400ba28 	.word	0x2400ba28
 800fc04:	2400bb4c 	.word	0x2400bb4c
 800fc08:	ffff8080 	.word	0xffff8080

0800fc0c <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
 800fc0c:	b580      	push	{r7, lr}
 800fc0e:	b084      	sub	sp, #16
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800fc14:	2300      	movs	r3, #0
 800fc16:	60fb      	str	r3, [r7, #12]
  static MT48LC4M32B2_Context_t pRegMode;
  if(Instance >=SDRAM_INSTANCES_NBR)
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d003      	beq.n	800fc26 <BSP_SDRAM_Init+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 800fc1e:	f06f 0301 	mvn.w	r3, #1
 800fc22:	60fb      	str	r3, [r7, #12]
 800fc24:	e044      	b.n	800fcb0 <BSP_SDRAM_Init+0xa4>
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	2234      	movs	r2, #52	; 0x34
 800fc2a:	fb02 f303 	mul.w	r3, r2, r3
 800fc2e:	4a23      	ldr	r2, [pc, #140]	; (800fcbc <BSP_SDRAM_Init+0xb0>)
 800fc30:	4413      	add	r3, r2
 800fc32:	4618      	mov	r0, r3
 800fc34:	f000 f8b8 	bl	800fda8 <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	2234      	movs	r2, #52	; 0x34
 800fc3c:	fb02 f303 	mul.w	r3, r2, r3
 800fc40:	4a1e      	ldr	r2, [pc, #120]	; (800fcbc <BSP_SDRAM_Init+0xb0>)
 800fc42:	4413      	add	r3, r2
 800fc44:	2210      	movs	r2, #16
 800fc46:	2104      	movs	r1, #4
 800fc48:	4618      	mov	r0, r3
 800fc4a:	f000 f861 	bl	800fd10 <MX_SDRAM_BANK2_Init>
 800fc4e:	4603      	mov	r3, r0
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d003      	beq.n	800fc5c <BSP_SDRAM_Init+0x50>
    {
      ret = BSP_ERROR_NO_INIT;
 800fc54:	f04f 33ff 	mov.w	r3, #4294967295
 800fc58:	60fb      	str	r3, [r7, #12]
 800fc5a:	e029      	b.n	800fcb0 <BSP_SDRAM_Init+0xa4>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 800fc5c:	4b18      	ldr	r3, [pc, #96]	; (800fcc0 <BSP_SDRAM_Init+0xb4>)
 800fc5e:	2208      	movs	r2, #8
 800fc60:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
 800fc62:	4b17      	ldr	r3, [pc, #92]	; (800fcc0 <BSP_SDRAM_Init+0xb4>)
 800fc64:	2203      	movs	r2, #3
 800fc66:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 800fc68:	4b15      	ldr	r3, [pc, #84]	; (800fcc0 <BSP_SDRAM_Init+0xb4>)
 800fc6a:	f240 6203 	movw	r2, #1539	; 0x603
 800fc6e:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
 800fc70:	4b13      	ldr	r3, [pc, #76]	; (800fcc0 <BSP_SDRAM_Init+0xb4>)
 800fc72:	2200      	movs	r2, #0
 800fc74:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
 800fc76:	4b12      	ldr	r3, [pc, #72]	; (800fcc0 <BSP_SDRAM_Init+0xb4>)
 800fc78:	2200      	movs	r2, #0
 800fc7a:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
 800fc7c:	4b10      	ldr	r3, [pc, #64]	; (800fcc0 <BSP_SDRAM_Init+0xb4>)
 800fc7e:	2230      	movs	r2, #48	; 0x30
 800fc80:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
 800fc82:	4b0f      	ldr	r3, [pc, #60]	; (800fcc0 <BSP_SDRAM_Init+0xb4>)
 800fc84:	2200      	movs	r2, #0
 800fc86:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
 800fc88:	4b0d      	ldr	r3, [pc, #52]	; (800fcc0 <BSP_SDRAM_Init+0xb4>)
 800fc8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fc8e:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	2234      	movs	r2, #52	; 0x34
 800fc94:	fb02 f303 	mul.w	r3, r2, r3
 800fc98:	4a08      	ldr	r2, [pc, #32]	; (800fcbc <BSP_SDRAM_Init+0xb0>)
 800fc9a:	4413      	add	r3, r2
 800fc9c:	4908      	ldr	r1, [pc, #32]	; (800fcc0 <BSP_SDRAM_Init+0xb4>)
 800fc9e:	4618      	mov	r0, r3
 800fca0:	f7fe fe66 	bl	800e970 <MT48LC4M32B2_Init>
 800fca4:	4603      	mov	r3, r0
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d002      	beq.n	800fcb0 <BSP_SDRAM_Init+0xa4>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 800fcaa:	f06f 0304 	mvn.w	r3, #4
 800fcae:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 800fcb0:	68fb      	ldr	r3, [r7, #12]
}
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	3710      	adds	r7, #16
 800fcb6:	46bd      	mov	sp, r7
 800fcb8:	bd80      	pop	{r7, pc}
 800fcba:	bf00      	nop
 800fcbc:	2400bb58 	.word	0x2400bb58
 800fcc0:	2400b474 	.word	0x2400b474

0800fcc4 <BSP_SDRAM_DeInit>:
  * @brief  DeInitializes the SDRAM device.
  * @param  Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
 800fcc4:	b580      	push	{r7, lr}
 800fcc6:	b084      	sub	sp, #16
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800fccc:	2300      	movs	r3, #0
 800fcce:	60fb      	str	r3, [r7, #12]

  if(Instance >= SDRAM_INSTANCES_NBR)
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d003      	beq.n	800fcde <BSP_SDRAM_DeInit+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 800fcd6:	f06f 0301 	mvn.w	r3, #1
 800fcda:	60fb      	str	r3, [r7, #12]
 800fcdc:	e011      	b.n	800fd02 <BSP_SDRAM_DeInit+0x3e>
  }
  else
  {
    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	2234      	movs	r2, #52	; 0x34
 800fce2:	fb02 f303 	mul.w	r3, r2, r3
 800fce6:	4a09      	ldr	r2, [pc, #36]	; (800fd0c <BSP_SDRAM_DeInit+0x48>)
 800fce8:	4413      	add	r3, r2
 800fcea:	4618      	mov	r0, r3
 800fcec:	f005 ff2c 	bl	8015b48 <HAL_SDRAM_DeInit>
#if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 0)
    /* SDRAM controller de-initialization */
    SDRAM_MspDeInit(&hsdram[Instance]);
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	2234      	movs	r2, #52	; 0x34
 800fcf4:	fb02 f303 	mul.w	r3, r2, r3
 800fcf8:	4a04      	ldr	r2, [pc, #16]	; (800fd0c <BSP_SDRAM_DeInit+0x48>)
 800fcfa:	4413      	add	r3, r2
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	f000 f951 	bl	800ffa4 <SDRAM_MspDeInit>
#endif /* (USE_HAL_SDRAM_REGISTER_CALLBACKS == 0) */
  }

  return ret;
 800fd02:	68fb      	ldr	r3, [r7, #12]
}
 800fd04:	4618      	mov	r0, r3
 800fd06:	3710      	adds	r7, #16
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	bd80      	pop	{r7, pc}
 800fd0c:	2400bb58 	.word	0x2400bb58

0800fd10 <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
 800fd10:	b580      	push	{r7, lr}
 800fd12:	b08c      	sub	sp, #48	; 0x30
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	60f8      	str	r0, [r7, #12]
 800fd18:	60b9      	str	r1, [r7, #8]
 800fd1a:	607a      	str	r2, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hsdram->Instance = FMC_SDRAM_DEVICE;
 800fd1c:	4b20      	ldr	r3, [pc, #128]	; (800fda0 <MX_SDRAM_BANK2_Init+0x90>)
 800fd1e:	4a21      	ldr	r2, [pc, #132]	; (800fda4 <MX_SDRAM_BANK2_Init+0x94>)
 800fd20:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	2201      	movs	r2, #1
 800fd26:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	2200      	movs	r2, #0
 800fd2c:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	68ba      	ldr	r2, [r7, #8]
 800fd32:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	687a      	ldr	r2, [r7, #4]
 800fd38:	611a      	str	r2, [r3, #16]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800fd3a:	4b19      	ldr	r3, [pc, #100]	; (800fda0 <MX_SDRAM_BANK2_Init+0x90>)
 800fd3c:	2240      	movs	r2, #64	; 0x40
 800fd3e:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800fd46:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fd54:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fd5c:	625a      	str	r2, [r3, #36]	; 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	2200      	movs	r2, #0
 800fd62:	629a      	str	r2, [r3, #40]	; 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
 800fd64:	2302      	movs	r3, #2
 800fd66:	617b      	str	r3, [r7, #20]
  sdram_timing.ExitSelfRefreshDelay = 7;
 800fd68:	2307      	movs	r3, #7
 800fd6a:	61bb      	str	r3, [r7, #24]
  sdram_timing.SelfRefreshTime      = 4;
 800fd6c:	2304      	movs	r3, #4
 800fd6e:	61fb      	str	r3, [r7, #28]
  sdram_timing.RowCycleDelay        = 7;
 800fd70:	2307      	movs	r3, #7
 800fd72:	623b      	str	r3, [r7, #32]
  sdram_timing.WriteRecoveryTime    = 2;
 800fd74:	2302      	movs	r3, #2
 800fd76:	627b      	str	r3, [r7, #36]	; 0x24
  sdram_timing.RPDelay              = 2;
 800fd78:	2302      	movs	r3, #2
 800fd7a:	62bb      	str	r3, [r7, #40]	; 0x28
  sdram_timing.RCDDelay             = 2;
 800fd7c:	2302      	movs	r3, #2
 800fd7e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 800fd80:	f107 0314 	add.w	r3, r7, #20
 800fd84:	4619      	mov	r1, r3
 800fd86:	68f8      	ldr	r0, [r7, #12]
 800fd88:	f005 fea2 	bl	8015ad0 <HAL_SDRAM_Init>
 800fd8c:	4603      	mov	r3, r0
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d001      	beq.n	800fd96 <MX_SDRAM_BANK2_Init+0x86>
  {
    return  HAL_ERROR;
 800fd92:	2301      	movs	r3, #1
 800fd94:	e000      	b.n	800fd98 <MX_SDRAM_BANK2_Init+0x88>
  }
  return HAL_OK;
 800fd96:	2300      	movs	r3, #0
}
 800fd98:	4618      	mov	r0, r3
 800fd9a:	3730      	adds	r7, #48	; 0x30
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	bd80      	pop	{r7, pc}
 800fda0:	2400bb58 	.word	0x2400bb58
 800fda4:	52004140 	.word	0x52004140

0800fda8 <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
 800fda8:	b580      	push	{r7, lr}
 800fdaa:	b08e      	sub	sp, #56	; 0x38
 800fdac:	af00      	add	r7, sp, #0
 800fdae:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800fdb0:	4b73      	ldr	r3, [pc, #460]	; (800ff80 <SDRAM_MspInit+0x1d8>)
 800fdb2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800fdb6:	4a72      	ldr	r2, [pc, #456]	; (800ff80 <SDRAM_MspInit+0x1d8>)
 800fdb8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800fdbc:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800fdc0:	4b6f      	ldr	r3, [pc, #444]	; (800ff80 <SDRAM_MspInit+0x1d8>)
 800fdc2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800fdc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800fdca:	623b      	str	r3, [r7, #32]
 800fdcc:	6a3b      	ldr	r3, [r7, #32]

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
 800fdce:	4b6c      	ldr	r3, [pc, #432]	; (800ff80 <SDRAM_MspInit+0x1d8>)
 800fdd0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800fdd4:	4a6a      	ldr	r2, [pc, #424]	; (800ff80 <SDRAM_MspInit+0x1d8>)
 800fdd6:	f043 0301 	orr.w	r3, r3, #1
 800fdda:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800fdde:	4b68      	ldr	r3, [pc, #416]	; (800ff80 <SDRAM_MspInit+0x1d8>)
 800fde0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800fde4:	f003 0301 	and.w	r3, r3, #1
 800fde8:	61fb      	str	r3, [r7, #28]
 800fdea:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800fdec:	4b64      	ldr	r3, [pc, #400]	; (800ff80 <SDRAM_MspInit+0x1d8>)
 800fdee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fdf2:	4a63      	ldr	r2, [pc, #396]	; (800ff80 <SDRAM_MspInit+0x1d8>)
 800fdf4:	f043 0308 	orr.w	r3, r3, #8
 800fdf8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fdfc:	4b60      	ldr	r3, [pc, #384]	; (800ff80 <SDRAM_MspInit+0x1d8>)
 800fdfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fe02:	f003 0308 	and.w	r3, r3, #8
 800fe06:	61bb      	str	r3, [r7, #24]
 800fe08:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800fe0a:	4b5d      	ldr	r3, [pc, #372]	; (800ff80 <SDRAM_MspInit+0x1d8>)
 800fe0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fe10:	4a5b      	ldr	r2, [pc, #364]	; (800ff80 <SDRAM_MspInit+0x1d8>)
 800fe12:	f043 0310 	orr.w	r3, r3, #16
 800fe16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fe1a:	4b59      	ldr	r3, [pc, #356]	; (800ff80 <SDRAM_MspInit+0x1d8>)
 800fe1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fe20:	f003 0310 	and.w	r3, r3, #16
 800fe24:	617b      	str	r3, [r7, #20]
 800fe26:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800fe28:	4b55      	ldr	r3, [pc, #340]	; (800ff80 <SDRAM_MspInit+0x1d8>)
 800fe2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fe2e:	4a54      	ldr	r2, [pc, #336]	; (800ff80 <SDRAM_MspInit+0x1d8>)
 800fe30:	f043 0320 	orr.w	r3, r3, #32
 800fe34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fe38:	4b51      	ldr	r3, [pc, #324]	; (800ff80 <SDRAM_MspInit+0x1d8>)
 800fe3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fe3e:	f003 0320 	and.w	r3, r3, #32
 800fe42:	613b      	str	r3, [r7, #16]
 800fe44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800fe46:	4b4e      	ldr	r3, [pc, #312]	; (800ff80 <SDRAM_MspInit+0x1d8>)
 800fe48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fe4c:	4a4c      	ldr	r2, [pc, #304]	; (800ff80 <SDRAM_MspInit+0x1d8>)
 800fe4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fe56:	4b4a      	ldr	r3, [pc, #296]	; (800ff80 <SDRAM_MspInit+0x1d8>)
 800fe58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fe5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe60:	60fb      	str	r3, [r7, #12]
 800fe62:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800fe64:	4b46      	ldr	r3, [pc, #280]	; (800ff80 <SDRAM_MspInit+0x1d8>)
 800fe66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fe6a:	4a45      	ldr	r2, [pc, #276]	; (800ff80 <SDRAM_MspInit+0x1d8>)
 800fe6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fe74:	4b42      	ldr	r3, [pc, #264]	; (800ff80 <SDRAM_MspInit+0x1d8>)
 800fe76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fe7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fe7e:	60bb      	str	r3, [r7, #8]
 800fe80:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800fe82:	2302      	movs	r3, #2
 800fe84:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800fe86:	2301      	movs	r3, #1
 800fe88:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800fe8a:	2303      	movs	r3, #3
 800fe8c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800fe8e:	230c      	movs	r3, #12
 800fe90:	637b      	str	r3, [r7, #52]	; 0x34

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 800fe92:	f24c 7303 	movw	r3, #50947	; 0xc703
 800fe96:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;


  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800fe98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fe9c:	4619      	mov	r1, r3
 800fe9e:	4839      	ldr	r0, [pc, #228]	; (800ff84 <SDRAM_MspInit+0x1dc>)
 800fea0:	f000 ff62 	bl	8010d68 <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800fea4:	f64f 7383 	movw	r3, #65411	; 0xff83
 800fea8:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800feaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800feae:	4619      	mov	r1, r3
 800feb0:	4835      	ldr	r0, [pc, #212]	; (800ff88 <SDRAM_MspInit+0x1e0>)
 800feb2:	f000 ff59 	bl	8010d68 <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800feb6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800feba:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800febc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fec0:	4619      	mov	r1, r3
 800fec2:	4832      	ldr	r0, [pc, #200]	; (800ff8c <SDRAM_MspInit+0x1e4>)
 800fec4:	f000 ff50 	bl	8010d68 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
 800fec8:	f248 1333 	movw	r3, #33075	; 0x8133
 800fecc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800fece:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fed2:	4619      	mov	r1, r3
 800fed4:	482e      	ldr	r0, [pc, #184]	; (800ff90 <SDRAM_MspInit+0x1e8>)
 800fed6:	f000 ff47 	bl	8010d68 <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
 800feda:	23e0      	movs	r3, #224	; 0xe0
 800fedc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800fede:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fee2:	4619      	mov	r1, r3
 800fee4:	482b      	ldr	r0, [pc, #172]	; (800ff94 <SDRAM_MspInit+0x1ec>)
 800fee6:	f000 ff3f 	bl	8010d68 <HAL_GPIO_Init>



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
 800feea:	4b2b      	ldr	r3, [pc, #172]	; (800ff98 <SDRAM_MspInit+0x1f0>)
 800feec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800fef0:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 800fef2:	4b29      	ldr	r3, [pc, #164]	; (800ff98 <SDRAM_MspInit+0x1f0>)
 800fef4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fef8:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
 800fefa:	4b27      	ldr	r3, [pc, #156]	; (800ff98 <SDRAM_MspInit+0x1f0>)
 800fefc:	2280      	movs	r2, #128	; 0x80
 800fefe:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800ff00:	4b25      	ldr	r3, [pc, #148]	; (800ff98 <SDRAM_MspInit+0x1f0>)
 800ff02:	2200      	movs	r2, #0
 800ff04:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
 800ff06:	4b24      	ldr	r3, [pc, #144]	; (800ff98 <SDRAM_MspInit+0x1f0>)
 800ff08:	f240 2202 	movw	r2, #514	; 0x202
 800ff0c:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
 800ff0e:	4b22      	ldr	r3, [pc, #136]	; (800ff98 <SDRAM_MspInit+0x1f0>)
 800ff10:	f640 0208 	movw	r2, #2056	; 0x808
 800ff14:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 800ff16:	4b20      	ldr	r3, [pc, #128]	; (800ff98 <SDRAM_MspInit+0x1f0>)
 800ff18:	2220      	movs	r2, #32
 800ff1a:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 800ff1c:	4b1e      	ldr	r3, [pc, #120]	; (800ff98 <SDRAM_MspInit+0x1f0>)
 800ff1e:	2280      	movs	r2, #128	; 0x80
 800ff20:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 800ff22:	4b1d      	ldr	r3, [pc, #116]	; (800ff98 <SDRAM_MspInit+0x1f0>)
 800ff24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800ff28:	625a      	str	r2, [r3, #36]	; 0x24
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 800ff2a:	4b1b      	ldr	r3, [pc, #108]	; (800ff98 <SDRAM_MspInit+0x1f0>)
 800ff2c:	2200      	movs	r2, #0
 800ff2e:	62da      	str	r2, [r3, #44]	; 0x2c
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 800ff30:	4b19      	ldr	r3, [pc, #100]	; (800ff98 <SDRAM_MspInit+0x1f0>)
 800ff32:	2200      	movs	r2, #0
 800ff34:	631a      	str	r2, [r3, #48]	; 0x30
  mdma_handle.Init.BufferTransferLength = 128;
 800ff36:	4b18      	ldr	r3, [pc, #96]	; (800ff98 <SDRAM_MspInit+0x1f0>)
 800ff38:	2280      	movs	r2, #128	; 0x80
 800ff3a:	629a      	str	r2, [r3, #40]	; 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 800ff3c:	4b16      	ldr	r3, [pc, #88]	; (800ff98 <SDRAM_MspInit+0x1f0>)
 800ff3e:	2200      	movs	r2, #0
 800ff40:	635a      	str	r2, [r3, #52]	; 0x34
  mdma_handle.Init.DestBlockAddressOffset = 0;
 800ff42:	4b15      	ldr	r3, [pc, #84]	; (800ff98 <SDRAM_MspInit+0x1f0>)
 800ff44:	2200      	movs	r2, #0
 800ff46:	639a      	str	r2, [r3, #56]	; 0x38


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 800ff48:	4b13      	ldr	r3, [pc, #76]	; (800ff98 <SDRAM_MspInit+0x1f0>)
 800ff4a:	4a14      	ldr	r2, [pc, #80]	; (800ff9c <SDRAM_MspInit+0x1f4>)
 800ff4c:	601a      	str	r2, [r3, #0]

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 800ff4e:	4b14      	ldr	r3, [pc, #80]	; (800ffa0 <SDRAM_MspInit+0x1f8>)
 800ff50:	4a11      	ldr	r2, [pc, #68]	; (800ff98 <SDRAM_MspInit+0x1f0>)
 800ff52:	631a      	str	r2, [r3, #48]	; 0x30
 800ff54:	4b10      	ldr	r3, [pc, #64]	; (800ff98 <SDRAM_MspInit+0x1f0>)
 800ff56:	4a12      	ldr	r2, [pc, #72]	; (800ffa0 <SDRAM_MspInit+0x1f8>)
 800ff58:	641a      	str	r2, [r3, #64]	; 0x40

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
 800ff5a:	480f      	ldr	r0, [pc, #60]	; (800ff98 <SDRAM_MspInit+0x1f0>)
 800ff5c:	f002 fc5c 	bl	8012818 <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
 800ff60:	480d      	ldr	r0, [pc, #52]	; (800ff98 <SDRAM_MspInit+0x1f0>)
 800ff62:	f002 fc0d 	bl	8012780 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
 800ff66:	2200      	movs	r2, #0
 800ff68:	210f      	movs	r1, #15
 800ff6a:	207a      	movs	r0, #122	; 0x7a
 800ff6c:	f000 fbec 	bl	8010748 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 800ff70:	207a      	movs	r0, #122	; 0x7a
 800ff72:	f000 fc03 	bl	801077c <HAL_NVIC_EnableIRQ>
}
 800ff76:	bf00      	nop
 800ff78:	3738      	adds	r7, #56	; 0x38
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	bd80      	pop	{r7, pc}
 800ff7e:	bf00      	nop
 800ff80:	58024400 	.word	0x58024400
 800ff84:	58020c00 	.word	0x58020c00
 800ff88:	58021000 	.word	0x58021000
 800ff8c:	58021400 	.word	0x58021400
 800ff90:	58021800 	.word	0x58021800
 800ff94:	58021c00 	.word	0x58021c00
 800ff98:	2400b494 	.word	0x2400b494
 800ff9c:	52000040 	.word	0x52000040
 800ffa0:	2400bb58 	.word	0x2400bb58

0800ffa4 <SDRAM_MspDeInit>:
  * @brief  DeInitializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspDeInit(SDRAM_HandleTypeDef  *hSdram)
{
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b082      	sub	sp, #8
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hSdram);

  /* Disable NVIC configuration for DMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
 800ffac:	207a      	movs	r0, #122	; 0x7a
 800ffae:	f000 fbf3 	bl	8010798 <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 800ffb2:	4b05      	ldr	r3, [pc, #20]	; (800ffc8 <SDRAM_MspDeInit+0x24>)
 800ffb4:	4a05      	ldr	r2, [pc, #20]	; (800ffcc <SDRAM_MspDeInit+0x28>)
 800ffb6:	601a      	str	r2, [r3, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
 800ffb8:	4803      	ldr	r0, [pc, #12]	; (800ffc8 <SDRAM_MspDeInit+0x24>)
 800ffba:	f002 fc2d 	bl	8012818 <HAL_MDMA_DeInit>
}
 800ffbe:	bf00      	nop
 800ffc0:	3708      	adds	r7, #8
 800ffc2:	46bd      	mov	sp, r7
 800ffc4:	bd80      	pop	{r7, pc}
 800ffc6:	bf00      	nop
 800ffc8:	2400b500 	.word	0x2400b500
 800ffcc:	52000040 	.word	0x52000040

0800ffd0 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 800ffd0:	b580      	push	{r7, lr}
 800ffd2:	b088      	sub	sp, #32
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	6078      	str	r0, [r7, #4]
 800ffd8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800ffda:	2300      	movs	r3, #0
 800ffdc:	61fb      	str	r3, [r7, #28]

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d11c      	bne.n	801001e <BSP_TS_Init+0x4e>
 800ffe4:	683b      	ldr	r3, [r7, #0]
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d018      	beq.n	801001e <BSP_TS_Init+0x4e>
 800ffec:	683b      	ldr	r3, [r7, #0]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800fff4:	d813      	bhi.n	801001e <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800fff6:	683b      	ldr	r3, [r7, #0]
 800fff8:	685b      	ldr	r3, [r3, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d00f      	beq.n	801001e <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800fffe:	683b      	ldr	r3, [r7, #0]
 8010000:	685b      	ldr	r3, [r3, #4]
 8010002:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8010006:	d80a      	bhi.n	801001e <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 8010008:	683b      	ldr	r3, [r7, #0]
 801000a:	68da      	ldr	r2, [r3, #12]
 801000c:	683b      	ldr	r3, [r7, #0]
 801000e:	6819      	ldr	r1, [r3, #0]
 8010010:	683b      	ldr	r3, [r7, #0]
 8010012:	685b      	ldr	r3, [r3, #4]
 8010014:	428b      	cmp	r3, r1
 8010016:	bf28      	it	cs
 8010018:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 801001a:	429a      	cmp	r2, r3
 801001c:	d903      	bls.n	8010026 <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801001e:	f06f 0301 	mvn.w	r3, #1
 8010022:	61fb      	str	r3, [r7, #28]
 8010024:	e085      	b.n	8010132 <BSP_TS_Init+0x162>
  }
  else
  {
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 8010026:	6878      	ldr	r0, [r7, #4]
 8010028:	f000 f9e6 	bl	80103f8 <FT5336_Probe>
 801002c:	4603      	mov	r3, r0
 801002e:	2b00      	cmp	r3, #0
 8010030:	d003      	beq.n	801003a <BSP_TS_Init+0x6a>
    {
      ret = BSP_ERROR_NO_INIT;
 8010032:	f04f 33ff 	mov.w	r3, #4294967295
 8010036:	61fb      	str	r3, [r7, #28]
 8010038:	e07b      	b.n	8010132 <BSP_TS_Init+0x162>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 801003a:	683b      	ldr	r3, [r7, #0]
 801003c:	6819      	ldr	r1, [r3, #0]
 801003e:	483f      	ldr	r0, [pc, #252]	; (801013c <BSP_TS_Init+0x16c>)
 8010040:	687a      	ldr	r2, [r7, #4]
 8010042:	4613      	mov	r3, r2
 8010044:	009b      	lsls	r3, r3, #2
 8010046:	4413      	add	r3, r2
 8010048:	00db      	lsls	r3, r3, #3
 801004a:	4403      	add	r3, r0
 801004c:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 801004e:	683b      	ldr	r3, [r7, #0]
 8010050:	6859      	ldr	r1, [r3, #4]
 8010052:	483a      	ldr	r0, [pc, #232]	; (801013c <BSP_TS_Init+0x16c>)
 8010054:	687a      	ldr	r2, [r7, #4]
 8010056:	4613      	mov	r3, r2
 8010058:	009b      	lsls	r3, r3, #2
 801005a:	4413      	add	r3, r2
 801005c:	00db      	lsls	r3, r3, #3
 801005e:	4403      	add	r3, r0
 8010060:	3304      	adds	r3, #4
 8010062:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 8010064:	683b      	ldr	r3, [r7, #0]
 8010066:	6899      	ldr	r1, [r3, #8]
 8010068:	4834      	ldr	r0, [pc, #208]	; (801013c <BSP_TS_Init+0x16c>)
 801006a:	687a      	ldr	r2, [r7, #4]
 801006c:	4613      	mov	r3, r2
 801006e:	009b      	lsls	r3, r3, #2
 8010070:	4413      	add	r3, r2
 8010072:	00db      	lsls	r3, r3, #3
 8010074:	4403      	add	r3, r0
 8010076:	3308      	adds	r3, #8
 8010078:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 801007a:	683b      	ldr	r3, [r7, #0]
 801007c:	68d9      	ldr	r1, [r3, #12]
 801007e:	482f      	ldr	r0, [pc, #188]	; (801013c <BSP_TS_Init+0x16c>)
 8010080:	687a      	ldr	r2, [r7, #4]
 8010082:	4613      	mov	r3, r2
 8010084:	009b      	lsls	r3, r3, #2
 8010086:	4413      	add	r3, r2
 8010088:	00db      	lsls	r3, r3, #3
 801008a:	4403      	add	r3, r0
 801008c:	330c      	adds	r3, #12
 801008e:	6019      	str	r1, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8010090:	4b2b      	ldr	r3, [pc, #172]	; (8010140 <BSP_TS_Init+0x170>)
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	69db      	ldr	r3, [r3, #28]
 8010096:	492b      	ldr	r1, [pc, #172]	; (8010144 <BSP_TS_Init+0x174>)
 8010098:	687a      	ldr	r2, [r7, #4]
 801009a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801009e:	f107 010c 	add.w	r1, r7, #12
 80100a2:	4610      	mov	r0, r2
 80100a4:	4798      	blx	r3
 80100a6:	4603      	mov	r3, r0
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	da03      	bge.n	80100b4 <BSP_TS_Init+0xe4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80100ac:	f06f 0304 	mvn.w	r3, #4
 80100b0:	61fb      	str	r3, [r7, #28]
 80100b2:	e03e      	b.n	8010132 <BSP_TS_Init+0x162>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 80100b4:	6939      	ldr	r1, [r7, #16]
 80100b6:	4821      	ldr	r0, [pc, #132]	; (801013c <BSP_TS_Init+0x16c>)
 80100b8:	687a      	ldr	r2, [r7, #4]
 80100ba:	4613      	mov	r3, r2
 80100bc:	009b      	lsls	r3, r3, #2
 80100be:	4413      	add	r3, r2
 80100c0:	00db      	lsls	r3, r3, #3
 80100c2:	4403      	add	r3, r0
 80100c4:	3310      	adds	r3, #16
 80100c6:	6019      	str	r1, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 80100c8:	6979      	ldr	r1, [r7, #20]
 80100ca:	481c      	ldr	r0, [pc, #112]	; (801013c <BSP_TS_Init+0x16c>)
 80100cc:	687a      	ldr	r2, [r7, #4]
 80100ce:	4613      	mov	r3, r2
 80100d0:	009b      	lsls	r3, r3, #2
 80100d2:	4413      	add	r3, r2
 80100d4:	00db      	lsls	r3, r3, #3
 80100d6:	4403      	add	r3, r0
 80100d8:	3314      	adds	r3, #20
 80100da:	6019      	str	r1, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for(i = 0; i < TS_TOUCH_NBR; i++)
 80100dc:	2300      	movs	r3, #0
 80100de:	61bb      	str	r3, [r7, #24]
 80100e0:	e024      	b.n	801012c <BSP_TS_Init+0x15c>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80100e2:	683b      	ldr	r3, [r7, #0]
 80100e4:	681a      	ldr	r2, [r3, #0]
 80100e6:	683b      	ldr	r3, [r7, #0]
 80100e8:	68db      	ldr	r3, [r3, #12]
 80100ea:	4413      	add	r3, r2
 80100ec:	1c59      	adds	r1, r3, #1
 80100ee:	4813      	ldr	r0, [pc, #76]	; (801013c <BSP_TS_Init+0x16c>)
 80100f0:	687a      	ldr	r2, [r7, #4]
 80100f2:	4613      	mov	r3, r2
 80100f4:	009b      	lsls	r3, r3, #2
 80100f6:	4413      	add	r3, r2
 80100f8:	005b      	lsls	r3, r3, #1
 80100fa:	69ba      	ldr	r2, [r7, #24]
 80100fc:	4413      	add	r3, r2
 80100fe:	3306      	adds	r3, #6
 8010100:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8010104:	683b      	ldr	r3, [r7, #0]
 8010106:	685a      	ldr	r2, [r3, #4]
 8010108:	683b      	ldr	r3, [r7, #0]
 801010a:	68db      	ldr	r3, [r3, #12]
 801010c:	4413      	add	r3, r2
 801010e:	1c59      	adds	r1, r3, #1
 8010110:	480a      	ldr	r0, [pc, #40]	; (801013c <BSP_TS_Init+0x16c>)
 8010112:	687a      	ldr	r2, [r7, #4]
 8010114:	4613      	mov	r3, r2
 8010116:	009b      	lsls	r3, r3, #2
 8010118:	4413      	add	r3, r2
 801011a:	005b      	lsls	r3, r3, #1
 801011c:	69ba      	ldr	r2, [r7, #24]
 801011e:	4413      	add	r3, r2
 8010120:	3308      	adds	r3, #8
 8010122:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 8010126:	69bb      	ldr	r3, [r7, #24]
 8010128:	3301      	adds	r3, #1
 801012a:	61bb      	str	r3, [r7, #24]
 801012c:	69bb      	ldr	r3, [r7, #24]
 801012e:	2b01      	cmp	r3, #1
 8010130:	d9d7      	bls.n	80100e2 <BSP_TS_Init+0x112>
        }
      }
    }
  }

  return ret;
 8010132:	69fb      	ldr	r3, [r7, #28]
}
 8010134:	4618      	mov	r0, r3
 8010136:	3720      	adds	r7, #32
 8010138:	46bd      	mov	sp, r7
 801013a:	bd80      	pop	{r7, pc}
 801013c:	2400b574 	.word	0x2400b574
 8010140:	2400b56c 	.word	0x2400b56c
 8010144:	2400b570 	.word	0x2400b570

08010148 <BSP_TS_GetState>:
  * @param  Instance  TS instance. Could be only 0.
  * @param  TS_State  Pointer to touch screen current state structure
  * @retval BSP status
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 8010148:	b580      	push	{r7, lr}
 801014a:	b08a      	sub	sp, #40	; 0x28
 801014c:	af00      	add	r7, sp, #0
 801014e:	6078      	str	r0, [r7, #4]
 8010150:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8010152:	2300      	movs	r3, #0
 8010154:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t x_oriented, y_oriented;
  uint32_t x_diff, y_diff;

  if(Instance >= TS_INSTANCES_NBR)
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	2b00      	cmp	r3, #0
 801015a:	d003      	beq.n	8010164 <BSP_TS_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801015c:	f06f 0301 	mvn.w	r3, #1
 8010160:	627b      	str	r3, [r7, #36]	; 0x24
 8010162:	e13e      	b.n	80103e2 <BSP_TS_GetState+0x29a>
  else
  {
    FT5336_State_t state;

    /* Get each touch coordinates */
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 8010164:	4ba1      	ldr	r3, [pc, #644]	; (80103ec <BSP_TS_GetState+0x2a4>)
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	691b      	ldr	r3, [r3, #16]
 801016a:	49a1      	ldr	r1, [pc, #644]	; (80103f0 <BSP_TS_GetState+0x2a8>)
 801016c:	687a      	ldr	r2, [r7, #4]
 801016e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8010172:	f107 0108 	add.w	r1, r7, #8
 8010176:	4610      	mov	r0, r2
 8010178:	4798      	blx	r3
 801017a:	4603      	mov	r3, r0
 801017c:	2b00      	cmp	r3, #0
 801017e:	da03      	bge.n	8010188 <BSP_TS_GetState+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8010180:	f06f 0304 	mvn.w	r3, #4
 8010184:	627b      	str	r3, [r7, #36]	; 0x24
 8010186:	e12c      	b.n	80103e2 <BSP_TS_GetState+0x29a>
    }/* Check and update the number of touches active detected */
    else if(state.TouchDetected != 0U)
 8010188:	68bb      	ldr	r3, [r7, #8]
 801018a:	2b00      	cmp	r3, #0
 801018c:	f000 8110 	beq.w	80103b0 <BSP_TS_GetState+0x268>
    {
      x_oriented = state.TouchX;
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	623b      	str	r3, [r7, #32]
      y_oriented = state.TouchY;
 8010194:	693b      	ldr	r3, [r7, #16]
 8010196:	61fb      	str	r3, [r7, #28]

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8010198:	4996      	ldr	r1, [pc, #600]	; (80103f4 <BSP_TS_GetState+0x2ac>)
 801019a:	687a      	ldr	r2, [r7, #4]
 801019c:	4613      	mov	r3, r2
 801019e:	009b      	lsls	r3, r3, #2
 80101a0:	4413      	add	r3, r2
 80101a2:	00db      	lsls	r3, r3, #3
 80101a4:	440b      	add	r3, r1
 80101a6:	3308      	adds	r3, #8
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	f003 0308 	and.w	r3, r3, #8
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d003      	beq.n	80101ba <BSP_TS_GetState+0x72>
      {
        x_oriented = state.TouchY;
 80101b2:	693b      	ldr	r3, [r7, #16]
 80101b4:	623b      	str	r3, [r7, #32]
        y_oriented = state.TouchX;
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	61fb      	str	r3, [r7, #28]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 80101ba:	498e      	ldr	r1, [pc, #568]	; (80103f4 <BSP_TS_GetState+0x2ac>)
 80101bc:	687a      	ldr	r2, [r7, #4]
 80101be:	4613      	mov	r3, r2
 80101c0:	009b      	lsls	r3, r3, #2
 80101c2:	4413      	add	r3, r2
 80101c4:	00db      	lsls	r3, r3, #3
 80101c6:	440b      	add	r3, r1
 80101c8:	3308      	adds	r3, #8
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	f003 0302 	and.w	r3, r3, #2
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d00c      	beq.n	80101ee <BSP_TS_GetState+0xa6>
      {
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 80101d4:	4987      	ldr	r1, [pc, #540]	; (80103f4 <BSP_TS_GetState+0x2ac>)
 80101d6:	687a      	ldr	r2, [r7, #4]
 80101d8:	4613      	mov	r3, r2
 80101da:	009b      	lsls	r3, r3, #2
 80101dc:	4413      	add	r3, r2
 80101de:	00db      	lsls	r3, r3, #3
 80101e0:	440b      	add	r3, r1
 80101e2:	3310      	adds	r3, #16
 80101e4:	681a      	ldr	r2, [r3, #0]
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	1ad3      	subs	r3, r2, r3
 80101ea:	3b01      	subs	r3, #1
 80101ec:	623b      	str	r3, [r7, #32]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 80101ee:	4981      	ldr	r1, [pc, #516]	; (80103f4 <BSP_TS_GetState+0x2ac>)
 80101f0:	687a      	ldr	r2, [r7, #4]
 80101f2:	4613      	mov	r3, r2
 80101f4:	009b      	lsls	r3, r3, #2
 80101f6:	4413      	add	r3, r2
 80101f8:	00db      	lsls	r3, r3, #3
 80101fa:	440b      	add	r3, r1
 80101fc:	3308      	adds	r3, #8
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	f003 0304 	and.w	r3, r3, #4
 8010204:	2b00      	cmp	r3, #0
 8010206:	d00b      	beq.n	8010220 <BSP_TS_GetState+0xd8>
      {
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 8010208:	497a      	ldr	r1, [pc, #488]	; (80103f4 <BSP_TS_GetState+0x2ac>)
 801020a:	687a      	ldr	r2, [r7, #4]
 801020c:	4613      	mov	r3, r2
 801020e:	009b      	lsls	r3, r3, #2
 8010210:	4413      	add	r3, r2
 8010212:	00db      	lsls	r3, r3, #3
 8010214:	440b      	add	r3, r1
 8010216:	3314      	adds	r3, #20
 8010218:	681a      	ldr	r2, [r3, #0]
 801021a:	693b      	ldr	r3, [r7, #16]
 801021c:	1ad3      	subs	r3, r2, r3
 801021e:	61fb      	str	r3, [r7, #28]
      }

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8010220:	4974      	ldr	r1, [pc, #464]	; (80103f4 <BSP_TS_GetState+0x2ac>)
 8010222:	687a      	ldr	r2, [r7, #4]
 8010224:	4613      	mov	r3, r2
 8010226:	009b      	lsls	r3, r3, #2
 8010228:	4413      	add	r3, r2
 801022a:	00db      	lsls	r3, r3, #3
 801022c:	440b      	add	r3, r1
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	6a3a      	ldr	r2, [r7, #32]
 8010232:	fb02 f103 	mul.w	r1, r2, r3
 8010236:	486f      	ldr	r0, [pc, #444]	; (80103f4 <BSP_TS_GetState+0x2ac>)
 8010238:	687a      	ldr	r2, [r7, #4]
 801023a:	4613      	mov	r3, r2
 801023c:	009b      	lsls	r3, r3, #2
 801023e:	4413      	add	r3, r2
 8010240:	00db      	lsls	r3, r3, #3
 8010242:	4403      	add	r3, r0
 8010244:	3310      	adds	r3, #16
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	fbb1 f2f3 	udiv	r2, r1, r3
 801024c:	683b      	ldr	r3, [r7, #0]
 801024e:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8010250:	4968      	ldr	r1, [pc, #416]	; (80103f4 <BSP_TS_GetState+0x2ac>)
 8010252:	687a      	ldr	r2, [r7, #4]
 8010254:	4613      	mov	r3, r2
 8010256:	009b      	lsls	r3, r3, #2
 8010258:	4413      	add	r3, r2
 801025a:	00db      	lsls	r3, r3, #3
 801025c:	440b      	add	r3, r1
 801025e:	3304      	adds	r3, #4
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	69fa      	ldr	r2, [r7, #28]
 8010264:	fb02 f103 	mul.w	r1, r2, r3
 8010268:	4862      	ldr	r0, [pc, #392]	; (80103f4 <BSP_TS_GetState+0x2ac>)
 801026a:	687a      	ldr	r2, [r7, #4]
 801026c:	4613      	mov	r3, r2
 801026e:	009b      	lsls	r3, r3, #2
 8010270:	4413      	add	r3, r2
 8010272:	00db      	lsls	r3, r3, #3
 8010274:	4403      	add	r3, r0
 8010276:	3314      	adds	r3, #20
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	fbb1 f2f3 	udiv	r2, r1, r3
 801027e:	683b      	ldr	r3, [r7, #0]
 8010280:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
 8010282:	68ba      	ldr	r2, [r7, #8]
 8010284:	683b      	ldr	r3, [r7, #0]
 8010286:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8010288:	683b      	ldr	r3, [r7, #0]
 801028a:	6859      	ldr	r1, [r3, #4]
 801028c:	4859      	ldr	r0, [pc, #356]	; (80103f4 <BSP_TS_GetState+0x2ac>)
 801028e:	687a      	ldr	r2, [r7, #4]
 8010290:	4613      	mov	r3, r2
 8010292:	009b      	lsls	r3, r3, #2
 8010294:	4413      	add	r3, r2
 8010296:	00db      	lsls	r3, r3, #3
 8010298:	4403      	add	r3, r0
 801029a:	3318      	adds	r3, #24
 801029c:	681b      	ldr	r3, [r3, #0]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 801029e:	4299      	cmp	r1, r3
 80102a0:	d90c      	bls.n	80102bc <BSP_TS_GetState+0x174>
 80102a2:	683b      	ldr	r3, [r7, #0]
 80102a4:	6859      	ldr	r1, [r3, #4]
 80102a6:	4853      	ldr	r0, [pc, #332]	; (80103f4 <BSP_TS_GetState+0x2ac>)
 80102a8:	687a      	ldr	r2, [r7, #4]
 80102aa:	4613      	mov	r3, r2
 80102ac:	009b      	lsls	r3, r3, #2
 80102ae:	4413      	add	r3, r2
 80102b0:	00db      	lsls	r3, r3, #3
 80102b2:	4403      	add	r3, r0
 80102b4:	3318      	adds	r3, #24
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	1acb      	subs	r3, r1, r3
 80102ba:	e00b      	b.n	80102d4 <BSP_TS_GetState+0x18c>
        (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
 80102bc:	494d      	ldr	r1, [pc, #308]	; (80103f4 <BSP_TS_GetState+0x2ac>)
 80102be:	687a      	ldr	r2, [r7, #4]
 80102c0:	4613      	mov	r3, r2
 80102c2:	009b      	lsls	r3, r3, #2
 80102c4:	4413      	add	r3, r2
 80102c6:	00db      	lsls	r3, r3, #3
 80102c8:	440b      	add	r3, r1
 80102ca:	3318      	adds	r3, #24
 80102cc:	681a      	ldr	r2, [r3, #0]
 80102ce:	683b      	ldr	r3, [r7, #0]
 80102d0:	685b      	ldr	r3, [r3, #4]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80102d2:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 80102d4:	61bb      	str	r3, [r7, #24]

        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 80102d6:	683b      	ldr	r3, [r7, #0]
 80102d8:	6899      	ldr	r1, [r3, #8]
 80102da:	4846      	ldr	r0, [pc, #280]	; (80103f4 <BSP_TS_GetState+0x2ac>)
 80102dc:	687a      	ldr	r2, [r7, #4]
 80102de:	4613      	mov	r3, r2
 80102e0:	009b      	lsls	r3, r3, #2
 80102e2:	4413      	add	r3, r2
 80102e4:	00db      	lsls	r3, r3, #3
 80102e6:	4403      	add	r3, r0
 80102e8:	3320      	adds	r3, #32
 80102ea:	681b      	ldr	r3, [r3, #0]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 80102ec:	4299      	cmp	r1, r3
 80102ee:	d90c      	bls.n	801030a <BSP_TS_GetState+0x1c2>
 80102f0:	683b      	ldr	r3, [r7, #0]
 80102f2:	6899      	ldr	r1, [r3, #8]
 80102f4:	483f      	ldr	r0, [pc, #252]	; (80103f4 <BSP_TS_GetState+0x2ac>)
 80102f6:	687a      	ldr	r2, [r7, #4]
 80102f8:	4613      	mov	r3, r2
 80102fa:	009b      	lsls	r3, r3, #2
 80102fc:	4413      	add	r3, r2
 80102fe:	00db      	lsls	r3, r3, #3
 8010300:	4403      	add	r3, r0
 8010302:	3320      	adds	r3, #32
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	1acb      	subs	r3, r1, r3
 8010308:	e00b      	b.n	8010322 <BSP_TS_GetState+0x1da>
          (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
 801030a:	493a      	ldr	r1, [pc, #232]	; (80103f4 <BSP_TS_GetState+0x2ac>)
 801030c:	687a      	ldr	r2, [r7, #4]
 801030e:	4613      	mov	r3, r2
 8010310:	009b      	lsls	r3, r3, #2
 8010312:	4413      	add	r3, r2
 8010314:	00db      	lsls	r3, r3, #3
 8010316:	440b      	add	r3, r1
 8010318:	3320      	adds	r3, #32
 801031a:	681a      	ldr	r2, [r3, #0]
 801031c:	683b      	ldr	r3, [r7, #0]
 801031e:	689b      	ldr	r3, [r3, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8010320:	1ad3      	subs	r3, r2, r3
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8010322:	617b      	str	r3, [r7, #20]


          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8010324:	4933      	ldr	r1, [pc, #204]	; (80103f4 <BSP_TS_GetState+0x2ac>)
 8010326:	687a      	ldr	r2, [r7, #4]
 8010328:	4613      	mov	r3, r2
 801032a:	009b      	lsls	r3, r3, #2
 801032c:	4413      	add	r3, r2
 801032e:	00db      	lsls	r3, r3, #3
 8010330:	440b      	add	r3, r1
 8010332:	330c      	adds	r3, #12
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	69ba      	ldr	r2, [r7, #24]
 8010338:	429a      	cmp	r2, r3
 801033a:	d80b      	bhi.n	8010354 <BSP_TS_GetState+0x20c>
 801033c:	492d      	ldr	r1, [pc, #180]	; (80103f4 <BSP_TS_GetState+0x2ac>)
 801033e:	687a      	ldr	r2, [r7, #4]
 8010340:	4613      	mov	r3, r2
 8010342:	009b      	lsls	r3, r3, #2
 8010344:	4413      	add	r3, r2
 8010346:	00db      	lsls	r3, r3, #3
 8010348:	440b      	add	r3, r1
 801034a:	330c      	adds	r3, #12
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	697a      	ldr	r2, [r7, #20]
 8010350:	429a      	cmp	r2, r3
 8010352:	d916      	bls.n	8010382 <BSP_TS_GetState+0x23a>
          {
            /* New touch detected */
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 8010354:	683b      	ldr	r3, [r7, #0]
 8010356:	6859      	ldr	r1, [r3, #4]
 8010358:	4826      	ldr	r0, [pc, #152]	; (80103f4 <BSP_TS_GetState+0x2ac>)
 801035a:	687a      	ldr	r2, [r7, #4]
 801035c:	4613      	mov	r3, r2
 801035e:	009b      	lsls	r3, r3, #2
 8010360:	4413      	add	r3, r2
 8010362:	00db      	lsls	r3, r3, #3
 8010364:	4403      	add	r3, r0
 8010366:	3318      	adds	r3, #24
 8010368:	6019      	str	r1, [r3, #0]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 801036a:	683b      	ldr	r3, [r7, #0]
 801036c:	6899      	ldr	r1, [r3, #8]
 801036e:	4821      	ldr	r0, [pc, #132]	; (80103f4 <BSP_TS_GetState+0x2ac>)
 8010370:	687a      	ldr	r2, [r7, #4]
 8010372:	4613      	mov	r3, r2
 8010374:	009b      	lsls	r3, r3, #2
 8010376:	4413      	add	r3, r2
 8010378:	00db      	lsls	r3, r3, #3
 801037a:	4403      	add	r3, r0
 801037c:	3320      	adds	r3, #32
 801037e:	6019      	str	r1, [r3, #0]
 8010380:	e02f      	b.n	80103e2 <BSP_TS_GetState+0x29a>
          }
          else
          {
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8010382:	491c      	ldr	r1, [pc, #112]	; (80103f4 <BSP_TS_GetState+0x2ac>)
 8010384:	687a      	ldr	r2, [r7, #4]
 8010386:	4613      	mov	r3, r2
 8010388:	009b      	lsls	r3, r3, #2
 801038a:	4413      	add	r3, r2
 801038c:	00db      	lsls	r3, r3, #3
 801038e:	440b      	add	r3, r1
 8010390:	3318      	adds	r3, #24
 8010392:	681a      	ldr	r2, [r3, #0]
 8010394:	683b      	ldr	r3, [r7, #0]
 8010396:	605a      	str	r2, [r3, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8010398:	4916      	ldr	r1, [pc, #88]	; (80103f4 <BSP_TS_GetState+0x2ac>)
 801039a:	687a      	ldr	r2, [r7, #4]
 801039c:	4613      	mov	r3, r2
 801039e:	009b      	lsls	r3, r3, #2
 80103a0:	4413      	add	r3, r2
 80103a2:	00db      	lsls	r3, r3, #3
 80103a4:	440b      	add	r3, r1
 80103a6:	3320      	adds	r3, #32
 80103a8:	681a      	ldr	r2, [r3, #0]
 80103aa:	683b      	ldr	r3, [r7, #0]
 80103ac:	609a      	str	r2, [r3, #8]
 80103ae:	e018      	b.n	80103e2 <BSP_TS_GetState+0x29a>
          }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 80103b0:	683b      	ldr	r3, [r7, #0]
 80103b2:	2200      	movs	r2, #0
 80103b4:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 80103b6:	490f      	ldr	r1, [pc, #60]	; (80103f4 <BSP_TS_GetState+0x2ac>)
 80103b8:	687a      	ldr	r2, [r7, #4]
 80103ba:	4613      	mov	r3, r2
 80103bc:	009b      	lsls	r3, r3, #2
 80103be:	4413      	add	r3, r2
 80103c0:	00db      	lsls	r3, r3, #3
 80103c2:	440b      	add	r3, r1
 80103c4:	3318      	adds	r3, #24
 80103c6:	681a      	ldr	r2, [r3, #0]
 80103c8:	683b      	ldr	r3, [r7, #0]
 80103ca:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 80103cc:	4909      	ldr	r1, [pc, #36]	; (80103f4 <BSP_TS_GetState+0x2ac>)
 80103ce:	687a      	ldr	r2, [r7, #4]
 80103d0:	4613      	mov	r3, r2
 80103d2:	009b      	lsls	r3, r3, #2
 80103d4:	4413      	add	r3, r2
 80103d6:	00db      	lsls	r3, r3, #3
 80103d8:	440b      	add	r3, r1
 80103da:	3320      	adds	r3, #32
 80103dc:	681a      	ldr	r2, [r3, #0]
 80103de:	683b      	ldr	r3, [r7, #0]
 80103e0:	609a      	str	r2, [r3, #8]
    }
}

return ret;
 80103e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80103e4:	4618      	mov	r0, r3
 80103e6:	3728      	adds	r7, #40	; 0x28
 80103e8:	46bd      	mov	sp, r7
 80103ea:	bd80      	pop	{r7, pc}
 80103ec:	2400b56c 	.word	0x2400b56c
 80103f0:	2400b570 	.word	0x2400b570
 80103f4:	2400b574 	.word	0x2400b574

080103f8 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 80103f8:	b580      	push	{r7, lr}
 80103fa:	b08a      	sub	sp, #40	; 0x28
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8010400:	2300      	movs	r3, #0
 8010402:	627b      	str	r3, [r7, #36]	; 0x24
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 8010404:	2300      	movs	r3, #0
 8010406:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 8010408:	2370      	movs	r3, #112	; 0x70
 801040a:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 801040c:	4b23      	ldr	r3, [pc, #140]	; (801049c <FT5336_Probe+0xa4>)
 801040e:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8010410:	4b23      	ldr	r3, [pc, #140]	; (80104a0 <FT5336_Probe+0xa8>)
 8010412:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8010414:	4b23      	ldr	r3, [pc, #140]	; (80104a4 <FT5336_Probe+0xac>)
 8010416:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8010418:	4b23      	ldr	r3, [pc, #140]	; (80104a8 <FT5336_Probe+0xb0>)
 801041a:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 801041c:	4b23      	ldr	r3, [pc, #140]	; (80104ac <FT5336_Probe+0xb4>)
 801041e:	623b      	str	r3, [r7, #32]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8010420:	f107 030c 	add.w	r3, r7, #12
 8010424:	4619      	mov	r1, r3
 8010426:	4822      	ldr	r0, [pc, #136]	; (80104b0 <FT5336_Probe+0xb8>)
 8010428:	f7fd fcaa 	bl	800dd80 <FT5336_RegisterBusIO>
 801042c:	4603      	mov	r3, r0
 801042e:	2b00      	cmp	r3, #0
 8010430:	d003      	beq.n	801043a <FT5336_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8010432:	f06f 0307 	mvn.w	r3, #7
 8010436:	627b      	str	r3, [r7, #36]	; 0x24
 8010438:	e02a      	b.n	8010490 <FT5336_Probe+0x98>
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 801043a:	f107 0308 	add.w	r3, r7, #8
 801043e:	4619      	mov	r1, r3
 8010440:	481b      	ldr	r0, [pc, #108]	; (80104b0 <FT5336_Probe+0xb8>)
 8010442:	f7fd fd97 	bl	800df74 <FT5336_ReadID>
 8010446:	4603      	mov	r3, r0
 8010448:	2b00      	cmp	r3, #0
 801044a:	d003      	beq.n	8010454 <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 801044c:	f06f 0304 	mvn.w	r3, #4
 8010450:	627b      	str	r3, [r7, #36]	; 0x24
 8010452:	e01d      	b.n	8010490 <FT5336_Probe+0x98>
  }
  else if(ft5336_id != FT5336_ID)
 8010454:	68bb      	ldr	r3, [r7, #8]
 8010456:	2b51      	cmp	r3, #81	; 0x51
 8010458:	d003      	beq.n	8010462 <FT5336_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 801045a:	f06f 0306 	mvn.w	r3, #6
 801045e:	627b      	str	r3, [r7, #36]	; 0x24
 8010460:	e016      	b.n	8010490 <FT5336_Probe+0x98>
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 8010462:	4a14      	ldr	r2, [pc, #80]	; (80104b4 <FT5336_Probe+0xbc>)
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	4912      	ldr	r1, [pc, #72]	; (80104b0 <FT5336_Probe+0xb8>)
 8010468:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 801046c:	4b12      	ldr	r3, [pc, #72]	; (80104b8 <FT5336_Probe+0xc0>)
 801046e:	4a13      	ldr	r2, [pc, #76]	; (80104bc <FT5336_Probe+0xc4>)
 8010470:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 8010472:	4b11      	ldr	r3, [pc, #68]	; (80104b8 <FT5336_Probe+0xc0>)
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	490e      	ldr	r1, [pc, #56]	; (80104b4 <FT5336_Probe+0xbc>)
 801047a:	687a      	ldr	r2, [r7, #4]
 801047c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8010480:	4610      	mov	r0, r2
 8010482:	4798      	blx	r3
 8010484:	4603      	mov	r3, r0
 8010486:	2b00      	cmp	r3, #0
 8010488:	d002      	beq.n	8010490 <FT5336_Probe+0x98>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 801048a:	f06f 0304 	mvn.w	r3, #4
 801048e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return ret;
 8010490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010492:	4618      	mov	r0, r3
 8010494:	3728      	adds	r7, #40	; 0x28
 8010496:	46bd      	mov	sp, r7
 8010498:	bd80      	pop	{r7, pc}
 801049a:	bf00      	nop
 801049c:	0800eb89 	.word	0x0800eb89
 80104a0:	0800ebfd 	.word	0x0800ebfd
 80104a4:	0800ed25 	.word	0x0800ed25
 80104a8:	0800ecc9 	.word	0x0800ecc9
 80104ac:	0800ed81 	.word	0x0800ed81
 80104b0:	2400b59c 	.word	0x2400b59c
 80104b4:	2400b570 	.word	0x2400b570
 80104b8:	2400b56c 	.word	0x2400b56c
 80104bc:	24000020 	.word	0x24000020

080104c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b082      	sub	sp, #8
 80104c4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80104c6:	2003      	movs	r0, #3
 80104c8:	f000 f933 	bl	8010732 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80104cc:	f004 f844 	bl	8014558 <HAL_RCC_GetSysClockFreq>
 80104d0:	4602      	mov	r2, r0
 80104d2:	4b15      	ldr	r3, [pc, #84]	; (8010528 <HAL_Init+0x68>)
 80104d4:	699b      	ldr	r3, [r3, #24]
 80104d6:	0a1b      	lsrs	r3, r3, #8
 80104d8:	f003 030f 	and.w	r3, r3, #15
 80104dc:	4913      	ldr	r1, [pc, #76]	; (801052c <HAL_Init+0x6c>)
 80104de:	5ccb      	ldrb	r3, [r1, r3]
 80104e0:	f003 031f 	and.w	r3, r3, #31
 80104e4:	fa22 f303 	lsr.w	r3, r2, r3
 80104e8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80104ea:	4b0f      	ldr	r3, [pc, #60]	; (8010528 <HAL_Init+0x68>)
 80104ec:	699b      	ldr	r3, [r3, #24]
 80104ee:	f003 030f 	and.w	r3, r3, #15
 80104f2:	4a0e      	ldr	r2, [pc, #56]	; (801052c <HAL_Init+0x6c>)
 80104f4:	5cd3      	ldrb	r3, [r2, r3]
 80104f6:	f003 031f 	and.w	r3, r3, #31
 80104fa:	687a      	ldr	r2, [r7, #4]
 80104fc:	fa22 f303 	lsr.w	r3, r2, r3
 8010500:	4a0b      	ldr	r2, [pc, #44]	; (8010530 <HAL_Init+0x70>)
 8010502:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8010504:	4a0b      	ldr	r2, [pc, #44]	; (8010534 <HAL_Init+0x74>)
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 801050a:	200f      	movs	r0, #15
 801050c:	f7f1 f816 	bl	800153c <HAL_InitTick>
 8010510:	4603      	mov	r3, r0
 8010512:	2b00      	cmp	r3, #0
 8010514:	d001      	beq.n	801051a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8010516:	2301      	movs	r3, #1
 8010518:	e002      	b.n	8010520 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 801051a:	f7f0 fc57 	bl	8000dcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801051e:	2300      	movs	r3, #0
}
 8010520:	4618      	mov	r0, r3
 8010522:	3708      	adds	r7, #8
 8010524:	46bd      	mov	sp, r7
 8010526:	bd80      	pop	{r7, pc}
 8010528:	58024400 	.word	0x58024400
 801052c:	0802ca58 	.word	0x0802ca58
 8010530:	2400001c 	.word	0x2400001c
 8010534:	24000018 	.word	0x24000018

08010538 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8010538:	b480      	push	{r7}
 801053a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 801053c:	4b06      	ldr	r3, [pc, #24]	; (8010558 <HAL_IncTick+0x20>)
 801053e:	781b      	ldrb	r3, [r3, #0]
 8010540:	461a      	mov	r2, r3
 8010542:	4b06      	ldr	r3, [pc, #24]	; (801055c <HAL_IncTick+0x24>)
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	4413      	add	r3, r2
 8010548:	4a04      	ldr	r2, [pc, #16]	; (801055c <HAL_IncTick+0x24>)
 801054a:	6013      	str	r3, [r2, #0]
}
 801054c:	bf00      	nop
 801054e:	46bd      	mov	sp, r7
 8010550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010554:	4770      	bx	lr
 8010556:	bf00      	nop
 8010558:	24000054 	.word	0x24000054
 801055c:	2400bb8c 	.word	0x2400bb8c

08010560 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8010560:	b480      	push	{r7}
 8010562:	af00      	add	r7, sp, #0
  return uwTick;
 8010564:	4b03      	ldr	r3, [pc, #12]	; (8010574 <HAL_GetTick+0x14>)
 8010566:	681b      	ldr	r3, [r3, #0]
}
 8010568:	4618      	mov	r0, r3
 801056a:	46bd      	mov	sp, r7
 801056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010570:	4770      	bx	lr
 8010572:	bf00      	nop
 8010574:	2400bb8c 	.word	0x2400bb8c

08010578 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8010578:	b480      	push	{r7}
 801057a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 801057c:	4b03      	ldr	r3, [pc, #12]	; (801058c <HAL_GetREVID+0x14>)
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	0c1b      	lsrs	r3, r3, #16
}
 8010582:	4618      	mov	r0, r3
 8010584:	46bd      	mov	sp, r7
 8010586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801058a:	4770      	bx	lr
 801058c:	5c001000 	.word	0x5c001000

08010590 <__NVIC_SetPriorityGrouping>:
{
 8010590:	b480      	push	{r7}
 8010592:	b085      	sub	sp, #20
 8010594:	af00      	add	r7, sp, #0
 8010596:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	f003 0307 	and.w	r3, r3, #7
 801059e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80105a0:	4b0b      	ldr	r3, [pc, #44]	; (80105d0 <__NVIC_SetPriorityGrouping+0x40>)
 80105a2:	68db      	ldr	r3, [r3, #12]
 80105a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80105a6:	68ba      	ldr	r2, [r7, #8]
 80105a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80105ac:	4013      	ands	r3, r2
 80105ae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80105b4:	68bb      	ldr	r3, [r7, #8]
 80105b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80105b8:	4b06      	ldr	r3, [pc, #24]	; (80105d4 <__NVIC_SetPriorityGrouping+0x44>)
 80105ba:	4313      	orrs	r3, r2
 80105bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80105be:	4a04      	ldr	r2, [pc, #16]	; (80105d0 <__NVIC_SetPriorityGrouping+0x40>)
 80105c0:	68bb      	ldr	r3, [r7, #8]
 80105c2:	60d3      	str	r3, [r2, #12]
}
 80105c4:	bf00      	nop
 80105c6:	3714      	adds	r7, #20
 80105c8:	46bd      	mov	sp, r7
 80105ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ce:	4770      	bx	lr
 80105d0:	e000ed00 	.word	0xe000ed00
 80105d4:	05fa0000 	.word	0x05fa0000

080105d8 <__NVIC_GetPriorityGrouping>:
{
 80105d8:	b480      	push	{r7}
 80105da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80105dc:	4b04      	ldr	r3, [pc, #16]	; (80105f0 <__NVIC_GetPriorityGrouping+0x18>)
 80105de:	68db      	ldr	r3, [r3, #12]
 80105e0:	0a1b      	lsrs	r3, r3, #8
 80105e2:	f003 0307 	and.w	r3, r3, #7
}
 80105e6:	4618      	mov	r0, r3
 80105e8:	46bd      	mov	sp, r7
 80105ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ee:	4770      	bx	lr
 80105f0:	e000ed00 	.word	0xe000ed00

080105f4 <__NVIC_EnableIRQ>:
{
 80105f4:	b480      	push	{r7}
 80105f6:	b083      	sub	sp, #12
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	4603      	mov	r3, r0
 80105fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80105fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010602:	2b00      	cmp	r3, #0
 8010604:	db0b      	blt.n	801061e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010606:	88fb      	ldrh	r3, [r7, #6]
 8010608:	f003 021f 	and.w	r2, r3, #31
 801060c:	4907      	ldr	r1, [pc, #28]	; (801062c <__NVIC_EnableIRQ+0x38>)
 801060e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010612:	095b      	lsrs	r3, r3, #5
 8010614:	2001      	movs	r0, #1
 8010616:	fa00 f202 	lsl.w	r2, r0, r2
 801061a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801061e:	bf00      	nop
 8010620:	370c      	adds	r7, #12
 8010622:	46bd      	mov	sp, r7
 8010624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010628:	4770      	bx	lr
 801062a:	bf00      	nop
 801062c:	e000e100 	.word	0xe000e100

08010630 <__NVIC_DisableIRQ>:
{
 8010630:	b480      	push	{r7}
 8010632:	b083      	sub	sp, #12
 8010634:	af00      	add	r7, sp, #0
 8010636:	4603      	mov	r3, r0
 8010638:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801063a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801063e:	2b00      	cmp	r3, #0
 8010640:	db12      	blt.n	8010668 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010642:	88fb      	ldrh	r3, [r7, #6]
 8010644:	f003 021f 	and.w	r2, r3, #31
 8010648:	490a      	ldr	r1, [pc, #40]	; (8010674 <__NVIC_DisableIRQ+0x44>)
 801064a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801064e:	095b      	lsrs	r3, r3, #5
 8010650:	2001      	movs	r0, #1
 8010652:	fa00 f202 	lsl.w	r2, r0, r2
 8010656:	3320      	adds	r3, #32
 8010658:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 801065c:	f3bf 8f4f 	dsb	sy
}
 8010660:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8010662:	f3bf 8f6f 	isb	sy
}
 8010666:	bf00      	nop
}
 8010668:	bf00      	nop
 801066a:	370c      	adds	r7, #12
 801066c:	46bd      	mov	sp, r7
 801066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010672:	4770      	bx	lr
 8010674:	e000e100 	.word	0xe000e100

08010678 <__NVIC_SetPriority>:
{
 8010678:	b480      	push	{r7}
 801067a:	b083      	sub	sp, #12
 801067c:	af00      	add	r7, sp, #0
 801067e:	4603      	mov	r3, r0
 8010680:	6039      	str	r1, [r7, #0]
 8010682:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8010684:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010688:	2b00      	cmp	r3, #0
 801068a:	db0a      	blt.n	80106a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801068c:	683b      	ldr	r3, [r7, #0]
 801068e:	b2da      	uxtb	r2, r3
 8010690:	490c      	ldr	r1, [pc, #48]	; (80106c4 <__NVIC_SetPriority+0x4c>)
 8010692:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010696:	0112      	lsls	r2, r2, #4
 8010698:	b2d2      	uxtb	r2, r2
 801069a:	440b      	add	r3, r1
 801069c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80106a0:	e00a      	b.n	80106b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80106a2:	683b      	ldr	r3, [r7, #0]
 80106a4:	b2da      	uxtb	r2, r3
 80106a6:	4908      	ldr	r1, [pc, #32]	; (80106c8 <__NVIC_SetPriority+0x50>)
 80106a8:	88fb      	ldrh	r3, [r7, #6]
 80106aa:	f003 030f 	and.w	r3, r3, #15
 80106ae:	3b04      	subs	r3, #4
 80106b0:	0112      	lsls	r2, r2, #4
 80106b2:	b2d2      	uxtb	r2, r2
 80106b4:	440b      	add	r3, r1
 80106b6:	761a      	strb	r2, [r3, #24]
}
 80106b8:	bf00      	nop
 80106ba:	370c      	adds	r7, #12
 80106bc:	46bd      	mov	sp, r7
 80106be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c2:	4770      	bx	lr
 80106c4:	e000e100 	.word	0xe000e100
 80106c8:	e000ed00 	.word	0xe000ed00

080106cc <NVIC_EncodePriority>:
{
 80106cc:	b480      	push	{r7}
 80106ce:	b089      	sub	sp, #36	; 0x24
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	60f8      	str	r0, [r7, #12]
 80106d4:	60b9      	str	r1, [r7, #8]
 80106d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	f003 0307 	and.w	r3, r3, #7
 80106de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80106e0:	69fb      	ldr	r3, [r7, #28]
 80106e2:	f1c3 0307 	rsb	r3, r3, #7
 80106e6:	2b04      	cmp	r3, #4
 80106e8:	bf28      	it	cs
 80106ea:	2304      	movcs	r3, #4
 80106ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80106ee:	69fb      	ldr	r3, [r7, #28]
 80106f0:	3304      	adds	r3, #4
 80106f2:	2b06      	cmp	r3, #6
 80106f4:	d902      	bls.n	80106fc <NVIC_EncodePriority+0x30>
 80106f6:	69fb      	ldr	r3, [r7, #28]
 80106f8:	3b03      	subs	r3, #3
 80106fa:	e000      	b.n	80106fe <NVIC_EncodePriority+0x32>
 80106fc:	2300      	movs	r3, #0
 80106fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010700:	f04f 32ff 	mov.w	r2, #4294967295
 8010704:	69bb      	ldr	r3, [r7, #24]
 8010706:	fa02 f303 	lsl.w	r3, r2, r3
 801070a:	43da      	mvns	r2, r3
 801070c:	68bb      	ldr	r3, [r7, #8]
 801070e:	401a      	ands	r2, r3
 8010710:	697b      	ldr	r3, [r7, #20]
 8010712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8010714:	f04f 31ff 	mov.w	r1, #4294967295
 8010718:	697b      	ldr	r3, [r7, #20]
 801071a:	fa01 f303 	lsl.w	r3, r1, r3
 801071e:	43d9      	mvns	r1, r3
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010724:	4313      	orrs	r3, r2
}
 8010726:	4618      	mov	r0, r3
 8010728:	3724      	adds	r7, #36	; 0x24
 801072a:	46bd      	mov	sp, r7
 801072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010730:	4770      	bx	lr

08010732 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010732:	b580      	push	{r7, lr}
 8010734:	b082      	sub	sp, #8
 8010736:	af00      	add	r7, sp, #0
 8010738:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801073a:	6878      	ldr	r0, [r7, #4]
 801073c:	f7ff ff28 	bl	8010590 <__NVIC_SetPriorityGrouping>
}
 8010740:	bf00      	nop
 8010742:	3708      	adds	r7, #8
 8010744:	46bd      	mov	sp, r7
 8010746:	bd80      	pop	{r7, pc}

08010748 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8010748:	b580      	push	{r7, lr}
 801074a:	b086      	sub	sp, #24
 801074c:	af00      	add	r7, sp, #0
 801074e:	4603      	mov	r3, r0
 8010750:	60b9      	str	r1, [r7, #8]
 8010752:	607a      	str	r2, [r7, #4]
 8010754:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8010756:	f7ff ff3f 	bl	80105d8 <__NVIC_GetPriorityGrouping>
 801075a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801075c:	687a      	ldr	r2, [r7, #4]
 801075e:	68b9      	ldr	r1, [r7, #8]
 8010760:	6978      	ldr	r0, [r7, #20]
 8010762:	f7ff ffb3 	bl	80106cc <NVIC_EncodePriority>
 8010766:	4602      	mov	r2, r0
 8010768:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801076c:	4611      	mov	r1, r2
 801076e:	4618      	mov	r0, r3
 8010770:	f7ff ff82 	bl	8010678 <__NVIC_SetPriority>
}
 8010774:	bf00      	nop
 8010776:	3718      	adds	r7, #24
 8010778:	46bd      	mov	sp, r7
 801077a:	bd80      	pop	{r7, pc}

0801077c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801077c:	b580      	push	{r7, lr}
 801077e:	b082      	sub	sp, #8
 8010780:	af00      	add	r7, sp, #0
 8010782:	4603      	mov	r3, r0
 8010784:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8010786:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801078a:	4618      	mov	r0, r3
 801078c:	f7ff ff32 	bl	80105f4 <__NVIC_EnableIRQ>
}
 8010790:	bf00      	nop
 8010792:	3708      	adds	r7, #8
 8010794:	46bd      	mov	sp, r7
 8010796:	bd80      	pop	{r7, pc}

08010798 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8010798:	b580      	push	{r7, lr}
 801079a:	b082      	sub	sp, #8
 801079c:	af00      	add	r7, sp, #0
 801079e:	4603      	mov	r3, r0
 80107a0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80107a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80107a6:	4618      	mov	r0, r3
 80107a8:	f7ff ff42 	bl	8010630 <__NVIC_DisableIRQ>
}
 80107ac:	bf00      	nop
 80107ae:	3708      	adds	r7, #8
 80107b0:	46bd      	mov	sp, r7
 80107b2:	bd80      	pop	{r7, pc}

080107b4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80107b4:	b480      	push	{r7}
 80107b6:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80107b8:	f3bf 8f5f 	dmb	sy
}
 80107bc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80107be:	4b07      	ldr	r3, [pc, #28]	; (80107dc <HAL_MPU_Disable+0x28>)
 80107c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107c2:	4a06      	ldr	r2, [pc, #24]	; (80107dc <HAL_MPU_Disable+0x28>)
 80107c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80107c8:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80107ca:	4b05      	ldr	r3, [pc, #20]	; (80107e0 <HAL_MPU_Disable+0x2c>)
 80107cc:	2200      	movs	r2, #0
 80107ce:	605a      	str	r2, [r3, #4]
}
 80107d0:	bf00      	nop
 80107d2:	46bd      	mov	sp, r7
 80107d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d8:	4770      	bx	lr
 80107da:	bf00      	nop
 80107dc:	e000ed00 	.word	0xe000ed00
 80107e0:	e000ed90 	.word	0xe000ed90

080107e4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80107e4:	b480      	push	{r7}
 80107e6:	b083      	sub	sp, #12
 80107e8:	af00      	add	r7, sp, #0
 80107ea:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80107ec:	4a0b      	ldr	r2, [pc, #44]	; (801081c <HAL_MPU_Enable+0x38>)
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	f043 0301 	orr.w	r3, r3, #1
 80107f4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80107f6:	4b0a      	ldr	r3, [pc, #40]	; (8010820 <HAL_MPU_Enable+0x3c>)
 80107f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107fa:	4a09      	ldr	r2, [pc, #36]	; (8010820 <HAL_MPU_Enable+0x3c>)
 80107fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010800:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8010802:	f3bf 8f4f 	dsb	sy
}
 8010806:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8010808:	f3bf 8f6f 	isb	sy
}
 801080c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 801080e:	bf00      	nop
 8010810:	370c      	adds	r7, #12
 8010812:	46bd      	mov	sp, r7
 8010814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010818:	4770      	bx	lr
 801081a:	bf00      	nop
 801081c:	e000ed90 	.word	0xe000ed90
 8010820:	e000ed00 	.word	0xe000ed00

08010824 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8010824:	b480      	push	{r7}
 8010826:	b083      	sub	sp, #12
 8010828:	af00      	add	r7, sp, #0
 801082a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	785a      	ldrb	r2, [r3, #1]
 8010830:	4b1d      	ldr	r3, [pc, #116]	; (80108a8 <HAL_MPU_ConfigRegion+0x84>)
 8010832:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	781b      	ldrb	r3, [r3, #0]
 8010838:	2b00      	cmp	r3, #0
 801083a:	d029      	beq.n	8010890 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 801083c:	4a1a      	ldr	r2, [pc, #104]	; (80108a8 <HAL_MPU_ConfigRegion+0x84>)
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	685b      	ldr	r3, [r3, #4]
 8010842:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	7b1b      	ldrb	r3, [r3, #12]
 8010848:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	7adb      	ldrb	r3, [r3, #11]
 801084e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8010850:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	7a9b      	ldrb	r3, [r3, #10]
 8010856:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8010858:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	7b5b      	ldrb	r3, [r3, #13]
 801085e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8010860:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	7b9b      	ldrb	r3, [r3, #14]
 8010866:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8010868:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	7bdb      	ldrb	r3, [r3, #15]
 801086e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8010870:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	7a5b      	ldrb	r3, [r3, #9]
 8010876:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8010878:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	7a1b      	ldrb	r3, [r3, #8]
 801087e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8010880:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8010882:	687a      	ldr	r2, [r7, #4]
 8010884:	7812      	ldrb	r2, [r2, #0]
 8010886:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8010888:	4a07      	ldr	r2, [pc, #28]	; (80108a8 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801088a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801088c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 801088e:	e005      	b.n	801089c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8010890:	4b05      	ldr	r3, [pc, #20]	; (80108a8 <HAL_MPU_ConfigRegion+0x84>)
 8010892:	2200      	movs	r2, #0
 8010894:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8010896:	4b04      	ldr	r3, [pc, #16]	; (80108a8 <HAL_MPU_ConfigRegion+0x84>)
 8010898:	2200      	movs	r2, #0
 801089a:	611a      	str	r2, [r3, #16]
}
 801089c:	bf00      	nop
 801089e:	370c      	adds	r7, #12
 80108a0:	46bd      	mov	sp, r7
 80108a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a6:	4770      	bx	lr
 80108a8:	e000ed90 	.word	0xe000ed90

080108ac <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80108ac:	b580      	push	{r7, lr}
 80108ae:	b082      	sub	sp, #8
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d101      	bne.n	80108be <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80108ba:	2301      	movs	r3, #1
 80108bc:	e054      	b.n	8010968 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	7f5b      	ldrb	r3, [r3, #29]
 80108c2:	b2db      	uxtb	r3, r3
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d105      	bne.n	80108d4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	2200      	movs	r2, #0
 80108cc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80108ce:	6878      	ldr	r0, [r7, #4]
 80108d0:	f7f0 fa9a 	bl	8000e08 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	2202      	movs	r2, #2
 80108d8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	791b      	ldrb	r3, [r3, #4]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d10c      	bne.n	80108fc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	4a22      	ldr	r2, [pc, #136]	; (8010970 <HAL_CRC_Init+0xc4>)
 80108e8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	689a      	ldr	r2, [r3, #8]
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	f022 0218 	bic.w	r2, r2, #24
 80108f8:	609a      	str	r2, [r3, #8]
 80108fa:	e00c      	b.n	8010916 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	6899      	ldr	r1, [r3, #8]
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	68db      	ldr	r3, [r3, #12]
 8010904:	461a      	mov	r2, r3
 8010906:	6878      	ldr	r0, [r7, #4]
 8010908:	f000 f834 	bl	8010974 <HAL_CRCEx_Polynomial_Set>
 801090c:	4603      	mov	r3, r0
 801090e:	2b00      	cmp	r3, #0
 8010910:	d001      	beq.n	8010916 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8010912:	2301      	movs	r3, #1
 8010914:	e028      	b.n	8010968 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	795b      	ldrb	r3, [r3, #5]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d105      	bne.n	801092a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	f04f 32ff 	mov.w	r2, #4294967295
 8010926:	611a      	str	r2, [r3, #16]
 8010928:	e004      	b.n	8010934 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	687a      	ldr	r2, [r7, #4]
 8010930:	6912      	ldr	r2, [r2, #16]
 8010932:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	689b      	ldr	r3, [r3, #8]
 801093a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	695a      	ldr	r2, [r3, #20]
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	430a      	orrs	r2, r1
 8010948:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	689b      	ldr	r3, [r3, #8]
 8010950:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	699a      	ldr	r2, [r3, #24]
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	430a      	orrs	r2, r1
 801095e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	2201      	movs	r2, #1
 8010964:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8010966:	2300      	movs	r3, #0
}
 8010968:	4618      	mov	r0, r3
 801096a:	3708      	adds	r7, #8
 801096c:	46bd      	mov	sp, r7
 801096e:	bd80      	pop	{r7, pc}
 8010970:	04c11db7 	.word	0x04c11db7

08010974 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8010974:	b480      	push	{r7}
 8010976:	b087      	sub	sp, #28
 8010978:	af00      	add	r7, sp, #0
 801097a:	60f8      	str	r0, [r7, #12]
 801097c:	60b9      	str	r1, [r7, #8]
 801097e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010980:	2300      	movs	r3, #0
 8010982:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8010984:	231f      	movs	r3, #31
 8010986:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8010988:	bf00      	nop
 801098a:	693b      	ldr	r3, [r7, #16]
 801098c:	1e5a      	subs	r2, r3, #1
 801098e:	613a      	str	r2, [r7, #16]
 8010990:	2b00      	cmp	r3, #0
 8010992:	d009      	beq.n	80109a8 <HAL_CRCEx_Polynomial_Set+0x34>
 8010994:	693b      	ldr	r3, [r7, #16]
 8010996:	f003 031f 	and.w	r3, r3, #31
 801099a:	68ba      	ldr	r2, [r7, #8]
 801099c:	fa22 f303 	lsr.w	r3, r2, r3
 80109a0:	f003 0301 	and.w	r3, r3, #1
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d0f0      	beq.n	801098a <HAL_CRCEx_Polynomial_Set+0x16>
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	2b18      	cmp	r3, #24
 80109ac:	d846      	bhi.n	8010a3c <HAL_CRCEx_Polynomial_Set+0xc8>
 80109ae:	a201      	add	r2, pc, #4	; (adr r2, 80109b4 <HAL_CRCEx_Polynomial_Set+0x40>)
 80109b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109b4:	08010a43 	.word	0x08010a43
 80109b8:	08010a3d 	.word	0x08010a3d
 80109bc:	08010a3d 	.word	0x08010a3d
 80109c0:	08010a3d 	.word	0x08010a3d
 80109c4:	08010a3d 	.word	0x08010a3d
 80109c8:	08010a3d 	.word	0x08010a3d
 80109cc:	08010a3d 	.word	0x08010a3d
 80109d0:	08010a3d 	.word	0x08010a3d
 80109d4:	08010a31 	.word	0x08010a31
 80109d8:	08010a3d 	.word	0x08010a3d
 80109dc:	08010a3d 	.word	0x08010a3d
 80109e0:	08010a3d 	.word	0x08010a3d
 80109e4:	08010a3d 	.word	0x08010a3d
 80109e8:	08010a3d 	.word	0x08010a3d
 80109ec:	08010a3d 	.word	0x08010a3d
 80109f0:	08010a3d 	.word	0x08010a3d
 80109f4:	08010a25 	.word	0x08010a25
 80109f8:	08010a3d 	.word	0x08010a3d
 80109fc:	08010a3d 	.word	0x08010a3d
 8010a00:	08010a3d 	.word	0x08010a3d
 8010a04:	08010a3d 	.word	0x08010a3d
 8010a08:	08010a3d 	.word	0x08010a3d
 8010a0c:	08010a3d 	.word	0x08010a3d
 8010a10:	08010a3d 	.word	0x08010a3d
 8010a14:	08010a19 	.word	0x08010a19
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8010a18:	693b      	ldr	r3, [r7, #16]
 8010a1a:	2b06      	cmp	r3, #6
 8010a1c:	d913      	bls.n	8010a46 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8010a1e:	2301      	movs	r3, #1
 8010a20:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8010a22:	e010      	b.n	8010a46 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8010a24:	693b      	ldr	r3, [r7, #16]
 8010a26:	2b07      	cmp	r3, #7
 8010a28:	d90f      	bls.n	8010a4a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8010a2a:	2301      	movs	r3, #1
 8010a2c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8010a2e:	e00c      	b.n	8010a4a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8010a30:	693b      	ldr	r3, [r7, #16]
 8010a32:	2b0f      	cmp	r3, #15
 8010a34:	d90b      	bls.n	8010a4e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8010a36:	2301      	movs	r3, #1
 8010a38:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8010a3a:	e008      	b.n	8010a4e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8010a3c:	2301      	movs	r3, #1
 8010a3e:	75fb      	strb	r3, [r7, #23]
      break;
 8010a40:	e006      	b.n	8010a50 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8010a42:	bf00      	nop
 8010a44:	e004      	b.n	8010a50 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8010a46:	bf00      	nop
 8010a48:	e002      	b.n	8010a50 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8010a4a:	bf00      	nop
 8010a4c:	e000      	b.n	8010a50 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8010a4e:	bf00      	nop
  }
  if (status == HAL_OK)
 8010a50:	7dfb      	ldrb	r3, [r7, #23]
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d10d      	bne.n	8010a72 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	68ba      	ldr	r2, [r7, #8]
 8010a5c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	689b      	ldr	r3, [r3, #8]
 8010a64:	f023 0118 	bic.w	r1, r3, #24
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	687a      	ldr	r2, [r7, #4]
 8010a6e:	430a      	orrs	r2, r1
 8010a70:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8010a72:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a74:	4618      	mov	r0, r3
 8010a76:	371c      	adds	r7, #28
 8010a78:	46bd      	mov	sp, r7
 8010a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a7e:	4770      	bx	lr

08010a80 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8010a80:	b580      	push	{r7, lr}
 8010a82:	b082      	sub	sp, #8
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d101      	bne.n	8010a92 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8010a8e:	2301      	movs	r3, #1
 8010a90:	e04f      	b.n	8010b32 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8010a98:	b2db      	uxtb	r3, r3
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d106      	bne.n	8010aac <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	2200      	movs	r2, #0
 8010aa2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8010aa6:	6878      	ldr	r0, [r7, #4]
 8010aa8:	f7f0 f9d0 	bl	8000e4c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	2202      	movs	r2, #2
 8010ab0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	681a      	ldr	r2, [r3, #0]
 8010aba:	4b20      	ldr	r3, [pc, #128]	; (8010b3c <HAL_DMA2D_Init+0xbc>)
 8010abc:	4013      	ands	r3, r2
 8010abe:	687a      	ldr	r2, [r7, #4]
 8010ac0:	6851      	ldr	r1, [r2, #4]
 8010ac2:	687a      	ldr	r2, [r7, #4]
 8010ac4:	69d2      	ldr	r2, [r2, #28]
 8010ac6:	4311      	orrs	r1, r2
 8010ac8:	687a      	ldr	r2, [r7, #4]
 8010aca:	6812      	ldr	r2, [r2, #0]
 8010acc:	430b      	orrs	r3, r1
 8010ace:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010ad6:	4b1a      	ldr	r3, [pc, #104]	; (8010b40 <HAL_DMA2D_Init+0xc0>)
 8010ad8:	4013      	ands	r3, r2
 8010ada:	687a      	ldr	r2, [r7, #4]
 8010adc:	6891      	ldr	r1, [r2, #8]
 8010ade:	687a      	ldr	r2, [r7, #4]
 8010ae0:	6992      	ldr	r2, [r2, #24]
 8010ae2:	4311      	orrs	r1, r2
 8010ae4:	687a      	ldr	r2, [r7, #4]
 8010ae6:	6812      	ldr	r2, [r2, #0]
 8010ae8:	430b      	orrs	r3, r1
 8010aea:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010af2:	4b14      	ldr	r3, [pc, #80]	; (8010b44 <HAL_DMA2D_Init+0xc4>)
 8010af4:	4013      	ands	r3, r2
 8010af6:	687a      	ldr	r2, [r7, #4]
 8010af8:	68d1      	ldr	r1, [r2, #12]
 8010afa:	687a      	ldr	r2, [r7, #4]
 8010afc:	6812      	ldr	r2, [r2, #0]
 8010afe:	430b      	orrs	r3, r1
 8010b00:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b08:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	691b      	ldr	r3, [r3, #16]
 8010b10:	051a      	lsls	r2, r3, #20
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	695b      	ldr	r3, [r3, #20]
 8010b16:	055b      	lsls	r3, r3, #21
 8010b18:	431a      	orrs	r2, r3
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	430a      	orrs	r2, r1
 8010b20:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	2200      	movs	r2, #0
 8010b26:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	2201      	movs	r2, #1
 8010b2c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8010b30:	2300      	movs	r3, #0
}
 8010b32:	4618      	mov	r0, r3
 8010b34:	3708      	adds	r7, #8
 8010b36:	46bd      	mov	sp, r7
 8010b38:	bd80      	pop	{r7, pc}
 8010b3a:	bf00      	nop
 8010b3c:	fff8ffbf 	.word	0xfff8ffbf
 8010b40:	fffffef8 	.word	0xfffffef8
 8010b44:	ffff0000 	.word	0xffff0000

08010b48 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8010b48:	b580      	push	{r7, lr}
 8010b4a:	b084      	sub	sp, #16
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	685b      	ldr	r3, [r3, #4]
 8010b56:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	f003 0301 	and.w	r3, r3, #1
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d026      	beq.n	8010bb8 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8010b6a:	68bb      	ldr	r3, [r7, #8]
 8010b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d021      	beq.n	8010bb8 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	681a      	ldr	r2, [r3, #0]
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010b82:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010b88:	f043 0201 	orr.w	r2, r3, #1
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	2201      	movs	r2, #1
 8010b96:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	2204      	movs	r2, #4
 8010b9c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	2200      	movs	r2, #0
 8010ba4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d003      	beq.n	8010bb8 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bb4:	6878      	ldr	r0, [r7, #4]
 8010bb6:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	f003 0320 	and.w	r3, r3, #32
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d026      	beq.n	8010c10 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8010bc2:	68bb      	ldr	r3, [r7, #8]
 8010bc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d021      	beq.n	8010c10 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	681a      	ldr	r2, [r3, #0]
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010bda:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	2220      	movs	r2, #32
 8010be2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010be8:	f043 0202 	orr.w	r2, r3, #2
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	2204      	movs	r2, #4
 8010bf4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	2200      	movs	r2, #0
 8010bfc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d003      	beq.n	8010c10 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c0c:	6878      	ldr	r0, [r7, #4]
 8010c0e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	f003 0308 	and.w	r3, r3, #8
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d026      	beq.n	8010c68 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8010c1a:	68bb      	ldr	r3, [r7, #8]
 8010c1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d021      	beq.n	8010c68 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	681a      	ldr	r2, [r3, #0]
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010c32:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	2208      	movs	r2, #8
 8010c3a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010c40:	f043 0204 	orr.w	r2, r3, #4
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	2204      	movs	r2, #4
 8010c4c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	2200      	movs	r2, #0
 8010c54:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d003      	beq.n	8010c68 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c64:	6878      	ldr	r0, [r7, #4]
 8010c66:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	f003 0304 	and.w	r3, r3, #4
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d013      	beq.n	8010c9a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8010c72:	68bb      	ldr	r3, [r7, #8]
 8010c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d00e      	beq.n	8010c9a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	681a      	ldr	r2, [r3, #0]
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010c8a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	2204      	movs	r2, #4
 8010c92:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8010c94:	6878      	ldr	r0, [r7, #4]
 8010c96:	f000 f853 	bl	8010d40 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	f003 0302 	and.w	r3, r3, #2
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d024      	beq.n	8010cee <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8010ca4:	68bb      	ldr	r3, [r7, #8]
 8010ca6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d01f      	beq.n	8010cee <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	681a      	ldr	r2, [r3, #0]
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8010cbc:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	2202      	movs	r2, #2
 8010cc4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	2201      	movs	r2, #1
 8010cd2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	2200      	movs	r2, #0
 8010cda:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	6a1b      	ldr	r3, [r3, #32]
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d003      	beq.n	8010cee <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	6a1b      	ldr	r3, [r3, #32]
 8010cea:	6878      	ldr	r0, [r7, #4]
 8010cec:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	f003 0310 	and.w	r3, r3, #16
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d01f      	beq.n	8010d38 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8010cf8:	68bb      	ldr	r3, [r7, #8]
 8010cfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d01a      	beq.n	8010d38 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	681a      	ldr	r2, [r3, #0]
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8010d10:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	2210      	movs	r2, #16
 8010d18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	2201      	movs	r2, #1
 8010d26:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	2200      	movs	r2, #0
 8010d2e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8010d32:	6878      	ldr	r0, [r7, #4]
 8010d34:	f000 f80e 	bl	8010d54 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8010d38:	bf00      	nop
 8010d3a:	3710      	adds	r7, #16
 8010d3c:	46bd      	mov	sp, r7
 8010d3e:	bd80      	pop	{r7, pc}

08010d40 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8010d40:	b480      	push	{r7}
 8010d42:	b083      	sub	sp, #12
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8010d48:	bf00      	nop
 8010d4a:	370c      	adds	r7, #12
 8010d4c:	46bd      	mov	sp, r7
 8010d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d52:	4770      	bx	lr

08010d54 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8010d54:	b480      	push	{r7}
 8010d56:	b083      	sub	sp, #12
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8010d5c:	bf00      	nop
 8010d5e:	370c      	adds	r7, #12
 8010d60:	46bd      	mov	sp, r7
 8010d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d66:	4770      	bx	lr

08010d68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8010d68:	b480      	push	{r7}
 8010d6a:	b089      	sub	sp, #36	; 0x24
 8010d6c:	af00      	add	r7, sp, #0
 8010d6e:	6078      	str	r0, [r7, #4]
 8010d70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8010d72:	2300      	movs	r3, #0
 8010d74:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8010d76:	4b89      	ldr	r3, [pc, #548]	; (8010f9c <HAL_GPIO_Init+0x234>)
 8010d78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8010d7a:	e194      	b.n	80110a6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8010d7c:	683b      	ldr	r3, [r7, #0]
 8010d7e:	681a      	ldr	r2, [r3, #0]
 8010d80:	2101      	movs	r1, #1
 8010d82:	69fb      	ldr	r3, [r7, #28]
 8010d84:	fa01 f303 	lsl.w	r3, r1, r3
 8010d88:	4013      	ands	r3, r2
 8010d8a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8010d8c:	693b      	ldr	r3, [r7, #16]
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	f000 8186 	beq.w	80110a0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8010d94:	683b      	ldr	r3, [r7, #0]
 8010d96:	685b      	ldr	r3, [r3, #4]
 8010d98:	f003 0303 	and.w	r3, r3, #3
 8010d9c:	2b01      	cmp	r3, #1
 8010d9e:	d005      	beq.n	8010dac <HAL_GPIO_Init+0x44>
 8010da0:	683b      	ldr	r3, [r7, #0]
 8010da2:	685b      	ldr	r3, [r3, #4]
 8010da4:	f003 0303 	and.w	r3, r3, #3
 8010da8:	2b02      	cmp	r3, #2
 8010daa:	d130      	bne.n	8010e0e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	689b      	ldr	r3, [r3, #8]
 8010db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8010db2:	69fb      	ldr	r3, [r7, #28]
 8010db4:	005b      	lsls	r3, r3, #1
 8010db6:	2203      	movs	r2, #3
 8010db8:	fa02 f303 	lsl.w	r3, r2, r3
 8010dbc:	43db      	mvns	r3, r3
 8010dbe:	69ba      	ldr	r2, [r7, #24]
 8010dc0:	4013      	ands	r3, r2
 8010dc2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8010dc4:	683b      	ldr	r3, [r7, #0]
 8010dc6:	68da      	ldr	r2, [r3, #12]
 8010dc8:	69fb      	ldr	r3, [r7, #28]
 8010dca:	005b      	lsls	r3, r3, #1
 8010dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8010dd0:	69ba      	ldr	r2, [r7, #24]
 8010dd2:	4313      	orrs	r3, r2
 8010dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	69ba      	ldr	r2, [r7, #24]
 8010dda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	685b      	ldr	r3, [r3, #4]
 8010de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8010de2:	2201      	movs	r2, #1
 8010de4:	69fb      	ldr	r3, [r7, #28]
 8010de6:	fa02 f303 	lsl.w	r3, r2, r3
 8010dea:	43db      	mvns	r3, r3
 8010dec:	69ba      	ldr	r2, [r7, #24]
 8010dee:	4013      	ands	r3, r2
 8010df0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8010df2:	683b      	ldr	r3, [r7, #0]
 8010df4:	685b      	ldr	r3, [r3, #4]
 8010df6:	091b      	lsrs	r3, r3, #4
 8010df8:	f003 0201 	and.w	r2, r3, #1
 8010dfc:	69fb      	ldr	r3, [r7, #28]
 8010dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8010e02:	69ba      	ldr	r2, [r7, #24]
 8010e04:	4313      	orrs	r3, r2
 8010e06:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	69ba      	ldr	r2, [r7, #24]
 8010e0c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8010e0e:	683b      	ldr	r3, [r7, #0]
 8010e10:	685b      	ldr	r3, [r3, #4]
 8010e12:	f003 0303 	and.w	r3, r3, #3
 8010e16:	2b03      	cmp	r3, #3
 8010e18:	d017      	beq.n	8010e4a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	68db      	ldr	r3, [r3, #12]
 8010e1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8010e20:	69fb      	ldr	r3, [r7, #28]
 8010e22:	005b      	lsls	r3, r3, #1
 8010e24:	2203      	movs	r2, #3
 8010e26:	fa02 f303 	lsl.w	r3, r2, r3
 8010e2a:	43db      	mvns	r3, r3
 8010e2c:	69ba      	ldr	r2, [r7, #24]
 8010e2e:	4013      	ands	r3, r2
 8010e30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8010e32:	683b      	ldr	r3, [r7, #0]
 8010e34:	689a      	ldr	r2, [r3, #8]
 8010e36:	69fb      	ldr	r3, [r7, #28]
 8010e38:	005b      	lsls	r3, r3, #1
 8010e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8010e3e:	69ba      	ldr	r2, [r7, #24]
 8010e40:	4313      	orrs	r3, r2
 8010e42:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	69ba      	ldr	r2, [r7, #24]
 8010e48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8010e4a:	683b      	ldr	r3, [r7, #0]
 8010e4c:	685b      	ldr	r3, [r3, #4]
 8010e4e:	f003 0303 	and.w	r3, r3, #3
 8010e52:	2b02      	cmp	r3, #2
 8010e54:	d123      	bne.n	8010e9e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8010e56:	69fb      	ldr	r3, [r7, #28]
 8010e58:	08da      	lsrs	r2, r3, #3
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	3208      	adds	r2, #8
 8010e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8010e64:	69fb      	ldr	r3, [r7, #28]
 8010e66:	f003 0307 	and.w	r3, r3, #7
 8010e6a:	009b      	lsls	r3, r3, #2
 8010e6c:	220f      	movs	r2, #15
 8010e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8010e72:	43db      	mvns	r3, r3
 8010e74:	69ba      	ldr	r2, [r7, #24]
 8010e76:	4013      	ands	r3, r2
 8010e78:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8010e7a:	683b      	ldr	r3, [r7, #0]
 8010e7c:	691a      	ldr	r2, [r3, #16]
 8010e7e:	69fb      	ldr	r3, [r7, #28]
 8010e80:	f003 0307 	and.w	r3, r3, #7
 8010e84:	009b      	lsls	r3, r3, #2
 8010e86:	fa02 f303 	lsl.w	r3, r2, r3
 8010e8a:	69ba      	ldr	r2, [r7, #24]
 8010e8c:	4313      	orrs	r3, r2
 8010e8e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8010e90:	69fb      	ldr	r3, [r7, #28]
 8010e92:	08da      	lsrs	r2, r3, #3
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	3208      	adds	r2, #8
 8010e98:	69b9      	ldr	r1, [r7, #24]
 8010e9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8010ea4:	69fb      	ldr	r3, [r7, #28]
 8010ea6:	005b      	lsls	r3, r3, #1
 8010ea8:	2203      	movs	r2, #3
 8010eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8010eae:	43db      	mvns	r3, r3
 8010eb0:	69ba      	ldr	r2, [r7, #24]
 8010eb2:	4013      	ands	r3, r2
 8010eb4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8010eb6:	683b      	ldr	r3, [r7, #0]
 8010eb8:	685b      	ldr	r3, [r3, #4]
 8010eba:	f003 0203 	and.w	r2, r3, #3
 8010ebe:	69fb      	ldr	r3, [r7, #28]
 8010ec0:	005b      	lsls	r3, r3, #1
 8010ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8010ec6:	69ba      	ldr	r2, [r7, #24]
 8010ec8:	4313      	orrs	r3, r2
 8010eca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	69ba      	ldr	r2, [r7, #24]
 8010ed0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8010ed2:	683b      	ldr	r3, [r7, #0]
 8010ed4:	685b      	ldr	r3, [r3, #4]
 8010ed6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	f000 80e0 	beq.w	80110a0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010ee0:	4b2f      	ldr	r3, [pc, #188]	; (8010fa0 <HAL_GPIO_Init+0x238>)
 8010ee2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8010ee6:	4a2e      	ldr	r2, [pc, #184]	; (8010fa0 <HAL_GPIO_Init+0x238>)
 8010ee8:	f043 0302 	orr.w	r3, r3, #2
 8010eec:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8010ef0:	4b2b      	ldr	r3, [pc, #172]	; (8010fa0 <HAL_GPIO_Init+0x238>)
 8010ef2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8010ef6:	f003 0302 	and.w	r3, r3, #2
 8010efa:	60fb      	str	r3, [r7, #12]
 8010efc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8010efe:	4a29      	ldr	r2, [pc, #164]	; (8010fa4 <HAL_GPIO_Init+0x23c>)
 8010f00:	69fb      	ldr	r3, [r7, #28]
 8010f02:	089b      	lsrs	r3, r3, #2
 8010f04:	3302      	adds	r3, #2
 8010f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8010f0c:	69fb      	ldr	r3, [r7, #28]
 8010f0e:	f003 0303 	and.w	r3, r3, #3
 8010f12:	009b      	lsls	r3, r3, #2
 8010f14:	220f      	movs	r2, #15
 8010f16:	fa02 f303 	lsl.w	r3, r2, r3
 8010f1a:	43db      	mvns	r3, r3
 8010f1c:	69ba      	ldr	r2, [r7, #24]
 8010f1e:	4013      	ands	r3, r2
 8010f20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	4a20      	ldr	r2, [pc, #128]	; (8010fa8 <HAL_GPIO_Init+0x240>)
 8010f26:	4293      	cmp	r3, r2
 8010f28:	d052      	beq.n	8010fd0 <HAL_GPIO_Init+0x268>
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	4a1f      	ldr	r2, [pc, #124]	; (8010fac <HAL_GPIO_Init+0x244>)
 8010f2e:	4293      	cmp	r3, r2
 8010f30:	d031      	beq.n	8010f96 <HAL_GPIO_Init+0x22e>
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	4a1e      	ldr	r2, [pc, #120]	; (8010fb0 <HAL_GPIO_Init+0x248>)
 8010f36:	4293      	cmp	r3, r2
 8010f38:	d02b      	beq.n	8010f92 <HAL_GPIO_Init+0x22a>
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	4a1d      	ldr	r2, [pc, #116]	; (8010fb4 <HAL_GPIO_Init+0x24c>)
 8010f3e:	4293      	cmp	r3, r2
 8010f40:	d025      	beq.n	8010f8e <HAL_GPIO_Init+0x226>
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	4a1c      	ldr	r2, [pc, #112]	; (8010fb8 <HAL_GPIO_Init+0x250>)
 8010f46:	4293      	cmp	r3, r2
 8010f48:	d01f      	beq.n	8010f8a <HAL_GPIO_Init+0x222>
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	4a1b      	ldr	r2, [pc, #108]	; (8010fbc <HAL_GPIO_Init+0x254>)
 8010f4e:	4293      	cmp	r3, r2
 8010f50:	d019      	beq.n	8010f86 <HAL_GPIO_Init+0x21e>
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	4a1a      	ldr	r2, [pc, #104]	; (8010fc0 <HAL_GPIO_Init+0x258>)
 8010f56:	4293      	cmp	r3, r2
 8010f58:	d013      	beq.n	8010f82 <HAL_GPIO_Init+0x21a>
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	4a19      	ldr	r2, [pc, #100]	; (8010fc4 <HAL_GPIO_Init+0x25c>)
 8010f5e:	4293      	cmp	r3, r2
 8010f60:	d00d      	beq.n	8010f7e <HAL_GPIO_Init+0x216>
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	4a18      	ldr	r2, [pc, #96]	; (8010fc8 <HAL_GPIO_Init+0x260>)
 8010f66:	4293      	cmp	r3, r2
 8010f68:	d007      	beq.n	8010f7a <HAL_GPIO_Init+0x212>
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	4a17      	ldr	r2, [pc, #92]	; (8010fcc <HAL_GPIO_Init+0x264>)
 8010f6e:	4293      	cmp	r3, r2
 8010f70:	d101      	bne.n	8010f76 <HAL_GPIO_Init+0x20e>
 8010f72:	2309      	movs	r3, #9
 8010f74:	e02d      	b.n	8010fd2 <HAL_GPIO_Init+0x26a>
 8010f76:	230a      	movs	r3, #10
 8010f78:	e02b      	b.n	8010fd2 <HAL_GPIO_Init+0x26a>
 8010f7a:	2308      	movs	r3, #8
 8010f7c:	e029      	b.n	8010fd2 <HAL_GPIO_Init+0x26a>
 8010f7e:	2307      	movs	r3, #7
 8010f80:	e027      	b.n	8010fd2 <HAL_GPIO_Init+0x26a>
 8010f82:	2306      	movs	r3, #6
 8010f84:	e025      	b.n	8010fd2 <HAL_GPIO_Init+0x26a>
 8010f86:	2305      	movs	r3, #5
 8010f88:	e023      	b.n	8010fd2 <HAL_GPIO_Init+0x26a>
 8010f8a:	2304      	movs	r3, #4
 8010f8c:	e021      	b.n	8010fd2 <HAL_GPIO_Init+0x26a>
 8010f8e:	2303      	movs	r3, #3
 8010f90:	e01f      	b.n	8010fd2 <HAL_GPIO_Init+0x26a>
 8010f92:	2302      	movs	r3, #2
 8010f94:	e01d      	b.n	8010fd2 <HAL_GPIO_Init+0x26a>
 8010f96:	2301      	movs	r3, #1
 8010f98:	e01b      	b.n	8010fd2 <HAL_GPIO_Init+0x26a>
 8010f9a:	bf00      	nop
 8010f9c:	58000080 	.word	0x58000080
 8010fa0:	58024400 	.word	0x58024400
 8010fa4:	58000400 	.word	0x58000400
 8010fa8:	58020000 	.word	0x58020000
 8010fac:	58020400 	.word	0x58020400
 8010fb0:	58020800 	.word	0x58020800
 8010fb4:	58020c00 	.word	0x58020c00
 8010fb8:	58021000 	.word	0x58021000
 8010fbc:	58021400 	.word	0x58021400
 8010fc0:	58021800 	.word	0x58021800
 8010fc4:	58021c00 	.word	0x58021c00
 8010fc8:	58022000 	.word	0x58022000
 8010fcc:	58022400 	.word	0x58022400
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	69fa      	ldr	r2, [r7, #28]
 8010fd4:	f002 0203 	and.w	r2, r2, #3
 8010fd8:	0092      	lsls	r2, r2, #2
 8010fda:	4093      	lsls	r3, r2
 8010fdc:	69ba      	ldr	r2, [r7, #24]
 8010fde:	4313      	orrs	r3, r2
 8010fe0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8010fe2:	4938      	ldr	r1, [pc, #224]	; (80110c4 <HAL_GPIO_Init+0x35c>)
 8010fe4:	69fb      	ldr	r3, [r7, #28]
 8010fe6:	089b      	lsrs	r3, r3, #2
 8010fe8:	3302      	adds	r3, #2
 8010fea:	69ba      	ldr	r2, [r7, #24]
 8010fec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8010ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8010ff8:	693b      	ldr	r3, [r7, #16]
 8010ffa:	43db      	mvns	r3, r3
 8010ffc:	69ba      	ldr	r2, [r7, #24]
 8010ffe:	4013      	ands	r3, r2
 8011000:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8011002:	683b      	ldr	r3, [r7, #0]
 8011004:	685b      	ldr	r3, [r3, #4]
 8011006:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801100a:	2b00      	cmp	r3, #0
 801100c:	d003      	beq.n	8011016 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 801100e:	69ba      	ldr	r2, [r7, #24]
 8011010:	693b      	ldr	r3, [r7, #16]
 8011012:	4313      	orrs	r3, r2
 8011014:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8011016:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801101a:	69bb      	ldr	r3, [r7, #24]
 801101c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 801101e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011022:	685b      	ldr	r3, [r3, #4]
 8011024:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8011026:	693b      	ldr	r3, [r7, #16]
 8011028:	43db      	mvns	r3, r3
 801102a:	69ba      	ldr	r2, [r7, #24]
 801102c:	4013      	ands	r3, r2
 801102e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8011030:	683b      	ldr	r3, [r7, #0]
 8011032:	685b      	ldr	r3, [r3, #4]
 8011034:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011038:	2b00      	cmp	r3, #0
 801103a:	d003      	beq.n	8011044 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 801103c:	69ba      	ldr	r2, [r7, #24]
 801103e:	693b      	ldr	r3, [r7, #16]
 8011040:	4313      	orrs	r3, r2
 8011042:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8011044:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8011048:	69bb      	ldr	r3, [r7, #24]
 801104a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 801104c:	697b      	ldr	r3, [r7, #20]
 801104e:	685b      	ldr	r3, [r3, #4]
 8011050:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8011052:	693b      	ldr	r3, [r7, #16]
 8011054:	43db      	mvns	r3, r3
 8011056:	69ba      	ldr	r2, [r7, #24]
 8011058:	4013      	ands	r3, r2
 801105a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801105c:	683b      	ldr	r3, [r7, #0]
 801105e:	685b      	ldr	r3, [r3, #4]
 8011060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011064:	2b00      	cmp	r3, #0
 8011066:	d003      	beq.n	8011070 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8011068:	69ba      	ldr	r2, [r7, #24]
 801106a:	693b      	ldr	r3, [r7, #16]
 801106c:	4313      	orrs	r3, r2
 801106e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8011070:	697b      	ldr	r3, [r7, #20]
 8011072:	69ba      	ldr	r2, [r7, #24]
 8011074:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8011076:	697b      	ldr	r3, [r7, #20]
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801107c:	693b      	ldr	r3, [r7, #16]
 801107e:	43db      	mvns	r3, r3
 8011080:	69ba      	ldr	r2, [r7, #24]
 8011082:	4013      	ands	r3, r2
 8011084:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8011086:	683b      	ldr	r3, [r7, #0]
 8011088:	685b      	ldr	r3, [r3, #4]
 801108a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801108e:	2b00      	cmp	r3, #0
 8011090:	d003      	beq.n	801109a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8011092:	69ba      	ldr	r2, [r7, #24]
 8011094:	693b      	ldr	r3, [r7, #16]
 8011096:	4313      	orrs	r3, r2
 8011098:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 801109a:	697b      	ldr	r3, [r7, #20]
 801109c:	69ba      	ldr	r2, [r7, #24]
 801109e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80110a0:	69fb      	ldr	r3, [r7, #28]
 80110a2:	3301      	adds	r3, #1
 80110a4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80110a6:	683b      	ldr	r3, [r7, #0]
 80110a8:	681a      	ldr	r2, [r3, #0]
 80110aa:	69fb      	ldr	r3, [r7, #28]
 80110ac:	fa22 f303 	lsr.w	r3, r2, r3
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	f47f ae63 	bne.w	8010d7c <HAL_GPIO_Init+0x14>
  }
}
 80110b6:	bf00      	nop
 80110b8:	bf00      	nop
 80110ba:	3724      	adds	r7, #36	; 0x24
 80110bc:	46bd      	mov	sp, r7
 80110be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110c2:	4770      	bx	lr
 80110c4:	58000400 	.word	0x58000400

080110c8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80110c8:	b480      	push	{r7}
 80110ca:	b087      	sub	sp, #28
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	6078      	str	r0, [r7, #4]
 80110d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80110d2:	2300      	movs	r3, #0
 80110d4:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80110d6:	4b75      	ldr	r3, [pc, #468]	; (80112ac <HAL_GPIO_DeInit+0x1e4>)
 80110d8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 80110da:	e0d9      	b.n	8011290 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 80110dc:	2201      	movs	r2, #1
 80110de:	697b      	ldr	r3, [r7, #20]
 80110e0:	fa02 f303 	lsl.w	r3, r2, r3
 80110e4:	683a      	ldr	r2, [r7, #0]
 80110e6:	4013      	ands	r3, r2
 80110e8:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	f000 80cc 	beq.w	801128a <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 80110f2:	4a6f      	ldr	r2, [pc, #444]	; (80112b0 <HAL_GPIO_DeInit+0x1e8>)
 80110f4:	697b      	ldr	r3, [r7, #20]
 80110f6:	089b      	lsrs	r3, r3, #2
 80110f8:	3302      	adds	r3, #2
 80110fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80110fe:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8011100:	697b      	ldr	r3, [r7, #20]
 8011102:	f003 0303 	and.w	r3, r3, #3
 8011106:	009b      	lsls	r3, r3, #2
 8011108:	220f      	movs	r2, #15
 801110a:	fa02 f303 	lsl.w	r3, r2, r3
 801110e:	68ba      	ldr	r2, [r7, #8]
 8011110:	4013      	ands	r3, r2
 8011112:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	4a67      	ldr	r2, [pc, #412]	; (80112b4 <HAL_GPIO_DeInit+0x1ec>)
 8011118:	4293      	cmp	r3, r2
 801111a:	d037      	beq.n	801118c <HAL_GPIO_DeInit+0xc4>
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	4a66      	ldr	r2, [pc, #408]	; (80112b8 <HAL_GPIO_DeInit+0x1f0>)
 8011120:	4293      	cmp	r3, r2
 8011122:	d031      	beq.n	8011188 <HAL_GPIO_DeInit+0xc0>
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	4a65      	ldr	r2, [pc, #404]	; (80112bc <HAL_GPIO_DeInit+0x1f4>)
 8011128:	4293      	cmp	r3, r2
 801112a:	d02b      	beq.n	8011184 <HAL_GPIO_DeInit+0xbc>
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	4a64      	ldr	r2, [pc, #400]	; (80112c0 <HAL_GPIO_DeInit+0x1f8>)
 8011130:	4293      	cmp	r3, r2
 8011132:	d025      	beq.n	8011180 <HAL_GPIO_DeInit+0xb8>
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	4a63      	ldr	r2, [pc, #396]	; (80112c4 <HAL_GPIO_DeInit+0x1fc>)
 8011138:	4293      	cmp	r3, r2
 801113a:	d01f      	beq.n	801117c <HAL_GPIO_DeInit+0xb4>
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	4a62      	ldr	r2, [pc, #392]	; (80112c8 <HAL_GPIO_DeInit+0x200>)
 8011140:	4293      	cmp	r3, r2
 8011142:	d019      	beq.n	8011178 <HAL_GPIO_DeInit+0xb0>
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	4a61      	ldr	r2, [pc, #388]	; (80112cc <HAL_GPIO_DeInit+0x204>)
 8011148:	4293      	cmp	r3, r2
 801114a:	d013      	beq.n	8011174 <HAL_GPIO_DeInit+0xac>
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	4a60      	ldr	r2, [pc, #384]	; (80112d0 <HAL_GPIO_DeInit+0x208>)
 8011150:	4293      	cmp	r3, r2
 8011152:	d00d      	beq.n	8011170 <HAL_GPIO_DeInit+0xa8>
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	4a5f      	ldr	r2, [pc, #380]	; (80112d4 <HAL_GPIO_DeInit+0x20c>)
 8011158:	4293      	cmp	r3, r2
 801115a:	d007      	beq.n	801116c <HAL_GPIO_DeInit+0xa4>
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	4a5e      	ldr	r2, [pc, #376]	; (80112d8 <HAL_GPIO_DeInit+0x210>)
 8011160:	4293      	cmp	r3, r2
 8011162:	d101      	bne.n	8011168 <HAL_GPIO_DeInit+0xa0>
 8011164:	2309      	movs	r3, #9
 8011166:	e012      	b.n	801118e <HAL_GPIO_DeInit+0xc6>
 8011168:	230a      	movs	r3, #10
 801116a:	e010      	b.n	801118e <HAL_GPIO_DeInit+0xc6>
 801116c:	2308      	movs	r3, #8
 801116e:	e00e      	b.n	801118e <HAL_GPIO_DeInit+0xc6>
 8011170:	2307      	movs	r3, #7
 8011172:	e00c      	b.n	801118e <HAL_GPIO_DeInit+0xc6>
 8011174:	2306      	movs	r3, #6
 8011176:	e00a      	b.n	801118e <HAL_GPIO_DeInit+0xc6>
 8011178:	2305      	movs	r3, #5
 801117a:	e008      	b.n	801118e <HAL_GPIO_DeInit+0xc6>
 801117c:	2304      	movs	r3, #4
 801117e:	e006      	b.n	801118e <HAL_GPIO_DeInit+0xc6>
 8011180:	2303      	movs	r3, #3
 8011182:	e004      	b.n	801118e <HAL_GPIO_DeInit+0xc6>
 8011184:	2302      	movs	r3, #2
 8011186:	e002      	b.n	801118e <HAL_GPIO_DeInit+0xc6>
 8011188:	2301      	movs	r3, #1
 801118a:	e000      	b.n	801118e <HAL_GPIO_DeInit+0xc6>
 801118c:	2300      	movs	r3, #0
 801118e:	697a      	ldr	r2, [r7, #20]
 8011190:	f002 0203 	and.w	r2, r2, #3
 8011194:	0092      	lsls	r2, r2, #2
 8011196:	4093      	lsls	r3, r2
 8011198:	68ba      	ldr	r2, [r7, #8]
 801119a:	429a      	cmp	r2, r3
 801119c:	d136      	bne.n	801120c <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 801119e:	693b      	ldr	r3, [r7, #16]
 80111a0:	681a      	ldr	r2, [r3, #0]
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	43db      	mvns	r3, r3
 80111a6:	401a      	ands	r2, r3
 80111a8:	693b      	ldr	r3, [r7, #16]
 80111aa:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80111ac:	693b      	ldr	r3, [r7, #16]
 80111ae:	685a      	ldr	r2, [r3, #4]
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	43db      	mvns	r3, r3
 80111b4:	401a      	ands	r2, r3
 80111b6:	693b      	ldr	r3, [r7, #16]
 80111b8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80111ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80111be:	685a      	ldr	r2, [r3, #4]
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	43db      	mvns	r3, r3
 80111c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80111c8:	4013      	ands	r3, r2
 80111ca:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80111cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80111d0:	681a      	ldr	r2, [r3, #0]
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	43db      	mvns	r3, r3
 80111d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80111da:	4013      	ands	r3, r2
 80111dc:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 80111de:	697b      	ldr	r3, [r7, #20]
 80111e0:	f003 0303 	and.w	r3, r3, #3
 80111e4:	009b      	lsls	r3, r3, #2
 80111e6:	220f      	movs	r2, #15
 80111e8:	fa02 f303 	lsl.w	r3, r2, r3
 80111ec:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80111ee:	4a30      	ldr	r2, [pc, #192]	; (80112b0 <HAL_GPIO_DeInit+0x1e8>)
 80111f0:	697b      	ldr	r3, [r7, #20]
 80111f2:	089b      	lsrs	r3, r3, #2
 80111f4:	3302      	adds	r3, #2
 80111f6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80111fa:	68bb      	ldr	r3, [r7, #8]
 80111fc:	43da      	mvns	r2, r3
 80111fe:	482c      	ldr	r0, [pc, #176]	; (80112b0 <HAL_GPIO_DeInit+0x1e8>)
 8011200:	697b      	ldr	r3, [r7, #20]
 8011202:	089b      	lsrs	r3, r3, #2
 8011204:	400a      	ands	r2, r1
 8011206:	3302      	adds	r3, #2
 8011208:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	681a      	ldr	r2, [r3, #0]
 8011210:	697b      	ldr	r3, [r7, #20]
 8011212:	005b      	lsls	r3, r3, #1
 8011214:	2103      	movs	r1, #3
 8011216:	fa01 f303 	lsl.w	r3, r1, r3
 801121a:	431a      	orrs	r2, r3
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8011220:	697b      	ldr	r3, [r7, #20]
 8011222:	08da      	lsrs	r2, r3, #3
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	3208      	adds	r2, #8
 8011228:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801122c:	697b      	ldr	r3, [r7, #20]
 801122e:	f003 0307 	and.w	r3, r3, #7
 8011232:	009b      	lsls	r3, r3, #2
 8011234:	220f      	movs	r2, #15
 8011236:	fa02 f303 	lsl.w	r3, r2, r3
 801123a:	43db      	mvns	r3, r3
 801123c:	697a      	ldr	r2, [r7, #20]
 801123e:	08d2      	lsrs	r2, r2, #3
 8011240:	4019      	ands	r1, r3
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	3208      	adds	r2, #8
 8011246:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	68da      	ldr	r2, [r3, #12]
 801124e:	697b      	ldr	r3, [r7, #20]
 8011250:	005b      	lsls	r3, r3, #1
 8011252:	2103      	movs	r1, #3
 8011254:	fa01 f303 	lsl.w	r3, r1, r3
 8011258:	43db      	mvns	r3, r3
 801125a:	401a      	ands	r2, r3
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	685a      	ldr	r2, [r3, #4]
 8011264:	2101      	movs	r1, #1
 8011266:	697b      	ldr	r3, [r7, #20]
 8011268:	fa01 f303 	lsl.w	r3, r1, r3
 801126c:	43db      	mvns	r3, r3
 801126e:	401a      	ands	r2, r3
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	689a      	ldr	r2, [r3, #8]
 8011278:	697b      	ldr	r3, [r7, #20]
 801127a:	005b      	lsls	r3, r3, #1
 801127c:	2103      	movs	r1, #3
 801127e:	fa01 f303 	lsl.w	r3, r1, r3
 8011282:	43db      	mvns	r3, r3
 8011284:	401a      	ands	r2, r3
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	609a      	str	r2, [r3, #8]
    }

    position++;
 801128a:	697b      	ldr	r3, [r7, #20]
 801128c:	3301      	adds	r3, #1
 801128e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8011290:	683a      	ldr	r2, [r7, #0]
 8011292:	697b      	ldr	r3, [r7, #20]
 8011294:	fa22 f303 	lsr.w	r3, r2, r3
 8011298:	2b00      	cmp	r3, #0
 801129a:	f47f af1f 	bne.w	80110dc <HAL_GPIO_DeInit+0x14>
  }
}
 801129e:	bf00      	nop
 80112a0:	bf00      	nop
 80112a2:	371c      	adds	r7, #28
 80112a4:	46bd      	mov	sp, r7
 80112a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112aa:	4770      	bx	lr
 80112ac:	58000080 	.word	0x58000080
 80112b0:	58000400 	.word	0x58000400
 80112b4:	58020000 	.word	0x58020000
 80112b8:	58020400 	.word	0x58020400
 80112bc:	58020800 	.word	0x58020800
 80112c0:	58020c00 	.word	0x58020c00
 80112c4:	58021000 	.word	0x58021000
 80112c8:	58021400 	.word	0x58021400
 80112cc:	58021800 	.word	0x58021800
 80112d0:	58021c00 	.word	0x58021c00
 80112d4:	58022000 	.word	0x58022000
 80112d8:	58022400 	.word	0x58022400

080112dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80112dc:	b480      	push	{r7}
 80112de:	b085      	sub	sp, #20
 80112e0:	af00      	add	r7, sp, #0
 80112e2:	6078      	str	r0, [r7, #4]
 80112e4:	460b      	mov	r3, r1
 80112e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	691a      	ldr	r2, [r3, #16]
 80112ec:	887b      	ldrh	r3, [r7, #2]
 80112ee:	4013      	ands	r3, r2
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d002      	beq.n	80112fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80112f4:	2301      	movs	r3, #1
 80112f6:	73fb      	strb	r3, [r7, #15]
 80112f8:	e001      	b.n	80112fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80112fa:	2300      	movs	r3, #0
 80112fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80112fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8011300:	4618      	mov	r0, r3
 8011302:	3714      	adds	r7, #20
 8011304:	46bd      	mov	sp, r7
 8011306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801130a:	4770      	bx	lr

0801130c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801130c:	b480      	push	{r7}
 801130e:	b083      	sub	sp, #12
 8011310:	af00      	add	r7, sp, #0
 8011312:	6078      	str	r0, [r7, #4]
 8011314:	460b      	mov	r3, r1
 8011316:	807b      	strh	r3, [r7, #2]
 8011318:	4613      	mov	r3, r2
 801131a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801131c:	787b      	ldrb	r3, [r7, #1]
 801131e:	2b00      	cmp	r3, #0
 8011320:	d003      	beq.n	801132a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8011322:	887a      	ldrh	r2, [r7, #2]
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8011328:	e003      	b.n	8011332 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 801132a:	887b      	ldrh	r3, [r7, #2]
 801132c:	041a      	lsls	r2, r3, #16
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	619a      	str	r2, [r3, #24]
}
 8011332:	bf00      	nop
 8011334:	370c      	adds	r7, #12
 8011336:	46bd      	mov	sp, r7
 8011338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801133c:	4770      	bx	lr
	...

08011340 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8011340:	b480      	push	{r7}
 8011342:	b083      	sub	sp, #12
 8011344:	af00      	add	r7, sp, #0
 8011346:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8011348:	4a08      	ldr	r2, [pc, #32]	; (801136c <HAL_HSEM_FastTake+0x2c>)
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	3320      	adds	r3, #32
 801134e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011352:	4a07      	ldr	r2, [pc, #28]	; (8011370 <HAL_HSEM_FastTake+0x30>)
 8011354:	4293      	cmp	r3, r2
 8011356:	d101      	bne.n	801135c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8011358:	2300      	movs	r3, #0
 801135a:	e000      	b.n	801135e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 801135c:	2301      	movs	r3, #1
}
 801135e:	4618      	mov	r0, r3
 8011360:	370c      	adds	r7, #12
 8011362:	46bd      	mov	sp, r7
 8011364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011368:	4770      	bx	lr
 801136a:	bf00      	nop
 801136c:	58026400 	.word	0x58026400
 8011370:	80000300 	.word	0x80000300

08011374 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8011374:	b480      	push	{r7}
 8011376:	b083      	sub	sp, #12
 8011378:	af00      	add	r7, sp, #0
 801137a:	6078      	str	r0, [r7, #4]
 801137c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 801137e:	4906      	ldr	r1, [pc, #24]	; (8011398 <HAL_HSEM_Release+0x24>)
 8011380:	683b      	ldr	r3, [r7, #0]
 8011382:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 801138c:	bf00      	nop
 801138e:	370c      	adds	r7, #12
 8011390:	46bd      	mov	sp, r7
 8011392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011396:	4770      	bx	lr
 8011398:	58026400 	.word	0x58026400

0801139c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 801139c:	b580      	push	{r7, lr}
 801139e:	b082      	sub	sp, #8
 80113a0:	af00      	add	r7, sp, #0
 80113a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d101      	bne.n	80113ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80113aa:	2301      	movs	r3, #1
 80113ac:	e07f      	b.n	80114ae <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80113b4:	b2db      	uxtb	r3, r3
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d106      	bne.n	80113c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	2200      	movs	r2, #0
 80113be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80113c2:	6878      	ldr	r0, [r7, #4]
 80113c4:	f000 f8a9 	bl	801151a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	2224      	movs	r2, #36	; 0x24
 80113cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	681a      	ldr	r2, [r3, #0]
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	f022 0201 	bic.w	r2, r2, #1
 80113de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	685a      	ldr	r2, [r3, #4]
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80113ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	689a      	ldr	r2, [r3, #8]
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80113fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	68db      	ldr	r3, [r3, #12]
 8011402:	2b01      	cmp	r3, #1
 8011404:	d107      	bne.n	8011416 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	689a      	ldr	r2, [r3, #8]
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8011412:	609a      	str	r2, [r3, #8]
 8011414:	e006      	b.n	8011424 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	689a      	ldr	r2, [r3, #8]
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8011422:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	68db      	ldr	r3, [r3, #12]
 8011428:	2b02      	cmp	r3, #2
 801142a:	d104      	bne.n	8011436 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011434:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	6859      	ldr	r1, [r3, #4]
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	681a      	ldr	r2, [r3, #0]
 8011440:	4b1d      	ldr	r3, [pc, #116]	; (80114b8 <HAL_I2C_Init+0x11c>)
 8011442:	430b      	orrs	r3, r1
 8011444:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	68da      	ldr	r2, [r3, #12]
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8011454:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	691a      	ldr	r2, [r3, #16]
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	695b      	ldr	r3, [r3, #20]
 801145e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	699b      	ldr	r3, [r3, #24]
 8011466:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	430a      	orrs	r2, r1
 801146e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	69d9      	ldr	r1, [r3, #28]
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	6a1a      	ldr	r2, [r3, #32]
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	430a      	orrs	r2, r1
 801147e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	681a      	ldr	r2, [r3, #0]
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	f042 0201 	orr.w	r2, r2, #1
 801148e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	2200      	movs	r2, #0
 8011494:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	2220      	movs	r2, #32
 801149a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	2200      	movs	r2, #0
 80114a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	2200      	movs	r2, #0
 80114a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80114ac:	2300      	movs	r3, #0
}
 80114ae:	4618      	mov	r0, r3
 80114b0:	3708      	adds	r7, #8
 80114b2:	46bd      	mov	sp, r7
 80114b4:	bd80      	pop	{r7, pc}
 80114b6:	bf00      	nop
 80114b8:	02008000 	.word	0x02008000

080114bc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80114bc:	b580      	push	{r7, lr}
 80114be:	b082      	sub	sp, #8
 80114c0:	af00      	add	r7, sp, #0
 80114c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d101      	bne.n	80114ce <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80114ca:	2301      	movs	r3, #1
 80114cc:	e021      	b.n	8011512 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	2224      	movs	r2, #36	; 0x24
 80114d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	681a      	ldr	r2, [r3, #0]
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	f022 0201 	bic.w	r2, r2, #1
 80114e4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80114e6:	6878      	ldr	r0, [r7, #4]
 80114e8:	f000 f821 	bl	801152e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	2200      	movs	r2, #0
 80114f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	2200      	movs	r2, #0
 80114f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	2200      	movs	r2, #0
 80114fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	2200      	movs	r2, #0
 8011504:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	2200      	movs	r2, #0
 801150c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8011510:	2300      	movs	r3, #0
}
 8011512:	4618      	mov	r0, r3
 8011514:	3708      	adds	r7, #8
 8011516:	46bd      	mov	sp, r7
 8011518:	bd80      	pop	{r7, pc}

0801151a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 801151a:	b480      	push	{r7}
 801151c:	b083      	sub	sp, #12
 801151e:	af00      	add	r7, sp, #0
 8011520:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8011522:	bf00      	nop
 8011524:	370c      	adds	r7, #12
 8011526:	46bd      	mov	sp, r7
 8011528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801152c:	4770      	bx	lr

0801152e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 801152e:	b480      	push	{r7}
 8011530:	b083      	sub	sp, #12
 8011532:	af00      	add	r7, sp, #0
 8011534:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8011536:	bf00      	nop
 8011538:	370c      	adds	r7, #12
 801153a:	46bd      	mov	sp, r7
 801153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011540:	4770      	bx	lr
	...

08011544 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011544:	b580      	push	{r7, lr}
 8011546:	b088      	sub	sp, #32
 8011548:	af02      	add	r7, sp, #8
 801154a:	60f8      	str	r0, [r7, #12]
 801154c:	4608      	mov	r0, r1
 801154e:	4611      	mov	r1, r2
 8011550:	461a      	mov	r2, r3
 8011552:	4603      	mov	r3, r0
 8011554:	817b      	strh	r3, [r7, #10]
 8011556:	460b      	mov	r3, r1
 8011558:	813b      	strh	r3, [r7, #8]
 801155a:	4613      	mov	r3, r2
 801155c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011564:	b2db      	uxtb	r3, r3
 8011566:	2b20      	cmp	r3, #32
 8011568:	f040 80f9 	bne.w	801175e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 801156c:	6a3b      	ldr	r3, [r7, #32]
 801156e:	2b00      	cmp	r3, #0
 8011570:	d002      	beq.n	8011578 <HAL_I2C_Mem_Write+0x34>
 8011572:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011574:	2b00      	cmp	r3, #0
 8011576:	d105      	bne.n	8011584 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801157e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8011580:	2301      	movs	r3, #1
 8011582:	e0ed      	b.n	8011760 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801158a:	2b01      	cmp	r3, #1
 801158c:	d101      	bne.n	8011592 <HAL_I2C_Mem_Write+0x4e>
 801158e:	2302      	movs	r3, #2
 8011590:	e0e6      	b.n	8011760 <HAL_I2C_Mem_Write+0x21c>
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	2201      	movs	r2, #1
 8011596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801159a:	f7fe ffe1 	bl	8010560 <HAL_GetTick>
 801159e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80115a0:	697b      	ldr	r3, [r7, #20]
 80115a2:	9300      	str	r3, [sp, #0]
 80115a4:	2319      	movs	r3, #25
 80115a6:	2201      	movs	r2, #1
 80115a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80115ac:	68f8      	ldr	r0, [r7, #12]
 80115ae:	f000 fadd 	bl	8011b6c <I2C_WaitOnFlagUntilTimeout>
 80115b2:	4603      	mov	r3, r0
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d001      	beq.n	80115bc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80115b8:	2301      	movs	r3, #1
 80115ba:	e0d1      	b.n	8011760 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	2221      	movs	r2, #33	; 0x21
 80115c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	2240      	movs	r2, #64	; 0x40
 80115c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	2200      	movs	r2, #0
 80115d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	6a3a      	ldr	r2, [r7, #32]
 80115d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80115dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	2200      	movs	r2, #0
 80115e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80115e4:	88f8      	ldrh	r0, [r7, #6]
 80115e6:	893a      	ldrh	r2, [r7, #8]
 80115e8:	8979      	ldrh	r1, [r7, #10]
 80115ea:	697b      	ldr	r3, [r7, #20]
 80115ec:	9301      	str	r3, [sp, #4]
 80115ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115f0:	9300      	str	r3, [sp, #0]
 80115f2:	4603      	mov	r3, r0
 80115f4:	68f8      	ldr	r0, [r7, #12]
 80115f6:	f000 f9ed 	bl	80119d4 <I2C_RequestMemoryWrite>
 80115fa:	4603      	mov	r3, r0
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d005      	beq.n	801160c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	2200      	movs	r2, #0
 8011604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8011608:	2301      	movs	r3, #1
 801160a:	e0a9      	b.n	8011760 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011610:	b29b      	uxth	r3, r3
 8011612:	2bff      	cmp	r3, #255	; 0xff
 8011614:	d90e      	bls.n	8011634 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	22ff      	movs	r2, #255	; 0xff
 801161a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011620:	b2da      	uxtb	r2, r3
 8011622:	8979      	ldrh	r1, [r7, #10]
 8011624:	2300      	movs	r3, #0
 8011626:	9300      	str	r3, [sp, #0]
 8011628:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801162c:	68f8      	ldr	r0, [r7, #12]
 801162e:	f000 fc45 	bl	8011ebc <I2C_TransferConfig>
 8011632:	e00f      	b.n	8011654 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011638:	b29a      	uxth	r2, r3
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011642:	b2da      	uxtb	r2, r3
 8011644:	8979      	ldrh	r1, [r7, #10]
 8011646:	2300      	movs	r3, #0
 8011648:	9300      	str	r3, [sp, #0]
 801164a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801164e:	68f8      	ldr	r0, [r7, #12]
 8011650:	f000 fc34 	bl	8011ebc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8011654:	697a      	ldr	r2, [r7, #20]
 8011656:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011658:	68f8      	ldr	r0, [r7, #12]
 801165a:	f000 fac7 	bl	8011bec <I2C_WaitOnTXISFlagUntilTimeout>
 801165e:	4603      	mov	r3, r0
 8011660:	2b00      	cmp	r3, #0
 8011662:	d001      	beq.n	8011668 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8011664:	2301      	movs	r3, #1
 8011666:	e07b      	b.n	8011760 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801166c:	781a      	ldrb	r2, [r3, #0]
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011678:	1c5a      	adds	r2, r3, #1
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011682:	b29b      	uxth	r3, r3
 8011684:	3b01      	subs	r3, #1
 8011686:	b29a      	uxth	r2, r3
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011690:	3b01      	subs	r3, #1
 8011692:	b29a      	uxth	r2, r3
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801169c:	b29b      	uxth	r3, r3
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d034      	beq.n	801170c <HAL_I2C_Mem_Write+0x1c8>
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d130      	bne.n	801170c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80116aa:	697b      	ldr	r3, [r7, #20]
 80116ac:	9300      	str	r3, [sp, #0]
 80116ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116b0:	2200      	movs	r2, #0
 80116b2:	2180      	movs	r1, #128	; 0x80
 80116b4:	68f8      	ldr	r0, [r7, #12]
 80116b6:	f000 fa59 	bl	8011b6c <I2C_WaitOnFlagUntilTimeout>
 80116ba:	4603      	mov	r3, r0
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d001      	beq.n	80116c4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80116c0:	2301      	movs	r3, #1
 80116c2:	e04d      	b.n	8011760 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80116c8:	b29b      	uxth	r3, r3
 80116ca:	2bff      	cmp	r3, #255	; 0xff
 80116cc:	d90e      	bls.n	80116ec <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	22ff      	movs	r2, #255	; 0xff
 80116d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80116d8:	b2da      	uxtb	r2, r3
 80116da:	8979      	ldrh	r1, [r7, #10]
 80116dc:	2300      	movs	r3, #0
 80116de:	9300      	str	r3, [sp, #0]
 80116e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80116e4:	68f8      	ldr	r0, [r7, #12]
 80116e6:	f000 fbe9 	bl	8011ebc <I2C_TransferConfig>
 80116ea:	e00f      	b.n	801170c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80116f0:	b29a      	uxth	r2, r3
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80116f6:	68fb      	ldr	r3, [r7, #12]
 80116f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80116fa:	b2da      	uxtb	r2, r3
 80116fc:	8979      	ldrh	r1, [r7, #10]
 80116fe:	2300      	movs	r3, #0
 8011700:	9300      	str	r3, [sp, #0]
 8011702:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011706:	68f8      	ldr	r0, [r7, #12]
 8011708:	f000 fbd8 	bl	8011ebc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011710:	b29b      	uxth	r3, r3
 8011712:	2b00      	cmp	r3, #0
 8011714:	d19e      	bne.n	8011654 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8011716:	697a      	ldr	r2, [r7, #20]
 8011718:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801171a:	68f8      	ldr	r0, [r7, #12]
 801171c:	f000 faa6 	bl	8011c6c <I2C_WaitOnSTOPFlagUntilTimeout>
 8011720:	4603      	mov	r3, r0
 8011722:	2b00      	cmp	r3, #0
 8011724:	d001      	beq.n	801172a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8011726:	2301      	movs	r3, #1
 8011728:	e01a      	b.n	8011760 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	2220      	movs	r2, #32
 8011730:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	6859      	ldr	r1, [r3, #4]
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	681a      	ldr	r2, [r3, #0]
 801173c:	4b0a      	ldr	r3, [pc, #40]	; (8011768 <HAL_I2C_Mem_Write+0x224>)
 801173e:	400b      	ands	r3, r1
 8011740:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	2220      	movs	r2, #32
 8011746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	2200      	movs	r2, #0
 801174e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	2200      	movs	r2, #0
 8011756:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801175a:	2300      	movs	r3, #0
 801175c:	e000      	b.n	8011760 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 801175e:	2302      	movs	r3, #2
  }
}
 8011760:	4618      	mov	r0, r3
 8011762:	3718      	adds	r7, #24
 8011764:	46bd      	mov	sp, r7
 8011766:	bd80      	pop	{r7, pc}
 8011768:	fe00e800 	.word	0xfe00e800

0801176c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801176c:	b580      	push	{r7, lr}
 801176e:	b088      	sub	sp, #32
 8011770:	af02      	add	r7, sp, #8
 8011772:	60f8      	str	r0, [r7, #12]
 8011774:	4608      	mov	r0, r1
 8011776:	4611      	mov	r1, r2
 8011778:	461a      	mov	r2, r3
 801177a:	4603      	mov	r3, r0
 801177c:	817b      	strh	r3, [r7, #10]
 801177e:	460b      	mov	r3, r1
 8011780:	813b      	strh	r3, [r7, #8]
 8011782:	4613      	mov	r3, r2
 8011784:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801178c:	b2db      	uxtb	r3, r3
 801178e:	2b20      	cmp	r3, #32
 8011790:	f040 80fd 	bne.w	801198e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8011794:	6a3b      	ldr	r3, [r7, #32]
 8011796:	2b00      	cmp	r3, #0
 8011798:	d002      	beq.n	80117a0 <HAL_I2C_Mem_Read+0x34>
 801179a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801179c:	2b00      	cmp	r3, #0
 801179e:	d105      	bne.n	80117ac <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80117a6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80117a8:	2301      	movs	r3, #1
 80117aa:	e0f1      	b.n	8011990 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80117b2:	2b01      	cmp	r3, #1
 80117b4:	d101      	bne.n	80117ba <HAL_I2C_Mem_Read+0x4e>
 80117b6:	2302      	movs	r3, #2
 80117b8:	e0ea      	b.n	8011990 <HAL_I2C_Mem_Read+0x224>
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	2201      	movs	r2, #1
 80117be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80117c2:	f7fe fecd 	bl	8010560 <HAL_GetTick>
 80117c6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80117c8:	697b      	ldr	r3, [r7, #20]
 80117ca:	9300      	str	r3, [sp, #0]
 80117cc:	2319      	movs	r3, #25
 80117ce:	2201      	movs	r2, #1
 80117d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80117d4:	68f8      	ldr	r0, [r7, #12]
 80117d6:	f000 f9c9 	bl	8011b6c <I2C_WaitOnFlagUntilTimeout>
 80117da:	4603      	mov	r3, r0
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d001      	beq.n	80117e4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80117e0:	2301      	movs	r3, #1
 80117e2:	e0d5      	b.n	8011990 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	2222      	movs	r2, #34	; 0x22
 80117e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	2240      	movs	r2, #64	; 0x40
 80117f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	2200      	movs	r2, #0
 80117f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	6a3a      	ldr	r2, [r7, #32]
 80117fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011804:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	2200      	movs	r2, #0
 801180a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 801180c:	88f8      	ldrh	r0, [r7, #6]
 801180e:	893a      	ldrh	r2, [r7, #8]
 8011810:	8979      	ldrh	r1, [r7, #10]
 8011812:	697b      	ldr	r3, [r7, #20]
 8011814:	9301      	str	r3, [sp, #4]
 8011816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011818:	9300      	str	r3, [sp, #0]
 801181a:	4603      	mov	r3, r0
 801181c:	68f8      	ldr	r0, [r7, #12]
 801181e:	f000 f92d 	bl	8011a7c <I2C_RequestMemoryRead>
 8011822:	4603      	mov	r3, r0
 8011824:	2b00      	cmp	r3, #0
 8011826:	d005      	beq.n	8011834 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	2200      	movs	r2, #0
 801182c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8011830:	2301      	movs	r3, #1
 8011832:	e0ad      	b.n	8011990 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011838:	b29b      	uxth	r3, r3
 801183a:	2bff      	cmp	r3, #255	; 0xff
 801183c:	d90e      	bls.n	801185c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	22ff      	movs	r2, #255	; 0xff
 8011842:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011848:	b2da      	uxtb	r2, r3
 801184a:	8979      	ldrh	r1, [r7, #10]
 801184c:	4b52      	ldr	r3, [pc, #328]	; (8011998 <HAL_I2C_Mem_Read+0x22c>)
 801184e:	9300      	str	r3, [sp, #0]
 8011850:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8011854:	68f8      	ldr	r0, [r7, #12]
 8011856:	f000 fb31 	bl	8011ebc <I2C_TransferConfig>
 801185a:	e00f      	b.n	801187c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011860:	b29a      	uxth	r2, r3
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801186a:	b2da      	uxtb	r2, r3
 801186c:	8979      	ldrh	r1, [r7, #10]
 801186e:	4b4a      	ldr	r3, [pc, #296]	; (8011998 <HAL_I2C_Mem_Read+0x22c>)
 8011870:	9300      	str	r3, [sp, #0]
 8011872:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011876:	68f8      	ldr	r0, [r7, #12]
 8011878:	f000 fb20 	bl	8011ebc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 801187c:	697b      	ldr	r3, [r7, #20]
 801187e:	9300      	str	r3, [sp, #0]
 8011880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011882:	2200      	movs	r2, #0
 8011884:	2104      	movs	r1, #4
 8011886:	68f8      	ldr	r0, [r7, #12]
 8011888:	f000 f970 	bl	8011b6c <I2C_WaitOnFlagUntilTimeout>
 801188c:	4603      	mov	r3, r0
 801188e:	2b00      	cmp	r3, #0
 8011890:	d001      	beq.n	8011896 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8011892:	2301      	movs	r3, #1
 8011894:	e07c      	b.n	8011990 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801189c:	68fb      	ldr	r3, [r7, #12]
 801189e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118a0:	b2d2      	uxtb	r2, r2
 80118a2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118a8:	1c5a      	adds	r2, r3, #1
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80118b2:	3b01      	subs	r3, #1
 80118b4:	b29a      	uxth	r2, r3
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80118be:	b29b      	uxth	r3, r3
 80118c0:	3b01      	subs	r3, #1
 80118c2:	b29a      	uxth	r2, r3
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80118cc:	b29b      	uxth	r3, r3
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d034      	beq.n	801193c <HAL_I2C_Mem_Read+0x1d0>
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d130      	bne.n	801193c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80118da:	697b      	ldr	r3, [r7, #20]
 80118dc:	9300      	str	r3, [sp, #0]
 80118de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118e0:	2200      	movs	r2, #0
 80118e2:	2180      	movs	r1, #128	; 0x80
 80118e4:	68f8      	ldr	r0, [r7, #12]
 80118e6:	f000 f941 	bl	8011b6c <I2C_WaitOnFlagUntilTimeout>
 80118ea:	4603      	mov	r3, r0
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d001      	beq.n	80118f4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80118f0:	2301      	movs	r3, #1
 80118f2:	e04d      	b.n	8011990 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80118f8:	b29b      	uxth	r3, r3
 80118fa:	2bff      	cmp	r3, #255	; 0xff
 80118fc:	d90e      	bls.n	801191c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80118fe:	68fb      	ldr	r3, [r7, #12]
 8011900:	22ff      	movs	r2, #255	; 0xff
 8011902:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011908:	b2da      	uxtb	r2, r3
 801190a:	8979      	ldrh	r1, [r7, #10]
 801190c:	2300      	movs	r3, #0
 801190e:	9300      	str	r3, [sp, #0]
 8011910:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8011914:	68f8      	ldr	r0, [r7, #12]
 8011916:	f000 fad1 	bl	8011ebc <I2C_TransferConfig>
 801191a:	e00f      	b.n	801193c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011920:	b29a      	uxth	r2, r3
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801192a:	b2da      	uxtb	r2, r3
 801192c:	8979      	ldrh	r1, [r7, #10]
 801192e:	2300      	movs	r3, #0
 8011930:	9300      	str	r3, [sp, #0]
 8011932:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011936:	68f8      	ldr	r0, [r7, #12]
 8011938:	f000 fac0 	bl	8011ebc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011940:	b29b      	uxth	r3, r3
 8011942:	2b00      	cmp	r3, #0
 8011944:	d19a      	bne.n	801187c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8011946:	697a      	ldr	r2, [r7, #20]
 8011948:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801194a:	68f8      	ldr	r0, [r7, #12]
 801194c:	f000 f98e 	bl	8011c6c <I2C_WaitOnSTOPFlagUntilTimeout>
 8011950:	4603      	mov	r3, r0
 8011952:	2b00      	cmp	r3, #0
 8011954:	d001      	beq.n	801195a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8011956:	2301      	movs	r3, #1
 8011958:	e01a      	b.n	8011990 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	2220      	movs	r2, #32
 8011960:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	6859      	ldr	r1, [r3, #4]
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	681a      	ldr	r2, [r3, #0]
 801196c:	4b0b      	ldr	r3, [pc, #44]	; (801199c <HAL_I2C_Mem_Read+0x230>)
 801196e:	400b      	ands	r3, r1
 8011970:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	2220      	movs	r2, #32
 8011976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	2200      	movs	r2, #0
 801197e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	2200      	movs	r2, #0
 8011986:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801198a:	2300      	movs	r3, #0
 801198c:	e000      	b.n	8011990 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 801198e:	2302      	movs	r3, #2
  }
}
 8011990:	4618      	mov	r0, r3
 8011992:	3718      	adds	r7, #24
 8011994:	46bd      	mov	sp, r7
 8011996:	bd80      	pop	{r7, pc}
 8011998:	80002400 	.word	0x80002400
 801199c:	fe00e800 	.word	0xfe00e800

080119a0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80119a0:	b480      	push	{r7}
 80119a2:	b083      	sub	sp, #12
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80119ae:	b2db      	uxtb	r3, r3
}
 80119b0:	4618      	mov	r0, r3
 80119b2:	370c      	adds	r7, #12
 80119b4:	46bd      	mov	sp, r7
 80119b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ba:	4770      	bx	lr

080119bc <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80119bc:	b480      	push	{r7}
 80119be:	b083      	sub	sp, #12
 80119c0:	af00      	add	r7, sp, #0
 80119c2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80119c8:	4618      	mov	r0, r3
 80119ca:	370c      	adds	r7, #12
 80119cc:	46bd      	mov	sp, r7
 80119ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119d2:	4770      	bx	lr

080119d4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80119d4:	b580      	push	{r7, lr}
 80119d6:	b086      	sub	sp, #24
 80119d8:	af02      	add	r7, sp, #8
 80119da:	60f8      	str	r0, [r7, #12]
 80119dc:	4608      	mov	r0, r1
 80119de:	4611      	mov	r1, r2
 80119e0:	461a      	mov	r2, r3
 80119e2:	4603      	mov	r3, r0
 80119e4:	817b      	strh	r3, [r7, #10]
 80119e6:	460b      	mov	r3, r1
 80119e8:	813b      	strh	r3, [r7, #8]
 80119ea:	4613      	mov	r3, r2
 80119ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80119ee:	88fb      	ldrh	r3, [r7, #6]
 80119f0:	b2da      	uxtb	r2, r3
 80119f2:	8979      	ldrh	r1, [r7, #10]
 80119f4:	4b20      	ldr	r3, [pc, #128]	; (8011a78 <I2C_RequestMemoryWrite+0xa4>)
 80119f6:	9300      	str	r3, [sp, #0]
 80119f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80119fc:	68f8      	ldr	r0, [r7, #12]
 80119fe:	f000 fa5d 	bl	8011ebc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8011a02:	69fa      	ldr	r2, [r7, #28]
 8011a04:	69b9      	ldr	r1, [r7, #24]
 8011a06:	68f8      	ldr	r0, [r7, #12]
 8011a08:	f000 f8f0 	bl	8011bec <I2C_WaitOnTXISFlagUntilTimeout>
 8011a0c:	4603      	mov	r3, r0
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d001      	beq.n	8011a16 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8011a12:	2301      	movs	r3, #1
 8011a14:	e02c      	b.n	8011a70 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8011a16:	88fb      	ldrh	r3, [r7, #6]
 8011a18:	2b01      	cmp	r3, #1
 8011a1a:	d105      	bne.n	8011a28 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8011a1c:	893b      	ldrh	r3, [r7, #8]
 8011a1e:	b2da      	uxtb	r2, r3
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	629a      	str	r2, [r3, #40]	; 0x28
 8011a26:	e015      	b.n	8011a54 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8011a28:	893b      	ldrh	r3, [r7, #8]
 8011a2a:	0a1b      	lsrs	r3, r3, #8
 8011a2c:	b29b      	uxth	r3, r3
 8011a2e:	b2da      	uxtb	r2, r3
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8011a36:	69fa      	ldr	r2, [r7, #28]
 8011a38:	69b9      	ldr	r1, [r7, #24]
 8011a3a:	68f8      	ldr	r0, [r7, #12]
 8011a3c:	f000 f8d6 	bl	8011bec <I2C_WaitOnTXISFlagUntilTimeout>
 8011a40:	4603      	mov	r3, r0
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d001      	beq.n	8011a4a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8011a46:	2301      	movs	r3, #1
 8011a48:	e012      	b.n	8011a70 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8011a4a:	893b      	ldrh	r3, [r7, #8]
 8011a4c:	b2da      	uxtb	r2, r3
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8011a54:	69fb      	ldr	r3, [r7, #28]
 8011a56:	9300      	str	r3, [sp, #0]
 8011a58:	69bb      	ldr	r3, [r7, #24]
 8011a5a:	2200      	movs	r2, #0
 8011a5c:	2180      	movs	r1, #128	; 0x80
 8011a5e:	68f8      	ldr	r0, [r7, #12]
 8011a60:	f000 f884 	bl	8011b6c <I2C_WaitOnFlagUntilTimeout>
 8011a64:	4603      	mov	r3, r0
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d001      	beq.n	8011a6e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8011a6a:	2301      	movs	r3, #1
 8011a6c:	e000      	b.n	8011a70 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8011a6e:	2300      	movs	r3, #0
}
 8011a70:	4618      	mov	r0, r3
 8011a72:	3710      	adds	r7, #16
 8011a74:	46bd      	mov	sp, r7
 8011a76:	bd80      	pop	{r7, pc}
 8011a78:	80002000 	.word	0x80002000

08011a7c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8011a7c:	b580      	push	{r7, lr}
 8011a7e:	b086      	sub	sp, #24
 8011a80:	af02      	add	r7, sp, #8
 8011a82:	60f8      	str	r0, [r7, #12]
 8011a84:	4608      	mov	r0, r1
 8011a86:	4611      	mov	r1, r2
 8011a88:	461a      	mov	r2, r3
 8011a8a:	4603      	mov	r3, r0
 8011a8c:	817b      	strh	r3, [r7, #10]
 8011a8e:	460b      	mov	r3, r1
 8011a90:	813b      	strh	r3, [r7, #8]
 8011a92:	4613      	mov	r3, r2
 8011a94:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8011a96:	88fb      	ldrh	r3, [r7, #6]
 8011a98:	b2da      	uxtb	r2, r3
 8011a9a:	8979      	ldrh	r1, [r7, #10]
 8011a9c:	4b20      	ldr	r3, [pc, #128]	; (8011b20 <I2C_RequestMemoryRead+0xa4>)
 8011a9e:	9300      	str	r3, [sp, #0]
 8011aa0:	2300      	movs	r3, #0
 8011aa2:	68f8      	ldr	r0, [r7, #12]
 8011aa4:	f000 fa0a 	bl	8011ebc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8011aa8:	69fa      	ldr	r2, [r7, #28]
 8011aaa:	69b9      	ldr	r1, [r7, #24]
 8011aac:	68f8      	ldr	r0, [r7, #12]
 8011aae:	f000 f89d 	bl	8011bec <I2C_WaitOnTXISFlagUntilTimeout>
 8011ab2:	4603      	mov	r3, r0
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d001      	beq.n	8011abc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8011ab8:	2301      	movs	r3, #1
 8011aba:	e02c      	b.n	8011b16 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8011abc:	88fb      	ldrh	r3, [r7, #6]
 8011abe:	2b01      	cmp	r3, #1
 8011ac0:	d105      	bne.n	8011ace <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8011ac2:	893b      	ldrh	r3, [r7, #8]
 8011ac4:	b2da      	uxtb	r2, r3
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	629a      	str	r2, [r3, #40]	; 0x28
 8011acc:	e015      	b.n	8011afa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8011ace:	893b      	ldrh	r3, [r7, #8]
 8011ad0:	0a1b      	lsrs	r3, r3, #8
 8011ad2:	b29b      	uxth	r3, r3
 8011ad4:	b2da      	uxtb	r2, r3
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8011adc:	69fa      	ldr	r2, [r7, #28]
 8011ade:	69b9      	ldr	r1, [r7, #24]
 8011ae0:	68f8      	ldr	r0, [r7, #12]
 8011ae2:	f000 f883 	bl	8011bec <I2C_WaitOnTXISFlagUntilTimeout>
 8011ae6:	4603      	mov	r3, r0
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d001      	beq.n	8011af0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8011aec:	2301      	movs	r3, #1
 8011aee:	e012      	b.n	8011b16 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8011af0:	893b      	ldrh	r3, [r7, #8]
 8011af2:	b2da      	uxtb	r2, r3
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8011afa:	69fb      	ldr	r3, [r7, #28]
 8011afc:	9300      	str	r3, [sp, #0]
 8011afe:	69bb      	ldr	r3, [r7, #24]
 8011b00:	2200      	movs	r2, #0
 8011b02:	2140      	movs	r1, #64	; 0x40
 8011b04:	68f8      	ldr	r0, [r7, #12]
 8011b06:	f000 f831 	bl	8011b6c <I2C_WaitOnFlagUntilTimeout>
 8011b0a:	4603      	mov	r3, r0
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d001      	beq.n	8011b14 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8011b10:	2301      	movs	r3, #1
 8011b12:	e000      	b.n	8011b16 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8011b14:	2300      	movs	r3, #0
}
 8011b16:	4618      	mov	r0, r3
 8011b18:	3710      	adds	r7, #16
 8011b1a:	46bd      	mov	sp, r7
 8011b1c:	bd80      	pop	{r7, pc}
 8011b1e:	bf00      	nop
 8011b20:	80002000 	.word	0x80002000

08011b24 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8011b24:	b480      	push	{r7}
 8011b26:	b083      	sub	sp, #12
 8011b28:	af00      	add	r7, sp, #0
 8011b2a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	699b      	ldr	r3, [r3, #24]
 8011b32:	f003 0302 	and.w	r3, r3, #2
 8011b36:	2b02      	cmp	r3, #2
 8011b38:	d103      	bne.n	8011b42 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	2200      	movs	r2, #0
 8011b40:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	681b      	ldr	r3, [r3, #0]
 8011b46:	699b      	ldr	r3, [r3, #24]
 8011b48:	f003 0301 	and.w	r3, r3, #1
 8011b4c:	2b01      	cmp	r3, #1
 8011b4e:	d007      	beq.n	8011b60 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	699a      	ldr	r2, [r3, #24]
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	f042 0201 	orr.w	r2, r2, #1
 8011b5e:	619a      	str	r2, [r3, #24]
  }
}
 8011b60:	bf00      	nop
 8011b62:	370c      	adds	r7, #12
 8011b64:	46bd      	mov	sp, r7
 8011b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b6a:	4770      	bx	lr

08011b6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8011b6c:	b580      	push	{r7, lr}
 8011b6e:	b084      	sub	sp, #16
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	60f8      	str	r0, [r7, #12]
 8011b74:	60b9      	str	r1, [r7, #8]
 8011b76:	603b      	str	r3, [r7, #0]
 8011b78:	4613      	mov	r3, r2
 8011b7a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8011b7c:	e022      	b.n	8011bc4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011b7e:	683b      	ldr	r3, [r7, #0]
 8011b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b84:	d01e      	beq.n	8011bc4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011b86:	f7fe fceb 	bl	8010560 <HAL_GetTick>
 8011b8a:	4602      	mov	r2, r0
 8011b8c:	69bb      	ldr	r3, [r7, #24]
 8011b8e:	1ad3      	subs	r3, r2, r3
 8011b90:	683a      	ldr	r2, [r7, #0]
 8011b92:	429a      	cmp	r2, r3
 8011b94:	d302      	bcc.n	8011b9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8011b96:	683b      	ldr	r3, [r7, #0]
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d113      	bne.n	8011bc4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011b9c:	68fb      	ldr	r3, [r7, #12]
 8011b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011ba0:	f043 0220 	orr.w	r2, r3, #32
 8011ba4:	68fb      	ldr	r3, [r7, #12]
 8011ba6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	2220      	movs	r2, #32
 8011bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8011bb0:	68fb      	ldr	r3, [r7, #12]
 8011bb2:	2200      	movs	r2, #0
 8011bb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	2200      	movs	r2, #0
 8011bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8011bc0:	2301      	movs	r3, #1
 8011bc2:	e00f      	b.n	8011be4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	699a      	ldr	r2, [r3, #24]
 8011bca:	68bb      	ldr	r3, [r7, #8]
 8011bcc:	4013      	ands	r3, r2
 8011bce:	68ba      	ldr	r2, [r7, #8]
 8011bd0:	429a      	cmp	r2, r3
 8011bd2:	bf0c      	ite	eq
 8011bd4:	2301      	moveq	r3, #1
 8011bd6:	2300      	movne	r3, #0
 8011bd8:	b2db      	uxtb	r3, r3
 8011bda:	461a      	mov	r2, r3
 8011bdc:	79fb      	ldrb	r3, [r7, #7]
 8011bde:	429a      	cmp	r2, r3
 8011be0:	d0cd      	beq.n	8011b7e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8011be2:	2300      	movs	r3, #0
}
 8011be4:	4618      	mov	r0, r3
 8011be6:	3710      	adds	r7, #16
 8011be8:	46bd      	mov	sp, r7
 8011bea:	bd80      	pop	{r7, pc}

08011bec <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8011bec:	b580      	push	{r7, lr}
 8011bee:	b084      	sub	sp, #16
 8011bf0:	af00      	add	r7, sp, #0
 8011bf2:	60f8      	str	r0, [r7, #12]
 8011bf4:	60b9      	str	r1, [r7, #8]
 8011bf6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8011bf8:	e02c      	b.n	8011c54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8011bfa:	687a      	ldr	r2, [r7, #4]
 8011bfc:	68b9      	ldr	r1, [r7, #8]
 8011bfe:	68f8      	ldr	r0, [r7, #12]
 8011c00:	f000 f870 	bl	8011ce4 <I2C_IsErrorOccurred>
 8011c04:	4603      	mov	r3, r0
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d001      	beq.n	8011c0e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8011c0a:	2301      	movs	r3, #1
 8011c0c:	e02a      	b.n	8011c64 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011c0e:	68bb      	ldr	r3, [r7, #8]
 8011c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c14:	d01e      	beq.n	8011c54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011c16:	f7fe fca3 	bl	8010560 <HAL_GetTick>
 8011c1a:	4602      	mov	r2, r0
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	1ad3      	subs	r3, r2, r3
 8011c20:	68ba      	ldr	r2, [r7, #8]
 8011c22:	429a      	cmp	r2, r3
 8011c24:	d302      	bcc.n	8011c2c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8011c26:	68bb      	ldr	r3, [r7, #8]
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d113      	bne.n	8011c54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011c2c:	68fb      	ldr	r3, [r7, #12]
 8011c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c30:	f043 0220 	orr.w	r2, r3, #32
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	2220      	movs	r2, #32
 8011c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	2200      	movs	r2, #0
 8011c44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	2200      	movs	r2, #0
 8011c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8011c50:	2301      	movs	r3, #1
 8011c52:	e007      	b.n	8011c64 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	699b      	ldr	r3, [r3, #24]
 8011c5a:	f003 0302 	and.w	r3, r3, #2
 8011c5e:	2b02      	cmp	r3, #2
 8011c60:	d1cb      	bne.n	8011bfa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8011c62:	2300      	movs	r3, #0
}
 8011c64:	4618      	mov	r0, r3
 8011c66:	3710      	adds	r7, #16
 8011c68:	46bd      	mov	sp, r7
 8011c6a:	bd80      	pop	{r7, pc}

08011c6c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8011c6c:	b580      	push	{r7, lr}
 8011c6e:	b084      	sub	sp, #16
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	60f8      	str	r0, [r7, #12]
 8011c74:	60b9      	str	r1, [r7, #8]
 8011c76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011c78:	e028      	b.n	8011ccc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8011c7a:	687a      	ldr	r2, [r7, #4]
 8011c7c:	68b9      	ldr	r1, [r7, #8]
 8011c7e:	68f8      	ldr	r0, [r7, #12]
 8011c80:	f000 f830 	bl	8011ce4 <I2C_IsErrorOccurred>
 8011c84:	4603      	mov	r3, r0
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d001      	beq.n	8011c8e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8011c8a:	2301      	movs	r3, #1
 8011c8c:	e026      	b.n	8011cdc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011c8e:	f7fe fc67 	bl	8010560 <HAL_GetTick>
 8011c92:	4602      	mov	r2, r0
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	1ad3      	subs	r3, r2, r3
 8011c98:	68ba      	ldr	r2, [r7, #8]
 8011c9a:	429a      	cmp	r2, r3
 8011c9c:	d302      	bcc.n	8011ca4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8011c9e:	68bb      	ldr	r3, [r7, #8]
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d113      	bne.n	8011ccc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011ca8:	f043 0220 	orr.w	r2, r3, #32
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	2220      	movs	r2, #32
 8011cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	2200      	movs	r2, #0
 8011cbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011cc0:	68fb      	ldr	r3, [r7, #12]
 8011cc2:	2200      	movs	r2, #0
 8011cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8011cc8:	2301      	movs	r3, #1
 8011cca:	e007      	b.n	8011cdc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	699b      	ldr	r3, [r3, #24]
 8011cd2:	f003 0320 	and.w	r3, r3, #32
 8011cd6:	2b20      	cmp	r3, #32
 8011cd8:	d1cf      	bne.n	8011c7a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8011cda:	2300      	movs	r3, #0
}
 8011cdc:	4618      	mov	r0, r3
 8011cde:	3710      	adds	r7, #16
 8011ce0:	46bd      	mov	sp, r7
 8011ce2:	bd80      	pop	{r7, pc}

08011ce4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8011ce4:	b580      	push	{r7, lr}
 8011ce6:	b08a      	sub	sp, #40	; 0x28
 8011ce8:	af00      	add	r7, sp, #0
 8011cea:	60f8      	str	r0, [r7, #12]
 8011cec:	60b9      	str	r1, [r7, #8]
 8011cee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011cf0:	2300      	movs	r3, #0
 8011cf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	699b      	ldr	r3, [r3, #24]
 8011cfc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8011cfe:	2300      	movs	r3, #0
 8011d00:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8011d06:	69bb      	ldr	r3, [r7, #24]
 8011d08:	f003 0310 	and.w	r3, r3, #16
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d075      	beq.n	8011dfc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	2210      	movs	r2, #16
 8011d16:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8011d18:	e056      	b.n	8011dc8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8011d1a:	68bb      	ldr	r3, [r7, #8]
 8011d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d20:	d052      	beq.n	8011dc8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8011d22:	f7fe fc1d 	bl	8010560 <HAL_GetTick>
 8011d26:	4602      	mov	r2, r0
 8011d28:	69fb      	ldr	r3, [r7, #28]
 8011d2a:	1ad3      	subs	r3, r2, r3
 8011d2c:	68ba      	ldr	r2, [r7, #8]
 8011d2e:	429a      	cmp	r2, r3
 8011d30:	d302      	bcc.n	8011d38 <I2C_IsErrorOccurred+0x54>
 8011d32:	68bb      	ldr	r3, [r7, #8]
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d147      	bne.n	8011dc8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	685b      	ldr	r3, [r3, #4]
 8011d3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011d42:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011d4a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	699b      	ldr	r3, [r3, #24]
 8011d52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011d56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011d5a:	d12e      	bne.n	8011dba <I2C_IsErrorOccurred+0xd6>
 8011d5c:	697b      	ldr	r3, [r7, #20]
 8011d5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011d62:	d02a      	beq.n	8011dba <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8011d64:	7cfb      	ldrb	r3, [r7, #19]
 8011d66:	2b20      	cmp	r3, #32
 8011d68:	d027      	beq.n	8011dba <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8011d6a:	68fb      	ldr	r3, [r7, #12]
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	685a      	ldr	r2, [r3, #4]
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8011d78:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8011d7a:	f7fe fbf1 	bl	8010560 <HAL_GetTick>
 8011d7e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011d80:	e01b      	b.n	8011dba <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8011d82:	f7fe fbed 	bl	8010560 <HAL_GetTick>
 8011d86:	4602      	mov	r2, r0
 8011d88:	69fb      	ldr	r3, [r7, #28]
 8011d8a:	1ad3      	subs	r3, r2, r3
 8011d8c:	2b19      	cmp	r3, #25
 8011d8e:	d914      	bls.n	8011dba <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011d94:	f043 0220 	orr.w	r2, r3, #32
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	2220      	movs	r2, #32
 8011da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	2200      	movs	r2, #0
 8011da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	2200      	movs	r2, #0
 8011db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8011db4:	2301      	movs	r3, #1
 8011db6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	699b      	ldr	r3, [r3, #24]
 8011dc0:	f003 0320 	and.w	r3, r3, #32
 8011dc4:	2b20      	cmp	r3, #32
 8011dc6:	d1dc      	bne.n	8011d82 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	699b      	ldr	r3, [r3, #24]
 8011dce:	f003 0320 	and.w	r3, r3, #32
 8011dd2:	2b20      	cmp	r3, #32
 8011dd4:	d003      	beq.n	8011dde <I2C_IsErrorOccurred+0xfa>
 8011dd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d09d      	beq.n	8011d1a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8011dde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d103      	bne.n	8011dee <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011de6:	68fb      	ldr	r3, [r7, #12]
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	2220      	movs	r2, #32
 8011dec:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8011dee:	6a3b      	ldr	r3, [r7, #32]
 8011df0:	f043 0304 	orr.w	r3, r3, #4
 8011df4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8011df6:	2301      	movs	r3, #1
 8011df8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	699b      	ldr	r3, [r3, #24]
 8011e02:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8011e04:	69bb      	ldr	r3, [r7, #24]
 8011e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d00b      	beq.n	8011e26 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8011e0e:	6a3b      	ldr	r3, [r7, #32]
 8011e10:	f043 0301 	orr.w	r3, r3, #1
 8011e14:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011e1e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8011e20:	2301      	movs	r3, #1
 8011e22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8011e26:	69bb      	ldr	r3, [r7, #24]
 8011e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d00b      	beq.n	8011e48 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8011e30:	6a3b      	ldr	r3, [r7, #32]
 8011e32:	f043 0308 	orr.w	r3, r3, #8
 8011e36:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011e40:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8011e42:	2301      	movs	r3, #1
 8011e44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8011e48:	69bb      	ldr	r3, [r7, #24]
 8011e4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d00b      	beq.n	8011e6a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8011e52:	6a3b      	ldr	r3, [r7, #32]
 8011e54:	f043 0302 	orr.w	r3, r3, #2
 8011e58:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011e62:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8011e64:	2301      	movs	r3, #1
 8011e66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8011e6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d01c      	beq.n	8011eac <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8011e72:	68f8      	ldr	r0, [r7, #12]
 8011e74:	f7ff fe56 	bl	8011b24 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8011e78:	68fb      	ldr	r3, [r7, #12]
 8011e7a:	681b      	ldr	r3, [r3, #0]
 8011e7c:	6859      	ldr	r1, [r3, #4]
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	681a      	ldr	r2, [r3, #0]
 8011e82:	4b0d      	ldr	r3, [pc, #52]	; (8011eb8 <I2C_IsErrorOccurred+0x1d4>)
 8011e84:	400b      	ands	r3, r1
 8011e86:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8011e88:	68fb      	ldr	r3, [r7, #12]
 8011e8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011e8c:	6a3b      	ldr	r3, [r7, #32]
 8011e8e:	431a      	orrs	r2, r3
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8011e94:	68fb      	ldr	r3, [r7, #12]
 8011e96:	2220      	movs	r2, #32
 8011e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	2200      	movs	r2, #0
 8011ea0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	2200      	movs	r2, #0
 8011ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8011eac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8011eb0:	4618      	mov	r0, r3
 8011eb2:	3728      	adds	r7, #40	; 0x28
 8011eb4:	46bd      	mov	sp, r7
 8011eb6:	bd80      	pop	{r7, pc}
 8011eb8:	fe00e800 	.word	0xfe00e800

08011ebc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8011ebc:	b480      	push	{r7}
 8011ebe:	b087      	sub	sp, #28
 8011ec0:	af00      	add	r7, sp, #0
 8011ec2:	60f8      	str	r0, [r7, #12]
 8011ec4:	607b      	str	r3, [r7, #4]
 8011ec6:	460b      	mov	r3, r1
 8011ec8:	817b      	strh	r3, [r7, #10]
 8011eca:	4613      	mov	r3, r2
 8011ecc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8011ece:	897b      	ldrh	r3, [r7, #10]
 8011ed0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8011ed4:	7a7b      	ldrb	r3, [r7, #9]
 8011ed6:	041b      	lsls	r3, r3, #16
 8011ed8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8011edc:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8011ee2:	6a3b      	ldr	r3, [r7, #32]
 8011ee4:	4313      	orrs	r3, r2
 8011ee6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011eea:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	685a      	ldr	r2, [r3, #4]
 8011ef2:	6a3b      	ldr	r3, [r7, #32]
 8011ef4:	0d5b      	lsrs	r3, r3, #21
 8011ef6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8011efa:	4b08      	ldr	r3, [pc, #32]	; (8011f1c <I2C_TransferConfig+0x60>)
 8011efc:	430b      	orrs	r3, r1
 8011efe:	43db      	mvns	r3, r3
 8011f00:	ea02 0103 	and.w	r1, r2, r3
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	697a      	ldr	r2, [r7, #20]
 8011f0a:	430a      	orrs	r2, r1
 8011f0c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8011f0e:	bf00      	nop
 8011f10:	371c      	adds	r7, #28
 8011f12:	46bd      	mov	sp, r7
 8011f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f18:	4770      	bx	lr
 8011f1a:	bf00      	nop
 8011f1c:	03ff63ff 	.word	0x03ff63ff

08011f20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8011f20:	b480      	push	{r7}
 8011f22:	b083      	sub	sp, #12
 8011f24:	af00      	add	r7, sp, #0
 8011f26:	6078      	str	r0, [r7, #4]
 8011f28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011f30:	b2db      	uxtb	r3, r3
 8011f32:	2b20      	cmp	r3, #32
 8011f34:	d138      	bne.n	8011fa8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011f3c:	2b01      	cmp	r3, #1
 8011f3e:	d101      	bne.n	8011f44 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8011f40:	2302      	movs	r3, #2
 8011f42:	e032      	b.n	8011faa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	2201      	movs	r2, #1
 8011f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	2224      	movs	r2, #36	; 0x24
 8011f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	681a      	ldr	r2, [r3, #0]
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	f022 0201 	bic.w	r2, r2, #1
 8011f62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	681a      	ldr	r2, [r3, #0]
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8011f72:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	6819      	ldr	r1, [r3, #0]
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	683a      	ldr	r2, [r7, #0]
 8011f80:	430a      	orrs	r2, r1
 8011f82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	681a      	ldr	r2, [r3, #0]
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	681b      	ldr	r3, [r3, #0]
 8011f8e:	f042 0201 	orr.w	r2, r2, #1
 8011f92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	2220      	movs	r2, #32
 8011f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	2200      	movs	r2, #0
 8011fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8011fa4:	2300      	movs	r3, #0
 8011fa6:	e000      	b.n	8011faa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8011fa8:	2302      	movs	r3, #2
  }
}
 8011faa:	4618      	mov	r0, r3
 8011fac:	370c      	adds	r7, #12
 8011fae:	46bd      	mov	sp, r7
 8011fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fb4:	4770      	bx	lr

08011fb6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8011fb6:	b480      	push	{r7}
 8011fb8:	b085      	sub	sp, #20
 8011fba:	af00      	add	r7, sp, #0
 8011fbc:	6078      	str	r0, [r7, #4]
 8011fbe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011fc6:	b2db      	uxtb	r3, r3
 8011fc8:	2b20      	cmp	r3, #32
 8011fca:	d139      	bne.n	8012040 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011fd2:	2b01      	cmp	r3, #1
 8011fd4:	d101      	bne.n	8011fda <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8011fd6:	2302      	movs	r3, #2
 8011fd8:	e033      	b.n	8012042 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	2201      	movs	r2, #1
 8011fde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	2224      	movs	r2, #36	; 0x24
 8011fe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	681a      	ldr	r2, [r3, #0]
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	f022 0201 	bic.w	r2, r2, #1
 8011ff8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8012008:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 801200a:	683b      	ldr	r3, [r7, #0]
 801200c:	021b      	lsls	r3, r3, #8
 801200e:	68fa      	ldr	r2, [r7, #12]
 8012010:	4313      	orrs	r3, r2
 8012012:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	681b      	ldr	r3, [r3, #0]
 8012018:	68fa      	ldr	r2, [r7, #12]
 801201a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	681a      	ldr	r2, [r3, #0]
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	f042 0201 	orr.w	r2, r2, #1
 801202a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	2220      	movs	r2, #32
 8012030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	2200      	movs	r2, #0
 8012038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801203c:	2300      	movs	r3, #0
 801203e:	e000      	b.n	8012042 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8012040:	2302      	movs	r3, #2
  }
}
 8012042:	4618      	mov	r0, r3
 8012044:	3714      	adds	r7, #20
 8012046:	46bd      	mov	sp, r7
 8012048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801204c:	4770      	bx	lr
	...

08012050 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8012050:	b580      	push	{r7, lr}
 8012052:	b084      	sub	sp, #16
 8012054:	af00      	add	r7, sp, #0
 8012056:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	2b00      	cmp	r3, #0
 801205c:	d101      	bne.n	8012062 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 801205e:	2301      	movs	r3, #1
 8012060:	e0bf      	b.n	80121e2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8012068:	b2db      	uxtb	r3, r3
 801206a:	2b00      	cmp	r3, #0
 801206c:	d106      	bne.n	801207c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	2200      	movs	r2, #0
 8012072:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8012076:	6878      	ldr	r0, [r7, #4]
 8012078:	f7ee ff10 	bl	8000e9c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	2202      	movs	r2, #2
 8012080:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	699a      	ldr	r2, [r3, #24]
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8012092:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	6999      	ldr	r1, [r3, #24]
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	685a      	ldr	r2, [r3, #4]
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	689b      	ldr	r3, [r3, #8]
 80120a2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80120a8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	691b      	ldr	r3, [r3, #16]
 80120ae:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	430a      	orrs	r2, r1
 80120b6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	6899      	ldr	r1, [r3, #8]
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	681a      	ldr	r2, [r3, #0]
 80120c2:	4b4a      	ldr	r3, [pc, #296]	; (80121ec <HAL_LTDC_Init+0x19c>)
 80120c4:	400b      	ands	r3, r1
 80120c6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	695b      	ldr	r3, [r3, #20]
 80120cc:	041b      	lsls	r3, r3, #16
 80120ce:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	6899      	ldr	r1, [r3, #8]
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	699a      	ldr	r2, [r3, #24]
 80120da:	68fb      	ldr	r3, [r7, #12]
 80120dc:	431a      	orrs	r2, r3
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	681b      	ldr	r3, [r3, #0]
 80120e2:	430a      	orrs	r2, r1
 80120e4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	68d9      	ldr	r1, [r3, #12]
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	681a      	ldr	r2, [r3, #0]
 80120f0:	4b3e      	ldr	r3, [pc, #248]	; (80121ec <HAL_LTDC_Init+0x19c>)
 80120f2:	400b      	ands	r3, r1
 80120f4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	69db      	ldr	r3, [r3, #28]
 80120fa:	041b      	lsls	r3, r3, #16
 80120fc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	68d9      	ldr	r1, [r3, #12]
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	6a1a      	ldr	r2, [r3, #32]
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	431a      	orrs	r2, r3
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	430a      	orrs	r2, r1
 8012112:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	6919      	ldr	r1, [r3, #16]
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	681a      	ldr	r2, [r3, #0]
 801211e:	4b33      	ldr	r3, [pc, #204]	; (80121ec <HAL_LTDC_Init+0x19c>)
 8012120:	400b      	ands	r3, r1
 8012122:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012128:	041b      	lsls	r3, r3, #16
 801212a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	6919      	ldr	r1, [r3, #16]
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	431a      	orrs	r2, r3
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	681b      	ldr	r3, [r3, #0]
 801213e:	430a      	orrs	r2, r1
 8012140:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	6959      	ldr	r1, [r3, #20]
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	681a      	ldr	r2, [r3, #0]
 801214c:	4b27      	ldr	r3, [pc, #156]	; (80121ec <HAL_LTDC_Init+0x19c>)
 801214e:	400b      	ands	r3, r1
 8012150:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012156:	041b      	lsls	r3, r3, #16
 8012158:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	6959      	ldr	r1, [r3, #20]
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	431a      	orrs	r2, r3
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	430a      	orrs	r2, r1
 801216e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8012176:	021b      	lsls	r3, r3, #8
 8012178:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8012180:	041b      	lsls	r3, r3, #16
 8012182:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	681b      	ldr	r3, [r3, #0]
 801218e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8012192:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801219a:	68ba      	ldr	r2, [r7, #8]
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	4313      	orrs	r3, r2
 80121a0:	687a      	ldr	r2, [r7, #4]
 80121a2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80121a6:	431a      	orrs	r2, r3
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	430a      	orrs	r2, r1
 80121ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	f042 0206 	orr.w	r2, r2, #6
 80121be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	699a      	ldr	r2, [r3, #24]
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	f042 0201 	orr.w	r2, r2, #1
 80121ce:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	2200      	movs	r2, #0
 80121d4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	2201      	movs	r2, #1
 80121dc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80121e0:	2300      	movs	r3, #0
}
 80121e2:	4618      	mov	r0, r3
 80121e4:	3710      	adds	r7, #16
 80121e6:	46bd      	mov	sp, r7
 80121e8:	bd80      	pop	{r7, pc}
 80121ea:	bf00      	nop
 80121ec:	f000f800 	.word	0xf000f800

080121f0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80121f0:	b580      	push	{r7, lr}
 80121f2:	b084      	sub	sp, #16
 80121f4:	af00      	add	r7, sp, #0
 80121f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121fe:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	681b      	ldr	r3, [r3, #0]
 8012204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012206:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8012208:	68fb      	ldr	r3, [r7, #12]
 801220a:	f003 0304 	and.w	r3, r3, #4
 801220e:	2b00      	cmp	r3, #0
 8012210:	d023      	beq.n	801225a <HAL_LTDC_IRQHandler+0x6a>
 8012212:	68bb      	ldr	r3, [r7, #8]
 8012214:	f003 0304 	and.w	r3, r3, #4
 8012218:	2b00      	cmp	r3, #0
 801221a:	d01e      	beq.n	801225a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	f022 0204 	bic.w	r2, r2, #4
 801222a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	2204      	movs	r2, #4
 8012232:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801223a:	f043 0201 	orr.w	r2, r3, #1
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	2204      	movs	r2, #4
 8012248:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	2200      	movs	r2, #0
 8012250:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8012254:	6878      	ldr	r0, [r7, #4]
 8012256:	f000 f86f 	bl	8012338 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	f003 0302 	and.w	r3, r3, #2
 8012260:	2b00      	cmp	r3, #0
 8012262:	d023      	beq.n	80122ac <HAL_LTDC_IRQHandler+0xbc>
 8012264:	68bb      	ldr	r3, [r7, #8]
 8012266:	f003 0302 	and.w	r3, r3, #2
 801226a:	2b00      	cmp	r3, #0
 801226c:	d01e      	beq.n	80122ac <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	681b      	ldr	r3, [r3, #0]
 8012272:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	f022 0202 	bic.w	r2, r2, #2
 801227c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	2202      	movs	r2, #2
 8012284:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801228c:	f043 0202 	orr.w	r2, r3, #2
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	2204      	movs	r2, #4
 801229a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	2200      	movs	r2, #0
 80122a2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80122a6:	6878      	ldr	r0, [r7, #4]
 80122a8:	f000 f846 	bl	8012338 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	f003 0301 	and.w	r3, r3, #1
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d01b      	beq.n	80122ee <HAL_LTDC_IRQHandler+0xfe>
 80122b6:	68bb      	ldr	r3, [r7, #8]
 80122b8:	f003 0301 	and.w	r3, r3, #1
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d016      	beq.n	80122ee <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	f022 0201 	bic.w	r2, r2, #1
 80122ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	2201      	movs	r2, #1
 80122d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	2201      	movs	r2, #1
 80122dc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	2200      	movs	r2, #0
 80122e4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80122e8:	6878      	ldr	r0, [r7, #4]
 80122ea:	f7f1 fc15 	bl	8003b18 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	f003 0308 	and.w	r3, r3, #8
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d01b      	beq.n	8012330 <HAL_LTDC_IRQHandler+0x140>
 80122f8:	68bb      	ldr	r3, [r7, #8]
 80122fa:	f003 0308 	and.w	r3, r3, #8
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d016      	beq.n	8012330 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	f022 0208 	bic.w	r2, r2, #8
 8012310:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	2208      	movs	r2, #8
 8012318:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	2201      	movs	r2, #1
 801231e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	2200      	movs	r2, #0
 8012326:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 801232a:	6878      	ldr	r0, [r7, #4]
 801232c:	f000 f80e 	bl	801234c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8012330:	bf00      	nop
 8012332:	3710      	adds	r7, #16
 8012334:	46bd      	mov	sp, r7
 8012336:	bd80      	pop	{r7, pc}

08012338 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8012338:	b480      	push	{r7}
 801233a:	b083      	sub	sp, #12
 801233c:	af00      	add	r7, sp, #0
 801233e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8012340:	bf00      	nop
 8012342:	370c      	adds	r7, #12
 8012344:	46bd      	mov	sp, r7
 8012346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801234a:	4770      	bx	lr

0801234c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 801234c:	b480      	push	{r7}
 801234e:	b083      	sub	sp, #12
 8012350:	af00      	add	r7, sp, #0
 8012352:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8012354:	bf00      	nop
 8012356:	370c      	adds	r7, #12
 8012358:	46bd      	mov	sp, r7
 801235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801235e:	4770      	bx	lr

08012360 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8012360:	b5b0      	push	{r4, r5, r7, lr}
 8012362:	b084      	sub	sp, #16
 8012364:	af00      	add	r7, sp, #0
 8012366:	60f8      	str	r0, [r7, #12]
 8012368:	60b9      	str	r1, [r7, #8]
 801236a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8012372:	2b01      	cmp	r3, #1
 8012374:	d101      	bne.n	801237a <HAL_LTDC_ConfigLayer+0x1a>
 8012376:	2302      	movs	r3, #2
 8012378:	e02c      	b.n	80123d4 <HAL_LTDC_ConfigLayer+0x74>
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	2201      	movs	r2, #1
 801237e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	2202      	movs	r2, #2
 8012386:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 801238a:	68fa      	ldr	r2, [r7, #12]
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	2134      	movs	r1, #52	; 0x34
 8012390:	fb01 f303 	mul.w	r3, r1, r3
 8012394:	4413      	add	r3, r2
 8012396:	f103 0238 	add.w	r2, r3, #56	; 0x38
 801239a:	68bb      	ldr	r3, [r7, #8]
 801239c:	4614      	mov	r4, r2
 801239e:	461d      	mov	r5, r3
 80123a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80123a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80123a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80123a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80123a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80123aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80123ac:	682b      	ldr	r3, [r5, #0]
 80123ae:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80123b0:	687a      	ldr	r2, [r7, #4]
 80123b2:	68b9      	ldr	r1, [r7, #8]
 80123b4:	68f8      	ldr	r0, [r7, #12]
 80123b6:	f000 f849 	bl	801244c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	2201      	movs	r2, #1
 80123c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	2201      	movs	r2, #1
 80123c6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80123ca:	68fb      	ldr	r3, [r7, #12]
 80123cc:	2200      	movs	r2, #0
 80123ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80123d2:	2300      	movs	r3, #0
}
 80123d4:	4618      	mov	r0, r3
 80123d6:	3710      	adds	r7, #16
 80123d8:	46bd      	mov	sp, r7
 80123da:	bdb0      	pop	{r4, r5, r7, pc}

080123dc <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 80123dc:	b480      	push	{r7}
 80123de:	b083      	sub	sp, #12
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	6078      	str	r0, [r7, #4]
 80123e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80123ec:	2b01      	cmp	r3, #1
 80123ee:	d101      	bne.n	80123f4 <HAL_LTDC_ProgramLineEvent+0x18>
 80123f0:	2302      	movs	r3, #2
 80123f2:	e023      	b.n	801243c <HAL_LTDC_ProgramLineEvent+0x60>
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	2201      	movs	r2, #1
 80123f8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	2202      	movs	r2, #2
 8012400:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	f022 0201 	bic.w	r2, r2, #1
 8012412:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8012414:	4a0c      	ldr	r2, [pc, #48]	; (8012448 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8012416:	683b      	ldr	r3, [r7, #0]
 8012418:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	f042 0201 	orr.w	r2, r2, #1
 8012428:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	2201      	movs	r2, #1
 801242e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	2200      	movs	r2, #0
 8012436:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 801243a:	2300      	movs	r3, #0
}
 801243c:	4618      	mov	r0, r3
 801243e:	370c      	adds	r7, #12
 8012440:	46bd      	mov	sp, r7
 8012442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012446:	4770      	bx	lr
 8012448:	50001000 	.word	0x50001000

0801244c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 801244c:	b480      	push	{r7}
 801244e:	b089      	sub	sp, #36	; 0x24
 8012450:	af00      	add	r7, sp, #0
 8012452:	60f8      	str	r0, [r7, #12]
 8012454:	60b9      	str	r1, [r7, #8]
 8012456:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8012458:	68bb      	ldr	r3, [r7, #8]
 801245a:	685a      	ldr	r2, [r3, #4]
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	68db      	ldr	r3, [r3, #12]
 8012462:	0c1b      	lsrs	r3, r3, #16
 8012464:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012468:	4413      	add	r3, r2
 801246a:	041b      	lsls	r3, r3, #16
 801246c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	461a      	mov	r2, r3
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	01db      	lsls	r3, r3, #7
 8012478:	4413      	add	r3, r2
 801247a:	3384      	adds	r3, #132	; 0x84
 801247c:	685b      	ldr	r3, [r3, #4]
 801247e:	68fa      	ldr	r2, [r7, #12]
 8012480:	6812      	ldr	r2, [r2, #0]
 8012482:	4611      	mov	r1, r2
 8012484:	687a      	ldr	r2, [r7, #4]
 8012486:	01d2      	lsls	r2, r2, #7
 8012488:	440a      	add	r2, r1
 801248a:	3284      	adds	r2, #132	; 0x84
 801248c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8012490:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8012492:	68bb      	ldr	r3, [r7, #8]
 8012494:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8012496:	68fb      	ldr	r3, [r7, #12]
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	68db      	ldr	r3, [r3, #12]
 801249c:	0c1b      	lsrs	r3, r3, #16
 801249e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80124a2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80124a4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	4619      	mov	r1, r3
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	01db      	lsls	r3, r3, #7
 80124b0:	440b      	add	r3, r1
 80124b2:	3384      	adds	r3, #132	; 0x84
 80124b4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80124b6:	69fb      	ldr	r3, [r7, #28]
 80124b8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80124ba:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80124bc:	68bb      	ldr	r3, [r7, #8]
 80124be:	68da      	ldr	r2, [r3, #12]
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	68db      	ldr	r3, [r3, #12]
 80124c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80124ca:	4413      	add	r3, r2
 80124cc:	041b      	lsls	r3, r3, #16
 80124ce:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	461a      	mov	r2, r3
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	01db      	lsls	r3, r3, #7
 80124da:	4413      	add	r3, r2
 80124dc:	3384      	adds	r3, #132	; 0x84
 80124de:	689b      	ldr	r3, [r3, #8]
 80124e0:	68fa      	ldr	r2, [r7, #12]
 80124e2:	6812      	ldr	r2, [r2, #0]
 80124e4:	4611      	mov	r1, r2
 80124e6:	687a      	ldr	r2, [r7, #4]
 80124e8:	01d2      	lsls	r2, r2, #7
 80124ea:	440a      	add	r2, r1
 80124ec:	3284      	adds	r2, #132	; 0x84
 80124ee:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80124f2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80124f4:	68bb      	ldr	r3, [r7, #8]
 80124f6:	689a      	ldr	r2, [r3, #8]
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	68db      	ldr	r3, [r3, #12]
 80124fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012502:	4413      	add	r3, r2
 8012504:	1c5a      	adds	r2, r3, #1
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	4619      	mov	r1, r3
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	01db      	lsls	r3, r3, #7
 8012510:	440b      	add	r3, r1
 8012512:	3384      	adds	r3, #132	; 0x84
 8012514:	4619      	mov	r1, r3
 8012516:	69fb      	ldr	r3, [r7, #28]
 8012518:	4313      	orrs	r3, r2
 801251a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	461a      	mov	r2, r3
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	01db      	lsls	r3, r3, #7
 8012526:	4413      	add	r3, r2
 8012528:	3384      	adds	r3, #132	; 0x84
 801252a:	691b      	ldr	r3, [r3, #16]
 801252c:	68fa      	ldr	r2, [r7, #12]
 801252e:	6812      	ldr	r2, [r2, #0]
 8012530:	4611      	mov	r1, r2
 8012532:	687a      	ldr	r2, [r7, #4]
 8012534:	01d2      	lsls	r2, r2, #7
 8012536:	440a      	add	r2, r1
 8012538:	3284      	adds	r2, #132	; 0x84
 801253a:	f023 0307 	bic.w	r3, r3, #7
 801253e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	461a      	mov	r2, r3
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	01db      	lsls	r3, r3, #7
 801254a:	4413      	add	r3, r2
 801254c:	3384      	adds	r3, #132	; 0x84
 801254e:	461a      	mov	r2, r3
 8012550:	68bb      	ldr	r3, [r7, #8]
 8012552:	691b      	ldr	r3, [r3, #16]
 8012554:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8012556:	68bb      	ldr	r3, [r7, #8]
 8012558:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801255c:	021b      	lsls	r3, r3, #8
 801255e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8012560:	68bb      	ldr	r3, [r7, #8]
 8012562:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8012566:	041b      	lsls	r3, r3, #16
 8012568:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 801256a:	68bb      	ldr	r3, [r7, #8]
 801256c:	699b      	ldr	r3, [r3, #24]
 801256e:	061b      	lsls	r3, r3, #24
 8012570:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	461a      	mov	r2, r3
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	01db      	lsls	r3, r3, #7
 801257c:	4413      	add	r3, r2
 801257e:	3384      	adds	r3, #132	; 0x84
 8012580:	699b      	ldr	r3, [r3, #24]
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	681b      	ldr	r3, [r3, #0]
 8012586:	461a      	mov	r2, r3
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	01db      	lsls	r3, r3, #7
 801258c:	4413      	add	r3, r2
 801258e:	3384      	adds	r3, #132	; 0x84
 8012590:	461a      	mov	r2, r3
 8012592:	2300      	movs	r3, #0
 8012594:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8012596:	68bb      	ldr	r3, [r7, #8]
 8012598:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801259c:	461a      	mov	r2, r3
 801259e:	69fb      	ldr	r3, [r7, #28]
 80125a0:	431a      	orrs	r2, r3
 80125a2:	69bb      	ldr	r3, [r7, #24]
 80125a4:	431a      	orrs	r2, r3
 80125a6:	68fb      	ldr	r3, [r7, #12]
 80125a8:	681b      	ldr	r3, [r3, #0]
 80125aa:	4619      	mov	r1, r3
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	01db      	lsls	r3, r3, #7
 80125b0:	440b      	add	r3, r1
 80125b2:	3384      	adds	r3, #132	; 0x84
 80125b4:	4619      	mov	r1, r3
 80125b6:	697b      	ldr	r3, [r7, #20]
 80125b8:	4313      	orrs	r3, r2
 80125ba:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80125bc:	68fb      	ldr	r3, [r7, #12]
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	461a      	mov	r2, r3
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	01db      	lsls	r3, r3, #7
 80125c6:	4413      	add	r3, r2
 80125c8:	3384      	adds	r3, #132	; 0x84
 80125ca:	695b      	ldr	r3, [r3, #20]
 80125cc:	68fa      	ldr	r2, [r7, #12]
 80125ce:	6812      	ldr	r2, [r2, #0]
 80125d0:	4611      	mov	r1, r2
 80125d2:	687a      	ldr	r2, [r7, #4]
 80125d4:	01d2      	lsls	r2, r2, #7
 80125d6:	440a      	add	r2, r1
 80125d8:	3284      	adds	r2, #132	; 0x84
 80125da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80125de:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	461a      	mov	r2, r3
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	01db      	lsls	r3, r3, #7
 80125ea:	4413      	add	r3, r2
 80125ec:	3384      	adds	r3, #132	; 0x84
 80125ee:	461a      	mov	r2, r3
 80125f0:	68bb      	ldr	r3, [r7, #8]
 80125f2:	695b      	ldr	r3, [r3, #20]
 80125f4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80125f6:	68fb      	ldr	r3, [r7, #12]
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	461a      	mov	r2, r3
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	01db      	lsls	r3, r3, #7
 8012600:	4413      	add	r3, r2
 8012602:	3384      	adds	r3, #132	; 0x84
 8012604:	69da      	ldr	r2, [r3, #28]
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	4619      	mov	r1, r3
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	01db      	lsls	r3, r3, #7
 8012610:	440b      	add	r3, r1
 8012612:	3384      	adds	r3, #132	; 0x84
 8012614:	4619      	mov	r1, r3
 8012616:	4b58      	ldr	r3, [pc, #352]	; (8012778 <LTDC_SetConfig+0x32c>)
 8012618:	4013      	ands	r3, r2
 801261a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 801261c:	68bb      	ldr	r3, [r7, #8]
 801261e:	69da      	ldr	r2, [r3, #28]
 8012620:	68bb      	ldr	r3, [r7, #8]
 8012622:	6a1b      	ldr	r3, [r3, #32]
 8012624:	68f9      	ldr	r1, [r7, #12]
 8012626:	6809      	ldr	r1, [r1, #0]
 8012628:	4608      	mov	r0, r1
 801262a:	6879      	ldr	r1, [r7, #4]
 801262c:	01c9      	lsls	r1, r1, #7
 801262e:	4401      	add	r1, r0
 8012630:	3184      	adds	r1, #132	; 0x84
 8012632:	4313      	orrs	r3, r2
 8012634:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8012636:	68fb      	ldr	r3, [r7, #12]
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	461a      	mov	r2, r3
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	01db      	lsls	r3, r3, #7
 8012640:	4413      	add	r3, r2
 8012642:	3384      	adds	r3, #132	; 0x84
 8012644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	461a      	mov	r2, r3
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	01db      	lsls	r3, r3, #7
 8012650:	4413      	add	r3, r2
 8012652:	3384      	adds	r3, #132	; 0x84
 8012654:	461a      	mov	r2, r3
 8012656:	2300      	movs	r3, #0
 8012658:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	461a      	mov	r2, r3
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	01db      	lsls	r3, r3, #7
 8012664:	4413      	add	r3, r2
 8012666:	3384      	adds	r3, #132	; 0x84
 8012668:	461a      	mov	r2, r3
 801266a:	68bb      	ldr	r3, [r7, #8]
 801266c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801266e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8012670:	68bb      	ldr	r3, [r7, #8]
 8012672:	691b      	ldr	r3, [r3, #16]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d102      	bne.n	801267e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8012678:	2304      	movs	r3, #4
 801267a:	61fb      	str	r3, [r7, #28]
 801267c:	e01b      	b.n	80126b6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 801267e:	68bb      	ldr	r3, [r7, #8]
 8012680:	691b      	ldr	r3, [r3, #16]
 8012682:	2b01      	cmp	r3, #1
 8012684:	d102      	bne.n	801268c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8012686:	2303      	movs	r3, #3
 8012688:	61fb      	str	r3, [r7, #28]
 801268a:	e014      	b.n	80126b6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 801268c:	68bb      	ldr	r3, [r7, #8]
 801268e:	691b      	ldr	r3, [r3, #16]
 8012690:	2b04      	cmp	r3, #4
 8012692:	d00b      	beq.n	80126ac <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8012694:	68bb      	ldr	r3, [r7, #8]
 8012696:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8012698:	2b02      	cmp	r3, #2
 801269a:	d007      	beq.n	80126ac <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 801269c:	68bb      	ldr	r3, [r7, #8]
 801269e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80126a0:	2b03      	cmp	r3, #3
 80126a2:	d003      	beq.n	80126ac <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80126a4:	68bb      	ldr	r3, [r7, #8]
 80126a6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80126a8:	2b07      	cmp	r3, #7
 80126aa:	d102      	bne.n	80126b2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80126ac:	2302      	movs	r3, #2
 80126ae:	61fb      	str	r3, [r7, #28]
 80126b0:	e001      	b.n	80126b6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80126b2:	2301      	movs	r3, #1
 80126b4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	461a      	mov	r2, r3
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	01db      	lsls	r3, r3, #7
 80126c0:	4413      	add	r3, r2
 80126c2:	3384      	adds	r3, #132	; 0x84
 80126c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126c6:	68fa      	ldr	r2, [r7, #12]
 80126c8:	6812      	ldr	r2, [r2, #0]
 80126ca:	4611      	mov	r1, r2
 80126cc:	687a      	ldr	r2, [r7, #4]
 80126ce:	01d2      	lsls	r2, r2, #7
 80126d0:	440a      	add	r2, r1
 80126d2:	3284      	adds	r2, #132	; 0x84
 80126d4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80126d8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80126da:	68bb      	ldr	r3, [r7, #8]
 80126dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80126de:	69fa      	ldr	r2, [r7, #28]
 80126e0:	fb02 f303 	mul.w	r3, r2, r3
 80126e4:	041a      	lsls	r2, r3, #16
 80126e6:	68bb      	ldr	r3, [r7, #8]
 80126e8:	6859      	ldr	r1, [r3, #4]
 80126ea:	68bb      	ldr	r3, [r7, #8]
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	1acb      	subs	r3, r1, r3
 80126f0:	69f9      	ldr	r1, [r7, #28]
 80126f2:	fb01 f303 	mul.w	r3, r1, r3
 80126f6:	3307      	adds	r3, #7
 80126f8:	68f9      	ldr	r1, [r7, #12]
 80126fa:	6809      	ldr	r1, [r1, #0]
 80126fc:	4608      	mov	r0, r1
 80126fe:	6879      	ldr	r1, [r7, #4]
 8012700:	01c9      	lsls	r1, r1, #7
 8012702:	4401      	add	r1, r0
 8012704:	3184      	adds	r1, #132	; 0x84
 8012706:	4313      	orrs	r3, r2
 8012708:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	461a      	mov	r2, r3
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	01db      	lsls	r3, r3, #7
 8012714:	4413      	add	r3, r2
 8012716:	3384      	adds	r3, #132	; 0x84
 8012718:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	4619      	mov	r1, r3
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	01db      	lsls	r3, r3, #7
 8012724:	440b      	add	r3, r1
 8012726:	3384      	adds	r3, #132	; 0x84
 8012728:	4619      	mov	r1, r3
 801272a:	4b14      	ldr	r3, [pc, #80]	; (801277c <LTDC_SetConfig+0x330>)
 801272c:	4013      	ands	r3, r2
 801272e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	461a      	mov	r2, r3
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	01db      	lsls	r3, r3, #7
 801273a:	4413      	add	r3, r2
 801273c:	3384      	adds	r3, #132	; 0x84
 801273e:	461a      	mov	r2, r3
 8012740:	68bb      	ldr	r3, [r7, #8]
 8012742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012744:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	461a      	mov	r2, r3
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	01db      	lsls	r3, r3, #7
 8012750:	4413      	add	r3, r2
 8012752:	3384      	adds	r3, #132	; 0x84
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	68fa      	ldr	r2, [r7, #12]
 8012758:	6812      	ldr	r2, [r2, #0]
 801275a:	4611      	mov	r1, r2
 801275c:	687a      	ldr	r2, [r7, #4]
 801275e:	01d2      	lsls	r2, r2, #7
 8012760:	440a      	add	r2, r1
 8012762:	3284      	adds	r2, #132	; 0x84
 8012764:	f043 0301 	orr.w	r3, r3, #1
 8012768:	6013      	str	r3, [r2, #0]
}
 801276a:	bf00      	nop
 801276c:	3724      	adds	r7, #36	; 0x24
 801276e:	46bd      	mov	sp, r7
 8012770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012774:	4770      	bx	lr
 8012776:	bf00      	nop
 8012778:	fffff8f8 	.word	0xfffff8f8
 801277c:	fffff800 	.word	0xfffff800

08012780 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8012780:	b580      	push	{r7, lr}
 8012782:	b084      	sub	sp, #16
 8012784:	af00      	add	r7, sp, #0
 8012786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8012788:	f7fd feea 	bl	8010560 <HAL_GetTick>
 801278c:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	2b00      	cmp	r3, #0
 8012792:	d101      	bne.n	8012798 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 8012794:	2301      	movs	r3, #1
 8012796:	e03b      	b.n	8012810 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	2200      	movs	r2, #0
 801279c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	2202      	movs	r2, #2
 80127a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	68da      	ldr	r2, [r3, #12]
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	f022 0201 	bic.w	r2, r2, #1
 80127b6:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80127b8:	e00f      	b.n	80127da <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 80127ba:	f7fd fed1 	bl	8010560 <HAL_GetTick>
 80127be:	4602      	mov	r2, r0
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	1ad3      	subs	r3, r2, r3
 80127c4:	2b05      	cmp	r3, #5
 80127c6:	d908      	bls.n	80127da <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	2240      	movs	r2, #64	; 0x40
 80127cc:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	2203      	movs	r2, #3
 80127d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 80127d6:	2301      	movs	r3, #1
 80127d8:	e01a      	b.n	8012810 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	68db      	ldr	r3, [r3, #12]
 80127e0:	f003 0301 	and.w	r3, r3, #1
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d1e8      	bne.n	80127ba <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 80127e8:	6878      	ldr	r0, [r7, #4]
 80127ea:	f000 f894 	bl	8012916 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	2200      	movs	r2, #0
 80127f2:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	2200      	movs	r2, #0
 80127f8:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	2200      	movs	r2, #0
 80127fe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	2200      	movs	r2, #0
 8012804:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	2201      	movs	r2, #1
 801280a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801280e:	2300      	movs	r3, #0
}
 8012810:	4618      	mov	r0, r3
 8012812:	3710      	adds	r7, #16
 8012814:	46bd      	mov	sp, r7
 8012816:	bd80      	pop	{r7, pc}

08012818 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 8012818:	b480      	push	{r7}
 801281a:	b083      	sub	sp, #12
 801281c:	af00      	add	r7, sp, #0
 801281e:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	2b00      	cmp	r3, #0
 8012824:	d101      	bne.n	801282a <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8012826:	2301      	movs	r3, #1
 8012828:	e048      	b.n	80128bc <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	68da      	ldr	r2, [r3, #12]
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	f022 0201 	bic.w	r2, r2, #1
 8012838:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	2200      	movs	r2, #0
 8012840:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	2200      	movs	r2, #0
 8012848:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	2200      	movs	r2, #0
 8012850:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	2200      	movs	r2, #0
 8012858:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	681b      	ldr	r3, [r3, #0]
 801285e:	2200      	movs	r2, #0
 8012860:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	2200      	movs	r2, #0
 8012868:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	2200      	movs	r2, #0
 8012870:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	2200      	movs	r2, #0
 8012878:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	681b      	ldr	r3, [r3, #0]
 801287e:	2200      	movs	r2, #0
 8012880:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	2200      	movs	r2, #0
 8012888:	635a      	str	r2, [r3, #52]	; 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	221f      	movs	r2, #31
 8012890:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	2200      	movs	r2, #0
 8012896:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	2200      	movs	r2, #0
 801289c:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	2200      	movs	r2, #0
 80128a2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	2200      	movs	r2, #0
 80128a8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	2200      	movs	r2, #0
 80128ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	2200      	movs	r2, #0
 80128b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80128ba:	2300      	movs	r3, #0
}
 80128bc:	4618      	mov	r0, r3
 80128be:	370c      	adds	r7, #12
 80128c0:	46bd      	mov	sp, r7
 80128c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c6:	4770      	bx	lr

080128c8 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 80128c8:	b480      	push	{r7}
 80128ca:	b083      	sub	sp, #12
 80128cc:	af00      	add	r7, sp, #0
 80128ce:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d101      	bne.n	80128da <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80128d6:	2301      	movs	r3, #1
 80128d8:	e017      	b.n	801290a <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80128e0:	b2db      	uxtb	r3, r3
 80128e2:	2b02      	cmp	r3, #2
 80128e4:	d004      	beq.n	80128f0 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	2280      	movs	r2, #128	; 0x80
 80128ea:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
 80128ec:	2301      	movs	r3, #1
 80128ee:	e00c      	b.n	801290a <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	2204      	movs	r2, #4
 80128f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	68da      	ldr	r2, [r3, #12]
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	f022 0201 	bic.w	r2, r2, #1
 8012906:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 8012908:	2300      	movs	r3, #0
}
 801290a:	4618      	mov	r0, r3
 801290c:	370c      	adds	r7, #12
 801290e:	46bd      	mov	sp, r7
 8012910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012914:	4770      	bx	lr

08012916 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8012916:	b480      	push	{r7}
 8012918:	b085      	sub	sp, #20
 801291a:	af00      	add	r7, sp, #0
 801291c:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	68d9      	ldr	r1, [r3, #12]
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	691a      	ldr	r2, [r3, #16]
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	681b      	ldr	r3, [r3, #0]
 801292a:	430a      	orrs	r2, r1
 801292c:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	695a      	ldr	r2, [r3, #20]
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	699b      	ldr	r3, [r3, #24]
 8012936:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 801293c:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	6a1b      	ldr	r3, [r3, #32]
 8012942:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8012948:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801294e:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8012954:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801295a:	3b01      	subs	r3, #1
 801295c:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 801295e:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 801296a:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 801296c:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	685b      	ldr	r3, [r3, #4]
 8012972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012976:	d107      	bne.n	8012988 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	691a      	ldr	r2, [r3, #16]
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8012986:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	681b      	ldr	r3, [r3, #0]
 801298c:	2200      	movs	r2, #0
 801298e:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012994:	2b00      	cmp	r3, #0
 8012996:	da11      	bge.n	80129bc <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	695a      	ldr	r2, [r3, #20]
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80129a6:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80129ac:	425b      	negs	r3, r3
 80129ae:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	68fa      	ldr	r2, [r7, #12]
 80129b6:	b292      	uxth	r2, r2
 80129b8:	621a      	str	r2, [r3, #32]
 80129ba:	e006      	b.n	80129ca <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80129c0:	461a      	mov	r2, r3
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	681b      	ldr	r3, [r3, #0]
 80129c6:	b292      	uxth	r2, r2
 80129c8:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	da15      	bge.n	80129fe <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	695a      	ldr	r2, [r3, #20]
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80129e0:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80129e6:	425b      	negs	r3, r3
 80129e8:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	6a19      	ldr	r1, [r3, #32]
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	041a      	lsls	r2, r3, #16
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	430a      	orrs	r2, r1
 80129fa:	621a      	str	r2, [r3, #32]
 80129fc:	e009      	b.n	8012a12 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	6a19      	ldr	r1, [r3, #32]
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a08:	041a      	lsls	r2, r3, #16
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	430a      	orrs	r2, r1
 8012a10:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	685b      	ldr	r3, [r3, #4]
 8012a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012a1a:	d006      	beq.n	8012a2a <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	685a      	ldr	r2, [r3, #4]
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	b2d2      	uxtb	r2, r2
 8012a26:	629a      	str	r2, [r3, #40]	; 0x28
 8012a28:	e003      	b.n	8012a32 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	2200      	movs	r2, #0
 8012a30:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	681b      	ldr	r3, [r3, #0]
 8012a36:	2200      	movs	r2, #0
 8012a38:	625a      	str	r2, [r3, #36]	; 0x24
}
 8012a3a:	bf00      	nop
 8012a3c:	3714      	adds	r7, #20
 8012a3e:	46bd      	mov	sp, r7
 8012a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a44:	4770      	bx	lr
	...

08012a48 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8012a48:	b580      	push	{r7, lr}
 8012a4a:	b084      	sub	sp, #16
 8012a4c:	af00      	add	r7, sp, #0
 8012a4e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8012a50:	4b29      	ldr	r3, [pc, #164]	; (8012af8 <HAL_PWREx_ConfigSupply+0xb0>)
 8012a52:	68db      	ldr	r3, [r3, #12]
 8012a54:	f003 0307 	and.w	r3, r3, #7
 8012a58:	2b06      	cmp	r3, #6
 8012a5a:	d00a      	beq.n	8012a72 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8012a5c:	4b26      	ldr	r3, [pc, #152]	; (8012af8 <HAL_PWREx_ConfigSupply+0xb0>)
 8012a5e:	68db      	ldr	r3, [r3, #12]
 8012a60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012a64:	687a      	ldr	r2, [r7, #4]
 8012a66:	429a      	cmp	r2, r3
 8012a68:	d001      	beq.n	8012a6e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8012a6a:	2301      	movs	r3, #1
 8012a6c:	e040      	b.n	8012af0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8012a6e:	2300      	movs	r3, #0
 8012a70:	e03e      	b.n	8012af0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8012a72:	4b21      	ldr	r3, [pc, #132]	; (8012af8 <HAL_PWREx_ConfigSupply+0xb0>)
 8012a74:	68db      	ldr	r3, [r3, #12]
 8012a76:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8012a7a:	491f      	ldr	r1, [pc, #124]	; (8012af8 <HAL_PWREx_ConfigSupply+0xb0>)
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	4313      	orrs	r3, r2
 8012a80:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8012a82:	f7fd fd6d 	bl	8010560 <HAL_GetTick>
 8012a86:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8012a88:	e009      	b.n	8012a9e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8012a8a:	f7fd fd69 	bl	8010560 <HAL_GetTick>
 8012a8e:	4602      	mov	r2, r0
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	1ad3      	subs	r3, r2, r3
 8012a94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012a98:	d901      	bls.n	8012a9e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8012a9a:	2301      	movs	r3, #1
 8012a9c:	e028      	b.n	8012af0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8012a9e:	4b16      	ldr	r3, [pc, #88]	; (8012af8 <HAL_PWREx_ConfigSupply+0xb0>)
 8012aa0:	685b      	ldr	r3, [r3, #4]
 8012aa2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012aa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012aaa:	d1ee      	bne.n	8012a8a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	2b1e      	cmp	r3, #30
 8012ab0:	d008      	beq.n	8012ac4 <HAL_PWREx_ConfigSupply+0x7c>
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	2b2e      	cmp	r3, #46	; 0x2e
 8012ab6:	d005      	beq.n	8012ac4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	2b1d      	cmp	r3, #29
 8012abc:	d002      	beq.n	8012ac4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	2b2d      	cmp	r3, #45	; 0x2d
 8012ac2:	d114      	bne.n	8012aee <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8012ac4:	f7fd fd4c 	bl	8010560 <HAL_GetTick>
 8012ac8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8012aca:	e009      	b.n	8012ae0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8012acc:	f7fd fd48 	bl	8010560 <HAL_GetTick>
 8012ad0:	4602      	mov	r2, r0
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	1ad3      	subs	r3, r2, r3
 8012ad6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012ada:	d901      	bls.n	8012ae0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8012adc:	2301      	movs	r3, #1
 8012ade:	e007      	b.n	8012af0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8012ae0:	4b05      	ldr	r3, [pc, #20]	; (8012af8 <HAL_PWREx_ConfigSupply+0xb0>)
 8012ae2:	68db      	ldr	r3, [r3, #12]
 8012ae4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012ae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012aec:	d1ee      	bne.n	8012acc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8012aee:	2300      	movs	r3, #0
}
 8012af0:	4618      	mov	r0, r3
 8012af2:	3710      	adds	r7, #16
 8012af4:	46bd      	mov	sp, r7
 8012af6:	bd80      	pop	{r7, pc}
 8012af8:	58024800 	.word	0x58024800

08012afc <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8012afc:	b580      	push	{r7, lr}
 8012afe:	b086      	sub	sp, #24
 8012b00:	af02      	add	r7, sp, #8
 8012b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8012b04:	f7fd fd2c 	bl	8010560 <HAL_GetTick>
 8012b08:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d101      	bne.n	8012b14 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8012b10:	2301      	movs	r3, #1
 8012b12:	e05f      	b.n	8012bd4 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012b1a:	b2db      	uxtb	r3, r3
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d107      	bne.n	8012b30 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8012b20:	6878      	ldr	r0, [r7, #4]
 8012b22:	f7ee faad 	bl	8001080 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8012b26:	f241 3188 	movw	r1, #5000	; 0x1388
 8012b2a:	6878      	ldr	r0, [r7, #4]
 8012b2c:	f000 fcca 	bl	80134c4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	681b      	ldr	r3, [r3, #0]
 8012b36:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	689b      	ldr	r3, [r3, #8]
 8012b3e:	3b01      	subs	r3, #1
 8012b40:	021a      	lsls	r2, r3, #8
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	430a      	orrs	r2, r1
 8012b48:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012b4e:	9300      	str	r3, [sp, #0]
 8012b50:	68fb      	ldr	r3, [r7, #12]
 8012b52:	2200      	movs	r2, #0
 8012b54:	2120      	movs	r1, #32
 8012b56:	6878      	ldr	r0, [r7, #4]
 8012b58:	f000 fcf5 	bl	8013546 <QSPI_WaitFlagStateUntilTimeout>
 8012b5c:	4603      	mov	r3, r0
 8012b5e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8012b60:	7afb      	ldrb	r3, [r7, #11]
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d135      	bne.n	8012bd2 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	681a      	ldr	r2, [r3, #0]
 8012b6c:	4b1b      	ldr	r3, [pc, #108]	; (8012bdc <HAL_QSPI_Init+0xe0>)
 8012b6e:	4013      	ands	r3, r2
 8012b70:	687a      	ldr	r2, [r7, #4]
 8012b72:	6852      	ldr	r2, [r2, #4]
 8012b74:	0611      	lsls	r1, r2, #24
 8012b76:	687a      	ldr	r2, [r7, #4]
 8012b78:	68d2      	ldr	r2, [r2, #12]
 8012b7a:	4311      	orrs	r1, r2
 8012b7c:	687a      	ldr	r2, [r7, #4]
 8012b7e:	69d2      	ldr	r2, [r2, #28]
 8012b80:	4311      	orrs	r1, r2
 8012b82:	687a      	ldr	r2, [r7, #4]
 8012b84:	6a12      	ldr	r2, [r2, #32]
 8012b86:	4311      	orrs	r1, r2
 8012b88:	687a      	ldr	r2, [r7, #4]
 8012b8a:	6812      	ldr	r2, [r2, #0]
 8012b8c:	430b      	orrs	r3, r1
 8012b8e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	681b      	ldr	r3, [r3, #0]
 8012b94:	685a      	ldr	r2, [r3, #4]
 8012b96:	4b12      	ldr	r3, [pc, #72]	; (8012be0 <HAL_QSPI_Init+0xe4>)
 8012b98:	4013      	ands	r3, r2
 8012b9a:	687a      	ldr	r2, [r7, #4]
 8012b9c:	6912      	ldr	r2, [r2, #16]
 8012b9e:	0411      	lsls	r1, r2, #16
 8012ba0:	687a      	ldr	r2, [r7, #4]
 8012ba2:	6952      	ldr	r2, [r2, #20]
 8012ba4:	4311      	orrs	r1, r2
 8012ba6:	687a      	ldr	r2, [r7, #4]
 8012ba8:	6992      	ldr	r2, [r2, #24]
 8012baa:	4311      	orrs	r1, r2
 8012bac:	687a      	ldr	r2, [r7, #4]
 8012bae:	6812      	ldr	r2, [r2, #0]
 8012bb0:	430b      	orrs	r3, r1
 8012bb2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	681a      	ldr	r2, [r3, #0]
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	681b      	ldr	r3, [r3, #0]
 8012bbe:	f042 0201 	orr.w	r2, r2, #1
 8012bc2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	2200      	movs	r2, #0
 8012bc8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	2201      	movs	r2, #1
 8012bce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8012bd2:	7afb      	ldrb	r3, [r7, #11]
}
 8012bd4:	4618      	mov	r0, r3
 8012bd6:	3710      	adds	r7, #16
 8012bd8:	46bd      	mov	sp, r7
 8012bda:	bd80      	pop	{r7, pc}
 8012bdc:	00ffff2f 	.word	0x00ffff2f
 8012be0:	ffe0f8fe 	.word	0xffe0f8fe

08012be4 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 8012be4:	b580      	push	{r7, lr}
 8012be6:	b086      	sub	sp, #24
 8012be8:	af00      	add	r7, sp, #0
 8012bea:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	689b      	ldr	r3, [r3, #8]
 8012bf2:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	681b      	ldr	r3, [r3, #0]
 8012bfa:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 8012bfc:	697b      	ldr	r3, [r7, #20]
 8012bfe:	f003 0304 	and.w	r3, r3, #4
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d064      	beq.n	8012cd0 <HAL_QSPI_IRQHandler+0xec>
 8012c06:	693b      	ldr	r3, [r7, #16]
 8012c08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d05f      	beq.n	8012cd0 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	3320      	adds	r3, #32
 8012c16:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012c1e:	b2db      	uxtb	r3, r3
 8012c20:	2b12      	cmp	r3, #18
 8012c22:	d125      	bne.n	8012c70 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8012c24:	e01c      	b.n	8012c60 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d00f      	beq.n	8012c4e <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c32:	781a      	ldrb	r2, [r3, #0]
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c3c:	1c5a      	adds	r2, r3, #1
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c46:	1e5a      	subs	r2, r3, #1
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	62da      	str	r2, [r3, #44]	; 0x2c
 8012c4c:	e008      	b.n	8012c60 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	681a      	ldr	r2, [r3, #0]
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8012c5c:	601a      	str	r2, [r3, #0]
          break;
 8012c5e:	e033      	b.n	8012cc8 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	681b      	ldr	r3, [r3, #0]
 8012c64:	689b      	ldr	r3, [r3, #8]
 8012c66:	f003 0304 	and.w	r3, r3, #4
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d1db      	bne.n	8012c26 <HAL_QSPI_IRQHandler+0x42>
 8012c6e:	e02b      	b.n	8012cc8 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012c76:	b2db      	uxtb	r3, r3
 8012c78:	2b22      	cmp	r3, #34	; 0x22
 8012c7a:	d125      	bne.n	8012cc8 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8012c7c:	e01d      	b.n	8012cba <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d010      	beq.n	8012ca8 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c8a:	68fa      	ldr	r2, [r7, #12]
 8012c8c:	7812      	ldrb	r2, [r2, #0]
 8012c8e:	b2d2      	uxtb	r2, r2
 8012c90:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c96:	1c5a      	adds	r2, r3, #1
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ca0:	1e5a      	subs	r2, r3, #1
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	639a      	str	r2, [r3, #56]	; 0x38
 8012ca6:	e008      	b.n	8012cba <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	681a      	ldr	r2, [r3, #0]
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8012cb6:	601a      	str	r2, [r3, #0]
          break;
 8012cb8:	e006      	b.n	8012cc8 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	689b      	ldr	r3, [r3, #8]
 8012cc0:	f003 0304 	and.w	r3, r3, #4
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d1da      	bne.n	8012c7e <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 8012cc8:	6878      	ldr	r0, [r7, #4]
 8012cca:	f000 fbdd 	bl	8013488 <HAL_QSPI_FifoThresholdCallback>
 8012cce:	e13c      	b.n	8012f4a <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 8012cd0:	697b      	ldr	r3, [r7, #20]
 8012cd2:	f003 0302 	and.w	r3, r3, #2
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	f000 80b0 	beq.w	8012e3c <HAL_QSPI_IRQHandler+0x258>
 8012cdc:	693b      	ldr	r3, [r7, #16]
 8012cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	f000 80aa 	beq.w	8012e3c <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	2202      	movs	r2, #2
 8012cee:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	681a      	ldr	r2, [r3, #0]
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8012cfe:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012d06:	b2db      	uxtb	r3, r3
 8012d08:	2b12      	cmp	r3, #18
 8012d0a:	d120      	bne.n	8012d4e <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	f003 0304 	and.w	r3, r3, #4
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d011      	beq.n	8012d3e <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	681a      	ldr	r2, [r3, #0]
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	f022 0204 	bic.w	r2, r2, #4
 8012d28:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	68da      	ldr	r2, [r3, #12]
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	f022 0201 	bic.w	r2, r2, #1
 8012d3c:	60da      	str	r2, [r3, #12]
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	2201      	movs	r2, #1
 8012d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 8012d46:	6878      	ldr	r0, [r7, #4]
 8012d48:	f000 fb94 	bl	8013474 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8012d4c:	e0fa      	b.n	8012f44 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012d54:	b2db      	uxtb	r3, r3
 8012d56:	2b22      	cmp	r3, #34	; 0x22
 8012d58:	d143      	bne.n	8012de2 <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	681b      	ldr	r3, [r3, #0]
 8012d60:	f003 0304 	and.w	r3, r3, #4
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d012      	beq.n	8012d8e <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	681b      	ldr	r3, [r3, #0]
 8012d6c:	681a      	ldr	r2, [r3, #0]
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	f022 0204 	bic.w	r2, r2, #4
 8012d76:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	68da      	ldr	r2, [r3, #12]
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	f022 0201 	bic.w	r2, r2, #1
 8012d8a:	60da      	str	r2, [r3, #12]
 8012d8c:	e021      	b.n	8012dd2 <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	681b      	ldr	r3, [r3, #0]
 8012d92:	3320      	adds	r3, #32
 8012d94:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8012d96:	e013      	b.n	8012dc0 <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d017      	beq.n	8012dd0 <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012da4:	68fa      	ldr	r2, [r7, #12]
 8012da6:	7812      	ldrb	r2, [r2, #0]
 8012da8:	b2d2      	uxtb	r2, r2
 8012daa:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012db0:	1c5a      	adds	r2, r3, #1
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012dba:	1e5a      	subs	r2, r3, #1
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	681b      	ldr	r3, [r3, #0]
 8012dc4:	689b      	ldr	r3, [r3, #8]
 8012dc6:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d1e4      	bne.n	8012d98 <HAL_QSPI_IRQHandler+0x1b4>
 8012dce:	e000      	b.n	8012dd2 <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 8012dd0:	bf00      	nop
        }
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	2201      	movs	r2, #1
 8012dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 8012dda:	6878      	ldr	r0, [r7, #4]
 8012ddc:	f000 fb40 	bl	8013460 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8012de0:	e0b0      	b.n	8012f44 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012de8:	b2db      	uxtb	r3, r3
 8012dea:	2b02      	cmp	r3, #2
 8012dec:	d107      	bne.n	8012dfe <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	2201      	movs	r2, #1
 8012df2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 8012df6:	6878      	ldr	r0, [r7, #4]
 8012df8:	f000 fb28 	bl	801344c <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8012dfc:	e0a2      	b.n	8012f44 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012e04:	b2db      	uxtb	r3, r3
 8012e06:	2b08      	cmp	r3, #8
 8012e08:	f040 809c 	bne.w	8012f44 <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	695a      	ldr	r2, [r3, #20]
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8012e1a:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	2201      	movs	r2, #1
 8012e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d103      	bne.n	8012e34 <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 8012e2c:	6878      	ldr	r0, [r7, #4]
 8012e2e:	f000 fb03 	bl	8013438 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8012e32:	e087      	b.n	8012f44 <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8012e34:	6878      	ldr	r0, [r7, #4]
 8012e36:	f000 faf5 	bl	8013424 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8012e3a:	e083      	b.n	8012f44 <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 8012e3c:	697b      	ldr	r3, [r7, #20]
 8012e3e:	f003 0308 	and.w	r3, r3, #8
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d01f      	beq.n	8012e86 <HAL_QSPI_IRQHandler+0x2a2>
 8012e46:	693b      	ldr	r3, [r7, #16]
 8012e48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d01a      	beq.n	8012e86 <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	681b      	ldr	r3, [r3, #0]
 8012e54:	2208      	movs	r2, #8
 8012e56:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d00b      	beq.n	8012e7e <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	681a      	ldr	r2, [r3, #0]
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8012e74:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	2201      	movs	r2, #1
 8012e7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 8012e7e:	6878      	ldr	r0, [r7, #4]
 8012e80:	f000 fb0c 	bl	801349c <HAL_QSPI_StatusMatchCallback>
 8012e84:	e061      	b.n	8012f4a <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 8012e86:	697b      	ldr	r3, [r7, #20]
 8012e88:	f003 0301 	and.w	r3, r3, #1
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d047      	beq.n	8012f20 <HAL_QSPI_IRQHandler+0x33c>
 8012e90:	693b      	ldr	r3, [r7, #16]
 8012e92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d042      	beq.n	8012f20 <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	2201      	movs	r2, #1
 8012ea0:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	681b      	ldr	r3, [r3, #0]
 8012ea6:	681a      	ldr	r2, [r3, #0]
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8012eb0:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012eb6:	f043 0202 	orr.w	r2, r3, #2
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	681b      	ldr	r3, [r3, #0]
 8012ec2:	681b      	ldr	r3, [r3, #0]
 8012ec4:	f003 0304 	and.w	r3, r3, #4
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d021      	beq.n	8012f10 <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
         but no impact on H7 HW and it minimize the cost in the footprint */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	681a      	ldr	r2, [r3, #0]
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	681b      	ldr	r3, [r3, #0]
 8012ed6:	f022 0204 	bic.w	r2, r2, #4
 8012eda:	601a      	str	r2, [r3, #0]

      /* Disable the MDMA channel */
      hqspi->hmdma->XferAbortCallback = QSPI_DMAAbortCplt;
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012ee0:	4a1c      	ldr	r2, [pc, #112]	; (8012f54 <HAL_QSPI_IRQHandler+0x370>)
 8012ee2:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hqspi->hmdma) != HAL_OK)
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012ee8:	4618      	mov	r0, r3
 8012eea:	f7ff fced 	bl	80128c8 <HAL_MDMA_Abort_IT>
 8012eee:	4603      	mov	r3, r0
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d029      	beq.n	8012f48 <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012ef8:	f043 0204 	orr.w	r2, r3, #4
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	2201      	movs	r2, #1
 8012f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8012f08:	6878      	ldr	r0, [r7, #4]
 8012f0a:	f000 fa8b 	bl	8013424 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8012f0e:	e01b      	b.n	8012f48 <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	2201      	movs	r2, #1
 8012f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 8012f18:	6878      	ldr	r0, [r7, #4]
 8012f1a:	f000 fa83 	bl	8013424 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8012f1e:	e013      	b.n	8012f48 <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 8012f20:	697b      	ldr	r3, [r7, #20]
 8012f22:	f003 0310 	and.w	r3, r3, #16
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d00f      	beq.n	8012f4a <HAL_QSPI_IRQHandler+0x366>
 8012f2a:	693b      	ldr	r3, [r7, #16]
 8012f2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d00a      	beq.n	8012f4a <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	2210      	movs	r2, #16
 8012f3a:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 8012f3c:	6878      	ldr	r0, [r7, #4]
 8012f3e:	f000 fab7 	bl	80134b0 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 8012f42:	e002      	b.n	8012f4a <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8012f44:	bf00      	nop
 8012f46:	e000      	b.n	8012f4a <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8012f48:	bf00      	nop
}
 8012f4a:	bf00      	nop
 8012f4c:	3718      	adds	r7, #24
 8012f4e:	46bd      	mov	sp, r7
 8012f50:	bd80      	pop	{r7, pc}
 8012f52:	bf00      	nop
 8012f54:	080134e1 	.word	0x080134e1

08012f58 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8012f58:	b580      	push	{r7, lr}
 8012f5a:	b088      	sub	sp, #32
 8012f5c:	af02      	add	r7, sp, #8
 8012f5e:	60f8      	str	r0, [r7, #12]
 8012f60:	60b9      	str	r1, [r7, #8]
 8012f62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8012f64:	f7fd fafc 	bl	8010560 <HAL_GetTick>
 8012f68:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8012f6a:	68fb      	ldr	r3, [r7, #12]
 8012f6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012f70:	b2db      	uxtb	r3, r3
 8012f72:	2b01      	cmp	r3, #1
 8012f74:	d101      	bne.n	8012f7a <HAL_QSPI_Command+0x22>
 8012f76:	2302      	movs	r3, #2
 8012f78:	e048      	b.n	801300c <HAL_QSPI_Command+0xb4>
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	2201      	movs	r2, #1
 8012f7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8012f82:	68fb      	ldr	r3, [r7, #12]
 8012f84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012f88:	b2db      	uxtb	r3, r3
 8012f8a:	2b01      	cmp	r3, #1
 8012f8c:	d137      	bne.n	8012ffe <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	2200      	movs	r2, #0
 8012f92:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8012f94:	68fb      	ldr	r3, [r7, #12]
 8012f96:	2202      	movs	r2, #2
 8012f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	9300      	str	r3, [sp, #0]
 8012fa0:	693b      	ldr	r3, [r7, #16]
 8012fa2:	2200      	movs	r2, #0
 8012fa4:	2120      	movs	r1, #32
 8012fa6:	68f8      	ldr	r0, [r7, #12]
 8012fa8:	f000 facd 	bl	8013546 <QSPI_WaitFlagStateUntilTimeout>
 8012fac:	4603      	mov	r3, r0
 8012fae:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8012fb0:	7dfb      	ldrb	r3, [r7, #23]
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d125      	bne.n	8013002 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8012fb6:	2200      	movs	r2, #0
 8012fb8:	68b9      	ldr	r1, [r7, #8]
 8012fba:	68f8      	ldr	r0, [r7, #12]
 8012fbc:	f000 fafa 	bl	80135b4 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8012fc0:	68bb      	ldr	r3, [r7, #8]
 8012fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d115      	bne.n	8012ff4 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	9300      	str	r3, [sp, #0]
 8012fcc:	693b      	ldr	r3, [r7, #16]
 8012fce:	2201      	movs	r2, #1
 8012fd0:	2102      	movs	r1, #2
 8012fd2:	68f8      	ldr	r0, [r7, #12]
 8012fd4:	f000 fab7 	bl	8013546 <QSPI_WaitFlagStateUntilTimeout>
 8012fd8:	4603      	mov	r3, r0
 8012fda:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8012fdc:	7dfb      	ldrb	r3, [r7, #23]
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d10f      	bne.n	8013002 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	681b      	ldr	r3, [r3, #0]
 8012fe6:	2202      	movs	r2, #2
 8012fe8:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	2201      	movs	r2, #1
 8012fee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012ff2:	e006      	b.n	8013002 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	2201      	movs	r2, #1
 8012ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012ffc:	e001      	b.n	8013002 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8012ffe:	2302      	movs	r3, #2
 8013000:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	2200      	movs	r2, #0
 8013006:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 801300a:	7dfb      	ldrb	r3, [r7, #23]
}
 801300c:	4618      	mov	r0, r3
 801300e:	3718      	adds	r7, #24
 8013010:	46bd      	mov	sp, r7
 8013012:	bd80      	pop	{r7, pc}

08013014 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8013014:	b580      	push	{r7, lr}
 8013016:	b08a      	sub	sp, #40	; 0x28
 8013018:	af02      	add	r7, sp, #8
 801301a:	60f8      	str	r0, [r7, #12]
 801301c:	60b9      	str	r1, [r7, #8]
 801301e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013020:	2300      	movs	r3, #0
 8013022:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8013024:	f7fd fa9c 	bl	8010560 <HAL_GetTick>
 8013028:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 801302a:	68fb      	ldr	r3, [r7, #12]
 801302c:	681b      	ldr	r3, [r3, #0]
 801302e:	3320      	adds	r3, #32
 8013030:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8013032:	68fb      	ldr	r3, [r7, #12]
 8013034:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013038:	b2db      	uxtb	r3, r3
 801303a:	2b01      	cmp	r3, #1
 801303c:	d101      	bne.n	8013042 <HAL_QSPI_Transmit+0x2e>
 801303e:	2302      	movs	r3, #2
 8013040:	e076      	b.n	8013130 <HAL_QSPI_Transmit+0x11c>
 8013042:	68fb      	ldr	r3, [r7, #12]
 8013044:	2201      	movs	r2, #1
 8013046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013050:	b2db      	uxtb	r3, r3
 8013052:	2b01      	cmp	r3, #1
 8013054:	d165      	bne.n	8013122 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	2200      	movs	r2, #0
 801305a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 801305c:	68bb      	ldr	r3, [r7, #8]
 801305e:	2b00      	cmp	r3, #0
 8013060:	d056      	beq.n	8013110 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8013062:	68fb      	ldr	r3, [r7, #12]
 8013064:	2212      	movs	r2, #18
 8013066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 801306a:	68fb      	ldr	r3, [r7, #12]
 801306c:	681b      	ldr	r3, [r3, #0]
 801306e:	691b      	ldr	r3, [r3, #16]
 8013070:	1c5a      	adds	r2, r3, #1
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8013076:	68fb      	ldr	r3, [r7, #12]
 8013078:	681b      	ldr	r3, [r3, #0]
 801307a:	691b      	ldr	r3, [r3, #16]
 801307c:	1c5a      	adds	r2, r3, #1
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	68ba      	ldr	r2, [r7, #8]
 8013086:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8013088:	68fb      	ldr	r3, [r7, #12]
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	695a      	ldr	r2, [r3, #20]
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8013096:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8013098:	e01b      	b.n	80130d2 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	9300      	str	r3, [sp, #0]
 801309e:	69bb      	ldr	r3, [r7, #24]
 80130a0:	2201      	movs	r2, #1
 80130a2:	2104      	movs	r1, #4
 80130a4:	68f8      	ldr	r0, [r7, #12]
 80130a6:	f000 fa4e 	bl	8013546 <QSPI_WaitFlagStateUntilTimeout>
 80130aa:	4603      	mov	r3, r0
 80130ac:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80130ae:	7ffb      	ldrb	r3, [r7, #31]
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d113      	bne.n	80130dc <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130b8:	781a      	ldrb	r2, [r3, #0]
 80130ba:	697b      	ldr	r3, [r7, #20]
 80130bc:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 80130be:	68fb      	ldr	r3, [r7, #12]
 80130c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130c2:	1c5a      	adds	r2, r3, #1
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 80130c8:	68fb      	ldr	r3, [r7, #12]
 80130ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130cc:	1e5a      	subs	r2, r3, #1
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d1df      	bne.n	801309a <HAL_QSPI_Transmit+0x86>
 80130da:	e000      	b.n	80130de <HAL_QSPI_Transmit+0xca>
          break;
 80130dc:	bf00      	nop
      }

      if (status == HAL_OK)
 80130de:	7ffb      	ldrb	r3, [r7, #31]
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d110      	bne.n	8013106 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	9300      	str	r3, [sp, #0]
 80130e8:	69bb      	ldr	r3, [r7, #24]
 80130ea:	2201      	movs	r2, #1
 80130ec:	2102      	movs	r1, #2
 80130ee:	68f8      	ldr	r0, [r7, #12]
 80130f0:	f000 fa29 	bl	8013546 <QSPI_WaitFlagStateUntilTimeout>
 80130f4:	4603      	mov	r3, r0
 80130f6:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80130f8:	7ffb      	ldrb	r3, [r7, #31]
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d103      	bne.n	8013106 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	2202      	movs	r2, #2
 8013104:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	2201      	movs	r2, #1
 801310a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801310e:	e00a      	b.n	8013126 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013114:	f043 0208 	orr.w	r2, r3, #8
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 801311c:	2301      	movs	r3, #1
 801311e:	77fb      	strb	r3, [r7, #31]
 8013120:	e001      	b.n	8013126 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 8013122:	2302      	movs	r3, #2
 8013124:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8013126:	68fb      	ldr	r3, [r7, #12]
 8013128:	2200      	movs	r2, #0
 801312a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 801312e:	7ffb      	ldrb	r3, [r7, #31]
}
 8013130:	4618      	mov	r0, r3
 8013132:	3720      	adds	r7, #32
 8013134:	46bd      	mov	sp, r7
 8013136:	bd80      	pop	{r7, pc}

08013138 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8013138:	b580      	push	{r7, lr}
 801313a:	b08a      	sub	sp, #40	; 0x28
 801313c:	af02      	add	r7, sp, #8
 801313e:	60f8      	str	r0, [r7, #12]
 8013140:	60b9      	str	r1, [r7, #8]
 8013142:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013144:	2300      	movs	r3, #0
 8013146:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8013148:	f7fd fa0a 	bl	8010560 <HAL_GetTick>
 801314c:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 801314e:	68fb      	ldr	r3, [r7, #12]
 8013150:	681b      	ldr	r3, [r3, #0]
 8013152:	699b      	ldr	r3, [r3, #24]
 8013154:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8013156:	68fb      	ldr	r3, [r7, #12]
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	3320      	adds	r3, #32
 801315c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 801315e:	68fb      	ldr	r3, [r7, #12]
 8013160:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013164:	b2db      	uxtb	r3, r3
 8013166:	2b01      	cmp	r3, #1
 8013168:	d101      	bne.n	801316e <HAL_QSPI_Receive+0x36>
 801316a:	2302      	movs	r3, #2
 801316c:	e07d      	b.n	801326a <HAL_QSPI_Receive+0x132>
 801316e:	68fb      	ldr	r3, [r7, #12]
 8013170:	2201      	movs	r2, #1
 8013172:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8013176:	68fb      	ldr	r3, [r7, #12]
 8013178:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801317c:	b2db      	uxtb	r3, r3
 801317e:	2b01      	cmp	r3, #1
 8013180:	d16c      	bne.n	801325c <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	2200      	movs	r2, #0
 8013186:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8013188:	68bb      	ldr	r3, [r7, #8]
 801318a:	2b00      	cmp	r3, #0
 801318c:	d05d      	beq.n	801324a <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 801318e:	68fb      	ldr	r3, [r7, #12]
 8013190:	2222      	movs	r2, #34	; 0x22
 8013192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8013196:	68fb      	ldr	r3, [r7, #12]
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	691b      	ldr	r3, [r3, #16]
 801319c:	1c5a      	adds	r2, r3, #1
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	681b      	ldr	r3, [r3, #0]
 80131a6:	691b      	ldr	r3, [r3, #16]
 80131a8:	1c5a      	adds	r2, r3, #1
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	68ba      	ldr	r2, [r7, #8]
 80131b2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80131b4:	68fb      	ldr	r3, [r7, #12]
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	695b      	ldr	r3, [r3, #20]
 80131ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	681b      	ldr	r3, [r3, #0]
 80131c2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80131c6:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	697a      	ldr	r2, [r7, #20]
 80131ce:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 80131d0:	e01c      	b.n	801320c <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	9300      	str	r3, [sp, #0]
 80131d6:	69bb      	ldr	r3, [r7, #24]
 80131d8:	2201      	movs	r2, #1
 80131da:	2106      	movs	r1, #6
 80131dc:	68f8      	ldr	r0, [r7, #12]
 80131de:	f000 f9b2 	bl	8013546 <QSPI_WaitFlagStateUntilTimeout>
 80131e2:	4603      	mov	r3, r0
 80131e4:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 80131e6:	7ffb      	ldrb	r3, [r7, #31]
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d114      	bne.n	8013216 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80131f0:	693a      	ldr	r2, [r7, #16]
 80131f2:	7812      	ldrb	r2, [r2, #0]
 80131f4:	b2d2      	uxtb	r2, r2
 80131f6:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80131fc:	1c5a      	adds	r2, r3, #1
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 8013202:	68fb      	ldr	r3, [r7, #12]
 8013204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013206:	1e5a      	subs	r2, r3, #1
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 801320c:	68fb      	ldr	r3, [r7, #12]
 801320e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013210:	2b00      	cmp	r3, #0
 8013212:	d1de      	bne.n	80131d2 <HAL_QSPI_Receive+0x9a>
 8013214:	e000      	b.n	8013218 <HAL_QSPI_Receive+0xe0>
          break;
 8013216:	bf00      	nop
      }

      if (status == HAL_OK)
 8013218:	7ffb      	ldrb	r3, [r7, #31]
 801321a:	2b00      	cmp	r3, #0
 801321c:	d110      	bne.n	8013240 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	9300      	str	r3, [sp, #0]
 8013222:	69bb      	ldr	r3, [r7, #24]
 8013224:	2201      	movs	r2, #1
 8013226:	2102      	movs	r1, #2
 8013228:	68f8      	ldr	r0, [r7, #12]
 801322a:	f000 f98c 	bl	8013546 <QSPI_WaitFlagStateUntilTimeout>
 801322e:	4603      	mov	r3, r0
 8013230:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8013232:	7ffb      	ldrb	r3, [r7, #31]
 8013234:	2b00      	cmp	r3, #0
 8013236:	d103      	bne.n	8013240 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8013238:	68fb      	ldr	r3, [r7, #12]
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	2202      	movs	r2, #2
 801323e:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8013240:	68fb      	ldr	r3, [r7, #12]
 8013242:	2201      	movs	r2, #1
 8013244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8013248:	e00a      	b.n	8013260 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 801324a:	68fb      	ldr	r3, [r7, #12]
 801324c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801324e:	f043 0208 	orr.w	r2, r3, #8
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8013256:	2301      	movs	r3, #1
 8013258:	77fb      	strb	r3, [r7, #31]
 801325a:	e001      	b.n	8013260 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 801325c:	2302      	movs	r3, #2
 801325e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	2200      	movs	r2, #0
 8013264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8013268:	7ffb      	ldrb	r3, [r7, #31]
}
 801326a:	4618      	mov	r0, r3
 801326c:	3720      	adds	r7, #32
 801326e:	46bd      	mov	sp, r7
 8013270:	bd80      	pop	{r7, pc}

08013272 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8013272:	b580      	push	{r7, lr}
 8013274:	b088      	sub	sp, #32
 8013276:	af02      	add	r7, sp, #8
 8013278:	60f8      	str	r0, [r7, #12]
 801327a:	60b9      	str	r1, [r7, #8]
 801327c:	607a      	str	r2, [r7, #4]
 801327e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8013280:	f7fd f96e 	bl	8010560 <HAL_GetTick>
 8013284:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801328c:	b2db      	uxtb	r3, r3
 801328e:	2b01      	cmp	r3, #1
 8013290:	d101      	bne.n	8013296 <HAL_QSPI_AutoPolling+0x24>
 8013292:	2302      	movs	r3, #2
 8013294:	e060      	b.n	8013358 <HAL_QSPI_AutoPolling+0xe6>
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	2201      	movs	r2, #1
 801329a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 801329e:	68fb      	ldr	r3, [r7, #12]
 80132a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80132a4:	b2db      	uxtb	r3, r3
 80132a6:	2b01      	cmp	r3, #1
 80132a8:	d14f      	bne.n	801334a <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	2200      	movs	r2, #0
 80132ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80132b0:	68fb      	ldr	r3, [r7, #12]
 80132b2:	2242      	movs	r2, #66	; 0x42
 80132b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80132b8:	683b      	ldr	r3, [r7, #0]
 80132ba:	9300      	str	r3, [sp, #0]
 80132bc:	693b      	ldr	r3, [r7, #16]
 80132be:	2200      	movs	r2, #0
 80132c0:	2120      	movs	r1, #32
 80132c2:	68f8      	ldr	r0, [r7, #12]
 80132c4:	f000 f93f 	bl	8013546 <QSPI_WaitFlagStateUntilTimeout>
 80132c8:	4603      	mov	r3, r0
 80132ca:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80132cc:	7dfb      	ldrb	r3, [r7, #23]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d13d      	bne.n	801334e <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	687a      	ldr	r2, [r7, #4]
 80132d8:	6812      	ldr	r2, [r2, #0]
 80132da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 80132dc:	68fb      	ldr	r3, [r7, #12]
 80132de:	681b      	ldr	r3, [r3, #0]
 80132e0:	687a      	ldr	r2, [r7, #4]
 80132e2:	6852      	ldr	r2, [r2, #4]
 80132e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	681b      	ldr	r3, [r3, #0]
 80132ea:	687a      	ldr	r2, [r7, #4]
 80132ec:	6892      	ldr	r2, [r2, #8]
 80132ee:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	691b      	ldr	r3, [r3, #16]
 80132fe:	431a      	orrs	r2, r3
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8013308:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	68da      	ldr	r2, [r3, #12]
 801330e:	68bb      	ldr	r3, [r7, #8]
 8013310:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8013312:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8013316:	68b9      	ldr	r1, [r7, #8]
 8013318:	68f8      	ldr	r0, [r7, #12]
 801331a:	f000 f94b 	bl	80135b4 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 801331e:	683b      	ldr	r3, [r7, #0]
 8013320:	9300      	str	r3, [sp, #0]
 8013322:	693b      	ldr	r3, [r7, #16]
 8013324:	2201      	movs	r2, #1
 8013326:	2108      	movs	r1, #8
 8013328:	68f8      	ldr	r0, [r7, #12]
 801332a:	f000 f90c 	bl	8013546 <QSPI_WaitFlagStateUntilTimeout>
 801332e:	4603      	mov	r3, r0
 8013330:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8013332:	7dfb      	ldrb	r3, [r7, #23]
 8013334:	2b00      	cmp	r3, #0
 8013336:	d10a      	bne.n	801334e <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	681b      	ldr	r3, [r3, #0]
 801333c:	2208      	movs	r2, #8
 801333e:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8013340:	68fb      	ldr	r3, [r7, #12]
 8013342:	2201      	movs	r2, #1
 8013344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8013348:	e001      	b.n	801334e <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 801334a:	2302      	movs	r3, #2
 801334c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	2200      	movs	r2, #0
 8013352:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8013356:	7dfb      	ldrb	r3, [r7, #23]
}
 8013358:	4618      	mov	r0, r3
 801335a:	3718      	adds	r7, #24
 801335c:	46bd      	mov	sp, r7
 801335e:	bd80      	pop	{r7, pc}

08013360 <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 8013360:	b580      	push	{r7, lr}
 8013362:	b088      	sub	sp, #32
 8013364:	af02      	add	r7, sp, #8
 8013366:	60f8      	str	r0, [r7, #12]
 8013368:	60b9      	str	r1, [r7, #8]
 801336a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 801336c:	f7fd f8f8 	bl	8010560 <HAL_GetTick>
 8013370:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8013372:	68fb      	ldr	r3, [r7, #12]
 8013374:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013378:	b2db      	uxtb	r3, r3
 801337a:	2b01      	cmp	r3, #1
 801337c:	d101      	bne.n	8013382 <HAL_QSPI_MemoryMapped+0x22>
 801337e:	2302      	movs	r3, #2
 8013380:	e04c      	b.n	801341c <HAL_QSPI_MemoryMapped+0xbc>
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	2201      	movs	r2, #1
 8013386:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013390:	b2db      	uxtb	r3, r3
 8013392:	2b01      	cmp	r3, #1
 8013394:	d13b      	bne.n	801340e <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8013396:	68fb      	ldr	r3, [r7, #12]
 8013398:	2200      	movs	r2, #0
 801339a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	2282      	movs	r2, #130	; 0x82
 80133a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80133a4:	68fb      	ldr	r3, [r7, #12]
 80133a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80133a8:	9300      	str	r3, [sp, #0]
 80133aa:	693b      	ldr	r3, [r7, #16]
 80133ac:	2200      	movs	r2, #0
 80133ae:	2120      	movs	r1, #32
 80133b0:	68f8      	ldr	r0, [r7, #12]
 80133b2:	f000 f8c8 	bl	8013546 <QSPI_WaitFlagStateUntilTimeout>
 80133b6:	4603      	mov	r3, r0
 80133b8:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80133ba:	7dfb      	ldrb	r3, [r7, #23]
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d128      	bne.n	8013412 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 80133c0:	68fb      	ldr	r3, [r7, #12]
 80133c2:	681b      	ldr	r3, [r3, #0]
 80133c4:	681b      	ldr	r3, [r3, #0]
 80133c6:	f023 0108 	bic.w	r1, r3, #8
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	685a      	ldr	r2, [r3, #4]
 80133ce:	68fb      	ldr	r3, [r7, #12]
 80133d0:	681b      	ldr	r3, [r3, #0]
 80133d2:	430a      	orrs	r2, r1
 80133d4:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	685b      	ldr	r3, [r3, #4]
 80133da:	2b08      	cmp	r3, #8
 80133dc:	d110      	bne.n	8013400 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 80133de:	68fb      	ldr	r3, [r7, #12]
 80133e0:	681b      	ldr	r3, [r3, #0]
 80133e2:	687a      	ldr	r2, [r7, #4]
 80133e4:	6812      	ldr	r2, [r2, #0]
 80133e6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	681b      	ldr	r3, [r3, #0]
 80133ec:	2210      	movs	r2, #16
 80133ee:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 80133f0:	68fb      	ldr	r3, [r7, #12]
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	681a      	ldr	r2, [r3, #0]
 80133f6:	68fb      	ldr	r3, [r7, #12]
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80133fe:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8013400:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8013404:	68b9      	ldr	r1, [r7, #8]
 8013406:	68f8      	ldr	r0, [r7, #12]
 8013408:	f000 f8d4 	bl	80135b4 <QSPI_Config>
 801340c:	e001      	b.n	8013412 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 801340e:	2302      	movs	r3, #2
 8013410:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8013412:	68fb      	ldr	r3, [r7, #12]
 8013414:	2200      	movs	r2, #0
 8013416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 801341a:	7dfb      	ldrb	r3, [r7, #23]
}
 801341c:	4618      	mov	r0, r3
 801341e:	3718      	adds	r7, #24
 8013420:	46bd      	mov	sp, r7
 8013422:	bd80      	pop	{r7, pc}

08013424 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 8013424:	b480      	push	{r7}
 8013426:	b083      	sub	sp, #12
 8013428:	af00      	add	r7, sp, #0
 801342a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 801342c:	bf00      	nop
 801342e:	370c      	adds	r7, #12
 8013430:	46bd      	mov	sp, r7
 8013432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013436:	4770      	bx	lr

08013438 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8013438:	b480      	push	{r7}
 801343a:	b083      	sub	sp, #12
 801343c:	af00      	add	r7, sp, #0
 801343e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8013440:	bf00      	nop
 8013442:	370c      	adds	r7, #12
 8013444:	46bd      	mov	sp, r7
 8013446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801344a:	4770      	bx	lr

0801344c <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 801344c:	b480      	push	{r7}
 801344e:	b083      	sub	sp, #12
 8013450:	af00      	add	r7, sp, #0
 8013452:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 8013454:	bf00      	nop
 8013456:	370c      	adds	r7, #12
 8013458:	46bd      	mov	sp, r7
 801345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801345e:	4770      	bx	lr

08013460 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8013460:	b480      	push	{r7}
 8013462:	b083      	sub	sp, #12
 8013464:	af00      	add	r7, sp, #0
 8013466:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 8013468:	bf00      	nop
 801346a:	370c      	adds	r7, #12
 801346c:	46bd      	mov	sp, r7
 801346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013472:	4770      	bx	lr

08013474 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8013474:	b480      	push	{r7}
 8013476:	b083      	sub	sp, #12
 8013478:	af00      	add	r7, sp, #0
 801347a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 801347c:	bf00      	nop
 801347e:	370c      	adds	r7, #12
 8013480:	46bd      	mov	sp, r7
 8013482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013486:	4770      	bx	lr

08013488 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 8013488:	b480      	push	{r7}
 801348a:	b083      	sub	sp, #12
 801348c:	af00      	add	r7, sp, #0
 801348e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8013490:	bf00      	nop
 8013492:	370c      	adds	r7, #12
 8013494:	46bd      	mov	sp, r7
 8013496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801349a:	4770      	bx	lr

0801349c <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 801349c:	b480      	push	{r7}
 801349e:	b083      	sub	sp, #12
 80134a0:	af00      	add	r7, sp, #0
 80134a2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 80134a4:	bf00      	nop
 80134a6:	370c      	adds	r7, #12
 80134a8:	46bd      	mov	sp, r7
 80134aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ae:	4770      	bx	lr

080134b0 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 80134b0:	b480      	push	{r7}
 80134b2:	b083      	sub	sp, #12
 80134b4:	af00      	add	r7, sp, #0
 80134b6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 80134b8:	bf00      	nop
 80134ba:	370c      	adds	r7, #12
 80134bc:	46bd      	mov	sp, r7
 80134be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134c2:	4770      	bx	lr

080134c4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80134c4:	b480      	push	{r7}
 80134c6:	b083      	sub	sp, #12
 80134c8:	af00      	add	r7, sp, #0
 80134ca:	6078      	str	r0, [r7, #4]
 80134cc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	683a      	ldr	r2, [r7, #0]
 80134d2:	649a      	str	r2, [r3, #72]	; 0x48
}
 80134d4:	bf00      	nop
 80134d6:	370c      	adds	r7, #12
 80134d8:	46bd      	mov	sp, r7
 80134da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134de:	4770      	bx	lr

080134e0 <QSPI_DMAAbortCplt>:
  * @brief  MDMA QSPI abort complete callback.
  * @param  hmdma MDMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 80134e0:	b580      	push	{r7, lr}
 80134e2:	b084      	sub	sp, #16
 80134e4:	af00      	add	r7, sp, #0
 80134e6:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hmdma->Parent);
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134ec:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 80134ee:	68fb      	ldr	r3, [r7, #12]
 80134f0:	2200      	movs	r2, #0
 80134f2:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 80134f4:	68fb      	ldr	r3, [r7, #12]
 80134f6:	2200      	movs	r2, #0
 80134f8:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 80134fa:	68fb      	ldr	r3, [r7, #12]
 80134fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013500:	b2db      	uxtb	r3, r3
 8013502:	2b08      	cmp	r3, #8
 8013504:	d114      	bne.n	8013530 <QSPI_DMAAbortCplt+0x50>
  {
    /* MDMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8013506:	68fb      	ldr	r3, [r7, #12]
 8013508:	681b      	ldr	r3, [r3, #0]
 801350a:	2202      	movs	r2, #2
 801350c:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 801350e:	68fb      	ldr	r3, [r7, #12]
 8013510:	681b      	ldr	r3, [r3, #0]
 8013512:	681a      	ldr	r2, [r3, #0]
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 801351c:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 801351e:	68fb      	ldr	r3, [r7, #12]
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	681a      	ldr	r2, [r3, #0]
 8013524:	68fb      	ldr	r3, [r7, #12]
 8013526:	681b      	ldr	r3, [r3, #0]
 8013528:	f042 0202 	orr.w	r2, r2, #2
 801352c:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 801352e:	e006      	b.n	801353e <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	2201      	movs	r2, #1
 8013534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 8013538:	68f8      	ldr	r0, [r7, #12]
 801353a:	f7ff ff73 	bl	8013424 <HAL_QSPI_ErrorCallback>
}
 801353e:	bf00      	nop
 8013540:	3710      	adds	r7, #16
 8013542:	46bd      	mov	sp, r7
 8013544:	bd80      	pop	{r7, pc}

08013546 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8013546:	b580      	push	{r7, lr}
 8013548:	b084      	sub	sp, #16
 801354a:	af00      	add	r7, sp, #0
 801354c:	60f8      	str	r0, [r7, #12]
 801354e:	60b9      	str	r1, [r7, #8]
 8013550:	603b      	str	r3, [r7, #0]
 8013552:	4613      	mov	r3, r2
 8013554:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8013556:	e01a      	b.n	801358e <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013558:	69bb      	ldr	r3, [r7, #24]
 801355a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801355e:	d016      	beq.n	801358e <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013560:	f7fc fffe 	bl	8010560 <HAL_GetTick>
 8013564:	4602      	mov	r2, r0
 8013566:	683b      	ldr	r3, [r7, #0]
 8013568:	1ad3      	subs	r3, r2, r3
 801356a:	69ba      	ldr	r2, [r7, #24]
 801356c:	429a      	cmp	r2, r3
 801356e:	d302      	bcc.n	8013576 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8013570:	69bb      	ldr	r3, [r7, #24]
 8013572:	2b00      	cmp	r3, #0
 8013574:	d10b      	bne.n	801358e <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	2204      	movs	r2, #4
 801357a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 801357e:	68fb      	ldr	r3, [r7, #12]
 8013580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013582:	f043 0201 	orr.w	r2, r3, #1
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 801358a:	2301      	movs	r3, #1
 801358c:	e00e      	b.n	80135ac <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 801358e:	68fb      	ldr	r3, [r7, #12]
 8013590:	681b      	ldr	r3, [r3, #0]
 8013592:	689a      	ldr	r2, [r3, #8]
 8013594:	68bb      	ldr	r3, [r7, #8]
 8013596:	4013      	ands	r3, r2
 8013598:	2b00      	cmp	r3, #0
 801359a:	bf14      	ite	ne
 801359c:	2301      	movne	r3, #1
 801359e:	2300      	moveq	r3, #0
 80135a0:	b2db      	uxtb	r3, r3
 80135a2:	461a      	mov	r2, r3
 80135a4:	79fb      	ldrb	r3, [r7, #7]
 80135a6:	429a      	cmp	r2, r3
 80135a8:	d1d6      	bne.n	8013558 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80135aa:	2300      	movs	r3, #0
}
 80135ac:	4618      	mov	r0, r3
 80135ae:	3710      	adds	r7, #16
 80135b0:	46bd      	mov	sp, r7
 80135b2:	bd80      	pop	{r7, pc}

080135b4 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 80135b4:	b480      	push	{r7}
 80135b6:	b085      	sub	sp, #20
 80135b8:	af00      	add	r7, sp, #0
 80135ba:	60f8      	str	r0, [r7, #12]
 80135bc:	60b9      	str	r1, [r7, #8]
 80135be:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 80135c0:	68bb      	ldr	r3, [r7, #8]
 80135c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d009      	beq.n	80135dc <QSPI_Config+0x28>
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80135ce:	d005      	beq.n	80135dc <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80135d0:	68bb      	ldr	r3, [r7, #8]
 80135d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	3a01      	subs	r2, #1
 80135da:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80135dc:	68bb      	ldr	r3, [r7, #8]
 80135de:	699b      	ldr	r3, [r3, #24]
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	f000 80b9 	beq.w	8013758 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80135e6:	68bb      	ldr	r3, [r7, #8]
 80135e8:	6a1b      	ldr	r3, [r3, #32]
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d05f      	beq.n	80136ae <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	68ba      	ldr	r2, [r7, #8]
 80135f4:	6892      	ldr	r2, [r2, #8]
 80135f6:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80135f8:	68bb      	ldr	r3, [r7, #8]
 80135fa:	69db      	ldr	r3, [r3, #28]
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d031      	beq.n	8013664 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8013600:	68bb      	ldr	r3, [r7, #8]
 8013602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013604:	68bb      	ldr	r3, [r7, #8]
 8013606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013608:	431a      	orrs	r2, r3
 801360a:	68bb      	ldr	r3, [r7, #8]
 801360c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801360e:	431a      	orrs	r2, r3
 8013610:	68bb      	ldr	r3, [r7, #8]
 8013612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013614:	431a      	orrs	r2, r3
 8013616:	68bb      	ldr	r3, [r7, #8]
 8013618:	695b      	ldr	r3, [r3, #20]
 801361a:	049b      	lsls	r3, r3, #18
 801361c:	431a      	orrs	r2, r3
 801361e:	68bb      	ldr	r3, [r7, #8]
 8013620:	691b      	ldr	r3, [r3, #16]
 8013622:	431a      	orrs	r2, r3
 8013624:	68bb      	ldr	r3, [r7, #8]
 8013626:	6a1b      	ldr	r3, [r3, #32]
 8013628:	431a      	orrs	r2, r3
 801362a:	68bb      	ldr	r3, [r7, #8]
 801362c:	68db      	ldr	r3, [r3, #12]
 801362e:	431a      	orrs	r2, r3
 8013630:	68bb      	ldr	r3, [r7, #8]
 8013632:	69db      	ldr	r3, [r3, #28]
 8013634:	431a      	orrs	r2, r3
 8013636:	68bb      	ldr	r3, [r7, #8]
 8013638:	699b      	ldr	r3, [r3, #24]
 801363a:	431a      	orrs	r2, r3
 801363c:	68bb      	ldr	r3, [r7, #8]
 801363e:	681b      	ldr	r3, [r3, #0]
 8013640:	ea42 0103 	orr.w	r1, r2, r3
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	681b      	ldr	r3, [r3, #0]
 8013648:	687a      	ldr	r2, [r7, #4]
 801364a:	430a      	orrs	r2, r1
 801364c:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8013654:	f000 812e 	beq.w	80138b4 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8013658:	68fb      	ldr	r3, [r7, #12]
 801365a:	681b      	ldr	r3, [r3, #0]
 801365c:	68ba      	ldr	r2, [r7, #8]
 801365e:	6852      	ldr	r2, [r2, #4]
 8013660:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8013662:	e127      	b.n	80138b4 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8013664:	68bb      	ldr	r3, [r7, #8]
 8013666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013668:	68bb      	ldr	r3, [r7, #8]
 801366a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801366c:	431a      	orrs	r2, r3
 801366e:	68bb      	ldr	r3, [r7, #8]
 8013670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013672:	431a      	orrs	r2, r3
 8013674:	68bb      	ldr	r3, [r7, #8]
 8013676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013678:	431a      	orrs	r2, r3
 801367a:	68bb      	ldr	r3, [r7, #8]
 801367c:	695b      	ldr	r3, [r3, #20]
 801367e:	049b      	lsls	r3, r3, #18
 8013680:	431a      	orrs	r2, r3
 8013682:	68bb      	ldr	r3, [r7, #8]
 8013684:	691b      	ldr	r3, [r3, #16]
 8013686:	431a      	orrs	r2, r3
 8013688:	68bb      	ldr	r3, [r7, #8]
 801368a:	6a1b      	ldr	r3, [r3, #32]
 801368c:	431a      	orrs	r2, r3
 801368e:	68bb      	ldr	r3, [r7, #8]
 8013690:	69db      	ldr	r3, [r3, #28]
 8013692:	431a      	orrs	r2, r3
 8013694:	68bb      	ldr	r3, [r7, #8]
 8013696:	699b      	ldr	r3, [r3, #24]
 8013698:	431a      	orrs	r2, r3
 801369a:	68bb      	ldr	r3, [r7, #8]
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	ea42 0103 	orr.w	r1, r2, r3
 80136a2:	68fb      	ldr	r3, [r7, #12]
 80136a4:	681b      	ldr	r3, [r3, #0]
 80136a6:	687a      	ldr	r2, [r7, #4]
 80136a8:	430a      	orrs	r2, r1
 80136aa:	615a      	str	r2, [r3, #20]
}
 80136ac:	e102      	b.n	80138b4 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80136ae:	68bb      	ldr	r3, [r7, #8]
 80136b0:	69db      	ldr	r3, [r3, #28]
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d02e      	beq.n	8013714 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80136b6:	68bb      	ldr	r3, [r7, #8]
 80136b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80136ba:	68bb      	ldr	r3, [r7, #8]
 80136bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80136be:	431a      	orrs	r2, r3
 80136c0:	68bb      	ldr	r3, [r7, #8]
 80136c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80136c4:	431a      	orrs	r2, r3
 80136c6:	68bb      	ldr	r3, [r7, #8]
 80136c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136ca:	431a      	orrs	r2, r3
 80136cc:	68bb      	ldr	r3, [r7, #8]
 80136ce:	695b      	ldr	r3, [r3, #20]
 80136d0:	049b      	lsls	r3, r3, #18
 80136d2:	431a      	orrs	r2, r3
 80136d4:	68bb      	ldr	r3, [r7, #8]
 80136d6:	6a1b      	ldr	r3, [r3, #32]
 80136d8:	431a      	orrs	r2, r3
 80136da:	68bb      	ldr	r3, [r7, #8]
 80136dc:	68db      	ldr	r3, [r3, #12]
 80136de:	431a      	orrs	r2, r3
 80136e0:	68bb      	ldr	r3, [r7, #8]
 80136e2:	69db      	ldr	r3, [r3, #28]
 80136e4:	431a      	orrs	r2, r3
 80136e6:	68bb      	ldr	r3, [r7, #8]
 80136e8:	699b      	ldr	r3, [r3, #24]
 80136ea:	431a      	orrs	r2, r3
 80136ec:	68bb      	ldr	r3, [r7, #8]
 80136ee:	681b      	ldr	r3, [r3, #0]
 80136f0:	ea42 0103 	orr.w	r1, r2, r3
 80136f4:	68fb      	ldr	r3, [r7, #12]
 80136f6:	681b      	ldr	r3, [r3, #0]
 80136f8:	687a      	ldr	r2, [r7, #4]
 80136fa:	430a      	orrs	r2, r1
 80136fc:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8013704:	f000 80d6 	beq.w	80138b4 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	681b      	ldr	r3, [r3, #0]
 801370c:	68ba      	ldr	r2, [r7, #8]
 801370e:	6852      	ldr	r2, [r2, #4]
 8013710:	619a      	str	r2, [r3, #24]
}
 8013712:	e0cf      	b.n	80138b4 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8013714:	68bb      	ldr	r3, [r7, #8]
 8013716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013718:	68bb      	ldr	r3, [r7, #8]
 801371a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801371c:	431a      	orrs	r2, r3
 801371e:	68bb      	ldr	r3, [r7, #8]
 8013720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013722:	431a      	orrs	r2, r3
 8013724:	68bb      	ldr	r3, [r7, #8]
 8013726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013728:	431a      	orrs	r2, r3
 801372a:	68bb      	ldr	r3, [r7, #8]
 801372c:	695b      	ldr	r3, [r3, #20]
 801372e:	049b      	lsls	r3, r3, #18
 8013730:	431a      	orrs	r2, r3
 8013732:	68bb      	ldr	r3, [r7, #8]
 8013734:	6a1b      	ldr	r3, [r3, #32]
 8013736:	431a      	orrs	r2, r3
 8013738:	68bb      	ldr	r3, [r7, #8]
 801373a:	69db      	ldr	r3, [r3, #28]
 801373c:	431a      	orrs	r2, r3
 801373e:	68bb      	ldr	r3, [r7, #8]
 8013740:	699b      	ldr	r3, [r3, #24]
 8013742:	431a      	orrs	r2, r3
 8013744:	68bb      	ldr	r3, [r7, #8]
 8013746:	681b      	ldr	r3, [r3, #0]
 8013748:	ea42 0103 	orr.w	r1, r2, r3
 801374c:	68fb      	ldr	r3, [r7, #12]
 801374e:	681b      	ldr	r3, [r3, #0]
 8013750:	687a      	ldr	r2, [r7, #4]
 8013752:	430a      	orrs	r2, r1
 8013754:	615a      	str	r2, [r3, #20]
}
 8013756:	e0ad      	b.n	80138b4 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8013758:	68bb      	ldr	r3, [r7, #8]
 801375a:	6a1b      	ldr	r3, [r3, #32]
 801375c:	2b00      	cmp	r3, #0
 801375e:	d058      	beq.n	8013812 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8013760:	68fb      	ldr	r3, [r7, #12]
 8013762:	681b      	ldr	r3, [r3, #0]
 8013764:	68ba      	ldr	r2, [r7, #8]
 8013766:	6892      	ldr	r2, [r2, #8]
 8013768:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 801376a:	68bb      	ldr	r3, [r7, #8]
 801376c:	69db      	ldr	r3, [r3, #28]
 801376e:	2b00      	cmp	r3, #0
 8013770:	d02d      	beq.n	80137ce <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8013772:	68bb      	ldr	r3, [r7, #8]
 8013774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013776:	68bb      	ldr	r3, [r7, #8]
 8013778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801377a:	431a      	orrs	r2, r3
 801377c:	68bb      	ldr	r3, [r7, #8]
 801377e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013780:	431a      	orrs	r2, r3
 8013782:	68bb      	ldr	r3, [r7, #8]
 8013784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013786:	431a      	orrs	r2, r3
 8013788:	68bb      	ldr	r3, [r7, #8]
 801378a:	695b      	ldr	r3, [r3, #20]
 801378c:	049b      	lsls	r3, r3, #18
 801378e:	431a      	orrs	r2, r3
 8013790:	68bb      	ldr	r3, [r7, #8]
 8013792:	691b      	ldr	r3, [r3, #16]
 8013794:	431a      	orrs	r2, r3
 8013796:	68bb      	ldr	r3, [r7, #8]
 8013798:	6a1b      	ldr	r3, [r3, #32]
 801379a:	431a      	orrs	r2, r3
 801379c:	68bb      	ldr	r3, [r7, #8]
 801379e:	68db      	ldr	r3, [r3, #12]
 80137a0:	431a      	orrs	r2, r3
 80137a2:	68bb      	ldr	r3, [r7, #8]
 80137a4:	69db      	ldr	r3, [r3, #28]
 80137a6:	431a      	orrs	r2, r3
 80137a8:	68bb      	ldr	r3, [r7, #8]
 80137aa:	699b      	ldr	r3, [r3, #24]
 80137ac:	ea42 0103 	orr.w	r1, r2, r3
 80137b0:	68fb      	ldr	r3, [r7, #12]
 80137b2:	681b      	ldr	r3, [r3, #0]
 80137b4:	687a      	ldr	r2, [r7, #4]
 80137b6:	430a      	orrs	r2, r1
 80137b8:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80137c0:	d078      	beq.n	80138b4 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80137c2:	68fb      	ldr	r3, [r7, #12]
 80137c4:	681b      	ldr	r3, [r3, #0]
 80137c6:	68ba      	ldr	r2, [r7, #8]
 80137c8:	6852      	ldr	r2, [r2, #4]
 80137ca:	619a      	str	r2, [r3, #24]
}
 80137cc:	e072      	b.n	80138b4 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80137ce:	68bb      	ldr	r3, [r7, #8]
 80137d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137d2:	68bb      	ldr	r3, [r7, #8]
 80137d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80137d6:	431a      	orrs	r2, r3
 80137d8:	68bb      	ldr	r3, [r7, #8]
 80137da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80137dc:	431a      	orrs	r2, r3
 80137de:	68bb      	ldr	r3, [r7, #8]
 80137e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137e2:	431a      	orrs	r2, r3
 80137e4:	68bb      	ldr	r3, [r7, #8]
 80137e6:	695b      	ldr	r3, [r3, #20]
 80137e8:	049b      	lsls	r3, r3, #18
 80137ea:	431a      	orrs	r2, r3
 80137ec:	68bb      	ldr	r3, [r7, #8]
 80137ee:	691b      	ldr	r3, [r3, #16]
 80137f0:	431a      	orrs	r2, r3
 80137f2:	68bb      	ldr	r3, [r7, #8]
 80137f4:	6a1b      	ldr	r3, [r3, #32]
 80137f6:	431a      	orrs	r2, r3
 80137f8:	68bb      	ldr	r3, [r7, #8]
 80137fa:	69db      	ldr	r3, [r3, #28]
 80137fc:	431a      	orrs	r2, r3
 80137fe:	68bb      	ldr	r3, [r7, #8]
 8013800:	699b      	ldr	r3, [r3, #24]
 8013802:	ea42 0103 	orr.w	r1, r2, r3
 8013806:	68fb      	ldr	r3, [r7, #12]
 8013808:	681b      	ldr	r3, [r3, #0]
 801380a:	687a      	ldr	r2, [r7, #4]
 801380c:	430a      	orrs	r2, r1
 801380e:	615a      	str	r2, [r3, #20]
}
 8013810:	e050      	b.n	80138b4 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8013812:	68bb      	ldr	r3, [r7, #8]
 8013814:	69db      	ldr	r3, [r3, #28]
 8013816:	2b00      	cmp	r3, #0
 8013818:	d02a      	beq.n	8013870 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 801381a:	68bb      	ldr	r3, [r7, #8]
 801381c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801381e:	68bb      	ldr	r3, [r7, #8]
 8013820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013822:	431a      	orrs	r2, r3
 8013824:	68bb      	ldr	r3, [r7, #8]
 8013826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013828:	431a      	orrs	r2, r3
 801382a:	68bb      	ldr	r3, [r7, #8]
 801382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801382e:	431a      	orrs	r2, r3
 8013830:	68bb      	ldr	r3, [r7, #8]
 8013832:	695b      	ldr	r3, [r3, #20]
 8013834:	049b      	lsls	r3, r3, #18
 8013836:	431a      	orrs	r2, r3
 8013838:	68bb      	ldr	r3, [r7, #8]
 801383a:	6a1b      	ldr	r3, [r3, #32]
 801383c:	431a      	orrs	r2, r3
 801383e:	68bb      	ldr	r3, [r7, #8]
 8013840:	68db      	ldr	r3, [r3, #12]
 8013842:	431a      	orrs	r2, r3
 8013844:	68bb      	ldr	r3, [r7, #8]
 8013846:	69db      	ldr	r3, [r3, #28]
 8013848:	431a      	orrs	r2, r3
 801384a:	68bb      	ldr	r3, [r7, #8]
 801384c:	699b      	ldr	r3, [r3, #24]
 801384e:	ea42 0103 	orr.w	r1, r2, r3
 8013852:	68fb      	ldr	r3, [r7, #12]
 8013854:	681b      	ldr	r3, [r3, #0]
 8013856:	687a      	ldr	r2, [r7, #4]
 8013858:	430a      	orrs	r2, r1
 801385a:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8013862:	d027      	beq.n	80138b4 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8013864:	68fb      	ldr	r3, [r7, #12]
 8013866:	681b      	ldr	r3, [r3, #0]
 8013868:	68ba      	ldr	r2, [r7, #8]
 801386a:	6852      	ldr	r2, [r2, #4]
 801386c:	619a      	str	r2, [r3, #24]
}
 801386e:	e021      	b.n	80138b4 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8013870:	68bb      	ldr	r3, [r7, #8]
 8013872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013874:	2b00      	cmp	r3, #0
 8013876:	d01d      	beq.n	80138b4 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8013878:	68bb      	ldr	r3, [r7, #8]
 801387a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801387c:	68bb      	ldr	r3, [r7, #8]
 801387e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013880:	431a      	orrs	r2, r3
 8013882:	68bb      	ldr	r3, [r7, #8]
 8013884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013886:	431a      	orrs	r2, r3
 8013888:	68bb      	ldr	r3, [r7, #8]
 801388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801388c:	431a      	orrs	r2, r3
 801388e:	68bb      	ldr	r3, [r7, #8]
 8013890:	695b      	ldr	r3, [r3, #20]
 8013892:	049b      	lsls	r3, r3, #18
 8013894:	431a      	orrs	r2, r3
 8013896:	68bb      	ldr	r3, [r7, #8]
 8013898:	6a1b      	ldr	r3, [r3, #32]
 801389a:	431a      	orrs	r2, r3
 801389c:	68bb      	ldr	r3, [r7, #8]
 801389e:	69db      	ldr	r3, [r3, #28]
 80138a0:	431a      	orrs	r2, r3
 80138a2:	68bb      	ldr	r3, [r7, #8]
 80138a4:	699b      	ldr	r3, [r3, #24]
 80138a6:	ea42 0103 	orr.w	r1, r2, r3
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	681b      	ldr	r3, [r3, #0]
 80138ae:	687a      	ldr	r2, [r7, #4]
 80138b0:	430a      	orrs	r2, r1
 80138b2:	615a      	str	r2, [r3, #20]
}
 80138b4:	bf00      	nop
 80138b6:	3714      	adds	r7, #20
 80138b8:	46bd      	mov	sp, r7
 80138ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138be:	4770      	bx	lr

080138c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80138c0:	b580      	push	{r7, lr}
 80138c2:	b08c      	sub	sp, #48	; 0x30
 80138c4:	af00      	add	r7, sp, #0
 80138c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d102      	bne.n	80138d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80138ce:	2301      	movs	r3, #1
 80138d0:	f000 bc1c 	b.w	801410c <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	681b      	ldr	r3, [r3, #0]
 80138d8:	f003 0301 	and.w	r3, r3, #1
 80138dc:	2b00      	cmp	r3, #0
 80138de:	f000 8087 	beq.w	80139f0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80138e2:	4b9e      	ldr	r3, [pc, #632]	; (8013b5c <HAL_RCC_OscConfig+0x29c>)
 80138e4:	691b      	ldr	r3, [r3, #16]
 80138e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80138ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80138ec:	4b9b      	ldr	r3, [pc, #620]	; (8013b5c <HAL_RCC_OscConfig+0x29c>)
 80138ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80138f0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80138f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138f4:	2b10      	cmp	r3, #16
 80138f6:	d007      	beq.n	8013908 <HAL_RCC_OscConfig+0x48>
 80138f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138fa:	2b18      	cmp	r3, #24
 80138fc:	d110      	bne.n	8013920 <HAL_RCC_OscConfig+0x60>
 80138fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013900:	f003 0303 	and.w	r3, r3, #3
 8013904:	2b02      	cmp	r3, #2
 8013906:	d10b      	bne.n	8013920 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013908:	4b94      	ldr	r3, [pc, #592]	; (8013b5c <HAL_RCC_OscConfig+0x29c>)
 801390a:	681b      	ldr	r3, [r3, #0]
 801390c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013910:	2b00      	cmp	r3, #0
 8013912:	d06c      	beq.n	80139ee <HAL_RCC_OscConfig+0x12e>
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	685b      	ldr	r3, [r3, #4]
 8013918:	2b00      	cmp	r3, #0
 801391a:	d168      	bne.n	80139ee <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 801391c:	2301      	movs	r3, #1
 801391e:	e3f5      	b.n	801410c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	685b      	ldr	r3, [r3, #4]
 8013924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013928:	d106      	bne.n	8013938 <HAL_RCC_OscConfig+0x78>
 801392a:	4b8c      	ldr	r3, [pc, #560]	; (8013b5c <HAL_RCC_OscConfig+0x29c>)
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	4a8b      	ldr	r2, [pc, #556]	; (8013b5c <HAL_RCC_OscConfig+0x29c>)
 8013930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013934:	6013      	str	r3, [r2, #0]
 8013936:	e02e      	b.n	8013996 <HAL_RCC_OscConfig+0xd6>
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	685b      	ldr	r3, [r3, #4]
 801393c:	2b00      	cmp	r3, #0
 801393e:	d10c      	bne.n	801395a <HAL_RCC_OscConfig+0x9a>
 8013940:	4b86      	ldr	r3, [pc, #536]	; (8013b5c <HAL_RCC_OscConfig+0x29c>)
 8013942:	681b      	ldr	r3, [r3, #0]
 8013944:	4a85      	ldr	r2, [pc, #532]	; (8013b5c <HAL_RCC_OscConfig+0x29c>)
 8013946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801394a:	6013      	str	r3, [r2, #0]
 801394c:	4b83      	ldr	r3, [pc, #524]	; (8013b5c <HAL_RCC_OscConfig+0x29c>)
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	4a82      	ldr	r2, [pc, #520]	; (8013b5c <HAL_RCC_OscConfig+0x29c>)
 8013952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8013956:	6013      	str	r3, [r2, #0]
 8013958:	e01d      	b.n	8013996 <HAL_RCC_OscConfig+0xd6>
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	685b      	ldr	r3, [r3, #4]
 801395e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8013962:	d10c      	bne.n	801397e <HAL_RCC_OscConfig+0xbe>
 8013964:	4b7d      	ldr	r3, [pc, #500]	; (8013b5c <HAL_RCC_OscConfig+0x29c>)
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	4a7c      	ldr	r2, [pc, #496]	; (8013b5c <HAL_RCC_OscConfig+0x29c>)
 801396a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801396e:	6013      	str	r3, [r2, #0]
 8013970:	4b7a      	ldr	r3, [pc, #488]	; (8013b5c <HAL_RCC_OscConfig+0x29c>)
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	4a79      	ldr	r2, [pc, #484]	; (8013b5c <HAL_RCC_OscConfig+0x29c>)
 8013976:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801397a:	6013      	str	r3, [r2, #0]
 801397c:	e00b      	b.n	8013996 <HAL_RCC_OscConfig+0xd6>
 801397e:	4b77      	ldr	r3, [pc, #476]	; (8013b5c <HAL_RCC_OscConfig+0x29c>)
 8013980:	681b      	ldr	r3, [r3, #0]
 8013982:	4a76      	ldr	r2, [pc, #472]	; (8013b5c <HAL_RCC_OscConfig+0x29c>)
 8013984:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013988:	6013      	str	r3, [r2, #0]
 801398a:	4b74      	ldr	r3, [pc, #464]	; (8013b5c <HAL_RCC_OscConfig+0x29c>)
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	4a73      	ldr	r2, [pc, #460]	; (8013b5c <HAL_RCC_OscConfig+0x29c>)
 8013990:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8013994:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	685b      	ldr	r3, [r3, #4]
 801399a:	2b00      	cmp	r3, #0
 801399c:	d013      	beq.n	80139c6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801399e:	f7fc fddf 	bl	8010560 <HAL_GetTick>
 80139a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80139a4:	e008      	b.n	80139b8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80139a6:	f7fc fddb 	bl	8010560 <HAL_GetTick>
 80139aa:	4602      	mov	r2, r0
 80139ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139ae:	1ad3      	subs	r3, r2, r3
 80139b0:	2b64      	cmp	r3, #100	; 0x64
 80139b2:	d901      	bls.n	80139b8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80139b4:	2303      	movs	r3, #3
 80139b6:	e3a9      	b.n	801410c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80139b8:	4b68      	ldr	r3, [pc, #416]	; (8013b5c <HAL_RCC_OscConfig+0x29c>)
 80139ba:	681b      	ldr	r3, [r3, #0]
 80139bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d0f0      	beq.n	80139a6 <HAL_RCC_OscConfig+0xe6>
 80139c4:	e014      	b.n	80139f0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80139c6:	f7fc fdcb 	bl	8010560 <HAL_GetTick>
 80139ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80139cc:	e008      	b.n	80139e0 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80139ce:	f7fc fdc7 	bl	8010560 <HAL_GetTick>
 80139d2:	4602      	mov	r2, r0
 80139d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139d6:	1ad3      	subs	r3, r2, r3
 80139d8:	2b64      	cmp	r3, #100	; 0x64
 80139da:	d901      	bls.n	80139e0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80139dc:	2303      	movs	r3, #3
 80139de:	e395      	b.n	801410c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80139e0:	4b5e      	ldr	r3, [pc, #376]	; (8013b5c <HAL_RCC_OscConfig+0x29c>)
 80139e2:	681b      	ldr	r3, [r3, #0]
 80139e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d1f0      	bne.n	80139ce <HAL_RCC_OscConfig+0x10e>
 80139ec:	e000      	b.n	80139f0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80139ee:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	f003 0302 	and.w	r3, r3, #2
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	f000 80ca 	beq.w	8013b92 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80139fe:	4b57      	ldr	r3, [pc, #348]	; (8013b5c <HAL_RCC_OscConfig+0x29c>)
 8013a00:	691b      	ldr	r3, [r3, #16]
 8013a02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8013a06:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8013a08:	4b54      	ldr	r3, [pc, #336]	; (8013b5c <HAL_RCC_OscConfig+0x29c>)
 8013a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a0c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8013a0e:	6a3b      	ldr	r3, [r7, #32]
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d007      	beq.n	8013a24 <HAL_RCC_OscConfig+0x164>
 8013a14:	6a3b      	ldr	r3, [r7, #32]
 8013a16:	2b18      	cmp	r3, #24
 8013a18:	d156      	bne.n	8013ac8 <HAL_RCC_OscConfig+0x208>
 8013a1a:	69fb      	ldr	r3, [r7, #28]
 8013a1c:	f003 0303 	and.w	r3, r3, #3
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d151      	bne.n	8013ac8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8013a24:	4b4d      	ldr	r3, [pc, #308]	; (8013b5c <HAL_RCC_OscConfig+0x29c>)
 8013a26:	681b      	ldr	r3, [r3, #0]
 8013a28:	f003 0304 	and.w	r3, r3, #4
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d005      	beq.n	8013a3c <HAL_RCC_OscConfig+0x17c>
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	68db      	ldr	r3, [r3, #12]
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d101      	bne.n	8013a3c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8013a38:	2301      	movs	r3, #1
 8013a3a:	e367      	b.n	801410c <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8013a3c:	4b47      	ldr	r3, [pc, #284]	; (8013b5c <HAL_RCC_OscConfig+0x29c>)
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	f023 0219 	bic.w	r2, r3, #25
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	68db      	ldr	r3, [r3, #12]
 8013a48:	4944      	ldr	r1, [pc, #272]	; (8013b5c <HAL_RCC_OscConfig+0x29c>)
 8013a4a:	4313      	orrs	r3, r2
 8013a4c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8013a4e:	f7fc fd87 	bl	8010560 <HAL_GetTick>
 8013a52:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8013a54:	e008      	b.n	8013a68 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8013a56:	f7fc fd83 	bl	8010560 <HAL_GetTick>
 8013a5a:	4602      	mov	r2, r0
 8013a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a5e:	1ad3      	subs	r3, r2, r3
 8013a60:	2b02      	cmp	r3, #2
 8013a62:	d901      	bls.n	8013a68 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8013a64:	2303      	movs	r3, #3
 8013a66:	e351      	b.n	801410c <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8013a68:	4b3c      	ldr	r3, [pc, #240]	; (8013b5c <HAL_RCC_OscConfig+0x29c>)
 8013a6a:	681b      	ldr	r3, [r3, #0]
 8013a6c:	f003 0304 	and.w	r3, r3, #4
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d0f0      	beq.n	8013a56 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013a74:	f7fc fd80 	bl	8010578 <HAL_GetREVID>
 8013a78:	4603      	mov	r3, r0
 8013a7a:	f241 0203 	movw	r2, #4099	; 0x1003
 8013a7e:	4293      	cmp	r3, r2
 8013a80:	d817      	bhi.n	8013ab2 <HAL_RCC_OscConfig+0x1f2>
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	691b      	ldr	r3, [r3, #16]
 8013a86:	2b40      	cmp	r3, #64	; 0x40
 8013a88:	d108      	bne.n	8013a9c <HAL_RCC_OscConfig+0x1dc>
 8013a8a:	4b34      	ldr	r3, [pc, #208]	; (8013b5c <HAL_RCC_OscConfig+0x29c>)
 8013a8c:	685b      	ldr	r3, [r3, #4]
 8013a8e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8013a92:	4a32      	ldr	r2, [pc, #200]	; (8013b5c <HAL_RCC_OscConfig+0x29c>)
 8013a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013a98:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8013a9a:	e07a      	b.n	8013b92 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013a9c:	4b2f      	ldr	r3, [pc, #188]	; (8013b5c <HAL_RCC_OscConfig+0x29c>)
 8013a9e:	685b      	ldr	r3, [r3, #4]
 8013aa0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	691b      	ldr	r3, [r3, #16]
 8013aa8:	031b      	lsls	r3, r3, #12
 8013aaa:	492c      	ldr	r1, [pc, #176]	; (8013b5c <HAL_RCC_OscConfig+0x29c>)
 8013aac:	4313      	orrs	r3, r2
 8013aae:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8013ab0:	e06f      	b.n	8013b92 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013ab2:	4b2a      	ldr	r3, [pc, #168]	; (8013b5c <HAL_RCC_OscConfig+0x29c>)
 8013ab4:	685b      	ldr	r3, [r3, #4]
 8013ab6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	691b      	ldr	r3, [r3, #16]
 8013abe:	061b      	lsls	r3, r3, #24
 8013ac0:	4926      	ldr	r1, [pc, #152]	; (8013b5c <HAL_RCC_OscConfig+0x29c>)
 8013ac2:	4313      	orrs	r3, r2
 8013ac4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8013ac6:	e064      	b.n	8013b92 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	68db      	ldr	r3, [r3, #12]
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d047      	beq.n	8013b60 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8013ad0:	4b22      	ldr	r3, [pc, #136]	; (8013b5c <HAL_RCC_OscConfig+0x29c>)
 8013ad2:	681b      	ldr	r3, [r3, #0]
 8013ad4:	f023 0219 	bic.w	r2, r3, #25
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	68db      	ldr	r3, [r3, #12]
 8013adc:	491f      	ldr	r1, [pc, #124]	; (8013b5c <HAL_RCC_OscConfig+0x29c>)
 8013ade:	4313      	orrs	r3, r2
 8013ae0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013ae2:	f7fc fd3d 	bl	8010560 <HAL_GetTick>
 8013ae6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8013ae8:	e008      	b.n	8013afc <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8013aea:	f7fc fd39 	bl	8010560 <HAL_GetTick>
 8013aee:	4602      	mov	r2, r0
 8013af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013af2:	1ad3      	subs	r3, r2, r3
 8013af4:	2b02      	cmp	r3, #2
 8013af6:	d901      	bls.n	8013afc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8013af8:	2303      	movs	r3, #3
 8013afa:	e307      	b.n	801410c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8013afc:	4b17      	ldr	r3, [pc, #92]	; (8013b5c <HAL_RCC_OscConfig+0x29c>)
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	f003 0304 	and.w	r3, r3, #4
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d0f0      	beq.n	8013aea <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013b08:	f7fc fd36 	bl	8010578 <HAL_GetREVID>
 8013b0c:	4603      	mov	r3, r0
 8013b0e:	f241 0203 	movw	r2, #4099	; 0x1003
 8013b12:	4293      	cmp	r3, r2
 8013b14:	d817      	bhi.n	8013b46 <HAL_RCC_OscConfig+0x286>
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	691b      	ldr	r3, [r3, #16]
 8013b1a:	2b40      	cmp	r3, #64	; 0x40
 8013b1c:	d108      	bne.n	8013b30 <HAL_RCC_OscConfig+0x270>
 8013b1e:	4b0f      	ldr	r3, [pc, #60]	; (8013b5c <HAL_RCC_OscConfig+0x29c>)
 8013b20:	685b      	ldr	r3, [r3, #4]
 8013b22:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8013b26:	4a0d      	ldr	r2, [pc, #52]	; (8013b5c <HAL_RCC_OscConfig+0x29c>)
 8013b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013b2c:	6053      	str	r3, [r2, #4]
 8013b2e:	e030      	b.n	8013b92 <HAL_RCC_OscConfig+0x2d2>
 8013b30:	4b0a      	ldr	r3, [pc, #40]	; (8013b5c <HAL_RCC_OscConfig+0x29c>)
 8013b32:	685b      	ldr	r3, [r3, #4]
 8013b34:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	691b      	ldr	r3, [r3, #16]
 8013b3c:	031b      	lsls	r3, r3, #12
 8013b3e:	4907      	ldr	r1, [pc, #28]	; (8013b5c <HAL_RCC_OscConfig+0x29c>)
 8013b40:	4313      	orrs	r3, r2
 8013b42:	604b      	str	r3, [r1, #4]
 8013b44:	e025      	b.n	8013b92 <HAL_RCC_OscConfig+0x2d2>
 8013b46:	4b05      	ldr	r3, [pc, #20]	; (8013b5c <HAL_RCC_OscConfig+0x29c>)
 8013b48:	685b      	ldr	r3, [r3, #4]
 8013b4a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	691b      	ldr	r3, [r3, #16]
 8013b52:	061b      	lsls	r3, r3, #24
 8013b54:	4901      	ldr	r1, [pc, #4]	; (8013b5c <HAL_RCC_OscConfig+0x29c>)
 8013b56:	4313      	orrs	r3, r2
 8013b58:	604b      	str	r3, [r1, #4]
 8013b5a:	e01a      	b.n	8013b92 <HAL_RCC_OscConfig+0x2d2>
 8013b5c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8013b60:	4b9e      	ldr	r3, [pc, #632]	; (8013ddc <HAL_RCC_OscConfig+0x51c>)
 8013b62:	681b      	ldr	r3, [r3, #0]
 8013b64:	4a9d      	ldr	r2, [pc, #628]	; (8013ddc <HAL_RCC_OscConfig+0x51c>)
 8013b66:	f023 0301 	bic.w	r3, r3, #1
 8013b6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013b6c:	f7fc fcf8 	bl	8010560 <HAL_GetTick>
 8013b70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8013b72:	e008      	b.n	8013b86 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8013b74:	f7fc fcf4 	bl	8010560 <HAL_GetTick>
 8013b78:	4602      	mov	r2, r0
 8013b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b7c:	1ad3      	subs	r3, r2, r3
 8013b7e:	2b02      	cmp	r3, #2
 8013b80:	d901      	bls.n	8013b86 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8013b82:	2303      	movs	r3, #3
 8013b84:	e2c2      	b.n	801410c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8013b86:	4b95      	ldr	r3, [pc, #596]	; (8013ddc <HAL_RCC_OscConfig+0x51c>)
 8013b88:	681b      	ldr	r3, [r3, #0]
 8013b8a:	f003 0304 	and.w	r3, r3, #4
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d1f0      	bne.n	8013b74 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	f003 0310 	and.w	r3, r3, #16
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	f000 80a9 	beq.w	8013cf2 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8013ba0:	4b8e      	ldr	r3, [pc, #568]	; (8013ddc <HAL_RCC_OscConfig+0x51c>)
 8013ba2:	691b      	ldr	r3, [r3, #16]
 8013ba4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8013ba8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8013baa:	4b8c      	ldr	r3, [pc, #560]	; (8013ddc <HAL_RCC_OscConfig+0x51c>)
 8013bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013bae:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8013bb0:	69bb      	ldr	r3, [r7, #24]
 8013bb2:	2b08      	cmp	r3, #8
 8013bb4:	d007      	beq.n	8013bc6 <HAL_RCC_OscConfig+0x306>
 8013bb6:	69bb      	ldr	r3, [r7, #24]
 8013bb8:	2b18      	cmp	r3, #24
 8013bba:	d13a      	bne.n	8013c32 <HAL_RCC_OscConfig+0x372>
 8013bbc:	697b      	ldr	r3, [r7, #20]
 8013bbe:	f003 0303 	and.w	r3, r3, #3
 8013bc2:	2b01      	cmp	r3, #1
 8013bc4:	d135      	bne.n	8013c32 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8013bc6:	4b85      	ldr	r3, [pc, #532]	; (8013ddc <HAL_RCC_OscConfig+0x51c>)
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d005      	beq.n	8013bde <HAL_RCC_OscConfig+0x31e>
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	69db      	ldr	r3, [r3, #28]
 8013bd6:	2b80      	cmp	r3, #128	; 0x80
 8013bd8:	d001      	beq.n	8013bde <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8013bda:	2301      	movs	r3, #1
 8013bdc:	e296      	b.n	801410c <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8013bde:	f7fc fccb 	bl	8010578 <HAL_GetREVID>
 8013be2:	4603      	mov	r3, r0
 8013be4:	f241 0203 	movw	r2, #4099	; 0x1003
 8013be8:	4293      	cmp	r3, r2
 8013bea:	d817      	bhi.n	8013c1c <HAL_RCC_OscConfig+0x35c>
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	6a1b      	ldr	r3, [r3, #32]
 8013bf0:	2b20      	cmp	r3, #32
 8013bf2:	d108      	bne.n	8013c06 <HAL_RCC_OscConfig+0x346>
 8013bf4:	4b79      	ldr	r3, [pc, #484]	; (8013ddc <HAL_RCC_OscConfig+0x51c>)
 8013bf6:	685b      	ldr	r3, [r3, #4]
 8013bf8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8013bfc:	4a77      	ldr	r2, [pc, #476]	; (8013ddc <HAL_RCC_OscConfig+0x51c>)
 8013bfe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013c02:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8013c04:	e075      	b.n	8013cf2 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8013c06:	4b75      	ldr	r3, [pc, #468]	; (8013ddc <HAL_RCC_OscConfig+0x51c>)
 8013c08:	685b      	ldr	r3, [r3, #4]
 8013c0a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	6a1b      	ldr	r3, [r3, #32]
 8013c12:	069b      	lsls	r3, r3, #26
 8013c14:	4971      	ldr	r1, [pc, #452]	; (8013ddc <HAL_RCC_OscConfig+0x51c>)
 8013c16:	4313      	orrs	r3, r2
 8013c18:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8013c1a:	e06a      	b.n	8013cf2 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8013c1c:	4b6f      	ldr	r3, [pc, #444]	; (8013ddc <HAL_RCC_OscConfig+0x51c>)
 8013c1e:	68db      	ldr	r3, [r3, #12]
 8013c20:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	6a1b      	ldr	r3, [r3, #32]
 8013c28:	061b      	lsls	r3, r3, #24
 8013c2a:	496c      	ldr	r1, [pc, #432]	; (8013ddc <HAL_RCC_OscConfig+0x51c>)
 8013c2c:	4313      	orrs	r3, r2
 8013c2e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8013c30:	e05f      	b.n	8013cf2 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	69db      	ldr	r3, [r3, #28]
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d042      	beq.n	8013cc0 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8013c3a:	4b68      	ldr	r3, [pc, #416]	; (8013ddc <HAL_RCC_OscConfig+0x51c>)
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	4a67      	ldr	r2, [pc, #412]	; (8013ddc <HAL_RCC_OscConfig+0x51c>)
 8013c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013c44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013c46:	f7fc fc8b 	bl	8010560 <HAL_GetTick>
 8013c4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8013c4c:	e008      	b.n	8013c60 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8013c4e:	f7fc fc87 	bl	8010560 <HAL_GetTick>
 8013c52:	4602      	mov	r2, r0
 8013c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c56:	1ad3      	subs	r3, r2, r3
 8013c58:	2b02      	cmp	r3, #2
 8013c5a:	d901      	bls.n	8013c60 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8013c5c:	2303      	movs	r3, #3
 8013c5e:	e255      	b.n	801410c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8013c60:	4b5e      	ldr	r3, [pc, #376]	; (8013ddc <HAL_RCC_OscConfig+0x51c>)
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d0f0      	beq.n	8013c4e <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8013c6c:	f7fc fc84 	bl	8010578 <HAL_GetREVID>
 8013c70:	4603      	mov	r3, r0
 8013c72:	f241 0203 	movw	r2, #4099	; 0x1003
 8013c76:	4293      	cmp	r3, r2
 8013c78:	d817      	bhi.n	8013caa <HAL_RCC_OscConfig+0x3ea>
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	6a1b      	ldr	r3, [r3, #32]
 8013c7e:	2b20      	cmp	r3, #32
 8013c80:	d108      	bne.n	8013c94 <HAL_RCC_OscConfig+0x3d4>
 8013c82:	4b56      	ldr	r3, [pc, #344]	; (8013ddc <HAL_RCC_OscConfig+0x51c>)
 8013c84:	685b      	ldr	r3, [r3, #4]
 8013c86:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8013c8a:	4a54      	ldr	r2, [pc, #336]	; (8013ddc <HAL_RCC_OscConfig+0x51c>)
 8013c8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013c90:	6053      	str	r3, [r2, #4]
 8013c92:	e02e      	b.n	8013cf2 <HAL_RCC_OscConfig+0x432>
 8013c94:	4b51      	ldr	r3, [pc, #324]	; (8013ddc <HAL_RCC_OscConfig+0x51c>)
 8013c96:	685b      	ldr	r3, [r3, #4]
 8013c98:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	6a1b      	ldr	r3, [r3, #32]
 8013ca0:	069b      	lsls	r3, r3, #26
 8013ca2:	494e      	ldr	r1, [pc, #312]	; (8013ddc <HAL_RCC_OscConfig+0x51c>)
 8013ca4:	4313      	orrs	r3, r2
 8013ca6:	604b      	str	r3, [r1, #4]
 8013ca8:	e023      	b.n	8013cf2 <HAL_RCC_OscConfig+0x432>
 8013caa:	4b4c      	ldr	r3, [pc, #304]	; (8013ddc <HAL_RCC_OscConfig+0x51c>)
 8013cac:	68db      	ldr	r3, [r3, #12]
 8013cae:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	6a1b      	ldr	r3, [r3, #32]
 8013cb6:	061b      	lsls	r3, r3, #24
 8013cb8:	4948      	ldr	r1, [pc, #288]	; (8013ddc <HAL_RCC_OscConfig+0x51c>)
 8013cba:	4313      	orrs	r3, r2
 8013cbc:	60cb      	str	r3, [r1, #12]
 8013cbe:	e018      	b.n	8013cf2 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8013cc0:	4b46      	ldr	r3, [pc, #280]	; (8013ddc <HAL_RCC_OscConfig+0x51c>)
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	4a45      	ldr	r2, [pc, #276]	; (8013ddc <HAL_RCC_OscConfig+0x51c>)
 8013cc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013cca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013ccc:	f7fc fc48 	bl	8010560 <HAL_GetTick>
 8013cd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8013cd2:	e008      	b.n	8013ce6 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8013cd4:	f7fc fc44 	bl	8010560 <HAL_GetTick>
 8013cd8:	4602      	mov	r2, r0
 8013cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cdc:	1ad3      	subs	r3, r2, r3
 8013cde:	2b02      	cmp	r3, #2
 8013ce0:	d901      	bls.n	8013ce6 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8013ce2:	2303      	movs	r3, #3
 8013ce4:	e212      	b.n	801410c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8013ce6:	4b3d      	ldr	r3, [pc, #244]	; (8013ddc <HAL_RCC_OscConfig+0x51c>)
 8013ce8:	681b      	ldr	r3, [r3, #0]
 8013cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d1f0      	bne.n	8013cd4 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	681b      	ldr	r3, [r3, #0]
 8013cf6:	f003 0308 	and.w	r3, r3, #8
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d036      	beq.n	8013d6c <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	695b      	ldr	r3, [r3, #20]
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d019      	beq.n	8013d3a <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8013d06:	4b35      	ldr	r3, [pc, #212]	; (8013ddc <HAL_RCC_OscConfig+0x51c>)
 8013d08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013d0a:	4a34      	ldr	r2, [pc, #208]	; (8013ddc <HAL_RCC_OscConfig+0x51c>)
 8013d0c:	f043 0301 	orr.w	r3, r3, #1
 8013d10:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013d12:	f7fc fc25 	bl	8010560 <HAL_GetTick>
 8013d16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8013d18:	e008      	b.n	8013d2c <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8013d1a:	f7fc fc21 	bl	8010560 <HAL_GetTick>
 8013d1e:	4602      	mov	r2, r0
 8013d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d22:	1ad3      	subs	r3, r2, r3
 8013d24:	2b02      	cmp	r3, #2
 8013d26:	d901      	bls.n	8013d2c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8013d28:	2303      	movs	r3, #3
 8013d2a:	e1ef      	b.n	801410c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8013d2c:	4b2b      	ldr	r3, [pc, #172]	; (8013ddc <HAL_RCC_OscConfig+0x51c>)
 8013d2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013d30:	f003 0302 	and.w	r3, r3, #2
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d0f0      	beq.n	8013d1a <HAL_RCC_OscConfig+0x45a>
 8013d38:	e018      	b.n	8013d6c <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8013d3a:	4b28      	ldr	r3, [pc, #160]	; (8013ddc <HAL_RCC_OscConfig+0x51c>)
 8013d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013d3e:	4a27      	ldr	r2, [pc, #156]	; (8013ddc <HAL_RCC_OscConfig+0x51c>)
 8013d40:	f023 0301 	bic.w	r3, r3, #1
 8013d44:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013d46:	f7fc fc0b 	bl	8010560 <HAL_GetTick>
 8013d4a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8013d4c:	e008      	b.n	8013d60 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8013d4e:	f7fc fc07 	bl	8010560 <HAL_GetTick>
 8013d52:	4602      	mov	r2, r0
 8013d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d56:	1ad3      	subs	r3, r2, r3
 8013d58:	2b02      	cmp	r3, #2
 8013d5a:	d901      	bls.n	8013d60 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8013d5c:	2303      	movs	r3, #3
 8013d5e:	e1d5      	b.n	801410c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8013d60:	4b1e      	ldr	r3, [pc, #120]	; (8013ddc <HAL_RCC_OscConfig+0x51c>)
 8013d62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013d64:	f003 0302 	and.w	r3, r3, #2
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d1f0      	bne.n	8013d4e <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	681b      	ldr	r3, [r3, #0]
 8013d70:	f003 0320 	and.w	r3, r3, #32
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d039      	beq.n	8013dec <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	699b      	ldr	r3, [r3, #24]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d019      	beq.n	8013db4 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8013d80:	4b16      	ldr	r3, [pc, #88]	; (8013ddc <HAL_RCC_OscConfig+0x51c>)
 8013d82:	681b      	ldr	r3, [r3, #0]
 8013d84:	4a15      	ldr	r2, [pc, #84]	; (8013ddc <HAL_RCC_OscConfig+0x51c>)
 8013d86:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8013d8a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8013d8c:	f7fc fbe8 	bl	8010560 <HAL_GetTick>
 8013d90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8013d92:	e008      	b.n	8013da6 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8013d94:	f7fc fbe4 	bl	8010560 <HAL_GetTick>
 8013d98:	4602      	mov	r2, r0
 8013d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d9c:	1ad3      	subs	r3, r2, r3
 8013d9e:	2b02      	cmp	r3, #2
 8013da0:	d901      	bls.n	8013da6 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8013da2:	2303      	movs	r3, #3
 8013da4:	e1b2      	b.n	801410c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8013da6:	4b0d      	ldr	r3, [pc, #52]	; (8013ddc <HAL_RCC_OscConfig+0x51c>)
 8013da8:	681b      	ldr	r3, [r3, #0]
 8013daa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d0f0      	beq.n	8013d94 <HAL_RCC_OscConfig+0x4d4>
 8013db2:	e01b      	b.n	8013dec <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8013db4:	4b09      	ldr	r3, [pc, #36]	; (8013ddc <HAL_RCC_OscConfig+0x51c>)
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	4a08      	ldr	r2, [pc, #32]	; (8013ddc <HAL_RCC_OscConfig+0x51c>)
 8013dba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013dbe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8013dc0:	f7fc fbce 	bl	8010560 <HAL_GetTick>
 8013dc4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8013dc6:	e00b      	b.n	8013de0 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8013dc8:	f7fc fbca 	bl	8010560 <HAL_GetTick>
 8013dcc:	4602      	mov	r2, r0
 8013dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dd0:	1ad3      	subs	r3, r2, r3
 8013dd2:	2b02      	cmp	r3, #2
 8013dd4:	d904      	bls.n	8013de0 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8013dd6:	2303      	movs	r3, #3
 8013dd8:	e198      	b.n	801410c <HAL_RCC_OscConfig+0x84c>
 8013dda:	bf00      	nop
 8013ddc:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8013de0:	4ba3      	ldr	r3, [pc, #652]	; (8014070 <HAL_RCC_OscConfig+0x7b0>)
 8013de2:	681b      	ldr	r3, [r3, #0]
 8013de4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d1ed      	bne.n	8013dc8 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	f003 0304 	and.w	r3, r3, #4
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	f000 8081 	beq.w	8013efc <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8013dfa:	4b9e      	ldr	r3, [pc, #632]	; (8014074 <HAL_RCC_OscConfig+0x7b4>)
 8013dfc:	681b      	ldr	r3, [r3, #0]
 8013dfe:	4a9d      	ldr	r2, [pc, #628]	; (8014074 <HAL_RCC_OscConfig+0x7b4>)
 8013e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013e04:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8013e06:	f7fc fbab 	bl	8010560 <HAL_GetTick>
 8013e0a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8013e0c:	e008      	b.n	8013e20 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8013e0e:	f7fc fba7 	bl	8010560 <HAL_GetTick>
 8013e12:	4602      	mov	r2, r0
 8013e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e16:	1ad3      	subs	r3, r2, r3
 8013e18:	2b64      	cmp	r3, #100	; 0x64
 8013e1a:	d901      	bls.n	8013e20 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8013e1c:	2303      	movs	r3, #3
 8013e1e:	e175      	b.n	801410c <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8013e20:	4b94      	ldr	r3, [pc, #592]	; (8014074 <HAL_RCC_OscConfig+0x7b4>)
 8013e22:	681b      	ldr	r3, [r3, #0]
 8013e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d0f0      	beq.n	8013e0e <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	689b      	ldr	r3, [r3, #8]
 8013e30:	2b01      	cmp	r3, #1
 8013e32:	d106      	bne.n	8013e42 <HAL_RCC_OscConfig+0x582>
 8013e34:	4b8e      	ldr	r3, [pc, #568]	; (8014070 <HAL_RCC_OscConfig+0x7b0>)
 8013e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e38:	4a8d      	ldr	r2, [pc, #564]	; (8014070 <HAL_RCC_OscConfig+0x7b0>)
 8013e3a:	f043 0301 	orr.w	r3, r3, #1
 8013e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8013e40:	e02d      	b.n	8013e9e <HAL_RCC_OscConfig+0x5de>
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	689b      	ldr	r3, [r3, #8]
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d10c      	bne.n	8013e64 <HAL_RCC_OscConfig+0x5a4>
 8013e4a:	4b89      	ldr	r3, [pc, #548]	; (8014070 <HAL_RCC_OscConfig+0x7b0>)
 8013e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e4e:	4a88      	ldr	r2, [pc, #544]	; (8014070 <HAL_RCC_OscConfig+0x7b0>)
 8013e50:	f023 0301 	bic.w	r3, r3, #1
 8013e54:	6713      	str	r3, [r2, #112]	; 0x70
 8013e56:	4b86      	ldr	r3, [pc, #536]	; (8014070 <HAL_RCC_OscConfig+0x7b0>)
 8013e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e5a:	4a85      	ldr	r2, [pc, #532]	; (8014070 <HAL_RCC_OscConfig+0x7b0>)
 8013e5c:	f023 0304 	bic.w	r3, r3, #4
 8013e60:	6713      	str	r3, [r2, #112]	; 0x70
 8013e62:	e01c      	b.n	8013e9e <HAL_RCC_OscConfig+0x5de>
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	689b      	ldr	r3, [r3, #8]
 8013e68:	2b05      	cmp	r3, #5
 8013e6a:	d10c      	bne.n	8013e86 <HAL_RCC_OscConfig+0x5c6>
 8013e6c:	4b80      	ldr	r3, [pc, #512]	; (8014070 <HAL_RCC_OscConfig+0x7b0>)
 8013e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e70:	4a7f      	ldr	r2, [pc, #508]	; (8014070 <HAL_RCC_OscConfig+0x7b0>)
 8013e72:	f043 0304 	orr.w	r3, r3, #4
 8013e76:	6713      	str	r3, [r2, #112]	; 0x70
 8013e78:	4b7d      	ldr	r3, [pc, #500]	; (8014070 <HAL_RCC_OscConfig+0x7b0>)
 8013e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e7c:	4a7c      	ldr	r2, [pc, #496]	; (8014070 <HAL_RCC_OscConfig+0x7b0>)
 8013e7e:	f043 0301 	orr.w	r3, r3, #1
 8013e82:	6713      	str	r3, [r2, #112]	; 0x70
 8013e84:	e00b      	b.n	8013e9e <HAL_RCC_OscConfig+0x5de>
 8013e86:	4b7a      	ldr	r3, [pc, #488]	; (8014070 <HAL_RCC_OscConfig+0x7b0>)
 8013e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e8a:	4a79      	ldr	r2, [pc, #484]	; (8014070 <HAL_RCC_OscConfig+0x7b0>)
 8013e8c:	f023 0301 	bic.w	r3, r3, #1
 8013e90:	6713      	str	r3, [r2, #112]	; 0x70
 8013e92:	4b77      	ldr	r3, [pc, #476]	; (8014070 <HAL_RCC_OscConfig+0x7b0>)
 8013e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e96:	4a76      	ldr	r2, [pc, #472]	; (8014070 <HAL_RCC_OscConfig+0x7b0>)
 8013e98:	f023 0304 	bic.w	r3, r3, #4
 8013e9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	689b      	ldr	r3, [r3, #8]
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d015      	beq.n	8013ed2 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013ea6:	f7fc fb5b 	bl	8010560 <HAL_GetTick>
 8013eaa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8013eac:	e00a      	b.n	8013ec4 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013eae:	f7fc fb57 	bl	8010560 <HAL_GetTick>
 8013eb2:	4602      	mov	r2, r0
 8013eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eb6:	1ad3      	subs	r3, r2, r3
 8013eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8013ebc:	4293      	cmp	r3, r2
 8013ebe:	d901      	bls.n	8013ec4 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8013ec0:	2303      	movs	r3, #3
 8013ec2:	e123      	b.n	801410c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8013ec4:	4b6a      	ldr	r3, [pc, #424]	; (8014070 <HAL_RCC_OscConfig+0x7b0>)
 8013ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ec8:	f003 0302 	and.w	r3, r3, #2
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d0ee      	beq.n	8013eae <HAL_RCC_OscConfig+0x5ee>
 8013ed0:	e014      	b.n	8013efc <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013ed2:	f7fc fb45 	bl	8010560 <HAL_GetTick>
 8013ed6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8013ed8:	e00a      	b.n	8013ef0 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013eda:	f7fc fb41 	bl	8010560 <HAL_GetTick>
 8013ede:	4602      	mov	r2, r0
 8013ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ee2:	1ad3      	subs	r3, r2, r3
 8013ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8013ee8:	4293      	cmp	r3, r2
 8013eea:	d901      	bls.n	8013ef0 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8013eec:	2303      	movs	r3, #3
 8013eee:	e10d      	b.n	801410c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8013ef0:	4b5f      	ldr	r3, [pc, #380]	; (8014070 <HAL_RCC_OscConfig+0x7b0>)
 8013ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ef4:	f003 0302 	and.w	r3, r3, #2
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d1ee      	bne.n	8013eda <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	f000 8102 	beq.w	801410a <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8013f06:	4b5a      	ldr	r3, [pc, #360]	; (8014070 <HAL_RCC_OscConfig+0x7b0>)
 8013f08:	691b      	ldr	r3, [r3, #16]
 8013f0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8013f0e:	2b18      	cmp	r3, #24
 8013f10:	f000 80bd 	beq.w	801408e <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f18:	2b02      	cmp	r3, #2
 8013f1a:	f040 8095 	bne.w	8014048 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013f1e:	4b54      	ldr	r3, [pc, #336]	; (8014070 <HAL_RCC_OscConfig+0x7b0>)
 8013f20:	681b      	ldr	r3, [r3, #0]
 8013f22:	4a53      	ldr	r2, [pc, #332]	; (8014070 <HAL_RCC_OscConfig+0x7b0>)
 8013f24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8013f28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013f2a:	f7fc fb19 	bl	8010560 <HAL_GetTick>
 8013f2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8013f30:	e008      	b.n	8013f44 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013f32:	f7fc fb15 	bl	8010560 <HAL_GetTick>
 8013f36:	4602      	mov	r2, r0
 8013f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f3a:	1ad3      	subs	r3, r2, r3
 8013f3c:	2b02      	cmp	r3, #2
 8013f3e:	d901      	bls.n	8013f44 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8013f40:	2303      	movs	r3, #3
 8013f42:	e0e3      	b.n	801410c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8013f44:	4b4a      	ldr	r3, [pc, #296]	; (8014070 <HAL_RCC_OscConfig+0x7b0>)
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d1f0      	bne.n	8013f32 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8013f50:	4b47      	ldr	r3, [pc, #284]	; (8014070 <HAL_RCC_OscConfig+0x7b0>)
 8013f52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013f54:	4b48      	ldr	r3, [pc, #288]	; (8014078 <HAL_RCC_OscConfig+0x7b8>)
 8013f56:	4013      	ands	r3, r2
 8013f58:	687a      	ldr	r2, [r7, #4]
 8013f5a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8013f5c:	687a      	ldr	r2, [r7, #4]
 8013f5e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8013f60:	0112      	lsls	r2, r2, #4
 8013f62:	430a      	orrs	r2, r1
 8013f64:	4942      	ldr	r1, [pc, #264]	; (8014070 <HAL_RCC_OscConfig+0x7b0>)
 8013f66:	4313      	orrs	r3, r2
 8013f68:	628b      	str	r3, [r1, #40]	; 0x28
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f6e:	3b01      	subs	r3, #1
 8013f70:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013f78:	3b01      	subs	r3, #1
 8013f7a:	025b      	lsls	r3, r3, #9
 8013f7c:	b29b      	uxth	r3, r3
 8013f7e:	431a      	orrs	r2, r3
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f84:	3b01      	subs	r3, #1
 8013f86:	041b      	lsls	r3, r3, #16
 8013f88:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8013f8c:	431a      	orrs	r2, r3
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013f92:	3b01      	subs	r3, #1
 8013f94:	061b      	lsls	r3, r3, #24
 8013f96:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8013f9a:	4935      	ldr	r1, [pc, #212]	; (8014070 <HAL_RCC_OscConfig+0x7b0>)
 8013f9c:	4313      	orrs	r3, r2
 8013f9e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8013fa0:	4b33      	ldr	r3, [pc, #204]	; (8014070 <HAL_RCC_OscConfig+0x7b0>)
 8013fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fa4:	4a32      	ldr	r2, [pc, #200]	; (8014070 <HAL_RCC_OscConfig+0x7b0>)
 8013fa6:	f023 0301 	bic.w	r3, r3, #1
 8013faa:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8013fac:	4b30      	ldr	r3, [pc, #192]	; (8014070 <HAL_RCC_OscConfig+0x7b0>)
 8013fae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013fb0:	4b32      	ldr	r3, [pc, #200]	; (801407c <HAL_RCC_OscConfig+0x7bc>)
 8013fb2:	4013      	ands	r3, r2
 8013fb4:	687a      	ldr	r2, [r7, #4]
 8013fb6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8013fb8:	00d2      	lsls	r2, r2, #3
 8013fba:	492d      	ldr	r1, [pc, #180]	; (8014070 <HAL_RCC_OscConfig+0x7b0>)
 8013fbc:	4313      	orrs	r3, r2
 8013fbe:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8013fc0:	4b2b      	ldr	r3, [pc, #172]	; (8014070 <HAL_RCC_OscConfig+0x7b0>)
 8013fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fc4:	f023 020c 	bic.w	r2, r3, #12
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013fcc:	4928      	ldr	r1, [pc, #160]	; (8014070 <HAL_RCC_OscConfig+0x7b0>)
 8013fce:	4313      	orrs	r3, r2
 8013fd0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8013fd2:	4b27      	ldr	r3, [pc, #156]	; (8014070 <HAL_RCC_OscConfig+0x7b0>)
 8013fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fd6:	f023 0202 	bic.w	r2, r3, #2
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013fde:	4924      	ldr	r1, [pc, #144]	; (8014070 <HAL_RCC_OscConfig+0x7b0>)
 8013fe0:	4313      	orrs	r3, r2
 8013fe2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8013fe4:	4b22      	ldr	r3, [pc, #136]	; (8014070 <HAL_RCC_OscConfig+0x7b0>)
 8013fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fe8:	4a21      	ldr	r2, [pc, #132]	; (8014070 <HAL_RCC_OscConfig+0x7b0>)
 8013fea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013fee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013ff0:	4b1f      	ldr	r3, [pc, #124]	; (8014070 <HAL_RCC_OscConfig+0x7b0>)
 8013ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ff4:	4a1e      	ldr	r2, [pc, #120]	; (8014070 <HAL_RCC_OscConfig+0x7b0>)
 8013ff6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013ffa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8013ffc:	4b1c      	ldr	r3, [pc, #112]	; (8014070 <HAL_RCC_OscConfig+0x7b0>)
 8013ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014000:	4a1b      	ldr	r2, [pc, #108]	; (8014070 <HAL_RCC_OscConfig+0x7b0>)
 8014002:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8014006:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8014008:	4b19      	ldr	r3, [pc, #100]	; (8014070 <HAL_RCC_OscConfig+0x7b0>)
 801400a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801400c:	4a18      	ldr	r2, [pc, #96]	; (8014070 <HAL_RCC_OscConfig+0x7b0>)
 801400e:	f043 0301 	orr.w	r3, r3, #1
 8014012:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8014014:	4b16      	ldr	r3, [pc, #88]	; (8014070 <HAL_RCC_OscConfig+0x7b0>)
 8014016:	681b      	ldr	r3, [r3, #0]
 8014018:	4a15      	ldr	r2, [pc, #84]	; (8014070 <HAL_RCC_OscConfig+0x7b0>)
 801401a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801401e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014020:	f7fc fa9e 	bl	8010560 <HAL_GetTick>
 8014024:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8014026:	e008      	b.n	801403a <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8014028:	f7fc fa9a 	bl	8010560 <HAL_GetTick>
 801402c:	4602      	mov	r2, r0
 801402e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014030:	1ad3      	subs	r3, r2, r3
 8014032:	2b02      	cmp	r3, #2
 8014034:	d901      	bls.n	801403a <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8014036:	2303      	movs	r3, #3
 8014038:	e068      	b.n	801410c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801403a:	4b0d      	ldr	r3, [pc, #52]	; (8014070 <HAL_RCC_OscConfig+0x7b0>)
 801403c:	681b      	ldr	r3, [r3, #0]
 801403e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014042:	2b00      	cmp	r3, #0
 8014044:	d0f0      	beq.n	8014028 <HAL_RCC_OscConfig+0x768>
 8014046:	e060      	b.n	801410a <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014048:	4b09      	ldr	r3, [pc, #36]	; (8014070 <HAL_RCC_OscConfig+0x7b0>)
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	4a08      	ldr	r2, [pc, #32]	; (8014070 <HAL_RCC_OscConfig+0x7b0>)
 801404e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8014052:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014054:	f7fc fa84 	bl	8010560 <HAL_GetTick>
 8014058:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801405a:	e011      	b.n	8014080 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801405c:	f7fc fa80 	bl	8010560 <HAL_GetTick>
 8014060:	4602      	mov	r2, r0
 8014062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014064:	1ad3      	subs	r3, r2, r3
 8014066:	2b02      	cmp	r3, #2
 8014068:	d90a      	bls.n	8014080 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 801406a:	2303      	movs	r3, #3
 801406c:	e04e      	b.n	801410c <HAL_RCC_OscConfig+0x84c>
 801406e:	bf00      	nop
 8014070:	58024400 	.word	0x58024400
 8014074:	58024800 	.word	0x58024800
 8014078:	fffffc0c 	.word	0xfffffc0c
 801407c:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8014080:	4b24      	ldr	r3, [pc, #144]	; (8014114 <HAL_RCC_OscConfig+0x854>)
 8014082:	681b      	ldr	r3, [r3, #0]
 8014084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014088:	2b00      	cmp	r3, #0
 801408a:	d1e7      	bne.n	801405c <HAL_RCC_OscConfig+0x79c>
 801408c:	e03d      	b.n	801410a <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 801408e:	4b21      	ldr	r3, [pc, #132]	; (8014114 <HAL_RCC_OscConfig+0x854>)
 8014090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014092:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8014094:	4b1f      	ldr	r3, [pc, #124]	; (8014114 <HAL_RCC_OscConfig+0x854>)
 8014096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014098:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801409e:	2b01      	cmp	r3, #1
 80140a0:	d031      	beq.n	8014106 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80140a2:	693b      	ldr	r3, [r7, #16]
 80140a4:	f003 0203 	and.w	r2, r3, #3
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80140ac:	429a      	cmp	r2, r3
 80140ae:	d12a      	bne.n	8014106 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80140b0:	693b      	ldr	r3, [r7, #16]
 80140b2:	091b      	lsrs	r3, r3, #4
 80140b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80140bc:	429a      	cmp	r2, r3
 80140be:	d122      	bne.n	8014106 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80140c0:	68fb      	ldr	r3, [r7, #12]
 80140c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80140ca:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80140cc:	429a      	cmp	r2, r3
 80140ce:	d11a      	bne.n	8014106 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80140d0:	68fb      	ldr	r3, [r7, #12]
 80140d2:	0a5b      	lsrs	r3, r3, #9
 80140d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80140dc:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80140de:	429a      	cmp	r2, r3
 80140e0:	d111      	bne.n	8014106 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80140e2:	68fb      	ldr	r3, [r7, #12]
 80140e4:	0c1b      	lsrs	r3, r3, #16
 80140e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80140ee:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80140f0:	429a      	cmp	r2, r3
 80140f2:	d108      	bne.n	8014106 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80140f4:	68fb      	ldr	r3, [r7, #12]
 80140f6:	0e1b      	lsrs	r3, r3, #24
 80140f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014100:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8014102:	429a      	cmp	r2, r3
 8014104:	d001      	beq.n	801410a <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8014106:	2301      	movs	r3, #1
 8014108:	e000      	b.n	801410c <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 801410a:	2300      	movs	r3, #0
}
 801410c:	4618      	mov	r0, r3
 801410e:	3730      	adds	r7, #48	; 0x30
 8014110:	46bd      	mov	sp, r7
 8014112:	bd80      	pop	{r7, pc}
 8014114:	58024400 	.word	0x58024400

08014118 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8014118:	b580      	push	{r7, lr}
 801411a:	b086      	sub	sp, #24
 801411c:	af00      	add	r7, sp, #0
 801411e:	6078      	str	r0, [r7, #4]
 8014120:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	2b00      	cmp	r3, #0
 8014126:	d101      	bne.n	801412c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8014128:	2301      	movs	r3, #1
 801412a:	e19c      	b.n	8014466 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801412c:	4b8a      	ldr	r3, [pc, #552]	; (8014358 <HAL_RCC_ClockConfig+0x240>)
 801412e:	681b      	ldr	r3, [r3, #0]
 8014130:	f003 030f 	and.w	r3, r3, #15
 8014134:	683a      	ldr	r2, [r7, #0]
 8014136:	429a      	cmp	r2, r3
 8014138:	d910      	bls.n	801415c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801413a:	4b87      	ldr	r3, [pc, #540]	; (8014358 <HAL_RCC_ClockConfig+0x240>)
 801413c:	681b      	ldr	r3, [r3, #0]
 801413e:	f023 020f 	bic.w	r2, r3, #15
 8014142:	4985      	ldr	r1, [pc, #532]	; (8014358 <HAL_RCC_ClockConfig+0x240>)
 8014144:	683b      	ldr	r3, [r7, #0]
 8014146:	4313      	orrs	r3, r2
 8014148:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801414a:	4b83      	ldr	r3, [pc, #524]	; (8014358 <HAL_RCC_ClockConfig+0x240>)
 801414c:	681b      	ldr	r3, [r3, #0]
 801414e:	f003 030f 	and.w	r3, r3, #15
 8014152:	683a      	ldr	r2, [r7, #0]
 8014154:	429a      	cmp	r2, r3
 8014156:	d001      	beq.n	801415c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8014158:	2301      	movs	r3, #1
 801415a:	e184      	b.n	8014466 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	681b      	ldr	r3, [r3, #0]
 8014160:	f003 0304 	and.w	r3, r3, #4
 8014164:	2b00      	cmp	r3, #0
 8014166:	d010      	beq.n	801418a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	691a      	ldr	r2, [r3, #16]
 801416c:	4b7b      	ldr	r3, [pc, #492]	; (801435c <HAL_RCC_ClockConfig+0x244>)
 801416e:	699b      	ldr	r3, [r3, #24]
 8014170:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8014174:	429a      	cmp	r2, r3
 8014176:	d908      	bls.n	801418a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8014178:	4b78      	ldr	r3, [pc, #480]	; (801435c <HAL_RCC_ClockConfig+0x244>)
 801417a:	699b      	ldr	r3, [r3, #24]
 801417c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	691b      	ldr	r3, [r3, #16]
 8014184:	4975      	ldr	r1, [pc, #468]	; (801435c <HAL_RCC_ClockConfig+0x244>)
 8014186:	4313      	orrs	r3, r2
 8014188:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	681b      	ldr	r3, [r3, #0]
 801418e:	f003 0308 	and.w	r3, r3, #8
 8014192:	2b00      	cmp	r3, #0
 8014194:	d010      	beq.n	80141b8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	695a      	ldr	r2, [r3, #20]
 801419a:	4b70      	ldr	r3, [pc, #448]	; (801435c <HAL_RCC_ClockConfig+0x244>)
 801419c:	69db      	ldr	r3, [r3, #28]
 801419e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80141a2:	429a      	cmp	r2, r3
 80141a4:	d908      	bls.n	80141b8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80141a6:	4b6d      	ldr	r3, [pc, #436]	; (801435c <HAL_RCC_ClockConfig+0x244>)
 80141a8:	69db      	ldr	r3, [r3, #28]
 80141aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	695b      	ldr	r3, [r3, #20]
 80141b2:	496a      	ldr	r1, [pc, #424]	; (801435c <HAL_RCC_ClockConfig+0x244>)
 80141b4:	4313      	orrs	r3, r2
 80141b6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	681b      	ldr	r3, [r3, #0]
 80141bc:	f003 0310 	and.w	r3, r3, #16
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d010      	beq.n	80141e6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	699a      	ldr	r2, [r3, #24]
 80141c8:	4b64      	ldr	r3, [pc, #400]	; (801435c <HAL_RCC_ClockConfig+0x244>)
 80141ca:	69db      	ldr	r3, [r3, #28]
 80141cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80141d0:	429a      	cmp	r2, r3
 80141d2:	d908      	bls.n	80141e6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80141d4:	4b61      	ldr	r3, [pc, #388]	; (801435c <HAL_RCC_ClockConfig+0x244>)
 80141d6:	69db      	ldr	r3, [r3, #28]
 80141d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	699b      	ldr	r3, [r3, #24]
 80141e0:	495e      	ldr	r1, [pc, #376]	; (801435c <HAL_RCC_ClockConfig+0x244>)
 80141e2:	4313      	orrs	r3, r2
 80141e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	681b      	ldr	r3, [r3, #0]
 80141ea:	f003 0320 	and.w	r3, r3, #32
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	d010      	beq.n	8014214 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	69da      	ldr	r2, [r3, #28]
 80141f6:	4b59      	ldr	r3, [pc, #356]	; (801435c <HAL_RCC_ClockConfig+0x244>)
 80141f8:	6a1b      	ldr	r3, [r3, #32]
 80141fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80141fe:	429a      	cmp	r2, r3
 8014200:	d908      	bls.n	8014214 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8014202:	4b56      	ldr	r3, [pc, #344]	; (801435c <HAL_RCC_ClockConfig+0x244>)
 8014204:	6a1b      	ldr	r3, [r3, #32]
 8014206:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	69db      	ldr	r3, [r3, #28]
 801420e:	4953      	ldr	r1, [pc, #332]	; (801435c <HAL_RCC_ClockConfig+0x244>)
 8014210:	4313      	orrs	r3, r2
 8014212:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	681b      	ldr	r3, [r3, #0]
 8014218:	f003 0302 	and.w	r3, r3, #2
 801421c:	2b00      	cmp	r3, #0
 801421e:	d010      	beq.n	8014242 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	68da      	ldr	r2, [r3, #12]
 8014224:	4b4d      	ldr	r3, [pc, #308]	; (801435c <HAL_RCC_ClockConfig+0x244>)
 8014226:	699b      	ldr	r3, [r3, #24]
 8014228:	f003 030f 	and.w	r3, r3, #15
 801422c:	429a      	cmp	r2, r3
 801422e:	d908      	bls.n	8014242 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8014230:	4b4a      	ldr	r3, [pc, #296]	; (801435c <HAL_RCC_ClockConfig+0x244>)
 8014232:	699b      	ldr	r3, [r3, #24]
 8014234:	f023 020f 	bic.w	r2, r3, #15
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	68db      	ldr	r3, [r3, #12]
 801423c:	4947      	ldr	r1, [pc, #284]	; (801435c <HAL_RCC_ClockConfig+0x244>)
 801423e:	4313      	orrs	r3, r2
 8014240:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	f003 0301 	and.w	r3, r3, #1
 801424a:	2b00      	cmp	r3, #0
 801424c:	d055      	beq.n	80142fa <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 801424e:	4b43      	ldr	r3, [pc, #268]	; (801435c <HAL_RCC_ClockConfig+0x244>)
 8014250:	699b      	ldr	r3, [r3, #24]
 8014252:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	689b      	ldr	r3, [r3, #8]
 801425a:	4940      	ldr	r1, [pc, #256]	; (801435c <HAL_RCC_ClockConfig+0x244>)
 801425c:	4313      	orrs	r3, r2
 801425e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	685b      	ldr	r3, [r3, #4]
 8014264:	2b02      	cmp	r3, #2
 8014266:	d107      	bne.n	8014278 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8014268:	4b3c      	ldr	r3, [pc, #240]	; (801435c <HAL_RCC_ClockConfig+0x244>)
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014270:	2b00      	cmp	r3, #0
 8014272:	d121      	bne.n	80142b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8014274:	2301      	movs	r3, #1
 8014276:	e0f6      	b.n	8014466 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	685b      	ldr	r3, [r3, #4]
 801427c:	2b03      	cmp	r3, #3
 801427e:	d107      	bne.n	8014290 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8014280:	4b36      	ldr	r3, [pc, #216]	; (801435c <HAL_RCC_ClockConfig+0x244>)
 8014282:	681b      	ldr	r3, [r3, #0]
 8014284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014288:	2b00      	cmp	r3, #0
 801428a:	d115      	bne.n	80142b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 801428c:	2301      	movs	r3, #1
 801428e:	e0ea      	b.n	8014466 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	685b      	ldr	r3, [r3, #4]
 8014294:	2b01      	cmp	r3, #1
 8014296:	d107      	bne.n	80142a8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8014298:	4b30      	ldr	r3, [pc, #192]	; (801435c <HAL_RCC_ClockConfig+0x244>)
 801429a:	681b      	ldr	r3, [r3, #0]
 801429c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d109      	bne.n	80142b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80142a4:	2301      	movs	r3, #1
 80142a6:	e0de      	b.n	8014466 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80142a8:	4b2c      	ldr	r3, [pc, #176]	; (801435c <HAL_RCC_ClockConfig+0x244>)
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	f003 0304 	and.w	r3, r3, #4
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d101      	bne.n	80142b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80142b4:	2301      	movs	r3, #1
 80142b6:	e0d6      	b.n	8014466 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80142b8:	4b28      	ldr	r3, [pc, #160]	; (801435c <HAL_RCC_ClockConfig+0x244>)
 80142ba:	691b      	ldr	r3, [r3, #16]
 80142bc:	f023 0207 	bic.w	r2, r3, #7
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	685b      	ldr	r3, [r3, #4]
 80142c4:	4925      	ldr	r1, [pc, #148]	; (801435c <HAL_RCC_ClockConfig+0x244>)
 80142c6:	4313      	orrs	r3, r2
 80142c8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80142ca:	f7fc f949 	bl	8010560 <HAL_GetTick>
 80142ce:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80142d0:	e00a      	b.n	80142e8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80142d2:	f7fc f945 	bl	8010560 <HAL_GetTick>
 80142d6:	4602      	mov	r2, r0
 80142d8:	697b      	ldr	r3, [r7, #20]
 80142da:	1ad3      	subs	r3, r2, r3
 80142dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80142e0:	4293      	cmp	r3, r2
 80142e2:	d901      	bls.n	80142e8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80142e4:	2303      	movs	r3, #3
 80142e6:	e0be      	b.n	8014466 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80142e8:	4b1c      	ldr	r3, [pc, #112]	; (801435c <HAL_RCC_ClockConfig+0x244>)
 80142ea:	691b      	ldr	r3, [r3, #16]
 80142ec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	685b      	ldr	r3, [r3, #4]
 80142f4:	00db      	lsls	r3, r3, #3
 80142f6:	429a      	cmp	r2, r3
 80142f8:	d1eb      	bne.n	80142d2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	681b      	ldr	r3, [r3, #0]
 80142fe:	f003 0302 	and.w	r3, r3, #2
 8014302:	2b00      	cmp	r3, #0
 8014304:	d010      	beq.n	8014328 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	68da      	ldr	r2, [r3, #12]
 801430a:	4b14      	ldr	r3, [pc, #80]	; (801435c <HAL_RCC_ClockConfig+0x244>)
 801430c:	699b      	ldr	r3, [r3, #24]
 801430e:	f003 030f 	and.w	r3, r3, #15
 8014312:	429a      	cmp	r2, r3
 8014314:	d208      	bcs.n	8014328 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8014316:	4b11      	ldr	r3, [pc, #68]	; (801435c <HAL_RCC_ClockConfig+0x244>)
 8014318:	699b      	ldr	r3, [r3, #24]
 801431a:	f023 020f 	bic.w	r2, r3, #15
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	68db      	ldr	r3, [r3, #12]
 8014322:	490e      	ldr	r1, [pc, #56]	; (801435c <HAL_RCC_ClockConfig+0x244>)
 8014324:	4313      	orrs	r3, r2
 8014326:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8014328:	4b0b      	ldr	r3, [pc, #44]	; (8014358 <HAL_RCC_ClockConfig+0x240>)
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	f003 030f 	and.w	r3, r3, #15
 8014330:	683a      	ldr	r2, [r7, #0]
 8014332:	429a      	cmp	r2, r3
 8014334:	d214      	bcs.n	8014360 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014336:	4b08      	ldr	r3, [pc, #32]	; (8014358 <HAL_RCC_ClockConfig+0x240>)
 8014338:	681b      	ldr	r3, [r3, #0]
 801433a:	f023 020f 	bic.w	r2, r3, #15
 801433e:	4906      	ldr	r1, [pc, #24]	; (8014358 <HAL_RCC_ClockConfig+0x240>)
 8014340:	683b      	ldr	r3, [r7, #0]
 8014342:	4313      	orrs	r3, r2
 8014344:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8014346:	4b04      	ldr	r3, [pc, #16]	; (8014358 <HAL_RCC_ClockConfig+0x240>)
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	f003 030f 	and.w	r3, r3, #15
 801434e:	683a      	ldr	r2, [r7, #0]
 8014350:	429a      	cmp	r2, r3
 8014352:	d005      	beq.n	8014360 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8014354:	2301      	movs	r3, #1
 8014356:	e086      	b.n	8014466 <HAL_RCC_ClockConfig+0x34e>
 8014358:	52002000 	.word	0x52002000
 801435c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	681b      	ldr	r3, [r3, #0]
 8014364:	f003 0304 	and.w	r3, r3, #4
 8014368:	2b00      	cmp	r3, #0
 801436a:	d010      	beq.n	801438e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	691a      	ldr	r2, [r3, #16]
 8014370:	4b3f      	ldr	r3, [pc, #252]	; (8014470 <HAL_RCC_ClockConfig+0x358>)
 8014372:	699b      	ldr	r3, [r3, #24]
 8014374:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8014378:	429a      	cmp	r2, r3
 801437a:	d208      	bcs.n	801438e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801437c:	4b3c      	ldr	r3, [pc, #240]	; (8014470 <HAL_RCC_ClockConfig+0x358>)
 801437e:	699b      	ldr	r3, [r3, #24]
 8014380:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	691b      	ldr	r3, [r3, #16]
 8014388:	4939      	ldr	r1, [pc, #228]	; (8014470 <HAL_RCC_ClockConfig+0x358>)
 801438a:	4313      	orrs	r3, r2
 801438c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	f003 0308 	and.w	r3, r3, #8
 8014396:	2b00      	cmp	r3, #0
 8014398:	d010      	beq.n	80143bc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	695a      	ldr	r2, [r3, #20]
 801439e:	4b34      	ldr	r3, [pc, #208]	; (8014470 <HAL_RCC_ClockConfig+0x358>)
 80143a0:	69db      	ldr	r3, [r3, #28]
 80143a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80143a6:	429a      	cmp	r2, r3
 80143a8:	d208      	bcs.n	80143bc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80143aa:	4b31      	ldr	r3, [pc, #196]	; (8014470 <HAL_RCC_ClockConfig+0x358>)
 80143ac:	69db      	ldr	r3, [r3, #28]
 80143ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	695b      	ldr	r3, [r3, #20]
 80143b6:	492e      	ldr	r1, [pc, #184]	; (8014470 <HAL_RCC_ClockConfig+0x358>)
 80143b8:	4313      	orrs	r3, r2
 80143ba:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	681b      	ldr	r3, [r3, #0]
 80143c0:	f003 0310 	and.w	r3, r3, #16
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d010      	beq.n	80143ea <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	699a      	ldr	r2, [r3, #24]
 80143cc:	4b28      	ldr	r3, [pc, #160]	; (8014470 <HAL_RCC_ClockConfig+0x358>)
 80143ce:	69db      	ldr	r3, [r3, #28]
 80143d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80143d4:	429a      	cmp	r2, r3
 80143d6:	d208      	bcs.n	80143ea <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80143d8:	4b25      	ldr	r3, [pc, #148]	; (8014470 <HAL_RCC_ClockConfig+0x358>)
 80143da:	69db      	ldr	r3, [r3, #28]
 80143dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	699b      	ldr	r3, [r3, #24]
 80143e4:	4922      	ldr	r1, [pc, #136]	; (8014470 <HAL_RCC_ClockConfig+0x358>)
 80143e6:	4313      	orrs	r3, r2
 80143e8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	681b      	ldr	r3, [r3, #0]
 80143ee:	f003 0320 	and.w	r3, r3, #32
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d010      	beq.n	8014418 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	69da      	ldr	r2, [r3, #28]
 80143fa:	4b1d      	ldr	r3, [pc, #116]	; (8014470 <HAL_RCC_ClockConfig+0x358>)
 80143fc:	6a1b      	ldr	r3, [r3, #32]
 80143fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8014402:	429a      	cmp	r2, r3
 8014404:	d208      	bcs.n	8014418 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8014406:	4b1a      	ldr	r3, [pc, #104]	; (8014470 <HAL_RCC_ClockConfig+0x358>)
 8014408:	6a1b      	ldr	r3, [r3, #32]
 801440a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	69db      	ldr	r3, [r3, #28]
 8014412:	4917      	ldr	r1, [pc, #92]	; (8014470 <HAL_RCC_ClockConfig+0x358>)
 8014414:	4313      	orrs	r3, r2
 8014416:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8014418:	f000 f89e 	bl	8014558 <HAL_RCC_GetSysClockFreq>
 801441c:	4602      	mov	r2, r0
 801441e:	4b14      	ldr	r3, [pc, #80]	; (8014470 <HAL_RCC_ClockConfig+0x358>)
 8014420:	699b      	ldr	r3, [r3, #24]
 8014422:	0a1b      	lsrs	r3, r3, #8
 8014424:	f003 030f 	and.w	r3, r3, #15
 8014428:	4912      	ldr	r1, [pc, #72]	; (8014474 <HAL_RCC_ClockConfig+0x35c>)
 801442a:	5ccb      	ldrb	r3, [r1, r3]
 801442c:	f003 031f 	and.w	r3, r3, #31
 8014430:	fa22 f303 	lsr.w	r3, r2, r3
 8014434:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8014436:	4b0e      	ldr	r3, [pc, #56]	; (8014470 <HAL_RCC_ClockConfig+0x358>)
 8014438:	699b      	ldr	r3, [r3, #24]
 801443a:	f003 030f 	and.w	r3, r3, #15
 801443e:	4a0d      	ldr	r2, [pc, #52]	; (8014474 <HAL_RCC_ClockConfig+0x35c>)
 8014440:	5cd3      	ldrb	r3, [r2, r3]
 8014442:	f003 031f 	and.w	r3, r3, #31
 8014446:	693a      	ldr	r2, [r7, #16]
 8014448:	fa22 f303 	lsr.w	r3, r2, r3
 801444c:	4a0a      	ldr	r2, [pc, #40]	; (8014478 <HAL_RCC_ClockConfig+0x360>)
 801444e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8014450:	4a0a      	ldr	r2, [pc, #40]	; (801447c <HAL_RCC_ClockConfig+0x364>)
 8014452:	693b      	ldr	r3, [r7, #16]
 8014454:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8014456:	4b0a      	ldr	r3, [pc, #40]	; (8014480 <HAL_RCC_ClockConfig+0x368>)
 8014458:	681b      	ldr	r3, [r3, #0]
 801445a:	4618      	mov	r0, r3
 801445c:	f7ed f86e 	bl	800153c <HAL_InitTick>
 8014460:	4603      	mov	r3, r0
 8014462:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8014464:	7bfb      	ldrb	r3, [r7, #15]
}
 8014466:	4618      	mov	r0, r3
 8014468:	3718      	adds	r7, #24
 801446a:	46bd      	mov	sp, r7
 801446c:	bd80      	pop	{r7, pc}
 801446e:	bf00      	nop
 8014470:	58024400 	.word	0x58024400
 8014474:	0802ca58 	.word	0x0802ca58
 8014478:	2400001c 	.word	0x2400001c
 801447c:	24000018 	.word	0x24000018
 8014480:	24000050 	.word	0x24000050

08014484 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8014484:	b580      	push	{r7, lr}
 8014486:	b08c      	sub	sp, #48	; 0x30
 8014488:	af00      	add	r7, sp, #0
 801448a:	60f8      	str	r0, [r7, #12]
 801448c:	60b9      	str	r1, [r7, #8]
 801448e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8014490:	68fb      	ldr	r3, [r7, #12]
 8014492:	2b00      	cmp	r3, #0
 8014494:	d12a      	bne.n	80144ec <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8014496:	4b2d      	ldr	r3, [pc, #180]	; (801454c <HAL_RCC_MCOConfig+0xc8>)
 8014498:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801449c:	4a2b      	ldr	r2, [pc, #172]	; (801454c <HAL_RCC_MCOConfig+0xc8>)
 801449e:	f043 0301 	orr.w	r3, r3, #1
 80144a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80144a6:	4b29      	ldr	r3, [pc, #164]	; (801454c <HAL_RCC_MCOConfig+0xc8>)
 80144a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80144ac:	f003 0301 	and.w	r3, r3, #1
 80144b0:	61bb      	str	r3, [r7, #24]
 80144b2:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80144b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80144b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80144ba:	2302      	movs	r3, #2
 80144bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80144be:	2303      	movs	r3, #3
 80144c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80144c2:	2300      	movs	r3, #0
 80144c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80144c6:	2300      	movs	r3, #0
 80144c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80144ca:	f107 031c 	add.w	r3, r7, #28
 80144ce:	4619      	mov	r1, r3
 80144d0:	481f      	ldr	r0, [pc, #124]	; (8014550 <HAL_RCC_MCOConfig+0xcc>)
 80144d2:	f7fc fc49 	bl	8010d68 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80144d6:	4b1d      	ldr	r3, [pc, #116]	; (801454c <HAL_RCC_MCOConfig+0xc8>)
 80144d8:	691b      	ldr	r3, [r3, #16]
 80144da:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 80144de:	68b9      	ldr	r1, [r7, #8]
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	430b      	orrs	r3, r1
 80144e4:	4919      	ldr	r1, [pc, #100]	; (801454c <HAL_RCC_MCOConfig+0xc8>)
 80144e6:	4313      	orrs	r3, r2
 80144e8:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 80144ea:	e02a      	b.n	8014542 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 80144ec:	4b17      	ldr	r3, [pc, #92]	; (801454c <HAL_RCC_MCOConfig+0xc8>)
 80144ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80144f2:	4a16      	ldr	r2, [pc, #88]	; (801454c <HAL_RCC_MCOConfig+0xc8>)
 80144f4:	f043 0304 	orr.w	r3, r3, #4
 80144f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80144fc:	4b13      	ldr	r3, [pc, #76]	; (801454c <HAL_RCC_MCOConfig+0xc8>)
 80144fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014502:	f003 0304 	and.w	r3, r3, #4
 8014506:	617b      	str	r3, [r7, #20]
 8014508:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 801450a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801450e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014510:	2302      	movs	r3, #2
 8014512:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014514:	2303      	movs	r3, #3
 8014516:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014518:	2300      	movs	r3, #0
 801451a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 801451c:	2300      	movs	r3, #0
 801451e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8014520:	f107 031c 	add.w	r3, r7, #28
 8014524:	4619      	mov	r1, r3
 8014526:	480b      	ldr	r0, [pc, #44]	; (8014554 <HAL_RCC_MCOConfig+0xd0>)
 8014528:	f7fc fc1e 	bl	8010d68 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 801452c:	4b07      	ldr	r3, [pc, #28]	; (801454c <HAL_RCC_MCOConfig+0xc8>)
 801452e:	691b      	ldr	r3, [r3, #16]
 8014530:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	01d9      	lsls	r1, r3, #7
 8014538:	68bb      	ldr	r3, [r7, #8]
 801453a:	430b      	orrs	r3, r1
 801453c:	4903      	ldr	r1, [pc, #12]	; (801454c <HAL_RCC_MCOConfig+0xc8>)
 801453e:	4313      	orrs	r3, r2
 8014540:	610b      	str	r3, [r1, #16]
}
 8014542:	bf00      	nop
 8014544:	3730      	adds	r7, #48	; 0x30
 8014546:	46bd      	mov	sp, r7
 8014548:	bd80      	pop	{r7, pc}
 801454a:	bf00      	nop
 801454c:	58024400 	.word	0x58024400
 8014550:	58020000 	.word	0x58020000
 8014554:	58020800 	.word	0x58020800

08014558 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8014558:	b480      	push	{r7}
 801455a:	b089      	sub	sp, #36	; 0x24
 801455c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 801455e:	4bb3      	ldr	r3, [pc, #716]	; (801482c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8014560:	691b      	ldr	r3, [r3, #16]
 8014562:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014566:	2b18      	cmp	r3, #24
 8014568:	f200 8155 	bhi.w	8014816 <HAL_RCC_GetSysClockFreq+0x2be>
 801456c:	a201      	add	r2, pc, #4	; (adr r2, 8014574 <HAL_RCC_GetSysClockFreq+0x1c>)
 801456e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014572:	bf00      	nop
 8014574:	080145d9 	.word	0x080145d9
 8014578:	08014817 	.word	0x08014817
 801457c:	08014817 	.word	0x08014817
 8014580:	08014817 	.word	0x08014817
 8014584:	08014817 	.word	0x08014817
 8014588:	08014817 	.word	0x08014817
 801458c:	08014817 	.word	0x08014817
 8014590:	08014817 	.word	0x08014817
 8014594:	080145ff 	.word	0x080145ff
 8014598:	08014817 	.word	0x08014817
 801459c:	08014817 	.word	0x08014817
 80145a0:	08014817 	.word	0x08014817
 80145a4:	08014817 	.word	0x08014817
 80145a8:	08014817 	.word	0x08014817
 80145ac:	08014817 	.word	0x08014817
 80145b0:	08014817 	.word	0x08014817
 80145b4:	08014605 	.word	0x08014605
 80145b8:	08014817 	.word	0x08014817
 80145bc:	08014817 	.word	0x08014817
 80145c0:	08014817 	.word	0x08014817
 80145c4:	08014817 	.word	0x08014817
 80145c8:	08014817 	.word	0x08014817
 80145cc:	08014817 	.word	0x08014817
 80145d0:	08014817 	.word	0x08014817
 80145d4:	0801460b 	.word	0x0801460b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80145d8:	4b94      	ldr	r3, [pc, #592]	; (801482c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80145da:	681b      	ldr	r3, [r3, #0]
 80145dc:	f003 0320 	and.w	r3, r3, #32
 80145e0:	2b00      	cmp	r3, #0
 80145e2:	d009      	beq.n	80145f8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80145e4:	4b91      	ldr	r3, [pc, #580]	; (801482c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80145e6:	681b      	ldr	r3, [r3, #0]
 80145e8:	08db      	lsrs	r3, r3, #3
 80145ea:	f003 0303 	and.w	r3, r3, #3
 80145ee:	4a90      	ldr	r2, [pc, #576]	; (8014830 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80145f0:	fa22 f303 	lsr.w	r3, r2, r3
 80145f4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80145f6:	e111      	b.n	801481c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80145f8:	4b8d      	ldr	r3, [pc, #564]	; (8014830 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80145fa:	61bb      	str	r3, [r7, #24]
    break;
 80145fc:	e10e      	b.n	801481c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80145fe:	4b8d      	ldr	r3, [pc, #564]	; (8014834 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8014600:	61bb      	str	r3, [r7, #24]
    break;
 8014602:	e10b      	b.n	801481c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8014604:	4b8c      	ldr	r3, [pc, #560]	; (8014838 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8014606:	61bb      	str	r3, [r7, #24]
    break;
 8014608:	e108      	b.n	801481c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801460a:	4b88      	ldr	r3, [pc, #544]	; (801482c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801460c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801460e:	f003 0303 	and.w	r3, r3, #3
 8014612:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8014614:	4b85      	ldr	r3, [pc, #532]	; (801482c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8014616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014618:	091b      	lsrs	r3, r3, #4
 801461a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801461e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8014620:	4b82      	ldr	r3, [pc, #520]	; (801482c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8014622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014624:	f003 0301 	and.w	r3, r3, #1
 8014628:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 801462a:	4b80      	ldr	r3, [pc, #512]	; (801482c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801462c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801462e:	08db      	lsrs	r3, r3, #3
 8014630:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014634:	68fa      	ldr	r2, [r7, #12]
 8014636:	fb02 f303 	mul.w	r3, r2, r3
 801463a:	ee07 3a90 	vmov	s15, r3
 801463e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014642:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8014646:	693b      	ldr	r3, [r7, #16]
 8014648:	2b00      	cmp	r3, #0
 801464a:	f000 80e1 	beq.w	8014810 <HAL_RCC_GetSysClockFreq+0x2b8>
 801464e:	697b      	ldr	r3, [r7, #20]
 8014650:	2b02      	cmp	r3, #2
 8014652:	f000 8083 	beq.w	801475c <HAL_RCC_GetSysClockFreq+0x204>
 8014656:	697b      	ldr	r3, [r7, #20]
 8014658:	2b02      	cmp	r3, #2
 801465a:	f200 80a1 	bhi.w	80147a0 <HAL_RCC_GetSysClockFreq+0x248>
 801465e:	697b      	ldr	r3, [r7, #20]
 8014660:	2b00      	cmp	r3, #0
 8014662:	d003      	beq.n	801466c <HAL_RCC_GetSysClockFreq+0x114>
 8014664:	697b      	ldr	r3, [r7, #20]
 8014666:	2b01      	cmp	r3, #1
 8014668:	d056      	beq.n	8014718 <HAL_RCC_GetSysClockFreq+0x1c0>
 801466a:	e099      	b.n	80147a0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801466c:	4b6f      	ldr	r3, [pc, #444]	; (801482c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801466e:	681b      	ldr	r3, [r3, #0]
 8014670:	f003 0320 	and.w	r3, r3, #32
 8014674:	2b00      	cmp	r3, #0
 8014676:	d02d      	beq.n	80146d4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8014678:	4b6c      	ldr	r3, [pc, #432]	; (801482c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801467a:	681b      	ldr	r3, [r3, #0]
 801467c:	08db      	lsrs	r3, r3, #3
 801467e:	f003 0303 	and.w	r3, r3, #3
 8014682:	4a6b      	ldr	r2, [pc, #428]	; (8014830 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8014684:	fa22 f303 	lsr.w	r3, r2, r3
 8014688:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	ee07 3a90 	vmov	s15, r3
 8014690:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014694:	693b      	ldr	r3, [r7, #16]
 8014696:	ee07 3a90 	vmov	s15, r3
 801469a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801469e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80146a2:	4b62      	ldr	r3, [pc, #392]	; (801482c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80146a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80146a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80146aa:	ee07 3a90 	vmov	s15, r3
 80146ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80146b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80146b6:	eddf 5a61 	vldr	s11, [pc, #388]	; 801483c <HAL_RCC_GetSysClockFreq+0x2e4>
 80146ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80146be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80146c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80146c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80146ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80146ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80146d2:	e087      	b.n	80147e4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80146d4:	693b      	ldr	r3, [r7, #16]
 80146d6:	ee07 3a90 	vmov	s15, r3
 80146da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80146de:	eddf 6a58 	vldr	s13, [pc, #352]	; 8014840 <HAL_RCC_GetSysClockFreq+0x2e8>
 80146e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80146e6:	4b51      	ldr	r3, [pc, #324]	; (801482c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80146e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80146ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80146ee:	ee07 3a90 	vmov	s15, r3
 80146f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80146f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80146fa:	eddf 5a50 	vldr	s11, [pc, #320]	; 801483c <HAL_RCC_GetSysClockFreq+0x2e4>
 80146fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014702:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014706:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801470a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801470e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014712:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8014716:	e065      	b.n	80147e4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8014718:	693b      	ldr	r3, [r7, #16]
 801471a:	ee07 3a90 	vmov	s15, r3
 801471e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014722:	eddf 6a48 	vldr	s13, [pc, #288]	; 8014844 <HAL_RCC_GetSysClockFreq+0x2ec>
 8014726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801472a:	4b40      	ldr	r3, [pc, #256]	; (801482c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801472c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801472e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014732:	ee07 3a90 	vmov	s15, r3
 8014736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801473a:	ed97 6a02 	vldr	s12, [r7, #8]
 801473e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801483c <HAL_RCC_GetSysClockFreq+0x2e4>
 8014742:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014746:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801474a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801474e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014756:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801475a:	e043      	b.n	80147e4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801475c:	693b      	ldr	r3, [r7, #16]
 801475e:	ee07 3a90 	vmov	s15, r3
 8014762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014766:	eddf 6a38 	vldr	s13, [pc, #224]	; 8014848 <HAL_RCC_GetSysClockFreq+0x2f0>
 801476a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801476e:	4b2f      	ldr	r3, [pc, #188]	; (801482c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8014770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014776:	ee07 3a90 	vmov	s15, r3
 801477a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801477e:	ed97 6a02 	vldr	s12, [r7, #8]
 8014782:	eddf 5a2e 	vldr	s11, [pc, #184]	; 801483c <HAL_RCC_GetSysClockFreq+0x2e4>
 8014786:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801478a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801478e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014796:	ee67 7a27 	vmul.f32	s15, s14, s15
 801479a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801479e:	e021      	b.n	80147e4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80147a0:	693b      	ldr	r3, [r7, #16]
 80147a2:	ee07 3a90 	vmov	s15, r3
 80147a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80147aa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8014844 <HAL_RCC_GetSysClockFreq+0x2ec>
 80147ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80147b2:	4b1e      	ldr	r3, [pc, #120]	; (801482c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80147b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80147b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80147ba:	ee07 3a90 	vmov	s15, r3
 80147be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80147c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80147c6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 801483c <HAL_RCC_GetSysClockFreq+0x2e4>
 80147ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80147ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80147d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80147d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80147da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80147de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80147e2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80147e4:	4b11      	ldr	r3, [pc, #68]	; (801482c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80147e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80147e8:	0a5b      	lsrs	r3, r3, #9
 80147ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80147ee:	3301      	adds	r3, #1
 80147f0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80147f2:	683b      	ldr	r3, [r7, #0]
 80147f4:	ee07 3a90 	vmov	s15, r3
 80147f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80147fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8014800:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014804:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014808:	ee17 3a90 	vmov	r3, s15
 801480c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 801480e:	e005      	b.n	801481c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8014810:	2300      	movs	r3, #0
 8014812:	61bb      	str	r3, [r7, #24]
    break;
 8014814:	e002      	b.n	801481c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8014816:	4b07      	ldr	r3, [pc, #28]	; (8014834 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8014818:	61bb      	str	r3, [r7, #24]
    break;
 801481a:	bf00      	nop
  }

  return sysclockfreq;
 801481c:	69bb      	ldr	r3, [r7, #24]
}
 801481e:	4618      	mov	r0, r3
 8014820:	3724      	adds	r7, #36	; 0x24
 8014822:	46bd      	mov	sp, r7
 8014824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014828:	4770      	bx	lr
 801482a:	bf00      	nop
 801482c:	58024400 	.word	0x58024400
 8014830:	03d09000 	.word	0x03d09000
 8014834:	003d0900 	.word	0x003d0900
 8014838:	017d7840 	.word	0x017d7840
 801483c:	46000000 	.word	0x46000000
 8014840:	4c742400 	.word	0x4c742400
 8014844:	4a742400 	.word	0x4a742400
 8014848:	4bbebc20 	.word	0x4bbebc20

0801484c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801484c:	b580      	push	{r7, lr}
 801484e:	b082      	sub	sp, #8
 8014850:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8014852:	f7ff fe81 	bl	8014558 <HAL_RCC_GetSysClockFreq>
 8014856:	4602      	mov	r2, r0
 8014858:	4b10      	ldr	r3, [pc, #64]	; (801489c <HAL_RCC_GetHCLKFreq+0x50>)
 801485a:	699b      	ldr	r3, [r3, #24]
 801485c:	0a1b      	lsrs	r3, r3, #8
 801485e:	f003 030f 	and.w	r3, r3, #15
 8014862:	490f      	ldr	r1, [pc, #60]	; (80148a0 <HAL_RCC_GetHCLKFreq+0x54>)
 8014864:	5ccb      	ldrb	r3, [r1, r3]
 8014866:	f003 031f 	and.w	r3, r3, #31
 801486a:	fa22 f303 	lsr.w	r3, r2, r3
 801486e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8014870:	4b0a      	ldr	r3, [pc, #40]	; (801489c <HAL_RCC_GetHCLKFreq+0x50>)
 8014872:	699b      	ldr	r3, [r3, #24]
 8014874:	f003 030f 	and.w	r3, r3, #15
 8014878:	4a09      	ldr	r2, [pc, #36]	; (80148a0 <HAL_RCC_GetHCLKFreq+0x54>)
 801487a:	5cd3      	ldrb	r3, [r2, r3]
 801487c:	f003 031f 	and.w	r3, r3, #31
 8014880:	687a      	ldr	r2, [r7, #4]
 8014882:	fa22 f303 	lsr.w	r3, r2, r3
 8014886:	4a07      	ldr	r2, [pc, #28]	; (80148a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8014888:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801488a:	4a07      	ldr	r2, [pc, #28]	; (80148a8 <HAL_RCC_GetHCLKFreq+0x5c>)
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8014890:	4b04      	ldr	r3, [pc, #16]	; (80148a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8014892:	681b      	ldr	r3, [r3, #0]
}
 8014894:	4618      	mov	r0, r3
 8014896:	3708      	adds	r7, #8
 8014898:	46bd      	mov	sp, r7
 801489a:	bd80      	pop	{r7, pc}
 801489c:	58024400 	.word	0x58024400
 80148a0:	0802ca58 	.word	0x0802ca58
 80148a4:	2400001c 	.word	0x2400001c
 80148a8:	24000018 	.word	0x24000018

080148ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80148ac:	b580      	push	{r7, lr}
 80148ae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80148b0:	f7ff ffcc 	bl	801484c <HAL_RCC_GetHCLKFreq>
 80148b4:	4602      	mov	r2, r0
 80148b6:	4b06      	ldr	r3, [pc, #24]	; (80148d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80148b8:	69db      	ldr	r3, [r3, #28]
 80148ba:	091b      	lsrs	r3, r3, #4
 80148bc:	f003 0307 	and.w	r3, r3, #7
 80148c0:	4904      	ldr	r1, [pc, #16]	; (80148d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80148c2:	5ccb      	ldrb	r3, [r1, r3]
 80148c4:	f003 031f 	and.w	r3, r3, #31
 80148c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80148cc:	4618      	mov	r0, r3
 80148ce:	bd80      	pop	{r7, pc}
 80148d0:	58024400 	.word	0x58024400
 80148d4:	0802ca58 	.word	0x0802ca58

080148d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80148d8:	b580      	push	{r7, lr}
 80148da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80148dc:	f7ff ffb6 	bl	801484c <HAL_RCC_GetHCLKFreq>
 80148e0:	4602      	mov	r2, r0
 80148e2:	4b06      	ldr	r3, [pc, #24]	; (80148fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80148e4:	69db      	ldr	r3, [r3, #28]
 80148e6:	0a1b      	lsrs	r3, r3, #8
 80148e8:	f003 0307 	and.w	r3, r3, #7
 80148ec:	4904      	ldr	r1, [pc, #16]	; (8014900 <HAL_RCC_GetPCLK2Freq+0x28>)
 80148ee:	5ccb      	ldrb	r3, [r1, r3]
 80148f0:	f003 031f 	and.w	r3, r3, #31
 80148f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80148f8:	4618      	mov	r0, r3
 80148fa:	bd80      	pop	{r7, pc}
 80148fc:	58024400 	.word	0x58024400
 8014900:	0802ca58 	.word	0x0802ca58

08014904 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8014904:	b480      	push	{r7}
 8014906:	b083      	sub	sp, #12
 8014908:	af00      	add	r7, sp, #0
 801490a:	6078      	str	r0, [r7, #4]
 801490c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	223f      	movs	r2, #63	; 0x3f
 8014912:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8014914:	4b1a      	ldr	r3, [pc, #104]	; (8014980 <HAL_RCC_GetClockConfig+0x7c>)
 8014916:	691b      	ldr	r3, [r3, #16]
 8014918:	f003 0207 	and.w	r2, r3, #7
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8014920:	4b17      	ldr	r3, [pc, #92]	; (8014980 <HAL_RCC_GetClockConfig+0x7c>)
 8014922:	699b      	ldr	r3, [r3, #24]
 8014924:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 801492c:	4b14      	ldr	r3, [pc, #80]	; (8014980 <HAL_RCC_GetClockConfig+0x7c>)
 801492e:	699b      	ldr	r3, [r3, #24]
 8014930:	f003 020f 	and.w	r2, r3, #15
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8014938:	4b11      	ldr	r3, [pc, #68]	; (8014980 <HAL_RCC_GetClockConfig+0x7c>)
 801493a:	699b      	ldr	r3, [r3, #24]
 801493c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8014944:	4b0e      	ldr	r3, [pc, #56]	; (8014980 <HAL_RCC_GetClockConfig+0x7c>)
 8014946:	69db      	ldr	r3, [r3, #28]
 8014948:	f003 0270 	and.w	r2, r3, #112	; 0x70
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8014950:	4b0b      	ldr	r3, [pc, #44]	; (8014980 <HAL_RCC_GetClockConfig+0x7c>)
 8014952:	69db      	ldr	r3, [r3, #28]
 8014954:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 801495c:	4b08      	ldr	r3, [pc, #32]	; (8014980 <HAL_RCC_GetClockConfig+0x7c>)
 801495e:	6a1b      	ldr	r3, [r3, #32]
 8014960:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8014968:	4b06      	ldr	r3, [pc, #24]	; (8014984 <HAL_RCC_GetClockConfig+0x80>)
 801496a:	681b      	ldr	r3, [r3, #0]
 801496c:	f003 020f 	and.w	r2, r3, #15
 8014970:	683b      	ldr	r3, [r7, #0]
 8014972:	601a      	str	r2, [r3, #0]
}
 8014974:	bf00      	nop
 8014976:	370c      	adds	r7, #12
 8014978:	46bd      	mov	sp, r7
 801497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801497e:	4770      	bx	lr
 8014980:	58024400 	.word	0x58024400
 8014984:	52002000 	.word	0x52002000

08014988 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8014988:	b580      	push	{r7, lr}
 801498a:	b086      	sub	sp, #24
 801498c:	af00      	add	r7, sp, #0
 801498e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8014990:	2300      	movs	r3, #0
 8014992:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8014994:	2300      	movs	r3, #0
 8014996:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	d03f      	beq.n	8014a24 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80149a8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80149ac:	d02a      	beq.n	8014a04 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80149ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80149b2:	d824      	bhi.n	80149fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80149b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80149b8:	d018      	beq.n	80149ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80149ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80149be:	d81e      	bhi.n	80149fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d003      	beq.n	80149cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80149c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80149c8:	d007      	beq.n	80149da <HAL_RCCEx_PeriphCLKConfig+0x52>
 80149ca:	e018      	b.n	80149fe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80149cc:	4bab      	ldr	r3, [pc, #684]	; (8014c7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80149ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80149d0:	4aaa      	ldr	r2, [pc, #680]	; (8014c7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80149d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80149d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80149d8:	e015      	b.n	8014a06 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	3304      	adds	r3, #4
 80149de:	2102      	movs	r1, #2
 80149e0:	4618      	mov	r0, r3
 80149e2:	f000 ff11 	bl	8015808 <RCCEx_PLL2_Config>
 80149e6:	4603      	mov	r3, r0
 80149e8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80149ea:	e00c      	b.n	8014a06 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	3324      	adds	r3, #36	; 0x24
 80149f0:	2102      	movs	r1, #2
 80149f2:	4618      	mov	r0, r3
 80149f4:	f000 ffba 	bl	801596c <RCCEx_PLL3_Config>
 80149f8:	4603      	mov	r3, r0
 80149fa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80149fc:	e003      	b.n	8014a06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80149fe:	2301      	movs	r3, #1
 8014a00:	75fb      	strb	r3, [r7, #23]
      break;
 8014a02:	e000      	b.n	8014a06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8014a04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8014a06:	7dfb      	ldrb	r3, [r7, #23]
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d109      	bne.n	8014a20 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8014a0c:	4b9b      	ldr	r3, [pc, #620]	; (8014c7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8014a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014a10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014a18:	4998      	ldr	r1, [pc, #608]	; (8014c7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8014a1a:	4313      	orrs	r3, r2
 8014a1c:	650b      	str	r3, [r1, #80]	; 0x50
 8014a1e:	e001      	b.n	8014a24 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014a20:	7dfb      	ldrb	r3, [r7, #23]
 8014a22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	681b      	ldr	r3, [r3, #0]
 8014a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d03d      	beq.n	8014aac <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014a34:	2b04      	cmp	r3, #4
 8014a36:	d826      	bhi.n	8014a86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8014a38:	a201      	add	r2, pc, #4	; (adr r2, 8014a40 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8014a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a3e:	bf00      	nop
 8014a40:	08014a55 	.word	0x08014a55
 8014a44:	08014a63 	.word	0x08014a63
 8014a48:	08014a75 	.word	0x08014a75
 8014a4c:	08014a8d 	.word	0x08014a8d
 8014a50:	08014a8d 	.word	0x08014a8d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8014a54:	4b89      	ldr	r3, [pc, #548]	; (8014c7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8014a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a58:	4a88      	ldr	r2, [pc, #544]	; (8014c7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8014a5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014a5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8014a60:	e015      	b.n	8014a8e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	3304      	adds	r3, #4
 8014a66:	2100      	movs	r1, #0
 8014a68:	4618      	mov	r0, r3
 8014a6a:	f000 fecd 	bl	8015808 <RCCEx_PLL2_Config>
 8014a6e:	4603      	mov	r3, r0
 8014a70:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8014a72:	e00c      	b.n	8014a8e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	3324      	adds	r3, #36	; 0x24
 8014a78:	2100      	movs	r1, #0
 8014a7a:	4618      	mov	r0, r3
 8014a7c:	f000 ff76 	bl	801596c <RCCEx_PLL3_Config>
 8014a80:	4603      	mov	r3, r0
 8014a82:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8014a84:	e003      	b.n	8014a8e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8014a86:	2301      	movs	r3, #1
 8014a88:	75fb      	strb	r3, [r7, #23]
      break;
 8014a8a:	e000      	b.n	8014a8e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8014a8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8014a8e:	7dfb      	ldrb	r3, [r7, #23]
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d109      	bne.n	8014aa8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8014a94:	4b79      	ldr	r3, [pc, #484]	; (8014c7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8014a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014a98:	f023 0207 	bic.w	r2, r3, #7
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014aa0:	4976      	ldr	r1, [pc, #472]	; (8014c7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8014aa2:	4313      	orrs	r3, r2
 8014aa4:	650b      	str	r3, [r1, #80]	; 0x50
 8014aa6:	e001      	b.n	8014aac <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014aa8:	7dfb      	ldrb	r3, [r7, #23]
 8014aaa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	681b      	ldr	r3, [r3, #0]
 8014ab0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	d042      	beq.n	8014b3e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014abc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014ac0:	d02b      	beq.n	8014b1a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8014ac2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014ac6:	d825      	bhi.n	8014b14 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8014ac8:	2bc0      	cmp	r3, #192	; 0xc0
 8014aca:	d028      	beq.n	8014b1e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8014acc:	2bc0      	cmp	r3, #192	; 0xc0
 8014ace:	d821      	bhi.n	8014b14 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8014ad0:	2b80      	cmp	r3, #128	; 0x80
 8014ad2:	d016      	beq.n	8014b02 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8014ad4:	2b80      	cmp	r3, #128	; 0x80
 8014ad6:	d81d      	bhi.n	8014b14 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d002      	beq.n	8014ae2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8014adc:	2b40      	cmp	r3, #64	; 0x40
 8014ade:	d007      	beq.n	8014af0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8014ae0:	e018      	b.n	8014b14 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8014ae2:	4b66      	ldr	r3, [pc, #408]	; (8014c7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8014ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ae6:	4a65      	ldr	r2, [pc, #404]	; (8014c7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8014ae8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014aec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8014aee:	e017      	b.n	8014b20 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	3304      	adds	r3, #4
 8014af4:	2100      	movs	r1, #0
 8014af6:	4618      	mov	r0, r3
 8014af8:	f000 fe86 	bl	8015808 <RCCEx_PLL2_Config>
 8014afc:	4603      	mov	r3, r0
 8014afe:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8014b00:	e00e      	b.n	8014b20 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	3324      	adds	r3, #36	; 0x24
 8014b06:	2100      	movs	r1, #0
 8014b08:	4618      	mov	r0, r3
 8014b0a:	f000 ff2f 	bl	801596c <RCCEx_PLL3_Config>
 8014b0e:	4603      	mov	r3, r0
 8014b10:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8014b12:	e005      	b.n	8014b20 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8014b14:	2301      	movs	r3, #1
 8014b16:	75fb      	strb	r3, [r7, #23]
      break;
 8014b18:	e002      	b.n	8014b20 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8014b1a:	bf00      	nop
 8014b1c:	e000      	b.n	8014b20 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8014b1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8014b20:	7dfb      	ldrb	r3, [r7, #23]
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d109      	bne.n	8014b3a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8014b26:	4b55      	ldr	r3, [pc, #340]	; (8014c7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8014b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014b2a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014b32:	4952      	ldr	r1, [pc, #328]	; (8014c7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8014b34:	4313      	orrs	r3, r2
 8014b36:	650b      	str	r3, [r1, #80]	; 0x50
 8014b38:	e001      	b.n	8014b3e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014b3a:	7dfb      	ldrb	r3, [r7, #23]
 8014b3c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	681b      	ldr	r3, [r3, #0]
 8014b42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d049      	beq.n	8014bde <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8014b50:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8014b54:	d030      	beq.n	8014bb8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8014b56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8014b5a:	d82a      	bhi.n	8014bb2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8014b5c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8014b60:	d02c      	beq.n	8014bbc <HAL_RCCEx_PeriphCLKConfig+0x234>
 8014b62:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8014b66:	d824      	bhi.n	8014bb2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8014b68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8014b6c:	d018      	beq.n	8014ba0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8014b6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8014b72:	d81e      	bhi.n	8014bb2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d003      	beq.n	8014b80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8014b78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8014b7c:	d007      	beq.n	8014b8e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8014b7e:	e018      	b.n	8014bb2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8014b80:	4b3e      	ldr	r3, [pc, #248]	; (8014c7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8014b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b84:	4a3d      	ldr	r2, [pc, #244]	; (8014c7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8014b86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014b8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8014b8c:	e017      	b.n	8014bbe <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	3304      	adds	r3, #4
 8014b92:	2100      	movs	r1, #0
 8014b94:	4618      	mov	r0, r3
 8014b96:	f000 fe37 	bl	8015808 <RCCEx_PLL2_Config>
 8014b9a:	4603      	mov	r3, r0
 8014b9c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8014b9e:	e00e      	b.n	8014bbe <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	3324      	adds	r3, #36	; 0x24
 8014ba4:	2100      	movs	r1, #0
 8014ba6:	4618      	mov	r0, r3
 8014ba8:	f000 fee0 	bl	801596c <RCCEx_PLL3_Config>
 8014bac:	4603      	mov	r3, r0
 8014bae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8014bb0:	e005      	b.n	8014bbe <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8014bb2:	2301      	movs	r3, #1
 8014bb4:	75fb      	strb	r3, [r7, #23]
      break;
 8014bb6:	e002      	b.n	8014bbe <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8014bb8:	bf00      	nop
 8014bba:	e000      	b.n	8014bbe <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8014bbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8014bbe:	7dfb      	ldrb	r3, [r7, #23]
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	d10a      	bne.n	8014bda <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8014bc4:	4b2d      	ldr	r3, [pc, #180]	; (8014c7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8014bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014bc8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8014bd2:	492a      	ldr	r1, [pc, #168]	; (8014c7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8014bd4:	4313      	orrs	r3, r2
 8014bd6:	658b      	str	r3, [r1, #88]	; 0x58
 8014bd8:	e001      	b.n	8014bde <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014bda:	7dfb      	ldrb	r3, [r7, #23]
 8014bdc:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	681b      	ldr	r3, [r3, #0]
 8014be2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d04c      	beq.n	8014c84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8014bf0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8014bf4:	d030      	beq.n	8014c58 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8014bf6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8014bfa:	d82a      	bhi.n	8014c52 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8014bfc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8014c00:	d02c      	beq.n	8014c5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8014c02:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8014c06:	d824      	bhi.n	8014c52 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8014c08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8014c0c:	d018      	beq.n	8014c40 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8014c0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8014c12:	d81e      	bhi.n	8014c52 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d003      	beq.n	8014c20 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8014c18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8014c1c:	d007      	beq.n	8014c2e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8014c1e:	e018      	b.n	8014c52 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8014c20:	4b16      	ldr	r3, [pc, #88]	; (8014c7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8014c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c24:	4a15      	ldr	r2, [pc, #84]	; (8014c7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8014c26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014c2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8014c2c:	e017      	b.n	8014c5e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	3304      	adds	r3, #4
 8014c32:	2100      	movs	r1, #0
 8014c34:	4618      	mov	r0, r3
 8014c36:	f000 fde7 	bl	8015808 <RCCEx_PLL2_Config>
 8014c3a:	4603      	mov	r3, r0
 8014c3c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8014c3e:	e00e      	b.n	8014c5e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	3324      	adds	r3, #36	; 0x24
 8014c44:	2100      	movs	r1, #0
 8014c46:	4618      	mov	r0, r3
 8014c48:	f000 fe90 	bl	801596c <RCCEx_PLL3_Config>
 8014c4c:	4603      	mov	r3, r0
 8014c4e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8014c50:	e005      	b.n	8014c5e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8014c52:	2301      	movs	r3, #1
 8014c54:	75fb      	strb	r3, [r7, #23]
      break;
 8014c56:	e002      	b.n	8014c5e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8014c58:	bf00      	nop
 8014c5a:	e000      	b.n	8014c5e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8014c5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8014c5e:	7dfb      	ldrb	r3, [r7, #23]
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d10d      	bne.n	8014c80 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8014c64:	4b05      	ldr	r3, [pc, #20]	; (8014c7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8014c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014c68:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8014c72:	4902      	ldr	r1, [pc, #8]	; (8014c7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8014c74:	4313      	orrs	r3, r2
 8014c76:	658b      	str	r3, [r1, #88]	; 0x58
 8014c78:	e004      	b.n	8014c84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8014c7a:	bf00      	nop
 8014c7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014c80:	7dfb      	ldrb	r3, [r7, #23]
 8014c82:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	681b      	ldr	r3, [r3, #0]
 8014c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d032      	beq.n	8014cf6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014c94:	2b30      	cmp	r3, #48	; 0x30
 8014c96:	d01c      	beq.n	8014cd2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8014c98:	2b30      	cmp	r3, #48	; 0x30
 8014c9a:	d817      	bhi.n	8014ccc <HAL_RCCEx_PeriphCLKConfig+0x344>
 8014c9c:	2b20      	cmp	r3, #32
 8014c9e:	d00c      	beq.n	8014cba <HAL_RCCEx_PeriphCLKConfig+0x332>
 8014ca0:	2b20      	cmp	r3, #32
 8014ca2:	d813      	bhi.n	8014ccc <HAL_RCCEx_PeriphCLKConfig+0x344>
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	d016      	beq.n	8014cd6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8014ca8:	2b10      	cmp	r3, #16
 8014caa:	d10f      	bne.n	8014ccc <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8014cac:	4baf      	ldr	r3, [pc, #700]	; (8014f6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8014cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014cb0:	4aae      	ldr	r2, [pc, #696]	; (8014f6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8014cb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014cb6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8014cb8:	e00e      	b.n	8014cd8 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	3304      	adds	r3, #4
 8014cbe:	2102      	movs	r1, #2
 8014cc0:	4618      	mov	r0, r3
 8014cc2:	f000 fda1 	bl	8015808 <RCCEx_PLL2_Config>
 8014cc6:	4603      	mov	r3, r0
 8014cc8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8014cca:	e005      	b.n	8014cd8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8014ccc:	2301      	movs	r3, #1
 8014cce:	75fb      	strb	r3, [r7, #23]
      break;
 8014cd0:	e002      	b.n	8014cd8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8014cd2:	bf00      	nop
 8014cd4:	e000      	b.n	8014cd8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8014cd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8014cd8:	7dfb      	ldrb	r3, [r7, #23]
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	d109      	bne.n	8014cf2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8014cde:	4ba3      	ldr	r3, [pc, #652]	; (8014f6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8014ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014ce2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014cea:	49a0      	ldr	r1, [pc, #640]	; (8014f6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8014cec:	4313      	orrs	r3, r2
 8014cee:	64cb      	str	r3, [r1, #76]	; 0x4c
 8014cf0:	e001      	b.n	8014cf6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014cf2:	7dfb      	ldrb	r3, [r7, #23]
 8014cf4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	681b      	ldr	r3, [r3, #0]
 8014cfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d047      	beq.n	8014d92 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014d06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014d0a:	d030      	beq.n	8014d6e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8014d0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014d10:	d82a      	bhi.n	8014d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8014d12:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8014d16:	d02c      	beq.n	8014d72 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8014d18:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8014d1c:	d824      	bhi.n	8014d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8014d1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014d22:	d018      	beq.n	8014d56 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8014d24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014d28:	d81e      	bhi.n	8014d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d003      	beq.n	8014d36 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8014d2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014d32:	d007      	beq.n	8014d44 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8014d34:	e018      	b.n	8014d68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8014d36:	4b8d      	ldr	r3, [pc, #564]	; (8014f6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8014d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d3a:	4a8c      	ldr	r2, [pc, #560]	; (8014f6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8014d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014d40:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8014d42:	e017      	b.n	8014d74 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	3304      	adds	r3, #4
 8014d48:	2100      	movs	r1, #0
 8014d4a:	4618      	mov	r0, r3
 8014d4c:	f000 fd5c 	bl	8015808 <RCCEx_PLL2_Config>
 8014d50:	4603      	mov	r3, r0
 8014d52:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8014d54:	e00e      	b.n	8014d74 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	3324      	adds	r3, #36	; 0x24
 8014d5a:	2100      	movs	r1, #0
 8014d5c:	4618      	mov	r0, r3
 8014d5e:	f000 fe05 	bl	801596c <RCCEx_PLL3_Config>
 8014d62:	4603      	mov	r3, r0
 8014d64:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8014d66:	e005      	b.n	8014d74 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8014d68:	2301      	movs	r3, #1
 8014d6a:	75fb      	strb	r3, [r7, #23]
      break;
 8014d6c:	e002      	b.n	8014d74 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8014d6e:	bf00      	nop
 8014d70:	e000      	b.n	8014d74 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8014d72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8014d74:	7dfb      	ldrb	r3, [r7, #23]
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d109      	bne.n	8014d8e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8014d7a:	4b7c      	ldr	r3, [pc, #496]	; (8014f6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8014d7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014d7e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014d86:	4979      	ldr	r1, [pc, #484]	; (8014f6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8014d88:	4313      	orrs	r3, r2
 8014d8a:	650b      	str	r3, [r1, #80]	; 0x50
 8014d8c:	e001      	b.n	8014d92 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014d8e:	7dfb      	ldrb	r3, [r7, #23]
 8014d90:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	681b      	ldr	r3, [r3, #0]
 8014d96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d049      	beq.n	8014e32 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014da2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8014da6:	d02e      	beq.n	8014e06 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8014da8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8014dac:	d828      	bhi.n	8014e00 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8014dae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8014db2:	d02a      	beq.n	8014e0a <HAL_RCCEx_PeriphCLKConfig+0x482>
 8014db4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8014db8:	d822      	bhi.n	8014e00 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8014dba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8014dbe:	d026      	beq.n	8014e0e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8014dc0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8014dc4:	d81c      	bhi.n	8014e00 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8014dc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8014dca:	d010      	beq.n	8014dee <HAL_RCCEx_PeriphCLKConfig+0x466>
 8014dcc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8014dd0:	d816      	bhi.n	8014e00 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8014dd2:	2b00      	cmp	r3, #0
 8014dd4:	d01d      	beq.n	8014e12 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8014dd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014dda:	d111      	bne.n	8014e00 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	3304      	adds	r3, #4
 8014de0:	2101      	movs	r1, #1
 8014de2:	4618      	mov	r0, r3
 8014de4:	f000 fd10 	bl	8015808 <RCCEx_PLL2_Config>
 8014de8:	4603      	mov	r3, r0
 8014dea:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8014dec:	e012      	b.n	8014e14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	3324      	adds	r3, #36	; 0x24
 8014df2:	2101      	movs	r1, #1
 8014df4:	4618      	mov	r0, r3
 8014df6:	f000 fdb9 	bl	801596c <RCCEx_PLL3_Config>
 8014dfa:	4603      	mov	r3, r0
 8014dfc:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8014dfe:	e009      	b.n	8014e14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8014e00:	2301      	movs	r3, #1
 8014e02:	75fb      	strb	r3, [r7, #23]
      break;
 8014e04:	e006      	b.n	8014e14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8014e06:	bf00      	nop
 8014e08:	e004      	b.n	8014e14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8014e0a:	bf00      	nop
 8014e0c:	e002      	b.n	8014e14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8014e0e:	bf00      	nop
 8014e10:	e000      	b.n	8014e14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8014e12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8014e14:	7dfb      	ldrb	r3, [r7, #23]
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d109      	bne.n	8014e2e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8014e1a:	4b54      	ldr	r3, [pc, #336]	; (8014f6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8014e1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014e1e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014e26:	4951      	ldr	r1, [pc, #324]	; (8014f6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8014e28:	4313      	orrs	r3, r2
 8014e2a:	650b      	str	r3, [r1, #80]	; 0x50
 8014e2c:	e001      	b.n	8014e32 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014e2e:	7dfb      	ldrb	r3, [r7, #23]
 8014e30:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	681b      	ldr	r3, [r3, #0]
 8014e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d04b      	beq.n	8014ed6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8014e44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8014e48:	d02e      	beq.n	8014ea8 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8014e4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8014e4e:	d828      	bhi.n	8014ea2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8014e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014e54:	d02a      	beq.n	8014eac <HAL_RCCEx_PeriphCLKConfig+0x524>
 8014e56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014e5a:	d822      	bhi.n	8014ea2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8014e5c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8014e60:	d026      	beq.n	8014eb0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8014e62:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8014e66:	d81c      	bhi.n	8014ea2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8014e68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8014e6c:	d010      	beq.n	8014e90 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8014e6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8014e72:	d816      	bhi.n	8014ea2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d01d      	beq.n	8014eb4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8014e78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8014e7c:	d111      	bne.n	8014ea2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	3304      	adds	r3, #4
 8014e82:	2101      	movs	r1, #1
 8014e84:	4618      	mov	r0, r3
 8014e86:	f000 fcbf 	bl	8015808 <RCCEx_PLL2_Config>
 8014e8a:	4603      	mov	r3, r0
 8014e8c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8014e8e:	e012      	b.n	8014eb6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	3324      	adds	r3, #36	; 0x24
 8014e94:	2101      	movs	r1, #1
 8014e96:	4618      	mov	r0, r3
 8014e98:	f000 fd68 	bl	801596c <RCCEx_PLL3_Config>
 8014e9c:	4603      	mov	r3, r0
 8014e9e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8014ea0:	e009      	b.n	8014eb6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8014ea2:	2301      	movs	r3, #1
 8014ea4:	75fb      	strb	r3, [r7, #23]
      break;
 8014ea6:	e006      	b.n	8014eb6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8014ea8:	bf00      	nop
 8014eaa:	e004      	b.n	8014eb6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8014eac:	bf00      	nop
 8014eae:	e002      	b.n	8014eb6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8014eb0:	bf00      	nop
 8014eb2:	e000      	b.n	8014eb6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8014eb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8014eb6:	7dfb      	ldrb	r3, [r7, #23]
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d10a      	bne.n	8014ed2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8014ebc:	4b2b      	ldr	r3, [pc, #172]	; (8014f6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8014ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014ec0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8014eca:	4928      	ldr	r1, [pc, #160]	; (8014f6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8014ecc:	4313      	orrs	r3, r2
 8014ece:	658b      	str	r3, [r1, #88]	; 0x58
 8014ed0:	e001      	b.n	8014ed6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014ed2:	7dfb      	ldrb	r3, [r7, #23]
 8014ed4:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	681b      	ldr	r3, [r3, #0]
 8014eda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	d02f      	beq.n	8014f42 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014ee6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8014eea:	d00e      	beq.n	8014f0a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8014eec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8014ef0:	d814      	bhi.n	8014f1c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	d015      	beq.n	8014f22 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8014ef6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8014efa:	d10f      	bne.n	8014f1c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8014efc:	4b1b      	ldr	r3, [pc, #108]	; (8014f6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8014efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f00:	4a1a      	ldr	r2, [pc, #104]	; (8014f6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8014f02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014f06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8014f08:	e00c      	b.n	8014f24 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	3304      	adds	r3, #4
 8014f0e:	2101      	movs	r1, #1
 8014f10:	4618      	mov	r0, r3
 8014f12:	f000 fc79 	bl	8015808 <RCCEx_PLL2_Config>
 8014f16:	4603      	mov	r3, r0
 8014f18:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8014f1a:	e003      	b.n	8014f24 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8014f1c:	2301      	movs	r3, #1
 8014f1e:	75fb      	strb	r3, [r7, #23]
      break;
 8014f20:	e000      	b.n	8014f24 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8014f22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8014f24:	7dfb      	ldrb	r3, [r7, #23]
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d109      	bne.n	8014f3e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8014f2a:	4b10      	ldr	r3, [pc, #64]	; (8014f6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8014f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014f2e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014f36:	490d      	ldr	r1, [pc, #52]	; (8014f6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8014f38:	4313      	orrs	r3, r2
 8014f3a:	650b      	str	r3, [r1, #80]	; 0x50
 8014f3c:	e001      	b.n	8014f42 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014f3e:	7dfb      	ldrb	r3, [r7, #23]
 8014f40:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	681b      	ldr	r3, [r3, #0]
 8014f46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d033      	beq.n	8014fb6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014f52:	2b03      	cmp	r3, #3
 8014f54:	d81c      	bhi.n	8014f90 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8014f56:	a201      	add	r2, pc, #4	; (adr r2, 8014f5c <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8014f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f5c:	08014f97 	.word	0x08014f97
 8014f60:	08014f71 	.word	0x08014f71
 8014f64:	08014f7f 	.word	0x08014f7f
 8014f68:	08014f97 	.word	0x08014f97
 8014f6c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8014f70:	4bb8      	ldr	r3, [pc, #736]	; (8015254 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8014f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f74:	4ab7      	ldr	r2, [pc, #732]	; (8015254 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8014f76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014f7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8014f7c:	e00c      	b.n	8014f98 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	3304      	adds	r3, #4
 8014f82:	2102      	movs	r1, #2
 8014f84:	4618      	mov	r0, r3
 8014f86:	f000 fc3f 	bl	8015808 <RCCEx_PLL2_Config>
 8014f8a:	4603      	mov	r3, r0
 8014f8c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8014f8e:	e003      	b.n	8014f98 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8014f90:	2301      	movs	r3, #1
 8014f92:	75fb      	strb	r3, [r7, #23]
      break;
 8014f94:	e000      	b.n	8014f98 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8014f96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8014f98:	7dfb      	ldrb	r3, [r7, #23]
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d109      	bne.n	8014fb2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8014f9e:	4bad      	ldr	r3, [pc, #692]	; (8015254 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8014fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014fa2:	f023 0203 	bic.w	r2, r3, #3
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014faa:	49aa      	ldr	r1, [pc, #680]	; (8015254 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8014fac:	4313      	orrs	r3, r2
 8014fae:	64cb      	str	r3, [r1, #76]	; 0x4c
 8014fb0:	e001      	b.n	8014fb6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014fb2:	7dfb      	ldrb	r3, [r7, #23]
 8014fb4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	681b      	ldr	r3, [r3, #0]
 8014fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	f000 8086 	beq.w	80150d0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8014fc4:	4ba4      	ldr	r3, [pc, #656]	; (8015258 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8014fc6:	681b      	ldr	r3, [r3, #0]
 8014fc8:	4aa3      	ldr	r2, [pc, #652]	; (8015258 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8014fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014fce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8014fd0:	f7fb fac6 	bl	8010560 <HAL_GetTick>
 8014fd4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8014fd6:	e009      	b.n	8014fec <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8014fd8:	f7fb fac2 	bl	8010560 <HAL_GetTick>
 8014fdc:	4602      	mov	r2, r0
 8014fde:	693b      	ldr	r3, [r7, #16]
 8014fe0:	1ad3      	subs	r3, r2, r3
 8014fe2:	2b64      	cmp	r3, #100	; 0x64
 8014fe4:	d902      	bls.n	8014fec <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8014fe6:	2303      	movs	r3, #3
 8014fe8:	75fb      	strb	r3, [r7, #23]
        break;
 8014fea:	e005      	b.n	8014ff8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8014fec:	4b9a      	ldr	r3, [pc, #616]	; (8015258 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8014fee:	681b      	ldr	r3, [r3, #0]
 8014ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d0ef      	beq.n	8014fd8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8014ff8:	7dfb      	ldrb	r3, [r7, #23]
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d166      	bne.n	80150cc <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8014ffe:	4b95      	ldr	r3, [pc, #596]	; (8015254 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8015000:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8015008:	4053      	eors	r3, r2
 801500a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801500e:	2b00      	cmp	r3, #0
 8015010:	d013      	beq.n	801503a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8015012:	4b90      	ldr	r3, [pc, #576]	; (8015254 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8015014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015016:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801501a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801501c:	4b8d      	ldr	r3, [pc, #564]	; (8015254 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 801501e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015020:	4a8c      	ldr	r2, [pc, #560]	; (8015254 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8015022:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8015026:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8015028:	4b8a      	ldr	r3, [pc, #552]	; (8015254 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 801502a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801502c:	4a89      	ldr	r2, [pc, #548]	; (8015254 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 801502e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8015032:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8015034:	4a87      	ldr	r2, [pc, #540]	; (8015254 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8015036:	68fb      	ldr	r3, [r7, #12]
 8015038:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8015040:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015044:	d115      	bne.n	8015072 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015046:	f7fb fa8b 	bl	8010560 <HAL_GetTick>
 801504a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801504c:	e00b      	b.n	8015066 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801504e:	f7fb fa87 	bl	8010560 <HAL_GetTick>
 8015052:	4602      	mov	r2, r0
 8015054:	693b      	ldr	r3, [r7, #16]
 8015056:	1ad3      	subs	r3, r2, r3
 8015058:	f241 3288 	movw	r2, #5000	; 0x1388
 801505c:	4293      	cmp	r3, r2
 801505e:	d902      	bls.n	8015066 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8015060:	2303      	movs	r3, #3
 8015062:	75fb      	strb	r3, [r7, #23]
            break;
 8015064:	e005      	b.n	8015072 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015066:	4b7b      	ldr	r3, [pc, #492]	; (8015254 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8015068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801506a:	f003 0302 	and.w	r3, r3, #2
 801506e:	2b00      	cmp	r3, #0
 8015070:	d0ed      	beq.n	801504e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8015072:	7dfb      	ldrb	r3, [r7, #23]
 8015074:	2b00      	cmp	r3, #0
 8015076:	d126      	bne.n	80150c6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801507e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8015082:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8015086:	d10d      	bne.n	80150a4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8015088:	4b72      	ldr	r3, [pc, #456]	; (8015254 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 801508a:	691b      	ldr	r3, [r3, #16]
 801508c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8015096:	0919      	lsrs	r1, r3, #4
 8015098:	4b70      	ldr	r3, [pc, #448]	; (801525c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 801509a:	400b      	ands	r3, r1
 801509c:	496d      	ldr	r1, [pc, #436]	; (8015254 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 801509e:	4313      	orrs	r3, r2
 80150a0:	610b      	str	r3, [r1, #16]
 80150a2:	e005      	b.n	80150b0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80150a4:	4b6b      	ldr	r3, [pc, #428]	; (8015254 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80150a6:	691b      	ldr	r3, [r3, #16]
 80150a8:	4a6a      	ldr	r2, [pc, #424]	; (8015254 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80150aa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80150ae:	6113      	str	r3, [r2, #16]
 80150b0:	4b68      	ldr	r3, [pc, #416]	; (8015254 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80150b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80150ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80150be:	4965      	ldr	r1, [pc, #404]	; (8015254 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80150c0:	4313      	orrs	r3, r2
 80150c2:	670b      	str	r3, [r1, #112]	; 0x70
 80150c4:	e004      	b.n	80150d0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80150c6:	7dfb      	ldrb	r3, [r7, #23]
 80150c8:	75bb      	strb	r3, [r7, #22]
 80150ca:	e001      	b.n	80150d0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80150cc:	7dfb      	ldrb	r3, [r7, #23]
 80150ce:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	681b      	ldr	r3, [r3, #0]
 80150d4:	f003 0301 	and.w	r3, r3, #1
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d07e      	beq.n	80151da <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80150e0:	2b28      	cmp	r3, #40	; 0x28
 80150e2:	d867      	bhi.n	80151b4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80150e4:	a201      	add	r2, pc, #4	; (adr r2, 80150ec <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80150e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80150ea:	bf00      	nop
 80150ec:	080151bb 	.word	0x080151bb
 80150f0:	080151b5 	.word	0x080151b5
 80150f4:	080151b5 	.word	0x080151b5
 80150f8:	080151b5 	.word	0x080151b5
 80150fc:	080151b5 	.word	0x080151b5
 8015100:	080151b5 	.word	0x080151b5
 8015104:	080151b5 	.word	0x080151b5
 8015108:	080151b5 	.word	0x080151b5
 801510c:	08015191 	.word	0x08015191
 8015110:	080151b5 	.word	0x080151b5
 8015114:	080151b5 	.word	0x080151b5
 8015118:	080151b5 	.word	0x080151b5
 801511c:	080151b5 	.word	0x080151b5
 8015120:	080151b5 	.word	0x080151b5
 8015124:	080151b5 	.word	0x080151b5
 8015128:	080151b5 	.word	0x080151b5
 801512c:	080151a3 	.word	0x080151a3
 8015130:	080151b5 	.word	0x080151b5
 8015134:	080151b5 	.word	0x080151b5
 8015138:	080151b5 	.word	0x080151b5
 801513c:	080151b5 	.word	0x080151b5
 8015140:	080151b5 	.word	0x080151b5
 8015144:	080151b5 	.word	0x080151b5
 8015148:	080151b5 	.word	0x080151b5
 801514c:	080151bb 	.word	0x080151bb
 8015150:	080151b5 	.word	0x080151b5
 8015154:	080151b5 	.word	0x080151b5
 8015158:	080151b5 	.word	0x080151b5
 801515c:	080151b5 	.word	0x080151b5
 8015160:	080151b5 	.word	0x080151b5
 8015164:	080151b5 	.word	0x080151b5
 8015168:	080151b5 	.word	0x080151b5
 801516c:	080151bb 	.word	0x080151bb
 8015170:	080151b5 	.word	0x080151b5
 8015174:	080151b5 	.word	0x080151b5
 8015178:	080151b5 	.word	0x080151b5
 801517c:	080151b5 	.word	0x080151b5
 8015180:	080151b5 	.word	0x080151b5
 8015184:	080151b5 	.word	0x080151b5
 8015188:	080151b5 	.word	0x080151b5
 801518c:	080151bb 	.word	0x080151bb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	3304      	adds	r3, #4
 8015194:	2101      	movs	r1, #1
 8015196:	4618      	mov	r0, r3
 8015198:	f000 fb36 	bl	8015808 <RCCEx_PLL2_Config>
 801519c:	4603      	mov	r3, r0
 801519e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80151a0:	e00c      	b.n	80151bc <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	3324      	adds	r3, #36	; 0x24
 80151a6:	2101      	movs	r1, #1
 80151a8:	4618      	mov	r0, r3
 80151aa:	f000 fbdf 	bl	801596c <RCCEx_PLL3_Config>
 80151ae:	4603      	mov	r3, r0
 80151b0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80151b2:	e003      	b.n	80151bc <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80151b4:	2301      	movs	r3, #1
 80151b6:	75fb      	strb	r3, [r7, #23]
      break;
 80151b8:	e000      	b.n	80151bc <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80151ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80151bc:	7dfb      	ldrb	r3, [r7, #23]
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d109      	bne.n	80151d6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80151c2:	4b24      	ldr	r3, [pc, #144]	; (8015254 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80151c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80151c6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80151ce:	4921      	ldr	r1, [pc, #132]	; (8015254 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80151d0:	4313      	orrs	r3, r2
 80151d2:	654b      	str	r3, [r1, #84]	; 0x54
 80151d4:	e001      	b.n	80151da <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80151d6:	7dfb      	ldrb	r3, [r7, #23]
 80151d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	681b      	ldr	r3, [r3, #0]
 80151de:	f003 0302 	and.w	r3, r3, #2
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	d03e      	beq.n	8015264 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80151ea:	2b05      	cmp	r3, #5
 80151ec:	d820      	bhi.n	8015230 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80151ee:	a201      	add	r2, pc, #4	; (adr r2, 80151f4 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80151f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80151f4:	08015237 	.word	0x08015237
 80151f8:	0801520d 	.word	0x0801520d
 80151fc:	0801521f 	.word	0x0801521f
 8015200:	08015237 	.word	0x08015237
 8015204:	08015237 	.word	0x08015237
 8015208:	08015237 	.word	0x08015237
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	3304      	adds	r3, #4
 8015210:	2101      	movs	r1, #1
 8015212:	4618      	mov	r0, r3
 8015214:	f000 faf8 	bl	8015808 <RCCEx_PLL2_Config>
 8015218:	4603      	mov	r3, r0
 801521a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 801521c:	e00c      	b.n	8015238 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	3324      	adds	r3, #36	; 0x24
 8015222:	2101      	movs	r1, #1
 8015224:	4618      	mov	r0, r3
 8015226:	f000 fba1 	bl	801596c <RCCEx_PLL3_Config>
 801522a:	4603      	mov	r3, r0
 801522c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 801522e:	e003      	b.n	8015238 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015230:	2301      	movs	r3, #1
 8015232:	75fb      	strb	r3, [r7, #23]
      break;
 8015234:	e000      	b.n	8015238 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8015236:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015238:	7dfb      	ldrb	r3, [r7, #23]
 801523a:	2b00      	cmp	r3, #0
 801523c:	d110      	bne.n	8015260 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 801523e:	4b05      	ldr	r3, [pc, #20]	; (8015254 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8015240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015242:	f023 0207 	bic.w	r2, r3, #7
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801524a:	4902      	ldr	r1, [pc, #8]	; (8015254 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 801524c:	4313      	orrs	r3, r2
 801524e:	654b      	str	r3, [r1, #84]	; 0x54
 8015250:	e008      	b.n	8015264 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8015252:	bf00      	nop
 8015254:	58024400 	.word	0x58024400
 8015258:	58024800 	.word	0x58024800
 801525c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015260:	7dfb      	ldrb	r3, [r7, #23]
 8015262:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	681b      	ldr	r3, [r3, #0]
 8015268:	f003 0304 	and.w	r3, r3, #4
 801526c:	2b00      	cmp	r3, #0
 801526e:	d039      	beq.n	80152e4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015276:	2b05      	cmp	r3, #5
 8015278:	d820      	bhi.n	80152bc <HAL_RCCEx_PeriphCLKConfig+0x934>
 801527a:	a201      	add	r2, pc, #4	; (adr r2, 8015280 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 801527c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015280:	080152c3 	.word	0x080152c3
 8015284:	08015299 	.word	0x08015299
 8015288:	080152ab 	.word	0x080152ab
 801528c:	080152c3 	.word	0x080152c3
 8015290:	080152c3 	.word	0x080152c3
 8015294:	080152c3 	.word	0x080152c3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	3304      	adds	r3, #4
 801529c:	2101      	movs	r1, #1
 801529e:	4618      	mov	r0, r3
 80152a0:	f000 fab2 	bl	8015808 <RCCEx_PLL2_Config>
 80152a4:	4603      	mov	r3, r0
 80152a6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80152a8:	e00c      	b.n	80152c4 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	3324      	adds	r3, #36	; 0x24
 80152ae:	2101      	movs	r1, #1
 80152b0:	4618      	mov	r0, r3
 80152b2:	f000 fb5b 	bl	801596c <RCCEx_PLL3_Config>
 80152b6:	4603      	mov	r3, r0
 80152b8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80152ba:	e003      	b.n	80152c4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80152bc:	2301      	movs	r3, #1
 80152be:	75fb      	strb	r3, [r7, #23]
      break;
 80152c0:	e000      	b.n	80152c4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80152c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80152c4:	7dfb      	ldrb	r3, [r7, #23]
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d10a      	bne.n	80152e0 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80152ca:	4bb7      	ldr	r3, [pc, #732]	; (80155a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80152cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80152ce:	f023 0207 	bic.w	r2, r3, #7
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80152d8:	49b3      	ldr	r1, [pc, #716]	; (80155a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80152da:	4313      	orrs	r3, r2
 80152dc:	658b      	str	r3, [r1, #88]	; 0x58
 80152de:	e001      	b.n	80152e4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80152e0:	7dfb      	ldrb	r3, [r7, #23]
 80152e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	681b      	ldr	r3, [r3, #0]
 80152e8:	f003 0320 	and.w	r3, r3, #32
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	d04b      	beq.n	8015388 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80152f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80152fa:	d02e      	beq.n	801535a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80152fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8015300:	d828      	bhi.n	8015354 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8015302:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015306:	d02a      	beq.n	801535e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8015308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801530c:	d822      	bhi.n	8015354 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 801530e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8015312:	d026      	beq.n	8015362 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8015314:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8015318:	d81c      	bhi.n	8015354 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 801531a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801531e:	d010      	beq.n	8015342 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8015320:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8015324:	d816      	bhi.n	8015354 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8015326:	2b00      	cmp	r3, #0
 8015328:	d01d      	beq.n	8015366 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 801532a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801532e:	d111      	bne.n	8015354 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	3304      	adds	r3, #4
 8015334:	2100      	movs	r1, #0
 8015336:	4618      	mov	r0, r3
 8015338:	f000 fa66 	bl	8015808 <RCCEx_PLL2_Config>
 801533c:	4603      	mov	r3, r0
 801533e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8015340:	e012      	b.n	8015368 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8015342:	687b      	ldr	r3, [r7, #4]
 8015344:	3324      	adds	r3, #36	; 0x24
 8015346:	2102      	movs	r1, #2
 8015348:	4618      	mov	r0, r3
 801534a:	f000 fb0f 	bl	801596c <RCCEx_PLL3_Config>
 801534e:	4603      	mov	r3, r0
 8015350:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8015352:	e009      	b.n	8015368 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015354:	2301      	movs	r3, #1
 8015356:	75fb      	strb	r3, [r7, #23]
      break;
 8015358:	e006      	b.n	8015368 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 801535a:	bf00      	nop
 801535c:	e004      	b.n	8015368 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 801535e:	bf00      	nop
 8015360:	e002      	b.n	8015368 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8015362:	bf00      	nop
 8015364:	e000      	b.n	8015368 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8015366:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015368:	7dfb      	ldrb	r3, [r7, #23]
 801536a:	2b00      	cmp	r3, #0
 801536c:	d10a      	bne.n	8015384 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801536e:	4b8e      	ldr	r3, [pc, #568]	; (80155a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8015370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015372:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801537c:	498a      	ldr	r1, [pc, #552]	; (80155a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 801537e:	4313      	orrs	r3, r2
 8015380:	654b      	str	r3, [r1, #84]	; 0x54
 8015382:	e001      	b.n	8015388 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015384:	7dfb      	ldrb	r3, [r7, #23]
 8015386:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	681b      	ldr	r3, [r3, #0]
 801538c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015390:	2b00      	cmp	r3, #0
 8015392:	d04b      	beq.n	801542c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801539a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 801539e:	d02e      	beq.n	80153fe <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80153a0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80153a4:	d828      	bhi.n	80153f8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80153a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80153aa:	d02a      	beq.n	8015402 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80153ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80153b0:	d822      	bhi.n	80153f8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80153b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80153b6:	d026      	beq.n	8015406 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80153b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80153bc:	d81c      	bhi.n	80153f8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80153be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80153c2:	d010      	beq.n	80153e6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80153c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80153c8:	d816      	bhi.n	80153f8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d01d      	beq.n	801540a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80153ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80153d2:	d111      	bne.n	80153f8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	3304      	adds	r3, #4
 80153d8:	2100      	movs	r1, #0
 80153da:	4618      	mov	r0, r3
 80153dc:	f000 fa14 	bl	8015808 <RCCEx_PLL2_Config>
 80153e0:	4603      	mov	r3, r0
 80153e2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80153e4:	e012      	b.n	801540c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	3324      	adds	r3, #36	; 0x24
 80153ea:	2102      	movs	r1, #2
 80153ec:	4618      	mov	r0, r3
 80153ee:	f000 fabd 	bl	801596c <RCCEx_PLL3_Config>
 80153f2:	4603      	mov	r3, r0
 80153f4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80153f6:	e009      	b.n	801540c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80153f8:	2301      	movs	r3, #1
 80153fa:	75fb      	strb	r3, [r7, #23]
      break;
 80153fc:	e006      	b.n	801540c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80153fe:	bf00      	nop
 8015400:	e004      	b.n	801540c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8015402:	bf00      	nop
 8015404:	e002      	b.n	801540c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8015406:	bf00      	nop
 8015408:	e000      	b.n	801540c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 801540a:	bf00      	nop
    }

    if(ret == HAL_OK)
 801540c:	7dfb      	ldrb	r3, [r7, #23]
 801540e:	2b00      	cmp	r3, #0
 8015410:	d10a      	bne.n	8015428 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8015412:	4b65      	ldr	r3, [pc, #404]	; (80155a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8015414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015416:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015420:	4961      	ldr	r1, [pc, #388]	; (80155a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8015422:	4313      	orrs	r3, r2
 8015424:	658b      	str	r3, [r1, #88]	; 0x58
 8015426:	e001      	b.n	801542c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015428:	7dfb      	ldrb	r3, [r7, #23]
 801542a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	681b      	ldr	r3, [r3, #0]
 8015430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015434:	2b00      	cmp	r3, #0
 8015436:	d04b      	beq.n	80154d0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801543e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8015442:	d02e      	beq.n	80154a2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8015444:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8015448:	d828      	bhi.n	801549c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 801544a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801544e:	d02a      	beq.n	80154a6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8015450:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015454:	d822      	bhi.n	801549c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8015456:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 801545a:	d026      	beq.n	80154aa <HAL_RCCEx_PeriphCLKConfig+0xb22>
 801545c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8015460:	d81c      	bhi.n	801549c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8015462:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015466:	d010      	beq.n	801548a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8015468:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801546c:	d816      	bhi.n	801549c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 801546e:	2b00      	cmp	r3, #0
 8015470:	d01d      	beq.n	80154ae <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8015472:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8015476:	d111      	bne.n	801549c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	3304      	adds	r3, #4
 801547c:	2100      	movs	r1, #0
 801547e:	4618      	mov	r0, r3
 8015480:	f000 f9c2 	bl	8015808 <RCCEx_PLL2_Config>
 8015484:	4603      	mov	r3, r0
 8015486:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8015488:	e012      	b.n	80154b0 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	3324      	adds	r3, #36	; 0x24
 801548e:	2102      	movs	r1, #2
 8015490:	4618      	mov	r0, r3
 8015492:	f000 fa6b 	bl	801596c <RCCEx_PLL3_Config>
 8015496:	4603      	mov	r3, r0
 8015498:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 801549a:	e009      	b.n	80154b0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801549c:	2301      	movs	r3, #1
 801549e:	75fb      	strb	r3, [r7, #23]
      break;
 80154a0:	e006      	b.n	80154b0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80154a2:	bf00      	nop
 80154a4:	e004      	b.n	80154b0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80154a6:	bf00      	nop
 80154a8:	e002      	b.n	80154b0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80154aa:	bf00      	nop
 80154ac:	e000      	b.n	80154b0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80154ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80154b0:	7dfb      	ldrb	r3, [r7, #23]
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d10a      	bne.n	80154cc <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80154b6:	4b3c      	ldr	r3, [pc, #240]	; (80155a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80154b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80154ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80154c4:	4938      	ldr	r1, [pc, #224]	; (80155a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80154c6:	4313      	orrs	r3, r2
 80154c8:	658b      	str	r3, [r1, #88]	; 0x58
 80154ca:	e001      	b.n	80154d0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80154cc:	7dfb      	ldrb	r3, [r7, #23]
 80154ce:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	681b      	ldr	r3, [r3, #0]
 80154d4:	f003 0308 	and.w	r3, r3, #8
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d01a      	beq.n	8015512 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80154e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80154e6:	d10a      	bne.n	80154fe <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	3324      	adds	r3, #36	; 0x24
 80154ec:	2102      	movs	r1, #2
 80154ee:	4618      	mov	r0, r3
 80154f0:	f000 fa3c 	bl	801596c <RCCEx_PLL3_Config>
 80154f4:	4603      	mov	r3, r0
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	d001      	beq.n	80154fe <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80154fa:	2301      	movs	r3, #1
 80154fc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80154fe:	4b2a      	ldr	r3, [pc, #168]	; (80155a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8015500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015502:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801550c:	4926      	ldr	r1, [pc, #152]	; (80155a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 801550e:	4313      	orrs	r3, r2
 8015510:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	681b      	ldr	r3, [r3, #0]
 8015516:	f003 0310 	and.w	r3, r3, #16
 801551a:	2b00      	cmp	r3, #0
 801551c:	d01a      	beq.n	8015554 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015524:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015528:	d10a      	bne.n	8015540 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	3324      	adds	r3, #36	; 0x24
 801552e:	2102      	movs	r1, #2
 8015530:	4618      	mov	r0, r3
 8015532:	f000 fa1b 	bl	801596c <RCCEx_PLL3_Config>
 8015536:	4603      	mov	r3, r0
 8015538:	2b00      	cmp	r3, #0
 801553a:	d001      	beq.n	8015540 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 801553c:	2301      	movs	r3, #1
 801553e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8015540:	4b19      	ldr	r3, [pc, #100]	; (80155a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8015542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015544:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801554e:	4916      	ldr	r1, [pc, #88]	; (80155a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8015550:	4313      	orrs	r3, r2
 8015552:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	681b      	ldr	r3, [r3, #0]
 8015558:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801555c:	2b00      	cmp	r3, #0
 801555e:	d036      	beq.n	80155ce <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015566:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801556a:	d01f      	beq.n	80155ac <HAL_RCCEx_PeriphCLKConfig+0xc24>
 801556c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8015570:	d817      	bhi.n	80155a2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8015572:	2b00      	cmp	r3, #0
 8015574:	d003      	beq.n	801557e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8015576:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801557a:	d009      	beq.n	8015590 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 801557c:	e011      	b.n	80155a2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	3304      	adds	r3, #4
 8015582:	2100      	movs	r1, #0
 8015584:	4618      	mov	r0, r3
 8015586:	f000 f93f 	bl	8015808 <RCCEx_PLL2_Config>
 801558a:	4603      	mov	r3, r0
 801558c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 801558e:	e00e      	b.n	80155ae <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	3324      	adds	r3, #36	; 0x24
 8015594:	2102      	movs	r1, #2
 8015596:	4618      	mov	r0, r3
 8015598:	f000 f9e8 	bl	801596c <RCCEx_PLL3_Config>
 801559c:	4603      	mov	r3, r0
 801559e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80155a0:	e005      	b.n	80155ae <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80155a2:	2301      	movs	r3, #1
 80155a4:	75fb      	strb	r3, [r7, #23]
      break;
 80155a6:	e002      	b.n	80155ae <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80155a8:	58024400 	.word	0x58024400
      break;
 80155ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80155ae:	7dfb      	ldrb	r3, [r7, #23]
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	d10a      	bne.n	80155ca <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80155b4:	4b93      	ldr	r3, [pc, #588]	; (8015804 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80155b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80155b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80155c2:	4990      	ldr	r1, [pc, #576]	; (8015804 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80155c4:	4313      	orrs	r3, r2
 80155c6:	658b      	str	r3, [r1, #88]	; 0x58
 80155c8:	e001      	b.n	80155ce <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80155ca:	7dfb      	ldrb	r3, [r7, #23]
 80155cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	681b      	ldr	r3, [r3, #0]
 80155d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	d033      	beq.n	8015642 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80155e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80155e4:	d01c      	beq.n	8015620 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80155e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80155ea:	d816      	bhi.n	801561a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80155ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80155f0:	d003      	beq.n	80155fa <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80155f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80155f6:	d007      	beq.n	8015608 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80155f8:	e00f      	b.n	801561a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80155fa:	4b82      	ldr	r3, [pc, #520]	; (8015804 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80155fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80155fe:	4a81      	ldr	r2, [pc, #516]	; (8015804 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8015600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015604:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8015606:	e00c      	b.n	8015622 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	3324      	adds	r3, #36	; 0x24
 801560c:	2101      	movs	r1, #1
 801560e:	4618      	mov	r0, r3
 8015610:	f000 f9ac 	bl	801596c <RCCEx_PLL3_Config>
 8015614:	4603      	mov	r3, r0
 8015616:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8015618:	e003      	b.n	8015622 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801561a:	2301      	movs	r3, #1
 801561c:	75fb      	strb	r3, [r7, #23]
      break;
 801561e:	e000      	b.n	8015622 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8015620:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015622:	7dfb      	ldrb	r3, [r7, #23]
 8015624:	2b00      	cmp	r3, #0
 8015626:	d10a      	bne.n	801563e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8015628:	4b76      	ldr	r3, [pc, #472]	; (8015804 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 801562a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801562c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015636:	4973      	ldr	r1, [pc, #460]	; (8015804 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8015638:	4313      	orrs	r3, r2
 801563a:	654b      	str	r3, [r1, #84]	; 0x54
 801563c:	e001      	b.n	8015642 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801563e:	7dfb      	ldrb	r3, [r7, #23]
 8015640:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	681b      	ldr	r3, [r3, #0]
 8015646:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801564a:	2b00      	cmp	r3, #0
 801564c:	d029      	beq.n	80156a2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015652:	2b00      	cmp	r3, #0
 8015654:	d003      	beq.n	801565e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8015656:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801565a:	d007      	beq.n	801566c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 801565c:	e00f      	b.n	801567e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801565e:	4b69      	ldr	r3, [pc, #420]	; (8015804 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8015660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015662:	4a68      	ldr	r2, [pc, #416]	; (8015804 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8015664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015668:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 801566a:	e00b      	b.n	8015684 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	3304      	adds	r3, #4
 8015670:	2102      	movs	r1, #2
 8015672:	4618      	mov	r0, r3
 8015674:	f000 f8c8 	bl	8015808 <RCCEx_PLL2_Config>
 8015678:	4603      	mov	r3, r0
 801567a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 801567c:	e002      	b.n	8015684 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 801567e:	2301      	movs	r3, #1
 8015680:	75fb      	strb	r3, [r7, #23]
      break;
 8015682:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015684:	7dfb      	ldrb	r3, [r7, #23]
 8015686:	2b00      	cmp	r3, #0
 8015688:	d109      	bne.n	801569e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 801568a:	4b5e      	ldr	r3, [pc, #376]	; (8015804 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 801568c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801568e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015696:	495b      	ldr	r1, [pc, #364]	; (8015804 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8015698:	4313      	orrs	r3, r2
 801569a:	64cb      	str	r3, [r1, #76]	; 0x4c
 801569c:	e001      	b.n	80156a2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801569e:	7dfb      	ldrb	r3, [r7, #23]
 80156a0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	681b      	ldr	r3, [r3, #0]
 80156a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80156aa:	2b00      	cmp	r3, #0
 80156ac:	d00a      	beq.n	80156c4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	3324      	adds	r3, #36	; 0x24
 80156b2:	2102      	movs	r1, #2
 80156b4:	4618      	mov	r0, r3
 80156b6:	f000 f959 	bl	801596c <RCCEx_PLL3_Config>
 80156ba:	4603      	mov	r3, r0
 80156bc:	2b00      	cmp	r3, #0
 80156be:	d001      	beq.n	80156c4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80156c0:	2301      	movs	r3, #1
 80156c2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	681b      	ldr	r3, [r3, #0]
 80156c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	d030      	beq.n	8015732 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80156d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80156d8:	d017      	beq.n	801570a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80156da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80156de:	d811      	bhi.n	8015704 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80156e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80156e4:	d013      	beq.n	801570e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80156e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80156ea:	d80b      	bhi.n	8015704 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	d010      	beq.n	8015712 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80156f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80156f4:	d106      	bne.n	8015704 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80156f6:	4b43      	ldr	r3, [pc, #268]	; (8015804 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80156f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80156fa:	4a42      	ldr	r2, [pc, #264]	; (8015804 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80156fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015700:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8015702:	e007      	b.n	8015714 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015704:	2301      	movs	r3, #1
 8015706:	75fb      	strb	r3, [r7, #23]
      break;
 8015708:	e004      	b.n	8015714 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 801570a:	bf00      	nop
 801570c:	e002      	b.n	8015714 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 801570e:	bf00      	nop
 8015710:	e000      	b.n	8015714 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8015712:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015714:	7dfb      	ldrb	r3, [r7, #23]
 8015716:	2b00      	cmp	r3, #0
 8015718:	d109      	bne.n	801572e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801571a:	4b3a      	ldr	r3, [pc, #232]	; (8015804 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 801571c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801571e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015726:	4937      	ldr	r1, [pc, #220]	; (8015804 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8015728:	4313      	orrs	r3, r2
 801572a:	654b      	str	r3, [r1, #84]	; 0x54
 801572c:	e001      	b.n	8015732 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801572e:	7dfb      	ldrb	r3, [r7, #23]
 8015730:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	681b      	ldr	r3, [r3, #0]
 8015736:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801573a:	2b00      	cmp	r3, #0
 801573c:	d008      	beq.n	8015750 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801573e:	4b31      	ldr	r3, [pc, #196]	; (8015804 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8015740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015742:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801574a:	492e      	ldr	r1, [pc, #184]	; (8015804 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 801574c:	4313      	orrs	r3, r2
 801574e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	681b      	ldr	r3, [r3, #0]
 8015754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015758:	2b00      	cmp	r3, #0
 801575a:	d009      	beq.n	8015770 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 801575c:	4b29      	ldr	r3, [pc, #164]	; (8015804 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 801575e:	691b      	ldr	r3, [r3, #16]
 8015760:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801576a:	4926      	ldr	r1, [pc, #152]	; (8015804 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 801576c:	4313      	orrs	r3, r2
 801576e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	681b      	ldr	r3, [r3, #0]
 8015774:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8015778:	2b00      	cmp	r3, #0
 801577a:	d008      	beq.n	801578e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801577c:	4b21      	ldr	r3, [pc, #132]	; (8015804 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 801577e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015780:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015788:	491e      	ldr	r1, [pc, #120]	; (8015804 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 801578a:	4313      	orrs	r3, r2
 801578c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	681b      	ldr	r3, [r3, #0]
 8015792:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8015796:	2b00      	cmp	r3, #0
 8015798:	d00d      	beq.n	80157b6 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801579a:	4b1a      	ldr	r3, [pc, #104]	; (8015804 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 801579c:	691b      	ldr	r3, [r3, #16]
 801579e:	4a19      	ldr	r2, [pc, #100]	; (8015804 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80157a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80157a4:	6113      	str	r3, [r2, #16]
 80157a6:	4b17      	ldr	r3, [pc, #92]	; (8015804 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80157a8:	691a      	ldr	r2, [r3, #16]
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80157b0:	4914      	ldr	r1, [pc, #80]	; (8015804 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80157b2:	4313      	orrs	r3, r2
 80157b4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	681b      	ldr	r3, [r3, #0]
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	da08      	bge.n	80157d0 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80157be:	4b11      	ldr	r3, [pc, #68]	; (8015804 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80157c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80157c2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80157ca:	490e      	ldr	r1, [pc, #56]	; (8015804 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80157cc:	4313      	orrs	r3, r2
 80157ce:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	681b      	ldr	r3, [r3, #0]
 80157d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80157d8:	2b00      	cmp	r3, #0
 80157da:	d009      	beq.n	80157f0 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80157dc:	4b09      	ldr	r3, [pc, #36]	; (8015804 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80157de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80157e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80157ea:	4906      	ldr	r1, [pc, #24]	; (8015804 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80157ec:	4313      	orrs	r3, r2
 80157ee:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80157f0:	7dbb      	ldrb	r3, [r7, #22]
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	d101      	bne.n	80157fa <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80157f6:	2300      	movs	r3, #0
 80157f8:	e000      	b.n	80157fc <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80157fa:	2301      	movs	r3, #1
}
 80157fc:	4618      	mov	r0, r3
 80157fe:	3718      	adds	r7, #24
 8015800:	46bd      	mov	sp, r7
 8015802:	bd80      	pop	{r7, pc}
 8015804:	58024400 	.word	0x58024400

08015808 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8015808:	b580      	push	{r7, lr}
 801580a:	b084      	sub	sp, #16
 801580c:	af00      	add	r7, sp, #0
 801580e:	6078      	str	r0, [r7, #4]
 8015810:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8015812:	2300      	movs	r3, #0
 8015814:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8015816:	4b53      	ldr	r3, [pc, #332]	; (8015964 <RCCEx_PLL2_Config+0x15c>)
 8015818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801581a:	f003 0303 	and.w	r3, r3, #3
 801581e:	2b03      	cmp	r3, #3
 8015820:	d101      	bne.n	8015826 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8015822:	2301      	movs	r3, #1
 8015824:	e099      	b.n	801595a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8015826:	4b4f      	ldr	r3, [pc, #316]	; (8015964 <RCCEx_PLL2_Config+0x15c>)
 8015828:	681b      	ldr	r3, [r3, #0]
 801582a:	4a4e      	ldr	r2, [pc, #312]	; (8015964 <RCCEx_PLL2_Config+0x15c>)
 801582c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8015830:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8015832:	f7fa fe95 	bl	8010560 <HAL_GetTick>
 8015836:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8015838:	e008      	b.n	801584c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 801583a:	f7fa fe91 	bl	8010560 <HAL_GetTick>
 801583e:	4602      	mov	r2, r0
 8015840:	68bb      	ldr	r3, [r7, #8]
 8015842:	1ad3      	subs	r3, r2, r3
 8015844:	2b02      	cmp	r3, #2
 8015846:	d901      	bls.n	801584c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8015848:	2303      	movs	r3, #3
 801584a:	e086      	b.n	801595a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801584c:	4b45      	ldr	r3, [pc, #276]	; (8015964 <RCCEx_PLL2_Config+0x15c>)
 801584e:	681b      	ldr	r3, [r3, #0]
 8015850:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8015854:	2b00      	cmp	r3, #0
 8015856:	d1f0      	bne.n	801583a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8015858:	4b42      	ldr	r3, [pc, #264]	; (8015964 <RCCEx_PLL2_Config+0x15c>)
 801585a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801585c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	681b      	ldr	r3, [r3, #0]
 8015864:	031b      	lsls	r3, r3, #12
 8015866:	493f      	ldr	r1, [pc, #252]	; (8015964 <RCCEx_PLL2_Config+0x15c>)
 8015868:	4313      	orrs	r3, r2
 801586a:	628b      	str	r3, [r1, #40]	; 0x28
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	685b      	ldr	r3, [r3, #4]
 8015870:	3b01      	subs	r3, #1
 8015872:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	689b      	ldr	r3, [r3, #8]
 801587a:	3b01      	subs	r3, #1
 801587c:	025b      	lsls	r3, r3, #9
 801587e:	b29b      	uxth	r3, r3
 8015880:	431a      	orrs	r2, r3
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	68db      	ldr	r3, [r3, #12]
 8015886:	3b01      	subs	r3, #1
 8015888:	041b      	lsls	r3, r3, #16
 801588a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801588e:	431a      	orrs	r2, r3
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	691b      	ldr	r3, [r3, #16]
 8015894:	3b01      	subs	r3, #1
 8015896:	061b      	lsls	r3, r3, #24
 8015898:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801589c:	4931      	ldr	r1, [pc, #196]	; (8015964 <RCCEx_PLL2_Config+0x15c>)
 801589e:	4313      	orrs	r3, r2
 80158a0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80158a2:	4b30      	ldr	r3, [pc, #192]	; (8015964 <RCCEx_PLL2_Config+0x15c>)
 80158a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80158a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	695b      	ldr	r3, [r3, #20]
 80158ae:	492d      	ldr	r1, [pc, #180]	; (8015964 <RCCEx_PLL2_Config+0x15c>)
 80158b0:	4313      	orrs	r3, r2
 80158b2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80158b4:	4b2b      	ldr	r3, [pc, #172]	; (8015964 <RCCEx_PLL2_Config+0x15c>)
 80158b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80158b8:	f023 0220 	bic.w	r2, r3, #32
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	699b      	ldr	r3, [r3, #24]
 80158c0:	4928      	ldr	r1, [pc, #160]	; (8015964 <RCCEx_PLL2_Config+0x15c>)
 80158c2:	4313      	orrs	r3, r2
 80158c4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80158c6:	4b27      	ldr	r3, [pc, #156]	; (8015964 <RCCEx_PLL2_Config+0x15c>)
 80158c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80158ca:	4a26      	ldr	r2, [pc, #152]	; (8015964 <RCCEx_PLL2_Config+0x15c>)
 80158cc:	f023 0310 	bic.w	r3, r3, #16
 80158d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80158d2:	4b24      	ldr	r3, [pc, #144]	; (8015964 <RCCEx_PLL2_Config+0x15c>)
 80158d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80158d6:	4b24      	ldr	r3, [pc, #144]	; (8015968 <RCCEx_PLL2_Config+0x160>)
 80158d8:	4013      	ands	r3, r2
 80158da:	687a      	ldr	r2, [r7, #4]
 80158dc:	69d2      	ldr	r2, [r2, #28]
 80158de:	00d2      	lsls	r2, r2, #3
 80158e0:	4920      	ldr	r1, [pc, #128]	; (8015964 <RCCEx_PLL2_Config+0x15c>)
 80158e2:	4313      	orrs	r3, r2
 80158e4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80158e6:	4b1f      	ldr	r3, [pc, #124]	; (8015964 <RCCEx_PLL2_Config+0x15c>)
 80158e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80158ea:	4a1e      	ldr	r2, [pc, #120]	; (8015964 <RCCEx_PLL2_Config+0x15c>)
 80158ec:	f043 0310 	orr.w	r3, r3, #16
 80158f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80158f2:	683b      	ldr	r3, [r7, #0]
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d106      	bne.n	8015906 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80158f8:	4b1a      	ldr	r3, [pc, #104]	; (8015964 <RCCEx_PLL2_Config+0x15c>)
 80158fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80158fc:	4a19      	ldr	r2, [pc, #100]	; (8015964 <RCCEx_PLL2_Config+0x15c>)
 80158fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8015902:	62d3      	str	r3, [r2, #44]	; 0x2c
 8015904:	e00f      	b.n	8015926 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8015906:	683b      	ldr	r3, [r7, #0]
 8015908:	2b01      	cmp	r3, #1
 801590a:	d106      	bne.n	801591a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 801590c:	4b15      	ldr	r3, [pc, #84]	; (8015964 <RCCEx_PLL2_Config+0x15c>)
 801590e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015910:	4a14      	ldr	r2, [pc, #80]	; (8015964 <RCCEx_PLL2_Config+0x15c>)
 8015912:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015916:	62d3      	str	r3, [r2, #44]	; 0x2c
 8015918:	e005      	b.n	8015926 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801591a:	4b12      	ldr	r3, [pc, #72]	; (8015964 <RCCEx_PLL2_Config+0x15c>)
 801591c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801591e:	4a11      	ldr	r2, [pc, #68]	; (8015964 <RCCEx_PLL2_Config+0x15c>)
 8015920:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8015924:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8015926:	4b0f      	ldr	r3, [pc, #60]	; (8015964 <RCCEx_PLL2_Config+0x15c>)
 8015928:	681b      	ldr	r3, [r3, #0]
 801592a:	4a0e      	ldr	r2, [pc, #56]	; (8015964 <RCCEx_PLL2_Config+0x15c>)
 801592c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8015930:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8015932:	f7fa fe15 	bl	8010560 <HAL_GetTick>
 8015936:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8015938:	e008      	b.n	801594c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 801593a:	f7fa fe11 	bl	8010560 <HAL_GetTick>
 801593e:	4602      	mov	r2, r0
 8015940:	68bb      	ldr	r3, [r7, #8]
 8015942:	1ad3      	subs	r3, r2, r3
 8015944:	2b02      	cmp	r3, #2
 8015946:	d901      	bls.n	801594c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8015948:	2303      	movs	r3, #3
 801594a:	e006      	b.n	801595a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801594c:	4b05      	ldr	r3, [pc, #20]	; (8015964 <RCCEx_PLL2_Config+0x15c>)
 801594e:	681b      	ldr	r3, [r3, #0]
 8015950:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8015954:	2b00      	cmp	r3, #0
 8015956:	d0f0      	beq.n	801593a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8015958:	7bfb      	ldrb	r3, [r7, #15]
}
 801595a:	4618      	mov	r0, r3
 801595c:	3710      	adds	r7, #16
 801595e:	46bd      	mov	sp, r7
 8015960:	bd80      	pop	{r7, pc}
 8015962:	bf00      	nop
 8015964:	58024400 	.word	0x58024400
 8015968:	ffff0007 	.word	0xffff0007

0801596c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 801596c:	b580      	push	{r7, lr}
 801596e:	b084      	sub	sp, #16
 8015970:	af00      	add	r7, sp, #0
 8015972:	6078      	str	r0, [r7, #4]
 8015974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8015976:	2300      	movs	r3, #0
 8015978:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801597a:	4b53      	ldr	r3, [pc, #332]	; (8015ac8 <RCCEx_PLL3_Config+0x15c>)
 801597c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801597e:	f003 0303 	and.w	r3, r3, #3
 8015982:	2b03      	cmp	r3, #3
 8015984:	d101      	bne.n	801598a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8015986:	2301      	movs	r3, #1
 8015988:	e099      	b.n	8015abe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801598a:	4b4f      	ldr	r3, [pc, #316]	; (8015ac8 <RCCEx_PLL3_Config+0x15c>)
 801598c:	681b      	ldr	r3, [r3, #0]
 801598e:	4a4e      	ldr	r2, [pc, #312]	; (8015ac8 <RCCEx_PLL3_Config+0x15c>)
 8015990:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8015994:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8015996:	f7fa fde3 	bl	8010560 <HAL_GetTick>
 801599a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801599c:	e008      	b.n	80159b0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 801599e:	f7fa fddf 	bl	8010560 <HAL_GetTick>
 80159a2:	4602      	mov	r2, r0
 80159a4:	68bb      	ldr	r3, [r7, #8]
 80159a6:	1ad3      	subs	r3, r2, r3
 80159a8:	2b02      	cmp	r3, #2
 80159aa:	d901      	bls.n	80159b0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80159ac:	2303      	movs	r3, #3
 80159ae:	e086      	b.n	8015abe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80159b0:	4b45      	ldr	r3, [pc, #276]	; (8015ac8 <RCCEx_PLL3_Config+0x15c>)
 80159b2:	681b      	ldr	r3, [r3, #0]
 80159b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	d1f0      	bne.n	801599e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80159bc:	4b42      	ldr	r3, [pc, #264]	; (8015ac8 <RCCEx_PLL3_Config+0x15c>)
 80159be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80159c0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	681b      	ldr	r3, [r3, #0]
 80159c8:	051b      	lsls	r3, r3, #20
 80159ca:	493f      	ldr	r1, [pc, #252]	; (8015ac8 <RCCEx_PLL3_Config+0x15c>)
 80159cc:	4313      	orrs	r3, r2
 80159ce:	628b      	str	r3, [r1, #40]	; 0x28
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	685b      	ldr	r3, [r3, #4]
 80159d4:	3b01      	subs	r3, #1
 80159d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	689b      	ldr	r3, [r3, #8]
 80159de:	3b01      	subs	r3, #1
 80159e0:	025b      	lsls	r3, r3, #9
 80159e2:	b29b      	uxth	r3, r3
 80159e4:	431a      	orrs	r2, r3
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	68db      	ldr	r3, [r3, #12]
 80159ea:	3b01      	subs	r3, #1
 80159ec:	041b      	lsls	r3, r3, #16
 80159ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80159f2:	431a      	orrs	r2, r3
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	691b      	ldr	r3, [r3, #16]
 80159f8:	3b01      	subs	r3, #1
 80159fa:	061b      	lsls	r3, r3, #24
 80159fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8015a00:	4931      	ldr	r1, [pc, #196]	; (8015ac8 <RCCEx_PLL3_Config+0x15c>)
 8015a02:	4313      	orrs	r3, r2
 8015a04:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8015a06:	4b30      	ldr	r3, [pc, #192]	; (8015ac8 <RCCEx_PLL3_Config+0x15c>)
 8015a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a0a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	695b      	ldr	r3, [r3, #20]
 8015a12:	492d      	ldr	r1, [pc, #180]	; (8015ac8 <RCCEx_PLL3_Config+0x15c>)
 8015a14:	4313      	orrs	r3, r2
 8015a16:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8015a18:	4b2b      	ldr	r3, [pc, #172]	; (8015ac8 <RCCEx_PLL3_Config+0x15c>)
 8015a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a1c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	699b      	ldr	r3, [r3, #24]
 8015a24:	4928      	ldr	r1, [pc, #160]	; (8015ac8 <RCCEx_PLL3_Config+0x15c>)
 8015a26:	4313      	orrs	r3, r2
 8015a28:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8015a2a:	4b27      	ldr	r3, [pc, #156]	; (8015ac8 <RCCEx_PLL3_Config+0x15c>)
 8015a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a2e:	4a26      	ldr	r2, [pc, #152]	; (8015ac8 <RCCEx_PLL3_Config+0x15c>)
 8015a30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015a34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8015a36:	4b24      	ldr	r3, [pc, #144]	; (8015ac8 <RCCEx_PLL3_Config+0x15c>)
 8015a38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015a3a:	4b24      	ldr	r3, [pc, #144]	; (8015acc <RCCEx_PLL3_Config+0x160>)
 8015a3c:	4013      	ands	r3, r2
 8015a3e:	687a      	ldr	r2, [r7, #4]
 8015a40:	69d2      	ldr	r2, [r2, #28]
 8015a42:	00d2      	lsls	r2, r2, #3
 8015a44:	4920      	ldr	r1, [pc, #128]	; (8015ac8 <RCCEx_PLL3_Config+0x15c>)
 8015a46:	4313      	orrs	r3, r2
 8015a48:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8015a4a:	4b1f      	ldr	r3, [pc, #124]	; (8015ac8 <RCCEx_PLL3_Config+0x15c>)
 8015a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a4e:	4a1e      	ldr	r2, [pc, #120]	; (8015ac8 <RCCEx_PLL3_Config+0x15c>)
 8015a50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015a54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8015a56:	683b      	ldr	r3, [r7, #0]
 8015a58:	2b00      	cmp	r3, #0
 8015a5a:	d106      	bne.n	8015a6a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8015a5c:	4b1a      	ldr	r3, [pc, #104]	; (8015ac8 <RCCEx_PLL3_Config+0x15c>)
 8015a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a60:	4a19      	ldr	r2, [pc, #100]	; (8015ac8 <RCCEx_PLL3_Config+0x15c>)
 8015a62:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8015a66:	62d3      	str	r3, [r2, #44]	; 0x2c
 8015a68:	e00f      	b.n	8015a8a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8015a6a:	683b      	ldr	r3, [r7, #0]
 8015a6c:	2b01      	cmp	r3, #1
 8015a6e:	d106      	bne.n	8015a7e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8015a70:	4b15      	ldr	r3, [pc, #84]	; (8015ac8 <RCCEx_PLL3_Config+0x15c>)
 8015a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a74:	4a14      	ldr	r2, [pc, #80]	; (8015ac8 <RCCEx_PLL3_Config+0x15c>)
 8015a76:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8015a7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8015a7c:	e005      	b.n	8015a8a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8015a7e:	4b12      	ldr	r3, [pc, #72]	; (8015ac8 <RCCEx_PLL3_Config+0x15c>)
 8015a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a82:	4a11      	ldr	r2, [pc, #68]	; (8015ac8 <RCCEx_PLL3_Config+0x15c>)
 8015a84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8015a88:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8015a8a:	4b0f      	ldr	r3, [pc, #60]	; (8015ac8 <RCCEx_PLL3_Config+0x15c>)
 8015a8c:	681b      	ldr	r3, [r3, #0]
 8015a8e:	4a0e      	ldr	r2, [pc, #56]	; (8015ac8 <RCCEx_PLL3_Config+0x15c>)
 8015a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015a94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8015a96:	f7fa fd63 	bl	8010560 <HAL_GetTick>
 8015a9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8015a9c:	e008      	b.n	8015ab0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8015a9e:	f7fa fd5f 	bl	8010560 <HAL_GetTick>
 8015aa2:	4602      	mov	r2, r0
 8015aa4:	68bb      	ldr	r3, [r7, #8]
 8015aa6:	1ad3      	subs	r3, r2, r3
 8015aa8:	2b02      	cmp	r3, #2
 8015aaa:	d901      	bls.n	8015ab0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8015aac:	2303      	movs	r3, #3
 8015aae:	e006      	b.n	8015abe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8015ab0:	4b05      	ldr	r3, [pc, #20]	; (8015ac8 <RCCEx_PLL3_Config+0x15c>)
 8015ab2:	681b      	ldr	r3, [r3, #0]
 8015ab4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	d0f0      	beq.n	8015a9e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8015abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8015abe:	4618      	mov	r0, r3
 8015ac0:	3710      	adds	r7, #16
 8015ac2:	46bd      	mov	sp, r7
 8015ac4:	bd80      	pop	{r7, pc}
 8015ac6:	bf00      	nop
 8015ac8:	58024400 	.word	0x58024400
 8015acc:	ffff0007 	.word	0xffff0007

08015ad0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8015ad0:	b580      	push	{r7, lr}
 8015ad2:	b082      	sub	sp, #8
 8015ad4:	af00      	add	r7, sp, #0
 8015ad6:	6078      	str	r0, [r7, #4]
 8015ad8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d101      	bne.n	8015ae4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8015ae0:	2301      	movs	r3, #1
 8015ae2:	e02b      	b.n	8015b3c <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015aea:	b2db      	uxtb	r3, r3
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d106      	bne.n	8015afe <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	2200      	movs	r2, #0
 8015af4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8015af8:	6878      	ldr	r0, [r7, #4]
 8015afa:	f7eb fcd1 	bl	80014a0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	2202      	movs	r2, #2
 8015b02:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	681a      	ldr	r2, [r3, #0]
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	3304      	adds	r3, #4
 8015b0e:	4619      	mov	r1, r3
 8015b10:	4610      	mov	r0, r2
 8015b12:	f000 fd9b 	bl	801664c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	6818      	ldr	r0, [r3, #0]
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	685b      	ldr	r3, [r3, #4]
 8015b1e:	461a      	mov	r2, r3
 8015b20:	6839      	ldr	r1, [r7, #0]
 8015b22:	f000 fdef 	bl	8016704 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8015b26:	4b07      	ldr	r3, [pc, #28]	; (8015b44 <HAL_SDRAM_Init+0x74>)
 8015b28:	681b      	ldr	r3, [r3, #0]
 8015b2a:	4a06      	ldr	r2, [pc, #24]	; (8015b44 <HAL_SDRAM_Init+0x74>)
 8015b2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015b30:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	2201      	movs	r2, #1
 8015b36:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8015b3a:	2300      	movs	r3, #0
}
 8015b3c:	4618      	mov	r0, r3
 8015b3e:	3708      	adds	r7, #8
 8015b40:	46bd      	mov	sp, r7
 8015b42:	bd80      	pop	{r7, pc}
 8015b44:	52004000 	.word	0x52004000

08015b48 <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
 8015b48:	b580      	push	{r7, lr}
 8015b4a:	b082      	sub	sp, #8
 8015b4c:	af00      	add	r7, sp, #0
 8015b4e:	6078      	str	r0, [r7, #4]

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
 8015b50:	6878      	ldr	r0, [r7, #4]
 8015b52:	f7eb fce9 	bl	8001528 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	681a      	ldr	r2, [r3, #0]
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	685b      	ldr	r3, [r3, #4]
 8015b5e:	4619      	mov	r1, r3
 8015b60:	4610      	mov	r0, r2
 8015b62:	f000 fe39 	bl	80167d8 <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	2200      	movs	r2, #0
 8015b6a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	2200      	movs	r2, #0
 8015b72:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  return HAL_OK;
 8015b76:	2300      	movs	r3, #0
}
 8015b78:	4618      	mov	r0, r3
 8015b7a:	3708      	adds	r7, #8
 8015b7c:	46bd      	mov	sp, r7
 8015b7e:	bd80      	pop	{r7, pc}

08015b80 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8015b80:	b580      	push	{r7, lr}
 8015b82:	b086      	sub	sp, #24
 8015b84:	af00      	add	r7, sp, #0
 8015b86:	60f8      	str	r0, [r7, #12]
 8015b88:	60b9      	str	r1, [r7, #8]
 8015b8a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8015b8c:	68fb      	ldr	r3, [r7, #12]
 8015b8e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015b92:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8015b94:	7dfb      	ldrb	r3, [r7, #23]
 8015b96:	2b02      	cmp	r3, #2
 8015b98:	d101      	bne.n	8015b9e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8015b9a:	2302      	movs	r3, #2
 8015b9c:	e021      	b.n	8015be2 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8015b9e:	7dfb      	ldrb	r3, [r7, #23]
 8015ba0:	2b01      	cmp	r3, #1
 8015ba2:	d002      	beq.n	8015baa <HAL_SDRAM_SendCommand+0x2a>
 8015ba4:	7dfb      	ldrb	r3, [r7, #23]
 8015ba6:	2b05      	cmp	r3, #5
 8015ba8:	d118      	bne.n	8015bdc <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8015baa:	68fb      	ldr	r3, [r7, #12]
 8015bac:	2202      	movs	r2, #2
 8015bae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8015bb2:	68fb      	ldr	r3, [r7, #12]
 8015bb4:	681b      	ldr	r3, [r3, #0]
 8015bb6:	687a      	ldr	r2, [r7, #4]
 8015bb8:	68b9      	ldr	r1, [r7, #8]
 8015bba:	4618      	mov	r0, r3
 8015bbc:	f000 fe2e 	bl	801681c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8015bc0:	68bb      	ldr	r3, [r7, #8]
 8015bc2:	681b      	ldr	r3, [r3, #0]
 8015bc4:	2b02      	cmp	r3, #2
 8015bc6:	d104      	bne.n	8015bd2 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8015bc8:	68fb      	ldr	r3, [r7, #12]
 8015bca:	2205      	movs	r2, #5
 8015bcc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8015bd0:	e006      	b.n	8015be0 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8015bd2:	68fb      	ldr	r3, [r7, #12]
 8015bd4:	2201      	movs	r2, #1
 8015bd6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8015bda:	e001      	b.n	8015be0 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8015bdc:	2301      	movs	r3, #1
 8015bde:	e000      	b.n	8015be2 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8015be0:	2300      	movs	r3, #0
}
 8015be2:	4618      	mov	r0, r3
 8015be4:	3718      	adds	r7, #24
 8015be6:	46bd      	mov	sp, r7
 8015be8:	bd80      	pop	{r7, pc}

08015bea <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8015bea:	b580      	push	{r7, lr}
 8015bec:	b082      	sub	sp, #8
 8015bee:	af00      	add	r7, sp, #0
 8015bf0:	6078      	str	r0, [r7, #4]
 8015bf2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015bfa:	b2db      	uxtb	r3, r3
 8015bfc:	2b02      	cmp	r3, #2
 8015bfe:	d101      	bne.n	8015c04 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8015c00:	2302      	movs	r3, #2
 8015c02:	e016      	b.n	8015c32 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015c0a:	b2db      	uxtb	r3, r3
 8015c0c:	2b01      	cmp	r3, #1
 8015c0e:	d10f      	bne.n	8015c30 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	2202      	movs	r2, #2
 8015c14:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	681b      	ldr	r3, [r3, #0]
 8015c1c:	6839      	ldr	r1, [r7, #0]
 8015c1e:	4618      	mov	r0, r3
 8015c20:	f000 fe20 	bl	8016864 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	2201      	movs	r2, #1
 8015c28:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8015c2c:	2300      	movs	r3, #0
 8015c2e:	e000      	b.n	8015c32 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8015c30:	2301      	movs	r3, #1
}
 8015c32:	4618      	mov	r0, r3
 8015c34:	3708      	adds	r7, #8
 8015c36:	46bd      	mov	sp, r7
 8015c38:	bd80      	pop	{r7, pc}

08015c3a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8015c3a:	b580      	push	{r7, lr}
 8015c3c:	b082      	sub	sp, #8
 8015c3e:	af00      	add	r7, sp, #0
 8015c40:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d101      	bne.n	8015c4c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8015c48:	2301      	movs	r3, #1
 8015c4a:	e049      	b.n	8015ce0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015c52:	b2db      	uxtb	r3, r3
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	d106      	bne.n	8015c66 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	2200      	movs	r2, #0
 8015c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8015c60:	6878      	ldr	r0, [r7, #4]
 8015c62:	f7eb fb1b 	bl	800129c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	2202      	movs	r2, #2
 8015c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	681a      	ldr	r2, [r3, #0]
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	3304      	adds	r3, #4
 8015c76:	4619      	mov	r1, r3
 8015c78:	4610      	mov	r0, r2
 8015c7a:	f000 fa37 	bl	80160ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	2201      	movs	r2, #1
 8015c82:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	2201      	movs	r2, #1
 8015c8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	2201      	movs	r2, #1
 8015c92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	2201      	movs	r2, #1
 8015c9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	2201      	movs	r2, #1
 8015ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	2201      	movs	r2, #1
 8015caa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	2201      	movs	r2, #1
 8015cb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	2201      	movs	r2, #1
 8015cba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	2201      	movs	r2, #1
 8015cc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	2201      	movs	r2, #1
 8015cca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	2201      	movs	r2, #1
 8015cd2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	2201      	movs	r2, #1
 8015cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8015cde:	2300      	movs	r3, #0
}
 8015ce0:	4618      	mov	r0, r3
 8015ce2:	3708      	adds	r7, #8
 8015ce4:	46bd      	mov	sp, r7
 8015ce6:	bd80      	pop	{r7, pc}

08015ce8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8015ce8:	b480      	push	{r7}
 8015cea:	b085      	sub	sp, #20
 8015cec:	af00      	add	r7, sp, #0
 8015cee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015cf6:	b2db      	uxtb	r3, r3
 8015cf8:	2b01      	cmp	r3, #1
 8015cfa:	d001      	beq.n	8015d00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8015cfc:	2301      	movs	r3, #1
 8015cfe:	e054      	b.n	8015daa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	2202      	movs	r2, #2
 8015d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	681b      	ldr	r3, [r3, #0]
 8015d0c:	68da      	ldr	r2, [r3, #12]
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	681b      	ldr	r3, [r3, #0]
 8015d12:	f042 0201 	orr.w	r2, r2, #1
 8015d16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	681b      	ldr	r3, [r3, #0]
 8015d1c:	4a26      	ldr	r2, [pc, #152]	; (8015db8 <HAL_TIM_Base_Start_IT+0xd0>)
 8015d1e:	4293      	cmp	r3, r2
 8015d20:	d022      	beq.n	8015d68 <HAL_TIM_Base_Start_IT+0x80>
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	681b      	ldr	r3, [r3, #0]
 8015d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015d2a:	d01d      	beq.n	8015d68 <HAL_TIM_Base_Start_IT+0x80>
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	681b      	ldr	r3, [r3, #0]
 8015d30:	4a22      	ldr	r2, [pc, #136]	; (8015dbc <HAL_TIM_Base_Start_IT+0xd4>)
 8015d32:	4293      	cmp	r3, r2
 8015d34:	d018      	beq.n	8015d68 <HAL_TIM_Base_Start_IT+0x80>
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	681b      	ldr	r3, [r3, #0]
 8015d3a:	4a21      	ldr	r2, [pc, #132]	; (8015dc0 <HAL_TIM_Base_Start_IT+0xd8>)
 8015d3c:	4293      	cmp	r3, r2
 8015d3e:	d013      	beq.n	8015d68 <HAL_TIM_Base_Start_IT+0x80>
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	681b      	ldr	r3, [r3, #0]
 8015d44:	4a1f      	ldr	r2, [pc, #124]	; (8015dc4 <HAL_TIM_Base_Start_IT+0xdc>)
 8015d46:	4293      	cmp	r3, r2
 8015d48:	d00e      	beq.n	8015d68 <HAL_TIM_Base_Start_IT+0x80>
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	681b      	ldr	r3, [r3, #0]
 8015d4e:	4a1e      	ldr	r2, [pc, #120]	; (8015dc8 <HAL_TIM_Base_Start_IT+0xe0>)
 8015d50:	4293      	cmp	r3, r2
 8015d52:	d009      	beq.n	8015d68 <HAL_TIM_Base_Start_IT+0x80>
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	681b      	ldr	r3, [r3, #0]
 8015d58:	4a1c      	ldr	r2, [pc, #112]	; (8015dcc <HAL_TIM_Base_Start_IT+0xe4>)
 8015d5a:	4293      	cmp	r3, r2
 8015d5c:	d004      	beq.n	8015d68 <HAL_TIM_Base_Start_IT+0x80>
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	681b      	ldr	r3, [r3, #0]
 8015d62:	4a1b      	ldr	r2, [pc, #108]	; (8015dd0 <HAL_TIM_Base_Start_IT+0xe8>)
 8015d64:	4293      	cmp	r3, r2
 8015d66:	d115      	bne.n	8015d94 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	681b      	ldr	r3, [r3, #0]
 8015d6c:	689a      	ldr	r2, [r3, #8]
 8015d6e:	4b19      	ldr	r3, [pc, #100]	; (8015dd4 <HAL_TIM_Base_Start_IT+0xec>)
 8015d70:	4013      	ands	r3, r2
 8015d72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015d74:	68fb      	ldr	r3, [r7, #12]
 8015d76:	2b06      	cmp	r3, #6
 8015d78:	d015      	beq.n	8015da6 <HAL_TIM_Base_Start_IT+0xbe>
 8015d7a:	68fb      	ldr	r3, [r7, #12]
 8015d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015d80:	d011      	beq.n	8015da6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	681b      	ldr	r3, [r3, #0]
 8015d86:	681a      	ldr	r2, [r3, #0]
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	681b      	ldr	r3, [r3, #0]
 8015d8c:	f042 0201 	orr.w	r2, r2, #1
 8015d90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015d92:	e008      	b.n	8015da6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	681b      	ldr	r3, [r3, #0]
 8015d98:	681a      	ldr	r2, [r3, #0]
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	681b      	ldr	r3, [r3, #0]
 8015d9e:	f042 0201 	orr.w	r2, r2, #1
 8015da2:	601a      	str	r2, [r3, #0]
 8015da4:	e000      	b.n	8015da8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015da6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8015da8:	2300      	movs	r3, #0
}
 8015daa:	4618      	mov	r0, r3
 8015dac:	3714      	adds	r7, #20
 8015dae:	46bd      	mov	sp, r7
 8015db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015db4:	4770      	bx	lr
 8015db6:	bf00      	nop
 8015db8:	40010000 	.word	0x40010000
 8015dbc:	40000400 	.word	0x40000400
 8015dc0:	40000800 	.word	0x40000800
 8015dc4:	40000c00 	.word	0x40000c00
 8015dc8:	40010400 	.word	0x40010400
 8015dcc:	40001800 	.word	0x40001800
 8015dd0:	40014000 	.word	0x40014000
 8015dd4:	00010007 	.word	0x00010007

08015dd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8015dd8:	b580      	push	{r7, lr}
 8015dda:	b082      	sub	sp, #8
 8015ddc:	af00      	add	r7, sp, #0
 8015dde:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	681b      	ldr	r3, [r3, #0]
 8015de4:	691b      	ldr	r3, [r3, #16]
 8015de6:	f003 0302 	and.w	r3, r3, #2
 8015dea:	2b02      	cmp	r3, #2
 8015dec:	d122      	bne.n	8015e34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	681b      	ldr	r3, [r3, #0]
 8015df2:	68db      	ldr	r3, [r3, #12]
 8015df4:	f003 0302 	and.w	r3, r3, #2
 8015df8:	2b02      	cmp	r3, #2
 8015dfa:	d11b      	bne.n	8015e34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	681b      	ldr	r3, [r3, #0]
 8015e00:	f06f 0202 	mvn.w	r2, #2
 8015e04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	2201      	movs	r2, #1
 8015e0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	681b      	ldr	r3, [r3, #0]
 8015e10:	699b      	ldr	r3, [r3, #24]
 8015e12:	f003 0303 	and.w	r3, r3, #3
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	d003      	beq.n	8015e22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8015e1a:	6878      	ldr	r0, [r7, #4]
 8015e1c:	f000 f947 	bl	80160ae <HAL_TIM_IC_CaptureCallback>
 8015e20:	e005      	b.n	8015e2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8015e22:	6878      	ldr	r0, [r7, #4]
 8015e24:	f000 f939 	bl	801609a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015e28:	6878      	ldr	r0, [r7, #4]
 8015e2a:	f000 f94a 	bl	80160c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	2200      	movs	r2, #0
 8015e32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	681b      	ldr	r3, [r3, #0]
 8015e38:	691b      	ldr	r3, [r3, #16]
 8015e3a:	f003 0304 	and.w	r3, r3, #4
 8015e3e:	2b04      	cmp	r3, #4
 8015e40:	d122      	bne.n	8015e88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	681b      	ldr	r3, [r3, #0]
 8015e46:	68db      	ldr	r3, [r3, #12]
 8015e48:	f003 0304 	and.w	r3, r3, #4
 8015e4c:	2b04      	cmp	r3, #4
 8015e4e:	d11b      	bne.n	8015e88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	681b      	ldr	r3, [r3, #0]
 8015e54:	f06f 0204 	mvn.w	r2, #4
 8015e58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	2202      	movs	r2, #2
 8015e5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	681b      	ldr	r3, [r3, #0]
 8015e64:	699b      	ldr	r3, [r3, #24]
 8015e66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	d003      	beq.n	8015e76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8015e6e:	6878      	ldr	r0, [r7, #4]
 8015e70:	f000 f91d 	bl	80160ae <HAL_TIM_IC_CaptureCallback>
 8015e74:	e005      	b.n	8015e82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8015e76:	6878      	ldr	r0, [r7, #4]
 8015e78:	f000 f90f 	bl	801609a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015e7c:	6878      	ldr	r0, [r7, #4]
 8015e7e:	f000 f920 	bl	80160c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	2200      	movs	r2, #0
 8015e86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	681b      	ldr	r3, [r3, #0]
 8015e8c:	691b      	ldr	r3, [r3, #16]
 8015e8e:	f003 0308 	and.w	r3, r3, #8
 8015e92:	2b08      	cmp	r3, #8
 8015e94:	d122      	bne.n	8015edc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	681b      	ldr	r3, [r3, #0]
 8015e9a:	68db      	ldr	r3, [r3, #12]
 8015e9c:	f003 0308 	and.w	r3, r3, #8
 8015ea0:	2b08      	cmp	r3, #8
 8015ea2:	d11b      	bne.n	8015edc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	681b      	ldr	r3, [r3, #0]
 8015ea8:	f06f 0208 	mvn.w	r2, #8
 8015eac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	2204      	movs	r2, #4
 8015eb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	681b      	ldr	r3, [r3, #0]
 8015eb8:	69db      	ldr	r3, [r3, #28]
 8015eba:	f003 0303 	and.w	r3, r3, #3
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	d003      	beq.n	8015eca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8015ec2:	6878      	ldr	r0, [r7, #4]
 8015ec4:	f000 f8f3 	bl	80160ae <HAL_TIM_IC_CaptureCallback>
 8015ec8:	e005      	b.n	8015ed6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8015eca:	6878      	ldr	r0, [r7, #4]
 8015ecc:	f000 f8e5 	bl	801609a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015ed0:	6878      	ldr	r0, [r7, #4]
 8015ed2:	f000 f8f6 	bl	80160c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	2200      	movs	r2, #0
 8015eda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	681b      	ldr	r3, [r3, #0]
 8015ee0:	691b      	ldr	r3, [r3, #16]
 8015ee2:	f003 0310 	and.w	r3, r3, #16
 8015ee6:	2b10      	cmp	r3, #16
 8015ee8:	d122      	bne.n	8015f30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	681b      	ldr	r3, [r3, #0]
 8015eee:	68db      	ldr	r3, [r3, #12]
 8015ef0:	f003 0310 	and.w	r3, r3, #16
 8015ef4:	2b10      	cmp	r3, #16
 8015ef6:	d11b      	bne.n	8015f30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	681b      	ldr	r3, [r3, #0]
 8015efc:	f06f 0210 	mvn.w	r2, #16
 8015f00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	2208      	movs	r2, #8
 8015f06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	681b      	ldr	r3, [r3, #0]
 8015f0c:	69db      	ldr	r3, [r3, #28]
 8015f0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	d003      	beq.n	8015f1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8015f16:	6878      	ldr	r0, [r7, #4]
 8015f18:	f000 f8c9 	bl	80160ae <HAL_TIM_IC_CaptureCallback>
 8015f1c:	e005      	b.n	8015f2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8015f1e:	6878      	ldr	r0, [r7, #4]
 8015f20:	f000 f8bb 	bl	801609a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015f24:	6878      	ldr	r0, [r7, #4]
 8015f26:	f000 f8cc 	bl	80160c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	2200      	movs	r2, #0
 8015f2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	681b      	ldr	r3, [r3, #0]
 8015f34:	691b      	ldr	r3, [r3, #16]
 8015f36:	f003 0301 	and.w	r3, r3, #1
 8015f3a:	2b01      	cmp	r3, #1
 8015f3c:	d10e      	bne.n	8015f5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	681b      	ldr	r3, [r3, #0]
 8015f42:	68db      	ldr	r3, [r3, #12]
 8015f44:	f003 0301 	and.w	r3, r3, #1
 8015f48:	2b01      	cmp	r3, #1
 8015f4a:	d107      	bne.n	8015f5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	681b      	ldr	r3, [r3, #0]
 8015f50:	f06f 0201 	mvn.w	r2, #1
 8015f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8015f56:	6878      	ldr	r0, [r7, #4]
 8015f58:	f7ea fe78 	bl	8000c4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	681b      	ldr	r3, [r3, #0]
 8015f60:	691b      	ldr	r3, [r3, #16]
 8015f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015f66:	2b80      	cmp	r3, #128	; 0x80
 8015f68:	d10e      	bne.n	8015f88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	681b      	ldr	r3, [r3, #0]
 8015f6e:	68db      	ldr	r3, [r3, #12]
 8015f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015f74:	2b80      	cmp	r3, #128	; 0x80
 8015f76:	d107      	bne.n	8015f88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	681b      	ldr	r3, [r3, #0]
 8015f7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8015f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8015f82:	6878      	ldr	r0, [r7, #4]
 8015f84:	f000 fb4e 	bl	8016624 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	681b      	ldr	r3, [r3, #0]
 8015f8c:	691b      	ldr	r3, [r3, #16]
 8015f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015f92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015f96:	d10e      	bne.n	8015fb6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	681b      	ldr	r3, [r3, #0]
 8015f9c:	68db      	ldr	r3, [r3, #12]
 8015f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015fa2:	2b80      	cmp	r3, #128	; 0x80
 8015fa4:	d107      	bne.n	8015fb6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	681b      	ldr	r3, [r3, #0]
 8015faa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8015fae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8015fb0:	6878      	ldr	r0, [r7, #4]
 8015fb2:	f000 fb41 	bl	8016638 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	681b      	ldr	r3, [r3, #0]
 8015fba:	691b      	ldr	r3, [r3, #16]
 8015fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015fc0:	2b40      	cmp	r3, #64	; 0x40
 8015fc2:	d10e      	bne.n	8015fe2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	681b      	ldr	r3, [r3, #0]
 8015fc8:	68db      	ldr	r3, [r3, #12]
 8015fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015fce:	2b40      	cmp	r3, #64	; 0x40
 8015fd0:	d107      	bne.n	8015fe2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	681b      	ldr	r3, [r3, #0]
 8015fd6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8015fda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8015fdc:	6878      	ldr	r0, [r7, #4]
 8015fde:	f000 f87a 	bl	80160d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	681b      	ldr	r3, [r3, #0]
 8015fe6:	691b      	ldr	r3, [r3, #16]
 8015fe8:	f003 0320 	and.w	r3, r3, #32
 8015fec:	2b20      	cmp	r3, #32
 8015fee:	d10e      	bne.n	801600e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	681b      	ldr	r3, [r3, #0]
 8015ff4:	68db      	ldr	r3, [r3, #12]
 8015ff6:	f003 0320 	and.w	r3, r3, #32
 8015ffa:	2b20      	cmp	r3, #32
 8015ffc:	d107      	bne.n	801600e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	681b      	ldr	r3, [r3, #0]
 8016002:	f06f 0220 	mvn.w	r2, #32
 8016006:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8016008:	6878      	ldr	r0, [r7, #4]
 801600a:	f000 fb01 	bl	8016610 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801600e:	bf00      	nop
 8016010:	3708      	adds	r7, #8
 8016012:	46bd      	mov	sp, r7
 8016014:	bd80      	pop	{r7, pc}

08016016 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8016016:	b580      	push	{r7, lr}
 8016018:	b082      	sub	sp, #8
 801601a:	af00      	add	r7, sp, #0
 801601c:	6078      	str	r0, [r7, #4]
 801601e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016026:	2b01      	cmp	r3, #1
 8016028:	d101      	bne.n	801602e <HAL_TIM_SlaveConfigSynchro+0x18>
 801602a:	2302      	movs	r3, #2
 801602c:	e031      	b.n	8016092 <HAL_TIM_SlaveConfigSynchro+0x7c>
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	2201      	movs	r2, #1
 8016032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	2202      	movs	r2, #2
 801603a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 801603e:	6839      	ldr	r1, [r7, #0]
 8016040:	6878      	ldr	r0, [r7, #4]
 8016042:	f000 f8ed 	bl	8016220 <TIM_SlaveTimer_SetConfig>
 8016046:	4603      	mov	r3, r0
 8016048:	2b00      	cmp	r3, #0
 801604a:	d009      	beq.n	8016060 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	2201      	movs	r2, #1
 8016050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	2200      	movs	r2, #0
 8016058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 801605c:	2301      	movs	r3, #1
 801605e:	e018      	b.n	8016092 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	681b      	ldr	r3, [r3, #0]
 8016064:	68da      	ldr	r2, [r3, #12]
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	681b      	ldr	r3, [r3, #0]
 801606a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801606e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	681b      	ldr	r3, [r3, #0]
 8016074:	68da      	ldr	r2, [r3, #12]
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	681b      	ldr	r3, [r3, #0]
 801607a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801607e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	2201      	movs	r2, #1
 8016084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	2200      	movs	r2, #0
 801608c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8016090:	2300      	movs	r3, #0
}
 8016092:	4618      	mov	r0, r3
 8016094:	3708      	adds	r7, #8
 8016096:	46bd      	mov	sp, r7
 8016098:	bd80      	pop	{r7, pc}

0801609a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801609a:	b480      	push	{r7}
 801609c:	b083      	sub	sp, #12
 801609e:	af00      	add	r7, sp, #0
 80160a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80160a2:	bf00      	nop
 80160a4:	370c      	adds	r7, #12
 80160a6:	46bd      	mov	sp, r7
 80160a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160ac:	4770      	bx	lr

080160ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80160ae:	b480      	push	{r7}
 80160b0:	b083      	sub	sp, #12
 80160b2:	af00      	add	r7, sp, #0
 80160b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80160b6:	bf00      	nop
 80160b8:	370c      	adds	r7, #12
 80160ba:	46bd      	mov	sp, r7
 80160bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160c0:	4770      	bx	lr

080160c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80160c2:	b480      	push	{r7}
 80160c4:	b083      	sub	sp, #12
 80160c6:	af00      	add	r7, sp, #0
 80160c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80160ca:	bf00      	nop
 80160cc:	370c      	adds	r7, #12
 80160ce:	46bd      	mov	sp, r7
 80160d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160d4:	4770      	bx	lr

080160d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80160d6:	b480      	push	{r7}
 80160d8:	b083      	sub	sp, #12
 80160da:	af00      	add	r7, sp, #0
 80160dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80160de:	bf00      	nop
 80160e0:	370c      	adds	r7, #12
 80160e2:	46bd      	mov	sp, r7
 80160e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160e8:	4770      	bx	lr
	...

080160ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80160ec:	b480      	push	{r7}
 80160ee:	b085      	sub	sp, #20
 80160f0:	af00      	add	r7, sp, #0
 80160f2:	6078      	str	r0, [r7, #4]
 80160f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	681b      	ldr	r3, [r3, #0]
 80160fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	4a40      	ldr	r2, [pc, #256]	; (8016200 <TIM_Base_SetConfig+0x114>)
 8016100:	4293      	cmp	r3, r2
 8016102:	d013      	beq.n	801612c <TIM_Base_SetConfig+0x40>
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801610a:	d00f      	beq.n	801612c <TIM_Base_SetConfig+0x40>
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	4a3d      	ldr	r2, [pc, #244]	; (8016204 <TIM_Base_SetConfig+0x118>)
 8016110:	4293      	cmp	r3, r2
 8016112:	d00b      	beq.n	801612c <TIM_Base_SetConfig+0x40>
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	4a3c      	ldr	r2, [pc, #240]	; (8016208 <TIM_Base_SetConfig+0x11c>)
 8016118:	4293      	cmp	r3, r2
 801611a:	d007      	beq.n	801612c <TIM_Base_SetConfig+0x40>
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	4a3b      	ldr	r2, [pc, #236]	; (801620c <TIM_Base_SetConfig+0x120>)
 8016120:	4293      	cmp	r3, r2
 8016122:	d003      	beq.n	801612c <TIM_Base_SetConfig+0x40>
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	4a3a      	ldr	r2, [pc, #232]	; (8016210 <TIM_Base_SetConfig+0x124>)
 8016128:	4293      	cmp	r3, r2
 801612a:	d108      	bne.n	801613e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801612c:	68fb      	ldr	r3, [r7, #12]
 801612e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8016132:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8016134:	683b      	ldr	r3, [r7, #0]
 8016136:	685b      	ldr	r3, [r3, #4]
 8016138:	68fa      	ldr	r2, [r7, #12]
 801613a:	4313      	orrs	r3, r2
 801613c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	4a2f      	ldr	r2, [pc, #188]	; (8016200 <TIM_Base_SetConfig+0x114>)
 8016142:	4293      	cmp	r3, r2
 8016144:	d01f      	beq.n	8016186 <TIM_Base_SetConfig+0x9a>
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801614c:	d01b      	beq.n	8016186 <TIM_Base_SetConfig+0x9a>
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	4a2c      	ldr	r2, [pc, #176]	; (8016204 <TIM_Base_SetConfig+0x118>)
 8016152:	4293      	cmp	r3, r2
 8016154:	d017      	beq.n	8016186 <TIM_Base_SetConfig+0x9a>
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	4a2b      	ldr	r2, [pc, #172]	; (8016208 <TIM_Base_SetConfig+0x11c>)
 801615a:	4293      	cmp	r3, r2
 801615c:	d013      	beq.n	8016186 <TIM_Base_SetConfig+0x9a>
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	4a2a      	ldr	r2, [pc, #168]	; (801620c <TIM_Base_SetConfig+0x120>)
 8016162:	4293      	cmp	r3, r2
 8016164:	d00f      	beq.n	8016186 <TIM_Base_SetConfig+0x9a>
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	4a29      	ldr	r2, [pc, #164]	; (8016210 <TIM_Base_SetConfig+0x124>)
 801616a:	4293      	cmp	r3, r2
 801616c:	d00b      	beq.n	8016186 <TIM_Base_SetConfig+0x9a>
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	4a28      	ldr	r2, [pc, #160]	; (8016214 <TIM_Base_SetConfig+0x128>)
 8016172:	4293      	cmp	r3, r2
 8016174:	d007      	beq.n	8016186 <TIM_Base_SetConfig+0x9a>
 8016176:	687b      	ldr	r3, [r7, #4]
 8016178:	4a27      	ldr	r2, [pc, #156]	; (8016218 <TIM_Base_SetConfig+0x12c>)
 801617a:	4293      	cmp	r3, r2
 801617c:	d003      	beq.n	8016186 <TIM_Base_SetConfig+0x9a>
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	4a26      	ldr	r2, [pc, #152]	; (801621c <TIM_Base_SetConfig+0x130>)
 8016182:	4293      	cmp	r3, r2
 8016184:	d108      	bne.n	8016198 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8016186:	68fb      	ldr	r3, [r7, #12]
 8016188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801618c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801618e:	683b      	ldr	r3, [r7, #0]
 8016190:	68db      	ldr	r3, [r3, #12]
 8016192:	68fa      	ldr	r2, [r7, #12]
 8016194:	4313      	orrs	r3, r2
 8016196:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801619e:	683b      	ldr	r3, [r7, #0]
 80161a0:	695b      	ldr	r3, [r3, #20]
 80161a2:	4313      	orrs	r3, r2
 80161a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	68fa      	ldr	r2, [r7, #12]
 80161aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80161ac:	683b      	ldr	r3, [r7, #0]
 80161ae:	689a      	ldr	r2, [r3, #8]
 80161b0:	687b      	ldr	r3, [r7, #4]
 80161b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80161b4:	683b      	ldr	r3, [r7, #0]
 80161b6:	681a      	ldr	r2, [r3, #0]
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	4a10      	ldr	r2, [pc, #64]	; (8016200 <TIM_Base_SetConfig+0x114>)
 80161c0:	4293      	cmp	r3, r2
 80161c2:	d00f      	beq.n	80161e4 <TIM_Base_SetConfig+0xf8>
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	4a12      	ldr	r2, [pc, #72]	; (8016210 <TIM_Base_SetConfig+0x124>)
 80161c8:	4293      	cmp	r3, r2
 80161ca:	d00b      	beq.n	80161e4 <TIM_Base_SetConfig+0xf8>
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	4a11      	ldr	r2, [pc, #68]	; (8016214 <TIM_Base_SetConfig+0x128>)
 80161d0:	4293      	cmp	r3, r2
 80161d2:	d007      	beq.n	80161e4 <TIM_Base_SetConfig+0xf8>
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	4a10      	ldr	r2, [pc, #64]	; (8016218 <TIM_Base_SetConfig+0x12c>)
 80161d8:	4293      	cmp	r3, r2
 80161da:	d003      	beq.n	80161e4 <TIM_Base_SetConfig+0xf8>
 80161dc:	687b      	ldr	r3, [r7, #4]
 80161de:	4a0f      	ldr	r2, [pc, #60]	; (801621c <TIM_Base_SetConfig+0x130>)
 80161e0:	4293      	cmp	r3, r2
 80161e2:	d103      	bne.n	80161ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80161e4:	683b      	ldr	r3, [r7, #0]
 80161e6:	691a      	ldr	r2, [r3, #16]
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	2201      	movs	r2, #1
 80161f0:	615a      	str	r2, [r3, #20]
}
 80161f2:	bf00      	nop
 80161f4:	3714      	adds	r7, #20
 80161f6:	46bd      	mov	sp, r7
 80161f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161fc:	4770      	bx	lr
 80161fe:	bf00      	nop
 8016200:	40010000 	.word	0x40010000
 8016204:	40000400 	.word	0x40000400
 8016208:	40000800 	.word	0x40000800
 801620c:	40000c00 	.word	0x40000c00
 8016210:	40010400 	.word	0x40010400
 8016214:	40014000 	.word	0x40014000
 8016218:	40014400 	.word	0x40014400
 801621c:	40014800 	.word	0x40014800

08016220 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8016220:	b580      	push	{r7, lr}
 8016222:	b086      	sub	sp, #24
 8016224:	af00      	add	r7, sp, #0
 8016226:	6078      	str	r0, [r7, #4]
 8016228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801622a:	2300      	movs	r3, #0
 801622c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801622e:	687b      	ldr	r3, [r7, #4]
 8016230:	681b      	ldr	r3, [r3, #0]
 8016232:	689b      	ldr	r3, [r3, #8]
 8016234:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8016236:	693a      	ldr	r2, [r7, #16]
 8016238:	4b65      	ldr	r3, [pc, #404]	; (80163d0 <TIM_SlaveTimer_SetConfig+0x1b0>)
 801623a:	4013      	ands	r3, r2
 801623c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 801623e:	683b      	ldr	r3, [r7, #0]
 8016240:	685b      	ldr	r3, [r3, #4]
 8016242:	693a      	ldr	r2, [r7, #16]
 8016244:	4313      	orrs	r3, r2
 8016246:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8016248:	693a      	ldr	r2, [r7, #16]
 801624a:	4b62      	ldr	r3, [pc, #392]	; (80163d4 <TIM_SlaveTimer_SetConfig+0x1b4>)
 801624c:	4013      	ands	r3, r2
 801624e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8016250:	683b      	ldr	r3, [r7, #0]
 8016252:	681b      	ldr	r3, [r3, #0]
 8016254:	693a      	ldr	r2, [r7, #16]
 8016256:	4313      	orrs	r3, r2
 8016258:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	681b      	ldr	r3, [r3, #0]
 801625e:	693a      	ldr	r2, [r7, #16]
 8016260:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8016262:	683b      	ldr	r3, [r7, #0]
 8016264:	685b      	ldr	r3, [r3, #4]
 8016266:	4a5c      	ldr	r2, [pc, #368]	; (80163d8 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8016268:	4293      	cmp	r3, r2
 801626a:	f000 80ab 	beq.w	80163c4 <TIM_SlaveTimer_SetConfig+0x1a4>
 801626e:	4a5a      	ldr	r2, [pc, #360]	; (80163d8 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8016270:	4293      	cmp	r3, r2
 8016272:	f200 80a4 	bhi.w	80163be <TIM_SlaveTimer_SetConfig+0x19e>
 8016276:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801627a:	f000 80a3 	beq.w	80163c4 <TIM_SlaveTimer_SetConfig+0x1a4>
 801627e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8016282:	f200 809c 	bhi.w	80163be <TIM_SlaveTimer_SetConfig+0x19e>
 8016286:	4a55      	ldr	r2, [pc, #340]	; (80163dc <TIM_SlaveTimer_SetConfig+0x1bc>)
 8016288:	4293      	cmp	r3, r2
 801628a:	f000 809b 	beq.w	80163c4 <TIM_SlaveTimer_SetConfig+0x1a4>
 801628e:	4a53      	ldr	r2, [pc, #332]	; (80163dc <TIM_SlaveTimer_SetConfig+0x1bc>)
 8016290:	4293      	cmp	r3, r2
 8016292:	f200 8094 	bhi.w	80163be <TIM_SlaveTimer_SetConfig+0x19e>
 8016296:	4a52      	ldr	r2, [pc, #328]	; (80163e0 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8016298:	4293      	cmp	r3, r2
 801629a:	f000 8093 	beq.w	80163c4 <TIM_SlaveTimer_SetConfig+0x1a4>
 801629e:	4a50      	ldr	r2, [pc, #320]	; (80163e0 <TIM_SlaveTimer_SetConfig+0x1c0>)
 80162a0:	4293      	cmp	r3, r2
 80162a2:	f200 808c 	bhi.w	80163be <TIM_SlaveTimer_SetConfig+0x19e>
 80162a6:	4a4f      	ldr	r2, [pc, #316]	; (80163e4 <TIM_SlaveTimer_SetConfig+0x1c4>)
 80162a8:	4293      	cmp	r3, r2
 80162aa:	f000 808b 	beq.w	80163c4 <TIM_SlaveTimer_SetConfig+0x1a4>
 80162ae:	4a4d      	ldr	r2, [pc, #308]	; (80163e4 <TIM_SlaveTimer_SetConfig+0x1c4>)
 80162b0:	4293      	cmp	r3, r2
 80162b2:	f200 8084 	bhi.w	80163be <TIM_SlaveTimer_SetConfig+0x19e>
 80162b6:	4a4c      	ldr	r2, [pc, #304]	; (80163e8 <TIM_SlaveTimer_SetConfig+0x1c8>)
 80162b8:	4293      	cmp	r3, r2
 80162ba:	f000 8083 	beq.w	80163c4 <TIM_SlaveTimer_SetConfig+0x1a4>
 80162be:	4a4a      	ldr	r2, [pc, #296]	; (80163e8 <TIM_SlaveTimer_SetConfig+0x1c8>)
 80162c0:	4293      	cmp	r3, r2
 80162c2:	d87c      	bhi.n	80163be <TIM_SlaveTimer_SetConfig+0x19e>
 80162c4:	4a49      	ldr	r2, [pc, #292]	; (80163ec <TIM_SlaveTimer_SetConfig+0x1cc>)
 80162c6:	4293      	cmp	r3, r2
 80162c8:	d07c      	beq.n	80163c4 <TIM_SlaveTimer_SetConfig+0x1a4>
 80162ca:	4a48      	ldr	r2, [pc, #288]	; (80163ec <TIM_SlaveTimer_SetConfig+0x1cc>)
 80162cc:	4293      	cmp	r3, r2
 80162ce:	d876      	bhi.n	80163be <TIM_SlaveTimer_SetConfig+0x19e>
 80162d0:	4a47      	ldr	r2, [pc, #284]	; (80163f0 <TIM_SlaveTimer_SetConfig+0x1d0>)
 80162d2:	4293      	cmp	r3, r2
 80162d4:	d076      	beq.n	80163c4 <TIM_SlaveTimer_SetConfig+0x1a4>
 80162d6:	4a46      	ldr	r2, [pc, #280]	; (80163f0 <TIM_SlaveTimer_SetConfig+0x1d0>)
 80162d8:	4293      	cmp	r3, r2
 80162da:	d870      	bhi.n	80163be <TIM_SlaveTimer_SetConfig+0x19e>
 80162dc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80162e0:	d070      	beq.n	80163c4 <TIM_SlaveTimer_SetConfig+0x1a4>
 80162e2:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80162e6:	d86a      	bhi.n	80163be <TIM_SlaveTimer_SetConfig+0x19e>
 80162e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80162ec:	d06a      	beq.n	80163c4 <TIM_SlaveTimer_SetConfig+0x1a4>
 80162ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80162f2:	d864      	bhi.n	80163be <TIM_SlaveTimer_SetConfig+0x19e>
 80162f4:	2b70      	cmp	r3, #112	; 0x70
 80162f6:	d01a      	beq.n	801632e <TIM_SlaveTimer_SetConfig+0x10e>
 80162f8:	2b70      	cmp	r3, #112	; 0x70
 80162fa:	d860      	bhi.n	80163be <TIM_SlaveTimer_SetConfig+0x19e>
 80162fc:	2b60      	cmp	r3, #96	; 0x60
 80162fe:	d054      	beq.n	80163aa <TIM_SlaveTimer_SetConfig+0x18a>
 8016300:	2b60      	cmp	r3, #96	; 0x60
 8016302:	d85c      	bhi.n	80163be <TIM_SlaveTimer_SetConfig+0x19e>
 8016304:	2b50      	cmp	r3, #80	; 0x50
 8016306:	d046      	beq.n	8016396 <TIM_SlaveTimer_SetConfig+0x176>
 8016308:	2b50      	cmp	r3, #80	; 0x50
 801630a:	d858      	bhi.n	80163be <TIM_SlaveTimer_SetConfig+0x19e>
 801630c:	2b40      	cmp	r3, #64	; 0x40
 801630e:	d019      	beq.n	8016344 <TIM_SlaveTimer_SetConfig+0x124>
 8016310:	2b40      	cmp	r3, #64	; 0x40
 8016312:	d854      	bhi.n	80163be <TIM_SlaveTimer_SetConfig+0x19e>
 8016314:	2b30      	cmp	r3, #48	; 0x30
 8016316:	d055      	beq.n	80163c4 <TIM_SlaveTimer_SetConfig+0x1a4>
 8016318:	2b30      	cmp	r3, #48	; 0x30
 801631a:	d850      	bhi.n	80163be <TIM_SlaveTimer_SetConfig+0x19e>
 801631c:	2b20      	cmp	r3, #32
 801631e:	d051      	beq.n	80163c4 <TIM_SlaveTimer_SetConfig+0x1a4>
 8016320:	2b20      	cmp	r3, #32
 8016322:	d84c      	bhi.n	80163be <TIM_SlaveTimer_SetConfig+0x19e>
 8016324:	2b00      	cmp	r3, #0
 8016326:	d04d      	beq.n	80163c4 <TIM_SlaveTimer_SetConfig+0x1a4>
 8016328:	2b10      	cmp	r3, #16
 801632a:	d04b      	beq.n	80163c4 <TIM_SlaveTimer_SetConfig+0x1a4>
 801632c:	e047      	b.n	80163be <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	6818      	ldr	r0, [r3, #0]
 8016332:	683b      	ldr	r3, [r7, #0]
 8016334:	68d9      	ldr	r1, [r3, #12]
 8016336:	683b      	ldr	r3, [r7, #0]
 8016338:	689a      	ldr	r2, [r3, #8]
 801633a:	683b      	ldr	r3, [r7, #0]
 801633c:	691b      	ldr	r3, [r3, #16]
 801633e:	f000 f8b8 	bl	80164b2 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8016342:	e040      	b.n	80163c6 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8016344:	683b      	ldr	r3, [r7, #0]
 8016346:	681b      	ldr	r3, [r3, #0]
 8016348:	2b05      	cmp	r3, #5
 801634a:	d101      	bne.n	8016350 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 801634c:	2301      	movs	r3, #1
 801634e:	e03b      	b.n	80163c8 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8016350:	687b      	ldr	r3, [r7, #4]
 8016352:	681b      	ldr	r3, [r3, #0]
 8016354:	6a1b      	ldr	r3, [r3, #32]
 8016356:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	681b      	ldr	r3, [r3, #0]
 801635c:	6a1a      	ldr	r2, [r3, #32]
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	681b      	ldr	r3, [r3, #0]
 8016362:	f022 0201 	bic.w	r2, r2, #1
 8016366:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	681b      	ldr	r3, [r3, #0]
 801636c:	699b      	ldr	r3, [r3, #24]
 801636e:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8016370:	68bb      	ldr	r3, [r7, #8]
 8016372:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8016376:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8016378:	683b      	ldr	r3, [r7, #0]
 801637a:	691b      	ldr	r3, [r3, #16]
 801637c:	011b      	lsls	r3, r3, #4
 801637e:	68ba      	ldr	r2, [r7, #8]
 8016380:	4313      	orrs	r3, r2
 8016382:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	681b      	ldr	r3, [r3, #0]
 8016388:	68ba      	ldr	r2, [r7, #8]
 801638a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	681b      	ldr	r3, [r3, #0]
 8016390:	68fa      	ldr	r2, [r7, #12]
 8016392:	621a      	str	r2, [r3, #32]
      break;
 8016394:	e017      	b.n	80163c6 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	6818      	ldr	r0, [r3, #0]
 801639a:	683b      	ldr	r3, [r7, #0]
 801639c:	6899      	ldr	r1, [r3, #8]
 801639e:	683b      	ldr	r3, [r7, #0]
 80163a0:	691b      	ldr	r3, [r3, #16]
 80163a2:	461a      	mov	r2, r3
 80163a4:	f000 f826 	bl	80163f4 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80163a8:	e00d      	b.n	80163c6 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	6818      	ldr	r0, [r3, #0]
 80163ae:	683b      	ldr	r3, [r7, #0]
 80163b0:	6899      	ldr	r1, [r3, #8]
 80163b2:	683b      	ldr	r3, [r7, #0]
 80163b4:	691b      	ldr	r3, [r3, #16]
 80163b6:	461a      	mov	r2, r3
 80163b8:	f000 f84b 	bl	8016452 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80163bc:	e003      	b.n	80163c6 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80163be:	2301      	movs	r3, #1
 80163c0:	75fb      	strb	r3, [r7, #23]
      break;
 80163c2:	e000      	b.n	80163c6 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 80163c4:	bf00      	nop
  }

  return status;
 80163c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80163c8:	4618      	mov	r0, r3
 80163ca:	3718      	adds	r7, #24
 80163cc:	46bd      	mov	sp, r7
 80163ce:	bd80      	pop	{r7, pc}
 80163d0:	ffcfff8f 	.word	0xffcfff8f
 80163d4:	fffefff8 	.word	0xfffefff8
 80163d8:	00200010 	.word	0x00200010
 80163dc:	00100070 	.word	0x00100070
 80163e0:	00100060 	.word	0x00100060
 80163e4:	00100050 	.word	0x00100050
 80163e8:	00100040 	.word	0x00100040
 80163ec:	00100030 	.word	0x00100030
 80163f0:	00100020 	.word	0x00100020

080163f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80163f4:	b480      	push	{r7}
 80163f6:	b087      	sub	sp, #28
 80163f8:	af00      	add	r7, sp, #0
 80163fa:	60f8      	str	r0, [r7, #12]
 80163fc:	60b9      	str	r1, [r7, #8]
 80163fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8016400:	68fb      	ldr	r3, [r7, #12]
 8016402:	6a1b      	ldr	r3, [r3, #32]
 8016404:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8016406:	68fb      	ldr	r3, [r7, #12]
 8016408:	6a1b      	ldr	r3, [r3, #32]
 801640a:	f023 0201 	bic.w	r2, r3, #1
 801640e:	68fb      	ldr	r3, [r7, #12]
 8016410:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8016412:	68fb      	ldr	r3, [r7, #12]
 8016414:	699b      	ldr	r3, [r3, #24]
 8016416:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8016418:	693b      	ldr	r3, [r7, #16]
 801641a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801641e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	011b      	lsls	r3, r3, #4
 8016424:	693a      	ldr	r2, [r7, #16]
 8016426:	4313      	orrs	r3, r2
 8016428:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801642a:	697b      	ldr	r3, [r7, #20]
 801642c:	f023 030a 	bic.w	r3, r3, #10
 8016430:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8016432:	697a      	ldr	r2, [r7, #20]
 8016434:	68bb      	ldr	r3, [r7, #8]
 8016436:	4313      	orrs	r3, r2
 8016438:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801643a:	68fb      	ldr	r3, [r7, #12]
 801643c:	693a      	ldr	r2, [r7, #16]
 801643e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8016440:	68fb      	ldr	r3, [r7, #12]
 8016442:	697a      	ldr	r2, [r7, #20]
 8016444:	621a      	str	r2, [r3, #32]
}
 8016446:	bf00      	nop
 8016448:	371c      	adds	r7, #28
 801644a:	46bd      	mov	sp, r7
 801644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016450:	4770      	bx	lr

08016452 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8016452:	b480      	push	{r7}
 8016454:	b087      	sub	sp, #28
 8016456:	af00      	add	r7, sp, #0
 8016458:	60f8      	str	r0, [r7, #12]
 801645a:	60b9      	str	r1, [r7, #8]
 801645c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801645e:	68fb      	ldr	r3, [r7, #12]
 8016460:	6a1b      	ldr	r3, [r3, #32]
 8016462:	f023 0210 	bic.w	r2, r3, #16
 8016466:	68fb      	ldr	r3, [r7, #12]
 8016468:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801646a:	68fb      	ldr	r3, [r7, #12]
 801646c:	699b      	ldr	r3, [r3, #24]
 801646e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8016470:	68fb      	ldr	r3, [r7, #12]
 8016472:	6a1b      	ldr	r3, [r3, #32]
 8016474:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8016476:	697b      	ldr	r3, [r7, #20]
 8016478:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801647c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	031b      	lsls	r3, r3, #12
 8016482:	697a      	ldr	r2, [r7, #20]
 8016484:	4313      	orrs	r3, r2
 8016486:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8016488:	693b      	ldr	r3, [r7, #16]
 801648a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801648e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8016490:	68bb      	ldr	r3, [r7, #8]
 8016492:	011b      	lsls	r3, r3, #4
 8016494:	693a      	ldr	r2, [r7, #16]
 8016496:	4313      	orrs	r3, r2
 8016498:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801649a:	68fb      	ldr	r3, [r7, #12]
 801649c:	697a      	ldr	r2, [r7, #20]
 801649e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80164a0:	68fb      	ldr	r3, [r7, #12]
 80164a2:	693a      	ldr	r2, [r7, #16]
 80164a4:	621a      	str	r2, [r3, #32]
}
 80164a6:	bf00      	nop
 80164a8:	371c      	adds	r7, #28
 80164aa:	46bd      	mov	sp, r7
 80164ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164b0:	4770      	bx	lr

080164b2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80164b2:	b480      	push	{r7}
 80164b4:	b087      	sub	sp, #28
 80164b6:	af00      	add	r7, sp, #0
 80164b8:	60f8      	str	r0, [r7, #12]
 80164ba:	60b9      	str	r1, [r7, #8]
 80164bc:	607a      	str	r2, [r7, #4]
 80164be:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80164c0:	68fb      	ldr	r3, [r7, #12]
 80164c2:	689b      	ldr	r3, [r3, #8]
 80164c4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80164c6:	697b      	ldr	r3, [r7, #20]
 80164c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80164cc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80164ce:	683b      	ldr	r3, [r7, #0]
 80164d0:	021a      	lsls	r2, r3, #8
 80164d2:	687b      	ldr	r3, [r7, #4]
 80164d4:	431a      	orrs	r2, r3
 80164d6:	68bb      	ldr	r3, [r7, #8]
 80164d8:	4313      	orrs	r3, r2
 80164da:	697a      	ldr	r2, [r7, #20]
 80164dc:	4313      	orrs	r3, r2
 80164de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80164e0:	68fb      	ldr	r3, [r7, #12]
 80164e2:	697a      	ldr	r2, [r7, #20]
 80164e4:	609a      	str	r2, [r3, #8]
}
 80164e6:	bf00      	nop
 80164e8:	371c      	adds	r7, #28
 80164ea:	46bd      	mov	sp, r7
 80164ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164f0:	4770      	bx	lr
	...

080164f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80164f4:	b480      	push	{r7}
 80164f6:	b085      	sub	sp, #20
 80164f8:	af00      	add	r7, sp, #0
 80164fa:	6078      	str	r0, [r7, #4]
 80164fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016504:	2b01      	cmp	r3, #1
 8016506:	d101      	bne.n	801650c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8016508:	2302      	movs	r3, #2
 801650a:	e06d      	b.n	80165e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	2201      	movs	r2, #1
 8016510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	2202      	movs	r2, #2
 8016518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	681b      	ldr	r3, [r3, #0]
 8016520:	685b      	ldr	r3, [r3, #4]
 8016522:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	681b      	ldr	r3, [r3, #0]
 8016528:	689b      	ldr	r3, [r3, #8]
 801652a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	681b      	ldr	r3, [r3, #0]
 8016530:	4a30      	ldr	r2, [pc, #192]	; (80165f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8016532:	4293      	cmp	r3, r2
 8016534:	d004      	beq.n	8016540 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8016536:	687b      	ldr	r3, [r7, #4]
 8016538:	681b      	ldr	r3, [r3, #0]
 801653a:	4a2f      	ldr	r2, [pc, #188]	; (80165f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801653c:	4293      	cmp	r3, r2
 801653e:	d108      	bne.n	8016552 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8016540:	68fb      	ldr	r3, [r7, #12]
 8016542:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8016546:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8016548:	683b      	ldr	r3, [r7, #0]
 801654a:	685b      	ldr	r3, [r3, #4]
 801654c:	68fa      	ldr	r2, [r7, #12]
 801654e:	4313      	orrs	r3, r2
 8016550:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8016552:	68fb      	ldr	r3, [r7, #12]
 8016554:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8016558:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801655a:	683b      	ldr	r3, [r7, #0]
 801655c:	681b      	ldr	r3, [r3, #0]
 801655e:	68fa      	ldr	r2, [r7, #12]
 8016560:	4313      	orrs	r3, r2
 8016562:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	681b      	ldr	r3, [r3, #0]
 8016568:	68fa      	ldr	r2, [r7, #12]
 801656a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	681b      	ldr	r3, [r3, #0]
 8016570:	4a20      	ldr	r2, [pc, #128]	; (80165f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8016572:	4293      	cmp	r3, r2
 8016574:	d022      	beq.n	80165bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	681b      	ldr	r3, [r3, #0]
 801657a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801657e:	d01d      	beq.n	80165bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	681b      	ldr	r3, [r3, #0]
 8016584:	4a1d      	ldr	r2, [pc, #116]	; (80165fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8016586:	4293      	cmp	r3, r2
 8016588:	d018      	beq.n	80165bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	681b      	ldr	r3, [r3, #0]
 801658e:	4a1c      	ldr	r2, [pc, #112]	; (8016600 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8016590:	4293      	cmp	r3, r2
 8016592:	d013      	beq.n	80165bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	681b      	ldr	r3, [r3, #0]
 8016598:	4a1a      	ldr	r2, [pc, #104]	; (8016604 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 801659a:	4293      	cmp	r3, r2
 801659c:	d00e      	beq.n	80165bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	681b      	ldr	r3, [r3, #0]
 80165a2:	4a15      	ldr	r2, [pc, #84]	; (80165f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80165a4:	4293      	cmp	r3, r2
 80165a6:	d009      	beq.n	80165bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	681b      	ldr	r3, [r3, #0]
 80165ac:	4a16      	ldr	r2, [pc, #88]	; (8016608 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80165ae:	4293      	cmp	r3, r2
 80165b0:	d004      	beq.n	80165bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	681b      	ldr	r3, [r3, #0]
 80165b6:	4a15      	ldr	r2, [pc, #84]	; (801660c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80165b8:	4293      	cmp	r3, r2
 80165ba:	d10c      	bne.n	80165d6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80165bc:	68bb      	ldr	r3, [r7, #8]
 80165be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80165c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80165c4:	683b      	ldr	r3, [r7, #0]
 80165c6:	689b      	ldr	r3, [r3, #8]
 80165c8:	68ba      	ldr	r2, [r7, #8]
 80165ca:	4313      	orrs	r3, r2
 80165cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	681b      	ldr	r3, [r3, #0]
 80165d2:	68ba      	ldr	r2, [r7, #8]
 80165d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80165d6:	687b      	ldr	r3, [r7, #4]
 80165d8:	2201      	movs	r2, #1
 80165da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80165de:	687b      	ldr	r3, [r7, #4]
 80165e0:	2200      	movs	r2, #0
 80165e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80165e6:	2300      	movs	r3, #0
}
 80165e8:	4618      	mov	r0, r3
 80165ea:	3714      	adds	r7, #20
 80165ec:	46bd      	mov	sp, r7
 80165ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165f2:	4770      	bx	lr
 80165f4:	40010000 	.word	0x40010000
 80165f8:	40010400 	.word	0x40010400
 80165fc:	40000400 	.word	0x40000400
 8016600:	40000800 	.word	0x40000800
 8016604:	40000c00 	.word	0x40000c00
 8016608:	40001800 	.word	0x40001800
 801660c:	40014000 	.word	0x40014000

08016610 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8016610:	b480      	push	{r7}
 8016612:	b083      	sub	sp, #12
 8016614:	af00      	add	r7, sp, #0
 8016616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8016618:	bf00      	nop
 801661a:	370c      	adds	r7, #12
 801661c:	46bd      	mov	sp, r7
 801661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016622:	4770      	bx	lr

08016624 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8016624:	b480      	push	{r7}
 8016626:	b083      	sub	sp, #12
 8016628:	af00      	add	r7, sp, #0
 801662a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801662c:	bf00      	nop
 801662e:	370c      	adds	r7, #12
 8016630:	46bd      	mov	sp, r7
 8016632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016636:	4770      	bx	lr

08016638 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8016638:	b480      	push	{r7}
 801663a:	b083      	sub	sp, #12
 801663c:	af00      	add	r7, sp, #0
 801663e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8016640:	bf00      	nop
 8016642:	370c      	adds	r7, #12
 8016644:	46bd      	mov	sp, r7
 8016646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801664a:	4770      	bx	lr

0801664c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 801664c:	b480      	push	{r7}
 801664e:	b083      	sub	sp, #12
 8016650:	af00      	add	r7, sp, #0
 8016652:	6078      	str	r0, [r7, #4]
 8016654:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8016656:	683b      	ldr	r3, [r7, #0]
 8016658:	681b      	ldr	r3, [r3, #0]
 801665a:	2b00      	cmp	r3, #0
 801665c:	d121      	bne.n	80166a2 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	681a      	ldr	r2, [r3, #0]
 8016662:	4b27      	ldr	r3, [pc, #156]	; (8016700 <FMC_SDRAM_Init+0xb4>)
 8016664:	4013      	ands	r3, r2
 8016666:	683a      	ldr	r2, [r7, #0]
 8016668:	6851      	ldr	r1, [r2, #4]
 801666a:	683a      	ldr	r2, [r7, #0]
 801666c:	6892      	ldr	r2, [r2, #8]
 801666e:	4311      	orrs	r1, r2
 8016670:	683a      	ldr	r2, [r7, #0]
 8016672:	68d2      	ldr	r2, [r2, #12]
 8016674:	4311      	orrs	r1, r2
 8016676:	683a      	ldr	r2, [r7, #0]
 8016678:	6912      	ldr	r2, [r2, #16]
 801667a:	4311      	orrs	r1, r2
 801667c:	683a      	ldr	r2, [r7, #0]
 801667e:	6952      	ldr	r2, [r2, #20]
 8016680:	4311      	orrs	r1, r2
 8016682:	683a      	ldr	r2, [r7, #0]
 8016684:	6992      	ldr	r2, [r2, #24]
 8016686:	4311      	orrs	r1, r2
 8016688:	683a      	ldr	r2, [r7, #0]
 801668a:	69d2      	ldr	r2, [r2, #28]
 801668c:	4311      	orrs	r1, r2
 801668e:	683a      	ldr	r2, [r7, #0]
 8016690:	6a12      	ldr	r2, [r2, #32]
 8016692:	4311      	orrs	r1, r2
 8016694:	683a      	ldr	r2, [r7, #0]
 8016696:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8016698:	430a      	orrs	r2, r1
 801669a:	431a      	orrs	r2, r3
 801669c:	687b      	ldr	r3, [r7, #4]
 801669e:	601a      	str	r2, [r3, #0]
 80166a0:	e026      	b.n	80166f0 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	681b      	ldr	r3, [r3, #0]
 80166a6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80166aa:	683b      	ldr	r3, [r7, #0]
 80166ac:	69d9      	ldr	r1, [r3, #28]
 80166ae:	683b      	ldr	r3, [r7, #0]
 80166b0:	6a1b      	ldr	r3, [r3, #32]
 80166b2:	4319      	orrs	r1, r3
 80166b4:	683b      	ldr	r3, [r7, #0]
 80166b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80166b8:	430b      	orrs	r3, r1
 80166ba:	431a      	orrs	r2, r3
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	685a      	ldr	r2, [r3, #4]
 80166c4:	4b0e      	ldr	r3, [pc, #56]	; (8016700 <FMC_SDRAM_Init+0xb4>)
 80166c6:	4013      	ands	r3, r2
 80166c8:	683a      	ldr	r2, [r7, #0]
 80166ca:	6851      	ldr	r1, [r2, #4]
 80166cc:	683a      	ldr	r2, [r7, #0]
 80166ce:	6892      	ldr	r2, [r2, #8]
 80166d0:	4311      	orrs	r1, r2
 80166d2:	683a      	ldr	r2, [r7, #0]
 80166d4:	68d2      	ldr	r2, [r2, #12]
 80166d6:	4311      	orrs	r1, r2
 80166d8:	683a      	ldr	r2, [r7, #0]
 80166da:	6912      	ldr	r2, [r2, #16]
 80166dc:	4311      	orrs	r1, r2
 80166de:	683a      	ldr	r2, [r7, #0]
 80166e0:	6952      	ldr	r2, [r2, #20]
 80166e2:	4311      	orrs	r1, r2
 80166e4:	683a      	ldr	r2, [r7, #0]
 80166e6:	6992      	ldr	r2, [r2, #24]
 80166e8:	430a      	orrs	r2, r1
 80166ea:	431a      	orrs	r2, r3
 80166ec:	687b      	ldr	r3, [r7, #4]
 80166ee:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80166f0:	2300      	movs	r3, #0
}
 80166f2:	4618      	mov	r0, r3
 80166f4:	370c      	adds	r7, #12
 80166f6:	46bd      	mov	sp, r7
 80166f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166fc:	4770      	bx	lr
 80166fe:	bf00      	nop
 8016700:	ffff8000 	.word	0xffff8000

08016704 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8016704:	b480      	push	{r7}
 8016706:	b085      	sub	sp, #20
 8016708:	af00      	add	r7, sp, #0
 801670a:	60f8      	str	r0, [r7, #12]
 801670c:	60b9      	str	r1, [r7, #8]
 801670e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	2b00      	cmp	r3, #0
 8016714:	d128      	bne.n	8016768 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8016716:	68fb      	ldr	r3, [r7, #12]
 8016718:	689b      	ldr	r3, [r3, #8]
 801671a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 801671e:	68bb      	ldr	r3, [r7, #8]
 8016720:	681b      	ldr	r3, [r3, #0]
 8016722:	1e59      	subs	r1, r3, #1
 8016724:	68bb      	ldr	r3, [r7, #8]
 8016726:	685b      	ldr	r3, [r3, #4]
 8016728:	3b01      	subs	r3, #1
 801672a:	011b      	lsls	r3, r3, #4
 801672c:	4319      	orrs	r1, r3
 801672e:	68bb      	ldr	r3, [r7, #8]
 8016730:	689b      	ldr	r3, [r3, #8]
 8016732:	3b01      	subs	r3, #1
 8016734:	021b      	lsls	r3, r3, #8
 8016736:	4319      	orrs	r1, r3
 8016738:	68bb      	ldr	r3, [r7, #8]
 801673a:	68db      	ldr	r3, [r3, #12]
 801673c:	3b01      	subs	r3, #1
 801673e:	031b      	lsls	r3, r3, #12
 8016740:	4319      	orrs	r1, r3
 8016742:	68bb      	ldr	r3, [r7, #8]
 8016744:	691b      	ldr	r3, [r3, #16]
 8016746:	3b01      	subs	r3, #1
 8016748:	041b      	lsls	r3, r3, #16
 801674a:	4319      	orrs	r1, r3
 801674c:	68bb      	ldr	r3, [r7, #8]
 801674e:	695b      	ldr	r3, [r3, #20]
 8016750:	3b01      	subs	r3, #1
 8016752:	051b      	lsls	r3, r3, #20
 8016754:	4319      	orrs	r1, r3
 8016756:	68bb      	ldr	r3, [r7, #8]
 8016758:	699b      	ldr	r3, [r3, #24]
 801675a:	3b01      	subs	r3, #1
 801675c:	061b      	lsls	r3, r3, #24
 801675e:	430b      	orrs	r3, r1
 8016760:	431a      	orrs	r2, r3
 8016762:	68fb      	ldr	r3, [r7, #12]
 8016764:	609a      	str	r2, [r3, #8]
 8016766:	e02d      	b.n	80167c4 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8016768:	68fb      	ldr	r3, [r7, #12]
 801676a:	689a      	ldr	r2, [r3, #8]
 801676c:	4b19      	ldr	r3, [pc, #100]	; (80167d4 <FMC_SDRAM_Timing_Init+0xd0>)
 801676e:	4013      	ands	r3, r2
 8016770:	68ba      	ldr	r2, [r7, #8]
 8016772:	68d2      	ldr	r2, [r2, #12]
 8016774:	3a01      	subs	r2, #1
 8016776:	0311      	lsls	r1, r2, #12
 8016778:	68ba      	ldr	r2, [r7, #8]
 801677a:	6952      	ldr	r2, [r2, #20]
 801677c:	3a01      	subs	r2, #1
 801677e:	0512      	lsls	r2, r2, #20
 8016780:	430a      	orrs	r2, r1
 8016782:	431a      	orrs	r2, r3
 8016784:	68fb      	ldr	r3, [r7, #12]
 8016786:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8016788:	68fb      	ldr	r3, [r7, #12]
 801678a:	68db      	ldr	r3, [r3, #12]
 801678c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8016790:	68bb      	ldr	r3, [r7, #8]
 8016792:	681b      	ldr	r3, [r3, #0]
 8016794:	1e59      	subs	r1, r3, #1
 8016796:	68bb      	ldr	r3, [r7, #8]
 8016798:	685b      	ldr	r3, [r3, #4]
 801679a:	3b01      	subs	r3, #1
 801679c:	011b      	lsls	r3, r3, #4
 801679e:	4319      	orrs	r1, r3
 80167a0:	68bb      	ldr	r3, [r7, #8]
 80167a2:	689b      	ldr	r3, [r3, #8]
 80167a4:	3b01      	subs	r3, #1
 80167a6:	021b      	lsls	r3, r3, #8
 80167a8:	4319      	orrs	r1, r3
 80167aa:	68bb      	ldr	r3, [r7, #8]
 80167ac:	691b      	ldr	r3, [r3, #16]
 80167ae:	3b01      	subs	r3, #1
 80167b0:	041b      	lsls	r3, r3, #16
 80167b2:	4319      	orrs	r1, r3
 80167b4:	68bb      	ldr	r3, [r7, #8]
 80167b6:	699b      	ldr	r3, [r3, #24]
 80167b8:	3b01      	subs	r3, #1
 80167ba:	061b      	lsls	r3, r3, #24
 80167bc:	430b      	orrs	r3, r1
 80167be:	431a      	orrs	r2, r3
 80167c0:	68fb      	ldr	r3, [r7, #12]
 80167c2:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 80167c4:	2300      	movs	r3, #0
}
 80167c6:	4618      	mov	r0, r3
 80167c8:	3714      	adds	r7, #20
 80167ca:	46bd      	mov	sp, r7
 80167cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167d0:	4770      	bx	lr
 80167d2:	bf00      	nop
 80167d4:	ff0f0fff 	.word	0xff0f0fff

080167d8 <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
 80167d8:	b480      	push	{r7}
 80167da:	b083      	sub	sp, #12
 80167dc:	af00      	add	r7, sp, #0
 80167de:	6078      	str	r0, [r7, #4]
 80167e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	683a      	ldr	r2, [r7, #0]
 80167e6:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 80167ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFFU;
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	683a      	ldr	r2, [r7, #0]
 80167f2:	3202      	adds	r2, #2
 80167f4:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80167f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  Device->SDCMR      = 0x00000000U;
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	2200      	movs	r2, #0
 8016800:	611a      	str	r2, [r3, #16]
  Device->SDRTR      = 0x00000000U;
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	2200      	movs	r2, #0
 8016806:	615a      	str	r2, [r3, #20]
  Device->SDSR       = 0x00000000U;
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	2200      	movs	r2, #0
 801680c:	619a      	str	r2, [r3, #24]

  return HAL_OK;
 801680e:	2300      	movs	r3, #0
}
 8016810:	4618      	mov	r0, r3
 8016812:	370c      	adds	r7, #12
 8016814:	46bd      	mov	sp, r7
 8016816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801681a:	4770      	bx	lr

0801681c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 801681c:	b480      	push	{r7}
 801681e:	b085      	sub	sp, #20
 8016820:	af00      	add	r7, sp, #0
 8016822:	60f8      	str	r0, [r7, #12]
 8016824:	60b9      	str	r1, [r7, #8]
 8016826:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8016828:	68fb      	ldr	r3, [r7, #12]
 801682a:	691a      	ldr	r2, [r3, #16]
 801682c:	4b0c      	ldr	r3, [pc, #48]	; (8016860 <FMC_SDRAM_SendCommand+0x44>)
 801682e:	4013      	ands	r3, r2
 8016830:	68ba      	ldr	r2, [r7, #8]
 8016832:	6811      	ldr	r1, [r2, #0]
 8016834:	68ba      	ldr	r2, [r7, #8]
 8016836:	6852      	ldr	r2, [r2, #4]
 8016838:	4311      	orrs	r1, r2
 801683a:	68ba      	ldr	r2, [r7, #8]
 801683c:	6892      	ldr	r2, [r2, #8]
 801683e:	3a01      	subs	r2, #1
 8016840:	0152      	lsls	r2, r2, #5
 8016842:	4311      	orrs	r1, r2
 8016844:	68ba      	ldr	r2, [r7, #8]
 8016846:	68d2      	ldr	r2, [r2, #12]
 8016848:	0252      	lsls	r2, r2, #9
 801684a:	430a      	orrs	r2, r1
 801684c:	431a      	orrs	r2, r3
 801684e:	68fb      	ldr	r3, [r7, #12]
 8016850:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8016852:	2300      	movs	r3, #0
}
 8016854:	4618      	mov	r0, r3
 8016856:	3714      	adds	r7, #20
 8016858:	46bd      	mov	sp, r7
 801685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801685e:	4770      	bx	lr
 8016860:	ffc00000 	.word	0xffc00000

08016864 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8016864:	b480      	push	{r7}
 8016866:	b083      	sub	sp, #12
 8016868:	af00      	add	r7, sp, #0
 801686a:	6078      	str	r0, [r7, #4]
 801686c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	695a      	ldr	r2, [r3, #20]
 8016872:	4b07      	ldr	r3, [pc, #28]	; (8016890 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8016874:	4013      	ands	r3, r2
 8016876:	683a      	ldr	r2, [r7, #0]
 8016878:	0052      	lsls	r2, r2, #1
 801687a:	431a      	orrs	r2, r3
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8016880:	2300      	movs	r3, #0
}
 8016882:	4618      	mov	r0, r3
 8016884:	370c      	adds	r7, #12
 8016886:	46bd      	mov	sp, r7
 8016888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801688c:	4770      	bx	lr
 801688e:	bf00      	nop
 8016890:	ffffc001 	.word	0xffffc001

08016894 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8016894:	8880      	ldrh	r0, [r0, #4]
 8016896:	4770      	bx	lr

08016898 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8016898:	2300      	movs	r3, #0
 801689a:	8083      	strh	r3, [r0, #4]
 801689c:	4770      	bx	lr
	...

080168a0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 80168a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168a2:	6803      	ldr	r3, [r0, #0]
 80168a4:	460e      	mov	r6, r1
 80168a6:	2100      	movs	r1, #0
 80168a8:	4605      	mov	r5, r0
 80168aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168ac:	4798      	blx	r3
 80168ae:	4604      	mov	r4, r0
 80168b0:	682b      	ldr	r3, [r5, #0]
 80168b2:	4628      	mov	r0, r5
 80168b4:	1b34      	subs	r4, r6, r4
 80168b6:	6a1b      	ldr	r3, [r3, #32]
 80168b8:	b2a4      	uxth	r4, r4
 80168ba:	4798      	blx	r3
 80168bc:	88ab      	ldrh	r3, [r5, #4]
 80168be:	fbb4 f4f0 	udiv	r4, r4, r0
 80168c2:	42a3      	cmp	r3, r4
 80168c4:	d805      	bhi.n	80168d2 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 80168c6:	4b0e      	ldr	r3, [pc, #56]	; (8016900 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 80168c8:	211e      	movs	r1, #30
 80168ca:	4a0e      	ldr	r2, [pc, #56]	; (8016904 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 80168cc:	480e      	ldr	r0, [pc, #56]	; (8016908 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 80168ce:	f013 fb89 	bl	8029fe4 <__assert_func>
 80168d2:	682b      	ldr	r3, [r5, #0]
 80168d4:	2100      	movs	r1, #0
 80168d6:	4628      	mov	r0, r5
 80168d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168da:	4798      	blx	r3
 80168dc:	682b      	ldr	r3, [r5, #0]
 80168de:	4607      	mov	r7, r0
 80168e0:	4628      	mov	r0, r5
 80168e2:	6a1b      	ldr	r3, [r3, #32]
 80168e4:	4798      	blx	r3
 80168e6:	1bf3      	subs	r3, r6, r7
 80168e8:	b29b      	uxth	r3, r3
 80168ea:	fbb3 f2f0 	udiv	r2, r3, r0
 80168ee:	fb02 3010 	mls	r0, r2, r0, r3
 80168f2:	b118      	cbz	r0, 80168fc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 80168f4:	4b05      	ldr	r3, [pc, #20]	; (801690c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 80168f6:	211f      	movs	r1, #31
 80168f8:	4a02      	ldr	r2, [pc, #8]	; (8016904 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 80168fa:	e7e7      	b.n	80168cc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 80168fc:	4620      	mov	r0, r4
 80168fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016900:	0802caf4 	.word	0x0802caf4
 8016904:	0802cc62 	.word	0x0802cc62
 8016908:	0802cb09 	.word	0x0802cb09
 801690c:	0802cb37 	.word	0x0802cb37

08016910 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8016910:	b538      	push	{r3, r4, r5, lr}
 8016912:	6803      	ldr	r3, [r0, #0]
 8016914:	460d      	mov	r5, r1
 8016916:	4604      	mov	r4, r0
 8016918:	6a1b      	ldr	r3, [r3, #32]
 801691a:	4798      	blx	r3
 801691c:	4285      	cmp	r5, r0
 801691e:	d905      	bls.n	801692c <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8016920:	4b0c      	ldr	r3, [pc, #48]	; (8016954 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8016922:	2130      	movs	r1, #48	; 0x30
 8016924:	4a0c      	ldr	r2, [pc, #48]	; (8016958 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8016926:	480d      	ldr	r0, [pc, #52]	; (801695c <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8016928:	f013 fb5c 	bl	8029fe4 <__assert_func>
 801692c:	6823      	ldr	r3, [r4, #0]
 801692e:	4620      	mov	r0, r4
 8016930:	88a5      	ldrh	r5, [r4, #4]
 8016932:	69db      	ldr	r3, [r3, #28]
 8016934:	4798      	blx	r3
 8016936:	4285      	cmp	r5, r0
 8016938:	d303      	bcc.n	8016942 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 801693a:	4b09      	ldr	r3, [pc, #36]	; (8016960 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 801693c:	2131      	movs	r1, #49	; 0x31
 801693e:	4a06      	ldr	r2, [pc, #24]	; (8016958 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8016940:	e7f1      	b.n	8016926 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8016942:	6823      	ldr	r3, [r4, #0]
 8016944:	4620      	mov	r0, r4
 8016946:	88a1      	ldrh	r1, [r4, #4]
 8016948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801694a:	4798      	blx	r3
 801694c:	88a3      	ldrh	r3, [r4, #4]
 801694e:	3301      	adds	r3, #1
 8016950:	80a3      	strh	r3, [r4, #4]
 8016952:	bd38      	pop	{r3, r4, r5, pc}
 8016954:	0802cbb1 	.word	0x0802cbb1
 8016958:	0802cca5 	.word	0x0802cca5
 801695c:	0802cb09 	.word	0x0802cb09
 8016960:	0802cbc8 	.word	0x0802cbc8

08016964 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8016964:	b570      	push	{r4, r5, r6, lr}
 8016966:	6803      	ldr	r3, [r0, #0]
 8016968:	4616      	mov	r6, r2
 801696a:	4604      	mov	r4, r0
 801696c:	460d      	mov	r5, r1
 801696e:	6a1b      	ldr	r3, [r3, #32]
 8016970:	4798      	blx	r3
 8016972:	4286      	cmp	r6, r0
 8016974:	d905      	bls.n	8016982 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8016976:	4b06      	ldr	r3, [pc, #24]	; (8016990 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8016978:	213a      	movs	r1, #58	; 0x3a
 801697a:	4a06      	ldr	r2, [pc, #24]	; (8016994 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 801697c:	4806      	ldr	r0, [pc, #24]	; (8016998 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 801697e:	f013 fb31 	bl	8029fe4 <__assert_func>
 8016982:	6823      	ldr	r3, [r4, #0]
 8016984:	4629      	mov	r1, r5
 8016986:	4620      	mov	r0, r4
 8016988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801698a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801698e:	4718      	bx	r3
 8016990:	0802cbb1 	.word	0x0802cbb1
 8016994:	0802cc18 	.word	0x0802cc18
 8016998:	0802cb09 	.word	0x0802cb09

0801699c <_ZN8touchgfx17AbstractPartitionD1Ev>:
 801699c:	4770      	bx	lr
	...

080169a0 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 80169a0:	4a02      	ldr	r2, [pc, #8]	; (80169ac <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 80169a2:	6002      	str	r2, [r0, #0]
 80169a4:	2200      	movs	r2, #0
 80169a6:	8082      	strh	r2, [r0, #4]
 80169a8:	4770      	bx	lr
 80169aa:	bf00      	nop
 80169ac:	0802cbec 	.word	0x0802cbec

080169b0 <_ZN8touchgfx9Container13getFirstChildEv>:
 80169b0:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80169b2:	4770      	bx	lr

080169b4 <_ZNK8touchgfx12TextProgress12getTypedTextEv>:
 80169b4:	4a02      	ldr	r2, [pc, #8]	; (80169c0 <_ZNK8touchgfx12TextProgress12getTypedTextEv+0xc>)
 80169b6:	6002      	str	r2, [r0, #0]
 80169b8:	f8b1 20e0 	ldrh.w	r2, [r1, #224]	; 0xe0
 80169bc:	8082      	strh	r2, [r0, #4]
 80169be:	4770      	bx	lr
 80169c0:	0802c590 	.word	0x0802c590

080169c4 <_ZN8touchgfx12TextProgress8setColorENS_9colortypeE>:
 80169c4:	f8c0 10e4 	str.w	r1, [r0, #228]	; 0xe4
 80169c8:	4770      	bx	lr

080169ca <_ZNK8touchgfx12TextProgress8getColorEv>:
 80169ca:	f8d0 00e4 	ldr.w	r0, [r0, #228]	; 0xe4
 80169ce:	4770      	bx	lr

080169d0 <_ZN8touchgfx12TextProgress19setNumberOfDecimalsEt>:
 80169d0:	2902      	cmp	r1, #2
 80169d2:	b570      	push	{r4, r5, r6, lr}
 80169d4:	bf28      	it	cs
 80169d6:	2102      	movcs	r1, #2
 80169d8:	6803      	ldr	r3, [r0, #0]
 80169da:	4604      	mov	r4, r0
 80169dc:	f8a0 1106 	strh.w	r1, [r0, #262]	; 0x106
 80169e0:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 80169e4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80169e8:	4798      	blx	r3
 80169ea:	462b      	mov	r3, r5
 80169ec:	4601      	mov	r1, r0
 80169ee:	4620      	mov	r0, r4
 80169f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80169f4:	4718      	bx	r3

080169f6 <_ZNK8touchgfx12TextProgress19getNumberOfDecimalsEv>:
 80169f6:	f8b0 0106 	ldrh.w	r0, [r0, #262]	; 0x106
 80169fa:	4770      	bx	lr

080169fc <_ZN8touchgfx12TextProgress12setTypedTextERKNS_9TypedTextE>:
 80169fc:	30b4      	adds	r0, #180	; 0xb4
 80169fe:	f002 b9fa 	b.w	8018df6 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>

08016a02 <_ZN8touchgfx12TextProgress8setAlphaEh>:
 8016a02:	b538      	push	{r3, r4, r5, lr}
 8016a04:	4604      	mov	r4, r0
 8016a06:	460d      	mov	r5, r1
 8016a08:	f000 f8e7 	bl	8016bda <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>
 8016a0c:	f884 50ea 	strb.w	r5, [r4, #234]	; 0xea
 8016a10:	bd38      	pop	{r3, r4, r5, pc}
	...

08016a14 <_ZN8touchgfx12TextProgress8setValueEi>:
 8016a14:	b530      	push	{r4, r5, lr}
 8016a16:	b087      	sub	sp, #28
 8016a18:	4604      	mov	r4, r0
 8016a1a:	f000 f927 	bl	8016c6c <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 8016a1e:	4b1d      	ldr	r3, [pc, #116]	; (8016a94 <_ZN8touchgfx12TextProgress8setValueEi+0x80>)
 8016a20:	f104 05f4 	add.w	r5, r4, #244	; 0xf4
 8016a24:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016a28:	ab06      	add	r3, sp, #24
 8016a2a:	e903 0007 	stmdb	r3, {r0, r1, r2}
 8016a2e:	f8b4 3106 	ldrh.w	r3, [r4, #262]	; 0x106
 8016a32:	aa06      	add	r2, sp, #24
 8016a34:	4620      	mov	r0, r4
 8016a36:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016a3a:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 8016a3e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8016a42:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8016a46:	0089      	lsls	r1, r1, #2
 8016a48:	b289      	uxth	r1, r1
 8016a4a:	f000 f9a2 	bl	8016d92 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 8016a4e:	f8b4 1106 	ldrh.w	r1, [r4, #262]	; 0x106
 8016a52:	b1c1      	cbz	r1, 8016a86 <_ZN8touchgfx12TextProgress8setValueEi+0x72>
 8016a54:	ab06      	add	r3, sp, #24
 8016a56:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8016a5a:	f853 2c0c 	ldr.w	r2, [r3, #-12]
 8016a5e:	fb90 f3f2 	sdiv	r3, r0, r2
 8016a62:	fb02 0213 	mls	r2, r2, r3, r0
 8016a66:	4628      	mov	r0, r5
 8016a68:	e9cd 1200 	strd	r1, r2, [sp]
 8016a6c:	4a0a      	ldr	r2, [pc, #40]	; (8016a98 <_ZN8touchgfx12TextProgress8setValueEi+0x84>)
 8016a6e:	2108      	movs	r1, #8
 8016a70:	f007 f966 	bl	801dd40 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8016a74:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 8016a78:	f8c4 50f0 	str.w	r5, [r4, #240]	; 0xf0
 8016a7c:	b007      	add	sp, #28
 8016a7e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016a82:	f005 b90b 	b.w	801bc9c <_ZNK8touchgfx8Drawable10invalidateEv>
 8016a86:	4603      	mov	r3, r0
 8016a88:	4a04      	ldr	r2, [pc, #16]	; (8016a9c <_ZN8touchgfx12TextProgress8setValueEi+0x88>)
 8016a8a:	2108      	movs	r1, #8
 8016a8c:	4628      	mov	r0, r5
 8016a8e:	f007 f957 	bl	801dd40 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8016a92:	e7ef      	b.n	8016a74 <_ZN8touchgfx12TextProgress8setValueEi+0x60>
 8016a94:	0802bf78 	.word	0x0802bf78
 8016a98:	0802cce3 	.word	0x0802cce3
 8016a9c:	0802cceb 	.word	0x0802cceb

08016aa0 <_ZN8touchgfx12TextProgress28setProgressIndicatorPositionEssss>:
 8016aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016aa4:	461d      	mov	r5, r3
 8016aa6:	f100 07b4 	add.w	r7, r0, #180	; 0xb4
 8016aaa:	2300      	movs	r3, #0
 8016aac:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 8016ab0:	4691      	mov	r9, r2
 8016ab2:	4604      	mov	r4, r0
 8016ab4:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
 8016ab8:	4688      	mov	r8, r1
 8016aba:	4638      	mov	r0, r7
 8016abc:	4629      	mov	r1, r5
 8016abe:	f7ed fabb 	bl	8004038 <_ZN8touchgfx8Drawable8setWidthEs>
 8016ac2:	4631      	mov	r1, r6
 8016ac4:	4638      	mov	r0, r7
 8016ac6:	f7ed fac6 	bl	8004056 <_ZN8touchgfx8Drawable9setHeightEs>
 8016aca:	9608      	str	r6, [sp, #32]
 8016acc:	462b      	mov	r3, r5
 8016ace:	464a      	mov	r2, r9
 8016ad0:	4641      	mov	r1, r8
 8016ad2:	4620      	mov	r0, r4
 8016ad4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016ad8:	f000 b978 	b.w	8016dcc <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

08016adc <_ZN8touchgfx12TextProgressC1Ev>:
 8016adc:	b510      	push	{r4, lr}
 8016ade:	4604      	mov	r4, r0
 8016ae0:	f000 f9a0 	bl	8016e24 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 8016ae4:	2201      	movs	r2, #1
 8016ae6:	4b20      	ldr	r3, [pc, #128]	; (8016b68 <_ZN8touchgfx12TextProgressC1Ev+0x8c>)
 8016ae8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016aec:	f104 01b4 	add.w	r1, r4, #180	; 0xb4
 8016af0:	f884 20d9 	strb.w	r2, [r4, #217]	; 0xd9
 8016af4:	4a1d      	ldr	r2, [pc, #116]	; (8016b6c <_ZN8touchgfx12TextProgressC1Ev+0x90>)
 8016af6:	6023      	str	r3, [r4, #0]
 8016af8:	2300      	movs	r3, #0
 8016afa:	f8c4 20dc 	str.w	r2, [r4, #220]	; 0xdc
 8016afe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016b02:	f8a4 30b8 	strh.w	r3, [r4, #184]	; 0xb8
 8016b06:	f8a4 20e0 	strh.w	r2, [r4, #224]	; 0xe0
 8016b0a:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8016b0e:	f8a4 30ba 	strh.w	r3, [r4, #186]	; 0xba
 8016b12:	f8c4 20e8 	str.w	r2, [r4, #232]	; 0xe8
 8016b16:	4a16      	ldr	r2, [pc, #88]	; (8016b70 <_ZN8touchgfx12TextProgressC1Ev+0x94>)
 8016b18:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
 8016b1c:	f8a4 30be 	strh.w	r3, [r4, #190]	; 0xbe
 8016b20:	f8a4 30c0 	strh.w	r3, [r4, #192]	; 0xc0
 8016b24:	f8a4 30c2 	strh.w	r3, [r4, #194]	; 0xc2
 8016b28:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
 8016b2c:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
 8016b30:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
 8016b34:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
 8016b38:	f8a4 30d6 	strh.w	r3, [r4, #214]	; 0xd6
 8016b3c:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
 8016b40:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
 8016b44:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
 8016b48:	f884 30ed 	strb.w	r3, [r4, #237]	; 0xed
 8016b4c:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
 8016b50:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
 8016b54:	f8a4 3106 	strh.w	r3, [r4, #262]	; 0x106
 8016b58:	f8a4 30f4 	strh.w	r3, [r4, #244]	; 0xf4
 8016b5c:	e9c4 3332 	strd	r3, r3, [r4, #200]	; 0xc8
 8016b60:	f000 fa1e 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016b64:	4620      	mov	r0, r4
 8016b66:	bd10      	pop	{r4, pc}
 8016b68:	0802ccf8 	.word	0x0802ccf8
 8016b6c:	0802c590 	.word	0x0802c590
 8016b70:	0802e230 	.word	0x0802e230

08016b74 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 8016b74:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 8016b78:	4770      	bx	lr

08016b7a <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 8016b7a:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 8016b7e:	4770      	bx	lr

08016b80 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 8016b80:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 8016b84:	4770      	bx	lr

08016b86 <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 8016b86:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 8016b8a:	4770      	bx	lr

08016b8c <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_RtS2_>:
 8016b8c:	b510      	push	{r4, lr}
 8016b8e:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 8016b92:	600c      	str	r4, [r1, #0]
 8016b94:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8016b98:	6011      	str	r1, [r2, #0]
 8016b9a:	f8b0 2090 	ldrh.w	r2, [r0, #144]	; 0x90
 8016b9e:	801a      	strh	r2, [r3, #0]
 8016ba0:	9b02      	ldr	r3, [sp, #8]
 8016ba2:	f8b0 2092 	ldrh.w	r2, [r0, #146]	; 0x92
 8016ba6:	801a      	strh	r2, [r3, #0]
 8016ba8:	bd10      	pop	{r4, pc}

08016baa <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_Rt>:
 8016baa:	b510      	push	{r4, lr}
 8016bac:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 8016bb0:	600c      	str	r4, [r1, #0]
 8016bb2:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8016bb6:	6011      	str	r1, [r2, #0]
 8016bb8:	f8b0 2090 	ldrh.w	r2, [r0, #144]	; 0x90
 8016bbc:	801a      	strh	r2, [r3, #0]
 8016bbe:	bd10      	pop	{r4, pc}

08016bc0 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_>:
 8016bc0:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8016bc4:	600b      	str	r3, [r1, #0]
 8016bc6:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8016bca:	6013      	str	r3, [r2, #0]
 8016bcc:	4770      	bx	lr

08016bce <_ZN8touchgfx25AbstractProgressIndicator17setEasingEquationEPFstsstE>:
 8016bce:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
 8016bd2:	4770      	bx	lr

08016bd4 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 8016bd4:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
 8016bd8:	4770      	bx	lr

08016bda <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>:
 8016bda:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
 8016bde:	4770      	bx	lr

08016be0 <_ZNK8touchgfx25AbstractProgressIndicator8getAlphaEv>:
 8016be0:	f890 0054 	ldrb.w	r0, [r0, #84]	; 0x54
 8016be4:	4770      	bx	lr

08016be6 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit>:
 8016be6:	b570      	push	{r4, r5, r6, lr}
 8016be8:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
 8016bec:	4604      	mov	r4, r0
 8016bee:	4616      	mov	r6, r2
 8016bf0:	428d      	cmp	r5, r1
 8016bf2:	bfb8      	it	lt
 8016bf4:	460d      	movlt	r5, r1
 8016bf6:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8016bfa:	428d      	cmp	r5, r1
 8016bfc:	bfa8      	it	ge
 8016bfe:	460d      	movge	r5, r1
 8016c00:	b99a      	cbnz	r2, 8016c2a <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x44>
 8016c02:	6803      	ldr	r3, [r0, #0]
 8016c04:	4629      	mov	r1, r5
 8016c06:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8016c0a:	4798      	blx	r3
 8016c0c:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8016c10:	b358      	cbz	r0, 8016c6a <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x84>
 8016c12:	6803      	ldr	r3, [r0, #0]
 8016c14:	68db      	ldr	r3, [r3, #12]
 8016c16:	4798      	blx	r3
 8016c18:	b338      	cbz	r0, 8016c6a <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x84>
 8016c1a:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8016c1e:	4621      	mov	r1, r4
 8016c20:	6803      	ldr	r3, [r0, #0]
 8016c22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016c26:	689b      	ldr	r3, [r3, #8]
 8016c28:	4718      	bx	r3
 8016c2a:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8016c2e:	2b00      	cmp	r3, #0
 8016c30:	dd07      	ble.n	8016c42 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x5c>
 8016c32:	f004 f869 	bl	801ad08 <_ZN8touchgfx11Application11getInstanceEv>
 8016c36:	4621      	mov	r1, r4
 8016c38:	f004 f89e 	bl	801ad78 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 8016c3c:	2300      	movs	r3, #0
 8016c3e:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
 8016c42:	6823      	ldr	r3, [r4, #0]
 8016c44:	4620      	mov	r0, r4
 8016c46:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8016c4a:	4798      	blx	r3
 8016c4c:	2300      	movs	r3, #0
 8016c4e:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
 8016c52:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8016c56:	e9c4 0527 	strd	r0, r5, [r4, #156]	; 0x9c
 8016c5a:	f004 f855 	bl	801ad08 <_ZN8touchgfx11Application11getInstanceEv>
 8016c5e:	4621      	mov	r1, r4
 8016c60:	f004 f858 	bl	801ad14 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
 8016c64:	2301      	movs	r3, #1
 8016c66:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
 8016c6a:	bd70      	pop	{r4, r5, r6, pc}

08016c6c <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 8016c6c:	b510      	push	{r4, lr}
 8016c6e:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8016c72:	4604      	mov	r4, r0
 8016c74:	4299      	cmp	r1, r3
 8016c76:	bfb8      	it	lt
 8016c78:	4619      	movlt	r1, r3
 8016c7a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8016c7e:	4299      	cmp	r1, r3
 8016c80:	bfa8      	it	ge
 8016c82:	4619      	movge	r1, r3
 8016c84:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8016c88:	428b      	cmp	r3, r1
 8016c8a:	d010      	beq.n	8016cae <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8016c8c:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
 8016c90:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
 8016c94:	b158      	cbz	r0, 8016cae <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8016c96:	6803      	ldr	r3, [r0, #0]
 8016c98:	68db      	ldr	r3, [r3, #12]
 8016c9a:	4798      	blx	r3
 8016c9c:	b138      	cbz	r0, 8016cae <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8016c9e:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8016ca2:	4621      	mov	r1, r4
 8016ca4:	6803      	ldr	r3, [r0, #0]
 8016ca6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016caa:	689b      	ldr	r3, [r3, #8]
 8016cac:	4718      	bx	r3
 8016cae:	bd10      	pop	{r4, pc}

08016cb0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>:
 8016cb0:	4291      	cmp	r1, r2
 8016cb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016cb6:	4604      	mov	r4, r0
 8016cb8:	460e      	mov	r6, r1
 8016cba:	4615      	mov	r5, r2
 8016cbc:	4698      	mov	r8, r3
 8016cbe:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 8016cc2:	db05      	blt.n	8016cd0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x20>
 8016cc4:	4b11      	ldr	r3, [pc, #68]	; (8016d0c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x5c>)
 8016cc6:	214b      	movs	r1, #75	; 0x4b
 8016cc8:	4a11      	ldr	r2, [pc, #68]	; (8016d10 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x60>)
 8016cca:	4812      	ldr	r0, [pc, #72]	; (8016d14 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x64>)
 8016ccc:	f013 f98a 	bl	8029fe4 <__assert_func>
 8016cd0:	6803      	ldr	r3, [r0, #0]
 8016cd2:	e9c0 1221 	strd	r1, r2, [r0, #132]	; 0x84
 8016cd6:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 8016cda:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8016cde:	4798      	blx	r3
 8016ce0:	f1b8 0f00 	cmp.w	r8, #0
 8016ce4:	d10c      	bne.n	8016d00 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x50>
 8016ce6:	1bad      	subs	r5, r5, r6
 8016ce8:	f8a4 5090 	strh.w	r5, [r4, #144]	; 0x90
 8016cec:	f8b4 3090 	ldrh.w	r3, [r4, #144]	; 0x90
 8016cf0:	f8a4 7092 	strh.w	r7, [r4, #146]	; 0x92
 8016cf4:	42bb      	cmp	r3, r7
 8016cf6:	d806      	bhi.n	8016d06 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x56>
 8016cf8:	4b07      	ldr	r3, [pc, #28]	; (8016d18 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x68>)
 8016cfa:	2158      	movs	r1, #88	; 0x58
 8016cfc:	4a04      	ldr	r2, [pc, #16]	; (8016d10 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x60>)
 8016cfe:	e7e4      	b.n	8016cca <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x1a>
 8016d00:	f8a4 8090 	strh.w	r8, [r4, #144]	; 0x90
 8016d04:	e7f2      	b.n	8016cec <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x3c>
 8016d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d0a:	bf00      	nop
 8016d0c:	0802cdd8 	.word	0x0802cdd8
 8016d10:	0802cf24 	.word	0x0802cf24
 8016d14:	0802cde2 	.word	0x0802cde2
 8016d18:	0802ce39 	.word	0x0802ce39

08016d1c <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv>:
 8016d1c:	b570      	push	{r4, r5, r6, lr}
 8016d1e:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
 8016d22:	4604      	mov	r4, r0
 8016d24:	b3a3      	cbz	r3, 8016d90 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 8016d26:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
 8016d2a:	2100      	movs	r1, #0
 8016d2c:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
 8016d30:	3001      	adds	r0, #1
 8016d32:	e9d4 3227 	ldrd	r3, r2, [r4, #156]	; 0x9c
 8016d36:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
 8016d3a:	b280      	uxth	r0, r0
 8016d3c:	1ad2      	subs	r2, r2, r3
 8016d3e:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8016d42:	b212      	sxth	r2, r2
 8016d44:	47a8      	blx	r5
 8016d46:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8016d4a:	6823      	ldr	r3, [r4, #0]
 8016d4c:	4401      	add	r1, r0
 8016d4e:	4620      	mov	r0, r4
 8016d50:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8016d54:	4798      	blx	r3
 8016d56:	e9d4 3229 	ldrd	r3, r2, [r4, #164]	; 0xa4
 8016d5a:	429a      	cmp	r2, r3
 8016d5c:	db18      	blt.n	8016d90 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 8016d5e:	2500      	movs	r5, #0
 8016d60:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 8016d64:	f003 ffd0 	bl	801ad08 <_ZN8touchgfx11Application11getInstanceEv>
 8016d68:	4621      	mov	r1, r4
 8016d6a:	f004 f805 	bl	801ad78 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 8016d6e:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8016d72:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
 8016d76:	b158      	cbz	r0, 8016d90 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 8016d78:	6803      	ldr	r3, [r0, #0]
 8016d7a:	68db      	ldr	r3, [r3, #12]
 8016d7c:	4798      	blx	r3
 8016d7e:	b138      	cbz	r0, 8016d90 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 8016d80:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8016d84:	4621      	mov	r1, r4
 8016d86:	6803      	ldr	r3, [r0, #0]
 8016d88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016d8c:	689b      	ldr	r3, [r3, #8]
 8016d8e:	4718      	bx	r3
 8016d90:	bd70      	pop	{r4, r5, r6, pc}

08016d92 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 8016d92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016d94:	4604      	mov	r4, r0
 8016d96:	460d      	mov	r5, r1
 8016d98:	b1a9      	cbz	r1, 8016dc6 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x34>
 8016d9a:	f8b0 6092 	ldrh.w	r6, [r0, #146]	; 0x92
 8016d9e:	ab01      	add	r3, sp, #4
 8016da0:	f8b4 1090 	ldrh.w	r1, [r4, #144]	; 0x90
 8016da4:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
 8016da8:	1b89      	subs	r1, r1, r6
 8016daa:	e9d0 0221 	ldrd	r0, r2, [r0, #132]	; 0x84
 8016dae:	1a12      	subs	r2, r2, r0
 8016db0:	1a38      	subs	r0, r7, r0
 8016db2:	f005 f912 	bl	801bfda <_ZN8touchgfx6muldivElllRl>
 8016db6:	4629      	mov	r1, r5
 8016db8:	ab01      	add	r3, sp, #4
 8016dba:	f8b4 2090 	ldrh.w	r2, [r4, #144]	; 0x90
 8016dbe:	4430      	add	r0, r6
 8016dc0:	f005 f90b 	bl	801bfda <_ZN8touchgfx6muldivElllRl>
 8016dc4:	b285      	uxth	r5, r0
 8016dc6:	4628      	mov	r0, r5
 8016dc8:	b003      	add	sp, #12
 8016dca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016dcc <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 8016dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016dd0:	4604      	mov	r4, r0
 8016dd2:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
 8016dd6:	4698      	mov	r8, r3
 8016dd8:	460e      	mov	r6, r1
 8016dda:	4615      	mov	r5, r2
 8016ddc:	f8a4 105c 	strh.w	r1, [r4, #92]	; 0x5c
 8016de0:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8016de4:	4619      	mov	r1, r3
 8016de6:	463a      	mov	r2, r7
 8016de8:	3058      	adds	r0, #88	; 0x58
 8016dea:	f7ed f963 	bl	80040b4 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8016dee:	4446      	add	r6, r8
 8016df0:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8016df4:	443d      	add	r5, r7
 8016df6:	42b3      	cmp	r3, r6
 8016df8:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8016dfc:	bfb8      	it	lt
 8016dfe:	8126      	strhlt	r6, [r4, #8]
 8016e00:	42ab      	cmp	r3, r5
 8016e02:	bfb8      	it	lt
 8016e04:	8165      	strhlt	r5, [r4, #10]
 8016e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016e0a <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 8016e0a:	b510      	push	{r4, lr}
 8016e0c:	4604      	mov	r4, r0
 8016e0e:	302c      	adds	r0, #44	; 0x2c
 8016e10:	f002 fa6b 	bl	80192ea <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8016e14:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	; 0x36
 8016e18:	4620      	mov	r0, r4
 8016e1a:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
 8016e1e:	f7ed f949 	bl	80040b4 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8016e22:	bd10      	pop	{r4, pc}

08016e24 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 8016e24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016e26:	4604      	mov	r4, r0
 8016e28:	2500      	movs	r5, #0
 8016e2a:	f7ed f827 	bl	8003e7c <_ZN8touchgfx8DrawableC1Ev>
 8016e2e:	4b24      	ldr	r3, [pc, #144]	; (8016ec0 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x9c>)
 8016e30:	4626      	mov	r6, r4
 8016e32:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8016e36:	2226      	movs	r2, #38	; 0x26
 8016e38:	4629      	mov	r1, r5
 8016e3a:	62a5      	str	r5, [r4, #40]	; 0x28
 8016e3c:	f846 3b2c 	str.w	r3, [r6], #44
 8016e40:	4630      	mov	r0, r6
 8016e42:	f8ad 7004 	strh.w	r7, [sp, #4]
 8016e46:	f013 fa53 	bl	802a2f0 <memset>
 8016e4a:	4630      	mov	r0, r6
 8016e4c:	f7ed f816 	bl	8003e7c <_ZN8touchgfx8DrawableC1Ev>
 8016e50:	a902      	add	r1, sp, #8
 8016e52:	4b1c      	ldr	r3, [pc, #112]	; (8016ec4 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa0>)
 8016e54:	4630      	mov	r0, r6
 8016e56:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
 8016e5a:	f104 0758 	add.w	r7, r4, #88	; 0x58
 8016e5e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016e60:	f831 3d04 	ldrh.w	r3, [r1, #-4]!
 8016e64:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8016e68:	f002 fa3f 	bl	80192ea <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8016e6c:	4638      	mov	r0, r7
 8016e6e:	f7ed f805 	bl	8003e7c <_ZN8touchgfx8DrawableC1Ev>
 8016e72:	4b15      	ldr	r3, [pc, #84]	; (8016ec8 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa4>)
 8016e74:	4629      	mov	r1, r5
 8016e76:	4630      	mov	r0, r6
 8016e78:	65a3      	str	r3, [r4, #88]	; 0x58
 8016e7a:	2364      	movs	r3, #100	; 0x64
 8016e7c:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
 8016e80:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8016e84:	e9c4 3522 	strd	r3, r5, [r4, #136]	; 0x88
 8016e88:	4b10      	ldr	r3, [pc, #64]	; (8016ecc <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa8>)
 8016e8a:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
 8016e8e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8016e92:	e9c4 5527 	strd	r5, r5, [r4, #156]	; 0x9c
 8016e96:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 8016e9a:	e9c4 552b 	strd	r5, r5, [r4, #172]	; 0xac
 8016e9e:	f7ed f88f 	bl	8003fc0 <_ZN8touchgfx8Drawable4setXEs>
 8016ea2:	4629      	mov	r1, r5
 8016ea4:	4630      	mov	r0, r6
 8016ea6:	f7ed f89a 	bl	8003fde <_ZN8touchgfx8Drawable4setYEs>
 8016eaa:	4631      	mov	r1, r6
 8016eac:	4620      	mov	r0, r4
 8016eae:	f000 f877 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016eb2:	4620      	mov	r0, r4
 8016eb4:	4639      	mov	r1, r7
 8016eb6:	f000 f873 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016eba:	4620      	mov	r0, r4
 8016ebc:	b003      	add	sp, #12
 8016ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ec0:	0802ce5c 	.word	0x0802ce5c
 8016ec4:	0802e33c 	.word	0x0802e33c
 8016ec8:	0802d050 	.word	0x0802d050
 8016ecc:	0801c6a3 	.word	0x0801c6a3

08016ed0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8016ed0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016ed2:	2000      	movs	r0, #0
 8016ed4:	b12b      	cbz	r3, 8016ee2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8016ed6:	b920      	cbnz	r0, 8016ee2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8016ed8:	1a5a      	subs	r2, r3, r1
 8016eda:	699b      	ldr	r3, [r3, #24]
 8016edc:	4250      	negs	r0, r2
 8016ede:	4150      	adcs	r0, r2
 8016ee0:	e7f8      	b.n	8016ed4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8016ee2:	4770      	bx	lr

08016ee4 <_ZN8touchgfx9Container9removeAllEv>:
 8016ee4:	2200      	movs	r2, #0
 8016ee6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016ee8:	b123      	cbz	r3, 8016ef4 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8016eea:	6999      	ldr	r1, [r3, #24]
 8016eec:	6281      	str	r1, [r0, #40]	; 0x28
 8016eee:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8016ef2:	e7f8      	b.n	8016ee6 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8016ef4:	4770      	bx	lr

08016ef6 <_ZN8touchgfx9Container6unlinkEv>:
 8016ef6:	2300      	movs	r3, #0
 8016ef8:	6283      	str	r3, [r0, #40]	; 0x28
 8016efa:	4770      	bx	lr

08016efc <_ZNK8touchgfx9Container12getSolidRectEv>:
 8016efc:	2200      	movs	r2, #0
 8016efe:	8002      	strh	r2, [r0, #0]
 8016f00:	8042      	strh	r2, [r0, #2]
 8016f02:	8082      	strh	r2, [r0, #4]
 8016f04:	80c2      	strh	r2, [r0, #6]
 8016f06:	4770      	bx	lr

08016f08 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8016f08:	b570      	push	{r4, r5, r6, lr}
 8016f0a:	460d      	mov	r5, r1
 8016f0c:	4616      	mov	r6, r2
 8016f0e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016f10:	b13c      	cbz	r4, 8016f22 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8016f12:	6823      	ldr	r3, [r4, #0]
 8016f14:	4620      	mov	r0, r4
 8016f16:	4632      	mov	r2, r6
 8016f18:	4629      	mov	r1, r5
 8016f1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016f1c:	4798      	blx	r3
 8016f1e:	69a4      	ldr	r4, [r4, #24]
 8016f20:	e7f6      	b.n	8016f10 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8016f22:	bd70      	pop	{r4, r5, r6, pc}

08016f24 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8016f24:	b538      	push	{r3, r4, r5, lr}
 8016f26:	460d      	mov	r5, r1
 8016f28:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016f2a:	b134      	cbz	r4, 8016f3a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8016f2c:	682b      	ldr	r3, [r5, #0]
 8016f2e:	4621      	mov	r1, r4
 8016f30:	4628      	mov	r0, r5
 8016f32:	689b      	ldr	r3, [r3, #8]
 8016f34:	4798      	blx	r3
 8016f36:	69a4      	ldr	r4, [r4, #24]
 8016f38:	e7f7      	b.n	8016f2a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8016f3a:	bd38      	pop	{r3, r4, r5, pc}

08016f3c <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8016f3c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016f3e:	b19b      	cbz	r3, 8016f68 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8016f40:	428b      	cmp	r3, r1
 8016f42:	d109      	bne.n	8016f58 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8016f44:	699a      	ldr	r2, [r3, #24]
 8016f46:	2100      	movs	r1, #0
 8016f48:	6159      	str	r1, [r3, #20]
 8016f4a:	6282      	str	r2, [r0, #40]	; 0x28
 8016f4c:	b902      	cbnz	r2, 8016f50 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8016f4e:	4770      	bx	lr
 8016f50:	6199      	str	r1, [r3, #24]
 8016f52:	4770      	bx	lr
 8016f54:	4613      	mov	r3, r2
 8016f56:	b13a      	cbz	r2, 8016f68 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8016f58:	699a      	ldr	r2, [r3, #24]
 8016f5a:	428a      	cmp	r2, r1
 8016f5c:	d1fa      	bne.n	8016f54 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8016f5e:	698a      	ldr	r2, [r1, #24]
 8016f60:	619a      	str	r2, [r3, #24]
 8016f62:	2300      	movs	r3, #0
 8016f64:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8016f68:	4770      	bx	lr

08016f6a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8016f6a:	b410      	push	{r4}
 8016f6c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016f6e:	4604      	mov	r4, r0
 8016f70:	b92b      	cbnz	r3, 8016f7e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8016f72:	6803      	ldr	r3, [r0, #0]
 8016f74:	4611      	mov	r1, r2
 8016f76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016f7c:	4718      	bx	r3
 8016f7e:	b941      	cbnz	r1, 8016f92 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8016f80:	6193      	str	r3, [r2, #24]
 8016f82:	6282      	str	r2, [r0, #40]	; 0x28
 8016f84:	6154      	str	r4, [r2, #20]
 8016f86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016f8a:	4770      	bx	lr
 8016f8c:	4603      	mov	r3, r0
 8016f8e:	2800      	cmp	r0, #0
 8016f90:	d0f9      	beq.n	8016f86 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8016f92:	4299      	cmp	r1, r3
 8016f94:	6998      	ldr	r0, [r3, #24]
 8016f96:	d1f9      	bne.n	8016f8c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8016f98:	6190      	str	r0, [r2, #24]
 8016f9a:	618a      	str	r2, [r1, #24]
 8016f9c:	e7f2      	b.n	8016f84 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

08016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8016fa0:	4288      	cmp	r0, r1
 8016fa2:	b508      	push	{r3, lr}
 8016fa4:	d105      	bne.n	8016fb2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 8016fa6:	4b11      	ldr	r3, [pc, #68]	; (8016fec <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 8016fa8:	2123      	movs	r1, #35	; 0x23
 8016faa:	4a11      	ldr	r2, [pc, #68]	; (8016ff0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8016fac:	4811      	ldr	r0, [pc, #68]	; (8016ff4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 8016fae:	f013 f819 	bl	8029fe4 <__assert_func>
 8016fb2:	694b      	ldr	r3, [r1, #20]
 8016fb4:	b11b      	cbz	r3, 8016fbe <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 8016fb6:	4b10      	ldr	r3, [pc, #64]	; (8016ff8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 8016fb8:	2124      	movs	r1, #36	; 0x24
 8016fba:	4a0d      	ldr	r2, [pc, #52]	; (8016ff0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8016fbc:	e7f6      	b.n	8016fac <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8016fbe:	e9c1 0305 	strd	r0, r3, [r1, #20]
 8016fc2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016fc4:	b913      	cbnz	r3, 8016fcc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 8016fc6:	6281      	str	r1, [r0, #40]	; 0x28
 8016fc8:	bd08      	pop	{r3, pc}
 8016fca:	4613      	mov	r3, r2
 8016fcc:	699a      	ldr	r2, [r3, #24]
 8016fce:	b12a      	cbz	r2, 8016fdc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8016fd0:	428b      	cmp	r3, r1
 8016fd2:	d1fa      	bne.n	8016fca <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8016fd4:	4b09      	ldr	r3, [pc, #36]	; (8016ffc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8016fd6:	2135      	movs	r1, #53	; 0x35
 8016fd8:	4a05      	ldr	r2, [pc, #20]	; (8016ff0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8016fda:	e7e7      	b.n	8016fac <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8016fdc:	428b      	cmp	r3, r1
 8016fde:	d103      	bne.n	8016fe8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8016fe0:	4b06      	ldr	r3, [pc, #24]	; (8016ffc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8016fe2:	2138      	movs	r1, #56	; 0x38
 8016fe4:	4a02      	ldr	r2, [pc, #8]	; (8016ff0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8016fe6:	e7e1      	b.n	8016fac <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8016fe8:	6199      	str	r1, [r3, #24]
 8016fea:	e7ed      	b.n	8016fc8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8016fec:	0802cf7d 	.word	0x0802cf7d
 8016ff0:	0802d0d4 	.word	0x0802d0d4
 8016ff4:	0802cfa9 	.word	0x0802cfa9
 8016ff8:	0802cfdc 	.word	0x0802cfdc
 8016ffc:	0802d012 	.word	0x0802d012

08017000 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8017000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017004:	461f      	mov	r7, r3
 8017006:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 801700a:	460d      	mov	r5, r1
 801700c:	4616      	mov	r6, r2
 801700e:	b103      	cbz	r3, 8017012 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8017010:	6038      	str	r0, [r7, #0]
 8017012:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8017014:	b314      	cbz	r4, 801705c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8017016:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801701a:	b1eb      	cbz	r3, 8017058 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801701c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8017020:	428d      	cmp	r5, r1
 8017022:	db19      	blt.n	8017058 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017024:	b289      	uxth	r1, r1
 8017026:	8923      	ldrh	r3, [r4, #8]
 8017028:	440b      	add	r3, r1
 801702a:	b21b      	sxth	r3, r3
 801702c:	429d      	cmp	r5, r3
 801702e:	da13      	bge.n	8017058 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017030:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8017034:	4296      	cmp	r6, r2
 8017036:	db0f      	blt.n	8017058 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017038:	b292      	uxth	r2, r2
 801703a:	8963      	ldrh	r3, [r4, #10]
 801703c:	4413      	add	r3, r2
 801703e:	b21b      	sxth	r3, r3
 8017040:	429e      	cmp	r6, r3
 8017042:	da09      	bge.n	8017058 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017044:	6823      	ldr	r3, [r4, #0]
 8017046:	1ab2      	subs	r2, r6, r2
 8017048:	1a69      	subs	r1, r5, r1
 801704a:	4620      	mov	r0, r4
 801704c:	f8d3 8020 	ldr.w	r8, [r3, #32]
 8017050:	b212      	sxth	r2, r2
 8017052:	463b      	mov	r3, r7
 8017054:	b209      	sxth	r1, r1
 8017056:	47c0      	blx	r8
 8017058:	69a4      	ldr	r4, [r4, #24]
 801705a:	e7db      	b.n	8017014 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 801705c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017060 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8017060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017064:	4c6d      	ldr	r4, [pc, #436]	; (801721c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8017066:	b0a1      	sub	sp, #132	; 0x84
 8017068:	4606      	mov	r6, r0
 801706a:	6824      	ldr	r4, [r4, #0]
 801706c:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 801706e:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8017072:	2400      	movs	r4, #0
 8017074:	9303      	str	r3, [sp, #12]
 8017076:	802c      	strh	r4, [r5, #0]
 8017078:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 801707a:	802c      	strh	r4, [r5, #0]
 801707c:	601c      	str	r4, [r3, #0]
 801707e:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8017082:	f7ff ffbd 	bl	8017000 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8017086:	f1b9 0f03 	cmp.w	r9, #3
 801708a:	f340 80c1 	ble.w	8017210 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 801708e:	4631      	mov	r1, r6
 8017090:	a80c      	add	r0, sp, #48	; 0x30
 8017092:	f004 fe9b 	bl	801bdcc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017096:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801709a:	9306      	str	r3, [sp, #24]
 801709c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80170a0:	9307      	str	r3, [sp, #28]
 80170a2:	9b03      	ldr	r3, [sp, #12]
 80170a4:	f8d3 a000 	ldr.w	sl, [r3]
 80170a8:	f1ba 0f00 	cmp.w	sl, #0
 80170ac:	f000 80b3 	beq.w	8017216 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 80170b0:	4651      	mov	r1, sl
 80170b2:	a810      	add	r0, sp, #64	; 0x40
 80170b4:	f004 fe8a 	bl	801bdcc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80170b8:	2002      	movs	r0, #2
 80170ba:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 80170be:	9b01      	ldr	r3, [sp, #4]
 80170c0:	9a06      	ldr	r2, [sp, #24]
 80170c2:	fb91 f1f0 	sdiv	r1, r1, r0
 80170c6:	189d      	adds	r5, r3, r2
 80170c8:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 80170cc:	9a07      	ldr	r2, [sp, #28]
 80170ce:	4419      	add	r1, r3
 80170d0:	9b02      	ldr	r3, [sp, #8]
 80170d2:	4413      	add	r3, r2
 80170d4:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 80170d8:	1a6d      	subs	r5, r5, r1
 80170da:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 80170de:	fb92 f2f0 	sdiv	r2, r2, r0
 80170e2:	440a      	add	r2, r1
 80170e4:	1a9b      	subs	r3, r3, r2
 80170e6:	435b      	muls	r3, r3
 80170e8:	fb05 3505 	mla	r5, r5, r5, r3
 80170ec:	4f4c      	ldr	r7, [pc, #304]	; (8017220 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 80170ee:	ac10      	add	r4, sp, #64	; 0x40
 80170f0:	f1b9 0f0c 	cmp.w	r9, #12
 80170f4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80170f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80170f8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80170fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80170fc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80170fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017100:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8017104:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8017108:	f04f 0303 	mov.w	r3, #3
 801710c:	bfd8      	it	le
 801710e:	f109 32ff 	addle.w	r2, r9, #4294967295
 8017112:	f04f 0400 	mov.w	r4, #0
 8017116:	f8cd 9000 	str.w	r9, [sp]
 801711a:	bfcc      	ite	gt
 801711c:	4698      	movgt	r8, r3
 801711e:	fb92 f8f3 	sdivle	r8, r2, r3
 8017122:	1c63      	adds	r3, r4, #1
 8017124:	aa10      	add	r2, sp, #64	; 0x40
 8017126:	f004 0401 	and.w	r4, r4, #1
 801712a:	f04f 0b00 	mov.w	fp, #0
 801712e:	9308      	str	r3, [sp, #32]
 8017130:	9b00      	ldr	r3, [sp, #0]
 8017132:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8017136:	fb93 f3f8 	sdiv	r3, r3, r8
 801713a:	3404      	adds	r4, #4
 801713c:	b29b      	uxth	r3, r3
 801713e:	9304      	str	r3, [sp, #16]
 8017140:	9a04      	ldr	r2, [sp, #16]
 8017142:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8017146:	fb13 f302 	smulbb	r3, r3, r2
 801714a:	9a01      	ldr	r2, [sp, #4]
 801714c:	b29b      	uxth	r3, r3
 801714e:	1899      	adds	r1, r3, r2
 8017150:	9305      	str	r3, [sp, #20]
 8017152:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8017156:	b209      	sxth	r1, r1
 8017158:	4299      	cmp	r1, r3
 801715a:	db4d      	blt.n	80171f8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801715c:	8932      	ldrh	r2, [r6, #8]
 801715e:	4413      	add	r3, r2
 8017160:	b21b      	sxth	r3, r3
 8017162:	4299      	cmp	r1, r3
 8017164:	da48      	bge.n	80171f8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8017166:	9b04      	ldr	r3, [sp, #16]
 8017168:	6827      	ldr	r7, [r4, #0]
 801716a:	fb17 f703 	smulbb	r7, r7, r3
 801716e:	9b02      	ldr	r3, [sp, #8]
 8017170:	b2bf      	uxth	r7, r7
 8017172:	18fa      	adds	r2, r7, r3
 8017174:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8017178:	b212      	sxth	r2, r2
 801717a:	429a      	cmp	r2, r3
 801717c:	db3c      	blt.n	80171f8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801717e:	8970      	ldrh	r0, [r6, #10]
 8017180:	4403      	add	r3, r0
 8017182:	b21b      	sxth	r3, r3
 8017184:	429a      	cmp	r2, r3
 8017186:	da37      	bge.n	80171f8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8017188:	2300      	movs	r3, #0
 801718a:	4630      	mov	r0, r6
 801718c:	930b      	str	r3, [sp, #44]	; 0x2c
 801718e:	ab0b      	add	r3, sp, #44	; 0x2c
 8017190:	f7ff ff36 	bl	8017000 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8017194:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017196:	b37a      	cbz	r2, 80171f8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8017198:	4552      	cmp	r2, sl
 801719a:	d02d      	beq.n	80171f8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801719c:	4611      	mov	r1, r2
 801719e:	a80e      	add	r0, sp, #56	; 0x38
 80171a0:	9209      	str	r2, [sp, #36]	; 0x24
 80171a2:	f004 fe13 	bl	801bdcc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80171a6:	f04f 0e02 	mov.w	lr, #2
 80171aa:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 80171ae:	9a06      	ldr	r2, [sp, #24]
 80171b0:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 80171b4:	9b01      	ldr	r3, [sp, #4]
 80171b6:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 80171ba:	4413      	add	r3, r2
 80171bc:	9a07      	ldr	r2, [sp, #28]
 80171be:	fb91 f1fe 	sdiv	r1, r1, lr
 80171c2:	fb9c fcfe 	sdiv	ip, ip, lr
 80171c6:	4401      	add	r1, r0
 80171c8:	1a58      	subs	r0, r3, r1
 80171ca:	9b02      	ldr	r3, [sp, #8]
 80171cc:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 80171d0:	4413      	add	r3, r2
 80171d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80171d4:	448c      	add	ip, r1
 80171d6:	eba3 030c 	sub.w	r3, r3, ip
 80171da:	435b      	muls	r3, r3
 80171dc:	fb00 3300 	mla	r3, r0, r0, r3
 80171e0:	42ab      	cmp	r3, r5
 80171e2:	d208      	bcs.n	80171f6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 80171e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80171e6:	461d      	mov	r5, r3
 80171e8:	9803      	ldr	r0, [sp, #12]
 80171ea:	6001      	str	r1, [r0, #0]
 80171ec:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80171ee:	9805      	ldr	r0, [sp, #20]
 80171f0:	8008      	strh	r0, [r1, #0]
 80171f2:	992b      	ldr	r1, [sp, #172]	; 0xac
 80171f4:	800f      	strh	r7, [r1, #0]
 80171f6:	4692      	mov	sl, r2
 80171f8:	f10b 0b01 	add.w	fp, fp, #1
 80171fc:	3408      	adds	r4, #8
 80171fe:	f1bb 0f04 	cmp.w	fp, #4
 8017202:	d19d      	bne.n	8017140 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8017204:	9b00      	ldr	r3, [sp, #0]
 8017206:	9c08      	ldr	r4, [sp, #32]
 8017208:	444b      	add	r3, r9
 801720a:	4544      	cmp	r4, r8
 801720c:	9300      	str	r3, [sp, #0]
 801720e:	d188      	bne.n	8017122 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8017210:	b021      	add	sp, #132	; 0x84
 8017212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017216:	f04f 35ff 	mov.w	r5, #4294967295
 801721a:	e767      	b.n	80170ec <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 801721c:	2400b5d0 	.word	0x2400b5d0
 8017220:	0802bf84 	.word	0x0802bf84

08017224 <_ZN8touchgfx4RectaNERKS0_>:
 8017224:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017228:	f9b1 7000 	ldrsh.w	r7, [r1]
 801722c:	888c      	ldrh	r4, [r1, #4]
 801722e:	f9b0 9000 	ldrsh.w	r9, [r0]
 8017232:	443c      	add	r4, r7
 8017234:	b2a4      	uxth	r4, r4
 8017236:	fa0f f884 	sxth.w	r8, r4
 801723a:	45c1      	cmp	r9, r8
 801723c:	da2f      	bge.n	801729e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801723e:	8882      	ldrh	r2, [r0, #4]
 8017240:	444a      	add	r2, r9
 8017242:	b292      	uxth	r2, r2
 8017244:	fa0f fe82 	sxth.w	lr, r2
 8017248:	4577      	cmp	r7, lr
 801724a:	da28      	bge.n	801729e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801724c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8017250:	88cb      	ldrh	r3, [r1, #6]
 8017252:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8017256:	442b      	add	r3, r5
 8017258:	b21b      	sxth	r3, r3
 801725a:	429e      	cmp	r6, r3
 801725c:	da1f      	bge.n	801729e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801725e:	88c3      	ldrh	r3, [r0, #6]
 8017260:	4433      	add	r3, r6
 8017262:	b29b      	uxth	r3, r3
 8017264:	fa0f fc83 	sxth.w	ip, r3
 8017268:	4565      	cmp	r5, ip
 801726a:	da18      	bge.n	801729e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801726c:	454f      	cmp	r7, r9
 801726e:	bfb8      	it	lt
 8017270:	464f      	movlt	r7, r9
 8017272:	42b5      	cmp	r5, r6
 8017274:	bfb8      	it	lt
 8017276:	4635      	movlt	r5, r6
 8017278:	45f0      	cmp	r8, lr
 801727a:	bfd8      	it	le
 801727c:	4622      	movle	r2, r4
 801727e:	1bd2      	subs	r2, r2, r7
 8017280:	8082      	strh	r2, [r0, #4]
 8017282:	884a      	ldrh	r2, [r1, #2]
 8017284:	88c9      	ldrh	r1, [r1, #6]
 8017286:	8007      	strh	r7, [r0, #0]
 8017288:	440a      	add	r2, r1
 801728a:	8045      	strh	r5, [r0, #2]
 801728c:	b292      	uxth	r2, r2
 801728e:	b211      	sxth	r1, r2
 8017290:	458c      	cmp	ip, r1
 8017292:	bfa8      	it	ge
 8017294:	4613      	movge	r3, r2
 8017296:	1b5b      	subs	r3, r3, r5
 8017298:	80c3      	strh	r3, [r0, #6]
 801729a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801729e:	2300      	movs	r3, #0
 80172a0:	8003      	strh	r3, [r0, #0]
 80172a2:	8043      	strh	r3, [r0, #2]
 80172a4:	8083      	strh	r3, [r0, #4]
 80172a6:	80c3      	strh	r3, [r0, #6]
 80172a8:	e7f7      	b.n	801729a <_ZN8touchgfx4RectaNERKS0_+0x76>

080172aa <_ZNK8touchgfx4Rect7isEmptyEv>:
 80172aa:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80172ae:	2b00      	cmp	r3, #0
 80172b0:	dd06      	ble.n	80172c0 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 80172b2:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80172b6:	2800      	cmp	r0, #0
 80172b8:	bfcc      	ite	gt
 80172ba:	2000      	movgt	r0, #0
 80172bc:	2001      	movle	r0, #1
 80172be:	4770      	bx	lr
 80172c0:	2001      	movs	r0, #1
 80172c2:	4770      	bx	lr

080172c4 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 80172c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172c8:	2300      	movs	r3, #0
 80172ca:	4604      	mov	r4, r0
 80172cc:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80172ce:	8003      	strh	r3, [r0, #0]
 80172d0:	8043      	strh	r3, [r0, #2]
 80172d2:	8083      	strh	r3, [r0, #4]
 80172d4:	80c3      	strh	r3, [r0, #6]
 80172d6:	2d00      	cmp	r5, #0
 80172d8:	d040      	beq.n	801735c <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 80172da:	1d28      	adds	r0, r5, #4
 80172dc:	f7ff ffe5 	bl	80172aa <_ZNK8touchgfx4Rect7isEmptyEv>
 80172e0:	b988      	cbnz	r0, 8017306 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80172e2:	4620      	mov	r0, r4
 80172e4:	f7ff ffe1 	bl	80172aa <_ZNK8touchgfx4Rect7isEmptyEv>
 80172e8:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80172ec:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80172f0:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 80172f4:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 80172f8:	b138      	cbz	r0, 801730a <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 80172fa:	8022      	strh	r2, [r4, #0]
 80172fc:	8063      	strh	r3, [r4, #2]
 80172fe:	f8a4 e004 	strh.w	lr, [r4, #4]
 8017302:	f8a4 c006 	strh.w	ip, [r4, #6]
 8017306:	69ad      	ldr	r5, [r5, #24]
 8017308:	e7e5      	b.n	80172d6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 801730a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801730e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8017312:	4290      	cmp	r0, r2
 8017314:	4607      	mov	r7, r0
 8017316:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 801731a:	460e      	mov	r6, r1
 801731c:	bfa8      	it	ge
 801731e:	4617      	movge	r7, r2
 8017320:	4299      	cmp	r1, r3
 8017322:	4472      	add	r2, lr
 8017324:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8017328:	bfa8      	it	ge
 801732a:	461e      	movge	r6, r3
 801732c:	4440      	add	r0, r8
 801732e:	4471      	add	r1, lr
 8017330:	4463      	add	r3, ip
 8017332:	b200      	sxth	r0, r0
 8017334:	8027      	strh	r7, [r4, #0]
 8017336:	b212      	sxth	r2, r2
 8017338:	8066      	strh	r6, [r4, #2]
 801733a:	b209      	sxth	r1, r1
 801733c:	b21b      	sxth	r3, r3
 801733e:	4290      	cmp	r0, r2
 8017340:	bfac      	ite	ge
 8017342:	ebc7 0200 	rsbge	r2, r7, r0
 8017346:	ebc7 0202 	rsblt	r2, r7, r2
 801734a:	4299      	cmp	r1, r3
 801734c:	bfac      	ite	ge
 801734e:	ebc6 0301 	rsbge	r3, r6, r1
 8017352:	ebc6 0303 	rsblt	r3, r6, r3
 8017356:	80a2      	strh	r2, [r4, #4]
 8017358:	80e3      	strh	r3, [r4, #6]
 801735a:	e7d4      	b.n	8017306 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801735c:	4620      	mov	r0, r4
 801735e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017362 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8017362:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8017366:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801736a:	b383      	cbz	r3, 80173ce <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801736c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801736e:	b374      	cbz	r4, 80173ce <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8017370:	f9b1 5000 	ldrsh.w	r5, [r1]
 8017374:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8017378:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 801737c:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8017380:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8017384:	b303      	cbz	r3, 80173c8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8017386:	4668      	mov	r0, sp
 8017388:	1d21      	adds	r1, r4, #4
 801738a:	f8ad 5000 	strh.w	r5, [sp]
 801738e:	f8ad 6002 	strh.w	r6, [sp, #2]
 8017392:	f8ad 7004 	strh.w	r7, [sp, #4]
 8017396:	f8ad 8006 	strh.w	r8, [sp, #6]
 801739a:	f7ff ff43 	bl	8017224 <_ZN8touchgfx4RectaNERKS0_>
 801739e:	4668      	mov	r0, sp
 80173a0:	f7ff ff83 	bl	80172aa <_ZNK8touchgfx4Rect7isEmptyEv>
 80173a4:	b980      	cbnz	r0, 80173c8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80173a6:	f8bd 3000 	ldrh.w	r3, [sp]
 80173aa:	4669      	mov	r1, sp
 80173ac:	88a2      	ldrh	r2, [r4, #4]
 80173ae:	4620      	mov	r0, r4
 80173b0:	1a9b      	subs	r3, r3, r2
 80173b2:	88e2      	ldrh	r2, [r4, #6]
 80173b4:	f8ad 3000 	strh.w	r3, [sp]
 80173b8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80173bc:	1a9b      	subs	r3, r3, r2
 80173be:	f8ad 3002 	strh.w	r3, [sp, #2]
 80173c2:	6823      	ldr	r3, [r4, #0]
 80173c4:	689b      	ldr	r3, [r3, #8]
 80173c6:	4798      	blx	r3
 80173c8:	69a4      	ldr	r4, [r4, #24]
 80173ca:	2c00      	cmp	r4, #0
 80173cc:	d1d8      	bne.n	8017380 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 80173ce:	b002      	add	sp, #8
 80173d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080173d4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 80173d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80173d6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80173da:	460d      	mov	r5, r1
 80173dc:	4616      	mov	r6, r2
 80173de:	b323      	cbz	r3, 801742a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80173e0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80173e2:	b314      	cbz	r4, 801742a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80173e4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80173e8:	b1eb      	cbz	r3, 8017426 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80173ea:	6828      	ldr	r0, [r5, #0]
 80173ec:	466b      	mov	r3, sp
 80173ee:	6869      	ldr	r1, [r5, #4]
 80173f0:	c303      	stmia	r3!, {r0, r1}
 80173f2:	4668      	mov	r0, sp
 80173f4:	1d21      	adds	r1, r4, #4
 80173f6:	f7ff ff15 	bl	8017224 <_ZN8touchgfx4RectaNERKS0_>
 80173fa:	4668      	mov	r0, sp
 80173fc:	f7ff ff55 	bl	80172aa <_ZNK8touchgfx4Rect7isEmptyEv>
 8017400:	b988      	cbnz	r0, 8017426 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8017402:	f8bd 3000 	ldrh.w	r3, [sp]
 8017406:	4669      	mov	r1, sp
 8017408:	88a2      	ldrh	r2, [r4, #4]
 801740a:	4620      	mov	r0, r4
 801740c:	1a9b      	subs	r3, r3, r2
 801740e:	88e2      	ldrh	r2, [r4, #6]
 8017410:	f8ad 3000 	strh.w	r3, [sp]
 8017414:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017418:	1a9b      	subs	r3, r3, r2
 801741a:	4632      	mov	r2, r6
 801741c:	f8ad 3002 	strh.w	r3, [sp, #2]
 8017420:	6823      	ldr	r3, [r4, #0]
 8017422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017424:	4798      	blx	r3
 8017426:	69a4      	ldr	r4, [r4, #24]
 8017428:	e7db      	b.n	80173e2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 801742a:	b002      	add	sp, #8
 801742c:	bd70      	pop	{r4, r5, r6, pc}

0801742e <_ZNK8touchgfx6Slider15getIndicatorMinEv>:
 801742e:	f8b0 00ec 	ldrh.w	r0, [r0, #236]	; 0xec
 8017432:	4770      	bx	lr

08017434 <_ZNK8touchgfx6Slider15getIndicatorMaxEv>:
 8017434:	f8b0 00ee 	ldrh.w	r0, [r0, #238]	; 0xee
 8017438:	4770      	bx	lr

0801743a <_ZNK8touchgfx6Slider11getMinValueEv>:
 801743a:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 801743c:	4770      	bx	lr

0801743e <_ZNK8touchgfx6Slider11getMaxValueEv>:
 801743e:	8f00      	ldrh	r0, [r0, #56]	; 0x38
 8017440:	4770      	bx	lr

08017442 <_ZN8touchgfx6Slider8setValueEi>:
 8017442:	b570      	push	{r4, r5, r6, lr}
 8017444:	6803      	ldr	r3, [r0, #0]
 8017446:	4604      	mov	r4, r0
 8017448:	e9d3 532a 	ldrd	r5, r3, [r3, #168]	; 0xa8
 801744c:	4798      	blx	r3
 801744e:	4601      	mov	r1, r0
 8017450:	462b      	mov	r3, r5
 8017452:	4620      	mov	r0, r4
 8017454:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017458:	4718      	bx	r3

0801745a <_ZNK8touchgfx6Slider15valueToPositionEi>:
 801745a:	b538      	push	{r3, r4, r5, lr}
 801745c:	e9d0 340d 	ldrd	r3, r4, [r0, #52]	; 0x34
 8017460:	4605      	mov	r5, r0
 8017462:	428c      	cmp	r4, r1
 8017464:	bfa8      	it	ge
 8017466:	460c      	movge	r4, r1
 8017468:	429c      	cmp	r4, r3
 801746a:	bfac      	ite	ge
 801746c:	ebc3 0404 	rsbge	r4, r3, r4
 8017470:	ebc3 0403 	rsblt	r4, r3, r3
 8017474:	6803      	ldr	r3, [r0, #0]
 8017476:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801747a:	4798      	blx	r3
 801747c:	682b      	ldr	r3, [r5, #0]
 801747e:	fb00 4404 	mla	r4, r0, r4, r4
 8017482:	4628      	mov	r0, r5
 8017484:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8017488:	4798      	blx	r3
 801748a:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
 801748e:	f9b5 30ec 	ldrsh.w	r3, [r5, #236]	; 0xec
 8017492:	2a01      	cmp	r2, #1
 8017494:	fb94 f0f0 	sdiv	r0, r4, r0
 8017498:	bf08      	it	eq
 801749a:	f9b5 20ee 	ldrsheq.w	r2, [r5, #238]	; 0xee
 801749e:	4418      	add	r0, r3
 80174a0:	bf04      	itt	eq
 80174a2:	1a10      	subeq	r0, r2, r0
 80174a4:	18c0      	addeq	r0, r0, r3
 80174a6:	b200      	sxth	r0, r0
 80174a8:	bd38      	pop	{r3, r4, r5, pc}

080174aa <_ZNK8touchgfx6Slider15positionToValueEs>:
 80174aa:	b570      	push	{r4, r5, r6, lr}
 80174ac:	f9b0 30ec 	ldrsh.w	r3, [r0, #236]	; 0xec
 80174b0:	4605      	mov	r5, r0
 80174b2:	460c      	mov	r4, r1
 80174b4:	428b      	cmp	r3, r1
 80174b6:	d109      	bne.n	80174cc <_ZNK8touchgfx6Slider15positionToValueEs+0x22>
 80174b8:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80174ba:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 80174be:	2b01      	cmp	r3, #1
 80174c0:	bf01      	itttt	eq
 80174c2:	6bab      	ldreq	r3, [r5, #56]	; 0x38
 80174c4:	1a18      	subeq	r0, r3, r0
 80174c6:	6b6b      	ldreq	r3, [r5, #52]	; 0x34
 80174c8:	18c0      	addeq	r0, r0, r3
 80174ca:	bd70      	pop	{r4, r5, r6, pc}
 80174cc:	f9b0 30ee 	ldrsh.w	r3, [r0, #238]	; 0xee
 80174d0:	428b      	cmp	r3, r1
 80174d2:	d101      	bne.n	80174d8 <_ZNK8touchgfx6Slider15positionToValueEs+0x2e>
 80174d4:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80174d6:	e7f0      	b.n	80174ba <_ZNK8touchgfx6Slider15positionToValueEs+0x10>
 80174d8:	6803      	ldr	r3, [r0, #0]
 80174da:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80174de:	4798      	blx	r3
 80174e0:	682b      	ldr	r3, [r5, #0]
 80174e2:	f9b5 10ec 	ldrsh.w	r1, [r5, #236]	; 0xec
 80174e6:	4606      	mov	r6, r0
 80174e8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80174ec:	4628      	mov	r0, r5
 80174ee:	1a64      	subs	r4, r4, r1
 80174f0:	4798      	blx	r3
 80174f2:	2102      	movs	r1, #2
 80174f4:	682b      	ldr	r3, [r5, #0]
 80174f6:	fb96 f6f1 	sdiv	r6, r6, r1
 80174fa:	fb00 6404 	mla	r4, r0, r4, r6
 80174fe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8017502:	4628      	mov	r0, r5
 8017504:	4798      	blx	r3
 8017506:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8017508:	fb94 f0f0 	sdiv	r0, r4, r0
 801750c:	4418      	add	r0, r3
 801750e:	e7d4      	b.n	80174ba <_ZNK8touchgfx6Slider15positionToValueEs+0x10>

08017510 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv>:
 8017510:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 8017514:	2302      	movs	r3, #2
 8017516:	b92a      	cbnz	r2, 8017524 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0x14>
 8017518:	f9b0 009c 	ldrsh.w	r0, [r0, #156]	; 0x9c
 801751c:	fb90 f0f3 	sdiv	r0, r0, r3
 8017520:	b280      	uxth	r0, r0
 8017522:	4770      	bx	lr
 8017524:	f9b0 009e 	ldrsh.w	r0, [r0, #158]	; 0x9e
 8017528:	e7f8      	b.n	801751c <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0xc>

0801752a <_ZN8touchgfx6Slider13setValueRangeEii>:
 801752a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801752c:	428b      	cmp	r3, r1
 801752e:	b410      	push	{r4}
 8017530:	db09      	blt.n	8017546 <_ZN8touchgfx6Slider13setValueRangeEii+0x1c>
 8017532:	4293      	cmp	r3, r2
 8017534:	bfa8      	it	ge
 8017536:	4613      	movge	r3, r2
 8017538:	6804      	ldr	r4, [r0, #0]
 801753a:	f8d4 4094 	ldr.w	r4, [r4, #148]	; 0x94
 801753e:	46a4      	mov	ip, r4
 8017540:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017544:	4760      	bx	ip
 8017546:	460b      	mov	r3, r1
 8017548:	e7f6      	b.n	8017538 <_ZN8touchgfx6Slider13setValueRangeEii+0xe>

0801754a <_ZNK8touchgfx6Slider29getIndicatorPositionRangeSizeEv>:
 801754a:	f9b0 20ee 	ldrsh.w	r2, [r0, #238]	; 0xee
 801754e:	f9b0 00ec 	ldrsh.w	r0, [r0, #236]	; 0xec
 8017552:	1a10      	subs	r0, r2, r0
 8017554:	4770      	bx	lr

08017556 <_ZNK8touchgfx6Slider17getValueRangeSizeEv>:
 8017556:	e9d0 020d 	ldrd	r0, r2, [r0, #52]	; 0x34
 801755a:	1a10      	subs	r0, r2, r0
 801755c:	4770      	bx	lr
	...

08017560 <_ZN8touchgfx6Slider13setValueRangeEiii>:
 8017560:	4291      	cmp	r1, r2
 8017562:	b510      	push	{r4, lr}
 8017564:	db06      	blt.n	8017574 <_ZN8touchgfx6Slider13setValueRangeEiii+0x14>
 8017566:	4b08      	ldr	r3, [pc, #32]	; (8017588 <_ZN8touchgfx6Slider13setValueRangeEiii+0x28>)
 8017568:	f240 110d 	movw	r1, #269	; 0x10d
 801756c:	4a07      	ldr	r2, [pc, #28]	; (801758c <_ZN8touchgfx6Slider13setValueRangeEiii+0x2c>)
 801756e:	4808      	ldr	r0, [pc, #32]	; (8017590 <_ZN8touchgfx6Slider13setValueRangeEiii+0x30>)
 8017570:	f012 fd38 	bl	8029fe4 <__assert_func>
 8017574:	e9c0 120d 	strd	r1, r2, [r0, #52]	; 0x34
 8017578:	6802      	ldr	r2, [r0, #0]
 801757a:	4619      	mov	r1, r3
 801757c:	f8d2 20a4 	ldr.w	r2, [r2, #164]	; 0xa4
 8017580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017584:	4710      	bx	r2
 8017586:	bf00      	nop
 8017588:	0802d1ee 	.word	0x0802d1ee
 801758c:	0802d491 	.word	0x0802d491
 8017590:	0802d246 	.word	0x0802d246

08017594 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE>:
 8017594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017598:	790b      	ldrb	r3, [r1, #4]
 801759a:	4604      	mov	r4, r0
 801759c:	460d      	mov	r5, r1
 801759e:	b323      	cbz	r3, 80175ea <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x56>
 80175a0:	2b01      	cmp	r3, #1
 80175a2:	d135      	bne.n	8017610 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 80175a4:	6823      	ldr	r3, [r4, #0]
 80175a6:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 80175aa:	f8d3 70a8 	ldr.w	r7, [r3, #168]	; 0xa8
 80175ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80175b2:	2a00      	cmp	r2, #0
 80175b4:	d12a      	bne.n	801760c <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x78>
 80175b6:	88ee      	ldrh	r6, [r5, #6]
 80175b8:	4620      	mov	r0, r4
 80175ba:	4798      	blx	r3
 80175bc:	1a31      	subs	r1, r6, r0
 80175be:	4620      	mov	r0, r4
 80175c0:	b209      	sxth	r1, r1
 80175c2:	47b8      	blx	r7
 80175c4:	792b      	ldrb	r3, [r5, #4]
 80175c6:	2b01      	cmp	r3, #1
 80175c8:	d122      	bne.n	8017610 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 80175ca:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
 80175ce:	b1f8      	cbz	r0, 8017610 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 80175d0:	6803      	ldr	r3, [r0, #0]
 80175d2:	68db      	ldr	r3, [r3, #12]
 80175d4:	4798      	blx	r3
 80175d6:	b1d8      	cbz	r0, 8017610 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 80175d8:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
 80175dc:	4621      	mov	r1, r4
 80175de:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80175e0:	6803      	ldr	r3, [r0, #0]
 80175e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80175e6:	689b      	ldr	r3, [r3, #8]
 80175e8:	4718      	bx	r3
 80175ea:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
 80175ee:	2800      	cmp	r0, #0
 80175f0:	d0d8      	beq.n	80175a4 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 80175f2:	6803      	ldr	r3, [r0, #0]
 80175f4:	68db      	ldr	r3, [r3, #12]
 80175f6:	4798      	blx	r3
 80175f8:	2800      	cmp	r0, #0
 80175fa:	d0d3      	beq.n	80175a4 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 80175fc:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
 8017600:	4621      	mov	r1, r4
 8017602:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8017604:	6803      	ldr	r3, [r0, #0]
 8017606:	689b      	ldr	r3, [r3, #8]
 8017608:	4798      	blx	r3
 801760a:	e7cb      	b.n	80175a4 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 801760c:	892e      	ldrh	r6, [r5, #8]
 801760e:	e7d3      	b.n	80175b8 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x24>
 8017610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017614 <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE>:
 8017614:	b570      	push	{r4, r5, r6, lr}
 8017616:	6803      	ldr	r3, [r0, #0]
 8017618:	4604      	mov	r4, r0
 801761a:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 801761e:	f8d3 60a8 	ldr.w	r6, [r3, #168]	; 0xa8
 8017622:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8017626:	b942      	cbnz	r2, 801763a <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x26>
 8017628:	894d      	ldrh	r5, [r1, #10]
 801762a:	4798      	blx	r3
 801762c:	1a29      	subs	r1, r5, r0
 801762e:	4633      	mov	r3, r6
 8017630:	4620      	mov	r0, r4
 8017632:	b209      	sxth	r1, r1
 8017634:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017638:	4718      	bx	r3
 801763a:	898d      	ldrh	r5, [r1, #12]
 801763c:	e7f5      	b.n	801762a <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x16>
	...

08017640 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt>:
 8017640:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017644:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
 8017648:	4604      	mov	r4, r0
 801764a:	f8bd 6034 	ldrh.w	r6, [sp, #52]	; 0x34
 801764e:	4689      	mov	r9, r1
 8017650:	4690      	mov	r8, r2
 8017652:	461d      	mov	r5, r3
 8017654:	42b7      	cmp	r7, r6
 8017656:	d305      	bcc.n	8017664 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0x24>
 8017658:	4b26      	ldr	r3, [pc, #152]	; (80176f4 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xb4>)
 801765a:	2149      	movs	r1, #73	; 0x49
 801765c:	4a26      	ldr	r2, [pc, #152]	; (80176f8 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xb8>)
 801765e:	4827      	ldr	r0, [pc, #156]	; (80176fc <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xbc>)
 8017660:	f012 fcc0 	bl	8029fe4 <__assert_func>
 8017664:	f04f 0a00 	mov.w	sl, #0
 8017668:	b213      	sxth	r3, r2
 801766a:	fa0f fb81 	sxth.w	fp, r1
 801766e:	303c      	adds	r0, #60	; 0x3c
 8017670:	f800 ac10 	strb.w	sl, [r0, #-16]
 8017674:	461a      	mov	r2, r3
 8017676:	4659      	mov	r1, fp
 8017678:	9301      	str	r3, [sp, #4]
 801767a:	f7ec fcbf 	bl	8003ffc <_ZN8touchgfx8Drawable5setXYEss>
 801767e:	9b01      	ldr	r3, [sp, #4]
 8017680:	4659      	mov	r1, fp
 8017682:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 8017686:	461a      	mov	r2, r3
 8017688:	f7ec fcb8 	bl	8003ffc <_ZN8touchgfx8Drawable5setXYEss>
 801768c:	4652      	mov	r2, sl
 801768e:	4651      	mov	r1, sl
 8017690:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8017694:	f7ec fcb2 	bl	8003ffc <_ZN8touchgfx8Drawable5setXYEss>
 8017698:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
 801769c:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80176a0:	4620      	mov	r0, r4
 80176a2:	4489      	add	r9, r1
 80176a4:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 80176a8:	4490      	add	r8, r2
 80176aa:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
 80176ae:	4431      	add	r1, r6
 80176b0:	fa1f f989 	uxth.w	r9, r9
 80176b4:	442a      	add	r2, r5
 80176b6:	fa1f f888 	uxth.w	r8, r8
 80176ba:	b289      	uxth	r1, r1
 80176bc:	f8a4 509a 	strh.w	r5, [r4, #154]	; 0x9a
 80176c0:	b292      	uxth	r2, r2
 80176c2:	f8a4 70ec 	strh.w	r7, [r4, #236]	; 0xec
 80176c6:	4589      	cmp	r9, r1
 80176c8:	f8a4 60ee 	strh.w	r6, [r4, #238]	; 0xee
 80176cc:	bf8c      	ite	hi
 80176ce:	fa0f f189 	sxthhi.w	r1, r9
 80176d2:	b209      	sxthls	r1, r1
 80176d4:	4590      	cmp	r8, r2
 80176d6:	bf8c      	ite	hi
 80176d8:	fa0f f288 	sxthhi.w	r2, r8
 80176dc:	b212      	sxthls	r2, r2
 80176de:	f7ec fce9 	bl	80040b4 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80176e2:	6823      	ldr	r3, [r4, #0]
 80176e4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80176e6:	4620      	mov	r0, r4
 80176e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80176ec:	b003      	add	sp, #12
 80176ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176f2:	4718      	bx	r3
 80176f4:	0802d2e8 	.word	0x0802d2e8
 80176f8:	0802d532 	.word	0x0802d532
 80176fc:	0802d246 	.word	0x0802d246

08017700 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt>:
 8017700:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017704:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
 8017708:	4604      	mov	r4, r0
 801770a:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
 801770e:	4689      	mov	r9, r1
 8017710:	4690      	mov	r8, r2
 8017712:	461d      	mov	r5, r3
 8017714:	42b7      	cmp	r7, r6
 8017716:	d305      	bcc.n	8017724 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0x24>
 8017718:	4b22      	ldr	r3, [pc, #136]	; (80177a4 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xa4>)
 801771a:	2164      	movs	r1, #100	; 0x64
 801771c:	4a22      	ldr	r2, [pc, #136]	; (80177a8 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xa8>)
 801771e:	4823      	ldr	r0, [pc, #140]	; (80177ac <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xac>)
 8017720:	f012 fc60 	bl	8029fe4 <__assert_func>
 8017724:	2301      	movs	r3, #1
 8017726:	fa0f fa81 	sxth.w	sl, r1
 801772a:	fa0f fb82 	sxth.w	fp, r2
 801772e:	303c      	adds	r0, #60	; 0x3c
 8017730:	f800 3c10 	strb.w	r3, [r0, #-16]
 8017734:	4651      	mov	r1, sl
 8017736:	465a      	mov	r2, fp
 8017738:	f7ec fc60 	bl	8003ffc <_ZN8touchgfx8Drawable5setXYEss>
 801773c:	465a      	mov	r2, fp
 801773e:	4651      	mov	r1, sl
 8017740:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 8017744:	f7ec fc5a 	bl	8003ffc <_ZN8touchgfx8Drawable5setXYEss>
 8017748:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
 801774c:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8017750:	4620      	mov	r0, r4
 8017752:	4489      	add	r9, r1
 8017754:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 8017758:	4490      	add	r8, r2
 801775a:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
 801775e:	4429      	add	r1, r5
 8017760:	fa1f f989 	uxth.w	r9, r9
 8017764:	4432      	add	r2, r6
 8017766:	fa1f f888 	uxth.w	r8, r8
 801776a:	b289      	uxth	r1, r1
 801776c:	f8a4 5098 	strh.w	r5, [r4, #152]	; 0x98
 8017770:	b292      	uxth	r2, r2
 8017772:	f8a4 70ec 	strh.w	r7, [r4, #236]	; 0xec
 8017776:	4589      	cmp	r9, r1
 8017778:	f8a4 60ee 	strh.w	r6, [r4, #238]	; 0xee
 801777c:	bf8c      	ite	hi
 801777e:	fa0f f189 	sxthhi.w	r1, r9
 8017782:	b209      	sxthls	r1, r1
 8017784:	4590      	cmp	r8, r2
 8017786:	bf8c      	ite	hi
 8017788:	fa0f f288 	sxthhi.w	r2, r8
 801778c:	b212      	sxthls	r2, r2
 801778e:	f7ec fc91 	bl	80040b4 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8017792:	6823      	ldr	r3, [r4, #0]
 8017794:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8017796:	4620      	mov	r0, r4
 8017798:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801779c:	b001      	add	sp, #4
 801779e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177a2:	4718      	bx	r3
 80177a4:	0802d276 	.word	0x0802d276
 80177a8:	0802d4cd 	.word	0x0802d4cd
 80177ac:	0802d246 	.word	0x0802d246

080177b0 <_ZN8touchgfx6Slider23updateIndicatorPositionEs>:
 80177b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80177b4:	f9b0 80ec 	ldrsh.w	r8, [r0, #236]	; 0xec
 80177b8:	4604      	mov	r4, r0
 80177ba:	3094      	adds	r0, #148	; 0x94
 80177bc:	4588      	cmp	r8, r1
 80177be:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80177c2:	f104 06c0 	add.w	r6, r4, #192	; 0xc0
 80177c6:	bfb8      	it	lt
 80177c8:	4688      	movlt	r8, r1
 80177ca:	f9b0 105a 	ldrsh.w	r1, [r0, #90]	; 0x5a
 80177ce:	4588      	cmp	r8, r1
 80177d0:	bfa8      	it	ge
 80177d2:	4688      	movge	r8, r1
 80177d4:	fa1f f788 	uxth.w	r7, r8
 80177d8:	2b00      	cmp	r3, #0
 80177da:	d12f      	bne.n	801783c <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x8c>
 80177dc:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	; 0x9a
 80177e0:	4641      	mov	r1, r8
 80177e2:	f7ec fcb4 	bl	800414e <_ZN8touchgfx8Drawable6moveToEss>
 80177e6:	4630      	mov	r0, r6
 80177e8:	f004 fa58 	bl	801bc9c <_ZNK8touchgfx8Drawable10invalidateEv>
 80177ec:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	; 0xc4
 80177f0:	6823      	ldr	r3, [r4, #0]
 80177f2:	4620      	mov	r0, r4
 80177f4:	1abf      	subs	r7, r7, r2
 80177f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80177fa:	b2bf      	uxth	r7, r7
 80177fc:	4798      	blx	r3
 80177fe:	4407      	add	r7, r0
 8017800:	f8a4 70c8 	strh.w	r7, [r4, #200]	; 0xc8
 8017804:	4630      	mov	r0, r6
 8017806:	f004 fa49 	bl	801bc9c <_ZNK8touchgfx8Drawable10invalidateEv>
 801780a:	6823      	ldr	r3, [r4, #0]
 801780c:	4641      	mov	r1, r8
 801780e:	4620      	mov	r0, r4
 8017810:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8017814:	4798      	blx	r3
 8017816:	6320      	str	r0, [r4, #48]	; 0x30
 8017818:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
 801781c:	2800      	cmp	r0, #0
 801781e:	d03d      	beq.n	801789c <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xec>
 8017820:	6803      	ldr	r3, [r0, #0]
 8017822:	68db      	ldr	r3, [r3, #12]
 8017824:	4798      	blx	r3
 8017826:	2800      	cmp	r0, #0
 8017828:	d038      	beq.n	801789c <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xec>
 801782a:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
 801782e:	4621      	mov	r1, r4
 8017830:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8017832:	6803      	ldr	r3, [r0, #0]
 8017834:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017838:	689b      	ldr	r3, [r3, #8]
 801783a:	4718      	bx	r3
 801783c:	4642      	mov	r2, r8
 801783e:	f9b4 1098 	ldrsh.w	r1, [r4, #152]	; 0x98
 8017842:	f7ec fc84 	bl	800414e <_ZN8touchgfx8Drawable6moveToEss>
 8017846:	4630      	mov	r0, r6
 8017848:	f004 fa28 	bl	801bc9c <_ZNK8touchgfx8Drawable10invalidateEv>
 801784c:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
 8017850:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
 8017854:	6823      	ldr	r3, [r4, #0]
 8017856:	4405      	add	r5, r0
 8017858:	4620      	mov	r0, r4
 801785a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801785e:	b2ad      	uxth	r5, r5
 8017860:	4798      	blx	r3
 8017862:	6823      	ldr	r3, [r4, #0]
 8017864:	1bed      	subs	r5, r5, r7
 8017866:	f9b4 a0c4 	ldrsh.w	sl, [r4, #196]	; 0xc4
 801786a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801786e:	1a2d      	subs	r5, r5, r0
 8017870:	4620      	mov	r0, r4
 8017872:	4798      	blx	r3
 8017874:	4438      	add	r0, r7
 8017876:	b2ad      	uxth	r5, r5
 8017878:	f9b4 90c8 	ldrsh.w	r9, [r4, #200]	; 0xc8
 801787c:	b202      	sxth	r2, r0
 801787e:	4651      	mov	r1, sl
 8017880:	4630      	mov	r0, r6
 8017882:	f7ec fbbb 	bl	8003ffc <_ZN8touchgfx8Drawable5setXYEss>
 8017886:	4630      	mov	r0, r6
 8017888:	b22a      	sxth	r2, r5
 801788a:	4649      	mov	r1, r9
 801788c:	f7ec fc12 	bl	80040b4 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8017890:	f8b4 0072 	ldrh.w	r0, [r4, #114]	; 0x72
 8017894:	1a2d      	subs	r5, r5, r0
 8017896:	f8a4 506e 	strh.w	r5, [r4, #110]	; 0x6e
 801789a:	e7b3      	b.n	8017804 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x54>
 801789c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080178a0 <_ZN8touchgfx6SliderC1Ev>:
 80178a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178a4:	4604      	mov	r4, r0
 80178a6:	2500      	movs	r5, #0
 80178a8:	f7ec fae8 	bl	8003e7c <_ZN8touchgfx8DrawableC1Ev>
 80178ac:	ae02      	add	r6, sp, #8
 80178ae:	4b28      	ldr	r3, [pc, #160]	; (8017950 <_ZN8touchgfx6SliderC1Ev+0xb0>)
 80178b0:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80178b4:	f04f 0b01 	mov.w	fp, #1
 80178b8:	f104 093c 	add.w	r9, r4, #60	; 0x3c
 80178bc:	f104 0a68 	add.w	sl, r4, #104	; 0x68
 80178c0:	6023      	str	r3, [r4, #0]
 80178c2:	f826 7d04 	strh.w	r7, [r6, #-4]!
 80178c6:	4648      	mov	r0, r9
 80178c8:	4631      	mov	r1, r6
 80178ca:	62a5      	str	r5, [r4, #40]	; 0x28
 80178cc:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
 80178d0:	f104 0894 	add.w	r8, r4, #148	; 0x94
 80178d4:	f8c4 b038 	str.w	fp, [r4, #56]	; 0x38
 80178d8:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
 80178dc:	f7ee f876 	bl	80059cc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80178e0:	4631      	mov	r1, r6
 80178e2:	4650      	mov	r0, sl
 80178e4:	f8ad 7004 	strh.w	r7, [sp, #4]
 80178e8:	f7ee f870 	bl	80059cc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80178ec:	4631      	mov	r1, r6
 80178ee:	f104 06c0 	add.w	r6, r4, #192	; 0xc0
 80178f2:	4640      	mov	r0, r8
 80178f4:	f8ad 7004 	strh.w	r7, [sp, #4]
 80178f8:	f7ee f868 	bl	80059cc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80178fc:	4630      	mov	r0, r6
 80178fe:	f7ec fabd 	bl	8003e7c <_ZN8touchgfx8DrawableC1Ev>
 8017902:	4b14      	ldr	r3, [pc, #80]	; (8017954 <_ZN8touchgfx6SliderC1Ev+0xb4>)
 8017904:	4651      	mov	r1, sl
 8017906:	4630      	mov	r0, r6
 8017908:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
 801790c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8017910:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
 8017914:	f884 b024 	strb.w	fp, [r4, #36]	; 0x24
 8017918:	e9c4 353b 	strd	r3, r5, [r4, #236]	; 0xec
 801791c:	e9c4 553d 	strd	r5, r5, [r4, #244]	; 0xf4
 8017920:	f7ff fb3e 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8017924:	4649      	mov	r1, r9
 8017926:	4620      	mov	r0, r4
 8017928:	f7ff fb3a 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801792c:	4631      	mov	r1, r6
 801792e:	4620      	mov	r0, r4
 8017930:	f7ff fb36 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8017934:	4641      	mov	r1, r8
 8017936:	4620      	mov	r0, r4
 8017938:	f7ff fb32 	bl	8016fa0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801793c:	4620      	mov	r0, r4
 801793e:	2264      	movs	r2, #100	; 0x64
 8017940:	4629      	mov	r1, r5
 8017942:	f7ff fdf2 	bl	801752a <_ZN8touchgfx6Slider13setValueRangeEii>
 8017946:	4620      	mov	r0, r4
 8017948:	b003      	add	sp, #12
 801794a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801794e:	bf00      	nop
 8017950:	0802d364 	.word	0x0802d364
 8017954:	0802d050 	.word	0x0802d050

08017958 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>:
 8017958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801795c:	4615      	mov	r5, r2
 801795e:	4604      	mov	r4, r0
 8017960:	4608      	mov	r0, r1
 8017962:	460e      	mov	r6, r1
 8017964:	461f      	mov	r7, r3
 8017966:	f006 facb 	bl	801df00 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801796a:	4680      	mov	r8, r0
 801796c:	4628      	mov	r0, r5
 801796e:	f006 fac7 	bl	801df00 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017972:	4580      	cmp	r8, r0
 8017974:	d005      	beq.n	8017982 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x2a>
 8017976:	4b14      	ldr	r3, [pc, #80]	; (80179c8 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x70>)
 8017978:	213a      	movs	r1, #58	; 0x3a
 801797a:	4a14      	ldr	r2, [pc, #80]	; (80179cc <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x74>)
 801797c:	4814      	ldr	r0, [pc, #80]	; (80179d0 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x78>)
 801797e:	f012 fb31 	bl	8029fe4 <__assert_func>
 8017982:	4630      	mov	r0, r6
 8017984:	f006 faf6 	bl	801df74 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017988:	4680      	mov	r8, r0
 801798a:	4628      	mov	r0, r5
 801798c:	f006 faf2 	bl	801df74 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017990:	4580      	cmp	r8, r0
 8017992:	d1f0      	bne.n	8017976 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x1e>
 8017994:	4631      	mov	r1, r6
 8017996:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 801799a:	f001 fca6 	bl	80192ea <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801799e:	4629      	mov	r1, r5
 80179a0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80179a4:	f001 fca1 	bl	80192ea <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80179a8:	4639      	mov	r1, r7
 80179aa:	f104 0094 	add.w	r0, r4, #148	; 0x94
 80179ae:	f001 fc9c 	bl	80192ea <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80179b2:	f9b4 2072 	ldrsh.w	r2, [r4, #114]	; 0x72
 80179b6:	f9b4 1070 	ldrsh.w	r1, [r4, #112]	; 0x70
 80179ba:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 80179be:	f7ec fb79 	bl	80040b4 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80179c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179c6:	bf00      	nop
 80179c8:	0802d10f 	.word	0x0802d10f
 80179cc:	0802d424 	.word	0x0802d424
 80179d0:	0802d246 	.word	0x0802d246

080179d4 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 80179d4:	4770      	bx	lr

080179d6 <_ZN8touchgfx3HAL10FlushCacheEv>:
 80179d6:	4770      	bx	lr

080179d8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80179d8:	6803      	ldr	r3, [r0, #0]
 80179da:	b513      	push	{r0, r1, r4, lr}
 80179dc:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 80179e0:	2300      	movs	r3, #0
 80179e2:	e9cd 3300 	strd	r3, r3, [sp]
 80179e6:	466b      	mov	r3, sp
 80179e8:	47a0      	blx	r4
 80179ea:	b002      	add	sp, #8
 80179ec:	bd10      	pop	{r4, pc}

080179ee <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 80179ee:	2301      	movs	r3, #1
 80179f0:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80179f4:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80179f8:	4770      	bx	lr

080179fa <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80179fa:	2301      	movs	r3, #1
 80179fc:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8017a00:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8017a04:	4770      	bx	lr

08017a06 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8017a06:	6843      	ldr	r3, [r0, #4]
 8017a08:	2201      	movs	r2, #1
 8017a0a:	725a      	strb	r2, [r3, #9]
 8017a0c:	6840      	ldr	r0, [r0, #4]
 8017a0e:	6803      	ldr	r3, [r0, #0]
 8017a10:	691b      	ldr	r3, [r3, #16]
 8017a12:	4718      	bx	r3

08017a14 <_ZN8touchgfx3HAL8flushDMAEv>:
 8017a14:	6840      	ldr	r0, [r0, #4]
 8017a16:	6803      	ldr	r3, [r0, #0]
 8017a18:	689b      	ldr	r3, [r3, #8]
 8017a1a:	4718      	bx	r3

08017a1c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8017a1c:	b530      	push	{r4, r5, lr}
 8017a1e:	b08b      	sub	sp, #44	; 0x2c
 8017a20:	6804      	ldr	r4, [r0, #0]
 8017a22:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8017a26:	9509      	str	r5, [sp, #36]	; 0x24
 8017a28:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8017a2c:	9508      	str	r5, [sp, #32]
 8017a2e:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8017a32:	9507      	str	r5, [sp, #28]
 8017a34:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8017a38:	9506      	str	r5, [sp, #24]
 8017a3a:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8017a3e:	9505      	str	r5, [sp, #20]
 8017a40:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8017a44:	9504      	str	r5, [sp, #16]
 8017a46:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8017a4a:	9503      	str	r5, [sp, #12]
 8017a4c:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8017a50:	9502      	str	r5, [sp, #8]
 8017a52:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8017a56:	e9cd 3500 	strd	r3, r5, [sp]
 8017a5a:	4613      	mov	r3, r2
 8017a5c:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8017a5e:	2200      	movs	r2, #0
 8017a60:	47a0      	blx	r4
 8017a62:	b00b      	add	sp, #44	; 0x2c
 8017a64:	bd30      	pop	{r4, r5, pc}
	...

08017a68 <_ZN8touchgfx3HAL10beginFrameEv>:
 8017a68:	4b04      	ldr	r3, [pc, #16]	; (8017a7c <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8017a6a:	781b      	ldrb	r3, [r3, #0]
 8017a6c:	b123      	cbz	r3, 8017a78 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8017a6e:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8017a72:	f080 0001 	eor.w	r0, r0, #1
 8017a76:	4770      	bx	lr
 8017a78:	2001      	movs	r0, #1
 8017a7a:	4770      	bx	lr
 8017a7c:	2400b5ce 	.word	0x2400b5ce

08017a80 <_ZN8touchgfx3HAL8endFrameEv>:
 8017a80:	b510      	push	{r4, lr}
 8017a82:	4604      	mov	r4, r0
 8017a84:	6840      	ldr	r0, [r0, #4]
 8017a86:	6803      	ldr	r3, [r0, #0]
 8017a88:	689b      	ldr	r3, [r3, #8]
 8017a8a:	4798      	blx	r3
 8017a8c:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8017a90:	b113      	cbz	r3, 8017a98 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8017a92:	2301      	movs	r3, #1
 8017a94:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8017a98:	bd10      	pop	{r4, pc}

08017a9a <_ZN8touchgfx3HAL10initializeEv>:
 8017a9a:	b510      	push	{r4, lr}
 8017a9c:	4604      	mov	r4, r0
 8017a9e:	f7ea fa15 	bl	8001ecc <_ZN8touchgfx10OSWrappers10initializeEv>
 8017aa2:	6860      	ldr	r0, [r4, #4]
 8017aa4:	6803      	ldr	r3, [r0, #0]
 8017aa6:	68db      	ldr	r3, [r3, #12]
 8017aa8:	4798      	blx	r3
 8017aaa:	68e0      	ldr	r0, [r4, #12]
 8017aac:	6803      	ldr	r3, [r0, #0]
 8017aae:	689b      	ldr	r3, [r3, #8]
 8017ab0:	4798      	blx	r3
 8017ab2:	6823      	ldr	r3, [r4, #0]
 8017ab4:	4620      	mov	r0, r4
 8017ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017abc:	4718      	bx	r3

08017abe <_ZN8touchgfx3HAL9taskEntryEv>:
 8017abe:	b508      	push	{r3, lr}
 8017ac0:	6803      	ldr	r3, [r0, #0]
 8017ac2:	4604      	mov	r4, r0
 8017ac4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017ac6:	4798      	blx	r3
 8017ac8:	6823      	ldr	r3, [r4, #0]
 8017aca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017acc:	4620      	mov	r0, r4
 8017ace:	4798      	blx	r3
 8017ad0:	f7ea fa72 	bl	8001fb8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8017ad4:	6823      	ldr	r3, [r4, #0]
 8017ad6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017ad8:	e7f8      	b.n	8017acc <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

08017adc <_ZN8touchgfx3HAL4tickEv>:
 8017adc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8017ade:	6803      	ldr	r3, [r0, #0]
 8017ae0:	4604      	mov	r4, r0
 8017ae2:	4d5c      	ldr	r5, [pc, #368]	; (8017c54 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8017ae4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8017ae8:	4798      	blx	r3
 8017aea:	2800      	cmp	r0, #0
 8017aec:	f000 8097 	beq.w	8017c1e <_ZN8touchgfx3HAL4tickEv+0x142>
 8017af0:	2001      	movs	r0, #1
 8017af2:	2600      	movs	r6, #0
 8017af4:	f7e9 ff28 	bl	8001948 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8017af8:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8017afc:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8017b00:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8017b04:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8017b08:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8017b0c:	b133      	cbz	r3, 8017b1c <_ZN8touchgfx3HAL4tickEv+0x40>
 8017b0e:	6823      	ldr	r3, [r4, #0]
 8017b10:	4620      	mov	r0, r4
 8017b12:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8017b16:	4798      	blx	r3
 8017b18:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8017b1c:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8017b20:	2601      	movs	r6, #1
 8017b22:	6862      	ldr	r2, [r4, #4]
 8017b24:	f083 0301 	eor.w	r3, r3, #1
 8017b28:	702e      	strb	r6, [r5, #0]
 8017b2a:	7253      	strb	r3, [r2, #9]
 8017b2c:	f003 f8ec 	bl	801ad08 <_ZN8touchgfx11Application11getInstanceEv>
 8017b30:	6803      	ldr	r3, [r0, #0]
 8017b32:	4631      	mov	r1, r6
 8017b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017b36:	4798      	blx	r3
 8017b38:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8017b3c:	b90b      	cbnz	r3, 8017b42 <_ZN8touchgfx3HAL4tickEv+0x66>
 8017b3e:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8017b42:	f003 f8e1 	bl	801ad08 <_ZN8touchgfx11Application11getInstanceEv>
 8017b46:	6803      	ldr	r3, [r0, #0]
 8017b48:	695b      	ldr	r3, [r3, #20]
 8017b4a:	4798      	blx	r3
 8017b4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017b4e:	6803      	ldr	r3, [r0, #0]
 8017b50:	691b      	ldr	r3, [r3, #16]
 8017b52:	4798      	blx	r3
 8017b54:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8017b58:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8017b5c:	3b01      	subs	r3, #1
 8017b5e:	b2db      	uxtb	r3, r3
 8017b60:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8017b64:	b10a      	cbz	r2, 8017b6a <_ZN8touchgfx3HAL4tickEv+0x8e>
 8017b66:	2b00      	cmp	r3, #0
 8017b68:	d1eb      	bne.n	8017b42 <_ZN8touchgfx3HAL4tickEv+0x66>
 8017b6a:	4a3b      	ldr	r2, [pc, #236]	; (8017c58 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8017b6c:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8017b70:	7813      	ldrb	r3, [r2, #0]
 8017b72:	3301      	adds	r3, #1
 8017b74:	b25b      	sxtb	r3, r3
 8017b76:	4299      	cmp	r1, r3
 8017b78:	7013      	strb	r3, [r2, #0]
 8017b7a:	dc10      	bgt.n	8017b9e <_ZN8touchgfx3HAL4tickEv+0xc2>
 8017b7c:	2300      	movs	r3, #0
 8017b7e:	68e0      	ldr	r0, [r4, #12]
 8017b80:	a902      	add	r1, sp, #8
 8017b82:	7013      	strb	r3, [r2, #0]
 8017b84:	aa03      	add	r2, sp, #12
 8017b86:	6803      	ldr	r3, [r0, #0]
 8017b88:	68db      	ldr	r3, [r3, #12]
 8017b8a:	4798      	blx	r3
 8017b8c:	6823      	ldr	r3, [r4, #0]
 8017b8e:	2800      	cmp	r0, #0
 8017b90:	d051      	beq.n	8017c36 <_ZN8touchgfx3HAL4tickEv+0x15a>
 8017b92:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8017b96:	4620      	mov	r0, r4
 8017b98:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8017b9c:	4798      	blx	r3
 8017b9e:	2300      	movs	r3, #0
 8017ba0:	6960      	ldr	r0, [r4, #20]
 8017ba2:	f88d 3007 	strb.w	r3, [sp, #7]
 8017ba6:	b158      	cbz	r0, 8017bc0 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8017ba8:	6803      	ldr	r3, [r0, #0]
 8017baa:	f10d 0107 	add.w	r1, sp, #7
 8017bae:	68db      	ldr	r3, [r3, #12]
 8017bb0:	4798      	blx	r3
 8017bb2:	b128      	cbz	r0, 8017bc0 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8017bb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017bb6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8017bba:	6803      	ldr	r3, [r0, #0]
 8017bbc:	68db      	ldr	r3, [r3, #12]
 8017bbe:	4798      	blx	r3
 8017bc0:	f104 001c 	add.w	r0, r4, #28
 8017bc4:	f012 f926 	bl	8029e14 <_ZN8touchgfx8Gestures4tickEv>
 8017bc8:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8017bcc:	b30b      	cbz	r3, 8017c12 <_ZN8touchgfx3HAL4tickEv+0x136>
 8017bce:	6920      	ldr	r0, [r4, #16]
 8017bd0:	6803      	ldr	r3, [r0, #0]
 8017bd2:	691b      	ldr	r3, [r3, #16]
 8017bd4:	4798      	blx	r3
 8017bd6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017bd8:	4606      	mov	r6, r0
 8017bda:	b903      	cbnz	r3, 8017bde <_ZN8touchgfx3HAL4tickEv+0x102>
 8017bdc:	6720      	str	r0, [r4, #112]	; 0x70
 8017bde:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017be0:	4a1e      	ldr	r2, [pc, #120]	; (8017c5c <_ZN8touchgfx3HAL4tickEv+0x180>)
 8017be2:	1af3      	subs	r3, r6, r3
 8017be4:	4293      	cmp	r3, r2
 8017be6:	d914      	bls.n	8017c12 <_ZN8touchgfx3HAL4tickEv+0x136>
 8017be8:	6920      	ldr	r0, [r4, #16]
 8017bea:	6803      	ldr	r3, [r0, #0]
 8017bec:	699b      	ldr	r3, [r3, #24]
 8017bee:	4798      	blx	r3
 8017bf0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8017bf2:	2264      	movs	r2, #100	; 0x64
 8017bf4:	1af3      	subs	r3, r6, r3
 8017bf6:	fbb3 f3f2 	udiv	r3, r3, r2
 8017bfa:	fbb0 f0f3 	udiv	r0, r0, r3
 8017bfe:	2800      	cmp	r0, #0
 8017c00:	dc1e      	bgt.n	8017c40 <_ZN8touchgfx3HAL4tickEv+0x164>
 8017c02:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8017c06:	6920      	ldr	r0, [r4, #16]
 8017c08:	2100      	movs	r1, #0
 8017c0a:	6803      	ldr	r3, [r0, #0]
 8017c0c:	69db      	ldr	r3, [r3, #28]
 8017c0e:	4798      	blx	r3
 8017c10:	6726      	str	r6, [r4, #112]	; 0x70
 8017c12:	f003 f879 	bl	801ad08 <_ZN8touchgfx11Application11getInstanceEv>
 8017c16:	6803      	ldr	r3, [r0, #0]
 8017c18:	2100      	movs	r1, #0
 8017c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017c1c:	4798      	blx	r3
 8017c1e:	6823      	ldr	r3, [r4, #0]
 8017c20:	4620      	mov	r0, r4
 8017c22:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8017c26:	4798      	blx	r3
 8017c28:	2001      	movs	r0, #1
 8017c2a:	f7e9 fea9 	bl	8001980 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8017c2e:	2300      	movs	r3, #0
 8017c30:	702b      	strb	r3, [r5, #0]
 8017c32:	b004      	add	sp, #16
 8017c34:	bd70      	pop	{r4, r5, r6, pc}
 8017c36:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8017c3a:	4620      	mov	r0, r4
 8017c3c:	4798      	blx	r3
 8017c3e:	e7ae      	b.n	8017b9e <_ZN8touchgfx3HAL4tickEv+0xc2>
 8017c40:	2863      	cmp	r0, #99	; 0x63
 8017c42:	bfcb      	itete	gt
 8017c44:	2300      	movgt	r3, #0
 8017c46:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8017c4a:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8017c4e:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8017c52:	e7d8      	b.n	8017c06 <_ZN8touchgfx3HAL4tickEv+0x12a>
 8017c54:	2400b5d4 	.word	0x2400b5d4
 8017c58:	2400b5d5 	.word	0x2400b5d5
 8017c5c:	05f5e100 	.word	0x05f5e100

08017c60 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8017c60:	f7ea b976 	b.w	8001f50 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08017c64 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8017c64:	6581      	str	r1, [r0, #88]	; 0x58
 8017c66:	301c      	adds	r0, #28
 8017c68:	f012 b8d2 	b.w	8029e10 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08017c6c <_ZN8touchgfx3HAL5touchEll>:
 8017c6c:	b530      	push	{r4, r5, lr}
 8017c6e:	b087      	sub	sp, #28
 8017c70:	4604      	mov	r4, r0
 8017c72:	a804      	add	r0, sp, #16
 8017c74:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8017c78:	f002 fe06 	bl	801a888 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8017c7c:	9b04      	ldr	r3, [sp, #16]
 8017c7e:	a906      	add	r1, sp, #24
 8017c80:	a803      	add	r0, sp, #12
 8017c82:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017c86:	9b05      	ldr	r3, [sp, #20]
 8017c88:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8017c8c:	f002 fe4e 	bl	801a92c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8017c90:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8017c94:	f104 001c 	add.w	r0, r4, #28
 8017c98:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8017c9c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8017ca0:	b189      	cbz	r1, 8017cc6 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8017ca2:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8017ca6:	9300      	str	r3, [sp, #0]
 8017ca8:	4613      	mov	r3, r2
 8017caa:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8017cae:	462a      	mov	r2, r5
 8017cb0:	f012 f8be 	bl	8029e30 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8017cb4:	b128      	cbz	r0, 8017cc2 <_ZN8touchgfx3HAL5touchEll+0x56>
 8017cb6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8017cba:	65e3      	str	r3, [r4, #92]	; 0x5c
 8017cbc:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8017cc0:	6623      	str	r3, [r4, #96]	; 0x60
 8017cc2:	b007      	add	sp, #28
 8017cc4:	bd30      	pop	{r4, r5, pc}
 8017cc6:	f012 f8f7 	bl	8029eb8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8017cca:	2301      	movs	r3, #1
 8017ccc:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8017cd0:	e7f1      	b.n	8017cb6 <_ZN8touchgfx3HAL5touchEll+0x4a>

08017cd2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8017cd2:	b510      	push	{r4, lr}
 8017cd4:	2b00      	cmp	r3, #0
 8017cd6:	d046      	beq.n	8017d66 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8017cd8:	ea81 0002 	eor.w	r0, r1, r2
 8017cdc:	07c4      	lsls	r4, r0, #31
 8017cde:	d508      	bpl.n	8017cf2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8017ce0:	440b      	add	r3, r1
 8017ce2:	3a01      	subs	r2, #1
 8017ce4:	428b      	cmp	r3, r1
 8017ce6:	d93e      	bls.n	8017d66 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8017ce8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8017cec:	f801 0b01 	strb.w	r0, [r1], #1
 8017cf0:	e7f8      	b.n	8017ce4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8017cf2:	07d0      	lsls	r0, r2, #31
 8017cf4:	bf42      	ittt	mi
 8017cf6:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8017cfa:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8017cfe:	f801 0b01 	strbmi.w	r0, [r1], #1
 8017d02:	2b01      	cmp	r3, #1
 8017d04:	d911      	bls.n	8017d2a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8017d06:	ea81 0402 	eor.w	r4, r1, r2
 8017d0a:	4610      	mov	r0, r2
 8017d0c:	07a4      	lsls	r4, r4, #30
 8017d0e:	d022      	beq.n	8017d56 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8017d10:	f023 0401 	bic.w	r4, r3, #1
 8017d14:	440c      	add	r4, r1
 8017d16:	428c      	cmp	r4, r1
 8017d18:	4602      	mov	r2, r0
 8017d1a:	d904      	bls.n	8017d26 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8017d1c:	8812      	ldrh	r2, [r2, #0]
 8017d1e:	3002      	adds	r0, #2
 8017d20:	f821 2b02 	strh.w	r2, [r1], #2
 8017d24:	e7f7      	b.n	8017d16 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8017d26:	f003 0301 	and.w	r3, r3, #1
 8017d2a:	f023 0003 	bic.w	r0, r3, #3
 8017d2e:	4408      	add	r0, r1
 8017d30:	4288      	cmp	r0, r1
 8017d32:	4614      	mov	r4, r2
 8017d34:	d904      	bls.n	8017d40 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8017d36:	6824      	ldr	r4, [r4, #0]
 8017d38:	3204      	adds	r2, #4
 8017d3a:	f841 4b04 	str.w	r4, [r1], #4
 8017d3e:	e7f7      	b.n	8017d30 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8017d40:	f003 0303 	and.w	r3, r3, #3
 8017d44:	3a01      	subs	r2, #1
 8017d46:	440b      	add	r3, r1
 8017d48:	428b      	cmp	r3, r1
 8017d4a:	d90c      	bls.n	8017d66 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8017d4c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8017d50:	f801 0b01 	strb.w	r0, [r1], #1
 8017d54:	e7f8      	b.n	8017d48 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8017d56:	0790      	lsls	r0, r2, #30
 8017d58:	d0e7      	beq.n	8017d2a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8017d5a:	f832 0b02 	ldrh.w	r0, [r2], #2
 8017d5e:	3b02      	subs	r3, #2
 8017d60:	f821 0b02 	strh.w	r0, [r1], #2
 8017d64:	e7e1      	b.n	8017d2a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8017d66:	2001      	movs	r0, #1
 8017d68:	bd10      	pop	{r4, pc}

08017d6a <_ZN8touchgfx3HAL7noTouchEv>:
 8017d6a:	b510      	push	{r4, lr}
 8017d6c:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8017d70:	4604      	mov	r4, r0
 8017d72:	b153      	cbz	r3, 8017d8a <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8017d74:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8017d78:	2101      	movs	r1, #1
 8017d7a:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8017d7e:	301c      	adds	r0, #28
 8017d80:	f012 f89a 	bl	8029eb8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8017d84:	2300      	movs	r3, #0
 8017d86:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8017d8a:	bd10      	pop	{r4, pc}

08017d8c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8017d8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017d90:	4604      	mov	r4, r0
 8017d92:	6980      	ldr	r0, [r0, #24]
 8017d94:	b085      	sub	sp, #20
 8017d96:	460f      	mov	r7, r1
 8017d98:	4690      	mov	r8, r2
 8017d9a:	4699      	mov	r9, r3
 8017d9c:	b930      	cbnz	r0, 8017dac <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 8017d9e:	4b1c      	ldr	r3, [pc, #112]	; (8017e10 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 8017da0:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8017da4:	4a1b      	ldr	r2, [pc, #108]	; (8017e14 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8017da6:	481c      	ldr	r0, [pc, #112]	; (8017e18 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 8017da8:	f012 f91c 	bl	8029fe4 <__assert_func>
 8017dac:	ad04      	add	r5, sp, #16
 8017dae:	2600      	movs	r6, #0
 8017db0:	f845 6d04 	str.w	r6, [r5, #-4]!
 8017db4:	6806      	ldr	r6, [r0, #0]
 8017db6:	9501      	str	r5, [sp, #4]
 8017db8:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8017dbc:	9500      	str	r5, [sp, #0]
 8017dbe:	6835      	ldr	r5, [r6, #0]
 8017dc0:	47a8      	blx	r5
 8017dc2:	4d16      	ldr	r5, [pc, #88]	; (8017e1c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8017dc4:	4606      	mov	r6, r0
 8017dc6:	f8a5 9000 	strh.w	r9, [r5]
 8017dca:	f7ec fa0d 	bl	80041e8 <_ZN8touchgfx3HAL3lcdEv>
 8017dce:	6803      	ldr	r3, [r0, #0]
 8017dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017dd2:	4798      	blx	r3
 8017dd4:	2801      	cmp	r0, #1
 8017dd6:	d012      	beq.n	8017dfe <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 8017dd8:	d306      	bcc.n	8017de8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 8017dda:	280d      	cmp	r0, #13
 8017ddc:	d80b      	bhi.n	8017df6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8017dde:	4b10      	ldr	r3, [pc, #64]	; (8017e20 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8017de0:	f240 1167 	movw	r1, #359	; 0x167
 8017de4:	4a0b      	ldr	r2, [pc, #44]	; (8017e14 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8017de6:	e7de      	b.n	8017da6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8017de8:	882b      	ldrh	r3, [r5, #0]
 8017dea:	fb08 7203 	mla	r2, r8, r3, r7
 8017dee:	9b03      	ldr	r3, [sp, #12]
 8017df0:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8017df4:	63e3      	str	r3, [r4, #60]	; 0x3c
 8017df6:	4630      	mov	r0, r6
 8017df8:	b005      	add	sp, #20
 8017dfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017dfe:	882a      	ldrh	r2, [r5, #0]
 8017e00:	9b03      	ldr	r3, [sp, #12]
 8017e02:	fb08 7202 	mla	r2, r8, r2, r7
 8017e06:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017e0a:	1a9a      	subs	r2, r3, r2
 8017e0c:	63e2      	str	r2, [r4, #60]	; 0x3c
 8017e0e:	e7f2      	b.n	8017df6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8017e10:	0802d706 	.word	0x0802d706
 8017e14:	0802da97 	.word	0x0802da97
 8017e18:	0802d74b 	.word	0x0802d74b
 8017e1c:	2400b5ca 	.word	0x2400b5ca
 8017e20:	0802d771 	.word	0x0802d771

08017e24 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8017e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017e26:	b08b      	sub	sp, #44	; 0x2c
 8017e28:	4617      	mov	r7, r2
 8017e2a:	4604      	mov	r4, r0
 8017e2c:	460e      	mov	r6, r1
 8017e2e:	461d      	mov	r5, r3
 8017e30:	f7ec f9da 	bl	80041e8 <_ZN8touchgfx3HAL3lcdEv>
 8017e34:	6803      	ldr	r3, [r0, #0]
 8017e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e38:	4798      	blx	r3
 8017e3a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8017e3e:	9007      	str	r0, [sp, #28]
 8017e40:	4631      	mov	r1, r6
 8017e42:	6822      	ldr	r2, [r4, #0]
 8017e44:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8017e48:	4b0c      	ldr	r3, [pc, #48]	; (8017e7c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8017e4a:	4620      	mov	r0, r4
 8017e4c:	881b      	ldrh	r3, [r3, #0]
 8017e4e:	9306      	str	r3, [sp, #24]
 8017e50:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8017e54:	9305      	str	r3, [sp, #20]
 8017e56:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8017e5a:	9304      	str	r3, [sp, #16]
 8017e5c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017e60:	9303      	str	r3, [sp, #12]
 8017e62:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8017e66:	9302      	str	r3, [sp, #8]
 8017e68:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8017e6c:	e9cd 5300 	strd	r5, r3, [sp]
 8017e70:	463b      	mov	r3, r7
 8017e72:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8017e74:	2200      	movs	r2, #0
 8017e76:	47a8      	blx	r5
 8017e78:	b00b      	add	sp, #44	; 0x2c
 8017e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017e7c:	2400b5ca 	.word	0x2400b5ca

08017e80 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8017e80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017e84:	4698      	mov	r8, r3
 8017e86:	6803      	ldr	r3, [r0, #0]
 8017e88:	b08b      	sub	sp, #44	; 0x2c
 8017e8a:	4617      	mov	r7, r2
 8017e8c:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8017e8e:	460e      	mov	r6, r1
 8017e90:	4b13      	ldr	r3, [pc, #76]	; (8017ee0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8017e92:	4604      	mov	r4, r0
 8017e94:	f8b3 9000 	ldrh.w	r9, [r3]
 8017e98:	f7ec f9a6 	bl	80041e8 <_ZN8touchgfx3HAL3lcdEv>
 8017e9c:	6803      	ldr	r3, [r0, #0]
 8017e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ea0:	4798      	blx	r3
 8017ea2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8017ea6:	2200      	movs	r2, #0
 8017ea8:	4631      	mov	r1, r6
 8017eaa:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8017eae:	2302      	movs	r3, #2
 8017eb0:	4620      	mov	r0, r4
 8017eb2:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8017eb6:	2301      	movs	r3, #1
 8017eb8:	9305      	str	r3, [sp, #20]
 8017eba:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8017ebe:	9304      	str	r3, [sp, #16]
 8017ec0:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8017ec4:	9303      	str	r3, [sp, #12]
 8017ec6:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8017eca:	9302      	str	r3, [sp, #8]
 8017ecc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017ed0:	e9cd 8300 	strd	r8, r3, [sp]
 8017ed4:	463b      	mov	r3, r7
 8017ed6:	47a8      	blx	r5
 8017ed8:	b00b      	add	sp, #44	; 0x2c
 8017eda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017ede:	bf00      	nop
 8017ee0:	2400b5ca 	.word	0x2400b5ca

08017ee4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8017ee4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017ee8:	4698      	mov	r8, r3
 8017eea:	6803      	ldr	r3, [r0, #0]
 8017eec:	b087      	sub	sp, #28
 8017eee:	460e      	mov	r6, r1
 8017ef0:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8017ef2:	4617      	mov	r7, r2
 8017ef4:	4b0f      	ldr	r3, [pc, #60]	; (8017f34 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8017ef6:	4604      	mov	r4, r0
 8017ef8:	f8b3 9000 	ldrh.w	r9, [r3]
 8017efc:	f7ec f974 	bl	80041e8 <_ZN8touchgfx3HAL3lcdEv>
 8017f00:	6803      	ldr	r3, [r0, #0]
 8017f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f04:	4798      	blx	r3
 8017f06:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8017f0a:	463a      	mov	r2, r7
 8017f0c:	4631      	mov	r1, r6
 8017f0e:	f8cd 900c 	str.w	r9, [sp, #12]
 8017f12:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8017f16:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8017f1a:	4620      	mov	r0, r4
 8017f1c:	9302      	str	r3, [sp, #8]
 8017f1e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8017f22:	9301      	str	r3, [sp, #4]
 8017f24:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8017f28:	9300      	str	r3, [sp, #0]
 8017f2a:	4643      	mov	r3, r8
 8017f2c:	47a8      	blx	r5
 8017f2e:	b007      	add	sp, #28
 8017f30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017f34:	2400b5ca 	.word	0x2400b5ca

08017f38 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8017f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f3c:	4604      	mov	r4, r0
 8017f3e:	b08f      	sub	sp, #60	; 0x3c
 8017f40:	4610      	mov	r0, r2
 8017f42:	460d      	mov	r5, r1
 8017f44:	4691      	mov	r9, r2
 8017f46:	461e      	mov	r6, r3
 8017f48:	f005 ff20 	bl	801dd8c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8017f4c:	2800      	cmp	r0, #0
 8017f4e:	f000 809c 	beq.w	801808a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x152>
 8017f52:	6823      	ldr	r3, [r4, #0]
 8017f54:	4620      	mov	r0, r4
 8017f56:	f8df b194 	ldr.w	fp, [pc, #404]	; 80180ec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>
 8017f5a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8017f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017f60:	4798      	blx	r3
 8017f62:	6823      	ldr	r3, [r4, #0]
 8017f64:	4620      	mov	r0, r4
 8017f66:	f8df a188 	ldr.w	sl, [pc, #392]	; 80180f0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8017f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017f6c:	4798      	blx	r3
 8017f6e:	f8bb 3000 	ldrh.w	r3, [fp]
 8017f72:	4f5b      	ldr	r7, [pc, #364]	; (80180e0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8017f74:	9301      	str	r3, [sp, #4]
 8017f76:	f8ba 3000 	ldrh.w	r3, [sl]
 8017f7a:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8017f7e:	4640      	mov	r0, r8
 8017f80:	9302      	str	r3, [sp, #8]
 8017f82:	883b      	ldrh	r3, [r7, #0]
 8017f84:	9303      	str	r3, [sp, #12]
 8017f86:	4b57      	ldr	r3, [pc, #348]	; (80180e4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8017f88:	881a      	ldrh	r2, [r3, #0]
 8017f8a:	9305      	str	r3, [sp, #20]
 8017f8c:	9204      	str	r2, [sp, #16]
 8017f8e:	f005 ffb7 	bl	801df00 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017f92:	8038      	strh	r0, [r7, #0]
 8017f94:	4640      	mov	r0, r8
 8017f96:	f005 ffed 	bl	801df74 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017f9a:	9b05      	ldr	r3, [sp, #20]
 8017f9c:	8018      	strh	r0, [r3, #0]
 8017f9e:	4b52      	ldr	r3, [pc, #328]	; (80180e8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8017fa0:	781b      	ldrb	r3, [r3, #0]
 8017fa2:	2b00      	cmp	r3, #0
 8017fa4:	d174      	bne.n	8018090 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 8017fa6:	883b      	ldrh	r3, [r7, #0]
 8017fa8:	f8aa 0000 	strh.w	r0, [sl]
 8017fac:	f8ab 3000 	strh.w	r3, [fp]
 8017fb0:	4648      	mov	r0, r9
 8017fb2:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8017fb6:	f005 fee9 	bl	801dd8c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8017fba:	2200      	movs	r2, #0
 8017fbc:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8017fc0:	4611      	mov	r1, r2
 8017fc2:	4628      	mov	r0, r5
 8017fc4:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8017fc8:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8017fcc:	f7ec f816 	bl	8003ffc <_ZN8touchgfx8Drawable5setXYEss>
 8017fd0:	2301      	movs	r3, #1
 8017fd2:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8017fd6:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8017fda:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8017fde:	2b00      	cmp	r3, #0
 8017fe0:	dd5c      	ble.n	801809c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 8017fe2:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8017fe6:	2b00      	cmp	r3, #0
 8017fe8:	dd58      	ble.n	801809c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 8017fea:	462a      	mov	r2, r5
 8017fec:	ab0a      	add	r3, sp, #40	; 0x28
 8017fee:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8017ff2:	6851      	ldr	r1, [r2, #4]
 8017ff4:	c303      	stmia	r3!, {r0, r1}
 8017ff6:	4631      	mov	r1, r6
 8017ff8:	a80a      	add	r0, sp, #40	; 0x28
 8017ffa:	f7ff f913 	bl	8017224 <_ZN8touchgfx4RectaNERKS0_>
 8017ffe:	4b38      	ldr	r3, [pc, #224]	; (80180e0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8018000:	2100      	movs	r1, #0
 8018002:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018006:	4b37      	ldr	r3, [pc, #220]	; (80180e4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8018008:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801800c:	aa0a      	add	r2, sp, #40	; 0x28
 801800e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018012:	910c      	str	r1, [sp, #48]	; 0x30
 8018014:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8018018:	ab08      	add	r3, sp, #32
 801801a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801801e:	e883 0003 	stmia.w	r3, {r0, r1}
 8018022:	4618      	mov	r0, r3
 8018024:	a90c      	add	r1, sp, #48	; 0x30
 8018026:	f7ff f8fd 	bl	8017224 <_ZN8touchgfx4RectaNERKS0_>
 801802a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801802c:	2b00      	cmp	r3, #0
 801802e:	d13c      	bne.n	80180aa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x172>
 8018030:	2000      	movs	r0, #0
 8018032:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8018036:	2600      	movs	r6, #0
 8018038:	696b      	ldr	r3, [r5, #20]
 801803a:	a908      	add	r1, sp, #32
 801803c:	682a      	ldr	r2, [r5, #0]
 801803e:	4628      	mov	r0, r5
 8018040:	9305      	str	r3, [sp, #20]
 8018042:	616e      	str	r6, [r5, #20]
 8018044:	6892      	ldr	r2, [r2, #8]
 8018046:	4790      	blx	r2
 8018048:	9b05      	ldr	r3, [sp, #20]
 801804a:	4652      	mov	r2, sl
 801804c:	4649      	mov	r1, r9
 801804e:	616b      	str	r3, [r5, #20]
 8018050:	4628      	mov	r0, r5
 8018052:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8018056:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 801805a:	f7eb ffcf 	bl	8003ffc <_ZN8touchgfx8Drawable5setXYEss>
 801805e:	9a01      	ldr	r2, [sp, #4]
 8018060:	4b22      	ldr	r3, [pc, #136]	; (80180ec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8018062:	4620      	mov	r0, r4
 8018064:	801a      	strh	r2, [r3, #0]
 8018066:	9a02      	ldr	r2, [sp, #8]
 8018068:	4b21      	ldr	r3, [pc, #132]	; (80180f0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 801806a:	801a      	strh	r2, [r3, #0]
 801806c:	9a03      	ldr	r2, [sp, #12]
 801806e:	4b1c      	ldr	r3, [pc, #112]	; (80180e0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8018070:	801a      	strh	r2, [r3, #0]
 8018072:	4b1c      	ldr	r3, [pc, #112]	; (80180e4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8018074:	9a04      	ldr	r2, [sp, #16]
 8018076:	801a      	strh	r2, [r3, #0]
 8018078:	6823      	ldr	r3, [r4, #0]
 801807a:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 801807e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018080:	4798      	blx	r3
 8018082:	6823      	ldr	r3, [r4, #0]
 8018084:	4620      	mov	r0, r4
 8018086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018088:	4798      	blx	r3
 801808a:	b00f      	add	sp, #60	; 0x3c
 801808c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018090:	883b      	ldrh	r3, [r7, #0]
 8018092:	f8ab 0000 	strh.w	r0, [fp]
 8018096:	f8aa 3000 	strh.w	r3, [sl]
 801809a:	e789      	b.n	8017fb0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x78>
 801809c:	462a      	mov	r2, r5
 801809e:	ab0a      	add	r3, sp, #40	; 0x28
 80180a0:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80180a4:	6851      	ldr	r1, [r2, #4]
 80180a6:	c303      	stmia	r3!, {r0, r1}
 80180a8:	e7a9      	b.n	8017ffe <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc6>
 80180aa:	a807      	add	r0, sp, #28
 80180ac:	f006 f8ba 	bl	801e224 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80180b0:	4606      	mov	r6, r0
 80180b2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80180b4:	6803      	ldr	r3, [r0, #0]
 80180b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80180b8:	4798      	blx	r3
 80180ba:	4286      	cmp	r6, r0
 80180bc:	d1b8      	bne.n	8018030 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xf8>
 80180be:	f7ec f893 	bl	80041e8 <_ZN8touchgfx3HAL3lcdEv>
 80180c2:	6803      	ldr	r3, [r0, #0]
 80180c4:	4606      	mov	r6, r0
 80180c6:	a807      	add	r0, sp, #28
 80180c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80180ca:	9305      	str	r3, [sp, #20]
 80180cc:	f006 f8aa 	bl	801e224 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80180d0:	9b05      	ldr	r3, [sp, #20]
 80180d2:	4601      	mov	r1, r0
 80180d4:	4630      	mov	r0, r6
 80180d6:	4798      	blx	r3
 80180d8:	f080 0001 	eor.w	r0, r0, #1
 80180dc:	b2c0      	uxtb	r0, r0
 80180de:	e7a8      	b.n	8018032 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 80180e0:	2400b5c4 	.word	0x2400b5c4
 80180e4:	2400b5c6 	.word	0x2400b5c6
 80180e8:	2400b5c8 	.word	0x2400b5c8
 80180ec:	2400b5ca 	.word	0x2400b5ca
 80180f0:	2400b5cc 	.word	0x2400b5cc

080180f4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 80180f4:	4b07      	ldr	r3, [pc, #28]	; (8018114 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 80180f6:	b510      	push	{r4, lr}
 80180f8:	781b      	ldrb	r3, [r3, #0]
 80180fa:	4604      	mov	r4, r0
 80180fc:	b13b      	cbz	r3, 801810e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80180fe:	6803      	ldr	r3, [r0, #0]
 8018100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018102:	4798      	blx	r3
 8018104:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018106:	4283      	cmp	r3, r0
 8018108:	d101      	bne.n	801810e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801810a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801810c:	bd10      	pop	{r4, pc}
 801810e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8018110:	e7fc      	b.n	801810c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8018112:	bf00      	nop
 8018114:	2400b5ce 	.word	0x2400b5ce

08018118 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8018118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801811c:	b088      	sub	sp, #32
 801811e:	4692      	mov	sl, r2
 8018120:	461d      	mov	r5, r3
 8018122:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018126:	f8bd 904c 	ldrh.w	r9, [sp, #76]	; 0x4c
 801812a:	2400      	movs	r4, #0
 801812c:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
 8018130:	4606      	mov	r6, r0
 8018132:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
 8018136:	fb09 a505 	mla	r5, r9, r5, sl
 801813a:	9403      	str	r4, [sp, #12]
 801813c:	f8ad 8014 	strh.w	r8, [sp, #20]
 8018140:	f8ad 7016 	strh.w	r7, [sp, #22]
 8018144:	f88d 401c 	strb.w	r4, [sp, #28]
 8018148:	e9cd 3100 	strd	r3, r1, [sp]
 801814c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8018150:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018154:	f7ff ffce 	bl	80180f4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018158:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801815c:	f8ad 901a 	strh.w	r9, [sp, #26]
 8018160:	f88d 401e 	strb.w	r4, [sp, #30]
 8018164:	9504      	str	r5, [sp, #16]
 8018166:	f88d 401d 	strb.w	r4, [sp, #29]
 801816a:	f88d 401f 	strb.w	r4, [sp, #31]
 801816e:	f1b8 0f00 	cmp.w	r8, #0
 8018172:	d000      	beq.n	8018176 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x5e>
 8018174:	b937      	cbnz	r7, 8018184 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x6c>
 8018176:	4b0d      	ldr	r3, [pc, #52]	; (80181ac <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x94>)
 8018178:	f240 210b 	movw	r1, #523	; 0x20b
 801817c:	4a0c      	ldr	r2, [pc, #48]	; (80181b0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 801817e:	480d      	ldr	r0, [pc, #52]	; (80181b4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 8018180:	f011 ff30 	bl	8029fe4 <__assert_func>
 8018184:	6833      	ldr	r3, [r6, #0]
 8018186:	4630      	mov	r0, r6
 8018188:	9c00      	ldr	r4, [sp, #0]
 801818a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801818c:	4798      	blx	r3
 801818e:	4220      	tst	r0, r4
 8018190:	d104      	bne.n	801819c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x84>
 8018192:	4b09      	ldr	r3, [pc, #36]	; (80181b8 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0xa0>)
 8018194:	f44f 7103 	mov.w	r1, #524	; 0x20c
 8018198:	4a05      	ldr	r2, [pc, #20]	; (80181b0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 801819a:	e7f0      	b.n	801817e <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x66>
 801819c:	6870      	ldr	r0, [r6, #4]
 801819e:	4669      	mov	r1, sp
 80181a0:	6803      	ldr	r3, [r0, #0]
 80181a2:	685b      	ldr	r3, [r3, #4]
 80181a4:	4798      	blx	r3
 80181a6:	b008      	add	sp, #32
 80181a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80181ac:	0802d599 	.word	0x0802d599
 80181b0:	0802d8cc 	.word	0x0802d8cc
 80181b4:	0802d74b 	.word	0x0802d74b
 80181b8:	0802d5d1 	.word	0x0802d5d1

080181bc <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 80181bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181c0:	b089      	sub	sp, #36	; 0x24
 80181c2:	4693      	mov	fp, r2
 80181c4:	461d      	mov	r5, r3
 80181c6:	2400      	movs	r4, #0
 80181c8:	f8bd 9050 	ldrh.w	r9, [sp, #80]	; 0x50
 80181cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80181d0:	468a      	mov	sl, r1
 80181d2:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
 80181d6:	fb09 b505 	mla	r5, r9, r5, fp
 80181da:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 80181de:	4606      	mov	r6, r0
 80181e0:	9403      	str	r4, [sp, #12]
 80181e2:	e9cd 3400 	strd	r3, r4, [sp]
 80181e6:	f7ff ff85 	bl	80180f4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80181ea:	f8ad 8014 	strh.w	r8, [sp, #20]
 80181ee:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80181f2:	f8ad 7016 	strh.w	r7, [sp, #22]
 80181f6:	f8ad 4018 	strh.w	r4, [sp, #24]
 80181fa:	9504      	str	r5, [sp, #16]
 80181fc:	f8ad 901a 	strh.w	r9, [sp, #26]
 8018200:	f8cd a00c 	str.w	sl, [sp, #12]
 8018204:	f8ad 401c 	strh.w	r4, [sp, #28]
 8018208:	f88d 401e 	strb.w	r4, [sp, #30]
 801820c:	f88d 401f 	strb.w	r4, [sp, #31]
 8018210:	f1b8 0f00 	cmp.w	r8, #0
 8018214:	d000      	beq.n	8018218 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x5c>
 8018216:	b937      	cbnz	r7, 8018226 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x6a>
 8018218:	4b0d      	ldr	r3, [pc, #52]	; (8018250 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x94>)
 801821a:	f240 2121 	movw	r1, #545	; 0x221
 801821e:	4a0d      	ldr	r2, [pc, #52]	; (8018254 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 8018220:	480d      	ldr	r0, [pc, #52]	; (8018258 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 8018222:	f011 fedf 	bl	8029fe4 <__assert_func>
 8018226:	6833      	ldr	r3, [r6, #0]
 8018228:	4630      	mov	r0, r6
 801822a:	9c00      	ldr	r4, [sp, #0]
 801822c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801822e:	4798      	blx	r3
 8018230:	4220      	tst	r0, r4
 8018232:	d104      	bne.n	801823e <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x82>
 8018234:	4b09      	ldr	r3, [pc, #36]	; (801825c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0xa0>)
 8018236:	f240 2122 	movw	r1, #546	; 0x222
 801823a:	4a06      	ldr	r2, [pc, #24]	; (8018254 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 801823c:	e7f0      	b.n	8018220 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x64>
 801823e:	6870      	ldr	r0, [r6, #4]
 8018240:	4669      	mov	r1, sp
 8018242:	6803      	ldr	r3, [r0, #0]
 8018244:	685b      	ldr	r3, [r3, #4]
 8018246:	4798      	blx	r3
 8018248:	b009      	add	sp, #36	; 0x24
 801824a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801824e:	bf00      	nop
 8018250:	0802d616 	.word	0x0802d616
 8018254:	0802d942 	.word	0x0802d942
 8018258:	0802d74b 	.word	0x0802d74b
 801825c:	0802d64e 	.word	0x0802d64e

08018260 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8018260:	b508      	push	{r3, lr}
 8018262:	290d      	cmp	r1, #13
 8018264:	d817      	bhi.n	8018296 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 8018266:	e8df f001 	tbb	[pc, r1]
 801826a:	090b      	.short	0x090b
 801826c:	0d0d0d07 	.word	0x0d0d0d07
 8018270:	1414140d 	.word	0x1414140d
 8018274:	0d0d1414 	.word	0x0d0d1414
 8018278:	2020      	movs	r0, #32
 801827a:	bd08      	pop	{r3, pc}
 801827c:	2018      	movs	r0, #24
 801827e:	e7fc      	b.n	801827a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8018280:	2010      	movs	r0, #16
 8018282:	e7fa      	b.n	801827a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8018284:	4b05      	ldr	r3, [pc, #20]	; (801829c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 8018286:	f240 2182 	movw	r1, #642	; 0x282
 801828a:	4a05      	ldr	r2, [pc, #20]	; (80182a0 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 801828c:	4805      	ldr	r0, [pc, #20]	; (80182a4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 801828e:	f011 fea9 	bl	8029fe4 <__assert_func>
 8018292:	2008      	movs	r0, #8
 8018294:	e7f1      	b.n	801827a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8018296:	2000      	movs	r0, #0
 8018298:	e7ef      	b.n	801827a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801829a:	bf00      	nop
 801829c:	0802d7c7 	.word	0x0802d7c7
 80182a0:	0802dc6d 	.word	0x0802dc6d
 80182a4:	0802d74b 	.word	0x0802d74b

080182a8 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 80182a8:	b570      	push	{r4, r5, r6, lr}
 80182aa:	460d      	mov	r5, r1
 80182ac:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80182b0:	4616      	mov	r6, r2
 80182b2:	461c      	mov	r4, r3
 80182b4:	f7ff ffd4 	bl	8018260 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 80182b8:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80182bc:	10c0      	asrs	r0, r0, #3
 80182be:	fb06 5101 	mla	r1, r6, r1, r5
 80182c2:	fb00 4001 	mla	r0, r0, r1, r4
 80182c6:	bd70      	pop	{r4, r5, r6, pc}

080182c8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 80182c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80182cc:	b08a      	sub	sp, #40	; 0x28
 80182ce:	f04f 0c00 	mov.w	ip, #0
 80182d2:	4604      	mov	r4, r0
 80182d4:	469a      	mov	sl, r3
 80182d6:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 80182da:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 80182de:	2d0b      	cmp	r5, #11
 80182e0:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 80182e4:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80182e8:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 80182ec:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 80182f0:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 80182f4:	f8cd c014 	str.w	ip, [sp, #20]
 80182f8:	d12d      	bne.n	8018356 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x8e>
 80182fa:	2080      	movs	r0, #128	; 0x80
 80182fc:	9204      	str	r2, [sp, #16]
 80182fe:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8018302:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8018306:	f8ad 2020 	strh.w	r2, [sp, #32]
 801830a:	f8ad 701c 	strh.w	r7, [sp, #28]
 801830e:	f8ad 601e 	strh.w	r6, [sp, #30]
 8018312:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018316:	4620      	mov	r0, r4
 8018318:	f7ff feec 	bl	80180f4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801831c:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8018320:	4603      	mov	r3, r0
 8018322:	4651      	mov	r1, sl
 8018324:	4620      	mov	r0, r4
 8018326:	e9cd 9800 	strd	r9, r8, [sp]
 801832a:	f7ff ffbd 	bl	80182a8 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 801832e:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 8018332:	9006      	str	r0, [sp, #24]
 8018334:	f8ad 9022 	strh.w	r9, [sp, #34]	; 0x22
 8018338:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 801833c:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
 8018340:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 8018344:	b107      	cbz	r7, 8018348 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x80>
 8018346:	b9d6      	cbnz	r6, 801837e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb6>
 8018348:	4b17      	ldr	r3, [pc, #92]	; (80183a8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe0>)
 801834a:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 801834e:	4a17      	ldr	r2, [pc, #92]	; (80183ac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 8018350:	4817      	ldr	r0, [pc, #92]	; (80183b0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe8>)
 8018352:	f011 fe47 	bl	8029fe4 <__assert_func>
 8018356:	2d02      	cmp	r5, #2
 8018358:	d108      	bne.n	801836c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa4>
 801835a:	2bff      	cmp	r3, #255	; 0xff
 801835c:	d104      	bne.n	8018368 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa0>
 801835e:	2800      	cmp	r0, #0
 8018360:	bf14      	ite	ne
 8018362:	2040      	movne	r0, #64	; 0x40
 8018364:	2020      	moveq	r0, #32
 8018366:	e7c9      	b.n	80182fc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8018368:	2040      	movs	r0, #64	; 0x40
 801836a:	e7c7      	b.n	80182fc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 801836c:	2bff      	cmp	r3, #255	; 0xff
 801836e:	d104      	bne.n	801837a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb2>
 8018370:	2800      	cmp	r0, #0
 8018372:	bf14      	ite	ne
 8018374:	2004      	movne	r0, #4
 8018376:	2001      	moveq	r0, #1
 8018378:	e7c0      	b.n	80182fc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 801837a:	2004      	movs	r0, #4
 801837c:	e7be      	b.n	80182fc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 801837e:	6823      	ldr	r3, [r4, #0]
 8018380:	4620      	mov	r0, r4
 8018382:	9d02      	ldr	r5, [sp, #8]
 8018384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018386:	4798      	blx	r3
 8018388:	4228      	tst	r0, r5
 801838a:	d104      	bne.n	8018396 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xce>
 801838c:	4b09      	ldr	r3, [pc, #36]	; (80183b4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xec>)
 801838e:	f240 11d5 	movw	r1, #469	; 0x1d5
 8018392:	4a06      	ldr	r2, [pc, #24]	; (80183ac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 8018394:	e7dc      	b.n	8018350 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x88>
 8018396:	6860      	ldr	r0, [r4, #4]
 8018398:	a902      	add	r1, sp, #8
 801839a:	6803      	ldr	r3, [r0, #0]
 801839c:	685b      	ldr	r3, [r3, #4]
 801839e:	4798      	blx	r3
 80183a0:	b00a      	add	sp, #40	; 0x28
 80183a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80183a6:	bf00      	nop
 80183a8:	0802d599 	.word	0x0802d599
 80183ac:	0802dafb 	.word	0x0802dafb
 80183b0:	0802d74b 	.word	0x0802d74b
 80183b4:	0802d5d1 	.word	0x0802d5d1

080183b8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 80183b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183bc:	b08b      	sub	sp, #44	; 0x2c
 80183be:	469b      	mov	fp, r3
 80183c0:	4604      	mov	r4, r0
 80183c2:	4692      	mov	sl, r2
 80183c4:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 80183c8:	2600      	movs	r6, #0
 80183ca:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 80183ce:	4689      	mov	r9, r1
 80183d0:	2fff      	cmp	r7, #255	; 0xff
 80183d2:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 80183d6:	9605      	str	r6, [sp, #20]
 80183d8:	bf14      	ite	ne
 80183da:	2308      	movne	r3, #8
 80183dc:	2302      	moveq	r3, #2
 80183de:	e9cd 3602 	strd	r3, r6, [sp, #8]
 80183e2:	f7ff fe87 	bl	80180f4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80183e6:	465a      	mov	r2, fp
 80183e8:	4603      	mov	r3, r0
 80183ea:	4651      	mov	r1, sl
 80183ec:	4620      	mov	r0, r4
 80183ee:	e9cd 8500 	strd	r8, r5, [sp]
 80183f2:	f7ff ff59 	bl	80182a8 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80183f6:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80183fa:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 80183fe:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018402:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8018406:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 801840a:	f8ad 301e 	strh.w	r3, [sp, #30]
 801840e:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8018412:	9d02      	ldr	r5, [sp, #8]
 8018414:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 8018418:	6823      	ldr	r3, [r4, #0]
 801841a:	9006      	str	r0, [sp, #24]
 801841c:	4620      	mov	r0, r4
 801841e:	f8ad 6020 	strh.w	r6, [sp, #32]
 8018422:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
 8018426:	f8cd 9014 	str.w	r9, [sp, #20]
 801842a:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 801842e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018430:	4798      	blx	r3
 8018432:	4228      	tst	r0, r5
 8018434:	d106      	bne.n	8018444 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>
 8018436:	4b07      	ldr	r3, [pc, #28]	; (8018454 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x9c>)
 8018438:	f240 2137 	movw	r1, #567	; 0x237
 801843c:	4a06      	ldr	r2, [pc, #24]	; (8018458 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa0>)
 801843e:	4807      	ldr	r0, [pc, #28]	; (801845c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa4>)
 8018440:	f011 fdd0 	bl	8029fe4 <__assert_func>
 8018444:	6860      	ldr	r0, [r4, #4]
 8018446:	a902      	add	r1, sp, #8
 8018448:	6803      	ldr	r3, [r0, #0]
 801844a:	685b      	ldr	r3, [r3, #4]
 801844c:	4798      	blx	r3
 801844e:	b00b      	add	sp, #44	; 0x2c
 8018450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018454:	0802d5d1 	.word	0x0802d5d1
 8018458:	0802dbd2 	.word	0x0802dbd2
 801845c:	0802d74b 	.word	0x0802d74b

08018460 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8018460:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018464:	461f      	mov	r7, r3
 8018466:	4b0b      	ldr	r3, [pc, #44]	; (8018494 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8018468:	460d      	mov	r5, r1
 801846a:	4616      	mov	r6, r2
 801846c:	f8b3 8000 	ldrh.w	r8, [r3]
 8018470:	4604      	mov	r4, r0
 8018472:	f7eb feb9 	bl	80041e8 <_ZN8touchgfx3HAL3lcdEv>
 8018476:	6803      	ldr	r3, [r0, #0]
 8018478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801847a:	4798      	blx	r3
 801847c:	463b      	mov	r3, r7
 801847e:	4632      	mov	r2, r6
 8018480:	4629      	mov	r1, r5
 8018482:	e9cd 8000 	strd	r8, r0, [sp]
 8018486:	4620      	mov	r0, r4
 8018488:	f7ff ff0e 	bl	80182a8 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 801848c:	b002      	add	sp, #8
 801848e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018492:	bf00      	nop
 8018494:	2400b5ca 	.word	0x2400b5ca

08018498 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8018498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801849c:	4698      	mov	r8, r3
 801849e:	b088      	sub	sp, #32
 80184a0:	2300      	movs	r3, #0
 80184a2:	4617      	mov	r7, r2
 80184a4:	4604      	mov	r4, r0
 80184a6:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 80184aa:	9303      	str	r3, [sp, #12]
 80184ac:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80184b0:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80184b4:	f8ad 6014 	strh.w	r6, [sp, #20]
 80184b8:	f8ad 5016 	strh.w	r5, [sp, #22]
 80184bc:	e9cd 3100 	strd	r3, r1, [sp]
 80184c0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80184c4:	f8ad 3018 	strh.w	r3, [sp, #24]
 80184c8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80184cc:	f88d 301c 	strb.w	r3, [sp, #28]
 80184d0:	f7ff fe10 	bl	80180f4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80184d4:	4642      	mov	r2, r8
 80184d6:	4603      	mov	r3, r0
 80184d8:	4639      	mov	r1, r7
 80184da:	4620      	mov	r0, r4
 80184dc:	f7ff ffc0 	bl	8018460 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80184e0:	4b18      	ldr	r3, [pc, #96]	; (8018544 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xac>)
 80184e2:	9004      	str	r0, [sp, #16]
 80184e4:	881b      	ldrh	r3, [r3, #0]
 80184e6:	f8ad 301a 	strh.w	r3, [sp, #26]
 80184ea:	f7eb fe7d 	bl	80041e8 <_ZN8touchgfx3HAL3lcdEv>
 80184ee:	6803      	ldr	r3, [r0, #0]
 80184f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80184f2:	4798      	blx	r3
 80184f4:	f88d 001e 	strb.w	r0, [sp, #30]
 80184f8:	f88d 001d 	strb.w	r0, [sp, #29]
 80184fc:	b106      	cbz	r6, 8018500 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x68>
 80184fe:	b935      	cbnz	r5, 801850e <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x76>
 8018500:	4b11      	ldr	r3, [pc, #68]	; (8018548 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb0>)
 8018502:	f240 11f1 	movw	r1, #497	; 0x1f1
 8018506:	4a11      	ldr	r2, [pc, #68]	; (801854c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 8018508:	4811      	ldr	r0, [pc, #68]	; (8018550 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb8>)
 801850a:	f011 fd6b 	bl	8029fe4 <__assert_func>
 801850e:	6823      	ldr	r3, [r4, #0]
 8018510:	4620      	mov	r0, r4
 8018512:	9d00      	ldr	r5, [sp, #0]
 8018514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018516:	4798      	blx	r3
 8018518:	4228      	tst	r0, r5
 801851a:	d104      	bne.n	8018526 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x8e>
 801851c:	4b0d      	ldr	r3, [pc, #52]	; (8018554 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xbc>)
 801851e:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 8018522:	4a0a      	ldr	r2, [pc, #40]	; (801854c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 8018524:	e7f0      	b.n	8018508 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x70>
 8018526:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018528:	4669      	mov	r1, sp
 801852a:	6860      	ldr	r0, [r4, #4]
 801852c:	9303      	str	r3, [sp, #12]
 801852e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8018532:	f88d 301f 	strb.w	r3, [sp, #31]
 8018536:	6803      	ldr	r3, [r0, #0]
 8018538:	685b      	ldr	r3, [r3, #4]
 801853a:	4798      	blx	r3
 801853c:	b008      	add	sp, #32
 801853e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018542:	bf00      	nop
 8018544:	2400b5ca 	.word	0x2400b5ca
 8018548:	0802d599 	.word	0x0802d599
 801854c:	0802d9a7 	.word	0x0802d9a7
 8018550:	0802d74b 	.word	0x0802d74b
 8018554:	0802d5d1 	.word	0x0802d5d1

08018558 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8018558:	b5f0      	push	{r4, r5, r6, r7, lr}
 801855a:	b08b      	sub	sp, #44	; 0x2c
 801855c:	4604      	mov	r4, r0
 801855e:	466b      	mov	r3, sp
 8018560:	e883 0006 	stmia.w	r3, {r1, r2}
 8018564:	4b20      	ldr	r3, [pc, #128]	; (80185e8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8018566:	781b      	ldrb	r3, [r3, #0]
 8018568:	b933      	cbnz	r3, 8018578 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 801856a:	4b20      	ldr	r3, [pc, #128]	; (80185ec <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 801856c:	f44f 7112 	mov.w	r1, #584	; 0x248
 8018570:	4a1f      	ldr	r2, [pc, #124]	; (80185f0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8018572:	4820      	ldr	r0, [pc, #128]	; (80185f4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 8018574:	f011 fd36 	bl	8029fe4 <__assert_func>
 8018578:	2301      	movs	r3, #1
 801857a:	2500      	movs	r5, #0
 801857c:	f8bd 6000 	ldrh.w	r6, [sp]
 8018580:	9302      	str	r3, [sp, #8]
 8018582:	6803      	ldr	r3, [r0, #0]
 8018584:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8018588:	9505      	str	r5, [sp, #20]
 801858a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801858c:	4798      	blx	r3
 801858e:	463a      	mov	r2, r7
 8018590:	4631      	mov	r1, r6
 8018592:	4603      	mov	r3, r0
 8018594:	4620      	mov	r0, r4
 8018596:	f7ff ff63 	bl	8018460 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801859a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801859c:	9003      	str	r0, [sp, #12]
 801859e:	9306      	str	r3, [sp, #24]
 80185a0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80185a4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80185a8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80185ac:	f8ad 301e 	strh.w	r3, [sp, #30]
 80185b0:	4b11      	ldr	r3, [pc, #68]	; (80185f8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0xa0>)
 80185b2:	881b      	ldrh	r3, [r3, #0]
 80185b4:	f8ad 3020 	strh.w	r3, [sp, #32]
 80185b8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80185bc:	f7eb fe14 	bl	80041e8 <_ZN8touchgfx3HAL3lcdEv>
 80185c0:	6803      	ldr	r3, [r0, #0]
 80185c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80185c4:	4798      	blx	r3
 80185c6:	23ff      	movs	r3, #255	; 0xff
 80185c8:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 80185cc:	a902      	add	r1, sp, #8
 80185ce:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 80185d2:	6860      	ldr	r0, [r4, #4]
 80185d4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80185d8:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
 80185dc:	6803      	ldr	r3, [r0, #0]
 80185de:	685b      	ldr	r3, [r3, #4]
 80185e0:	4798      	blx	r3
 80185e2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80185e4:	b00b      	add	sp, #44	; 0x2c
 80185e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80185e8:	2400b5cf 	.word	0x2400b5cf
 80185ec:	0802d698 	.word	0x0802d698
 80185f0:	0802da51 	.word	0x0802da51
 80185f4:	0802d74b 	.word	0x0802d74b
 80185f8:	2400b5ca 	.word	0x2400b5ca

080185fc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 80185fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018600:	b08a      	sub	sp, #40	; 0x28
 8018602:	2600      	movs	r6, #0
 8018604:	4604      	mov	r4, r0
 8018606:	466d      	mov	r5, sp
 8018608:	9605      	str	r6, [sp, #20]
 801860a:	e885 0006 	stmia.w	r5, {r1, r2}
 801860e:	461d      	mov	r5, r3
 8018610:	2301      	movs	r3, #1
 8018612:	f8bd 7000 	ldrh.w	r7, [sp]
 8018616:	9302      	str	r3, [sp, #8]
 8018618:	6803      	ldr	r3, [r0, #0]
 801861a:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 801861e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018620:	4798      	blx	r3
 8018622:	4642      	mov	r2, r8
 8018624:	4639      	mov	r1, r7
 8018626:	4603      	mov	r3, r0
 8018628:	4620      	mov	r0, r4
 801862a:	f7ff ff19 	bl	8018460 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801862e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8018632:	9003      	str	r0, [sp, #12]
 8018634:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018638:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801863c:	9506      	str	r5, [sp, #24]
 801863e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8018642:	4b0f      	ldr	r3, [pc, #60]	; (8018680 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x84>)
 8018644:	881b      	ldrh	r3, [r3, #0]
 8018646:	f8ad 3020 	strh.w	r3, [sp, #32]
 801864a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801864c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8018650:	f7eb fdca 	bl	80041e8 <_ZN8touchgfx3HAL3lcdEv>
 8018654:	6803      	ldr	r3, [r0, #0]
 8018656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018658:	4798      	blx	r3
 801865a:	23ff      	movs	r3, #255	; 0xff
 801865c:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8018660:	a902      	add	r1, sp, #8
 8018662:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8018666:	6860      	ldr	r0, [r4, #4]
 8018668:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801866c:	f88d 6027 	strb.w	r6, [sp, #39]	; 0x27
 8018670:	6803      	ldr	r3, [r0, #0]
 8018672:	685b      	ldr	r3, [r3, #4]
 8018674:	4798      	blx	r3
 8018676:	4628      	mov	r0, r5
 8018678:	b00a      	add	sp, #40	; 0x28
 801867a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801867e:	bf00      	nop
 8018680:	2400b5ca 	.word	0x2400b5ca

08018684 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8018684:	b570      	push	{r4, r5, r6, lr}
 8018686:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 801868a:	4604      	mov	r4, r0
 801868c:	b19b      	cbz	r3, 80186b6 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801868e:	2002      	movs	r0, #2
 8018690:	f7e9 f992 	bl	80019b8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8018694:	2300      	movs	r3, #0
 8018696:	4620      	mov	r0, r4
 8018698:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801869c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 80186a0:	6823      	ldr	r3, [r4, #0]
 80186a2:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 80186a6:	f7ff fd25 	bl	80180f4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80186aa:	4601      	mov	r1, r0
 80186ac:	4620      	mov	r0, r4
 80186ae:	462b      	mov	r3, r5
 80186b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80186b4:	4718      	bx	r3
 80186b6:	bd70      	pop	{r4, r5, r6, pc}

080186b8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 80186b8:	b538      	push	{r3, r4, r5, lr}
 80186ba:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
 80186be:	4604      	mov	r4, r0
 80186c0:	460d      	mov	r5, r1
 80186c2:	428a      	cmp	r2, r1
 80186c4:	d008      	beq.n	80186d8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x20>
 80186c6:	2a01      	cmp	r2, #1
 80186c8:	6803      	ldr	r3, [r0, #0]
 80186ca:	d106      	bne.n	80186da <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 80186cc:	b929      	cbnz	r1, 80186da <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 80186ce:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80186d2:	4798      	blx	r3
 80186d4:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 80186d8:	bd38      	pop	{r3, r4, r5, pc}
 80186da:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80186de:	4620      	mov	r0, r4
 80186e0:	e7f7      	b.n	80186d2 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1a>
	...

080186e4 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 80186e4:	4b0d      	ldr	r3, [pc, #52]	; (801871c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 80186e6:	b510      	push	{r4, lr}
 80186e8:	781b      	ldrb	r3, [r3, #0]
 80186ea:	4604      	mov	r4, r0
 80186ec:	b95b      	cbnz	r3, 8018706 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80186ee:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 80186f2:	2b02      	cmp	r3, #2
 80186f4:	d007      	beq.n	8018706 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80186f6:	6840      	ldr	r0, [r0, #4]
 80186f8:	f000 f936 	bl	8018968 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 80186fc:	b118      	cbz	r0, 8018706 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80186fe:	6862      	ldr	r2, [r4, #4]
 8018700:	7a53      	ldrb	r3, [r2, #9]
 8018702:	2b00      	cmp	r3, #0
 8018704:	d0fc      	beq.n	8018700 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8018706:	f7e9 fc15 	bl	8001f34 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801870a:	4620      	mov	r0, r4
 801870c:	2100      	movs	r1, #0
 801870e:	f7ff ffd3 	bl	80186b8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8018712:	4620      	mov	r0, r4
 8018714:	f7ff fcee 	bl	80180f4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018718:	bd10      	pop	{r4, pc}
 801871a:	bf00      	nop
 801871c:	2400b5ce 	.word	0x2400b5ce

08018720 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8018720:	4770      	bx	lr

08018722 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8018722:	2000      	movs	r0, #0
 8018724:	4770      	bx	lr

08018726 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8018726:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 801872a:	1a13      	subs	r3, r2, r0
 801872c:	4258      	negs	r0, r3
 801872e:	4158      	adcs	r0, r3
 8018730:	4770      	bx	lr

08018732 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8018732:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8018736:	1a9b      	subs	r3, r3, r2
 8018738:	2b00      	cmp	r3, #0
 801873a:	bfdc      	itt	le
 801873c:	6882      	ldrle	r2, [r0, #8]
 801873e:	189b      	addle	r3, r3, r2
 8018740:	2b01      	cmp	r3, #1
 8018742:	bfcc      	ite	gt
 8018744:	2000      	movgt	r0, #0
 8018746:	2001      	movle	r0, #1
 8018748:	4770      	bx	lr

0801874a <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801874a:	6902      	ldr	r2, [r0, #16]
 801874c:	6840      	ldr	r0, [r0, #4]
 801874e:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8018752:	4770      	bx	lr

08018754 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8018754:	6803      	ldr	r3, [r0, #0]
 8018756:	691b      	ldr	r3, [r3, #16]
 8018758:	4718      	bx	r3

0801875a <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 801875a:	4770      	bx	lr

0801875c <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 801875c:	4770      	bx	lr
	...

08018760 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8018760:	2301      	movs	r3, #1
 8018762:	b570      	push	{r4, r5, r6, lr}
 8018764:	7203      	strb	r3, [r0, #8]
 8018766:	4604      	mov	r4, r0
 8018768:	6840      	ldr	r0, [r0, #4]
 801876a:	6803      	ldr	r3, [r0, #0]
 801876c:	699b      	ldr	r3, [r3, #24]
 801876e:	4798      	blx	r3
 8018770:	6803      	ldr	r3, [r0, #0]
 8018772:	4605      	mov	r5, r0
 8018774:	2b40      	cmp	r3, #64	; 0x40
 8018776:	d039      	beq.n	80187ec <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8018778:	d815      	bhi.n	80187a6 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 801877a:	2b04      	cmp	r3, #4
 801877c:	d022      	beq.n	80187c4 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801877e:	d808      	bhi.n	8018792 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8018780:	2b01      	cmp	r3, #1
 8018782:	d033      	beq.n	80187ec <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8018784:	2b02      	cmp	r3, #2
 8018786:	d108      	bne.n	801879a <_ZN8touchgfx13DMA_Interface7executeEv+0x3a>
 8018788:	6823      	ldr	r3, [r4, #0]
 801878a:	4620      	mov	r0, r4
 801878c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801878e:	4798      	blx	r3
 8018790:	e025      	b.n	80187de <_ZN8touchgfx13DMA_Interface7executeEv+0x7e>
 8018792:	2b08      	cmp	r3, #8
 8018794:	d01e      	beq.n	80187d4 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>
 8018796:	2b20      	cmp	r3, #32
 8018798:	d028      	beq.n	80187ec <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 801879a:	4b17      	ldr	r3, [pc, #92]	; (80187f8 <_ZN8touchgfx13DMA_Interface7executeEv+0x98>)
 801879c:	218b      	movs	r1, #139	; 0x8b
 801879e:	4a17      	ldr	r2, [pc, #92]	; (80187fc <_ZN8touchgfx13DMA_Interface7executeEv+0x9c>)
 80187a0:	4817      	ldr	r0, [pc, #92]	; (8018800 <_ZN8touchgfx13DMA_Interface7executeEv+0xa0>)
 80187a2:	f011 fc1f 	bl	8029fe4 <__assert_func>
 80187a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80187aa:	d01f      	beq.n	80187ec <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 80187ac:	d804      	bhi.n	80187b8 <_ZN8touchgfx13DMA_Interface7executeEv+0x58>
 80187ae:	2b80      	cmp	r3, #128	; 0x80
 80187b0:	d01c      	beq.n	80187ec <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 80187b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80187b6:	e7ef      	b.n	8018798 <_ZN8touchgfx13DMA_Interface7executeEv+0x38>
 80187b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80187bc:	d016      	beq.n	80187ec <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 80187be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80187c2:	e7e0      	b.n	8018786 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 80187c4:	6823      	ldr	r3, [r4, #0]
 80187c6:	7f01      	ldrb	r1, [r0, #28]
 80187c8:	4620      	mov	r0, r4
 80187ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80187cc:	4798      	blx	r3
 80187ce:	6823      	ldr	r3, [r4, #0]
 80187d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80187d2:	e006      	b.n	80187e2 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 80187d4:	6823      	ldr	r3, [r4, #0]
 80187d6:	7f01      	ldrb	r1, [r0, #28]
 80187d8:	4620      	mov	r0, r4
 80187da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80187dc:	4798      	blx	r3
 80187de:	6823      	ldr	r3, [r4, #0]
 80187e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80187e2:	4629      	mov	r1, r5
 80187e4:	4620      	mov	r0, r4
 80187e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80187ea:	4718      	bx	r3
 80187ec:	6823      	ldr	r3, [r4, #0]
 80187ee:	4620      	mov	r0, r4
 80187f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80187f2:	4798      	blx	r3
 80187f4:	e7eb      	b.n	80187ce <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 80187f6:	bf00      	nop
 80187f8:	0802dcb6 	.word	0x0802dcb6
 80187fc:	0802ddc8 	.word	0x0802ddc8
 8018800:	0802dcdb 	.word	0x0802dcdb

08018804 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8018804:	b570      	push	{r4, r5, r6, lr}
 8018806:	4604      	mov	r4, r0
 8018808:	460e      	mov	r6, r1
 801880a:	6860      	ldr	r0, [r4, #4]
 801880c:	6803      	ldr	r3, [r0, #0]
 801880e:	685b      	ldr	r3, [r3, #4]
 8018810:	4798      	blx	r3
 8018812:	2800      	cmp	r0, #0
 8018814:	d1f9      	bne.n	801880a <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8018816:	4d0d      	ldr	r5, [pc, #52]	; (801884c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8018818:	6828      	ldr	r0, [r5, #0]
 801881a:	6803      	ldr	r3, [r0, #0]
 801881c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801881e:	4798      	blx	r3
 8018820:	f7e9 fba2 	bl	8001f68 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8018824:	6828      	ldr	r0, [r5, #0]
 8018826:	2101      	movs	r1, #1
 8018828:	f7ff ff46 	bl	80186b8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801882c:	6860      	ldr	r0, [r4, #4]
 801882e:	4631      	mov	r1, r6
 8018830:	6803      	ldr	r3, [r0, #0]
 8018832:	689b      	ldr	r3, [r3, #8]
 8018834:	4798      	blx	r3
 8018836:	6823      	ldr	r3, [r4, #0]
 8018838:	4620      	mov	r0, r4
 801883a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801883c:	4798      	blx	r3
 801883e:	6828      	ldr	r0, [r5, #0]
 8018840:	6803      	ldr	r3, [r0, #0]
 8018842:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018848:	4718      	bx	r3
 801884a:	bf00      	nop
 801884c:	2400b5d0 	.word	0x2400b5d0

08018850 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8018850:	b508      	push	{r3, lr}
 8018852:	f7e9 fb6f 	bl	8001f34 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8018856:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801885a:	f7e9 bb79 	b.w	8001f50 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801885e <_ZN8touchgfx13DMA_Interface5startEv>:
 801885e:	b510      	push	{r4, lr}
 8018860:	4604      	mov	r4, r0
 8018862:	6840      	ldr	r0, [r0, #4]
 8018864:	6803      	ldr	r3, [r0, #0]
 8018866:	681b      	ldr	r3, [r3, #0]
 8018868:	4798      	blx	r3
 801886a:	b948      	cbnz	r0, 8018880 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801886c:	7a63      	ldrb	r3, [r4, #9]
 801886e:	b13b      	cbz	r3, 8018880 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8018870:	7a23      	ldrb	r3, [r4, #8]
 8018872:	b92b      	cbnz	r3, 8018880 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8018874:	6823      	ldr	r3, [r4, #0]
 8018876:	4620      	mov	r0, r4
 8018878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801887a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801887e:	4718      	bx	r3
 8018880:	bd10      	pop	{r4, pc}
	...

08018884 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8018884:	b570      	push	{r4, r5, r6, lr}
 8018886:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 801888a:	4606      	mov	r6, r0
 801888c:	1a9b      	subs	r3, r3, r2
 801888e:	2b00      	cmp	r3, #0
 8018890:	bfdc      	itt	le
 8018892:	6880      	ldrle	r0, [r0, #8]
 8018894:	181b      	addle	r3, r3, r0
 8018896:	2b01      	cmp	r3, #1
 8018898:	dd13      	ble.n	80188c2 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x3e>
 801889a:	6874      	ldr	r4, [r6, #4]
 801889c:	460d      	mov	r5, r1
 801889e:	eb04 1442 	add.w	r4, r4, r2, lsl #5
 80188a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80188a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80188a6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80188aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80188ae:	68f3      	ldr	r3, [r6, #12]
 80188b0:	68b2      	ldr	r2, [r6, #8]
 80188b2:	f3bf 8f5b 	dmb	ish
 80188b6:	3301      	adds	r3, #1
 80188b8:	429a      	cmp	r2, r3
 80188ba:	bfd8      	it	le
 80188bc:	1a9b      	suble	r3, r3, r2
 80188be:	60f3      	str	r3, [r6, #12]
 80188c0:	bd70      	pop	{r4, r5, r6, pc}
 80188c2:	4b03      	ldr	r3, [pc, #12]	; (80188d0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x4c>)
 80188c4:	2139      	movs	r1, #57	; 0x39
 80188c6:	4a03      	ldr	r2, [pc, #12]	; (80188d4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x50>)
 80188c8:	4803      	ldr	r0, [pc, #12]	; (80188d8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 80188ca:	f011 fb8b 	bl	8029fe4 <__assert_func>
 80188ce:	bf00      	nop
 80188d0:	0802dd01 	.word	0x0802dd01
 80188d4:	0802ddf8 	.word	0x0802ddf8
 80188d8:	0802dcdb 	.word	0x0802dcdb

080188dc <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80188dc:	b510      	push	{r4, lr}
 80188de:	6803      	ldr	r3, [r0, #0]
 80188e0:	4604      	mov	r4, r0
 80188e2:	681b      	ldr	r3, [r3, #0]
 80188e4:	4798      	blx	r3
 80188e6:	b128      	cbz	r0, 80188f4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 80188e8:	4b07      	ldr	r3, [pc, #28]	; (8018908 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 80188ea:	213f      	movs	r1, #63	; 0x3f
 80188ec:	4a07      	ldr	r2, [pc, #28]	; (801890c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 80188ee:	4808      	ldr	r0, [pc, #32]	; (8018910 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 80188f0:	f011 fb78 	bl	8029fe4 <__assert_func>
 80188f4:	6923      	ldr	r3, [r4, #16]
 80188f6:	68a2      	ldr	r2, [r4, #8]
 80188f8:	f3bf 8f5b 	dmb	ish
 80188fc:	3301      	adds	r3, #1
 80188fe:	429a      	cmp	r2, r3
 8018900:	bfd8      	it	le
 8018902:	1a9b      	suble	r3, r3, r2
 8018904:	6123      	str	r3, [r4, #16]
 8018906:	bd10      	pop	{r4, pc}
 8018908:	0802dd24 	.word	0x0802dd24
 801890c:	0802de46 	.word	0x0802de46
 8018910:	0802dcdb 	.word	0x0802dcdb

08018914 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8018914:	b570      	push	{r4, r5, r6, lr}
 8018916:	4604      	mov	r4, r0
 8018918:	6840      	ldr	r0, [r0, #4]
 801891a:	6803      	ldr	r3, [r0, #0]
 801891c:	681b      	ldr	r3, [r3, #0]
 801891e:	4798      	blx	r3
 8018920:	4605      	mov	r5, r0
 8018922:	b930      	cbnz	r0, 8018932 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8018924:	7a23      	ldrb	r3, [r4, #8]
 8018926:	b123      	cbz	r3, 8018932 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8018928:	6860      	ldr	r0, [r4, #4]
 801892a:	6803      	ldr	r3, [r0, #0]
 801892c:	695b      	ldr	r3, [r3, #20]
 801892e:	4798      	blx	r3
 8018930:	7225      	strb	r5, [r4, #8]
 8018932:	6860      	ldr	r0, [r4, #4]
 8018934:	6803      	ldr	r3, [r0, #0]
 8018936:	681b      	ldr	r3, [r3, #0]
 8018938:	4798      	blx	r3
 801893a:	b928      	cbnz	r0, 8018948 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 801893c:	6823      	ldr	r3, [r4, #0]
 801893e:	4620      	mov	r0, r4
 8018940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018942:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018946:	4718      	bx	r3
 8018948:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801894c:	f7e9 bb18 	b.w	8001f80 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08018950 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8018950:	b510      	push	{r4, lr}
 8018952:	6082      	str	r2, [r0, #8]
 8018954:	2200      	movs	r2, #0
 8018956:	4c03      	ldr	r4, [pc, #12]	; (8018964 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8018958:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801895c:	e9c0 4100 	strd	r4, r1, [r0]
 8018960:	bd10      	pop	{r4, pc}
 8018962:	bf00      	nop
 8018964:	0802ddac 	.word	0x0802ddac

08018968 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8018968:	6840      	ldr	r0, [r0, #4]
 801896a:	6803      	ldr	r3, [r0, #0]
 801896c:	681b      	ldr	r3, [r3, #0]
 801896e:	4718      	bx	r3

08018970 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 8018970:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8018974:	4770      	bx	lr

08018976 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 8018976:	b510      	push	{r4, lr}
 8018978:	4604      	mov	r4, r0
 801897a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801897c:	b150      	cbz	r0, 8018994 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 801897e:	6803      	ldr	r3, [r0, #0]
 8018980:	68db      	ldr	r3, [r3, #12]
 8018982:	4798      	blx	r3
 8018984:	b130      	cbz	r0, 8018994 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8018986:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8018988:	4621      	mov	r1, r4
 801898a:	6803      	ldr	r3, [r0, #0]
 801898c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018990:	689b      	ldr	r3, [r3, #8]
 8018992:	4718      	bx	r3
 8018994:	bd10      	pop	{r4, pc}

08018996 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8018996:	790b      	ldrb	r3, [r1, #4]
 8018998:	2b00      	cmp	r3, #0
 801899a:	bf0c      	ite	eq
 801899c:	2301      	moveq	r3, #1
 801899e:	2300      	movne	r3, #0
 80189a0:	b570      	push	{r4, r5, r6, lr}
 80189a2:	4604      	mov	r4, r0
 80189a4:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 80189a8:	460e      	mov	r6, r1
 80189aa:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 80189ae:	d109      	bne.n	80189c4 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 80189b0:	b14d      	cbz	r5, 80189c6 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 80189b2:	7933      	ldrb	r3, [r6, #4]
 80189b4:	2b01      	cmp	r3, #1
 80189b6:	d10c      	bne.n	80189d2 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 80189b8:	6823      	ldr	r3, [r4, #0]
 80189ba:	4620      	mov	r0, r4
 80189bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80189be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80189c2:	4718      	bx	r3
 80189c4:	b12d      	cbz	r5, 80189d2 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 80189c6:	6823      	ldr	r3, [r4, #0]
 80189c8:	4620      	mov	r0, r4
 80189ca:	695b      	ldr	r3, [r3, #20]
 80189cc:	4798      	blx	r3
 80189ce:	2d00      	cmp	r5, #0
 80189d0:	d1ef      	bne.n	80189b2 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 80189d2:	bd70      	pop	{r4, r5, r6, pc}

080189d4 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE>:
 80189d4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80189d8:	b133      	cbz	r3, 80189e8 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE+0x14>
 80189da:	790b      	ldrb	r3, [r1, #4]
 80189dc:	2b01      	cmp	r3, #1
 80189de:	bf01      	itttt	eq
 80189e0:	8dc3      	ldrheq	r3, [r0, #46]	; 0x2e
 80189e2:	8e02      	ldrheq	r2, [r0, #48]	; 0x30
 80189e4:	8603      	strheq	r3, [r0, #48]	; 0x30
 80189e6:	85c2      	strheq	r2, [r0, #46]	; 0x2e
 80189e8:	f7ff bfd5 	b.w	8018996 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>

080189ec <_ZN8touchgfx12ToggleButton10forceStateEb>:
 80189ec:	b570      	push	{r4, r5, r6, lr}
 80189ee:	4604      	mov	r4, r0
 80189f0:	f100 0534 	add.w	r5, r0, #52	; 0x34
 80189f4:	b169      	cbz	r1, 8018a12 <_ZN8touchgfx12ToggleButton10forceStateEb+0x26>
 80189f6:	302e      	adds	r0, #46	; 0x2e
 80189f8:	f7f1 f972 	bl	8009ce0 <_ZNK8touchgfx6Bitmap5getIdEv>
 80189fc:	4606      	mov	r6, r0
 80189fe:	4628      	mov	r0, r5
 8018a00:	f7f1 f96e 	bl	8009ce0 <_ZNK8touchgfx6Bitmap5getIdEv>
 8018a04:	4286      	cmp	r6, r0
 8018a06:	d003      	beq.n	8018a10 <_ZN8touchgfx12ToggleButton10forceStateEb+0x24>
 8018a08:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8018a0a:	8623      	strh	r3, [r4, #48]	; 0x30
 8018a0c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8018a0e:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8018a10:	bd70      	pop	{r4, r5, r6, pc}
 8018a12:	3030      	adds	r0, #48	; 0x30
 8018a14:	f7f1 f964 	bl	8009ce0 <_ZNK8touchgfx6Bitmap5getIdEv>
 8018a18:	4606      	mov	r6, r0
 8018a1a:	4628      	mov	r0, r5
 8018a1c:	f7f1 f960 	bl	8009ce0 <_ZNK8touchgfx6Bitmap5getIdEv>
 8018a20:	4286      	cmp	r6, r0
 8018a22:	bf1f      	itttt	ne
 8018a24:	8e23      	ldrhne	r3, [r4, #48]	; 0x30
 8018a26:	85e3      	strhne	r3, [r4, #46]	; 0x2e
 8018a28:	8ea3      	ldrhne	r3, [r4, #52]	; 0x34
 8018a2a:	8623      	strhne	r3, [r4, #48]	; 0x30
 8018a2c:	e7f0      	b.n	8018a10 <_ZN8touchgfx12ToggleButton10forceStateEb+0x24>

08018a2e <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8018a2e:	2200      	movs	r2, #0
 8018a30:	8002      	strh	r2, [r0, #0]
 8018a32:	8042      	strh	r2, [r0, #2]
 8018a34:	8082      	strh	r2, [r0, #4]
 8018a36:	80c2      	strh	r2, [r0, #6]
 8018a38:	4770      	bx	lr

08018a3a <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 8018a3a:	b570      	push	{r4, r5, r6, lr}
 8018a3c:	6803      	ldr	r3, [r0, #0]
 8018a3e:	4604      	mov	r4, r0
 8018a40:	4615      	mov	r5, r2
 8018a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a44:	4798      	blx	r3
 8018a46:	6823      	ldr	r3, [r4, #0]
 8018a48:	4629      	mov	r1, r5
 8018a4a:	4620      	mov	r0, r4
 8018a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018a4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018a52:	4718      	bx	r3

08018a54 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8018a54:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018a56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018a5a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8018a5c:	4299      	cmp	r1, r3
 8018a5e:	d029      	beq.n	8018ab4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 8018a60:	4b15      	ldr	r3, [pc, #84]	; (8018ab8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8018a62:	681b      	ldr	r3, [r3, #0]
 8018a64:	b92b      	cbnz	r3, 8018a72 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 8018a66:	4b15      	ldr	r3, [pc, #84]	; (8018abc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8018a68:	21ae      	movs	r1, #174	; 0xae
 8018a6a:	4a15      	ldr	r2, [pc, #84]	; (8018ac0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8018a6c:	4815      	ldr	r0, [pc, #84]	; (8018ac4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8018a6e:	f011 fab9 	bl	8029fe4 <__assert_func>
 8018a72:	4a15      	ldr	r2, [pc, #84]	; (8018ac8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 8018a74:	8812      	ldrh	r2, [r2, #0]
 8018a76:	428a      	cmp	r2, r1
 8018a78:	d803      	bhi.n	8018a82 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 8018a7a:	4b14      	ldr	r3, [pc, #80]	; (8018acc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 8018a7c:	21af      	movs	r1, #175	; 0xaf
 8018a7e:	4a10      	ldr	r2, [pc, #64]	; (8018ac0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8018a80:	e7f4      	b.n	8018a6c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 8018a82:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8018a86:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8018a8a:	4b11      	ldr	r3, [pc, #68]	; (8018ad0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 8018a8c:	7854      	ldrb	r4, [r2, #1]
 8018a8e:	681b      	ldr	r3, [r3, #0]
 8018a90:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8018a94:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8018a98:	682b      	ldr	r3, [r5, #0]
 8018a9a:	69de      	ldr	r6, [r3, #28]
 8018a9c:	4b0d      	ldr	r3, [pc, #52]	; (8018ad4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 8018a9e:	6818      	ldr	r0, [r3, #0]
 8018aa0:	f7f0 ff12 	bl	80098c8 <_ZNK8touchgfx5Texts7getTextEt>
 8018aa4:	2300      	movs	r3, #0
 8018aa6:	4602      	mov	r2, r0
 8018aa8:	4621      	mov	r1, r4
 8018aaa:	9300      	str	r3, [sp, #0]
 8018aac:	4628      	mov	r0, r5
 8018aae:	47b0      	blx	r6
 8018ab0:	b002      	add	sp, #8
 8018ab2:	bd70      	pop	{r4, r5, r6, pc}
 8018ab4:	2000      	movs	r0, #0
 8018ab6:	e7fb      	b.n	8018ab0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 8018ab8:	2400b620 	.word	0x2400b620
 8018abc:	0802df54 	.word	0x0802df54
 8018ac0:	0802e08c 	.word	0x0802e08c
 8018ac4:	0802df96 	.word	0x0802df96
 8018ac8:	2400b624 	.word	0x2400b624
 8018acc:	0802dfbf 	.word	0x0802dfbf
 8018ad0:	2400b628 	.word	0x2400b628
 8018ad4:	2400b62c 	.word	0x2400b62c

08018ad8 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 8018ad8:	b570      	push	{r4, r5, r6, lr}
 8018ada:	6803      	ldr	r3, [r0, #0]
 8018adc:	4604      	mov	r4, r0
 8018ade:	b28d      	uxth	r5, r1
 8018ae0:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8018ae2:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8018ae4:	4b10      	ldr	r3, [pc, #64]	; (8018b28 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 8018ae6:	681b      	ldr	r3, [r3, #0]
 8018ae8:	b92b      	cbnz	r3, 8018af6 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 8018aea:	4b10      	ldr	r3, [pc, #64]	; (8018b2c <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 8018aec:	21ae      	movs	r1, #174	; 0xae
 8018aee:	4a10      	ldr	r2, [pc, #64]	; (8018b30 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8018af0:	4810      	ldr	r0, [pc, #64]	; (8018b34 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 8018af2:	f011 fa77 	bl	8029fe4 <__assert_func>
 8018af6:	4910      	ldr	r1, [pc, #64]	; (8018b38 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8018af8:	8809      	ldrh	r1, [r1, #0]
 8018afa:	4291      	cmp	r1, r2
 8018afc:	d803      	bhi.n	8018b06 <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 8018afe:	4b0f      	ldr	r3, [pc, #60]	; (8018b3c <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8018b00:	21af      	movs	r1, #175	; 0xaf
 8018b02:	4a0b      	ldr	r2, [pc, #44]	; (8018b30 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8018b04:	e7f4      	b.n	8018af0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 8018b06:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8018b0a:	4b0d      	ldr	r3, [pc, #52]	; (8018b40 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8018b0c:	681b      	ldr	r3, [r3, #0]
 8018b0e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8018b12:	6803      	ldr	r3, [r0, #0]
 8018b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b16:	4798      	blx	r3
 8018b18:	1a29      	subs	r1, r5, r0
 8018b1a:	4633      	mov	r3, r6
 8018b1c:	4620      	mov	r0, r4
 8018b1e:	b209      	sxth	r1, r1
 8018b20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018b24:	4718      	bx	r3
 8018b26:	bf00      	nop
 8018b28:	2400b620 	.word	0x2400b620
 8018b2c:	0802df54 	.word	0x0802df54
 8018b30:	0802e08c 	.word	0x0802e08c
 8018b34:	0802df96 	.word	0x0802df96
 8018b38:	2400b624 	.word	0x2400b624
 8018b3c:	0802dfbf 	.word	0x0802dfbf
 8018b40:	2400b628 	.word	0x2400b628

08018b44 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8018b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018b48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018b4c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8018b4e:	b08c      	sub	sp, #48	; 0x30
 8018b50:	4604      	mov	r4, r0
 8018b52:	4293      	cmp	r3, r2
 8018b54:	4688      	mov	r8, r1
 8018b56:	d05f      	beq.n	8018c18 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8018b58:	4e31      	ldr	r6, [pc, #196]	; (8018c20 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 8018b5a:	6832      	ldr	r2, [r6, #0]
 8018b5c:	b92a      	cbnz	r2, 8018b6a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 8018b5e:	4b31      	ldr	r3, [pc, #196]	; (8018c24 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 8018b60:	21ae      	movs	r1, #174	; 0xae
 8018b62:	4a31      	ldr	r2, [pc, #196]	; (8018c28 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8018b64:	4831      	ldr	r0, [pc, #196]	; (8018c2c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 8018b66:	f011 fa3d 	bl	8029fe4 <__assert_func>
 8018b6a:	4d31      	ldr	r5, [pc, #196]	; (8018c30 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 8018b6c:	8829      	ldrh	r1, [r5, #0]
 8018b6e:	4299      	cmp	r1, r3
 8018b70:	d803      	bhi.n	8018b7a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 8018b72:	4b30      	ldr	r3, [pc, #192]	; (8018c34 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 8018b74:	21af      	movs	r1, #175	; 0xaf
 8018b76:	4a2c      	ldr	r2, [pc, #176]	; (8018c28 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8018b78:	e7f4      	b.n	8018b64 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 8018b7a:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8018b7e:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8018b82:	4b2d      	ldr	r3, [pc, #180]	; (8018c38 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 8018b84:	681b      	ldr	r3, [r3, #0]
 8018b86:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8018b8a:	2a00      	cmp	r2, #0
 8018b8c:	d044      	beq.n	8018c18 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8018b8e:	784b      	ldrb	r3, [r1, #1]
 8018b90:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 8018b94:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 8018b98:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8018b9c:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 8018ba0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8018ba4:	4b25      	ldr	r3, [pc, #148]	; (8018c3c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 8018ba6:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 8018baa:	681b      	ldr	r3, [r3, #0]
 8018bac:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 8018bb0:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8018bb4:	9207      	str	r2, [sp, #28]
 8018bb6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8018bb8:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8018bbc:	f88d a020 	strb.w	sl, [sp, #32]
 8018bc0:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 8018bc4:	9009      	str	r0, [sp, #36]	; 0x24
 8018bc6:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 8018bca:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 8018bce:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 8018bd2:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 8018bd6:	b10a      	cbz	r2, 8018bdc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 8018bd8:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 8018bda:	b907      	cbnz	r7, 8018bde <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 8018bdc:	689f      	ldr	r7, [r3, #8]
 8018bde:	f10d 0914 	add.w	r9, sp, #20
 8018be2:	4621      	mov	r1, r4
 8018be4:	4648      	mov	r0, r9
 8018be6:	f003 f8f1 	bl	801bdcc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018bea:	6833      	ldr	r3, [r6, #0]
 8018bec:	2b00      	cmp	r3, #0
 8018bee:	d0b6      	beq.n	8018b5e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 8018bf0:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8018bf2:	882b      	ldrh	r3, [r5, #0]
 8018bf4:	428b      	cmp	r3, r1
 8018bf6:	d9bc      	bls.n	8018b72 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 8018bf8:	4b11      	ldr	r3, [pc, #68]	; (8018c40 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 8018bfa:	6818      	ldr	r0, [r3, #0]
 8018bfc:	f7f0 fe64 	bl	80098c8 <_ZNK8touchgfx5Texts7getTextEt>
 8018c00:	2300      	movs	r3, #0
 8018c02:	9001      	str	r0, [sp, #4]
 8018c04:	4638      	mov	r0, r7
 8018c06:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8018c0a:	ab07      	add	r3, sp, #28
 8018c0c:	9300      	str	r3, [sp, #0]
 8018c0e:	4643      	mov	r3, r8
 8018c10:	e899 0006 	ldmia.w	r9, {r1, r2}
 8018c14:	f7f0 fde9 	bl	80097ea <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8018c18:	b00c      	add	sp, #48	; 0x30
 8018c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018c1e:	bf00      	nop
 8018c20:	2400b620 	.word	0x2400b620
 8018c24:	0802df54 	.word	0x0802df54
 8018c28:	0802e08c 	.word	0x0802e08c
 8018c2c:	0802df96 	.word	0x0802df96
 8018c30:	2400b624 	.word	0x2400b624
 8018c34:	0802dfbf 	.word	0x0802dfbf
 8018c38:	2400b628 	.word	0x2400b628
 8018c3c:	2400b5d0 	.word	0x2400b5d0
 8018c40:	2400b62c 	.word	0x2400b62c

08018c44 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8018c44:	b40e      	push	{r1, r2, r3}
 8018c46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018c4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c4e:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8018c50:	b09c      	sub	sp, #112	; 0x70
 8018c52:	4604      	mov	r4, r0
 8018c54:	4293      	cmp	r3, r2
 8018c56:	d06b      	beq.n	8018d30 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>
 8018c58:	aa26      	add	r2, sp, #152	; 0x98
 8018c5a:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8018d44 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x100>
 8018c5e:	9202      	str	r2, [sp, #8]
 8018c60:	f8da 2000 	ldr.w	r2, [sl]
 8018c64:	b92a      	cbnz	r2, 8018c72 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 8018c66:	4b33      	ldr	r3, [pc, #204]	; (8018d34 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>)
 8018c68:	21ae      	movs	r1, #174	; 0xae
 8018c6a:	4a33      	ldr	r2, [pc, #204]	; (8018d38 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 8018c6c:	4833      	ldr	r0, [pc, #204]	; (8018d3c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf8>)
 8018c6e:	f011 f9b9 	bl	8029fe4 <__assert_func>
 8018c72:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8018d48 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x104>
 8018c76:	f8b8 1000 	ldrh.w	r1, [r8]
 8018c7a:	4299      	cmp	r1, r3
 8018c7c:	d803      	bhi.n	8018c86 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 8018c7e:	4b30      	ldr	r3, [pc, #192]	; (8018d40 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xfc>)
 8018c80:	21af      	movs	r1, #175	; 0xaf
 8018c82:	4a2d      	ldr	r2, [pc, #180]	; (8018d38 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 8018c84:	e7f2      	b.n	8018c6c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 8018c86:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8018d4c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x108>
 8018c8a:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8018c8e:	f8d9 3000 	ldr.w	r3, [r9]
 8018c92:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8018c96:	682b      	ldr	r3, [r5, #0]
 8018c98:	4628      	mov	r0, r5
 8018c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018c9c:	4798      	blx	r3
 8018c9e:	4606      	mov	r6, r0
 8018ca0:	b207      	sxth	r7, r0
 8018ca2:	a803      	add	r0, sp, #12
 8018ca4:	f003 fd2a 	bl	801c6fc <_ZN8touchgfx12TextProviderC1Ev>
 8018ca8:	682b      	ldr	r3, [r5, #0]
 8018caa:	4628      	mov	r0, r5
 8018cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018cae:	4798      	blx	r3
 8018cb0:	682b      	ldr	r3, [r5, #0]
 8018cb2:	4683      	mov	fp, r0
 8018cb4:	4628      	mov	r0, r5
 8018cb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018cb8:	4798      	blx	r3
 8018cba:	465b      	mov	r3, fp
 8018cbc:	9000      	str	r0, [sp, #0]
 8018cbe:	a803      	add	r0, sp, #12
 8018cc0:	9925      	ldr	r1, [sp, #148]	; 0x94
 8018cc2:	9a02      	ldr	r2, [sp, #8]
 8018cc4:	f003 fd6d 	bl	801c7a2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018cc8:	f8da 3000 	ldr.w	r3, [sl]
 8018ccc:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 8018cd0:	2b00      	cmp	r3, #0
 8018cd2:	d0c8      	beq.n	8018c66 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 8018cd4:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8018cd6:	f8b8 0000 	ldrh.w	r0, [r8]
 8018cda:	4290      	cmp	r0, r2
 8018cdc:	d9cf      	bls.n	8018c7e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 8018cde:	eb03 0542 	add.w	r5, r3, r2, lsl #1
 8018ce2:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8018ce6:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 8018cea:	786a      	ldrb	r2, [r5, #1]
 8018cec:	8925      	ldrh	r5, [r4, #8]
 8018cee:	f8d9 3000 	ldr.w	r3, [r9]
 8018cf2:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8018cf6:	eba5 050c 	sub.w	r5, r5, ip
 8018cfa:	b22d      	sxth	r5, r5
 8018cfc:	9500      	str	r5, [sp, #0]
 8018cfe:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8018d02:	a803      	add	r0, sp, #12
 8018d04:	f001 fb5b 	bl	801a3be <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8018d08:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8018d0c:	b203      	sxth	r3, r0
 8018d0e:	18b9      	adds	r1, r7, r2
 8018d10:	2900      	cmp	r1, #0
 8018d12:	dd0b      	ble.n	8018d2c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>
 8018d14:	3b01      	subs	r3, #1
 8018d16:	fb13 f302 	smulbb	r3, r3, r2
 8018d1a:	fb16 3300 	smlabb	r3, r6, r0, r3
 8018d1e:	b21f      	sxth	r7, r3
 8018d20:	4638      	mov	r0, r7
 8018d22:	b01c      	add	sp, #112	; 0x70
 8018d24:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d28:	b003      	add	sp, #12
 8018d2a:	4770      	bx	lr
 8018d2c:	2b00      	cmp	r3, #0
 8018d2e:	dcf7      	bgt.n	8018d20 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 8018d30:	2700      	movs	r7, #0
 8018d32:	e7f5      	b.n	8018d20 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 8018d34:	0802df54 	.word	0x0802df54
 8018d38:	0802e08c 	.word	0x0802e08c
 8018d3c:	0802df96 	.word	0x0802df96
 8018d40:	0802dfbf 	.word	0x0802dfbf
 8018d44:	2400b620 	.word	0x2400b620
 8018d48:	2400b624 	.word	0x2400b624
 8018d4c:	2400b628 	.word	0x2400b628

08018d50 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 8018d50:	b570      	push	{r4, r5, r6, lr}
 8018d52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018d56:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8018d58:	4604      	mov	r4, r0
 8018d5a:	4299      	cmp	r1, r3
 8018d5c:	d01e      	beq.n	8018d9c <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 8018d5e:	6803      	ldr	r3, [r0, #0]
 8018d60:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8018d62:	4b0f      	ldr	r3, [pc, #60]	; (8018da0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 8018d64:	681b      	ldr	r3, [r3, #0]
 8018d66:	b92b      	cbnz	r3, 8018d74 <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 8018d68:	4b0e      	ldr	r3, [pc, #56]	; (8018da4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 8018d6a:	21ae      	movs	r1, #174	; 0xae
 8018d6c:	4a0e      	ldr	r2, [pc, #56]	; (8018da8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8018d6e:	480f      	ldr	r0, [pc, #60]	; (8018dac <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 8018d70:	f011 f938 	bl	8029fe4 <__assert_func>
 8018d74:	4b0e      	ldr	r3, [pc, #56]	; (8018db0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 8018d76:	881b      	ldrh	r3, [r3, #0]
 8018d78:	428b      	cmp	r3, r1
 8018d7a:	d803      	bhi.n	8018d84 <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 8018d7c:	4b0d      	ldr	r3, [pc, #52]	; (8018db4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 8018d7e:	21af      	movs	r1, #175	; 0xaf
 8018d80:	4a09      	ldr	r2, [pc, #36]	; (8018da8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8018d82:	e7f4      	b.n	8018d6e <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 8018d84:	4b0c      	ldr	r3, [pc, #48]	; (8018db8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 8018d86:	6818      	ldr	r0, [r3, #0]
 8018d88:	f7f0 fd9e 	bl	80098c8 <_ZNK8touchgfx5Texts7getTextEt>
 8018d8c:	2300      	movs	r3, #0
 8018d8e:	4601      	mov	r1, r0
 8018d90:	46ac      	mov	ip, r5
 8018d92:	4620      	mov	r0, r4
 8018d94:	461a      	mov	r2, r3
 8018d96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018d9a:	4760      	bx	ip
 8018d9c:	2000      	movs	r0, #0
 8018d9e:	bd70      	pop	{r4, r5, r6, pc}
 8018da0:	2400b620 	.word	0x2400b620
 8018da4:	0802df54 	.word	0x0802df54
 8018da8:	0802e08c 	.word	0x0802e08c
 8018dac:	0802df96 	.word	0x0802df96
 8018db0:	2400b624 	.word	0x2400b624
 8018db4:	0802dfbf 	.word	0x0802dfbf
 8018db8:	2400b62c 	.word	0x2400b62c

08018dbc <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8018dbc:	b538      	push	{r3, r4, r5, lr}
 8018dbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018dc2:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8018dc4:	4604      	mov	r4, r0
 8018dc6:	429a      	cmp	r2, r3
 8018dc8:	d014      	beq.n	8018df4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8018dca:	6803      	ldr	r3, [r0, #0]
 8018dcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018dce:	4798      	blx	r3
 8018dd0:	6823      	ldr	r3, [r4, #0]
 8018dd2:	4605      	mov	r5, r0
 8018dd4:	4620      	mov	r0, r4
 8018dd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018dd8:	4798      	blx	r3
 8018dda:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8018dde:	b22d      	sxth	r5, r5
 8018de0:	4601      	mov	r1, r0
 8018de2:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8018de6:	bf06      	itte	eq
 8018de8:	4602      	moveq	r2, r0
 8018dea:	4629      	moveq	r1, r5
 8018dec:	462a      	movne	r2, r5
 8018dee:	4620      	mov	r0, r4
 8018df0:	f7eb f960 	bl	80040b4 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8018df4:	bd38      	pop	{r3, r4, r5, pc}

08018df6 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8018df6:	888a      	ldrh	r2, [r1, #4]
 8018df8:	8582      	strh	r2, [r0, #44]	; 0x2c
 8018dfa:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8018dfe:	b922      	cbnz	r2, 8018e0a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 8018e00:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8018e04:	b90b      	cbnz	r3, 8018e0a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 8018e06:	f7ff bfd9 	b.w	8018dbc <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8018e0a:	4770      	bx	lr

08018e0c <_ZNK8touchgfx3Box12getSolidRectEv>:
 8018e0c:	2300      	movs	r3, #0
 8018e0e:	8083      	strh	r3, [r0, #4]
 8018e10:	80c3      	strh	r3, [r0, #6]
 8018e12:	8003      	strh	r3, [r0, #0]
 8018e14:	8043      	strh	r3, [r0, #2]
 8018e16:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8018e1a:	2bff      	cmp	r3, #255	; 0xff
 8018e1c:	bf01      	itttt	eq
 8018e1e:	890b      	ldrheq	r3, [r1, #8]
 8018e20:	8083      	strheq	r3, [r0, #4]
 8018e22:	894b      	ldrheq	r3, [r1, #10]
 8018e24:	80c3      	strheq	r3, [r0, #6]
 8018e26:	4770      	bx	lr

08018e28 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8018e28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018e2a:	4604      	mov	r4, r0
 8018e2c:	466b      	mov	r3, sp
 8018e2e:	6808      	ldr	r0, [r1, #0]
 8018e30:	6849      	ldr	r1, [r1, #4]
 8018e32:	c303      	stmia	r3!, {r0, r1}
 8018e34:	6823      	ldr	r3, [r4, #0]
 8018e36:	4669      	mov	r1, sp
 8018e38:	4620      	mov	r0, r4
 8018e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018e3c:	4798      	blx	r3
 8018e3e:	4b08      	ldr	r3, [pc, #32]	; (8018e60 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8018e40:	681b      	ldr	r3, [r3, #0]
 8018e42:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8018e46:	b10a      	cbz	r2, 8018e4c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8018e48:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8018e4a:	b900      	cbnz	r0, 8018e4e <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8018e4c:	6898      	ldr	r0, [r3, #8]
 8018e4e:	6803      	ldr	r3, [r0, #0]
 8018e50:	4669      	mov	r1, sp
 8018e52:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8018e54:	699d      	ldr	r5, [r3, #24]
 8018e56:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8018e5a:	47a8      	blx	r5
 8018e5c:	b003      	add	sp, #12
 8018e5e:	bd30      	pop	{r4, r5, pc}
 8018e60:	2400b5d0 	.word	0x2400b5d0

08018e64 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8018e64:	b570      	push	{r4, r5, r6, lr}
 8018e66:	880b      	ldrh	r3, [r1, #0]
 8018e68:	4605      	mov	r5, r0
 8018e6a:	4604      	mov	r4, r0
 8018e6c:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8018e6e:	8813      	ldrh	r3, [r2, #0]
 8018e70:	f825 3f30 	strh.w	r3, [r5, #48]!
 8018e74:	4628      	mov	r0, r5
 8018e76:	f005 f843 	bl	801df00 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018e7a:	4606      	mov	r6, r0
 8018e7c:	4628      	mov	r0, r5
 8018e7e:	f005 f879 	bl	801df74 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018e82:	6823      	ldr	r3, [r4, #0]
 8018e84:	4605      	mov	r5, r0
 8018e86:	b231      	sxth	r1, r6
 8018e88:	4620      	mov	r0, r4
 8018e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018e8c:	4798      	blx	r3
 8018e8e:	6823      	ldr	r3, [r4, #0]
 8018e90:	b229      	sxth	r1, r5
 8018e92:	4620      	mov	r0, r4
 8018e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018e96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018e9a:	4718      	bx	r3

08018e9c <_ZNK8touchgfx6Button12getSolidRectEv>:
 8018e9c:	b510      	push	{r4, lr}
 8018e9e:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8018ea2:	4604      	mov	r4, r0
 8018ea4:	2bff      	cmp	r3, #255	; 0xff
 8018ea6:	d006      	beq.n	8018eb6 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8018ea8:	2300      	movs	r3, #0
 8018eaa:	8003      	strh	r3, [r0, #0]
 8018eac:	8043      	strh	r3, [r0, #2]
 8018eae:	8083      	strh	r3, [r0, #4]
 8018eb0:	80c3      	strh	r3, [r0, #6]
 8018eb2:	4620      	mov	r0, r4
 8018eb4:	bd10      	pop	{r4, pc}
 8018eb6:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8018eba:	b11b      	cbz	r3, 8018ec4 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8018ebc:	3130      	adds	r1, #48	; 0x30
 8018ebe:	f005 f893 	bl	801dfe8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8018ec2:	e7f6      	b.n	8018eb2 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8018ec4:	312e      	adds	r1, #46	; 0x2e
 8018ec6:	e7fa      	b.n	8018ebe <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

08018ec8 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8018ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018ecc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8018ed0:	b08a      	sub	sp, #40	; 0x28
 8018ed2:	4604      	mov	r4, r0
 8018ed4:	4688      	mov	r8, r1
 8018ed6:	2b00      	cmp	r3, #0
 8018ed8:	d044      	beq.n	8018f64 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9c>
 8018eda:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8018edc:	a805      	add	r0, sp, #20
 8018ede:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018ee2:	f005 f80d 	bl	801df00 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018ee6:	4605      	mov	r5, r0
 8018ee8:	b206      	sxth	r6, r0
 8018eea:	a805      	add	r0, sp, #20
 8018eec:	f005 f842 	bl	801df74 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018ef0:	f9b8 2000 	ldrsh.w	r2, [r8]
 8018ef4:	f8b8 7004 	ldrh.w	r7, [r8, #4]
 8018ef8:	2300      	movs	r3, #0
 8018efa:	fa0f fc80 	sxth.w	ip, r0
 8018efe:	4417      	add	r7, r2
 8018f00:	9306      	str	r3, [sp, #24]
 8018f02:	b2bf      	uxth	r7, r7
 8018f04:	fa0f fe87 	sxth.w	lr, r7
 8018f08:	459e      	cmp	lr, r3
 8018f0a:	dd2d      	ble.n	8018f68 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8018f0c:	4296      	cmp	r6, r2
 8018f0e:	dd2b      	ble.n	8018f68 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8018f10:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 8018f14:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 8018f18:	4419      	add	r1, r3
 8018f1a:	b289      	uxth	r1, r1
 8018f1c:	fa0f f881 	sxth.w	r8, r1
 8018f20:	f1b8 0f00 	cmp.w	r8, #0
 8018f24:	dd20      	ble.n	8018f68 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8018f26:	459c      	cmp	ip, r3
 8018f28:	dd1e      	ble.n	8018f68 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8018f2a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8018f2e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018f32:	4576      	cmp	r6, lr
 8018f34:	bfa8      	it	ge
 8018f36:	463d      	movge	r5, r7
 8018f38:	45c4      	cmp	ip, r8
 8018f3a:	bfa8      	it	ge
 8018f3c:	4608      	movge	r0, r1
 8018f3e:	f8ad 2018 	strh.w	r2, [sp, #24]
 8018f42:	1aad      	subs	r5, r5, r2
 8018f44:	1ac0      	subs	r0, r0, r3
 8018f46:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018f4a:	f8ad 501c 	strh.w	r5, [sp, #28]
 8018f4e:	f8ad 001e 	strh.w	r0, [sp, #30]
 8018f52:	4b1f      	ldr	r3, [pc, #124]	; (8018fd0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 8018f54:	681b      	ldr	r3, [r3, #0]
 8018f56:	b953      	cbnz	r3, 8018f6e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa6>
 8018f58:	4b1e      	ldr	r3, [pc, #120]	; (8018fd4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 8018f5a:	2187      	movs	r1, #135	; 0x87
 8018f5c:	4a1e      	ldr	r2, [pc, #120]	; (8018fd8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 8018f5e:	481f      	ldr	r0, [pc, #124]	; (8018fdc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x114>)
 8018f60:	f011 f840 	bl	8029fe4 <__assert_func>
 8018f64:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8018f66:	e7b9      	b.n	8018edc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8018f68:	2300      	movs	r3, #0
 8018f6a:	9307      	str	r3, [sp, #28]
 8018f6c:	e7f1      	b.n	8018f52 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 8018f6e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8018f72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018f76:	429a      	cmp	r2, r3
 8018f78:	d026      	beq.n	8018fc8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8018f7a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8018f7e:	2b00      	cmp	r3, #0
 8018f80:	dd22      	ble.n	8018fc8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8018f82:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8018f86:	2b00      	cmp	r3, #0
 8018f88:	dd1e      	ble.n	8018fc8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8018f8a:	2300      	movs	r3, #0
 8018f8c:	a908      	add	r1, sp, #32
 8018f8e:	4620      	mov	r0, r4
 8018f90:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8018f94:	6823      	ldr	r3, [r4, #0]
 8018f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018f98:	4798      	blx	r3
 8018f9a:	4b11      	ldr	r3, [pc, #68]	; (8018fe0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x118>)
 8018f9c:	681b      	ldr	r3, [r3, #0]
 8018f9e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8018fa2:	b10a      	cbz	r2, 8018fa8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 8018fa4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8018fa6:	b900      	cbnz	r0, 8018faa <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe2>
 8018fa8:	6898      	ldr	r0, [r3, #8]
 8018faa:	2501      	movs	r5, #1
 8018fac:	6801      	ldr	r1, [r0, #0]
 8018fae:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8018fb2:	9502      	str	r5, [sp, #8]
 8018fb4:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 8018fb8:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8018fbc:	9401      	str	r4, [sp, #4]
 8018fbe:	ac06      	add	r4, sp, #24
 8018fc0:	9400      	str	r4, [sp, #0]
 8018fc2:	688c      	ldr	r4, [r1, #8]
 8018fc4:	a905      	add	r1, sp, #20
 8018fc6:	47a0      	blx	r4
 8018fc8:	b00a      	add	sp, #40	; 0x28
 8018fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018fce:	bf00      	nop
 8018fd0:	2400b658 	.word	0x2400b658
 8018fd4:	0802e120 	.word	0x0802e120
 8018fd8:	0802e1f4 	.word	0x0802e1f4
 8018fdc:	0802e15c 	.word	0x0802e15c
 8018fe0:	2400b5d0 	.word	0x2400b5d0

08018fe4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 8018fe4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018fe6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018fea:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8018fec:	4606      	mov	r6, r0
 8018fee:	4299      	cmp	r1, r3
 8018ff0:	d02a      	beq.n	8019048 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x64>
 8018ff2:	4b16      	ldr	r3, [pc, #88]	; (801904c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x68>)
 8018ff4:	681b      	ldr	r3, [r3, #0]
 8018ff6:	b92b      	cbnz	r3, 8019004 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x20>
 8018ff8:	4b15      	ldr	r3, [pc, #84]	; (8019050 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6c>)
 8018ffa:	21ae      	movs	r1, #174	; 0xae
 8018ffc:	4a15      	ldr	r2, [pc, #84]	; (8019054 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 8018ffe:	4816      	ldr	r0, [pc, #88]	; (8019058 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x74>)
 8019000:	f010 fff0 	bl	8029fe4 <__assert_func>
 8019004:	4a15      	ldr	r2, [pc, #84]	; (801905c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x78>)
 8019006:	8812      	ldrh	r2, [r2, #0]
 8019008:	428a      	cmp	r2, r1
 801900a:	d803      	bhi.n	8019014 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x30>
 801900c:	4b14      	ldr	r3, [pc, #80]	; (8019060 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x7c>)
 801900e:	21af      	movs	r1, #175	; 0xaf
 8019010:	4a10      	ldr	r2, [pc, #64]	; (8019054 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 8019012:	e7f4      	b.n	8018ffe <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x1a>
 8019014:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8019018:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 801901c:	4b11      	ldr	r3, [pc, #68]	; (8019064 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x80>)
 801901e:	7854      	ldrb	r4, [r2, #1]
 8019020:	681b      	ldr	r3, [r3, #0]
 8019022:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8019026:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 801902a:	682b      	ldr	r3, [r5, #0]
 801902c:	69df      	ldr	r7, [r3, #28]
 801902e:	4b0e      	ldr	r3, [pc, #56]	; (8019068 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x84>)
 8019030:	6818      	ldr	r0, [r3, #0]
 8019032:	f7f0 fc49 	bl	80098c8 <_ZNK8touchgfx5Texts7getTextEt>
 8019036:	2300      	movs	r3, #0
 8019038:	4602      	mov	r2, r0
 801903a:	4621      	mov	r1, r4
 801903c:	9300      	str	r3, [sp, #0]
 801903e:	4628      	mov	r0, r5
 8019040:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8019042:	47b8      	blx	r7
 8019044:	b003      	add	sp, #12
 8019046:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019048:	2000      	movs	r0, #0
 801904a:	e7fb      	b.n	8019044 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x60>
 801904c:	2400b620 	.word	0x2400b620
 8019050:	0802df54 	.word	0x0802df54
 8019054:	0802e2a0 	.word	0x0802e2a0
 8019058:	0802df96 	.word	0x0802df96
 801905c:	2400b624 	.word	0x2400b624
 8019060:	0802dfbf 	.word	0x0802dfbf
 8019064:	2400b628 	.word	0x2400b628
 8019068:	2400b62c 	.word	0x2400b62c

0801906c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 801906c:	b570      	push	{r4, r5, r6, lr}
 801906e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019072:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8019074:	4604      	mov	r4, r0
 8019076:	4299      	cmp	r1, r3
 8019078:	d01e      	beq.n	80190b8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>
 801907a:	6803      	ldr	r3, [r0, #0]
 801907c:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 801907e:	4b0f      	ldr	r3, [pc, #60]	; (80190bc <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
 8019080:	681b      	ldr	r3, [r3, #0]
 8019082:	b92b      	cbnz	r3, 8019090 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x24>
 8019084:	4b0e      	ldr	r3, [pc, #56]	; (80190c0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
 8019086:	21ae      	movs	r1, #174	; 0xae
 8019088:	4a0e      	ldr	r2, [pc, #56]	; (80190c4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 801908a:	480f      	ldr	r0, [pc, #60]	; (80190c8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 801908c:	f010 ffaa 	bl	8029fe4 <__assert_func>
 8019090:	4b0e      	ldr	r3, [pc, #56]	; (80190cc <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
 8019092:	881b      	ldrh	r3, [r3, #0]
 8019094:	428b      	cmp	r3, r1
 8019096:	d803      	bhi.n	80190a0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x34>
 8019098:	4b0d      	ldr	r3, [pc, #52]	; (80190d0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x64>)
 801909a:	21af      	movs	r1, #175	; 0xaf
 801909c:	4a09      	ldr	r2, [pc, #36]	; (80190c4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 801909e:	e7f4      	b.n	801908a <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x1e>
 80190a0:	4b0c      	ldr	r3, [pc, #48]	; (80190d4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x68>)
 80190a2:	6818      	ldr	r0, [r3, #0]
 80190a4:	f7f0 fc10 	bl	80098c8 <_ZNK8touchgfx5Texts7getTextEt>
 80190a8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80190aa:	4601      	mov	r1, r0
 80190ac:	46ac      	mov	ip, r5
 80190ae:	4620      	mov	r0, r4
 80190b0:	2300      	movs	r3, #0
 80190b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80190b6:	4760      	bx	ip
 80190b8:	2000      	movs	r0, #0
 80190ba:	bd70      	pop	{r4, r5, r6, pc}
 80190bc:	2400b620 	.word	0x2400b620
 80190c0:	0802df54 	.word	0x0802df54
 80190c4:	0802e2a0 	.word	0x0802e2a0
 80190c8:	0802df96 	.word	0x0802df96
 80190cc:	2400b624 	.word	0x2400b624
 80190d0:	0802dfbf 	.word	0x0802dfbf
 80190d4:	2400b62c 	.word	0x2400b62c

080190d8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 80190d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80190dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80190e0:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 80190e2:	b08c      	sub	sp, #48	; 0x30
 80190e4:	4604      	mov	r4, r0
 80190e6:	4293      	cmp	r3, r2
 80190e8:	460e      	mov	r6, r1
 80190ea:	d05d      	beq.n	80191a8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 80190ec:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 80191cc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf4>
 80190f0:	f8d8 2000 	ldr.w	r2, [r8]
 80190f4:	b92a      	cbnz	r2, 8019102 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x2a>
 80190f6:	4b2e      	ldr	r3, [pc, #184]	; (80191b0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd8>)
 80190f8:	21ae      	movs	r1, #174	; 0xae
 80190fa:	4a2e      	ldr	r2, [pc, #184]	; (80191b4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 80190fc:	482e      	ldr	r0, [pc, #184]	; (80191b8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe0>)
 80190fe:	f010 ff71 	bl	8029fe4 <__assert_func>
 8019102:	4f2e      	ldr	r7, [pc, #184]	; (80191bc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe4>)
 8019104:	8839      	ldrh	r1, [r7, #0]
 8019106:	4299      	cmp	r1, r3
 8019108:	d803      	bhi.n	8019112 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x3a>
 801910a:	4b2d      	ldr	r3, [pc, #180]	; (80191c0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>)
 801910c:	21af      	movs	r1, #175	; 0xaf
 801910e:	4a29      	ldr	r2, [pc, #164]	; (80191b4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 8019110:	e7f4      	b.n	80190fc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x24>
 8019112:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8019116:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801911a:	4b2a      	ldr	r3, [pc, #168]	; (80191c4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xec>)
 801911c:	681b      	ldr	r3, [r3, #0]
 801911e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8019122:	2a00      	cmp	r2, #0
 8019124:	d040      	beq.n	80191a8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 8019126:	784b      	ldrb	r3, [r1, #1]
 8019128:	f890 5037 	ldrb.w	r5, [r0, #55]	; 0x37
 801912c:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8019130:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 8019134:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 8019138:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801913c:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 8019140:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 8019144:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8019148:	ad05      	add	r5, sp, #20
 801914a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801914c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8019150:	9207      	str	r2, [sp, #28]
 8019152:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 8019156:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 801915a:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 801915e:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 8019162:	f88d a020 	strb.w	sl, [sp, #32]
 8019166:	9009      	str	r0, [sp, #36]	; 0x24
 8019168:	f7eb f83e 	bl	80041e8 <_ZN8touchgfx3HAL3lcdEv>
 801916c:	4621      	mov	r1, r4
 801916e:	4681      	mov	r9, r0
 8019170:	4628      	mov	r0, r5
 8019172:	f002 fe2b 	bl	801bdcc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019176:	f8d8 3000 	ldr.w	r3, [r8]
 801917a:	2b00      	cmp	r3, #0
 801917c:	d0bb      	beq.n	80190f6 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x1e>
 801917e:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8019180:	883b      	ldrh	r3, [r7, #0]
 8019182:	428b      	cmp	r3, r1
 8019184:	d9c1      	bls.n	801910a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x32>
 8019186:	4b10      	ldr	r3, [pc, #64]	; (80191c8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf0>)
 8019188:	6818      	ldr	r0, [r3, #0]
 801918a:	f7f0 fb9d 	bl	80098c8 <_ZNK8touchgfx5Texts7getTextEt>
 801918e:	2300      	movs	r3, #0
 8019190:	9303      	str	r3, [sp, #12]
 8019192:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019194:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8019198:	ab07      	add	r3, sp, #28
 801919a:	4648      	mov	r0, r9
 801919c:	9300      	str	r3, [sp, #0]
 801919e:	4633      	mov	r3, r6
 80191a0:	e895 0006 	ldmia.w	r5, {r1, r2}
 80191a4:	f7f0 fb21 	bl	80097ea <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80191a8:	b00c      	add	sp, #48	; 0x30
 80191aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80191ae:	bf00      	nop
 80191b0:	0802df54 	.word	0x0802df54
 80191b4:	0802e2a0 	.word	0x0802e2a0
 80191b8:	0802df96 	.word	0x0802df96
 80191bc:	2400b624 	.word	0x2400b624
 80191c0:	0802dfbf 	.word	0x0802dfbf
 80191c4:	2400b628 	.word	0x2400b628
 80191c8:	2400b62c 	.word	0x2400b62c
 80191cc:	2400b620 	.word	0x2400b620

080191d0 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 80191d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80191d4:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 80191d6:	4604      	mov	r4, r0
 80191d8:	460e      	mov	r6, r1
 80191da:	b08e      	sub	sp, #56	; 0x38
 80191dc:	b218      	sxth	r0, r3
 80191de:	8921      	ldrh	r1, [r4, #8]
 80191e0:	005b      	lsls	r3, r3, #1
 80191e2:	8962      	ldrh	r2, [r4, #10]
 80191e4:	f8ad 0000 	strh.w	r0, [sp]
 80191e8:	b29b      	uxth	r3, r3
 80191ea:	f8ad 0002 	strh.w	r0, [sp, #2]
 80191ee:	1ac9      	subs	r1, r1, r3
 80191f0:	1ad3      	subs	r3, r2, r3
 80191f2:	b209      	sxth	r1, r1
 80191f4:	b21b      	sxth	r3, r3
 80191f6:	2900      	cmp	r1, #0
 80191f8:	f8ad 1004 	strh.w	r1, [sp, #4]
 80191fc:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019200:	dd5e      	ble.n	80192c0 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 8019202:	2b00      	cmp	r3, #0
 8019204:	dd5c      	ble.n	80192c0 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 8019206:	6830      	ldr	r0, [r6, #0]
 8019208:	ab02      	add	r3, sp, #8
 801920a:	6871      	ldr	r1, [r6, #4]
 801920c:	c303      	stmia	r3!, {r0, r1}
 801920e:	4669      	mov	r1, sp
 8019210:	a802      	add	r0, sp, #8
 8019212:	f7fe f807 	bl	8017224 <_ZN8touchgfx4RectaNERKS0_>
 8019216:	4620      	mov	r0, r4
 8019218:	a902      	add	r1, sp, #8
 801921a:	f7ff fe05 	bl	8018e28 <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 801921e:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8019220:	2800      	cmp	r0, #0
 8019222:	d05f      	beq.n	80192e4 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8019224:	8963      	ldrh	r3, [r4, #10]
 8019226:	b202      	sxth	r2, r0
 8019228:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 801922c:	2500      	movs	r5, #0
 801922e:	1a1f      	subs	r7, r3, r0
 8019230:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 8019234:	f8ad 101c 	strh.w	r1, [sp, #28]
 8019238:	b21b      	sxth	r3, r3
 801923a:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801923e:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 8019242:	af04      	add	r7, sp, #16
 8019244:	1a09      	subs	r1, r1, r0
 8019246:	9506      	str	r5, [sp, #24]
 8019248:	f8ad 201e 	strh.w	r2, [sp, #30]
 801924c:	f8ad 5020 	strh.w	r5, [sp, #32]
 8019250:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8019254:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 8019258:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801925c:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8019260:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8019264:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 8019268:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 801926c:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8019270:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8019274:	ab06      	add	r3, sp, #24
 8019276:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801927a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801927e:	e887 0003 	stmia.w	r7, {r0, r1}
 8019282:	4631      	mov	r1, r6
 8019284:	4638      	mov	r0, r7
 8019286:	f7fd ffcd 	bl	8017224 <_ZN8touchgfx4RectaNERKS0_>
 801928a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801928e:	2b00      	cmp	r3, #0
 8019290:	dd12      	ble.n	80192b8 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 8019292:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8019296:	2b00      	cmp	r3, #0
 8019298:	dd0e      	ble.n	80192b8 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 801929a:	6823      	ldr	r3, [r4, #0]
 801929c:	4639      	mov	r1, r7
 801929e:	4620      	mov	r0, r4
 80192a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80192a2:	4798      	blx	r3
 80192a4:	f7ea ffa0 	bl	80041e8 <_ZN8touchgfx3HAL3lcdEv>
 80192a8:	6803      	ldr	r3, [r0, #0]
 80192aa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80192ac:	4639      	mov	r1, r7
 80192ae:	f8d3 8018 	ldr.w	r8, [r3, #24]
 80192b2:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80192b6:	47c0      	blx	r8
 80192b8:	3501      	adds	r5, #1
 80192ba:	2d04      	cmp	r5, #4
 80192bc:	d1da      	bne.n	8019274 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 80192be:	e011      	b.n	80192e4 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 80192c0:	6830      	ldr	r0, [r6, #0]
 80192c2:	ab06      	add	r3, sp, #24
 80192c4:	6871      	ldr	r1, [r6, #4]
 80192c6:	c303      	stmia	r3!, {r0, r1}
 80192c8:	6823      	ldr	r3, [r4, #0]
 80192ca:	a906      	add	r1, sp, #24
 80192cc:	4620      	mov	r0, r4
 80192ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80192d0:	4798      	blx	r3
 80192d2:	f7ea ff89 	bl	80041e8 <_ZN8touchgfx3HAL3lcdEv>
 80192d6:	6803      	ldr	r3, [r0, #0]
 80192d8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80192da:	a906      	add	r1, sp, #24
 80192dc:	699d      	ldr	r5, [r3, #24]
 80192de:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80192e2:	47a8      	blx	r5
 80192e4:	b00e      	add	sp, #56	; 0x38
 80192e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080192ea <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 80192ea:	b570      	push	{r4, r5, r6, lr}
 80192ec:	880b      	ldrh	r3, [r1, #0]
 80192ee:	460d      	mov	r5, r1
 80192f0:	4604      	mov	r4, r0
 80192f2:	84c3      	strh	r3, [r0, #38]	; 0x26
 80192f4:	4608      	mov	r0, r1
 80192f6:	f004 fe03 	bl	801df00 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80192fa:	4606      	mov	r6, r0
 80192fc:	4628      	mov	r0, r5
 80192fe:	f004 fe39 	bl	801df74 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019302:	6823      	ldr	r3, [r4, #0]
 8019304:	4605      	mov	r5, r0
 8019306:	b231      	sxth	r1, r6
 8019308:	4620      	mov	r0, r4
 801930a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801930c:	4798      	blx	r3
 801930e:	6823      	ldr	r3, [r4, #0]
 8019310:	b229      	sxth	r1, r5
 8019312:	4620      	mov	r0, r4
 8019314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019316:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801931a:	4718      	bx	r3

0801931c <_ZNK8touchgfx5Image12getSolidRectEv>:
 801931c:	b510      	push	{r4, lr}
 801931e:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8019322:	4604      	mov	r4, r0
 8019324:	2bff      	cmp	r3, #255	; 0xff
 8019326:	d006      	beq.n	8019336 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8019328:	2300      	movs	r3, #0
 801932a:	8003      	strh	r3, [r0, #0]
 801932c:	8043      	strh	r3, [r0, #2]
 801932e:	8083      	strh	r3, [r0, #4]
 8019330:	80c3      	strh	r3, [r0, #6]
 8019332:	4620      	mov	r0, r4
 8019334:	bd10      	pop	{r4, pc}
 8019336:	3126      	adds	r1, #38	; 0x26
 8019338:	f004 fe56 	bl	801dfe8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801933c:	e7f9      	b.n	8019332 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>
	...

08019340 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8019340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019344:	4604      	mov	r4, r0
 8019346:	b088      	sub	sp, #32
 8019348:	2500      	movs	r5, #0
 801934a:	460f      	mov	r7, r1
 801934c:	f854 3b26 	ldr.w	r3, [r4], #38
 8019350:	a904      	add	r1, sp, #16
 8019352:	4606      	mov	r6, r0
 8019354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019356:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801935a:	4798      	blx	r3
 801935c:	4620      	mov	r0, r4
 801935e:	f004 fdcf 	bl	801df00 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019362:	4680      	mov	r8, r0
 8019364:	4620      	mov	r0, r4
 8019366:	f004 fe05 	bl	801df74 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801936a:	9506      	str	r5, [sp, #24]
 801936c:	ad06      	add	r5, sp, #24
 801936e:	f8ad 001e 	strh.w	r0, [sp, #30]
 8019372:	4639      	mov	r1, r7
 8019374:	f8ad 801c 	strh.w	r8, [sp, #28]
 8019378:	4628      	mov	r0, r5
 801937a:	f7fd ff53 	bl	8017224 <_ZN8touchgfx4RectaNERKS0_>
 801937e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8019382:	2b00      	cmp	r3, #0
 8019384:	dd19      	ble.n	80193ba <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8019386:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801938a:	2b00      	cmp	r3, #0
 801938c:	dd15      	ble.n	80193ba <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801938e:	4b0c      	ldr	r3, [pc, #48]	; (80193c0 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8019390:	681b      	ldr	r3, [r3, #0]
 8019392:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8019396:	b10a      	cbz	r2, 801939c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8019398:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801939a:	b900      	cbnz	r0, 801939e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 801939c:	6898      	ldr	r0, [r3, #8]
 801939e:	2701      	movs	r7, #1
 80193a0:	6801      	ldr	r1, [r0, #0]
 80193a2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80193a6:	9702      	str	r7, [sp, #8]
 80193a8:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 80193ac:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80193b0:	e9cd 5600 	strd	r5, r6, [sp]
 80193b4:	688d      	ldr	r5, [r1, #8]
 80193b6:	4621      	mov	r1, r4
 80193b8:	47a8      	blx	r5
 80193ba:	b008      	add	sp, #32
 80193bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80193c0:	2400b5d0 	.word	0x2400b5d0

080193c4 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 80193c4:	b510      	push	{r4, lr}
 80193c6:	6803      	ldr	r3, [r0, #0]
 80193c8:	460c      	mov	r4, r1
 80193ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80193cc:	4798      	blx	r3
 80193ce:	1b03      	subs	r3, r0, r4
 80193d0:	4258      	negs	r0, r3
 80193d2:	4158      	adcs	r0, r3
 80193d4:	bd10      	pop	{r4, pc}
	...

080193d8 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 80193d8:	4b01      	ldr	r3, [pc, #4]	; (80193e0 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 80193da:	6019      	str	r1, [r3, #0]
 80193dc:	4770      	bx	lr
 80193de:	bf00      	nop
 80193e0:	2400b5d8 	.word	0x2400b5d8

080193e4 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80193e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193e8:	4696      	mov	lr, r2
 80193ea:	b097      	sub	sp, #92	; 0x5c
 80193ec:	4605      	mov	r5, r0
 80193ee:	4614      	mov	r4, r2
 80193f0:	460e      	mov	r6, r1
 80193f2:	461f      	mov	r7, r3
 80193f4:	f10d 0c1c 	add.w	ip, sp, #28
 80193f8:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 80193fc:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8019400:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8019404:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019408:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801940c:	f8de 3000 	ldr.w	r3, [lr]
 8019410:	f104 0e14 	add.w	lr, r4, #20
 8019414:	f8cc 3000 	str.w	r3, [ip]
 8019418:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801941c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019420:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019424:	f8de 3000 	ldr.w	r3, [lr]
 8019428:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801942c:	f8cc 3000 	str.w	r3, [ip]
 8019430:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8019434:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019438:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801943c:	f8de 3000 	ldr.w	r3, [lr]
 8019440:	4631      	mov	r1, r6
 8019442:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8019444:	4628      	mov	r0, r5
 8019446:	f8cc 3000 	str.w	r3, [ip]
 801944a:	682b      	ldr	r3, [r5, #0]
 801944c:	9201      	str	r2, [sp, #4]
 801944e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8019450:	f8cd 8008 	str.w	r8, [sp, #8]
 8019454:	9200      	str	r2, [sp, #0]
 8019456:	aa07      	add	r2, sp, #28
 8019458:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801945c:	f8d3 b034 	ldr.w	fp, [r3, #52]	; 0x34
 8019460:	463b      	mov	r3, r7
 8019462:	47d8      	blx	fp
 8019464:	46a6      	mov	lr, r4
 8019466:	f10d 0c1c 	add.w	ip, sp, #28
 801946a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801946e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019472:	f8de 3000 	ldr.w	r3, [lr]
 8019476:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801947a:	343c      	adds	r4, #60	; 0x3c
 801947c:	f8cc 3000 	str.w	r3, [ip]
 8019480:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8019484:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019488:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801948c:	f8de 3000 	ldr.w	r3, [lr]
 8019490:	f8cc 3000 	str.w	r3, [ip]
 8019494:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8019498:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801949a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801949e:	6823      	ldr	r3, [r4, #0]
 80194a0:	4631      	mov	r1, r6
 80194a2:	4628      	mov	r0, r5
 80194a4:	f8cc 3000 	str.w	r3, [ip]
 80194a8:	682b      	ldr	r3, [r5, #0]
 80194aa:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80194ae:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80194b0:	f8cd 8008 	str.w	r8, [sp, #8]
 80194b4:	9201      	str	r2, [sp, #4]
 80194b6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80194b8:	9200      	str	r2, [sp, #0]
 80194ba:	aa07      	add	r2, sp, #28
 80194bc:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80194be:	463b      	mov	r3, r7
 80194c0:	47a0      	blx	r4
 80194c2:	b017      	add	sp, #92	; 0x5c
 80194c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080194c8 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80194c8:	2000      	movs	r0, #0
 80194ca:	4770      	bx	lr

080194cc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 80194cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194d0:	b08d      	sub	sp, #52	; 0x34
 80194d2:	4688      	mov	r8, r1
 80194d4:	f8d3 c000 	ldr.w	ip, [r3]
 80194d8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80194da:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 80194de:	680f      	ldr	r7, [r1, #0]
 80194e0:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 80194e4:	eba7 070c 	sub.w	r7, r7, ip
 80194e8:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 80194ec:	edd3 6a07 	vldr	s13, [r3, #28]
 80194f0:	42bc      	cmp	r4, r7
 80194f2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80194f4:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 80194f8:	bfa8      	it	ge
 80194fa:	463c      	movge	r4, r7
 80194fc:	f9b1 9000 	ldrsh.w	r9, [r1]
 8019500:	f9ba 1000 	ldrsh.w	r1, [sl]
 8019504:	ee07 4a90 	vmov	s15, r4
 8019508:	eb09 0e0c 	add.w	lr, r9, ip
 801950c:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8019510:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8019514:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8019518:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 801951c:	4571      	cmp	r1, lr
 801951e:	ee25 4a04 	vmul.f32	s8, s10, s8
 8019522:	ee65 4a24 	vmul.f32	s9, s10, s9
 8019526:	ee25 5a27 	vmul.f32	s10, s10, s15
 801952a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801952e:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8019532:	ee32 1a05 	vadd.f32	s2, s4, s10
 8019536:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801953a:	ee36 0a84 	vadd.f32	s0, s13, s8
 801953e:	ee61 1a87 	vmul.f32	s3, s3, s14
 8019542:	ee22 2a07 	vmul.f32	s4, s4, s14
 8019546:	f340 808c 	ble.w	8019662 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801954a:	eba1 060e 	sub.w	r6, r1, lr
 801954e:	fb96 f5f4 	sdiv	r5, r6, r4
 8019552:	ee07 5a10 	vmov	s14, r5
 8019556:	2d00      	cmp	r5, #0
 8019558:	fb04 6615 	mls	r6, r4, r5, r6
 801955c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019560:	eea7 0a04 	vfma.f32	s0, s14, s8
 8019564:	eee7 0a24 	vfma.f32	s1, s14, s9
 8019568:	eea7 1a05 	vfma.f32	s2, s14, s10
 801956c:	dd12      	ble.n	8019594 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801956e:	ee70 6a44 	vsub.f32	s13, s0, s8
 8019572:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8019576:	ee31 2a45 	vsub.f32	s4, s2, s10
 801957a:	eef5 6a40 	vcmp.f32	s13, #0.0
 801957e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019582:	bf14      	ite	ne
 8019584:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8019588:	eeb0 7a67 	vmoveq.f32	s14, s15
 801958c:	ee61 1a87 	vmul.f32	s3, s3, s14
 8019590:	ee22 2a07 	vmul.f32	s4, s4, s14
 8019594:	fb05 f204 	mul.w	r2, r5, r4
 8019598:	1abf      	subs	r7, r7, r2
 801959a:	4494      	add	ip, r2
 801959c:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80195a0:	4411      	add	r1, r2
 80195a2:	eb09 020c 	add.w	r2, r9, ip
 80195a6:	b209      	sxth	r1, r1
 80195a8:	443a      	add	r2, r7
 80195aa:	428a      	cmp	r2, r1
 80195ac:	bfc4      	itt	gt
 80195ae:	eba1 0209 	subgt.w	r2, r1, r9
 80195b2:	eba2 070c 	subgt.w	r7, r2, ip
 80195b6:	2f00      	cmp	r7, #0
 80195b8:	dd50      	ble.n	801965c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 80195ba:	fb97 f1f4 	sdiv	r1, r7, r4
 80195be:	fb04 7211 	mls	r2, r4, r1, r7
 80195c2:	b90a      	cbnz	r2, 80195c8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 80195c4:	3901      	subs	r1, #1
 80195c6:	4622      	mov	r2, r4
 80195c8:	eec7 3a80 	vdiv.f32	s7, s15, s0
 80195cc:	6840      	ldr	r0, [r0, #4]
 80195ce:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 80195d2:	44b6      	add	lr, r6
 80195d4:	f8d0 a000 	ldr.w	sl, [r0]
 80195d8:	2900      	cmp	r1, #0
 80195da:	bfcc      	ite	gt
 80195dc:	46a1      	movgt	r9, r4
 80195de:	4691      	movle	r9, r2
 80195e0:	900b      	str	r0, [sp, #44]	; 0x2c
 80195e2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80195e4:	fb04 e505 	mla	r5, r4, r5, lr
 80195e8:	eef0 6a42 	vmov.f32	s13, s4
 80195ec:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80195f0:	9008      	str	r0, [sp, #32]
 80195f2:	eeb0 7a61 	vmov.f32	s14, s3
 80195f6:	9818      	ldr	r0, [sp, #96]	; 0x60
 80195f8:	695b      	ldr	r3, [r3, #20]
 80195fa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80195fe:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8019602:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8019606:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8019608:	445b      	add	r3, fp
 801960a:	9307      	str	r3, [sp, #28]
 801960c:	ee16 3a90 	vmov	r3, s13
 8019610:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8019614:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8019618:	ee21 3a23 	vmul.f32	s6, s2, s7
 801961c:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8019620:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8019624:	ee17 7a90 	vmov	r7, s15
 8019628:	ee73 7a42 	vsub.f32	s15, s6, s4
 801962c:	fb97 f7f4 	sdiv	r7, r7, r4
 8019630:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8019634:	ee17 ca90 	vmov	ip, s15
 8019638:	fb9c fcf4 	sdiv	ip, ip, r4
 801963c:	fb0c 3306 	mla	r3, ip, r6, r3
 8019640:	9302      	str	r3, [sp, #8]
 8019642:	ee17 3a10 	vmov	r3, s14
 8019646:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801964a:	fb07 3706 	mla	r7, r7, r6, r3
 801964e:	eba9 0306 	sub.w	r3, r9, r6
 8019652:	e9cd 4700 	strd	r4, r7, [sp]
 8019656:	f8da 4008 	ldr.w	r4, [sl, #8]
 801965a:	47a0      	blx	r4
 801965c:	b00d      	add	sp, #52	; 0x34
 801965e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019662:	2500      	movs	r5, #0
 8019664:	462e      	mov	r6, r5
 8019666:	e799      	b.n	801959c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08019668 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8019668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801966c:	b0db      	sub	sp, #364	; 0x16c
 801966e:	461d      	mov	r5, r3
 8019670:	4614      	mov	r4, r2
 8019672:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8019676:	910f      	str	r1, [sp, #60]	; 0x3c
 8019678:	4629      	mov	r1, r5
 801967a:	930a      	str	r3, [sp, #40]	; 0x28
 801967c:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8019680:	9009      	str	r0, [sp, #36]	; 0x24
 8019682:	930b      	str	r3, [sp, #44]	; 0x2c
 8019684:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8019688:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 801968c:	9310      	str	r3, [sp, #64]	; 0x40
 801968e:	6803      	ldr	r3, [r0, #0]
 8019690:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 8019692:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8019696:	47b8      	blx	r7
 8019698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801969a:	6058      	str	r0, [r3, #4]
 801969c:	2800      	cmp	r0, #0
 801969e:	f000 83a1 	beq.w	8019de4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80196a2:	682b      	ldr	r3, [r5, #0]
 80196a4:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80196a8:	ed94 7a02 	vldr	s14, [r4, #8]
 80196ac:	9314      	str	r3, [sp, #80]	; 0x50
 80196ae:	686b      	ldr	r3, [r5, #4]
 80196b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80196b4:	9315      	str	r3, [sp, #84]	; 0x54
 80196b6:	4bc1      	ldr	r3, [pc, #772]	; (80199bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 80196b8:	7819      	ldrb	r1, [r3, #0]
 80196ba:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80196be:	2900      	cmp	r1, #0
 80196c0:	bf16      	itet	ne
 80196c2:	4619      	movne	r1, r3
 80196c4:	4611      	moveq	r1, r2
 80196c6:	4613      	movne	r3, r2
 80196c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196cc:	9116      	str	r1, [sp, #88]	; 0x58
 80196ce:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 80196d2:	f240 8387 	bls.w	8019de4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80196d6:	ed94 7a07 	vldr	s14, [r4, #28]
 80196da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80196de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196e2:	f240 837f 	bls.w	8019de4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80196e6:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 80196ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80196ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196f2:	f240 8377 	bls.w	8019de4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80196f6:	6822      	ldr	r2, [r4, #0]
 80196f8:	4bb1      	ldr	r3, [pc, #708]	; (80199c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 80196fa:	429a      	cmp	r2, r3
 80196fc:	f2c0 8372 	blt.w	8019de4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019700:	49b0      	ldr	r1, [pc, #704]	; (80199c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8019702:	6963      	ldr	r3, [r4, #20]
 8019704:	428a      	cmp	r2, r1
 8019706:	f300 836d 	bgt.w	8019de4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801970a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801970e:	48ae      	ldr	r0, [pc, #696]	; (80199c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8019710:	33ff      	adds	r3, #255	; 0xff
 8019712:	4283      	cmp	r3, r0
 8019714:	f200 8366 	bhi.w	8019de4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019718:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801971a:	4dac      	ldr	r5, [pc, #688]	; (80199cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801971c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8019720:	33ff      	adds	r3, #255	; 0xff
 8019722:	42ab      	cmp	r3, r5
 8019724:	f200 835e 	bhi.w	8019de4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019728:	6862      	ldr	r2, [r4, #4]
 801972a:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801972e:	33ff      	adds	r3, #255	; 0xff
 8019730:	4283      	cmp	r3, r0
 8019732:	f200 8357 	bhi.w	8019de4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019736:	69a1      	ldr	r1, [r4, #24]
 8019738:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 801973c:	33ff      	adds	r3, #255	; 0xff
 801973e:	4283      	cmp	r3, r0
 8019740:	f200 8350 	bhi.w	8019de4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019744:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8019746:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 801974a:	30ff      	adds	r0, #255	; 0xff
 801974c:	42a8      	cmp	r0, r5
 801974e:	f200 8349 	bhi.w	8019de4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019752:	428a      	cmp	r2, r1
 8019754:	f280 8110 	bge.w	8019978 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8019758:	429a      	cmp	r2, r3
 801975a:	f300 8119 	bgt.w	8019990 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801975e:	4299      	cmp	r1, r3
 8019760:	f280 811d 	bge.w	801999e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8019764:	2502      	movs	r5, #2
 8019766:	2701      	movs	r7, #1
 8019768:	46a9      	mov	r9, r5
 801976a:	46b8      	mov	r8, r7
 801976c:	f04f 0a00 	mov.w	sl, #0
 8019770:	4621      	mov	r1, r4
 8019772:	a849      	add	r0, sp, #292	; 0x124
 8019774:	f003 fd92 	bl	801d29c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8019778:	4622      	mov	r2, r4
 801977a:	4653      	mov	r3, sl
 801977c:	a949      	add	r1, sp, #292	; 0x124
 801977e:	f8cd 9000 	str.w	r9, [sp]
 8019782:	a819      	add	r0, sp, #100	; 0x64
 8019784:	f003 feba 	bl	801d4fc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8019788:	4622      	mov	r2, r4
 801978a:	4653      	mov	r3, sl
 801978c:	a949      	add	r1, sp, #292	; 0x124
 801978e:	f8cd 8000 	str.w	r8, [sp]
 8019792:	a829      	add	r0, sp, #164	; 0xa4
 8019794:	f003 feb2 	bl	801d4fc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8019798:	4643      	mov	r3, r8
 801979a:	4622      	mov	r2, r4
 801979c:	a949      	add	r1, sp, #292	; 0x124
 801979e:	f8cd 9000 	str.w	r9, [sp]
 80197a2:	a839      	add	r0, sp, #228	; 0xe4
 80197a4:	f003 feaa 	bl	801d4fc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80197a8:	42af      	cmp	r7, r5
 80197aa:	af12      	add	r7, sp, #72	; 0x48
 80197ac:	bfb7      	itett	lt
 80197ae:	2300      	movlt	r3, #0
 80197b0:	2301      	movge	r3, #1
 80197b2:	ad29      	addlt	r5, sp, #164	; 0xa4
 80197b4:	ac19      	addlt	r4, sp, #100	; 0x64
 80197b6:	bfb1      	iteee	lt
 80197b8:	930e      	strlt	r3, [sp, #56]	; 0x38
 80197ba:	ad19      	addge	r5, sp, #100	; 0x64
 80197bc:	930e      	strge	r3, [sp, #56]	; 0x38
 80197be:	ac29      	addge	r4, sp, #164	; 0xa4
 80197c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80197c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80197c6:	e887 0003 	stmia.w	r7, {r0, r1}
 80197ca:	b928      	cbnz	r0, 80197d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 80197cc:	4b80      	ldr	r3, [pc, #512]	; (80199d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 80197ce:	6818      	ldr	r0, [r3, #0]
 80197d0:	6803      	ldr	r3, [r0, #0]
 80197d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80197d4:	4798      	blx	r3
 80197d6:	6038      	str	r0, [r7, #0]
 80197d8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80197da:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80197de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80197e2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80197e4:	930c      	str	r3, [sp, #48]	; 0x30
 80197e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80197e8:	6963      	ldr	r3, [r4, #20]
 80197ea:	440b      	add	r3, r1
 80197ec:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80197f0:	4408      	add	r0, r1
 80197f2:	b200      	sxth	r0, r0
 80197f4:	4283      	cmp	r3, r0
 80197f6:	900d      	str	r0, [sp, #52]	; 0x34
 80197f8:	f280 80dd 	bge.w	80199b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 80197fc:	428b      	cmp	r3, r1
 80197fe:	da08      	bge.n	8019812 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8019800:	2a00      	cmp	r2, #0
 8019802:	dd06      	ble.n	8019812 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8019804:	1acb      	subs	r3, r1, r3
 8019806:	429a      	cmp	r2, r3
 8019808:	f2c0 80e4 	blt.w	80199d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801980c:	2b00      	cmp	r3, #0
 801980e:	f300 80e2 	bgt.w	80199d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8019812:	6967      	ldr	r7, [r4, #20]
 8019814:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8019818:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801981a:	443b      	add	r3, r7
 801981c:	461f      	mov	r7, r3
 801981e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019820:	1bdf      	subs	r7, r3, r7
 8019822:	4297      	cmp	r7, r2
 8019824:	bfa8      	it	ge
 8019826:	4617      	movge	r7, r2
 8019828:	2f00      	cmp	r7, #0
 801982a:	f340 8166 	ble.w	8019afa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801982e:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8019830:	6829      	ldr	r1, [r5, #0]
 8019832:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019836:	f9bb 3000 	ldrsh.w	r3, [fp]
 801983a:	4411      	add	r1, r2
 801983c:	6820      	ldr	r0, [r4, #0]
 801983e:	4299      	cmp	r1, r3
 8019840:	dd1a      	ble.n	8019878 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8019842:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8019846:	4402      	add	r2, r0
 8019848:	440b      	add	r3, r1
 801984a:	b21b      	sxth	r3, r3
 801984c:	429a      	cmp	r2, r3
 801984e:	dc13      	bgt.n	8019878 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8019850:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019852:	a912      	add	r1, sp, #72	; 0x48
 8019854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019856:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019858:	681b      	ldr	r3, [r3, #0]
 801985a:	9206      	str	r2, [sp, #24]
 801985c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801985e:	9500      	str	r5, [sp, #0]
 8019860:	9205      	str	r2, [sp, #20]
 8019862:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019864:	e9cd b203 	strd	fp, r2, [sp, #12]
 8019868:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801986a:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801986e:	aa49      	add	r2, sp, #292	; 0x124
 8019870:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 8019874:	4623      	mov	r3, r4
 8019876:	47c8      	blx	r9
 8019878:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801987c:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8019880:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8019884:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019888:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801988c:	68a1      	ldr	r1, [r4, #8]
 801988e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019892:	ed94 6a08 	vldr	s12, [r4, #32]
 8019896:	edd4 6a07 	vldr	s13, [r4, #28]
 801989a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801989e:	ee76 6a86 	vadd.f32	s13, s13, s12
 80198a2:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80198a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80198aa:	edc4 6a07 	vstr	s13, [r4, #28]
 80198ae:	441a      	add	r2, r3
 80198b0:	6963      	ldr	r3, [r4, #20]
 80198b2:	3301      	adds	r3, #1
 80198b4:	6022      	str	r2, [r4, #0]
 80198b6:	6163      	str	r3, [r4, #20]
 80198b8:	69a3      	ldr	r3, [r4, #24]
 80198ba:	3b01      	subs	r3, #1
 80198bc:	61a3      	str	r3, [r4, #24]
 80198be:	6923      	ldr	r3, [r4, #16]
 80198c0:	440b      	add	r3, r1
 80198c2:	68e1      	ldr	r1, [r4, #12]
 80198c4:	428b      	cmp	r3, r1
 80198c6:	6123      	str	r3, [r4, #16]
 80198c8:	db15      	blt.n	80198f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 80198ca:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 80198ce:	3201      	adds	r2, #1
 80198d0:	1a5b      	subs	r3, r3, r1
 80198d2:	ee76 6a26 	vadd.f32	s13, s12, s13
 80198d6:	6022      	str	r2, [r4, #0]
 80198d8:	6123      	str	r3, [r4, #16]
 80198da:	edc4 6a07 	vstr	s13, [r4, #28]
 80198de:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80198e2:	ee36 7a87 	vadd.f32	s14, s13, s14
 80198e6:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80198ea:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 80198ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80198f2:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80198f6:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 80198fa:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 80198fe:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8019902:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019906:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801990a:	68a9      	ldr	r1, [r5, #8]
 801990c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019910:	ed95 6a08 	vldr	s12, [r5, #32]
 8019914:	edd5 6a07 	vldr	s13, [r5, #28]
 8019918:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801991c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8019920:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8019924:	e9d5 2300 	ldrd	r2, r3, [r5]
 8019928:	edc5 6a07 	vstr	s13, [r5, #28]
 801992c:	441a      	add	r2, r3
 801992e:	696b      	ldr	r3, [r5, #20]
 8019930:	3301      	adds	r3, #1
 8019932:	602a      	str	r2, [r5, #0]
 8019934:	616b      	str	r3, [r5, #20]
 8019936:	69ab      	ldr	r3, [r5, #24]
 8019938:	3b01      	subs	r3, #1
 801993a:	61ab      	str	r3, [r5, #24]
 801993c:	692b      	ldr	r3, [r5, #16]
 801993e:	440b      	add	r3, r1
 8019940:	68e9      	ldr	r1, [r5, #12]
 8019942:	428b      	cmp	r3, r1
 8019944:	612b      	str	r3, [r5, #16]
 8019946:	db15      	blt.n	8019974 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8019948:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801994c:	3201      	adds	r2, #1
 801994e:	1a5b      	subs	r3, r3, r1
 8019950:	ee76 6a26 	vadd.f32	s13, s12, s13
 8019954:	602a      	str	r2, [r5, #0]
 8019956:	612b      	str	r3, [r5, #16]
 8019958:	edc5 6a07 	vstr	s13, [r5, #28]
 801995c:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8019960:	ee36 7a87 	vadd.f32	s14, s13, s14
 8019964:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8019968:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801996c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019970:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8019974:	3f01      	subs	r7, #1
 8019976:	e757      	b.n	8019828 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8019978:	4299      	cmp	r1, r3
 801997a:	dc13      	bgt.n	80199a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801997c:	429a      	cmp	r2, r3
 801997e:	da14      	bge.n	80199aa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8019980:	2502      	movs	r5, #2
 8019982:	2703      	movs	r7, #3
 8019984:	f04f 0800 	mov.w	r8, #0
 8019988:	46a9      	mov	r9, r5
 801998a:	f04f 0a01 	mov.w	sl, #1
 801998e:	e6ef      	b.n	8019770 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8019990:	2501      	movs	r5, #1
 8019992:	2700      	movs	r7, #0
 8019994:	46a9      	mov	r9, r5
 8019996:	46b8      	mov	r8, r7
 8019998:	f04f 0a02 	mov.w	sl, #2
 801999c:	e6e8      	b.n	8019770 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801999e:	2501      	movs	r5, #1
 80199a0:	2702      	movs	r7, #2
 80199a2:	e6e1      	b.n	8019768 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 80199a4:	2500      	movs	r5, #0
 80199a6:	2701      	movs	r7, #1
 80199a8:	e7f4      	b.n	8019994 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 80199aa:	2702      	movs	r7, #2
 80199ac:	2503      	movs	r5, #3
 80199ae:	f04f 0900 	mov.w	r9, #0
 80199b2:	46b8      	mov	r8, r7
 80199b4:	e7e9      	b.n	801998a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 80199b6:	4613      	mov	r3, r2
 80199b8:	e728      	b.n	801980c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 80199ba:	bf00      	nop
 80199bc:	2400b5c8 	.word	0x2400b5c8
 80199c0:	fffd8f01 	.word	0xfffd8f01
 80199c4:	00027100 	.word	0x00027100
 80199c8:	0004e1ff 	.word	0x0004e1ff
 80199cc:	0004e1fe 	.word	0x0004e1fe
 80199d0:	2400b5d0 	.word	0x2400b5d0
 80199d4:	4613      	mov	r3, r2
 80199d6:	992b      	ldr	r1, [sp, #172]	; 0xac
 80199d8:	469e      	mov	lr, r3
 80199da:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 80199dc:	469c      	mov	ip, r3
 80199de:	9111      	str	r1, [sp, #68]	; 0x44
 80199e0:	f04f 0900 	mov.w	r9, #0
 80199e4:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 80199e8:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 80199ec:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 80199f0:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 80199f4:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 80199f8:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80199fc:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8019a00:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8019a04:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8019a08:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8019a0c:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8019a10:	f1bc 0f00 	cmp.w	ip, #0
 8019a14:	d147      	bne.n	8019aa6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8019a16:	eb03 0c07 	add.w	ip, r3, r7
 8019a1a:	1ad7      	subs	r7, r2, r3
 8019a1c:	f1b9 0f00 	cmp.w	r9, #0
 8019a20:	d009      	beq.n	8019a36 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8019a22:	9029      	str	r0, [sp, #164]	; 0xa4
 8019a24:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8019a28:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8019a2c:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8019a30:	912d      	str	r1, [sp, #180]	; 0xb4
 8019a32:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8019a36:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8019a38:	f04f 0800 	mov.w	r8, #0
 8019a3c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8019a40:	9111      	str	r1, [sp, #68]	; 0x44
 8019a42:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8019a46:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8019a4a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8019a4e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8019a52:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8019a56:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8019a5a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8019a5e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8019a62:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8019a66:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8019a6a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8019a6e:	f1be 0f00 	cmp.w	lr, #0
 8019a72:	d031      	beq.n	8019ad8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8019a74:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8019a76:	4450      	add	r0, sl
 8019a78:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8019a7c:	4431      	add	r1, r6
 8019a7e:	ee37 7a04 	vadd.f32	s14, s14, s8
 8019a82:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8019a86:	4549      	cmp	r1, r9
 8019a88:	db08      	blt.n	8019a9c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8019a8a:	ee77 7a85 	vadd.f32	s15, s15, s10
 8019a8e:	3001      	adds	r0, #1
 8019a90:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8019a94:	eba1 0109 	sub.w	r1, r1, r9
 8019a98:	ee37 7a06 	vadd.f32	s14, s14, s12
 8019a9c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8019aa0:	f04f 0801 	mov.w	r8, #1
 8019aa4:	e7e3      	b.n	8019a6e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8019aa6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8019aa8:	4450      	add	r0, sl
 8019aaa:	ee37 7a24 	vadd.f32	s14, s14, s9
 8019aae:	4431      	add	r1, r6
 8019ab0:	ee77 7a84 	vadd.f32	s15, s15, s8
 8019ab4:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8019ab8:	4541      	cmp	r1, r8
 8019aba:	db08      	blt.n	8019ace <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8019abc:	ee76 6a85 	vadd.f32	s13, s13, s10
 8019ac0:	3001      	adds	r0, #1
 8019ac2:	ee37 7a25 	vadd.f32	s14, s14, s11
 8019ac6:	eba1 0108 	sub.w	r1, r1, r8
 8019aca:	ee77 7a86 	vadd.f32	s15, s15, s12
 8019ace:	f10c 3cff 	add.w	ip, ip, #4294967295
 8019ad2:	f04f 0901 	mov.w	r9, #1
 8019ad6:	e79b      	b.n	8019a10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8019ad8:	449c      	add	ip, r3
 8019ada:	1aff      	subs	r7, r7, r3
 8019adc:	f1b8 0f00 	cmp.w	r8, #0
 8019ae0:	d009      	beq.n	8019af6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8019ae2:	9019      	str	r0, [sp, #100]	; 0x64
 8019ae4:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8019ae8:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8019aec:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8019af0:	911d      	str	r1, [sp, #116]	; 0x74
 8019af2:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8019af6:	1ad2      	subs	r2, r2, r3
 8019af8:	e68b      	b.n	8019812 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8019afa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019afc:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8019afe:	2b00      	cmp	r3, #0
 8019b00:	f000 80d1 	beq.w	8019ca6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8019b04:	ad19      	add	r5, sp, #100	; 0x64
 8019b06:	ac39      	add	r4, sp, #228	; 0xe4
 8019b08:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8019b0a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8019b0e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019b12:	930c      	str	r3, [sp, #48]	; 0x30
 8019b14:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019b16:	6963      	ldr	r3, [r4, #20]
 8019b18:	440b      	add	r3, r1
 8019b1a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8019b1e:	4408      	add	r0, r1
 8019b20:	b200      	sxth	r0, r0
 8019b22:	4283      	cmp	r3, r0
 8019b24:	900d      	str	r0, [sp, #52]	; 0x34
 8019b26:	f280 80c1 	bge.w	8019cac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8019b2a:	428b      	cmp	r3, r1
 8019b2c:	da08      	bge.n	8019b40 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8019b2e:	2a00      	cmp	r2, #0
 8019b30:	dd06      	ble.n	8019b40 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8019b32:	1acb      	subs	r3, r1, r3
 8019b34:	429a      	cmp	r2, r3
 8019b36:	f2c0 80bb 	blt.w	8019cb0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8019b3a:	2b00      	cmp	r3, #0
 8019b3c:	f300 80b9 	bgt.w	8019cb2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8019b40:	6967      	ldr	r7, [r4, #20]
 8019b42:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8019b46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019b48:	443b      	add	r3, r7
 8019b4a:	461f      	mov	r7, r3
 8019b4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019b4e:	1bdf      	subs	r7, r3, r7
 8019b50:	4297      	cmp	r7, r2
 8019b52:	bfa8      	it	ge
 8019b54:	4617      	movge	r7, r2
 8019b56:	2f00      	cmp	r7, #0
 8019b58:	f340 813c 	ble.w	8019dd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8019b5c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8019b5e:	6829      	ldr	r1, [r5, #0]
 8019b60:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019b64:	f9bb 3000 	ldrsh.w	r3, [fp]
 8019b68:	4411      	add	r1, r2
 8019b6a:	6820      	ldr	r0, [r4, #0]
 8019b6c:	4299      	cmp	r1, r3
 8019b6e:	dd1a      	ble.n	8019ba6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8019b70:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8019b74:	4402      	add	r2, r0
 8019b76:	440b      	add	r3, r1
 8019b78:	b21b      	sxth	r3, r3
 8019b7a:	429a      	cmp	r2, r3
 8019b7c:	dc13      	bgt.n	8019ba6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8019b7e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019b80:	a912      	add	r1, sp, #72	; 0x48
 8019b82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019b84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019b86:	681b      	ldr	r3, [r3, #0]
 8019b88:	9206      	str	r2, [sp, #24]
 8019b8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019b8c:	9500      	str	r5, [sp, #0]
 8019b8e:	9205      	str	r2, [sp, #20]
 8019b90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019b92:	e9cd b203 	strd	fp, r2, [sp, #12]
 8019b96:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8019b98:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8019b9c:	aa49      	add	r2, sp, #292	; 0x124
 8019b9e:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 8019ba2:	4623      	mov	r3, r4
 8019ba4:	47c8      	blx	r9
 8019ba6:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8019baa:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8019bae:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8019bb2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019bb6:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8019bba:	68a1      	ldr	r1, [r4, #8]
 8019bbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019bc0:	ed94 6a08 	vldr	s12, [r4, #32]
 8019bc4:	edd4 6a07 	vldr	s13, [r4, #28]
 8019bc8:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8019bcc:	ee76 6a86 	vadd.f32	s13, s13, s12
 8019bd0:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8019bd4:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019bd8:	edc4 6a07 	vstr	s13, [r4, #28]
 8019bdc:	441a      	add	r2, r3
 8019bde:	6963      	ldr	r3, [r4, #20]
 8019be0:	3301      	adds	r3, #1
 8019be2:	6022      	str	r2, [r4, #0]
 8019be4:	6163      	str	r3, [r4, #20]
 8019be6:	69a3      	ldr	r3, [r4, #24]
 8019be8:	3b01      	subs	r3, #1
 8019bea:	61a3      	str	r3, [r4, #24]
 8019bec:	6923      	ldr	r3, [r4, #16]
 8019bee:	440b      	add	r3, r1
 8019bf0:	68e1      	ldr	r1, [r4, #12]
 8019bf2:	428b      	cmp	r3, r1
 8019bf4:	6123      	str	r3, [r4, #16]
 8019bf6:	db15      	blt.n	8019c24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8019bf8:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8019bfc:	3201      	adds	r2, #1
 8019bfe:	1a5b      	subs	r3, r3, r1
 8019c00:	ee76 6a26 	vadd.f32	s13, s12, s13
 8019c04:	6022      	str	r2, [r4, #0]
 8019c06:	6123      	str	r3, [r4, #16]
 8019c08:	edc4 6a07 	vstr	s13, [r4, #28]
 8019c0c:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8019c10:	ee36 7a87 	vadd.f32	s14, s13, s14
 8019c14:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8019c18:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8019c1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019c20:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8019c24:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8019c28:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8019c2c:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8019c30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019c34:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8019c38:	68a9      	ldr	r1, [r5, #8]
 8019c3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019c3e:	ed95 6a08 	vldr	s12, [r5, #32]
 8019c42:	edd5 6a07 	vldr	s13, [r5, #28]
 8019c46:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8019c4a:	ee76 6a86 	vadd.f32	s13, s13, s12
 8019c4e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8019c52:	e9d5 2300 	ldrd	r2, r3, [r5]
 8019c56:	edc5 6a07 	vstr	s13, [r5, #28]
 8019c5a:	441a      	add	r2, r3
 8019c5c:	696b      	ldr	r3, [r5, #20]
 8019c5e:	3301      	adds	r3, #1
 8019c60:	602a      	str	r2, [r5, #0]
 8019c62:	616b      	str	r3, [r5, #20]
 8019c64:	69ab      	ldr	r3, [r5, #24]
 8019c66:	3b01      	subs	r3, #1
 8019c68:	61ab      	str	r3, [r5, #24]
 8019c6a:	692b      	ldr	r3, [r5, #16]
 8019c6c:	440b      	add	r3, r1
 8019c6e:	68e9      	ldr	r1, [r5, #12]
 8019c70:	428b      	cmp	r3, r1
 8019c72:	612b      	str	r3, [r5, #16]
 8019c74:	db15      	blt.n	8019ca2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8019c76:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8019c7a:	3201      	adds	r2, #1
 8019c7c:	1a5b      	subs	r3, r3, r1
 8019c7e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8019c82:	602a      	str	r2, [r5, #0]
 8019c84:	612b      	str	r3, [r5, #16]
 8019c86:	edc5 6a07 	vstr	s13, [r5, #28]
 8019c8a:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8019c8e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8019c92:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8019c96:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8019c9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019c9e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8019ca2:	3f01      	subs	r7, #1
 8019ca4:	e757      	b.n	8019b56 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8019ca6:	ad39      	add	r5, sp, #228	; 0xe4
 8019ca8:	ac19      	add	r4, sp, #100	; 0x64
 8019caa:	e72d      	b.n	8019b08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8019cac:	4613      	mov	r3, r2
 8019cae:	e744      	b.n	8019b3a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8019cb0:	4613      	mov	r3, r2
 8019cb2:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8019cb4:	469e      	mov	lr, r3
 8019cb6:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8019cba:	461f      	mov	r7, r3
 8019cbc:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8019cc0:	f04f 0900 	mov.w	r9, #0
 8019cc4:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8019cc8:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8019ccc:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8019cd0:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8019cd4:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8019cd8:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8019cda:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8019cde:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8019ce2:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8019ce6:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8019cea:	960e      	str	r6, [sp, #56]	; 0x38
 8019cec:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8019cf0:	2f00      	cmp	r7, #0
 8019cf2:	d146      	bne.n	8019d82 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8019cf4:	449c      	add	ip, r3
 8019cf6:	1ad7      	subs	r7, r2, r3
 8019cf8:	f1b9 0f00 	cmp.w	r9, #0
 8019cfc:	d009      	beq.n	8019d12 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8019cfe:	9039      	str	r0, [sp, #228]	; 0xe4
 8019d00:	913d      	str	r1, [sp, #244]	; 0xf4
 8019d02:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8019d06:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8019d0a:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8019d0e:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8019d12:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8019d14:	f04f 0800 	mov.w	r8, #0
 8019d18:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8019d1c:	910e      	str	r1, [sp, #56]	; 0x38
 8019d1e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8019d22:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8019d26:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8019d2a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8019d2e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8019d32:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8019d36:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8019d3a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8019d3e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8019d42:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8019d46:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8019d4a:	f1be 0f00 	cmp.w	lr, #0
 8019d4e:	d030      	beq.n	8019db2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8019d50:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8019d52:	4450      	add	r0, sl
 8019d54:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8019d58:	4431      	add	r1, r6
 8019d5a:	ee37 7a04 	vadd.f32	s14, s14, s8
 8019d5e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8019d62:	4549      	cmp	r1, r9
 8019d64:	db08      	blt.n	8019d78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8019d66:	ee77 7a85 	vadd.f32	s15, s15, s10
 8019d6a:	3001      	adds	r0, #1
 8019d6c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8019d70:	eba1 0109 	sub.w	r1, r1, r9
 8019d74:	ee37 7a06 	vadd.f32	s14, s14, s12
 8019d78:	f10e 3eff 	add.w	lr, lr, #4294967295
 8019d7c:	f04f 0801 	mov.w	r8, #1
 8019d80:	e7e3      	b.n	8019d4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8019d82:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8019d84:	4450      	add	r0, sl
 8019d86:	ee37 7a24 	vadd.f32	s14, s14, s9
 8019d8a:	4431      	add	r1, r6
 8019d8c:	ee77 7a84 	vadd.f32	s15, s15, s8
 8019d90:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8019d94:	4541      	cmp	r1, r8
 8019d96:	db08      	blt.n	8019daa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8019d98:	ee76 6a85 	vadd.f32	s13, s13, s10
 8019d9c:	3001      	adds	r0, #1
 8019d9e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8019da2:	eba1 0108 	sub.w	r1, r1, r8
 8019da6:	ee77 7a86 	vadd.f32	s15, s15, s12
 8019daa:	3f01      	subs	r7, #1
 8019dac:	f04f 0901 	mov.w	r9, #1
 8019db0:	e79e      	b.n	8019cf0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8019db2:	449c      	add	ip, r3
 8019db4:	1aff      	subs	r7, r7, r3
 8019db6:	f1b8 0f00 	cmp.w	r8, #0
 8019dba:	d009      	beq.n	8019dd0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8019dbc:	9019      	str	r0, [sp, #100]	; 0x64
 8019dbe:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8019dc2:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8019dc6:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8019dca:	911d      	str	r1, [sp, #116]	; 0x74
 8019dcc:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8019dd0:	1ad2      	subs	r2, r2, r3
 8019dd2:	e6b5      	b.n	8019b40 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8019dd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019dd6:	681b      	ldr	r3, [r3, #0]
 8019dd8:	b923      	cbnz	r3, 8019de4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019dda:	4b04      	ldr	r3, [pc, #16]	; (8019dec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8019ddc:	6818      	ldr	r0, [r3, #0]
 8019dde:	6803      	ldr	r3, [r0, #0]
 8019de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019de2:	4798      	blx	r3
 8019de4:	b05b      	add	sp, #364	; 0x16c
 8019de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019dea:	bf00      	nop
 8019dec:	2400b5d0 	.word	0x2400b5d0

08019df0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 8019df0:	b570      	push	{r4, r5, r6, lr}
 8019df2:	4604      	mov	r4, r0
 8019df4:	2500      	movs	r5, #0
 8019df6:	9804      	ldr	r0, [sp, #16]
 8019df8:	7223      	strb	r3, [r4, #8]
 8019dfa:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8019dfe:	8025      	strh	r5, [r4, #0]
 8019e00:	6061      	str	r1, [r4, #4]
 8019e02:	7263      	strb	r3, [r4, #9]
 8019e04:	60e0      	str	r0, [r4, #12]
 8019e06:	8222      	strh	r2, [r4, #16]
 8019e08:	8265      	strh	r5, [r4, #18]
 8019e0a:	82a5      	strh	r5, [r4, #20]
 8019e0c:	82e5      	strh	r5, [r4, #22]
 8019e0e:	8325      	strh	r5, [r4, #24]
 8019e10:	8365      	strh	r5, [r4, #26]
 8019e12:	83a5      	strh	r5, [r4, #28]
 8019e14:	77a5      	strb	r5, [r4, #30]
 8019e16:	6803      	ldr	r3, [r0, #0]
 8019e18:	695b      	ldr	r3, [r3, #20]
 8019e1a:	4798      	blx	r3
 8019e1c:	4606      	mov	r6, r0
 8019e1e:	b1f8      	cbz	r0, 8019e60 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8019e20:	68e0      	ldr	r0, [r4, #12]
 8019e22:	4631      	mov	r1, r6
 8019e24:	6803      	ldr	r3, [r0, #0]
 8019e26:	68db      	ldr	r3, [r3, #12]
 8019e28:	4798      	blx	r3
 8019e2a:	7b43      	ldrb	r3, [r0, #13]
 8019e2c:	7a82      	ldrb	r2, [r0, #10]
 8019e2e:	4605      	mov	r5, r0
 8019e30:	005b      	lsls	r3, r3, #1
 8019e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019e36:	4313      	orrs	r3, r2
 8019e38:	83a3      	strh	r3, [r4, #28]
 8019e3a:	7a63      	ldrb	r3, [r4, #9]
 8019e3c:	2b04      	cmp	r3, #4
 8019e3e:	d10f      	bne.n	8019e60 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8019e40:	68e0      	ldr	r0, [r4, #12]
 8019e42:	462a      	mov	r2, r5
 8019e44:	4631      	mov	r1, r6
 8019e46:	6803      	ldr	r3, [r0, #0]
 8019e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019e4a:	4798      	blx	r3
 8019e4c:	7b6b      	ldrb	r3, [r5, #13]
 8019e4e:	005b      	lsls	r3, r3, #1
 8019e50:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019e54:	7aab      	ldrb	r3, [r5, #10]
 8019e56:	4313      	orrs	r3, r2
 8019e58:	4418      	add	r0, r3
 8019e5a:	8ba3      	ldrh	r3, [r4, #28]
 8019e5c:	4418      	add	r0, r3
 8019e5e:	83a0      	strh	r0, [r4, #28]
 8019e60:	4620      	mov	r0, r4
 8019e62:	bd70      	pop	{r4, r5, r6, pc}

08019e64 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8019e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e68:	2400      	movs	r4, #0
 8019e6a:	b085      	sub	sp, #20
 8019e6c:	4681      	mov	r9, r0
 8019e6e:	4688      	mov	r8, r1
 8019e70:	4692      	mov	sl, r2
 8019e72:	469b      	mov	fp, r3
 8019e74:	4627      	mov	r7, r4
 8019e76:	4625      	mov	r5, r4
 8019e78:	4626      	mov	r6, r4
 8019e7a:	4554      	cmp	r4, sl
 8019e7c:	da2a      	bge.n	8019ed4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8019e7e:	2300      	movs	r3, #0
 8019e80:	9303      	str	r3, [sp, #12]
 8019e82:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019e86:	429d      	cmp	r5, r3
 8019e88:	d004      	beq.n	8019e94 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8019e8a:	f242 030b 	movw	r3, #8203	; 0x200b
 8019e8e:	429d      	cmp	r5, r3
 8019e90:	bf18      	it	ne
 8019e92:	462f      	movne	r7, r5
 8019e94:	ab03      	add	r3, sp, #12
 8019e96:	4642      	mov	r2, r8
 8019e98:	4659      	mov	r1, fp
 8019e9a:	4648      	mov	r0, r9
 8019e9c:	f002 ff82 	bl	801cda4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019ea0:	4605      	mov	r5, r0
 8019ea2:	b1b8      	cbz	r0, 8019ed4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8019ea4:	280a      	cmp	r0, #10
 8019ea6:	d015      	beq.n	8019ed4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8019ea8:	9a03      	ldr	r2, [sp, #12]
 8019eaa:	b18a      	cbz	r2, 8019ed0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8019eac:	7b50      	ldrb	r0, [r2, #13]
 8019eae:	4639      	mov	r1, r7
 8019eb0:	7a93      	ldrb	r3, [r2, #10]
 8019eb2:	0040      	lsls	r0, r0, #1
 8019eb4:	8895      	ldrh	r5, [r2, #4]
 8019eb6:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8019eba:	4303      	orrs	r3, r0
 8019ebc:	4640      	mov	r0, r8
 8019ebe:	9301      	str	r3, [sp, #4]
 8019ec0:	f8d8 3000 	ldr.w	r3, [r8]
 8019ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019ec6:	4798      	blx	r3
 8019ec8:	9b01      	ldr	r3, [sp, #4]
 8019eca:	4418      	add	r0, r3
 8019ecc:	4406      	add	r6, r0
 8019ece:	b2b6      	uxth	r6, r6
 8019ed0:	3401      	adds	r4, #1
 8019ed2:	e7d2      	b.n	8019e7a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8019ed4:	4630      	mov	r0, r6
 8019ed6:	b005      	add	sp, #20
 8019ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019edc <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8019edc:	2a02      	cmp	r2, #2
 8019ede:	b530      	push	{r4, r5, lr}
 8019ee0:	d011      	beq.n	8019f06 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8019ee2:	2a03      	cmp	r2, #3
 8019ee4:	d01c      	beq.n	8019f20 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8019ee6:	2a01      	cmp	r2, #1
 8019ee8:	d10c      	bne.n	8019f04 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8019eea:	888b      	ldrh	r3, [r1, #4]
 8019eec:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8019ef0:	8801      	ldrh	r1, [r0, #0]
 8019ef2:	1a9b      	subs	r3, r3, r2
 8019ef4:	8844      	ldrh	r4, [r0, #2]
 8019ef6:	1a5b      	subs	r3, r3, r1
 8019ef8:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8019efc:	8004      	strh	r4, [r0, #0]
 8019efe:	8043      	strh	r3, [r0, #2]
 8019f00:	8081      	strh	r1, [r0, #4]
 8019f02:	80c2      	strh	r2, [r0, #6]
 8019f04:	bd30      	pop	{r4, r5, pc}
 8019f06:	88cb      	ldrh	r3, [r1, #6]
 8019f08:	88c2      	ldrh	r2, [r0, #6]
 8019f0a:	1a9b      	subs	r3, r3, r2
 8019f0c:	8842      	ldrh	r2, [r0, #2]
 8019f0e:	1a9b      	subs	r3, r3, r2
 8019f10:	888a      	ldrh	r2, [r1, #4]
 8019f12:	8881      	ldrh	r1, [r0, #4]
 8019f14:	8043      	strh	r3, [r0, #2]
 8019f16:	1a52      	subs	r2, r2, r1
 8019f18:	8801      	ldrh	r1, [r0, #0]
 8019f1a:	1a52      	subs	r2, r2, r1
 8019f1c:	8002      	strh	r2, [r0, #0]
 8019f1e:	e7f1      	b.n	8019f04 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8019f20:	88cb      	ldrh	r3, [r1, #6]
 8019f22:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8019f26:	8841      	ldrh	r1, [r0, #2]
 8019f28:	1a9b      	subs	r3, r3, r2
 8019f2a:	f9b0 5000 	ldrsh.w	r5, [r0]
 8019f2e:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8019f32:	1a5b      	subs	r3, r3, r1
 8019f34:	8045      	strh	r5, [r0, #2]
 8019f36:	8082      	strh	r2, [r0, #4]
 8019f38:	8003      	strh	r3, [r0, #0]
 8019f3a:	80c4      	strh	r4, [r0, #6]
 8019f3c:	e7e2      	b.n	8019f04 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08019f3e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8019f3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f42:	b09f      	sub	sp, #124	; 0x7c
 8019f44:	9116      	str	r1, [sp, #88]	; 0x58
 8019f46:	9317      	str	r3, [sp, #92]	; 0x5c
 8019f48:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8019f4a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019f4c:	8809      	ldrh	r1, [r1, #0]
 8019f4e:	889b      	ldrh	r3, [r3, #4]
 8019f50:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8019f54:	440b      	add	r3, r1
 8019f56:	9212      	str	r2, [sp, #72]	; 0x48
 8019f58:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8019f5c:	b21b      	sxth	r3, r3
 8019f5e:	9011      	str	r0, [sp, #68]	; 0x44
 8019f60:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8019f64:	9310      	str	r3, [sp, #64]	; 0x40
 8019f66:	f8d8 3000 	ldr.w	r3, [r8]
 8019f6a:	7a59      	ldrb	r1, [r3, #9]
 8019f6c:	7a1b      	ldrb	r3, [r3, #8]
 8019f6e:	9114      	str	r1, [sp, #80]	; 0x50
 8019f70:	9315      	str	r3, [sp, #84]	; 0x54
 8019f72:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019f74:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019f78:	2a00      	cmp	r2, #0
 8019f7a:	d067      	beq.n	801a04c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 8019f7c:	f898 3010 	ldrb.w	r3, [r8, #16]
 8019f80:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8019f82:	2b04      	cmp	r3, #4
 8019f84:	bf14      	ite	ne
 8019f86:	2301      	movne	r3, #1
 8019f88:	2302      	moveq	r3, #2
 8019f8a:	4413      	add	r3, r2
 8019f8c:	f04f 0900 	mov.w	r9, #0
 8019f90:	930f      	str	r3, [sp, #60]	; 0x3c
 8019f92:	464c      	mov	r4, r9
 8019f94:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8019f98:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8019f9c:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8019fa0:	4293      	cmp	r3, r2
 8019fa2:	f280 808c 	bge.w	801a0be <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8019fa6:	2300      	movs	r3, #0
 8019fa8:	931c      	str	r3, [sp, #112]	; 0x70
 8019faa:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019fae:	429c      	cmp	r4, r3
 8019fb0:	d006      	beq.n	8019fc0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 8019fb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019fb4:	f242 020b 	movw	r2, #8203	; 0x200b
 8019fb8:	4294      	cmp	r4, r2
 8019fba:	bf18      	it	ne
 8019fbc:	4623      	movne	r3, r4
 8019fbe:	930d      	str	r3, [sp, #52]	; 0x34
 8019fc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019fc2:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8019fc4:	f8d8 2000 	ldr.w	r2, [r8]
 8019fc8:	428b      	cmp	r3, r1
 8019fca:	db41      	blt.n	801a050 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8019fcc:	6813      	ldr	r3, [r2, #0]
 8019fce:	4610      	mov	r0, r2
 8019fd0:	695b      	ldr	r3, [r3, #20]
 8019fd2:	4798      	blx	r3
 8019fd4:	4604      	mov	r4, r0
 8019fd6:	f8d8 0000 	ldr.w	r0, [r8]
 8019fda:	aa1d      	add	r2, sp, #116	; 0x74
 8019fdc:	4621      	mov	r1, r4
 8019fde:	6803      	ldr	r3, [r0, #0]
 8019fe0:	689e      	ldr	r6, [r3, #8]
 8019fe2:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8019fe6:	47b0      	blx	r6
 8019fe8:	901c      	str	r0, [sp, #112]	; 0x70
 8019fea:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019fee:	429c      	cmp	r4, r3
 8019ff0:	f000 80ea 	beq.w	801a1c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8019ff4:	f242 030b 	movw	r3, #8203	; 0x200b
 8019ff8:	429c      	cmp	r4, r3
 8019ffa:	f000 80e5 	beq.w	801a1c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 8019ffe:	2c00      	cmp	r4, #0
 801a000:	f000 80f7 	beq.w	801a1f2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 801a004:	2c0a      	cmp	r4, #10
 801a006:	d060      	beq.n	801a0ca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801a008:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801a00a:	b36a      	cbz	r2, 801a068 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 801a00c:	8894      	ldrh	r4, [r2, #4]
 801a00e:	f1bb 0f00 	cmp.w	fp, #0
 801a012:	d03b      	beq.n	801a08c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 801a014:	f892 900d 	ldrb.w	r9, [r2, #13]
 801a018:	f1bb 0f01 	cmp.w	fp, #1
 801a01c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801a020:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801a024:	f892 900a 	ldrb.w	r9, [r2, #10]
 801a028:	ea49 0903 	orr.w	r9, r9, r3
 801a02c:	d134      	bne.n	801a098 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 801a02e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a030:	eba5 0509 	sub.w	r5, r5, r9
 801a034:	2b00      	cmp	r3, #0
 801a036:	d14f      	bne.n	801a0d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801a038:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a03a:	eb09 0305 	add.w	r3, r9, r5
 801a03e:	4413      	add	r3, r2
 801a040:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801a042:	f9b2 2000 	ldrsh.w	r2, [r2]
 801a046:	4293      	cmp	r3, r2
 801a048:	da51      	bge.n	801a0ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 801a04a:	e038      	b.n	801a0be <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801a04c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801a04e:	e79d      	b.n	8019f8c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 801a050:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801a054:	4659      	mov	r1, fp
 801a056:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801a058:	9301      	str	r3, [sp, #4]
 801a05a:	ab1d      	add	r3, sp, #116	; 0x74
 801a05c:	9300      	str	r3, [sp, #0]
 801a05e:	ab1c      	add	r3, sp, #112	; 0x70
 801a060:	f002 fef8 	bl	801ce54 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801a064:	4604      	mov	r4, r0
 801a066:	e7c0      	b.n	8019fea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 801a068:	f8d8 0000 	ldr.w	r0, [r8]
 801a06c:	6803      	ldr	r3, [r0, #0]
 801a06e:	691b      	ldr	r3, [r3, #16]
 801a070:	4798      	blx	r3
 801a072:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801a076:	4298      	cmp	r0, r3
 801a078:	f000 80a6 	beq.w	801a1c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801a07c:	f242 030b 	movw	r3, #8203	; 0x200b
 801a080:	4298      	cmp	r0, r3
 801a082:	f000 80a1 	beq.w	801a1c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801a086:	f1bb 0f00 	cmp.w	fp, #0
 801a08a:	d100      	bne.n	801a08e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 801a08c:	444d      	add	r5, r9
 801a08e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801a090:	2a00      	cmp	r2, #0
 801a092:	d1bf      	bne.n	801a014 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 801a094:	4691      	mov	r9, r2
 801a096:	e097      	b.n	801a1c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801a098:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a09a:	2b00      	cmp	r3, #0
 801a09c:	f000 80ab 	beq.w	801a1f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 801a0a0:	f1bb 0f00 	cmp.w	fp, #0
 801a0a4:	d118      	bne.n	801a0d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801a0a6:	f8d8 0000 	ldr.w	r0, [r8]
 801a0aa:	990d      	ldr	r1, [sp, #52]	; 0x34
 801a0ac:	6803      	ldr	r3, [r0, #0]
 801a0ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a0b0:	4798      	blx	r3
 801a0b2:	4405      	add	r5, r0
 801a0b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a0b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a0b8:	1aeb      	subs	r3, r5, r3
 801a0ba:	4293      	cmp	r3, r2
 801a0bc:	dd17      	ble.n	801a0ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 801a0be:	2c00      	cmp	r4, #0
 801a0c0:	f000 8097 	beq.w	801a1f2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 801a0c4:	2c0a      	cmp	r4, #10
 801a0c6:	f040 8085 	bne.w	801a1d4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 801a0ca:	240a      	movs	r4, #10
 801a0cc:	fab4 f084 	clz	r0, r4
 801a0d0:	0940      	lsrs	r0, r0, #5
 801a0d2:	b01f      	add	sp, #124	; 0x7c
 801a0d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0d8:	f8d8 0000 	ldr.w	r0, [r8]
 801a0dc:	990d      	ldr	r1, [sp, #52]	; 0x34
 801a0de:	6803      	ldr	r3, [r0, #0]
 801a0e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a0e2:	4798      	blx	r3
 801a0e4:	f1bb 0f01 	cmp.w	fp, #1
 801a0e8:	eba5 0500 	sub.w	r5, r5, r0
 801a0ec:	d0a4      	beq.n	801a038 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801a0ee:	981c      	ldr	r0, [sp, #112]	; 0x70
 801a0f0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801a0f2:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801a0f6:	f9b3 6000 	ldrsh.w	r6, [r3]
 801a0fa:	7b43      	ldrb	r3, [r0, #13]
 801a0fc:	4429      	add	r1, r5
 801a0fe:	015b      	lsls	r3, r3, #5
 801a100:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a104:	7983      	ldrb	r3, [r0, #6]
 801a106:	4313      	orrs	r3, r2
 801a108:	440b      	add	r3, r1
 801a10a:	42b3      	cmp	r3, r6
 801a10c:	db5c      	blt.n	801a1c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801a10e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a110:	4299      	cmp	r1, r3
 801a112:	da59      	bge.n	801a1c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801a114:	f8d8 0000 	ldr.w	r0, [r8]
 801a118:	42ae      	cmp	r6, r5
 801a11a:	6803      	ldr	r3, [r0, #0]
 801a11c:	bfcc      	ite	gt
 801a11e:	1b76      	subgt	r6, r6, r5
 801a120:	2600      	movle	r6, #0
 801a122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a124:	bfc8      	it	gt
 801a126:	b2b6      	uxthgt	r6, r6
 801a128:	4798      	blx	r3
 801a12a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801a12c:	7b5a      	ldrb	r2, [r3, #13]
 801a12e:	00d1      	lsls	r1, r2, #3
 801a130:	f401 7780 	and.w	r7, r1, #256	; 0x100
 801a134:	7a19      	ldrb	r1, [r3, #8]
 801a136:	4339      	orrs	r1, r7
 801a138:	0657      	lsls	r7, r2, #25
 801a13a:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801a13c:	bf48      	it	mi
 801a13e:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 801a142:	4407      	add	r7, r0
 801a144:	bf48      	it	mi
 801a146:	b209      	sxthmi	r1, r1
 801a148:	1a7f      	subs	r7, r7, r1
 801a14a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801a14c:	b2bf      	uxth	r7, r7
 801a14e:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801a152:	fa0f fa87 	sxth.w	sl, r7
 801a156:	4551      	cmp	r1, sl
 801a158:	dd3a      	ble.n	801a1d0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801a15a:	0112      	lsls	r2, r2, #4
 801a15c:	79d8      	ldrb	r0, [r3, #7]
 801a15e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801a162:	4302      	orrs	r2, r0
 801a164:	4492      	add	sl, r2
 801a166:	4551      	cmp	r1, sl
 801a168:	dc2e      	bgt.n	801a1c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801a16a:	1bcf      	subs	r7, r1, r7
 801a16c:	468a      	mov	sl, r1
 801a16e:	b2bf      	uxth	r7, r7
 801a170:	9319      	str	r3, [sp, #100]	; 0x64
 801a172:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a174:	f8d8 0000 	ldr.w	r0, [r8]
 801a178:	681a      	ldr	r2, [r3, #0]
 801a17a:	6801      	ldr	r1, [r0, #0]
 801a17c:	6c53      	ldr	r3, [r2, #68]	; 0x44
 801a17e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801a180:	9313      	str	r3, [sp, #76]	; 0x4c
 801a182:	9218      	str	r2, [sp, #96]	; 0x60
 801a184:	6b89      	ldr	r1, [r1, #56]	; 0x38
 801a186:	4788      	blx	r1
 801a188:	f898 1006 	ldrb.w	r1, [r8, #6]
 801a18c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a18e:	910b      	str	r1, [sp, #44]	; 0x2c
 801a190:	f898 100e 	ldrb.w	r1, [r8, #14]
 801a194:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801a196:	910a      	str	r1, [sp, #40]	; 0x28
 801a198:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 801a19c:	9109      	str	r1, [sp, #36]	; 0x24
 801a19e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801a1a2:	9305      	str	r3, [sp, #20]
 801a1a4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801a1a6:	9206      	str	r2, [sp, #24]
 801a1a8:	e9cd a601 	strd	sl, r6, [sp, #4]
 801a1ac:	442e      	add	r6, r5
 801a1ae:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801a1b2:	b236      	sxth	r6, r6
 801a1b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a1b6:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801a1ba:	9600      	str	r6, [sp, #0]
 801a1bc:	9916      	ldr	r1, [sp, #88]	; 0x58
 801a1be:	681a      	ldr	r2, [r3, #0]
 801a1c0:	9811      	ldr	r0, [sp, #68]	; 0x44
 801a1c2:	685b      	ldr	r3, [r3, #4]
 801a1c4:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801a1c6:	47b0      	blx	r6
 801a1c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a1ca:	3301      	adds	r3, #1
 801a1cc:	930e      	str	r3, [sp, #56]	; 0x38
 801a1ce:	e6e5      	b.n	8019f9c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 801a1d0:	2700      	movs	r7, #0
 801a1d2:	e7cd      	b.n	801a170 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 801a1d4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801a1d6:	3501      	adds	r5, #1
 801a1d8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801a1da:	429d      	cmp	r5, r3
 801a1dc:	f6bf af76 	bge.w	801a0cc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801a1e0:	4659      	mov	r1, fp
 801a1e2:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801a1e4:	f7ef fa50 	bl	8009688 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a1e8:	4604      	mov	r4, r0
 801a1ea:	b110      	cbz	r0, 801a1f2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 801a1ec:	280a      	cmp	r0, #10
 801a1ee:	d1f2      	bne.n	801a1d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 801a1f0:	e76b      	b.n	801a0ca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801a1f2:	2400      	movs	r4, #0
 801a1f4:	e76a      	b.n	801a0cc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801a1f6:	f1bb 0f00 	cmp.w	fp, #0
 801a1fa:	f43f af5b 	beq.w	801a0b4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801a1fe:	e776      	b.n	801a0ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

0801a200 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801a200:	b530      	push	{r4, r5, lr}
 801a202:	8a44      	ldrh	r4, [r0, #18]
 801a204:	8ac5      	ldrh	r5, [r0, #22]
 801a206:	82c3      	strh	r3, [r0, #22]
 801a208:	442c      	add	r4, r5
 801a20a:	1ae4      	subs	r4, r4, r3
 801a20c:	8b03      	ldrh	r3, [r0, #24]
 801a20e:	8244      	strh	r4, [r0, #18]
 801a210:	8a84      	ldrh	r4, [r0, #20]
 801a212:	4422      	add	r2, r4
 801a214:	440c      	add	r4, r1
 801a216:	1a59      	subs	r1, r3, r1
 801a218:	8342      	strh	r2, [r0, #26]
 801a21a:	8284      	strh	r4, [r0, #20]
 801a21c:	8301      	strh	r1, [r0, #24]
 801a21e:	bd30      	pop	{r4, r5, pc}

0801a220 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 801a220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a224:	7a43      	ldrb	r3, [r0, #9]
 801a226:	b087      	sub	sp, #28
 801a228:	4604      	mov	r4, r0
 801a22a:	460f      	mov	r7, r1
 801a22c:	1eda      	subs	r2, r3, #3
 801a22e:	b2d2      	uxtb	r2, r2
 801a230:	2900      	cmp	r1, #0
 801a232:	d036      	beq.n	801a2a2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 801a234:	2a01      	cmp	r2, #1
 801a236:	d932      	bls.n	801a29e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 801a238:	1e58      	subs	r0, r3, #1
 801a23a:	f1d0 0b00 	rsbs	fp, r0, #0
 801a23e:	eb4b 0b00 	adc.w	fp, fp, r0
 801a242:	1e99      	subs	r1, r3, #2
 801a244:	424b      	negs	r3, r1
 801a246:	414b      	adcs	r3, r1
 801a248:	9303      	str	r3, [sp, #12]
 801a24a:	2300      	movs	r3, #0
 801a24c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 801a250:	2500      	movs	r5, #0
 801a252:	f242 0a0b 	movw	sl, #8203	; 0x200b
 801a256:	46a9      	mov	r9, r5
 801a258:	8265      	strh	r5, [r4, #18]
 801a25a:	82a5      	strh	r5, [r4, #20]
 801a25c:	2300      	movs	r3, #0
 801a25e:	9305      	str	r3, [sp, #20]
 801a260:	8823      	ldrh	r3, [r4, #0]
 801a262:	2b20      	cmp	r3, #32
 801a264:	d02b      	beq.n	801a2be <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 801a266:	eba3 020a 	sub.w	r2, r3, sl
 801a26a:	4256      	negs	r6, r2
 801a26c:	4156      	adcs	r6, r2
 801a26e:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801a272:	4293      	cmp	r3, r2
 801a274:	d004      	beq.n	801a280 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801a276:	4553      	cmp	r3, sl
 801a278:	bf16      	itet	ne
 801a27a:	4699      	movne	r9, r3
 801a27c:	2601      	moveq	r6, #1
 801a27e:	2600      	movne	r6, #0
 801a280:	ab05      	add	r3, sp, #20
 801a282:	68e2      	ldr	r2, [r4, #12]
 801a284:	7a21      	ldrb	r1, [r4, #8]
 801a286:	6860      	ldr	r0, [r4, #4]
 801a288:	f002 fd8c 	bl	801cda4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a28c:	8020      	strh	r0, [r4, #0]
 801a28e:	b9c8      	cbnz	r0, 801a2c4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 801a290:	8b22      	ldrh	r2, [r4, #24]
 801a292:	2300      	movs	r3, #0
 801a294:	4611      	mov	r1, r2
 801a296:	4620      	mov	r0, r4
 801a298:	f7ff ffb2 	bl	801a200 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801a29c:	e066      	b.n	801a36c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801a29e:	468b      	mov	fp, r1
 801a2a0:	e7cf      	b.n	801a242 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 801a2a2:	3b01      	subs	r3, #1
 801a2a4:	2a01      	cmp	r2, #1
 801a2a6:	9103      	str	r1, [sp, #12]
 801a2a8:	468b      	mov	fp, r1
 801a2aa:	bf8c      	ite	hi
 801a2ac:	2200      	movhi	r2, #0
 801a2ae:	2201      	movls	r2, #1
 801a2b0:	2b01      	cmp	r3, #1
 801a2b2:	9202      	str	r2, [sp, #8]
 801a2b4:	bf8c      	ite	hi
 801a2b6:	2300      	movhi	r3, #0
 801a2b8:	2301      	movls	r3, #1
 801a2ba:	9301      	str	r3, [sp, #4]
 801a2bc:	e7c8      	b.n	801a250 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 801a2be:	4699      	mov	r9, r3
 801a2c0:	2601      	movs	r6, #1
 801a2c2:	e7dd      	b.n	801a280 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801a2c4:	8ae3      	ldrh	r3, [r4, #22]
 801a2c6:	280a      	cmp	r0, #10
 801a2c8:	f103 0301 	add.w	r3, r3, #1
 801a2cc:	82e3      	strh	r3, [r4, #22]
 801a2ce:	d0df      	beq.n	801a290 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 801a2d0:	9a05      	ldr	r2, [sp, #20]
 801a2d2:	bb42      	cbnz	r2, 801a326 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 801a2d4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801a2d8:	4298      	cmp	r0, r3
 801a2da:	d001      	beq.n	801a2e0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801a2dc:	4550      	cmp	r0, sl
 801a2de:	d1bd      	bne.n	801a25c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a2e0:	8823      	ldrh	r3, [r4, #0]
 801a2e2:	8b21      	ldrh	r1, [r4, #24]
 801a2e4:	2b20      	cmp	r3, #32
 801a2e6:	d001      	beq.n	801a2ec <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 801a2e8:	4553      	cmp	r3, sl
 801a2ea:	d131      	bne.n	801a350 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 801a2ec:	2e00      	cmp	r6, #0
 801a2ee:	bf0a      	itet	eq
 801a2f0:	460d      	moveq	r5, r1
 801a2f2:	4630      	movne	r0, r6
 801a2f4:	2001      	moveq	r0, #1
 801a2f6:	440a      	add	r2, r1
 801a2f8:	8aa3      	ldrh	r3, [r4, #20]
 801a2fa:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801a2fe:	b292      	uxth	r2, r2
 801a300:	8322      	strh	r2, [r4, #24]
 801a302:	4413      	add	r3, r2
 801a304:	2f00      	cmp	r7, #0
 801a306:	d03a      	beq.n	801a37e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 801a308:	f1bb 0f00 	cmp.w	fp, #0
 801a30c:	d102      	bne.n	801a314 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 801a30e:	9903      	ldr	r1, [sp, #12]
 801a310:	b301      	cbz	r1, 801a354 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801a312:	b1f8      	cbz	r0, 801a354 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801a314:	8ba1      	ldrh	r1, [r4, #28]
 801a316:	4419      	add	r1, r3
 801a318:	458c      	cmp	ip, r1
 801a31a:	da2a      	bge.n	801a372 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801a31c:	8a61      	ldrh	r1, [r4, #18]
 801a31e:	b341      	cbz	r1, 801a372 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801a320:	4563      	cmp	r3, ip
 801a322:	dd9b      	ble.n	801a25c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a324:	e01c      	b.n	801a360 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 801a326:	8893      	ldrh	r3, [r2, #4]
 801a328:	4649      	mov	r1, r9
 801a32a:	8023      	strh	r3, [r4, #0]
 801a32c:	f892 800d 	ldrb.w	r8, [r2, #13]
 801a330:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801a334:	f408 7080 	and.w	r0, r8, #256	; 0x100
 801a338:	f892 800a 	ldrb.w	r8, [r2, #10]
 801a33c:	ea48 0800 	orr.w	r8, r8, r0
 801a340:	68e0      	ldr	r0, [r4, #12]
 801a342:	6803      	ldr	r3, [r0, #0]
 801a344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a346:	4798      	blx	r3
 801a348:	eb08 0200 	add.w	r2, r8, r0
 801a34c:	b292      	uxth	r2, r2
 801a34e:	e7c7      	b.n	801a2e0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801a350:	2000      	movs	r0, #0
 801a352:	e7d0      	b.n	801a2f6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 801a354:	4563      	cmp	r3, ip
 801a356:	dd81      	ble.n	801a25c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a358:	8a63      	ldrh	r3, [r4, #18]
 801a35a:	2b00      	cmp	r3, #0
 801a35c:	f43f af7e 	beq.w	801a25c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a360:	2301      	movs	r3, #1
 801a362:	8ba2      	ldrh	r2, [r4, #28]
 801a364:	77a3      	strb	r3, [r4, #30]
 801a366:	8b63      	ldrh	r3, [r4, #26]
 801a368:	4413      	add	r3, r2
 801a36a:	8363      	strh	r3, [r4, #26]
 801a36c:	b007      	add	sp, #28
 801a36e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a372:	2300      	movs	r3, #0
 801a374:	4611      	mov	r1, r2
 801a376:	4620      	mov	r0, r4
 801a378:	f7ff ff42 	bl	801a200 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801a37c:	e76e      	b.n	801a25c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a37e:	4563      	cmp	r3, ip
 801a380:	dd14      	ble.n	801a3ac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 801a382:	9b02      	ldr	r3, [sp, #8]
 801a384:	b113      	cbz	r3, 801a38c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 801a386:	2301      	movs	r3, #1
 801a388:	460a      	mov	r2, r1
 801a38a:	e783      	b.n	801a294 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 801a38c:	9b01      	ldr	r3, [sp, #4]
 801a38e:	2b00      	cmp	r3, #0
 801a390:	f43f af64 	beq.w	801a25c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a394:	2800      	cmp	r0, #0
 801a396:	f47f af61 	bne.w	801a25c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a39a:	b116      	cbz	r6, 801a3a2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 801a39c:	2301      	movs	r3, #1
 801a39e:	462a      	mov	r2, r5
 801a3a0:	e779      	b.n	801a296 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 801a3a2:	8a63      	ldrh	r3, [r4, #18]
 801a3a4:	2b00      	cmp	r3, #0
 801a3a6:	f43f af59 	beq.w	801a25c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a3aa:	e7df      	b.n	801a36c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801a3ac:	2800      	cmp	r0, #0
 801a3ae:	f47f af55 	bne.w	801a25c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a3b2:	2e00      	cmp	r6, #0
 801a3b4:	f43f af52 	beq.w	801a25c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a3b8:	2301      	movs	r3, #1
 801a3ba:	462a      	mov	r2, r5
 801a3bc:	e7db      	b.n	801a376 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

0801a3be <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801a3be:	b530      	push	{r4, r5, lr}
 801a3c0:	4605      	mov	r5, r0
 801a3c2:	b08b      	sub	sp, #44	; 0x2c
 801a3c4:	b191      	cbz	r1, 801a3ec <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 801a3c6:	2401      	movs	r4, #1
 801a3c8:	e9cd 3100 	strd	r3, r1, [sp]
 801a3cc:	4613      	mov	r3, r2
 801a3ce:	4601      	mov	r1, r0
 801a3d0:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801a3d4:	a802      	add	r0, sp, #8
 801a3d6:	f7ff fd0b 	bl	8019df0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801a3da:	2100      	movs	r1, #0
 801a3dc:	a802      	add	r0, sp, #8
 801a3de:	f7ff ff1f 	bl	801a220 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801a3e2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801a3e6:	b163      	cbz	r3, 801a402 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 801a3e8:	3401      	adds	r4, #1
 801a3ea:	e7f6      	b.n	801a3da <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 801a3ec:	2401      	movs	r4, #1
 801a3ee:	f002 fdd3 	bl	801cf98 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a3f2:	280a      	cmp	r0, #10
 801a3f4:	4628      	mov	r0, r5
 801a3f6:	bf08      	it	eq
 801a3f8:	3401      	addeq	r4, #1
 801a3fa:	f002 fdcd 	bl	801cf98 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a3fe:	2800      	cmp	r0, #0
 801a400:	d1f7      	bne.n	801a3f2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801a402:	b2a0      	uxth	r0, r4
 801a404:	b00b      	add	sp, #44	; 0x2c
 801a406:	bd30      	pop	{r4, r5, pc}

0801a408 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801a408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a40c:	b0e5      	sub	sp, #404	; 0x194
 801a40e:	4689      	mov	r9, r1
 801a410:	461c      	mov	r4, r3
 801a412:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 801a416:	900a      	str	r0, [sp, #40]	; 0x28
 801a418:	f1ba 0f00 	cmp.w	sl, #0
 801a41c:	f000 80b4 	beq.w	801a588 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801a420:	681b      	ldr	r3, [r3, #0]
 801a422:	2b00      	cmp	r3, #0
 801a424:	f000 80b0 	beq.w	801a588 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801a428:	7ba3      	ldrb	r3, [r4, #14]
 801a42a:	2b00      	cmp	r3, #0
 801a42c:	f000 80ac 	beq.w	801a588 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801a430:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 801a434:	6810      	ldr	r0, [r2, #0]
 801a436:	6851      	ldr	r1, [r2, #4]
 801a438:	2500      	movs	r5, #0
 801a43a:	4643      	mov	r3, r8
 801a43c:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 801a440:	950f      	str	r5, [sp, #60]	; 0x3c
 801a442:	af19      	add	r7, sp, #100	; 0x64
 801a444:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801a448:	79a2      	ldrb	r2, [r4, #6]
 801a44a:	c303      	stmia	r3!, {r0, r1}
 801a44c:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 801a450:	a90f      	add	r1, sp, #60	; 0x3c
 801a452:	4640      	mov	r0, r8
 801a454:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801a458:	f7ff fd40 	bl	8019edc <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801a45c:	a90f      	add	r1, sp, #60	; 0x3c
 801a45e:	79a2      	ldrb	r2, [r4, #6]
 801a460:	4608      	mov	r0, r1
 801a462:	f7ff fd3b 	bl	8019edc <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801a466:	4638      	mov	r0, r7
 801a468:	f002 f948 	bl	801c6fc <_ZN8touchgfx12TextProviderC1Ev>
 801a46c:	6820      	ldr	r0, [r4, #0]
 801a46e:	6803      	ldr	r3, [r0, #0]
 801a470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a472:	4798      	blx	r3
 801a474:	4606      	mov	r6, r0
 801a476:	6820      	ldr	r0, [r4, #0]
 801a478:	6803      	ldr	r3, [r0, #0]
 801a47a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a47c:	4798      	blx	r3
 801a47e:	4633      	mov	r3, r6
 801a480:	9000      	str	r0, [sp, #0]
 801a482:	4651      	mov	r1, sl
 801a484:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 801a486:	4638      	mov	r0, r7
 801a488:	f002 f98b 	bl	801c7a2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a48c:	7923      	ldrb	r3, [r4, #4]
 801a48e:	6820      	ldr	r0, [r4, #0]
 801a490:	9308      	str	r3, [sp, #32]
 801a492:	6803      	ldr	r3, [r0, #0]
 801a494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a496:	4798      	blx	r3
 801a498:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a49c:	181e      	adds	r6, r3, r0
 801a49e:	42ae      	cmp	r6, r5
 801a4a0:	dd06      	ble.n	801a4b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 801a4a2:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 801a4a6:	4282      	cmp	r2, r0
 801a4a8:	bfa4      	itt	ge
 801a4aa:	189d      	addge	r5, r3, r2
 801a4ac:	fb95 f5f6 	sdivge	r5, r5, r6
 801a4b0:	a832      	add	r0, sp, #200	; 0xc8
 801a4b2:	f002 f923 	bl	801c6fc <_ZN8touchgfx12TextProviderC1Ev>
 801a4b6:	7c23      	ldrb	r3, [r4, #16]
 801a4b8:	b17b      	cbz	r3, 801a4da <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 801a4ba:	6820      	ldr	r0, [r4, #0]
 801a4bc:	6803      	ldr	r3, [r0, #0]
 801a4be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a4c0:	4798      	blx	r3
 801a4c2:	4683      	mov	fp, r0
 801a4c4:	6820      	ldr	r0, [r4, #0]
 801a4c6:	6803      	ldr	r3, [r0, #0]
 801a4c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a4ca:	4798      	blx	r3
 801a4cc:	465b      	mov	r3, fp
 801a4ce:	9000      	str	r0, [sp, #0]
 801a4d0:	4651      	mov	r1, sl
 801a4d2:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 801a4d4:	a832      	add	r0, sp, #200	; 0xc8
 801a4d6:	f002 f964 	bl	801c7a2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a4da:	7be1      	ldrb	r1, [r4, #15]
 801a4dc:	a811      	add	r0, sp, #68	; 0x44
 801a4de:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801a4e2:	7963      	ldrb	r3, [r4, #5]
 801a4e4:	1a52      	subs	r2, r2, r1
 801a4e6:	7c21      	ldrb	r1, [r4, #16]
 801a4e8:	9101      	str	r1, [sp, #4]
 801a4ea:	b292      	uxth	r2, r2
 801a4ec:	6821      	ldr	r1, [r4, #0]
 801a4ee:	9100      	str	r1, [sp, #0]
 801a4f0:	a932      	add	r1, sp, #200	; 0xc8
 801a4f2:	f7ff fc7d 	bl	8019df0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801a4f6:	7c23      	ldrb	r3, [r4, #16]
 801a4f8:	b9bb      	cbnz	r3, 801a52a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 801a4fa:	fa1f fa86 	uxth.w	sl, r6
 801a4fe:	2d00      	cmp	r5, #0
 801a500:	dd45      	ble.n	801a58e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801a502:	4638      	mov	r0, r7
 801a504:	f002 fd48 	bl	801cf98 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a508:	2800      	cmp	r0, #0
 801a50a:	d03d      	beq.n	801a588 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801a50c:	280a      	cmp	r0, #10
 801a50e:	d1f6      	bne.n	801a4fe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 801a510:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801a514:	3d01      	subs	r5, #1
 801a516:	4453      	add	r3, sl
 801a518:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801a51c:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801a520:	eba3 030a 	sub.w	r3, r3, sl
 801a524:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801a528:	e7e9      	b.n	801a4fe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 801a52a:	0073      	lsls	r3, r6, #1
 801a52c:	f64f 7bff 	movw	fp, #65535	; 0xffff
 801a530:	fa1f fa86 	uxth.w	sl, r6
 801a534:	9309      	str	r3, [sp, #36]	; 0x24
 801a536:	2d00      	cmp	r5, #0
 801a538:	dd29      	ble.n	801a58e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801a53a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801a53e:	a811      	add	r0, sp, #68	; 0x44
 801a540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a542:	428b      	cmp	r3, r1
 801a544:	bfd4      	ite	le
 801a546:	2100      	movle	r1, #0
 801a548:	2101      	movgt	r1, #1
 801a54a:	f7ff fe69 	bl	801a220 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801a54e:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801a552:	3b01      	subs	r3, #1
 801a554:	b29b      	uxth	r3, r3
 801a556:	455b      	cmp	r3, fp
 801a558:	930b      	str	r3, [sp, #44]	; 0x2c
 801a55a:	d005      	beq.n	801a568 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 801a55c:	7961      	ldrb	r1, [r4, #5]
 801a55e:	4638      	mov	r0, r7
 801a560:	f7ef f892 	bl	8009688 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a564:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a566:	e7f4      	b.n	801a552 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 801a568:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801a56c:	3d01      	subs	r5, #1
 801a56e:	4453      	add	r3, sl
 801a570:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801a574:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801a578:	eba3 030a 	sub.w	r3, r3, sl
 801a57c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801a580:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801a584:	2b00      	cmp	r3, #0
 801a586:	d1d6      	bne.n	801a536 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 801a588:	b065      	add	sp, #404	; 0x194
 801a58a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a58e:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 801a592:	ad4b      	add	r5, sp, #300	; 0x12c
 801a594:	f04f 0b00 	mov.w	fp, #0
 801a598:	7c23      	ldrb	r3, [r4, #16]
 801a59a:	2b00      	cmp	r3, #0
 801a59c:	d067      	beq.n	801a66e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
 801a59e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801a5a2:	a811      	add	r0, sp, #68	; 0x44
 801a5a4:	458a      	cmp	sl, r1
 801a5a6:	bfd4      	ite	le
 801a5a8:	2100      	movle	r1, #0
 801a5aa:	2101      	movgt	r1, #1
 801a5ac:	f7ff fe38 	bl	801a220 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801a5b0:	9b08      	ldr	r3, [sp, #32]
 801a5b2:	2b00      	cmp	r3, #0
 801a5b4:	d056      	beq.n	801a664 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801a5b6:	7c23      	ldrb	r3, [r4, #16]
 801a5b8:	2264      	movs	r2, #100	; 0x64
 801a5ba:	4639      	mov	r1, r7
 801a5bc:	4628      	mov	r0, r5
 801a5be:	9309      	str	r3, [sp, #36]	; 0x24
 801a5c0:	f00f fe88 	bl	802a2d4 <memcpy>
 801a5c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a5c6:	2b00      	cmp	r3, #0
 801a5c8:	d059      	beq.n	801a67e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x276>
 801a5ca:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801a5ce:	7922      	ldrb	r2, [r4, #4]
 801a5d0:	2a01      	cmp	r2, #1
 801a5d2:	d13d      	bne.n	801a650 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 801a5d4:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 801a5d8:	1ac0      	subs	r0, r0, r3
 801a5da:	2302      	movs	r3, #2
 801a5dc:	fb90 f0f3 	sdiv	r0, r0, r3
 801a5e0:	b200      	sxth	r0, r0
 801a5e2:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801a5e6:	4418      	add	r0, r3
 801a5e8:	7c23      	ldrb	r3, [r4, #16]
 801a5ea:	f8ad 012c 	strh.w	r0, [sp, #300]	; 0x12c
 801a5ee:	2b00      	cmp	r3, #0
 801a5f0:	d03a      	beq.n	801a668 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 801a5f2:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 801a5f6:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 801a5fa:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801a5fe:	9500      	str	r5, [sp, #0]
 801a600:	980a      	ldr	r0, [sp, #40]	; 0x28
 801a602:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801a606:	e9cd b703 	strd	fp, r7, [sp, #12]
 801a60a:	e9cd 8401 	strd	r8, r4, [sp, #4]
 801a60e:	464a      	mov	r2, r9
 801a610:	2100      	movs	r1, #0
 801a612:	f7ff fc94 	bl	8019f3e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801a616:	2800      	cmp	r0, #0
 801a618:	d1b6      	bne.n	801a588 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801a61a:	b2b2      	uxth	r2, r6
 801a61c:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801a620:	4611      	mov	r1, r2
 801a622:	4413      	add	r3, r2
 801a624:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801a628:	b21b      	sxth	r3, r3
 801a62a:	1a52      	subs	r2, r2, r1
 801a62c:	7c21      	ldrb	r1, [r4, #16]
 801a62e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801a632:	b212      	sxth	r2, r2
 801a634:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801a638:	b109      	cbz	r1, 801a63e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x236>
 801a63a:	42b2      	cmp	r2, r6
 801a63c:	dba4      	blt.n	801a588 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801a63e:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 801a642:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 801a646:	440a      	add	r2, r1
 801a648:	b212      	sxth	r2, r2
 801a64a:	4293      	cmp	r3, r2
 801a64c:	dda4      	ble.n	801a598 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x190>
 801a64e:	e79b      	b.n	801a588 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801a650:	2a02      	cmp	r2, #2
 801a652:	d105      	bne.n	801a660 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x258>
 801a654:	7be2      	ldrb	r2, [r4, #15]
 801a656:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 801a65a:	1a80      	subs	r0, r0, r2
 801a65c:	1ac0      	subs	r0, r0, r3
 801a65e:	e7bf      	b.n	801a5e0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d8>
 801a660:	2000      	movs	r0, #0
 801a662:	e7be      	b.n	801a5e2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 801a664:	7be0      	ldrb	r0, [r4, #15]
 801a666:	e7bc      	b.n	801a5e2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 801a668:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a66c:	e7c3      	b.n	801a5f6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 801a66e:	9b08      	ldr	r3, [sp, #32]
 801a670:	2b00      	cmp	r3, #0
 801a672:	d0f7      	beq.n	801a664 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801a674:	2264      	movs	r2, #100	; 0x64
 801a676:	4639      	mov	r1, r7
 801a678:	4628      	mov	r0, r5
 801a67a:	f00f fe2b 	bl	802a2d4 <memcpy>
 801a67e:	2300      	movs	r3, #0
 801a680:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a684:	6821      	ldr	r1, [r4, #0]
 801a686:	4628      	mov	r0, r5
 801a688:	f7ff fbec 	bl	8019e64 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801a68c:	b203      	sxth	r3, r0
 801a68e:	e79e      	b.n	801a5ce <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>

0801a690 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801a690:	2b02      	cmp	r3, #2
 801a692:	b510      	push	{r4, lr}
 801a694:	f9b0 4000 	ldrsh.w	r4, [r0]
 801a698:	d00b      	beq.n	801a6b2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801a69a:	2b03      	cmp	r3, #3
 801a69c:	d00e      	beq.n	801a6bc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 801a69e:	2b01      	cmp	r3, #1
 801a6a0:	d001      	beq.n	801a6a6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 801a6a2:	1860      	adds	r0, r4, r1
 801a6a4:	bd10      	pop	{r4, pc}
 801a6a6:	8880      	ldrh	r0, [r0, #4]
 801a6a8:	4420      	add	r0, r4
 801a6aa:	b200      	sxth	r0, r0
 801a6ac:	1a80      	subs	r0, r0, r2
 801a6ae:	3801      	subs	r0, #1
 801a6b0:	e7f8      	b.n	801a6a4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801a6b2:	8880      	ldrh	r0, [r0, #4]
 801a6b4:	4420      	add	r0, r4
 801a6b6:	b200      	sxth	r0, r0
 801a6b8:	1a40      	subs	r0, r0, r1
 801a6ba:	e7f8      	b.n	801a6ae <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801a6bc:	18a0      	adds	r0, r4, r2
 801a6be:	e7f1      	b.n	801a6a4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0801a6c0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801a6c0:	2b02      	cmp	r3, #2
 801a6c2:	b510      	push	{r4, lr}
 801a6c4:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 801a6c8:	d006      	beq.n	801a6d8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 801a6ca:	2b03      	cmp	r3, #3
 801a6cc:	d00a      	beq.n	801a6e4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801a6ce:	2b01      	cmp	r3, #1
 801a6d0:	bf14      	ite	ne
 801a6d2:	18a0      	addne	r0, r4, r2
 801a6d4:	1860      	addeq	r0, r4, r1
 801a6d6:	bd10      	pop	{r4, pc}
 801a6d8:	88c0      	ldrh	r0, [r0, #6]
 801a6da:	4420      	add	r0, r4
 801a6dc:	b200      	sxth	r0, r0
 801a6de:	1a80      	subs	r0, r0, r2
 801a6e0:	3801      	subs	r0, #1
 801a6e2:	e7f8      	b.n	801a6d6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 801a6e4:	88c0      	ldrh	r0, [r0, #6]
 801a6e6:	4420      	add	r0, r4
 801a6e8:	b200      	sxth	r0, r0
 801a6ea:	1a40      	subs	r0, r0, r1
 801a6ec:	e7f8      	b.n	801a6e0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

0801a6f0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801a6f0:	4b01      	ldr	r3, [pc, #4]	; (801a6f8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801a6f2:	2200      	movs	r2, #0
 801a6f4:	601a      	str	r2, [r3, #0]
 801a6f6:	4770      	bx	lr
 801a6f8:	2400b5d8 	.word	0x2400b5d8

0801a6fc <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801a6fc:	4603      	mov	r3, r0
 801a6fe:	b1c8      	cbz	r0, 801a734 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801a700:	0c02      	lsrs	r2, r0, #16
 801a702:	0412      	lsls	r2, r2, #16
 801a704:	b9a2      	cbnz	r2, 801a730 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801a706:	0403      	lsls	r3, r0, #16
 801a708:	2010      	movs	r0, #16
 801a70a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801a70e:	bf04      	itt	eq
 801a710:	021b      	lsleq	r3, r3, #8
 801a712:	3008      	addeq	r0, #8
 801a714:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801a718:	bf04      	itt	eq
 801a71a:	011b      	lsleq	r3, r3, #4
 801a71c:	3004      	addeq	r0, #4
 801a71e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801a722:	bf04      	itt	eq
 801a724:	009b      	lsleq	r3, r3, #2
 801a726:	3002      	addeq	r0, #2
 801a728:	2b00      	cmp	r3, #0
 801a72a:	db04      	blt.n	801a736 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801a72c:	3001      	adds	r0, #1
 801a72e:	4770      	bx	lr
 801a730:	2000      	movs	r0, #0
 801a732:	e7ea      	b.n	801a70a <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801a734:	2020      	movs	r0, #32
 801a736:	4770      	bx	lr

0801a738 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801a738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a73c:	b087      	sub	sp, #28
 801a73e:	4681      	mov	r9, r0
 801a740:	4698      	mov	r8, r3
 801a742:	4610      	mov	r0, r2
 801a744:	460d      	mov	r5, r1
 801a746:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801a74a:	b981      	cbnz	r1, 801a76e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 801a74c:	b14b      	cbz	r3, 801a762 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 801a74e:	460b      	mov	r3, r1
 801a750:	464a      	mov	r2, r9
 801a752:	4641      	mov	r1, r8
 801a754:	e9cd 4700 	strd	r4, r7, [sp]
 801a758:	f7ff ffee 	bl	801a738 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801a75c:	b007      	add	sp, #28
 801a75e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a762:	f04f 33ff 	mov.w	r3, #4294967295
 801a766:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801a76a:	603b      	str	r3, [r7, #0]
 801a76c:	e7f6      	b.n	801a75c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801a76e:	fa32 fa01 	lsrs.w	sl, r2, r1
 801a772:	d107      	bne.n	801a784 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 801a774:	fb09 f602 	mul.w	r6, r9, r2
 801a778:	fbb6 f0f4 	udiv	r0, r6, r4
 801a77c:	fb04 6610 	mls	r6, r4, r0, r6
 801a780:	603e      	str	r6, [r7, #0]
 801a782:	e7eb      	b.n	801a75c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801a784:	2601      	movs	r6, #1
 801a786:	fa09 fb01 	lsl.w	fp, r9, r1
 801a78a:	408e      	lsls	r6, r1
 801a78c:	fbbb f3f4 	udiv	r3, fp, r4
 801a790:	3e01      	subs	r6, #1
 801a792:	9302      	str	r3, [sp, #8]
 801a794:	fb0a f303 	mul.w	r3, sl, r3
 801a798:	4016      	ands	r6, r2
 801a79a:	9303      	str	r3, [sp, #12]
 801a79c:	4630      	mov	r0, r6
 801a79e:	f7ff ffad 	bl	801a6fc <_ZN8touchgfx16TouchCalibration4clzuEm>
 801a7a2:	464a      	mov	r2, r9
 801a7a4:	460b      	mov	r3, r1
 801a7a6:	4601      	mov	r1, r0
 801a7a8:	4630      	mov	r0, r6
 801a7aa:	e9cd 4700 	strd	r4, r7, [sp]
 801a7ae:	f7ff ffc3 	bl	801a738 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801a7b2:	9b02      	ldr	r3, [sp, #8]
 801a7b4:	4606      	mov	r6, r0
 801a7b6:	eb05 0108 	add.w	r1, r5, r8
 801a7ba:	fb04 bb13 	mls	fp, r4, r3, fp
 801a7be:	4658      	mov	r0, fp
 801a7c0:	f7ff ff9c 	bl	801a6fc <_ZN8touchgfx16TouchCalibration4clzuEm>
 801a7c4:	ab05      	add	r3, sp, #20
 801a7c6:	465a      	mov	r2, fp
 801a7c8:	e9cd 4300 	strd	r4, r3, [sp]
 801a7cc:	4603      	mov	r3, r0
 801a7ce:	4650      	mov	r0, sl
 801a7d0:	f7ff ffb2 	bl	801a738 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801a7d4:	6839      	ldr	r1, [r7, #0]
 801a7d6:	9a05      	ldr	r2, [sp, #20]
 801a7d8:	9b03      	ldr	r3, [sp, #12]
 801a7da:	4411      	add	r1, r2
 801a7dc:	fbb1 f2f4 	udiv	r2, r1, r4
 801a7e0:	18d3      	adds	r3, r2, r3
 801a7e2:	fb04 1412 	mls	r4, r4, r2, r1
 801a7e6:	441e      	add	r6, r3
 801a7e8:	603c      	str	r4, [r7, #0]
 801a7ea:	4430      	add	r0, r6
 801a7ec:	e7b6      	b.n	801a75c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0801a7ee <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801a7ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a7f2:	b085      	sub	sp, #20
 801a7f4:	f1b0 0900 	subs.w	r9, r0, #0
 801a7f8:	461d      	mov	r5, r3
 801a7fa:	4617      	mov	r7, r2
 801a7fc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a7fe:	bfbb      	ittet	lt
 801a800:	f1c9 0900 	rsblt	r9, r9, #0
 801a804:	f04f 36ff 	movlt.w	r6, #4294967295
 801a808:	2601      	movge	r6, #1
 801a80a:	6823      	ldrlt	r3, [r4, #0]
 801a80c:	bfbc      	itt	lt
 801a80e:	425b      	neglt	r3, r3
 801a810:	6023      	strlt	r3, [r4, #0]
 801a812:	2a00      	cmp	r2, #0
 801a814:	da04      	bge.n	801a820 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801a816:	6823      	ldr	r3, [r4, #0]
 801a818:	4257      	negs	r7, r2
 801a81a:	4276      	negs	r6, r6
 801a81c:	425b      	negs	r3, r3
 801a81e:	6023      	str	r3, [r4, #0]
 801a820:	2d00      	cmp	r5, #0
 801a822:	4638      	mov	r0, r7
 801a824:	bfba      	itte	lt
 801a826:	426d      	neglt	r5, r5
 801a828:	f04f 38ff 	movlt.w	r8, #4294967295
 801a82c:	f04f 0801 	movge.w	r8, #1
 801a830:	f7ff ff64 	bl	801a6fc <_ZN8touchgfx16TouchCalibration4clzuEm>
 801a834:	ab03      	add	r3, sp, #12
 801a836:	463a      	mov	r2, r7
 801a838:	e9cd 5300 	strd	r5, r3, [sp]
 801a83c:	4603      	mov	r3, r0
 801a83e:	4648      	mov	r0, r9
 801a840:	f7ff ff7a 	bl	801a738 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801a844:	6823      	ldr	r3, [r4, #0]
 801a846:	9a03      	ldr	r2, [sp, #12]
 801a848:	4546      	cmp	r6, r8
 801a84a:	441a      	add	r2, r3
 801a84c:	fb92 f3f5 	sdiv	r3, r2, r5
 801a850:	4418      	add	r0, r3
 801a852:	fb05 2313 	mls	r3, r5, r3, r2
 801a856:	bf18      	it	ne
 801a858:	4240      	negne	r0, r0
 801a85a:	1c72      	adds	r2, r6, #1
 801a85c:	6023      	str	r3, [r4, #0]
 801a85e:	d105      	bne.n	801a86c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801a860:	2b00      	cmp	r3, #0
 801a862:	f1c3 0200 	rsb	r2, r3, #0
 801a866:	db0b      	blt.n	801a880 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801a868:	6022      	str	r2, [r4, #0]
 801a86a:	e006      	b.n	801a87a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801a86c:	2e01      	cmp	r6, #1
 801a86e:	d104      	bne.n	801a87a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801a870:	2b00      	cmp	r3, #0
 801a872:	da02      	bge.n	801a87a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801a874:	442b      	add	r3, r5
 801a876:	3801      	subs	r0, #1
 801a878:	6023      	str	r3, [r4, #0]
 801a87a:	b005      	add	sp, #20
 801a87c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a880:	3801      	subs	r0, #1
 801a882:	1b52      	subs	r2, r2, r5
 801a884:	e7f0      	b.n	801a868 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0801a888 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801a888:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801a88c:	4c1c      	ldr	r4, [pc, #112]	; (801a900 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801a88e:	4605      	mov	r5, r0
 801a890:	6807      	ldr	r7, [r0, #0]
 801a892:	69a3      	ldr	r3, [r4, #24]
 801a894:	b92b      	cbnz	r3, 801a8a2 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801a896:	6840      	ldr	r0, [r0, #4]
 801a898:	e9c5 7000 	strd	r7, r0, [r5]
 801a89c:	b004      	add	sp, #16
 801a89e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a8a2:	f04f 0802 	mov.w	r8, #2
 801a8a6:	68a2      	ldr	r2, [r4, #8]
 801a8a8:	ae04      	add	r6, sp, #16
 801a8aa:	6820      	ldr	r0, [r4, #0]
 801a8ac:	fb93 f1f8 	sdiv	r1, r3, r8
 801a8b0:	440a      	add	r2, r1
 801a8b2:	69e1      	ldr	r1, [r4, #28]
 801a8b4:	f846 2d04 	str.w	r2, [r6, #-4]!
 801a8b8:	463a      	mov	r2, r7
 801a8ba:	9600      	str	r6, [sp, #0]
 801a8bc:	f7ff ff97 	bl	801a7ee <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801a8c0:	69a3      	ldr	r3, [r4, #24]
 801a8c2:	4607      	mov	r7, r0
 801a8c4:	686a      	ldr	r2, [r5, #4]
 801a8c6:	6a21      	ldr	r1, [r4, #32]
 801a8c8:	9600      	str	r6, [sp, #0]
 801a8ca:	6860      	ldr	r0, [r4, #4]
 801a8cc:	f7ff ff8f 	bl	801a7ee <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801a8d0:	69a3      	ldr	r3, [r4, #24]
 801a8d2:	6962      	ldr	r2, [r4, #20]
 801a8d4:	4407      	add	r7, r0
 801a8d6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801a8d8:	9600      	str	r6, [sp, #0]
 801a8da:	68e0      	ldr	r0, [r4, #12]
 801a8dc:	fb93 f8f8 	sdiv	r8, r3, r8
 801a8e0:	4442      	add	r2, r8
 801a8e2:	9203      	str	r2, [sp, #12]
 801a8e4:	682a      	ldr	r2, [r5, #0]
 801a8e6:	f7ff ff82 	bl	801a7ee <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801a8ea:	4680      	mov	r8, r0
 801a8ec:	9600      	str	r6, [sp, #0]
 801a8ee:	69a3      	ldr	r3, [r4, #24]
 801a8f0:	686a      	ldr	r2, [r5, #4]
 801a8f2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801a8f4:	6920      	ldr	r0, [r4, #16]
 801a8f6:	f7ff ff7a 	bl	801a7ee <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801a8fa:	4440      	add	r0, r8
 801a8fc:	e7cc      	b.n	801a898 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801a8fe:	bf00      	nop
 801a900:	2400b5dc 	.word	0x2400b5dc

0801a904 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801a904:	4b07      	ldr	r3, [pc, #28]	; (801a924 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801a906:	781b      	ldrb	r3, [r3, #0]
 801a908:	2b01      	cmp	r3, #1
 801a90a:	d109      	bne.n	801a920 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801a90c:	f9b1 3000 	ldrsh.w	r3, [r1]
 801a910:	f9b0 2000 	ldrsh.w	r2, [r0]
 801a914:	8003      	strh	r3, [r0, #0]
 801a916:	4b04      	ldr	r3, [pc, #16]	; (801a928 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801a918:	881b      	ldrh	r3, [r3, #0]
 801a91a:	3b01      	subs	r3, #1
 801a91c:	1a9b      	subs	r3, r3, r2
 801a91e:	800b      	strh	r3, [r1, #0]
 801a920:	4770      	bx	lr
 801a922:	bf00      	nop
 801a924:	2400b5c8 	.word	0x2400b5c8
 801a928:	2400b5cc 	.word	0x2400b5cc

0801a92c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801a92c:	4b07      	ldr	r3, [pc, #28]	; (801a94c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801a92e:	b510      	push	{r4, lr}
 801a930:	781b      	ldrb	r3, [r3, #0]
 801a932:	2b01      	cmp	r3, #1
 801a934:	d108      	bne.n	801a948 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801a936:	4b06      	ldr	r3, [pc, #24]	; (801a950 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801a938:	880c      	ldrh	r4, [r1, #0]
 801a93a:	881b      	ldrh	r3, [r3, #0]
 801a93c:	f9b0 2000 	ldrsh.w	r2, [r0]
 801a940:	3b01      	subs	r3, #1
 801a942:	1b1b      	subs	r3, r3, r4
 801a944:	8003      	strh	r3, [r0, #0]
 801a946:	800a      	strh	r2, [r1, #0]
 801a948:	bd10      	pop	{r4, pc}
 801a94a:	bf00      	nop
 801a94c:	2400b5c8 	.word	0x2400b5c8
 801a950:	2400b5cc 	.word	0x2400b5cc

0801a954 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801a954:	4b0a      	ldr	r3, [pc, #40]	; (801a980 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801a956:	b510      	push	{r4, lr}
 801a958:	781b      	ldrb	r3, [r3, #0]
 801a95a:	2b01      	cmp	r3, #1
 801a95c:	d10e      	bne.n	801a97c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801a95e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801a962:	8843      	ldrh	r3, [r0, #2]
 801a964:	f9b0 4000 	ldrsh.w	r4, [r0]
 801a968:	18ca      	adds	r2, r1, r3
 801a96a:	4b06      	ldr	r3, [pc, #24]	; (801a984 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801a96c:	8044      	strh	r4, [r0, #2]
 801a96e:	881b      	ldrh	r3, [r3, #0]
 801a970:	1a9b      	subs	r3, r3, r2
 801a972:	8003      	strh	r3, [r0, #0]
 801a974:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801a978:	8081      	strh	r1, [r0, #4]
 801a97a:	80c3      	strh	r3, [r0, #6]
 801a97c:	bd10      	pop	{r4, pc}
 801a97e:	bf00      	nop
 801a980:	2400b5c8 	.word	0x2400b5c8
 801a984:	2400b5cc 	.word	0x2400b5cc

0801a988 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801a988:	4b08      	ldr	r3, [pc, #32]	; (801a9ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801a98a:	781b      	ldrb	r3, [r3, #0]
 801a98c:	2b01      	cmp	r3, #1
 801a98e:	d10c      	bne.n	801a9aa <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801a990:	8803      	ldrh	r3, [r0, #0]
 801a992:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801a996:	8842      	ldrh	r2, [r0, #2]
 801a998:	8002      	strh	r2, [r0, #0]
 801a99a:	185a      	adds	r2, r3, r1
 801a99c:	4b04      	ldr	r3, [pc, #16]	; (801a9b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801a99e:	881b      	ldrh	r3, [r3, #0]
 801a9a0:	1a9b      	subs	r3, r3, r2
 801a9a2:	8043      	strh	r3, [r0, #2]
 801a9a4:	88c3      	ldrh	r3, [r0, #6]
 801a9a6:	80c1      	strh	r1, [r0, #6]
 801a9a8:	8083      	strh	r3, [r0, #4]
 801a9aa:	4770      	bx	lr
 801a9ac:	2400b5c8 	.word	0x2400b5c8
 801a9b0:	2400b5cc 	.word	0x2400b5cc

0801a9b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801a9b4:	4b07      	ldr	r3, [pc, #28]	; (801a9d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801a9b6:	b510      	push	{r4, lr}
 801a9b8:	781b      	ldrb	r3, [r3, #0]
 801a9ba:	2b01      	cmp	r3, #1
 801a9bc:	d108      	bne.n	801a9d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801a9be:	f9b1 3000 	ldrsh.w	r3, [r1]
 801a9c2:	f9b0 4000 	ldrsh.w	r4, [r0]
 801a9c6:	8003      	strh	r3, [r0, #0]
 801a9c8:	8893      	ldrh	r3, [r2, #4]
 801a9ca:	3b01      	subs	r3, #1
 801a9cc:	1b1b      	subs	r3, r3, r4
 801a9ce:	800b      	strh	r3, [r1, #0]
 801a9d0:	bd10      	pop	{r4, pc}
 801a9d2:	bf00      	nop
 801a9d4:	2400b5c8 	.word	0x2400b5c8

0801a9d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801a9d8:	4b0a      	ldr	r3, [pc, #40]	; (801aa04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801a9da:	460a      	mov	r2, r1
 801a9dc:	b510      	push	{r4, lr}
 801a9de:	781b      	ldrb	r3, [r3, #0]
 801a9e0:	2b01      	cmp	r3, #1
 801a9e2:	d10d      	bne.n	801aa00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801a9e4:	8881      	ldrh	r1, [r0, #4]
 801a9e6:	8803      	ldrh	r3, [r0, #0]
 801a9e8:	440b      	add	r3, r1
 801a9ea:	4601      	mov	r1, r0
 801a9ec:	3b01      	subs	r3, #1
 801a9ee:	f821 3b02 	strh.w	r3, [r1], #2
 801a9f2:	f7ff ffdf 	bl	801a9b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801a9f6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801a9fa:	88c2      	ldrh	r2, [r0, #6]
 801a9fc:	80c3      	strh	r3, [r0, #6]
 801a9fe:	8082      	strh	r2, [r0, #4]
 801aa00:	bd10      	pop	{r4, pc}
 801aa02:	bf00      	nop
 801aa04:	2400b5c8 	.word	0x2400b5c8

0801aa08 <_ZN8touchgfx11Application13requestRedrawEv>:
 801aa08:	4b06      	ldr	r3, [pc, #24]	; (801aa24 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801aa0a:	2100      	movs	r1, #0
 801aa0c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801aa10:	4b05      	ldr	r3, [pc, #20]	; (801aa28 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801aa12:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 801aa16:	f9b3 3000 	ldrsh.w	r3, [r3]
 801aa1a:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 801aa1e:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 801aa22:	4770      	bx	lr
 801aa24:	2400b5c4 	.word	0x2400b5c4
 801aa28:	2400b5c6 	.word	0x2400b5c6

0801aa2c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801aa2c:	4b03      	ldr	r3, [pc, #12]	; (801aa3c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801aa2e:	6818      	ldr	r0, [r3, #0]
 801aa30:	b110      	cbz	r0, 801aa38 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801aa32:	6803      	ldr	r3, [r0, #0]
 801aa34:	699b      	ldr	r3, [r3, #24]
 801aa36:	4718      	bx	r3
 801aa38:	4770      	bx	lr
 801aa3a:	bf00      	nop
 801aa3c:	2400b60c 	.word	0x2400b60c

0801aa40 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801aa40:	4770      	bx	lr
	...

0801aa44 <_ZN8touchgfx11Application4drawEv>:
 801aa44:	4b09      	ldr	r3, [pc, #36]	; (801aa6c <_ZN8touchgfx11Application4drawEv+0x28>)
 801aa46:	b507      	push	{r0, r1, r2, lr}
 801aa48:	f9b3 2000 	ldrsh.w	r2, [r3]
 801aa4c:	2100      	movs	r1, #0
 801aa4e:	4b08      	ldr	r3, [pc, #32]	; (801aa70 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801aa50:	9100      	str	r1, [sp, #0]
 801aa52:	4669      	mov	r1, sp
 801aa54:	f9b3 3000 	ldrsh.w	r3, [r3]
 801aa58:	f8ad 2004 	strh.w	r2, [sp, #4]
 801aa5c:	f8ad 3006 	strh.w	r3, [sp, #6]
 801aa60:	6803      	ldr	r3, [r0, #0]
 801aa62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801aa64:	4798      	blx	r3
 801aa66:	b003      	add	sp, #12
 801aa68:	f85d fb04 	ldr.w	pc, [sp], #4
 801aa6c:	2400b5c4 	.word	0x2400b5c4
 801aa70:	2400b5c6 	.word	0x2400b5c6

0801aa74 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801aa74:	4b03      	ldr	r3, [pc, #12]	; (801aa84 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801aa76:	6818      	ldr	r0, [r3, #0]
 801aa78:	b110      	cbz	r0, 801aa80 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801aa7a:	6803      	ldr	r3, [r0, #0]
 801aa7c:	69db      	ldr	r3, [r3, #28]
 801aa7e:	4718      	bx	r3
 801aa80:	4770      	bx	lr
 801aa82:	bf00      	nop
 801aa84:	2400b60c 	.word	0x2400b60c

0801aa88 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801aa88:	4b03      	ldr	r3, [pc, #12]	; (801aa98 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801aa8a:	6818      	ldr	r0, [r3, #0]
 801aa8c:	b110      	cbz	r0, 801aa94 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801aa8e:	6803      	ldr	r3, [r0, #0]
 801aa90:	6a1b      	ldr	r3, [r3, #32]
 801aa92:	4718      	bx	r3
 801aa94:	4770      	bx	lr
 801aa96:	bf00      	nop
 801aa98:	2400b60c 	.word	0x2400b60c

0801aa9c <_ZN8touchgfx11Application14handleKeyEventEh>:
 801aa9c:	4b03      	ldr	r3, [pc, #12]	; (801aaac <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801aa9e:	6818      	ldr	r0, [r3, #0]
 801aaa0:	b110      	cbz	r0, 801aaa8 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801aaa2:	6803      	ldr	r3, [r0, #0]
 801aaa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801aaa6:	4718      	bx	r3
 801aaa8:	4770      	bx	lr
 801aaaa:	bf00      	nop
 801aaac:	2400b60c 	.word	0x2400b60c

0801aab0 <_ZN8touchgfx11Application15handleTickEventEv>:
 801aab0:	b570      	push	{r4, r5, r6, lr}
 801aab2:	4d38      	ldr	r5, [pc, #224]	; (801ab94 <_ZN8touchgfx11Application15handleTickEventEv+0xe4>)
 801aab4:	4604      	mov	r4, r0
 801aab6:	6828      	ldr	r0, [r5, #0]
 801aab8:	b140      	cbz	r0, 801aacc <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801aaba:	7a03      	ldrb	r3, [r0, #8]
 801aabc:	b933      	cbnz	r3, 801aacc <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801aabe:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 801aac2:	6803      	ldr	r3, [r0, #0]
 801aac4:	689b      	ldr	r3, [r3, #8]
 801aac6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801aaca:	4718      	bx	r3
 801aacc:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 801aad0:	b97b      	cbnz	r3, 801aaf2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801aad2:	b170      	cbz	r0, 801aaf2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801aad4:	7a03      	ldrb	r3, [r0, #8]
 801aad6:	b163      	cbz	r3, 801aaf2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801aad8:	4b2f      	ldr	r3, [pc, #188]	; (801ab98 <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 801aada:	6818      	ldr	r0, [r3, #0]
 801aadc:	b110      	cbz	r0, 801aae4 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801aade:	6803      	ldr	r3, [r0, #0]
 801aae0:	691b      	ldr	r3, [r3, #16]
 801aae2:	4798      	blx	r3
 801aae4:	6828      	ldr	r0, [r5, #0]
 801aae6:	6803      	ldr	r3, [r0, #0]
 801aae8:	68db      	ldr	r3, [r3, #12]
 801aaea:	4798      	blx	r3
 801aaec:	2301      	movs	r3, #1
 801aaee:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 801aaf2:	2500      	movs	r5, #0
 801aaf4:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801aaf8:	42a8      	cmp	r0, r5
 801aafa:	dd0c      	ble.n	801ab16 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 801aafc:	1963      	adds	r3, r4, r5
 801aafe:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801ab02:	b132      	cbz	r2, 801ab12 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 801ab04:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801ab08:	4413      	add	r3, r2
 801ab0a:	6858      	ldr	r0, [r3, #4]
 801ab0c:	6803      	ldr	r3, [r0, #0]
 801ab0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ab10:	4798      	blx	r3
 801ab12:	3501      	adds	r5, #1
 801ab14:	e7ee      	b.n	801aaf4 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801ab16:	2300      	movs	r3, #0
 801ab18:	461a      	mov	r2, r3
 801ab1a:	4298      	cmp	r0, r3
 801ab1c:	d10f      	bne.n	801ab3e <_ZN8touchgfx11Application15handleTickEventEv+0x8e>
 801ab1e:	1d25      	adds	r5, r4, #4
 801ab20:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 801ab24:	4291      	cmp	r1, r2
 801ab26:	dd2d      	ble.n	801ab84 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>
 801ab28:	1e48      	subs	r0, r1, #1
 801ab2a:	b280      	uxth	r0, r0
 801ab2c:	4288      	cmp	r0, r1
 801ab2e:	d31a      	bcc.n	801ab66 <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 801ab30:	4b1a      	ldr	r3, [pc, #104]	; (801ab9c <_ZN8touchgfx11Application15handleTickEventEv+0xec>)
 801ab32:	f240 11a9 	movw	r1, #425	; 0x1a9
 801ab36:	4a1a      	ldr	r2, [pc, #104]	; (801aba0 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 801ab38:	481a      	ldr	r0, [pc, #104]	; (801aba4 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801ab3a:	f00f fa53 	bl	8029fe4 <__assert_func>
 801ab3e:	18e1      	adds	r1, r4, r3
 801ab40:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 801ab44:	b16d      	cbz	r5, 801ab62 <_ZN8touchgfx11Application15handleTickEventEv+0xb2>
 801ab46:	429a      	cmp	r2, r3
 801ab48:	d00a      	beq.n	801ab60 <_ZN8touchgfx11Application15handleTickEventEv+0xb0>
 801ab4a:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 801ab4e:	4431      	add	r1, r6
 801ab50:	684e      	ldr	r6, [r1, #4]
 801ab52:	b291      	uxth	r1, r2
 801ab54:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801ab58:	604e      	str	r6, [r1, #4]
 801ab5a:	18a1      	adds	r1, r4, r2
 801ab5c:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 801ab60:	3201      	adds	r2, #1
 801ab62:	3301      	adds	r3, #1
 801ab64:	e7d9      	b.n	801ab1a <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 801ab66:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 801ab6a:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 801ab6e:	3304      	adds	r3, #4
 801ab70:	428b      	cmp	r3, r1
 801ab72:	d004      	beq.n	801ab7e <_ZN8touchgfx11Application15handleTickEventEv+0xce>
 801ab74:	f853 6f04 	ldr.w	r6, [r3, #4]!
 801ab78:	f843 6c04 	str.w	r6, [r3, #-4]
 801ab7c:	e7f8      	b.n	801ab70 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 801ab7e:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 801ab82:	e7cd      	b.n	801ab20 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 801ab84:	4b04      	ldr	r3, [pc, #16]	; (801ab98 <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 801ab86:	6818      	ldr	r0, [r3, #0]
 801ab88:	b110      	cbz	r0, 801ab90 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 801ab8a:	6803      	ldr	r3, [r0, #0]
 801ab8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ab8e:	e79a      	b.n	801aac6 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801ab90:	bd70      	pop	{r4, r5, r6, pc}
 801ab92:	bf00      	nop
 801ab94:	2400b610 	.word	0x2400b610
 801ab98:	2400b60c 	.word	0x2400b60c
 801ab9c:	0802e420 	.word	0x0802e420
 801aba0:	0802e679 	.word	0x0802e679
 801aba4:	0802e42e 	.word	0x0802e42e

0801aba8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801aba8:	b570      	push	{r4, r5, r6, lr}
 801abaa:	4606      	mov	r6, r0
 801abac:	460c      	mov	r4, r1
 801abae:	b929      	cbnz	r1, 801abbc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 801abb0:	4b0c      	ldr	r3, [pc, #48]	; (801abe4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801abb2:	2167      	movs	r1, #103	; 0x67
 801abb4:	4a0c      	ldr	r2, [pc, #48]	; (801abe8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801abb6:	480d      	ldr	r0, [pc, #52]	; (801abec <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801abb8:	f00f fa14 	bl	8029fe4 <__assert_func>
 801abbc:	2300      	movs	r3, #0
 801abbe:	4d0c      	ldr	r5, [pc, #48]	; (801abf0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801abc0:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801abc4:	6828      	ldr	r0, [r5, #0]
 801abc6:	b110      	cbz	r0, 801abce <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 801abc8:	6803      	ldr	r3, [r0, #0]
 801abca:	695b      	ldr	r3, [r3, #20]
 801abcc:	4798      	blx	r3
 801abce:	602c      	str	r4, [r5, #0]
 801abd0:	4620      	mov	r0, r4
 801abd2:	6823      	ldr	r3, [r4, #0]
 801abd4:	68db      	ldr	r3, [r3, #12]
 801abd6:	4798      	blx	r3
 801abd8:	6833      	ldr	r3, [r6, #0]
 801abda:	4630      	mov	r0, r6
 801abdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801abde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801abe2:	4718      	bx	r3
 801abe4:	0802e3ec 	.word	0x0802e3ec
 801abe8:	0802e4f4 	.word	0x0802e4f4
 801abec:	0802e3f6 	.word	0x0802e3f6
 801abf0:	2400b60c 	.word	0x2400b60c

0801abf4 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801abf4:	b510      	push	{r4, lr}
 801abf6:	f9b1 4000 	ldrsh.w	r4, [r1]
 801abfa:	888a      	ldrh	r2, [r1, #4]
 801abfc:	f9b0 3000 	ldrsh.w	r3, [r0]
 801ac00:	4422      	add	r2, r4
 801ac02:	b212      	sxth	r2, r2
 801ac04:	4293      	cmp	r3, r2
 801ac06:	da15      	bge.n	801ac34 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801ac08:	8882      	ldrh	r2, [r0, #4]
 801ac0a:	4413      	add	r3, r2
 801ac0c:	b21b      	sxth	r3, r3
 801ac0e:	429c      	cmp	r4, r3
 801ac10:	da10      	bge.n	801ac34 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801ac12:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801ac16:	88c9      	ldrh	r1, [r1, #6]
 801ac18:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801ac1c:	4419      	add	r1, r3
 801ac1e:	b209      	sxth	r1, r1
 801ac20:	428a      	cmp	r2, r1
 801ac22:	da07      	bge.n	801ac34 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801ac24:	88c0      	ldrh	r0, [r0, #6]
 801ac26:	4410      	add	r0, r2
 801ac28:	b200      	sxth	r0, r0
 801ac2a:	4283      	cmp	r3, r0
 801ac2c:	bfac      	ite	ge
 801ac2e:	2000      	movge	r0, #0
 801ac30:	2001      	movlt	r0, #1
 801ac32:	bd10      	pop	{r4, pc}
 801ac34:	2000      	movs	r0, #0
 801ac36:	e7fc      	b.n	801ac32 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801ac38 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801ac38:	b570      	push	{r4, r5, r6, lr}
 801ac3a:	f9b1 4000 	ldrsh.w	r4, [r1]
 801ac3e:	f9b0 5000 	ldrsh.w	r5, [r0]
 801ac42:	42ac      	cmp	r4, r5
 801ac44:	db18      	blt.n	801ac78 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801ac46:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801ac4a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801ac4e:	429a      	cmp	r2, r3
 801ac50:	db12      	blt.n	801ac78 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801ac52:	8886      	ldrh	r6, [r0, #4]
 801ac54:	4435      	add	r5, r6
 801ac56:	888e      	ldrh	r6, [r1, #4]
 801ac58:	4434      	add	r4, r6
 801ac5a:	b22d      	sxth	r5, r5
 801ac5c:	b224      	sxth	r4, r4
 801ac5e:	42a5      	cmp	r5, r4
 801ac60:	db0a      	blt.n	801ac78 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801ac62:	88c0      	ldrh	r0, [r0, #6]
 801ac64:	4418      	add	r0, r3
 801ac66:	88cb      	ldrh	r3, [r1, #6]
 801ac68:	441a      	add	r2, r3
 801ac6a:	b200      	sxth	r0, r0
 801ac6c:	b212      	sxth	r2, r2
 801ac6e:	4290      	cmp	r0, r2
 801ac70:	bfb4      	ite	lt
 801ac72:	2000      	movlt	r0, #0
 801ac74:	2001      	movge	r0, #1
 801ac76:	bd70      	pop	{r4, r5, r6, pc}
 801ac78:	2000      	movs	r0, #0
 801ac7a:	e7fc      	b.n	801ac76 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0801ac7c <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801ac7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac7e:	4604      	mov	r4, r0
 801ac80:	4608      	mov	r0, r1
 801ac82:	460d      	mov	r5, r1
 801ac84:	f7fc fb11 	bl	80172aa <_ZNK8touchgfx4Rect7isEmptyEv>
 801ac88:	b978      	cbnz	r0, 801acaa <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801ac8a:	4620      	mov	r0, r4
 801ac8c:	f7fc fb0d 	bl	80172aa <_ZNK8touchgfx4Rect7isEmptyEv>
 801ac90:	f9b5 6000 	ldrsh.w	r6, [r5]
 801ac94:	b150      	cbz	r0, 801acac <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801ac96:	8026      	strh	r6, [r4, #0]
 801ac98:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801ac9c:	8063      	strh	r3, [r4, #2]
 801ac9e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801aca2:	80a3      	strh	r3, [r4, #4]
 801aca4:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801aca8:	80e3      	strh	r3, [r4, #6]
 801acaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801acac:	f9b4 1000 	ldrsh.w	r1, [r4]
 801acb0:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801acb4:	42b1      	cmp	r1, r6
 801acb6:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801acba:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801acbe:	460f      	mov	r7, r1
 801acc0:	88ed      	ldrh	r5, [r5, #6]
 801acc2:	bfa8      	it	ge
 801acc4:	4637      	movge	r7, r6
 801acc6:	4293      	cmp	r3, r2
 801acc8:	4618      	mov	r0, r3
 801acca:	4466      	add	r6, ip
 801accc:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801acd0:	bfa8      	it	ge
 801acd2:	4610      	movge	r0, r2
 801acd4:	442a      	add	r2, r5
 801acd6:	88e5      	ldrh	r5, [r4, #6]
 801acd8:	4461      	add	r1, ip
 801acda:	b236      	sxth	r6, r6
 801acdc:	8027      	strh	r7, [r4, #0]
 801acde:	442b      	add	r3, r5
 801ace0:	b209      	sxth	r1, r1
 801ace2:	b212      	sxth	r2, r2
 801ace4:	8060      	strh	r0, [r4, #2]
 801ace6:	b21b      	sxth	r3, r3
 801ace8:	428e      	cmp	r6, r1
 801acea:	bfac      	ite	ge
 801acec:	ebc7 0106 	rsbge	r1, r7, r6
 801acf0:	ebc7 0101 	rsblt	r1, r7, r1
 801acf4:	429a      	cmp	r2, r3
 801acf6:	bfac      	ite	ge
 801acf8:	ebc0 0202 	rsbge	r2, r0, r2
 801acfc:	ebc0 0203 	rsblt	r2, r0, r3
 801ad00:	80a1      	strh	r1, [r4, #4]
 801ad02:	80e2      	strh	r2, [r4, #6]
 801ad04:	e7d1      	b.n	801acaa <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801ad08 <_ZN8touchgfx11Application11getInstanceEv>:
 801ad08:	4b01      	ldr	r3, [pc, #4]	; (801ad10 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801ad0a:	6818      	ldr	r0, [r3, #0]
 801ad0c:	4770      	bx	lr
 801ad0e:	bf00      	nop
 801ad10:	2400b61c 	.word	0x2400b61c

0801ad14 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>:
 801ad14:	b570      	push	{r4, r5, r6, lr}
 801ad16:	2200      	movs	r2, #0
 801ad18:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 801ad1c:	1d04      	adds	r4, r0, #4
 801ad1e:	b295      	uxth	r5, r2
 801ad20:	42ab      	cmp	r3, r5
 801ad22:	d90e      	bls.n	801ad42 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2e>
 801ad24:	f854 6b04 	ldr.w	r6, [r4], #4
 801ad28:	4615      	mov	r5, r2
 801ad2a:	3201      	adds	r2, #1
 801ad2c:	428e      	cmp	r6, r1
 801ad2e:	d1f6      	bne.n	801ad1e <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0xa>
 801ad30:	4428      	add	r0, r5
 801ad32:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 801ad36:	2bff      	cmp	r3, #255	; 0xff
 801ad38:	d002      	beq.n	801ad40 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 801ad3a:	3301      	adds	r3, #1
 801ad3c:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
 801ad40:	bd70      	pop	{r4, r5, r6, pc}
 801ad42:	2b20      	cmp	r3, #32
 801ad44:	d106      	bne.n	801ad54 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x40>
 801ad46:	4b09      	ldr	r3, [pc, #36]	; (801ad6c <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x58>)
 801ad48:	f240 215f 	movw	r1, #607	; 0x25f
 801ad4c:	4a08      	ldr	r2, [pc, #32]	; (801ad70 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x5c>)
 801ad4e:	4809      	ldr	r0, [pc, #36]	; (801ad74 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x60>)
 801ad50:	f00f f948 	bl	8029fe4 <__assert_func>
 801ad54:	18c2      	adds	r2, r0, r3
 801ad56:	2401      	movs	r4, #1
 801ad58:	f882 4088 	strb.w	r4, [r2, #136]	; 0x88
 801ad5c:	191a      	adds	r2, r3, r4
 801ad5e:	f8a0 2084 	strh.w	r2, [r0, #132]	; 0x84
 801ad62:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801ad66:	6041      	str	r1, [r0, #4]
 801ad68:	e7ea      	b.n	801ad40 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 801ad6a:	bf00      	nop
 801ad6c:	0802e457 	.word	0x0802e457
 801ad70:	0802e538 	.word	0x0802e538
 801ad74:	0802e3f6 	.word	0x0802e3f6

0801ad78 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
 801ad78:	b570      	push	{r4, r5, r6, lr}
 801ad7a:	2300      	movs	r3, #0
 801ad7c:	f8b0 6084 	ldrh.w	r6, [r0, #132]	; 0x84
 801ad80:	1d04      	adds	r4, r0, #4
 801ad82:	b29a      	uxth	r2, r3
 801ad84:	4296      	cmp	r6, r2
 801ad86:	d90a      	bls.n	801ad9e <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x26>
 801ad88:	f854 2b04 	ldr.w	r2, [r4], #4
 801ad8c:	428a      	cmp	r2, r1
 801ad8e:	d107      	bne.n	801ada0 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801ad90:	18c5      	adds	r5, r0, r3
 801ad92:	f895 2088 	ldrb.w	r2, [r5, #136]	; 0x88
 801ad96:	b11a      	cbz	r2, 801ada0 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801ad98:	3a01      	subs	r2, #1
 801ad9a:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
 801ad9e:	bd70      	pop	{r4, r5, r6, pc}
 801ada0:	3301      	adds	r3, #1
 801ada2:	e7ee      	b.n	801ad82 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0xa>

0801ada4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801ada4:	2300      	movs	r3, #0
 801ada6:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801adaa:	30a8      	adds	r0, #168	; 0xa8
 801adac:	f820 3c24 	strh.w	r3, [r0, #-36]
 801adb0:	f802 3b01 	strb.w	r3, [r2], #1
 801adb4:	4282      	cmp	r2, r0
 801adb6:	d1fb      	bne.n	801adb0 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801adb8:	4770      	bx	lr

0801adba <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801adba:	4603      	mov	r3, r0
 801adbc:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801adc0:	2200      	movs	r2, #0
 801adc2:	801a      	strh	r2, [r3, #0]
 801adc4:	3308      	adds	r3, #8
 801adc6:	f823 2c06 	strh.w	r2, [r3, #-6]
 801adca:	f823 2c04 	strh.w	r2, [r3, #-4]
 801adce:	f823 2c02 	strh.w	r2, [r3, #-2]
 801add2:	428b      	cmp	r3, r1
 801add4:	d1f5      	bne.n	801adc2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801add6:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801adda:	4770      	bx	lr

0801addc <_ZN8touchgfx11ApplicationC1Ev>:
 801addc:	b570      	push	{r4, r5, r6, lr}
 801adde:	4b1a      	ldr	r3, [pc, #104]	; (801ae48 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801ade0:	2500      	movs	r5, #0
 801ade2:	4604      	mov	r4, r0
 801ade4:	30a8      	adds	r0, #168	; 0xa8
 801ade6:	f840 3ca8 	str.w	r3, [r0, #-168]
 801adea:	f820 5c24 	strh.w	r5, [r0, #-36]
 801adee:	f7ff ffe4 	bl	801adba <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801adf2:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801adf6:	f7ff ffe0 	bl	801adba <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801adfa:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 801adfe:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 801ae02:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801ae06:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801ae0a:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 801ae0e:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 801ae12:	490e      	ldr	r1, [pc, #56]	; (801ae4c <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801ae14:	480e      	ldr	r0, [pc, #56]	; (801ae50 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801ae16:	f00e ffa9 	bl	8029d6c <CRC_Lock>
 801ae1a:	4e0e      	ldr	r6, [pc, #56]	; (801ae54 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801ae1c:	4b0e      	ldr	r3, [pc, #56]	; (801ae58 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801ae1e:	b158      	cbz	r0, 801ae38 <_ZN8touchgfx11ApplicationC1Ev+0x5c>
 801ae20:	801d      	strh	r5, [r3, #0]
 801ae22:	2300      	movs	r3, #0
 801ae24:	4a0d      	ldr	r2, [pc, #52]	; (801ae5c <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801ae26:	4620      	mov	r0, r4
 801ae28:	6013      	str	r3, [r2, #0]
 801ae2a:	4a0d      	ldr	r2, [pc, #52]	; (801ae60 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801ae2c:	6033      	str	r3, [r6, #0]
 801ae2e:	6013      	str	r3, [r2, #0]
 801ae30:	f7ff ffb8 	bl	801ada4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801ae34:	4620      	mov	r0, r4
 801ae36:	bd70      	pop	{r4, r5, r6, pc}
 801ae38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801ae3c:	2002      	movs	r0, #2
 801ae3e:	801a      	strh	r2, [r3, #0]
 801ae40:	6030      	str	r0, [r6, #0]
 801ae42:	f001 fa81 	bl	801c348 <_ZN8touchgfx6Screen4drawEv>
 801ae46:	e7ec      	b.n	801ae22 <_ZN8touchgfx11ApplicationC1Ev+0x46>
 801ae48:	0802e4b8 	.word	0x0802e4b8
 801ae4c:	b5e8b5cd 	.word	0xb5e8b5cd
 801ae50:	f407a5c2 	.word	0xf407a5c2
 801ae54:	2400b60c 	.word	0x2400b60c
 801ae58:	24000056 	.word	0x24000056
 801ae5c:	2400b61c 	.word	0x2400b61c
 801ae60:	2400b610 	.word	0x2400b610

0801ae64 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801ae64:	b510      	push	{r4, lr}
 801ae66:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 801ae6a:	428b      	cmp	r3, r1
 801ae6c:	d806      	bhi.n	801ae7c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x18>
 801ae6e:	4b0b      	ldr	r3, [pc, #44]	; (801ae9c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x38>)
 801ae70:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 801ae74:	4a0a      	ldr	r2, [pc, #40]	; (801aea0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3c>)
 801ae76:	480b      	ldr	r0, [pc, #44]	; (801aea4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x40>)
 801ae78:	f00f f8b4 	bl	8029fe4 <__assert_func>
 801ae7c:	3b01      	subs	r3, #1
 801ae7e:	b29b      	uxth	r3, r3
 801ae80:	428b      	cmp	r3, r1
 801ae82:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801ae86:	d908      	bls.n	801ae9a <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x36>
 801ae88:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801ae8c:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801ae90:	681a      	ldr	r2, [r3, #0]
 801ae92:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801ae96:	685a      	ldr	r2, [r3, #4]
 801ae98:	6062      	str	r2, [r4, #4]
 801ae9a:	bd10      	pop	{r4, pc}
 801ae9c:	0802e420 	.word	0x0802e420
 801aea0:	0802e57d 	.word	0x0802e57d
 801aea4:	0802e42e 	.word	0x0802e42e

0801aea8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801aea8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801aeaa:	466b      	mov	r3, sp
 801aeac:	4604      	mov	r4, r0
 801aeae:	e883 0006 	stmia.w	r3, {r1, r2}
 801aeb2:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801aeb6:	2a07      	cmp	r2, #7
 801aeb8:	d906      	bls.n	801aec8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801aeba:	4b09      	ldr	r3, [pc, #36]	; (801aee0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801aebc:	f44f 71c1 	mov.w	r1, #386	; 0x182
 801aec0:	4a08      	ldr	r2, [pc, #32]	; (801aee4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801aec2:	4809      	ldr	r0, [pc, #36]	; (801aee8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801aec4:	f00f f88e 	bl	8029fe4 <__assert_func>
 801aec8:	1c51      	adds	r1, r2, #1
 801aeca:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801aece:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801aed2:	cb03      	ldmia	r3!, {r0, r1}
 801aed4:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801aed8:	6069      	str	r1, [r5, #4]
 801aeda:	b003      	add	sp, #12
 801aedc:	bd30      	pop	{r4, r5, pc}
 801aede:	bf00      	nop
 801aee0:	0802e47f 	.word	0x0802e47f
 801aee4:	0802e613 	.word	0x0802e613
 801aee8:	0802e42e 	.word	0x0802e42e

0801aeec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801aeec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aef0:	b08d      	sub	sp, #52	; 0x34
 801aef2:	4683      	mov	fp, r0
 801aef4:	ac08      	add	r4, sp, #32
 801aef6:	4620      	mov	r0, r4
 801aef8:	e884 0006 	stmia.w	r4, {r1, r2}
 801aefc:	f7fc f9d5 	bl	80172aa <_ZNK8touchgfx4Rect7isEmptyEv>
 801af00:	2800      	cmp	r0, #0
 801af02:	d16a      	bne.n	801afda <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801af04:	9402      	str	r4, [sp, #8]
 801af06:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801af0a:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801af0e:	2400      	movs	r4, #0
 801af10:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 801af14:	9301      	str	r3, [sp, #4]
 801af16:	36a0      	adds	r6, #160	; 0xa0
 801af18:	42a5      	cmp	r5, r4
 801af1a:	d00d      	beq.n	801af38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
 801af1c:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 801af20:	9802      	ldr	r0, [sp, #8]
 801af22:	f7ff fe89 	bl	801ac38 <_ZNK8touchgfx4Rect8includesERKS0_>
 801af26:	b128      	cbz	r0, 801af34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 801af28:	1e69      	subs	r1, r5, #1
 801af2a:	9801      	ldr	r0, [sp, #4]
 801af2c:	1b09      	subs	r1, r1, r4
 801af2e:	b289      	uxth	r1, r1
 801af30:	f7ff ff98 	bl	801ae64 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801af34:	3401      	adds	r4, #1
 801af36:	e7ef      	b.n	801af18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801af38:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801af3c:	1e7b      	subs	r3, r7, #1
 801af3e:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 801af42:	9703      	str	r7, [sp, #12]
 801af44:	9300      	str	r3, [sp, #0]
 801af46:	2400      	movs	r4, #0
 801af48:	4655      	mov	r5, sl
 801af4a:	9704      	str	r7, [sp, #16]
 801af4c:	4626      	mov	r6, r4
 801af4e:	9b04      	ldr	r3, [sp, #16]
 801af50:	2b00      	cmp	r3, #0
 801af52:	d078      	beq.n	801b046 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
 801af54:	9902      	ldr	r1, [sp, #8]
 801af56:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801af5a:	f7ff fe4b 	bl	801abf4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801af5e:	b360      	cbz	r0, 801afba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801af60:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801af64:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 801af68:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 801af6c:	45e6      	cmp	lr, ip
 801af6e:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 801af72:	db35      	blt.n	801afe0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 801af74:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801af78:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801af7c:	4472      	add	r2, lr
 801af7e:	4463      	add	r3, ip
 801af80:	b212      	sxth	r2, r2
 801af82:	b21b      	sxth	r3, r3
 801af84:	429a      	cmp	r2, r3
 801af86:	dc2b      	bgt.n	801afe0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 801af88:	fa1f f288 	uxth.w	r2, r8
 801af8c:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801af90:	45c1      	cmp	r9, r8
 801af92:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801af96:	4413      	add	r3, r2
 801af98:	fa1f fc89 	uxth.w	ip, r9
 801af9c:	b29b      	uxth	r3, r3
 801af9e:	fa0f fe83 	sxth.w	lr, r3
 801afa2:	db0f      	blt.n	801afc4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
 801afa4:	eba3 030c 	sub.w	r3, r3, ip
 801afa8:	1ac9      	subs	r1, r1, r3
 801afaa:	b209      	sxth	r1, r1
 801afac:	2900      	cmp	r1, #0
 801afae:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801afb2:	dd12      	ble.n	801afda <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801afb4:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 801afb8:	4604      	mov	r4, r0
 801afba:	9b04      	ldr	r3, [sp, #16]
 801afbc:	3d08      	subs	r5, #8
 801afbe:	3b01      	subs	r3, #1
 801afc0:	9304      	str	r3, [sp, #16]
 801afc2:	e7c4      	b.n	801af4e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 801afc4:	4461      	add	r1, ip
 801afc6:	b209      	sxth	r1, r1
 801afc8:	4571      	cmp	r1, lr
 801afca:	dc3a      	bgt.n	801b042 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801afcc:	eba2 020c 	sub.w	r2, r2, ip
 801afd0:	b212      	sxth	r2, r2
 801afd2:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801afd6:	2a00      	cmp	r2, #0
 801afd8:	dcee      	bgt.n	801afb8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 801afda:	b00d      	add	sp, #52	; 0x34
 801afdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801afe0:	45c1      	cmp	r9, r8
 801afe2:	db2e      	blt.n	801b042 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801afe4:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801afe8:	4499      	add	r9, r3
 801afea:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801afee:	4498      	add	r8, r3
 801aff0:	fa0f f989 	sxth.w	r9, r9
 801aff4:	fa0f f888 	sxth.w	r8, r8
 801aff8:	45c1      	cmp	r9, r8
 801affa:	dc22      	bgt.n	801b042 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801affc:	fa1f f28c 	uxth.w	r2, ip
 801b000:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801b004:	45e6      	cmp	lr, ip
 801b006:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801b00a:	4413      	add	r3, r2
 801b00c:	fa1f f88e 	uxth.w	r8, lr
 801b010:	b29b      	uxth	r3, r3
 801b012:	fa0f f983 	sxth.w	r9, r3
 801b016:	db0a      	blt.n	801b02e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
 801b018:	eba3 0308 	sub.w	r3, r3, r8
 801b01c:	1ac9      	subs	r1, r1, r3
 801b01e:	b209      	sxth	r1, r1
 801b020:	2900      	cmp	r1, #0
 801b022:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 801b026:	ddd8      	ble.n	801afda <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801b028:	f8ad 9020 	strh.w	r9, [sp, #32]
 801b02c:	e7c4      	b.n	801afb8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 801b02e:	4441      	add	r1, r8
 801b030:	b209      	sxth	r1, r1
 801b032:	4549      	cmp	r1, r9
 801b034:	dc05      	bgt.n	801b042 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801b036:	eba2 0208 	sub.w	r2, r2, r8
 801b03a:	b212      	sxth	r2, r2
 801b03c:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 801b040:	e7c9      	b.n	801afd6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801b042:	4606      	mov	r6, r0
 801b044:	e7b9      	b.n	801afba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801b046:	2c00      	cmp	r4, #0
 801b048:	f47f af7d 	bne.w	801af46 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 801b04c:	2e00      	cmp	r6, #0
 801b04e:	f000 81dc 	beq.w	801b40a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801b052:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 801b056:	4655      	mov	r5, sl
 801b058:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 801b05c:	b2b9      	uxth	r1, r7
 801b05e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801b062:	b2b3      	uxth	r3, r6
 801b064:	9104      	str	r1, [sp, #16]
 801b066:	9804      	ldr	r0, [sp, #16]
 801b068:	441a      	add	r2, r3
 801b06a:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801b06e:	b292      	uxth	r2, r2
 801b070:	4401      	add	r1, r0
 801b072:	fa0f f882 	sxth.w	r8, r2
 801b076:	b289      	uxth	r1, r1
 801b078:	9105      	str	r1, [sp, #20]
 801b07a:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 801b07e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b082:	9b03      	ldr	r3, [sp, #12]
 801b084:	2b00      	cmp	r3, #0
 801b086:	d054      	beq.n	801b132 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 801b088:	9902      	ldr	r1, [sp, #8]
 801b08a:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801b08e:	f7ff fdb1 	bl	801abf4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b092:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801b096:	b1d8      	cbz	r0, 801b0d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801b098:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 801b09c:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 801b0a0:	4576      	cmp	r6, lr
 801b0a2:	dc26      	bgt.n	801b0f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801b0a4:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 801b0a8:	44f4      	add	ip, lr
 801b0aa:	fa0f fc8c 	sxth.w	ip, ip
 801b0ae:	45e0      	cmp	r8, ip
 801b0b0:	db1f      	blt.n	801b0f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801b0b2:	428f      	cmp	r7, r1
 801b0b4:	fa1f fc81 	uxth.w	ip, r1
 801b0b8:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 801b0bc:	dc0f      	bgt.n	801b0de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 801b0be:	9805      	ldr	r0, [sp, #20]
 801b0c0:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 801b0c4:	eba0 0c0c 	sub.w	ip, r0, ip
 801b0c8:	eba1 010c 	sub.w	r1, r1, ip
 801b0cc:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 801b0d0:	4620      	mov	r0, r4
 801b0d2:	9903      	ldr	r1, [sp, #12]
 801b0d4:	3d08      	subs	r5, #8
 801b0d6:	4604      	mov	r4, r0
 801b0d8:	3901      	subs	r1, #1
 801b0da:	9103      	str	r1, [sp, #12]
 801b0dc:	e7cf      	b.n	801b07e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
 801b0de:	4461      	add	r1, ip
 801b0e0:	b209      	sxth	r1, r1
 801b0e2:	4549      	cmp	r1, r9
 801b0e4:	dcf5      	bgt.n	801b0d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801b0e6:	9904      	ldr	r1, [sp, #16]
 801b0e8:	eba1 0c0c 	sub.w	ip, r1, ip
 801b0ec:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 801b0f0:	e7ee      	b.n	801b0d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801b0f2:	428f      	cmp	r7, r1
 801b0f4:	dced      	bgt.n	801b0d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801b0f6:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 801b0fa:	4461      	add	r1, ip
 801b0fc:	b209      	sxth	r1, r1
 801b0fe:	4589      	cmp	r9, r1
 801b100:	dbe7      	blt.n	801b0d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801b102:	4576      	cmp	r6, lr
 801b104:	fa1f fc8e 	uxth.w	ip, lr
 801b108:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 801b10c:	dc08      	bgt.n	801b120 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
 801b10e:	eba2 0c0c 	sub.w	ip, r2, ip
 801b112:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 801b116:	eba1 010c 	sub.w	r1, r1, ip
 801b11a:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 801b11e:	e7d7      	b.n	801b0d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801b120:	4461      	add	r1, ip
 801b122:	b209      	sxth	r1, r1
 801b124:	4588      	cmp	r8, r1
 801b126:	dbd4      	blt.n	801b0d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801b128:	eba3 0c0c 	sub.w	ip, r3, ip
 801b12c:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 801b130:	e7ce      	b.n	801b0d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801b132:	2c00      	cmp	r4, #0
 801b134:	f000 8169 	beq.w	801b40a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801b138:	9b00      	ldr	r3, [sp, #0]
 801b13a:	3301      	adds	r3, #1
 801b13c:	f000 8165 	beq.w	801b40a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801b140:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 801b144:	9802      	ldr	r0, [sp, #8]
 801b146:	4621      	mov	r1, r4
 801b148:	f7ff fd76 	bl	801ac38 <_ZNK8touchgfx4Rect8includesERKS0_>
 801b14c:	b120      	cbz	r0, 801b158 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
 801b14e:	f8bd 1000 	ldrh.w	r1, [sp]
 801b152:	9801      	ldr	r0, [sp, #4]
 801b154:	f7ff fe86 	bl	801ae64 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b158:	9902      	ldr	r1, [sp, #8]
 801b15a:	4620      	mov	r0, r4
 801b15c:	f7ff fd4a 	bl	801abf4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b160:	2800      	cmp	r0, #0
 801b162:	f000 809b 	beq.w	801b29c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
 801b166:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 801b16a:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 801b16e:	fa1f f288 	uxth.w	r2, r8
 801b172:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 801b176:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 801b17a:	19d5      	adds	r5, r2, r7
 801b17c:	b2a1      	uxth	r1, r4
 801b17e:	45a0      	cmp	r8, r4
 801b180:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801b184:	fa1f f985 	uxth.w	r9, r5
 801b188:	440b      	add	r3, r1
 801b18a:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 801b18e:	fa0f f589 	sxth.w	r5, r9
 801b192:	b29b      	uxth	r3, r3
 801b194:	9503      	str	r5, [sp, #12]
 801b196:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801b19a:	9507      	str	r5, [sp, #28]
 801b19c:	f340 809d 	ble.w	801b2da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801b1a0:	1a52      	subs	r2, r2, r1
 801b1a2:	4584      	cmp	ip, r0
 801b1a4:	fa0f fe83 	sxth.w	lr, r3
 801b1a8:	b292      	uxth	r2, r2
 801b1aa:	b215      	sxth	r5, r2
 801b1ac:	dd2f      	ble.n	801b20e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 801b1ae:	9e00      	ldr	r6, [sp, #0]
 801b1b0:	fa1f fc8c 	uxth.w	ip, ip
 801b1b4:	b280      	uxth	r0, r0
 801b1b6:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801b1ba:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 801b1be:	9e03      	ldr	r6, [sp, #12]
 801b1c0:	ebac 0300 	sub.w	r3, ip, r0
 801b1c4:	448c      	add	ip, r1
 801b1c6:	eba6 060e 	sub.w	r6, r6, lr
 801b1ca:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 801b1ce:	b29b      	uxth	r3, r3
 801b1d0:	4470      	add	r0, lr
 801b1d2:	fa0f fc8c 	sxth.w	ip, ip
 801b1d6:	b21c      	sxth	r4, r3
 801b1d8:	b200      	sxth	r0, r0
 801b1da:	4366      	muls	r6, r4
 801b1dc:	ebac 0000 	sub.w	r0, ip, r0
 801b1e0:	4368      	muls	r0, r5
 801b1e2:	4286      	cmp	r6, r0
 801b1e4:	db09      	blt.n	801b1fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 801b1e6:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 801b1ea:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 801b1ee:	4417      	add	r7, r2
 801b1f0:	f8ad 3020 	strh.w	r3, [sp, #32]
 801b1f4:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 801b1f8:	e685      	b.n	801af06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801b1fa:	440b      	add	r3, r1
 801b1fc:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 801b200:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801b204:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 801b208:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801b20c:	e67b      	b.n	801af06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801b20e:	9e03      	ldr	r6, [sp, #12]
 801b210:	45b6      	cmp	lr, r6
 801b212:	da28      	bge.n	801b266 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
 801b214:	9b00      	ldr	r3, [sp, #0]
 801b216:	eba6 060e 	sub.w	r6, r6, lr
 801b21a:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 801b21e:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 801b222:	eb04 030c 	add.w	r3, r4, ip
 801b226:	fa1f f883 	uxth.w	r8, r3
 801b22a:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 801b22e:	4403      	add	r3, r0
 801b230:	fa0f f988 	sxth.w	r9, r8
 801b234:	eba0 000c 	sub.w	r0, r0, ip
 801b238:	eba3 0308 	sub.w	r3, r3, r8
 801b23c:	4368      	muls	r0, r5
 801b23e:	b29b      	uxth	r3, r3
 801b240:	fa0f f883 	sxth.w	r8, r3
 801b244:	fb08 f606 	mul.w	r6, r8, r6
 801b248:	42b0      	cmp	r0, r6
 801b24a:	dc06      	bgt.n	801b25a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
 801b24c:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 801b250:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 801b254:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 801b258:	e7c9      	b.n	801b1ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
 801b25a:	4423      	add	r3, r4
 801b25c:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 801b260:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801b264:	e64f      	b.n	801af06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801b266:	eba3 0309 	sub.w	r3, r3, r9
 801b26a:	9807      	ldr	r0, [sp, #28]
 801b26c:	b29b      	uxth	r3, r3
 801b26e:	2806      	cmp	r0, #6
 801b270:	fa0f fc83 	sxth.w	ip, r3
 801b274:	d818      	bhi.n	801b2a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
 801b276:	4652      	mov	r2, sl
 801b278:	ab0a      	add	r3, sp, #40	; 0x28
 801b27a:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 801b27e:	6851      	ldr	r1, [r2, #4]
 801b280:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 801b284:	c303      	stmia	r3!, {r0, r1}
 801b286:	9b03      	ldr	r3, [sp, #12]
 801b288:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 801b28c:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 801b290:	ab0a      	add	r3, sp, #40	; 0x28
 801b292:	9801      	ldr	r0, [sp, #4]
 801b294:	e893 0006 	ldmia.w	r3, {r1, r2}
 801b298:	f7ff fe06 	bl	801aea8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801b29c:	9b00      	ldr	r3, [sp, #0]
 801b29e:	f1aa 0a08 	sub.w	sl, sl, #8
 801b2a2:	3b01      	subs	r3, #1
 801b2a4:	9300      	str	r3, [sp, #0]
 801b2a6:	e747      	b.n	801b138 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801b2a8:	9800      	ldr	r0, [sp, #0]
 801b2aa:	45ac      	cmp	ip, r5
 801b2ac:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801b2b0:	db0c      	blt.n	801b2cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 801b2b2:	4417      	add	r7, r2
 801b2b4:	4458      	add	r0, fp
 801b2b6:	f8ad 4020 	strh.w	r4, [sp, #32]
 801b2ba:	b2bf      	uxth	r7, r7
 801b2bc:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 801b2c0:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 801b2c4:	440f      	add	r7, r1
 801b2c6:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 801b2ca:	e61c      	b.n	801af06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801b2cc:	4458      	add	r0, fp
 801b2ce:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 801b2d2:	443b      	add	r3, r7
 801b2d4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801b2d8:	e615      	b.n	801af06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801b2da:	fa1f f18c 	uxth.w	r1, ip
 801b2de:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 801b2e2:	b282      	uxth	r2, r0
 801b2e4:	4584      	cmp	ip, r0
 801b2e6:	eb01 0e05 	add.w	lr, r1, r5
 801b2ea:	9204      	str	r2, [sp, #16]
 801b2ec:	fa1f fe8e 	uxth.w	lr, lr
 801b2f0:	9e04      	ldr	r6, [sp, #16]
 801b2f2:	fa0f f28e 	sxth.w	r2, lr
 801b2f6:	9205      	str	r2, [sp, #20]
 801b2f8:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 801b2fc:	4432      	add	r2, r6
 801b2fe:	b292      	uxth	r2, r2
 801b300:	9206      	str	r2, [sp, #24]
 801b302:	da26      	bge.n	801b352 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 801b304:	eba3 0309 	sub.w	r3, r3, r9
 801b308:	eba2 020e 	sub.w	r2, r2, lr
 801b30c:	eba0 000c 	sub.w	r0, r0, ip
 801b310:	eba4 0408 	sub.w	r4, r4, r8
 801b314:	b29b      	uxth	r3, r3
 801b316:	b292      	uxth	r2, r2
 801b318:	fa0f fa83 	sxth.w	sl, r3
 801b31c:	b211      	sxth	r1, r2
 801b31e:	fb0a f000 	mul.w	r0, sl, r0
 801b322:	434c      	muls	r4, r1
 801b324:	42a0      	cmp	r0, r4
 801b326:	9800      	ldr	r0, [sp, #0]
 801b328:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801b32c:	dc06      	bgt.n	801b33c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
 801b32e:	4458      	add	r0, fp
 801b330:	9a05      	ldr	r2, [sp, #20]
 801b332:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 801b336:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 801b33a:	e7ca      	b.n	801b2d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 801b33c:	eb0b 0300 	add.w	r3, fp, r0
 801b340:	9903      	ldr	r1, [sp, #12]
 801b342:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 801b346:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 801b34a:	442a      	add	r2, r5
 801b34c:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801b350:	e5d9      	b.n	801af06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801b352:	9e04      	ldr	r6, [sp, #16]
 801b354:	9a03      	ldr	r2, [sp, #12]
 801b356:	1b89      	subs	r1, r1, r6
 801b358:	b21e      	sxth	r6, r3
 801b35a:	b289      	uxth	r1, r1
 801b35c:	4296      	cmp	r6, r2
 801b35e:	fa0f fc81 	sxth.w	ip, r1
 801b362:	dd25      	ble.n	801b3b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c4>
 801b364:	eba3 0309 	sub.w	r3, r3, r9
 801b368:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801b36c:	9e05      	ldr	r6, [sp, #20]
 801b36e:	eba4 0408 	sub.w	r4, r4, r8
 801b372:	b29b      	uxth	r3, r3
 801b374:	eba6 0902 	sub.w	r9, r6, r2
 801b378:	fb0c f404 	mul.w	r4, ip, r4
 801b37c:	b218      	sxth	r0, r3
 801b37e:	9a00      	ldr	r2, [sp, #0]
 801b380:	fb00 f909 	mul.w	r9, r0, r9
 801b384:	00d2      	lsls	r2, r2, #3
 801b386:	454c      	cmp	r4, r9
 801b388:	db03      	blt.n	801b392 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a6>
 801b38a:	445a      	add	r2, fp
 801b38c:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 801b390:	e79f      	b.n	801b2d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 801b392:	eb0b 0302 	add.w	r3, fp, r2
 801b396:	9a03      	ldr	r2, [sp, #12]
 801b398:	4429      	add	r1, r5
 801b39a:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 801b39e:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 801b3a2:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 801b3a6:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801b3aa:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801b3ae:	e5aa      	b.n	801af06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801b3b0:	9b06      	ldr	r3, [sp, #24]
 801b3b2:	9c07      	ldr	r4, [sp, #28]
 801b3b4:	eba3 020e 	sub.w	r2, r3, lr
 801b3b8:	2c06      	cmp	r4, #6
 801b3ba:	b292      	uxth	r2, r2
 801b3bc:	b213      	sxth	r3, r2
 801b3be:	d80d      	bhi.n	801b3dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f0>
 801b3c0:	4651      	mov	r1, sl
 801b3c2:	aa0a      	add	r2, sp, #40	; 0x28
 801b3c4:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 801b3c8:	6849      	ldr	r1, [r1, #4]
 801b3ca:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 801b3ce:	9b05      	ldr	r3, [sp, #20]
 801b3d0:	c203      	stmia	r2!, {r0, r1}
 801b3d2:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 801b3d6:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 801b3da:	e759      	b.n	801b290 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
 801b3dc:	9c00      	ldr	r4, [sp, #0]
 801b3de:	4563      	cmp	r3, ip
 801b3e0:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801b3e4:	db0d      	blt.n	801b402 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x516>
 801b3e6:	4429      	add	r1, r5
 801b3e8:	9a04      	ldr	r2, [sp, #16]
 801b3ea:	445c      	add	r4, fp
 801b3ec:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801b3f0:	b289      	uxth	r1, r1
 801b3f2:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 801b3f6:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801b3fa:	4411      	add	r1, r2
 801b3fc:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 801b400:	e581      	b.n	801af06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801b402:	445c      	add	r4, fp
 801b404:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 801b408:	e79f      	b.n	801b34a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
 801b40a:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801b40e:	2f07      	cmp	r7, #7
 801b410:	d806      	bhi.n	801b420 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 801b412:	ab08      	add	r3, sp, #32
 801b414:	9801      	ldr	r0, [sp, #4]
 801b416:	e893 0006 	ldmia.w	r3, {r1, r2}
 801b41a:	f7ff fd45 	bl	801aea8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801b41e:	e5dc      	b.n	801afda <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801b420:	f107 39ff 	add.w	r9, r7, #4294967295
 801b424:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801b428:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 801b42c:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801b430:	f04f 35ff 	mov.w	r5, #4294967295
 801b434:	2400      	movs	r4, #0
 801b436:	9304      	str	r3, [sp, #16]
 801b438:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 801b43c:	f109 32ff 	add.w	r2, r9, #4294967295
 801b440:	9300      	str	r3, [sp, #0]
 801b442:	4690      	mov	r8, r2
 801b444:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 801b448:	9303      	str	r3, [sp, #12]
 801b44a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801b44e:	f1b8 3fff 	cmp.w	r8, #4294967295
 801b452:	6818      	ldr	r0, [r3, #0]
 801b454:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 801b458:	9206      	str	r2, [sp, #24]
 801b45a:	bf16      	itet	ne
 801b45c:	9904      	ldrne	r1, [sp, #16]
 801b45e:	f8dd e008 	ldreq.w	lr, [sp, #8]
 801b462:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 801b466:	9305      	str	r3, [sp, #20]
 801b468:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801b46c:	f8be 6004 	ldrh.w	r6, [lr, #4]
 801b470:	fb16 f601 	smulbb	r6, r6, r1
 801b474:	6859      	ldr	r1, [r3, #4]
 801b476:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801b47a:	4671      	mov	r1, lr
 801b47c:	a80a      	add	r0, sp, #40	; 0x28
 801b47e:	f7ff fbfd 	bl	801ac7c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801b482:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 801b486:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801b48a:	9b03      	ldr	r3, [sp, #12]
 801b48c:	9a00      	ldr	r2, [sp, #0]
 801b48e:	fb11 f100 	smulbb	r1, r1, r0
 801b492:	2008      	movs	r0, #8
 801b494:	fb02 6603 	mla	r6, r2, r3, r6
 801b498:	1b8e      	subs	r6, r1, r6
 801b49a:	fb91 f1f0 	sdiv	r1, r1, r0
 801b49e:	42b1      	cmp	r1, r6
 801b4a0:	dc21      	bgt.n	801b4e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 801b4a2:	4556      	cmp	r6, sl
 801b4a4:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 801b4a8:	da03      	bge.n	801b4b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c6>
 801b4aa:	b1e6      	cbz	r6, 801b4e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 801b4ac:	46b2      	mov	sl, r6
 801b4ae:	4645      	mov	r5, r8
 801b4b0:	464c      	mov	r4, r9
 801b4b2:	f108 38ff 	add.w	r8, r8, #4294967295
 801b4b6:	f118 0f02 	cmn.w	r8, #2
 801b4ba:	d1c8      	bne.n	801b44e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x562>
 801b4bc:	f1b2 3fff 	cmp.w	r2, #4294967295
 801b4c0:	f1a7 0708 	sub.w	r7, r7, #8
 801b4c4:	4691      	mov	r9, r2
 801b4c6:	d1b7      	bne.n	801b438 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 801b4c8:	9b01      	ldr	r3, [sp, #4]
 801b4ca:	b2a6      	uxth	r6, r4
 801b4cc:	00e4      	lsls	r4, r4, #3
 801b4ce:	1918      	adds	r0, r3, r4
 801b4d0:	1c6b      	adds	r3, r5, #1
 801b4d2:	d10b      	bne.n	801b4ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x600>
 801b4d4:	4601      	mov	r1, r0
 801b4d6:	9802      	ldr	r0, [sp, #8]
 801b4d8:	f7ff fbd0 	bl	801ac7c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801b4dc:	4631      	mov	r1, r6
 801b4de:	9801      	ldr	r0, [sp, #4]
 801b4e0:	f7ff fcc0 	bl	801ae64 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b4e4:	e50f      	b.n	801af06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801b4e6:	4645      	mov	r5, r8
 801b4e8:	464c      	mov	r4, r9
 801b4ea:	e7ed      	b.n	801b4c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5dc>
 801b4ec:	9b01      	ldr	r3, [sp, #4]
 801b4ee:	00ed      	lsls	r5, r5, #3
 801b4f0:	445c      	add	r4, fp
 801b4f2:	1959      	adds	r1, r3, r5
 801b4f4:	445d      	add	r5, fp
 801b4f6:	f7ff fbc1 	bl	801ac7c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801b4fa:	9b02      	ldr	r3, [sp, #8]
 801b4fc:	cb03      	ldmia	r3!, {r0, r1}
 801b4fe:	9b02      	ldr	r3, [sp, #8]
 801b500:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 801b504:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 801b508:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 801b50c:	6861      	ldr	r1, [r4, #4]
 801b50e:	c303      	stmia	r3!, {r0, r1}
 801b510:	e7e4      	b.n	801b4dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
	...

0801b514 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801b514:	4b1d      	ldr	r3, [pc, #116]	; (801b58c <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801b516:	b530      	push	{r4, r5, lr}
 801b518:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b51c:	b085      	sub	sp, #20
 801b51e:	4b1c      	ldr	r3, [pc, #112]	; (801b590 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801b520:	460c      	mov	r4, r1
 801b522:	2100      	movs	r1, #0
 801b524:	4605      	mov	r5, r0
 801b526:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b52a:	6820      	ldr	r0, [r4, #0]
 801b52c:	9100      	str	r1, [sp, #0]
 801b52e:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b532:	ab02      	add	r3, sp, #8
 801b534:	6861      	ldr	r1, [r4, #4]
 801b536:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b53a:	c303      	stmia	r3!, {r0, r1}
 801b53c:	4669      	mov	r1, sp
 801b53e:	a802      	add	r0, sp, #8
 801b540:	f7fb fe70 	bl	8017224 <_ZN8touchgfx4RectaNERKS0_>
 801b544:	ab02      	add	r3, sp, #8
 801b546:	cb03      	ldmia	r3!, {r0, r1}
 801b548:	4b12      	ldr	r3, [pc, #72]	; (801b594 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 801b54a:	6020      	str	r0, [r4, #0]
 801b54c:	6818      	ldr	r0, [r3, #0]
 801b54e:	6061      	str	r1, [r4, #4]
 801b550:	b138      	cbz	r0, 801b562 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801b552:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 801b556:	b133      	cbz	r3, 801b566 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 801b558:	6821      	ldr	r1, [r4, #0]
 801b55a:	4628      	mov	r0, r5
 801b55c:	6862      	ldr	r2, [r4, #4]
 801b55e:	f7ff fcc5 	bl	801aeec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801b562:	b005      	add	sp, #20
 801b564:	bd30      	pop	{r4, r5, pc}
 801b566:	6803      	ldr	r3, [r0, #0]
 801b568:	4621      	mov	r1, r4
 801b56a:	689b      	ldr	r3, [r3, #8]
 801b56c:	4798      	blx	r3
 801b56e:	4b0a      	ldr	r3, [pc, #40]	; (801b598 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 801b570:	6818      	ldr	r0, [r3, #0]
 801b572:	b118      	cbz	r0, 801b57c <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 801b574:	6803      	ldr	r3, [r0, #0]
 801b576:	4621      	mov	r1, r4
 801b578:	689b      	ldr	r3, [r3, #8]
 801b57a:	4798      	blx	r3
 801b57c:	4b07      	ldr	r3, [pc, #28]	; (801b59c <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 801b57e:	4621      	mov	r1, r4
 801b580:	6818      	ldr	r0, [r3, #0]
 801b582:	6803      	ldr	r3, [r0, #0]
 801b584:	69db      	ldr	r3, [r3, #28]
 801b586:	4798      	blx	r3
 801b588:	e7eb      	b.n	801b562 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801b58a:	bf00      	nop
 801b58c:	2400b5c4 	.word	0x2400b5c4
 801b590:	2400b5c6 	.word	0x2400b5c6
 801b594:	2400b60c 	.word	0x2400b60c
 801b598:	2400b608 	.word	0x2400b608
 801b59c:	2400b5d0 	.word	0x2400b5d0

0801b5a0 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801b5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5a4:	4604      	mov	r4, r0
 801b5a6:	b09b      	sub	sp, #108	; 0x6c
 801b5a8:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 801b5ac:	b129      	cbz	r1, 801b5ba <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801b5ae:	2300      	movs	r3, #0
 801b5b0:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801b5b4:	b01b      	add	sp, #108	; 0x6c
 801b5b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b5ba:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 801b5be:	4630      	mov	r0, r6
 801b5c0:	f7fb fe73 	bl	80172aa <_ZNK8touchgfx4Rect7isEmptyEv>
 801b5c4:	4605      	mov	r5, r0
 801b5c6:	b940      	cbnz	r0, 801b5da <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 801b5c8:	4620      	mov	r0, r4
 801b5ca:	e896 0006 	ldmia.w	r6, {r1, r2}
 801b5ce:	f7ff fc8d 	bl	801aeec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801b5d2:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 801b5d6:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801b5da:	4ba6      	ldr	r3, [pc, #664]	; (801b874 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d4>)
 801b5dc:	681b      	ldr	r3, [r3, #0]
 801b5de:	b33b      	cbz	r3, 801b630 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801b5e0:	4da5      	ldr	r5, [pc, #660]	; (801b878 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 801b5e2:	4628      	mov	r0, r5
 801b5e4:	f7fb fe61 	bl	80172aa <_ZNK8touchgfx4Rect7isEmptyEv>
 801b5e8:	4606      	mov	r6, r0
 801b5ea:	bb08      	cbnz	r0, 801b630 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801b5ec:	4628      	mov	r0, r5
 801b5ee:	f7ff f9b1 	bl	801a954 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801b5f2:	6829      	ldr	r1, [r5, #0]
 801b5f4:	686a      	ldr	r2, [r5, #4]
 801b5f6:	4620      	mov	r0, r4
 801b5f8:	f7ff fc78 	bl	801aeec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801b5fc:	802e      	strh	r6, [r5, #0]
 801b5fe:	806e      	strh	r6, [r5, #2]
 801b600:	80ae      	strh	r6, [r5, #4]
 801b602:	80ee      	strh	r6, [r5, #6]
 801b604:	4f9d      	ldr	r7, [pc, #628]	; (801b87c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 801b606:	a809      	add	r0, sp, #36	; 0x24
 801b608:	f7ff fbd7 	bl	801adba <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801b60c:	883d      	ldrh	r5, [r7, #0]
 801b60e:	462e      	mov	r6, r5
 801b610:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801b614:	42b3      	cmp	r3, r6
 801b616:	d910      	bls.n	801b63a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 801b618:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801b61c:	3601      	adds	r6, #1
 801b61e:	a809      	add	r0, sp, #36	; 0x24
 801b620:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801b624:	b2b6      	uxth	r6, r6
 801b626:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801b62a:	f7ff fc3d 	bl	801aea8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801b62e:	e7ef      	b.n	801b610 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801b630:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801b634:	2b00      	cmp	r3, #0
 801b636:	d1e5      	bne.n	801b604 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 801b638:	e7bc      	b.n	801b5b4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801b63a:	462e      	mov	r6, r5
 801b63c:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801b640:	42b3      	cmp	r3, r6
 801b642:	d90b      	bls.n	801b65c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 801b644:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801b648:	3601      	adds	r6, #1
 801b64a:	4620      	mov	r0, r4
 801b64c:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801b650:	b2b6      	uxth	r6, r6
 801b652:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801b656:	f7ff fc49 	bl	801aeec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801b65a:	e7ef      	b.n	801b63c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 801b65c:	4a88      	ldr	r2, [pc, #544]	; (801b880 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 801b65e:	6813      	ldr	r3, [r2, #0]
 801b660:	4690      	mov	r8, r2
 801b662:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801b666:	2b01      	cmp	r3, #1
 801b668:	f040 8094 	bne.w	801b794 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f4>
 801b66c:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801b670:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801b674:	f04f 0900 	mov.w	r9, #0
 801b678:	33aa      	adds	r3, #170	; 0xaa
 801b67a:	42a8      	cmp	r0, r5
 801b67c:	f103 0308 	add.w	r3, r3, #8
 801b680:	dd0a      	ble.n	801b698 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 801b682:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801b686:	3501      	adds	r5, #1
 801b688:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801b68c:	440a      	add	r2, r1
 801b68e:	b212      	sxth	r2, r2
 801b690:	4591      	cmp	r9, r2
 801b692:	bfb8      	it	lt
 801b694:	4691      	movlt	r9, r2
 801b696:	e7f0      	b.n	801b67a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 801b698:	4b7a      	ldr	r3, [pc, #488]	; (801b884 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 801b69a:	4e7b      	ldr	r6, [pc, #492]	; (801b888 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 801b69c:	881d      	ldrh	r5, [r3, #0]
 801b69e:	2300      	movs	r3, #0
 801b6a0:	2d0f      	cmp	r5, #15
 801b6a2:	bf8c      	ite	hi
 801b6a4:	08ed      	lsrhi	r5, r5, #3
 801b6a6:	2501      	movls	r5, #1
 801b6a8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801b6ac:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801b6b0:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 801b6b4:	f8d8 0000 	ldr.w	r0, [r8]
 801b6b8:	440b      	add	r3, r1
 801b6ba:	6802      	ldr	r2, [r0, #0]
 801b6bc:	b21b      	sxth	r3, r3
 801b6be:	4599      	cmp	r9, r3
 801b6c0:	dd4b      	ble.n	801b75a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ba>
 801b6c2:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 801b6c6:	4798      	blx	r3
 801b6c8:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801b6cc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801b6d0:	4413      	add	r3, r2
 801b6d2:	b21b      	sxth	r3, r3
 801b6d4:	195a      	adds	r2, r3, r5
 801b6d6:	4290      	cmp	r0, r2
 801b6d8:	da07      	bge.n	801b6ea <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801b6da:	4581      	cmp	r9, r0
 801b6dc:	dd05      	ble.n	801b6ea <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801b6de:	4298      	cmp	r0, r3
 801b6e0:	da33      	bge.n	801b74a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801b6e2:	2b00      	cmp	r3, #0
 801b6e4:	dd31      	ble.n	801b74a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801b6e6:	4648      	mov	r0, r9
 801b6e8:	e004      	b.n	801b6f4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 801b6ea:	4298      	cmp	r0, r3
 801b6ec:	dbfb      	blt.n	801b6e6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 801b6ee:	4548      	cmp	r0, r9
 801b6f0:	bfa8      	it	ge
 801b6f2:	4648      	movge	r0, r9
 801b6f4:	f9b6 2000 	ldrsh.w	r2, [r6]
 801b6f8:	2100      	movs	r1, #0
 801b6fa:	1ac0      	subs	r0, r0, r3
 801b6fc:	f8b7 a000 	ldrh.w	sl, [r7]
 801b700:	f8ad 1014 	strh.w	r1, [sp, #20]
 801b704:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b708:	f8ad 2018 	strh.w	r2, [sp, #24]
 801b70c:	f8ad 001a 	strh.w	r0, [sp, #26]
 801b710:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801b714:	4553      	cmp	r3, sl
 801b716:	d9c9      	bls.n	801b6ac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801b718:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801b71c:	ab07      	add	r3, sp, #28
 801b71e:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801b722:	6851      	ldr	r1, [r2, #4]
 801b724:	c303      	stmia	r3!, {r0, r1}
 801b726:	a807      	add	r0, sp, #28
 801b728:	a905      	add	r1, sp, #20
 801b72a:	f7fb fd7b 	bl	8017224 <_ZN8touchgfx4RectaNERKS0_>
 801b72e:	a807      	add	r0, sp, #28
 801b730:	f7fb fdbb 	bl	80172aa <_ZNK8touchgfx4Rect7isEmptyEv>
 801b734:	b920      	cbnz	r0, 801b740 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 801b736:	6823      	ldr	r3, [r4, #0]
 801b738:	a907      	add	r1, sp, #28
 801b73a:	4620      	mov	r0, r4
 801b73c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b73e:	4798      	blx	r3
 801b740:	f10a 0a01 	add.w	sl, sl, #1
 801b744:	fa1f fa8a 	uxth.w	sl, sl
 801b748:	e7e2      	b.n	801b710 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 801b74a:	f8d8 0000 	ldr.w	r0, [r8]
 801b74e:	2101      	movs	r1, #1
 801b750:	6803      	ldr	r3, [r0, #0]
 801b752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b756:	4798      	blx	r3
 801b758:	e7a8      	b.n	801b6ac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801b75a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 801b75c:	4798      	blx	r3
 801b75e:	4b4b      	ldr	r3, [pc, #300]	; (801b88c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 801b760:	781b      	ldrb	r3, [r3, #0]
 801b762:	2b00      	cmp	r3, #0
 801b764:	f43f af26 	beq.w	801b5b4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801b768:	2300      	movs	r3, #0
 801b76a:	883d      	ldrh	r5, [r7, #0]
 801b76c:	34ea      	adds	r4, #234	; 0xea
 801b76e:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801b772:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801b776:	42ab      	cmp	r3, r5
 801b778:	f67f af1c 	bls.w	801b5b4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801b77c:	ab1a      	add	r3, sp, #104	; 0x68
 801b77e:	4620      	mov	r0, r4
 801b780:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801b784:	3501      	adds	r5, #1
 801b786:	3b44      	subs	r3, #68	; 0x44
 801b788:	b2ad      	uxth	r5, r5
 801b78a:	e893 0006 	ldmia.w	r3, {r1, r2}
 801b78e:	f7ff fb8b 	bl	801aea8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801b792:	e7ee      	b.n	801b772 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d2>
 801b794:	2b02      	cmp	r3, #2
 801b796:	f040 813d 	bne.w	801ba14 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>
 801b79a:	4b3d      	ldr	r3, [pc, #244]	; (801b890 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
 801b79c:	781b      	ldrb	r3, [r3, #0]
 801b79e:	2b01      	cmp	r3, #1
 801b7a0:	d02c      	beq.n	801b7fc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25c>
 801b7a2:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 801b7a6:	883a      	ldrh	r2, [r7, #0]
 801b7a8:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 801b7ac:	3201      	adds	r2, #1
 801b7ae:	b292      	uxth	r2, r2
 801b7b0:	2900      	cmp	r1, #0
 801b7b2:	d0d4      	beq.n	801b75e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801b7b4:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 801b7b8:	4610      	mov	r0, r2
 801b7ba:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 801b7be:	f04f 0a00 	mov.w	sl, #0
 801b7c2:	441d      	add	r5, r3
 801b7c4:	b22d      	sxth	r5, r5
 801b7c6:	b283      	uxth	r3, r0
 801b7c8:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 801b7cc:	4299      	cmp	r1, r3
 801b7ce:	f240 80c3 	bls.w	801b958 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b8>
 801b7d2:	4426      	add	r6, r4
 801b7d4:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 801b7d8:	4684      	mov	ip, r0
 801b7da:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 801b7de:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 801b7e2:	4573      	cmp	r3, lr
 801b7e4:	f340 80a5 	ble.w	801b932 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x392>
 801b7e8:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 801b7ec:	4475      	add	r5, lr
 801b7ee:	b22d      	sxth	r5, r5
 801b7f0:	429d      	cmp	r5, r3
 801b7f2:	bfa8      	it	ge
 801b7f4:	461d      	movge	r5, r3
 801b7f6:	3001      	adds	r0, #1
 801b7f8:	46e2      	mov	sl, ip
 801b7fa:	e7e4      	b.n	801b7c6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x226>
 801b7fc:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 801b800:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 801b804:	f1bb 0f00 	cmp.w	fp, #0
 801b808:	d0a9      	beq.n	801b75e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801b80a:	883b      	ldrh	r3, [r7, #0]
 801b80c:	2600      	movs	r6, #0
 801b80e:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 801b812:	3301      	adds	r3, #1
 801b814:	b29b      	uxth	r3, r3
 801b816:	b299      	uxth	r1, r3
 801b818:	00f5      	lsls	r5, r6, #3
 801b81a:	458b      	cmp	fp, r1
 801b81c:	d93a      	bls.n	801b894 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 801b81e:	4425      	add	r5, r4
 801b820:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801b824:	469c      	mov	ip, r3
 801b826:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 801b82a:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 801b82e:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 801b832:	4408      	add	r0, r1
 801b834:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 801b838:	4471      	add	r1, lr
 801b83a:	b200      	sxth	r0, r0
 801b83c:	b209      	sxth	r1, r1
 801b83e:	4288      	cmp	r0, r1
 801b840:	da06      	bge.n	801b850 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2b0>
 801b842:	4586      	cmp	lr, r0
 801b844:	4672      	mov	r2, lr
 801b846:	bfb8      	it	lt
 801b848:	4602      	movlt	r2, r0
 801b84a:	3301      	adds	r3, #1
 801b84c:	4666      	mov	r6, ip
 801b84e:	e7e2      	b.n	801b816 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 801b850:	d10b      	bne.n	801b86a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ca>
 801b852:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 801b856:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 801b85a:	458c      	cmp	ip, r1
 801b85c:	bfb4      	ite	lt
 801b85e:	469c      	movlt	ip, r3
 801b860:	46b4      	movge	ip, r6
 801b862:	4572      	cmp	r2, lr
 801b864:	bfb8      	it	lt
 801b866:	4672      	movlt	r2, lr
 801b868:	e7ef      	b.n	801b84a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 801b86a:	428a      	cmp	r2, r1
 801b86c:	46b4      	mov	ip, r6
 801b86e:	bfb8      	it	lt
 801b870:	460a      	movlt	r2, r1
 801b872:	e7ea      	b.n	801b84a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 801b874:	2400b608 	.word	0x2400b608
 801b878:	2400b614 	.word	0x2400b614
 801b87c:	24000056 	.word	0x24000056
 801b880:	2400b5d0 	.word	0x2400b5d0
 801b884:	2400b5c6 	.word	0x2400b5c6
 801b888:	2400b5c4 	.word	0x2400b5c4
 801b88c:	2400b5ce 	.word	0x2400b5ce
 801b890:	2400b5c8 	.word	0x2400b5c8
 801b894:	1961      	adds	r1, r4, r5
 801b896:	ab07      	add	r3, sp, #28
 801b898:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 801b89c:	6849      	ldr	r1, [r1, #4]
 801b89e:	c303      	stmia	r3!, {r0, r1}
 801b8a0:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801b8a4:	a807      	add	r0, sp, #28
 801b8a6:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801b8aa:	2b13      	cmp	r3, #19
 801b8ac:	440b      	add	r3, r1
 801b8ae:	bfd8      	it	le
 801b8b0:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801b8b4:	1a9b      	subs	r3, r3, r2
 801b8b6:	f8ad 201c 	strh.w	r2, [sp, #28]
 801b8ba:	f8ad 3020 	strh.w	r3, [sp, #32]
 801b8be:	f7ff f863 	bl	801a988 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b8c2:	a807      	add	r0, sp, #28
 801b8c4:	f7fb fcf1 	bl	80172aa <_ZNK8touchgfx4Rect7isEmptyEv>
 801b8c8:	2800      	cmp	r0, #0
 801b8ca:	d199      	bne.n	801b800 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801b8cc:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801b8d0:	4425      	add	r5, r4
 801b8d2:	f8d8 0000 	ldr.w	r0, [r8]
 801b8d6:	f1bc 0f14 	cmp.w	ip, #20
 801b8da:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801b8de:	f8d0 e000 	ldr.w	lr, [r0]
 801b8e2:	bfa8      	it	ge
 801b8e4:	f04f 0c14 	movge.w	ip, #20
 801b8e8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801b8ec:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801b8f0:	fa1f fc8c 	uxth.w	ip, ip
 801b8f4:	f8cd c000 	str.w	ip, [sp]
 801b8f8:	f8de a088 	ldr.w	sl, [lr, #136]	; 0x88
 801b8fc:	47d0      	blx	sl
 801b8fe:	4682      	mov	sl, r0
 801b900:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801b904:	a807      	add	r0, sp, #28
 801b906:	f7ff f825 	bl	801a954 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801b90a:	6823      	ldr	r3, [r4, #0]
 801b90c:	4620      	mov	r0, r4
 801b90e:	a907      	add	r1, sp, #28
 801b910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b912:	4798      	blx	r3
 801b914:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 801b918:	eba0 000a 	sub.w	r0, r0, sl
 801b91c:	b200      	sxth	r0, r0
 801b91e:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 801b922:	2800      	cmp	r0, #0
 801b924:	f47f af6c 	bne.w	801b800 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801b928:	b2b1      	uxth	r1, r6
 801b92a:	4648      	mov	r0, r9
 801b92c:	f7ff fa9a 	bl	801ae64 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b930:	e766      	b.n	801b800 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801b932:	d10c      	bne.n	801b94e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3ae>
 801b934:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 801b938:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 801b93c:	45b4      	cmp	ip, r6
 801b93e:	bfb4      	ite	lt
 801b940:	4684      	movlt	ip, r0
 801b942:	46d4      	movge	ip, sl
 801b944:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 801b948:	4433      	add	r3, r6
 801b94a:	b21b      	sxth	r3, r3
 801b94c:	e750      	b.n	801b7f0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x250>
 801b94e:	4575      	cmp	r5, lr
 801b950:	46d4      	mov	ip, sl
 801b952:	bfa8      	it	ge
 801b954:	4675      	movge	r5, lr
 801b956:	e74e      	b.n	801b7f6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x256>
 801b958:	eb0b 0006 	add.w	r0, fp, r6
 801b95c:	4426      	add	r6, r4
 801b95e:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 801b962:	f1b9 0f13 	cmp.w	r9, #19
 801b966:	bfdc      	itt	le
 801b968:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 801b96c:	444d      	addle	r5, r9
 801b96e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801b972:	bfd8      	it	le
 801b974:	b22d      	sxthle	r5, r5
 801b976:	f7fb fc98 	bl	80172aa <_ZNK8touchgfx4Rect7isEmptyEv>
 801b97a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801b97e:	2800      	cmp	r0, #0
 801b980:	f47f af16 	bne.w	801b7b0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x210>
 801b984:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 801b988:	fa1f f989 	uxth.w	r9, r9
 801b98c:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801b990:	eba5 050c 	sub.w	r5, r5, ip
 801b994:	fa1f f28c 	uxth.w	r2, ip
 801b998:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 801b99c:	eb02 0009 	add.w	r0, r2, r9
 801b9a0:	2d14      	cmp	r5, #20
 801b9a2:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 801b9a6:	bfa8      	it	ge
 801b9a8:	2514      	movge	r5, #20
 801b9aa:	b200      	sxth	r0, r0
 801b9ac:	f8ad 101c 	strh.w	r1, [sp, #28]
 801b9b0:	b289      	uxth	r1, r1
 801b9b2:	fa1f fe85 	uxth.w	lr, r5
 801b9b6:	eba0 000c 	sub.w	r0, r0, ip
 801b9ba:	f8ad c01e 	strh.w	ip, [sp, #30]
 801b9be:	4586      	cmp	lr, r0
 801b9c0:	f8d8 0000 	ldr.w	r0, [r8]
 801b9c4:	f8ad 3020 	strh.w	r3, [sp, #32]
 801b9c8:	b29b      	uxth	r3, r3
 801b9ca:	bfb8      	it	lt
 801b9cc:	46f1      	movlt	r9, lr
 801b9ce:	6805      	ldr	r5, [r0, #0]
 801b9d0:	f8cd 9000 	str.w	r9, [sp]
 801b9d4:	f8d5 5088 	ldr.w	r5, [r5, #136]	; 0x88
 801b9d8:	47a8      	blx	r5
 801b9da:	6823      	ldr	r3, [r4, #0]
 801b9dc:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801b9e0:	a907      	add	r1, sp, #28
 801b9e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b9e4:	4620      	mov	r0, r4
 801b9e6:	4798      	blx	r3
 801b9e8:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801b9ec:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 801b9f0:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 801b9f4:	1a5b      	subs	r3, r3, r1
 801b9f6:	440a      	add	r2, r1
 801b9f8:	b21b      	sxth	r3, r3
 801b9fa:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 801b9fe:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 801ba02:	2b00      	cmp	r3, #0
 801ba04:	f47f aecf 	bne.w	801b7a6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 801ba08:	fa1f f18a 	uxth.w	r1, sl
 801ba0c:	4658      	mov	r0, fp
 801ba0e:	f7ff fa29 	bl	801ae64 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801ba12:	e6c8      	b.n	801b7a6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 801ba14:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801ba18:	42ab      	cmp	r3, r5
 801ba1a:	f67f aea0 	bls.w	801b75e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801ba1e:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801ba22:	ab07      	add	r3, sp, #28
 801ba24:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801ba28:	6851      	ldr	r1, [r2, #4]
 801ba2a:	c303      	stmia	r3!, {r0, r1}
 801ba2c:	a807      	add	r0, sp, #28
 801ba2e:	f7fb fc3c 	bl	80172aa <_ZNK8touchgfx4Rect7isEmptyEv>
 801ba32:	b920      	cbnz	r0, 801ba3e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x49e>
 801ba34:	6823      	ldr	r3, [r4, #0]
 801ba36:	a907      	add	r1, sp, #28
 801ba38:	4620      	mov	r0, r4
 801ba3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ba3c:	4798      	blx	r3
 801ba3e:	3501      	adds	r5, #1
 801ba40:	b2ad      	uxth	r5, r5
 801ba42:	e7e7      	b.n	801ba14 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>

0801ba44 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801ba44:	4b03      	ldr	r3, [pc, #12]	; (801ba54 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801ba46:	2200      	movs	r2, #0
 801ba48:	801a      	strh	r2, [r3, #0]
 801ba4a:	805a      	strh	r2, [r3, #2]
 801ba4c:	809a      	strh	r2, [r3, #4]
 801ba4e:	80da      	strh	r2, [r3, #6]
 801ba50:	4770      	bx	lr
 801ba52:	bf00      	nop
 801ba54:	2400b614 	.word	0x2400b614

0801ba58 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801ba58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba5c:	b09d      	sub	sp, #116	; 0x74
 801ba5e:	4606      	mov	r6, r0
 801ba60:	4614      	mov	r4, r2
 801ba62:	468a      	mov	sl, r1
 801ba64:	a803      	add	r0, sp, #12
 801ba66:	461d      	mov	r5, r3
 801ba68:	f000 fe48 	bl	801c6fc <_ZN8touchgfx12TextProviderC1Ev>
 801ba6c:	6833      	ldr	r3, [r6, #0]
 801ba6e:	4630      	mov	r0, r6
 801ba70:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801ba74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ba76:	4798      	blx	r3
 801ba78:	6833      	ldr	r3, [r6, #0]
 801ba7a:	4607      	mov	r7, r0
 801ba7c:	4630      	mov	r0, r6
 801ba7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ba80:	4798      	blx	r3
 801ba82:	462a      	mov	r2, r5
 801ba84:	2500      	movs	r5, #0
 801ba86:	4621      	mov	r1, r4
 801ba88:	9000      	str	r0, [sp, #0]
 801ba8a:	463b      	mov	r3, r7
 801ba8c:	462c      	mov	r4, r5
 801ba8e:	46a9      	mov	r9, r5
 801ba90:	46a8      	mov	r8, r5
 801ba92:	a803      	add	r0, sp, #12
 801ba94:	f000 fe85 	bl	801c7a2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801ba98:	2300      	movs	r3, #0
 801ba9a:	9302      	str	r3, [sp, #8]
 801ba9c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801baa0:	429c      	cmp	r4, r3
 801baa2:	d002      	beq.n	801baaa <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801baa4:	455c      	cmp	r4, fp
 801baa6:	bf18      	it	ne
 801baa8:	4625      	movne	r5, r4
 801baaa:	ab02      	add	r3, sp, #8
 801baac:	4632      	mov	r2, r6
 801baae:	4651      	mov	r1, sl
 801bab0:	a803      	add	r0, sp, #12
 801bab2:	f001 f977 	bl	801cda4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801bab6:	4604      	mov	r4, r0
 801bab8:	b108      	cbz	r0, 801babe <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801baba:	280a      	cmp	r0, #10
 801babc:	d10a      	bne.n	801bad4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801babe:	45c1      	cmp	r9, r8
 801bac0:	bf38      	it	cc
 801bac2:	46c1      	movcc	r9, r8
 801bac4:	f04f 0800 	mov.w	r8, #0
 801bac8:	2c00      	cmp	r4, #0
 801baca:	d1e5      	bne.n	801ba98 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801bacc:	4648      	mov	r0, r9
 801bace:	b01d      	add	sp, #116	; 0x74
 801bad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bad4:	9a02      	ldr	r2, [sp, #8]
 801bad6:	2a00      	cmp	r2, #0
 801bad8:	d0de      	beq.n	801ba98 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801bada:	7b57      	ldrb	r7, [r2, #13]
 801badc:	4629      	mov	r1, r5
 801bade:	6833      	ldr	r3, [r6, #0]
 801bae0:	007f      	lsls	r7, r7, #1
 801bae2:	8894      	ldrh	r4, [r2, #4]
 801bae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bae6:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801baea:	7a97      	ldrb	r7, [r2, #10]
 801baec:	4307      	orrs	r7, r0
 801baee:	4630      	mov	r0, r6
 801baf0:	4798      	blx	r3
 801baf2:	4438      	add	r0, r7
 801baf4:	4480      	add	r8, r0
 801baf6:	fa1f f888 	uxth.w	r8, r8
 801bafa:	e7e5      	b.n	801bac8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801bafc <_ZNK8touchgfx4Font12getCharWidthEt>:
 801bafc:	b508      	push	{r3, lr}
 801bafe:	6803      	ldr	r3, [r0, #0]
 801bb00:	68db      	ldr	r3, [r3, #12]
 801bb02:	4798      	blx	r3
 801bb04:	b128      	cbz	r0, 801bb12 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801bb06:	7b43      	ldrb	r3, [r0, #13]
 801bb08:	7a80      	ldrb	r0, [r0, #10]
 801bb0a:	005b      	lsls	r3, r3, #1
 801bb0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bb10:	4318      	orrs	r0, r3
 801bb12:	bd08      	pop	{r3, pc}

0801bb14 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801bb14:	b40e      	push	{r1, r2, r3}
 801bb16:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bb18:	b09e      	sub	sp, #120	; 0x78
 801bb1a:	4605      	mov	r5, r0
 801bb1c:	ab23      	add	r3, sp, #140	; 0x8c
 801bb1e:	a805      	add	r0, sp, #20
 801bb20:	f853 4b04 	ldr.w	r4, [r3], #4
 801bb24:	9303      	str	r3, [sp, #12]
 801bb26:	f000 fde9 	bl	801c6fc <_ZN8touchgfx12TextProviderC1Ev>
 801bb2a:	682b      	ldr	r3, [r5, #0]
 801bb2c:	4628      	mov	r0, r5
 801bb2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bb30:	4798      	blx	r3
 801bb32:	682b      	ldr	r3, [r5, #0]
 801bb34:	4606      	mov	r6, r0
 801bb36:	4628      	mov	r0, r5
 801bb38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801bb3a:	4798      	blx	r3
 801bb3c:	4633      	mov	r3, r6
 801bb3e:	4621      	mov	r1, r4
 801bb40:	ae1e      	add	r6, sp, #120	; 0x78
 801bb42:	2400      	movs	r4, #0
 801bb44:	9000      	str	r0, [sp, #0]
 801bb46:	9a03      	ldr	r2, [sp, #12]
 801bb48:	a805      	add	r0, sp, #20
 801bb4a:	f000 fe2a 	bl	801c7a2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801bb4e:	f846 4d68 	str.w	r4, [r6, #-104]!
 801bb52:	462a      	mov	r2, r5
 801bb54:	4633      	mov	r3, r6
 801bb56:	4621      	mov	r1, r4
 801bb58:	a805      	add	r0, sp, #20
 801bb5a:	f001 f923 	bl	801cda4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801bb5e:	b300      	cbz	r0, 801bba2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801bb60:	280a      	cmp	r0, #10
 801bb62:	d01a      	beq.n	801bb9a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801bb64:	9f04      	ldr	r7, [sp, #16]
 801bb66:	b1c7      	cbz	r7, 801bb9a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801bb68:	7b78      	ldrb	r0, [r7, #13]
 801bb6a:	7a3b      	ldrb	r3, [r7, #8]
 801bb6c:	00c1      	lsls	r1, r0, #3
 801bb6e:	88aa      	ldrh	r2, [r5, #4]
 801bb70:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801bb74:	4319      	orrs	r1, r3
 801bb76:	0643      	lsls	r3, r0, #25
 801bb78:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801bb7c:	bf48      	it	mi
 801bb7e:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801bb82:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801bb86:	bf48      	it	mi
 801bb88:	b219      	sxthmi	r1, r3
 801bb8a:	79fb      	ldrb	r3, [r7, #7]
 801bb8c:	4303      	orrs	r3, r0
 801bb8e:	4413      	add	r3, r2
 801bb90:	1a5b      	subs	r3, r3, r1
 801bb92:	b29b      	uxth	r3, r3
 801bb94:	42a3      	cmp	r3, r4
 801bb96:	bfc8      	it	gt
 801bb98:	b21c      	sxthgt	r4, r3
 801bb9a:	4633      	mov	r3, r6
 801bb9c:	462a      	mov	r2, r5
 801bb9e:	2100      	movs	r1, #0
 801bba0:	e7da      	b.n	801bb58 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801bba2:	b2a0      	uxth	r0, r4
 801bba4:	b01e      	add	sp, #120	; 0x78
 801bba6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801bbaa:	b003      	add	sp, #12
 801bbac:	4770      	bx	lr

0801bbae <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801bbae:	b40e      	push	{r1, r2, r3}
 801bbb0:	b570      	push	{r4, r5, r6, lr}
 801bbb2:	b09d      	sub	sp, #116	; 0x74
 801bbb4:	4604      	mov	r4, r0
 801bbb6:	ab21      	add	r3, sp, #132	; 0x84
 801bbb8:	a803      	add	r0, sp, #12
 801bbba:	f853 5b04 	ldr.w	r5, [r3], #4
 801bbbe:	9302      	str	r3, [sp, #8]
 801bbc0:	f000 fd9c 	bl	801c6fc <_ZN8touchgfx12TextProviderC1Ev>
 801bbc4:	6823      	ldr	r3, [r4, #0]
 801bbc6:	4620      	mov	r0, r4
 801bbc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bbca:	4798      	blx	r3
 801bbcc:	6823      	ldr	r3, [r4, #0]
 801bbce:	4606      	mov	r6, r0
 801bbd0:	4620      	mov	r0, r4
 801bbd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801bbd4:	2401      	movs	r4, #1
 801bbd6:	4798      	blx	r3
 801bbd8:	4633      	mov	r3, r6
 801bbda:	9000      	str	r0, [sp, #0]
 801bbdc:	4629      	mov	r1, r5
 801bbde:	9a02      	ldr	r2, [sp, #8]
 801bbe0:	a803      	add	r0, sp, #12
 801bbe2:	f000 fdde 	bl	801c7a2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801bbe6:	a803      	add	r0, sp, #12
 801bbe8:	f001 f9d6 	bl	801cf98 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801bbec:	b2a3      	uxth	r3, r4
 801bbee:	b138      	cbz	r0, 801bc00 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801bbf0:	280a      	cmp	r0, #10
 801bbf2:	a803      	add	r0, sp, #12
 801bbf4:	bf04      	itt	eq
 801bbf6:	3301      	addeq	r3, #1
 801bbf8:	b21c      	sxtheq	r4, r3
 801bbfa:	f001 f9cd 	bl	801cf98 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801bbfe:	e7f5      	b.n	801bbec <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801bc00:	4618      	mov	r0, r3
 801bc02:	b01d      	add	sp, #116	; 0x74
 801bc04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bc08:	b003      	add	sp, #12
 801bc0a:	4770      	bx	lr

0801bc0c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801bc0c:	b40e      	push	{r1, r2, r3}
 801bc0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bc10:	b09e      	sub	sp, #120	; 0x78
 801bc12:	4604      	mov	r4, r0
 801bc14:	ab23      	add	r3, sp, #140	; 0x8c
 801bc16:	a805      	add	r0, sp, #20
 801bc18:	f853 5b04 	ldr.w	r5, [r3], #4
 801bc1c:	9303      	str	r3, [sp, #12]
 801bc1e:	f000 fd6d 	bl	801c6fc <_ZN8touchgfx12TextProviderC1Ev>
 801bc22:	6823      	ldr	r3, [r4, #0]
 801bc24:	4620      	mov	r0, r4
 801bc26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bc28:	4798      	blx	r3
 801bc2a:	6823      	ldr	r3, [r4, #0]
 801bc2c:	4606      	mov	r6, r0
 801bc2e:	4620      	mov	r0, r4
 801bc30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801bc32:	4798      	blx	r3
 801bc34:	4633      	mov	r3, r6
 801bc36:	4629      	mov	r1, r5
 801bc38:	9000      	str	r0, [sp, #0]
 801bc3a:	9a03      	ldr	r2, [sp, #12]
 801bc3c:	a805      	add	r0, sp, #20
 801bc3e:	f000 fdb0 	bl	801c7a2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801bc42:	ad1e      	add	r5, sp, #120	; 0x78
 801bc44:	2100      	movs	r1, #0
 801bc46:	26ff      	movs	r6, #255	; 0xff
 801bc48:	4622      	mov	r2, r4
 801bc4a:	a805      	add	r0, sp, #20
 801bc4c:	f845 1d68 	str.w	r1, [r5, #-104]!
 801bc50:	462b      	mov	r3, r5
 801bc52:	f001 f8a7 	bl	801cda4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801bc56:	b1d8      	cbz	r0, 801bc90 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 801bc58:	280a      	cmp	r0, #10
 801bc5a:	d012      	beq.n	801bc82 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801bc5c:	9804      	ldr	r0, [sp, #16]
 801bc5e:	b180      	cbz	r0, 801bc82 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801bc60:	7b47      	ldrb	r7, [r0, #13]
 801bc62:	7922      	ldrb	r2, [r4, #4]
 801bc64:	00fb      	lsls	r3, r7, #3
 801bc66:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801bc6a:	7a03      	ldrb	r3, [r0, #8]
 801bc6c:	430b      	orrs	r3, r1
 801bc6e:	0679      	lsls	r1, r7, #25
 801bc70:	bf44      	itt	mi
 801bc72:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801bc76:	b21b      	sxthmi	r3, r3
 801bc78:	1ad3      	subs	r3, r2, r3
 801bc7a:	b2db      	uxtb	r3, r3
 801bc7c:	429e      	cmp	r6, r3
 801bc7e:	bf28      	it	cs
 801bc80:	461e      	movcs	r6, r3
 801bc82:	462b      	mov	r3, r5
 801bc84:	4622      	mov	r2, r4
 801bc86:	2100      	movs	r1, #0
 801bc88:	a805      	add	r0, sp, #20
 801bc8a:	f001 f88b 	bl	801cda4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801bc8e:	e7e2      	b.n	801bc56 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 801bc90:	4630      	mov	r0, r6
 801bc92:	b01e      	add	sp, #120	; 0x78
 801bc94:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801bc98:	b003      	add	sp, #12
 801bc9a:	4770      	bx	lr

0801bc9c <_ZNK8touchgfx8Drawable10invalidateEv>:
 801bc9c:	b513      	push	{r0, r1, r4, lr}
 801bc9e:	6803      	ldr	r3, [r0, #0]
 801bca0:	2400      	movs	r4, #0
 801bca2:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801bca6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801bcaa:	f8ad 1004 	strh.w	r1, [sp, #4]
 801bcae:	4669      	mov	r1, sp
 801bcb0:	691b      	ldr	r3, [r3, #16]
 801bcb2:	9400      	str	r4, [sp, #0]
 801bcb4:	f8ad 2006 	strh.w	r2, [sp, #6]
 801bcb8:	4798      	blx	r3
 801bcba:	b002      	add	sp, #8
 801bcbc:	bd10      	pop	{r4, pc}

0801bcbe <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801bcbe:	b538      	push	{r3, r4, r5, lr}
 801bcc0:	680b      	ldr	r3, [r1, #0]
 801bcc2:	460c      	mov	r4, r1
 801bcc4:	4605      	mov	r5, r0
 801bcc6:	68db      	ldr	r3, [r3, #12]
 801bcc8:	4798      	blx	r3
 801bcca:	6823      	ldr	r3, [r4, #0]
 801bccc:	4620      	mov	r0, r4
 801bcce:	4629      	mov	r1, r5
 801bcd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bcd2:	4798      	blx	r3
 801bcd4:	4628      	mov	r0, r5
 801bcd6:	bd38      	pop	{r3, r4, r5, pc}

0801bcd8 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801bcd8:	b410      	push	{r4}
 801bcda:	880a      	ldrh	r2, [r1, #0]
 801bcdc:	8884      	ldrh	r4, [r0, #4]
 801bcde:	4422      	add	r2, r4
 801bce0:	800a      	strh	r2, [r1, #0]
 801bce2:	884a      	ldrh	r2, [r1, #2]
 801bce4:	88c4      	ldrh	r4, [r0, #6]
 801bce6:	4422      	add	r2, r4
 801bce8:	804a      	strh	r2, [r1, #2]
 801bcea:	6940      	ldr	r0, [r0, #20]
 801bcec:	b120      	cbz	r0, 801bcf8 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801bcee:	6803      	ldr	r3, [r0, #0]
 801bcf0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bcf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bcf6:	4718      	bx	r3
 801bcf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bcfc:	4770      	bx	lr

0801bcfe <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801bcfe:	b570      	push	{r4, r5, r6, lr}
 801bd00:	8882      	ldrh	r2, [r0, #4]
 801bd02:	460c      	mov	r4, r1
 801bd04:	880b      	ldrh	r3, [r1, #0]
 801bd06:	4605      	mov	r5, r0
 801bd08:	4413      	add	r3, r2
 801bd0a:	800b      	strh	r3, [r1, #0]
 801bd0c:	884b      	ldrh	r3, [r1, #2]
 801bd0e:	88c2      	ldrh	r2, [r0, #6]
 801bd10:	4413      	add	r3, r2
 801bd12:	804b      	strh	r3, [r1, #2]
 801bd14:	1d01      	adds	r1, r0, #4
 801bd16:	4620      	mov	r0, r4
 801bd18:	f7fb fa84 	bl	8017224 <_ZN8touchgfx4RectaNERKS0_>
 801bd1c:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801bd20:	2b00      	cmp	r3, #0
 801bd22:	dd0b      	ble.n	801bd3c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801bd24:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801bd28:	2b00      	cmp	r3, #0
 801bd2a:	dd07      	ble.n	801bd3c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801bd2c:	6968      	ldr	r0, [r5, #20]
 801bd2e:	b128      	cbz	r0, 801bd3c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801bd30:	6803      	ldr	r3, [r0, #0]
 801bd32:	4621      	mov	r1, r4
 801bd34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bd36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bd3a:	4718      	bx	r3
 801bd3c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801bd40 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801bd40:	b570      	push	{r4, r5, r6, lr}
 801bd42:	8882      	ldrh	r2, [r0, #4]
 801bd44:	460c      	mov	r4, r1
 801bd46:	880b      	ldrh	r3, [r1, #0]
 801bd48:	4605      	mov	r5, r0
 801bd4a:	4413      	add	r3, r2
 801bd4c:	800b      	strh	r3, [r1, #0]
 801bd4e:	884b      	ldrh	r3, [r1, #2]
 801bd50:	88c2      	ldrh	r2, [r0, #6]
 801bd52:	4413      	add	r3, r2
 801bd54:	804b      	strh	r3, [r1, #2]
 801bd56:	1d01      	adds	r1, r0, #4
 801bd58:	4620      	mov	r0, r4
 801bd5a:	f7fb fa63 	bl	8017224 <_ZN8touchgfx4RectaNERKS0_>
 801bd5e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801bd62:	2b00      	cmp	r3, #0
 801bd64:	dd15      	ble.n	801bd92 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 801bd66:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801bd6a:	2b00      	cmp	r3, #0
 801bd6c:	dd11      	ble.n	801bd92 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 801bd6e:	6968      	ldr	r0, [r5, #20]
 801bd70:	b128      	cbz	r0, 801bd7e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801bd72:	6803      	ldr	r3, [r0, #0]
 801bd74:	691b      	ldr	r3, [r3, #16]
 801bd76:	4621      	mov	r1, r4
 801bd78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bd7c:	4718      	bx	r3
 801bd7e:	4b05      	ldr	r3, [pc, #20]	; (801bd94 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x54>)
 801bd80:	681b      	ldr	r3, [r3, #0]
 801bd82:	3304      	adds	r3, #4
 801bd84:	429d      	cmp	r5, r3
 801bd86:	d104      	bne.n	801bd92 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 801bd88:	f7fe ffbe 	bl	801ad08 <_ZN8touchgfx11Application11getInstanceEv>
 801bd8c:	6803      	ldr	r3, [r0, #0]
 801bd8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bd90:	e7f1      	b.n	801bd76 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x36>
 801bd92:	bd70      	pop	{r4, r5, r6, pc}
 801bd94:	2400b60c 	.word	0x2400b60c

0801bd98 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801bd98:	b570      	push	{r4, r5, r6, lr}
 801bd9a:	4604      	mov	r4, r0
 801bd9c:	4616      	mov	r6, r2
 801bd9e:	460d      	mov	r5, r1
 801bda0:	b901      	cbnz	r1, 801bda4 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801bda2:	b192      	cbz	r2, 801bdca <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801bda4:	6823      	ldr	r3, [r4, #0]
 801bda6:	4620      	mov	r0, r4
 801bda8:	695b      	ldr	r3, [r3, #20]
 801bdaa:	4798      	blx	r3
 801bdac:	88e2      	ldrh	r2, [r4, #6]
 801bdae:	88a1      	ldrh	r1, [r4, #4]
 801bdb0:	4620      	mov	r0, r4
 801bdb2:	4432      	add	r2, r6
 801bdb4:	4429      	add	r1, r5
 801bdb6:	b212      	sxth	r2, r2
 801bdb8:	b209      	sxth	r1, r1
 801bdba:	f7e8 f91f 	bl	8003ffc <_ZN8touchgfx8Drawable5setXYEss>
 801bdbe:	6823      	ldr	r3, [r4, #0]
 801bdc0:	4620      	mov	r0, r4
 801bdc2:	695b      	ldr	r3, [r3, #20]
 801bdc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bdc8:	4718      	bx	r3
 801bdca:	bd70      	pop	{r4, r5, r6, pc}

0801bdcc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801bdcc:	b510      	push	{r4, lr}
 801bdce:	2300      	movs	r3, #0
 801bdd0:	4604      	mov	r4, r0
 801bdd2:	4608      	mov	r0, r1
 801bdd4:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801bdd8:	8023      	strh	r3, [r4, #0]
 801bdda:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801bdde:	8063      	strh	r3, [r4, #2]
 801bde0:	6803      	ldr	r3, [r0, #0]
 801bde2:	80a1      	strh	r1, [r4, #4]
 801bde4:	4621      	mov	r1, r4
 801bde6:	80e2      	strh	r2, [r4, #6]
 801bde8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bdea:	4798      	blx	r3
 801bdec:	4620      	mov	r0, r4
 801bdee:	bd10      	pop	{r4, pc}

0801bdf0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801bdf0:	b530      	push	{r4, r5, lr}
 801bdf2:	8083      	strh	r3, [r0, #4]
 801bdf4:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801bdf8:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801bdfc:	7183      	strb	r3, [r0, #6]
 801bdfe:	79c3      	ldrb	r3, [r0, #7]
 801be00:	6101      	str	r1, [r0, #16]
 801be02:	f365 0306 	bfi	r3, r5, #0, #7
 801be06:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801be0a:	8282      	strh	r2, [r0, #20]
 801be0c:	f365 13c7 	bfi	r3, r5, #7, #1
 801be10:	71c3      	strb	r3, [r0, #7]
 801be12:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801be16:	7203      	strb	r3, [r0, #8]
 801be18:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801be1c:	7243      	strb	r3, [r0, #9]
 801be1e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801be22:	8143      	strh	r3, [r0, #10]
 801be24:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801be28:	8183      	strh	r3, [r0, #12]
 801be2a:	4b01      	ldr	r3, [pc, #4]	; (801be30 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801be2c:	6003      	str	r3, [r0, #0]
 801be2e:	bd30      	pop	{r4, r5, pc}
 801be30:	0802e77c 	.word	0x0802e77c

0801be34 <_ZNK8touchgfx9ConstFont4findEt>:
 801be34:	b5f0      	push	{r4, r5, r6, r7, lr}
 801be36:	6904      	ldr	r4, [r0, #16]
 801be38:	b3bc      	cbz	r4, 801beaa <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801be3a:	88a3      	ldrh	r3, [r4, #4]
 801be3c:	8a82      	ldrh	r2, [r0, #20]
 801be3e:	1acb      	subs	r3, r1, r3
 801be40:	f102 32ff 	add.w	r2, r2, #4294967295
 801be44:	d431      	bmi.n	801beaa <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801be46:	4293      	cmp	r3, r2
 801be48:	dd0c      	ble.n	801be64 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801be4a:	230e      	movs	r3, #14
 801be4c:	fb03 4302 	mla	r3, r3, r2, r4
 801be50:	889b      	ldrh	r3, [r3, #4]
 801be52:	1a5b      	subs	r3, r3, r1
 801be54:	1ad3      	subs	r3, r2, r3
 801be56:	429a      	cmp	r2, r3
 801be58:	db27      	blt.n	801beaa <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801be5a:	2b00      	cmp	r3, #0
 801be5c:	bfbc      	itt	lt
 801be5e:	2302      	movlt	r3, #2
 801be60:	fb92 f3f3 	sdivlt	r3, r2, r3
 801be64:	2500      	movs	r5, #0
 801be66:	260e      	movs	r6, #14
 801be68:	4295      	cmp	r5, r2
 801be6a:	dc1e      	bgt.n	801beaa <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801be6c:	fb06 4003 	mla	r0, r6, r3, r4
 801be70:	8887      	ldrh	r7, [r0, #4]
 801be72:	42b9      	cmp	r1, r7
 801be74:	d01a      	beq.n	801beac <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801be76:	d20d      	bcs.n	801be94 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801be78:	1e5a      	subs	r2, r3, #1
 801be7a:	4295      	cmp	r5, r2
 801be7c:	dc15      	bgt.n	801beaa <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801be7e:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801be82:	1a5b      	subs	r3, r3, r1
 801be84:	1ad3      	subs	r3, r2, r3
 801be86:	429a      	cmp	r2, r3
 801be88:	db0f      	blt.n	801beaa <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801be8a:	429d      	cmp	r5, r3
 801be8c:	ddec      	ble.n	801be68 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801be8e:	1953      	adds	r3, r2, r5
 801be90:	105b      	asrs	r3, r3, #1
 801be92:	e7e9      	b.n	801be68 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801be94:	1c5d      	adds	r5, r3, #1
 801be96:	42aa      	cmp	r2, r5
 801be98:	db07      	blt.n	801beaa <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801be9a:	8a43      	ldrh	r3, [r0, #18]
 801be9c:	1acb      	subs	r3, r1, r3
 801be9e:	442b      	add	r3, r5
 801bea0:	429d      	cmp	r5, r3
 801bea2:	dc02      	bgt.n	801beaa <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801bea4:	429a      	cmp	r2, r3
 801bea6:	dadf      	bge.n	801be68 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801bea8:	e7f1      	b.n	801be8e <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801beaa:	2000      	movs	r0, #0
 801beac:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801beae <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801beae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801beb0:	4604      	mov	r4, r0
 801beb2:	4617      	mov	r7, r2
 801beb4:	461e      	mov	r6, r3
 801beb6:	b911      	cbnz	r1, 801bebe <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801beb8:	2500      	movs	r5, #0
 801beba:	4628      	mov	r0, r5
 801bebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bebe:	290a      	cmp	r1, #10
 801bec0:	d0fa      	beq.n	801beb8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801bec2:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801bec6:	4291      	cmp	r1, r2
 801bec8:	d0f6      	beq.n	801beb8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801beca:	f242 020b 	movw	r2, #8203	; 0x200b
 801bece:	4291      	cmp	r1, r2
 801bed0:	d0f2      	beq.n	801beb8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801bed2:	f7ff ffaf 	bl	801be34 <_ZNK8touchgfx9ConstFont4findEt>
 801bed6:	4605      	mov	r5, r0
 801bed8:	b950      	cbnz	r0, 801bef0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801beda:	6823      	ldr	r3, [r4, #0]
 801bedc:	4620      	mov	r0, r4
 801bede:	691b      	ldr	r3, [r3, #16]
 801bee0:	4798      	blx	r3
 801bee2:	4601      	mov	r1, r0
 801bee4:	4620      	mov	r0, r4
 801bee6:	f7ff ffa5 	bl	801be34 <_ZNK8touchgfx9ConstFont4findEt>
 801beea:	4605      	mov	r5, r0
 801beec:	2800      	cmp	r0, #0
 801beee:	d0e3      	beq.n	801beb8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801bef0:	6823      	ldr	r3, [r4, #0]
 801bef2:	4629      	mov	r1, r5
 801bef4:	4620      	mov	r0, r4
 801bef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801bef8:	4798      	blx	r3
 801befa:	6038      	str	r0, [r7, #0]
 801befc:	6823      	ldr	r3, [r4, #0]
 801befe:	4620      	mov	r0, r4
 801bf00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bf02:	4798      	blx	r3
 801bf04:	7030      	strb	r0, [r6, #0]
 801bf06:	e7d8      	b.n	801beba <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801bf08 <_ZN8touchgfx4clzuEm>:
 801bf08:	4603      	mov	r3, r0
 801bf0a:	b1c8      	cbz	r0, 801bf40 <_ZN8touchgfx4clzuEm+0x38>
 801bf0c:	0c02      	lsrs	r2, r0, #16
 801bf0e:	0412      	lsls	r2, r2, #16
 801bf10:	b9a2      	cbnz	r2, 801bf3c <_ZN8touchgfx4clzuEm+0x34>
 801bf12:	0403      	lsls	r3, r0, #16
 801bf14:	2010      	movs	r0, #16
 801bf16:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801bf1a:	bf04      	itt	eq
 801bf1c:	021b      	lsleq	r3, r3, #8
 801bf1e:	3008      	addeq	r0, #8
 801bf20:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801bf24:	bf04      	itt	eq
 801bf26:	011b      	lsleq	r3, r3, #4
 801bf28:	3004      	addeq	r0, #4
 801bf2a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801bf2e:	bf04      	itt	eq
 801bf30:	009b      	lsleq	r3, r3, #2
 801bf32:	3002      	addeq	r0, #2
 801bf34:	2b00      	cmp	r3, #0
 801bf36:	db04      	blt.n	801bf42 <_ZN8touchgfx4clzuEm+0x3a>
 801bf38:	3001      	adds	r0, #1
 801bf3a:	4770      	bx	lr
 801bf3c:	2000      	movs	r0, #0
 801bf3e:	e7ea      	b.n	801bf16 <_ZN8touchgfx4clzuEm+0xe>
 801bf40:	2020      	movs	r0, #32
 801bf42:	4770      	bx	lr

0801bf44 <_ZN8touchgfx7muldivuEmmmRm>:
 801bf44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf48:	4680      	mov	r8, r0
 801bf4a:	460f      	mov	r7, r1
 801bf4c:	4615      	mov	r5, r2
 801bf4e:	461e      	mov	r6, r3
 801bf50:	f7ff ffda 	bl	801bf08 <_ZN8touchgfx4clzuEm>
 801bf54:	b998      	cbnz	r0, 801bf7e <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 801bf56:	4608      	mov	r0, r1
 801bf58:	f7ff ffd6 	bl	801bf08 <_ZN8touchgfx4clzuEm>
 801bf5c:	2800      	cmp	r0, #0
 801bf5e:	dd08      	ble.n	801bf72 <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 801bf60:	4633      	mov	r3, r6
 801bf62:	462a      	mov	r2, r5
 801bf64:	4641      	mov	r1, r8
 801bf66:	4638      	mov	r0, r7
 801bf68:	f7ff ffec 	bl	801bf44 <_ZN8touchgfx7muldivuEmmmRm>
 801bf6c:	b003      	add	sp, #12
 801bf6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf72:	f04f 33ff 	mov.w	r3, #4294967295
 801bf76:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801bf7a:	6033      	str	r3, [r6, #0]
 801bf7c:	e7f6      	b.n	801bf6c <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801bf7e:	fa31 f900 	lsrs.w	r9, r1, r0
 801bf82:	fb01 f308 	mul.w	r3, r1, r8
 801bf86:	d105      	bne.n	801bf94 <_ZN8touchgfx7muldivuEmmmRm+0x50>
 801bf88:	fbb3 f0f5 	udiv	r0, r3, r5
 801bf8c:	fb05 3510 	mls	r5, r5, r0, r3
 801bf90:	6035      	str	r5, [r6, #0]
 801bf92:	e7eb      	b.n	801bf6c <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801bf94:	2301      	movs	r3, #1
 801bf96:	fa08 fb00 	lsl.w	fp, r8, r0
 801bf9a:	462a      	mov	r2, r5
 801bf9c:	4641      	mov	r1, r8
 801bf9e:	fa03 f000 	lsl.w	r0, r3, r0
 801bfa2:	4633      	mov	r3, r6
 801bfa4:	fbbb faf5 	udiv	sl, fp, r5
 801bfa8:	3801      	subs	r0, #1
 801bfaa:	fb09 f40a 	mul.w	r4, r9, sl
 801bfae:	4038      	ands	r0, r7
 801bfb0:	f7ff ffc8 	bl	801bf44 <_ZN8touchgfx7muldivuEmmmRm>
 801bfb4:	462a      	mov	r2, r5
 801bfb6:	4607      	mov	r7, r0
 801bfb8:	ab01      	add	r3, sp, #4
 801bfba:	fb05 b11a 	mls	r1, r5, sl, fp
 801bfbe:	4648      	mov	r0, r9
 801bfc0:	f7ff ffc0 	bl	801bf44 <_ZN8touchgfx7muldivuEmmmRm>
 801bfc4:	9b01      	ldr	r3, [sp, #4]
 801bfc6:	6832      	ldr	r2, [r6, #0]
 801bfc8:	441a      	add	r2, r3
 801bfca:	fbb2 f3f5 	udiv	r3, r2, r5
 801bfce:	441c      	add	r4, r3
 801bfd0:	fb05 2513 	mls	r5, r5, r3, r2
 801bfd4:	443c      	add	r4, r7
 801bfd6:	4420      	add	r0, r4
 801bfd8:	e7da      	b.n	801bf90 <_ZN8touchgfx7muldivuEmmmRm+0x4c>

0801bfda <_ZN8touchgfx6muldivElllRl>:
 801bfda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801bfdc:	2800      	cmp	r0, #0
 801bfde:	461e      	mov	r6, r3
 801bfe0:	bfba      	itte	lt
 801bfe2:	4240      	neglt	r0, r0
 801bfe4:	f04f 34ff 	movlt.w	r4, #4294967295
 801bfe8:	2401      	movge	r4, #1
 801bfea:	2900      	cmp	r1, #0
 801bfec:	bfbc      	itt	lt
 801bfee:	4249      	neglt	r1, r1
 801bff0:	4264      	neglt	r4, r4
 801bff2:	2a00      	cmp	r2, #0
 801bff4:	bfb6      	itet	lt
 801bff6:	4265      	neglt	r5, r4
 801bff8:	4625      	movge	r5, r4
 801bffa:	4252      	neglt	r2, r2
 801bffc:	4288      	cmp	r0, r1
 801bffe:	bfc2      	ittt	gt
 801c000:	4603      	movgt	r3, r0
 801c002:	4608      	movgt	r0, r1
 801c004:	4619      	movgt	r1, r3
 801c006:	ab01      	add	r3, sp, #4
 801c008:	f7ff ff9c 	bl	801bf44 <_ZN8touchgfx7muldivuEmmmRm>
 801c00c:	9b01      	ldr	r3, [sp, #4]
 801c00e:	4368      	muls	r0, r5
 801c010:	435c      	muls	r4, r3
 801c012:	6034      	str	r4, [r6, #0]
 801c014:	b002      	add	sp, #8
 801c016:	bd70      	pop	{r4, r5, r6, pc}

0801c018 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801c018:	2000      	movs	r0, #0
 801c01a:	4770      	bx	lr

0801c01c <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801c01c:	2001      	movs	r0, #1
 801c01e:	4770      	bx	lr

0801c020 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801c020:	2002      	movs	r0, #2
 801c022:	4770      	bx	lr

0801c024 <_ZN8touchgfx12GestureEventD1Ev>:
 801c024:	4770      	bx	lr

0801c026 <_ZN8touchgfx9DragEventD1Ev>:
 801c026:	4770      	bx	lr

0801c028 <_ZN8touchgfx10ClickEventD1Ev>:
 801c028:	4770      	bx	lr

0801c02a <_ZN8touchgfx10ClickEventD0Ev>:
 801c02a:	b510      	push	{r4, lr}
 801c02c:	4604      	mov	r4, r0
 801c02e:	210c      	movs	r1, #12
 801c030:	f00d ffa9 	bl	8029f86 <_ZdlPvj>
 801c034:	4620      	mov	r0, r4
 801c036:	bd10      	pop	{r4, pc}

0801c038 <_ZN8touchgfx9DragEventD0Ev>:
 801c038:	b510      	push	{r4, lr}
 801c03a:	4604      	mov	r4, r0
 801c03c:	2110      	movs	r1, #16
 801c03e:	f00d ffa2 	bl	8029f86 <_ZdlPvj>
 801c042:	4620      	mov	r0, r4
 801c044:	bd10      	pop	{r4, pc}

0801c046 <_ZN8touchgfx12GestureEventD0Ev>:
 801c046:	b510      	push	{r4, lr}
 801c048:	4604      	mov	r4, r0
 801c04a:	210c      	movs	r1, #12
 801c04c:	f00d ff9b 	bl	8029f86 <_ZdlPvj>
 801c050:	4620      	mov	r0, r4
 801c052:	bd10      	pop	{r4, pc}

0801c054 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801c054:	b530      	push	{r4, r5, lr}
 801c056:	460d      	mov	r5, r1
 801c058:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801c05a:	b087      	sub	sp, #28
 801c05c:	4604      	mov	r4, r0
 801c05e:	b301      	cbz	r1, 801c0a2 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801c060:	a801      	add	r0, sp, #4
 801c062:	f7ff feb3 	bl	801bdcc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c066:	892a      	ldrh	r2, [r5, #8]
 801c068:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801c06c:	7928      	ldrb	r0, [r5, #4]
 801c06e:	1ad2      	subs	r2, r2, r3
 801c070:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801c072:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801c076:	441a      	add	r2, r3
 801c078:	896b      	ldrh	r3, [r5, #10]
 801c07a:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801c07e:	f88d 0010 	strb.w	r0, [sp, #16]
 801c082:	1b5b      	subs	r3, r3, r5
 801c084:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801c086:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801c088:	442b      	add	r3, r5
 801c08a:	4d07      	ldr	r5, [pc, #28]	; (801c0a8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801c08c:	f8ad 1012 	strh.w	r1, [sp, #18]
 801c090:	a903      	add	r1, sp, #12
 801c092:	9503      	str	r5, [sp, #12]
 801c094:	f8ad 2014 	strh.w	r2, [sp, #20]
 801c098:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c09c:	6803      	ldr	r3, [r0, #0]
 801c09e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c0a0:	4798      	blx	r3
 801c0a2:	b007      	add	sp, #28
 801c0a4:	bd30      	pop	{r4, r5, pc}
 801c0a6:	bf00      	nop
 801c0a8:	0802e7fc 	.word	0x0802e7fc

0801c0ac <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801c0ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c0b0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801c0b2:	b08a      	sub	sp, #40	; 0x28
 801c0b4:	4604      	mov	r4, r0
 801c0b6:	460d      	mov	r5, r1
 801c0b8:	b113      	cbz	r3, 801c0c0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801c0ba:	790b      	ldrb	r3, [r1, #4]
 801c0bc:	2b00      	cmp	r3, #0
 801c0be:	d044      	beq.n	801c14a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801c0c0:	f104 0804 	add.w	r8, r4, #4
 801c0c4:	a803      	add	r0, sp, #12
 801c0c6:	4641      	mov	r1, r8
 801c0c8:	f7ff fe80 	bl	801bdcc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c0cc:	792b      	ldrb	r3, [r5, #4]
 801c0ce:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801c0d2:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801c0d6:	b983      	cbnz	r3, 801c0fa <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801c0d8:	f104 0336 	add.w	r3, r4, #54	; 0x36
 801c0dc:	892a      	ldrh	r2, [r5, #8]
 801c0de:	88e9      	ldrh	r1, [r5, #6]
 801c0e0:	4640      	mov	r0, r8
 801c0e2:	1b92      	subs	r2, r2, r6
 801c0e4:	9301      	str	r3, [sp, #4]
 801c0e6:	1bc9      	subs	r1, r1, r7
 801c0e8:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801c0ec:	b212      	sxth	r2, r2
 801c0ee:	9300      	str	r3, [sp, #0]
 801c0f0:	b209      	sxth	r1, r1
 801c0f2:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801c0f6:	f7fa ffb3 	bl	8017060 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801c0fa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801c0fc:	b329      	cbz	r1, 801c14a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801c0fe:	a805      	add	r0, sp, #20
 801c100:	f7ff fe64 	bl	801bdcc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c104:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801c108:	792b      	ldrb	r3, [r5, #4]
 801c10a:	a907      	add	r1, sp, #28
 801c10c:	1abf      	subs	r7, r7, r2
 801c10e:	88ea      	ldrh	r2, [r5, #6]
 801c110:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801c112:	4417      	add	r7, r2
 801c114:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801c116:	f88d 3020 	strb.w	r3, [sp, #32]
 801c11a:	4417      	add	r7, r2
 801c11c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801c120:	1ab6      	subs	r6, r6, r2
 801c122:	892a      	ldrh	r2, [r5, #8]
 801c124:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801c128:	4416      	add	r6, r2
 801c12a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801c12c:	4416      	add	r6, r2
 801c12e:	4a08      	ldr	r2, [pc, #32]	; (801c150 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801c130:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801c134:	2600      	movs	r6, #0
 801c136:	9207      	str	r2, [sp, #28]
 801c138:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 801c13c:	6803      	ldr	r3, [r0, #0]
 801c13e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c140:	4798      	blx	r3
 801c142:	792b      	ldrb	r3, [r5, #4]
 801c144:	b10b      	cbz	r3, 801c14a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801c146:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801c14a:	b00a      	add	sp, #40	; 0x28
 801c14c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c150:	0802e7d4 	.word	0x0802e7d4

0801c154 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801c154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c158:	460c      	mov	r4, r1
 801c15a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801c15c:	b088      	sub	sp, #32
 801c15e:	4605      	mov	r5, r0
 801c160:	2900      	cmp	r1, #0
 801c162:	d06d      	beq.n	801c240 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801c164:	4668      	mov	r0, sp
 801c166:	f7ff fe31 	bl	801bdcc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c16a:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 801c16c:	88e3      	ldrh	r3, [r4, #6]
 801c16e:	f9bd 8000 	ldrsh.w	r8, [sp]
 801c172:	440b      	add	r3, r1
 801c174:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801c178:	b21b      	sxth	r3, r3
 801c17a:	4543      	cmp	r3, r8
 801c17c:	db31      	blt.n	801c1e2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c17e:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801c182:	44c4      	add	ip, r8
 801c184:	fa0f fc8c 	sxth.w	ip, ip
 801c188:	4563      	cmp	r3, ip
 801c18a:	da2a      	bge.n	801c1e2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c18c:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801c18e:	8926      	ldrh	r6, [r4, #8]
 801c190:	4416      	add	r6, r2
 801c192:	b236      	sxth	r6, r6
 801c194:	42be      	cmp	r6, r7
 801c196:	db24      	blt.n	801c1e2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c198:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801c19c:	4438      	add	r0, r7
 801c19e:	b200      	sxth	r0, r0
 801c1a0:	4286      	cmp	r6, r0
 801c1a2:	da1e      	bge.n	801c1e2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c1a4:	8963      	ldrh	r3, [r4, #10]
 801c1a6:	4419      	add	r1, r3
 801c1a8:	b209      	sxth	r1, r1
 801c1aa:	4541      	cmp	r1, r8
 801c1ac:	db08      	blt.n	801c1c0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801c1ae:	4561      	cmp	r1, ip
 801c1b0:	da06      	bge.n	801c1c0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801c1b2:	89a3      	ldrh	r3, [r4, #12]
 801c1b4:	441a      	add	r2, r3
 801c1b6:	b212      	sxth	r2, r2
 801c1b8:	42ba      	cmp	r2, r7
 801c1ba:	db01      	blt.n	801c1c0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801c1bc:	4282      	cmp	r2, r0
 801c1be:	db10      	blt.n	801c1e2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c1c0:	4b21      	ldr	r3, [pc, #132]	; (801c248 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801c1c2:	a904      	add	r1, sp, #16
 801c1c4:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801c1c6:	9304      	str	r3, [sp, #16]
 801c1c8:	2302      	movs	r3, #2
 801c1ca:	f88d 3014 	strb.w	r3, [sp, #20]
 801c1ce:	2300      	movs	r3, #0
 801c1d0:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c1d4:	f8ad 3018 	strh.w	r3, [sp, #24]
 801c1d8:	f8ad 301a 	strh.w	r3, [sp, #26]
 801c1dc:	6803      	ldr	r3, [r0, #0]
 801c1de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c1e0:	4798      	blx	r3
 801c1e2:	1d29      	adds	r1, r5, #4
 801c1e4:	a802      	add	r0, sp, #8
 801c1e6:	f7ff fdf1 	bl	801bdcc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c1ea:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801c1ee:	88e0      	ldrh	r0, [r4, #6]
 801c1f0:	eba3 0808 	sub.w	r8, r3, r8
 801c1f4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801c1f8:	7921      	ldrb	r1, [r4, #4]
 801c1fa:	fa1f f888 	uxth.w	r8, r8
 801c1fe:	1bdf      	subs	r7, r3, r7
 801c200:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801c204:	b2bb      	uxth	r3, r7
 801c206:	4440      	add	r0, r8
 801c208:	8922      	ldrh	r2, [r4, #8]
 801c20a:	8967      	ldrh	r7, [r4, #10]
 801c20c:	4460      	add	r0, ip
 801c20e:	89a4      	ldrh	r4, [r4, #12]
 801c210:	441a      	add	r2, r3
 801c212:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801c214:	44b8      	add	r8, r7
 801c216:	4423      	add	r3, r4
 801c218:	f8ad 0016 	strh.w	r0, [sp, #22]
 801c21c:	4432      	add	r2, r6
 801c21e:	44e0      	add	r8, ip
 801c220:	4433      	add	r3, r6
 801c222:	4c0a      	ldr	r4, [pc, #40]	; (801c24c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801c224:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801c226:	f88d 1014 	strb.w	r1, [sp, #20]
 801c22a:	a904      	add	r1, sp, #16
 801c22c:	9404      	str	r4, [sp, #16]
 801c22e:	f8ad 2018 	strh.w	r2, [sp, #24]
 801c232:	f8ad 801a 	strh.w	r8, [sp, #26]
 801c236:	f8ad 301c 	strh.w	r3, [sp, #28]
 801c23a:	6803      	ldr	r3, [r0, #0]
 801c23c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c23e:	4798      	blx	r3
 801c240:	b008      	add	sp, #32
 801c242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c246:	bf00      	nop
 801c248:	0802e7d4 	.word	0x0802e7d4
 801c24c:	0802e7e8 	.word	0x0802e7e8

0801c250 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801c250:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c252:	4604      	mov	r4, r0
 801c254:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801c258:	3201      	adds	r2, #1
 801c25a:	d112      	bne.n	801c282 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801c25c:	2500      	movs	r5, #0
 801c25e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801c262:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801c266:	6803      	ldr	r3, [r0, #0]
 801c268:	9500      	str	r5, [sp, #0]
 801c26a:	466d      	mov	r5, sp
 801c26c:	f8ad 1004 	strh.w	r1, [sp, #4]
 801c270:	f8ad 2006 	strh.w	r2, [sp, #6]
 801c274:	4629      	mov	r1, r5
 801c276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c278:	4798      	blx	r3
 801c27a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801c27e:	e884 0003 	stmia.w	r4, {r0, r1}
 801c282:	4620      	mov	r0, r4
 801c284:	b003      	add	sp, #12
 801c286:	bd30      	pop	{r4, r5, pc}

0801c288 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801c288:	b513      	push	{r0, r1, r4, lr}
 801c28a:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801c28e:	4604      	mov	r4, r0
 801c290:	3301      	adds	r3, #1
 801c292:	d109      	bne.n	801c2a8 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801c294:	4601      	mov	r1, r0
 801c296:	4668      	mov	r0, sp
 801c298:	f7ff fd98 	bl	801bdcc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c29c:	f8bd 3000 	ldrh.w	r3, [sp]
 801c2a0:	8423      	strh	r3, [r4, #32]
 801c2a2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c2a6:	8463      	strh	r3, [r4, #34]	; 0x22
 801c2a8:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801c2ac:	b002      	add	sp, #8
 801c2ae:	bd10      	pop	{r4, pc}

0801c2b0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801c2b0:	b513      	push	{r0, r1, r4, lr}
 801c2b2:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801c2b6:	4604      	mov	r4, r0
 801c2b8:	3301      	adds	r3, #1
 801c2ba:	d109      	bne.n	801c2d0 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801c2bc:	4601      	mov	r1, r0
 801c2be:	4668      	mov	r0, sp
 801c2c0:	f7ff fd84 	bl	801bdcc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c2c4:	f8bd 3000 	ldrh.w	r3, [sp]
 801c2c8:	8423      	strh	r3, [r4, #32]
 801c2ca:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c2ce:	8463      	strh	r3, [r4, #34]	; 0x22
 801c2d0:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801c2d4:	b002      	add	sp, #8
 801c2d6:	bd10      	pop	{r4, pc}

0801c2d8 <_ZN8touchgfx6ScreenC1Ev>:
 801c2d8:	b570      	push	{r4, r5, r6, lr}
 801c2da:	4b17      	ldr	r3, [pc, #92]	; (801c338 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801c2dc:	4605      	mov	r5, r0
 801c2de:	4a17      	ldr	r2, [pc, #92]	; (801c33c <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801c2e0:	2101      	movs	r1, #1
 801c2e2:	f845 3b04 	str.w	r3, [r5], #4
 801c2e6:	2300      	movs	r3, #0
 801c2e8:	6042      	str	r2, [r0, #4]
 801c2ea:	4604      	mov	r4, r0
 801c2ec:	8103      	strh	r3, [r0, #8]
 801c2ee:	8143      	strh	r3, [r0, #10]
 801c2f0:	8183      	strh	r3, [r0, #12]
 801c2f2:	81c3      	strh	r3, [r0, #14]
 801c2f4:	8203      	strh	r3, [r0, #16]
 801c2f6:	8243      	strh	r3, [r0, #18]
 801c2f8:	8283      	strh	r3, [r0, #20]
 801c2fa:	82c3      	strh	r3, [r0, #22]
 801c2fc:	6203      	str	r3, [r0, #32]
 801c2fe:	8483      	strh	r3, [r0, #36]	; 0x24
 801c300:	84c3      	strh	r3, [r0, #38]	; 0x26
 801c302:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801c306:	6343      	str	r3, [r0, #52]	; 0x34
 801c308:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801c30c:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801c310:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801c314:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801c318:	4b09      	ldr	r3, [pc, #36]	; (801c340 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801c31a:	4628      	mov	r0, r5
 801c31c:	f9b3 6000 	ldrsh.w	r6, [r3]
 801c320:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801c322:	4a08      	ldr	r2, [pc, #32]	; (801c344 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801c324:	f9b2 1000 	ldrsh.w	r1, [r2]
 801c328:	4798      	blx	r3
 801c32a:	6863      	ldr	r3, [r4, #4]
 801c32c:	4628      	mov	r0, r5
 801c32e:	4631      	mov	r1, r6
 801c330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c332:	4798      	blx	r3
 801c334:	4620      	mov	r0, r4
 801c336:	bd70      	pop	{r4, r5, r6, pc}
 801c338:	0802e810 	.word	0x0802e810
 801c33c:	0802d050 	.word	0x0802d050
 801c340:	2400b5c6 	.word	0x2400b5c6
 801c344:	2400b5c4 	.word	0x2400b5c4

0801c348 <_ZN8touchgfx6Screen4drawEv>:
 801c348:	4b09      	ldr	r3, [pc, #36]	; (801c370 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801c34a:	b507      	push	{r0, r1, r2, lr}
 801c34c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c350:	2100      	movs	r1, #0
 801c352:	4b08      	ldr	r3, [pc, #32]	; (801c374 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801c354:	9100      	str	r1, [sp, #0]
 801c356:	4669      	mov	r1, sp
 801c358:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c35c:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c360:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c364:	6803      	ldr	r3, [r0, #0]
 801c366:	689b      	ldr	r3, [r3, #8]
 801c368:	4798      	blx	r3
 801c36a:	b003      	add	sp, #12
 801c36c:	f85d fb04 	ldr.w	pc, [sp], #4
 801c370:	2400b5c4 	.word	0x2400b5c4
 801c374:	2400b5c6 	.word	0x2400b5c6

0801c378 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801c378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c37c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801c380:	b089      	sub	sp, #36	; 0x24
 801c382:	4680      	mov	r8, r0
 801c384:	460c      	mov	r4, r1
 801c386:	2b00      	cmp	r3, #0
 801c388:	4615      	mov	r5, r2
 801c38a:	dd0e      	ble.n	801c3aa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c38c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801c390:	2b00      	cmp	r3, #0
 801c392:	dd0a      	ble.n	801c3aa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c394:	4628      	mov	r0, r5
 801c396:	f7ff ff5b 	bl	801c250 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801c39a:	4621      	mov	r1, r4
 801c39c:	f7fe fc2a 	bl	801abf4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c3a0:	69eb      	ldr	r3, [r5, #28]
 801c3a2:	b928      	cbnz	r0, 801c3b0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801c3a4:	461d      	mov	r5, r3
 801c3a6:	2b00      	cmp	r3, #0
 801c3a8:	d1f4      	bne.n	801c394 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801c3aa:	b009      	add	sp, #36	; 0x24
 801c3ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c3b0:	ae04      	add	r6, sp, #16
 801c3b2:	2b00      	cmp	r3, #0
 801c3b4:	f000 80b5 	beq.w	801c522 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801c3b8:	682b      	ldr	r3, [r5, #0]
 801c3ba:	4629      	mov	r1, r5
 801c3bc:	a802      	add	r0, sp, #8
 801c3be:	68db      	ldr	r3, [r3, #12]
 801c3c0:	4798      	blx	r3
 801c3c2:	4628      	mov	r0, r5
 801c3c4:	f7ff ff60 	bl	801c288 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801c3c8:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801c3cc:	4407      	add	r7, r0
 801c3ce:	4628      	mov	r0, r5
 801c3d0:	f7ff ff6e 	bl	801c2b0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801c3d4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801c3d8:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801c3dc:	b23f      	sxth	r7, r7
 801c3de:	4418      	add	r0, r3
 801c3e0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801c3e4:	4621      	mov	r1, r4
 801c3e6:	f8ad 2014 	strh.w	r2, [sp, #20]
 801c3ea:	f8ad 0012 	strh.w	r0, [sp, #18]
 801c3ee:	4630      	mov	r0, r6
 801c3f0:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c3f4:	f8ad 7010 	strh.w	r7, [sp, #16]
 801c3f8:	f7fa ff14 	bl	8017224 <_ZN8touchgfx4RectaNERKS0_>
 801c3fc:	4628      	mov	r0, r5
 801c3fe:	f7ff ff27 	bl	801c250 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801c402:	ab06      	add	r3, sp, #24
 801c404:	4602      	mov	r2, r0
 801c406:	e896 0003 	ldmia.w	r6, {r0, r1}
 801c40a:	e883 0003 	stmia.w	r3, {r0, r1}
 801c40e:	4611      	mov	r1, r2
 801c410:	4618      	mov	r0, r3
 801c412:	f7fa ff07 	bl	8017224 <_ZN8touchgfx4RectaNERKS0_>
 801c416:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801c41a:	f9b4 1000 	ldrsh.w	r1, [r4]
 801c41e:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801c422:	4299      	cmp	r1, r3
 801c424:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801c428:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801c42c:	d10b      	bne.n	801c446 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801c42e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801c432:	4552      	cmp	r2, sl
 801c434:	d107      	bne.n	801c446 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801c436:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801c43a:	455a      	cmp	r2, fp
 801c43c:	d103      	bne.n	801c446 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801c43e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801c442:	454a      	cmp	r2, r9
 801c444:	d06d      	beq.n	801c522 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801c446:	f1bb 0f00 	cmp.w	fp, #0
 801c44a:	dd65      	ble.n	801c518 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801c44c:	f1b9 0f00 	cmp.w	r9, #0
 801c450:	dd62      	ble.n	801c518 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801c452:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801c456:	fa1f f08a 	uxth.w	r0, sl
 801c45a:	4552      	cmp	r2, sl
 801c45c:	9000      	str	r0, [sp, #0]
 801c45e:	da12      	bge.n	801c486 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801c460:	9301      	str	r3, [sp, #4]
 801c462:	9b00      	ldr	r3, [sp, #0]
 801c464:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801c468:	f8ad 2012 	strh.w	r2, [sp, #18]
 801c46c:	1a9a      	subs	r2, r3, r2
 801c46e:	f8ad 1010 	strh.w	r1, [sp, #16]
 801c472:	4631      	mov	r1, r6
 801c474:	f8ad 0014 	strh.w	r0, [sp, #20]
 801c478:	4640      	mov	r0, r8
 801c47a:	f8ad 2016 	strh.w	r2, [sp, #22]
 801c47e:	69ea      	ldr	r2, [r5, #28]
 801c480:	f7ff ff7a 	bl	801c378 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c484:	9b01      	ldr	r3, [sp, #4]
 801c486:	f9b4 2000 	ldrsh.w	r2, [r4]
 801c48a:	b29f      	uxth	r7, r3
 801c48c:	429a      	cmp	r2, r3
 801c48e:	da0d      	bge.n	801c4ac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801c490:	f8ad 2010 	strh.w	r2, [sp, #16]
 801c494:	1aba      	subs	r2, r7, r2
 801c496:	f8ad a012 	strh.w	sl, [sp, #18]
 801c49a:	4631      	mov	r1, r6
 801c49c:	f8ad 2014 	strh.w	r2, [sp, #20]
 801c4a0:	4640      	mov	r0, r8
 801c4a2:	f8ad 9016 	strh.w	r9, [sp, #22]
 801c4a6:	69ea      	ldr	r2, [r5, #28]
 801c4a8:	f7ff ff66 	bl	801c378 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c4ac:	8822      	ldrh	r2, [r4, #0]
 801c4ae:	445f      	add	r7, fp
 801c4b0:	88a3      	ldrh	r3, [r4, #4]
 801c4b2:	b2bf      	uxth	r7, r7
 801c4b4:	4413      	add	r3, r2
 801c4b6:	b23a      	sxth	r2, r7
 801c4b8:	b29b      	uxth	r3, r3
 801c4ba:	b219      	sxth	r1, r3
 801c4bc:	4291      	cmp	r1, r2
 801c4be:	dd0d      	ble.n	801c4dc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801c4c0:	1bdb      	subs	r3, r3, r7
 801c4c2:	f8ad 2010 	strh.w	r2, [sp, #16]
 801c4c6:	f8ad a012 	strh.w	sl, [sp, #18]
 801c4ca:	4631      	mov	r1, r6
 801c4cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 801c4d0:	4640      	mov	r0, r8
 801c4d2:	f8ad 9016 	strh.w	r9, [sp, #22]
 801c4d6:	69ea      	ldr	r2, [r5, #28]
 801c4d8:	f7ff ff4e 	bl	801c378 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c4dc:	88e2      	ldrh	r2, [r4, #6]
 801c4de:	8863      	ldrh	r3, [r4, #2]
 801c4e0:	4413      	add	r3, r2
 801c4e2:	9a00      	ldr	r2, [sp, #0]
 801c4e4:	444a      	add	r2, r9
 801c4e6:	b29b      	uxth	r3, r3
 801c4e8:	fa1f f982 	uxth.w	r9, r2
 801c4ec:	b219      	sxth	r1, r3
 801c4ee:	fa0f f289 	sxth.w	r2, r9
 801c4f2:	428a      	cmp	r2, r1
 801c4f4:	da15      	bge.n	801c522 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801c4f6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801c4fa:	eba3 0309 	sub.w	r3, r3, r9
 801c4fe:	f9b4 0000 	ldrsh.w	r0, [r4]
 801c502:	f8ad 1014 	strh.w	r1, [sp, #20]
 801c506:	4631      	mov	r1, r6
 801c508:	f8ad 0010 	strh.w	r0, [sp, #16]
 801c50c:	f8ad 2012 	strh.w	r2, [sp, #18]
 801c510:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c514:	69ea      	ldr	r2, [r5, #28]
 801c516:	e001      	b.n	801c51c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801c518:	69ea      	ldr	r2, [r5, #28]
 801c51a:	4621      	mov	r1, r4
 801c51c:	4640      	mov	r0, r8
 801c51e:	f7ff ff2b 	bl	801c378 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c522:	4628      	mov	r0, r5
 801c524:	f7ff fe94 	bl	801c250 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801c528:	6861      	ldr	r1, [r4, #4]
 801c52a:	4602      	mov	r2, r0
 801c52c:	4633      	mov	r3, r6
 801c52e:	6820      	ldr	r0, [r4, #0]
 801c530:	c303      	stmia	r3!, {r0, r1}
 801c532:	4611      	mov	r1, r2
 801c534:	4630      	mov	r0, r6
 801c536:	f7fa fe75 	bl	8017224 <_ZN8touchgfx4RectaNERKS0_>
 801c53a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801c53e:	2b00      	cmp	r3, #0
 801c540:	f77f af33 	ble.w	801c3aa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c544:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801c548:	2b00      	cmp	r3, #0
 801c54a:	f77f af2e 	ble.w	801c3aa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c54e:	4628      	mov	r0, r5
 801c550:	f7ff fe9a 	bl	801c288 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801c554:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801c558:	1a18      	subs	r0, r3, r0
 801c55a:	f8ad 0010 	strh.w	r0, [sp, #16]
 801c55e:	4628      	mov	r0, r5
 801c560:	f7ff fea6 	bl	801c2b0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801c564:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801c568:	4631      	mov	r1, r6
 801c56a:	1a18      	subs	r0, r3, r0
 801c56c:	f8ad 0012 	strh.w	r0, [sp, #18]
 801c570:	4628      	mov	r0, r5
 801c572:	682b      	ldr	r3, [r5, #0]
 801c574:	689b      	ldr	r3, [r3, #8]
 801c576:	4798      	blx	r3
 801c578:	e717      	b.n	801c3aa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801c57a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801c57a:	b570      	push	{r4, r5, r6, lr}
 801c57c:	1d06      	adds	r6, r0, #4
 801c57e:	b086      	sub	sp, #24
 801c580:	460c      	mov	r4, r1
 801c582:	2300      	movs	r3, #0
 801c584:	4631      	mov	r1, r6
 801c586:	4605      	mov	r5, r0
 801c588:	a802      	add	r0, sp, #8
 801c58a:	9301      	str	r3, [sp, #4]
 801c58c:	f7ff fc1e 	bl	801bdcc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c590:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801c594:	8822      	ldrh	r2, [r4, #0]
 801c596:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801c59a:	1ad2      	subs	r2, r2, r3
 801c59c:	8863      	ldrh	r3, [r4, #2]
 801c59e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801c5a2:	1a5b      	subs	r3, r3, r1
 801c5a4:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801c5a8:	f8ad 2010 	strh.w	r2, [sp, #16]
 801c5ac:	aa01      	add	r2, sp, #4
 801c5ae:	f8ad 0014 	strh.w	r0, [sp, #20]
 801c5b2:	4630      	mov	r0, r6
 801c5b4:	f8ad 1016 	strh.w	r1, [sp, #22]
 801c5b8:	a904      	add	r1, sp, #16
 801c5ba:	f8ad 3012 	strh.w	r3, [sp, #18]
 801c5be:	f7fa ff09 	bl	80173d4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801c5c2:	9a01      	ldr	r2, [sp, #4]
 801c5c4:	b11a      	cbz	r2, 801c5ce <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801c5c6:	4621      	mov	r1, r4
 801c5c8:	4628      	mov	r0, r5
 801c5ca:	f7ff fed5 	bl	801c378 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c5ce:	b006      	add	sp, #24
 801c5d0:	bd70      	pop	{r4, r5, r6, pc}

0801c5d2 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801c5d2:	4602      	mov	r2, r0
 801c5d4:	b530      	push	{r4, r5, lr}
 801c5d6:	4604      	mov	r4, r0
 801c5d8:	b085      	sub	sp, #20
 801c5da:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801c5de:	460d      	mov	r5, r1
 801c5e0:	466b      	mov	r3, sp
 801c5e2:	6851      	ldr	r1, [r2, #4]
 801c5e4:	c303      	stmia	r3!, {r0, r1}
 801c5e6:	4629      	mov	r1, r5
 801c5e8:	4668      	mov	r0, sp
 801c5ea:	f7fa fe1b 	bl	8017224 <_ZN8touchgfx4RectaNERKS0_>
 801c5ee:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801c5f2:	b12b      	cbz	r3, 801c600 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801c5f4:	4669      	mov	r1, sp
 801c5f6:	4620      	mov	r0, r4
 801c5f8:	f7ff ffbf 	bl	801c57a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801c5fc:	b005      	add	sp, #20
 801c5fe:	bd30      	pop	{r4, r5, pc}
 801c600:	3404      	adds	r4, #4
 801c602:	a802      	add	r0, sp, #8
 801c604:	4621      	mov	r1, r4
 801c606:	f7ff fbe1 	bl	801bdcc <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c60a:	f8bd 3000 	ldrh.w	r3, [sp]
 801c60e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801c612:	4669      	mov	r1, sp
 801c614:	4620      	mov	r0, r4
 801c616:	1a9b      	subs	r3, r3, r2
 801c618:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801c61c:	f8ad 3000 	strh.w	r3, [sp]
 801c620:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c624:	1a9b      	subs	r3, r3, r2
 801c626:	f8ad 3002 	strh.w	r3, [sp, #2]
 801c62a:	f7fa fe9a 	bl	8017362 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801c62e:	e7e5      	b.n	801c5fc <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801c630 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801c630:	460b      	mov	r3, r1
 801c632:	680a      	ldr	r2, [r1, #0]
 801c634:	1d01      	adds	r1, r0, #4
 801c636:	6992      	ldr	r2, [r2, #24]
 801c638:	4618      	mov	r0, r3
 801c63a:	4710      	bx	r2

0801c63c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801c63c:	4298      	cmp	r0, r3
 801c63e:	d200      	bcs.n	801c642 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 801c640:	b913      	cbnz	r3, 801c648 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 801c642:	440a      	add	r2, r1
 801c644:	b210      	sxth	r0, r2
 801c646:	4770      	bx	lr
 801c648:	ee07 0a90 	vmov	s15, r0
 801c64c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801c650:	ee07 3a90 	vmov	s15, r3
 801c654:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c658:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801c65c:	ee07 2a90 	vmov	s15, r2
 801c660:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c664:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801c668:	ee07 1a90 	vmov	s15, r1
 801c66c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c670:	ee37 7a66 	vsub.f32	s14, s14, s13
 801c674:	ee67 5a07 	vmul.f32	s11, s14, s14
 801c678:	eee5 6a87 	vfma.f32	s13, s11, s14
 801c67c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801c680:	eee6 7a26 	vfma.f32	s15, s12, s13
 801c684:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c68c:	bfcc      	ite	gt
 801c68e:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801c692:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801c696:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c69a:	ee17 3a90 	vmov	r3, s15
 801c69e:	b218      	sxth	r0, r3
 801c6a0:	4770      	bx	lr

0801c6a2 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>:
 801c6a2:	4298      	cmp	r0, r3
 801c6a4:	d200      	bcs.n	801c6a8 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x6>
 801c6a6:	b913      	cbnz	r3, 801c6ae <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0xc>
 801c6a8:	440a      	add	r2, r1
 801c6aa:	b210      	sxth	r0, r2
 801c6ac:	4770      	bx	lr
 801c6ae:	ee07 2a90 	vmov	s15, r2
 801c6b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801c6b6:	ee07 0a90 	vmov	s15, r0
 801c6ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c6be:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c6c2:	ee07 3a10 	vmov	s14, r3
 801c6c6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 801c6ca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801c6ce:	ee07 1a90 	vmov	s15, r1
 801c6d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c6d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c6da:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801c6de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c6e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c6e6:	bfcc      	ite	gt
 801c6e8:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801c6ec:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801c6f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c6f4:	ee17 3a90 	vmov	r3, s15
 801c6f8:	b218      	sxth	r0, r3
 801c6fa:	4770      	bx	lr

0801c6fc <_ZN8touchgfx12TextProviderC1Ev>:
 801c6fc:	b538      	push	{r3, r4, r5, lr}
 801c6fe:	2500      	movs	r5, #0
 801c700:	2302      	movs	r3, #2
 801c702:	4604      	mov	r4, r0
 801c704:	220e      	movs	r2, #14
 801c706:	7403      	strb	r3, [r0, #16]
 801c708:	4629      	mov	r1, r5
 801c70a:	6145      	str	r5, [r0, #20]
 801c70c:	7605      	strb	r5, [r0, #24]
 801c70e:	83c5      	strh	r5, [r0, #30]
 801c710:	8405      	strh	r5, [r0, #32]
 801c712:	86c5      	strh	r5, [r0, #54]	; 0x36
 801c714:	8705      	strh	r5, [r0, #56]	; 0x38
 801c716:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801c718:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801c71c:	e9c0 5500 	strd	r5, r5, [r0]
 801c720:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801c724:	304c      	adds	r0, #76	; 0x4c
 801c726:	f00d fde3 	bl	802a2f0 <memset>
 801c72a:	2301      	movs	r3, #1
 801c72c:	4620      	mov	r0, r4
 801c72e:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801c732:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801c736:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801c73a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801c73e:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801c742:	f7ed f847 	bl	80097d4 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801c746:	4620      	mov	r0, r4
 801c748:	bd38      	pop	{r3, r4, r5, pc}

0801c74a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801c74a:	b530      	push	{r4, r5, lr}
 801c74c:	2500      	movs	r5, #0
 801c74e:	2401      	movs	r4, #1
 801c750:	6843      	ldr	r3, [r0, #4]
 801c752:	b913      	cbnz	r3, 801c75a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801c754:	6803      	ldr	r3, [r0, #0]
 801c756:	b313      	cbz	r3, 801c79e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801c758:	6043      	str	r3, [r0, #4]
 801c75a:	7e03      	ldrb	r3, [r0, #24]
 801c75c:	b143      	cbz	r3, 801c770 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801c75e:	6943      	ldr	r3, [r0, #20]
 801c760:	b12b      	cbz	r3, 801c76e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801c762:	881a      	ldrh	r2, [r3, #0]
 801c764:	b11a      	cbz	r2, 801c76e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801c766:	1c9a      	adds	r2, r3, #2
 801c768:	6142      	str	r2, [r0, #20]
 801c76a:	8818      	ldrh	r0, [r3, #0]
 801c76c:	bd30      	pop	{r4, r5, pc}
 801c76e:	7605      	strb	r5, [r0, #24]
 801c770:	6843      	ldr	r3, [r0, #4]
 801c772:	8819      	ldrh	r1, [r3, #0]
 801c774:	b199      	cbz	r1, 801c79e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801c776:	1c9a      	adds	r2, r3, #2
 801c778:	2902      	cmp	r1, #2
 801c77a:	6042      	str	r2, [r0, #4]
 801c77c:	d1f5      	bne.n	801c76a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801c77e:	7c03      	ldrb	r3, [r0, #16]
 801c780:	2b01      	cmp	r3, #1
 801c782:	d8e5      	bhi.n	801c750 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801c784:	1c5a      	adds	r2, r3, #1
 801c786:	3302      	adds	r3, #2
 801c788:	7402      	strb	r2, [r0, #16]
 801c78a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801c78e:	6143      	str	r3, [r0, #20]
 801c790:	2b00      	cmp	r3, #0
 801c792:	d0dd      	beq.n	801c750 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801c794:	881b      	ldrh	r3, [r3, #0]
 801c796:	2b00      	cmp	r3, #0
 801c798:	d0da      	beq.n	801c750 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801c79a:	7604      	strb	r4, [r0, #24]
 801c79c:	e7d8      	b.n	801c750 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801c79e:	2000      	movs	r0, #0
 801c7a0:	e7e4      	b.n	801c76c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801c7a2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801c7a2:	b430      	push	{r4, r5}
 801c7a4:	6815      	ldr	r5, [r2, #0]
 801c7a6:	6085      	str	r5, [r0, #8]
 801c7a8:	6852      	ldr	r2, [r2, #4]
 801c7aa:	6443      	str	r3, [r0, #68]	; 0x44
 801c7ac:	60c2      	str	r2, [r0, #12]
 801c7ae:	2200      	movs	r2, #0
 801c7b0:	9b02      	ldr	r3, [sp, #8]
 801c7b2:	7402      	strb	r2, [r0, #16]
 801c7b4:	6001      	str	r1, [r0, #0]
 801c7b6:	6483      	str	r3, [r0, #72]	; 0x48
 801c7b8:	6042      	str	r2, [r0, #4]
 801c7ba:	6142      	str	r2, [r0, #20]
 801c7bc:	7602      	strb	r2, [r0, #24]
 801c7be:	8702      	strh	r2, [r0, #56]	; 0x38
 801c7c0:	8402      	strh	r2, [r0, #32]
 801c7c2:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801c7c6:	bc30      	pop	{r4, r5}
 801c7c8:	f7ed b804 	b.w	80097d4 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801c7cc <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801c7cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c7ce:	4605      	mov	r5, r0
 801c7d0:	4608      	mov	r0, r1
 801c7d2:	b1f1      	cbz	r1, 801c812 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801c7d4:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801c7d8:	460b      	mov	r3, r1
 801c7da:	f101 0708 	add.w	r7, r1, #8
 801c7de:	4622      	mov	r2, r4
 801c7e0:	6818      	ldr	r0, [r3, #0]
 801c7e2:	3308      	adds	r3, #8
 801c7e4:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801c7e8:	4626      	mov	r6, r4
 801c7ea:	42bb      	cmp	r3, r7
 801c7ec:	c603      	stmia	r6!, {r0, r1}
 801c7ee:	4634      	mov	r4, r6
 801c7f0:	d1f6      	bne.n	801c7e0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801c7f2:	6818      	ldr	r0, [r3, #0]
 801c7f4:	6030      	str	r0, [r6, #0]
 801c7f6:	4610      	mov	r0, r2
 801c7f8:	889b      	ldrh	r3, [r3, #4]
 801c7fa:	80b3      	strh	r3, [r6, #4]
 801c7fc:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801c800:	015b      	lsls	r3, r3, #5
 801c802:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801c806:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801c80a:	430b      	orrs	r3, r1
 801c80c:	425b      	negs	r3, r3
 801c80e:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801c812:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c814 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801c814:	b538      	push	{r3, r4, r5, lr}
 801c816:	460c      	mov	r4, r1
 801c818:	6811      	ldr	r1, [r2, #0]
 801c81a:	4610      	mov	r0, r2
 801c81c:	68cd      	ldr	r5, [r1, #12]
 801c81e:	4619      	mov	r1, r3
 801c820:	47a8      	blx	r5
 801c822:	2800      	cmp	r0, #0
 801c824:	bf08      	it	eq
 801c826:	4620      	moveq	r0, r4
 801c828:	bd38      	pop	{r3, r4, r5, pc}
	...

0801c82c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801c82c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c82e:	4604      	mov	r4, r0
 801c830:	4615      	mov	r5, r2
 801c832:	4608      	mov	r0, r1
 801c834:	b93a      	cbnz	r2, 801c846 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801c836:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801c83a:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801c83e:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801c842:	4628      	mov	r0, r5
 801c844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c846:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801c84a:	8893      	ldrh	r3, [r2, #4]
 801c84c:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801c850:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801c854:	79ee      	ldrb	r6, [r5, #7]
 801c856:	4316      	orrs	r6, r2
 801c858:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 801c85c:	189a      	adds	r2, r3, r2
 801c85e:	b2b7      	uxth	r7, r6
 801c860:	b291      	uxth	r1, r2
 801c862:	291d      	cmp	r1, #29
 801c864:	f200 8084 	bhi.w	801c970 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801c868:	2201      	movs	r2, #1
 801c86a:	10f6      	asrs	r6, r6, #3
 801c86c:	408a      	lsls	r2, r1
 801c86e:	4978      	ldr	r1, [pc, #480]	; (801ca50 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 801c870:	420a      	tst	r2, r1
 801c872:	d12e      	bne.n	801c8d2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801c874:	f412 7f60 	tst.w	r2, #896	; 0x380
 801c878:	d07a      	beq.n	801c970 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801c87a:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 801c87e:	462b      	mov	r3, r5
 801c880:	f105 0e08 	add.w	lr, r5, #8
 801c884:	4615      	mov	r5, r2
 801c886:	6818      	ldr	r0, [r3, #0]
 801c888:	3308      	adds	r3, #8
 801c88a:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801c88e:	4694      	mov	ip, r2
 801c890:	4573      	cmp	r3, lr
 801c892:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801c896:	4662      	mov	r2, ip
 801c898:	d1f5      	bne.n	801c886 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 801c89a:	6818      	ldr	r0, [r3, #0]
 801c89c:	f8cc 0000 	str.w	r0, [ip]
 801c8a0:	889b      	ldrh	r3, [r3, #4]
 801c8a2:	f8ac 3004 	strh.w	r3, [ip, #4]
 801c8a6:	b2b3      	uxth	r3, r6
 801c8a8:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801c8ac:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801c8b0:	1aca      	subs	r2, r1, r3
 801c8b2:	1bcf      	subs	r7, r1, r7
 801c8b4:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801c8b8:	b292      	uxth	r2, r2
 801c8ba:	1afb      	subs	r3, r7, r3
 801c8bc:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 801c8c0:	10d2      	asrs	r2, r2, #3
 801c8c2:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801c8c6:	4302      	orrs	r2, r0
 801c8c8:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801c8cc:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801c8d0:	e7b7      	b.n	801c842 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801c8d2:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801c8d4:	b92b      	cbnz	r3, 801c8e2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 801c8d6:	4b5f      	ldr	r3, [pc, #380]	; (801ca54 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 801c8d8:	21c0      	movs	r1, #192	; 0xc0
 801c8da:	4a5f      	ldr	r2, [pc, #380]	; (801ca58 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 801c8dc:	485f      	ldr	r0, [pc, #380]	; (801ca5c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 801c8de:	f00d fb81 	bl	8029fe4 <__assert_func>
 801c8e2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801c8e4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c8e8:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801c8ea:	f640 6333 	movw	r3, #3635	; 0xe33
 801c8ee:	4299      	cmp	r1, r3
 801c8f0:	d110      	bne.n	801c914 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 801c8f2:	6803      	ldr	r3, [r0, #0]
 801c8f4:	68db      	ldr	r3, [r3, #12]
 801c8f6:	4798      	blx	r3
 801c8f8:	7b41      	ldrb	r1, [r0, #13]
 801c8fa:	00cb      	lsls	r3, r1, #3
 801c8fc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c900:	7a03      	ldrb	r3, [r0, #8]
 801c902:	0648      	lsls	r0, r1, #25
 801c904:	ea43 0302 	orr.w	r3, r3, r2
 801c908:	bf44      	itt	mi
 801c90a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c90e:	b21b      	sxthmi	r3, r3
 801c910:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801c914:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801c918:	462a      	mov	r2, r5
 801c91a:	f105 0c08 	add.w	ip, r5, #8
 801c91e:	443b      	add	r3, r7
 801c920:	4433      	add	r3, r6
 801c922:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801c926:	b29b      	uxth	r3, r3
 801c928:	4635      	mov	r5, r6
 801c92a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801c92e:	6810      	ldr	r0, [r2, #0]
 801c930:	3208      	adds	r2, #8
 801c932:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801c936:	4637      	mov	r7, r6
 801c938:	4562      	cmp	r2, ip
 801c93a:	c703      	stmia	r7!, {r0, r1}
 801c93c:	463e      	mov	r6, r7
 801c93e:	d1f6      	bne.n	801c92e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 801c940:	6810      	ldr	r0, [r2, #0]
 801c942:	6038      	str	r0, [r7, #0]
 801c944:	8892      	ldrh	r2, [r2, #4]
 801c946:	80ba      	strh	r2, [r7, #4]
 801c948:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801c94c:	10db      	asrs	r3, r3, #3
 801c94e:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801c952:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801c956:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801c95a:	4313      	orrs	r3, r2
 801c95c:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801c960:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801c964:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801c968:	1a9b      	subs	r3, r3, r2
 801c96a:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801c96e:	e768      	b.n	801c842 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801c970:	f023 0204 	bic.w	r2, r3, #4
 801c974:	f640 611b 	movw	r1, #3611	; 0xe1b
 801c978:	428a      	cmp	r2, r1
 801c97a:	d003      	beq.n	801c984 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 801c97c:	f640 621d 	movw	r2, #3613	; 0xe1d
 801c980:	4293      	cmp	r3, r2
 801c982:	d120      	bne.n	801c9c6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801c984:	3b01      	subs	r3, #1
 801c986:	4602      	mov	r2, r0
 801c988:	4629      	mov	r1, r5
 801c98a:	4620      	mov	r0, r4
 801c98c:	b29b      	uxth	r3, r3
 801c98e:	f7ff ff41 	bl	801c814 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801c992:	7b41      	ldrb	r1, [r0, #13]
 801c994:	00cb      	lsls	r3, r1, #3
 801c996:	0649      	lsls	r1, r1, #25
 801c998:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c99c:	7a03      	ldrb	r3, [r0, #8]
 801c99e:	ea43 0302 	orr.w	r3, r3, r2
 801c9a2:	bf44      	itt	mi
 801c9a4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c9a8:	b21b      	sxthmi	r3, r3
 801c9aa:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801c9ae:	7b6b      	ldrb	r3, [r5, #13]
 801c9b0:	7aaa      	ldrb	r2, [r5, #10]
 801c9b2:	005b      	lsls	r3, r3, #1
 801c9b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c9b8:	4313      	orrs	r3, r2
 801c9ba:	115a      	asrs	r2, r3, #5
 801c9bc:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801c9c0:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801c9c4:	e035      	b.n	801ca32 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 801c9c6:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801c9ca:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801c9ce:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801c9d2:	7a2a      	ldrb	r2, [r5, #8]
 801c9d4:	ea42 0201 	orr.w	r2, r2, r1
 801c9d8:	f640 6109 	movw	r1, #3593	; 0xe09
 801c9dc:	bf1c      	itt	ne
 801c9de:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801c9e2:	b212      	sxthne	r2, r2
 801c9e4:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801c9e8:	f023 0210 	bic.w	r2, r3, #16
 801c9ec:	428a      	cmp	r2, r1
 801c9ee:	d003      	beq.n	801c9f8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 801c9f0:	f640 6213 	movw	r2, #3603	; 0xe13
 801c9f4:	4293      	cmp	r3, r2
 801c9f6:	d129      	bne.n	801ca4c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 801c9f8:	7b6e      	ldrb	r6, [r5, #13]
 801c9fa:	4629      	mov	r1, r5
 801c9fc:	0076      	lsls	r6, r6, #1
 801c9fe:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801ca02:	7aae      	ldrb	r6, [r5, #10]
 801ca04:	4316      	orrs	r6, r2
 801ca06:	f640 6213 	movw	r2, #3603	; 0xe13
 801ca0a:	4293      	cmp	r3, r2
 801ca0c:	4602      	mov	r2, r0
 801ca0e:	4620      	mov	r0, r4
 801ca10:	bf16      	itet	ne
 801ca12:	f103 33ff 	addne.w	r3, r3, #4294967295
 801ca16:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801ca1a:	b29b      	uxthne	r3, r3
 801ca1c:	f7ff fefa 	bl	801c814 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801ca20:	7b43      	ldrb	r3, [r0, #13]
 801ca22:	7a82      	ldrb	r2, [r0, #10]
 801ca24:	005b      	lsls	r3, r3, #1
 801ca26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ca2a:	4313      	orrs	r3, r2
 801ca2c:	1af6      	subs	r6, r6, r3
 801ca2e:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801ca32:	7b69      	ldrb	r1, [r5, #13]
 801ca34:	00cb      	lsls	r3, r1, #3
 801ca36:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801ca3a:	7a2b      	ldrb	r3, [r5, #8]
 801ca3c:	4313      	orrs	r3, r2
 801ca3e:	064a      	lsls	r2, r1, #25
 801ca40:	bf44      	itt	mi
 801ca42:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801ca46:	b21b      	sxthmi	r3, r3
 801ca48:	1bdb      	subs	r3, r3, r7
 801ca4a:	e73f      	b.n	801c8cc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 801ca4c:	2300      	movs	r3, #0
 801ca4e:	e7b7      	b.n	801c9c0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 801ca50:	3fc00079 	.word	0x3fc00079
 801ca54:	0802e83c 	.word	0x0802e83c
 801ca58:	0802eaae 	.word	0x0802eaae
 801ca5c:	0802e845 	.word	0x0802e845

0801ca60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801ca60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ca64:	4604      	mov	r4, r0
 801ca66:	b942      	cbnz	r2, 801ca7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801ca68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801ca6c:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 801ca70:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801ca74:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801ca78:	e046      	b.n	801cb08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801ca7a:	7b51      	ldrb	r1, [r2, #13]
 801ca7c:	8893      	ldrh	r3, [r2, #4]
 801ca7e:	010f      	lsls	r7, r1, #4
 801ca80:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801ca84:	79d7      	ldrb	r7, [r2, #7]
 801ca86:	4307      	orrs	r7, r0
 801ca88:	2f04      	cmp	r7, #4
 801ca8a:	b2bd      	uxth	r5, r7
 801ca8c:	bfcc      	ite	gt
 801ca8e:	08bf      	lsrgt	r7, r7, #2
 801ca90:	2701      	movle	r7, #1
 801ca92:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801ca96:	f200 80ab 	bhi.w	801cbf0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 801ca9a:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801ca9e:	4283      	cmp	r3, r0
 801caa0:	d216      	bcs.n	801cad0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801caa2:	f240 605b 	movw	r0, #1627	; 0x65b
 801caa6:	4283      	cmp	r3, r0
 801caa8:	d859      	bhi.n	801cb5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 801caaa:	f240 6057 	movw	r0, #1623	; 0x657
 801caae:	4283      	cmp	r3, r0
 801cab0:	d20e      	bcs.n	801cad0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801cab2:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801cab6:	d24a      	bcs.n	801cb4e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 801cab8:	f240 604e 	movw	r0, #1614	; 0x64e
 801cabc:	4283      	cmp	r3, r0
 801cabe:	d207      	bcs.n	801cad0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801cac0:	f240 601a 	movw	r0, #1562	; 0x61a
 801cac4:	4283      	cmp	r3, r0
 801cac6:	d02a      	beq.n	801cb1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801cac8:	d821      	bhi.n	801cb0e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 801caca:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801cace:	d35b      	bcc.n	801cb88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801cad0:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801cad4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801cad8:	f040 80d0 	bne.w	801cc7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801cadc:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 801cae0:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801cae4:	f040 80ca 	bne.w	801cc7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801cae8:	00cb      	lsls	r3, r1, #3
 801caea:	0649      	lsls	r1, r1, #25
 801caec:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801caf0:	7a13      	ldrb	r3, [r2, #8]
 801caf2:	ea43 0300 	orr.w	r3, r3, r0
 801caf6:	bf44      	itt	mi
 801caf8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801cafc:	b21b      	sxthmi	r3, r3
 801cafe:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801cb02:	1b5d      	subs	r5, r3, r5
 801cb04:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801cb08:	4610      	mov	r0, r2
 801cb0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cb0e:	f240 604b 	movw	r0, #1611	; 0x64b
 801cb12:	4283      	cmp	r3, r0
 801cb14:	d338      	bcc.n	801cb88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801cb16:	f240 604c 	movw	r0, #1612	; 0x64c
 801cb1a:	4283      	cmp	r3, r0
 801cb1c:	d9d8      	bls.n	801cad0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801cb1e:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801cb22:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801cb26:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801cb2a:	f040 80f2 	bne.w	801cd12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801cb2e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801cb32:	f040 80ee 	bne.w	801cd12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801cb36:	00cb      	lsls	r3, r1, #3
 801cb38:	064e      	lsls	r6, r1, #25
 801cb3a:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801cb3e:	7a13      	ldrb	r3, [r2, #8]
 801cb40:	ea43 0300 	orr.w	r3, r3, r0
 801cb44:	bf44      	itt	mi
 801cb46:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801cb4a:	b21b      	sxthmi	r3, r3
 801cb4c:	e7d9      	b.n	801cb02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 801cb4e:	f240 6054 	movw	r0, #1620	; 0x654
 801cb52:	4283      	cmp	r3, r0
 801cb54:	d8e3      	bhi.n	801cb1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801cb56:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801cb5a:	d9e0      	bls.n	801cb1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801cb5c:	e7b8      	b.n	801cad0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801cb5e:	f240 6074 	movw	r0, #1652	; 0x674
 801cb62:	4283      	cmp	r3, r0
 801cb64:	d0b4      	beq.n	801cad0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801cb66:	d82d      	bhi.n	801cbc4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 801cb68:	f240 605e 	movw	r0, #1630	; 0x65e
 801cb6c:	4283      	cmp	r3, r0
 801cb6e:	d804      	bhi.n	801cb7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 801cb70:	f240 605d 	movw	r0, #1629	; 0x65d
 801cb74:	4283      	cmp	r3, r0
 801cb76:	d3d2      	bcc.n	801cb1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801cb78:	e7aa      	b.n	801cad0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801cb7a:	f240 605f 	movw	r0, #1631	; 0x65f
 801cb7e:	4283      	cmp	r3, r0
 801cb80:	d0cd      	beq.n	801cb1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801cb82:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801cb86:	d0a3      	beq.n	801cad0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801cb88:	00cb      	lsls	r3, r1, #3
 801cb8a:	0649      	lsls	r1, r1, #25
 801cb8c:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801cb90:	7a13      	ldrb	r3, [r2, #8]
 801cb92:	ea43 0300 	orr.w	r3, r3, r0
 801cb96:	bf44      	itt	mi
 801cb98:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801cb9c:	b21b      	sxthmi	r3, r3
 801cb9e:	1b5d      	subs	r5, r3, r5
 801cba0:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801cba4:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801cba8:	7b53      	ldrb	r3, [r2, #13]
 801cbaa:	015b      	lsls	r3, r3, #5
 801cbac:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801cbb0:	7993      	ldrb	r3, [r2, #6]
 801cbb2:	430b      	orrs	r3, r1
 801cbb4:	2105      	movs	r1, #5
 801cbb6:	005b      	lsls	r3, r3, #1
 801cbb8:	fb93 f3f1 	sdiv	r3, r3, r1
 801cbbc:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801cbc0:	440b      	add	r3, r1
 801cbc2:	e757      	b.n	801ca74 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801cbc4:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801cbc8:	4283      	cmp	r3, r0
 801cbca:	d809      	bhi.n	801cbe0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 801cbcc:	f240 60df 	movw	r0, #1759	; 0x6df
 801cbd0:	4283      	cmp	r3, r0
 801cbd2:	f4bf af7d 	bcs.w	801cad0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801cbd6:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801cbda:	2b05      	cmp	r3, #5
 801cbdc:	d8d4      	bhi.n	801cb88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801cbde:	e777      	b.n	801cad0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801cbe0:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801cbe4:	4283      	cmp	r3, r0
 801cbe6:	d09a      	beq.n	801cb1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801cbe8:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801cbec:	4283      	cmp	r3, r0
 801cbee:	e7ca      	b.n	801cb86 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 801cbf0:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801cbf4:	d22b      	bcs.n	801cc4e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 801cbf6:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801cbfa:	4283      	cmp	r3, r0
 801cbfc:	d28f      	bcs.n	801cb1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801cbfe:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801cc02:	4283      	cmp	r3, r0
 801cc04:	d816      	bhi.n	801cc34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 801cc06:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801cc0a:	4283      	cmp	r3, r0
 801cc0c:	f4bf af60 	bcs.w	801cad0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801cc10:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801cc14:	4283      	cmp	r3, r0
 801cc16:	d80a      	bhi.n	801cc2e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 801cc18:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801cc1c:	4283      	cmp	r3, r0
 801cc1e:	f4bf af57 	bcs.w	801cad0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801cc22:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801cc26:	4283      	cmp	r3, r0
 801cc28:	f43f af79 	beq.w	801cb1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801cc2c:	e7ac      	b.n	801cb88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801cc2e:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801cc32:	e7f8      	b.n	801cc26 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 801cc34:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801cc38:	4283      	cmp	r3, r0
 801cc3a:	d802      	bhi.n	801cc42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 801cc3c:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801cc40:	e798      	b.n	801cb74 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 801cc42:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801cc46:	4283      	cmp	r3, r0
 801cc48:	f47f af42 	bne.w	801cad0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801cc4c:	e767      	b.n	801cb1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801cc4e:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801cc52:	4283      	cmp	r3, r0
 801cc54:	f43f af63 	beq.w	801cb1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801cc58:	d802      	bhi.n	801cc60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 801cc5a:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801cc5e:	e7f2      	b.n	801cc46 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 801cc60:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801cc64:	4283      	cmp	r3, r0
 801cc66:	d805      	bhi.n	801cc74 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 801cc68:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801cc6c:	4283      	cmp	r3, r0
 801cc6e:	f4ff af2f 	bcc.w	801cad0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801cc72:	e754      	b.n	801cb1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801cc74:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801cc78:	4283      	cmp	r3, r0
 801cc7a:	e7af      	b.n	801cbdc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 801cc7c:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801cc80:	4617      	mov	r7, r2
 801cc82:	f102 0808 	add.w	r8, r2, #8
 801cc86:	4666      	mov	r6, ip
 801cc88:	6838      	ldr	r0, [r7, #0]
 801cc8a:	3708      	adds	r7, #8
 801cc8c:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801cc90:	46e6      	mov	lr, ip
 801cc92:	4547      	cmp	r7, r8
 801cc94:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801cc98:	46f4      	mov	ip, lr
 801cc9a:	d1f5      	bne.n	801cc88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 801cc9c:	6838      	ldr	r0, [r7, #0]
 801cc9e:	f8ce 0000 	str.w	r0, [lr]
 801cca2:	88b9      	ldrh	r1, [r7, #4]
 801cca4:	f8ae 1004 	strh.w	r1, [lr, #4]
 801cca8:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801ccac:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801ccb0:	d009      	beq.n	801ccc6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 801ccb2:	7b51      	ldrb	r1, [r2, #13]
 801ccb4:	7992      	ldrb	r2, [r2, #6]
 801ccb6:	0149      	lsls	r1, r1, #5
 801ccb8:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801ccbc:	4311      	orrs	r1, r2
 801ccbe:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801ccc2:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801ccc6:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801ccca:	d00d      	beq.n	801cce8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 801cccc:	442b      	add	r3, r5
 801ccce:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801ccd2:	b29b      	uxth	r3, r3
 801ccd4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801ccd8:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801ccdc:	10db      	asrs	r3, r3, #3
 801ccde:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801cce2:	4313      	orrs	r3, r2
 801cce4:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801cce8:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801ccec:	00cb      	lsls	r3, r1, #3
 801ccee:	064f      	lsls	r7, r1, #25
 801ccf0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801ccf4:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801ccf8:	ea43 0302 	orr.w	r3, r3, r2
 801ccfc:	bf44      	itt	mi
 801ccfe:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801cd02:	b21b      	sxthmi	r3, r3
 801cd04:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801cd08:	1b5d      	subs	r5, r3, r5
 801cd0a:	4632      	mov	r2, r6
 801cd0c:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801cd10:	e6fa      	b.n	801cb08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801cd12:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 801cd16:	4694      	mov	ip, r2
 801cd18:	f102 0908 	add.w	r9, r2, #8
 801cd1c:	4676      	mov	r6, lr
 801cd1e:	f8dc 0000 	ldr.w	r0, [ip]
 801cd22:	f10c 0c08 	add.w	ip, ip, #8
 801cd26:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 801cd2a:	46f0      	mov	r8, lr
 801cd2c:	45cc      	cmp	ip, r9
 801cd2e:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801cd32:	46c6      	mov	lr, r8
 801cd34:	d1f3      	bne.n	801cd1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 801cd36:	f8dc 0000 	ldr.w	r0, [ip]
 801cd3a:	f8c8 0000 	str.w	r0, [r8]
 801cd3e:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 801cd42:	f8a8 1004 	strh.w	r1, [r8, #4]
 801cd46:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801cd4a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801cd4e:	d009      	beq.n	801cd64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 801cd50:	7b51      	ldrb	r1, [r2, #13]
 801cd52:	7992      	ldrb	r2, [r2, #6]
 801cd54:	0149      	lsls	r1, r1, #5
 801cd56:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801cd5a:	4311      	orrs	r1, r2
 801cd5c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801cd60:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801cd64:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801cd68:	d00d      	beq.n	801cd86 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 801cd6a:	1bdb      	subs	r3, r3, r7
 801cd6c:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801cd70:	b29b      	uxth	r3, r3
 801cd72:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801cd76:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801cd7a:	10db      	asrs	r3, r3, #3
 801cd7c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801cd80:	4313      	orrs	r3, r2
 801cd82:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801cd86:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801cd8a:	00cb      	lsls	r3, r1, #3
 801cd8c:	0648      	lsls	r0, r1, #25
 801cd8e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801cd92:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801cd96:	ea43 0302 	orr.w	r3, r3, r2
 801cd9a:	bf44      	itt	mi
 801cd9c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801cda0:	b21b      	sxthmi	r3, r3
 801cda2:	e7b1      	b.n	801cd08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

0801cda4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801cda4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cda8:	461e      	mov	r6, r3
 801cdaa:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 801cdac:	4604      	mov	r4, r0
 801cdae:	4617      	mov	r7, r2
 801cdb0:	b92b      	cbnz	r3, 801cdbe <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 801cdb2:	4b25      	ldr	r3, [pc, #148]	; (801ce48 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 801cdb4:	21c0      	movs	r1, #192	; 0xc0
 801cdb6:	4a25      	ldr	r2, [pc, #148]	; (801ce4c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 801cdb8:	4825      	ldr	r0, [pc, #148]	; (801ce50 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 801cdba:	f00d f913 	bl	8029fe4 <__assert_func>
 801cdbe:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801cdc0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801cdc4:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801cdc8:	f7ec fc5e 	bl	8009688 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801cdcc:	4605      	mov	r5, r0
 801cdce:	b918      	cbnz	r0, 801cdd8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 801cdd0:	6030      	str	r0, [r6, #0]
 801cdd2:	4628      	mov	r0, r5
 801cdd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cdd8:	683b      	ldr	r3, [r7, #0]
 801cdda:	4601      	mov	r1, r0
 801cddc:	4638      	mov	r0, r7
 801cdde:	68db      	ldr	r3, [r3, #12]
 801cde0:	4798      	blx	r3
 801cde2:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801cde6:	4602      	mov	r2, r0
 801cde8:	6030      	str	r0, [r6, #0]
 801cdea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801cdee:	d213      	bcs.n	801ce18 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 801cdf0:	4643      	mov	r3, r8
 801cdf2:	4639      	mov	r1, r7
 801cdf4:	4620      	mov	r0, r4
 801cdf6:	f7ff fe33 	bl	801ca60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801cdfa:	6030      	str	r0, [r6, #0]
 801cdfc:	6833      	ldr	r3, [r6, #0]
 801cdfe:	b143      	cbz	r3, 801ce12 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 801ce00:	7b5a      	ldrb	r2, [r3, #13]
 801ce02:	7a9b      	ldrb	r3, [r3, #10]
 801ce04:	0052      	lsls	r2, r2, #1
 801ce06:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801ce0a:	4313      	orrs	r3, r2
 801ce0c:	bf0c      	ite	eq
 801ce0e:	2301      	moveq	r3, #1
 801ce10:	2300      	movne	r3, #0
 801ce12:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801ce16:	e7dc      	b.n	801cdd2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 801ce18:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801ce1c:	b29b      	uxth	r3, r3
 801ce1e:	2b7f      	cmp	r3, #127	; 0x7f
 801ce20:	d804      	bhi.n	801ce2c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 801ce22:	4639      	mov	r1, r7
 801ce24:	4620      	mov	r0, r4
 801ce26:	f7ff fd01 	bl	801c82c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801ce2a:	e7e6      	b.n	801cdfa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801ce2c:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801ce30:	2b00      	cmp	r3, #0
 801ce32:	d0e3      	beq.n	801cdfc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801ce34:	f640 1302 	movw	r3, #2306	; 0x902
 801ce38:	429d      	cmp	r5, r3
 801ce3a:	d1df      	bne.n	801cdfc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801ce3c:	4601      	mov	r1, r0
 801ce3e:	4620      	mov	r0, r4
 801ce40:	f7ff fcc4 	bl	801c7cc <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801ce44:	e7d9      	b.n	801cdfa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801ce46:	bf00      	nop
 801ce48:	0802e83c 	.word	0x0802e83c
 801ce4c:	0802eaae 	.word	0x0802eaae
 801ce50:	0802e845 	.word	0x0802e845

0801ce54 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801ce54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ce58:	461e      	mov	r6, r3
 801ce5a:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 801ce5c:	4604      	mov	r4, r0
 801ce5e:	4617      	mov	r7, r2
 801ce60:	b92b      	cbnz	r3, 801ce6e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 801ce62:	4b26      	ldr	r3, [pc, #152]	; (801cefc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 801ce64:	21c0      	movs	r1, #192	; 0xc0
 801ce66:	4a26      	ldr	r2, [pc, #152]	; (801cf00 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 801ce68:	4826      	ldr	r0, [pc, #152]	; (801cf04 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 801ce6a:	f00d f8bb 	bl	8029fe4 <__assert_func>
 801ce6e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801ce70:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801ce74:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801ce78:	f7ec fc06 	bl	8009688 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801ce7c:	4605      	mov	r5, r0
 801ce7e:	b918      	cbnz	r0, 801ce88 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 801ce80:	6030      	str	r0, [r6, #0]
 801ce82:	4628      	mov	r0, r5
 801ce84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ce88:	683b      	ldr	r3, [r7, #0]
 801ce8a:	4601      	mov	r1, r0
 801ce8c:	4638      	mov	r0, r7
 801ce8e:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801ce92:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801ce96:	47c8      	blx	r9
 801ce98:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801ce9c:	4602      	mov	r2, r0
 801ce9e:	6030      	str	r0, [r6, #0]
 801cea0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801cea4:	d213      	bcs.n	801cece <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 801cea6:	4643      	mov	r3, r8
 801cea8:	4639      	mov	r1, r7
 801ceaa:	4620      	mov	r0, r4
 801ceac:	f7ff fdd8 	bl	801ca60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801ceb0:	6030      	str	r0, [r6, #0]
 801ceb2:	6833      	ldr	r3, [r6, #0]
 801ceb4:	b143      	cbz	r3, 801cec8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 801ceb6:	7b5a      	ldrb	r2, [r3, #13]
 801ceb8:	7a9b      	ldrb	r3, [r3, #10]
 801ceba:	0052      	lsls	r2, r2, #1
 801cebc:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801cec0:	4313      	orrs	r3, r2
 801cec2:	bf0c      	ite	eq
 801cec4:	2301      	moveq	r3, #1
 801cec6:	2300      	movne	r3, #0
 801cec8:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801cecc:	e7d9      	b.n	801ce82 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 801cece:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801ced2:	b29b      	uxth	r3, r3
 801ced4:	2b7f      	cmp	r3, #127	; 0x7f
 801ced6:	d804      	bhi.n	801cee2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 801ced8:	4639      	mov	r1, r7
 801ceda:	4620      	mov	r0, r4
 801cedc:	f7ff fca6 	bl	801c82c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801cee0:	e7e6      	b.n	801ceb0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801cee2:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801cee6:	2b00      	cmp	r3, #0
 801cee8:	d0e3      	beq.n	801ceb2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801ceea:	f640 1302 	movw	r3, #2306	; 0x902
 801ceee:	429d      	cmp	r5, r3
 801cef0:	d1df      	bne.n	801ceb2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801cef2:	4601      	mov	r1, r0
 801cef4:	4620      	mov	r0, r4
 801cef6:	f7ff fc69 	bl	801c7cc <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801cefa:	e7d9      	b.n	801ceb0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801cefc:	0802e83c 	.word	0x0802e83c
 801cf00:	0802eaae 	.word	0x0802eaae
 801cf04:	0802e845 	.word	0x0802e845

0801cf08 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801cf08:	b510      	push	{r4, lr}
 801cf0a:	4604      	mov	r4, r0
 801cf0c:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801cf10:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801cf12:	b9d9      	cbnz	r1, 801cf4c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x44>
 801cf14:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801cf16:	2b0a      	cmp	r3, #10
 801cf18:	d037      	beq.n	801cf8a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 801cf1a:	4620      	mov	r0, r4
 801cf1c:	f7ff fc15 	bl	801c74a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801cf20:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801cf22:	2b09      	cmp	r3, #9
 801cf24:	d906      	bls.n	801cf34 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 801cf26:	4b19      	ldr	r3, [pc, #100]	; (801cf8c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 801cf28:	f44f 7182 	mov.w	r1, #260	; 0x104
 801cf2c:	4a18      	ldr	r2, [pc, #96]	; (801cf90 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 801cf2e:	4819      	ldr	r0, [pc, #100]	; (801cf94 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8c>)
 801cf30:	f00d f858 	bl	8029fe4 <__assert_func>
 801cf34:	1c5a      	adds	r2, r3, #1
 801cf36:	8722      	strh	r2, [r4, #56]	; 0x38
 801cf38:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801cf3a:	4413      	add	r3, r2
 801cf3c:	b29b      	uxth	r3, r3
 801cf3e:	2b09      	cmp	r3, #9
 801cf40:	bf88      	it	hi
 801cf42:	3b0a      	subhi	r3, #10
 801cf44:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801cf48:	8458      	strh	r0, [r3, #34]	; 0x22
 801cf4a:	e7e3      	b.n	801cf14 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xc>
 801cf4c:	2b0a      	cmp	r3, #10
 801cf4e:	d01c      	beq.n	801cf8a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 801cf50:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801cf52:	3901      	subs	r1, #1
 801cf54:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801cf58:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801cf5a:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 801cf5e:	1c51      	adds	r1, r2, #1
 801cf60:	b289      	uxth	r1, r1
 801cf62:	2901      	cmp	r1, #1
 801cf64:	bf8a      	itet	hi
 801cf66:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801cf6a:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801cf6c:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 801cf6e:	2b09      	cmp	r3, #9
 801cf70:	d8d9      	bhi.n	801cf26 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1e>
 801cf72:	1c5a      	adds	r2, r3, #1
 801cf74:	8722      	strh	r2, [r4, #56]	; 0x38
 801cf76:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801cf78:	4413      	add	r3, r2
 801cf7a:	b29b      	uxth	r3, r3
 801cf7c:	2b09      	cmp	r3, #9
 801cf7e:	bf88      	it	hi
 801cf80:	3b0a      	subhi	r3, #10
 801cf82:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801cf86:	8458      	strh	r0, [r3, #34]	; 0x22
 801cf88:	e7c0      	b.n	801cf0c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801cf8a:	bd10      	pop	{r4, pc}
 801cf8c:	0802e871 	.word	0x0802e871
 801cf90:	0802ec04 	.word	0x0802ec04
 801cf94:	0802e845 	.word	0x0802e845

0801cf98 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801cf98:	b538      	push	{r3, r4, r5, lr}
 801cf9a:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801cf9c:	4604      	mov	r4, r0
 801cf9e:	b92a      	cbnz	r2, 801cfac <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801cfa0:	4b13      	ldr	r3, [pc, #76]	; (801cff0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801cfa2:	21d5      	movs	r1, #213	; 0xd5
 801cfa4:	4a13      	ldr	r2, [pc, #76]	; (801cff4 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801cfa6:	4814      	ldr	r0, [pc, #80]	; (801cff8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 801cfa8:	f00d f81c 	bl	8029fe4 <__assert_func>
 801cfac:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801cfae:	3a01      	subs	r2, #1
 801cfb0:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801cfb4:	8c4d      	ldrh	r5, [r1, #34]	; 0x22
 801cfb6:	8702      	strh	r2, [r0, #56]	; 0x38
 801cfb8:	1c5a      	adds	r2, r3, #1
 801cfba:	b292      	uxth	r2, r2
 801cfbc:	2a09      	cmp	r2, #9
 801cfbe:	bf8a      	itet	hi
 801cfc0:	3b09      	subhi	r3, #9
 801cfc2:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801cfc4:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801cfc6:	f7ff ff9f 	bl	801cf08 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801cfca:	8c23      	ldrh	r3, [r4, #32]
 801cfcc:	2b01      	cmp	r3, #1
 801cfce:	bf9c      	itt	ls
 801cfd0:	3301      	addls	r3, #1
 801cfd2:	8423      	strhls	r3, [r4, #32]
 801cfd4:	8be3      	ldrh	r3, [r4, #30]
 801cfd6:	b90b      	cbnz	r3, 801cfdc <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 801cfd8:	2302      	movs	r3, #2
 801cfda:	83e3      	strh	r3, [r4, #30]
 801cfdc:	8be3      	ldrh	r3, [r4, #30]
 801cfde:	4628      	mov	r0, r5
 801cfe0:	3b01      	subs	r3, #1
 801cfe2:	b29b      	uxth	r3, r3
 801cfe4:	83e3      	strh	r3, [r4, #30]
 801cfe6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801cfea:	8365      	strh	r5, [r4, #26]
 801cfec:	bd38      	pop	{r3, r4, r5, pc}
 801cfee:	bf00      	nop
 801cff0:	0802e83c 	.word	0x0802e83c
 801cff4:	0802eb59 	.word	0x0802eb59
 801cff8:	0802e845 	.word	0x0802e845

0801cffc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801cffc:	428a      	cmp	r2, r1
 801cffe:	b538      	push	{r3, r4, r5, lr}
 801d000:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801d002:	d90c      	bls.n	801d01e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 801d004:	b92c      	cbnz	r4, 801d012 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 801d006:	4b1c      	ldr	r3, [pc, #112]	; (801d078 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 801d008:	21e1      	movs	r1, #225	; 0xe1
 801d00a:	4a1c      	ldr	r2, [pc, #112]	; (801d07c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 801d00c:	481c      	ldr	r0, [pc, #112]	; (801d080 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 801d00e:	f00c ffe9 	bl	8029fe4 <__assert_func>
 801d012:	3c01      	subs	r4, #1
 801d014:	4b1b      	ldr	r3, [pc, #108]	; (801d084 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 801d016:	4a1c      	ldr	r2, [pc, #112]	; (801d088 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 801d018:	21c5      	movs	r1, #197	; 0xc5
 801d01a:	8704      	strh	r4, [r0, #56]	; 0x38
 801d01c:	e7f6      	b.n	801d00c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801d01e:	428c      	cmp	r4, r1
 801d020:	d203      	bcs.n	801d02a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 801d022:	4b1a      	ldr	r3, [pc, #104]	; (801d08c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 801d024:	21cb      	movs	r1, #203	; 0xcb
 801d026:	4a1a      	ldr	r2, [pc, #104]	; (801d090 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 801d028:	e7f0      	b.n	801d00c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801d02a:	1a64      	subs	r4, r4, r1
 801d02c:	250a      	movs	r5, #10
 801d02e:	8704      	strh	r4, [r0, #56]	; 0x38
 801d030:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
 801d032:	4421      	add	r1, r4
 801d034:	b289      	uxth	r1, r1
 801d036:	2909      	cmp	r1, #9
 801d038:	bf88      	it	hi
 801d03a:	390a      	subhi	r1, #10
 801d03c:	86c1      	strh	r1, [r0, #54]	; 0x36
 801d03e:	b1ba      	cbz	r2, 801d070 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 801d040:	3a01      	subs	r2, #1
 801d042:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 801d044:	b292      	uxth	r2, r2
 801d046:	2909      	cmp	r1, #9
 801d048:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801d04c:	d903      	bls.n	801d056 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 801d04e:	4b11      	ldr	r3, [pc, #68]	; (801d094 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 801d050:	21e6      	movs	r1, #230	; 0xe6
 801d052:	4a11      	ldr	r2, [pc, #68]	; (801d098 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 801d054:	e7da      	b.n	801d00c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801d056:	3101      	adds	r1, #1
 801d058:	8701      	strh	r1, [r0, #56]	; 0x38
 801d05a:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801d05c:	b901      	cbnz	r1, 801d060 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 801d05e:	86c5      	strh	r5, [r0, #54]	; 0x36
 801d060:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801d062:	3901      	subs	r1, #1
 801d064:	b289      	uxth	r1, r1
 801d066:	86c1      	strh	r1, [r0, #54]	; 0x36
 801d068:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801d06c:	844c      	strh	r4, [r1, #34]	; 0x22
 801d06e:	e7e6      	b.n	801d03e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 801d070:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d074:	f7ff bf48 	b.w	801cf08 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801d078:	0802e83c 	.word	0x0802e83c
 801d07c:	0802e932 	.word	0x0802e932
 801d080:	0802e845 	.word	0x0802e845
 801d084:	0802e87d 	.word	0x0802e87d
 801d088:	0802e9dc 	.word	0x0802e9dc
 801d08c:	0802e88b 	.word	0x0802e88b
 801d090:	0802ecb3 	.word	0x0802ecb3
 801d094:	0802e897 	.word	0x0802e897
 801d098:	0802e8aa 	.word	0x0802e8aa

0801d09c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801d09c:	3a01      	subs	r2, #1
 801d09e:	b570      	push	{r4, r5, r6, lr}
 801d0a0:	b292      	uxth	r2, r2
 801d0a2:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801d0a6:	42b2      	cmp	r2, r6
 801d0a8:	d019      	beq.n	801d0de <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 801d0aa:	8c04      	ldrh	r4, [r0, #32]
 801d0ac:	f831 5b02 	ldrh.w	r5, [r1], #2
 801d0b0:	4294      	cmp	r4, r2
 801d0b2:	d805      	bhi.n	801d0c0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 801d0b4:	4b19      	ldr	r3, [pc, #100]	; (801d11c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801d0b6:	4a1a      	ldr	r2, [pc, #104]	; (801d120 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 801d0b8:	21c5      	movs	r1, #197	; 0xc5
 801d0ba:	481a      	ldr	r0, [pc, #104]	; (801d124 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 801d0bc:	f00c ff92 	bl	8029fe4 <__assert_func>
 801d0c0:	8bc4      	ldrh	r4, [r0, #30]
 801d0c2:	4414      	add	r4, r2
 801d0c4:	3a01      	subs	r2, #1
 801d0c6:	b2a4      	uxth	r4, r4
 801d0c8:	b292      	uxth	r2, r2
 801d0ca:	2c01      	cmp	r4, #1
 801d0cc:	bf88      	it	hi
 801d0ce:	3c02      	subhi	r4, #2
 801d0d0:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801d0d4:	8b64      	ldrh	r4, [r4, #26]
 801d0d6:	42ac      	cmp	r4, r5
 801d0d8:	d0e5      	beq.n	801d0a6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 801d0da:	2000      	movs	r0, #0
 801d0dc:	bd70      	pop	{r4, r5, r6, pc}
 801d0de:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801d0e2:	2400      	movs	r4, #0
 801d0e4:	4413      	add	r3, r2
 801d0e6:	b2a2      	uxth	r2, r4
 801d0e8:	429a      	cmp	r2, r3
 801d0ea:	da14      	bge.n	801d116 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 801d0ec:	8f06      	ldrh	r6, [r0, #56]	; 0x38
 801d0ee:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801d0f2:	4296      	cmp	r6, r2
 801d0f4:	d802      	bhi.n	801d0fc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 801d0f6:	4b09      	ldr	r3, [pc, #36]	; (801d11c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801d0f8:	4a0b      	ldr	r2, [pc, #44]	; (801d128 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 801d0fa:	e7dd      	b.n	801d0b8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 801d0fc:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801d0fe:	3401      	adds	r4, #1
 801d100:	4432      	add	r2, r6
 801d102:	b292      	uxth	r2, r2
 801d104:	2a09      	cmp	r2, #9
 801d106:	bf88      	it	hi
 801d108:	3a0a      	subhi	r2, #10
 801d10a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801d10e:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801d110:	42aa      	cmp	r2, r5
 801d112:	d0e8      	beq.n	801d0e6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 801d114:	e7e1      	b.n	801d0da <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801d116:	2001      	movs	r0, #1
 801d118:	e7e0      	b.n	801d0dc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801d11a:	bf00      	nop
 801d11c:	0802e87d 	.word	0x0802e87d
 801d120:	0802ed37 	.word	0x0802ed37
 801d124:	0802e845 	.word	0x0802e845
 801d128:	0802e9dc 	.word	0x0802e9dc

0801d12c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801d12c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d130:	4605      	mov	r5, r0
 801d132:	4616      	mov	r6, r2
 801d134:	1c8c      	adds	r4, r1, #2
 801d136:	8809      	ldrh	r1, [r1, #0]
 801d138:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801d13c:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801d140:	42b3      	cmp	r3, r6
 801d142:	d124      	bne.n	801d18e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801d144:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801d148:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801d14c:	f001 070f 	and.w	r7, r1, #15
 801d150:	4652      	mov	r2, sl
 801d152:	f8cd 8000 	str.w	r8, [sp]
 801d156:	464b      	mov	r3, r9
 801d158:	4621      	mov	r1, r4
 801d15a:	4628      	mov	r0, r5
 801d15c:	f7ff ff9e 	bl	801d09c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801d160:	4683      	mov	fp, r0
 801d162:	b168      	cbz	r0, 801d180 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801d164:	eb0a 0109 	add.w	r1, sl, r9
 801d168:	463a      	mov	r2, r7
 801d16a:	4628      	mov	r0, r5
 801d16c:	4441      	add	r1, r8
 801d16e:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801d172:	4649      	mov	r1, r9
 801d174:	f7ff ff42 	bl	801cffc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801d178:	4658      	mov	r0, fp
 801d17a:	b003      	add	sp, #12
 801d17c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d180:	eb07 010a 	add.w	r1, r7, sl
 801d184:	4449      	add	r1, r9
 801d186:	4441      	add	r1, r8
 801d188:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801d18c:	e7d2      	b.n	801d134 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801d18e:	f04f 0b00 	mov.w	fp, #0
 801d192:	e7f1      	b.n	801d178 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801d194 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801d194:	b570      	push	{r4, r5, r6, lr}
 801d196:	8810      	ldrh	r0, [r2, #0]
 801d198:	4298      	cmp	r0, r3
 801d19a:	d817      	bhi.n	801d1cc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801d19c:	1e48      	subs	r0, r1, #1
 801d19e:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801d1a2:	4298      	cmp	r0, r3
 801d1a4:	d312      	bcc.n	801d1cc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801d1a6:	2400      	movs	r4, #0
 801d1a8:	428c      	cmp	r4, r1
 801d1aa:	d20f      	bcs.n	801d1cc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801d1ac:	1860      	adds	r0, r4, r1
 801d1ae:	1040      	asrs	r0, r0, #1
 801d1b0:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801d1b4:	0085      	lsls	r5, r0, #2
 801d1b6:	42b3      	cmp	r3, r6
 801d1b8:	d902      	bls.n	801d1c0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801d1ba:	3001      	adds	r0, #1
 801d1bc:	b284      	uxth	r4, r0
 801d1be:	e7f3      	b.n	801d1a8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801d1c0:	d201      	bcs.n	801d1c6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801d1c2:	b281      	uxth	r1, r0
 801d1c4:	e7f0      	b.n	801d1a8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801d1c6:	442a      	add	r2, r5
 801d1c8:	8850      	ldrh	r0, [r2, #2]
 801d1ca:	bd70      	pop	{r4, r5, r6, pc}
 801d1cc:	2000      	movs	r0, #0
 801d1ce:	e7fc      	b.n	801d1ca <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801d1d0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801d1d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d1d4:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801d1d6:	4604      	mov	r4, r0
 801d1d8:	260b      	movs	r6, #11
 801d1da:	886f      	ldrh	r7, [r5, #2]
 801d1dc:	087f      	lsrs	r7, r7, #1
 801d1de:	3e01      	subs	r6, #1
 801d1e0:	d01b      	beq.n	801d21a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801d1e2:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801d1e4:	b92b      	cbnz	r3, 801d1f2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 801d1e6:	4b0e      	ldr	r3, [pc, #56]	; (801d220 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 801d1e8:	21c0      	movs	r1, #192	; 0xc0
 801d1ea:	4a0e      	ldr	r2, [pc, #56]	; (801d224 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 801d1ec:	480e      	ldr	r0, [pc, #56]	; (801d228 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 801d1ee:	f00c fef9 	bl	8029fe4 <__assert_func>
 801d1f2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801d1f4:	462a      	mov	r2, r5
 801d1f6:	4639      	mov	r1, r7
 801d1f8:	4620      	mov	r0, r4
 801d1fa:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d1fe:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801d202:	4643      	mov	r3, r8
 801d204:	f7ff ffc6 	bl	801d194 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801d208:	b138      	cbz	r0, 801d21a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801d20a:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801d20e:	4642      	mov	r2, r8
 801d210:	4620      	mov	r0, r4
 801d212:	f7ff ff8b 	bl	801d12c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801d216:	2800      	cmp	r0, #0
 801d218:	d1e1      	bne.n	801d1de <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801d21a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d21e:	bf00      	nop
 801d220:	0802e83c 	.word	0x0802e83c
 801d224:	0802eaae 	.word	0x0802eaae
 801d228:	0802e845 	.word	0x0802e845

0801d22c <_ZN8touchgfx8ceil28_4El>:
 801d22c:	f110 030f 	adds.w	r3, r0, #15
 801d230:	d401      	bmi.n	801d236 <_ZN8touchgfx8ceil28_4El+0xa>
 801d232:	1118      	asrs	r0, r3, #4
 801d234:	4770      	bx	lr
 801d236:	2210      	movs	r2, #16
 801d238:	f1c0 0001 	rsb	r0, r0, #1
 801d23c:	fb93 f3f2 	sdiv	r3, r3, r2
 801d240:	f010 000f 	ands.w	r0, r0, #15
 801d244:	bf18      	it	ne
 801d246:	2001      	movne	r0, #1
 801d248:	1a18      	subs	r0, r3, r0
 801d24a:	4770      	bx	lr

0801d24c <_ZN8touchgfx11floorDivModEllRlS0_>:
 801d24c:	2900      	cmp	r1, #0
 801d24e:	b538      	push	{r3, r4, r5, lr}
 801d250:	dc05      	bgt.n	801d25e <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 801d252:	4b0f      	ldr	r3, [pc, #60]	; (801d290 <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 801d254:	21f7      	movs	r1, #247	; 0xf7
 801d256:	4a0f      	ldr	r2, [pc, #60]	; (801d294 <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 801d258:	480f      	ldr	r0, [pc, #60]	; (801d298 <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 801d25a:	f00c fec3 	bl	8029fe4 <__assert_func>
 801d25e:	2800      	cmp	r0, #0
 801d260:	db06      	blt.n	801d270 <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 801d262:	fb90 f4f1 	sdiv	r4, r0, r1
 801d266:	fb01 0114 	mls	r1, r1, r4, r0
 801d26a:	6014      	str	r4, [r2, #0]
 801d26c:	6019      	str	r1, [r3, #0]
 801d26e:	bd38      	pop	{r3, r4, r5, pc}
 801d270:	4240      	negs	r0, r0
 801d272:	fb90 f4f1 	sdiv	r4, r0, r1
 801d276:	4265      	negs	r5, r4
 801d278:	fb01 0014 	mls	r0, r1, r4, r0
 801d27c:	6015      	str	r5, [r2, #0]
 801d27e:	6018      	str	r0, [r3, #0]
 801d280:	2800      	cmp	r0, #0
 801d282:	d0f4      	beq.n	801d26e <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 801d284:	6810      	ldr	r0, [r2, #0]
 801d286:	3801      	subs	r0, #1
 801d288:	6010      	str	r0, [r2, #0]
 801d28a:	6818      	ldr	r0, [r3, #0]
 801d28c:	1a09      	subs	r1, r1, r0
 801d28e:	e7ed      	b.n	801d26c <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 801d290:	0802ee08 	.word	0x0802ee08
 801d294:	0802ee47 	.word	0x0802ee47
 801d298:	0802ee18 	.word	0x0802ee18

0801d29c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801d29c:	b570      	push	{r4, r5, r6, lr}
 801d29e:	694a      	ldr	r2, [r1, #20]
 801d2a0:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801d2a2:	684b      	ldr	r3, [r1, #4]
 801d2a4:	1b54      	subs	r4, r2, r5
 801d2a6:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801d2a8:	f000 8106 	beq.w	801d4b8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801d2ac:	1b9b      	subs	r3, r3, r6
 801d2ae:	d003      	beq.n	801d2b8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801d2b0:	4363      	muls	r3, r4
 801d2b2:	2210      	movs	r2, #16
 801d2b4:	fb93 f3f2 	sdiv	r3, r3, r2
 801d2b8:	680c      	ldr	r4, [r1, #0]
 801d2ba:	698a      	ldr	r2, [r1, #24]
 801d2bc:	1b65      	subs	r5, r4, r5
 801d2be:	f000 80fd 	beq.w	801d4bc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801d2c2:	1b92      	subs	r2, r2, r6
 801d2c4:	d003      	beq.n	801d2ce <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801d2c6:	436a      	muls	r2, r5
 801d2c8:	2410      	movs	r4, #16
 801d2ca:	fb92 f2f4 	sdiv	r2, r2, r4
 801d2ce:	1a9b      	subs	r3, r3, r2
 801d2d0:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801d4f8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801d2d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d2d8:	460a      	mov	r2, r1
 801d2da:	ee07 3a90 	vmov	s15, r3
 801d2de:	f100 040c 	add.w	r4, r0, #12
 801d2e2:	4603      	mov	r3, r0
 801d2e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d2e8:	ee67 7a84 	vmul.f32	s15, s15, s8
 801d2ec:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801d2f0:	eeb1 6a43 	vneg.f32	s12, s6
 801d2f4:	edd2 7a02 	vldr	s15, [r2, #8]
 801d2f8:	3214      	adds	r2, #20
 801d2fa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801d2fe:	ece3 6a01 	vstmia	r3!, {s13}
 801d302:	429c      	cmp	r4, r3
 801d304:	ed52 7a02 	vldr	s15, [r2, #-8]
 801d308:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d30c:	edc3 7a02 	vstr	s15, [r3, #8]
 801d310:	ed52 7a01 	vldr	s15, [r2, #-4]
 801d314:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d318:	edc3 7a05 	vstr	s15, [r3, #20]
 801d31c:	d1ea      	bne.n	801d2f4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801d31e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801d320:	698b      	ldr	r3, [r1, #24]
 801d322:	edd0 4a02 	vldr	s9, [r0, #8]
 801d326:	1a9b      	subs	r3, r3, r2
 801d328:	edd0 3a00 	vldr	s7, [r0]
 801d32c:	edd0 6a01 	vldr	s13, [r0, #4]
 801d330:	ee07 3a90 	vmov	s15, r3
 801d334:	684b      	ldr	r3, [r1, #4]
 801d336:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801d33a:	ed90 5a05 	vldr	s10, [r0, #20]
 801d33e:	1a9b      	subs	r3, r3, r2
 801d340:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d344:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801d348:	ed90 2a03 	vldr	s4, [r0, #12]
 801d34c:	ee07 3a10 	vmov	s14, r3
 801d350:	edd0 5a04 	vldr	s11, [r0, #16]
 801d354:	ee67 7a84 	vmul.f32	s15, s15, s8
 801d358:	ed90 1a07 	vldr	s2, [r0, #28]
 801d35c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d360:	edd0 2a06 	vldr	s5, [r0, #24]
 801d364:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801d368:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801d36c:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d370:	ee32 5a45 	vsub.f32	s10, s4, s10
 801d374:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d378:	ee67 7a83 	vmul.f32	s15, s15, s6
 801d37c:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801d380:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801d382:	694a      	ldr	r2, [r1, #20]
 801d384:	1b13      	subs	r3, r2, r4
 801d386:	ee07 3a10 	vmov	s14, r3
 801d38a:	680b      	ldr	r3, [r1, #0]
 801d38c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d390:	1b1b      	subs	r3, r3, r4
 801d392:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d396:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801d39a:	ee07 3a10 	vmov	s14, r3
 801d39e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d3a2:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d3a6:	eee6 4a87 	vfma.f32	s9, s13, s14
 801d3aa:	ee64 4a86 	vmul.f32	s9, s9, s12
 801d3ae:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801d3b2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801d3b4:	698b      	ldr	r3, [r1, #24]
 801d3b6:	1a9b      	subs	r3, r3, r2
 801d3b8:	ee06 3a90 	vmov	s13, r3
 801d3bc:	684b      	ldr	r3, [r1, #4]
 801d3be:	1a9b      	subs	r3, r3, r2
 801d3c0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801d3c4:	ee07 3a10 	vmov	s14, r3
 801d3c8:	ee66 6a84 	vmul.f32	s13, s13, s8
 801d3cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d3d0:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801d3d4:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d3d8:	eee5 6a87 	vfma.f32	s13, s11, s14
 801d3dc:	ee66 6a83 	vmul.f32	s13, s13, s6
 801d3e0:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801d3e4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801d3e6:	694a      	ldr	r2, [r1, #20]
 801d3e8:	1b13      	subs	r3, r2, r4
 801d3ea:	ee07 3a10 	vmov	s14, r3
 801d3ee:	680b      	ldr	r3, [r1, #0]
 801d3f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d3f4:	1b1b      	subs	r3, r3, r4
 801d3f6:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d3fa:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801d3fe:	ee07 3a10 	vmov	s14, r3
 801d402:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d406:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d40a:	eea5 5a87 	vfma.f32	s10, s11, s14
 801d40e:	edd0 5a08 	vldr	s11, [r0, #32]
 801d412:	ee31 1a65 	vsub.f32	s2, s2, s11
 801d416:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801d41a:	ee25 5a06 	vmul.f32	s10, s10, s12
 801d41e:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801d422:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801d424:	698b      	ldr	r3, [r1, #24]
 801d426:	1a9b      	subs	r3, r3, r2
 801d428:	ee07 3a10 	vmov	s14, r3
 801d42c:	684b      	ldr	r3, [r1, #4]
 801d42e:	1a9b      	subs	r3, r3, r2
 801d430:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d434:	ee01 3a90 	vmov	s3, r3
 801d438:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d43c:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801d440:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801d444:	ee61 1a84 	vmul.f32	s3, s3, s8
 801d448:	eea1 7a21 	vfma.f32	s14, s2, s3
 801d44c:	ee27 7a03 	vmul.f32	s14, s14, s6
 801d450:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801d454:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801d456:	694a      	ldr	r2, [r1, #20]
 801d458:	1b13      	subs	r3, r2, r4
 801d45a:	ee03 3a10 	vmov	s6, r3
 801d45e:	680b      	ldr	r3, [r1, #0]
 801d460:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801d464:	1b1b      	subs	r3, r3, r4
 801d466:	ee23 3a04 	vmul.f32	s6, s6, s8
 801d46a:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801d46e:	ee03 3a10 	vmov	s6, r3
 801d472:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801d476:	ee23 4a04 	vmul.f32	s8, s6, s8
 801d47a:	eee1 5a04 	vfma.f32	s11, s2, s8
 801d47e:	ee25 6a86 	vmul.f32	s12, s11, s12
 801d482:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801d486:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801d48a:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801d48e:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801d492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d496:	dd13      	ble.n	801d4c0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801d498:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801d49c:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801d4a0:	63c3      	str	r3, [r0, #60]	; 0x3c
 801d4a2:	eee3 7a87 	vfma.f32	s15, s7, s14
 801d4a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d4aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d4ae:	dd15      	ble.n	801d4dc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801d4b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801d4b4:	6403      	str	r3, [r0, #64]	; 0x40
 801d4b6:	bd70      	pop	{r4, r5, r6, pc}
 801d4b8:	4623      	mov	r3, r4
 801d4ba:	e6fd      	b.n	801d2b8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801d4bc:	462a      	mov	r2, r5
 801d4be:	e706      	b.n	801d2ce <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801d4c0:	d502      	bpl.n	801d4c8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801d4c2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801d4c6:	e7e9      	b.n	801d49c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801d4c8:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801d4cc:	eea3 2a85 	vfma.f32	s4, s7, s10
 801d4d0:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801d4d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d4d8:	dade      	bge.n	801d498 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801d4da:	e7f2      	b.n	801d4c2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801d4dc:	d502      	bpl.n	801d4e4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801d4de:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801d4e2:	e7e7      	b.n	801d4b4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801d4e4:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801d4e8:	eee3 4a86 	vfma.f32	s9, s7, s12
 801d4ec:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801d4f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d4f4:	dadc      	bge.n	801d4b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801d4f6:	e7f2      	b.n	801d4de <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801d4f8:	3d800000 	.word	0x3d800000

0801d4fc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801d4fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d500:	f04f 0814 	mov.w	r8, #20
 801d504:	4604      	mov	r4, r0
 801d506:	4617      	mov	r7, r2
 801d508:	460d      	mov	r5, r1
 801d50a:	fb08 f903 	mul.w	r9, r8, r3
 801d50e:	461e      	mov	r6, r3
 801d510:	eb02 0a09 	add.w	sl, r2, r9
 801d514:	f8da 0004 	ldr.w	r0, [sl, #4]
 801d518:	f7ff fe88 	bl	801d22c <_ZN8touchgfx8ceil28_4El>
 801d51c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d51e:	6160      	str	r0, [r4, #20]
 801d520:	fb08 f803 	mul.w	r8, r8, r3
 801d524:	9001      	str	r0, [sp, #4]
 801d526:	eb07 0b08 	add.w	fp, r7, r8
 801d52a:	f8db 0004 	ldr.w	r0, [fp, #4]
 801d52e:	f7ff fe7d 	bl	801d22c <_ZN8touchgfx8ceil28_4El>
 801d532:	9a01      	ldr	r2, [sp, #4]
 801d534:	1a80      	subs	r0, r0, r2
 801d536:	61a0      	str	r0, [r4, #24]
 801d538:	2800      	cmp	r0, #0
 801d53a:	f000 8088 	beq.w	801d64e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 801d53e:	f857 3009 	ldr.w	r3, [r7, r9]
 801d542:	f857 c008 	ldr.w	ip, [r7, r8]
 801d546:	f8db 0004 	ldr.w	r0, [fp, #4]
 801d54a:	ebac 0c03 	sub.w	ip, ip, r3
 801d54e:	f8da 1004 	ldr.w	r1, [sl, #4]
 801d552:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 801d556:	1a40      	subs	r0, r0, r1
 801d558:	fb0b f202 	mul.w	r2, fp, r2
 801d55c:	ea4f 1800 	mov.w	r8, r0, lsl #4
 801d560:	fb0c 2211 	mls	r2, ip, r1, r2
 801d564:	4641      	mov	r1, r8
 801d566:	fb00 2003 	mla	r0, r0, r3, r2
 801d56a:	f104 0310 	add.w	r3, r4, #16
 801d56e:	4622      	mov	r2, r4
 801d570:	3801      	subs	r0, #1
 801d572:	4440      	add	r0, r8
 801d574:	f7ff fe6a 	bl	801d24c <_ZN8touchgfx11floorDivModEllRlS0_>
 801d578:	f104 0308 	add.w	r3, r4, #8
 801d57c:	1d22      	adds	r2, r4, #4
 801d57e:	4641      	mov	r1, r8
 801d580:	4658      	mov	r0, fp
 801d582:	f7ff fe63 	bl	801d24c <_ZN8touchgfx11floorDivModEllRlS0_>
 801d586:	f8c4 800c 	str.w	r8, [r4, #12]
 801d58a:	6962      	ldr	r2, [r4, #20]
 801d58c:	f8da 3004 	ldr.w	r3, [sl, #4]
 801d590:	eddf 6a31 	vldr	s13, [pc, #196]	; 801d658 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801d594:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801d598:	6822      	ldr	r2, [r4, #0]
 801d59a:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801d59e:	ee07 3a10 	vmov	s14, r3
 801d5a2:	f857 3009 	ldr.w	r3, [r7, r9]
 801d5a6:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801d5aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d5ae:	ee07 3a90 	vmov	s15, r3
 801d5b2:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 801d5b6:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d5ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d5be:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d5c2:	edd3 6a00 	vldr	s13, [r3]
 801d5c6:	eee6 6a07 	vfma.f32	s13, s12, s14
 801d5ca:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801d5ce:	eee6 6a27 	vfma.f32	s13, s12, s15
 801d5d2:	edc4 6a07 	vstr	s13, [r4, #28]
 801d5d6:	edd4 6a01 	vldr	s13, [r4, #4]
 801d5da:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 801d5de:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801d5e2:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801d5e6:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801d5ea:	ed84 6a08 	vstr	s12, [r4, #32]
 801d5ee:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801d5f0:	6262      	str	r2, [r4, #36]	; 0x24
 801d5f2:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 801d5f6:	ed93 6a03 	vldr	s12, [r3, #12]
 801d5fa:	eea5 6a87 	vfma.f32	s12, s11, s14
 801d5fe:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801d602:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801d606:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 801d60a:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801d60e:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 801d612:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801d616:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 801d61a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 801d61c:	6322      	str	r2, [r4, #48]	; 0x30
 801d61e:	ed93 6a06 	vldr	s12, [r3, #24]
 801d622:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 801d626:	eea5 6a87 	vfma.f32	s12, s11, s14
 801d62a:	eeb0 7a46 	vmov.f32	s14, s12
 801d62e:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 801d632:	eea6 7a27 	vfma.f32	s14, s12, s15
 801d636:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 801d63a:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 801d63e:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 801d642:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d646:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 801d64a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801d64c:	63e3      	str	r3, [r4, #60]	; 0x3c
 801d64e:	4620      	mov	r0, r4
 801d650:	b003      	add	sp, #12
 801d652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d656:	bf00      	nop
 801d658:	3d800000 	.word	0x3d800000

0801d65c <_ZN8touchgfx7Unicode6strlenEPKt>:
 801d65c:	4602      	mov	r2, r0
 801d65e:	b148      	cbz	r0, 801d674 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801d660:	2300      	movs	r3, #0
 801d662:	b298      	uxth	r0, r3
 801d664:	3301      	adds	r3, #1
 801d666:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801d66a:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801d66e:	2900      	cmp	r1, #0
 801d670:	d1f7      	bne.n	801d662 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801d672:	4770      	bx	lr
 801d674:	4770      	bx	lr

0801d676 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801d676:	b530      	push	{r4, r5, lr}
 801d678:	4604      	mov	r4, r0
 801d67a:	b159      	cbz	r1, 801d694 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801d67c:	b148      	cbz	r0, 801d692 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801d67e:	2300      	movs	r3, #0
 801d680:	b298      	uxth	r0, r3
 801d682:	4282      	cmp	r2, r0
 801d684:	d905      	bls.n	801d692 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801d686:	5ccd      	ldrb	r5, [r1, r3]
 801d688:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801d68c:	3301      	adds	r3, #1
 801d68e:	2d00      	cmp	r5, #0
 801d690:	d1f6      	bne.n	801d680 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801d692:	bd30      	pop	{r4, r5, pc}
 801d694:	4608      	mov	r0, r1
 801d696:	e7fc      	b.n	801d692 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801d698 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 801d698:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d69a:	468c      	mov	ip, r1
 801d69c:	b08b      	sub	sp, #44	; 0x2c
 801d69e:	2100      	movs	r1, #0
 801d6a0:	ae01      	add	r6, sp, #4
 801d6a2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801d6a6:	211f      	movs	r1, #31
 801d6a8:	fbb0 f7f3 	udiv	r7, r0, r3
 801d6ac:	fb03 0517 	mls	r5, r3, r7, r0
 801d6b0:	4638      	mov	r0, r7
 801d6b2:	b2ec      	uxtb	r4, r5
 801d6b4:	2d09      	cmp	r5, #9
 801d6b6:	bfd4      	ite	le
 801d6b8:	3430      	addle	r4, #48	; 0x30
 801d6ba:	3457      	addgt	r4, #87	; 0x57
 801d6bc:	b2e4      	uxtb	r4, r4
 801d6be:	558c      	strb	r4, [r1, r6]
 801d6c0:	1e4c      	subs	r4, r1, #1
 801d6c2:	b92f      	cbnz	r7, 801d6d0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 801d6c4:	4431      	add	r1, r6
 801d6c6:	4660      	mov	r0, ip
 801d6c8:	f7ff ffd5 	bl	801d676 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801d6cc:	b00b      	add	sp, #44	; 0x2c
 801d6ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d6d0:	4621      	mov	r1, r4
 801d6d2:	e7e9      	b.n	801d6a8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

0801d6d4 <_ZN8touchgfx7Unicode4itoaElPtti>:
 801d6d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d6d6:	4607      	mov	r7, r0
 801d6d8:	b08b      	sub	sp, #44	; 0x2c
 801d6da:	4608      	mov	r0, r1
 801d6dc:	b341      	cbz	r1, 801d730 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801d6de:	1e99      	subs	r1, r3, #2
 801d6e0:	2922      	cmp	r1, #34	; 0x22
 801d6e2:	d825      	bhi.n	801d730 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801d6e4:	2100      	movs	r1, #0
 801d6e6:	463c      	mov	r4, r7
 801d6e8:	261f      	movs	r6, #31
 801d6ea:	f10d 0c04 	add.w	ip, sp, #4
 801d6ee:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801d6f2:	1e71      	subs	r1, r6, #1
 801d6f4:	fb94 fef3 	sdiv	lr, r4, r3
 801d6f8:	fb03 441e 	mls	r4, r3, lr, r4
 801d6fc:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801d700:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801d704:	b2ec      	uxtb	r4, r5
 801d706:	2d09      	cmp	r5, #9
 801d708:	bfd4      	ite	le
 801d70a:	3430      	addle	r4, #48	; 0x30
 801d70c:	3457      	addgt	r4, #87	; 0x57
 801d70e:	b2e4      	uxtb	r4, r4
 801d710:	f80c 4006 	strb.w	r4, [ip, r6]
 801d714:	4674      	mov	r4, lr
 801d716:	b96c      	cbnz	r4, 801d734 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801d718:	2f00      	cmp	r7, #0
 801d71a:	da05      	bge.n	801d728 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801d71c:	ab0a      	add	r3, sp, #40	; 0x28
 801d71e:	4419      	add	r1, r3
 801d720:	232d      	movs	r3, #45	; 0x2d
 801d722:	f801 3c24 	strb.w	r3, [r1, #-36]
 801d726:	1eb1      	subs	r1, r6, #2
 801d728:	3101      	adds	r1, #1
 801d72a:	4461      	add	r1, ip
 801d72c:	f7ff ffa3 	bl	801d676 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801d730:	b00b      	add	sp, #44	; 0x2c
 801d732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d734:	460e      	mov	r6, r1
 801d736:	e7dc      	b.n	801d6f2 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801d738 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801d738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d73c:	b085      	sub	sp, #20
 801d73e:	4691      	mov	r9, r2
 801d740:	6802      	ldr	r2, [r0, #0]
 801d742:	4688      	mov	r8, r1
 801d744:	461c      	mov	r4, r3
 801d746:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801d74a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801d74e:	4683      	mov	fp, r0
 801d750:	4610      	mov	r0, r2
 801d752:	9103      	str	r1, [sp, #12]
 801d754:	9302      	str	r3, [sp, #8]
 801d756:	9201      	str	r2, [sp, #4]
 801d758:	f7ff ff80 	bl	801d65c <_ZN8touchgfx7Unicode6strlenEPKt>
 801d75c:	f1b8 0f00 	cmp.w	r8, #0
 801d760:	bf0c      	ite	eq
 801d762:	4684      	moveq	ip, r0
 801d764:	f100 0c01 	addne.w	ip, r0, #1
 801d768:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 801d76c:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801d770:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801d772:	fa1f fc8c 	uxth.w	ip, ip
 801d776:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801d778:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 801d77c:	9903      	ldr	r1, [sp, #12]
 801d77e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801d782:	d041      	beq.n	801d808 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801d784:	d834      	bhi.n	801d7f0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801d786:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 801d78a:	d059      	beq.n	801d840 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801d78c:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 801d790:	d03a      	beq.n	801d808 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801d792:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 801d796:	d034      	beq.n	801d802 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801d798:	2400      	movs	r4, #0
 801d79a:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801d79e:	3a01      	subs	r2, #1
 801d7a0:	b169      	cbz	r1, 801d7be <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801d7a2:	9911      	ldr	r1, [sp, #68]	; 0x44
 801d7a4:	458c      	cmp	ip, r1
 801d7a6:	da09      	bge.n	801d7bc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801d7a8:	eba1 010c 	sub.w	r1, r1, ip
 801d7ac:	b289      	uxth	r1, r1
 801d7ae:	b933      	cbnz	r3, 801d7be <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801d7b0:	2e00      	cmp	r6, #0
 801d7b2:	d051      	beq.n	801d858 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801d7b4:	2800      	cmp	r0, #0
 801d7b6:	d04f      	beq.n	801d858 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801d7b8:	440c      	add	r4, r1
 801d7ba:	b2a4      	uxth	r4, r4
 801d7bc:	2100      	movs	r1, #0
 801d7be:	682b      	ldr	r3, [r5, #0]
 801d7c0:	4293      	cmp	r3, r2
 801d7c2:	da07      	bge.n	801d7d4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801d7c4:	f1b8 0f00 	cmp.w	r8, #0
 801d7c8:	d004      	beq.n	801d7d4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801d7ca:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801d7ce:	682b      	ldr	r3, [r5, #0]
 801d7d0:	3301      	adds	r3, #1
 801d7d2:	602b      	str	r3, [r5, #0]
 801d7d4:	2730      	movs	r7, #48	; 0x30
 801d7d6:	2c00      	cmp	r4, #0
 801d7d8:	d04e      	beq.n	801d878 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801d7da:	682e      	ldr	r6, [r5, #0]
 801d7dc:	3c01      	subs	r4, #1
 801d7de:	42b2      	cmp	r2, r6
 801d7e0:	b2a4      	uxth	r4, r4
 801d7e2:	dd49      	ble.n	801d878 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801d7e4:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801d7e8:	682b      	ldr	r3, [r5, #0]
 801d7ea:	3301      	adds	r3, #1
 801d7ec:	602b      	str	r3, [r5, #0]
 801d7ee:	e7f2      	b.n	801d7d6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801d7f0:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 801d7f4:	d01d      	beq.n	801d832 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801d7f6:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 801d7fa:	d002      	beq.n	801d802 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801d7fc:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 801d800:	e7c9      	b.n	801d796 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801d802:	4684      	mov	ip, r0
 801d804:	f04f 0800 	mov.w	r8, #0
 801d808:	2c00      	cmp	r4, #0
 801d80a:	d0c6      	beq.n	801d79a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801d80c:	b947      	cbnz	r7, 801d820 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801d80e:	2801      	cmp	r0, #1
 801d810:	d106      	bne.n	801d820 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801d812:	8814      	ldrh	r4, [r2, #0]
 801d814:	2c30      	cmp	r4, #48	; 0x30
 801d816:	bf02      	ittt	eq
 801d818:	3202      	addeq	r2, #2
 801d81a:	4638      	moveq	r0, r7
 801d81c:	f8cb 2000 	streq.w	r2, [fp]
 801d820:	45bc      	cmp	ip, r7
 801d822:	da14      	bge.n	801d84e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801d824:	b2bf      	uxth	r7, r7
 801d826:	eba7 040c 	sub.w	r4, r7, ip
 801d82a:	46bc      	mov	ip, r7
 801d82c:	b2a4      	uxth	r4, r4
 801d82e:	2600      	movs	r6, #0
 801d830:	e7b3      	b.n	801d79a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801d832:	4684      	mov	ip, r0
 801d834:	b16c      	cbz	r4, 801d852 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801d836:	42b8      	cmp	r0, r7
 801d838:	dd00      	ble.n	801d83c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801d83a:	b2b8      	uxth	r0, r7
 801d83c:	2400      	movs	r4, #0
 801d83e:	e003      	b.n	801d848 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801d840:	f04f 0c01 	mov.w	ip, #1
 801d844:	2400      	movs	r4, #0
 801d846:	4660      	mov	r0, ip
 801d848:	4626      	mov	r6, r4
 801d84a:	46a0      	mov	r8, r4
 801d84c:	e7a5      	b.n	801d79a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801d84e:	2400      	movs	r4, #0
 801d850:	e7ed      	b.n	801d82e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801d852:	4626      	mov	r6, r4
 801d854:	46a0      	mov	r8, r4
 801d856:	e7a0      	b.n	801d79a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801d858:	2900      	cmp	r1, #0
 801d85a:	d0b0      	beq.n	801d7be <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801d85c:	2720      	movs	r7, #32
 801d85e:	682e      	ldr	r6, [r5, #0]
 801d860:	2900      	cmp	r1, #0
 801d862:	d0ac      	beq.n	801d7be <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801d864:	3901      	subs	r1, #1
 801d866:	4296      	cmp	r6, r2
 801d868:	b289      	uxth	r1, r1
 801d86a:	daa7      	bge.n	801d7bc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801d86c:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801d870:	682b      	ldr	r3, [r5, #0]
 801d872:	3301      	adds	r3, #1
 801d874:	602b      	str	r3, [r5, #0]
 801d876:	e7f2      	b.n	801d85e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801d878:	b188      	cbz	r0, 801d89e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801d87a:	682b      	ldr	r3, [r5, #0]
 801d87c:	3801      	subs	r0, #1
 801d87e:	429a      	cmp	r2, r3
 801d880:	b280      	uxth	r0, r0
 801d882:	dd0c      	ble.n	801d89e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801d884:	f8db 3000 	ldr.w	r3, [fp]
 801d888:	1c9c      	adds	r4, r3, #2
 801d88a:	f8cb 4000 	str.w	r4, [fp]
 801d88e:	881c      	ldrh	r4, [r3, #0]
 801d890:	682b      	ldr	r3, [r5, #0]
 801d892:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801d896:	682b      	ldr	r3, [r5, #0]
 801d898:	3301      	adds	r3, #1
 801d89a:	602b      	str	r3, [r5, #0]
 801d89c:	e7ec      	b.n	801d878 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801d89e:	2620      	movs	r6, #32
 801d8a0:	b151      	cbz	r1, 801d8b8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801d8a2:	6828      	ldr	r0, [r5, #0]
 801d8a4:	3901      	subs	r1, #1
 801d8a6:	4282      	cmp	r2, r0
 801d8a8:	b289      	uxth	r1, r1
 801d8aa:	dd05      	ble.n	801d8b8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801d8ac:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801d8b0:	682b      	ldr	r3, [r5, #0]
 801d8b2:	3301      	adds	r3, #1
 801d8b4:	602b      	str	r3, [r5, #0]
 801d8b6:	e7f3      	b.n	801d8a0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801d8b8:	b005      	add	sp, #20
 801d8ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d8be <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801d8be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d8c2:	2400      	movs	r4, #0
 801d8c4:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801d8c8:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 801d8cc:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 801d8d0:	8014      	strh	r4, [r2, #0]
 801d8d2:	701c      	strb	r4, [r3, #0]
 801d8d4:	f888 4000 	strb.w	r4, [r8]
 801d8d8:	f88c 4000 	strb.w	r4, [ip]
 801d8dc:	f88e 4000 	strb.w	r4, [lr]
 801d8e0:	703c      	strb	r4, [r7, #0]
 801d8e2:	6804      	ldr	r4, [r0, #0]
 801d8e4:	b1a4      	cbz	r4, 801d910 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801d8e6:	8824      	ldrh	r4, [r4, #0]
 801d8e8:	f04f 0901 	mov.w	r9, #1
 801d8ec:	b314      	cbz	r4, 801d934 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801d8ee:	2c2b      	cmp	r4, #43	; 0x2b
 801d8f0:	d001      	beq.n	801d8f6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801d8f2:	2c20      	cmp	r4, #32
 801d8f4:	d110      	bne.n	801d918 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801d8f6:	8014      	strh	r4, [r2, #0]
 801d8f8:	6804      	ldr	r4, [r0, #0]
 801d8fa:	b10c      	cbz	r4, 801d900 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801d8fc:	3402      	adds	r4, #2
 801d8fe:	6004      	str	r4, [r0, #0]
 801d900:	680c      	ldr	r4, [r1, #0]
 801d902:	b10c      	cbz	r4, 801d908 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801d904:	3401      	adds	r4, #1
 801d906:	600c      	str	r4, [r1, #0]
 801d908:	6804      	ldr	r4, [r0, #0]
 801d90a:	b17c      	cbz	r4, 801d92c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801d90c:	8824      	ldrh	r4, [r4, #0]
 801d90e:	e7ed      	b.n	801d8ec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801d910:	680c      	ldr	r4, [r1, #0]
 801d912:	b17c      	cbz	r4, 801d934 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801d914:	7824      	ldrb	r4, [r4, #0]
 801d916:	e7e7      	b.n	801d8e8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801d918:	2c2d      	cmp	r4, #45	; 0x2d
 801d91a:	d102      	bne.n	801d922 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801d91c:	f883 9000 	strb.w	r9, [r3]
 801d920:	e7ea      	b.n	801d8f8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801d922:	2c23      	cmp	r4, #35	; 0x23
 801d924:	d107      	bne.n	801d936 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801d926:	f888 9000 	strb.w	r9, [r8]
 801d92a:	e7e5      	b.n	801d8f8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801d92c:	680c      	ldr	r4, [r1, #0]
 801d92e:	b10c      	cbz	r4, 801d934 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801d930:	7824      	ldrb	r4, [r4, #0]
 801d932:	e7db      	b.n	801d8ec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801d934:	2400      	movs	r4, #0
 801d936:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801d93a:	2b09      	cmp	r3, #9
 801d93c:	d901      	bls.n	801d942 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801d93e:	2c2a      	cmp	r4, #42	; 0x2a
 801d940:	d122      	bne.n	801d988 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801d942:	2301      	movs	r3, #1
 801d944:	2c30      	cmp	r4, #48	; 0x30
 801d946:	f88e 3000 	strb.w	r3, [lr]
 801d94a:	d10d      	bne.n	801d968 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801d94c:	f88c 3000 	strb.w	r3, [ip]
 801d950:	6803      	ldr	r3, [r0, #0]
 801d952:	b10b      	cbz	r3, 801d958 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801d954:	3302      	adds	r3, #2
 801d956:	6003      	str	r3, [r0, #0]
 801d958:	680b      	ldr	r3, [r1, #0]
 801d95a:	b10b      	cbz	r3, 801d960 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801d95c:	3301      	adds	r3, #1
 801d95e:	600b      	str	r3, [r1, #0]
 801d960:	6803      	ldr	r3, [r0, #0]
 801d962:	2b00      	cmp	r3, #0
 801d964:	d02f      	beq.n	801d9c6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801d966:	881c      	ldrh	r4, [r3, #0]
 801d968:	2c2a      	cmp	r4, #42	; 0x2a
 801d96a:	d135      	bne.n	801d9d8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801d96c:	f04f 33ff 	mov.w	r3, #4294967295
 801d970:	6033      	str	r3, [r6, #0]
 801d972:	6803      	ldr	r3, [r0, #0]
 801d974:	b10b      	cbz	r3, 801d97a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801d976:	3302      	adds	r3, #2
 801d978:	6003      	str	r3, [r0, #0]
 801d97a:	680b      	ldr	r3, [r1, #0]
 801d97c:	b10b      	cbz	r3, 801d982 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801d97e:	3301      	adds	r3, #1
 801d980:	600b      	str	r3, [r1, #0]
 801d982:	6803      	ldr	r3, [r0, #0]
 801d984:	b31b      	cbz	r3, 801d9ce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801d986:	881c      	ldrh	r4, [r3, #0]
 801d988:	2c2e      	cmp	r4, #46	; 0x2e
 801d98a:	d11a      	bne.n	801d9c2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801d98c:	2301      	movs	r3, #1
 801d98e:	703b      	strb	r3, [r7, #0]
 801d990:	6803      	ldr	r3, [r0, #0]
 801d992:	b10b      	cbz	r3, 801d998 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801d994:	3302      	adds	r3, #2
 801d996:	6003      	str	r3, [r0, #0]
 801d998:	680b      	ldr	r3, [r1, #0]
 801d99a:	b10b      	cbz	r3, 801d9a0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801d99c:	3301      	adds	r3, #1
 801d99e:	600b      	str	r3, [r1, #0]
 801d9a0:	6803      	ldr	r3, [r0, #0]
 801d9a2:	2b00      	cmp	r3, #0
 801d9a4:	d036      	beq.n	801da14 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801d9a6:	881b      	ldrh	r3, [r3, #0]
 801d9a8:	2b2a      	cmp	r3, #42	; 0x2a
 801d9aa:	d137      	bne.n	801da1c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801d9ac:	f04f 33ff 	mov.w	r3, #4294967295
 801d9b0:	602b      	str	r3, [r5, #0]
 801d9b2:	6803      	ldr	r3, [r0, #0]
 801d9b4:	b10b      	cbz	r3, 801d9ba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801d9b6:	3302      	adds	r3, #2
 801d9b8:	6003      	str	r3, [r0, #0]
 801d9ba:	680b      	ldr	r3, [r1, #0]
 801d9bc:	b10b      	cbz	r3, 801d9c2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801d9be:	3301      	adds	r3, #1
 801d9c0:	600b      	str	r3, [r1, #0]
 801d9c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d9c6:	680c      	ldr	r4, [r1, #0]
 801d9c8:	b134      	cbz	r4, 801d9d8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801d9ca:	7824      	ldrb	r4, [r4, #0]
 801d9cc:	e7cc      	b.n	801d968 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801d9ce:	680b      	ldr	r3, [r1, #0]
 801d9d0:	2b00      	cmp	r3, #0
 801d9d2:	d0f6      	beq.n	801d9c2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801d9d4:	781c      	ldrb	r4, [r3, #0]
 801d9d6:	e7d7      	b.n	801d988 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801d9d8:	2300      	movs	r3, #0
 801d9da:	220a      	movs	r2, #10
 801d9dc:	6033      	str	r3, [r6, #0]
 801d9de:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801d9e2:	fa1f f38c 	uxth.w	r3, ip
 801d9e6:	2b09      	cmp	r3, #9
 801d9e8:	d8ce      	bhi.n	801d988 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801d9ea:	6833      	ldr	r3, [r6, #0]
 801d9ec:	fb02 c303 	mla	r3, r2, r3, ip
 801d9f0:	6033      	str	r3, [r6, #0]
 801d9f2:	6803      	ldr	r3, [r0, #0]
 801d9f4:	b10b      	cbz	r3, 801d9fa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801d9f6:	3302      	adds	r3, #2
 801d9f8:	6003      	str	r3, [r0, #0]
 801d9fa:	680b      	ldr	r3, [r1, #0]
 801d9fc:	b10b      	cbz	r3, 801da02 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801d9fe:	3301      	adds	r3, #1
 801da00:	600b      	str	r3, [r1, #0]
 801da02:	6803      	ldr	r3, [r0, #0]
 801da04:	b10b      	cbz	r3, 801da0a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801da06:	881c      	ldrh	r4, [r3, #0]
 801da08:	e7e9      	b.n	801d9de <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801da0a:	680c      	ldr	r4, [r1, #0]
 801da0c:	2c00      	cmp	r4, #0
 801da0e:	d0e6      	beq.n	801d9de <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801da10:	7824      	ldrb	r4, [r4, #0]
 801da12:	e7e4      	b.n	801d9de <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801da14:	680b      	ldr	r3, [r1, #0]
 801da16:	b10b      	cbz	r3, 801da1c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801da18:	781b      	ldrb	r3, [r3, #0]
 801da1a:	e7c5      	b.n	801d9a8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801da1c:	2200      	movs	r2, #0
 801da1e:	240a      	movs	r4, #10
 801da20:	602a      	str	r2, [r5, #0]
 801da22:	3b30      	subs	r3, #48	; 0x30
 801da24:	682a      	ldr	r2, [r5, #0]
 801da26:	b29e      	uxth	r6, r3
 801da28:	2e09      	cmp	r6, #9
 801da2a:	d813      	bhi.n	801da54 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801da2c:	fb04 3302 	mla	r3, r4, r2, r3
 801da30:	602b      	str	r3, [r5, #0]
 801da32:	6803      	ldr	r3, [r0, #0]
 801da34:	b10b      	cbz	r3, 801da3a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801da36:	3302      	adds	r3, #2
 801da38:	6003      	str	r3, [r0, #0]
 801da3a:	680b      	ldr	r3, [r1, #0]
 801da3c:	b10b      	cbz	r3, 801da42 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801da3e:	3301      	adds	r3, #1
 801da40:	600b      	str	r3, [r1, #0]
 801da42:	6803      	ldr	r3, [r0, #0]
 801da44:	b10b      	cbz	r3, 801da4a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801da46:	881b      	ldrh	r3, [r3, #0]
 801da48:	e7eb      	b.n	801da22 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801da4a:	680b      	ldr	r3, [r1, #0]
 801da4c:	2b00      	cmp	r3, #0
 801da4e:	d0e8      	beq.n	801da22 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801da50:	781b      	ldrb	r3, [r3, #0]
 801da52:	e7e6      	b.n	801da22 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801da54:	2a06      	cmp	r2, #6
 801da56:	bfa8      	it	ge
 801da58:	2206      	movge	r2, #6
 801da5a:	602a      	str	r2, [r5, #0]
 801da5c:	e7b1      	b.n	801d9c2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801da5e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801da5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da62:	b0a3      	sub	sp, #140	; 0x8c
 801da64:	2600      	movs	r6, #0
 801da66:	4607      	mov	r7, r0
 801da68:	4688      	mov	r8, r1
 801da6a:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 801da6e:	4631      	mov	r1, r6
 801da70:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801da72:	4648      	mov	r0, r9
 801da74:	960d      	str	r6, [sp, #52]	; 0x34
 801da76:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801da7a:	2242      	movs	r2, #66	; 0x42
 801da7c:	f00c fc38 	bl	802a2f0 <memset>
 801da80:	b15f      	cbz	r7, 801da9a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801da82:	f108 3aff 	add.w	sl, r8, #4294967295
 801da86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801da88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801da8a:	b152      	cbz	r2, 801daa2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801da8c:	8812      	ldrh	r2, [r2, #0]
 801da8e:	b10a      	cbz	r2, 801da94 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801da90:	459a      	cmp	sl, r3
 801da92:	dc2e      	bgt.n	801daf2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801da94:	2200      	movs	r2, #0
 801da96:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801da9a:	4638      	mov	r0, r7
 801da9c:	b023      	add	sp, #140	; 0x8c
 801da9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801daa2:	9a08      	ldr	r2, [sp, #32]
 801daa4:	2a00      	cmp	r2, #0
 801daa6:	d0f5      	beq.n	801da94 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801daa8:	7812      	ldrb	r2, [r2, #0]
 801daaa:	e7f0      	b.n	801da8e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801daac:	2d00      	cmp	r5, #0
 801daae:	d0ea      	beq.n	801da86 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801dab0:	782a      	ldrb	r2, [r5, #0]
 801dab2:	b142      	cbz	r2, 801dac6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801dab4:	2a25      	cmp	r2, #37	; 0x25
 801dab6:	d001      	beq.n	801dabc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801dab8:	459a      	cmp	sl, r3
 801daba:	dc08      	bgt.n	801dace <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801dabc:	f1bb 0f00 	cmp.w	fp, #0
 801dac0:	d121      	bne.n	801db06 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801dac2:	2d00      	cmp	r5, #0
 801dac4:	d0df      	beq.n	801da86 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801dac6:	782a      	ldrb	r2, [r5, #0]
 801dac8:	f04f 0b00 	mov.w	fp, #0
 801dacc:	e01d      	b.n	801db0a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801dace:	f1bb 0f00 	cmp.w	fp, #0
 801dad2:	d077      	beq.n	801dbc4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 801dad4:	f8bb 2000 	ldrh.w	r2, [fp]
 801dad8:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801dadc:	f1bb 0f00 	cmp.w	fp, #0
 801dae0:	d002      	beq.n	801dae8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801dae2:	f10b 0202 	add.w	r2, fp, #2
 801dae6:	9209      	str	r2, [sp, #36]	; 0x24
 801dae8:	b10d      	cbz	r5, 801daee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801daea:	3501      	adds	r5, #1
 801daec:	9508      	str	r5, [sp, #32]
 801daee:	3301      	adds	r3, #1
 801daf0:	930d      	str	r3, [sp, #52]	; 0x34
 801daf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801daf4:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801daf8:	f1bb 0f00 	cmp.w	fp, #0
 801dafc:	d0d6      	beq.n	801daac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801dafe:	f8bb 2000 	ldrh.w	r2, [fp]
 801db02:	2a00      	cmp	r2, #0
 801db04:	d1d6      	bne.n	801dab4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801db06:	f8bb 2000 	ldrh.w	r2, [fp]
 801db0a:	2a00      	cmp	r2, #0
 801db0c:	d0bb      	beq.n	801da86 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801db0e:	459a      	cmp	sl, r3
 801db10:	ddb9      	ble.n	801da86 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801db12:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 801db16:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801db1a:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 801db1e:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 801db22:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801db26:	960e      	str	r6, [sp, #56]	; 0x38
 801db28:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 801db2c:	960f      	str	r6, [sp, #60]	; 0x3c
 801db2e:	f1bb 0f00 	cmp.w	fp, #0
 801db32:	d002      	beq.n	801db3a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801db34:	f10b 0302 	add.w	r3, fp, #2
 801db38:	9309      	str	r3, [sp, #36]	; 0x24
 801db3a:	b10d      	cbz	r5, 801db40 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801db3c:	1c6b      	adds	r3, r5, #1
 801db3e:	9308      	str	r3, [sp, #32]
 801db40:	ab0f      	add	r3, sp, #60	; 0x3c
 801db42:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801db46:	a908      	add	r1, sp, #32
 801db48:	a809      	add	r0, sp, #36	; 0x24
 801db4a:	9305      	str	r3, [sp, #20]
 801db4c:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801db50:	9304      	str	r3, [sp, #16]
 801db52:	ab0e      	add	r3, sp, #56	; 0x38
 801db54:	9303      	str	r3, [sp, #12]
 801db56:	ab0c      	add	r3, sp, #48	; 0x30
 801db58:	9302      	str	r3, [sp, #8]
 801db5a:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801db5e:	9301      	str	r3, [sp, #4]
 801db60:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801db64:	9300      	str	r3, [sp, #0]
 801db66:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801db6a:	f7ff fea8 	bl	801d8be <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801db6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801db70:	2b00      	cmp	r3, #0
 801db72:	bfbf      	itttt	lt
 801db74:	6823      	ldrlt	r3, [r4, #0]
 801db76:	3404      	addlt	r4, #4
 801db78:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801db7c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801db7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801db80:	2b00      	cmp	r3, #0
 801db82:	bfbe      	ittt	lt
 801db84:	6823      	ldrlt	r3, [r4, #0]
 801db86:	3404      	addlt	r4, #4
 801db88:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801db8c:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801db90:	bfb8      	it	lt
 801db92:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801db94:	b1d9      	cbz	r1, 801dbce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801db96:	880b      	ldrh	r3, [r1, #0]
 801db98:	2b69      	cmp	r3, #105	; 0x69
 801db9a:	d01f      	beq.n	801dbdc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801db9c:	d82f      	bhi.n	801dbfe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801db9e:	2b58      	cmp	r3, #88	; 0x58
 801dba0:	d01c      	beq.n	801dbdc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801dba2:	d818      	bhi.n	801dbd6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801dba4:	2b25      	cmp	r3, #37	; 0x25
 801dba6:	d034      	beq.n	801dc12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801dba8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dbaa:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801dbae:	f1bb 0f00 	cmp.w	fp, #0
 801dbb2:	f000 80b7 	beq.w	801dd24 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801dbb6:	f8bb 5000 	ldrh.w	r5, [fp]
 801dbba:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801dbbe:	3301      	adds	r3, #1
 801dbc0:	930d      	str	r3, [sp, #52]	; 0x34
 801dbc2:	e029      	b.n	801dc18 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801dbc4:	b10d      	cbz	r5, 801dbca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801dbc6:	782a      	ldrb	r2, [r5, #0]
 801dbc8:	e786      	b.n	801dad8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801dbca:	462a      	mov	r2, r5
 801dbcc:	e784      	b.n	801dad8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801dbce:	2a00      	cmp	r2, #0
 801dbd0:	d0ea      	beq.n	801dba8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801dbd2:	7813      	ldrb	r3, [r2, #0]
 801dbd4:	e7e0      	b.n	801db98 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801dbd6:	3b63      	subs	r3, #99	; 0x63
 801dbd8:	2b01      	cmp	r3, #1
 801dbda:	d8e5      	bhi.n	801dba8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801dbdc:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801dbe0:	b329      	cbz	r1, 801dc2e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801dbe2:	880b      	ldrh	r3, [r1, #0]
 801dbe4:	2b69      	cmp	r3, #105	; 0x69
 801dbe6:	d063      	beq.n	801dcb0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801dbe8:	d825      	bhi.n	801dc36 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801dbea:	2b63      	cmp	r3, #99	; 0x63
 801dbec:	d038      	beq.n	801dc60 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801dbee:	2b64      	cmp	r3, #100	; 0x64
 801dbf0:	d05e      	beq.n	801dcb0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801dbf2:	2b58      	cmp	r3, #88	; 0x58
 801dbf4:	d07a      	beq.n	801dcec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801dbf6:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801dbfa:	4625      	mov	r5, r4
 801dbfc:	e036      	b.n	801dc6c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801dbfe:	2b73      	cmp	r3, #115	; 0x73
 801dc00:	d0ec      	beq.n	801dbdc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801dc02:	d802      	bhi.n	801dc0a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801dc04:	2b6f      	cmp	r3, #111	; 0x6f
 801dc06:	d1cf      	bne.n	801dba8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801dc08:	e7e8      	b.n	801dbdc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801dc0a:	2b75      	cmp	r3, #117	; 0x75
 801dc0c:	d0e6      	beq.n	801dbdc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801dc0e:	2b78      	cmp	r3, #120	; 0x78
 801dc10:	e7f9      	b.n	801dc06 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801dc12:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801dc14:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801dc18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dc1a:	b10b      	cbz	r3, 801dc20 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801dc1c:	3302      	adds	r3, #2
 801dc1e:	9309      	str	r3, [sp, #36]	; 0x24
 801dc20:	9b08      	ldr	r3, [sp, #32]
 801dc22:	2b00      	cmp	r3, #0
 801dc24:	f43f af2f 	beq.w	801da86 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801dc28:	3301      	adds	r3, #1
 801dc2a:	9308      	str	r3, [sp, #32]
 801dc2c:	e72b      	b.n	801da86 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801dc2e:	2a00      	cmp	r2, #0
 801dc30:	d0e1      	beq.n	801dbf6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801dc32:	7813      	ldrb	r3, [r2, #0]
 801dc34:	e7d6      	b.n	801dbe4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801dc36:	2b73      	cmp	r3, #115	; 0x73
 801dc38:	d036      	beq.n	801dca8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801dc3a:	d807      	bhi.n	801dc4c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801dc3c:	2b6f      	cmp	r3, #111	; 0x6f
 801dc3e:	d1da      	bne.n	801dbf6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801dc40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801dc42:	1d25      	adds	r5, r4, #4
 801dc44:	2308      	movs	r3, #8
 801dc46:	eba8 0202 	sub.w	r2, r8, r2
 801dc4a:	e049      	b.n	801dce0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801dc4c:	2b75      	cmp	r3, #117	; 0x75
 801dc4e:	d042      	beq.n	801dcd6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 801dc50:	2b78      	cmp	r3, #120	; 0x78
 801dc52:	d1d0      	bne.n	801dbf6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801dc54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801dc56:	1d25      	adds	r5, r4, #4
 801dc58:	2310      	movs	r3, #16
 801dc5a:	eba8 0202 	sub.w	r2, r8, r2
 801dc5e:	e03f      	b.n	801dce0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801dc60:	7823      	ldrb	r3, [r4, #0]
 801dc62:	1d25      	adds	r5, r4, #4
 801dc64:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801dc68:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801dc6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dc6e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801dc72:	2b00      	cmp	r3, #0
 801dc74:	d051      	beq.n	801dd1a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801dc76:	881a      	ldrh	r2, [r3, #0]
 801dc78:	a80d      	add	r0, sp, #52	; 0x34
 801dc7a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801dc7e:	462c      	mov	r4, r5
 801dc80:	9005      	str	r0, [sp, #20]
 801dc82:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 801dc86:	9004      	str	r0, [sp, #16]
 801dc88:	980e      	ldr	r0, [sp, #56]	; 0x38
 801dc8a:	9003      	str	r0, [sp, #12]
 801dc8c:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801dc90:	9002      	str	r0, [sp, #8]
 801dc92:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801dc94:	9001      	str	r0, [sp, #4]
 801dc96:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 801dc9a:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801dc9e:	9000      	str	r0, [sp, #0]
 801dca0:	a810      	add	r0, sp, #64	; 0x40
 801dca2:	f7ff fd49 	bl	801d738 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801dca6:	e7b7      	b.n	801dc18 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801dca8:	1d25      	adds	r5, r4, #4
 801dcaa:	6823      	ldr	r3, [r4, #0]
 801dcac:	9310      	str	r3, [sp, #64]	; 0x40
 801dcae:	e7dd      	b.n	801dc6c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801dcb0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801dcb2:	230a      	movs	r3, #10
 801dcb4:	4649      	mov	r1, r9
 801dcb6:	6820      	ldr	r0, [r4, #0]
 801dcb8:	eba8 0202 	sub.w	r2, r8, r2
 801dcbc:	1d25      	adds	r5, r4, #4
 801dcbe:	b292      	uxth	r2, r2
 801dcc0:	f7ff fd08 	bl	801d6d4 <_ZN8touchgfx7Unicode4itoaElPtti>
 801dcc4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801dcc8:	2b2d      	cmp	r3, #45	; 0x2d
 801dcca:	d1cf      	bne.n	801dc6c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801dccc:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801dcd0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801dcd2:	3302      	adds	r3, #2
 801dcd4:	e7ea      	b.n	801dcac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801dcd6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801dcd8:	1d25      	adds	r5, r4, #4
 801dcda:	230a      	movs	r3, #10
 801dcdc:	eba8 0202 	sub.w	r2, r8, r2
 801dce0:	b292      	uxth	r2, r2
 801dce2:	4649      	mov	r1, r9
 801dce4:	6820      	ldr	r0, [r4, #0]
 801dce6:	f7ff fcd7 	bl	801d698 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801dcea:	e7bf      	b.n	801dc6c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801dcec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801dcee:	2310      	movs	r3, #16
 801dcf0:	4649      	mov	r1, r9
 801dcf2:	6820      	ldr	r0, [r4, #0]
 801dcf4:	eba8 0202 	sub.w	r2, r8, r2
 801dcf8:	1d25      	adds	r5, r4, #4
 801dcfa:	b292      	uxth	r2, r2
 801dcfc:	f7ff fccc 	bl	801d698 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801dd00:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801dd04:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801dd08:	2b00      	cmp	r3, #0
 801dd0a:	d0af      	beq.n	801dc6c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801dd0c:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801dd10:	2919      	cmp	r1, #25
 801dd12:	d8f7      	bhi.n	801dd04 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801dd14:	3b20      	subs	r3, #32
 801dd16:	8013      	strh	r3, [r2, #0]
 801dd18:	e7f4      	b.n	801dd04 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801dd1a:	9a08      	ldr	r2, [sp, #32]
 801dd1c:	2a00      	cmp	r2, #0
 801dd1e:	d0ab      	beq.n	801dc78 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801dd20:	7812      	ldrb	r2, [r2, #0]
 801dd22:	e7a9      	b.n	801dc78 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801dd24:	2d00      	cmp	r5, #0
 801dd26:	f43f af48 	beq.w	801dbba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801dd2a:	782d      	ldrb	r5, [r5, #0]
 801dd2c:	e745      	b.n	801dbba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801dd2e <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801dd2e:	b507      	push	{r0, r1, r2, lr}
 801dd30:	9300      	str	r3, [sp, #0]
 801dd32:	4613      	mov	r3, r2
 801dd34:	2200      	movs	r2, #0
 801dd36:	f7ff fe92 	bl	801da5e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801dd3a:	b003      	add	sp, #12
 801dd3c:	f85d fb04 	ldr.w	pc, [sp], #4

0801dd40 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801dd40:	b40c      	push	{r2, r3}
 801dd42:	b507      	push	{r0, r1, r2, lr}
 801dd44:	ab04      	add	r3, sp, #16
 801dd46:	f853 2b04 	ldr.w	r2, [r3], #4
 801dd4a:	9301      	str	r3, [sp, #4]
 801dd4c:	f7ff ffef 	bl	801dd2e <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801dd50:	b003      	add	sp, #12
 801dd52:	f85d eb04 	ldr.w	lr, [sp], #4
 801dd56:	b002      	add	sp, #8
 801dd58:	4770      	bx	lr
	...

0801dd5c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801dd5c:	4b01      	ldr	r3, [pc, #4]	; (801dd64 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801dd5e:	6018      	str	r0, [r3, #0]
 801dd60:	4770      	bx	lr
 801dd62:	bf00      	nop
 801dd64:	2400b630 	.word	0x2400b630

0801dd68 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801dd68:	4b06      	ldr	r3, [pc, #24]	; (801dd84 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801dd6a:	881a      	ldrh	r2, [r3, #0]
 801dd6c:	4282      	cmp	r2, r0
 801dd6e:	d807      	bhi.n	801dd80 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801dd70:	4b05      	ldr	r3, [pc, #20]	; (801dd88 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801dd72:	881b      	ldrh	r3, [r3, #0]
 801dd74:	4413      	add	r3, r2
 801dd76:	4298      	cmp	r0, r3
 801dd78:	bfac      	ite	ge
 801dd7a:	2000      	movge	r0, #0
 801dd7c:	2001      	movlt	r0, #1
 801dd7e:	4770      	bx	lr
 801dd80:	2000      	movs	r0, #0
 801dd82:	4770      	bx	lr
 801dd84:	2400b650 	.word	0x2400b650
 801dd88:	2400b654 	.word	0x2400b654

0801dd8c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801dd8c:	b508      	push	{r3, lr}
 801dd8e:	4601      	mov	r1, r0
 801dd90:	f7ff ffea 	bl	801dd68 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801dd94:	b118      	cbz	r0, 801dd9e <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801dd96:	4b02      	ldr	r3, [pc, #8]	; (801dda0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801dd98:	681b      	ldr	r3, [r3, #0]
 801dd9a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801dd9e:	bd08      	pop	{r3, pc}
 801dda0:	2400b634 	.word	0x2400b634

0801dda4 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801dda4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dda8:	4d28      	ldr	r5, [pc, #160]	; (801de4c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801ddaa:	682b      	ldr	r3, [r5, #0]
 801ddac:	2b00      	cmp	r3, #0
 801ddae:	d04a      	beq.n	801de46 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801ddb0:	4a27      	ldr	r2, [pc, #156]	; (801de50 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801ddb2:	4e28      	ldr	r6, [pc, #160]	; (801de54 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801ddb4:	8810      	ldrh	r0, [r2, #0]
 801ddb6:	f8b6 8000 	ldrh.w	r8, [r6]
 801ddba:	4c27      	ldr	r4, [pc, #156]	; (801de58 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801ddbc:	4440      	add	r0, r8
 801ddbe:	4f27      	ldr	r7, [pc, #156]	; (801de5c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801ddc0:	1c41      	adds	r1, r0, #1
 801ddc2:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 801ddc6:	f021 0101 	bic.w	r1, r1, #1
 801ddca:	eb03 020e 	add.w	r2, r3, lr
 801ddce:	0409      	lsls	r1, r1, #16
 801ddd0:	6022      	str	r2, [r4, #0]
 801ddd2:	0c09      	lsrs	r1, r1, #16
 801ddd4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 801ddd8:	eb0e 010c 	add.w	r1, lr, ip
 801dddc:	185a      	adds	r2, r3, r1
 801ddde:	603a      	str	r2, [r7, #0]
 801dde0:	220e      	movs	r2, #14
 801dde2:	fb02 f208 	mul.w	r2, r2, r8
 801dde6:	3203      	adds	r2, #3
 801dde8:	f022 0203 	bic.w	r2, r2, #3
 801ddec:	4411      	add	r1, r2
 801ddee:	440b      	add	r3, r1
 801ddf0:	491b      	ldr	r1, [pc, #108]	; (801de60 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801ddf2:	600b      	str	r3, [r1, #0]
 801ddf4:	2300      	movs	r3, #0
 801ddf6:	491b      	ldr	r1, [pc, #108]	; (801de64 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801ddf8:	800b      	strh	r3, [r1, #0]
 801ddfa:	491b      	ldr	r1, [pc, #108]	; (801de68 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801ddfc:	6809      	ldr	r1, [r1, #0]
 801ddfe:	eba1 010e 	sub.w	r1, r1, lr
 801de02:	eba1 010c 	sub.w	r1, r1, ip
 801de06:	469c      	mov	ip, r3
 801de08:	1a8a      	subs	r2, r1, r2
 801de0a:	4918      	ldr	r1, [pc, #96]	; (801de6c <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 801de0c:	600a      	str	r2, [r1, #0]
 801de0e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801de12:	4a17      	ldr	r2, [pc, #92]	; (801de70 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 801de14:	8013      	strh	r3, [r2, #0]
 801de16:	4283      	cmp	r3, r0
 801de18:	d10d      	bne.n	801de36 <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801de1a:	8835      	ldrh	r5, [r6, #0]
 801de1c:	2300      	movs	r3, #0
 801de1e:	6838      	ldr	r0, [r7, #0]
 801de20:	240e      	movs	r4, #14
 801de22:	429d      	cmp	r5, r3
 801de24:	d90f      	bls.n	801de46 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801de26:	fb04 0203 	mla	r2, r4, r3, r0
 801de2a:	3301      	adds	r3, #1
 801de2c:	7b11      	ldrb	r1, [r2, #12]
 801de2e:	f36f 1145 	bfc	r1, #5, #1
 801de32:	7311      	strb	r1, [r2, #12]
 801de34:	e7f5      	b.n	801de22 <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 801de36:	682a      	ldr	r2, [r5, #0]
 801de38:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801de3c:	6822      	ldr	r2, [r4, #0]
 801de3e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801de42:	3301      	adds	r3, #1
 801de44:	e7e7      	b.n	801de16 <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 801de46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801de4a:	bf00      	nop
 801de4c:	2400b634 	.word	0x2400b634
 801de50:	2400b650 	.word	0x2400b650
 801de54:	2400b654 	.word	0x2400b654
 801de58:	2400b648 	.word	0x2400b648
 801de5c:	2400b638 	.word	0x2400b638
 801de60:	2400b640 	.word	0x2400b640
 801de64:	2400b652 	.word	0x2400b652
 801de68:	2400b63c 	.word	0x2400b63c
 801de6c:	2400b64c 	.word	0x2400b64c
 801de70:	2400b644 	.word	0x2400b644

0801de74 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801de74:	4b10      	ldr	r3, [pc, #64]	; (801deb8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801de76:	b510      	push	{r4, lr}
 801de78:	681b      	ldr	r3, [r3, #0]
 801de7a:	b9db      	cbnz	r3, 801deb4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801de7c:	b1d1      	cbz	r1, 801deb4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801de7e:	4b0f      	ldr	r3, [pc, #60]	; (801debc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801de80:	240e      	movs	r4, #14
 801de82:	801a      	strh	r2, [r3, #0]
 801de84:	b292      	uxth	r2, r2
 801de86:	4b0e      	ldr	r3, [pc, #56]	; (801dec0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801de88:	881b      	ldrh	r3, [r3, #0]
 801de8a:	4413      	add	r3, r2
 801de8c:	4362      	muls	r2, r4
 801de8e:	2406      	movs	r4, #6
 801de90:	fb04 2203 	mla	r2, r4, r3, r2
 801de94:	428a      	cmp	r2, r1
 801de96:	d305      	bcc.n	801dea4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801de98:	4b0a      	ldr	r3, [pc, #40]	; (801dec4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801de9a:	2135      	movs	r1, #53	; 0x35
 801de9c:	4a0a      	ldr	r2, [pc, #40]	; (801dec8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801de9e:	480b      	ldr	r0, [pc, #44]	; (801decc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801dea0:	f00c f8a0 	bl	8029fe4 <__assert_func>
 801dea4:	4b0a      	ldr	r3, [pc, #40]	; (801ded0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801dea6:	6019      	str	r1, [r3, #0]
 801dea8:	4b0a      	ldr	r3, [pc, #40]	; (801ded4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801deaa:	6018      	str	r0, [r3, #0]
 801deac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801deb0:	f7ff bf78 	b.w	801dda4 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801deb4:	bd10      	pop	{r4, pc}
 801deb6:	bf00      	nop
 801deb8:	2400b640 	.word	0x2400b640
 801debc:	2400b654 	.word	0x2400b654
 801dec0:	2400b650 	.word	0x2400b650
 801dec4:	0802eee5 	.word	0x0802eee5
 801dec8:	0802ef3e 	.word	0x0802ef3e
 801decc:	0802eec0 	.word	0x0802eec0
 801ded0:	2400b63c 	.word	0x2400b63c
 801ded4:	2400b634 	.word	0x2400b634

0801ded8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801ded8:	b470      	push	{r4, r5, r6}
 801deda:	4c07      	ldr	r4, [pc, #28]	; (801def8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801dedc:	4605      	mov	r5, r0
 801dede:	4610      	mov	r0, r2
 801dee0:	9a03      	ldr	r2, [sp, #12]
 801dee2:	6826      	ldr	r6, [r4, #0]
 801dee4:	b936      	cbnz	r6, 801def4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801dee6:	6025      	str	r5, [r4, #0]
 801dee8:	4c04      	ldr	r4, [pc, #16]	; (801defc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801deea:	8021      	strh	r1, [r4, #0]
 801deec:	4619      	mov	r1, r3
 801deee:	bc70      	pop	{r4, r5, r6}
 801def0:	f7ff bfc0 	b.w	801de74 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801def4:	bc70      	pop	{r4, r5, r6}
 801def6:	4770      	bx	lr
 801def8:	2400b658 	.word	0x2400b658
 801defc:	2400b650 	.word	0x2400b650

0801df00 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801df00:	b508      	push	{r3, lr}
 801df02:	4b14      	ldr	r3, [pc, #80]	; (801df54 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801df04:	6819      	ldr	r1, [r3, #0]
 801df06:	b931      	cbnz	r1, 801df16 <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801df08:	4b13      	ldr	r3, [pc, #76]	; (801df58 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801df0a:	f240 4185 	movw	r1, #1157	; 0x485
 801df0e:	4a13      	ldr	r2, [pc, #76]	; (801df5c <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801df10:	4813      	ldr	r0, [pc, #76]	; (801df60 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801df12:	f00c f867 	bl	8029fe4 <__assert_func>
 801df16:	4a13      	ldr	r2, [pc, #76]	; (801df64 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801df18:	8803      	ldrh	r3, [r0, #0]
 801df1a:	8812      	ldrh	r2, [r2, #0]
 801df1c:	4293      	cmp	r3, r2
 801df1e:	d204      	bcs.n	801df2a <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801df20:	2214      	movs	r2, #20
 801df22:	fb02 1303 	mla	r3, r2, r3, r1
 801df26:	8918      	ldrh	r0, [r3, #8]
 801df28:	bd08      	pop	{r3, pc}
 801df2a:	490f      	ldr	r1, [pc, #60]	; (801df68 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801df2c:	8809      	ldrh	r1, [r1, #0]
 801df2e:	4411      	add	r1, r2
 801df30:	428b      	cmp	r3, r1
 801df32:	da06      	bge.n	801df42 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801df34:	1a9b      	subs	r3, r3, r2
 801df36:	4a0d      	ldr	r2, [pc, #52]	; (801df6c <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801df38:	210e      	movs	r1, #14
 801df3a:	6812      	ldr	r2, [r2, #0]
 801df3c:	fb01 2303 	mla	r3, r1, r3, r2
 801df40:	e7f1      	b.n	801df26 <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801df42:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801df46:	4293      	cmp	r3, r2
 801df48:	bf0a      	itet	eq
 801df4a:	4b09      	ldreq	r3, [pc, #36]	; (801df70 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801df4c:	2000      	movne	r0, #0
 801df4e:	8818      	ldrheq	r0, [r3, #0]
 801df50:	e7ea      	b.n	801df28 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801df52:	bf00      	nop
 801df54:	2400b658 	.word	0x2400b658
 801df58:	0802e120 	.word	0x0802e120
 801df5c:	0802efeb 	.word	0x0802efeb
 801df60:	0802eec0 	.word	0x0802eec0
 801df64:	2400b650 	.word	0x2400b650
 801df68:	2400b654 	.word	0x2400b654
 801df6c:	2400b638 	.word	0x2400b638
 801df70:	2400b5c4 	.word	0x2400b5c4

0801df74 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801df74:	b508      	push	{r3, lr}
 801df76:	4b14      	ldr	r3, [pc, #80]	; (801dfc8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801df78:	6819      	ldr	r1, [r3, #0]
 801df7a:	b931      	cbnz	r1, 801df8a <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801df7c:	4b13      	ldr	r3, [pc, #76]	; (801dfcc <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801df7e:	f240 4199 	movw	r1, #1177	; 0x499
 801df82:	4a13      	ldr	r2, [pc, #76]	; (801dfd0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801df84:	4813      	ldr	r0, [pc, #76]	; (801dfd4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801df86:	f00c f82d 	bl	8029fe4 <__assert_func>
 801df8a:	4a13      	ldr	r2, [pc, #76]	; (801dfd8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801df8c:	8803      	ldrh	r3, [r0, #0]
 801df8e:	8812      	ldrh	r2, [r2, #0]
 801df90:	4293      	cmp	r3, r2
 801df92:	d204      	bcs.n	801df9e <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801df94:	2214      	movs	r2, #20
 801df96:	fb02 1303 	mla	r3, r2, r3, r1
 801df9a:	8958      	ldrh	r0, [r3, #10]
 801df9c:	bd08      	pop	{r3, pc}
 801df9e:	490f      	ldr	r1, [pc, #60]	; (801dfdc <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801dfa0:	8809      	ldrh	r1, [r1, #0]
 801dfa2:	4411      	add	r1, r2
 801dfa4:	428b      	cmp	r3, r1
 801dfa6:	da06      	bge.n	801dfb6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801dfa8:	1a9b      	subs	r3, r3, r2
 801dfaa:	4a0d      	ldr	r2, [pc, #52]	; (801dfe0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801dfac:	210e      	movs	r1, #14
 801dfae:	6812      	ldr	r2, [r2, #0]
 801dfb0:	fb01 2303 	mla	r3, r1, r3, r2
 801dfb4:	e7f1      	b.n	801df9a <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801dfb6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801dfba:	4293      	cmp	r3, r2
 801dfbc:	bf0a      	itet	eq
 801dfbe:	4b09      	ldreq	r3, [pc, #36]	; (801dfe4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801dfc0:	2000      	movne	r0, #0
 801dfc2:	8818      	ldrheq	r0, [r3, #0]
 801dfc4:	e7ea      	b.n	801df9c <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801dfc6:	bf00      	nop
 801dfc8:	2400b658 	.word	0x2400b658
 801dfcc:	0802e120 	.word	0x0802e120
 801dfd0:	0802f017 	.word	0x0802f017
 801dfd4:	0802eec0 	.word	0x0802eec0
 801dfd8:	2400b650 	.word	0x2400b650
 801dfdc:	2400b654 	.word	0x2400b654
 801dfe0:	2400b638 	.word	0x2400b638
 801dfe4:	2400b5c6 	.word	0x2400b5c6

0801dfe8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801dfe8:	4b23      	ldr	r3, [pc, #140]	; (801e078 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801dfea:	b510      	push	{r4, lr}
 801dfec:	681c      	ldr	r4, [r3, #0]
 801dfee:	b934      	cbnz	r4, 801dffe <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801dff0:	4b22      	ldr	r3, [pc, #136]	; (801e07c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801dff2:	f240 41ad 	movw	r1, #1197	; 0x4ad
 801dff6:	4a22      	ldr	r2, [pc, #136]	; (801e080 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801dff8:	4822      	ldr	r0, [pc, #136]	; (801e084 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801dffa:	f00b fff3 	bl	8029fe4 <__assert_func>
 801dffe:	4a22      	ldr	r2, [pc, #136]	; (801e088 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801e000:	880b      	ldrh	r3, [r1, #0]
 801e002:	8812      	ldrh	r2, [r2, #0]
 801e004:	4293      	cmp	r3, r2
 801e006:	d211      	bcs.n	801e02c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801e008:	2214      	movs	r2, #20
 801e00a:	fb02 4303 	mla	r3, r2, r3, r4
 801e00e:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801e012:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801e016:	8a1a      	ldrh	r2, [r3, #16]
 801e018:	8a5b      	ldrh	r3, [r3, #18]
 801e01a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801e01e:	8004      	strh	r4, [r0, #0]
 801e020:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e024:	8041      	strh	r1, [r0, #2]
 801e026:	8082      	strh	r2, [r0, #4]
 801e028:	80c3      	strh	r3, [r0, #6]
 801e02a:	e00e      	b.n	801e04a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801e02c:	4917      	ldr	r1, [pc, #92]	; (801e08c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801e02e:	8809      	ldrh	r1, [r1, #0]
 801e030:	4411      	add	r1, r2
 801e032:	428b      	cmp	r3, r1
 801e034:	da0a      	bge.n	801e04c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801e036:	1a9b      	subs	r3, r3, r2
 801e038:	4a15      	ldr	r2, [pc, #84]	; (801e090 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801e03a:	210e      	movs	r1, #14
 801e03c:	6812      	ldr	r2, [r2, #0]
 801e03e:	fb01 2303 	mla	r3, r1, r3, r2
 801e042:	681a      	ldr	r2, [r3, #0]
 801e044:	6002      	str	r2, [r0, #0]
 801e046:	685a      	ldr	r2, [r3, #4]
 801e048:	6042      	str	r2, [r0, #4]
 801e04a:	bd10      	pop	{r4, pc}
 801e04c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801e050:	4293      	cmp	r3, r2
 801e052:	d10b      	bne.n	801e06c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801e054:	4b0f      	ldr	r3, [pc, #60]	; (801e094 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801e056:	f9b3 1000 	ldrsh.w	r1, [r3]
 801e05a:	4b0f      	ldr	r3, [pc, #60]	; (801e098 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801e05c:	8081      	strh	r1, [r0, #4]
 801e05e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e062:	2300      	movs	r3, #0
 801e064:	80c2      	strh	r2, [r0, #6]
 801e066:	8003      	strh	r3, [r0, #0]
 801e068:	8043      	strh	r3, [r0, #2]
 801e06a:	e7ee      	b.n	801e04a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801e06c:	2300      	movs	r3, #0
 801e06e:	8003      	strh	r3, [r0, #0]
 801e070:	8043      	strh	r3, [r0, #2]
 801e072:	8083      	strh	r3, [r0, #4]
 801e074:	e7d8      	b.n	801e028 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801e076:	bf00      	nop
 801e078:	2400b658 	.word	0x2400b658
 801e07c:	0802e120 	.word	0x0802e120
 801e080:	0802ef84 	.word	0x0802ef84
 801e084:	0802eec0 	.word	0x0802eec0
 801e088:	2400b650 	.word	0x2400b650
 801e08c:	2400b654 	.word	0x2400b654
 801e090:	2400b638 	.word	0x2400b638
 801e094:	2400b5c4 	.word	0x2400b5c4
 801e098:	2400b5c6 	.word	0x2400b5c6

0801e09c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801e09c:	4b18      	ldr	r3, [pc, #96]	; (801e100 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801e09e:	681b      	ldr	r3, [r3, #0]
 801e0a0:	b34b      	cbz	r3, 801e0f6 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801e0a2:	4a18      	ldr	r2, [pc, #96]	; (801e104 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801e0a4:	8800      	ldrh	r0, [r0, #0]
 801e0a6:	8812      	ldrh	r2, [r2, #0]
 801e0a8:	4290      	cmp	r0, r2
 801e0aa:	d211      	bcs.n	801e0d0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 801e0ac:	2214      	movs	r2, #20
 801e0ae:	fb02 3300 	mla	r3, r2, r0, r3
 801e0b2:	8a1a      	ldrh	r2, [r3, #16]
 801e0b4:	8919      	ldrh	r1, [r3, #8]
 801e0b6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801e0ba:	428a      	cmp	r2, r1
 801e0bc:	db1d      	blt.n	801e0fa <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801e0be:	8a58      	ldrh	r0, [r3, #18]
 801e0c0:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801e0c4:	895b      	ldrh	r3, [r3, #10]
 801e0c6:	4298      	cmp	r0, r3
 801e0c8:	bfac      	ite	ge
 801e0ca:	2000      	movge	r0, #0
 801e0cc:	2001      	movlt	r0, #1
 801e0ce:	4770      	bx	lr
 801e0d0:	4b0d      	ldr	r3, [pc, #52]	; (801e108 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801e0d2:	881b      	ldrh	r3, [r3, #0]
 801e0d4:	4413      	add	r3, r2
 801e0d6:	4298      	cmp	r0, r3
 801e0d8:	da0d      	bge.n	801e0f6 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801e0da:	4b0c      	ldr	r3, [pc, #48]	; (801e10c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 801e0dc:	1a80      	subs	r0, r0, r2
 801e0de:	220e      	movs	r2, #14
 801e0e0:	681b      	ldr	r3, [r3, #0]
 801e0e2:	fb02 3300 	mla	r3, r2, r0, r3
 801e0e6:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801e0ea:	891a      	ldrh	r2, [r3, #8]
 801e0ec:	4291      	cmp	r1, r2
 801e0ee:	db04      	blt.n	801e0fa <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801e0f0:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801e0f4:	e7e6      	b.n	801e0c4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801e0f6:	2000      	movs	r0, #0
 801e0f8:	4770      	bx	lr
 801e0fa:	2001      	movs	r0, #1
 801e0fc:	4770      	bx	lr
 801e0fe:	bf00      	nop
 801e100:	2400b658 	.word	0x2400b658
 801e104:	2400b650 	.word	0x2400b650
 801e108:	2400b654 	.word	0x2400b654
 801e10c:	2400b638 	.word	0x2400b638

0801e110 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801e110:	b508      	push	{r3, lr}
 801e112:	4b12      	ldr	r3, [pc, #72]	; (801e15c <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801e114:	6819      	ldr	r1, [r3, #0]
 801e116:	b931      	cbnz	r1, 801e126 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801e118:	4b11      	ldr	r3, [pc, #68]	; (801e160 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801e11a:	f240 41d1 	movw	r1, #1233	; 0x4d1
 801e11e:	4a11      	ldr	r2, [pc, #68]	; (801e164 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801e120:	4811      	ldr	r0, [pc, #68]	; (801e168 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801e122:	f00b ff5f 	bl	8029fe4 <__assert_func>
 801e126:	8803      	ldrh	r3, [r0, #0]
 801e128:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e12c:	4293      	cmp	r3, r2
 801e12e:	d012      	beq.n	801e156 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801e130:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801e134:	4293      	cmp	r3, r2
 801e136:	d103      	bne.n	801e140 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801e138:	4b0c      	ldr	r3, [pc, #48]	; (801e16c <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801e13a:	681b      	ldr	r3, [r3, #0]
 801e13c:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801e13e:	bd08      	pop	{r3, pc}
 801e140:	4a0b      	ldr	r2, [pc, #44]	; (801e170 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801e142:	6812      	ldr	r2, [r2, #0]
 801e144:	b11a      	cbz	r2, 801e14e <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801e146:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801e14a:	2800      	cmp	r0, #0
 801e14c:	d1f7      	bne.n	801e13e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801e14e:	2214      	movs	r2, #20
 801e150:	4353      	muls	r3, r2
 801e152:	58c8      	ldr	r0, [r1, r3]
 801e154:	e7f3      	b.n	801e13e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801e156:	2000      	movs	r0, #0
 801e158:	e7f1      	b.n	801e13e <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801e15a:	bf00      	nop
 801e15c:	2400b658 	.word	0x2400b658
 801e160:	0802e120 	.word	0x0802e120
 801e164:	0802efba 	.word	0x0802efba
 801e168:	0802eec0 	.word	0x0802eec0
 801e16c:	2400b5d0 	.word	0x2400b5d0
 801e170:	2400b634 	.word	0x2400b634

0801e174 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801e174:	8802      	ldrh	r2, [r0, #0]
 801e176:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801e17a:	429a      	cmp	r2, r3
 801e17c:	d845      	bhi.n	801e20a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801e17e:	4b24      	ldr	r3, [pc, #144]	; (801e210 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801e180:	8818      	ldrh	r0, [r3, #0]
 801e182:	4282      	cmp	r2, r0
 801e184:	d221      	bcs.n	801e1ca <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 801e186:	4b23      	ldr	r3, [pc, #140]	; (801e214 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801e188:	6819      	ldr	r1, [r3, #0]
 801e18a:	2314      	movs	r3, #20
 801e18c:	fb03 1302 	mla	r3, r3, r2, r1
 801e190:	6858      	ldr	r0, [r3, #4]
 801e192:	2800      	cmp	r0, #0
 801e194:	d03a      	beq.n	801e20c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801e196:	4920      	ldr	r1, [pc, #128]	; (801e218 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801e198:	6809      	ldr	r1, [r1, #0]
 801e19a:	2900      	cmp	r1, #0
 801e19c:	d036      	beq.n	801e20c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801e19e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801e1a2:	2900      	cmp	r1, #0
 801e1a4:	d032      	beq.n	801e20c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801e1a6:	891a      	ldrh	r2, [r3, #8]
 801e1a8:	8958      	ldrh	r0, [r3, #10]
 801e1aa:	4350      	muls	r0, r2
 801e1ac:	7c5a      	ldrb	r2, [r3, #17]
 801e1ae:	7cdb      	ldrb	r3, [r3, #19]
 801e1b0:	0952      	lsrs	r2, r2, #5
 801e1b2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801e1b6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801e1ba:	2b0b      	cmp	r3, #11
 801e1bc:	bf18      	it	ne
 801e1be:	0040      	lslne	r0, r0, #1
 801e1c0:	3003      	adds	r0, #3
 801e1c2:	f020 0003 	bic.w	r0, r0, #3
 801e1c6:	4408      	add	r0, r1
 801e1c8:	4770      	bx	lr
 801e1ca:	4b14      	ldr	r3, [pc, #80]	; (801e21c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 801e1cc:	881b      	ldrh	r3, [r3, #0]
 801e1ce:	4403      	add	r3, r0
 801e1d0:	429a      	cmp	r2, r3
 801e1d2:	da1a      	bge.n	801e20a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801e1d4:	4b12      	ldr	r3, [pc, #72]	; (801e220 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 801e1d6:	1a10      	subs	r0, r2, r0
 801e1d8:	210e      	movs	r1, #14
 801e1da:	681b      	ldr	r3, [r3, #0]
 801e1dc:	fb01 3000 	mla	r0, r1, r0, r3
 801e1e0:	7b03      	ldrb	r3, [r0, #12]
 801e1e2:	f003 031f 	and.w	r3, r3, #31
 801e1e6:	2b0b      	cmp	r3, #11
 801e1e8:	d10b      	bne.n	801e202 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801e1ea:	8903      	ldrh	r3, [r0, #8]
 801e1ec:	8940      	ldrh	r0, [r0, #10]
 801e1ee:	4358      	muls	r0, r3
 801e1f0:	4b09      	ldr	r3, [pc, #36]	; (801e218 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801e1f2:	3003      	adds	r0, #3
 801e1f4:	6819      	ldr	r1, [r3, #0]
 801e1f6:	f020 0303 	bic.w	r3, r0, #3
 801e1fa:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801e1fe:	4418      	add	r0, r3
 801e200:	4770      	bx	lr
 801e202:	2b0d      	cmp	r3, #13
 801e204:	d101      	bne.n	801e20a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801e206:	300d      	adds	r0, #13
 801e208:	4770      	bx	lr
 801e20a:	2000      	movs	r0, #0
 801e20c:	4770      	bx	lr
 801e20e:	bf00      	nop
 801e210:	2400b650 	.word	0x2400b650
 801e214:	2400b658 	.word	0x2400b658
 801e218:	2400b634 	.word	0x2400b634
 801e21c:	2400b654 	.word	0x2400b654
 801e220:	2400b638 	.word	0x2400b638

0801e224 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801e224:	4b17      	ldr	r3, [pc, #92]	; (801e284 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801e226:	b510      	push	{r4, lr}
 801e228:	6819      	ldr	r1, [r3, #0]
 801e22a:	8803      	ldrh	r3, [r0, #0]
 801e22c:	b1e9      	cbz	r1, 801e26a <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801e22e:	4a16      	ldr	r2, [pc, #88]	; (801e288 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801e230:	8812      	ldrh	r2, [r2, #0]
 801e232:	429a      	cmp	r2, r3
 801e234:	d90a      	bls.n	801e24c <_ZNK8touchgfx6Bitmap9getFormatEv+0x28>
 801e236:	2214      	movs	r2, #20
 801e238:	fb02 1303 	mla	r3, r2, r3, r1
 801e23c:	7c58      	ldrb	r0, [r3, #17]
 801e23e:	0942      	lsrs	r2, r0, #5
 801e240:	7cd8      	ldrb	r0, [r3, #19]
 801e242:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801e246:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801e24a:	bd10      	pop	{r4, pc}
 801e24c:	490f      	ldr	r1, [pc, #60]	; (801e28c <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801e24e:	8809      	ldrh	r1, [r1, #0]
 801e250:	4411      	add	r1, r2
 801e252:	428b      	cmp	r3, r1
 801e254:	da09      	bge.n	801e26a <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801e256:	1a9b      	subs	r3, r3, r2
 801e258:	4a0d      	ldr	r2, [pc, #52]	; (801e290 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801e25a:	210e      	movs	r1, #14
 801e25c:	6812      	ldr	r2, [r2, #0]
 801e25e:	fb01 2303 	mla	r3, r1, r3, r2
 801e262:	7b18      	ldrb	r0, [r3, #12]
 801e264:	f000 001f 	and.w	r0, r0, #31
 801e268:	e7ef      	b.n	801e24a <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801e26a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801e26e:	4293      	cmp	r3, r2
 801e270:	d106      	bne.n	801e280 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801e272:	f7e5 ffb9 	bl	80041e8 <_ZN8touchgfx3HAL3lcdEv>
 801e276:	6803      	ldr	r3, [r0, #0]
 801e278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e27c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e27e:	4718      	bx	r3
 801e280:	2000      	movs	r0, #0
 801e282:	e7e2      	b.n	801e24a <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801e284:	2400b658 	.word	0x2400b658
 801e288:	2400b650 	.word	0x2400b650
 801e28c:	2400b654 	.word	0x2400b654
 801e290:	2400b638 	.word	0x2400b638

0801e294 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801e294:	2010      	movs	r0, #16
 801e296:	4770      	bx	lr

0801e298 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801e298:	2000      	movs	r0, #0
 801e29a:	4770      	bx	lr

0801e29c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801e29c:	2bff      	cmp	r3, #255	; 0xff
 801e29e:	d050      	beq.n	801e342 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801e2a0:	2a0b      	cmp	r2, #11
 801e2a2:	d04a      	beq.n	801e33a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801e2a4:	d80e      	bhi.n	801e2c4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801e2a6:	2a03      	cmp	r2, #3
 801e2a8:	d03f      	beq.n	801e32a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801e2aa:	d804      	bhi.n	801e2b6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e2ac:	2a01      	cmp	r2, #1
 801e2ae:	d03e      	beq.n	801e32e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801e2b0:	d93f      	bls.n	801e332 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801e2b2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801e2b4:	4770      	bx	lr
 801e2b6:	2a09      	cmp	r2, #9
 801e2b8:	d03f      	beq.n	801e33a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801e2ba:	d83c      	bhi.n	801e336 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801e2bc:	2a08      	cmp	r2, #8
 801e2be:	d03a      	beq.n	801e336 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801e2c0:	2000      	movs	r0, #0
 801e2c2:	4770      	bx	lr
 801e2c4:	2a2f      	cmp	r2, #47	; 0x2f
 801e2c6:	d024      	beq.n	801e312 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801e2c8:	d80d      	bhi.n	801e2e6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801e2ca:	2a2d      	cmp	r2, #45	; 0x2d
 801e2cc:	d014      	beq.n	801e2f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 801e2ce:	d826      	bhi.n	801e31e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801e2d0:	2a2c      	cmp	r2, #44	; 0x2c
 801e2d2:	d1f5      	bne.n	801e2c0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e2d4:	684b      	ldr	r3, [r1, #4]
 801e2d6:	781b      	ldrb	r3, [r3, #0]
 801e2d8:	2b01      	cmp	r3, #1
 801e2da:	d018      	beq.n	801e30e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801e2dc:	d323      	bcc.n	801e326 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801e2de:	2b02      	cmp	r3, #2
 801e2e0:	d1ee      	bne.n	801e2c0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e2e2:	6880      	ldr	r0, [r0, #8]
 801e2e4:	4770      	bx	lr
 801e2e6:	2a31      	cmp	r2, #49	; 0x31
 801e2e8:	d004      	beq.n	801e2f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801e2ea:	d328      	bcc.n	801e33e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801e2ec:	2a32      	cmp	r2, #50	; 0x32
 801e2ee:	d026      	beq.n	801e33e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801e2f0:	2a33      	cmp	r2, #51	; 0x33
 801e2f2:	d1e5      	bne.n	801e2c0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e2f4:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801e2f6:	4770      	bx	lr
 801e2f8:	684b      	ldr	r3, [r1, #4]
 801e2fa:	781b      	ldrb	r3, [r3, #0]
 801e2fc:	2b01      	cmp	r3, #1
 801e2fe:	d004      	beq.n	801e30a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e300:	d30b      	bcc.n	801e31a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801e302:	2b02      	cmp	r3, #2
 801e304:	d1dc      	bne.n	801e2c0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e306:	6900      	ldr	r0, [r0, #16]
 801e308:	4770      	bx	lr
 801e30a:	6a00      	ldr	r0, [r0, #32]
 801e30c:	4770      	bx	lr
 801e30e:	6980      	ldr	r0, [r0, #24]
 801e310:	4770      	bx	lr
 801e312:	684b      	ldr	r3, [r1, #4]
 801e314:	781b      	ldrb	r3, [r3, #0]
 801e316:	2b00      	cmp	r3, #0
 801e318:	d1d2      	bne.n	801e2c0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e31a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801e31c:	4770      	bx	lr
 801e31e:	684b      	ldr	r3, [r1, #4]
 801e320:	781b      	ldrb	r3, [r3, #0]
 801e322:	2b00      	cmp	r3, #0
 801e324:	d1cc      	bne.n	801e2c0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e326:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801e328:	4770      	bx	lr
 801e32a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801e32c:	4770      	bx	lr
 801e32e:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801e330:	4770      	bx	lr
 801e332:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801e334:	4770      	bx	lr
 801e336:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801e338:	4770      	bx	lr
 801e33a:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801e33c:	4770      	bx	lr
 801e33e:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801e340:	4770      	bx	lr
 801e342:	2a0b      	cmp	r2, #11
 801e344:	d049      	beq.n	801e3da <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801e346:	d80e      	bhi.n	801e366 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 801e348:	2a03      	cmp	r2, #3
 801e34a:	d040      	beq.n	801e3ce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801e34c:	d804      	bhi.n	801e358 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 801e34e:	2a01      	cmp	r2, #1
 801e350:	d03f      	beq.n	801e3d2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801e352:	d940      	bls.n	801e3d6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801e354:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801e356:	4770      	bx	lr
 801e358:	2a09      	cmp	r2, #9
 801e35a:	d03e      	beq.n	801e3da <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801e35c:	d801      	bhi.n	801e362 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 801e35e:	2a08      	cmp	r2, #8
 801e360:	d1ae      	bne.n	801e2c0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e362:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801e364:	4770      	bx	lr
 801e366:	2a2f      	cmp	r2, #47	; 0x2f
 801e368:	d024      	beq.n	801e3b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801e36a:	d80d      	bhi.n	801e388 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801e36c:	2a2d      	cmp	r2, #45	; 0x2d
 801e36e:	d014      	beq.n	801e39a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 801e370:	d826      	bhi.n	801e3c0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801e372:	2a2c      	cmp	r2, #44	; 0x2c
 801e374:	d1a4      	bne.n	801e2c0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e376:	684b      	ldr	r3, [r1, #4]
 801e378:	781b      	ldrb	r3, [r3, #0]
 801e37a:	2b01      	cmp	r3, #1
 801e37c:	d018      	beq.n	801e3b0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 801e37e:	d324      	bcc.n	801e3ca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801e380:	2b02      	cmp	r3, #2
 801e382:	d19d      	bne.n	801e2c0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e384:	68c0      	ldr	r0, [r0, #12]
 801e386:	4770      	bx	lr
 801e388:	2a31      	cmp	r2, #49	; 0x31
 801e38a:	d004      	beq.n	801e396 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 801e38c:	d327      	bcc.n	801e3de <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801e38e:	2a32      	cmp	r2, #50	; 0x32
 801e390:	d025      	beq.n	801e3de <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801e392:	2a33      	cmp	r2, #51	; 0x33
 801e394:	d194      	bne.n	801e2c0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e396:	6f40      	ldr	r0, [r0, #116]	; 0x74
 801e398:	4770      	bx	lr
 801e39a:	684b      	ldr	r3, [r1, #4]
 801e39c:	781b      	ldrb	r3, [r3, #0]
 801e39e:	2b01      	cmp	r3, #1
 801e3a0:	d004      	beq.n	801e3ac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801e3a2:	d30b      	bcc.n	801e3bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801e3a4:	2b02      	cmp	r3, #2
 801e3a6:	d18b      	bne.n	801e2c0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e3a8:	6940      	ldr	r0, [r0, #20]
 801e3aa:	4770      	bx	lr
 801e3ac:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801e3ae:	4770      	bx	lr
 801e3b0:	69c0      	ldr	r0, [r0, #28]
 801e3b2:	4770      	bx	lr
 801e3b4:	684b      	ldr	r3, [r1, #4]
 801e3b6:	781b      	ldrb	r3, [r3, #0]
 801e3b8:	2b00      	cmp	r3, #0
 801e3ba:	d181      	bne.n	801e2c0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e3bc:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801e3be:	4770      	bx	lr
 801e3c0:	684b      	ldr	r3, [r1, #4]
 801e3c2:	781b      	ldrb	r3, [r3, #0]
 801e3c4:	2b00      	cmp	r3, #0
 801e3c6:	f47f af7b 	bne.w	801e2c0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e3ca:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801e3cc:	4770      	bx	lr
 801e3ce:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801e3d0:	4770      	bx	lr
 801e3d2:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801e3d4:	4770      	bx	lr
 801e3d6:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801e3d8:	4770      	bx	lr
 801e3da:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801e3dc:	4770      	bx	lr
 801e3de:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 801e3e0:	4770      	bx	lr

0801e3e2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e3e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3e6:	b087      	sub	sp, #28
 801e3e8:	9815      	ldr	r0, [sp, #84]	; 0x54
 801e3ea:	9205      	str	r2, [sp, #20]
 801e3ec:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801e3f0:	9101      	str	r1, [sp, #4]
 801e3f2:	9202      	str	r2, [sp, #8]
 801e3f4:	6841      	ldr	r1, [r0, #4]
 801e3f6:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801e3fa:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801e3fe:	fb01 2404 	mla	r4, r1, r4, r2
 801e402:	6802      	ldr	r2, [r0, #0]
 801e404:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e408:	f8de 2000 	ldr.w	r2, [lr]
 801e40c:	9203      	str	r2, [sp, #12]
 801e40e:	f8de 2004 	ldr.w	r2, [lr, #4]
 801e412:	3204      	adds	r2, #4
 801e414:	9204      	str	r2, [sp, #16]
 801e416:	9a02      	ldr	r2, [sp, #8]
 801e418:	43d6      	mvns	r6, r2
 801e41a:	b2f6      	uxtb	r6, r6
 801e41c:	9a01      	ldr	r2, [sp, #4]
 801e41e:	2a00      	cmp	r2, #0
 801e420:	dc03      	bgt.n	801e42a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801e422:	9a05      	ldr	r2, [sp, #20]
 801e424:	2a00      	cmp	r2, #0
 801e426:	f340 8129 	ble.w	801e67c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801e42a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e42c:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801e430:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801e434:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e436:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801e43a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e43e:	2b00      	cmp	r3, #0
 801e440:	dd0e      	ble.n	801e460 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e442:	1408      	asrs	r0, r1, #16
 801e444:	d405      	bmi.n	801e452 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e446:	4560      	cmp	r0, ip
 801e448:	da03      	bge.n	801e452 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e44a:	1410      	asrs	r0, r2, #16
 801e44c:	d401      	bmi.n	801e452 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e44e:	42b8      	cmp	r0, r7
 801e450:	db07      	blt.n	801e462 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801e452:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e454:	3b01      	subs	r3, #1
 801e456:	3402      	adds	r4, #2
 801e458:	4401      	add	r1, r0
 801e45a:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e45c:	4402      	add	r2, r0
 801e45e:	e7ee      	b.n	801e43e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801e460:	d071      	beq.n	801e546 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801e462:	1e58      	subs	r0, r3, #1
 801e464:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801e466:	fb05 1500 	mla	r5, r5, r0, r1
 801e46a:	142d      	asrs	r5, r5, #16
 801e46c:	d45f      	bmi.n	801e52e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e46e:	4565      	cmp	r5, ip
 801e470:	da5d      	bge.n	801e52e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e472:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801e474:	fb05 2000 	mla	r0, r5, r0, r2
 801e478:	1400      	asrs	r0, r0, #16
 801e47a:	d458      	bmi.n	801e52e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e47c:	42b8      	cmp	r0, r7
 801e47e:	da56      	bge.n	801e52e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e480:	4699      	mov	r9, r3
 801e482:	46a2      	mov	sl, r4
 801e484:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801e488:	f1b9 0f00 	cmp.w	r9, #0
 801e48c:	dd57      	ble.n	801e53e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801e48e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801e492:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801e496:	9803      	ldr	r0, [sp, #12]
 801e498:	140d      	asrs	r5, r1, #16
 801e49a:	f109 39ff 	add.w	r9, r9, #4294967295
 801e49e:	fb07 000c 	mla	r0, r7, ip, r0
 801e4a2:	5d40      	ldrb	r0, [r0, r5]
 801e4a4:	9d04      	ldr	r5, [sp, #16]
 801e4a6:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801e4aa:	f8ba 5000 	ldrh.w	r5, [sl]
 801e4ae:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801e4b2:	122f      	asrs	r7, r5, #8
 801e4b4:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801e4b8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e4bc:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e4c0:	00ed      	lsls	r5, r5, #3
 801e4c2:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801e4c6:	fb17 f706 	smulbb	r7, r7, r6
 801e4ca:	b2ed      	uxtb	r5, r5
 801e4cc:	fb18 f806 	smulbb	r8, r8, r6
 801e4d0:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801e4d4:	10c7      	asrs	r7, r0, #3
 801e4d6:	fb15 f506 	smulbb	r5, r5, r6
 801e4da:	00c0      	lsls	r0, r0, #3
 801e4dc:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e4e0:	fa1f fc8c 	uxth.w	ip, ip
 801e4e4:	b2c0      	uxtb	r0, r0
 801e4e6:	fb07 870b 	mla	r7, r7, fp, r8
 801e4ea:	fb00 500b 	mla	r0, r0, fp, r5
 801e4ee:	f10c 0501 	add.w	r5, ip, #1
 801e4f2:	b2bf      	uxth	r7, r7
 801e4f4:	b280      	uxth	r0, r0
 801e4f6:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801e4fa:	f107 0801 	add.w	r8, r7, #1
 801e4fe:	1c45      	adds	r5, r0, #1
 801e500:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801e504:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801e508:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801e50c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e50e:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801e512:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801e516:	4401      	add	r1, r0
 801e518:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801e51c:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e51e:	ea45 0c0c 	orr.w	ip, r5, ip
 801e522:	4402      	add	r2, r0
 801e524:	ea4c 0c08 	orr.w	ip, ip, r8
 801e528:	f82a cb02 	strh.w	ip, [sl], #2
 801e52c:	e7ac      	b.n	801e488 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801e52e:	f04f 0800 	mov.w	r8, #0
 801e532:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801e536:	eb03 0008 	add.w	r0, r3, r8
 801e53a:	2800      	cmp	r0, #0
 801e53c:	dc41      	bgt.n	801e5c2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801e53e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e542:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e546:	9b01      	ldr	r3, [sp, #4]
 801e548:	2b00      	cmp	r3, #0
 801e54a:	f340 8097 	ble.w	801e67c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801e54e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e552:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e554:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e558:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e55c:	eef0 6a62 	vmov.f32	s13, s5
 801e560:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e564:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e568:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e56c:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801e570:	eef0 6a43 	vmov.f32	s13, s6
 801e574:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e578:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801e57c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e580:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e584:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e588:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e58c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e590:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e594:	ee12 2a90 	vmov	r2, s5
 801e598:	eef0 2a47 	vmov.f32	s5, s14
 801e59c:	fb92 f3f3 	sdiv	r3, r2, r3
 801e5a0:	ee13 2a10 	vmov	r2, s6
 801e5a4:	9313      	str	r3, [sp, #76]	; 0x4c
 801e5a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e5a8:	eeb0 3a67 	vmov.f32	s6, s15
 801e5ac:	fb92 f3f3 	sdiv	r3, r2, r3
 801e5b0:	9314      	str	r3, [sp, #80]	; 0x50
 801e5b2:	9b01      	ldr	r3, [sp, #4]
 801e5b4:	9a05      	ldr	r2, [sp, #20]
 801e5b6:	3b01      	subs	r3, #1
 801e5b8:	9301      	str	r3, [sp, #4]
 801e5ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e5bc:	bf08      	it	eq
 801e5be:	4613      	moveq	r3, r2
 801e5c0:	e72c      	b.n	801e41c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801e5c2:	140f      	asrs	r7, r1, #16
 801e5c4:	d453      	bmi.n	801e66e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801e5c6:	f8de 5008 	ldr.w	r5, [lr, #8]
 801e5ca:	42bd      	cmp	r5, r7
 801e5cc:	dd4f      	ble.n	801e66e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801e5ce:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801e5d2:	d44c      	bmi.n	801e66e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801e5d4:	f8de 000c 	ldr.w	r0, [lr, #12]
 801e5d8:	4560      	cmp	r0, ip
 801e5da:	dd48      	ble.n	801e66e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801e5dc:	9803      	ldr	r0, [sp, #12]
 801e5de:	b22d      	sxth	r5, r5
 801e5e0:	fb0c 0505 	mla	r5, ip, r5, r0
 801e5e4:	5de8      	ldrb	r0, [r5, r7]
 801e5e6:	9d04      	ldr	r5, [sp, #16]
 801e5e8:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801e5ec:	f06f 0501 	mvn.w	r5, #1
 801e5f0:	fb05 fb08 	mul.w	fp, r5, r8
 801e5f4:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801e5f8:	f834 500b 	ldrh.w	r5, [r4, fp]
 801e5fc:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e600:	122f      	asrs	r7, r5, #8
 801e602:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801e606:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e60a:	00ed      	lsls	r5, r5, #3
 801e60c:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801e610:	fb17 f706 	smulbb	r7, r7, r6
 801e614:	b2ed      	uxtb	r5, r5
 801e616:	fb19 f906 	smulbb	r9, r9, r6
 801e61a:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801e61e:	10c7      	asrs	r7, r0, #3
 801e620:	fb15 f506 	smulbb	r5, r5, r6
 801e624:	00c0      	lsls	r0, r0, #3
 801e626:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e62a:	fa1f fc8c 	uxth.w	ip, ip
 801e62e:	b2c0      	uxtb	r0, r0
 801e630:	fb07 970a 	mla	r7, r7, sl, r9
 801e634:	fb00 500a 	mla	r0, r0, sl, r5
 801e638:	f10c 0501 	add.w	r5, ip, #1
 801e63c:	b2bf      	uxth	r7, r7
 801e63e:	b280      	uxth	r0, r0
 801e640:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801e644:	f107 0901 	add.w	r9, r7, #1
 801e648:	1c45      	adds	r5, r0, #1
 801e64a:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801e64e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801e652:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801e656:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801e65a:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801e65e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801e662:	ea45 0c0c 	orr.w	ip, r5, ip
 801e666:	ea4c 0c09 	orr.w	ip, ip, r9
 801e66a:	f824 c00b 	strh.w	ip, [r4, fp]
 801e66e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e670:	f108 38ff 	add.w	r8, r8, #4294967295
 801e674:	4401      	add	r1, r0
 801e676:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e678:	4402      	add	r2, r0
 801e67a:	e75c      	b.n	801e536 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801e67c:	b007      	add	sp, #28
 801e67e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e682 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e682:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e686:	b085      	sub	sp, #20
 801e688:	4693      	mov	fp, r2
 801e68a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e68e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801e690:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801e692:	6870      	ldr	r0, [r6, #4]
 801e694:	9100      	str	r1, [sp, #0]
 801e696:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801e69a:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801e69e:	fb00 2404 	mla	r4, r0, r4, r2
 801e6a2:	6832      	ldr	r2, [r6, #0]
 801e6a4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e6a8:	682a      	ldr	r2, [r5, #0]
 801e6aa:	9201      	str	r2, [sp, #4]
 801e6ac:	686a      	ldr	r2, [r5, #4]
 801e6ae:	3204      	adds	r2, #4
 801e6b0:	9202      	str	r2, [sp, #8]
 801e6b2:	9a00      	ldr	r2, [sp, #0]
 801e6b4:	2a00      	cmp	r2, #0
 801e6b6:	dc03      	bgt.n	801e6c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801e6b8:	f1bb 0f00 	cmp.w	fp, #0
 801e6bc:	f340 80a0 	ble.w	801e800 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801e6c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e6c2:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801e6c6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e6ca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e6cc:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801e6d0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e6d4:	2b00      	cmp	r3, #0
 801e6d6:	dd0c      	ble.n	801e6f2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e6d8:	1406      	asrs	r6, r0, #16
 801e6da:	d405      	bmi.n	801e6e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e6dc:	454e      	cmp	r6, r9
 801e6de:	da03      	bge.n	801e6e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e6e0:	1416      	asrs	r6, r2, #16
 801e6e2:	d401      	bmi.n	801e6e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e6e4:	4546      	cmp	r6, r8
 801e6e6:	db05      	blt.n	801e6f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e6e8:	4470      	add	r0, lr
 801e6ea:	4462      	add	r2, ip
 801e6ec:	3b01      	subs	r3, #1
 801e6ee:	3402      	adds	r4, #2
 801e6f0:	e7f0      	b.n	801e6d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801e6f2:	d00f      	beq.n	801e714 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e6f4:	1e5e      	subs	r6, r3, #1
 801e6f6:	fb0e 0706 	mla	r7, lr, r6, r0
 801e6fa:	143f      	asrs	r7, r7, #16
 801e6fc:	d541      	bpl.n	801e782 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801e6fe:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801e702:	4698      	mov	r8, r3
 801e704:	9603      	str	r6, [sp, #12]
 801e706:	f1b8 0f00 	cmp.w	r8, #0
 801e70a:	dc59      	bgt.n	801e7c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801e70c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e710:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e714:	9b00      	ldr	r3, [sp, #0]
 801e716:	2b00      	cmp	r3, #0
 801e718:	dd72      	ble.n	801e800 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801e71a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e71e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e720:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e724:	eeb0 6a62 	vmov.f32	s12, s5
 801e728:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e72c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e730:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e734:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801e738:	eeb0 6a43 	vmov.f32	s12, s6
 801e73c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e740:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801e744:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e748:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e74c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e750:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e754:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e758:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e75c:	ee12 2a90 	vmov	r2, s5
 801e760:	eef0 2a47 	vmov.f32	s5, s14
 801e764:	fb92 fef3 	sdiv	lr, r2, r3
 801e768:	ee13 2a10 	vmov	r2, s6
 801e76c:	eeb0 3a67 	vmov.f32	s6, s15
 801e770:	fb92 fcf3 	sdiv	ip, r2, r3
 801e774:	9b00      	ldr	r3, [sp, #0]
 801e776:	3b01      	subs	r3, #1
 801e778:	9300      	str	r3, [sp, #0]
 801e77a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e77c:	bf08      	it	eq
 801e77e:	465b      	moveq	r3, fp
 801e780:	e797      	b.n	801e6b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801e782:	454f      	cmp	r7, r9
 801e784:	dabb      	bge.n	801e6fe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e786:	fb0c 2606 	mla	r6, ip, r6, r2
 801e78a:	1436      	asrs	r6, r6, #16
 801e78c:	d4b7      	bmi.n	801e6fe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e78e:	4546      	cmp	r6, r8
 801e790:	dab5      	bge.n	801e6fe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e792:	461e      	mov	r6, r3
 801e794:	46a0      	mov	r8, r4
 801e796:	2e00      	cmp	r6, #0
 801e798:	ddb8      	ble.n	801e70c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801e79a:	1417      	asrs	r7, r2, #16
 801e79c:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801e7a0:	9901      	ldr	r1, [sp, #4]
 801e7a2:	ea4f 4920 	mov.w	r9, r0, asr #16
 801e7a6:	4462      	add	r2, ip
 801e7a8:	4470      	add	r0, lr
 801e7aa:	fb0a 1707 	mla	r7, sl, r7, r1
 801e7ae:	9902      	ldr	r1, [sp, #8]
 801e7b0:	3e01      	subs	r6, #1
 801e7b2:	f817 7009 	ldrb.w	r7, [r7, r9]
 801e7b6:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801e7ba:	f828 7b02 	strh.w	r7, [r8], #2
 801e7be:	e7ea      	b.n	801e796 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801e7c0:	ea5f 4920 	movs.w	r9, r0, asr #16
 801e7c4:	d417      	bmi.n	801e7f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801e7c6:	68ae      	ldr	r6, [r5, #8]
 801e7c8:	454e      	cmp	r6, r9
 801e7ca:	dd14      	ble.n	801e7f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801e7cc:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801e7d0:	d411      	bmi.n	801e7f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801e7d2:	68ef      	ldr	r7, [r5, #12]
 801e7d4:	4557      	cmp	r7, sl
 801e7d6:	dd0e      	ble.n	801e7f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801e7d8:	9f01      	ldr	r7, [sp, #4]
 801e7da:	b236      	sxth	r6, r6
 801e7dc:	f06f 0101 	mvn.w	r1, #1
 801e7e0:	fb0a 7606 	mla	r6, sl, r6, r7
 801e7e4:	9f02      	ldr	r7, [sp, #8]
 801e7e6:	f816 6009 	ldrb.w	r6, [r6, r9]
 801e7ea:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801e7ee:	fb01 f608 	mul.w	r6, r1, r8
 801e7f2:	9903      	ldr	r1, [sp, #12]
 801e7f4:	538f      	strh	r7, [r1, r6]
 801e7f6:	4470      	add	r0, lr
 801e7f8:	4462      	add	r2, ip
 801e7fa:	f108 38ff 	add.w	r8, r8, #4294967295
 801e7fe:	e782      	b.n	801e706 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801e800:	b005      	add	sp, #20
 801e802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e806 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e806:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e80a:	b087      	sub	sp, #28
 801e80c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e80e:	9205      	str	r2, [sp, #20]
 801e810:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801e814:	9102      	str	r1, [sp, #8]
 801e816:	9203      	str	r2, [sp, #12]
 801e818:	6861      	ldr	r1, [r4, #4]
 801e81a:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801e81e:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801e822:	fb01 2000 	mla	r0, r1, r0, r2
 801e826:	6822      	ldr	r2, [r4, #0]
 801e828:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801e82c:	9200      	str	r2, [sp, #0]
 801e82e:	f8dc 2000 	ldr.w	r2, [ip]
 801e832:	9204      	str	r2, [sp, #16]
 801e834:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801e838:	3204      	adds	r2, #4
 801e83a:	9201      	str	r2, [sp, #4]
 801e83c:	9a03      	ldr	r2, [sp, #12]
 801e83e:	43d5      	mvns	r5, r2
 801e840:	b2ed      	uxtb	r5, r5
 801e842:	9a02      	ldr	r2, [sp, #8]
 801e844:	2a00      	cmp	r2, #0
 801e846:	dc03      	bgt.n	801e850 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801e848:	9a05      	ldr	r2, [sp, #20]
 801e84a:	2a00      	cmp	r2, #0
 801e84c:	f340 812c 	ble.w	801eaa8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801e850:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e852:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801e856:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801e85a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e85c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801e860:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e864:	2b00      	cmp	r3, #0
 801e866:	dd10      	ble.n	801e88a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801e868:	140c      	asrs	r4, r1, #16
 801e86a:	d405      	bmi.n	801e878 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e86c:	4574      	cmp	r4, lr
 801e86e:	da03      	bge.n	801e878 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e870:	1414      	asrs	r4, r2, #16
 801e872:	d401      	bmi.n	801e878 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e874:	42bc      	cmp	r4, r7
 801e876:	db09      	blt.n	801e88c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801e878:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e87a:	3b01      	subs	r3, #1
 801e87c:	9800      	ldr	r0, [sp, #0]
 801e87e:	4421      	add	r1, r4
 801e880:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e882:	3002      	adds	r0, #2
 801e884:	4422      	add	r2, r4
 801e886:	9000      	str	r0, [sp, #0]
 801e888:	e7ec      	b.n	801e864 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801e88a:	d071      	beq.n	801e970 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801e88c:	1e5c      	subs	r4, r3, #1
 801e88e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801e890:	fb06 1604 	mla	r6, r6, r4, r1
 801e894:	1436      	asrs	r6, r6, #16
 801e896:	d45d      	bmi.n	801e954 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e898:	4576      	cmp	r6, lr
 801e89a:	da5b      	bge.n	801e954 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e89c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801e89e:	fb06 2404 	mla	r4, r6, r4, r2
 801e8a2:	1424      	asrs	r4, r4, #16
 801e8a4:	d456      	bmi.n	801e954 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e8a6:	42bc      	cmp	r4, r7
 801e8a8:	da54      	bge.n	801e954 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e8aa:	4698      	mov	r8, r3
 801e8ac:	f8dd 9000 	ldr.w	r9, [sp]
 801e8b0:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801e8b4:	f1b8 0f00 	cmp.w	r8, #0
 801e8b8:	dd54      	ble.n	801e964 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801e8ba:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801e8be:	1414      	asrs	r4, r2, #16
 801e8c0:	9804      	ldr	r0, [sp, #16]
 801e8c2:	140e      	asrs	r6, r1, #16
 801e8c4:	f108 38ff 	add.w	r8, r8, #4294967295
 801e8c8:	fb07 0404 	mla	r4, r7, r4, r0
 801e8cc:	9801      	ldr	r0, [sp, #4]
 801e8ce:	f814 e006 	ldrb.w	lr, [r4, r6]
 801e8d2:	f8b9 4000 	ldrh.w	r4, [r9]
 801e8d6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801e8da:	1227      	asrs	r7, r4, #8
 801e8dc:	eb00 0b0e 	add.w	fp, r0, lr
 801e8e0:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801e8e4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e8e8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e8ea:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801e8ee:	f89b b001 	ldrb.w	fp, [fp, #1]
 801e8f2:	4401      	add	r1, r0
 801e8f4:	fb16 f60a 	smulbb	r6, r6, sl
 801e8f8:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e8fa:	fb1b fb0a 	smulbb	fp, fp, sl
 801e8fe:	fb07 6705 	mla	r7, r7, r5, r6
 801e902:	10e6      	asrs	r6, r4, #3
 801e904:	00e4      	lsls	r4, r4, #3
 801e906:	4402      	add	r2, r0
 801e908:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e90c:	b2bf      	uxth	r7, r7
 801e90e:	b2e4      	uxtb	r4, r4
 801e910:	fb06 b605 	mla	r6, r6, r5, fp
 801e914:	fb14 f405 	smulbb	r4, r4, r5
 801e918:	b2b6      	uxth	r6, r6
 801e91a:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801e91e:	1c7c      	adds	r4, r7, #1
 801e920:	f106 0b01 	add.w	fp, r6, #1
 801e924:	fa1f fe8e 	uxth.w	lr, lr
 801e928:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801e92c:	f10e 0401 	add.w	r4, lr, #1
 801e930:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801e934:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801e938:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801e93c:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801e940:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801e944:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801e948:	4327      	orrs	r7, r4
 801e94a:	ea47 070b 	orr.w	r7, r7, fp
 801e94e:	f829 7b02 	strh.w	r7, [r9], #2
 801e952:	e7af      	b.n	801e8b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801e954:	f04f 0e00 	mov.w	lr, #0
 801e958:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801e95c:	eb03 040e 	add.w	r4, r3, lr
 801e960:	2c00      	cmp	r4, #0
 801e962:	dc43      	bgt.n	801e9ec <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801e964:	9a00      	ldr	r2, [sp, #0]
 801e966:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e96a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801e96e:	9300      	str	r3, [sp, #0]
 801e970:	9b02      	ldr	r3, [sp, #8]
 801e972:	2b00      	cmp	r3, #0
 801e974:	f340 8098 	ble.w	801eaa8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801e978:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e97c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e97e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e982:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e986:	eef0 6a62 	vmov.f32	s13, s5
 801e98a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e98e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e992:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e996:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801e99a:	eef0 6a43 	vmov.f32	s13, s6
 801e99e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e9a2:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801e9a6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e9aa:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e9ae:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e9b2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e9b6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e9ba:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e9be:	ee12 2a90 	vmov	r2, s5
 801e9c2:	eef0 2a47 	vmov.f32	s5, s14
 801e9c6:	fb92 f3f3 	sdiv	r3, r2, r3
 801e9ca:	ee13 2a10 	vmov	r2, s6
 801e9ce:	9313      	str	r3, [sp, #76]	; 0x4c
 801e9d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e9d2:	eeb0 3a67 	vmov.f32	s6, s15
 801e9d6:	fb92 f3f3 	sdiv	r3, r2, r3
 801e9da:	9314      	str	r3, [sp, #80]	; 0x50
 801e9dc:	9b02      	ldr	r3, [sp, #8]
 801e9de:	9a05      	ldr	r2, [sp, #20]
 801e9e0:	3b01      	subs	r3, #1
 801e9e2:	9302      	str	r3, [sp, #8]
 801e9e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e9e6:	bf08      	it	eq
 801e9e8:	4613      	moveq	r3, r2
 801e9ea:	e72a      	b.n	801e842 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801e9ec:	140f      	asrs	r7, r1, #16
 801e9ee:	d454      	bmi.n	801ea9a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801e9f0:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801e9f4:	42be      	cmp	r6, r7
 801e9f6:	dd50      	ble.n	801ea9a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801e9f8:	ea5f 4822 	movs.w	r8, r2, asr #16
 801e9fc:	d44d      	bmi.n	801ea9a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801e9fe:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801ea02:	4544      	cmp	r4, r8
 801ea04:	dd49      	ble.n	801ea9a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801ea06:	9c04      	ldr	r4, [sp, #16]
 801ea08:	b236      	sxth	r6, r6
 801ea0a:	f06f 0001 	mvn.w	r0, #1
 801ea0e:	fb08 4606 	mla	r6, r8, r6, r4
 801ea12:	9c01      	ldr	r4, [sp, #4]
 801ea14:	fb00 fa0e 	mul.w	sl, r0, lr
 801ea18:	9800      	ldr	r0, [sp, #0]
 801ea1a:	f816 8007 	ldrb.w	r8, [r6, r7]
 801ea1e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801ea22:	eb04 0b08 	add.w	fp, r4, r8
 801ea26:	f830 400a 	ldrh.w	r4, [r0, sl]
 801ea2a:	9801      	ldr	r0, [sp, #4]
 801ea2c:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801ea30:	1227      	asrs	r7, r4, #8
 801ea32:	f89b b001 	ldrb.w	fp, [fp, #1]
 801ea36:	fb16 f609 	smulbb	r6, r6, r9
 801ea3a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ea3e:	f810 8008 	ldrb.w	r8, [r0, r8]
 801ea42:	fb1b fb09 	smulbb	fp, fp, r9
 801ea46:	fb07 6705 	mla	r7, r7, r5, r6
 801ea4a:	10e6      	asrs	r6, r4, #3
 801ea4c:	00e4      	lsls	r4, r4, #3
 801ea4e:	9800      	ldr	r0, [sp, #0]
 801ea50:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ea54:	b2bf      	uxth	r7, r7
 801ea56:	b2e4      	uxtb	r4, r4
 801ea58:	fb06 b605 	mla	r6, r6, r5, fp
 801ea5c:	fb14 f405 	smulbb	r4, r4, r5
 801ea60:	b2b6      	uxth	r6, r6
 801ea62:	fb08 4809 	mla	r8, r8, r9, r4
 801ea66:	1c7c      	adds	r4, r7, #1
 801ea68:	f106 0b01 	add.w	fp, r6, #1
 801ea6c:	fa1f f888 	uxth.w	r8, r8
 801ea70:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801ea74:	f108 0401 	add.w	r4, r8, #1
 801ea78:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801ea7c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801ea80:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801ea84:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801ea88:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801ea8c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801ea90:	4327      	orrs	r7, r4
 801ea92:	ea47 070b 	orr.w	r7, r7, fp
 801ea96:	f820 700a 	strh.w	r7, [r0, sl]
 801ea9a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801ea9c:	f10e 3eff 	add.w	lr, lr, #4294967295
 801eaa0:	4401      	add	r1, r0
 801eaa2:	9814      	ldr	r0, [sp, #80]	; 0x50
 801eaa4:	4402      	add	r2, r0
 801eaa6:	e759      	b.n	801e95c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801eaa8:	b007      	add	sp, #28
 801eaaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801eab0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801eab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eab4:	b085      	sub	sp, #20
 801eab6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801eaba:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801eabc:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801eabe:	9203      	str	r2, [sp, #12]
 801eac0:	6870      	ldr	r0, [r6, #4]
 801eac2:	686f      	ldr	r7, [r5, #4]
 801eac4:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 801eac8:	3704      	adds	r7, #4
 801eaca:	9101      	str	r1, [sp, #4]
 801eacc:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801ead0:	fb00 2404 	mla	r4, r0, r4, r2
 801ead4:	6832      	ldr	r2, [r6, #0]
 801ead6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801eada:	682a      	ldr	r2, [r5, #0]
 801eadc:	9202      	str	r2, [sp, #8]
 801eade:	9a01      	ldr	r2, [sp, #4]
 801eae0:	2a00      	cmp	r2, #0
 801eae2:	dc03      	bgt.n	801eaec <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801eae4:	9a03      	ldr	r2, [sp, #12]
 801eae6:	2a00      	cmp	r2, #0
 801eae8:	f340 80cc 	ble.w	801ec84 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801eaec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801eaee:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801eaf2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801eaf6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801eaf8:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801eafc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801eb00:	2b00      	cmp	r3, #0
 801eb02:	dd0d      	ble.n	801eb20 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801eb04:	1406      	asrs	r6, r0, #16
 801eb06:	d405      	bmi.n	801eb14 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801eb08:	454e      	cmp	r6, r9
 801eb0a:	da03      	bge.n	801eb14 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801eb0c:	1416      	asrs	r6, r2, #16
 801eb0e:	d401      	bmi.n	801eb14 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801eb10:	4546      	cmp	r6, r8
 801eb12:	db06      	blt.n	801eb22 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801eb14:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801eb16:	4460      	add	r0, ip
 801eb18:	3b01      	subs	r3, #1
 801eb1a:	3402      	adds	r4, #2
 801eb1c:	4432      	add	r2, r6
 801eb1e:	e7ef      	b.n	801eb00 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801eb20:	d00f      	beq.n	801eb42 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801eb22:	1e5e      	subs	r6, r3, #1
 801eb24:	fb0c 0e06 	mla	lr, ip, r6, r0
 801eb28:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801eb2c:	d543      	bpl.n	801ebb6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801eb2e:	4698      	mov	r8, r3
 801eb30:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801eb34:	f1b8 0f00 	cmp.w	r8, #0
 801eb38:	dc71      	bgt.n	801ec1e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801eb3a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801eb3e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801eb42:	9b01      	ldr	r3, [sp, #4]
 801eb44:	2b00      	cmp	r3, #0
 801eb46:	f340 809d 	ble.w	801ec84 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801eb4a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801eb4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801eb50:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801eb54:	eeb0 6a62 	vmov.f32	s12, s5
 801eb58:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801eb5c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801eb60:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eb64:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801eb68:	eeb0 6a43 	vmov.f32	s12, s6
 801eb6c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eb70:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801eb74:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801eb78:	ee61 7a27 	vmul.f32	s15, s2, s15
 801eb7c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801eb80:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801eb84:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801eb88:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801eb8c:	ee12 2a90 	vmov	r2, s5
 801eb90:	eef0 2a47 	vmov.f32	s5, s14
 801eb94:	fb92 fcf3 	sdiv	ip, r2, r3
 801eb98:	ee13 2a10 	vmov	r2, s6
 801eb9c:	eeb0 3a67 	vmov.f32	s6, s15
 801eba0:	fb92 f3f3 	sdiv	r3, r2, r3
 801eba4:	9312      	str	r3, [sp, #72]	; 0x48
 801eba6:	9b01      	ldr	r3, [sp, #4]
 801eba8:	9a03      	ldr	r2, [sp, #12]
 801ebaa:	3b01      	subs	r3, #1
 801ebac:	9301      	str	r3, [sp, #4]
 801ebae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ebb0:	bf08      	it	eq
 801ebb2:	4613      	moveq	r3, r2
 801ebb4:	e793      	b.n	801eade <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801ebb6:	45ce      	cmp	lr, r9
 801ebb8:	dab9      	bge.n	801eb2e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801ebba:	9912      	ldr	r1, [sp, #72]	; 0x48
 801ebbc:	fb01 2606 	mla	r6, r1, r6, r2
 801ebc0:	1436      	asrs	r6, r6, #16
 801ebc2:	d4b4      	bmi.n	801eb2e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801ebc4:	4546      	cmp	r6, r8
 801ebc6:	dab2      	bge.n	801eb2e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801ebc8:	4698      	mov	r8, r3
 801ebca:	46a2      	mov	sl, r4
 801ebcc:	f1b8 0f00 	cmp.w	r8, #0
 801ebd0:	ddb3      	ble.n	801eb3a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801ebd2:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801ebd6:	1416      	asrs	r6, r2, #16
 801ebd8:	9902      	ldr	r1, [sp, #8]
 801ebda:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801ebde:	f108 38ff 	add.w	r8, r8, #4294967295
 801ebe2:	4460      	add	r0, ip
 801ebe4:	fb09 1606 	mla	r6, r9, r6, r1
 801ebe8:	4928      	ldr	r1, [pc, #160]	; (801ec8c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801ebea:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801ebee:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801ebf2:	eb07 0b0e 	add.w	fp, r7, lr
 801ebf6:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801ebfa:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801ebfe:	00f6      	lsls	r6, r6, #3
 801ec00:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801ec04:	9912      	ldr	r1, [sp, #72]	; 0x48
 801ec06:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801ec0a:	440a      	add	r2, r1
 801ec0c:	ea49 0606 	orr.w	r6, r9, r6
 801ec10:	f817 900e 	ldrb.w	r9, [r7, lr]
 801ec14:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801ec18:	f82a 6b02 	strh.w	r6, [sl], #2
 801ec1c:	e7d6      	b.n	801ebcc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801ec1e:	ea5f 4920 	movs.w	r9, r0, asr #16
 801ec22:	d429      	bmi.n	801ec78 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801ec24:	68ae      	ldr	r6, [r5, #8]
 801ec26:	454e      	cmp	r6, r9
 801ec28:	dd26      	ble.n	801ec78 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801ec2a:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801ec2e:	d423      	bmi.n	801ec78 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801ec30:	68e9      	ldr	r1, [r5, #12]
 801ec32:	4559      	cmp	r1, fp
 801ec34:	dd20      	ble.n	801ec78 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801ec36:	fa0f fe86 	sxth.w	lr, r6
 801ec3a:	9902      	ldr	r1, [sp, #8]
 801ec3c:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801ec40:	f06f 0101 	mvn.w	r1, #1
 801ec44:	f81e e009 	ldrb.w	lr, [lr, r9]
 801ec48:	fb01 f908 	mul.w	r9, r1, r8
 801ec4c:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 801ec50:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801ec54:	eb07 060e 	add.w	r6, r7, lr
 801ec58:	f896 b002 	ldrb.w	fp, [r6, #2]
 801ec5c:	7876      	ldrb	r6, [r6, #1]
 801ec5e:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801ec62:	00f6      	lsls	r6, r6, #3
 801ec64:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801ec68:	ea4b 0606 	orr.w	r6, fp, r6
 801ec6c:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801ec70:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801ec74:	f82a 6009 	strh.w	r6, [sl, r9]
 801ec78:	9912      	ldr	r1, [sp, #72]	; 0x48
 801ec7a:	4460      	add	r0, ip
 801ec7c:	f108 38ff 	add.w	r8, r8, #4294967295
 801ec80:	440a      	add	r2, r1
 801ec82:	e757      	b.n	801eb34 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801ec84:	b005      	add	sp, #20
 801ec86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ec8a:	bf00      	nop
 801ec8c:	fffff800 	.word	0xfffff800

0801ec90 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ec90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec94:	b087      	sub	sp, #28
 801ec96:	468b      	mov	fp, r1
 801ec98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ec9c:	9815      	ldr	r0, [sp, #84]	; 0x54
 801ec9e:	9204      	str	r2, [sp, #16]
 801eca0:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801eca4:	6841      	ldr	r1, [r0, #4]
 801eca6:	9205      	str	r2, [sp, #20]
 801eca8:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801ecac:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801ecb0:	fb01 2404 	mla	r4, r1, r4, r2
 801ecb4:	6802      	ldr	r2, [r0, #0]
 801ecb6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ecba:	f8dc 2000 	ldr.w	r2, [ip]
 801ecbe:	9201      	str	r2, [sp, #4]
 801ecc0:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801ecc4:	3204      	adds	r2, #4
 801ecc6:	9202      	str	r2, [sp, #8]
 801ecc8:	f1bb 0f00 	cmp.w	fp, #0
 801eccc:	dc03      	bgt.n	801ecd6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801ecce:	9a04      	ldr	r2, [sp, #16]
 801ecd0:	2a00      	cmp	r2, #0
 801ecd2:	f340 8138 	ble.w	801ef46 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801ecd6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ecd8:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801ecdc:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ece0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ece2:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801ece6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ecea:	2b00      	cmp	r3, #0
 801ecec:	dd0e      	ble.n	801ed0c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ecee:	1402      	asrs	r2, r0, #16
 801ecf0:	d405      	bmi.n	801ecfe <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801ecf2:	42ba      	cmp	r2, r7
 801ecf4:	da03      	bge.n	801ecfe <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801ecf6:	140a      	asrs	r2, r1, #16
 801ecf8:	d401      	bmi.n	801ecfe <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801ecfa:	42b2      	cmp	r2, r6
 801ecfc:	db07      	blt.n	801ed0e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801ecfe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ed00:	3b01      	subs	r3, #1
 801ed02:	3402      	adds	r4, #2
 801ed04:	4410      	add	r0, r2
 801ed06:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ed08:	4411      	add	r1, r2
 801ed0a:	e7ee      	b.n	801ecea <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801ed0c:	d019      	beq.n	801ed42 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801ed0e:	1e5a      	subs	r2, r3, #1
 801ed10:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801ed12:	fb05 0502 	mla	r5, r5, r2, r0
 801ed16:	142d      	asrs	r5, r5, #16
 801ed18:	d409      	bmi.n	801ed2e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801ed1a:	42bd      	cmp	r5, r7
 801ed1c:	da07      	bge.n	801ed2e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801ed1e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801ed20:	fb05 1202 	mla	r2, r5, r2, r1
 801ed24:	1412      	asrs	r2, r2, #16
 801ed26:	d402      	bmi.n	801ed2e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801ed28:	42b2      	cmp	r2, r6
 801ed2a:	f2c0 80ac 	blt.w	801ee86 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801ed2e:	f04f 0e00 	mov.w	lr, #0
 801ed32:	eb03 020e 	add.w	r2, r3, lr
 801ed36:	2a00      	cmp	r2, #0
 801ed38:	dc3e      	bgt.n	801edb8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801ed3a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ed3e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ed42:	f1bb 0f00 	cmp.w	fp, #0
 801ed46:	f340 80fe 	ble.w	801ef46 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801ed4a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ed4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ed50:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ed54:	f1bb 0b01 	subs.w	fp, fp, #1
 801ed58:	eeb0 6a62 	vmov.f32	s12, s5
 801ed5c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ed60:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ed64:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ed68:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801ed6c:	eeb0 6a43 	vmov.f32	s12, s6
 801ed70:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ed74:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801ed78:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ed7c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ed80:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ed84:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ed88:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ed8c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ed90:	ee12 2a90 	vmov	r2, s5
 801ed94:	eef0 2a47 	vmov.f32	s5, s14
 801ed98:	fb92 f3f3 	sdiv	r3, r2, r3
 801ed9c:	ee13 2a10 	vmov	r2, s6
 801eda0:	9313      	str	r3, [sp, #76]	; 0x4c
 801eda2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801eda4:	eeb0 3a67 	vmov.f32	s6, s15
 801eda8:	fb92 f3f3 	sdiv	r3, r2, r3
 801edac:	9a04      	ldr	r2, [sp, #16]
 801edae:	9314      	str	r3, [sp, #80]	; 0x50
 801edb0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801edb2:	bf08      	it	eq
 801edb4:	4613      	moveq	r3, r2
 801edb6:	e787      	b.n	801ecc8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801edb8:	1406      	asrs	r6, r0, #16
 801edba:	d45d      	bmi.n	801ee78 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801edbc:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801edc0:	42b5      	cmp	r5, r6
 801edc2:	dd59      	ble.n	801ee78 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801edc4:	140f      	asrs	r7, r1, #16
 801edc6:	d457      	bmi.n	801ee78 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801edc8:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801edcc:	42ba      	cmp	r2, r7
 801edce:	dd53      	ble.n	801ee78 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801edd0:	9a01      	ldr	r2, [sp, #4]
 801edd2:	b22d      	sxth	r5, r5
 801edd4:	fb07 2505 	mla	r5, r7, r5, r2
 801edd8:	5daa      	ldrb	r2, [r5, r6]
 801edda:	9d02      	ldr	r5, [sp, #8]
 801eddc:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801ede0:	0e2e      	lsrs	r6, r5, #24
 801ede2:	d049      	beq.n	801ee78 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ede4:	f06f 0201 	mvn.w	r2, #1
 801ede8:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801edec:	fb02 f20e 	mul.w	r2, r2, lr
 801edf0:	f834 8002 	ldrh.w	r8, [r4, r2]
 801edf4:	9203      	str	r2, [sp, #12]
 801edf6:	9a05      	ldr	r2, [sp, #20]
 801edf8:	ea4f 2728 	mov.w	r7, r8, asr #8
 801edfc:	4356      	muls	r6, r2
 801edfe:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ee02:	1c72      	adds	r2, r6, #1
 801ee04:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801ee08:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801ee0c:	b2ed      	uxtb	r5, r5
 801ee0e:	1212      	asrs	r2, r2, #8
 801ee10:	fa1f f982 	uxth.w	r9, r2
 801ee14:	43d2      	mvns	r2, r2
 801ee16:	fb16 f609 	smulbb	r6, r6, r9
 801ee1a:	b2d2      	uxtb	r2, r2
 801ee1c:	fb15 f509 	smulbb	r5, r5, r9
 801ee20:	fb07 6702 	mla	r7, r7, r2, r6
 801ee24:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801ee28:	fb1a fa09 	smulbb	sl, sl, r9
 801ee2c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801ee30:	b2bf      	uxth	r7, r7
 801ee32:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ee36:	fa5f f888 	uxtb.w	r8, r8
 801ee3a:	fb06 a602 	mla	r6, r6, r2, sl
 801ee3e:	fb08 5502 	mla	r5, r8, r2, r5
 801ee42:	1c7a      	adds	r2, r7, #1
 801ee44:	b2b6      	uxth	r6, r6
 801ee46:	b2ad      	uxth	r5, r5
 801ee48:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801ee4c:	9a03      	ldr	r2, [sp, #12]
 801ee4e:	f105 0a01 	add.w	sl, r5, #1
 801ee52:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801ee56:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ee5a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ee5e:	ea4a 0707 	orr.w	r7, sl, r7
 801ee62:	f106 0a01 	add.w	sl, r6, #1
 801ee66:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801ee6a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ee6e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ee72:	ea47 070a 	orr.w	r7, r7, sl
 801ee76:	52a7      	strh	r7, [r4, r2]
 801ee78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ee7a:	f10e 3eff 	add.w	lr, lr, #4294967295
 801ee7e:	4410      	add	r0, r2
 801ee80:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ee82:	4411      	add	r1, r2
 801ee84:	e755      	b.n	801ed32 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801ee86:	f04f 0800 	mov.w	r8, #0
 801ee8a:	eba3 0208 	sub.w	r2, r3, r8
 801ee8e:	2a00      	cmp	r2, #0
 801ee90:	f77f af53 	ble.w	801ed3a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801ee94:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801ee98:	140a      	asrs	r2, r1, #16
 801ee9a:	9f01      	ldr	r7, [sp, #4]
 801ee9c:	1405      	asrs	r5, r0, #16
 801ee9e:	fb06 7202 	mla	r2, r6, r2, r7
 801eea2:	5d52      	ldrb	r2, [r2, r5]
 801eea4:	9d02      	ldr	r5, [sp, #8]
 801eea6:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801eeaa:	0e2e      	lsrs	r6, r5, #24
 801eeac:	d044      	beq.n	801ef38 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801eeae:	9a05      	ldr	r2, [sp, #20]
 801eeb0:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801eeb4:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801eeb8:	4356      	muls	r6, r2
 801eeba:	ea4f 272e 	mov.w	r7, lr, asr #8
 801eebe:	1c72      	adds	r2, r6, #1
 801eec0:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801eec4:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801eec8:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801eecc:	b2ed      	uxtb	r5, r5
 801eece:	1212      	asrs	r2, r2, #8
 801eed0:	fa1f f982 	uxth.w	r9, r2
 801eed4:	43d2      	mvns	r2, r2
 801eed6:	fb16 f609 	smulbb	r6, r6, r9
 801eeda:	b2d2      	uxtb	r2, r2
 801eedc:	fb15 f509 	smulbb	r5, r5, r9
 801eee0:	fb07 6702 	mla	r7, r7, r2, r6
 801eee4:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801eee8:	fb1a fa09 	smulbb	sl, sl, r9
 801eeec:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801eef0:	b2bf      	uxth	r7, r7
 801eef2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801eef6:	fa5f fe8e 	uxtb.w	lr, lr
 801eefa:	fb06 a602 	mla	r6, r6, r2, sl
 801eefe:	fb0e 5502 	mla	r5, lr, r2, r5
 801ef02:	1c7a      	adds	r2, r7, #1
 801ef04:	b2b6      	uxth	r6, r6
 801ef06:	b2ad      	uxth	r5, r5
 801ef08:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801ef0c:	f105 0a01 	add.w	sl, r5, #1
 801ef10:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801ef14:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ef18:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ef1c:	ea4a 0707 	orr.w	r7, sl, r7
 801ef20:	f106 0a01 	add.w	sl, r6, #1
 801ef24:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801ef28:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ef2c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ef30:	ea47 070a 	orr.w	r7, r7, sl
 801ef34:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801ef38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ef3a:	f108 0801 	add.w	r8, r8, #1
 801ef3e:	4410      	add	r0, r2
 801ef40:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ef42:	4411      	add	r1, r2
 801ef44:	e7a1      	b.n	801ee8a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801ef46:	b007      	add	sp, #28
 801ef48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ef4c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ef4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef50:	b085      	sub	sp, #20
 801ef52:	468b      	mov	fp, r1
 801ef54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ef58:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801ef5a:	9203      	str	r2, [sp, #12]
 801ef5c:	6841      	ldr	r1, [r0, #4]
 801ef5e:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801ef62:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801ef66:	fb01 2404 	mla	r4, r1, r4, r2
 801ef6a:	6802      	ldr	r2, [r0, #0]
 801ef6c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ef70:	f8de 2000 	ldr.w	r2, [lr]
 801ef74:	9200      	str	r2, [sp, #0]
 801ef76:	f8de 2004 	ldr.w	r2, [lr, #4]
 801ef7a:	3204      	adds	r2, #4
 801ef7c:	9201      	str	r2, [sp, #4]
 801ef7e:	f1bb 0f00 	cmp.w	fp, #0
 801ef82:	dc03      	bgt.n	801ef8c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801ef84:	9a03      	ldr	r2, [sp, #12]
 801ef86:	2a00      	cmp	r2, #0
 801ef88:	f340 8153 	ble.w	801f232 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801ef8c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ef8e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801ef92:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ef96:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ef98:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801ef9c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801efa0:	2b00      	cmp	r3, #0
 801efa2:	dd0e      	ble.n	801efc2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801efa4:	1408      	asrs	r0, r1, #16
 801efa6:	d405      	bmi.n	801efb4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801efa8:	42b8      	cmp	r0, r7
 801efaa:	da03      	bge.n	801efb4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801efac:	1410      	asrs	r0, r2, #16
 801efae:	d401      	bmi.n	801efb4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801efb0:	42b0      	cmp	r0, r6
 801efb2:	db07      	blt.n	801efc4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801efb4:	9811      	ldr	r0, [sp, #68]	; 0x44
 801efb6:	3b01      	subs	r3, #1
 801efb8:	3402      	adds	r4, #2
 801efba:	4401      	add	r1, r0
 801efbc:	9812      	ldr	r0, [sp, #72]	; 0x48
 801efbe:	4402      	add	r2, r0
 801efc0:	e7ee      	b.n	801efa0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801efc2:	d017      	beq.n	801eff4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801efc4:	1e58      	subs	r0, r3, #1
 801efc6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801efc8:	fb05 1500 	mla	r5, r5, r0, r1
 801efcc:	142d      	asrs	r5, r5, #16
 801efce:	d409      	bmi.n	801efe4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801efd0:	42bd      	cmp	r5, r7
 801efd2:	da07      	bge.n	801efe4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801efd4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801efd6:	fb05 2000 	mla	r0, r5, r0, r2
 801efda:	1400      	asrs	r0, r0, #16
 801efdc:	d402      	bmi.n	801efe4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801efde:	42b0      	cmp	r0, r6
 801efe0:	f2c0 80bc 	blt.w	801f15c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801efe4:	2600      	movs	r6, #0
 801efe6:	1998      	adds	r0, r3, r6
 801efe8:	2800      	cmp	r0, #0
 801efea:	dc3e      	bgt.n	801f06a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801efec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801eff0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801eff4:	f1bb 0f00 	cmp.w	fp, #0
 801eff8:	f340 811b 	ble.w	801f232 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801effc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f000:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f002:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f006:	f1bb 0b01 	subs.w	fp, fp, #1
 801f00a:	eeb0 6a62 	vmov.f32	s12, s5
 801f00e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f012:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f016:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f01a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f01e:	eeb0 6a43 	vmov.f32	s12, s6
 801f022:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f026:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801f02a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f02e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f032:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f036:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f03a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f03e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f042:	ee12 2a90 	vmov	r2, s5
 801f046:	eef0 2a47 	vmov.f32	s5, s14
 801f04a:	fb92 f3f3 	sdiv	r3, r2, r3
 801f04e:	ee13 2a10 	vmov	r2, s6
 801f052:	9311      	str	r3, [sp, #68]	; 0x44
 801f054:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f056:	eeb0 3a67 	vmov.f32	s6, s15
 801f05a:	fb92 f3f3 	sdiv	r3, r2, r3
 801f05e:	9a03      	ldr	r2, [sp, #12]
 801f060:	9312      	str	r3, [sp, #72]	; 0x48
 801f062:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f064:	bf08      	it	eq
 801f066:	4613      	moveq	r3, r2
 801f068:	e789      	b.n	801ef7e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801f06a:	140f      	asrs	r7, r1, #16
 801f06c:	d426      	bmi.n	801f0bc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801f06e:	f8de 5008 	ldr.w	r5, [lr, #8]
 801f072:	42bd      	cmp	r5, r7
 801f074:	dd22      	ble.n	801f0bc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801f076:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801f07a:	d41f      	bmi.n	801f0bc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801f07c:	f8de 000c 	ldr.w	r0, [lr, #12]
 801f080:	4560      	cmp	r0, ip
 801f082:	dd1b      	ble.n	801f0bc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801f084:	9800      	ldr	r0, [sp, #0]
 801f086:	b22d      	sxth	r5, r5
 801f088:	fb0c 0505 	mla	r5, ip, r5, r0
 801f08c:	5de8      	ldrb	r0, [r5, r7]
 801f08e:	9d01      	ldr	r5, [sp, #4]
 801f090:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801f094:	0e07      	lsrs	r7, r0, #24
 801f096:	2fff      	cmp	r7, #255	; 0xff
 801f098:	d116      	bne.n	801f0c8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801f09a:	f06f 0501 	mvn.w	r5, #1
 801f09e:	fb05 f706 	mul.w	r7, r5, r6
 801f0a2:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801f0a6:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801f0aa:	0945      	lsrs	r5, r0, #5
 801f0ac:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801f0b0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801f0b4:	ea4c 0505 	orr.w	r5, ip, r5
 801f0b8:	4305      	orrs	r5, r0
 801f0ba:	53e5      	strh	r5, [r4, r7]
 801f0bc:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f0be:	3e01      	subs	r6, #1
 801f0c0:	4401      	add	r1, r0
 801f0c2:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f0c4:	4402      	add	r2, r0
 801f0c6:	e78e      	b.n	801efe6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801f0c8:	b2fd      	uxtb	r5, r7
 801f0ca:	2f00      	cmp	r7, #0
 801f0cc:	d0f6      	beq.n	801f0bc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801f0ce:	f06f 0701 	mvn.w	r7, #1
 801f0d2:	fa1f f985 	uxth.w	r9, r5
 801f0d6:	43ed      	mvns	r5, r5
 801f0d8:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801f0dc:	4377      	muls	r7, r6
 801f0de:	fb1a fa09 	smulbb	sl, sl, r9
 801f0e2:	b2ed      	uxtb	r5, r5
 801f0e4:	f834 8007 	ldrh.w	r8, [r4, r7]
 801f0e8:	9702      	str	r7, [sp, #8]
 801f0ea:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801f0ee:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801f0f2:	fb17 f709 	smulbb	r7, r7, r9
 801f0f6:	b2c0      	uxtb	r0, r0
 801f0f8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f0fc:	fb10 f009 	smulbb	r0, r0, r9
 801f100:	fb0c 7c05 	mla	ip, ip, r5, r7
 801f104:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801f108:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801f10c:	fa1f fc8c 	uxth.w	ip, ip
 801f110:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f114:	fa5f f888 	uxtb.w	r8, r8
 801f118:	fb07 a705 	mla	r7, r7, r5, sl
 801f11c:	fb08 0005 	mla	r0, r8, r5, r0
 801f120:	f10c 0501 	add.w	r5, ip, #1
 801f124:	b2bf      	uxth	r7, r7
 801f126:	b280      	uxth	r0, r0
 801f128:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801f12c:	f100 0a01 	add.w	sl, r0, #1
 801f130:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f134:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801f138:	9802      	ldr	r0, [sp, #8]
 801f13a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f13e:	ea4a 0c0c 	orr.w	ip, sl, ip
 801f142:	f107 0a01 	add.w	sl, r7, #1
 801f146:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801f14a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f14e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f152:	ea4c 0c0a 	orr.w	ip, ip, sl
 801f156:	f824 c000 	strh.w	ip, [r4, r0]
 801f15a:	e7af      	b.n	801f0bc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801f15c:	f04f 0800 	mov.w	r8, #0
 801f160:	eba3 0008 	sub.w	r0, r3, r8
 801f164:	2800      	cmp	r0, #0
 801f166:	f77f af41 	ble.w	801efec <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801f16a:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801f16e:	1410      	asrs	r0, r2, #16
 801f170:	9f00      	ldr	r7, [sp, #0]
 801f172:	140d      	asrs	r5, r1, #16
 801f174:	fb06 7000 	mla	r0, r6, r0, r7
 801f178:	5d40      	ldrb	r0, [r0, r5]
 801f17a:	9d01      	ldr	r5, [sp, #4]
 801f17c:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801f180:	0e2e      	lsrs	r6, r5, #24
 801f182:	2eff      	cmp	r6, #255	; 0xff
 801f184:	d112      	bne.n	801f1ac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801f186:	482c      	ldr	r0, [pc, #176]	; (801f238 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801f188:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801f18c:	0968      	lsrs	r0, r5, #5
 801f18e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801f192:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f196:	4330      	orrs	r0, r6
 801f198:	4328      	orrs	r0, r5
 801f19a:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 801f19e:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f1a0:	f108 0801 	add.w	r8, r8, #1
 801f1a4:	4401      	add	r1, r0
 801f1a6:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f1a8:	4402      	add	r2, r0
 801f1aa:	e7d9      	b.n	801f160 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801f1ac:	b2f0      	uxtb	r0, r6
 801f1ae:	2e00      	cmp	r6, #0
 801f1b0:	d0f5      	beq.n	801f19e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801f1b2:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801f1b6:	fa1f f980 	uxth.w	r9, r0
 801f1ba:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801f1be:	43c0      	mvns	r0, r0
 801f1c0:	ea4f 272c 	mov.w	r7, ip, asr #8
 801f1c4:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801f1c8:	fb16 f609 	smulbb	r6, r6, r9
 801f1cc:	b2c0      	uxtb	r0, r0
 801f1ce:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f1d2:	b2ed      	uxtb	r5, r5
 801f1d4:	fb1a fa09 	smulbb	sl, sl, r9
 801f1d8:	fb07 6700 	mla	r7, r7, r0, r6
 801f1dc:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801f1e0:	fb15 f509 	smulbb	r5, r5, r9
 801f1e4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801f1e8:	b2bf      	uxth	r7, r7
 801f1ea:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f1ee:	fa5f fc8c 	uxtb.w	ip, ip
 801f1f2:	fb06 a600 	mla	r6, r6, r0, sl
 801f1f6:	fb0c 5500 	mla	r5, ip, r0, r5
 801f1fa:	1c78      	adds	r0, r7, #1
 801f1fc:	b2b6      	uxth	r6, r6
 801f1fe:	b2ad      	uxth	r5, r5
 801f200:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801f204:	f105 0a01 	add.w	sl, r5, #1
 801f208:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801f20c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f210:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f214:	ea4a 0707 	orr.w	r7, sl, r7
 801f218:	f106 0a01 	add.w	sl, r6, #1
 801f21c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f220:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f224:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f228:	ea47 070a 	orr.w	r7, r7, sl
 801f22c:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801f230:	e7b5      	b.n	801f19e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801f232:	b005      	add	sp, #20
 801f234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f238:	fffff800 	.word	0xfffff800

0801f23c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f23c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f240:	b087      	sub	sp, #28
 801f242:	468b      	mov	fp, r1
 801f244:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f248:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f24a:	9204      	str	r2, [sp, #16]
 801f24c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801f250:	6861      	ldr	r1, [r4, #4]
 801f252:	9205      	str	r2, [sp, #20]
 801f254:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801f258:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801f25c:	fb01 2000 	mla	r0, r1, r0, r2
 801f260:	6822      	ldr	r2, [r4, #0]
 801f262:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801f266:	f8de 2000 	ldr.w	r2, [lr]
 801f26a:	9201      	str	r2, [sp, #4]
 801f26c:	f8de 2004 	ldr.w	r2, [lr, #4]
 801f270:	9202      	str	r2, [sp, #8]
 801f272:	f1bb 0f00 	cmp.w	fp, #0
 801f276:	dc03      	bgt.n	801f280 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801f278:	9a04      	ldr	r2, [sp, #16]
 801f27a:	2a00      	cmp	r2, #0
 801f27c:	f340 8142 	ble.w	801f504 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801f280:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f282:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801f286:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f28a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f28c:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801f290:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f294:	2b00      	cmp	r3, #0
 801f296:	dd0e      	ble.n	801f2b6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f298:	140c      	asrs	r4, r1, #16
 801f29a:	d405      	bmi.n	801f2a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f29c:	42bc      	cmp	r4, r7
 801f29e:	da03      	bge.n	801f2a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f2a0:	1414      	asrs	r4, r2, #16
 801f2a2:	d401      	bmi.n	801f2a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f2a4:	42b4      	cmp	r4, r6
 801f2a6:	db07      	blt.n	801f2b8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f2a8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f2aa:	3b01      	subs	r3, #1
 801f2ac:	3002      	adds	r0, #2
 801f2ae:	4421      	add	r1, r4
 801f2b0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f2b2:	4422      	add	r2, r4
 801f2b4:	e7ee      	b.n	801f294 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801f2b6:	d019      	beq.n	801f2ec <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801f2b8:	1e5c      	subs	r4, r3, #1
 801f2ba:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801f2bc:	fb05 1504 	mla	r5, r5, r4, r1
 801f2c0:	142d      	asrs	r5, r5, #16
 801f2c2:	d409      	bmi.n	801f2d8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801f2c4:	42bd      	cmp	r5, r7
 801f2c6:	da07      	bge.n	801f2d8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801f2c8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801f2ca:	fb05 2404 	mla	r4, r5, r4, r2
 801f2ce:	1424      	asrs	r4, r4, #16
 801f2d0:	d402      	bmi.n	801f2d8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801f2d2:	42b4      	cmp	r4, r6
 801f2d4:	f2c0 80b1 	blt.w	801f43a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801f2d8:	f04f 0800 	mov.w	r8, #0
 801f2dc:	eb03 0408 	add.w	r4, r3, r8
 801f2e0:	2c00      	cmp	r4, #0
 801f2e2:	dc3e      	bgt.n	801f362 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801f2e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f2e8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f2ec:	f1bb 0f00 	cmp.w	fp, #0
 801f2f0:	f340 8108 	ble.w	801f504 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801f2f4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f2f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f2fa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f2fe:	f1bb 0b01 	subs.w	fp, fp, #1
 801f302:	eeb0 6a62 	vmov.f32	s12, s5
 801f306:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f30a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f30e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f312:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801f316:	eeb0 6a43 	vmov.f32	s12, s6
 801f31a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f31e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801f322:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f326:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f32a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f32e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f332:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f336:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f33a:	ee12 2a90 	vmov	r2, s5
 801f33e:	eef0 2a47 	vmov.f32	s5, s14
 801f342:	fb92 f3f3 	sdiv	r3, r2, r3
 801f346:	ee13 2a10 	vmov	r2, s6
 801f34a:	9313      	str	r3, [sp, #76]	; 0x4c
 801f34c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f34e:	eeb0 3a67 	vmov.f32	s6, s15
 801f352:	fb92 f3f3 	sdiv	r3, r2, r3
 801f356:	9a04      	ldr	r2, [sp, #16]
 801f358:	9314      	str	r3, [sp, #80]	; 0x50
 801f35a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f35c:	bf08      	it	eq
 801f35e:	4613      	moveq	r3, r2
 801f360:	e787      	b.n	801f272 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801f362:	140e      	asrs	r6, r1, #16
 801f364:	d462      	bmi.n	801f42c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f366:	f8de 5008 	ldr.w	r5, [lr, #8]
 801f36a:	42b5      	cmp	r5, r6
 801f36c:	dd5e      	ble.n	801f42c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f36e:	1417      	asrs	r7, r2, #16
 801f370:	d45c      	bmi.n	801f42c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f372:	f8de 400c 	ldr.w	r4, [lr, #12]
 801f376:	42bc      	cmp	r4, r7
 801f378:	dd58      	ble.n	801f42c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f37a:	b22d      	sxth	r5, r5
 801f37c:	9c02      	ldr	r4, [sp, #8]
 801f37e:	fb07 6505 	mla	r5, r7, r5, r6
 801f382:	5d66      	ldrb	r6, [r4, r5]
 801f384:	2e00      	cmp	r6, #0
 801f386:	d051      	beq.n	801f42c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f388:	9c01      	ldr	r4, [sp, #4]
 801f38a:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801f38e:	f06f 0401 	mvn.w	r4, #1
 801f392:	fb04 f408 	mul.w	r4, r4, r8
 801f396:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801f39a:	5b05      	ldrh	r5, [r0, r4]
 801f39c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f3a0:	9403      	str	r4, [sp, #12]
 801f3a2:	9c05      	ldr	r4, [sp, #20]
 801f3a4:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801f3a8:	4366      	muls	r6, r4
 801f3aa:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801f3ae:	1c74      	adds	r4, r6, #1
 801f3b0:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801f3b4:	122e      	asrs	r6, r5, #8
 801f3b6:	1224      	asrs	r4, r4, #8
 801f3b8:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801f3bc:	00ed      	lsls	r5, r5, #3
 801f3be:	b2a7      	uxth	r7, r4
 801f3c0:	43e4      	mvns	r4, r4
 801f3c2:	b2ed      	uxtb	r5, r5
 801f3c4:	b2e4      	uxtb	r4, r4
 801f3c6:	fb16 f604 	smulbb	r6, r6, r4
 801f3ca:	fb15 f504 	smulbb	r5, r5, r4
 801f3ce:	fb0c 6c07 	mla	ip, ip, r7, r6
 801f3d2:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801f3d6:	fb1a fa04 	smulbb	sl, sl, r4
 801f3da:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801f3de:	fa1f fc8c 	uxth.w	ip, ip
 801f3e2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f3e6:	fa5f f989 	uxtb.w	r9, r9
 801f3ea:	fb06 a607 	mla	r6, r6, r7, sl
 801f3ee:	f10c 0401 	add.w	r4, ip, #1
 801f3f2:	fb09 5507 	mla	r5, r9, r7, r5
 801f3f6:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801f3fa:	9c03      	ldr	r4, [sp, #12]
 801f3fc:	b2ad      	uxth	r5, r5
 801f3fe:	b2b6      	uxth	r6, r6
 801f400:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f404:	f105 0a01 	add.w	sl, r5, #1
 801f408:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f40c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f410:	ea4a 0c0c 	orr.w	ip, sl, ip
 801f414:	f106 0a01 	add.w	sl, r6, #1
 801f418:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f41c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f420:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f424:	ea4c 0c0a 	orr.w	ip, ip, sl
 801f428:	f820 c004 	strh.w	ip, [r0, r4]
 801f42c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f42e:	f108 38ff 	add.w	r8, r8, #4294967295
 801f432:	4421      	add	r1, r4
 801f434:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f436:	4422      	add	r2, r4
 801f438:	e750      	b.n	801f2dc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801f43a:	f04f 0900 	mov.w	r9, #0
 801f43e:	eba3 0409 	sub.w	r4, r3, r9
 801f442:	2c00      	cmp	r4, #0
 801f444:	f77f af4e 	ble.w	801f2e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801f448:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801f44c:	140d      	asrs	r5, r1, #16
 801f44e:	1414      	asrs	r4, r2, #16
 801f450:	fb06 5404 	mla	r4, r6, r4, r5
 801f454:	9d02      	ldr	r5, [sp, #8]
 801f456:	5d2e      	ldrb	r6, [r5, r4]
 801f458:	2e00      	cmp	r6, #0
 801f45a:	d04c      	beq.n	801f4f6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801f45c:	9d01      	ldr	r5, [sp, #4]
 801f45e:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801f462:	9c05      	ldr	r4, [sp, #20]
 801f464:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801f468:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801f46c:	4366      	muls	r6, r4
 801f46e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801f472:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f476:	1c74      	adds	r4, r6, #1
 801f478:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801f47c:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801f480:	122e      	asrs	r6, r5, #8
 801f482:	1224      	asrs	r4, r4, #8
 801f484:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801f488:	00ed      	lsls	r5, r5, #3
 801f48a:	b2a7      	uxth	r7, r4
 801f48c:	43e4      	mvns	r4, r4
 801f48e:	b2ed      	uxtb	r5, r5
 801f490:	b2e4      	uxtb	r4, r4
 801f492:	fb16 f604 	smulbb	r6, r6, r4
 801f496:	fb15 f504 	smulbb	r5, r5, r4
 801f49a:	fb0c 6c07 	mla	ip, ip, r7, r6
 801f49e:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801f4a2:	fb1a fa04 	smulbb	sl, sl, r4
 801f4a6:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801f4aa:	fa1f fc8c 	uxth.w	ip, ip
 801f4ae:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f4b2:	fa5f f888 	uxtb.w	r8, r8
 801f4b6:	fb06 a607 	mla	r6, r6, r7, sl
 801f4ba:	f10c 0401 	add.w	r4, ip, #1
 801f4be:	fb08 5507 	mla	r5, r8, r7, r5
 801f4c2:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801f4c6:	b2ad      	uxth	r5, r5
 801f4c8:	b2b6      	uxth	r6, r6
 801f4ca:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f4ce:	f105 0a01 	add.w	sl, r5, #1
 801f4d2:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f4d6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f4da:	ea4a 0c0c 	orr.w	ip, sl, ip
 801f4de:	f106 0a01 	add.w	sl, r6, #1
 801f4e2:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f4e6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f4ea:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f4ee:	ea4c 0c0a 	orr.w	ip, ip, sl
 801f4f2:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801f4f6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f4f8:	f109 0901 	add.w	r9, r9, #1
 801f4fc:	4421      	add	r1, r4
 801f4fe:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f500:	4422      	add	r2, r4
 801f502:	e79c      	b.n	801f43e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801f504:	b007      	add	sp, #28
 801f506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f50a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f50a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f50e:	b085      	sub	sp, #20
 801f510:	468b      	mov	fp, r1
 801f512:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f516:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f518:	9203      	str	r2, [sp, #12]
 801f51a:	6861      	ldr	r1, [r4, #4]
 801f51c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801f520:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 801f524:	fb01 2000 	mla	r0, r1, r0, r2
 801f528:	6822      	ldr	r2, [r4, #0]
 801f52a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801f52e:	f8d8 2000 	ldr.w	r2, [r8]
 801f532:	9200      	str	r2, [sp, #0]
 801f534:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801f538:	9201      	str	r2, [sp, #4]
 801f53a:	f1bb 0f00 	cmp.w	fp, #0
 801f53e:	dc03      	bgt.n	801f548 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801f540:	9a03      	ldr	r2, [sp, #12]
 801f542:	2a00      	cmp	r2, #0
 801f544:	f340 8146 	ble.w	801f7d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801f548:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f54a:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801f54e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f552:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f554:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801f558:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f55c:	2b00      	cmp	r3, #0
 801f55e:	dd0e      	ble.n	801f57e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801f560:	140c      	asrs	r4, r1, #16
 801f562:	d405      	bmi.n	801f570 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f564:	42bc      	cmp	r4, r7
 801f566:	da03      	bge.n	801f570 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f568:	1414      	asrs	r4, r2, #16
 801f56a:	d401      	bmi.n	801f570 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f56c:	42b4      	cmp	r4, r6
 801f56e:	db07      	blt.n	801f580 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f570:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f572:	3b01      	subs	r3, #1
 801f574:	3002      	adds	r0, #2
 801f576:	4421      	add	r1, r4
 801f578:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f57a:	4422      	add	r2, r4
 801f57c:	e7ee      	b.n	801f55c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801f57e:	d017      	beq.n	801f5b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801f580:	1e5c      	subs	r4, r3, #1
 801f582:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f584:	fb05 1504 	mla	r5, r5, r4, r1
 801f588:	142d      	asrs	r5, r5, #16
 801f58a:	d409      	bmi.n	801f5a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f58c:	42bd      	cmp	r5, r7
 801f58e:	da07      	bge.n	801f5a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f590:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801f592:	fb05 2404 	mla	r4, r5, r4, r2
 801f596:	1424      	asrs	r4, r4, #16
 801f598:	d402      	bmi.n	801f5a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f59a:	42b4      	cmp	r4, r6
 801f59c:	f2c0 80b3 	blt.w	801f706 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801f5a0:	2600      	movs	r6, #0
 801f5a2:	199c      	adds	r4, r3, r6
 801f5a4:	2c00      	cmp	r4, #0
 801f5a6:	dc3e      	bgt.n	801f626 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801f5a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f5ac:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f5b0:	f1bb 0f00 	cmp.w	fp, #0
 801f5b4:	f340 810e 	ble.w	801f7d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801f5b8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f5bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f5be:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f5c2:	f1bb 0b01 	subs.w	fp, fp, #1
 801f5c6:	eeb0 6a62 	vmov.f32	s12, s5
 801f5ca:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f5ce:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f5d2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f5d6:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f5da:	eeb0 6a43 	vmov.f32	s12, s6
 801f5de:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f5e2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801f5e6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f5ea:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f5ee:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f5f2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f5f6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f5fa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f5fe:	ee12 2a90 	vmov	r2, s5
 801f602:	eef0 2a47 	vmov.f32	s5, s14
 801f606:	fb92 f3f3 	sdiv	r3, r2, r3
 801f60a:	ee13 2a10 	vmov	r2, s6
 801f60e:	9311      	str	r3, [sp, #68]	; 0x44
 801f610:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f612:	eeb0 3a67 	vmov.f32	s6, s15
 801f616:	fb92 f3f3 	sdiv	r3, r2, r3
 801f61a:	9a03      	ldr	r2, [sp, #12]
 801f61c:	9312      	str	r3, [sp, #72]	; 0x48
 801f61e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f620:	bf08      	it	eq
 801f622:	4613      	moveq	r3, r2
 801f624:	e789      	b.n	801f53a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801f626:	140f      	asrs	r7, r1, #16
 801f628:	d418      	bmi.n	801f65c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f62a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801f62e:	42bd      	cmp	r5, r7
 801f630:	dd14      	ble.n	801f65c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f632:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801f636:	d411      	bmi.n	801f65c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f638:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801f63c:	4564      	cmp	r4, ip
 801f63e:	dd0d      	ble.n	801f65c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f640:	b22d      	sxth	r5, r5
 801f642:	9c01      	ldr	r4, [sp, #4]
 801f644:	fb0c 7505 	mla	r5, ip, r5, r7
 801f648:	5d64      	ldrb	r4, [r4, r5]
 801f64a:	2cff      	cmp	r4, #255	; 0xff
 801f64c:	d10c      	bne.n	801f668 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801f64e:	9c00      	ldr	r4, [sp, #0]
 801f650:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801f654:	f06f 0401 	mvn.w	r4, #1
 801f658:	4374      	muls	r4, r6
 801f65a:	5305      	strh	r5, [r0, r4]
 801f65c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f65e:	3e01      	subs	r6, #1
 801f660:	4421      	add	r1, r4
 801f662:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f664:	4422      	add	r2, r4
 801f666:	e79c      	b.n	801f5a2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801f668:	2c00      	cmp	r4, #0
 801f66a:	d0f7      	beq.n	801f65c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f66c:	9f00      	ldr	r7, [sp, #0]
 801f66e:	fa1f fc84 	uxth.w	ip, r4
 801f672:	43e4      	mvns	r4, r4
 801f674:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801f678:	f06f 0501 	mvn.w	r5, #1
 801f67c:	b2e4      	uxtb	r4, r4
 801f67e:	4375      	muls	r5, r6
 801f680:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801f684:	9502      	str	r5, [sp, #8]
 801f686:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801f68a:	5b45      	ldrh	r5, [r0, r5]
 801f68c:	122f      	asrs	r7, r5, #8
 801f68e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801f692:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f696:	00ed      	lsls	r5, r5, #3
 801f698:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801f69c:	fb17 f704 	smulbb	r7, r7, r4
 801f6a0:	b2ed      	uxtb	r5, r5
 801f6a2:	fb1a fa04 	smulbb	sl, sl, r4
 801f6a6:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801f6aa:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801f6ae:	fb15 f504 	smulbb	r5, r5, r4
 801f6b2:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801f6b6:	fa1f fe8e 	uxth.w	lr, lr
 801f6ba:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f6be:	fa5f f989 	uxtb.w	r9, r9
 801f6c2:	fb07 a70c 	mla	r7, r7, ip, sl
 801f6c6:	f10e 0401 	add.w	r4, lr, #1
 801f6ca:	fb09 550c 	mla	r5, r9, ip, r5
 801f6ce:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801f6d2:	9c02      	ldr	r4, [sp, #8]
 801f6d4:	b2ad      	uxth	r5, r5
 801f6d6:	b2bf      	uxth	r7, r7
 801f6d8:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801f6dc:	f105 0a01 	add.w	sl, r5, #1
 801f6e0:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f6e4:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f6e8:	ea4a 0e0e 	orr.w	lr, sl, lr
 801f6ec:	f107 0a01 	add.w	sl, r7, #1
 801f6f0:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801f6f4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f6f8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f6fc:	ea4e 0e0a 	orr.w	lr, lr, sl
 801f700:	f820 e004 	strh.w	lr, [r0, r4]
 801f704:	e7aa      	b.n	801f65c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f706:	f04f 0900 	mov.w	r9, #0
 801f70a:	eba3 0409 	sub.w	r4, r3, r9
 801f70e:	2c00      	cmp	r4, #0
 801f710:	f77f af4a 	ble.w	801f5a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f714:	1414      	asrs	r4, r2, #16
 801f716:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801f71a:	140d      	asrs	r5, r1, #16
 801f71c:	fb06 5504 	mla	r5, r6, r4, r5
 801f720:	9c01      	ldr	r4, [sp, #4]
 801f722:	5d64      	ldrb	r4, [r4, r5]
 801f724:	2cff      	cmp	r4, #255	; 0xff
 801f726:	d10b      	bne.n	801f740 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801f728:	9c00      	ldr	r4, [sp, #0]
 801f72a:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801f72e:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801f732:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f734:	f109 0901 	add.w	r9, r9, #1
 801f738:	4421      	add	r1, r4
 801f73a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f73c:	4422      	add	r2, r4
 801f73e:	e7e4      	b.n	801f70a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801f740:	2c00      	cmp	r4, #0
 801f742:	d0f6      	beq.n	801f732 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801f744:	9e00      	ldr	r6, [sp, #0]
 801f746:	b2a7      	uxth	r7, r4
 801f748:	43e4      	mvns	r4, r4
 801f74a:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801f74e:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801f752:	b2e4      	uxtb	r4, r4
 801f754:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801f758:	122e      	asrs	r6, r5, #8
 801f75a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801f75e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f762:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801f766:	00ed      	lsls	r5, r5, #3
 801f768:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801f76c:	fb16 f604 	smulbb	r6, r6, r4
 801f770:	b2ed      	uxtb	r5, r5
 801f772:	fb1a fa04 	smulbb	sl, sl, r4
 801f776:	fb0c 6c07 	mla	ip, ip, r7, r6
 801f77a:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801f77e:	fb15 f504 	smulbb	r5, r5, r4
 801f782:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801f786:	fa1f fc8c 	uxth.w	ip, ip
 801f78a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f78e:	fa5f fe8e 	uxtb.w	lr, lr
 801f792:	fb06 a607 	mla	r6, r6, r7, sl
 801f796:	f10c 0401 	add.w	r4, ip, #1
 801f79a:	fb0e 5507 	mla	r5, lr, r7, r5
 801f79e:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801f7a2:	b2ad      	uxth	r5, r5
 801f7a4:	b2b6      	uxth	r6, r6
 801f7a6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f7aa:	f105 0a01 	add.w	sl, r5, #1
 801f7ae:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f7b2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f7b6:	ea4a 0c0c 	orr.w	ip, sl, ip
 801f7ba:	f106 0a01 	add.w	sl, r6, #1
 801f7be:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f7c2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f7c6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f7ca:	ea4c 0c0a 	orr.w	ip, ip, sl
 801f7ce:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801f7d2:	e7ae      	b.n	801f732 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801f7d4:	b005      	add	sp, #20
 801f7d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f7da <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f7da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f7de:	b085      	sub	sp, #20
 801f7e0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f7e2:	9203      	str	r2, [sp, #12]
 801f7e4:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801f7e8:	9100      	str	r1, [sp, #0]
 801f7ea:	9201      	str	r2, [sp, #4]
 801f7ec:	6841      	ldr	r1, [r0, #4]
 801f7ee:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801f7f2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801f7f6:	fb01 2404 	mla	r4, r1, r4, r2
 801f7fa:	6802      	ldr	r2, [r0, #0]
 801f7fc:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f800:	f8de 2000 	ldr.w	r2, [lr]
 801f804:	9202      	str	r2, [sp, #8]
 801f806:	9a01      	ldr	r2, [sp, #4]
 801f808:	43d6      	mvns	r6, r2
 801f80a:	b2f6      	uxtb	r6, r6
 801f80c:	9a00      	ldr	r2, [sp, #0]
 801f80e:	2a00      	cmp	r2, #0
 801f810:	dc03      	bgt.n	801f81a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801f812:	9a03      	ldr	r2, [sp, #12]
 801f814:	2a00      	cmp	r2, #0
 801f816:	f340 8124 	ble.w	801fa62 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801f81a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f81c:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801f820:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f824:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f826:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801f82a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f82e:	2b00      	cmp	r3, #0
 801f830:	dd0e      	ble.n	801f850 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f832:	1408      	asrs	r0, r1, #16
 801f834:	d405      	bmi.n	801f842 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f836:	4560      	cmp	r0, ip
 801f838:	da03      	bge.n	801f842 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f83a:	1410      	asrs	r0, r2, #16
 801f83c:	d401      	bmi.n	801f842 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f83e:	42b8      	cmp	r0, r7
 801f840:	db07      	blt.n	801f852 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801f842:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f844:	3b01      	subs	r3, #1
 801f846:	3402      	adds	r4, #2
 801f848:	4401      	add	r1, r0
 801f84a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f84c:	4402      	add	r2, r0
 801f84e:	e7ee      	b.n	801f82e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801f850:	d06e      	beq.n	801f930 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801f852:	1e58      	subs	r0, r3, #1
 801f854:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f856:	fb05 1500 	mla	r5, r5, r0, r1
 801f85a:	142d      	asrs	r5, r5, #16
 801f85c:	d45c      	bmi.n	801f918 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801f85e:	4565      	cmp	r5, ip
 801f860:	da5a      	bge.n	801f918 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801f862:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801f864:	fb05 2000 	mla	r0, r5, r0, r2
 801f868:	1400      	asrs	r0, r0, #16
 801f86a:	d455      	bmi.n	801f918 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801f86c:	42b8      	cmp	r0, r7
 801f86e:	da53      	bge.n	801f918 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801f870:	4699      	mov	r9, r3
 801f872:	46a2      	mov	sl, r4
 801f874:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801f878:	f1b9 0f00 	cmp.w	r9, #0
 801f87c:	dd54      	ble.n	801f928 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801f87e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801f882:	140d      	asrs	r5, r1, #16
 801f884:	1410      	asrs	r0, r2, #16
 801f886:	f109 39ff 	add.w	r9, r9, #4294967295
 801f88a:	fb07 5000 	mla	r0, r7, r0, r5
 801f88e:	9d02      	ldr	r5, [sp, #8]
 801f890:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801f894:	f8ba 5000 	ldrh.w	r5, [sl]
 801f898:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801f89c:	122f      	asrs	r7, r5, #8
 801f89e:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801f8a2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f8a6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f8aa:	00ed      	lsls	r5, r5, #3
 801f8ac:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801f8b0:	fb17 f706 	smulbb	r7, r7, r6
 801f8b4:	b2ed      	uxtb	r5, r5
 801f8b6:	fb18 f806 	smulbb	r8, r8, r6
 801f8ba:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801f8be:	10c7      	asrs	r7, r0, #3
 801f8c0:	fb15 f506 	smulbb	r5, r5, r6
 801f8c4:	00c0      	lsls	r0, r0, #3
 801f8c6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f8ca:	fa1f fc8c 	uxth.w	ip, ip
 801f8ce:	b2c0      	uxtb	r0, r0
 801f8d0:	fb07 870b 	mla	r7, r7, fp, r8
 801f8d4:	fb00 500b 	mla	r0, r0, fp, r5
 801f8d8:	f10c 0501 	add.w	r5, ip, #1
 801f8dc:	b2bf      	uxth	r7, r7
 801f8de:	b280      	uxth	r0, r0
 801f8e0:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801f8e4:	f107 0801 	add.w	r8, r7, #1
 801f8e8:	1c45      	adds	r5, r0, #1
 801f8ea:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801f8ee:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f8f2:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801f8f6:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f8f8:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801f8fc:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801f900:	4401      	add	r1, r0
 801f902:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801f906:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f908:	ea45 0c0c 	orr.w	ip, r5, ip
 801f90c:	4402      	add	r2, r0
 801f90e:	ea4c 0c08 	orr.w	ip, ip, r8
 801f912:	f82a cb02 	strh.w	ip, [sl], #2
 801f916:	e7af      	b.n	801f878 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f918:	f04f 0800 	mov.w	r8, #0
 801f91c:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801f920:	eb03 0008 	add.w	r0, r3, r8
 801f924:	2800      	cmp	r0, #0
 801f926:	dc41      	bgt.n	801f9ac <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801f928:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f92c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f930:	9b00      	ldr	r3, [sp, #0]
 801f932:	2b00      	cmp	r3, #0
 801f934:	f340 8095 	ble.w	801fa62 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801f938:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f93c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f93e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f942:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f946:	eef0 6a62 	vmov.f32	s13, s5
 801f94a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f94e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f952:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f956:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801f95a:	eef0 6a43 	vmov.f32	s13, s6
 801f95e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f962:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801f966:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f96a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f96e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f972:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f976:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f97a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f97e:	ee12 2a90 	vmov	r2, s5
 801f982:	eef0 2a47 	vmov.f32	s5, s14
 801f986:	fb92 f3f3 	sdiv	r3, r2, r3
 801f98a:	ee13 2a10 	vmov	r2, s6
 801f98e:	9311      	str	r3, [sp, #68]	; 0x44
 801f990:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f992:	eeb0 3a67 	vmov.f32	s6, s15
 801f996:	fb92 f3f3 	sdiv	r3, r2, r3
 801f99a:	9312      	str	r3, [sp, #72]	; 0x48
 801f99c:	9b00      	ldr	r3, [sp, #0]
 801f99e:	9a03      	ldr	r2, [sp, #12]
 801f9a0:	3b01      	subs	r3, #1
 801f9a2:	9300      	str	r3, [sp, #0]
 801f9a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f9a6:	bf08      	it	eq
 801f9a8:	4613      	moveq	r3, r2
 801f9aa:	e72f      	b.n	801f80c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801f9ac:	140f      	asrs	r7, r1, #16
 801f9ae:	d451      	bmi.n	801fa54 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801f9b0:	f8de 5008 	ldr.w	r5, [lr, #8]
 801f9b4:	42bd      	cmp	r5, r7
 801f9b6:	dd4d      	ble.n	801fa54 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801f9b8:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801f9bc:	d44a      	bmi.n	801fa54 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801f9be:	f8de 000c 	ldr.w	r0, [lr, #12]
 801f9c2:	4560      	cmp	r0, ip
 801f9c4:	dd46      	ble.n	801fa54 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801f9c6:	b22d      	sxth	r5, r5
 801f9c8:	9802      	ldr	r0, [sp, #8]
 801f9ca:	fb0c 7505 	mla	r5, ip, r5, r7
 801f9ce:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801f9d2:	f06f 0501 	mvn.w	r5, #1
 801f9d6:	fb05 fb08 	mul.w	fp, r5, r8
 801f9da:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801f9de:	f834 500b 	ldrh.w	r5, [r4, fp]
 801f9e2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f9e6:	122f      	asrs	r7, r5, #8
 801f9e8:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801f9ec:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f9f0:	00ed      	lsls	r5, r5, #3
 801f9f2:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801f9f6:	fb17 f706 	smulbb	r7, r7, r6
 801f9fa:	b2ed      	uxtb	r5, r5
 801f9fc:	fb19 f906 	smulbb	r9, r9, r6
 801fa00:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801fa04:	10c7      	asrs	r7, r0, #3
 801fa06:	fb15 f506 	smulbb	r5, r5, r6
 801fa0a:	00c0      	lsls	r0, r0, #3
 801fa0c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801fa10:	fa1f fc8c 	uxth.w	ip, ip
 801fa14:	b2c0      	uxtb	r0, r0
 801fa16:	fb07 970a 	mla	r7, r7, sl, r9
 801fa1a:	fb00 500a 	mla	r0, r0, sl, r5
 801fa1e:	f10c 0501 	add.w	r5, ip, #1
 801fa22:	b2bf      	uxth	r7, r7
 801fa24:	b280      	uxth	r0, r0
 801fa26:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801fa2a:	f107 0901 	add.w	r9, r7, #1
 801fa2e:	1c45      	adds	r5, r0, #1
 801fa30:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801fa34:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801fa38:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801fa3c:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801fa40:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801fa44:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801fa48:	ea45 0c0c 	orr.w	ip, r5, ip
 801fa4c:	ea4c 0c09 	orr.w	ip, ip, r9
 801fa50:	f824 c00b 	strh.w	ip, [r4, fp]
 801fa54:	9811      	ldr	r0, [sp, #68]	; 0x44
 801fa56:	f108 38ff 	add.w	r8, r8, #4294967295
 801fa5a:	4401      	add	r1, r0
 801fa5c:	9812      	ldr	r0, [sp, #72]	; 0x48
 801fa5e:	4402      	add	r2, r0
 801fa60:	e75e      	b.n	801f920 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801fa62:	b005      	add	sp, #20
 801fa64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fa68 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fa68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa6c:	b085      	sub	sp, #20
 801fa6e:	4693      	mov	fp, r2
 801fa70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fa74:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801fa76:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801fa78:	6870      	ldr	r0, [r6, #4]
 801fa7a:	9101      	str	r1, [sp, #4]
 801fa7c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801fa80:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801fa84:	fb00 2404 	mla	r4, r0, r4, r2
 801fa88:	6832      	ldr	r2, [r6, #0]
 801fa8a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801fa8e:	682a      	ldr	r2, [r5, #0]
 801fa90:	9202      	str	r2, [sp, #8]
 801fa92:	9a01      	ldr	r2, [sp, #4]
 801fa94:	2a00      	cmp	r2, #0
 801fa96:	dc03      	bgt.n	801faa0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801fa98:	f1bb 0f00 	cmp.w	fp, #0
 801fa9c:	f340 809a 	ble.w	801fbd4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801faa0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801faa2:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801faa6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801faaa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801faac:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801fab0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801fab4:	2b00      	cmp	r3, #0
 801fab6:	dd0c      	ble.n	801fad2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801fab8:	1406      	asrs	r6, r0, #16
 801faba:	d405      	bmi.n	801fac8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801fabc:	454e      	cmp	r6, r9
 801fabe:	da03      	bge.n	801fac8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801fac0:	1416      	asrs	r6, r2, #16
 801fac2:	d401      	bmi.n	801fac8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801fac4:	4546      	cmp	r6, r8
 801fac6:	db05      	blt.n	801fad4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801fac8:	4470      	add	r0, lr
 801faca:	4462      	add	r2, ip
 801facc:	3b01      	subs	r3, #1
 801face:	3402      	adds	r4, #2
 801fad0:	e7f0      	b.n	801fab4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801fad2:	d00f      	beq.n	801faf4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801fad4:	1e5e      	subs	r6, r3, #1
 801fad6:	fb0e 0706 	mla	r7, lr, r6, r0
 801fada:	143f      	asrs	r7, r7, #16
 801fadc:	d541      	bpl.n	801fb62 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801fade:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801fae2:	4698      	mov	r8, r3
 801fae4:	9603      	str	r6, [sp, #12]
 801fae6:	f1b8 0f00 	cmp.w	r8, #0
 801faea:	dc56      	bgt.n	801fb9a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801faec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801faf0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801faf4:	9b01      	ldr	r3, [sp, #4]
 801faf6:	2b00      	cmp	r3, #0
 801faf8:	dd6c      	ble.n	801fbd4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801fafa:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fafe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fb00:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fb04:	eeb0 6a62 	vmov.f32	s12, s5
 801fb08:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fb0c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fb10:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fb14:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801fb18:	eeb0 6a43 	vmov.f32	s12, s6
 801fb1c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fb20:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801fb24:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fb28:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fb2c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fb30:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fb34:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fb38:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fb3c:	ee12 2a90 	vmov	r2, s5
 801fb40:	eef0 2a47 	vmov.f32	s5, s14
 801fb44:	fb92 fef3 	sdiv	lr, r2, r3
 801fb48:	ee13 2a10 	vmov	r2, s6
 801fb4c:	eeb0 3a67 	vmov.f32	s6, s15
 801fb50:	fb92 fcf3 	sdiv	ip, r2, r3
 801fb54:	9b01      	ldr	r3, [sp, #4]
 801fb56:	3b01      	subs	r3, #1
 801fb58:	9301      	str	r3, [sp, #4]
 801fb5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fb5c:	bf08      	it	eq
 801fb5e:	465b      	moveq	r3, fp
 801fb60:	e797      	b.n	801fa92 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801fb62:	454f      	cmp	r7, r9
 801fb64:	dabb      	bge.n	801fade <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801fb66:	fb0c 2606 	mla	r6, ip, r6, r2
 801fb6a:	1436      	asrs	r6, r6, #16
 801fb6c:	d4b7      	bmi.n	801fade <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801fb6e:	4546      	cmp	r6, r8
 801fb70:	dab5      	bge.n	801fade <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801fb72:	461e      	mov	r6, r3
 801fb74:	46a0      	mov	r8, r4
 801fb76:	2e00      	cmp	r6, #0
 801fb78:	ddb8      	ble.n	801faec <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801fb7a:	1417      	asrs	r7, r2, #16
 801fb7c:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801fb80:	ea4f 4920 	mov.w	r9, r0, asr #16
 801fb84:	9902      	ldr	r1, [sp, #8]
 801fb86:	4470      	add	r0, lr
 801fb88:	4462      	add	r2, ip
 801fb8a:	fb0a 9707 	mla	r7, sl, r7, r9
 801fb8e:	3e01      	subs	r6, #1
 801fb90:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801fb94:	f828 7b02 	strh.w	r7, [r8], #2
 801fb98:	e7ed      	b.n	801fb76 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801fb9a:	ea5f 4920 	movs.w	r9, r0, asr #16
 801fb9e:	d414      	bmi.n	801fbca <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801fba0:	68ae      	ldr	r6, [r5, #8]
 801fba2:	454e      	cmp	r6, r9
 801fba4:	dd11      	ble.n	801fbca <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801fba6:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801fbaa:	d40e      	bmi.n	801fbca <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801fbac:	68ef      	ldr	r7, [r5, #12]
 801fbae:	4557      	cmp	r7, sl
 801fbb0:	dd0b      	ble.n	801fbca <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801fbb2:	b236      	sxth	r6, r6
 801fbb4:	f06f 0101 	mvn.w	r1, #1
 801fbb8:	9f02      	ldr	r7, [sp, #8]
 801fbba:	fb0a 9606 	mla	r6, sl, r6, r9
 801fbbe:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801fbc2:	fb01 f608 	mul.w	r6, r1, r8
 801fbc6:	9903      	ldr	r1, [sp, #12]
 801fbc8:	538f      	strh	r7, [r1, r6]
 801fbca:	4470      	add	r0, lr
 801fbcc:	4462      	add	r2, ip
 801fbce:	f108 38ff 	add.w	r8, r8, #4294967295
 801fbd2:	e788      	b.n	801fae6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801fbd4:	b005      	add	sp, #20
 801fbd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fbda <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fbda:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fbde:	b087      	sub	sp, #28
 801fbe0:	468b      	mov	fp, r1
 801fbe2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fbe6:	9815      	ldr	r0, [sp, #84]	; 0x54
 801fbe8:	9203      	str	r2, [sp, #12]
 801fbea:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801fbee:	6841      	ldr	r1, [r0, #4]
 801fbf0:	9204      	str	r2, [sp, #16]
 801fbf2:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801fbf6:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801fbfa:	fb01 2505 	mla	r5, r1, r5, r2
 801fbfe:	6802      	ldr	r2, [r0, #0]
 801fc00:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801fc04:	f8d9 2000 	ldr.w	r2, [r9]
 801fc08:	9201      	str	r2, [sp, #4]
 801fc0a:	f1bb 0f00 	cmp.w	fp, #0
 801fc0e:	dc03      	bgt.n	801fc18 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801fc10:	9a03      	ldr	r2, [sp, #12]
 801fc12:	2a00      	cmp	r2, #0
 801fc14:	f340 8158 	ble.w	801fec8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801fc18:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fc1a:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801fc1e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801fc22:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fc24:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801fc28:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801fc2c:	2b00      	cmp	r3, #0
 801fc2e:	dd0e      	ble.n	801fc4e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801fc30:	1402      	asrs	r2, r0, #16
 801fc32:	d405      	bmi.n	801fc40 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801fc34:	42ba      	cmp	r2, r7
 801fc36:	da03      	bge.n	801fc40 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801fc38:	140a      	asrs	r2, r1, #16
 801fc3a:	d401      	bmi.n	801fc40 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801fc3c:	42b2      	cmp	r2, r6
 801fc3e:	db07      	blt.n	801fc50 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801fc40:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fc42:	3b01      	subs	r3, #1
 801fc44:	3502      	adds	r5, #2
 801fc46:	4410      	add	r0, r2
 801fc48:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fc4a:	4411      	add	r1, r2
 801fc4c:	e7ee      	b.n	801fc2c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801fc4e:	d017      	beq.n	801fc80 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801fc50:	1e5a      	subs	r2, r3, #1
 801fc52:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801fc54:	fb04 0402 	mla	r4, r4, r2, r0
 801fc58:	1424      	asrs	r4, r4, #16
 801fc5a:	d409      	bmi.n	801fc70 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801fc5c:	42bc      	cmp	r4, r7
 801fc5e:	da07      	bge.n	801fc70 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801fc60:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801fc62:	fb04 1202 	mla	r2, r4, r2, r1
 801fc66:	1412      	asrs	r2, r2, #16
 801fc68:	d402      	bmi.n	801fc70 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801fc6a:	42b2      	cmp	r2, r6
 801fc6c:	f2c0 80bf 	blt.w	801fdee <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801fc70:	2700      	movs	r7, #0
 801fc72:	19da      	adds	r2, r3, r7
 801fc74:	2a00      	cmp	r2, #0
 801fc76:	dc3e      	bgt.n	801fcf6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801fc78:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fc7c:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801fc80:	f1bb 0f00 	cmp.w	fp, #0
 801fc84:	f340 8120 	ble.w	801fec8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801fc88:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fc8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fc8e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fc92:	f1bb 0b01 	subs.w	fp, fp, #1
 801fc96:	eeb0 6a62 	vmov.f32	s12, s5
 801fc9a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fc9e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fca2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fca6:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801fcaa:	eeb0 6a43 	vmov.f32	s12, s6
 801fcae:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fcb2:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801fcb6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fcba:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fcbe:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fcc2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fcc6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fcca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fcce:	ee12 2a90 	vmov	r2, s5
 801fcd2:	eef0 2a47 	vmov.f32	s5, s14
 801fcd6:	fb92 f3f3 	sdiv	r3, r2, r3
 801fcda:	ee13 2a10 	vmov	r2, s6
 801fcde:	9313      	str	r3, [sp, #76]	; 0x4c
 801fce0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fce2:	eeb0 3a67 	vmov.f32	s6, s15
 801fce6:	fb92 f3f3 	sdiv	r3, r2, r3
 801fcea:	9a03      	ldr	r2, [sp, #12]
 801fcec:	9314      	str	r3, [sp, #80]	; 0x50
 801fcee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fcf0:	bf08      	it	eq
 801fcf2:	4613      	moveq	r3, r2
 801fcf4:	e789      	b.n	801fc0a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801fcf6:	1406      	asrs	r6, r0, #16
 801fcf8:	d42d      	bmi.n	801fd56 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801fcfa:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801fcfe:	42b4      	cmp	r4, r6
 801fd00:	dd29      	ble.n	801fd56 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801fd02:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801fd06:	d426      	bmi.n	801fd56 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801fd08:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801fd0c:	4562      	cmp	r2, ip
 801fd0e:	dd22      	ble.n	801fd56 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801fd10:	b224      	sxth	r4, r4
 801fd12:	9a01      	ldr	r2, [sp, #4]
 801fd14:	fb0c 6404 	mla	r4, ip, r4, r6
 801fd18:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 801fd1c:	0e22      	lsrs	r2, r4, #24
 801fd1e:	d01a      	beq.n	801fd56 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801fd20:	9e04      	ldr	r6, [sp, #16]
 801fd22:	4372      	muls	r2, r6
 801fd24:	1c56      	adds	r6, r2, #1
 801fd26:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801fd2a:	0a26      	lsrs	r6, r4, #8
 801fd2c:	1212      	asrs	r2, r2, #8
 801fd2e:	9605      	str	r6, [sp, #20]
 801fd30:	2aff      	cmp	r2, #255	; 0xff
 801fd32:	d116      	bne.n	801fd62 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801fd34:	f06f 0201 	mvn.w	r2, #1
 801fd38:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801fd3c:	fb02 fc07 	mul.w	ip, r2, r7
 801fd40:	0962      	lsrs	r2, r4, #5
 801fd42:	f026 0607 	bic.w	r6, r6, #7
 801fd46:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801fd4a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801fd4e:	4316      	orrs	r6, r2
 801fd50:	4326      	orrs	r6, r4
 801fd52:	f825 600c 	strh.w	r6, [r5, ip]
 801fd56:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fd58:	3f01      	subs	r7, #1
 801fd5a:	4410      	add	r0, r2
 801fd5c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fd5e:	4411      	add	r1, r2
 801fd60:	e787      	b.n	801fc72 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801fd62:	f06f 0601 	mvn.w	r6, #1
 801fd66:	fa1f fa82 	uxth.w	sl, r2
 801fd6a:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 801fd6e:	43d2      	mvns	r2, r2
 801fd70:	437e      	muls	r6, r7
 801fd72:	b2e4      	uxtb	r4, r4
 801fd74:	fb1c fc0a 	smulbb	ip, ip, sl
 801fd78:	b2d2      	uxtb	r2, r2
 801fd7a:	f835 8006 	ldrh.w	r8, [r5, r6]
 801fd7e:	fb14 f40a 	smulbb	r4, r4, sl
 801fd82:	9602      	str	r6, [sp, #8]
 801fd84:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801fd88:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801fd8c:	fb16 f60a 	smulbb	r6, r6, sl
 801fd90:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801fd94:	fb0e ce02 	mla	lr, lr, r2, ip
 801fd98:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801fd9c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801fda0:	fa1f fe8e 	uxth.w	lr, lr
 801fda4:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801fda8:	fa5f f888 	uxtb.w	r8, r8
 801fdac:	fb0c 6c02 	mla	ip, ip, r2, r6
 801fdb0:	fb08 4402 	mla	r4, r8, r2, r4
 801fdb4:	f10e 0201 	add.w	r2, lr, #1
 801fdb8:	fa1f fc8c 	uxth.w	ip, ip
 801fdbc:	b2a4      	uxth	r4, r4
 801fdbe:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801fdc2:	9a02      	ldr	r2, [sp, #8]
 801fdc4:	1c66      	adds	r6, r4, #1
 801fdc6:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801fdca:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801fdce:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801fdd2:	ea46 0e0e 	orr.w	lr, r6, lr
 801fdd6:	f10c 0601 	add.w	r6, ip, #1
 801fdda:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801fdde:	0976      	lsrs	r6, r6, #5
 801fde0:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801fde4:	ea4e 0e06 	orr.w	lr, lr, r6
 801fde8:	f825 e002 	strh.w	lr, [r5, r2]
 801fdec:	e7b3      	b.n	801fd56 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801fdee:	f04f 0800 	mov.w	r8, #0
 801fdf2:	eba3 0208 	sub.w	r2, r3, r8
 801fdf6:	2a00      	cmp	r2, #0
 801fdf8:	f77f af3e 	ble.w	801fc78 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801fdfc:	1404      	asrs	r4, r0, #16
 801fdfe:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801fe02:	140a      	asrs	r2, r1, #16
 801fe04:	fb06 4202 	mla	r2, r6, r2, r4
 801fe08:	9c01      	ldr	r4, [sp, #4]
 801fe0a:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 801fe0e:	0e22      	lsrs	r2, r4, #24
 801fe10:	d015      	beq.n	801fe3e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801fe12:	9e04      	ldr	r6, [sp, #16]
 801fe14:	4372      	muls	r2, r6
 801fe16:	1c56      	adds	r6, r2, #1
 801fe18:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801fe1c:	0a26      	lsrs	r6, r4, #8
 801fe1e:	1212      	asrs	r2, r2, #8
 801fe20:	2aff      	cmp	r2, #255	; 0xff
 801fe22:	d113      	bne.n	801fe4c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801fe24:	0962      	lsrs	r2, r4, #5
 801fe26:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801fe2a:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801fe2e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801fe32:	f026 0607 	bic.w	r6, r6, #7
 801fe36:	4316      	orrs	r6, r2
 801fe38:	4326      	orrs	r6, r4
 801fe3a:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 801fe3e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fe40:	f108 0801 	add.w	r8, r8, #1
 801fe44:	4410      	add	r0, r2
 801fe46:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fe48:	4411      	add	r1, r2
 801fe4a:	e7d2      	b.n	801fdf2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801fe4c:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 801fe50:	fa1f fa82 	uxth.w	sl, r2
 801fe54:	f3c4 4707 	ubfx	r7, r4, #16, #8
 801fe58:	43d2      	mvns	r2, r2
 801fe5a:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801fe5e:	fb17 f70a 	smulbb	r7, r7, sl
 801fe62:	b2d2      	uxtb	r2, r2
 801fe64:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801fe68:	b2e4      	uxtb	r4, r4
 801fe6a:	b2f6      	uxtb	r6, r6
 801fe6c:	fb0c 7c02 	mla	ip, ip, r2, r7
 801fe70:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801fe74:	fb14 f40a 	smulbb	r4, r4, sl
 801fe78:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801fe7c:	fa1f fc8c 	uxth.w	ip, ip
 801fe80:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801fe84:	fb16 f60a 	smulbb	r6, r6, sl
 801fe88:	fa5f fe8e 	uxtb.w	lr, lr
 801fe8c:	fb0e 4402 	mla	r4, lr, r2, r4
 801fe90:	fb07 6702 	mla	r7, r7, r2, r6
 801fe94:	f10c 0201 	add.w	r2, ip, #1
 801fe98:	b2a4      	uxth	r4, r4
 801fe9a:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801fe9e:	1c66      	adds	r6, r4, #1
 801fea0:	b2bf      	uxth	r7, r7
 801fea2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801fea6:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801feaa:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801feae:	ea46 0c0c 	orr.w	ip, r6, ip
 801feb2:	1c7e      	adds	r6, r7, #1
 801feb4:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801feb8:	0976      	lsrs	r6, r6, #5
 801feba:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801febe:	ea4c 0c06 	orr.w	ip, ip, r6
 801fec2:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 801fec6:	e7ba      	b.n	801fe3e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801fec8:	b007      	add	sp, #28
 801feca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801fed0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fed4:	b085      	sub	sp, #20
 801fed6:	468b      	mov	fp, r1
 801fed8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fedc:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801fede:	9203      	str	r2, [sp, #12]
 801fee0:	6841      	ldr	r1, [r0, #4]
 801fee2:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801fee6:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801feea:	fb01 2404 	mla	r4, r1, r4, r2
 801feee:	6802      	ldr	r2, [r0, #0]
 801fef0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801fef4:	f8d8 2000 	ldr.w	r2, [r8]
 801fef8:	9201      	str	r2, [sp, #4]
 801fefa:	f1bb 0f00 	cmp.w	fp, #0
 801fefe:	dc03      	bgt.n	801ff08 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801ff00:	9a03      	ldr	r2, [sp, #12]
 801ff02:	2a00      	cmp	r2, #0
 801ff04:	f340 814f 	ble.w	80201a6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801ff08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ff0a:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801ff0e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ff12:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ff14:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801ff18:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ff1c:	2b00      	cmp	r3, #0
 801ff1e:	dd0e      	ble.n	801ff3e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801ff20:	1408      	asrs	r0, r1, #16
 801ff22:	d405      	bmi.n	801ff30 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ff24:	42b8      	cmp	r0, r7
 801ff26:	da03      	bge.n	801ff30 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ff28:	1410      	asrs	r0, r2, #16
 801ff2a:	d401      	bmi.n	801ff30 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801ff2c:	42b0      	cmp	r0, r6
 801ff2e:	db07      	blt.n	801ff40 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ff30:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ff32:	3b01      	subs	r3, #1
 801ff34:	3402      	adds	r4, #2
 801ff36:	4401      	add	r1, r0
 801ff38:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ff3a:	4402      	add	r2, r0
 801ff3c:	e7ee      	b.n	801ff1c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801ff3e:	d017      	beq.n	801ff70 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801ff40:	1e58      	subs	r0, r3, #1
 801ff42:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801ff44:	fb05 1500 	mla	r5, r5, r0, r1
 801ff48:	142d      	asrs	r5, r5, #16
 801ff4a:	d409      	bmi.n	801ff60 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ff4c:	42bd      	cmp	r5, r7
 801ff4e:	da07      	bge.n	801ff60 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ff50:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801ff52:	fb05 2000 	mla	r0, r5, r0, r2
 801ff56:	1400      	asrs	r0, r0, #16
 801ff58:	d402      	bmi.n	801ff60 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ff5a:	42b0      	cmp	r0, r6
 801ff5c:	f2c0 80ba 	blt.w	80200d4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801ff60:	2600      	movs	r6, #0
 801ff62:	1998      	adds	r0, r3, r6
 801ff64:	2800      	cmp	r0, #0
 801ff66:	dc3e      	bgt.n	801ffe6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801ff68:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ff6c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ff70:	f1bb 0f00 	cmp.w	fp, #0
 801ff74:	f340 8117 	ble.w	80201a6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801ff78:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ff7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ff7e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ff82:	f1bb 0b01 	subs.w	fp, fp, #1
 801ff86:	eeb0 6a62 	vmov.f32	s12, s5
 801ff8a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ff8e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ff92:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ff96:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801ff9a:	eeb0 6a43 	vmov.f32	s12, s6
 801ff9e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ffa2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801ffa6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ffaa:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ffae:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ffb2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ffb6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ffba:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ffbe:	ee12 2a90 	vmov	r2, s5
 801ffc2:	eef0 2a47 	vmov.f32	s5, s14
 801ffc6:	fb92 f3f3 	sdiv	r3, r2, r3
 801ffca:	ee13 2a10 	vmov	r2, s6
 801ffce:	9311      	str	r3, [sp, #68]	; 0x44
 801ffd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ffd2:	eeb0 3a67 	vmov.f32	s6, s15
 801ffd6:	fb92 f3f3 	sdiv	r3, r2, r3
 801ffda:	9a03      	ldr	r2, [sp, #12]
 801ffdc:	9312      	str	r3, [sp, #72]	; 0x48
 801ffde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ffe0:	bf08      	it	eq
 801ffe2:	4613      	moveq	r3, r2
 801ffe4:	e789      	b.n	801fefa <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801ffe6:	140f      	asrs	r7, r1, #16
 801ffe8:	d424      	bmi.n	8020034 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801ffea:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801ffee:	42bd      	cmp	r5, r7
 801fff0:	dd20      	ble.n	8020034 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fff2:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801fff6:	d41d      	bmi.n	8020034 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fff8:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801fffc:	4560      	cmp	r0, ip
 801fffe:	dd19      	ble.n	8020034 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020000:	b22d      	sxth	r5, r5
 8020002:	9801      	ldr	r0, [sp, #4]
 8020004:	fb0c 7505 	mla	r5, ip, r5, r7
 8020008:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 802000c:	0e07      	lsrs	r7, r0, #24
 802000e:	2fff      	cmp	r7, #255	; 0xff
 8020010:	d116      	bne.n	8020040 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8020012:	f06f 0501 	mvn.w	r5, #1
 8020016:	fb05 f706 	mul.w	r7, r5, r6
 802001a:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 802001e:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 8020022:	0945      	lsrs	r5, r0, #5
 8020024:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8020028:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802002c:	ea4c 0505 	orr.w	r5, ip, r5
 8020030:	4305      	orrs	r5, r0
 8020032:	53e5      	strh	r5, [r4, r7]
 8020034:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020036:	3e01      	subs	r6, #1
 8020038:	4401      	add	r1, r0
 802003a:	9812      	ldr	r0, [sp, #72]	; 0x48
 802003c:	4402      	add	r2, r0
 802003e:	e790      	b.n	801ff62 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020040:	b2fd      	uxtb	r5, r7
 8020042:	2f00      	cmp	r7, #0
 8020044:	d0f6      	beq.n	8020034 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020046:	f06f 0701 	mvn.w	r7, #1
 802004a:	fa1f f985 	uxth.w	r9, r5
 802004e:	43ed      	mvns	r5, r5
 8020050:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8020054:	4377      	muls	r7, r6
 8020056:	fb1a fa09 	smulbb	sl, sl, r9
 802005a:	b2ed      	uxtb	r5, r5
 802005c:	f834 e007 	ldrh.w	lr, [r4, r7]
 8020060:	9702      	str	r7, [sp, #8]
 8020062:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8020066:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 802006a:	fb17 f709 	smulbb	r7, r7, r9
 802006e:	b2c0      	uxtb	r0, r0
 8020070:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020074:	fb10 f009 	smulbb	r0, r0, r9
 8020078:	fb0c 7c05 	mla	ip, ip, r5, r7
 802007c:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8020080:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8020084:	fa1f fc8c 	uxth.w	ip, ip
 8020088:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802008c:	fa5f fe8e 	uxtb.w	lr, lr
 8020090:	fb07 a705 	mla	r7, r7, r5, sl
 8020094:	fb0e 0005 	mla	r0, lr, r5, r0
 8020098:	f10c 0501 	add.w	r5, ip, #1
 802009c:	b2bf      	uxth	r7, r7
 802009e:	b280      	uxth	r0, r0
 80200a0:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80200a4:	f100 0a01 	add.w	sl, r0, #1
 80200a8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80200ac:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 80200b0:	9802      	ldr	r0, [sp, #8]
 80200b2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80200b6:	ea4a 0c0c 	orr.w	ip, sl, ip
 80200ba:	f107 0a01 	add.w	sl, r7, #1
 80200be:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 80200c2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80200c6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80200ca:	ea4c 0c0a 	orr.w	ip, ip, sl
 80200ce:	f824 c000 	strh.w	ip, [r4, r0]
 80200d2:	e7af      	b.n	8020034 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80200d4:	f04f 0e00 	mov.w	lr, #0
 80200d8:	eba3 000e 	sub.w	r0, r3, lr
 80200dc:	2800      	cmp	r0, #0
 80200de:	f77f af43 	ble.w	801ff68 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80200e2:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 80200e6:	140d      	asrs	r5, r1, #16
 80200e8:	1410      	asrs	r0, r2, #16
 80200ea:	fb06 5000 	mla	r0, r6, r0, r5
 80200ee:	9d01      	ldr	r5, [sp, #4]
 80200f0:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 80200f4:	0e2e      	lsrs	r6, r5, #24
 80200f6:	2eff      	cmp	r6, #255	; 0xff
 80200f8:	d112      	bne.n	8020120 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 80200fa:	482c      	ldr	r0, [pc, #176]	; (80201ac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 80200fc:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 8020100:	0968      	lsrs	r0, r5, #5
 8020102:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8020106:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802010a:	4330      	orrs	r0, r6
 802010c:	4328      	orrs	r0, r5
 802010e:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 8020112:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020114:	f10e 0e01 	add.w	lr, lr, #1
 8020118:	4401      	add	r1, r0
 802011a:	9812      	ldr	r0, [sp, #72]	; 0x48
 802011c:	4402      	add	r2, r0
 802011e:	e7db      	b.n	80200d8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8020120:	b2f0      	uxtb	r0, r6
 8020122:	2e00      	cmp	r6, #0
 8020124:	d0f5      	beq.n	8020112 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8020126:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 802012a:	fa1f f980 	uxth.w	r9, r0
 802012e:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8020132:	43c0      	mvns	r0, r0
 8020134:	ea4f 272c 	mov.w	r7, ip, asr #8
 8020138:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 802013c:	fb16 f609 	smulbb	r6, r6, r9
 8020140:	b2c0      	uxtb	r0, r0
 8020142:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8020146:	b2ed      	uxtb	r5, r5
 8020148:	fb1a fa09 	smulbb	sl, sl, r9
 802014c:	fb07 6700 	mla	r7, r7, r0, r6
 8020150:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8020154:	fb15 f509 	smulbb	r5, r5, r9
 8020158:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802015c:	b2bf      	uxth	r7, r7
 802015e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020162:	fa5f fc8c 	uxtb.w	ip, ip
 8020166:	fb06 a600 	mla	r6, r6, r0, sl
 802016a:	fb0c 5500 	mla	r5, ip, r0, r5
 802016e:	1c78      	adds	r0, r7, #1
 8020170:	b2b6      	uxth	r6, r6
 8020172:	b2ad      	uxth	r5, r5
 8020174:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8020178:	f105 0a01 	add.w	sl, r5, #1
 802017c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8020180:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020184:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020188:	ea4a 0707 	orr.w	r7, sl, r7
 802018c:	f106 0a01 	add.w	sl, r6, #1
 8020190:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8020194:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020198:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 802019c:	ea47 070a 	orr.w	r7, r7, sl
 80201a0:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 80201a4:	e7b5      	b.n	8020112 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 80201a6:	b005      	add	sp, #20
 80201a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80201ac:	fffff800 	.word	0xfffff800

080201b0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80201b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201b4:	b087      	sub	sp, #28
 80201b6:	468b      	mov	fp, r1
 80201b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80201bc:	9815      	ldr	r0, [sp, #84]	; 0x54
 80201be:	9203      	str	r2, [sp, #12]
 80201c0:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80201c4:	6841      	ldr	r1, [r0, #4]
 80201c6:	9204      	str	r2, [sp, #16]
 80201c8:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 80201cc:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 80201d0:	fb01 2404 	mla	r4, r1, r4, r2
 80201d4:	6802      	ldr	r2, [r0, #0]
 80201d6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80201da:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80201de:	3201      	adds	r2, #1
 80201e0:	f022 0201 	bic.w	r2, r2, #1
 80201e4:	9200      	str	r2, [sp, #0]
 80201e6:	f8d9 2000 	ldr.w	r2, [r9]
 80201ea:	9201      	str	r2, [sp, #4]
 80201ec:	f1bb 0f00 	cmp.w	fp, #0
 80201f0:	dc03      	bgt.n	80201fa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80201f2:	9a03      	ldr	r2, [sp, #12]
 80201f4:	2a00      	cmp	r2, #0
 80201f6:	f340 816a 	ble.w	80204ce <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 80201fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80201fc:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 8020200:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8020204:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020206:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 802020a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 802020e:	2b00      	cmp	r3, #0
 8020210:	dd0e      	ble.n	8020230 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8020212:	1402      	asrs	r2, r0, #16
 8020214:	d405      	bmi.n	8020222 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020216:	42ba      	cmp	r2, r7
 8020218:	da03      	bge.n	8020222 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802021a:	140a      	asrs	r2, r1, #16
 802021c:	d401      	bmi.n	8020222 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802021e:	42b2      	cmp	r2, r6
 8020220:	db07      	blt.n	8020232 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8020222:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020224:	3b01      	subs	r3, #1
 8020226:	3402      	adds	r4, #2
 8020228:	4410      	add	r0, r2
 802022a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802022c:	4411      	add	r1, r2
 802022e:	e7ee      	b.n	802020e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8020230:	d017      	beq.n	8020262 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8020232:	1e5a      	subs	r2, r3, #1
 8020234:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8020236:	fb05 0502 	mla	r5, r5, r2, r0
 802023a:	142d      	asrs	r5, r5, #16
 802023c:	d409      	bmi.n	8020252 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 802023e:	42bd      	cmp	r5, r7
 8020240:	da07      	bge.n	8020252 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8020242:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8020244:	fb05 1202 	mla	r2, r5, r2, r1
 8020248:	1412      	asrs	r2, r2, #16
 802024a:	d402      	bmi.n	8020252 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 802024c:	42b2      	cmp	r2, r6
 802024e:	f2c0 80c8 	blt.w	80203e2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8020252:	2700      	movs	r7, #0
 8020254:	19da      	adds	r2, r3, r7
 8020256:	2a00      	cmp	r2, #0
 8020258:	dc3e      	bgt.n	80202d8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 802025a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802025e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020262:	f1bb 0f00 	cmp.w	fp, #0
 8020266:	f340 8132 	ble.w	80204ce <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 802026a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802026e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020270:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020274:	f1bb 0b01 	subs.w	fp, fp, #1
 8020278:	eeb0 6a62 	vmov.f32	s12, s5
 802027c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020280:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020284:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020288:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 802028c:	eeb0 6a43 	vmov.f32	s12, s6
 8020290:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020294:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8020298:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802029c:	ee61 7a27 	vmul.f32	s15, s2, s15
 80202a0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80202a4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80202a8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80202ac:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80202b0:	ee12 2a90 	vmov	r2, s5
 80202b4:	eef0 2a47 	vmov.f32	s5, s14
 80202b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80202bc:	ee13 2a10 	vmov	r2, s6
 80202c0:	9313      	str	r3, [sp, #76]	; 0x4c
 80202c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80202c4:	eeb0 3a67 	vmov.f32	s6, s15
 80202c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80202cc:	9a03      	ldr	r2, [sp, #12]
 80202ce:	9314      	str	r3, [sp, #80]	; 0x50
 80202d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80202d2:	bf08      	it	eq
 80202d4:	4613      	moveq	r3, r2
 80202d6:	e789      	b.n	80201ec <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80202d8:	1405      	asrs	r5, r0, #16
 80202da:	d436      	bmi.n	802034a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80202dc:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80202e0:	42aa      	cmp	r2, r5
 80202e2:	dd32      	ble.n	802034a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80202e4:	140e      	asrs	r6, r1, #16
 80202e6:	d430      	bmi.n	802034a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80202e8:	f8d9 200c 	ldr.w	r2, [r9, #12]
 80202ec:	42b2      	cmp	r2, r6
 80202ee:	dd2c      	ble.n	802034a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80202f0:	9a00      	ldr	r2, [sp, #0]
 80202f2:	fb06 5502 	mla	r5, r6, r2, r5
 80202f6:	9e01      	ldr	r6, [sp, #4]
 80202f8:	086a      	lsrs	r2, r5, #1
 80202fa:	5cb2      	ldrb	r2, [r6, r2]
 80202fc:	07ee      	lsls	r6, r5, #31
 80202fe:	bf54      	ite	pl
 8020300:	f002 020f 	andpl.w	r2, r2, #15
 8020304:	1112      	asrmi	r2, r2, #4
 8020306:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802030a:	b2d2      	uxtb	r2, r2
 802030c:	b1ea      	cbz	r2, 802034a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802030e:	9d04      	ldr	r5, [sp, #16]
 8020310:	436a      	muls	r2, r5
 8020312:	1c55      	adds	r5, r2, #1
 8020314:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8020318:	4d6e      	ldr	r5, [pc, #440]	; (80204d4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 802031a:	1212      	asrs	r2, r2, #8
 802031c:	682d      	ldr	r5, [r5, #0]
 802031e:	2aff      	cmp	r2, #255	; 0xff
 8020320:	ea4f 2615 	mov.w	r6, r5, lsr #8
 8020324:	9605      	str	r6, [sp, #20]
 8020326:	d116      	bne.n	8020356 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8020328:	f06f 0201 	mvn.w	r2, #1
 802032c:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8020330:	fb02 fc07 	mul.w	ip, r2, r7
 8020334:	096a      	lsrs	r2, r5, #5
 8020336:	f026 0607 	bic.w	r6, r6, #7
 802033a:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 802033e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020342:	4316      	orrs	r6, r2
 8020344:	432e      	orrs	r6, r5
 8020346:	f824 600c 	strh.w	r6, [r4, ip]
 802034a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802034c:	3f01      	subs	r7, #1
 802034e:	4410      	add	r0, r2
 8020350:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020352:	4411      	add	r1, r2
 8020354:	e77e      	b.n	8020254 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8020356:	f06f 0601 	mvn.w	r6, #1
 802035a:	fa1f fa82 	uxth.w	sl, r2
 802035e:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 8020362:	43d2      	mvns	r2, r2
 8020364:	437e      	muls	r6, r7
 8020366:	b2ed      	uxtb	r5, r5
 8020368:	fb1c fc0a 	smulbb	ip, ip, sl
 802036c:	b2d2      	uxtb	r2, r2
 802036e:	f834 8006 	ldrh.w	r8, [r4, r6]
 8020372:	fb15 f50a 	smulbb	r5, r5, sl
 8020376:	9602      	str	r6, [sp, #8]
 8020378:	ea4f 2e28 	mov.w	lr, r8, asr #8
 802037c:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8020380:	fb16 f60a 	smulbb	r6, r6, sl
 8020384:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8020388:	fb0e ce02 	mla	lr, lr, r2, ip
 802038c:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 8020390:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8020394:	fa1f fe8e 	uxth.w	lr, lr
 8020398:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 802039c:	fa5f f888 	uxtb.w	r8, r8
 80203a0:	fb0c 6c02 	mla	ip, ip, r2, r6
 80203a4:	fb08 5502 	mla	r5, r8, r2, r5
 80203a8:	f10e 0201 	add.w	r2, lr, #1
 80203ac:	fa1f fc8c 	uxth.w	ip, ip
 80203b0:	b2ad      	uxth	r5, r5
 80203b2:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 80203b6:	9a02      	ldr	r2, [sp, #8]
 80203b8:	1c6e      	adds	r6, r5, #1
 80203ba:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 80203be:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 80203c2:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80203c6:	ea46 0e0e 	orr.w	lr, r6, lr
 80203ca:	f10c 0601 	add.w	r6, ip, #1
 80203ce:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 80203d2:	0976      	lsrs	r6, r6, #5
 80203d4:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80203d8:	ea4e 0e06 	orr.w	lr, lr, r6
 80203dc:	f824 e002 	strh.w	lr, [r4, r2]
 80203e0:	e7b3      	b.n	802034a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80203e2:	f04f 0800 	mov.w	r8, #0
 80203e6:	eba3 0208 	sub.w	r2, r3, r8
 80203ea:	2a00      	cmp	r2, #0
 80203ec:	f77f af35 	ble.w	802025a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80203f0:	1402      	asrs	r2, r0, #16
 80203f2:	9e00      	ldr	r6, [sp, #0]
 80203f4:	140d      	asrs	r5, r1, #16
 80203f6:	fb06 2505 	mla	r5, r6, r5, r2
 80203fa:	9e01      	ldr	r6, [sp, #4]
 80203fc:	086a      	lsrs	r2, r5, #1
 80203fe:	07ed      	lsls	r5, r5, #31
 8020400:	5cb2      	ldrb	r2, [r6, r2]
 8020402:	bf54      	ite	pl
 8020404:	f002 020f 	andpl.w	r2, r2, #15
 8020408:	1112      	asrmi	r2, r2, #4
 802040a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802040e:	b2d2      	uxtb	r2, r2
 8020410:	b1c2      	cbz	r2, 8020444 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8020412:	9d04      	ldr	r5, [sp, #16]
 8020414:	436a      	muls	r2, r5
 8020416:	1c55      	adds	r5, r2, #1
 8020418:	eb05 2222 	add.w	r2, r5, r2, asr #8
 802041c:	4d2d      	ldr	r5, [pc, #180]	; (80204d4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 802041e:	1212      	asrs	r2, r2, #8
 8020420:	682e      	ldr	r6, [r5, #0]
 8020422:	2aff      	cmp	r2, #255	; 0xff
 8020424:	ea4f 2516 	mov.w	r5, r6, lsr #8
 8020428:	d113      	bne.n	8020452 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 802042a:	0972      	lsrs	r2, r6, #5
 802042c:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 8020430:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8020434:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020438:	f025 0507 	bic.w	r5, r5, #7
 802043c:	4315      	orrs	r5, r2
 802043e:	4335      	orrs	r5, r6
 8020440:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 8020444:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020446:	f108 0801 	add.w	r8, r8, #1
 802044a:	4410      	add	r0, r2
 802044c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802044e:	4411      	add	r1, r2
 8020450:	e7c9      	b.n	80203e6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8020452:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 8020456:	fa1f fa82 	uxth.w	sl, r2
 802045a:	f3c6 4707 	ubfx	r7, r6, #16, #8
 802045e:	43d2      	mvns	r2, r2
 8020460:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8020464:	fb17 f70a 	smulbb	r7, r7, sl
 8020468:	b2d2      	uxtb	r2, r2
 802046a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802046e:	b2f6      	uxtb	r6, r6
 8020470:	b2ed      	uxtb	r5, r5
 8020472:	fb0c 7c02 	mla	ip, ip, r2, r7
 8020476:	ea4f 07ee 	mov.w	r7, lr, asr #3
 802047a:	fb16 f60a 	smulbb	r6, r6, sl
 802047e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8020482:	fa1f fc8c 	uxth.w	ip, ip
 8020486:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802048a:	fb15 f50a 	smulbb	r5, r5, sl
 802048e:	fa5f fe8e 	uxtb.w	lr, lr
 8020492:	fb0e 6602 	mla	r6, lr, r2, r6
 8020496:	fb07 5702 	mla	r7, r7, r2, r5
 802049a:	f10c 0201 	add.w	r2, ip, #1
 802049e:	b2b6      	uxth	r6, r6
 80204a0:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 80204a4:	1c75      	adds	r5, r6, #1
 80204a6:	b2bf      	uxth	r7, r7
 80204a8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80204ac:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 80204b0:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80204b4:	ea45 0c0c 	orr.w	ip, r5, ip
 80204b8:	1c7d      	adds	r5, r7, #1
 80204ba:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 80204be:	096d      	lsrs	r5, r5, #5
 80204c0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80204c4:	ea4c 0c05 	orr.w	ip, ip, r5
 80204c8:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 80204cc:	e7ba      	b.n	8020444 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80204ce:	b007      	add	sp, #28
 80204d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80204d4:	2400b5d8 	.word	0x2400b5d8

080204d8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80204d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80204dc:	b087      	sub	sp, #28
 80204de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80204e2:	f8df 8308 	ldr.w	r8, [pc, #776]	; 80207ec <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 80204e6:	9815      	ldr	r0, [sp, #84]	; 0x54
 80204e8:	9101      	str	r1, [sp, #4]
 80204ea:	9205      	str	r2, [sp, #20]
 80204ec:	6841      	ldr	r1, [r0, #4]
 80204ee:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 80204f2:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 80204f6:	fb01 2404 	mla	r4, r1, r4, r2
 80204fa:	6802      	ldr	r2, [r0, #0]
 80204fc:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8020500:	f8db 2008 	ldr.w	r2, [fp, #8]
 8020504:	3201      	adds	r2, #1
 8020506:	f022 0201 	bic.w	r2, r2, #1
 802050a:	9202      	str	r2, [sp, #8]
 802050c:	f8db 2000 	ldr.w	r2, [fp]
 8020510:	9203      	str	r2, [sp, #12]
 8020512:	9a01      	ldr	r2, [sp, #4]
 8020514:	2a00      	cmp	r2, #0
 8020516:	dc03      	bgt.n	8020520 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8020518:	9a05      	ldr	r2, [sp, #20]
 802051a:	2a00      	cmp	r2, #0
 802051c:	f340 8162 	ble.w	80207e4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8020520:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020522:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 8020526:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 802052a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802052c:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 8020530:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8020534:	2b00      	cmp	r3, #0
 8020536:	dd0e      	ble.n	8020556 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8020538:	1402      	asrs	r2, r0, #16
 802053a:	d405      	bmi.n	8020548 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802053c:	42ba      	cmp	r2, r7
 802053e:	da03      	bge.n	8020548 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020540:	140a      	asrs	r2, r1, #16
 8020542:	d401      	bmi.n	8020548 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020544:	42b2      	cmp	r2, r6
 8020546:	db07      	blt.n	8020558 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8020548:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802054a:	3b01      	subs	r3, #1
 802054c:	3402      	adds	r4, #2
 802054e:	4410      	add	r0, r2
 8020550:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020552:	4411      	add	r1, r2
 8020554:	e7ee      	b.n	8020534 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8020556:	d017      	beq.n	8020588 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8020558:	1e5a      	subs	r2, r3, #1
 802055a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802055c:	fb05 0502 	mla	r5, r5, r2, r0
 8020560:	142d      	asrs	r5, r5, #16
 8020562:	d409      	bmi.n	8020578 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020564:	42bd      	cmp	r5, r7
 8020566:	da07      	bge.n	8020578 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020568:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802056a:	fb05 1202 	mla	r2, r5, r2, r1
 802056e:	1412      	asrs	r2, r2, #16
 8020570:	d402      	bmi.n	8020578 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020572:	42b2      	cmp	r2, r6
 8020574:	f2c0 80c3 	blt.w	80206fe <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 8020578:	2500      	movs	r5, #0
 802057a:	195a      	adds	r2, r3, r5
 802057c:	2a00      	cmp	r2, #0
 802057e:	dc3f      	bgt.n	8020600 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8020580:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020584:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020588:	9b01      	ldr	r3, [sp, #4]
 802058a:	2b00      	cmp	r3, #0
 802058c:	f340 812a 	ble.w	80207e4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8020590:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020594:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020596:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802059a:	eeb0 6a62 	vmov.f32	s12, s5
 802059e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80205a2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80205a6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80205aa:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80205ae:	eeb0 6a43 	vmov.f32	s12, s6
 80205b2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80205b6:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80205ba:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80205be:	ee61 7a27 	vmul.f32	s15, s2, s15
 80205c2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80205c6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80205ca:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80205ce:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80205d2:	ee12 2a90 	vmov	r2, s5
 80205d6:	eef0 2a47 	vmov.f32	s5, s14
 80205da:	fb92 f3f3 	sdiv	r3, r2, r3
 80205de:	ee13 2a10 	vmov	r2, s6
 80205e2:	9313      	str	r3, [sp, #76]	; 0x4c
 80205e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80205e6:	eeb0 3a67 	vmov.f32	s6, s15
 80205ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80205ee:	9314      	str	r3, [sp, #80]	; 0x50
 80205f0:	9b01      	ldr	r3, [sp, #4]
 80205f2:	9a05      	ldr	r2, [sp, #20]
 80205f4:	3b01      	subs	r3, #1
 80205f6:	9301      	str	r3, [sp, #4]
 80205f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80205fa:	bf08      	it	eq
 80205fc:	4613      	moveq	r3, r2
 80205fe:	e788      	b.n	8020512 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8020600:	1406      	asrs	r6, r0, #16
 8020602:	d42c      	bmi.n	802065e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020604:	f8db 2008 	ldr.w	r2, [fp, #8]
 8020608:	42b2      	cmp	r2, r6
 802060a:	dd28      	ble.n	802065e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802060c:	140f      	asrs	r7, r1, #16
 802060e:	d426      	bmi.n	802065e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020610:	f8db 200c 	ldr.w	r2, [fp, #12]
 8020614:	42ba      	cmp	r2, r7
 8020616:	dd22      	ble.n	802065e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020618:	9a02      	ldr	r2, [sp, #8]
 802061a:	fb07 6602 	mla	r6, r7, r2, r6
 802061e:	9f03      	ldr	r7, [sp, #12]
 8020620:	0872      	lsrs	r2, r6, #1
 8020622:	07f6      	lsls	r6, r6, #31
 8020624:	5cba      	ldrb	r2, [r7, r2]
 8020626:	bf54      	ite	pl
 8020628:	f002 020f 	andpl.w	r2, r2, #15
 802062c:	1112      	asrmi	r2, r2, #4
 802062e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020632:	b2d2      	uxtb	r2, r2
 8020634:	2aff      	cmp	r2, #255	; 0xff
 8020636:	d118      	bne.n	802066a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8020638:	f06f 0601 	mvn.w	r6, #1
 802063c:	f8d8 2000 	ldr.w	r2, [r8]
 8020640:	fb06 f705 	mul.w	r7, r6, r5
 8020644:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 8020648:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 802064c:	0956      	lsrs	r6, r2, #5
 802064e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8020652:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8020656:	ea4c 0606 	orr.w	r6, ip, r6
 802065a:	4316      	orrs	r6, r2
 802065c:	53e6      	strh	r6, [r4, r7]
 802065e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020660:	3d01      	subs	r5, #1
 8020662:	4410      	add	r0, r2
 8020664:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020666:	4411      	add	r1, r2
 8020668:	e787      	b.n	802057a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 802066a:	2a00      	cmp	r2, #0
 802066c:	d0f7      	beq.n	802065e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802066e:	f06f 0601 	mvn.w	r6, #1
 8020672:	f8d8 c000 	ldr.w	ip, [r8]
 8020676:	fa1f f982 	uxth.w	r9, r2
 802067a:	43d2      	mvns	r2, r2
 802067c:	436e      	muls	r6, r5
 802067e:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 8020682:	b2d2      	uxtb	r2, r2
 8020684:	f834 e006 	ldrh.w	lr, [r4, r6]
 8020688:	fb1a fa09 	smulbb	sl, sl, r9
 802068c:	9604      	str	r6, [sp, #16]
 802068e:	f3cc 4607 	ubfx	r6, ip, #16, #8
 8020692:	ea4f 272e 	mov.w	r7, lr, asr #8
 8020696:	fb16 f609 	smulbb	r6, r6, r9
 802069a:	fa5f fc8c 	uxtb.w	ip, ip
 802069e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80206a2:	fb1c fc09 	smulbb	ip, ip, r9
 80206a6:	fb07 6702 	mla	r7, r7, r2, r6
 80206aa:	ea4f 06ee 	mov.w	r6, lr, asr #3
 80206ae:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80206b2:	b2bf      	uxth	r7, r7
 80206b4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80206b8:	fa5f fe8e 	uxtb.w	lr, lr
 80206bc:	fb06 a602 	mla	r6, r6, r2, sl
 80206c0:	fb0e cc02 	mla	ip, lr, r2, ip
 80206c4:	1c7a      	adds	r2, r7, #1
 80206c6:	b2b6      	uxth	r6, r6
 80206c8:	fa1f fc8c 	uxth.w	ip, ip
 80206cc:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80206d0:	9a04      	ldr	r2, [sp, #16]
 80206d2:	f10c 0a01 	add.w	sl, ip, #1
 80206d6:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80206da:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 80206de:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80206e2:	ea4a 0707 	orr.w	r7, sl, r7
 80206e6:	f106 0a01 	add.w	sl, r6, #1
 80206ea:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80206ee:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80206f2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80206f6:	ea47 070a 	orr.w	r7, r7, sl
 80206fa:	52a7      	strh	r7, [r4, r2]
 80206fc:	e7af      	b.n	802065e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80206fe:	f04f 0e00 	mov.w	lr, #0
 8020702:	eba3 020e 	sub.w	r2, r3, lr
 8020706:	2a00      	cmp	r2, #0
 8020708:	f77f af3a 	ble.w	8020580 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 802070c:	1402      	asrs	r2, r0, #16
 802070e:	9e02      	ldr	r6, [sp, #8]
 8020710:	140d      	asrs	r5, r1, #16
 8020712:	fb06 2505 	mla	r5, r6, r5, r2
 8020716:	9e03      	ldr	r6, [sp, #12]
 8020718:	086a      	lsrs	r2, r5, #1
 802071a:	07ed      	lsls	r5, r5, #31
 802071c:	5cb2      	ldrb	r2, [r6, r2]
 802071e:	bf54      	ite	pl
 8020720:	f002 020f 	andpl.w	r2, r2, #15
 8020724:	1112      	asrmi	r2, r2, #4
 8020726:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802072a:	b2d2      	uxtb	r2, r2
 802072c:	2aff      	cmp	r2, #255	; 0xff
 802072e:	d115      	bne.n	802075c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8020730:	f8d8 5000 	ldr.w	r5, [r8]
 8020734:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 8020738:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 802073c:	096a      	lsrs	r2, r5, #5
 802073e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8020742:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020746:	4332      	orrs	r2, r6
 8020748:	432a      	orrs	r2, r5
 802074a:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 802074e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020750:	f10e 0e01 	add.w	lr, lr, #1
 8020754:	4410      	add	r0, r2
 8020756:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020758:	4411      	add	r1, r2
 802075a:	e7d2      	b.n	8020702 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 802075c:	2a00      	cmp	r2, #0
 802075e:	d0f6      	beq.n	802074e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8020760:	f8d8 7000 	ldr.w	r7, [r8]
 8020764:	fa1f f982 	uxth.w	r9, r2
 8020768:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 802076c:	43d2      	mvns	r2, r2
 802076e:	f3c7 4507 	ubfx	r5, r7, #16, #8
 8020772:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8020776:	ea4f 262c 	mov.w	r6, ip, asr #8
 802077a:	fb15 f509 	smulbb	r5, r5, r9
 802077e:	b2d2      	uxtb	r2, r2
 8020780:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8020784:	b2ff      	uxtb	r7, r7
 8020786:	fb1a fa09 	smulbb	sl, sl, r9
 802078a:	fb06 5602 	mla	r6, r6, r2, r5
 802078e:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8020792:	fb17 f709 	smulbb	r7, r7, r9
 8020796:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802079a:	b2b6      	uxth	r6, r6
 802079c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80207a0:	fa5f fc8c 	uxtb.w	ip, ip
 80207a4:	fb05 a502 	mla	r5, r5, r2, sl
 80207a8:	fb0c 7702 	mla	r7, ip, r2, r7
 80207ac:	1c72      	adds	r2, r6, #1
 80207ae:	b2ad      	uxth	r5, r5
 80207b0:	b2bf      	uxth	r7, r7
 80207b2:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 80207b6:	f107 0a01 	add.w	sl, r7, #1
 80207ba:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 80207be:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 80207c2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80207c6:	ea4a 0606 	orr.w	r6, sl, r6
 80207ca:	f105 0a01 	add.w	sl, r5, #1
 80207ce:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80207d2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80207d6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80207da:	ea46 060a 	orr.w	r6, r6, sl
 80207de:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 80207e2:	e7b4      	b.n	802074e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 80207e4:	b007      	add	sp, #28
 80207e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80207ea:	bf00      	nop
 80207ec:	2400b5d8 	.word	0x2400b5d8

080207f0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 80207f0:	4770      	bx	lr

080207f2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 80207f2:	4770      	bx	lr

080207f4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 80207f4:	4770      	bx	lr

080207f6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 80207f6:	4770      	bx	lr

080207f8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80207f8:	4770      	bx	lr

080207fa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80207fa:	4770      	bx	lr

080207fc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80207fc:	4770      	bx	lr

080207fe <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80207fe:	4770      	bx	lr

08020800 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8020800:	4770      	bx	lr

08020802 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8020802:	4770      	bx	lr

08020804 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8020804:	4770      	bx	lr

08020806 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8020806:	4770      	bx	lr

08020808 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8020808:	4770      	bx	lr

0802080a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 802080a:	4770      	bx	lr

0802080c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 802080c:	4770      	bx	lr

0802080e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 802080e:	4770      	bx	lr

08020810 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8020810:	4770      	bx	lr

08020812 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8020812:	4770      	bx	lr

08020814 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8020814:	4770      	bx	lr

08020816 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8020816:	4770      	bx	lr

08020818 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8020818:	4770      	bx	lr

0802081a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 802081a:	4770      	bx	lr

0802081c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 802081c:	4770      	bx	lr

0802081e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 802081e:	4770      	bx	lr

08020820 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8020820:	4770      	bx	lr

08020822 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8020822:	4770      	bx	lr

08020824 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8020824:	4770      	bx	lr

08020826 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8020826:	4770      	bx	lr

08020828 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 8020828:	b508      	push	{r3, lr}
 802082a:	4b06      	ldr	r3, [pc, #24]	; (8020844 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
 802082c:	8818      	ldrh	r0, [r3, #0]
 802082e:	b928      	cbnz	r0, 802083c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x14>
 8020830:	4b05      	ldr	r3, [pc, #20]	; (8020848 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
 8020832:	2150      	movs	r1, #80	; 0x50
 8020834:	4a05      	ldr	r2, [pc, #20]	; (802084c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
 8020836:	4806      	ldr	r0, [pc, #24]	; (8020850 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
 8020838:	f009 fbd4 	bl	8029fe4 <__assert_func>
 802083c:	0040      	lsls	r0, r0, #1
 802083e:	b280      	uxth	r0, r0
 8020840:	bd08      	pop	{r3, pc}
 8020842:	bf00      	nop
 8020844:	2400b5ca 	.word	0x2400b5ca
 8020848:	0802f39b 	.word	0x0802f39b
 802084c:	0802f994 	.word	0x0802f994
 8020850:	0802f3dd 	.word	0x0802f3dd

08020854 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8020854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020858:	b08b      	sub	sp, #44	; 0x2c
 802085a:	460f      	mov	r7, r1
 802085c:	4616      	mov	r6, r2
 802085e:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 8020862:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 8020866:	f1bb 0f00 	cmp.w	fp, #0
 802086a:	d049      	beq.n	8020900 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 802086c:	6810      	ldr	r0, [r2, #0]
 802086e:	ad06      	add	r5, sp, #24
 8020870:	6851      	ldr	r1, [r2, #4]
 8020872:	c503      	stmia	r5!, {r0, r1}
 8020874:	6818      	ldr	r0, [r3, #0]
 8020876:	ad08      	add	r5, sp, #32
 8020878:	6859      	ldr	r1, [r3, #4]
 802087a:	c503      	stmia	r5!, {r0, r1}
 802087c:	a806      	add	r0, sp, #24
 802087e:	f7fa f883 	bl	801a988 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020882:	4631      	mov	r1, r6
 8020884:	a808      	add	r0, sp, #32
 8020886:	f7fa f8a7 	bl	801a9d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802088a:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 802088e:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8020892:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8020896:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 802089a:	fb16 2103 	smlabb	r1, r6, r3, r2
 802089e:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 80208a2:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 80208a6:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80208aa:	4f5f      	ldr	r7, [pc, #380]	; (8020a28 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 80208ac:	440a      	add	r2, r1
 80208ae:	6838      	ldr	r0, [r7, #0]
 80208b0:	46b9      	mov	r9, r7
 80208b2:	f8ad 2020 	strh.w	r2, [sp, #32]
 80208b6:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80208ba:	4413      	add	r3, r2
 80208bc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80208c0:	6803      	ldr	r3, [r0, #0]
 80208c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80208c4:	4798      	blx	r3
 80208c6:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80208ca:	d01c      	beq.n	8020906 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 80208cc:	f010 0f04 	tst.w	r0, #4
 80208d0:	d01d      	beq.n	802090e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 80208d2:	f8d9 0000 	ldr.w	r0, [r9]
 80208d6:	2700      	movs	r7, #0
 80208d8:	b2ad      	uxth	r5, r5
 80208da:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80208de:	6801      	ldr	r1, [r0, #0]
 80208e0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80208e4:	f8cd b00c 	str.w	fp, [sp, #12]
 80208e8:	9501      	str	r5, [sp, #4]
 80208ea:	e9cd 4704 	strd	r4, r7, [sp, #16]
 80208ee:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 80208f2:	9402      	str	r4, [sp, #8]
 80208f4:	fa1f f488 	uxth.w	r4, r8
 80208f8:	9400      	str	r4, [sp, #0]
 80208fa:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 80208fc:	4631      	mov	r1, r6
 80208fe:	47a0      	blx	r4
 8020900:	b00b      	add	sp, #44	; 0x2c
 8020902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020906:	b914      	cbnz	r4, 802090e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 8020908:	f010 0f01 	tst.w	r0, #1
 802090c:	e7e0      	b.n	80208d0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 802090e:	f8d9 0000 	ldr.w	r0, [r9]
 8020912:	ea4f 0748 	mov.w	r7, r8, lsl #1
 8020916:	6803      	ldr	r3, [r0, #0]
 8020918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802091a:	4798      	blx	r3
 802091c:	4b43      	ldr	r3, [pc, #268]	; (8020a2c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 802091e:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 8020922:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8020926:	881a      	ldrh	r2, [r3, #0]
 8020928:	469a      	mov	sl, r3
 802092a:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 802092e:	fb05 f502 	mul.w	r5, r5, r2
 8020932:	fb02 1404 	mla	r4, r2, r4, r1
 8020936:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802093a:	d059      	beq.n	80209f0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 802093c:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 8020940:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8020944:	fa1f f28b 	uxth.w	r2, fp
 8020948:	469e      	mov	lr, r3
 802094a:	fa1f f989 	uxth.w	r9, r9
 802094e:	42ac      	cmp	r4, r5
 8020950:	d264      	bcs.n	8020a1c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 8020952:	eb04 0a07 	add.w	sl, r4, r7
 8020956:	4554      	cmp	r4, sl
 8020958:	d23d      	bcs.n	80209d6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 802095a:	8821      	ldrh	r1, [r4, #0]
 802095c:	f836 3b02 	ldrh.w	r3, [r6], #2
 8020960:	1208      	asrs	r0, r1, #8
 8020962:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8020966:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802096a:	ea4f 0be1 	mov.w	fp, r1, asr #3
 802096e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020972:	00c9      	lsls	r1, r1, #3
 8020974:	fb10 f009 	smulbb	r0, r0, r9
 8020978:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 802097c:	b2c9      	uxtb	r1, r1
 802097e:	fb0c 0c02 	mla	ip, ip, r2, r0
 8020982:	10d8      	asrs	r0, r3, #3
 8020984:	fb1b fb09 	smulbb	fp, fp, r9
 8020988:	00db      	lsls	r3, r3, #3
 802098a:	fa1f fc8c 	uxth.w	ip, ip
 802098e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8020992:	fb11 f109 	smulbb	r1, r1, r9
 8020996:	b2db      	uxtb	r3, r3
 8020998:	fb00 b002 	mla	r0, r0, r2, fp
 802099c:	f10c 0b01 	add.w	fp, ip, #1
 80209a0:	fb03 1302 	mla	r3, r3, r2, r1
 80209a4:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 80209a8:	b29b      	uxth	r3, r3
 80209aa:	b280      	uxth	r0, r0
 80209ac:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 80209b0:	f103 0c01 	add.w	ip, r3, #1
 80209b4:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80209b8:	1c43      	adds	r3, r0, #1
 80209ba:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80209be:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80209c2:	0940      	lsrs	r0, r0, #5
 80209c4:	ea4c 0c0b 	orr.w	ip, ip, fp
 80209c8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80209cc:	ea4c 0c00 	orr.w	ip, ip, r0
 80209d0:	f824 cb02 	strh.w	ip, [r4], #2
 80209d4:	e7bf      	b.n	8020956 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 80209d6:	f8be 3000 	ldrh.w	r3, [lr]
 80209da:	eba3 0308 	sub.w	r3, r3, r8
 80209de:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80209e2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80209e6:	eba3 0308 	sub.w	r3, r3, r8
 80209ea:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80209ee:	e7ae      	b.n	802094e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 80209f0:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80209f4:	f8d9 0000 	ldr.w	r0, [r9]
 80209f8:	42ac      	cmp	r4, r5
 80209fa:	6803      	ldr	r3, [r0, #0]
 80209fc:	d20e      	bcs.n	8020a1c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 80209fe:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 8020a02:	4632      	mov	r2, r6
 8020a04:	463b      	mov	r3, r7
 8020a06:	4621      	mov	r1, r4
 8020a08:	47c0      	blx	r8
 8020a0a:	f8ba 3000 	ldrh.w	r3, [sl]
 8020a0e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020a12:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8020a16:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8020a1a:	e7eb      	b.n	80209f4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 8020a1c:	4b02      	ldr	r3, [pc, #8]	; (8020a28 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 8020a1e:	6818      	ldr	r0, [r3, #0]
 8020a20:	6803      	ldr	r3, [r0, #0]
 8020a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020a24:	4798      	blx	r3
 8020a26:	e76b      	b.n	8020900 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8020a28:	2400b5d0 	.word	0x2400b5d0
 8020a2c:	2400b5ca 	.word	0x2400b5ca

08020a30 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8020a30:	b510      	push	{r4, lr}
 8020a32:	4604      	mov	r4, r0
 8020a34:	2104      	movs	r1, #4
 8020a36:	f009 faa6 	bl	8029f86 <_ZdlPvj>
 8020a3a:	4620      	mov	r0, r4
 8020a3c:	bd10      	pop	{r4, pc}

08020a3e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8020a3e:	b510      	push	{r4, lr}
 8020a40:	4604      	mov	r4, r0
 8020a42:	2104      	movs	r1, #4
 8020a44:	f009 fa9f 	bl	8029f86 <_ZdlPvj>
 8020a48:	4620      	mov	r0, r4
 8020a4a:	bd10      	pop	{r4, pc}

08020a4c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8020a4c:	b510      	push	{r4, lr}
 8020a4e:	4604      	mov	r4, r0
 8020a50:	2104      	movs	r1, #4
 8020a52:	f009 fa98 	bl	8029f86 <_ZdlPvj>
 8020a56:	4620      	mov	r0, r4
 8020a58:	bd10      	pop	{r4, pc}

08020a5a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8020a5a:	b510      	push	{r4, lr}
 8020a5c:	4604      	mov	r4, r0
 8020a5e:	2104      	movs	r1, #4
 8020a60:	f009 fa91 	bl	8029f86 <_ZdlPvj>
 8020a64:	4620      	mov	r0, r4
 8020a66:	bd10      	pop	{r4, pc}

08020a68 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8020a68:	b510      	push	{r4, lr}
 8020a6a:	4604      	mov	r4, r0
 8020a6c:	2104      	movs	r1, #4
 8020a6e:	f009 fa8a 	bl	8029f86 <_ZdlPvj>
 8020a72:	4620      	mov	r0, r4
 8020a74:	bd10      	pop	{r4, pc}

08020a76 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8020a76:	b510      	push	{r4, lr}
 8020a78:	4604      	mov	r4, r0
 8020a7a:	2104      	movs	r1, #4
 8020a7c:	f009 fa83 	bl	8029f86 <_ZdlPvj>
 8020a80:	4620      	mov	r0, r4
 8020a82:	bd10      	pop	{r4, pc}

08020a84 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8020a84:	b510      	push	{r4, lr}
 8020a86:	4604      	mov	r4, r0
 8020a88:	2104      	movs	r1, #4
 8020a8a:	f009 fa7c 	bl	8029f86 <_ZdlPvj>
 8020a8e:	4620      	mov	r0, r4
 8020a90:	bd10      	pop	{r4, pc}

08020a92 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8020a92:	b510      	push	{r4, lr}
 8020a94:	4604      	mov	r4, r0
 8020a96:	2104      	movs	r1, #4
 8020a98:	f009 fa75 	bl	8029f86 <_ZdlPvj>
 8020a9c:	4620      	mov	r0, r4
 8020a9e:	bd10      	pop	{r4, pc}

08020aa0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8020aa0:	b510      	push	{r4, lr}
 8020aa2:	4604      	mov	r4, r0
 8020aa4:	2104      	movs	r1, #4
 8020aa6:	f009 fa6e 	bl	8029f86 <_ZdlPvj>
 8020aaa:	4620      	mov	r0, r4
 8020aac:	bd10      	pop	{r4, pc}

08020aae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8020aae:	b510      	push	{r4, lr}
 8020ab0:	4604      	mov	r4, r0
 8020ab2:	2104      	movs	r1, #4
 8020ab4:	f009 fa67 	bl	8029f86 <_ZdlPvj>
 8020ab8:	4620      	mov	r0, r4
 8020aba:	bd10      	pop	{r4, pc}

08020abc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8020abc:	b510      	push	{r4, lr}
 8020abe:	4604      	mov	r4, r0
 8020ac0:	2104      	movs	r1, #4
 8020ac2:	f009 fa60 	bl	8029f86 <_ZdlPvj>
 8020ac6:	4620      	mov	r0, r4
 8020ac8:	bd10      	pop	{r4, pc}

08020aca <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8020aca:	b510      	push	{r4, lr}
 8020acc:	4604      	mov	r4, r0
 8020ace:	2104      	movs	r1, #4
 8020ad0:	f009 fa59 	bl	8029f86 <_ZdlPvj>
 8020ad4:	4620      	mov	r0, r4
 8020ad6:	bd10      	pop	{r4, pc}

08020ad8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8020ad8:	b510      	push	{r4, lr}
 8020ada:	4604      	mov	r4, r0
 8020adc:	2104      	movs	r1, #4
 8020ade:	f009 fa52 	bl	8029f86 <_ZdlPvj>
 8020ae2:	4620      	mov	r0, r4
 8020ae4:	bd10      	pop	{r4, pc}

08020ae6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8020ae6:	b510      	push	{r4, lr}
 8020ae8:	4604      	mov	r4, r0
 8020aea:	2104      	movs	r1, #4
 8020aec:	f009 fa4b 	bl	8029f86 <_ZdlPvj>
 8020af0:	4620      	mov	r0, r4
 8020af2:	bd10      	pop	{r4, pc}

08020af4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8020af4:	b510      	push	{r4, lr}
 8020af6:	4604      	mov	r4, r0
 8020af8:	2104      	movs	r1, #4
 8020afa:	f009 fa44 	bl	8029f86 <_ZdlPvj>
 8020afe:	4620      	mov	r0, r4
 8020b00:	bd10      	pop	{r4, pc}

08020b02 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8020b02:	b510      	push	{r4, lr}
 8020b04:	4604      	mov	r4, r0
 8020b06:	2104      	movs	r1, #4
 8020b08:	f009 fa3d 	bl	8029f86 <_ZdlPvj>
 8020b0c:	4620      	mov	r0, r4
 8020b0e:	bd10      	pop	{r4, pc}

08020b10 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8020b10:	b510      	push	{r4, lr}
 8020b12:	4604      	mov	r4, r0
 8020b14:	2104      	movs	r1, #4
 8020b16:	f009 fa36 	bl	8029f86 <_ZdlPvj>
 8020b1a:	4620      	mov	r0, r4
 8020b1c:	bd10      	pop	{r4, pc}

08020b1e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8020b1e:	b510      	push	{r4, lr}
 8020b20:	4604      	mov	r4, r0
 8020b22:	2104      	movs	r1, #4
 8020b24:	f009 fa2f 	bl	8029f86 <_ZdlPvj>
 8020b28:	4620      	mov	r0, r4
 8020b2a:	bd10      	pop	{r4, pc}

08020b2c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8020b2c:	b510      	push	{r4, lr}
 8020b2e:	4604      	mov	r4, r0
 8020b30:	2104      	movs	r1, #4
 8020b32:	f009 fa28 	bl	8029f86 <_ZdlPvj>
 8020b36:	4620      	mov	r0, r4
 8020b38:	bd10      	pop	{r4, pc}

08020b3a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 8020b3a:	b510      	push	{r4, lr}
 8020b3c:	4604      	mov	r4, r0
 8020b3e:	2104      	movs	r1, #4
 8020b40:	f009 fa21 	bl	8029f86 <_ZdlPvj>
 8020b44:	4620      	mov	r0, r4
 8020b46:	bd10      	pop	{r4, pc}

08020b48 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8020b48:	b510      	push	{r4, lr}
 8020b4a:	4604      	mov	r4, r0
 8020b4c:	2104      	movs	r1, #4
 8020b4e:	f009 fa1a 	bl	8029f86 <_ZdlPvj>
 8020b52:	4620      	mov	r0, r4
 8020b54:	bd10      	pop	{r4, pc}

08020b56 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8020b56:	b510      	push	{r4, lr}
 8020b58:	4604      	mov	r4, r0
 8020b5a:	2104      	movs	r1, #4
 8020b5c:	f009 fa13 	bl	8029f86 <_ZdlPvj>
 8020b60:	4620      	mov	r0, r4
 8020b62:	bd10      	pop	{r4, pc}

08020b64 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8020b64:	b510      	push	{r4, lr}
 8020b66:	4604      	mov	r4, r0
 8020b68:	2104      	movs	r1, #4
 8020b6a:	f009 fa0c 	bl	8029f86 <_ZdlPvj>
 8020b6e:	4620      	mov	r0, r4
 8020b70:	bd10      	pop	{r4, pc}

08020b72 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8020b72:	b510      	push	{r4, lr}
 8020b74:	4604      	mov	r4, r0
 8020b76:	2104      	movs	r1, #4
 8020b78:	f009 fa05 	bl	8029f86 <_ZdlPvj>
 8020b7c:	4620      	mov	r0, r4
 8020b7e:	bd10      	pop	{r4, pc}

08020b80 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8020b80:	b510      	push	{r4, lr}
 8020b82:	4604      	mov	r4, r0
 8020b84:	2104      	movs	r1, #4
 8020b86:	f009 f9fe 	bl	8029f86 <_ZdlPvj>
 8020b8a:	4620      	mov	r0, r4
 8020b8c:	bd10      	pop	{r4, pc}

08020b8e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8020b8e:	b510      	push	{r4, lr}
 8020b90:	4604      	mov	r4, r0
 8020b92:	2104      	movs	r1, #4
 8020b94:	f009 f9f7 	bl	8029f86 <_ZdlPvj>
 8020b98:	4620      	mov	r0, r4
 8020b9a:	bd10      	pop	{r4, pc}

08020b9c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8020b9c:	b510      	push	{r4, lr}
 8020b9e:	4604      	mov	r4, r0
 8020ba0:	2104      	movs	r1, #4
 8020ba2:	f009 f9f0 	bl	8029f86 <_ZdlPvj>
 8020ba6:	4620      	mov	r0, r4
 8020ba8:	bd10      	pop	{r4, pc}

08020baa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8020baa:	b510      	push	{r4, lr}
 8020bac:	4604      	mov	r4, r0
 8020bae:	2104      	movs	r1, #4
 8020bb0:	f009 f9e9 	bl	8029f86 <_ZdlPvj>
 8020bb4:	4620      	mov	r0, r4
 8020bb6:	bd10      	pop	{r4, pc}

08020bb8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8020bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020bba:	4606      	mov	r6, r0
 8020bbc:	b087      	sub	sp, #28
 8020bbe:	460c      	mov	r4, r1
 8020bc0:	4617      	mov	r7, r2
 8020bc2:	461d      	mov	r5, r3
 8020bc4:	b333      	cbz	r3, 8020c14 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8020bc6:	4608      	mov	r0, r1
 8020bc8:	f7f6 fb6f 	bl	80172aa <_ZNK8touchgfx4Rect7isEmptyEv>
 8020bcc:	bb10      	cbnz	r0, 8020c14 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8020bce:	6820      	ldr	r0, [r4, #0]
 8020bd0:	ab04      	add	r3, sp, #16
 8020bd2:	6861      	ldr	r1, [r4, #4]
 8020bd4:	4c1b      	ldr	r4, [pc, #108]	; (8020c44 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 8020bd6:	c303      	stmia	r3!, {r0, r1}
 8020bd8:	a804      	add	r0, sp, #16
 8020bda:	f7f9 fed5 	bl	801a988 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020bde:	6820      	ldr	r0, [r4, #0]
 8020be0:	6803      	ldr	r3, [r0, #0]
 8020be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020be4:	4798      	blx	r3
 8020be6:	2dff      	cmp	r5, #255	; 0xff
 8020be8:	d016      	beq.n	8020c18 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 8020bea:	f010 0f08 	tst.w	r0, #8
 8020bee:	6820      	ldr	r0, [r4, #0]
 8020bf0:	d015      	beq.n	8020c1e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8020bf2:	2400      	movs	r4, #0
 8020bf4:	6801      	ldr	r1, [r0, #0]
 8020bf6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8020bfa:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8020bfe:	e9cd 5402 	strd	r5, r4, [sp, #8]
 8020c02:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8020c06:	9401      	str	r4, [sp, #4]
 8020c08:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8020c0c:	9400      	str	r4, [sp, #0]
 8020c0e:	6dcc      	ldr	r4, [r1, #92]	; 0x5c
 8020c10:	4639      	mov	r1, r7
 8020c12:	47a0      	blx	r4
 8020c14:	b007      	add	sp, #28
 8020c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020c18:	f010 0f02 	tst.w	r0, #2
 8020c1c:	e7e7      	b.n	8020bee <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 8020c1e:	6803      	ldr	r3, [r0, #0]
 8020c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020c22:	4798      	blx	r3
 8020c24:	4b08      	ldr	r3, [pc, #32]	; (8020c48 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8020c26:	4601      	mov	r1, r0
 8020c28:	4630      	mov	r0, r6
 8020c2a:	881a      	ldrh	r2, [r3, #0]
 8020c2c:	6833      	ldr	r3, [r6, #0]
 8020c2e:	e9cd 7500 	strd	r7, r5, [sp]
 8020c32:	69dd      	ldr	r5, [r3, #28]
 8020c34:	ab04      	add	r3, sp, #16
 8020c36:	47a8      	blx	r5
 8020c38:	6820      	ldr	r0, [r4, #0]
 8020c3a:	6803      	ldr	r3, [r0, #0]
 8020c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020c3e:	4798      	blx	r3
 8020c40:	e7e8      	b.n	8020c14 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8020c42:	bf00      	nop
 8020c44:	2400b5d0 	.word	0x2400b5d0
 8020c48:	2400b5ca 	.word	0x2400b5ca

08020c4c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8020c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c50:	4f97      	ldr	r7, [pc, #604]	; (8020eb0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x264>)
 8020c52:	4616      	mov	r6, r2
 8020c54:	b08f      	sub	sp, #60	; 0x3c
 8020c56:	4604      	mov	r4, r0
 8020c58:	683a      	ldr	r2, [r7, #0]
 8020c5a:	4689      	mov	r9, r1
 8020c5c:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8020c60:	2a02      	cmp	r2, #2
 8020c62:	d106      	bne.n	8020c72 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 8020c64:	4b93      	ldr	r3, [pc, #588]	; (8020eb4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x268>)
 8020c66:	f44f 7159 	mov.w	r1, #868	; 0x364
 8020c6a:	4a93      	ldr	r2, [pc, #588]	; (8020eb8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8020c6c:	4893      	ldr	r0, [pc, #588]	; (8020ebc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x270>)
 8020c6e:	f009 f9b9 	bl	8029fe4 <__assert_func>
 8020c72:	ad0e      	add	r5, sp, #56	; 0x38
 8020c74:	f825 3d24 	strh.w	r3, [r5, #-36]!
 8020c78:	4628      	mov	r0, r5
 8020c7a:	f7fd fad3 	bl	801e224 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8020c7e:	6823      	ldr	r3, [r4, #0]
 8020c80:	4680      	mov	r8, r0
 8020c82:	4620      	mov	r0, r4
 8020c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020c86:	4798      	blx	r3
 8020c88:	4580      	cmp	r8, r0
 8020c8a:	d004      	beq.n	8020c96 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 8020c8c:	4b8c      	ldr	r3, [pc, #560]	; (8020ec0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x274>)
 8020c8e:	f240 3166 	movw	r1, #870	; 0x366
 8020c92:	4a89      	ldr	r2, [pc, #548]	; (8020eb8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8020c94:	e7ea      	b.n	8020c6c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8020c96:	4628      	mov	r0, r5
 8020c98:	f7fd fa3a 	bl	801e110 <_ZNK8touchgfx6Bitmap7getDataEv>
 8020c9c:	4680      	mov	r8, r0
 8020c9e:	b920      	cbnz	r0, 8020caa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 8020ca0:	4b88      	ldr	r3, [pc, #544]	; (8020ec4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x278>)
 8020ca2:	f44f 715a 	mov.w	r1, #872	; 0x368
 8020ca6:	4a84      	ldr	r2, [pc, #528]	; (8020eb8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8020ca8:	e7e0      	b.n	8020c6c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8020caa:	6830      	ldr	r0, [r6, #0]
 8020cac:	ab06      	add	r3, sp, #24
 8020cae:	6871      	ldr	r1, [r6, #4]
 8020cb0:	f10d 0b20 	add.w	fp, sp, #32
 8020cb4:	f9b6 a000 	ldrsh.w	sl, [r6]
 8020cb8:	c303      	stmia	r3!, {r0, r1}
 8020cba:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8020cbe:	ab08      	add	r3, sp, #32
 8020cc0:	f8d9 0000 	ldr.w	r0, [r9]
 8020cc4:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8020cc8:	c303      	stmia	r3!, {r0, r1}
 8020cca:	4628      	mov	r0, r5
 8020ccc:	f7fd f918 	bl	801df00 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8020cd0:	4606      	mov	r6, r0
 8020cd2:	4628      	mov	r0, r5
 8020cd4:	4d7c      	ldr	r5, [pc, #496]	; (8020ec8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 8020cd6:	f7fd f94d 	bl	801df74 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8020cda:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 8020cde:	a806      	add	r0, sp, #24
 8020ce0:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8020ce4:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 8020ce8:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 8020cec:	f7f9 fe4c 	bl	801a988 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020cf0:	4658      	mov	r0, fp
 8020cf2:	f7f9 fe49 	bl	801a988 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020cf6:	a80a      	add	r0, sp, #40	; 0x28
 8020cf8:	f7f9 fe46 	bl	801a988 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020cfc:	4b73      	ldr	r3, [pc, #460]	; (8020ecc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 8020cfe:	2100      	movs	r1, #0
 8020d00:	f9b5 2000 	ldrsh.w	r2, [r5]
 8020d04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020d08:	4658      	mov	r0, fp
 8020d0a:	910c      	str	r1, [sp, #48]	; 0x30
 8020d0c:	a90c      	add	r1, sp, #48	; 0x30
 8020d0e:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8020d12:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8020d16:	f7f6 fa85 	bl	8017224 <_ZN8touchgfx4RectaNERKS0_>
 8020d1a:	4658      	mov	r0, fp
 8020d1c:	f7f6 fac5 	bl	80172aa <_ZNK8touchgfx4Rect7isEmptyEv>
 8020d20:	2800      	cmp	r0, #0
 8020d22:	f040 809a 	bne.w	8020e5a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8020d26:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 8020d2a:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 8020d2e:	4288      	cmp	r0, r1
 8020d30:	db38      	blt.n	8020da4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 8020d32:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 8020d36:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8020d3a:	429a      	cmp	r2, r3
 8020d3c:	db32      	blt.n	8020da4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 8020d3e:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 8020d42:	4430      	add	r0, r6
 8020d44:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8020d48:	4431      	add	r1, r6
 8020d4a:	b200      	sxth	r0, r0
 8020d4c:	b209      	sxth	r1, r1
 8020d4e:	4288      	cmp	r0, r1
 8020d50:	dc28      	bgt.n	8020da4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 8020d52:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8020d56:	440a      	add	r2, r1
 8020d58:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8020d5c:	440b      	add	r3, r1
 8020d5e:	b212      	sxth	r2, r2
 8020d60:	b21b      	sxth	r3, r3
 8020d62:	429a      	cmp	r2, r3
 8020d64:	dc1e      	bgt.n	8020da4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 8020d66:	6823      	ldr	r3, [r4, #0]
 8020d68:	4620      	mov	r0, r4
 8020d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020d6c:	4798      	blx	r3
 8020d6e:	4682      	mov	sl, r0
 8020d70:	6838      	ldr	r0, [r7, #0]
 8020d72:	6803      	ldr	r3, [r0, #0]
 8020d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020d76:	4798      	blx	r3
 8020d78:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8020d7c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8020d80:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8020d84:	1a5b      	subs	r3, r3, r1
 8020d86:	b29b      	uxth	r3, r3
 8020d88:	b21c      	sxth	r4, r3
 8020d8a:	2c00      	cmp	r4, #0
 8020d8c:	dc0f      	bgt.n	8020dae <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x162>
 8020d8e:	bf18      	it	ne
 8020d90:	f8ad 1020 	strhne.w	r1, [sp, #32]
 8020d94:	4644      	mov	r4, r8
 8020d96:	bf1e      	ittt	ne
 8020d98:	f8bd 1024 	ldrhne.w	r1, [sp, #36]	; 0x24
 8020d9c:	185b      	addne	r3, r3, r1
 8020d9e:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 8020da2:	e009      	b.n	8020db8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16c>
 8020da4:	4b4a      	ldr	r3, [pc, #296]	; (8020ed0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 8020da6:	f240 3176 	movw	r1, #886	; 0x376
 8020daa:	4a43      	ldr	r2, [pc, #268]	; (8020eb8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8020dac:	e75e      	b.n	8020c6c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8020dae:	1ad3      	subs	r3, r2, r3
 8020db0:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8020db4:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8020db8:	f9bd 602a 	ldrsh.w	r6, [sp, #42]	; 0x2a
 8020dbc:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8020dc0:	1b9b      	subs	r3, r3, r6
 8020dc2:	b29b      	uxth	r3, r3
 8020dc4:	b219      	sxth	r1, r3
 8020dc6:	2900      	cmp	r1, #0
 8020dc8:	dd4b      	ble.n	8020e62 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x216>
 8020dca:	4351      	muls	r1, r2
 8020dcc:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8020dd0:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8020dd4:	1acb      	subs	r3, r1, r3
 8020dd6:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8020dda:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 8020dde:	2e00      	cmp	r6, #0
 8020de0:	dd3b      	ble.n	8020e5a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8020de2:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8020de6:	2b00      	cmp	r3, #0
 8020de8:	dd37      	ble.n	8020e5a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8020dea:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8020dee:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8020df2:	fb0a f90c 	mul.w	r9, sl, ip
 8020df6:	eb09 0941 	add.w	r9, r9, r1, lsl #1
 8020dfa:	4481      	add	r9, r0
 8020dfc:	8828      	ldrh	r0, [r5, #0]
 8020dfe:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	; 0x24
 8020e02:	1a41      	subs	r1, r0, r1
 8020e04:	42ae      	cmp	r6, r5
 8020e06:	bfa8      	it	ge
 8020e08:	462e      	movge	r6, r5
 8020e0a:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 8020e0e:	428e      	cmp	r6, r1
 8020e10:	bfa8      	it	ge
 8020e12:	460e      	movge	r6, r1
 8020e14:	429d      	cmp	r5, r3
 8020e16:	bfa8      	it	ge
 8020e18:	461d      	movge	r5, r3
 8020e1a:	4b2c      	ldr	r3, [pc, #176]	; (8020ecc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 8020e1c:	881b      	ldrh	r3, [r3, #0]
 8020e1e:	eba3 030c 	sub.w	r3, r3, ip
 8020e22:	429d      	cmp	r5, r3
 8020e24:	bfa8      	it	ge
 8020e26:	461d      	movge	r5, r3
 8020e28:	42b0      	cmp	r0, r6
 8020e2a:	d12c      	bne.n	8020e86 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
 8020e2c:	4290      	cmp	r0, r2
 8020e2e:	d12a      	bne.n	8020e86 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
 8020e30:	6838      	ldr	r0, [r7, #0]
 8020e32:	9203      	str	r2, [sp, #12]
 8020e34:	6803      	ldr	r3, [r0, #0]
 8020e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020e38:	4798      	blx	r3
 8020e3a:	07c3      	lsls	r3, r0, #31
 8020e3c:	d51a      	bpl.n	8020e74 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8020e3e:	9a03      	ldr	r2, [sp, #12]
 8020e40:	6838      	ldr	r0, [r7, #0]
 8020e42:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
 8020e46:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8020e4a:	6803      	ldr	r3, [r0, #0]
 8020e4c:	9200      	str	r2, [sp, #0]
 8020e4e:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 8020e50:	4623      	mov	r3, r4
 8020e52:	e89b 0006 	ldmia.w	fp, {r1, r2}
 8020e56:	47a8      	blx	r5
 8020e58:	4680      	mov	r8, r0
 8020e5a:	4640      	mov	r0, r8
 8020e5c:	b00f      	add	sp, #60	; 0x3c
 8020e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020e62:	bf1f      	itttt	ne
 8020e64:	f8bd 1026 	ldrhne.w	r1, [sp, #38]	; 0x26
 8020e68:	f8ad 6022 	strhne.w	r6, [sp, #34]	; 0x22
 8020e6c:	185b      	addne	r3, r3, r1
 8020e6e:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 8020e72:	e7b2      	b.n	8020dda <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x18e>
 8020e74:	6838      	ldr	r0, [r7, #0]
 8020e76:	464a      	mov	r2, r9
 8020e78:	4621      	mov	r1, r4
 8020e7a:	6803      	ldr	r3, [r0, #0]
 8020e7c:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8020e7e:	fb05 f30a 	mul.w	r3, r5, sl
 8020e82:	47b0      	blx	r6
 8020e84:	e7e9      	b.n	8020e5a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8020e86:	4355      	muls	r5, r2
 8020e88:	0076      	lsls	r6, r6, #1
 8020e8a:	ea4f 0b42 	mov.w	fp, r2, lsl #1
 8020e8e:	eb04 0345 	add.w	r3, r4, r5, lsl #1
 8020e92:	9303      	str	r3, [sp, #12]
 8020e94:	9b03      	ldr	r3, [sp, #12]
 8020e96:	429c      	cmp	r4, r3
 8020e98:	d2df      	bcs.n	8020e5a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8020e9a:	6838      	ldr	r0, [r7, #0]
 8020e9c:	464a      	mov	r2, r9
 8020e9e:	4621      	mov	r1, r4
 8020ea0:	44d1      	add	r9, sl
 8020ea2:	6803      	ldr	r3, [r0, #0]
 8020ea4:	445c      	add	r4, fp
 8020ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020ea8:	461d      	mov	r5, r3
 8020eaa:	4633      	mov	r3, r6
 8020eac:	47a8      	blx	r5
 8020eae:	e7f1      	b.n	8020e94 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x248>
 8020eb0:	2400b5d0 	.word	0x2400b5d0
 8020eb4:	0802f193 	.word	0x0802f193
 8020eb8:	0802fa44 	.word	0x0802fa44
 8020ebc:	0802f245 	.word	0x0802f245
 8020ec0:	0802f277 	.word	0x0802f277
 8020ec4:	0802f2cc 	.word	0x0802f2cc
 8020ec8:	2400b5ca 	.word	0x2400b5ca
 8020ecc:	2400b5cc 	.word	0x2400b5cc
 8020ed0:	0802f30a 	.word	0x0802f30a

08020ed4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8020ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020ed8:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 8020edc:	4688      	mov	r8, r1
 8020ede:	4614      	mov	r4, r2
 8020ee0:	461d      	mov	r5, r3
 8020ee2:	9e08      	ldr	r6, [sp, #32]
 8020ee4:	2f00      	cmp	r7, #0
 8020ee6:	f000 80b4 	beq.w	8021052 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8020eea:	4618      	mov	r0, r3
 8020eec:	f7f6 f9dd 	bl	80172aa <_ZNK8touchgfx4Rect7isEmptyEv>
 8020ef0:	2800      	cmp	r0, #0
 8020ef2:	f040 80ae 	bne.w	8021052 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8020ef6:	f9b5 1000 	ldrsh.w	r1, [r5]
 8020efa:	2fff      	cmp	r7, #255	; 0xff
 8020efc:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8020f00:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 8020f04:	fb04 1303 	mla	r3, r4, r3, r1
 8020f08:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 8020f0c:	eba4 0200 	sub.w	r2, r4, r0
 8020f10:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 8020f14:	fb04 f505 	mul.w	r5, r4, r5
 8020f18:	ea4f 2816 	mov.w	r8, r6, lsr #8
 8020f1c:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 8020f20:	d04b      	beq.n	8020fba <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe6>
 8020f22:	b2bc      	uxth	r4, r7
 8020f24:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 8020f28:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 8020f2c:	fa5f f788 	uxtb.w	r7, r8
 8020f30:	b2f3      	uxtb	r3, r6
 8020f32:	0040      	lsls	r0, r0, #1
 8020f34:	fb0e fe04 	mul.w	lr, lr, r4
 8020f38:	4367      	muls	r7, r4
 8020f3a:	ea4f 0842 	mov.w	r8, r2, lsl #1
 8020f3e:	4363      	muls	r3, r4
 8020f40:	fa1f fc8c 	uxth.w	ip, ip
 8020f44:	42a9      	cmp	r1, r5
 8020f46:	f080 8084 	bcs.w	8021052 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8020f4a:	eb01 0900 	add.w	r9, r1, r0
 8020f4e:	4549      	cmp	r1, r9
 8020f50:	d231      	bcs.n	8020fb6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 8020f52:	880a      	ldrh	r2, [r1, #0]
 8020f54:	1214      	asrs	r4, r2, #8
 8020f56:	10d6      	asrs	r6, r2, #3
 8020f58:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8020f5c:	00d2      	lsls	r2, r2, #3
 8020f5e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020f62:	b2d2      	uxtb	r2, r2
 8020f64:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8020f68:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8020f6c:	fb14 f40c 	smulbb	r4, r4, ip
 8020f70:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8020f74:	fb12 f20c 	smulbb	r2, r2, ip
 8020f78:	fb16 f60c 	smulbb	r6, r6, ip
 8020f7c:	4474      	add	r4, lr
 8020f7e:	441a      	add	r2, r3
 8020f80:	b2a4      	uxth	r4, r4
 8020f82:	443e      	add	r6, r7
 8020f84:	b292      	uxth	r2, r2
 8020f86:	f104 0a01 	add.w	sl, r4, #1
 8020f8a:	b2b6      	uxth	r6, r6
 8020f8c:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8020f90:	f102 0a01 	add.w	sl, r2, #1
 8020f94:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 8020f98:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8020f9c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8020fa0:	4322      	orrs	r2, r4
 8020fa2:	1c74      	adds	r4, r6, #1
 8020fa4:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 8020fa8:	0976      	lsrs	r6, r6, #5
 8020faa:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8020fae:	4332      	orrs	r2, r6
 8020fb0:	f821 2b02 	strh.w	r2, [r1], #2
 8020fb4:	e7cb      	b.n	8020f4e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x7a>
 8020fb6:	4441      	add	r1, r8
 8020fb8:	e7c4      	b.n	8020f44 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 8020fba:	0973      	lsrs	r3, r6, #5
 8020fbc:	4f26      	ldr	r7, [pc, #152]	; (8021058 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x184>)
 8020fbe:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8020fc2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020fc6:	ea08 0707 	and.w	r7, r8, r7
 8020fca:	433b      	orrs	r3, r7
 8020fcc:	4333      	orrs	r3, r6
 8020fce:	07e6      	lsls	r6, r4, #31
 8020fd0:	b29b      	uxth	r3, r3
 8020fd2:	d50b      	bpl.n	8020fec <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 8020fd4:	0040      	lsls	r0, r0, #1
 8020fd6:	0052      	lsls	r2, r2, #1
 8020fd8:	42a9      	cmp	r1, r5
 8020fda:	d23a      	bcs.n	8021052 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8020fdc:	180c      	adds	r4, r1, r0
 8020fde:	42a1      	cmp	r1, r4
 8020fe0:	d202      	bcs.n	8020fe8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 8020fe2:	f821 3b02 	strh.w	r3, [r1], #2
 8020fe6:	e7fa      	b.n	8020fde <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 8020fe8:	4411      	add	r1, r2
 8020fea:	e7f5      	b.n	8020fd8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
 8020fec:	078f      	lsls	r7, r1, #30
 8020fee:	d008      	beq.n	8021002 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
 8020ff0:	0066      	lsls	r6, r4, #1
 8020ff2:	460a      	mov	r2, r1
 8020ff4:	42aa      	cmp	r2, r5
 8020ff6:	d202      	bcs.n	8020ffe <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 8020ff8:	8013      	strh	r3, [r2, #0]
 8020ffa:	4432      	add	r2, r6
 8020ffc:	e7fa      	b.n	8020ff4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
 8020ffe:	3102      	adds	r1, #2
 8021000:	3801      	subs	r0, #1
 8021002:	07c6      	lsls	r6, r0, #31
 8021004:	d50b      	bpl.n	802101e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 8021006:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 802100a:	0066      	lsls	r6, r4, #1
 802100c:	3a01      	subs	r2, #1
 802100e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8021012:	42aa      	cmp	r2, r5
 8021014:	d202      	bcs.n	802101c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 8021016:	8013      	strh	r3, [r2, #0]
 8021018:	4432      	add	r2, r6
 802101a:	e7fa      	b.n	8021012 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
 802101c:	3801      	subs	r0, #1
 802101e:	b1c0      	cbz	r0, 8021052 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8021020:	1040      	asrs	r0, r0, #1
 8021022:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 8021026:	0080      	lsls	r0, r0, #2
 8021028:	0064      	lsls	r4, r4, #1
 802102a:	42a9      	cmp	r1, r5
 802102c:	d211      	bcs.n	8021052 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 802102e:	078a      	lsls	r2, r1, #30
 8021030:	d006      	beq.n	8021040 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8021032:	4b0a      	ldr	r3, [pc, #40]	; (802105c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x188>)
 8021034:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8021038:	4a09      	ldr	r2, [pc, #36]	; (8021060 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x18c>)
 802103a:	480a      	ldr	r0, [pc, #40]	; (8021064 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x190>)
 802103c:	f008 ffd2 	bl	8029fe4 <__assert_func>
 8021040:	180e      	adds	r6, r1, r0
 8021042:	460a      	mov	r2, r1
 8021044:	42b2      	cmp	r2, r6
 8021046:	d202      	bcs.n	802104e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17a>
 8021048:	f842 3b04 	str.w	r3, [r2], #4
 802104c:	e7fa      	b.n	8021044 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>
 802104e:	4421      	add	r1, r4
 8021050:	e7eb      	b.n	802102a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 8021052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021056:	bf00      	nop
 8021058:	00fff800 	.word	0x00fff800
 802105c:	0802f044 	.word	0x0802f044
 8021060:	0802f690 	.word	0x0802f690
 8021064:	0802f245 	.word	0x0802f245

08021068 <_ZN8touchgfx8LCD16bppC1Ev>:
 8021068:	2200      	movs	r2, #0
 802106a:	4910      	ldr	r1, [pc, #64]	; (80210ac <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 802106c:	6042      	str	r2, [r0, #4]
 802106e:	6001      	str	r1, [r0, #0]
 8021070:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8021074:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8021078:	e9c0 2206 	strd	r2, r2, [r0, #24]
 802107c:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8021080:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8021084:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8021088:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 802108c:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8021090:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8021094:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8021098:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 802109c:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 80210a0:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 80210a4:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 80210a8:	4770      	bx	lr
 80210aa:	bf00      	nop
 80210ac:	0802f648 	.word	0x0802f648

080210b0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 80210b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80210b4:	b08d      	sub	sp, #52	; 0x34
 80210b6:	460d      	mov	r5, r1
 80210b8:	4604      	mov	r4, r0
 80210ba:	4699      	mov	r9, r3
 80210bc:	6808      	ldr	r0, [r1, #0]
 80210be:	ab08      	add	r3, sp, #32
 80210c0:	6849      	ldr	r1, [r1, #4]
 80210c2:	c303      	stmia	r3!, {r0, r1}
 80210c4:	6810      	ldr	r0, [r2, #0]
 80210c6:	ab0a      	add	r3, sp, #40	; 0x28
 80210c8:	6851      	ldr	r1, [r2, #4]
 80210ca:	c303      	stmia	r3!, {r0, r1}
 80210cc:	a808      	add	r0, sp, #32
 80210ce:	f7f9 fc5b 	bl	801a988 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80210d2:	4629      	mov	r1, r5
 80210d4:	a80a      	add	r0, sp, #40	; 0x28
 80210d6:	4d67      	ldr	r5, [pc, #412]	; (8021274 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 80210d8:	f7f9 fc7e 	bl	801a9d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80210dc:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 80210e0:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 80210e4:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 80210e8:	6828      	ldr	r0, [r5, #0]
 80210ea:	fb11 2103 	smlabb	r1, r1, r3, r2
 80210ee:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 80210f2:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 80210f6:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80210fa:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 80210fe:	440a      	add	r2, r1
 8021100:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8021104:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8021108:	4413      	add	r3, r2
 802110a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 802110e:	6803      	ldr	r3, [r0, #0]
 8021110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021112:	4798      	blx	r3
 8021114:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021118:	d119      	bne.n	802114e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 802111a:	f010 0f20 	tst.w	r0, #32
 802111e:	6828      	ldr	r0, [r5, #0]
 8021120:	d018      	beq.n	8021154 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 8021122:	2500      	movs	r5, #0
 8021124:	6801      	ldr	r1, [r0, #0]
 8021126:	b2b6      	uxth	r6, r6
 8021128:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 802112c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8021130:	9601      	str	r6, [sp, #4]
 8021132:	e9cd 9503 	strd	r9, r5, [sp, #12]
 8021136:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 802113a:	9502      	str	r5, [sp, #8]
 802113c:	fa1f f588 	uxth.w	r5, r8
 8021140:	9500      	str	r5, [sp, #0]
 8021142:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 8021144:	4621      	mov	r1, r4
 8021146:	47a8      	blx	r5
 8021148:	b00d      	add	sp, #52	; 0x34
 802114a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802114e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8021152:	e7e4      	b.n	802111e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8021154:	6803      	ldr	r3, [r0, #0]
 8021156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021158:	4798      	blx	r3
 802115a:	4947      	ldr	r1, [pc, #284]	; (8021278 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 802115c:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8021160:	880b      	ldrh	r3, [r1, #0]
 8021162:	468a      	mov	sl, r1
 8021164:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 8021168:	fb03 5202 	mla	r2, r3, r2, r5
 802116c:	4373      	muls	r3, r6
 802116e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8021172:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8021176:	9307      	str	r3, [sp, #28]
 8021178:	ea4f 0348 	mov.w	r3, r8, lsl #1
 802117c:	9306      	str	r3, [sp, #24]
 802117e:	9b07      	ldr	r3, [sp, #28]
 8021180:	4298      	cmp	r0, r3
 8021182:	d270      	bcs.n	8021266 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 8021184:	9b06      	ldr	r3, [sp, #24]
 8021186:	4621      	mov	r1, r4
 8021188:	eb00 0b03 	add.w	fp, r0, r3
 802118c:	4558      	cmp	r0, fp
 802118e:	d25d      	bcs.n	802124c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 8021190:	f851 4b04 	ldr.w	r4, [r1], #4
 8021194:	0e23      	lsrs	r3, r4, #24
 8021196:	d014      	beq.n	80211c2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8021198:	2bff      	cmp	r3, #255	; 0xff
 802119a:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 802119e:	d112      	bne.n	80211c6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 80211a0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80211a4:	d10f      	bne.n	80211c6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 80211a6:	0963      	lsrs	r3, r4, #5
 80211a8:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 80211ac:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 80211b0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80211b4:	f02c 0c07 	bic.w	ip, ip, #7
 80211b8:	ea43 0c0c 	orr.w	ip, r3, ip
 80211bc:	ea4c 0404 	orr.w	r4, ip, r4
 80211c0:	8004      	strh	r4, [r0, #0]
 80211c2:	3002      	adds	r0, #2
 80211c4:	e7e2      	b.n	802118c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 80211c6:	fb09 f303 	mul.w	r3, r9, r3
 80211ca:	8807      	ldrh	r7, [r0, #0]
 80211cc:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 80211d0:	fa5f fc8c 	uxtb.w	ip, ip
 80211d4:	1c5a      	adds	r2, r3, #1
 80211d6:	123e      	asrs	r6, r7, #8
 80211d8:	10fd      	asrs	r5, r7, #3
 80211da:	eb02 2223 	add.w	r2, r2, r3, asr #8
 80211de:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80211e2:	00ff      	lsls	r7, r7, #3
 80211e4:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80211e8:	1212      	asrs	r2, r2, #8
 80211ea:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 80211ee:	b293      	uxth	r3, r2
 80211f0:	43d2      	mvns	r2, r2
 80211f2:	b2ff      	uxtb	r7, r7
 80211f4:	fb1e fe03 	smulbb	lr, lr, r3
 80211f8:	b2d2      	uxtb	r2, r2
 80211fa:	fb1c fc03 	smulbb	ip, ip, r3
 80211fe:	b2e4      	uxtb	r4, r4
 8021200:	fb06 e602 	mla	r6, r6, r2, lr
 8021204:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8021208:	fb14 f403 	smulbb	r4, r4, r3
 802120c:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 8021210:	b2b6      	uxth	r6, r6
 8021212:	fb05 c502 	mla	r5, r5, r2, ip
 8021216:	fb07 4702 	mla	r7, r7, r2, r4
 802121a:	f106 0e01 	add.w	lr, r6, #1
 802121e:	b2ad      	uxth	r5, r5
 8021220:	b2bf      	uxth	r7, r7
 8021222:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8021226:	f105 0c01 	add.w	ip, r5, #1
 802122a:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 802122e:	1c7e      	adds	r6, r7, #1
 8021230:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8021234:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8021238:	096d      	lsrs	r5, r5, #5
 802123a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 802123e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021242:	ea46 060e 	orr.w	r6, r6, lr
 8021246:	432e      	orrs	r6, r5
 8021248:	8006      	strh	r6, [r0, #0]
 802124a:	e7ba      	b.n	80211c2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 802124c:	f8ba 3000 	ldrh.w	r3, [sl]
 8021250:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 8021254:	eba3 0308 	sub.w	r3, r3, r8
 8021258:	eba4 0408 	sub.w	r4, r4, r8
 802125c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021260:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8021264:	e78b      	b.n	802117e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 8021266:	4b03      	ldr	r3, [pc, #12]	; (8021274 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8021268:	6818      	ldr	r0, [r3, #0]
 802126a:	6803      	ldr	r3, [r0, #0]
 802126c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802126e:	4798      	blx	r3
 8021270:	e76a      	b.n	8021148 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 8021272:	bf00      	nop
 8021274:	2400b5d0 	.word	0x2400b5d0
 8021278:	2400b5ca 	.word	0x2400b5ca

0802127c <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 802127c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021280:	b085      	sub	sp, #20
 8021282:	6810      	ldr	r0, [r2, #0]
 8021284:	460c      	mov	r4, r1
 8021286:	6851      	ldr	r1, [r2, #4]
 8021288:	466d      	mov	r5, sp
 802128a:	4616      	mov	r6, r2
 802128c:	c503      	stmia	r5!, {r0, r1}
 802128e:	6818      	ldr	r0, [r3, #0]
 8021290:	6859      	ldr	r1, [r3, #4]
 8021292:	c503      	stmia	r5!, {r0, r1}
 8021294:	4668      	mov	r0, sp
 8021296:	4d2e      	ldr	r5, [pc, #184]	; (8021350 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 8021298:	f7f9 fb76 	bl	801a988 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802129c:	4631      	mov	r1, r6
 802129e:	a802      	add	r0, sp, #8
 80212a0:	4e2c      	ldr	r6, [pc, #176]	; (8021354 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 80212a2:	f7f9 fb99 	bl	801a9d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80212a6:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80212aa:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80212ae:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80212b2:	6828      	ldr	r0, [r5, #0]
 80212b4:	fb11 2103 	smlabb	r1, r1, r3, r2
 80212b8:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 80212bc:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 80212c0:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80212c4:	f8bd 1000 	ldrh.w	r1, [sp]
 80212c8:	440a      	add	r2, r1
 80212ca:	f8ad 2008 	strh.w	r2, [sp, #8]
 80212ce:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80212d2:	4413      	add	r3, r2
 80212d4:	f8ad 300a 	strh.w	r3, [sp, #10]
 80212d8:	6803      	ldr	r3, [r0, #0]
 80212da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80212dc:	4798      	blx	r3
 80212de:	8833      	ldrh	r3, [r6, #0]
 80212e0:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 80212e4:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 80212e8:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 80212ec:	f8df e068 	ldr.w	lr, [pc, #104]	; 8021358 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 80212f0:	fb03 1202 	mla	r2, r3, r2, r1
 80212f4:	fb08 f303 	mul.w	r3, r8, r3
 80212f8:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80212fc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8021300:	4298      	cmp	r0, r3
 8021302:	d21d      	bcs.n	8021340 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 8021304:	eb00 080c 	add.w	r8, r0, ip
 8021308:	4540      	cmp	r0, r8
 802130a:	d20f      	bcs.n	802132c <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 802130c:	f854 1b04 	ldr.w	r1, [r4], #4
 8021310:	ea4f 1951 	mov.w	r9, r1, lsr #5
 8021314:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 8021318:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 802131c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8021320:	ea42 0209 	orr.w	r2, r2, r9
 8021324:	430a      	orrs	r2, r1
 8021326:	f820 2b02 	strh.w	r2, [r0], #2
 802132a:	e7ed      	b.n	8021308 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 802132c:	8832      	ldrh	r2, [r6, #0]
 802132e:	1bd2      	subs	r2, r2, r7
 8021330:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8021334:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8021338:	1bd2      	subs	r2, r2, r7
 802133a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 802133e:	e7df      	b.n	8021300 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 8021340:	6828      	ldr	r0, [r5, #0]
 8021342:	6803      	ldr	r3, [r0, #0]
 8021344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021346:	4798      	blx	r3
 8021348:	b005      	add	sp, #20
 802134a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802134e:	bf00      	nop
 8021350:	2400b5d0 	.word	0x2400b5d0
 8021354:	2400b5ca 	.word	0x2400b5ca
 8021358:	fffff800 	.word	0xfffff800

0802135c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 802135c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021360:	b08e      	sub	sp, #56	; 0x38
 8021362:	460e      	mov	r6, r1
 8021364:	4604      	mov	r4, r0
 8021366:	461d      	mov	r5, r3
 8021368:	6808      	ldr	r0, [r1, #0]
 802136a:	ab0a      	add	r3, sp, #40	; 0x28
 802136c:	6849      	ldr	r1, [r1, #4]
 802136e:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 8021544 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 8021372:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 8021548 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 8021376:	c303      	stmia	r3!, {r0, r1}
 8021378:	6810      	ldr	r0, [r2, #0]
 802137a:	ab0c      	add	r3, sp, #48	; 0x30
 802137c:	6851      	ldr	r1, [r2, #4]
 802137e:	c303      	stmia	r3!, {r0, r1}
 8021380:	a80a      	add	r0, sp, #40	; 0x28
 8021382:	f7f9 fb01 	bl	801a988 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021386:	4631      	mov	r1, r6
 8021388:	a80c      	add	r0, sp, #48	; 0x30
 802138a:	f7f9 fb25 	bl	801a9d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802138e:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8021392:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8021396:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 802139a:	f8d8 0000 	ldr.w	r0, [r8]
 802139e:	fb11 2103 	smlabb	r1, r1, r3, r2
 80213a2:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 80213a6:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 80213aa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80213ae:	440c      	add	r4, r1
 80213b0:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 80213b4:	440a      	add	r2, r1
 80213b6:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 80213ba:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 80213be:	4413      	add	r3, r2
 80213c0:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 80213c4:	6803      	ldr	r3, [r0, #0]
 80213c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80213c8:	4798      	blx	r3
 80213ca:	2dff      	cmp	r5, #255	; 0xff
 80213cc:	d124      	bne.n	8021418 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 80213ce:	f010 0f01 	tst.w	r0, #1
 80213d2:	f8d8 0000 	ldr.w	r0, [r8]
 80213d6:	d022      	beq.n	802141e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 80213d8:	2100      	movs	r1, #0
 80213da:	f04f 0e01 	mov.w	lr, #1
 80213de:	f8d0 c000 	ldr.w	ip, [r0]
 80213e2:	b2b6      	uxth	r6, r6
 80213e4:	f8cd e018 	str.w	lr, [sp, #24]
 80213e8:	b2bf      	uxth	r7, r7
 80213ea:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 80213ee:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 80213f2:	e9cd 1107 	strd	r1, r1, [sp, #28]
 80213f6:	f8b9 e000 	ldrh.w	lr, [r9]
 80213fa:	9503      	str	r5, [sp, #12]
 80213fc:	9601      	str	r6, [sp, #4]
 80213fe:	9700      	str	r7, [sp, #0]
 8021400:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8021404:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8021408:	9102      	str	r1, [sp, #8]
 802140a:	4621      	mov	r1, r4
 802140c:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 8021410:	47a8      	blx	r5
 8021412:	b00e      	add	sp, #56	; 0x38
 8021414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021418:	f010 0f04 	tst.w	r0, #4
 802141c:	e7d9      	b.n	80213d2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 802141e:	6803      	ldr	r3, [r0, #0]
 8021420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021422:	4798      	blx	r3
 8021424:	f8b9 3000 	ldrh.w	r3, [r9]
 8021428:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 802142c:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 8021430:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8021434:	435e      	muls	r6, r3
 8021436:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 802143a:	2dff      	cmp	r5, #255	; 0xff
 802143c:	fb03 1202 	mla	r2, r3, r2, r1
 8021440:	ebac 0c07 	sub.w	ip, ip, r7
 8021444:	eba3 0707 	sub.w	r7, r3, r7
 8021448:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 802144c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8021450:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8021454:	ea4f 0747 	mov.w	r7, r7, lsl #1
 8021458:	d049      	beq.n	80214ee <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 802145a:	43eb      	mvns	r3, r5
 802145c:	fa1f f985 	uxth.w	r9, r5
 8021460:	b2db      	uxtb	r3, r3
 8021462:	42b0      	cmp	r0, r6
 8021464:	d266      	bcs.n	8021534 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8021466:	eb00 0a0e 	add.w	sl, r0, lr
 802146a:	4550      	cmp	r0, sl
 802146c:	4621      	mov	r1, r4
 802146e:	f104 0403 	add.w	r4, r4, #3
 8021472:	d25b      	bcs.n	802152c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 8021474:	8802      	ldrh	r2, [r0, #0]
 8021476:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 802147a:	ea4f 2822 	mov.w	r8, r2, asr #8
 802147e:	fb11 f109 	smulbb	r1, r1, r9
 8021482:	10d5      	asrs	r5, r2, #3
 8021484:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 8021488:	00d2      	lsls	r2, r2, #3
 802148a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802148e:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 8021492:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8021496:	fb08 1803 	mla	r8, r8, r3, r1
 802149a:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 802149e:	b2d2      	uxtb	r2, r2
 80214a0:	fb11 f109 	smulbb	r1, r1, r9
 80214a4:	fa1f f888 	uxth.w	r8, r8
 80214a8:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80214ac:	fb05 1503 	mla	r5, r5, r3, r1
 80214b0:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 80214b4:	fb11 f109 	smulbb	r1, r1, r9
 80214b8:	b2ad      	uxth	r5, r5
 80214ba:	fb02 1203 	mla	r2, r2, r3, r1
 80214be:	f108 0101 	add.w	r1, r8, #1
 80214c2:	b292      	uxth	r2, r2
 80214c4:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 80214c8:	1c51      	adds	r1, r2, #1
 80214ca:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 80214ce:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80214d2:	1c69      	adds	r1, r5, #1
 80214d4:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 80214d8:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80214dc:	096d      	lsrs	r5, r5, #5
 80214de:	ea42 0208 	orr.w	r2, r2, r8
 80214e2:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80214e6:	432a      	orrs	r2, r5
 80214e8:	f820 2b02 	strh.w	r2, [r0], #2
 80214ec:	e7bd      	b.n	802146a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 80214ee:	4a14      	ldr	r2, [pc, #80]	; (8021540 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 80214f0:	42b0      	cmp	r0, r6
 80214f2:	d21f      	bcs.n	8021534 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 80214f4:	eb00 050e 	add.w	r5, r0, lr
 80214f8:	42a8      	cmp	r0, r5
 80214fa:	4621      	mov	r1, r4
 80214fc:	f104 0403 	add.w	r4, r4, #3
 8021500:	d210      	bcs.n	8021524 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 8021502:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 8021506:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 802150a:	00db      	lsls	r3, r3, #3
 802150c:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 8021510:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021514:	430b      	orrs	r3, r1
 8021516:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 802151a:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 802151e:	f820 3b02 	strh.w	r3, [r0], #2
 8021522:	e7e9      	b.n	80214f8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 8021524:	4438      	add	r0, r7
 8021526:	eb01 040c 	add.w	r4, r1, ip
 802152a:	e7e1      	b.n	80214f0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 802152c:	4438      	add	r0, r7
 802152e:	eb01 040c 	add.w	r4, r1, ip
 8021532:	e796      	b.n	8021462 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 8021534:	4b03      	ldr	r3, [pc, #12]	; (8021544 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 8021536:	6818      	ldr	r0, [r3, #0]
 8021538:	6803      	ldr	r3, [r0, #0]
 802153a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802153c:	4798      	blx	r3
 802153e:	e768      	b.n	8021412 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 8021540:	fffff800 	.word	0xfffff800
 8021544:	2400b5d0 	.word	0x2400b5d0
 8021548:	2400b5ca 	.word	0x2400b5ca

0802154c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 802154c:	b570      	push	{r4, r5, r6, lr}
 802154e:	9c04      	ldr	r4, [sp, #16]
 8021550:	4605      	mov	r5, r0
 8021552:	f89d 6018 	ldrb.w	r6, [sp, #24]
 8021556:	4608      	mov	r0, r1
 8021558:	4619      	mov	r1, r3
 802155a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 802155e:	2a0d      	cmp	r2, #13
 8021560:	d825      	bhi.n	80215ae <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x62>
 8021562:	e8df f002 	tbb	[pc, r2]
 8021566:	1807      	.short	0x1807
 8021568:	1d1d1d13 	.word	0x1d1d1d13
 802156c:	1d1d1d1d 	.word	0x1d1d1d1d
 8021570:	1d1d1d1d 	.word	0x1d1d1d1d
 8021574:	682a      	ldr	r2, [r5, #0]
 8021576:	e9cd 3604 	strd	r3, r6, [sp, #16]
 802157a:	68d6      	ldr	r6, [r2, #12]
 802157c:	4623      	mov	r3, r4
 802157e:	460a      	mov	r2, r1
 8021580:	4601      	mov	r1, r0
 8021582:	46b4      	mov	ip, r6
 8021584:	4628      	mov	r0, r5
 8021586:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802158a:	4760      	bx	ip
 802158c:	4622      	mov	r2, r4
 802158e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8021592:	f7ff bd8d 	b.w	80210b0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021596:	4622      	mov	r2, r4
 8021598:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802159c:	f7ff bede 	b.w	802135c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 80215a0:	4b03      	ldr	r3, [pc, #12]	; (80215b0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 80215a2:	f240 315d 	movw	r1, #861	; 0x35d
 80215a6:	4a03      	ldr	r2, [pc, #12]	; (80215b4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 80215a8:	4803      	ldr	r0, [pc, #12]	; (80215b8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 80215aa:	f008 fd1b 	bl	8029fe4 <__assert_func>
 80215ae:	bd70      	pop	{r4, r5, r6, pc}
 80215b0:	0802f36a 	.word	0x0802f36a
 80215b4:	0802faca 	.word	0x0802faca
 80215b8:	0802f245 	.word	0x0802f245

080215bc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 80215bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80215c0:	b093      	sub	sp, #76	; 0x4c
 80215c2:	880e      	ldrh	r6, [r1, #0]
 80215c4:	4681      	mov	r9, r0
 80215c6:	4688      	mov	r8, r1
 80215c8:	4615      	mov	r5, r2
 80215ca:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 80215ce:	b136      	cbz	r6, 80215de <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x22>
 80215d0:	4b70      	ldr	r3, [pc, #448]	; (8021794 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 80215d2:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 80215d6:	4a70      	ldr	r2, [pc, #448]	; (8021798 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 80215d8:	4870      	ldr	r0, [pc, #448]	; (802179c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 80215da:	f008 fd03 	bl	8029fe4 <__assert_func>
 80215de:	6810      	ldr	r0, [r2, #0]
 80215e0:	ac0e      	add	r4, sp, #56	; 0x38
 80215e2:	6851      	ldr	r1, [r2, #4]
 80215e4:	4f6e      	ldr	r7, [pc, #440]	; (80217a0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 80215e6:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 80217a4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 80215ea:	c403      	stmia	r4!, {r0, r1}
 80215ec:	6818      	ldr	r0, [r3, #0]
 80215ee:	ac10      	add	r4, sp, #64	; 0x40
 80215f0:	6859      	ldr	r1, [r3, #4]
 80215f2:	c403      	stmia	r4!, {r0, r1}
 80215f4:	a80e      	add	r0, sp, #56	; 0x38
 80215f6:	f7f9 f9c7 	bl	801a988 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80215fa:	4629      	mov	r1, r5
 80215fc:	a810      	add	r0, sp, #64	; 0x40
 80215fe:	f7f9 f9eb 	bl	801a9d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021602:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8021606:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 802160a:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 802160e:	6838      	ldr	r0, [r7, #0]
 8021610:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021614:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 8021618:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 802161c:	4489      	add	r9, r1
 802161e:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8021622:	440a      	add	r2, r1
 8021624:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8021628:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 802162c:	4413      	add	r3, r2
 802162e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8021632:	6803      	ldr	r3, [r0, #0]
 8021634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021636:	4798      	blx	r3
 8021638:	f010 0f80 	tst.w	r0, #128	; 0x80
 802163c:	6838      	ldr	r0, [r7, #0]
 802163e:	d01d      	beq.n	802167c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc0>
 8021640:	210b      	movs	r1, #11
 8021642:	6802      	ldr	r2, [r0, #0]
 8021644:	b2a4      	uxth	r4, r4
 8021646:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 802164a:	9107      	str	r1, [sp, #28]
 802164c:	b2ad      	uxth	r5, r5
 802164e:	e9cd 6608 	strd	r6, r6, [sp, #32]
 8021652:	f8bb 1000 	ldrh.w	r1, [fp]
 8021656:	9502      	str	r5, [sp, #8]
 8021658:	9106      	str	r1, [sp, #24]
 802165a:	2101      	movs	r1, #1
 802165c:	9401      	str	r4, [sp, #4]
 802165e:	e9cd a104 	strd	sl, r1, [sp, #16]
 8021662:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8021666:	9103      	str	r1, [sp, #12]
 8021668:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
 802166c:	9100      	str	r1, [sp, #0]
 802166e:	4649      	mov	r1, r9
 8021670:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 8021672:	4642      	mov	r2, r8
 8021674:	47a0      	blx	r4
 8021676:	b013      	add	sp, #76	; 0x4c
 8021678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802167c:	6803      	ldr	r3, [r0, #0]
 802167e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021680:	4798      	blx	r3
 8021682:	f8bb 3000 	ldrh.w	r3, [fp]
 8021686:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 802168a:	f04f 0e04 	mov.w	lr, #4
 802168e:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 8021692:	435d      	muls	r5, r3
 8021694:	fb03 1202 	mla	r2, r3, r2, r1
 8021698:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 802169c:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 80216a0:	920c      	str	r2, [sp, #48]	; 0x30
 80216a2:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 80216a6:	1b12      	subs	r2, r2, r4
 80216a8:	920d      	str	r2, [sp, #52]	; 0x34
 80216aa:	0062      	lsls	r2, r4, #1
 80216ac:	1b1c      	subs	r4, r3, r4
 80216ae:	920a      	str	r2, [sp, #40]	; 0x28
 80216b0:	0063      	lsls	r3, r4, #1
 80216b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80216b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80216b6:	4298      	cmp	r0, r3
 80216b8:	d266      	bcs.n	8021788 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1cc>
 80216ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80216bc:	eb00 0b03 	add.w	fp, r0, r3
 80216c0:	4558      	cmp	r0, fp
 80216c2:	d25c      	bcs.n	802177e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c2>
 80216c4:	f819 3b01 	ldrb.w	r3, [r9], #1
 80216c8:	fb1e e303 	smlabb	r3, lr, r3, lr
 80216cc:	f858 2003 	ldr.w	r2, [r8, r3]
 80216d0:	0e11      	lsrs	r1, r2, #24
 80216d2:	d012      	beq.n	80216fa <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 80216d4:	29ff      	cmp	r1, #255	; 0xff
 80216d6:	ea4f 2712 	mov.w	r7, r2, lsr #8
 80216da:	d110      	bne.n	80216fe <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x142>
 80216dc:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80216e0:	d10d      	bne.n	80216fe <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x142>
 80216e2:	0953      	lsrs	r3, r2, #5
 80216e4:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 80216e8:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80216ec:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80216f0:	f027 0707 	bic.w	r7, r7, #7
 80216f4:	431f      	orrs	r7, r3
 80216f6:	433a      	orrs	r2, r7
 80216f8:	8002      	strh	r2, [r0, #0]
 80216fa:	3002      	adds	r0, #2
 80216fc:	e7e0      	b.n	80216c0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x104>
 80216fe:	fb0a f101 	mul.w	r1, sl, r1
 8021702:	8806      	ldrh	r6, [r0, #0]
 8021704:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8021708:	b2d2      	uxtb	r2, r2
 802170a:	1c4b      	adds	r3, r1, #1
 802170c:	1235      	asrs	r5, r6, #8
 802170e:	10f4      	asrs	r4, r6, #3
 8021710:	eb03 2321 	add.w	r3, r3, r1, asr #8
 8021714:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8021718:	00f6      	lsls	r6, r6, #3
 802171a:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 802171e:	121b      	asrs	r3, r3, #8
 8021720:	b2f6      	uxtb	r6, r6
 8021722:	b299      	uxth	r1, r3
 8021724:	43db      	mvns	r3, r3
 8021726:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 802172a:	fb1c fc01 	smulbb	ip, ip, r1
 802172e:	b2db      	uxtb	r3, r3
 8021730:	fb12 f201 	smulbb	r2, r2, r1
 8021734:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8021738:	fb05 c503 	mla	r5, r5, r3, ip
 802173c:	b2ff      	uxtb	r7, r7
 802173e:	fb06 2203 	mla	r2, r6, r3, r2
 8021742:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 8021746:	fb17 f701 	smulbb	r7, r7, r1
 802174a:	b2ad      	uxth	r5, r5
 802174c:	b292      	uxth	r2, r2
 802174e:	fb04 7403 	mla	r4, r4, r3, r7
 8021752:	f105 0c01 	add.w	ip, r5, #1
 8021756:	1c57      	adds	r7, r2, #1
 8021758:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802175c:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8021760:	b2a4      	uxth	r4, r4
 8021762:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8021766:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 802176a:	433d      	orrs	r5, r7
 802176c:	1c67      	adds	r7, r4, #1
 802176e:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 8021772:	0964      	lsrs	r4, r4, #5
 8021774:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8021778:	4325      	orrs	r5, r4
 802177a:	8005      	strh	r5, [r0, #0]
 802177c:	e7bd      	b.n	80216fa <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 802177e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021780:	4418      	add	r0, r3
 8021782:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021784:	4499      	add	r9, r3
 8021786:	e795      	b.n	80216b4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf8>
 8021788:	4b05      	ldr	r3, [pc, #20]	; (80217a0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 802178a:	6818      	ldr	r0, [r3, #0]
 802178c:	6803      	ldr	r3, [r0, #0]
 802178e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021790:	4798      	blx	r3
 8021792:	e770      	b.n	8021676 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xba>
 8021794:	0802f143 	.word	0x0802f143
 8021798:	0802f89b 	.word	0x0802f89b
 802179c:	0802f245 	.word	0x0802f245
 80217a0:	2400b5d0 	.word	0x2400b5d0
 80217a4:	2400b5ca 	.word	0x2400b5ca

080217a8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 80217a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80217ac:	4614      	mov	r4, r2
 80217ae:	880a      	ldrh	r2, [r1, #0]
 80217b0:	b087      	sub	sp, #28
 80217b2:	4680      	mov	r8, r0
 80217b4:	2a02      	cmp	r2, #2
 80217b6:	460d      	mov	r5, r1
 80217b8:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 80217bc:	d006      	beq.n	80217cc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
 80217be:	4b63      	ldr	r3, [pc, #396]	; (802194c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a4>)
 80217c0:	f240 11e1 	movw	r1, #481	; 0x1e1
 80217c4:	4a62      	ldr	r2, [pc, #392]	; (8021950 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a8>)
 80217c6:	4863      	ldr	r0, [pc, #396]	; (8021954 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1ac>)
 80217c8:	f008 fc0c 	bl	8029fe4 <__assert_func>
 80217cc:	2e00      	cmp	r6, #0
 80217ce:	f000 80b9 	beq.w	8021944 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x19c>
 80217d2:	6820      	ldr	r0, [r4, #0]
 80217d4:	af02      	add	r7, sp, #8
 80217d6:	6861      	ldr	r1, [r4, #4]
 80217d8:	c703      	stmia	r7!, {r0, r1}
 80217da:	6818      	ldr	r0, [r3, #0]
 80217dc:	af04      	add	r7, sp, #16
 80217de:	6859      	ldr	r1, [r3, #4]
 80217e0:	c703      	stmia	r7!, {r0, r1}
 80217e2:	a802      	add	r0, sp, #8
 80217e4:	f7f9 f8d0 	bl	801a988 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80217e8:	4621      	mov	r1, r4
 80217ea:	a804      	add	r0, sp, #16
 80217ec:	f7f9 f8f4 	bl	801a9d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80217f0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80217f4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80217f8:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 80217fc:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 8021800:	fb14 2103 	smlabb	r1, r4, r3, r2
 8021804:	eb08 0401 	add.w	r4, r8, r1
 8021808:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 802180c:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8021810:	440a      	add	r2, r1
 8021812:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 8021816:	f8ad 2010 	strh.w	r2, [sp, #16]
 802181a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 802181e:	4413      	add	r3, r2
 8021820:	f8ad 3012 	strh.w	r3, [sp, #18]
 8021824:	4b4c      	ldr	r3, [pc, #304]	; (8021958 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b0>)
 8021826:	6818      	ldr	r0, [r3, #0]
 8021828:	6803      	ldr	r3, [r0, #0]
 802182a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802182c:	4798      	blx	r3
 802182e:	4b4b      	ldr	r3, [pc, #300]	; (802195c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b4>)
 8021830:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8021834:	2eff      	cmp	r6, #255	; 0xff
 8021836:	881a      	ldrh	r2, [r3, #0]
 8021838:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 802183c:	fb02 c101 	mla	r1, r2, r1, ip
 8021840:	fb02 f207 	mul.w	r2, r2, r7
 8021844:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8021848:	f105 0104 	add.w	r1, r5, #4
 802184c:	461d      	mov	r5, r3
 802184e:	d05a      	beq.n	8021906 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x15e>
 8021850:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 8021854:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8021858:	b2b6      	uxth	r6, r6
 802185a:	9301      	str	r3, [sp, #4]
 802185c:	fa1f fe8e 	uxth.w	lr, lr
 8021860:	4282      	cmp	r2, r0
 8021862:	d96a      	bls.n	802193a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x192>
 8021864:	eb00 0b0a 	add.w	fp, r0, sl
 8021868:	4583      	cmp	fp, r0
 802186a:	d940      	bls.n	80218ee <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x146>
 802186c:	8805      	ldrh	r5, [r0, #0]
 802186e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8021872:	122f      	asrs	r7, r5, #8
 8021874:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8021878:	ea4f 09e5 	mov.w	r9, r5, asr #3
 802187c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8021880:	00ed      	lsls	r5, r5, #3
 8021882:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8021886:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 802188a:	fb17 f70e 	smulbb	r7, r7, lr
 802188e:	b2ed      	uxtb	r5, r5
 8021890:	fb19 f90e 	smulbb	r9, r9, lr
 8021894:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8021898:	fb15 f50e 	smulbb	r5, r5, lr
 802189c:	fb0c 7c06 	mla	ip, ip, r6, r7
 80218a0:	10df      	asrs	r7, r3, #3
 80218a2:	00db      	lsls	r3, r3, #3
 80218a4:	fa1f fc8c 	uxth.w	ip, ip
 80218a8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80218ac:	b2db      	uxtb	r3, r3
 80218ae:	fb07 9706 	mla	r7, r7, r6, r9
 80218b2:	f10c 0901 	add.w	r9, ip, #1
 80218b6:	fb03 5306 	mla	r3, r3, r6, r5
 80218ba:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 80218be:	b29b      	uxth	r3, r3
 80218c0:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 80218c4:	b2bf      	uxth	r7, r7
 80218c6:	f103 0c01 	add.w	ip, r3, #1
 80218ca:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80218ce:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80218d2:	ea4c 0c09 	orr.w	ip, ip, r9
 80218d6:	f107 0901 	add.w	r9, r7, #1
 80218da:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 80218de:	097f      	lsrs	r7, r7, #5
 80218e0:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80218e4:	ea4c 0c07 	orr.w	ip, ip, r7
 80218e8:	f820 cb02 	strh.w	ip, [r0], #2
 80218ec:	e7bc      	b.n	8021868 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 80218ee:	9b01      	ldr	r3, [sp, #4]
 80218f0:	881b      	ldrh	r3, [r3, #0]
 80218f2:	eba3 0308 	sub.w	r3, r3, r8
 80218f6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80218fa:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80218fe:	eba3 0308 	sub.w	r3, r3, r8
 8021902:	441c      	add	r4, r3
 8021904:	e7ac      	b.n	8021860 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xb8>
 8021906:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 802190a:	4282      	cmp	r2, r0
 802190c:	d915      	bls.n	802193a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x192>
 802190e:	eb00 060a 	add.w	r6, r0, sl
 8021912:	4286      	cmp	r6, r0
 8021914:	d906      	bls.n	8021924 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17c>
 8021916:	f814 3b01 	ldrb.w	r3, [r4], #1
 802191a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 802191e:	f820 3b02 	strh.w	r3, [r0], #2
 8021922:	e7f6      	b.n	8021912 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x16a>
 8021924:	882b      	ldrh	r3, [r5, #0]
 8021926:	eba3 0308 	sub.w	r3, r3, r8
 802192a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802192e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8021932:	eba3 0308 	sub.w	r3, r3, r8
 8021936:	441c      	add	r4, r3
 8021938:	e7e7      	b.n	802190a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x162>
 802193a:	4b07      	ldr	r3, [pc, #28]	; (8021958 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b0>)
 802193c:	6818      	ldr	r0, [r3, #0]
 802193e:	6803      	ldr	r3, [r0, #0]
 8021940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021942:	4798      	blx	r3
 8021944:	b007      	add	sp, #28
 8021946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802194a:	bf00      	nop
 802194c:	0802f073 	.word	0x0802f073
 8021950:	0802f705 	.word	0x0802f705
 8021954:	0802f245 	.word	0x0802f245
 8021958:	2400b5d0 	.word	0x2400b5d0
 802195c:	2400b5ca 	.word	0x2400b5ca

08021960 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8021960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021964:	f8b1 9000 	ldrh.w	r9, [r1]
 8021968:	b091      	sub	sp, #68	; 0x44
 802196a:	4604      	mov	r4, r0
 802196c:	460f      	mov	r7, r1
 802196e:	f1b9 0f01 	cmp.w	r9, #1
 8021972:	4690      	mov	r8, r2
 8021974:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 8021978:	d006      	beq.n	8021988 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x28>
 802197a:	4b84      	ldr	r3, [pc, #528]	; (8021b8c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22c>)
 802197c:	f240 212f 	movw	r1, #559	; 0x22f
 8021980:	4a83      	ldr	r2, [pc, #524]	; (8021b90 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x230>)
 8021982:	4884      	ldr	r0, [pc, #528]	; (8021b94 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x234>)
 8021984:	f008 fb2e 	bl	8029fe4 <__assert_func>
 8021988:	2d00      	cmp	r5, #0
 802198a:	d04f      	beq.n	8021a2c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 802198c:	6810      	ldr	r0, [r2, #0]
 802198e:	ae0c      	add	r6, sp, #48	; 0x30
 8021990:	6851      	ldr	r1, [r2, #4]
 8021992:	f8df b208 	ldr.w	fp, [pc, #520]	; 8021b9c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x23c>
 8021996:	c603      	stmia	r6!, {r0, r1}
 8021998:	6818      	ldr	r0, [r3, #0]
 802199a:	ae0e      	add	r6, sp, #56	; 0x38
 802199c:	6859      	ldr	r1, [r3, #4]
 802199e:	c603      	stmia	r6!, {r0, r1}
 80219a0:	a80c      	add	r0, sp, #48	; 0x30
 80219a2:	f7f8 fff1 	bl	801a988 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80219a6:	4641      	mov	r1, r8
 80219a8:	a80e      	add	r0, sp, #56	; 0x38
 80219aa:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 8021ba0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x240>
 80219ae:	f7f9 f813 	bl	801a9d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80219b2:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 80219b6:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80219ba:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 80219be:	f8db 0000 	ldr.w	r0, [fp]
 80219c2:	fb11 2103 	smlabb	r1, r1, r3, r2
 80219c6:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 80219ca:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 80219ce:	440c      	add	r4, r1
 80219d0:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 80219d4:	440a      	add	r2, r1
 80219d6:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 80219da:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 80219de:	4413      	add	r3, r2
 80219e0:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80219e4:	6803      	ldr	r3, [r0, #0]
 80219e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80219e8:	4798      	blx	r3
 80219ea:	f010 0f80 	tst.w	r0, #128	; 0x80
 80219ee:	f8db 0000 	ldr.w	r0, [fp]
 80219f2:	d01e      	beq.n	8021a32 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xd2>
 80219f4:	2200      	movs	r2, #0
 80219f6:	6801      	ldr	r1, [r0, #0]
 80219f8:	b2b6      	uxth	r6, r6
 80219fa:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80219fe:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8021a02:	220b      	movs	r2, #11
 8021a04:	9207      	str	r2, [sp, #28]
 8021a06:	f8b8 2000 	ldrh.w	r2, [r8]
 8021a0a:	9504      	str	r5, [sp, #16]
 8021a0c:	9601      	str	r6, [sp, #4]
 8021a0e:	e9cd 9205 	strd	r9, r2, [sp, #20]
 8021a12:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8021a16:	9203      	str	r2, [sp, #12]
 8021a18:	fa1f f28a 	uxth.w	r2, sl
 8021a1c:	9202      	str	r2, [sp, #8]
 8021a1e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8021a22:	9200      	str	r2, [sp, #0]
 8021a24:	463a      	mov	r2, r7
 8021a26:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 8021a28:	4621      	mov	r1, r4
 8021a2a:	47a8      	blx	r5
 8021a2c:	b011      	add	sp, #68	; 0x44
 8021a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021a32:	6803      	ldr	r3, [r0, #0]
 8021a34:	ea4f 0946 	mov.w	r9, r6, lsl #1
 8021a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021a3a:	4798      	blx	r3
 8021a3c:	f8b8 2000 	ldrh.w	r2, [r8]
 8021a40:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8021a44:	2dff      	cmp	r5, #255	; 0xff
 8021a46:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8021a4a:	fb0a fa02 	mul.w	sl, sl, r2
 8021a4e:	fb02 1303 	mla	r3, r2, r3, r1
 8021a52:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021a56:	d062      	beq.n	8021b1e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1be>
 8021a58:	ea6f 0c05 	mvn.w	ip, r5
 8021a5c:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 8021a60:	b2ad      	uxth	r5, r5
 8021a62:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8021a66:	fa5f fc8c 	uxtb.w	ip, ip
 8021a6a:	930a      	str	r3, [sp, #40]	; 0x28
 8021a6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021a6e:	4298      	cmp	r0, r3
 8021a70:	f080 8085 	bcs.w	8021b7e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21e>
 8021a74:	eb00 0b09 	add.w	fp, r0, r9
 8021a78:	4558      	cmp	r0, fp
 8021a7a:	d246      	bcs.n	8021b0a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8021a7c:	f814 eb01 	ldrb.w	lr, [r4], #1
 8021a80:	2303      	movs	r3, #3
 8021a82:	2204      	movs	r2, #4
 8021a84:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 8021a88:	8803      	ldrh	r3, [r0, #0]
 8021a8a:	eb07 0a0e 	add.w	sl, r7, lr
 8021a8e:	1219      	asrs	r1, r3, #8
 8021a90:	10da      	asrs	r2, r3, #3
 8021a92:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8021a96:	f89a 8002 	ldrb.w	r8, [sl, #2]
 8021a9a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8021a9e:	00db      	lsls	r3, r3, #3
 8021aa0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8021aa4:	fb18 f805 	smulbb	r8, r8, r5
 8021aa8:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8021aac:	fb1e fe05 	smulbb	lr, lr, r5
 8021ab0:	b2db      	uxtb	r3, r3
 8021ab2:	fb01 810c 	mla	r1, r1, ip, r8
 8021ab6:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8021aba:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8021abe:	fb18 f805 	smulbb	r8, r8, r5
 8021ac2:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8021ac6:	b289      	uxth	r1, r1
 8021ac8:	fb02 820c 	mla	r2, r2, ip, r8
 8021acc:	fb03 e30c 	mla	r3, r3, ip, lr
 8021ad0:	f101 0801 	add.w	r8, r1, #1
 8021ad4:	b292      	uxth	r2, r2
 8021ad6:	b29b      	uxth	r3, r3
 8021ad8:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8021adc:	f102 0801 	add.w	r8, r2, #1
 8021ae0:	f103 0e01 	add.w	lr, r3, #1
 8021ae4:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 8021ae8:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8021aec:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8021af0:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8021af4:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8021af8:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8021afc:	ea4e 0101 	orr.w	r1, lr, r1
 8021b00:	ea41 0108 	orr.w	r1, r1, r8
 8021b04:	f820 1b02 	strh.w	r1, [r0], #2
 8021b08:	e7b6      	b.n	8021a78 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x118>
 8021b0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021b0c:	881b      	ldrh	r3, [r3, #0]
 8021b0e:	1b9b      	subs	r3, r3, r6
 8021b10:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021b14:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8021b18:	1b9b      	subs	r3, r3, r6
 8021b1a:	441c      	add	r4, r3
 8021b1c:	e7a6      	b.n	8021a6c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10c>
 8021b1e:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 8021b22:	2203      	movs	r2, #3
 8021b24:	2504      	movs	r5, #4
 8021b26:	491c      	ldr	r1, [pc, #112]	; (8021b98 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x238>)
 8021b28:	4550      	cmp	r0, sl
 8021b2a:	d228      	bcs.n	8021b7e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21e>
 8021b2c:	eb00 0c09 	add.w	ip, r0, r9
 8021b30:	4560      	cmp	r0, ip
 8021b32:	4623      	mov	r3, r4
 8021b34:	d219      	bcs.n	8021b6a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8021b36:	f893 e000 	ldrb.w	lr, [r3]
 8021b3a:	3401      	adds	r4, #1
 8021b3c:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 8021b40:	eb07 0b0e 	add.w	fp, r7, lr
 8021b44:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8021b48:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8021b4c:	f89b b001 	ldrb.w	fp, [fp, #1]
 8021b50:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 8021b54:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8021b58:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8021b5c:	ea43 030b 	orr.w	r3, r3, fp
 8021b60:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 8021b64:	f820 3b02 	strh.w	r3, [r0], #2
 8021b68:	e7e2      	b.n	8021b30 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>
 8021b6a:	f8b8 3000 	ldrh.w	r3, [r8]
 8021b6e:	1b9b      	subs	r3, r3, r6
 8021b70:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021b74:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8021b78:	1b9b      	subs	r3, r3, r6
 8021b7a:	441c      	add	r4, r3
 8021b7c:	e7d4      	b.n	8021b28 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>
 8021b7e:	4b07      	ldr	r3, [pc, #28]	; (8021b9c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x23c>)
 8021b80:	6818      	ldr	r0, [r3, #0]
 8021b82:	6803      	ldr	r3, [r0, #0]
 8021b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021b86:	4798      	blx	r3
 8021b88:	e750      	b.n	8021a2c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 8021b8a:	bf00      	nop
 8021b8c:	0802f0c1 	.word	0x0802f0c1
 8021b90:	0802f78e 	.word	0x0802f78e
 8021b94:	0802f245 	.word	0x0802f245
 8021b98:	fffff800 	.word	0xfffff800
 8021b9c:	2400b5d0 	.word	0x2400b5d0
 8021ba0:	2400b5ca 	.word	0x2400b5ca

08021ba4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8021ba4:	b430      	push	{r4, r5}
 8021ba6:	780d      	ldrb	r5, [r1, #0]
 8021ba8:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8021bac:	2d01      	cmp	r5, #1
 8021bae:	d00a      	beq.n	8021bc6 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 8021bb0:	d305      	bcc.n	8021bbe <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 8021bb2:	2d02      	cmp	r5, #2
 8021bb4:	d10b      	bne.n	8021bce <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 8021bb6:	9402      	str	r4, [sp, #8]
 8021bb8:	bc30      	pop	{r4, r5}
 8021bba:	f7ff bdf5 	b.w	80217a8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 8021bbe:	9402      	str	r4, [sp, #8]
 8021bc0:	bc30      	pop	{r4, r5}
 8021bc2:	f7ff bcfb 	b.w	80215bc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8021bc6:	9402      	str	r4, [sp, #8]
 8021bc8:	bc30      	pop	{r4, r5}
 8021bca:	f7ff bec9 	b.w	8021960 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8021bce:	bc30      	pop	{r4, r5}
 8021bd0:	4770      	bx	lr
	...

08021bd4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8021bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021bd8:	b087      	sub	sp, #28
 8021bda:	4604      	mov	r4, r0
 8021bdc:	460e      	mov	r6, r1
 8021bde:	6810      	ldr	r0, [r2, #0]
 8021be0:	6851      	ldr	r1, [r2, #4]
 8021be2:	ad02      	add	r5, sp, #8
 8021be4:	4617      	mov	r7, r2
 8021be6:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 8021bea:	f8df 9230 	ldr.w	r9, [pc, #560]	; 8021e1c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 8021bee:	c503      	stmia	r5!, {r0, r1}
 8021bf0:	6818      	ldr	r0, [r3, #0]
 8021bf2:	ad04      	add	r5, sp, #16
 8021bf4:	6859      	ldr	r1, [r3, #4]
 8021bf6:	c503      	stmia	r5!, {r0, r1}
 8021bf8:	a802      	add	r0, sp, #8
 8021bfa:	f7f8 fec5 	bl	801a988 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021bfe:	4639      	mov	r1, r7
 8021c00:	a804      	add	r0, sp, #16
 8021c02:	f7f8 fee9 	bl	801a9d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021c06:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8021c0a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021c0e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8021c12:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8021c16:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021c1a:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 8021c1e:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8021c22:	440e      	add	r6, r1
 8021c24:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8021c28:	440a      	add	r2, r1
 8021c2a:	f8ad 2010 	strh.w	r2, [sp, #16]
 8021c2e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8021c32:	4413      	add	r3, r2
 8021c34:	f8ad 3012 	strh.w	r3, [sp, #18]
 8021c38:	4b77      	ldr	r3, [pc, #476]	; (8021e18 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8021c3a:	6818      	ldr	r0, [r3, #0]
 8021c3c:	6803      	ldr	r3, [r0, #0]
 8021c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021c40:	4798      	blx	r3
 8021c42:	f8b9 b000 	ldrh.w	fp, [r9]
 8021c46:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021c4a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021c4e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8021c52:	fb05 f50b 	mul.w	r5, r5, fp
 8021c56:	fb0b 2303 	mla	r3, fp, r3, r2
 8021c5a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021c5e:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8021c62:	9300      	str	r3, [sp, #0]
 8021c64:	d069      	beq.n	8021d3a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 8021c66:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 8021c6a:	4558      	cmp	r0, fp
 8021c6c:	f080 80cc 	bcs.w	8021e08 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8021c70:	9b00      	ldr	r3, [sp, #0]
 8021c72:	4631      	mov	r1, r6
 8021c74:	18c3      	adds	r3, r0, r3
 8021c76:	9301      	str	r3, [sp, #4]
 8021c78:	9b01      	ldr	r3, [sp, #4]
 8021c7a:	4298      	cmp	r0, r3
 8021c7c:	d24f      	bcs.n	8021d1e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 8021c7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021c82:	2a00      	cmp	r2, #0
 8021c84:	d048      	beq.n	8021d18 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8021c86:	fb0a f202 	mul.w	r2, sl, r2
 8021c8a:	1c53      	adds	r3, r2, #1
 8021c8c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021c90:	121b      	asrs	r3, r3, #8
 8021c92:	d041      	beq.n	8021d18 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8021c94:	8802      	ldrh	r2, [r0, #0]
 8021c96:	b29e      	uxth	r6, r3
 8021c98:	f8b4 c000 	ldrh.w	ip, [r4]
 8021c9c:	43db      	mvns	r3, r3
 8021c9e:	1215      	asrs	r5, r2, #8
 8021ca0:	b2db      	uxtb	r3, r3
 8021ca2:	ea4f 272c 	mov.w	r7, ip, asr #8
 8021ca6:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8021caa:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 8021cae:	fb15 f503 	smulbb	r5, r5, r3
 8021cb2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8021cb6:	00d2      	lsls	r2, r2, #3
 8021cb8:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8021cbc:	fb07 5706 	mla	r7, r7, r6, r5
 8021cc0:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8021cc4:	b2d2      	uxtb	r2, r2
 8021cc6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8021cca:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8021cce:	fb1e fe03 	smulbb	lr, lr, r3
 8021cd2:	b2bf      	uxth	r7, r7
 8021cd4:	fb12 f203 	smulbb	r2, r2, r3
 8021cd8:	fa5f fc8c 	uxtb.w	ip, ip
 8021cdc:	fb05 e506 	mla	r5, r5, r6, lr
 8021ce0:	f107 0e01 	add.w	lr, r7, #1
 8021ce4:	fb0c 2c06 	mla	ip, ip, r6, r2
 8021ce8:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8021cec:	fa1f fc8c 	uxth.w	ip, ip
 8021cf0:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 8021cf4:	b2ad      	uxth	r5, r5
 8021cf6:	f10c 0701 	add.w	r7, ip, #1
 8021cfa:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8021cfe:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8021d02:	ea47 070e 	orr.w	r7, r7, lr
 8021d06:	f105 0e01 	add.w	lr, r5, #1
 8021d0a:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 8021d0e:	096d      	lsrs	r5, r5, #5
 8021d10:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021d14:	432f      	orrs	r7, r5
 8021d16:	8007      	strh	r7, [r0, #0]
 8021d18:	3002      	adds	r0, #2
 8021d1a:	3402      	adds	r4, #2
 8021d1c:	e7ac      	b.n	8021c78 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 8021d1e:	f8b9 3000 	ldrh.w	r3, [r9]
 8021d22:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8021d26:	eba3 0308 	sub.w	r3, r3, r8
 8021d2a:	eba6 0608 	sub.w	r6, r6, r8
 8021d2e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021d32:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8021d36:	440e      	add	r6, r1
 8021d38:	e797      	b.n	8021c6a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 8021d3a:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8021d3e:	42a8      	cmp	r0, r5
 8021d40:	d262      	bcs.n	8021e08 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8021d42:	9b00      	ldr	r3, [sp, #0]
 8021d44:	4631      	mov	r1, r6
 8021d46:	eb00 0b03 	add.w	fp, r0, r3
 8021d4a:	4558      	cmp	r0, fp
 8021d4c:	d24e      	bcs.n	8021dec <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 8021d4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021d52:	b12b      	cbz	r3, 8021d60 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8021d54:	2bff      	cmp	r3, #255	; 0xff
 8021d56:	f8b4 e000 	ldrh.w	lr, [r4]
 8021d5a:	d104      	bne.n	8021d66 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 8021d5c:	f8a0 e000 	strh.w	lr, [r0]
 8021d60:	3002      	adds	r0, #2
 8021d62:	3402      	adds	r4, #2
 8021d64:	e7f1      	b.n	8021d4a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 8021d66:	8802      	ldrh	r2, [r0, #0]
 8021d68:	b29f      	uxth	r7, r3
 8021d6a:	43db      	mvns	r3, r3
 8021d6c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8021d70:	1216      	asrs	r6, r2, #8
 8021d72:	b2db      	uxtb	r3, r3
 8021d74:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8021d78:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8021d7c:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 8021d80:	00d2      	lsls	r2, r2, #3
 8021d82:	fb16 f603 	smulbb	r6, r6, r3
 8021d86:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8021d8a:	b2d2      	uxtb	r2, r2
 8021d8c:	fb0c 6c07 	mla	ip, ip, r7, r6
 8021d90:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8021d94:	fb1a fa03 	smulbb	sl, sl, r3
 8021d98:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8021d9c:	fa1f fc8c 	uxth.w	ip, ip
 8021da0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8021da4:	fb12 f303 	smulbb	r3, r2, r3
 8021da8:	fa5f fe8e 	uxtb.w	lr, lr
 8021dac:	fb06 a607 	mla	r6, r6, r7, sl
 8021db0:	f10c 0201 	add.w	r2, ip, #1
 8021db4:	fb0e 3307 	mla	r3, lr, r7, r3
 8021db8:	b2b6      	uxth	r6, r6
 8021dba:	b29b      	uxth	r3, r3
 8021dbc:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8021dc0:	f106 0a01 	add.w	sl, r6, #1
 8021dc4:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 8021dc8:	f103 0c01 	add.w	ip, r3, #1
 8021dcc:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8021dd0:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8021dd4:	0976      	lsrs	r6, r6, #5
 8021dd6:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8021dda:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8021dde:	ea4c 0c02 	orr.w	ip, ip, r2
 8021de2:	ea4c 0c06 	orr.w	ip, ip, r6
 8021de6:	f8a0 c000 	strh.w	ip, [r0]
 8021dea:	e7b9      	b.n	8021d60 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8021dec:	f8b9 3000 	ldrh.w	r3, [r9]
 8021df0:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8021df4:	eba3 0308 	sub.w	r3, r3, r8
 8021df8:	eba6 0608 	sub.w	r6, r6, r8
 8021dfc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021e00:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8021e04:	440e      	add	r6, r1
 8021e06:	e79a      	b.n	8021d3e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 8021e08:	4b03      	ldr	r3, [pc, #12]	; (8021e18 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8021e0a:	6818      	ldr	r0, [r3, #0]
 8021e0c:	6803      	ldr	r3, [r0, #0]
 8021e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021e10:	4798      	blx	r3
 8021e12:	b007      	add	sp, #28
 8021e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021e18:	2400b5d0 	.word	0x2400b5d0
 8021e1c:	2400b5ca 	.word	0x2400b5ca

08021e20 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8021e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e24:	b089      	sub	sp, #36	; 0x24
 8021e26:	4682      	mov	sl, r0
 8021e28:	460f      	mov	r7, r1
 8021e2a:	4691      	mov	r9, r2
 8021e2c:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 8021e30:	4698      	mov	r8, r3
 8021e32:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021e34:	2e00      	cmp	r6, #0
 8021e36:	d03d      	beq.n	8021eb4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8021e38:	4608      	mov	r0, r1
 8021e3a:	f7fc f861 	bl	801df00 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8021e3e:	4605      	mov	r5, r0
 8021e40:	4638      	mov	r0, r7
 8021e42:	f7fc f897 	bl	801df74 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8021e46:	f8ad 000e 	strh.w	r0, [sp, #14]
 8021e4a:	4638      	mov	r0, r7
 8021e4c:	f8ad 9008 	strh.w	r9, [sp, #8]
 8021e50:	f8ad 500c 	strh.w	r5, [sp, #12]
 8021e54:	f8ad 800a 	strh.w	r8, [sp, #10]
 8021e58:	f7fc f95a 	bl	801e110 <_ZNK8touchgfx6Bitmap7getDataEv>
 8021e5c:	4605      	mov	r5, r0
 8021e5e:	4638      	mov	r0, r7
 8021e60:	f7fc f988 	bl	801e174 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8021e64:	4681      	mov	r9, r0
 8021e66:	4638      	mov	r0, r7
 8021e68:	f7fc f9dc 	bl	801e224 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8021e6c:	280b      	cmp	r0, #11
 8021e6e:	f200 816f 	bhi.w	8022150 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x330>
 8021e72:	e8df f010 	tbh	[pc, r0, lsl #1]
 8021e76:	00c3      	.short	0x00c3
 8021e78:	000c00b4 	.word	0x000c00b4
 8021e7c:	016d016d 	.word	0x016d016d
 8021e80:	016d016d 	.word	0x016d016d
 8021e84:	016d016d 	.word	0x016d016d
 8021e88:	016d016d 	.word	0x016d016d
 8021e8c:	00bb      	.short	0x00bb
 8021e8e:	4bb3      	ldr	r3, [pc, #716]	; (802215c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x33c>)
 8021e90:	6818      	ldr	r0, [r3, #0]
 8021e92:	6803      	ldr	r3, [r0, #0]
 8021e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021e96:	4798      	blx	r3
 8021e98:	2eff      	cmp	r6, #255	; 0xff
 8021e9a:	d121      	bne.n	8021ee0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 8021e9c:	0683      	lsls	r3, r0, #26
 8021e9e:	d41f      	bmi.n	8021ee0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 8021ea0:	4638      	mov	r0, r7
 8021ea2:	f7fc f8fb 	bl	801e09c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8021ea6:	b940      	cbnz	r0, 8021eba <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x9a>
 8021ea8:	4623      	mov	r3, r4
 8021eaa:	aa02      	add	r2, sp, #8
 8021eac:	4629      	mov	r1, r5
 8021eae:	4650      	mov	r0, sl
 8021eb0:	f7ff f9e4 	bl	802127c <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8021eb4:	b009      	add	sp, #36	; 0x24
 8021eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021eba:	f10d 0818 	add.w	r8, sp, #24
 8021ebe:	4639      	mov	r1, r7
 8021ec0:	af04      	add	r7, sp, #16
 8021ec2:	4640      	mov	r0, r8
 8021ec4:	f7fc f890 	bl	801dfe8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8021ec8:	e898 0003 	ldmia.w	r8, {r0, r1}
 8021ecc:	e887 0003 	stmia.w	r7, {r0, r1}
 8021ed0:	4638      	mov	r0, r7
 8021ed2:	4621      	mov	r1, r4
 8021ed4:	f7f5 f9a6 	bl	8017224 <_ZN8touchgfx4RectaNERKS0_>
 8021ed8:	4638      	mov	r0, r7
 8021eda:	f7f5 f9e6 	bl	80172aa <_ZNK8touchgfx4Rect7isEmptyEv>
 8021ede:	b130      	cbz	r0, 8021eee <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xce>
 8021ee0:	4633      	mov	r3, r6
 8021ee2:	4622      	mov	r2, r4
 8021ee4:	a902      	add	r1, sp, #8
 8021ee6:	4628      	mov	r0, r5
 8021ee8:	f7ff f8e2 	bl	80210b0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021eec:	e7e2      	b.n	8021eb4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8021eee:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021ef2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8021ef6:	4293      	cmp	r3, r2
 8021ef8:	dd12      	ble.n	8021f20 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x100>
 8021efa:	1a9b      	subs	r3, r3, r2
 8021efc:	f9b4 0000 	ldrsh.w	r0, [r4]
 8021f00:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8021f04:	f8ad 0018 	strh.w	r0, [sp, #24]
 8021f08:	4628      	mov	r0, r5
 8021f0a:	f8ad 201a 	strh.w	r2, [sp, #26]
 8021f0e:	4642      	mov	r2, r8
 8021f10:	f8ad 101c 	strh.w	r1, [sp, #28]
 8021f14:	a902      	add	r1, sp, #8
 8021f16:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021f1a:	4633      	mov	r3, r6
 8021f1c:	f7ff f8c8 	bl	80210b0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021f20:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8021f24:	f9b4 2000 	ldrsh.w	r2, [r4]
 8021f28:	4293      	cmp	r3, r2
 8021f2a:	dd12      	ble.n	8021f52 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x132>
 8021f2c:	1a9b      	subs	r3, r3, r2
 8021f2e:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8021f32:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8021f36:	f8ad 2018 	strh.w	r2, [sp, #24]
 8021f3a:	4642      	mov	r2, r8
 8021f3c:	f8ad 001a 	strh.w	r0, [sp, #26]
 8021f40:	4628      	mov	r0, r5
 8021f42:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021f46:	23ff      	movs	r3, #255	; 0xff
 8021f48:	f8ad 101e 	strh.w	r1, [sp, #30]
 8021f4c:	a902      	add	r1, sp, #8
 8021f4e:	f7ff f8af 	bl	80210b0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021f52:	463b      	mov	r3, r7
 8021f54:	aa02      	add	r2, sp, #8
 8021f56:	4629      	mov	r1, r5
 8021f58:	4650      	mov	r0, sl
 8021f5a:	f7ff f98f 	bl	802127c <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8021f5e:	88a2      	ldrh	r2, [r4, #4]
 8021f60:	8823      	ldrh	r3, [r4, #0]
 8021f62:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8021f66:	4413      	add	r3, r2
 8021f68:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8021f6c:	440a      	add	r2, r1
 8021f6e:	b29b      	uxth	r3, r3
 8021f70:	b292      	uxth	r2, r2
 8021f72:	b218      	sxth	r0, r3
 8021f74:	b211      	sxth	r1, r2
 8021f76:	4288      	cmp	r0, r1
 8021f78:	dd12      	ble.n	8021fa0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x180>
 8021f7a:	1a9b      	subs	r3, r3, r2
 8021f7c:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8021f80:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8021f84:	4642      	mov	r2, r8
 8021f86:	f8ad 1018 	strh.w	r1, [sp, #24]
 8021f8a:	a902      	add	r1, sp, #8
 8021f8c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021f90:	23ff      	movs	r3, #255	; 0xff
 8021f92:	f8ad 001e 	strh.w	r0, [sp, #30]
 8021f96:	4628      	mov	r0, r5
 8021f98:	f8ad 601a 	strh.w	r6, [sp, #26]
 8021f9c:	f7ff f888 	bl	80210b0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021fa0:	88e2      	ldrh	r2, [r4, #6]
 8021fa2:	8863      	ldrh	r3, [r4, #2]
 8021fa4:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8021fa8:	4413      	add	r3, r2
 8021faa:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8021fae:	440a      	add	r2, r1
 8021fb0:	b29b      	uxth	r3, r3
 8021fb2:	b292      	uxth	r2, r2
 8021fb4:	b218      	sxth	r0, r3
 8021fb6:	b211      	sxth	r1, r2
 8021fb8:	4288      	cmp	r0, r1
 8021fba:	f77f af7b 	ble.w	8021eb4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8021fbe:	1a9b      	subs	r3, r3, r2
 8021fc0:	f9b4 6000 	ldrsh.w	r6, [r4]
 8021fc4:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8021fc8:	4642      	mov	r2, r8
 8021fca:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021fce:	23ff      	movs	r3, #255	; 0xff
 8021fd0:	f8ad 6018 	strh.w	r6, [sp, #24]
 8021fd4:	f8ad 101a 	strh.w	r1, [sp, #26]
 8021fd8:	f8ad 001c 	strh.w	r0, [sp, #28]
 8021fdc:	e782      	b.n	8021ee4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>
 8021fde:	4633      	mov	r3, r6
 8021fe0:	4622      	mov	r2, r4
 8021fe2:	a902      	add	r1, sp, #8
 8021fe4:	4628      	mov	r0, r5
 8021fe6:	f7ff f9b9 	bl	802135c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 8021fea:	e763      	b.n	8021eb4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8021fec:	9600      	str	r6, [sp, #0]
 8021fee:	4623      	mov	r3, r4
 8021ff0:	aa02      	add	r2, sp, #8
 8021ff2:	4649      	mov	r1, r9
 8021ff4:	4628      	mov	r0, r5
 8021ff6:	f7ff fdd5 	bl	8021ba4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8021ffa:	e75b      	b.n	8021eb4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8021ffc:	4638      	mov	r0, r7
 8021ffe:	f7fc f84d 	bl	801e09c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8022002:	b950      	cbnz	r0, 802201a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1fa>
 8022004:	f8da 3000 	ldr.w	r3, [sl]
 8022008:	aa02      	add	r2, sp, #8
 802200a:	4629      	mov	r1, r5
 802200c:	e9cd 6000 	strd	r6, r0, [sp]
 8022010:	4650      	mov	r0, sl
 8022012:	68de      	ldr	r6, [r3, #12]
 8022014:	4623      	mov	r3, r4
 8022016:	47b0      	blx	r6
 8022018:	e74c      	b.n	8021eb4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 802201a:	f10d 0818 	add.w	r8, sp, #24
 802201e:	4639      	mov	r1, r7
 8022020:	af04      	add	r7, sp, #16
 8022022:	4640      	mov	r0, r8
 8022024:	f7fb ffe0 	bl	801dfe8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8022028:	e898 0003 	ldmia.w	r8, {r0, r1}
 802202c:	e887 0003 	stmia.w	r7, {r0, r1}
 8022030:	4638      	mov	r0, r7
 8022032:	4621      	mov	r1, r4
 8022034:	f7f5 f8f6 	bl	8017224 <_ZN8touchgfx4RectaNERKS0_>
 8022038:	4638      	mov	r0, r7
 802203a:	f7f5 f936 	bl	80172aa <_ZNK8touchgfx4Rect7isEmptyEv>
 802203e:	b138      	cbz	r0, 8022050 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x230>
 8022040:	4623      	mov	r3, r4
 8022042:	9600      	str	r6, [sp, #0]
 8022044:	aa02      	add	r2, sp, #8
 8022046:	4649      	mov	r1, r9
 8022048:	4628      	mov	r0, r5
 802204a:	f7ff fdc3 	bl	8021bd4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 802204e:	e731      	b.n	8021eb4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8022050:	f8da 3000 	ldr.w	r3, [sl]
 8022054:	aa02      	add	r2, sp, #8
 8022056:	4629      	mov	r1, r5
 8022058:	e9cd 6000 	strd	r6, r0, [sp]
 802205c:	4650      	mov	r0, sl
 802205e:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8022062:	463b      	mov	r3, r7
 8022064:	47d8      	blx	fp
 8022066:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802206a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 802206e:	4293      	cmp	r3, r2
 8022070:	dd13      	ble.n	802209a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x27a>
 8022072:	f9b4 0000 	ldrsh.w	r0, [r4]
 8022076:	1a9b      	subs	r3, r3, r2
 8022078:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802207c:	f8ad 0018 	strh.w	r0, [sp, #24]
 8022080:	4628      	mov	r0, r5
 8022082:	f8ad 201a 	strh.w	r2, [sp, #26]
 8022086:	aa02      	add	r2, sp, #8
 8022088:	f8ad 101c 	strh.w	r1, [sp, #28]
 802208c:	4649      	mov	r1, r9
 802208e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022092:	4643      	mov	r3, r8
 8022094:	9600      	str	r6, [sp, #0]
 8022096:	f7ff fd9d 	bl	8021bd4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 802209a:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 802209e:	f9b4 2000 	ldrsh.w	r2, [r4]
 80220a2:	4293      	cmp	r3, r2
 80220a4:	dd13      	ble.n	80220ce <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2ae>
 80220a6:	1a9b      	subs	r3, r3, r2
 80220a8:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 80220ac:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 80220b0:	f8ad 2018 	strh.w	r2, [sp, #24]
 80220b4:	aa02      	add	r2, sp, #8
 80220b6:	f8ad 001a 	strh.w	r0, [sp, #26]
 80220ba:	4628      	mov	r0, r5
 80220bc:	f8ad 301c 	strh.w	r3, [sp, #28]
 80220c0:	4643      	mov	r3, r8
 80220c2:	f8ad 101e 	strh.w	r1, [sp, #30]
 80220c6:	4649      	mov	r1, r9
 80220c8:	9600      	str	r6, [sp, #0]
 80220ca:	f7ff fd83 	bl	8021bd4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80220ce:	88a2      	ldrh	r2, [r4, #4]
 80220d0:	8823      	ldrh	r3, [r4, #0]
 80220d2:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80220d6:	4413      	add	r3, r2
 80220d8:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80220dc:	440a      	add	r2, r1
 80220de:	b29b      	uxth	r3, r3
 80220e0:	b292      	uxth	r2, r2
 80220e2:	b218      	sxth	r0, r3
 80220e4:	b211      	sxth	r1, r2
 80220e6:	4288      	cmp	r0, r1
 80220e8:	dd13      	ble.n	8022112 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2f2>
 80220ea:	1a9b      	subs	r3, r3, r2
 80220ec:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 80220f0:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 80220f4:	aa02      	add	r2, sp, #8
 80220f6:	f8ad 1018 	strh.w	r1, [sp, #24]
 80220fa:	4649      	mov	r1, r9
 80220fc:	f8ad 301c 	strh.w	r3, [sp, #28]
 8022100:	4643      	mov	r3, r8
 8022102:	f8ad 001e 	strh.w	r0, [sp, #30]
 8022106:	4628      	mov	r0, r5
 8022108:	9600      	str	r6, [sp, #0]
 802210a:	f8ad 701a 	strh.w	r7, [sp, #26]
 802210e:	f7ff fd61 	bl	8021bd4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8022112:	88e2      	ldrh	r2, [r4, #6]
 8022114:	8863      	ldrh	r3, [r4, #2]
 8022116:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 802211a:	4413      	add	r3, r2
 802211c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8022120:	440a      	add	r2, r1
 8022122:	b29b      	uxth	r3, r3
 8022124:	b292      	uxth	r2, r2
 8022126:	b218      	sxth	r0, r3
 8022128:	b211      	sxth	r1, r2
 802212a:	4288      	cmp	r0, r1
 802212c:	f77f aec2 	ble.w	8021eb4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8022130:	f9b4 7000 	ldrsh.w	r7, [r4]
 8022134:	1a9b      	subs	r3, r3, r2
 8022136:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 802213a:	f8ad 301e 	strh.w	r3, [sp, #30]
 802213e:	4643      	mov	r3, r8
 8022140:	f8ad 7018 	strh.w	r7, [sp, #24]
 8022144:	f8ad 101a 	strh.w	r1, [sp, #26]
 8022148:	f8ad 001c 	strh.w	r0, [sp, #28]
 802214c:	9600      	str	r6, [sp, #0]
 802214e:	e779      	b.n	8022044 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x224>
 8022150:	4b03      	ldr	r3, [pc, #12]	; (8022160 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x340>)
 8022152:	21b4      	movs	r1, #180	; 0xb4
 8022154:	4a03      	ldr	r2, [pc, #12]	; (8022164 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x344>)
 8022156:	4804      	ldr	r0, [pc, #16]	; (8022168 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x348>)
 8022158:	f007 ff44 	bl	8029fe4 <__assert_func>
 802215c:	2400b5d0 	.word	0x2400b5d0
 8022160:	0802f10f 	.word	0x0802f10f
 8022164:	0802f817 	.word	0x0802f817
 8022168:	0802f245 	.word	0x0802f245

0802216c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 802216c:	b508      	push	{r3, lr}
 802216e:	b180      	cbz	r0, 8022192 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x26>
 8022170:	2902      	cmp	r1, #2
 8022172:	d014      	beq.n	802219e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x32>
 8022174:	2903      	cmp	r1, #3
 8022176:	d01d      	beq.n	80221b4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 8022178:	2901      	cmp	r1, #1
 802217a:	d101      	bne.n	8022180 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 802217c:	2001      	movs	r0, #1
 802217e:	bd08      	pop	{r3, pc}
 8022180:	4b0e      	ldr	r3, [pc, #56]	; (80221bc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8022182:	8818      	ldrh	r0, [r3, #0]
 8022184:	b990      	cbnz	r0, 80221ac <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8022186:	4b0e      	ldr	r3, [pc, #56]	; (80221c0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
 8022188:	2150      	movs	r1, #80	; 0x50
 802218a:	4a0e      	ldr	r2, [pc, #56]	; (80221c4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
 802218c:	480e      	ldr	r0, [pc, #56]	; (80221c8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
 802218e:	f007 ff29 	bl	8029fe4 <__assert_func>
 8022192:	2902      	cmp	r1, #2
 8022194:	d00e      	beq.n	80221b4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 8022196:	2903      	cmp	r1, #3
 8022198:	d0f2      	beq.n	8022180 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 802219a:	2901      	cmp	r1, #1
 802219c:	d1ee      	bne.n	802217c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x10>
 802219e:	4b07      	ldr	r3, [pc, #28]	; (80221bc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 80221a0:	8818      	ldrh	r0, [r3, #0]
 80221a2:	2800      	cmp	r0, #0
 80221a4:	d0ef      	beq.n	8022186 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1a>
 80221a6:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80221aa:	e7e8      	b.n	802217e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 80221ac:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80221b0:	4240      	negs	r0, r0
 80221b2:	e7e4      	b.n	802217e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 80221b4:	f04f 30ff 	mov.w	r0, #4294967295
 80221b8:	e7e1      	b.n	802217e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 80221ba:	bf00      	nop
 80221bc:	2400b5ca 	.word	0x2400b5ca
 80221c0:	0802f39b 	.word	0x0802f39b
 80221c4:	0802f994 	.word	0x0802f994
 80221c8:	0802f3dd 	.word	0x0802f3dd

080221cc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 80221cc:	b508      	push	{r3, lr}
 80221ce:	b180      	cbz	r0, 80221f2 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 80221d0:	2902      	cmp	r1, #2
 80221d2:	d014      	beq.n	80221fe <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x32>
 80221d4:	2903      	cmp	r1, #3
 80221d6:	d018      	beq.n	802220a <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 80221d8:	2901      	cmp	r1, #1
 80221da:	d001      	beq.n	80221e0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 80221dc:	2001      	movs	r0, #1
 80221de:	e013      	b.n	8022208 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 80221e0:	4b0e      	ldr	r3, [pc, #56]	; (802221c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 80221e2:	8818      	ldrh	r0, [r3, #0]
 80221e4:	b970      	cbnz	r0, 8022204 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x38>
 80221e6:	4b0e      	ldr	r3, [pc, #56]	; (8022220 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
 80221e8:	2150      	movs	r1, #80	; 0x50
 80221ea:	4a0e      	ldr	r2, [pc, #56]	; (8022224 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
 80221ec:	480e      	ldr	r0, [pc, #56]	; (8022228 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
 80221ee:	f007 fef9 	bl	8029fe4 <__assert_func>
 80221f2:	2902      	cmp	r1, #2
 80221f4:	d009      	beq.n	802220a <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 80221f6:	2903      	cmp	r1, #3
 80221f8:	d0f0      	beq.n	80221dc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x10>
 80221fa:	2901      	cmp	r1, #1
 80221fc:	d1f0      	bne.n	80221e0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 80221fe:	f04f 30ff 	mov.w	r0, #4294967295
 8022202:	e001      	b.n	8022208 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8022204:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8022208:	bd08      	pop	{r3, pc}
 802220a:	4b04      	ldr	r3, [pc, #16]	; (802221c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 802220c:	8818      	ldrh	r0, [r3, #0]
 802220e:	2800      	cmp	r0, #0
 8022210:	d0e9      	beq.n	80221e6 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x1a>
 8022212:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8022216:	4240      	negs	r0, r0
 8022218:	e7f6      	b.n	8022208 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 802221a:	bf00      	nop
 802221c:	2400b5ca 	.word	0x2400b5ca
 8022220:	0802f39b 	.word	0x0802f39b
 8022224:	0802f994 	.word	0x0802f994
 8022228:	0802f3dd 	.word	0x0802f3dd

0802222c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 802222c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022230:	b099      	sub	sp, #100	; 0x64
 8022232:	910b      	str	r1, [sp, #44]	; 0x2c
 8022234:	a914      	add	r1, sp, #80	; 0x50
 8022236:	f9bd 5088 	ldrsh.w	r5, [sp, #136]	; 0x88
 802223a:	f8bd 6090 	ldrh.w	r6, [sp, #144]	; 0x90
 802223e:	f8bd 7094 	ldrh.w	r7, [sp, #148]	; 0x94
 8022242:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 8022246:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 802224a:	e881 000c 	stmia.w	r1, {r2, r3}
 802224e:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 8022252:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 8022256:	930a      	str	r3, [sp, #40]	; 0x28
 8022258:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 802225c:	f891 900d 	ldrb.w	r9, [r1, #13]
 8022260:	9311      	str	r3, [sp, #68]	; 0x44
 8022262:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 8022266:	7988      	ldrb	r0, [r1, #6]
 8022268:	930c      	str	r3, [sp, #48]	; 0x30
 802226a:	ea4f 1349 	mov.w	r3, r9, lsl #5
 802226e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8022272:	4303      	orrs	r3, r0
 8022274:	9309      	str	r3, [sp, #36]	; 0x24
 8022276:	f000 81a1 	beq.w	80225bc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 802227a:	ea4f 1909 	mov.w	r9, r9, lsl #4
 802227e:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8022282:	f891 9007 	ldrb.w	r9, [r1, #7]
 8022286:	ea59 0903 	orrs.w	r9, r9, r3
 802228a:	f000 8197 	beq.w	80225bc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 802228e:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8022292:	b29b      	uxth	r3, r3
 8022294:	2e00      	cmp	r6, #0
 8022296:	f000 813a 	beq.w	802250e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 802229a:	1af6      	subs	r6, r6, r3
 802229c:	b2b6      	uxth	r6, r6
 802229e:	0433      	lsls	r3, r6, #16
 80222a0:	d502      	bpl.n	80222a8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7c>
 80222a2:	1bad      	subs	r5, r5, r6
 80222a4:	2600      	movs	r6, #0
 80222a6:	b22d      	sxth	r5, r5
 80222a8:	f9b2 1000 	ldrsh.w	r1, [r2]
 80222ac:	a814      	add	r0, sp, #80	; 0x50
 80222ae:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 80222b2:	428d      	cmp	r5, r1
 80222b4:	b28b      	uxth	r3, r1
 80222b6:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 80222ba:	bfbf      	itttt	lt
 80222bc:	18f6      	addlt	r6, r6, r3
 80222be:	1b75      	sublt	r5, r6, r5
 80222c0:	b2ae      	uxthlt	r6, r5
 80222c2:	460d      	movlt	r5, r1
 80222c4:	8891      	ldrh	r1, [r2, #4]
 80222c6:	440b      	add	r3, r1
 80222c8:	4629      	mov	r1, r5
 80222ca:	b21b      	sxth	r3, r3
 80222cc:	9310      	str	r3, [sp, #64]	; 0x40
 80222ce:	88d3      	ldrh	r3, [r2, #6]
 80222d0:	8852      	ldrh	r2, [r2, #2]
 80222d2:	4413      	add	r3, r2
 80222d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80222d6:	b21b      	sxth	r3, r3
 80222d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80222da:	4bbd      	ldr	r3, [pc, #756]	; (80225d0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 80222dc:	f893 b000 	ldrb.w	fp, [r3]
 80222e0:	f10b 3cff 	add.w	ip, fp, #4294967295
 80222e4:	f1dc 0300 	rsbs	r3, ip, #0
 80222e8:	eb43 030c 	adc.w	r3, r3, ip
 80222ec:	930e      	str	r3, [sp, #56]	; 0x38
 80222ee:	4653      	mov	r3, sl
 80222f0:	f7f8 f9ce 	bl	801a690 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 80222f4:	4629      	mov	r1, r5
 80222f6:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 80222fa:	4653      	mov	r3, sl
 80222fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80222fe:	a814      	add	r0, sp, #80	; 0x50
 8022300:	f7f8 f9de 	bl	801a6c0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8022304:	a918      	add	r1, sp, #96	; 0x60
 8022306:	f821 0d02 	strh.w	r0, [r1, #-2]!
 802230a:	a817      	add	r0, sp, #92	; 0x5c
 802230c:	f7f8 fafa 	bl	801a904 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8022310:	f1ba 0f00 	cmp.w	sl, #0
 8022314:	f040 80fe 	bne.w	8022514 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e8>
 8022318:	f1bb 0f01 	cmp.w	fp, #1
 802231c:	f040 8102 	bne.w	8022524 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f8>
 8022320:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022322:	b153      	cbz	r3, 802233a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 8022324:	2408      	movs	r4, #8
 8022326:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022328:	fb94 f3f8 	sdiv	r3, r4, r8
 802232c:	1e5c      	subs	r4, r3, #1
 802232e:	4414      	add	r4, r2
 8022330:	fb94 f4f3 	sdiv	r4, r4, r3
 8022334:	fb14 f403 	smulbb	r4, r4, r3
 8022338:	b2a4      	uxth	r4, r4
 802233a:	b906      	cbnz	r6, 802233e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x112>
 802233c:	b16f      	cbz	r7, 802235a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12e>
 802233e:	fb07 6304 	mla	r3, r7, r4, r6
 8022342:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8022344:	463a      	mov	r2, r7
 8022346:	fb08 f303 	mul.w	r3, r8, r3
 802234a:	f003 0707 	and.w	r7, r3, #7
 802234e:	eb01 03d3 	add.w	r3, r1, r3, lsr #3
 8022352:	9328      	str	r3, [sp, #160]	; 0xa0
 8022354:	eba9 0302 	sub.w	r3, r9, r2
 8022358:	930d      	str	r3, [sp, #52]	; 0x34
 802235a:	4651      	mov	r1, sl
 802235c:	980e      	ldr	r0, [sp, #56]	; 0x38
 802235e:	f7ff ff05 	bl	802216c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 8022362:	4651      	mov	r1, sl
 8022364:	4681      	mov	r9, r0
 8022366:	980e      	ldr	r0, [sp, #56]	; 0x38
 8022368:	f7ff ff30 	bl	80221cc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 802236c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802236e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022370:	4683      	mov	fp, r0
 8022372:	eba3 0a02 	sub.w	sl, r3, r2
 8022376:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022378:	459a      	cmp	sl, r3
 802237a:	bfa8      	it	ge
 802237c:	469a      	movge	sl, r3
 802237e:	f1ba 0f00 	cmp.w	sl, #0
 8022382:	f340 811b 	ble.w	80225bc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8022386:	1bad      	subs	r5, r5, r6
 8022388:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802238a:	1b5d      	subs	r5, r3, r5
 802238c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802238e:	429d      	cmp	r5, r3
 8022390:	bfd4      	ite	le
 8022392:	ebc6 0605 	rsble	r6, r6, r5
 8022396:	ebc6 0603 	rsbgt	r6, r6, r3
 802239a:	2e00      	cmp	r6, #0
 802239c:	f340 810e 	ble.w	80225bc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 80223a0:	1ba4      	subs	r4, r4, r6
 80223a2:	fb08 f304 	mul.w	r3, r8, r4
 80223a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80223a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80223aa:	2b00      	cmp	r3, #0
 80223ac:	f040 810b 	bne.w	80225c6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 80223b0:	4b88      	ldr	r3, [pc, #544]	; (80225d4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 80223b2:	6818      	ldr	r0, [r3, #0]
 80223b4:	6803      	ldr	r3, [r0, #0]
 80223b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80223b8:	4798      	blx	r3
 80223ba:	2301      	movs	r3, #1
 80223bc:	4a86      	ldr	r2, [pc, #536]	; (80225d8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 80223be:	fa03 f308 	lsl.w	r3, r3, r8
 80223c2:	8811      	ldrh	r1, [r2, #0]
 80223c4:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 80223c8:	3b01      	subs	r3, #1
 80223ca:	b2db      	uxtb	r3, r3
 80223cc:	930e      	str	r3, [sp, #56]	; 0x38
 80223ce:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 80223d2:	fb01 2303 	mla	r3, r1, r3, r2
 80223d6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80223da:	930a      	str	r3, [sp, #40]	; 0x28
 80223dc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80223de:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80223e2:	9313      	str	r3, [sp, #76]	; 0x4c
 80223e4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80223e6:	0a19      	lsrs	r1, r3, #8
 80223e8:	b2cb      	uxtb	r3, r1
 80223ea:	9312      	str	r3, [sp, #72]	; 0x48
 80223ec:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80223ee:	b2db      	uxtb	r3, r3
 80223f0:	9311      	str	r3, [sp, #68]	; 0x44
 80223f2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80223f4:	095a      	lsrs	r2, r3, #5
 80223f6:	4b79      	ldr	r3, [pc, #484]	; (80225dc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>)
 80223f8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80223fc:	400b      	ands	r3, r1
 80223fe:	4313      	orrs	r3, r2
 8022400:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8022402:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8022406:	4313      	orrs	r3, r2
 8022408:	b29b      	uxth	r3, r3
 802240a:	9310      	str	r3, [sp, #64]	; 0x40
 802240c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802240e:	781a      	ldrb	r2, [r3, #0]
 8022410:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8022414:	fb06 b919 	mls	r9, r6, r9, fp
 8022418:	413a      	asrs	r2, r7
 802241a:	fb03 fb06 	mul.w	fp, r3, r6
 802241e:	930d      	str	r3, [sp, #52]	; 0x34
 8022420:	b2d2      	uxtb	r2, r2
 8022422:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 8022426:	f11a 3aff 	adds.w	sl, sl, #4294967295
 802242a:	f0c0 80ea 	bcc.w	8022602 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d6>
 802242e:	46b6      	mov	lr, r6
 8022430:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8022434:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8022438:	f0c0 80d2 	bcc.w	80225e0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b4>
 802243c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802243e:	4013      	ands	r3, r2
 8022440:	d055      	beq.n	80224ee <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c2>
 8022442:	20ff      	movs	r0, #255	; 0xff
 8022444:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022446:	fb90 f1f1 	sdiv	r1, r0, r1
 802244a:	434b      	muls	r3, r1
 802244c:	2bfe      	cmp	r3, #254	; 0xfe
 802244e:	dd03      	ble.n	8022458 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x22c>
 8022450:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022452:	4281      	cmp	r1, r0
 8022454:	f000 80b9 	beq.w	80225ca <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8022458:	990c      	ldr	r1, [sp, #48]	; 0x30
 802245a:	f8bc 4000 	ldrh.w	r4, [ip]
 802245e:	fb11 f303 	smulbb	r3, r1, r3
 8022462:	1220      	asrs	r0, r4, #8
 8022464:	b29b      	uxth	r3, r3
 8022466:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802246a:	1c59      	adds	r1, r3, #1
 802246c:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8022470:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8022474:	10e1      	asrs	r1, r4, #3
 8022476:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802247a:	00e4      	lsls	r4, r4, #3
 802247c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8022480:	b29d      	uxth	r5, r3
 8022482:	43db      	mvns	r3, r3
 8022484:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 8022488:	b2db      	uxtb	r3, r3
 802248a:	b2e4      	uxtb	r4, r4
 802248c:	9309      	str	r3, [sp, #36]	; 0x24
 802248e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022490:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8022494:	fb13 f905 	smulbb	r9, r3, r5
 8022498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802249a:	fb00 9003 	mla	r0, r0, r3, r9
 802249e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80224a0:	fb13 f905 	smulbb	r9, r3, r5
 80224a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80224a6:	b280      	uxth	r0, r0
 80224a8:	fb01 9103 	mla	r1, r1, r3, r9
 80224ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80224ae:	fb13 f505 	smulbb	r5, r3, r5
 80224b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80224b4:	b289      	uxth	r1, r1
 80224b6:	fb04 5403 	mla	r4, r4, r3, r5
 80224ba:	1c43      	adds	r3, r0, #1
 80224bc:	b2a4      	uxth	r4, r4
 80224be:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80224c2:	f104 0901 	add.w	r9, r4, #1
 80224c6:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80224ca:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 80224ce:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 80224d2:	ea49 0000 	orr.w	r0, r9, r0
 80224d6:	f101 0901 	add.w	r9, r1, #1
 80224da:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 80224de:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80224e2:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80224e6:	ea40 0009 	orr.w	r0, r0, r9
 80224ea:	f8ac 0000 	strh.w	r0, [ip]
 80224ee:	4447      	add	r7, r8
 80224f0:	b2bf      	uxth	r7, r7
 80224f2:	2f07      	cmp	r7, #7
 80224f4:	bf89      	itett	hi
 80224f6:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 80224f8:	fa42 f208 	asrls.w	r2, r2, r8
 80224fc:	2700      	movhi	r7, #0
 80224fe:	785a      	ldrbhi	r2, [r3, #1]
 8022500:	bf8a      	itet	hi
 8022502:	3301      	addhi	r3, #1
 8022504:	b2d2      	uxtbls	r2, r2
 8022506:	9328      	strhi	r3, [sp, #160]	; 0xa0
 8022508:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802250a:	449c      	add	ip, r3
 802250c:	e792      	b.n	8022434 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x208>
 802250e:	441d      	add	r5, r3
 8022510:	b22d      	sxth	r5, r5
 8022512:	e6c9      	b.n	80222a8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7c>
 8022514:	f1ba 0f01 	cmp.w	sl, #1
 8022518:	f47f af02 	bne.w	8022320 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 802251c:	f1bb 0f01 	cmp.w	fp, #1
 8022520:	f47f aefe 	bne.w	8022320 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8022524:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80225d4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>
 8022528:	f8db 0000 	ldr.w	r0, [fp]
 802252c:	6803      	ldr	r3, [r0, #0]
 802252e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022530:	4798      	blx	r3
 8022532:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 8022536:	465a      	mov	r2, fp
 8022538:	d006      	beq.n	8022548 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31c>
 802253a:	f1b8 0f04 	cmp.w	r8, #4
 802253e:	d140      	bne.n	80225c2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 8022540:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022542:	3300      	adds	r3, #0
 8022544:	bf18      	it	ne
 8022546:	2301      	movne	r3, #1
 8022548:	0580      	lsls	r0, r0, #22
 802254a:	d563      	bpl.n	8022614 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e8>
 802254c:	f1b8 0f08 	cmp.w	r8, #8
 8022550:	d160      	bne.n	8022614 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e8>
 8022552:	2b00      	cmp	r3, #0
 8022554:	bf0c      	ite	eq
 8022556:	f44f 7100 	moveq.w	r1, #512	; 0x200
 802255a:	f44f 7180 	movne.w	r1, #256	; 0x100
 802255e:	2e00      	cmp	r6, #0
 8022560:	f47f aede 	bne.w	8022320 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8022564:	2f00      	cmp	r7, #0
 8022566:	f47f aedb 	bne.w	8022320 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 802256a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802256c:	9810      	ldr	r0, [sp, #64]	; 0x40
 802256e:	18eb      	adds	r3, r5, r3
 8022570:	4283      	cmp	r3, r0
 8022572:	f73f aed5 	bgt.w	8022320 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8022576:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022578:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802257a:	444b      	add	r3, r9
 802257c:	4283      	cmp	r3, r0
 802257e:	f73f aecf 	bgt.w	8022320 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8022582:	f1b8 0f08 	cmp.w	r8, #8
 8022586:	6810      	ldr	r0, [r2, #0]
 8022588:	f04f 0600 	mov.w	r6, #0
 802258c:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 8022590:	bf18      	it	ne
 8022592:	3401      	addne	r4, #1
 8022594:	6805      	ldr	r5, [r0, #0]
 8022596:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 802259a:	bf18      	it	ne
 802259c:	f024 0401 	bicne.w	r4, r4, #1
 80225a0:	e9cd 1605 	strd	r1, r6, [sp, #20]
 80225a4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80225a6:	bf18      	it	ne
 80225a8:	b2a4      	uxthne	r4, r4
 80225aa:	9104      	str	r1, [sp, #16]
 80225ac:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80225ae:	e9cd 4900 	strd	r4, r9, [sp]
 80225b2:	e9cd 4102 	strd	r4, r1, [sp, #8]
 80225b6:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80225b8:	6d6c      	ldr	r4, [r5, #84]	; 0x54
 80225ba:	47a0      	blx	r4
 80225bc:	b019      	add	sp, #100	; 0x64
 80225be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80225c2:	2300      	movs	r3, #0
 80225c4:	e7c0      	b.n	8022548 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31c>
 80225c6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80225c8:	e6f7      	b.n	80223ba <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x18e>
 80225ca:	9810      	ldr	r0, [sp, #64]	; 0x40
 80225cc:	e78d      	b.n	80224ea <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2be>
 80225ce:	bf00      	nop
 80225d0:	2400b5c8 	.word	0x2400b5c8
 80225d4:	2400b5d0 	.word	0x2400b5d0
 80225d8:	2400b5ca 	.word	0x2400b5ca
 80225dc:	00fff800 	.word	0x00fff800
 80225e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80225e2:	b153      	cbz	r3, 80225fa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ce>
 80225e4:	441f      	add	r7, r3
 80225e6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80225e8:	b2bf      	uxth	r7, r7
 80225ea:	eb03 03d7 	add.w	r3, r3, r7, lsr #3
 80225ee:	f007 0707 	and.w	r7, r7, #7
 80225f2:	781a      	ldrb	r2, [r3, #0]
 80225f4:	9328      	str	r3, [sp, #160]	; 0xa0
 80225f6:	413a      	asrs	r2, r7
 80225f8:	b2d2      	uxtb	r2, r2
 80225fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80225fc:	445b      	add	r3, fp
 80225fe:	930a      	str	r3, [sp, #40]	; 0x28
 8022600:	e711      	b.n	8022426 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1fa>
 8022602:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022604:	2b00      	cmp	r3, #0
 8022606:	d1d9      	bne.n	80225bc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8022608:	4b05      	ldr	r3, [pc, #20]	; (8022620 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f4>)
 802260a:	6818      	ldr	r0, [r3, #0]
 802260c:	6803      	ldr	r3, [r0, #0]
 802260e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022610:	4798      	blx	r3
 8022612:	e7d3      	b.n	80225bc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8022614:	2b00      	cmp	r3, #0
 8022616:	f43f ae83 	beq.w	8022320 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 802261a:	f44f 7180 	mov.w	r1, #256	; 0x100
 802261e:	e79e      	b.n	802255e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 8022620:	2400b5d0 	.word	0x2400b5d0

08022624 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 8022624:	b538      	push	{r3, r4, r5, lr}
 8022626:	4c15      	ldr	r4, [pc, #84]	; (802267c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 8022628:	4605      	mov	r5, r0
 802262a:	7823      	ldrb	r3, [r4, #0]
 802262c:	f3bf 8f5b 	dmb	ish
 8022630:	07da      	lsls	r2, r3, #31
 8022632:	d40b      	bmi.n	802264c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8022634:	4620      	mov	r0, r4
 8022636:	f007 fca8 	bl	8029f8a <__cxa_guard_acquire>
 802263a:	b138      	cbz	r0, 802264c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 802263c:	4620      	mov	r0, r4
 802263e:	f007 fcb0 	bl	8029fa2 <__cxa_guard_release>
 8022642:	4a0f      	ldr	r2, [pc, #60]	; (8022680 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8022644:	490f      	ldr	r1, [pc, #60]	; (8022684 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 8022646:	4810      	ldr	r0, [pc, #64]	; (8022688 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8022648:	f007 fc98 	bl	8029f7c <__aeabi_atexit>
 802264c:	4c0f      	ldr	r4, [pc, #60]	; (802268c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 802264e:	7823      	ldrb	r3, [r4, #0]
 8022650:	f3bf 8f5b 	dmb	ish
 8022654:	07db      	lsls	r3, r3, #31
 8022656:	d40b      	bmi.n	8022670 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8022658:	4620      	mov	r0, r4
 802265a:	f007 fc96 	bl	8029f8a <__cxa_guard_acquire>
 802265e:	b138      	cbz	r0, 8022670 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8022660:	4620      	mov	r0, r4
 8022662:	f007 fc9e 	bl	8029fa2 <__cxa_guard_release>
 8022666:	4a06      	ldr	r2, [pc, #24]	; (8022680 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8022668:	4909      	ldr	r1, [pc, #36]	; (8022690 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 802266a:	480a      	ldr	r0, [pc, #40]	; (8022694 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 802266c:	f007 fc86 	bl	8029f7c <__aeabi_atexit>
 8022670:	4b05      	ldr	r3, [pc, #20]	; (8022688 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8022672:	612b      	str	r3, [r5, #16]
 8022674:	4b07      	ldr	r3, [pc, #28]	; (8022694 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8022676:	616b      	str	r3, [r5, #20]
 8022678:	bd38      	pop	{r3, r4, r5, pc}
 802267a:	bf00      	nop
 802267c:	2400b69c 	.word	0x2400b69c
 8022680:	24000000 	.word	0x24000000
 8022684:	08020823 	.word	0x08020823
 8022688:	24000098 	.word	0x24000098
 802268c:	2400b6a0 	.word	0x2400b6a0
 8022690:	08020821 	.word	0x08020821
 8022694:	2400009c 	.word	0x2400009c

08022698 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 8022698:	b538      	push	{r3, r4, r5, lr}
 802269a:	4c15      	ldr	r4, [pc, #84]	; (80226f0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 802269c:	4605      	mov	r5, r0
 802269e:	7823      	ldrb	r3, [r4, #0]
 80226a0:	f3bf 8f5b 	dmb	ish
 80226a4:	07da      	lsls	r2, r3, #31
 80226a6:	d40b      	bmi.n	80226c0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 80226a8:	4620      	mov	r0, r4
 80226aa:	f007 fc6e 	bl	8029f8a <__cxa_guard_acquire>
 80226ae:	b138      	cbz	r0, 80226c0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 80226b0:	4620      	mov	r0, r4
 80226b2:	f007 fc76 	bl	8029fa2 <__cxa_guard_release>
 80226b6:	4a0f      	ldr	r2, [pc, #60]	; (80226f4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 80226b8:	490f      	ldr	r1, [pc, #60]	; (80226f8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 80226ba:	4810      	ldr	r0, [pc, #64]	; (80226fc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 80226bc:	f007 fc5e 	bl	8029f7c <__aeabi_atexit>
 80226c0:	4c0f      	ldr	r4, [pc, #60]	; (8022700 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 80226c2:	7823      	ldrb	r3, [r4, #0]
 80226c4:	f3bf 8f5b 	dmb	ish
 80226c8:	07db      	lsls	r3, r3, #31
 80226ca:	d40b      	bmi.n	80226e4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 80226cc:	4620      	mov	r0, r4
 80226ce:	f007 fc5c 	bl	8029f8a <__cxa_guard_acquire>
 80226d2:	b138      	cbz	r0, 80226e4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 80226d4:	4620      	mov	r0, r4
 80226d6:	f007 fc64 	bl	8029fa2 <__cxa_guard_release>
 80226da:	4a06      	ldr	r2, [pc, #24]	; (80226f4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 80226dc:	4909      	ldr	r1, [pc, #36]	; (8022704 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 80226de:	480a      	ldr	r0, [pc, #40]	; (8022708 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 80226e0:	f007 fc4c 	bl	8029f7c <__aeabi_atexit>
 80226e4:	4b05      	ldr	r3, [pc, #20]	; (80226fc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 80226e6:	60ab      	str	r3, [r5, #8]
 80226e8:	4b07      	ldr	r3, [pc, #28]	; (8022708 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 80226ea:	60eb      	str	r3, [r5, #12]
 80226ec:	bd38      	pop	{r3, r4, r5, pc}
 80226ee:	bf00      	nop
 80226f0:	2400b674 	.word	0x2400b674
 80226f4:	24000000 	.word	0x24000000
 80226f8:	08020827 	.word	0x08020827
 80226fc:	24000070 	.word	0x24000070
 8022700:	2400b678 	.word	0x2400b678
 8022704:	08020825 	.word	0x08020825
 8022708:	24000074 	.word	0x24000074

0802270c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 802270c:	b510      	push	{r4, lr}
 802270e:	4604      	mov	r4, r0
 8022710:	f7ff ff88 	bl	8022624 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 8022714:	4620      	mov	r0, r4
 8022716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802271a:	f7ff bfbd 	b.w	8022698 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

08022720 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8022720:	b538      	push	{r3, r4, r5, lr}
 8022722:	4c15      	ldr	r4, [pc, #84]	; (8022778 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8022724:	4605      	mov	r5, r0
 8022726:	7823      	ldrb	r3, [r4, #0]
 8022728:	f3bf 8f5b 	dmb	ish
 802272c:	07da      	lsls	r2, r3, #31
 802272e:	d40b      	bmi.n	8022748 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8022730:	4620      	mov	r0, r4
 8022732:	f007 fc2a 	bl	8029f8a <__cxa_guard_acquire>
 8022736:	b138      	cbz	r0, 8022748 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8022738:	4620      	mov	r0, r4
 802273a:	f007 fc32 	bl	8029fa2 <__cxa_guard_release>
 802273e:	4a0f      	ldr	r2, [pc, #60]	; (802277c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8022740:	490f      	ldr	r1, [pc, #60]	; (8022780 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8022742:	4810      	ldr	r0, [pc, #64]	; (8022784 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8022744:	f007 fc1a 	bl	8029f7c <__aeabi_atexit>
 8022748:	4c0f      	ldr	r4, [pc, #60]	; (8022788 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 802274a:	7823      	ldrb	r3, [r4, #0]
 802274c:	f3bf 8f5b 	dmb	ish
 8022750:	07db      	lsls	r3, r3, #31
 8022752:	d40b      	bmi.n	802276c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8022754:	4620      	mov	r0, r4
 8022756:	f007 fc18 	bl	8029f8a <__cxa_guard_acquire>
 802275a:	b138      	cbz	r0, 802276c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 802275c:	4620      	mov	r0, r4
 802275e:	f007 fc20 	bl	8029fa2 <__cxa_guard_release>
 8022762:	4a06      	ldr	r2, [pc, #24]	; (802277c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8022764:	4909      	ldr	r1, [pc, #36]	; (802278c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8022766:	480a      	ldr	r0, [pc, #40]	; (8022790 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8022768:	f007 fc08 	bl	8029f7c <__aeabi_atexit>
 802276c:	4b05      	ldr	r3, [pc, #20]	; (8022784 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 802276e:	622b      	str	r3, [r5, #32]
 8022770:	4b07      	ldr	r3, [pc, #28]	; (8022790 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8022772:	626b      	str	r3, [r5, #36]	; 0x24
 8022774:	bd38      	pop	{r3, r4, r5, pc}
 8022776:	bf00      	nop
 8022778:	2400b6a4 	.word	0x2400b6a4
 802277c:	24000000 	.word	0x24000000
 8022780:	0802081b 	.word	0x0802081b
 8022784:	240000a0 	.word	0x240000a0
 8022788:	2400b6a8 	.word	0x2400b6a8
 802278c:	08020819 	.word	0x08020819
 8022790:	240000a4 	.word	0x240000a4

08022794 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8022794:	b538      	push	{r3, r4, r5, lr}
 8022796:	4c15      	ldr	r4, [pc, #84]	; (80227ec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8022798:	4605      	mov	r5, r0
 802279a:	7823      	ldrb	r3, [r4, #0]
 802279c:	f3bf 8f5b 	dmb	ish
 80227a0:	07da      	lsls	r2, r3, #31
 80227a2:	d40b      	bmi.n	80227bc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80227a4:	4620      	mov	r0, r4
 80227a6:	f007 fbf0 	bl	8029f8a <__cxa_guard_acquire>
 80227aa:	b138      	cbz	r0, 80227bc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80227ac:	4620      	mov	r0, r4
 80227ae:	f007 fbf8 	bl	8029fa2 <__cxa_guard_release>
 80227b2:	4a0f      	ldr	r2, [pc, #60]	; (80227f0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80227b4:	490f      	ldr	r1, [pc, #60]	; (80227f4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 80227b6:	4810      	ldr	r0, [pc, #64]	; (80227f8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80227b8:	f007 fbe0 	bl	8029f7c <__aeabi_atexit>
 80227bc:	4c0f      	ldr	r4, [pc, #60]	; (80227fc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 80227be:	7823      	ldrb	r3, [r4, #0]
 80227c0:	f3bf 8f5b 	dmb	ish
 80227c4:	07db      	lsls	r3, r3, #31
 80227c6:	d40b      	bmi.n	80227e0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80227c8:	4620      	mov	r0, r4
 80227ca:	f007 fbde 	bl	8029f8a <__cxa_guard_acquire>
 80227ce:	b138      	cbz	r0, 80227e0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80227d0:	4620      	mov	r0, r4
 80227d2:	f007 fbe6 	bl	8029fa2 <__cxa_guard_release>
 80227d6:	4a06      	ldr	r2, [pc, #24]	; (80227f0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80227d8:	4909      	ldr	r1, [pc, #36]	; (8022800 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 80227da:	480a      	ldr	r0, [pc, #40]	; (8022804 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80227dc:	f007 fbce 	bl	8029f7c <__aeabi_atexit>
 80227e0:	4b05      	ldr	r3, [pc, #20]	; (80227f8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80227e2:	61ab      	str	r3, [r5, #24]
 80227e4:	4b07      	ldr	r3, [pc, #28]	; (8022804 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80227e6:	61eb      	str	r3, [r5, #28]
 80227e8:	bd38      	pop	{r3, r4, r5, pc}
 80227ea:	bf00      	nop
 80227ec:	2400b67c 	.word	0x2400b67c
 80227f0:	24000000 	.word	0x24000000
 80227f4:	0802081f 	.word	0x0802081f
 80227f8:	24000078 	.word	0x24000078
 80227fc:	2400b680 	.word	0x2400b680
 8022800:	0802081d 	.word	0x0802081d
 8022804:	2400007c 	.word	0x2400007c

08022808 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 8022808:	b510      	push	{r4, lr}
 802280a:	4604      	mov	r4, r0
 802280c:	f7ff ff88 	bl	8022720 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8022810:	4620      	mov	r0, r4
 8022812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022816:	f7ff bfbd 	b.w	8022794 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0802281c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 802281c:	b538      	push	{r3, r4, r5, lr}
 802281e:	4c15      	ldr	r4, [pc, #84]	; (8022874 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8022820:	4605      	mov	r5, r0
 8022822:	7823      	ldrb	r3, [r4, #0]
 8022824:	f3bf 8f5b 	dmb	ish
 8022828:	07da      	lsls	r2, r3, #31
 802282a:	d40b      	bmi.n	8022844 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 802282c:	4620      	mov	r0, r4
 802282e:	f007 fbac 	bl	8029f8a <__cxa_guard_acquire>
 8022832:	b138      	cbz	r0, 8022844 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8022834:	4620      	mov	r0, r4
 8022836:	f007 fbb4 	bl	8029fa2 <__cxa_guard_release>
 802283a:	4a0f      	ldr	r2, [pc, #60]	; (8022878 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 802283c:	490f      	ldr	r1, [pc, #60]	; (802287c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 802283e:	4810      	ldr	r0, [pc, #64]	; (8022880 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8022840:	f007 fb9c 	bl	8029f7c <__aeabi_atexit>
 8022844:	4c0f      	ldr	r4, [pc, #60]	; (8022884 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8022846:	7823      	ldrb	r3, [r4, #0]
 8022848:	f3bf 8f5b 	dmb	ish
 802284c:	07db      	lsls	r3, r3, #31
 802284e:	d40b      	bmi.n	8022868 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8022850:	4620      	mov	r0, r4
 8022852:	f007 fb9a 	bl	8029f8a <__cxa_guard_acquire>
 8022856:	b138      	cbz	r0, 8022868 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8022858:	4620      	mov	r0, r4
 802285a:	f007 fba2 	bl	8029fa2 <__cxa_guard_release>
 802285e:	4a06      	ldr	r2, [pc, #24]	; (8022878 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8022860:	4909      	ldr	r1, [pc, #36]	; (8022888 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8022862:	480a      	ldr	r0, [pc, #40]	; (802288c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8022864:	f007 fb8a 	bl	8029f7c <__aeabi_atexit>
 8022868:	4b05      	ldr	r3, [pc, #20]	; (8022880 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 802286a:	632b      	str	r3, [r5, #48]	; 0x30
 802286c:	4b07      	ldr	r3, [pc, #28]	; (802288c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 802286e:	636b      	str	r3, [r5, #52]	; 0x34
 8022870:	bd38      	pop	{r3, r4, r5, pc}
 8022872:	bf00      	nop
 8022874:	2400b6b4 	.word	0x2400b6b4
 8022878:	24000000 	.word	0x24000000
 802287c:	08020813 	.word	0x08020813
 8022880:	240000b0 	.word	0x240000b0
 8022884:	2400b6b8 	.word	0x2400b6b8
 8022888:	08020811 	.word	0x08020811
 802288c:	240000b4 	.word	0x240000b4

08022890 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8022890:	b538      	push	{r3, r4, r5, lr}
 8022892:	4c15      	ldr	r4, [pc, #84]	; (80228e8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8022894:	4605      	mov	r5, r0
 8022896:	7823      	ldrb	r3, [r4, #0]
 8022898:	f3bf 8f5b 	dmb	ish
 802289c:	07da      	lsls	r2, r3, #31
 802289e:	d40b      	bmi.n	80228b8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 80228a0:	4620      	mov	r0, r4
 80228a2:	f007 fb72 	bl	8029f8a <__cxa_guard_acquire>
 80228a6:	b138      	cbz	r0, 80228b8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 80228a8:	4620      	mov	r0, r4
 80228aa:	f007 fb7a 	bl	8029fa2 <__cxa_guard_release>
 80228ae:	4a0f      	ldr	r2, [pc, #60]	; (80228ec <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80228b0:	490f      	ldr	r1, [pc, #60]	; (80228f0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 80228b2:	4810      	ldr	r0, [pc, #64]	; (80228f4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80228b4:	f007 fb62 	bl	8029f7c <__aeabi_atexit>
 80228b8:	4c0f      	ldr	r4, [pc, #60]	; (80228f8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 80228ba:	7823      	ldrb	r3, [r4, #0]
 80228bc:	f3bf 8f5b 	dmb	ish
 80228c0:	07db      	lsls	r3, r3, #31
 80228c2:	d40b      	bmi.n	80228dc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 80228c4:	4620      	mov	r0, r4
 80228c6:	f007 fb60 	bl	8029f8a <__cxa_guard_acquire>
 80228ca:	b138      	cbz	r0, 80228dc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 80228cc:	4620      	mov	r0, r4
 80228ce:	f007 fb68 	bl	8029fa2 <__cxa_guard_release>
 80228d2:	4a06      	ldr	r2, [pc, #24]	; (80228ec <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80228d4:	4909      	ldr	r1, [pc, #36]	; (80228fc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 80228d6:	480a      	ldr	r0, [pc, #40]	; (8022900 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80228d8:	f007 fb50 	bl	8029f7c <__aeabi_atexit>
 80228dc:	4b05      	ldr	r3, [pc, #20]	; (80228f4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80228de:	62ab      	str	r3, [r5, #40]	; 0x28
 80228e0:	4b07      	ldr	r3, [pc, #28]	; (8022900 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80228e2:	62eb      	str	r3, [r5, #44]	; 0x2c
 80228e4:	bd38      	pop	{r3, r4, r5, pc}
 80228e6:	bf00      	nop
 80228e8:	2400b684 	.word	0x2400b684
 80228ec:	24000000 	.word	0x24000000
 80228f0:	08020817 	.word	0x08020817
 80228f4:	24000080 	.word	0x24000080
 80228f8:	2400b688 	.word	0x2400b688
 80228fc:	08020815 	.word	0x08020815
 8022900:	24000084 	.word	0x24000084

08022904 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 8022904:	b510      	push	{r4, lr}
 8022906:	4604      	mov	r4, r0
 8022908:	f7ff ff88 	bl	802281c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 802290c:	4620      	mov	r0, r4
 802290e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022912:	f7ff bfbd 	b.w	8022890 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08022918 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 8022918:	b538      	push	{r3, r4, r5, lr}
 802291a:	4c15      	ldr	r4, [pc, #84]	; (8022970 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 802291c:	4605      	mov	r5, r0
 802291e:	7823      	ldrb	r3, [r4, #0]
 8022920:	f3bf 8f5b 	dmb	ish
 8022924:	07da      	lsls	r2, r3, #31
 8022926:	d40b      	bmi.n	8022940 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8022928:	4620      	mov	r0, r4
 802292a:	f007 fb2e 	bl	8029f8a <__cxa_guard_acquire>
 802292e:	b138      	cbz	r0, 8022940 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8022930:	4620      	mov	r0, r4
 8022932:	f007 fb36 	bl	8029fa2 <__cxa_guard_release>
 8022936:	4a0f      	ldr	r2, [pc, #60]	; (8022974 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8022938:	490f      	ldr	r1, [pc, #60]	; (8022978 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 802293a:	4810      	ldr	r0, [pc, #64]	; (802297c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 802293c:	f007 fb1e 	bl	8029f7c <__aeabi_atexit>
 8022940:	4c0f      	ldr	r4, [pc, #60]	; (8022980 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 8022942:	7823      	ldrb	r3, [r4, #0]
 8022944:	f3bf 8f5b 	dmb	ish
 8022948:	07db      	lsls	r3, r3, #31
 802294a:	d40b      	bmi.n	8022964 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 802294c:	4620      	mov	r0, r4
 802294e:	f007 fb1c 	bl	8029f8a <__cxa_guard_acquire>
 8022952:	b138      	cbz	r0, 8022964 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8022954:	4620      	mov	r0, r4
 8022956:	f007 fb24 	bl	8029fa2 <__cxa_guard_release>
 802295a:	4a06      	ldr	r2, [pc, #24]	; (8022974 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 802295c:	4909      	ldr	r1, [pc, #36]	; (8022984 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 802295e:	480a      	ldr	r0, [pc, #40]	; (8022988 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8022960:	f007 fb0c 	bl	8029f7c <__aeabi_atexit>
 8022964:	4b05      	ldr	r3, [pc, #20]	; (802297c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8022966:	652b      	str	r3, [r5, #80]	; 0x50
 8022968:	4b07      	ldr	r3, [pc, #28]	; (8022988 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 802296a:	656b      	str	r3, [r5, #84]	; 0x54
 802296c:	bd38      	pop	{r3, r4, r5, pc}
 802296e:	bf00      	nop
 8022970:	2400b6bc 	.word	0x2400b6bc
 8022974:	24000000 	.word	0x24000000
 8022978:	08020803 	.word	0x08020803
 802297c:	240000b8 	.word	0x240000b8
 8022980:	2400b6c0 	.word	0x2400b6c0
 8022984:	08020801 	.word	0x08020801
 8022988:	240000bc 	.word	0x240000bc

0802298c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 802298c:	b538      	push	{r3, r4, r5, lr}
 802298e:	4c15      	ldr	r4, [pc, #84]	; (80229e4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 8022990:	4605      	mov	r5, r0
 8022992:	7823      	ldrb	r3, [r4, #0]
 8022994:	f3bf 8f5b 	dmb	ish
 8022998:	07da      	lsls	r2, r3, #31
 802299a:	d40b      	bmi.n	80229b4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 802299c:	4620      	mov	r0, r4
 802299e:	f007 faf4 	bl	8029f8a <__cxa_guard_acquire>
 80229a2:	b138      	cbz	r0, 80229b4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 80229a4:	4620      	mov	r0, r4
 80229a6:	f007 fafc 	bl	8029fa2 <__cxa_guard_release>
 80229aa:	4a0f      	ldr	r2, [pc, #60]	; (80229e8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 80229ac:	490f      	ldr	r1, [pc, #60]	; (80229ec <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 80229ae:	4810      	ldr	r0, [pc, #64]	; (80229f0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 80229b0:	f007 fae4 	bl	8029f7c <__aeabi_atexit>
 80229b4:	4c0f      	ldr	r4, [pc, #60]	; (80229f4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 80229b6:	7823      	ldrb	r3, [r4, #0]
 80229b8:	f3bf 8f5b 	dmb	ish
 80229bc:	07db      	lsls	r3, r3, #31
 80229be:	d40b      	bmi.n	80229d8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 80229c0:	4620      	mov	r0, r4
 80229c2:	f007 fae2 	bl	8029f8a <__cxa_guard_acquire>
 80229c6:	b138      	cbz	r0, 80229d8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 80229c8:	4620      	mov	r0, r4
 80229ca:	f007 faea 	bl	8029fa2 <__cxa_guard_release>
 80229ce:	4a06      	ldr	r2, [pc, #24]	; (80229e8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 80229d0:	4909      	ldr	r1, [pc, #36]	; (80229f8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 80229d2:	480a      	ldr	r0, [pc, #40]	; (80229fc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 80229d4:	f007 fad2 	bl	8029f7c <__aeabi_atexit>
 80229d8:	4b05      	ldr	r3, [pc, #20]	; (80229f0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 80229da:	64ab      	str	r3, [r5, #72]	; 0x48
 80229dc:	4b07      	ldr	r3, [pc, #28]	; (80229fc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 80229de:	64eb      	str	r3, [r5, #76]	; 0x4c
 80229e0:	bd38      	pop	{r3, r4, r5, pc}
 80229e2:	bf00      	nop
 80229e4:	2400b6c4 	.word	0x2400b6c4
 80229e8:	24000000 	.word	0x24000000
 80229ec:	08020807 	.word	0x08020807
 80229f0:	240000c0 	.word	0x240000c0
 80229f4:	2400b6c8 	.word	0x2400b6c8
 80229f8:	08020805 	.word	0x08020805
 80229fc:	240000c4 	.word	0x240000c4

08022a00 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 8022a00:	b538      	push	{r3, r4, r5, lr}
 8022a02:	4c15      	ldr	r4, [pc, #84]	; (8022a58 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 8022a04:	4605      	mov	r5, r0
 8022a06:	7823      	ldrb	r3, [r4, #0]
 8022a08:	f3bf 8f5b 	dmb	ish
 8022a0c:	07da      	lsls	r2, r3, #31
 8022a0e:	d40b      	bmi.n	8022a28 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8022a10:	4620      	mov	r0, r4
 8022a12:	f007 faba 	bl	8029f8a <__cxa_guard_acquire>
 8022a16:	b138      	cbz	r0, 8022a28 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8022a18:	4620      	mov	r0, r4
 8022a1a:	f007 fac2 	bl	8029fa2 <__cxa_guard_release>
 8022a1e:	4a0f      	ldr	r2, [pc, #60]	; (8022a5c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8022a20:	490f      	ldr	r1, [pc, #60]	; (8022a60 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 8022a22:	4810      	ldr	r0, [pc, #64]	; (8022a64 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8022a24:	f007 faaa 	bl	8029f7c <__aeabi_atexit>
 8022a28:	4c0f      	ldr	r4, [pc, #60]	; (8022a68 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 8022a2a:	7823      	ldrb	r3, [r4, #0]
 8022a2c:	f3bf 8f5b 	dmb	ish
 8022a30:	07db      	lsls	r3, r3, #31
 8022a32:	d40b      	bmi.n	8022a4c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8022a34:	4620      	mov	r0, r4
 8022a36:	f007 faa8 	bl	8029f8a <__cxa_guard_acquire>
 8022a3a:	b138      	cbz	r0, 8022a4c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8022a3c:	4620      	mov	r0, r4
 8022a3e:	f007 fab0 	bl	8029fa2 <__cxa_guard_release>
 8022a42:	4a06      	ldr	r2, [pc, #24]	; (8022a5c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8022a44:	4909      	ldr	r1, [pc, #36]	; (8022a6c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 8022a46:	480a      	ldr	r0, [pc, #40]	; (8022a70 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8022a48:	f007 fa98 	bl	8029f7c <__aeabi_atexit>
 8022a4c:	4b05      	ldr	r3, [pc, #20]	; (8022a64 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8022a4e:	642b      	str	r3, [r5, #64]	; 0x40
 8022a50:	4b07      	ldr	r3, [pc, #28]	; (8022a70 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8022a52:	646b      	str	r3, [r5, #68]	; 0x44
 8022a54:	bd38      	pop	{r3, r4, r5, pc}
 8022a56:	bf00      	nop
 8022a58:	2400b68c 	.word	0x2400b68c
 8022a5c:	24000000 	.word	0x24000000
 8022a60:	0802080b 	.word	0x0802080b
 8022a64:	24000088 	.word	0x24000088
 8022a68:	2400b690 	.word	0x2400b690
 8022a6c:	08020809 	.word	0x08020809
 8022a70:	2400008c 	.word	0x2400008c

08022a74 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 8022a74:	b538      	push	{r3, r4, r5, lr}
 8022a76:	4c15      	ldr	r4, [pc, #84]	; (8022acc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 8022a78:	4605      	mov	r5, r0
 8022a7a:	7823      	ldrb	r3, [r4, #0]
 8022a7c:	f3bf 8f5b 	dmb	ish
 8022a80:	07da      	lsls	r2, r3, #31
 8022a82:	d40b      	bmi.n	8022a9c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8022a84:	4620      	mov	r0, r4
 8022a86:	f007 fa80 	bl	8029f8a <__cxa_guard_acquire>
 8022a8a:	b138      	cbz	r0, 8022a9c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8022a8c:	4620      	mov	r0, r4
 8022a8e:	f007 fa88 	bl	8029fa2 <__cxa_guard_release>
 8022a92:	4a0f      	ldr	r2, [pc, #60]	; (8022ad0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8022a94:	490f      	ldr	r1, [pc, #60]	; (8022ad4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 8022a96:	4810      	ldr	r0, [pc, #64]	; (8022ad8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8022a98:	f007 fa70 	bl	8029f7c <__aeabi_atexit>
 8022a9c:	4c0f      	ldr	r4, [pc, #60]	; (8022adc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 8022a9e:	7823      	ldrb	r3, [r4, #0]
 8022aa0:	f3bf 8f5b 	dmb	ish
 8022aa4:	07db      	lsls	r3, r3, #31
 8022aa6:	d40b      	bmi.n	8022ac0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8022aa8:	4620      	mov	r0, r4
 8022aaa:	f007 fa6e 	bl	8029f8a <__cxa_guard_acquire>
 8022aae:	b138      	cbz	r0, 8022ac0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8022ab0:	4620      	mov	r0, r4
 8022ab2:	f007 fa76 	bl	8029fa2 <__cxa_guard_release>
 8022ab6:	4a06      	ldr	r2, [pc, #24]	; (8022ad0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8022ab8:	4909      	ldr	r1, [pc, #36]	; (8022ae0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 8022aba:	480a      	ldr	r0, [pc, #40]	; (8022ae4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8022abc:	f007 fa5e 	bl	8029f7c <__aeabi_atexit>
 8022ac0:	4b05      	ldr	r3, [pc, #20]	; (8022ad8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8022ac2:	63ab      	str	r3, [r5, #56]	; 0x38
 8022ac4:	4b07      	ldr	r3, [pc, #28]	; (8022ae4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8022ac6:	63eb      	str	r3, [r5, #60]	; 0x3c
 8022ac8:	bd38      	pop	{r3, r4, r5, pc}
 8022aca:	bf00      	nop
 8022acc:	2400b6ac 	.word	0x2400b6ac
 8022ad0:	24000000 	.word	0x24000000
 8022ad4:	0802080f 	.word	0x0802080f
 8022ad8:	240000a8 	.word	0x240000a8
 8022adc:	2400b6b0 	.word	0x2400b6b0
 8022ae0:	0802080d 	.word	0x0802080d
 8022ae4:	240000ac 	.word	0x240000ac

08022ae8 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 8022ae8:	b510      	push	{r4, lr}
 8022aea:	4604      	mov	r4, r0
 8022aec:	f7ff ff14 	bl	8022918 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 8022af0:	4620      	mov	r0, r4
 8022af2:	f7ff ff85 	bl	8022a00 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 8022af6:	4620      	mov	r0, r4
 8022af8:	f7ff ff48 	bl	802298c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 8022afc:	4620      	mov	r0, r4
 8022afe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022b02:	f7ff bfb7 	b.w	8022a74 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

08022b08 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8022b08:	b538      	push	{r3, r4, r5, lr}
 8022b0a:	4c15      	ldr	r4, [pc, #84]	; (8022b60 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8022b0c:	4605      	mov	r5, r0
 8022b0e:	7823      	ldrb	r3, [r4, #0]
 8022b10:	f3bf 8f5b 	dmb	ish
 8022b14:	07da      	lsls	r2, r3, #31
 8022b16:	d40b      	bmi.n	8022b30 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8022b18:	4620      	mov	r0, r4
 8022b1a:	f007 fa36 	bl	8029f8a <__cxa_guard_acquire>
 8022b1e:	b138      	cbz	r0, 8022b30 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8022b20:	4620      	mov	r0, r4
 8022b22:	f007 fa3e 	bl	8029fa2 <__cxa_guard_release>
 8022b26:	4a0f      	ldr	r2, [pc, #60]	; (8022b64 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8022b28:	490f      	ldr	r1, [pc, #60]	; (8022b68 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8022b2a:	4810      	ldr	r0, [pc, #64]	; (8022b6c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8022b2c:	f007 fa26 	bl	8029f7c <__aeabi_atexit>
 8022b30:	4c0f      	ldr	r4, [pc, #60]	; (8022b70 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8022b32:	7823      	ldrb	r3, [r4, #0]
 8022b34:	f3bf 8f5b 	dmb	ish
 8022b38:	07db      	lsls	r3, r3, #31
 8022b3a:	d40b      	bmi.n	8022b54 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8022b3c:	4620      	mov	r0, r4
 8022b3e:	f007 fa24 	bl	8029f8a <__cxa_guard_acquire>
 8022b42:	b138      	cbz	r0, 8022b54 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8022b44:	4620      	mov	r0, r4
 8022b46:	f007 fa2c 	bl	8029fa2 <__cxa_guard_release>
 8022b4a:	4a06      	ldr	r2, [pc, #24]	; (8022b64 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8022b4c:	4909      	ldr	r1, [pc, #36]	; (8022b74 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8022b4e:	480a      	ldr	r0, [pc, #40]	; (8022b78 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8022b50:	f007 fa14 	bl	8029f7c <__aeabi_atexit>
 8022b54:	4b05      	ldr	r3, [pc, #20]	; (8022b6c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8022b56:	662b      	str	r3, [r5, #96]	; 0x60
 8022b58:	4b07      	ldr	r3, [pc, #28]	; (8022b78 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8022b5a:	666b      	str	r3, [r5, #100]	; 0x64
 8022b5c:	bd38      	pop	{r3, r4, r5, pc}
 8022b5e:	bf00      	nop
 8022b60:	2400b694 	.word	0x2400b694
 8022b64:	24000000 	.word	0x24000000
 8022b68:	080207fb 	.word	0x080207fb
 8022b6c:	24000090 	.word	0x24000090
 8022b70:	2400b698 	.word	0x2400b698
 8022b74:	080207f9 	.word	0x080207f9
 8022b78:	24000094 	.word	0x24000094

08022b7c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8022b7c:	b538      	push	{r3, r4, r5, lr}
 8022b7e:	4c15      	ldr	r4, [pc, #84]	; (8022bd4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8022b80:	4605      	mov	r5, r0
 8022b82:	7823      	ldrb	r3, [r4, #0]
 8022b84:	f3bf 8f5b 	dmb	ish
 8022b88:	07da      	lsls	r2, r3, #31
 8022b8a:	d40b      	bmi.n	8022ba4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8022b8c:	4620      	mov	r0, r4
 8022b8e:	f007 f9fc 	bl	8029f8a <__cxa_guard_acquire>
 8022b92:	b138      	cbz	r0, 8022ba4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8022b94:	4620      	mov	r0, r4
 8022b96:	f007 fa04 	bl	8029fa2 <__cxa_guard_release>
 8022b9a:	4a0f      	ldr	r2, [pc, #60]	; (8022bd8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8022b9c:	490f      	ldr	r1, [pc, #60]	; (8022bdc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8022b9e:	4810      	ldr	r0, [pc, #64]	; (8022be0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8022ba0:	f007 f9ec 	bl	8029f7c <__aeabi_atexit>
 8022ba4:	4c0f      	ldr	r4, [pc, #60]	; (8022be4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8022ba6:	7823      	ldrb	r3, [r4, #0]
 8022ba8:	f3bf 8f5b 	dmb	ish
 8022bac:	07db      	lsls	r3, r3, #31
 8022bae:	d40b      	bmi.n	8022bc8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8022bb0:	4620      	mov	r0, r4
 8022bb2:	f007 f9ea 	bl	8029f8a <__cxa_guard_acquire>
 8022bb6:	b138      	cbz	r0, 8022bc8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8022bb8:	4620      	mov	r0, r4
 8022bba:	f007 f9f2 	bl	8029fa2 <__cxa_guard_release>
 8022bbe:	4a06      	ldr	r2, [pc, #24]	; (8022bd8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8022bc0:	4909      	ldr	r1, [pc, #36]	; (8022be8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8022bc2:	480a      	ldr	r0, [pc, #40]	; (8022bec <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8022bc4:	f007 f9da 	bl	8029f7c <__aeabi_atexit>
 8022bc8:	4b05      	ldr	r3, [pc, #20]	; (8022be0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8022bca:	65ab      	str	r3, [r5, #88]	; 0x58
 8022bcc:	4b07      	ldr	r3, [pc, #28]	; (8022bec <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8022bce:	65eb      	str	r3, [r5, #92]	; 0x5c
 8022bd0:	bd38      	pop	{r3, r4, r5, pc}
 8022bd2:	bf00      	nop
 8022bd4:	2400b66c 	.word	0x2400b66c
 8022bd8:	24000000 	.word	0x24000000
 8022bdc:	080207ff 	.word	0x080207ff
 8022be0:	24000068 	.word	0x24000068
 8022be4:	2400b670 	.word	0x2400b670
 8022be8:	080207fd 	.word	0x080207fd
 8022bec:	2400006c 	.word	0x2400006c

08022bf0 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 8022bf0:	b510      	push	{r4, lr}
 8022bf2:	4604      	mov	r4, r0
 8022bf4:	f7ff ff88 	bl	8022b08 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8022bf8:	4620      	mov	r0, r4
 8022bfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022bfe:	f7ff bfbd 	b.w	8022b7c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08022c04 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8022c04:	b538      	push	{r3, r4, r5, lr}
 8022c06:	4c15      	ldr	r4, [pc, #84]	; (8022c5c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8022c08:	4605      	mov	r5, r0
 8022c0a:	7823      	ldrb	r3, [r4, #0]
 8022c0c:	f3bf 8f5b 	dmb	ish
 8022c10:	07da      	lsls	r2, r3, #31
 8022c12:	d40b      	bmi.n	8022c2c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8022c14:	4620      	mov	r0, r4
 8022c16:	f007 f9b8 	bl	8029f8a <__cxa_guard_acquire>
 8022c1a:	b138      	cbz	r0, 8022c2c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8022c1c:	4620      	mov	r0, r4
 8022c1e:	f007 f9c0 	bl	8029fa2 <__cxa_guard_release>
 8022c22:	4a0f      	ldr	r2, [pc, #60]	; (8022c60 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8022c24:	490f      	ldr	r1, [pc, #60]	; (8022c64 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8022c26:	4810      	ldr	r0, [pc, #64]	; (8022c68 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8022c28:	f007 f9a8 	bl	8029f7c <__aeabi_atexit>
 8022c2c:	4c0f      	ldr	r4, [pc, #60]	; (8022c6c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8022c2e:	7823      	ldrb	r3, [r4, #0]
 8022c30:	f3bf 8f5b 	dmb	ish
 8022c34:	07db      	lsls	r3, r3, #31
 8022c36:	d40b      	bmi.n	8022c50 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8022c38:	4620      	mov	r0, r4
 8022c3a:	f007 f9a6 	bl	8029f8a <__cxa_guard_acquire>
 8022c3e:	b138      	cbz	r0, 8022c50 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8022c40:	4620      	mov	r0, r4
 8022c42:	f007 f9ae 	bl	8029fa2 <__cxa_guard_release>
 8022c46:	4a06      	ldr	r2, [pc, #24]	; (8022c60 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8022c48:	4909      	ldr	r1, [pc, #36]	; (8022c70 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8022c4a:	480a      	ldr	r0, [pc, #40]	; (8022c74 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8022c4c:	f007 f996 	bl	8029f7c <__aeabi_atexit>
 8022c50:	4b05      	ldr	r3, [pc, #20]	; (8022c68 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8022c52:	672b      	str	r3, [r5, #112]	; 0x70
 8022c54:	4b07      	ldr	r3, [pc, #28]	; (8022c74 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8022c56:	676b      	str	r3, [r5, #116]	; 0x74
 8022c58:	bd38      	pop	{r3, r4, r5, pc}
 8022c5a:	bf00      	nop
 8022c5c:	2400b664 	.word	0x2400b664
 8022c60:	24000000 	.word	0x24000000
 8022c64:	080207f3 	.word	0x080207f3
 8022c68:	24000060 	.word	0x24000060
 8022c6c:	2400b668 	.word	0x2400b668
 8022c70:	080207f1 	.word	0x080207f1
 8022c74:	24000064 	.word	0x24000064

08022c78 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 8022c78:	b538      	push	{r3, r4, r5, lr}
 8022c7a:	4c15      	ldr	r4, [pc, #84]	; (8022cd0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8022c7c:	4605      	mov	r5, r0
 8022c7e:	7823      	ldrb	r3, [r4, #0]
 8022c80:	f3bf 8f5b 	dmb	ish
 8022c84:	07da      	lsls	r2, r3, #31
 8022c86:	d40b      	bmi.n	8022ca0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8022c88:	4620      	mov	r0, r4
 8022c8a:	f007 f97e 	bl	8029f8a <__cxa_guard_acquire>
 8022c8e:	b138      	cbz	r0, 8022ca0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8022c90:	4620      	mov	r0, r4
 8022c92:	f007 f986 	bl	8029fa2 <__cxa_guard_release>
 8022c96:	4a0f      	ldr	r2, [pc, #60]	; (8022cd4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8022c98:	490f      	ldr	r1, [pc, #60]	; (8022cd8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8022c9a:	4810      	ldr	r0, [pc, #64]	; (8022cdc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8022c9c:	f007 f96e 	bl	8029f7c <__aeabi_atexit>
 8022ca0:	4c0f      	ldr	r4, [pc, #60]	; (8022ce0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8022ca2:	7823      	ldrb	r3, [r4, #0]
 8022ca4:	f3bf 8f5b 	dmb	ish
 8022ca8:	07db      	lsls	r3, r3, #31
 8022caa:	d40b      	bmi.n	8022cc4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8022cac:	4620      	mov	r0, r4
 8022cae:	f007 f96c 	bl	8029f8a <__cxa_guard_acquire>
 8022cb2:	b138      	cbz	r0, 8022cc4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8022cb4:	4620      	mov	r0, r4
 8022cb6:	f007 f974 	bl	8029fa2 <__cxa_guard_release>
 8022cba:	4a06      	ldr	r2, [pc, #24]	; (8022cd4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8022cbc:	4909      	ldr	r1, [pc, #36]	; (8022ce4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8022cbe:	480a      	ldr	r0, [pc, #40]	; (8022ce8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8022cc0:	f007 f95c 	bl	8029f7c <__aeabi_atexit>
 8022cc4:	4b05      	ldr	r3, [pc, #20]	; (8022cdc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8022cc6:	66ab      	str	r3, [r5, #104]	; 0x68
 8022cc8:	4b07      	ldr	r3, [pc, #28]	; (8022ce8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8022cca:	66eb      	str	r3, [r5, #108]	; 0x6c
 8022ccc:	bd38      	pop	{r3, r4, r5, pc}
 8022cce:	bf00      	nop
 8022cd0:	2400b65c 	.word	0x2400b65c
 8022cd4:	24000000 	.word	0x24000000
 8022cd8:	080207f7 	.word	0x080207f7
 8022cdc:	24000058 	.word	0x24000058
 8022ce0:	2400b660 	.word	0x2400b660
 8022ce4:	080207f5 	.word	0x080207f5
 8022ce8:	2400005c 	.word	0x2400005c

08022cec <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 8022cec:	b510      	push	{r4, lr}
 8022cee:	4604      	mov	r4, r0
 8022cf0:	f7ff ff88 	bl	8022c04 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8022cf4:	4620      	mov	r0, r4
 8022cf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022cfa:	f7ff bfbd 	b.w	8022c78 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

08022cfe <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 8022cfe:	b510      	push	{r4, lr}
 8022d00:	4604      	mov	r4, r0
 8022d02:	f7ff fff3 	bl	8022cec <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 8022d06:	4620      	mov	r0, r4
 8022d08:	f7ff ff72 	bl	8022bf0 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 8022d0c:	4620      	mov	r0, r4
 8022d0e:	f7ff fdf9 	bl	8022904 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 8022d12:	4620      	mov	r0, r4
 8022d14:	f7ff fcfa 	bl	802270c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 8022d18:	4620      	mov	r0, r4
 8022d1a:	f7ff fd75 	bl	8022808 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 8022d1e:	4620      	mov	r0, r4
 8022d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022d24:	f7ff bee0 	b.w	8022ae8 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

08022d28 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 8022d28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d2c:	e9dd 4e0c 	ldrd	r4, lr, [sp, #48]	; 0x30
 8022d30:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8022d34:	f1be 0f00 	cmp.w	lr, #0
 8022d38:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 8022d3c:	fb0e 4708 	mla	r7, lr, r8, r4
 8022d40:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 8022d44:	f89d c03c 	ldrb.w	ip, [sp, #60]	; 0x3c
 8022d48:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8022d4c:	eb02 0a07 	add.w	sl, r2, r7
 8022d50:	8808      	ldrh	r0, [r1, #0]
 8022d52:	db37      	blt.n	8022dc4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 8022d54:	45f3      	cmp	fp, lr
 8022d56:	dd35      	ble.n	8022dc4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 8022d58:	2c00      	cmp	r4, #0
 8022d5a:	db31      	blt.n	8022dc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 8022d5c:	45a0      	cmp	r8, r4
 8022d5e:	dd2f      	ble.n	8022dc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 8022d60:	5dd2      	ldrb	r2, [r2, r7]
 8022d62:	f833 9012 	ldrh.w	r9, [r3, r2, lsl #1]
 8022d66:	1c62      	adds	r2, r4, #1
 8022d68:	d42f      	bmi.n	8022dca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8022d6a:	4590      	cmp	r8, r2
 8022d6c:	dd2d      	ble.n	8022dca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8022d6e:	b366      	cbz	r6, 8022dca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8022d70:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8022d74:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8022d78:	f11e 0e01 	adds.w	lr, lr, #1
 8022d7c:	d429      	bmi.n	8022dd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 8022d7e:	45f3      	cmp	fp, lr
 8022d80:	dd27      	ble.n	8022dd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 8022d82:	f1bc 0f00 	cmp.w	ip, #0
 8022d86:	f000 80a1 	beq.w	8022ecc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a4>
 8022d8a:	2c00      	cmp	r4, #0
 8022d8c:	db1f      	blt.n	8022dce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8022d8e:	45a0      	cmp	r8, r4
 8022d90:	dd1d      	ble.n	8022dce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8022d92:	f81a 2008 	ldrb.w	r2, [sl, r8]
 8022d96:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
 8022d9a:	3401      	adds	r4, #1
 8022d9c:	d41c      	bmi.n	8022dd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 8022d9e:	45a0      	cmp	r8, r4
 8022da0:	dd1a      	ble.n	8022dd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 8022da2:	b1de      	cbz	r6, 8022ddc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb4>
 8022da4:	44d0      	add	r8, sl
 8022da6:	f898 2001 	ldrb.w	r2, [r8, #1]
 8022daa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8022dae:	2e0f      	cmp	r6, #15
 8022db0:	d915      	bls.n	8022dde <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb6>
 8022db2:	4b49      	ldr	r3, [pc, #292]	; (8022ed8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b0>)
 8022db4:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8022db8:	4a48      	ldr	r2, [pc, #288]	; (8022edc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b4>)
 8022dba:	4849      	ldr	r0, [pc, #292]	; (8022ee0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b8>)
 8022dbc:	f007 f912 	bl	8029fe4 <__assert_func>
 8022dc0:	4681      	mov	r9, r0
 8022dc2:	e7d0      	b.n	8022d66 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x3e>
 8022dc4:	4607      	mov	r7, r0
 8022dc6:	4681      	mov	r9, r0
 8022dc8:	e7d6      	b.n	8022d78 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 8022dca:	4607      	mov	r7, r0
 8022dcc:	e7d4      	b.n	8022d78 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 8022dce:	4686      	mov	lr, r0
 8022dd0:	e7e3      	b.n	8022d9a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x72>
 8022dd2:	4603      	mov	r3, r0
 8022dd4:	4686      	mov	lr, r0
 8022dd6:	e7ea      	b.n	8022dae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 8022dd8:	4603      	mov	r3, r0
 8022dda:	e7e8      	b.n	8022dae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 8022ddc:	4603      	mov	r3, r0
 8022dde:	f1bc 0f0f 	cmp.w	ip, #15
 8022de2:	d8e6      	bhi.n	8022db2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 8022de4:	fb16 f80c 	smulbb	r8, r6, ip
 8022de8:	ea4f 4409 	mov.w	r4, r9, lsl #16
 8022dec:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8022df0:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8022df4:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8022df8:	ea4f 08e8 	mov.w	r8, r8, asr #3
 8022dfc:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022e00:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8022e04:	ea44 0909 	orr.w	r9, r4, r9
 8022e08:	f1cc 0410 	rsb	r4, ip, #16
 8022e0c:	041a      	lsls	r2, r3, #16
 8022e0e:	ea4a 0707 	orr.w	r7, sl, r7
 8022e12:	1ba4      	subs	r4, r4, r6
 8022e14:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 8022e18:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022e1c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022e20:	4377      	muls	r7, r6
 8022e22:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8022e26:	4313      	orrs	r3, r2
 8022e28:	ea4f 420e 	mov.w	r2, lr, lsl #16
 8022e2c:	fb04 7409 	mla	r4, r4, r9, r7
 8022e30:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 8022e34:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022e38:	b2af      	uxth	r7, r5
 8022e3a:	fb08 4303 	mla	r3, r8, r3, r4
 8022e3e:	f42e 64fc 	bic.w	r4, lr, #2016	; 0x7e0
 8022e42:	43ed      	mvns	r5, r5
 8022e44:	10c6      	asrs	r6, r0, #3
 8022e46:	4322      	orrs	r2, r4
 8022e48:	b2ed      	uxtb	r5, r5
 8022e4a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8022e4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8022e52:	fb16 f605 	smulbb	r6, r6, r5
 8022e56:	0d53      	lsrs	r3, r2, #21
 8022e58:	0952      	lsrs	r2, r2, #5
 8022e5a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022e5e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022e62:	431a      	orrs	r2, r3
 8022e64:	b293      	uxth	r3, r2
 8022e66:	1202      	asrs	r2, r0, #8
 8022e68:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8022e6c:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8022e70:	00dc      	lsls	r4, r3, #3
 8022e72:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8022e76:	fb12 f205 	smulbb	r2, r2, r5
 8022e7a:	b2e4      	uxtb	r4, r4
 8022e7c:	fb0c 2c07 	mla	ip, ip, r7, r2
 8022e80:	10da      	asrs	r2, r3, #3
 8022e82:	00c3      	lsls	r3, r0, #3
 8022e84:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8022e88:	fa1f fc8c 	uxth.w	ip, ip
 8022e8c:	b2db      	uxtb	r3, r3
 8022e8e:	fb02 6207 	mla	r2, r2, r7, r6
 8022e92:	fb13 f305 	smulbb	r3, r3, r5
 8022e96:	b296      	uxth	r6, r2
 8022e98:	fb04 3307 	mla	r3, r4, r7, r3
 8022e9c:	b29a      	uxth	r2, r3
 8022e9e:	f10c 0301 	add.w	r3, ip, #1
 8022ea2:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8022ea6:	1c53      	adds	r3, r2, #1
 8022ea8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022eac:	1c72      	adds	r2, r6, #1
 8022eae:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8022eb2:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 8022eb6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8022eba:	0952      	lsrs	r2, r2, #5
 8022ebc:	ea43 030c 	orr.w	r3, r3, ip
 8022ec0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022ec4:	4313      	orrs	r3, r2
 8022ec6:	800b      	strh	r3, [r1, #0]
 8022ec8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022ecc:	2e0f      	cmp	r6, #15
 8022ece:	f63f af70 	bhi.w	8022db2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 8022ed2:	4603      	mov	r3, r0
 8022ed4:	4686      	mov	lr, r0
 8022ed6:	e785      	b.n	8022de4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xbc>
 8022ed8:	0802f359 	.word	0x0802f359
 8022edc:	0802f9cf 	.word	0x0802f9cf
 8022ee0:	0802f3dd 	.word	0x0802f3dd

08022ee4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022ee8:	ed2d 8b08 	vpush	{d8-d11}
 8022eec:	b099      	sub	sp, #100	; 0x64
 8022eee:	eeb0 aa40 	vmov.f32	s20, s0
 8022ef2:	eef0 9a60 	vmov.f32	s19, s1
 8022ef6:	9215      	str	r2, [sp, #84]	; 0x54
 8022ef8:	eeb0 9a41 	vmov.f32	s18, s2
 8022efc:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8022efe:	eeb0 8a62 	vmov.f32	s16, s5
 8022f02:	9309      	str	r3, [sp, #36]	; 0x24
 8022f04:	eef0 8a43 	vmov.f32	s17, s6
 8022f08:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8022f0c:	eef0 ba44 	vmov.f32	s23, s8
 8022f10:	9016      	str	r0, [sp, #88]	; 0x58
 8022f12:	eeb0 ba64 	vmov.f32	s22, s9
 8022f16:	930d      	str	r3, [sp, #52]	; 0x34
 8022f18:	eef0 aa45 	vmov.f32	s21, s10
 8022f1c:	6850      	ldr	r0, [r2, #4]
 8022f1e:	910c      	str	r1, [sp, #48]	; 0x30
 8022f20:	6812      	ldr	r2, [r2, #0]
 8022f22:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8022f26:	e9dd a52b 	ldrd	sl, r5, [sp, #172]	; 0xac
 8022f2a:	fb00 1303 	mla	r3, r0, r3, r1
 8022f2e:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 8022f32:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022f34:	681b      	ldr	r3, [r3, #0]
 8022f36:	930b      	str	r3, [sp, #44]	; 0x2c
 8022f38:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022f3a:	685e      	ldr	r6, [r3, #4]
 8022f3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022f3e:	3604      	adds	r6, #4
 8022f40:	43db      	mvns	r3, r3
 8022f42:	b2db      	uxtb	r3, r3
 8022f44:	930a      	str	r3, [sp, #40]	; 0x28
 8022f46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022f48:	2b00      	cmp	r3, #0
 8022f4a:	dc03      	bgt.n	8022f54 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8022f4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022f4e:	2b00      	cmp	r3, #0
 8022f50:	f340 8225 	ble.w	802339e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ba>
 8022f54:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022f56:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022f5a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022f5e:	1e48      	subs	r0, r1, #1
 8022f60:	1e57      	subs	r7, r2, #1
 8022f62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022f64:	2b00      	cmp	r3, #0
 8022f66:	f340 80e3 	ble.w	8023130 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24c>
 8022f6a:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 8022f6e:	ea4f 4325 	mov.w	r3, r5, asr #16
 8022f72:	d406      	bmi.n	8022f82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8022f74:	4584      	cmp	ip, r0
 8022f76:	da04      	bge.n	8022f82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8022f78:	2b00      	cmp	r3, #0
 8022f7a:	db02      	blt.n	8022f82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8022f7c:	42bb      	cmp	r3, r7
 8022f7e:	f2c0 80d8 	blt.w	8023132 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8022f82:	f11c 0c01 	adds.w	ip, ip, #1
 8022f86:	f100 80c9 	bmi.w	802311c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8022f8a:	4561      	cmp	r1, ip
 8022f8c:	f2c0 80c6 	blt.w	802311c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8022f90:	3301      	adds	r3, #1
 8022f92:	f100 80c3 	bmi.w	802311c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8022f96:	429a      	cmp	r2, r3
 8022f98:	f2c0 80c0 	blt.w	802311c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8022f9c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8022fa0:	4647      	mov	r7, r8
 8022fa2:	f1bb 0f00 	cmp.w	fp, #0
 8022fa6:	f340 80e3 	ble.w	8023170 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8022faa:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8022fac:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8022fb0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022fb2:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8022fb6:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8022fba:	ea5f 422a 	movs.w	r2, sl, asr #16
 8022fbe:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022fc2:	689b      	ldr	r3, [r3, #8]
 8022fc4:	f100 8121 	bmi.w	802320a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8022fc8:	f103 39ff 	add.w	r9, r3, #4294967295
 8022fcc:	454a      	cmp	r2, r9
 8022fce:	f280 811c 	bge.w	802320a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8022fd2:	f1bc 0f00 	cmp.w	ip, #0
 8022fd6:	f2c0 8118 	blt.w	802320a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8022fda:	f10e 39ff 	add.w	r9, lr, #4294967295
 8022fde:	45cc      	cmp	ip, r9
 8022fe0:	f280 8113 	bge.w	802320a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8022fe4:	b21b      	sxth	r3, r3
 8022fe6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022fe8:	fb0c 2203 	mla	r2, ip, r3, r2
 8022fec:	eb04 0902 	add.w	r9, r4, r2
 8022ff0:	5ca2      	ldrb	r2, [r4, r2]
 8022ff2:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 8022ff6:	2800      	cmp	r0, #0
 8022ff8:	f000 80fe 	beq.w	80231f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 8022ffc:	f899 2001 	ldrb.w	r2, [r9, #1]
 8023000:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8023004:	9211      	str	r2, [sp, #68]	; 0x44
 8023006:	b151      	cbz	r1, 802301e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8023008:	eb09 0203 	add.w	r2, r9, r3
 802300c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8023010:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8023014:	930f      	str	r3, [sp, #60]	; 0x3c
 8023016:	7853      	ldrb	r3, [r2, #1]
 8023018:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802301c:	9312      	str	r3, [sp, #72]	; 0x48
 802301e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023020:	fb10 f201 	smulbb	r2, r0, r1
 8023024:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023026:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802302a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802302e:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8023032:	10d2      	asrs	r2, r2, #3
 8023034:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8023038:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 802303c:	ea4c 0c03 	orr.w	ip, ip, r3
 8023040:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8023042:	041b      	lsls	r3, r3, #16
 8023044:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8023048:	4323      	orrs	r3, r4
 802304a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802304c:	4353      	muls	r3, r2
 802304e:	fb09 330c 	mla	r3, r9, ip, r3
 8023052:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8023056:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802305a:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802305e:	ea4c 0e0e 	orr.w	lr, ip, lr
 8023062:	f1c1 0c10 	rsb	ip, r1, #16
 8023066:	ebac 0c00 	sub.w	ip, ip, r0
 802306a:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 802306e:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8023072:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8023076:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023078:	0418      	lsls	r0, r3, #16
 802307a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802307e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8023082:	4318      	orrs	r0, r3
 8023084:	fb02 c200 	mla	r2, r2, r0, ip
 8023088:	8838      	ldrh	r0, [r7, #0]
 802308a:	0d53      	lsrs	r3, r2, #21
 802308c:	0952      	lsrs	r2, r2, #5
 802308e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023092:	1201      	asrs	r1, r0, #8
 8023094:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023098:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 802309c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80230a0:	00c0      	lsls	r0, r0, #3
 80230a2:	431a      	orrs	r2, r3
 80230a4:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 80230a8:	fb11 f104 	smulbb	r1, r1, r4
 80230ac:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 80230b0:	b292      	uxth	r2, r2
 80230b2:	fb1e fe04 	smulbb	lr, lr, r4
 80230b6:	b2c0      	uxtb	r0, r0
 80230b8:	ea4f 2c22 	mov.w	ip, r2, asr #8
 80230bc:	fb10 f004 	smulbb	r0, r0, r4
 80230c0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80230c4:	fb0c 1c03 	mla	ip, ip, r3, r1
 80230c8:	10d1      	asrs	r1, r2, #3
 80230ca:	00d2      	lsls	r2, r2, #3
 80230cc:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80230d0:	fa1f fc8c 	uxth.w	ip, ip
 80230d4:	b2d2      	uxtb	r2, r2
 80230d6:	fb01 e103 	mla	r1, r1, r3, lr
 80230da:	fb02 0303 	mla	r3, r2, r3, r0
 80230de:	b289      	uxth	r1, r1
 80230e0:	b29a      	uxth	r2, r3
 80230e2:	f10c 0301 	add.w	r3, ip, #1
 80230e6:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80230ea:	1c53      	adds	r3, r2, #1
 80230ec:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80230f0:	1c4a      	adds	r2, r1, #1
 80230f2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80230f6:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80230fa:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80230fe:	0949      	lsrs	r1, r1, #5
 8023100:	ea43 030c 	orr.w	r3, r3, ip
 8023104:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8023108:	430b      	orrs	r3, r1
 802310a:	803b      	strh	r3, [r7, #0]
 802310c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802310e:	3702      	adds	r7, #2
 8023110:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023114:	449a      	add	sl, r3
 8023116:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023118:	441d      	add	r5, r3
 802311a:	e742      	b.n	8022fa2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 802311c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802311e:	f108 0802 	add.w	r8, r8, #2
 8023122:	449a      	add	sl, r3
 8023124:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023126:	441d      	add	r5, r3
 8023128:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802312a:	3b01      	subs	r3, #1
 802312c:	9309      	str	r3, [sp, #36]	; 0x24
 802312e:	e718      	b.n	8022f62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8023130:	d023      	beq.n	802317a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8023132:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023134:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8023136:	3b01      	subs	r3, #1
 8023138:	fb00 a003 	mla	r0, r0, r3, sl
 802313c:	1400      	asrs	r0, r0, #16
 802313e:	f53f af2d 	bmi.w	8022f9c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8023142:	3901      	subs	r1, #1
 8023144:	4288      	cmp	r0, r1
 8023146:	f6bf af29 	bge.w	8022f9c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 802314a:	992e      	ldr	r1, [sp, #184]	; 0xb8
 802314c:	fb01 5303 	mla	r3, r1, r3, r5
 8023150:	141b      	asrs	r3, r3, #16
 8023152:	f53f af23 	bmi.w	8022f9c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8023156:	3a01      	subs	r2, #1
 8023158:	4293      	cmp	r3, r2
 802315a:	f6bf af1f 	bge.w	8022f9c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 802315e:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8023162:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 8023166:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 802316a:	f1be 0f00 	cmp.w	lr, #0
 802316e:	dc6c      	bgt.n	802324a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8023170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023172:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023176:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 802317a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802317c:	2b00      	cmp	r3, #0
 802317e:	f340 810e 	ble.w	802339e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ba>
 8023182:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023186:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023188:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802318c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023190:	eef0 6a48 	vmov.f32	s13, s16
 8023194:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023198:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802319c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80231a0:	ee16 aa90 	vmov	sl, s13
 80231a4:	eef0 6a68 	vmov.f32	s13, s17
 80231a8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80231ac:	ee16 5a90 	vmov	r5, s13
 80231b0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80231b4:	ee69 7a27 	vmul.f32	s15, s18, s15
 80231b8:	ee37 8a48 	vsub.f32	s16, s14, s16
 80231bc:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80231c0:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80231c4:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80231c8:	ee18 2a10 	vmov	r2, s16
 80231cc:	eeb0 8a47 	vmov.f32	s16, s14
 80231d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80231d4:	ee18 2a90 	vmov	r2, s17
 80231d8:	932d      	str	r3, [sp, #180]	; 0xb4
 80231da:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80231dc:	eef0 8a67 	vmov.f32	s17, s15
 80231e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80231e4:	932e      	str	r3, [sp, #184]	; 0xb8
 80231e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80231e8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80231ea:	3b01      	subs	r3, #1
 80231ec:	930c      	str	r3, [sp, #48]	; 0x30
 80231ee:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80231f0:	bf08      	it	eq
 80231f2:	4613      	moveq	r3, r2
 80231f4:	9309      	str	r3, [sp, #36]	; 0x24
 80231f6:	e6a6      	b.n	8022f46 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80231f8:	2900      	cmp	r1, #0
 80231fa:	f43f af10 	beq.w	802301e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80231fe:	f819 3003 	ldrb.w	r3, [r9, r3]
 8023202:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8023206:	930f      	str	r3, [sp, #60]	; 0x3c
 8023208:	e709      	b.n	802301e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 802320a:	f112 0901 	adds.w	r9, r2, #1
 802320e:	f53f af7d 	bmi.w	802310c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8023212:	454b      	cmp	r3, r9
 8023214:	f6ff af7a 	blt.w	802310c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8023218:	f11c 0901 	adds.w	r9, ip, #1
 802321c:	f53f af76 	bmi.w	802310c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8023220:	45ce      	cmp	lr, r9
 8023222:	f6ff af73 	blt.w	802310c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8023226:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023228:	b21b      	sxth	r3, r3
 802322a:	9202      	str	r2, [sp, #8]
 802322c:	fa0f f28e 	sxth.w	r2, lr
 8023230:	9300      	str	r3, [sp, #0]
 8023232:	4633      	mov	r3, r6
 8023234:	9201      	str	r2, [sp, #4]
 8023236:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023238:	e9cd 1405 	strd	r1, r4, [sp, #20]
 802323c:	e9cd c003 	strd	ip, r0, [sp, #12]
 8023240:	4639      	mov	r1, r7
 8023242:	9816      	ldr	r0, [sp, #88]	; 0x58
 8023244:	f7ff fd70 	bl	8022d28 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 8023248:	e760      	b.n	802310c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 802324a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802324c:	ea4f 422a 	mov.w	r2, sl, asr #16
 8023250:	1429      	asrs	r1, r5, #16
 8023252:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023254:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8023258:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 802325c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8023260:	fb03 2101 	mla	r1, r3, r1, r2
 8023264:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023266:	440a      	add	r2, r1
 8023268:	5c61      	ldrb	r1, [r4, r1]
 802326a:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 802326e:	f1bc 0f00 	cmp.w	ip, #0
 8023272:	f000 808c 	beq.w	802338e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4aa>
 8023276:	7857      	ldrb	r7, [r2, #1]
 8023278:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 802327c:	9413      	str	r4, [sp, #76]	; 0x4c
 802327e:	b140      	cbz	r0, 8023292 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8023280:	18d7      	adds	r7, r2, r3
 8023282:	5cd3      	ldrb	r3, [r2, r3]
 8023284:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8023288:	9310      	str	r3, [sp, #64]	; 0x40
 802328a:	787b      	ldrb	r3, [r7, #1]
 802328c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8023290:	9314      	str	r3, [sp, #80]	; 0x50
 8023292:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023294:	fb1c f200 	smulbb	r2, ip, r0
 8023298:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802329a:	f10e 3eff 	add.w	lr, lr, #4294967295
 802329e:	041f      	lsls	r7, r3, #16
 80232a0:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80232a4:	10d2      	asrs	r2, r2, #3
 80232a6:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 80232aa:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 80232ae:	431f      	orrs	r7, r3
 80232b0:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 80232b4:	9317      	str	r3, [sp, #92]	; 0x5c
 80232b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80232b8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80232ba:	041b      	lsls	r3, r3, #16
 80232bc:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80232c0:	ea43 030b 	orr.w	r3, r3, fp
 80232c4:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80232c8:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80232cc:	4353      	muls	r3, r2
 80232ce:	fb04 3707 	mla	r7, r4, r7, r3
 80232d2:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 80232d6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80232d8:	ea43 0b01 	orr.w	fp, r3, r1
 80232dc:	f1c0 0110 	rsb	r1, r0, #16
 80232e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80232e2:	eba1 0c0c 	sub.w	ip, r1, ip
 80232e6:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 80232ea:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 80232ee:	fb0c 770b 	mla	r7, ip, fp, r7
 80232f2:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80232f6:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 80232fa:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80232fe:	ea4c 0c0b 	orr.w	ip, ip, fp
 8023302:	fb02 770c 	mla	r7, r2, ip, r7
 8023306:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023308:	0d79      	lsrs	r1, r7, #21
 802330a:	8812      	ldrh	r2, [r2, #0]
 802330c:	097f      	lsrs	r7, r7, #5
 802330e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8023312:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8023316:	430f      	orrs	r7, r1
 8023318:	1211      	asrs	r1, r2, #8
 802331a:	b2bb      	uxth	r3, r7
 802331c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8023320:	10d7      	asrs	r7, r2, #3
 8023322:	fb11 f104 	smulbb	r1, r1, r4
 8023326:	1218      	asrs	r0, r3, #8
 8023328:	00d2      	lsls	r2, r2, #3
 802332a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802332e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8023332:	fb17 f704 	smulbb	r7, r7, r4
 8023336:	b2d2      	uxtb	r2, r2
 8023338:	fb00 1009 	mla	r0, r0, r9, r1
 802333c:	10d9      	asrs	r1, r3, #3
 802333e:	fb12 f204 	smulbb	r2, r2, r4
 8023342:	00db      	lsls	r3, r3, #3
 8023344:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8023348:	b280      	uxth	r0, r0
 802334a:	b2db      	uxtb	r3, r3
 802334c:	fb01 7109 	mla	r1, r1, r9, r7
 8023350:	fb03 2309 	mla	r3, r3, r9, r2
 8023354:	1c42      	adds	r2, r0, #1
 8023356:	b289      	uxth	r1, r1
 8023358:	b29b      	uxth	r3, r3
 802335a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802335e:	1c4f      	adds	r7, r1, #1
 8023360:	1c5a      	adds	r2, r3, #1
 8023362:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8023366:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802336a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802336e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023370:	0949      	lsrs	r1, r1, #5
 8023372:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8023376:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802337a:	4310      	orrs	r0, r2
 802337c:	4308      	orrs	r0, r1
 802337e:	f823 0b02 	strh.w	r0, [r3], #2
 8023382:	930e      	str	r3, [sp, #56]	; 0x38
 8023384:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8023386:	449a      	add	sl, r3
 8023388:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802338a:	441d      	add	r5, r3
 802338c:	e6ed      	b.n	802316a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 802338e:	2800      	cmp	r0, #0
 8023390:	f43f af7f 	beq.w	8023292 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8023394:	5cd3      	ldrb	r3, [r2, r3]
 8023396:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802339a:	9310      	str	r3, [sp, #64]	; 0x40
 802339c:	e779      	b.n	8023292 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 802339e:	b019      	add	sp, #100	; 0x64
 80233a0:	ecbd 8b08 	vpop	{d8-d11}
 80233a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080233a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 80233a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80233ac:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 80233b0:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 80233b4:	2e00      	cmp	r6, #0
 80233b6:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80233ba:	fb06 570e 	mla	r7, r6, lr, r5
 80233be:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 80233c2:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 80233c6:	eb02 0807 	add.w	r8, r2, r7
 80233ca:	8808      	ldrh	r0, [r1, #0]
 80233cc:	db38      	blt.n	8023440 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 80233ce:	45b1      	cmp	r9, r6
 80233d0:	dd36      	ble.n	8023440 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 80233d2:	2d00      	cmp	r5, #0
 80233d4:	db32      	blt.n	802343c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 80233d6:	45ae      	cmp	lr, r5
 80233d8:	dd30      	ble.n	802343c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 80233da:	5dd2      	ldrb	r2, [r2, r7]
 80233dc:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 80233e0:	1c6a      	adds	r2, r5, #1
 80233e2:	d430      	bmi.n	8023446 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 80233e4:	4596      	cmp	lr, r2
 80233e6:	dd2e      	ble.n	8023446 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 80233e8:	b36c      	cbz	r4, 8023446 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 80233ea:	f898 2001 	ldrb.w	r2, [r8, #1]
 80233ee:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80233f2:	3601      	adds	r6, #1
 80233f4:	d42b      	bmi.n	802344e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 80233f6:	45b1      	cmp	r9, r6
 80233f8:	dd29      	ble.n	802344e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 80233fa:	f1bc 0f00 	cmp.w	ip, #0
 80233fe:	d028      	beq.n	8023452 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xaa>
 8023400:	2d00      	cmp	r5, #0
 8023402:	db22      	blt.n	802344a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 8023404:	45ae      	cmp	lr, r5
 8023406:	dd20      	ble.n	802344a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 8023408:	f818 600e 	ldrb.w	r6, [r8, lr]
 802340c:	f833 6016 	ldrh.w	r6, [r3, r6, lsl #1]
 8023410:	3501      	adds	r5, #1
 8023412:	d407      	bmi.n	8023424 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8023414:	45ae      	cmp	lr, r5
 8023416:	dd05      	ble.n	8023424 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8023418:	b134      	cbz	r4, 8023428 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 802341a:	44c6      	add	lr, r8
 802341c:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8023420:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8023424:	2c0f      	cmp	r4, #15
 8023426:	d802      	bhi.n	802342e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8023428:	f1bc 0f0f 	cmp.w	ip, #15
 802342c:	d914      	bls.n	8023458 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xb0>
 802342e:	4b26      	ldr	r3, [pc, #152]	; (80234c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x120>)
 8023430:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8023434:	4a25      	ldr	r2, [pc, #148]	; (80234cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x124>)
 8023436:	4826      	ldr	r0, [pc, #152]	; (80234d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x128>)
 8023438:	f006 fdd4 	bl	8029fe4 <__assert_func>
 802343c:	4607      	mov	r7, r0
 802343e:	e7cf      	b.n	80233e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x38>
 8023440:	4602      	mov	r2, r0
 8023442:	4607      	mov	r7, r0
 8023444:	e7d5      	b.n	80233f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 8023446:	4602      	mov	r2, r0
 8023448:	e7d3      	b.n	80233f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 802344a:	4606      	mov	r6, r0
 802344c:	e7e0      	b.n	8023410 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x68>
 802344e:	4606      	mov	r6, r0
 8023450:	e7e8      	b.n	8023424 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8023452:	2c0f      	cmp	r4, #15
 8023454:	d8eb      	bhi.n	802342e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8023456:	4606      	mov	r6, r0
 8023458:	fb14 f30c 	smulbb	r3, r4, ip
 802345c:	043d      	lsls	r5, r7, #16
 802345e:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 8023462:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8023466:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 802346a:	10db      	asrs	r3, r3, #3
 802346c:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8023470:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023474:	432f      	orrs	r7, r5
 8023476:	f1cc 0510 	rsb	r5, ip, #16
 802347a:	ea4e 0202 	orr.w	r2, lr, r2
 802347e:	1b2d      	subs	r5, r5, r4
 8023480:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 8023484:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8023488:	4354      	muls	r4, r2
 802348a:	fb05 4507 	mla	r5, r5, r7, r4
 802348e:	0404      	lsls	r4, r0, #16
 8023490:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8023494:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8023498:	4320      	orrs	r0, r4
 802349a:	fb03 5400 	mla	r4, r3, r0, r5
 802349e:	0430      	lsls	r0, r6, #16
 80234a0:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 80234a4:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 80234a8:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80234ac:	4330      	orrs	r0, r6
 80234ae:	fb03 4000 	mla	r0, r3, r0, r4
 80234b2:	0d43      	lsrs	r3, r0, #21
 80234b4:	0940      	lsrs	r0, r0, #5
 80234b6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80234ba:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80234be:	4318      	orrs	r0, r3
 80234c0:	8008      	strh	r0, [r1, #0]
 80234c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80234c6:	bf00      	nop
 80234c8:	0802f359 	.word	0x0802f359
 80234cc:	0802f9cf 	.word	0x0802f9cf
 80234d0:	0802f3dd 	.word	0x0802f3dd

080234d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80234d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80234d8:	ed2d 8b0a 	vpush	{d8-d12}
 80234dc:	b093      	sub	sp, #76	; 0x4c
 80234de:	eeb0 aa40 	vmov.f32	s20, s0
 80234e2:	eef0 9a60 	vmov.f32	s19, s1
 80234e6:	920f      	str	r2, [sp, #60]	; 0x3c
 80234e8:	eeb0 9a41 	vmov.f32	s18, s2
 80234ec:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80234ee:	eeb0 8a62 	vmov.f32	s16, s5
 80234f2:	9010      	str	r0, [sp, #64]	; 0x40
 80234f4:	eef0 8a43 	vmov.f32	s17, s6
 80234f8:	6850      	ldr	r0, [r2, #4]
 80234fa:	eeb0 ca44 	vmov.f32	s24, s8
 80234fe:	9108      	str	r1, [sp, #32]
 8023500:	eef0 ba64 	vmov.f32	s23, s9
 8023504:	9306      	str	r3, [sp, #24]
 8023506:	eeb0 ba45 	vmov.f32	s22, s10
 802350a:	6812      	ldr	r2, [r2, #0]
 802350c:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8023510:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8023514:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 8023518:	fb00 1303 	mla	r3, r0, r3, r1
 802351c:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8023520:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023522:	681b      	ldr	r3, [r3, #0]
 8023524:	9307      	str	r3, [sp, #28]
 8023526:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023528:	685f      	ldr	r7, [r3, #4]
 802352a:	3704      	adds	r7, #4
 802352c:	9b08      	ldr	r3, [sp, #32]
 802352e:	2b00      	cmp	r3, #0
 8023530:	dc03      	bgt.n	802353a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8023532:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023534:	2b00      	cmp	r3, #0
 8023536:	f340 81b2 	ble.w	802389e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 802353a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802353c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023540:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023544:	1e48      	subs	r0, r1, #1
 8023546:	f102 3cff 	add.w	ip, r2, #4294967295
 802354a:	9b06      	ldr	r3, [sp, #24]
 802354c:	2b00      	cmp	r3, #0
 802354e:	f340 80a9 	ble.w	80236a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8023552:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8023556:	ea4f 4326 	mov.w	r3, r6, asr #16
 802355a:	d406      	bmi.n	802356a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802355c:	4586      	cmp	lr, r0
 802355e:	da04      	bge.n	802356a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8023560:	2b00      	cmp	r3, #0
 8023562:	db02      	blt.n	802356a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8023564:	4563      	cmp	r3, ip
 8023566:	f2c0 809e 	blt.w	80236a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 802356a:	f11e 0e01 	adds.w	lr, lr, #1
 802356e:	f100 808f 	bmi.w	8023690 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8023572:	4571      	cmp	r1, lr
 8023574:	f2c0 808c 	blt.w	8023690 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8023578:	3301      	adds	r3, #1
 802357a:	f100 8089 	bmi.w	8023690 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 802357e:	429a      	cmp	r2, r3
 8023580:	f2c0 8086 	blt.w	8023690 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8023584:	f8dd b018 	ldr.w	fp, [sp, #24]
 8023588:	46c8      	mov	r8, r9
 802358a:	f1bb 0f00 	cmp.w	fp, #0
 802358e:	f340 80a6 	ble.w	80236de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8023592:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8023594:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8023598:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802359a:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802359e:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80235a2:	1422      	asrs	r2, r4, #16
 80235a4:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80235a8:	689b      	ldr	r3, [r3, #8]
 80235aa:	f100 80e3 	bmi.w	8023774 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80235ae:	f103 3aff 	add.w	sl, r3, #4294967295
 80235b2:	4552      	cmp	r2, sl
 80235b4:	f280 80de 	bge.w	8023774 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80235b8:	f1bc 0f00 	cmp.w	ip, #0
 80235bc:	f2c0 80da 	blt.w	8023774 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80235c0:	f10e 3aff 	add.w	sl, lr, #4294967295
 80235c4:	45d4      	cmp	ip, sl
 80235c6:	f280 80d5 	bge.w	8023774 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80235ca:	b21b      	sxth	r3, r3
 80235cc:	9d07      	ldr	r5, [sp, #28]
 80235ce:	fb0c 2203 	mla	r2, ip, r3, r2
 80235d2:	eb05 0a02 	add.w	sl, r5, r2
 80235d6:	5caa      	ldrb	r2, [r5, r2]
 80235d8:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 80235dc:	2800      	cmp	r0, #0
 80235de:	f000 80c0 	beq.w	8023762 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 80235e2:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80235e6:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 80235ea:	920b      	str	r2, [sp, #44]	; 0x2c
 80235ec:	b151      	cbz	r1, 8023604 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 80235ee:	eb0a 0203 	add.w	r2, sl, r3
 80235f2:	f81a 3003 	ldrb.w	r3, [sl, r3]
 80235f6:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80235fa:	9309      	str	r3, [sp, #36]	; 0x24
 80235fc:	7853      	ldrb	r3, [r2, #1]
 80235fe:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8023602:	930c      	str	r3, [sp, #48]	; 0x30
 8023604:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023606:	fb10 f201 	smulbb	r2, r0, r1
 802360a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802360c:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8023610:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8023614:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8023618:	10d2      	asrs	r2, r2, #3
 802361a:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802361e:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 8023622:	ea4c 0c03 	orr.w	ip, ip, r3
 8023626:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023628:	041b      	lsls	r3, r3, #16
 802362a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802362e:	432b      	orrs	r3, r5
 8023630:	4353      	muls	r3, r2
 8023632:	fb0a 330c 	mla	r3, sl, ip, r3
 8023636:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 802363a:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802363e:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8023642:	ea4c 0e0e 	orr.w	lr, ip, lr
 8023646:	f1c1 0c10 	rsb	ip, r1, #16
 802364a:	ebac 0c00 	sub.w	ip, ip, r0
 802364e:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8023652:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8023656:	fb0c 3c0e 	mla	ip, ip, lr, r3
 802365a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802365c:	0418      	lsls	r0, r3, #16
 802365e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8023662:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8023666:	4318      	orrs	r0, r3
 8023668:	fb02 c200 	mla	r2, r2, r0, ip
 802366c:	0d53      	lsrs	r3, r2, #21
 802366e:	0952      	lsrs	r2, r2, #5
 8023670:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023674:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023678:	431a      	orrs	r2, r3
 802367a:	f8a8 2000 	strh.w	r2, [r8]
 802367e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023680:	f108 0802 	add.w	r8, r8, #2
 8023684:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023688:	441c      	add	r4, r3
 802368a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802368c:	441e      	add	r6, r3
 802368e:	e77c      	b.n	802358a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8023690:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023692:	f109 0902 	add.w	r9, r9, #2
 8023696:	441c      	add	r4, r3
 8023698:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802369a:	441e      	add	r6, r3
 802369c:	9b06      	ldr	r3, [sp, #24]
 802369e:	3b01      	subs	r3, #1
 80236a0:	9306      	str	r3, [sp, #24]
 80236a2:	e752      	b.n	802354a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80236a4:	d020      	beq.n	80236e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80236a6:	9b06      	ldr	r3, [sp, #24]
 80236a8:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80236aa:	3b01      	subs	r3, #1
 80236ac:	fb00 4003 	mla	r0, r0, r3, r4
 80236b0:	1400      	asrs	r0, r0, #16
 80236b2:	f53f af67 	bmi.w	8023584 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80236b6:	3901      	subs	r1, #1
 80236b8:	4288      	cmp	r0, r1
 80236ba:	f6bf af63 	bge.w	8023584 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80236be:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80236c0:	fb01 6303 	mla	r3, r1, r3, r6
 80236c4:	141b      	asrs	r3, r3, #16
 80236c6:	f53f af5d 	bmi.w	8023584 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80236ca:	3a01      	subs	r2, #1
 80236cc:	4293      	cmp	r3, r2
 80236ce:	f6bf af59 	bge.w	8023584 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80236d2:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80236d6:	46ca      	mov	sl, r9
 80236d8:	f1b8 0f00 	cmp.w	r8, #0
 80236dc:	dc67      	bgt.n	80237ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 80236de:	9b06      	ldr	r3, [sp, #24]
 80236e0:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80236e4:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 80236e8:	9b08      	ldr	r3, [sp, #32]
 80236ea:	2b00      	cmp	r3, #0
 80236ec:	f340 80d7 	ble.w	802389e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 80236f0:	ee3a aa0c 	vadd.f32	s20, s20, s24
 80236f4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80236f6:	ee79 9aab 	vadd.f32	s19, s19, s23
 80236fa:	eef0 6a48 	vmov.f32	s13, s16
 80236fe:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8023702:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8023706:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802370a:	ee16 4a90 	vmov	r4, s13
 802370e:	eef0 6a68 	vmov.f32	s13, s17
 8023712:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023716:	ee16 6a90 	vmov	r6, s13
 802371a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802371e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023722:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023726:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802372a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802372e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023732:	ee18 2a10 	vmov	r2, s16
 8023736:	eeb0 8a47 	vmov.f32	s16, s14
 802373a:	fb92 f3f3 	sdiv	r3, r2, r3
 802373e:	ee18 2a90 	vmov	r2, s17
 8023742:	9329      	str	r3, [sp, #164]	; 0xa4
 8023744:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023746:	eef0 8a67 	vmov.f32	s17, s15
 802374a:	fb92 f3f3 	sdiv	r3, r2, r3
 802374e:	932a      	str	r3, [sp, #168]	; 0xa8
 8023750:	9b08      	ldr	r3, [sp, #32]
 8023752:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023754:	3b01      	subs	r3, #1
 8023756:	9308      	str	r3, [sp, #32]
 8023758:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802375a:	bf08      	it	eq
 802375c:	4613      	moveq	r3, r2
 802375e:	9306      	str	r3, [sp, #24]
 8023760:	e6e4      	b.n	802352c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8023762:	2900      	cmp	r1, #0
 8023764:	f43f af4e 	beq.w	8023604 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 8023768:	f81a 3003 	ldrb.w	r3, [sl, r3]
 802376c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8023770:	9309      	str	r3, [sp, #36]	; 0x24
 8023772:	e747      	b.n	8023604 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 8023774:	f112 0a01 	adds.w	sl, r2, #1
 8023778:	d481      	bmi.n	802367e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 802377a:	4553      	cmp	r3, sl
 802377c:	f6ff af7f 	blt.w	802367e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8023780:	f11c 0a01 	adds.w	sl, ip, #1
 8023784:	f53f af7b 	bmi.w	802367e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8023788:	45d6      	cmp	lr, sl
 802378a:	f6ff af78 	blt.w	802367e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 802378e:	b21b      	sxth	r3, r3
 8023790:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 8023794:	fa0f f28e 	sxth.w	r2, lr
 8023798:	9300      	str	r3, [sp, #0]
 802379a:	463b      	mov	r3, r7
 802379c:	9201      	str	r2, [sp, #4]
 802379e:	9a07      	ldr	r2, [sp, #28]
 80237a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80237a4:	4641      	mov	r1, r8
 80237a6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80237a8:	f7ff fdfe 	bl	80233a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 80237ac:	e767      	b.n	802367e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80237ae:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80237b0:	1422      	asrs	r2, r4, #16
 80237b2:	1431      	asrs	r1, r6, #16
 80237b4:	9d07      	ldr	r5, [sp, #28]
 80237b6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80237ba:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 80237be:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80237c2:	fb03 2101 	mla	r1, r3, r1, r2
 80237c6:	9a07      	ldr	r2, [sp, #28]
 80237c8:	440a      	add	r2, r1
 80237ca:	5c69      	ldrb	r1, [r5, r1]
 80237cc:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 80237d0:	f1be 0f00 	cmp.w	lr, #0
 80237d4:	d05c      	beq.n	8023890 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3bc>
 80237d6:	f892 c001 	ldrb.w	ip, [r2, #1]
 80237da:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 80237de:	950d      	str	r5, [sp, #52]	; 0x34
 80237e0:	b150      	cbz	r0, 80237f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 80237e2:	eb02 0c03 	add.w	ip, r2, r3
 80237e6:	5cd3      	ldrb	r3, [r2, r3]
 80237e8:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80237ec:	930a      	str	r3, [sp, #40]	; 0x28
 80237ee:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80237f2:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80237f6:	930e      	str	r3, [sp, #56]	; 0x38
 80237f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80237fa:	fb1e f200 	smulbb	r2, lr, r0
 80237fe:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8023800:	f108 38ff 	add.w	r8, r8, #4294967295
 8023804:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8023808:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802380c:	10d2      	asrs	r2, r2, #3
 802380e:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 8023812:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8023816:	ea4c 0c03 	orr.w	ip, ip, r3
 802381a:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 802381e:	9311      	str	r3, [sp, #68]	; 0x44
 8023820:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023822:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023824:	041b      	lsls	r3, r3, #16
 8023826:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802382a:	ea43 030b 	orr.w	r3, r3, fp
 802382e:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8023832:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8023836:	4353      	muls	r3, r2
 8023838:	fb05 3c0c 	mla	ip, r5, ip, r3
 802383c:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8023840:	ea43 0b01 	orr.w	fp, r3, r1
 8023844:	f1c0 0110 	rsb	r1, r0, #16
 8023848:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802384a:	eba1 0e0e 	sub.w	lr, r1, lr
 802384e:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 8023852:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8023856:	fb0e cc0b 	mla	ip, lr, fp, ip
 802385a:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 802385e:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 8023862:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8023866:	ea4b 0e0e 	orr.w	lr, fp, lr
 802386a:	fb02 cc0e 	mla	ip, r2, lr, ip
 802386e:	ea4f 535c 	mov.w	r3, ip, lsr #21
 8023872:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8023876:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802387a:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802387e:	ea43 0c0c 	orr.w	ip, r3, ip
 8023882:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023884:	441c      	add	r4, r3
 8023886:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023888:	f82a cb02 	strh.w	ip, [sl], #2
 802388c:	441e      	add	r6, r3
 802388e:	e723      	b.n	80236d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8023890:	2800      	cmp	r0, #0
 8023892:	d0b1      	beq.n	80237f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8023894:	5cd3      	ldrb	r3, [r2, r3]
 8023896:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802389a:	930a      	str	r3, [sp, #40]	; 0x28
 802389c:	e7ac      	b.n	80237f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 802389e:	b013      	add	sp, #76	; 0x4c
 80238a0:	ecbd 8b0a 	vpop	{d8-d12}
 80238a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080238a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 80238a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80238ac:	468b      	mov	fp, r1
 80238ae:	8809      	ldrh	r1, [r1, #0]
 80238b0:	b089      	sub	sp, #36	; 0x24
 80238b2:	10cd      	asrs	r5, r1, #3
 80238b4:	ea4f 2921 	mov.w	r9, r1, asr #8
 80238b8:	f9bd e048 	ldrsh.w	lr, [sp, #72]	; 0x48
 80238bc:	00c9      	lsls	r1, r1, #3
 80238be:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80238c2:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 80238c6:	9202      	str	r2, [sp, #8]
 80238c8:	b2c9      	uxtb	r1, r1
 80238ca:	9500      	str	r5, [sp, #0]
 80238cc:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	; 0x4c
 80238d0:	9101      	str	r1, [sp, #4]
 80238d2:	9900      	ldr	r1, [sp, #0]
 80238d4:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 80238d8:	0209      	lsls	r1, r1, #8
 80238da:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 80238de:	f89d c060 	ldrb.w	ip, [sp, #96]	; 0x60
 80238e2:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 80238e6:	e9dd 6414 	ldrd	r6, r4, [sp, #80]	; 0x50
 80238ea:	fb04 650e 	mla	r5, r4, lr, r6
 80238ee:	2c00      	cmp	r4, #0
 80238f0:	eb02 0805 	add.w	r8, r2, r5
 80238f4:	9a01      	ldr	r2, [sp, #4]
 80238f6:	ea41 0102 	orr.w	r1, r1, r2
 80238fa:	9107      	str	r1, [sp, #28]
 80238fc:	db43      	blt.n	8023986 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xde>
 80238fe:	45a2      	cmp	sl, r4
 8023900:	dd41      	ble.n	8023986 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xde>
 8023902:	2e00      	cmp	r6, #0
 8023904:	db3d      	blt.n	8023982 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xda>
 8023906:	45b6      	cmp	lr, r6
 8023908:	dd3b      	ble.n	8023982 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xda>
 802390a:	9a02      	ldr	r2, [sp, #8]
 802390c:	5d55      	ldrb	r5, [r2, r5]
 802390e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023912:	441d      	add	r5, r3
 8023914:	1c72      	adds	r2, r6, #1
 8023916:	d439      	bmi.n	802398c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 8023918:	4596      	cmp	lr, r2
 802391a:	dd37      	ble.n	802398c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 802391c:	2f00      	cmp	r7, #0
 802391e:	d035      	beq.n	802398c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 8023920:	f898 1001 	ldrb.w	r1, [r8, #1]
 8023924:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8023928:	4419      	add	r1, r3
 802392a:	3401      	adds	r4, #1
 802392c:	d432      	bmi.n	8023994 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 802392e:	45a2      	cmp	sl, r4
 8023930:	dd30      	ble.n	8023994 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 8023932:	b378      	cbz	r0, 8023994 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 8023934:	2e00      	cmp	r6, #0
 8023936:	db2b      	blt.n	8023990 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe8>
 8023938:	45b6      	cmp	lr, r6
 802393a:	dd29      	ble.n	8023990 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe8>
 802393c:	f818 400e 	ldrb.w	r4, [r8, lr]
 8023940:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023944:	441c      	add	r4, r3
 8023946:	3601      	adds	r6, #1
 8023948:	d427      	bmi.n	802399a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 802394a:	45b6      	cmp	lr, r6
 802394c:	dd25      	ble.n	802399a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 802394e:	b327      	cbz	r7, 802399a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 8023950:	44c6      	add	lr, r8
 8023952:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8023956:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802395a:	4413      	add	r3, r2
 802395c:	782a      	ldrb	r2, [r5, #0]
 802395e:	2f0f      	cmp	r7, #15
 8023960:	9202      	str	r2, [sp, #8]
 8023962:	780a      	ldrb	r2, [r1, #0]
 8023964:	9203      	str	r2, [sp, #12]
 8023966:	7822      	ldrb	r2, [r4, #0]
 8023968:	9204      	str	r2, [sp, #16]
 802396a:	781a      	ldrb	r2, [r3, #0]
 802396c:	9205      	str	r2, [sp, #20]
 802396e:	d801      	bhi.n	8023974 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xcc>
 8023970:	280f      	cmp	r0, #15
 8023972:	d914      	bls.n	802399e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf6>
 8023974:	4b3f      	ldr	r3, [pc, #252]	; (8023a74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1cc>)
 8023976:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 802397a:	4a3f      	ldr	r2, [pc, #252]	; (8023a78 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>)
 802397c:	483f      	ldr	r0, [pc, #252]	; (8023a7c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>)
 802397e:	f006 fb31 	bl	8029fe4 <__assert_func>
 8023982:	ad07      	add	r5, sp, #28
 8023984:	e7c6      	b.n	8023914 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6c>
 8023986:	a907      	add	r1, sp, #28
 8023988:	460d      	mov	r5, r1
 802398a:	e7ce      	b.n	802392a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x82>
 802398c:	a907      	add	r1, sp, #28
 802398e:	e7cc      	b.n	802392a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x82>
 8023990:	ac07      	add	r4, sp, #28
 8023992:	e7d8      	b.n	8023946 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x9e>
 8023994:	ab07      	add	r3, sp, #28
 8023996:	461c      	mov	r4, r3
 8023998:	e7e0      	b.n	802395c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 802399a:	ab07      	add	r3, sp, #28
 802399c:	e7de      	b.n	802395c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 802399e:	b2ba      	uxth	r2, r7
 80239a0:	f891 8002 	ldrb.w	r8, [r1, #2]
 80239a4:	b280      	uxth	r0, r0
 80239a6:	7849      	ldrb	r1, [r1, #1]
 80239a8:	78ae      	ldrb	r6, [r5, #2]
 80239aa:	fa1f f78c 	uxth.w	r7, ip
 80239ae:	fb02 fa00 	mul.w	sl, r2, r0
 80239b2:	0112      	lsls	r2, r2, #4
 80239b4:	786d      	ldrb	r5, [r5, #1]
 80239b6:	ea6f 0c0c 	mvn.w	ip, ip
 80239ba:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80239be:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 80239c2:	eba2 020a 	sub.w	r2, r2, sl
 80239c6:	fa5f fc8c 	uxtb.w	ip, ip
 80239ca:	b280      	uxth	r0, r0
 80239cc:	fb19 f90c 	smulbb	r9, r9, ip
 80239d0:	b292      	uxth	r2, r2
 80239d2:	ebae 0e00 	sub.w	lr, lr, r0
 80239d6:	4351      	muls	r1, r2
 80239d8:	fa1f fe8e 	uxth.w	lr, lr
 80239dc:	fb02 f808 	mul.w	r8, r2, r8
 80239e0:	fb0e 1505 	mla	r5, lr, r5, r1
 80239e4:	7861      	ldrb	r1, [r4, #1]
 80239e6:	fb0e 8806 	mla	r8, lr, r6, r8
 80239ea:	78a6      	ldrb	r6, [r4, #2]
 80239ec:	fb00 5501 	mla	r5, r0, r1, r5
 80239f0:	7859      	ldrb	r1, [r3, #1]
 80239f2:	fb00 8806 	mla	r8, r0, r6, r8
 80239f6:	789e      	ldrb	r6, [r3, #2]
 80239f8:	9b00      	ldr	r3, [sp, #0]
 80239fa:	fb0a 5101 	mla	r1, sl, r1, r5
 80239fe:	fb0a 8606 	mla	r6, sl, r6, r8
 8023a02:	fb13 f50c 	smulbb	r5, r3, ip
 8023a06:	9b03      	ldr	r3, [sp, #12]
 8023a08:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8023a0c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023a10:	435a      	muls	r2, r3
 8023a12:	9b02      	ldr	r3, [sp, #8]
 8023a14:	fb06 9607 	mla	r6, r6, r7, r9
 8023a18:	fb0e 2203 	mla	r2, lr, r3, r2
 8023a1c:	9b04      	ldr	r3, [sp, #16]
 8023a1e:	b2b6      	uxth	r6, r6
 8023a20:	fb01 5107 	mla	r1, r1, r7, r5
 8023a24:	fb00 2003 	mla	r0, r0, r3, r2
 8023a28:	9b05      	ldr	r3, [sp, #20]
 8023a2a:	f106 0901 	add.w	r9, r6, #1
 8023a2e:	b289      	uxth	r1, r1
 8023a30:	fb0a 0a03 	mla	sl, sl, r3, r0
 8023a34:	9b01      	ldr	r3, [sp, #4]
 8023a36:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 8023a3a:	1c4d      	adds	r5, r1, #1
 8023a3c:	fb13 fc0c 	smulbb	ip, r3, ip
 8023a40:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8023a44:	f406 4978 	and.w	r9, r6, #63488	; 0xf800
 8023a48:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 8023a4c:	fb0a c707 	mla	r7, sl, r7, ip
 8023a50:	0949      	lsrs	r1, r1, #5
 8023a52:	b2bf      	uxth	r7, r7
 8023a54:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8023a58:	1c7e      	adds	r6, r7, #1
 8023a5a:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8023a5e:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8023a62:	ea46 0609 	orr.w	r6, r6, r9
 8023a66:	430e      	orrs	r6, r1
 8023a68:	f8ab 6000 	strh.w	r6, [fp]
 8023a6c:	b009      	add	sp, #36	; 0x24
 8023a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023a72:	bf00      	nop
 8023a74:	0802f359 	.word	0x0802f359
 8023a78:	0802f926 	.word	0x0802f926
 8023a7c:	0802f3dd 	.word	0x0802f3dd

08023a80 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023a84:	ed2d 8b08 	vpush	{d8-d11}
 8023a88:	b095      	sub	sp, #84	; 0x54
 8023a8a:	eeb0 aa40 	vmov.f32	s20, s0
 8023a8e:	eef0 9a60 	vmov.f32	s19, s1
 8023a92:	9212      	str	r2, [sp, #72]	; 0x48
 8023a94:	eeb0 9a41 	vmov.f32	s18, s2
 8023a98:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8023a9a:	eeb0 8a62 	vmov.f32	s16, s5
 8023a9e:	9309      	str	r3, [sp, #36]	; 0x24
 8023aa0:	eef0 8a43 	vmov.f32	s17, s6
 8023aa4:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 8023aa8:	eef0 ba44 	vmov.f32	s23, s8
 8023aac:	9013      	str	r0, [sp, #76]	; 0x4c
 8023aae:	eeb0 ba64 	vmov.f32	s22, s9
 8023ab2:	930f      	str	r3, [sp, #60]	; 0x3c
 8023ab4:	eef0 aa45 	vmov.f32	s21, s10
 8023ab8:	6850      	ldr	r0, [r2, #4]
 8023aba:	910e      	str	r1, [sp, #56]	; 0x38
 8023abc:	6812      	ldr	r2, [r2, #0]
 8023abe:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8023ac2:	fb00 1303 	mla	r3, r0, r3, r1
 8023ac6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023aca:	930a      	str	r3, [sp, #40]	; 0x28
 8023acc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023ace:	681b      	ldr	r3, [r3, #0]
 8023ad0:	930d      	str	r3, [sp, #52]	; 0x34
 8023ad2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023ad4:	685c      	ldr	r4, [r3, #4]
 8023ad6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023ad8:	3404      	adds	r4, #4
 8023ada:	43db      	mvns	r3, r3
 8023adc:	b2db      	uxtb	r3, r3
 8023ade:	930b      	str	r3, [sp, #44]	; 0x2c
 8023ae0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023ae2:	2b00      	cmp	r3, #0
 8023ae4:	dc03      	bgt.n	8023aee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8023ae6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8023ae8:	2b00      	cmp	r3, #0
 8023aea:	f340 8255 	ble.w	8023f98 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 8023aee:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023af0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023af4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023af8:	1e48      	subs	r0, r1, #1
 8023afa:	1e55      	subs	r5, r2, #1
 8023afc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023afe:	2b00      	cmp	r3, #0
 8023b00:	f340 80f9 	ble.w	8023cf6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8023b04:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8023b06:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023b08:	1436      	asrs	r6, r6, #16
 8023b0a:	ea4f 4323 	mov.w	r3, r3, asr #16
 8023b0e:	d406      	bmi.n	8023b1e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8023b10:	4286      	cmp	r6, r0
 8023b12:	da04      	bge.n	8023b1e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8023b14:	2b00      	cmp	r3, #0
 8023b16:	db02      	blt.n	8023b1e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8023b18:	42ab      	cmp	r3, r5
 8023b1a:	f2c0 80ed 	blt.w	8023cf8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8023b1e:	3601      	adds	r6, #1
 8023b20:	f100 80da 	bmi.w	8023cd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8023b24:	42b1      	cmp	r1, r6
 8023b26:	f2c0 80d7 	blt.w	8023cd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8023b2a:	3301      	adds	r3, #1
 8023b2c:	f100 80d4 	bmi.w	8023cd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8023b30:	429a      	cmp	r2, r3
 8023b32:	f2c0 80d1 	blt.w	8023cd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8023b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023b38:	9311      	str	r3, [sp, #68]	; 0x44
 8023b3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023b3c:	930c      	str	r3, [sp, #48]	; 0x30
 8023b3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023b40:	2b00      	cmp	r3, #0
 8023b42:	f340 80fa 	ble.w	8023d3a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8023b46:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8023b48:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023b4a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8023b4c:	68c6      	ldr	r6, [r0, #12]
 8023b4e:	141d      	asrs	r5, r3, #16
 8023b50:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8023b52:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8023b56:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023b58:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8023b5a:	1400      	asrs	r0, r0, #16
 8023b5c:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8023b60:	6892      	ldr	r2, [r2, #8]
 8023b62:	f100 813e 	bmi.w	8023de2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8023b66:	1e57      	subs	r7, r2, #1
 8023b68:	42b8      	cmp	r0, r7
 8023b6a:	f280 813a 	bge.w	8023de2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8023b6e:	2d00      	cmp	r5, #0
 8023b70:	f2c0 8137 	blt.w	8023de2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8023b74:	1e77      	subs	r7, r6, #1
 8023b76:	42bd      	cmp	r5, r7
 8023b78:	f280 8133 	bge.w	8023de2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8023b7c:	b212      	sxth	r2, r2
 8023b7e:	fb05 0002 	mla	r0, r5, r2, r0
 8023b82:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023b84:	f815 a000 	ldrb.w	sl, [r5, r0]
 8023b88:	182e      	adds	r6, r5, r0
 8023b8a:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8023b8e:	eb04 050a 	add.w	r5, r4, sl
 8023b92:	2b00      	cmp	r3, #0
 8023b94:	f000 8117 	beq.w	8023dc6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8023b98:	f896 c001 	ldrb.w	ip, [r6, #1]
 8023b9c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8023ba0:	44a4      	add	ip, r4
 8023ba2:	2900      	cmp	r1, #0
 8023ba4:	f000 8117 	beq.w	8023dd6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8023ba8:	18b0      	adds	r0, r6, r2
 8023baa:	5cb2      	ldrb	r2, [r6, r2]
 8023bac:	7840      	ldrb	r0, [r0, #1]
 8023bae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023bb2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023bb6:	4422      	add	r2, r4
 8023bb8:	4420      	add	r0, r4
 8023bba:	b29b      	uxth	r3, r3
 8023bbc:	f89c 7002 	ldrb.w	r7, [ip, #2]
 8023bc0:	b289      	uxth	r1, r1
 8023bc2:	f895 b002 	ldrb.w	fp, [r5, #2]
 8023bc6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8023bc8:	fb03 f901 	mul.w	r9, r3, r1
 8023bcc:	011b      	lsls	r3, r3, #4
 8023bce:	f8b6 e000 	ldrh.w	lr, [r6]
 8023bd2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023bd6:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 8023bda:	eba3 0309 	sub.w	r3, r3, r9
 8023bde:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 8023be2:	b289      	uxth	r1, r1
 8023be4:	f814 a00a 	ldrb.w	sl, [r4, sl]
 8023be8:	b29b      	uxth	r3, r3
 8023bea:	eba8 0801 	sub.w	r8, r8, r1
 8023bee:	435f      	muls	r7, r3
 8023bf0:	fa1f f888 	uxth.w	r8, r8
 8023bf4:	9310      	str	r3, [sp, #64]	; 0x40
 8023bf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023bf8:	fb08 770b 	mla	r7, r8, fp, r7
 8023bfc:	f892 b002 	ldrb.w	fp, [r2, #2]
 8023c00:	fb01 770b 	mla	r7, r1, fp, r7
 8023c04:	f890 b002 	ldrb.w	fp, [r0, #2]
 8023c08:	fb09 770b 	mla	r7, r9, fp, r7
 8023c0c:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 8023c10:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8023c14:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8023c18:	fb1b fb03 	smulbb	fp, fp, r3
 8023c1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023c1e:	fb07 b706 	mla	r7, r7, r6, fp
 8023c22:	f895 b001 	ldrb.w	fp, [r5, #1]
 8023c26:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8023c2a:	f89c c000 	ldrb.w	ip, [ip]
 8023c2e:	b2bf      	uxth	r7, r7
 8023c30:	435d      	muls	r5, r3
 8023c32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023c34:	fb08 550b 	mla	r5, r8, fp, r5
 8023c38:	f892 b001 	ldrb.w	fp, [r2, #1]
 8023c3c:	fb01 550b 	mla	r5, r1, fp, r5
 8023c40:	f890 b001 	ldrb.w	fp, [r0, #1]
 8023c44:	fb09 550b 	mla	r5, r9, fp, r5
 8023c48:	ea4f 0bee 	mov.w	fp, lr, asr #3
 8023c4c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8023c50:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8023c54:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8023c58:	fa5f fe8e 	uxtb.w	lr, lr
 8023c5c:	fb1b fb03 	smulbb	fp, fp, r3
 8023c60:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023c62:	fb03 f30c 	mul.w	r3, r3, ip
 8023c66:	f892 c000 	ldrb.w	ip, [r2]
 8023c6a:	fb05 b506 	mla	r5, r5, r6, fp
 8023c6e:	fb08 330a 	mla	r3, r8, sl, r3
 8023c72:	b2ad      	uxth	r5, r5
 8023c74:	fb01 330c 	mla	r3, r1, ip, r3
 8023c78:	f890 c000 	ldrb.w	ip, [r0]
 8023c7c:	f105 0b01 	add.w	fp, r5, #1
 8023c80:	fb09 3c0c 	mla	ip, r9, ip, r3
 8023c84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023c86:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8023c8a:	fb1e fe03 	smulbb	lr, lr, r3
 8023c8e:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8023c92:	1c7b      	adds	r3, r7, #1
 8023c94:	096d      	lsrs	r5, r5, #5
 8023c96:	fb0c e606 	mla	r6, ip, r6, lr
 8023c9a:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8023c9e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8023ca2:	b2b6      	uxth	r6, r6
 8023ca4:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 8023ca8:	1c77      	adds	r7, r6, #1
 8023caa:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8023cae:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8023cb2:	431f      	orrs	r7, r3
 8023cb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023cb6:	433d      	orrs	r5, r7
 8023cb8:	801d      	strh	r5, [r3, #0]
 8023cba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023cbc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023cbe:	3302      	adds	r3, #2
 8023cc0:	930c      	str	r3, [sp, #48]	; 0x30
 8023cc2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023cc4:	4413      	add	r3, r2
 8023cc6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8023cc8:	9327      	str	r3, [sp, #156]	; 0x9c
 8023cca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023ccc:	4413      	add	r3, r2
 8023cce:	9328      	str	r3, [sp, #160]	; 0xa0
 8023cd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023cd2:	3b01      	subs	r3, #1
 8023cd4:	9311      	str	r3, [sp, #68]	; 0x44
 8023cd6:	e732      	b.n	8023b3e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8023cd8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023cda:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 8023cdc:	4433      	add	r3, r6
 8023cde:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 8023ce0:	9327      	str	r3, [sp, #156]	; 0x9c
 8023ce2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023ce4:	4433      	add	r3, r6
 8023ce6:	9328      	str	r3, [sp, #160]	; 0xa0
 8023ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023cea:	3b01      	subs	r3, #1
 8023cec:	9309      	str	r3, [sp, #36]	; 0x24
 8023cee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023cf0:	3302      	adds	r3, #2
 8023cf2:	930a      	str	r3, [sp, #40]	; 0x28
 8023cf4:	e702      	b.n	8023afc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8023cf6:	d027      	beq.n	8023d48 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8023cf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023cfa:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8023cfc:	3b01      	subs	r3, #1
 8023cfe:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8023d00:	fb00 5003 	mla	r0, r0, r3, r5
 8023d04:	1400      	asrs	r0, r0, #16
 8023d06:	f53f af16 	bmi.w	8023b36 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8023d0a:	3901      	subs	r1, #1
 8023d0c:	4288      	cmp	r0, r1
 8023d0e:	f6bf af12 	bge.w	8023b36 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8023d12:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8023d14:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8023d16:	fb01 0303 	mla	r3, r1, r3, r0
 8023d1a:	141b      	asrs	r3, r3, #16
 8023d1c:	f53f af0b 	bmi.w	8023b36 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8023d20:	3a01      	subs	r2, #1
 8023d22:	4293      	cmp	r3, r2
 8023d24:	f6bf af07 	bge.w	8023b36 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8023d28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023d2a:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8023d2e:	9311      	str	r3, [sp, #68]	; 0x44
 8023d30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023d32:	930c      	str	r3, [sp, #48]	; 0x30
 8023d34:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023d36:	2b00      	cmp	r3, #0
 8023d38:	dc70      	bgt.n	8023e1c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8023d3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023d3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023d3e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023d42:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023d46:	930a      	str	r3, [sp, #40]	; 0x28
 8023d48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023d4a:	2b00      	cmp	r3, #0
 8023d4c:	f340 8124 	ble.w	8023f98 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 8023d50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023d54:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023d56:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023d5a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023d5e:	eef0 6a48 	vmov.f32	s13, s16
 8023d62:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023d66:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023d6a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023d6e:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 8023d72:	eef0 6a68 	vmov.f32	s13, s17
 8023d76:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023d7a:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 8023d7e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023d82:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023d86:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023d8a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023d8e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023d92:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023d96:	ee18 2a10 	vmov	r2, s16
 8023d9a:	eeb0 8a47 	vmov.f32	s16, s14
 8023d9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8023da2:	ee18 2a90 	vmov	r2, s17
 8023da6:	9329      	str	r3, [sp, #164]	; 0xa4
 8023da8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023daa:	eef0 8a67 	vmov.f32	s17, s15
 8023dae:	fb92 f3f3 	sdiv	r3, r2, r3
 8023db2:	932a      	str	r3, [sp, #168]	; 0xa8
 8023db4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023db6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8023db8:	3b01      	subs	r3, #1
 8023dba:	930e      	str	r3, [sp, #56]	; 0x38
 8023dbc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023dbe:	bf08      	it	eq
 8023dc0:	4613      	moveq	r3, r2
 8023dc2:	9309      	str	r3, [sp, #36]	; 0x24
 8023dc4:	e68c      	b.n	8023ae0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8023dc6:	b149      	cbz	r1, 8023ddc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 8023dc8:	5cb2      	ldrb	r2, [r6, r2]
 8023dca:	4628      	mov	r0, r5
 8023dcc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023dd0:	4422      	add	r2, r4
 8023dd2:	46ac      	mov	ip, r5
 8023dd4:	e6f1      	b.n	8023bba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8023dd6:	4628      	mov	r0, r5
 8023dd8:	462a      	mov	r2, r5
 8023dda:	e6ee      	b.n	8023bba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8023ddc:	4628      	mov	r0, r5
 8023dde:	462a      	mov	r2, r5
 8023de0:	e7f7      	b.n	8023dd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8023de2:	1c47      	adds	r7, r0, #1
 8023de4:	f53f af69 	bmi.w	8023cba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8023de8:	42ba      	cmp	r2, r7
 8023dea:	f6ff af66 	blt.w	8023cba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8023dee:	1c6f      	adds	r7, r5, #1
 8023df0:	f53f af63 	bmi.w	8023cba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8023df4:	42be      	cmp	r6, r7
 8023df6:	f6ff af60 	blt.w	8023cba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8023dfa:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8023dfc:	b236      	sxth	r6, r6
 8023dfe:	b212      	sxth	r2, r2
 8023e00:	9002      	str	r0, [sp, #8]
 8023e02:	9601      	str	r6, [sp, #4]
 8023e04:	9200      	str	r2, [sp, #0]
 8023e06:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8023e08:	e9cd 1705 	strd	r1, r7, [sp, #20]
 8023e0c:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8023e10:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8023e14:	4623      	mov	r3, r4
 8023e16:	f7ff fd47 	bl	80238a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 8023e1a:	e74e      	b.n	8023cba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8023e1c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8023e1e:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8023e20:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8023e24:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8023e26:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8023e28:	1400      	asrs	r0, r0, #16
 8023e2a:	142d      	asrs	r5, r5, #16
 8023e2c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023e2e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8023e32:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8023e36:	fb02 5000 	mla	r0, r2, r0, r5
 8023e3a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023e3c:	f815 9000 	ldrb.w	r9, [r5, r0]
 8023e40:	182e      	adds	r6, r5, r0
 8023e42:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8023e46:	eb04 0509 	add.w	r5, r4, r9
 8023e4a:	2b00      	cmp	r3, #0
 8023e4c:	f000 8096 	beq.w	8023f7c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fc>
 8023e50:	7877      	ldrb	r7, [r6, #1]
 8023e52:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8023e56:	4427      	add	r7, r4
 8023e58:	2900      	cmp	r1, #0
 8023e5a:	f000 8097 	beq.w	8023f8c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 8023e5e:	18b0      	adds	r0, r6, r2
 8023e60:	5cb2      	ldrb	r2, [r6, r2]
 8023e62:	7840      	ldrb	r0, [r0, #1]
 8023e64:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023e68:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023e6c:	4422      	add	r2, r4
 8023e6e:	4420      	add	r0, r4
 8023e70:	b29b      	uxth	r3, r3
 8023e72:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8023e74:	b289      	uxth	r1, r1
 8023e76:	f895 b002 	ldrb.w	fp, [r5, #2]
 8023e7a:	f8b6 c000 	ldrh.w	ip, [r6]
 8023e7e:	fb03 f801 	mul.w	r8, r3, r1
 8023e82:	011b      	lsls	r3, r3, #4
 8023e84:	78be      	ldrb	r6, [r7, #2]
 8023e86:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8023e8a:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8023e8e:	eba3 0308 	sub.w	r3, r3, r8
 8023e92:	f814 9009 	ldrb.w	r9, [r4, r9]
 8023e96:	b289      	uxth	r1, r1
 8023e98:	b29b      	uxth	r3, r3
 8023e9a:	ebae 0e01 	sub.w	lr, lr, r1
 8023e9e:	435e      	muls	r6, r3
 8023ea0:	fa1f fe8e 	uxth.w	lr, lr
 8023ea4:	9310      	str	r3, [sp, #64]	; 0x40
 8023ea6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023ea8:	fb0e 660b 	mla	r6, lr, fp, r6
 8023eac:	f892 b002 	ldrb.w	fp, [r2, #2]
 8023eb0:	fb01 660b 	mla	r6, r1, fp, r6
 8023eb4:	f890 b002 	ldrb.w	fp, [r0, #2]
 8023eb8:	fb08 660b 	mla	r6, r8, fp, r6
 8023ebc:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 8023ec0:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8023ec4:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8023ec8:	fb1b fb03 	smulbb	fp, fp, r3
 8023ecc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023ece:	fb06 b60a 	mla	r6, r6, sl, fp
 8023ed2:	f895 b001 	ldrb.w	fp, [r5, #1]
 8023ed6:	787d      	ldrb	r5, [r7, #1]
 8023ed8:	783f      	ldrb	r7, [r7, #0]
 8023eda:	b2b6      	uxth	r6, r6
 8023edc:	435d      	muls	r5, r3
 8023ede:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023ee0:	fb0e 550b 	mla	r5, lr, fp, r5
 8023ee4:	f892 b001 	ldrb.w	fp, [r2, #1]
 8023ee8:	fb01 550b 	mla	r5, r1, fp, r5
 8023eec:	f890 b001 	ldrb.w	fp, [r0, #1]
 8023ef0:	fb08 550b 	mla	r5, r8, fp, r5
 8023ef4:	ea4f 0bec 	mov.w	fp, ip, asr #3
 8023ef8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8023efc:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8023f00:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8023f04:	fa5f fc8c 	uxtb.w	ip, ip
 8023f08:	fb1b fb03 	smulbb	fp, fp, r3
 8023f0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023f0e:	437b      	muls	r3, r7
 8023f10:	7817      	ldrb	r7, [r2, #0]
 8023f12:	fb05 b50a 	mla	r5, r5, sl, fp
 8023f16:	fb0e 3309 	mla	r3, lr, r9, r3
 8023f1a:	b2ad      	uxth	r5, r5
 8023f1c:	fb01 3307 	mla	r3, r1, r7, r3
 8023f20:	7807      	ldrb	r7, [r0, #0]
 8023f22:	f105 0b01 	add.w	fp, r5, #1
 8023f26:	fb08 3707 	mla	r7, r8, r7, r3
 8023f2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023f2c:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8023f30:	fb1c fc03 	smulbb	ip, ip, r3
 8023f34:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8023f38:	1c73      	adds	r3, r6, #1
 8023f3a:	096d      	lsrs	r5, r5, #5
 8023f3c:	fb07 c70a 	mla	r7, r7, sl, ip
 8023f40:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8023f44:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8023f48:	b2bf      	uxth	r7, r7
 8023f4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023f4c:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8023f50:	1c7a      	adds	r2, r7, #1
 8023f52:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8023f56:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8023f5a:	4316      	orrs	r6, r2
 8023f5c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023f5e:	432e      	orrs	r6, r5
 8023f60:	f823 6b02 	strh.w	r6, [r3], #2
 8023f64:	930c      	str	r3, [sp, #48]	; 0x30
 8023f66:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023f68:	4413      	add	r3, r2
 8023f6a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8023f6c:	9327      	str	r3, [sp, #156]	; 0x9c
 8023f6e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023f70:	4413      	add	r3, r2
 8023f72:	9328      	str	r3, [sp, #160]	; 0xa0
 8023f74:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023f76:	3b01      	subs	r3, #1
 8023f78:	9311      	str	r3, [sp, #68]	; 0x44
 8023f7a:	e6db      	b.n	8023d34 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 8023f7c:	b149      	cbz	r1, 8023f92 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8023f7e:	5cb2      	ldrb	r2, [r6, r2]
 8023f80:	4628      	mov	r0, r5
 8023f82:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023f86:	4422      	add	r2, r4
 8023f88:	462f      	mov	r7, r5
 8023f8a:	e771      	b.n	8023e70 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8023f8c:	4628      	mov	r0, r5
 8023f8e:	462a      	mov	r2, r5
 8023f90:	e76e      	b.n	8023e70 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8023f92:	4628      	mov	r0, r5
 8023f94:	462a      	mov	r2, r5
 8023f96:	e7f7      	b.n	8023f88 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 8023f98:	b015      	add	sp, #84	; 0x54
 8023f9a:	ecbd 8b08 	vpop	{d8-d11}
 8023f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08023fa4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 8023fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023fa8:	880e      	ldrh	r6, [r1, #0]
 8023faa:	b085      	sub	sp, #20
 8023fac:	4691      	mov	r9, r2
 8023fae:	0230      	lsls	r0, r6, #8
 8023fb0:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8023fb4:	9101      	str	r1, [sp, #4]
 8023fb6:	f400 0b78 	and.w	fp, r0, #16252928	; 0xf80000
 8023fba:	0170      	lsls	r0, r6, #5
 8023fbc:	00f6      	lsls	r6, r6, #3
 8023fbe:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8023fc2:	f400 407c 	and.w	r0, r0, #64512	; 0xfc00
 8023fc6:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8023fca:	b2f6      	uxtb	r6, r6
 8023fcc:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8023fd0:	ea4b 0000 	orr.w	r0, fp, r0
 8023fd4:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 8023fd8:	4306      	orrs	r6, r0
 8023fda:	fb05 7a0c 	mla	sl, r5, ip, r7
 8023fde:	2d00      	cmp	r5, #0
 8023fe0:	9603      	str	r6, [sp, #12]
 8023fe2:	eb09 0e0a 	add.w	lr, r9, sl
 8023fe6:	db42      	blt.n	802406e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xca>
 8023fe8:	45a8      	cmp	r8, r5
 8023fea:	dd40      	ble.n	802406e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xca>
 8023fec:	2f00      	cmp	r7, #0
 8023fee:	db3c      	blt.n	802406a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc6>
 8023ff0:	45bc      	cmp	ip, r7
 8023ff2:	dd3a      	ble.n	802406a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc6>
 8023ff4:	f819 600a 	ldrb.w	r6, [r9, sl]
 8023ff8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8023ffc:	441e      	add	r6, r3
 8023ffe:	1c78      	adds	r0, r7, #1
 8024000:	d438      	bmi.n	8024074 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 8024002:	4584      	cmp	ip, r0
 8024004:	dd36      	ble.n	8024074 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 8024006:	b3aa      	cbz	r2, 8024074 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 8024008:	f89e 0001 	ldrb.w	r0, [lr, #1]
 802400c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024010:	4418      	add	r0, r3
 8024012:	3501      	adds	r5, #1
 8024014:	d432      	bmi.n	802407c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 8024016:	45a8      	cmp	r8, r5
 8024018:	dd30      	ble.n	802407c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 802401a:	b37c      	cbz	r4, 802407c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 802401c:	2f00      	cmp	r7, #0
 802401e:	db2b      	blt.n	8024078 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd4>
 8024020:	45bc      	cmp	ip, r7
 8024022:	dd29      	ble.n	8024078 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd4>
 8024024:	f81e 500c 	ldrb.w	r5, [lr, ip]
 8024028:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802402c:	441d      	add	r5, r3
 802402e:	3701      	adds	r7, #1
 8024030:	d427      	bmi.n	8024082 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 8024032:	45bc      	cmp	ip, r7
 8024034:	dd25      	ble.n	8024082 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 8024036:	b322      	cbz	r2, 8024082 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 8024038:	44f4      	add	ip, lr
 802403a:	f89c 7001 	ldrb.w	r7, [ip, #1]
 802403e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8024042:	443b      	add	r3, r7
 8024044:	781f      	ldrb	r7, [r3, #0]
 8024046:	2a0f      	cmp	r2, #15
 8024048:	f896 9000 	ldrb.w	r9, [r6]
 802404c:	f890 a000 	ldrb.w	sl, [r0]
 8024050:	4639      	mov	r1, r7
 8024052:	f895 8000 	ldrb.w	r8, [r5]
 8024056:	d801      	bhi.n	802405c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xb8>
 8024058:	2c0f      	cmp	r4, #15
 802405a:	d914      	bls.n	8024086 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xe2>
 802405c:	4b2c      	ldr	r3, [pc, #176]	; (8024110 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x16c>)
 802405e:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8024062:	4a2c      	ldr	r2, [pc, #176]	; (8024114 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x170>)
 8024064:	482c      	ldr	r0, [pc, #176]	; (8024118 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x174>)
 8024066:	f005 ffbd 	bl	8029fe4 <__assert_func>
 802406a:	ae03      	add	r6, sp, #12
 802406c:	e7c7      	b.n	8023ffe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x5a>
 802406e:	a803      	add	r0, sp, #12
 8024070:	4606      	mov	r6, r0
 8024072:	e7ce      	b.n	8024012 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8024074:	a803      	add	r0, sp, #12
 8024076:	e7cc      	b.n	8024012 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8024078:	ad03      	add	r5, sp, #12
 802407a:	e7d8      	b.n	802402e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8a>
 802407c:	ab03      	add	r3, sp, #12
 802407e:	461d      	mov	r5, r3
 8024080:	e7e0      	b.n	8024044 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa0>
 8024082:	ab03      	add	r3, sp, #12
 8024084:	e7de      	b.n	8024044 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa0>
 8024086:	b292      	uxth	r2, r2
 8024088:	f890 c002 	ldrb.w	ip, [r0, #2]
 802408c:	b2a4      	uxth	r4, r4
 802408e:	f896 b002 	ldrb.w	fp, [r6, #2]
 8024092:	7840      	ldrb	r0, [r0, #1]
 8024094:	fb02 fe04 	mul.w	lr, r2, r4
 8024098:	0112      	lsls	r2, r2, #4
 802409a:	7876      	ldrb	r6, [r6, #1]
 802409c:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 80240a0:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 80240a4:	eba2 020e 	sub.w	r2, r2, lr
 80240a8:	b2a4      	uxth	r4, r4
 80240aa:	b292      	uxth	r2, r2
 80240ac:	1b3f      	subs	r7, r7, r4
 80240ae:	fb02 fc0c 	mul.w	ip, r2, ip
 80240b2:	b2bf      	uxth	r7, r7
 80240b4:	fb07 cc0b 	mla	ip, r7, fp, ip
 80240b8:	f895 b002 	ldrb.w	fp, [r5, #2]
 80240bc:	fb04 cc0b 	mla	ip, r4, fp, ip
 80240c0:	f893 b002 	ldrb.w	fp, [r3, #2]
 80240c4:	785b      	ldrb	r3, [r3, #1]
 80240c6:	fb0e cc0b 	mla	ip, lr, fp, ip
 80240ca:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 80240ce:	fb02 fc0a 	mul.w	ip, r2, sl
 80240d2:	4342      	muls	r2, r0
 80240d4:	7868      	ldrb	r0, [r5, #1]
 80240d6:	fb07 cc09 	mla	ip, r7, r9, ip
 80240da:	fb07 2206 	mla	r2, r7, r6, r2
 80240de:	fb04 cc08 	mla	ip, r4, r8, ip
 80240e2:	fb04 2400 	mla	r4, r4, r0, r2
 80240e6:	fb0e cc01 	mla	ip, lr, r1, ip
 80240ea:	fb0e 4e03 	mla	lr, lr, r3, r4
 80240ee:	9b01      	ldr	r3, [sp, #4]
 80240f0:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80240f4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80240f8:	ea4c 0c0b 	orr.w	ip, ip, fp
 80240fc:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8024100:	ea4c 0c0e 	orr.w	ip, ip, lr
 8024104:	f8a3 c000 	strh.w	ip, [r3]
 8024108:	b005      	add	sp, #20
 802410a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802410e:	bf00      	nop
 8024110:	0802f359 	.word	0x0802f359
 8024114:	0802f926 	.word	0x0802f926
 8024118:	0802f3dd 	.word	0x0802f3dd

0802411c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802411c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024120:	ed2d 8b08 	vpush	{d8-d11}
 8024124:	b08f      	sub	sp, #60	; 0x3c
 8024126:	eeb0 aa40 	vmov.f32	s20, s0
 802412a:	eef0 9a60 	vmov.f32	s19, s1
 802412e:	920c      	str	r2, [sp, #48]	; 0x30
 8024130:	eeb0 9a41 	vmov.f32	s18, s2
 8024134:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8024136:	eeb0 8a62 	vmov.f32	s16, s5
 802413a:	900d      	str	r0, [sp, #52]	; 0x34
 802413c:	eef0 8a43 	vmov.f32	s17, s6
 8024140:	6850      	ldr	r0, [r2, #4]
 8024142:	eef0 ba44 	vmov.f32	s23, s8
 8024146:	910a      	str	r1, [sp, #40]	; 0x28
 8024148:	eeb0 ba64 	vmov.f32	s22, s9
 802414c:	9306      	str	r3, [sp, #24]
 802414e:	eef0 aa45 	vmov.f32	s21, s10
 8024152:	6812      	ldr	r2, [r2, #0]
 8024154:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8024158:	e9dd b521 	ldrd	fp, r5, [sp, #132]	; 0x84
 802415c:	fb00 1303 	mla	r3, r0, r3, r1
 8024160:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024164:	9307      	str	r3, [sp, #28]
 8024166:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024168:	681b      	ldr	r3, [r3, #0]
 802416a:	9308      	str	r3, [sp, #32]
 802416c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802416e:	685c      	ldr	r4, [r3, #4]
 8024170:	3404      	adds	r4, #4
 8024172:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024174:	2b00      	cmp	r3, #0
 8024176:	dc03      	bgt.n	8024180 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8024178:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802417a:	2b00      	cmp	r3, #0
 802417c:	f340 81d5 	ble.w	802452a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 8024180:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024182:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024186:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802418a:	1e48      	subs	r0, r1, #1
 802418c:	1e56      	subs	r6, r2, #1
 802418e:	9b06      	ldr	r3, [sp, #24]
 8024190:	2b00      	cmp	r3, #0
 8024192:	f340 80b6 	ble.w	8024302 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8024196:	ea5f 472b 	movs.w	r7, fp, asr #16
 802419a:	ea4f 4325 	mov.w	r3, r5, asr #16
 802419e:	d406      	bmi.n	80241ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80241a0:	4287      	cmp	r7, r0
 80241a2:	da04      	bge.n	80241ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80241a4:	2b00      	cmp	r3, #0
 80241a6:	db02      	blt.n	80241ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80241a8:	42b3      	cmp	r3, r6
 80241aa:	f2c0 80ab 	blt.w	8024304 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80241ae:	3701      	adds	r7, #1
 80241b0:	f100 809c 	bmi.w	80242ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 80241b4:	42b9      	cmp	r1, r7
 80241b6:	f2c0 8099 	blt.w	80242ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 80241ba:	3301      	adds	r3, #1
 80241bc:	f100 8096 	bmi.w	80242ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 80241c0:	429a      	cmp	r2, r3
 80241c2:	f2c0 8093 	blt.w	80242ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 80241c6:	9b06      	ldr	r3, [sp, #24]
 80241c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80241ca:	9b07      	ldr	r3, [sp, #28]
 80241cc:	9309      	str	r3, [sp, #36]	; 0x24
 80241ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80241d0:	2b00      	cmp	r3, #0
 80241d2:	f340 80b4 	ble.w	802433e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 80241d6:	9828      	ldr	r0, [sp, #160]	; 0xa0
 80241d8:	142e      	asrs	r6, r5, #16
 80241da:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80241dc:	f3cb 3303 	ubfx	r3, fp, #12, #4
 80241e0:	68c7      	ldr	r7, [r0, #12]
 80241e2:	ea5f 402b 	movs.w	r0, fp, asr #16
 80241e6:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80241ea:	6892      	ldr	r2, [r2, #8]
 80241ec:	f100 80fb 	bmi.w	80243e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 80241f0:	f102 3cff 	add.w	ip, r2, #4294967295
 80241f4:	4560      	cmp	r0, ip
 80241f6:	f280 80f6 	bge.w	80243e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 80241fa:	2e00      	cmp	r6, #0
 80241fc:	f2c0 80f3 	blt.w	80243e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8024200:	f107 3cff 	add.w	ip, r7, #4294967295
 8024204:	4566      	cmp	r6, ip
 8024206:	f280 80ee 	bge.w	80243e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 802420a:	b212      	sxth	r2, r2
 802420c:	fb06 0002 	mla	r0, r6, r2, r0
 8024210:	9e08      	ldr	r6, [sp, #32]
 8024212:	1837      	adds	r7, r6, r0
 8024214:	5c30      	ldrb	r0, [r6, r0]
 8024216:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 802421a:	eb04 0c08 	add.w	ip, r4, r8
 802421e:	2b00      	cmp	r3, #0
 8024220:	f000 80d3 	beq.w	80243ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 8024224:	787e      	ldrb	r6, [r7, #1]
 8024226:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802422a:	4426      	add	r6, r4
 802422c:	2900      	cmp	r1, #0
 802422e:	f000 80d4 	beq.w	80243da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 8024232:	18b8      	adds	r0, r7, r2
 8024234:	5cba      	ldrb	r2, [r7, r2]
 8024236:	7840      	ldrb	r0, [r0, #1]
 8024238:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802423c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024240:	4422      	add	r2, r4
 8024242:	4420      	add	r0, r4
 8024244:	b29b      	uxth	r3, r3
 8024246:	78b7      	ldrb	r7, [r6, #2]
 8024248:	b289      	uxth	r1, r1
 802424a:	f89c a002 	ldrb.w	sl, [ip, #2]
 802424e:	f89c c001 	ldrb.w	ip, [ip, #1]
 8024252:	fb03 f901 	mul.w	r9, r3, r1
 8024256:	011b      	lsls	r3, r3, #4
 8024258:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802425c:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8024260:	eba3 0309 	sub.w	r3, r3, r9
 8024264:	b289      	uxth	r1, r1
 8024266:	b29b      	uxth	r3, r3
 8024268:	ebae 0e01 	sub.w	lr, lr, r1
 802426c:	435f      	muls	r7, r3
 802426e:	fa1f fe8e 	uxth.w	lr, lr
 8024272:	fb0e 770a 	mla	r7, lr, sl, r7
 8024276:	f892 a002 	ldrb.w	sl, [r2, #2]
 802427a:	fb01 770a 	mla	r7, r1, sl, r7
 802427e:	f890 a002 	ldrb.w	sl, [r0, #2]
 8024282:	fb09 7a0a 	mla	sl, r9, sl, r7
 8024286:	f814 7008 	ldrb.w	r7, [r4, r8]
 802428a:	f896 8000 	ldrb.w	r8, [r6]
 802428e:	7876      	ldrb	r6, [r6, #1]
 8024290:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8024294:	fb03 f808 	mul.w	r8, r3, r8
 8024298:	4373      	muls	r3, r6
 802429a:	fb0e 8807 	mla	r8, lr, r7, r8
 802429e:	7817      	ldrb	r7, [r2, #0]
 80242a0:	fb0e 330c 	mla	r3, lr, ip, r3
 80242a4:	fb01 8807 	mla	r8, r1, r7, r8
 80242a8:	7807      	ldrb	r7, [r0, #0]
 80242aa:	fb09 8707 	mla	r7, r9, r7, r8
 80242ae:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80242b2:	ea47 070a 	orr.w	r7, r7, sl
 80242b6:	f892 a001 	ldrb.w	sl, [r2, #1]
 80242ba:	fb01 310a 	mla	r1, r1, sl, r3
 80242be:	f890 a001 	ldrb.w	sl, [r0, #1]
 80242c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80242c4:	fb09 1a0a 	mla	sl, r9, sl, r1
 80242c8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80242cc:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80242d0:	ea47 070a 	orr.w	r7, r7, sl
 80242d4:	801f      	strh	r7, [r3, #0]
 80242d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80242d8:	3302      	adds	r3, #2
 80242da:	9309      	str	r3, [sp, #36]	; 0x24
 80242dc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80242de:	449b      	add	fp, r3
 80242e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80242e2:	441d      	add	r5, r3
 80242e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80242e6:	3b01      	subs	r3, #1
 80242e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80242ea:	e770      	b.n	80241ce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80242ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80242ee:	449b      	add	fp, r3
 80242f0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80242f2:	441d      	add	r5, r3
 80242f4:	9b06      	ldr	r3, [sp, #24]
 80242f6:	3b01      	subs	r3, #1
 80242f8:	9306      	str	r3, [sp, #24]
 80242fa:	9b07      	ldr	r3, [sp, #28]
 80242fc:	3302      	adds	r3, #2
 80242fe:	9307      	str	r3, [sp, #28]
 8024300:	e745      	b.n	802418e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8024302:	d023      	beq.n	802434c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8024304:	9b06      	ldr	r3, [sp, #24]
 8024306:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8024308:	3b01      	subs	r3, #1
 802430a:	fb00 b003 	mla	r0, r0, r3, fp
 802430e:	1400      	asrs	r0, r0, #16
 8024310:	f53f af59 	bmi.w	80241c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8024314:	3901      	subs	r1, #1
 8024316:	4288      	cmp	r0, r1
 8024318:	f6bf af55 	bge.w	80241c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 802431c:	9924      	ldr	r1, [sp, #144]	; 0x90
 802431e:	fb01 5303 	mla	r3, r1, r3, r5
 8024322:	141b      	asrs	r3, r3, #16
 8024324:	f53f af4f 	bmi.w	80241c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8024328:	3a01      	subs	r2, #1
 802432a:	4293      	cmp	r3, r2
 802432c:	f6bf af4b 	bge.w	80241c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8024330:	9b06      	ldr	r3, [sp, #24]
 8024332:	9309      	str	r3, [sp, #36]	; 0x24
 8024334:	9b07      	ldr	r3, [sp, #28]
 8024336:	930b      	str	r3, [sp, #44]	; 0x2c
 8024338:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802433a:	2b00      	cmp	r3, #0
 802433c:	dc70      	bgt.n	8024420 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 802433e:	9b06      	ldr	r3, [sp, #24]
 8024340:	9a07      	ldr	r2, [sp, #28]
 8024342:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8024346:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802434a:	9307      	str	r3, [sp, #28]
 802434c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802434e:	2b00      	cmp	r3, #0
 8024350:	f340 80eb 	ble.w	802452a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 8024354:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024358:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802435a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802435e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8024362:	eef0 6a48 	vmov.f32	s13, s16
 8024366:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802436a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802436e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024372:	ee16 ba90 	vmov	fp, s13
 8024376:	eef0 6a68 	vmov.f32	s13, s17
 802437a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802437e:	ee16 5a90 	vmov	r5, s13
 8024382:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024386:	ee69 7a27 	vmul.f32	s15, s18, s15
 802438a:	ee37 8a48 	vsub.f32	s16, s14, s16
 802438e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024392:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024396:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802439a:	ee18 2a10 	vmov	r2, s16
 802439e:	eeb0 8a47 	vmov.f32	s16, s14
 80243a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80243a6:	ee18 2a90 	vmov	r2, s17
 80243aa:	9323      	str	r3, [sp, #140]	; 0x8c
 80243ac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80243ae:	eef0 8a67 	vmov.f32	s17, s15
 80243b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80243b6:	9324      	str	r3, [sp, #144]	; 0x90
 80243b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80243ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80243bc:	3b01      	subs	r3, #1
 80243be:	930a      	str	r3, [sp, #40]	; 0x28
 80243c0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80243c2:	bf08      	it	eq
 80243c4:	4613      	moveq	r3, r2
 80243c6:	9306      	str	r3, [sp, #24]
 80243c8:	e6d3      	b.n	8024172 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 80243ca:	b149      	cbz	r1, 80243e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c4>
 80243cc:	5cba      	ldrb	r2, [r7, r2]
 80243ce:	4660      	mov	r0, ip
 80243d0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80243d4:	4422      	add	r2, r4
 80243d6:	4666      	mov	r6, ip
 80243d8:	e734      	b.n	8024244 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 80243da:	4660      	mov	r0, ip
 80243dc:	4662      	mov	r2, ip
 80243de:	e731      	b.n	8024244 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 80243e0:	4660      	mov	r0, ip
 80243e2:	4662      	mov	r2, ip
 80243e4:	e7f7      	b.n	80243d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 80243e6:	f110 0c01 	adds.w	ip, r0, #1
 80243ea:	f53f af74 	bmi.w	80242d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80243ee:	4562      	cmp	r2, ip
 80243f0:	f6ff af71 	blt.w	80242d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80243f4:	f116 0c01 	adds.w	ip, r6, #1
 80243f8:	f53f af6d 	bmi.w	80242d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80243fc:	4567      	cmp	r7, ip
 80243fe:	f6ff af6a 	blt.w	80242d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8024402:	b23f      	sxth	r7, r7
 8024404:	b212      	sxth	r2, r2
 8024406:	9701      	str	r7, [sp, #4]
 8024408:	9200      	str	r2, [sp, #0]
 802440a:	e9cd 3104 	strd	r3, r1, [sp, #16]
 802440e:	e9cd 0602 	strd	r0, r6, [sp, #8]
 8024412:	4623      	mov	r3, r4
 8024414:	980d      	ldr	r0, [sp, #52]	; 0x34
 8024416:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 802441a:	f7ff fdc3 	bl	8023fa4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 802441e:	e75a      	b.n	80242d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8024420:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8024422:	ea4f 462b 	mov.w	r6, fp, asr #16
 8024426:	1428      	asrs	r0, r5, #16
 8024428:	f3cb 3303 	ubfx	r3, fp, #12, #4
 802442c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8024430:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8024434:	fb02 6000 	mla	r0, r2, r0, r6
 8024438:	9e08      	ldr	r6, [sp, #32]
 802443a:	f816 8000 	ldrb.w	r8, [r6, r0]
 802443e:	1837      	adds	r7, r6, r0
 8024440:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8024444:	eb04 0c08 	add.w	ip, r4, r8
 8024448:	2b00      	cmp	r3, #0
 802444a:	d060      	beq.n	802450e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 802444c:	787e      	ldrb	r6, [r7, #1]
 802444e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8024452:	4426      	add	r6, r4
 8024454:	2900      	cmp	r1, #0
 8024456:	d062      	beq.n	802451e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x402>
 8024458:	18b8      	adds	r0, r7, r2
 802445a:	5cba      	ldrb	r2, [r7, r2]
 802445c:	7840      	ldrb	r0, [r0, #1]
 802445e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024462:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024466:	4422      	add	r2, r4
 8024468:	4420      	add	r0, r4
 802446a:	b29b      	uxth	r3, r3
 802446c:	78b7      	ldrb	r7, [r6, #2]
 802446e:	b289      	uxth	r1, r1
 8024470:	f89c a002 	ldrb.w	sl, [ip, #2]
 8024474:	f89c c001 	ldrb.w	ip, [ip, #1]
 8024478:	fb03 f901 	mul.w	r9, r3, r1
 802447c:	011b      	lsls	r3, r3, #4
 802447e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8024482:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8024486:	eba3 0309 	sub.w	r3, r3, r9
 802448a:	b289      	uxth	r1, r1
 802448c:	b29b      	uxth	r3, r3
 802448e:	ebae 0e01 	sub.w	lr, lr, r1
 8024492:	435f      	muls	r7, r3
 8024494:	fa1f fe8e 	uxth.w	lr, lr
 8024498:	fb0e 770a 	mla	r7, lr, sl, r7
 802449c:	f892 a002 	ldrb.w	sl, [r2, #2]
 80244a0:	fb01 770a 	mla	r7, r1, sl, r7
 80244a4:	f890 a002 	ldrb.w	sl, [r0, #2]
 80244a8:	fb09 7a0a 	mla	sl, r9, sl, r7
 80244ac:	f814 7008 	ldrb.w	r7, [r4, r8]
 80244b0:	f896 8000 	ldrb.w	r8, [r6]
 80244b4:	7876      	ldrb	r6, [r6, #1]
 80244b6:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 80244ba:	fb03 f808 	mul.w	r8, r3, r8
 80244be:	4373      	muls	r3, r6
 80244c0:	7856      	ldrb	r6, [r2, #1]
 80244c2:	fb0e 8807 	mla	r8, lr, r7, r8
 80244c6:	7817      	ldrb	r7, [r2, #0]
 80244c8:	fb0e 330c 	mla	r3, lr, ip, r3
 80244cc:	fb01 8807 	mla	r8, r1, r7, r8
 80244d0:	7807      	ldrb	r7, [r0, #0]
 80244d2:	fb01 3306 	mla	r3, r1, r6, r3
 80244d6:	fb09 8707 	mla	r7, r9, r7, r8
 80244da:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80244de:	ea47 070a 	orr.w	r7, r7, sl
 80244e2:	f890 a001 	ldrb.w	sl, [r0, #1]
 80244e6:	fb09 3a0a 	mla	sl, r9, sl, r3
 80244ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80244ec:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80244f0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80244f4:	ea47 070a 	orr.w	r7, r7, sl
 80244f8:	f823 7b02 	strh.w	r7, [r3], #2
 80244fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80244fe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8024500:	449b      	add	fp, r3
 8024502:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024504:	441d      	add	r5, r3
 8024506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024508:	3b01      	subs	r3, #1
 802450a:	9309      	str	r3, [sp, #36]	; 0x24
 802450c:	e714      	b.n	8024338 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21c>
 802450e:	b149      	cbz	r1, 8024524 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x408>
 8024510:	5cba      	ldrb	r2, [r7, r2]
 8024512:	4660      	mov	r0, ip
 8024514:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024518:	4422      	add	r2, r4
 802451a:	4666      	mov	r6, ip
 802451c:	e7a5      	b.n	802446a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 802451e:	4660      	mov	r0, ip
 8024520:	4662      	mov	r2, ip
 8024522:	e7a2      	b.n	802446a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8024524:	4660      	mov	r0, ip
 8024526:	4662      	mov	r2, ip
 8024528:	e7f7      	b.n	802451a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fe>
 802452a:	b00f      	add	sp, #60	; 0x3c
 802452c:	ecbd 8b08 	vpop	{d8-d11}
 8024530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024534 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 8024534:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024538:	e9dd 540e 	ldrd	r5, r4, [sp, #56]	; 0x38
 802453c:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8024540:	2c00      	cmp	r4, #0
 8024542:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 8024546:	fb04 560c 	mla	r6, r4, ip, r5
 802454a:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 802454e:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 8024552:	eb02 0e06 	add.w	lr, r2, r6
 8024556:	db3d      	blt.n	80245d4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa0>
 8024558:	45a0      	cmp	r8, r4
 802455a:	dd3b      	ble.n	80245d4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa0>
 802455c:	2d00      	cmp	r5, #0
 802455e:	db37      	blt.n	80245d0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9c>
 8024560:	45ac      	cmp	ip, r5
 8024562:	dd35      	ble.n	80245d0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9c>
 8024564:	5d92      	ldrb	r2, [r2, r6]
 8024566:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802456a:	1c6e      	adds	r6, r5, #1
 802456c:	d435      	bmi.n	80245da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 802456e:	45b4      	cmp	ip, r6
 8024570:	dd33      	ble.n	80245da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 8024572:	b3a0      	cbz	r0, 80245de <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xaa>
 8024574:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8024578:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 802457c:	3401      	adds	r4, #1
 802457e:	d432      	bmi.n	80245e6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb2>
 8024580:	45a0      	cmp	r8, r4
 8024582:	dd30      	ble.n	80245e6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb2>
 8024584:	b397      	cbz	r7, 80245ec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb8>
 8024586:	2d00      	cmp	r5, #0
 8024588:	db2b      	blt.n	80245e2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xae>
 802458a:	45ac      	cmp	ip, r5
 802458c:	dd29      	ble.n	80245e2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xae>
 802458e:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8024592:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8024596:	3501      	adds	r5, #1
 8024598:	d42b      	bmi.n	80245f2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 802459a:	45ac      	cmp	ip, r5
 802459c:	dd29      	ble.n	80245f2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 802459e:	b350      	cbz	r0, 80245f6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc2>
 80245a0:	44f4      	add	ip, lr
 80245a2:	f89c 5001 	ldrb.w	r5, [ip, #1]
 80245a6:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80245aa:	280f      	cmp	r0, #15
 80245ac:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80245b0:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80245b4:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80245b8:	ea4f 6813 	mov.w	r8, r3, lsr #24
 80245bc:	d801      	bhi.n	80245c2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x8e>
 80245be:	2f0f      	cmp	r7, #15
 80245c0:	d91b      	bls.n	80245fa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc6>
 80245c2:	4b8d      	ldr	r3, [pc, #564]	; (80247f8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c4>)
 80245c4:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 80245c8:	4a8c      	ldr	r2, [pc, #560]	; (80247fc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c8>)
 80245ca:	488d      	ldr	r0, [pc, #564]	; (8024800 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2cc>)
 80245cc:	f005 fd0a 	bl	8029fe4 <__assert_func>
 80245d0:	2200      	movs	r2, #0
 80245d2:	e7ca      	b.n	802456a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x36>
 80245d4:	2600      	movs	r6, #0
 80245d6:	4632      	mov	r2, r6
 80245d8:	e7d0      	b.n	802457c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 80245da:	2600      	movs	r6, #0
 80245dc:	e7ce      	b.n	802457c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 80245de:	4606      	mov	r6, r0
 80245e0:	e7cc      	b.n	802457c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 80245e2:	2400      	movs	r4, #0
 80245e4:	e7d7      	b.n	8024596 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x62>
 80245e6:	2300      	movs	r3, #0
 80245e8:	461c      	mov	r4, r3
 80245ea:	e7de      	b.n	80245aa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 80245ec:	463b      	mov	r3, r7
 80245ee:	463c      	mov	r4, r7
 80245f0:	e7db      	b.n	80245aa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 80245f2:	2300      	movs	r3, #0
 80245f4:	e7d9      	b.n	80245aa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 80245f6:	4603      	mov	r3, r0
 80245f8:	e7d7      	b.n	80245aa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 80245fa:	b280      	uxth	r0, r0
 80245fc:	b2bf      	uxth	r7, r7
 80245fe:	fb07 fe00 	mul.w	lr, r7, r0
 8024602:	0100      	lsls	r0, r0, #4
 8024604:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8024608:	eba0 0c0e 	sub.w	ip, r0, lr
 802460c:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8024610:	b2bf      	uxth	r7, r7
 8024612:	fa1f fc8c 	uxth.w	ip, ip
 8024616:	1bed      	subs	r5, r5, r7
 8024618:	fb0a f00c 	mul.w	r0, sl, ip
 802461c:	b2ad      	uxth	r5, r5
 802461e:	fb0b 0005 	mla	r0, fp, r5, r0
 8024622:	fb07 0009 	mla	r0, r7, r9, r0
 8024626:	fb0e 0008 	mla	r0, lr, r8, r0
 802462a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802462e:	9001      	str	r0, [sp, #4]
 8024630:	2800      	cmp	r0, #0
 8024632:	f000 80de 	beq.w	80247f2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2be>
 8024636:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 802463a:	d018      	beq.n	802466e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x13a>
 802463c:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8024640:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024644:	fb0b f000 	mul.w	r0, fp, r0
 8024648:	fb0b fb02 	mul.w	fp, fp, r2
 802464c:	0a02      	lsrs	r2, r0, #8
 802464e:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8024652:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024656:	4402      	add	r2, r0
 8024658:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 802465c:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8024660:	0a12      	lsrs	r2, r2, #8
 8024662:	0a00      	lsrs	r0, r0, #8
 8024664:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024668:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802466c:	4302      	orrs	r2, r0
 802466e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8024672:	d01a      	beq.n	80246aa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x176>
 8024674:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8024678:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802467c:	fb0a f000 	mul.w	r0, sl, r0
 8024680:	fb0a fa06 	mul.w	sl, sl, r6
 8024684:	0a06      	lsrs	r6, r0, #8
 8024686:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 802468a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802468e:	4406      	add	r6, r0
 8024690:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8024694:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8024698:	0a36      	lsrs	r6, r6, #8
 802469a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802469e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80246a2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80246a6:	ea46 060a 	orr.w	r6, r6, sl
 80246aa:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80246ae:	d01b      	beq.n	80246e8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1b4>
 80246b0:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80246b4:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80246b8:	fb09 fa0a 	mul.w	sl, r9, sl
 80246bc:	fb09 f004 	mul.w	r0, r9, r4
 80246c0:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80246c4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80246c8:	f500 7980 	add.w	r9, r0, #256	; 0x100
 80246cc:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80246d0:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 80246d4:	4454      	add	r4, sl
 80246d6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80246da:	0a24      	lsrs	r4, r4, #8
 80246dc:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80246e0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80246e4:	ea44 0409 	orr.w	r4, r4, r9
 80246e8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80246ec:	d01b      	beq.n	8024726 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1f2>
 80246ee:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 80246f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80246f6:	fb08 f909 	mul.w	r9, r8, r9
 80246fa:	fb08 f003 	mul.w	r0, r8, r3
 80246fe:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8024702:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8024706:	f500 7880 	add.w	r8, r0, #256	; 0x100
 802470a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802470e:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8024712:	444b      	add	r3, r9
 8024714:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8024718:	0a1b      	lsrs	r3, r3, #8
 802471a:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802471e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024722:	ea43 0308 	orr.w	r3, r3, r8
 8024726:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 802472a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802472e:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 8024732:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024736:	fb0c f808 	mul.w	r8, ip, r8
 802473a:	8808      	ldrh	r0, [r1, #0]
 802473c:	fb0c f606 	mul.w	r6, ip, r6
 8024740:	fb05 8909 	mla	r9, r5, r9, r8
 8024744:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 8024748:	fb05 6502 	mla	r5, r5, r2, r6
 802474c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8024750:	fb07 9908 	mla	r9, r7, r8, r9
 8024754:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 8024758:	fb07 5704 	mla	r7, r7, r4, r5
 802475c:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 8024760:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024764:	b2b6      	uxth	r6, r6
 8024766:	fb0e 9808 	mla	r8, lr, r8, r9
 802476a:	9a01      	ldr	r2, [sp, #4]
 802476c:	fb0e 7e03 	mla	lr, lr, r3, r7
 8024770:	1205      	asrs	r5, r0, #8
 8024772:	4372      	muls	r2, r6
 8024774:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8024778:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802477c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8024780:	1c53      	adds	r3, r2, #1
 8024782:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8024786:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802478a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802478e:	ea48 0e0e 	orr.w	lr, r8, lr
 8024792:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8024796:	ea4f 421e 	mov.w	r2, lr, lsr #16
 802479a:	f3ce 2407 	ubfx	r4, lr, #8, #8
 802479e:	b2db      	uxtb	r3, r3
 80247a0:	fb12 f206 	smulbb	r2, r2, r6
 80247a4:	fa5f fe8e 	uxtb.w	lr, lr
 80247a8:	fb14 f406 	smulbb	r4, r4, r6
 80247ac:	fb05 2503 	mla	r5, r5, r3, r2
 80247b0:	10c2      	asrs	r2, r0, #3
 80247b2:	fb1e fe06 	smulbb	lr, lr, r6
 80247b6:	00c0      	lsls	r0, r0, #3
 80247b8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80247bc:	b2ad      	uxth	r5, r5
 80247be:	b2c0      	uxtb	r0, r0
 80247c0:	fb02 4203 	mla	r2, r2, r3, r4
 80247c4:	fb00 e303 	mla	r3, r0, r3, lr
 80247c8:	b294      	uxth	r4, r2
 80247ca:	b298      	uxth	r0, r3
 80247cc:	1c6b      	adds	r3, r5, #1
 80247ce:	1c62      	adds	r2, r4, #1
 80247d0:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80247d4:	1c43      	adds	r3, r0, #1
 80247d6:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80247da:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80247de:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80247e2:	0952      	lsrs	r2, r2, #5
 80247e4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80247e8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80247ec:	432b      	orrs	r3, r5
 80247ee:	4313      	orrs	r3, r2
 80247f0:	800b      	strh	r3, [r1, #0]
 80247f2:	b003      	add	sp, #12
 80247f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80247f8:	0802f359 	.word	0x0802f359
 80247fc:	0802f926 	.word	0x0802f926
 8024800:	0802f3dd 	.word	0x0802f3dd

08024804 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024808:	ed2d 8b08 	vpush	{d8-d11}
 802480c:	b09f      	sub	sp, #124	; 0x7c
 802480e:	eeb0 aa40 	vmov.f32	s20, s0
 8024812:	eef0 9a60 	vmov.f32	s19, s1
 8024816:	921b      	str	r2, [sp, #108]	; 0x6c
 8024818:	eeb0 9a41 	vmov.f32	s18, s2
 802481c:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 802481e:	eeb0 8a62 	vmov.f32	s16, s5
 8024822:	9309      	str	r3, [sp, #36]	; 0x24
 8024824:	eef0 8a43 	vmov.f32	s17, s6
 8024828:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 802482c:	eef0 ba44 	vmov.f32	s23, s8
 8024830:	901d      	str	r0, [sp, #116]	; 0x74
 8024832:	eeb0 ba64 	vmov.f32	s22, s9
 8024836:	931c      	str	r3, [sp, #112]	; 0x70
 8024838:	eef0 aa45 	vmov.f32	s21, s10
 802483c:	6850      	ldr	r0, [r2, #4]
 802483e:	9119      	str	r1, [sp, #100]	; 0x64
 8024840:	6812      	ldr	r2, [r2, #0]
 8024842:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 8024844:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8024848:	fb00 1303 	mla	r3, r0, r3, r1
 802484c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024850:	930c      	str	r3, [sp, #48]	; 0x30
 8024852:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8024854:	681b      	ldr	r3, [r3, #0]
 8024856:	9312      	str	r3, [sp, #72]	; 0x48
 8024858:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 802485a:	685e      	ldr	r6, [r3, #4]
 802485c:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8024860:	3604      	adds	r6, #4
 8024862:	930d      	str	r3, [sp, #52]	; 0x34
 8024864:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8024866:	2b00      	cmp	r3, #0
 8024868:	dc03      	bgt.n	8024872 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 802486a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802486c:	2b00      	cmp	r3, #0
 802486e:	f340 8387 	ble.w	8024f80 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77c>
 8024872:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8024874:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024878:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802487c:	1e48      	subs	r0, r1, #1
 802487e:	1e57      	subs	r7, r2, #1
 8024880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024882:	2b00      	cmp	r3, #0
 8024884:	f340 8194 	ble.w	8024bb0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ac>
 8024888:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 802488a:	142b      	asrs	r3, r5, #16
 802488c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8024890:	d406      	bmi.n	80248a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8024892:	4584      	cmp	ip, r0
 8024894:	da04      	bge.n	80248a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8024896:	2b00      	cmp	r3, #0
 8024898:	db02      	blt.n	80248a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802489a:	42bb      	cmp	r3, r7
 802489c:	f2c0 8189 	blt.w	8024bb2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 80248a0:	f11c 0c01 	adds.w	ip, ip, #1
 80248a4:	f100 8177 	bmi.w	8024b96 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80248a8:	4561      	cmp	r1, ip
 80248aa:	f2c0 8174 	blt.w	8024b96 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80248ae:	3301      	adds	r3, #1
 80248b0:	f100 8171 	bmi.w	8024b96 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80248b4:	429a      	cmp	r2, r3
 80248b6:	f2c0 816e 	blt.w	8024b96 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80248ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80248bc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80248be:	931a      	str	r3, [sp, #104]	; 0x68
 80248c0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80248c2:	2b00      	cmp	r3, #0
 80248c4:	f340 8193 	ble.w	8024bee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 80248c8:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80248ca:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80248ce:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80248d2:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80248d6:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80248d8:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 80248dc:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80248de:	141b      	asrs	r3, r3, #16
 80248e0:	f100 81d6 	bmi.w	8024c90 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 80248e4:	f100 38ff 	add.w	r8, r0, #4294967295
 80248e8:	4543      	cmp	r3, r8
 80248ea:	f280 81d1 	bge.w	8024c90 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 80248ee:	f1bc 0f00 	cmp.w	ip, #0
 80248f2:	f2c0 81cd 	blt.w	8024c90 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 80248f6:	f10e 38ff 	add.w	r8, lr, #4294967295
 80248fa:	45c4      	cmp	ip, r8
 80248fc:	f280 81c8 	bge.w	8024c90 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8024900:	b200      	sxth	r0, r0
 8024902:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024904:	fb0c 3300 	mla	r3, ip, r0, r3
 8024908:	eb04 0803 	add.w	r8, r4, r3
 802490c:	5ce3      	ldrb	r3, [r4, r3]
 802490e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024912:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8024916:	2a00      	cmp	r2, #0
 8024918:	f000 81af 	beq.w	8024c7a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 802491c:	f898 c001 	ldrb.w	ip, [r8, #1]
 8024920:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8024924:	940e      	str	r4, [sp, #56]	; 0x38
 8024926:	0e24      	lsrs	r4, r4, #24
 8024928:	9415      	str	r4, [sp, #84]	; 0x54
 802492a:	b179      	cbz	r1, 802494c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802492c:	eb08 0c00 	add.w	ip, r8, r0
 8024930:	f818 0000 	ldrb.w	r0, [r8, r0]
 8024934:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8024938:	900a      	str	r0, [sp, #40]	; 0x28
 802493a:	0e00      	lsrs	r0, r0, #24
 802493c:	9013      	str	r0, [sp, #76]	; 0x4c
 802493e:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8024942:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8024946:	900f      	str	r0, [sp, #60]	; 0x3c
 8024948:	0e00      	lsrs	r0, r0, #24
 802494a:	9016      	str	r0, [sp, #88]	; 0x58
 802494c:	b292      	uxth	r2, r2
 802494e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8024950:	b289      	uxth	r1, r1
 8024952:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024954:	fb02 f901 	mul.w	r9, r2, r1
 8024958:	0112      	lsls	r2, r2, #4
 802495a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802495e:	eba2 0809 	sub.w	r8, r2, r9
 8024962:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8024966:	b289      	uxth	r1, r1
 8024968:	fa1f f888 	uxth.w	r8, r8
 802496c:	1a52      	subs	r2, r2, r1
 802496e:	fb08 f000 	mul.w	r0, r8, r0
 8024972:	b292      	uxth	r2, r2
 8024974:	fb02 000e 	mla	r0, r2, lr, r0
 8024978:	fb01 0004 	mla	r0, r1, r4, r0
 802497c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802497e:	fb09 0004 	mla	r0, r9, r4, r0
 8024982:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8024986:	2800      	cmp	r0, #0
 8024988:	f000 80fa 	beq.w	8024b80 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 802498c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8024990:	d01b      	beq.n	80249ca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8024992:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8024996:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802499a:	fb0e fa0a 	mul.w	sl, lr, sl
 802499e:	fb0e fe03 	mul.w	lr, lr, r3
 80249a2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80249a6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80249aa:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80249ae:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80249b2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80249b6:	4453      	add	r3, sl
 80249b8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80249bc:	0a1b      	lsrs	r3, r3, #8
 80249be:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80249c2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80249c6:	ea43 030c 	orr.w	r3, r3, ip
 80249ca:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80249cc:	2cff      	cmp	r4, #255	; 0xff
 80249ce:	d021      	beq.n	8024a14 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 80249d0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80249d2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80249d6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80249d8:	fb04 fb0b 	mul.w	fp, r4, fp
 80249dc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80249de:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80249e2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80249e4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80249e8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80249ec:	fb04 fa0a 	mul.w	sl, r4, sl
 80249f0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80249f4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80249f8:	44de      	add	lr, fp
 80249fa:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80249fe:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024a02:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024a06:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024a0a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024a0e:	ea4e 040a 	orr.w	r4, lr, sl
 8024a12:	940e      	str	r4, [sp, #56]	; 0x38
 8024a14:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024a16:	2cff      	cmp	r4, #255	; 0xff
 8024a18:	d021      	beq.n	8024a5e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8024a1a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024a1c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8024a20:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024a22:	fb04 fb0b 	mul.w	fp, r4, fp
 8024a26:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024a28:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024a2c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024a2e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024a32:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024a36:	fb04 fa0a 	mul.w	sl, r4, sl
 8024a3a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024a3e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024a42:	44de      	add	lr, fp
 8024a44:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024a48:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024a4c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024a50:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024a54:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024a58:	ea4e 040a 	orr.w	r4, lr, sl
 8024a5c:	940a      	str	r4, [sp, #40]	; 0x28
 8024a5e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8024a60:	2cff      	cmp	r4, #255	; 0xff
 8024a62:	d021      	beq.n	8024aa8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8024a64:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024a66:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8024a6a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8024a6c:	fb04 fb0b 	mul.w	fp, r4, fp
 8024a70:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024a72:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024a76:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8024a78:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024a7c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024a80:	fb04 fa0a 	mul.w	sl, r4, sl
 8024a84:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024a88:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024a8c:	44de      	add	lr, fp
 8024a8e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024a92:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024a96:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024a9a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024a9e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024aa2:	ea4e 040a 	orr.w	r4, lr, sl
 8024aa6:	940f      	str	r4, [sp, #60]	; 0x3c
 8024aa8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024aaa:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8024aae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024ab2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024ab6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024ab8:	fb08 fc0c 	mul.w	ip, r8, ip
 8024abc:	fb02 cc0e 	mla	ip, r2, lr, ip
 8024ac0:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8024ac4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024ac6:	fb01 cc0e 	mla	ip, r1, lr, ip
 8024aca:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8024ace:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024ad0:	fb09 cc0e 	mla	ip, r9, lr, ip
 8024ad4:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8024ad8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024ada:	fb08 f80e 	mul.w	r8, r8, lr
 8024ade:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024ae2:	fb02 8303 	mla	r3, r2, r3, r8
 8024ae6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024ae8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024aec:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8024af0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024af2:	fb01 330a 	mla	r3, r1, sl, r3
 8024af6:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8024afa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8024afc:	fb09 3901 	mla	r9, r9, r1, r3
 8024b00:	883b      	ldrh	r3, [r7, #0]
 8024b02:	4342      	muls	r2, r0
 8024b04:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024b08:	1c50      	adds	r0, r2, #1
 8024b0a:	1219      	asrs	r1, r3, #8
 8024b0c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8024b10:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8024b14:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8024b18:	ea4c 0c09 	orr.w	ip, ip, r9
 8024b1c:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8024b20:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8024b24:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8024b28:	b2c0      	uxtb	r0, r0
 8024b2a:	fb12 f204 	smulbb	r2, r2, r4
 8024b2e:	fa5f fc8c 	uxtb.w	ip, ip
 8024b32:	fb1e fe04 	smulbb	lr, lr, r4
 8024b36:	fb01 2100 	mla	r1, r1, r0, r2
 8024b3a:	10da      	asrs	r2, r3, #3
 8024b3c:	fb1c fc04 	smulbb	ip, ip, r4
 8024b40:	00db      	lsls	r3, r3, #3
 8024b42:	b289      	uxth	r1, r1
 8024b44:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8024b48:	b2db      	uxtb	r3, r3
 8024b4a:	fb02 e200 	mla	r2, r2, r0, lr
 8024b4e:	fb03 c300 	mla	r3, r3, r0, ip
 8024b52:	b292      	uxth	r2, r2
 8024b54:	fa1f fc83 	uxth.w	ip, r3
 8024b58:	1c4b      	adds	r3, r1, #1
 8024b5a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8024b5e:	f10c 0301 	add.w	r3, ip, #1
 8024b62:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8024b66:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8024b6a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024b6e:	430b      	orrs	r3, r1
 8024b70:	1c51      	adds	r1, r2, #1
 8024b72:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8024b76:	0952      	lsrs	r2, r2, #5
 8024b78:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024b7c:	4313      	orrs	r3, r2
 8024b7e:	803b      	strh	r3, [r7, #0]
 8024b80:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8024b82:	3702      	adds	r7, #2
 8024b84:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8024b86:	441a      	add	r2, r3
 8024b88:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8024b8a:	441d      	add	r5, r3
 8024b8c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8024b8e:	9231      	str	r2, [sp, #196]	; 0xc4
 8024b90:	3b01      	subs	r3, #1
 8024b92:	931a      	str	r3, [sp, #104]	; 0x68
 8024b94:	e694      	b.n	80248c0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 8024b96:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8024b98:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8024b9a:	441c      	add	r4, r3
 8024b9c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8024b9e:	441d      	add	r5, r3
 8024ba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024ba2:	9431      	str	r4, [sp, #196]	; 0xc4
 8024ba4:	3b01      	subs	r3, #1
 8024ba6:	9309      	str	r3, [sp, #36]	; 0x24
 8024ba8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024baa:	3302      	adds	r3, #2
 8024bac:	930c      	str	r3, [sp, #48]	; 0x30
 8024bae:	e667      	b.n	8024880 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8024bb0:	d024      	beq.n	8024bfc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8024bb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024bb4:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8024bb6:	3b01      	subs	r3, #1
 8024bb8:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8024bba:	fb00 4003 	mla	r0, r0, r3, r4
 8024bbe:	1400      	asrs	r0, r0, #16
 8024bc0:	f53f ae7b 	bmi.w	80248ba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8024bc4:	3901      	subs	r1, #1
 8024bc6:	4288      	cmp	r0, r1
 8024bc8:	f6bf ae77 	bge.w	80248ba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8024bcc:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8024bce:	fb01 5303 	mla	r3, r1, r3, r5
 8024bd2:	141b      	asrs	r3, r3, #16
 8024bd4:	f53f ae71 	bmi.w	80248ba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8024bd8:	3a01      	subs	r2, #1
 8024bda:	4293      	cmp	r3, r2
 8024bdc:	f6bf ae6d 	bge.w	80248ba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8024be0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8024be4:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8024be8:	f1bb 0f00 	cmp.w	fp, #0
 8024bec:	dc70      	bgt.n	8024cd0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>
 8024bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024bf0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024bf4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024bf6:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8024bfa:	930c      	str	r3, [sp, #48]	; 0x30
 8024bfc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8024bfe:	2b00      	cmp	r3, #0
 8024c00:	f340 81be 	ble.w	8024f80 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77c>
 8024c04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024c08:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024c0a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8024c0e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8024c12:	eef0 6a48 	vmov.f32	s13, s16
 8024c16:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8024c1a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8024c1e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024c22:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 8024c26:	eef0 6a68 	vmov.f32	s13, s17
 8024c2a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024c2e:	ee16 5a90 	vmov	r5, s13
 8024c32:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024c36:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024c3a:	ee37 8a48 	vsub.f32	s16, s14, s16
 8024c3e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024c42:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024c46:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024c4a:	ee18 2a10 	vmov	r2, s16
 8024c4e:	eeb0 8a47 	vmov.f32	s16, s14
 8024c52:	fb92 f3f3 	sdiv	r3, r2, r3
 8024c56:	ee18 2a90 	vmov	r2, s17
 8024c5a:	9333      	str	r3, [sp, #204]	; 0xcc
 8024c5c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024c5e:	eef0 8a67 	vmov.f32	s17, s15
 8024c62:	fb92 f3f3 	sdiv	r3, r2, r3
 8024c66:	9334      	str	r3, [sp, #208]	; 0xd0
 8024c68:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8024c6a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8024c6c:	3b01      	subs	r3, #1
 8024c6e:	9319      	str	r3, [sp, #100]	; 0x64
 8024c70:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024c72:	bf08      	it	eq
 8024c74:	4613      	moveq	r3, r2
 8024c76:	9309      	str	r3, [sp, #36]	; 0x24
 8024c78:	e5f4      	b.n	8024864 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8024c7a:	2900      	cmp	r1, #0
 8024c7c:	f43f ae66 	beq.w	802494c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8024c80:	f818 0000 	ldrb.w	r0, [r8, r0]
 8024c84:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8024c88:	900a      	str	r0, [sp, #40]	; 0x28
 8024c8a:	0e00      	lsrs	r0, r0, #24
 8024c8c:	9013      	str	r0, [sp, #76]	; 0x4c
 8024c8e:	e65d      	b.n	802494c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8024c90:	f113 0801 	adds.w	r8, r3, #1
 8024c94:	f53f af74 	bmi.w	8024b80 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8024c98:	4540      	cmp	r0, r8
 8024c9a:	f6ff af71 	blt.w	8024b80 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8024c9e:	f11c 0801 	adds.w	r8, ip, #1
 8024ca2:	f53f af6d 	bmi.w	8024b80 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8024ca6:	45c6      	cmp	lr, r8
 8024ca8:	f6ff af6a 	blt.w	8024b80 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8024cac:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8024cae:	b200      	sxth	r0, r0
 8024cb0:	9302      	str	r3, [sp, #8]
 8024cb2:	fa0f f38e 	sxth.w	r3, lr
 8024cb6:	9000      	str	r0, [sp, #0]
 8024cb8:	9301      	str	r3, [sp, #4]
 8024cba:	4633      	mov	r3, r6
 8024cbc:	981d      	ldr	r0, [sp, #116]	; 0x74
 8024cbe:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8024cc2:	e9cd c203 	strd	ip, r2, [sp, #12]
 8024cc6:	4639      	mov	r1, r7
 8024cc8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8024cca:	f7ff fc33 	bl	8024534 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 8024cce:	e757      	b.n	8024b80 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8024cd0:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8024cd2:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8024cd6:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8024cd8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8024cdc:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8024cde:	1427      	asrs	r7, r4, #16
 8024ce0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024ce2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024ce6:	142b      	asrs	r3, r5, #16
 8024ce8:	fb01 7303 	mla	r3, r1, r3, r7
 8024cec:	18e7      	adds	r7, r4, r3
 8024cee:	5ce3      	ldrb	r3, [r4, r3]
 8024cf0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024cf4:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8024cf8:	2a00      	cmp	r2, #0
 8024cfa:	f000 8137 	beq.w	8024f6c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x768>
 8024cfe:	f897 e001 	ldrb.w	lr, [r7, #1]
 8024d02:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8024d06:	9410      	str	r4, [sp, #64]	; 0x40
 8024d08:	0e24      	lsrs	r4, r4, #24
 8024d0a:	9417      	str	r4, [sp, #92]	; 0x5c
 8024d0c:	b170      	cbz	r0, 8024d2c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 8024d0e:	eb07 0e01 	add.w	lr, r7, r1
 8024d12:	5c79      	ldrb	r1, [r7, r1]
 8024d14:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024d18:	910b      	str	r1, [sp, #44]	; 0x2c
 8024d1a:	0e09      	lsrs	r1, r1, #24
 8024d1c:	9114      	str	r1, [sp, #80]	; 0x50
 8024d1e:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8024d22:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024d26:	9111      	str	r1, [sp, #68]	; 0x44
 8024d28:	0e09      	lsrs	r1, r1, #24
 8024d2a:	9118      	str	r1, [sp, #96]	; 0x60
 8024d2c:	b292      	uxth	r2, r2
 8024d2e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8024d30:	b280      	uxth	r0, r0
 8024d32:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024d34:	fb02 f800 	mul.w	r8, r2, r0
 8024d38:	0112      	lsls	r2, r2, #4
 8024d3a:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8024d3e:	eba2 0e08 	sub.w	lr, r2, r8
 8024d42:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8024d46:	b280      	uxth	r0, r0
 8024d48:	fa1f fe8e 	uxth.w	lr, lr
 8024d4c:	1a12      	subs	r2, r2, r0
 8024d4e:	fb0e f101 	mul.w	r1, lr, r1
 8024d52:	b292      	uxth	r2, r2
 8024d54:	fb02 110c 	mla	r1, r2, ip, r1
 8024d58:	fb00 1104 	mla	r1, r0, r4, r1
 8024d5c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8024d5e:	fb08 1104 	mla	r1, r8, r4, r1
 8024d62:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8024d66:	2900      	cmp	r1, #0
 8024d68:	f000 80f5 	beq.w	8024f56 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x752>
 8024d6c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8024d70:	d019      	beq.n	8024da6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a2>
 8024d72:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8024d76:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024d7a:	fb0c fa0a 	mul.w	sl, ip, sl
 8024d7e:	fb0c fc03 	mul.w	ip, ip, r3
 8024d82:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8024d86:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024d8a:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8024d8e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024d92:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8024d96:	4453      	add	r3, sl
 8024d98:	0a3f      	lsrs	r7, r7, #8
 8024d9a:	0a1b      	lsrs	r3, r3, #8
 8024d9c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024da0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024da4:	433b      	orrs	r3, r7
 8024da6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8024da8:	2cff      	cmp	r4, #255	; 0xff
 8024daa:	d020      	beq.n	8024dee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ea>
 8024dac:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024dae:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024db2:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8024db4:	4367      	muls	r7, r4
 8024db6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024db8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024dbc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024dc0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8024dc2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024dc6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024dca:	fb04 fa0a 	mul.w	sl, r4, sl
 8024dce:	44bc      	add	ip, r7
 8024dd0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024dd4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024dd8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024ddc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024de0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024de4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024de8:	ea4c 040a 	orr.w	r4, ip, sl
 8024dec:	9410      	str	r4, [sp, #64]	; 0x40
 8024dee:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024df0:	2cff      	cmp	r4, #255	; 0xff
 8024df2:	d020      	beq.n	8024e36 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x632>
 8024df4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024df6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024dfa:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024dfc:	4367      	muls	r7, r4
 8024dfe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024e00:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024e04:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024e08:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024e0a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024e0e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024e12:	fb04 fa0a 	mul.w	sl, r4, sl
 8024e16:	44bc      	add	ip, r7
 8024e18:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024e1c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024e20:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024e24:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024e28:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024e2c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024e30:	ea4c 040a 	orr.w	r4, ip, sl
 8024e34:	940b      	str	r4, [sp, #44]	; 0x2c
 8024e36:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8024e38:	2cff      	cmp	r4, #255	; 0xff
 8024e3a:	d020      	beq.n	8024e7e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x67a>
 8024e3c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024e3e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024e42:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8024e44:	4367      	muls	r7, r4
 8024e46:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024e48:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024e4c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024e50:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8024e52:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024e56:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024e5a:	fb04 fa0a 	mul.w	sl, r4, sl
 8024e5e:	44bc      	add	ip, r7
 8024e60:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024e64:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024e68:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024e6c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024e70:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024e74:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024e78:	ea4c 040a 	orr.w	r4, ip, sl
 8024e7c:	9411      	str	r4, [sp, #68]	; 0x44
 8024e7e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024e80:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8024e84:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024e88:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024e8c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024e8e:	fb0e f707 	mul.w	r7, lr, r7
 8024e92:	fb02 770c 	mla	r7, r2, ip, r7
 8024e96:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024e9a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024e9c:	fb00 770c 	mla	r7, r0, ip, r7
 8024ea0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024ea4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024ea6:	fb08 770c 	mla	r7, r8, ip, r7
 8024eaa:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8024eae:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024eb0:	fb0e fe0c 	mul.w	lr, lr, ip
 8024eb4:	0a3f      	lsrs	r7, r7, #8
 8024eb6:	fb02 e303 	mla	r3, r2, r3, lr
 8024eba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024ebc:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024ec0:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8024ec4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8024ec6:	fb00 330a 	mla	r3, r0, sl, r3
 8024eca:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8024ece:	f8b9 0000 	ldrh.w	r0, [r9]
 8024ed2:	fb08 3c0c 	mla	ip, r8, ip, r3
 8024ed6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024ed8:	1202      	asrs	r2, r0, #8
 8024eda:	434b      	muls	r3, r1
 8024edc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024ee0:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8024ee4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024ee8:	1c59      	adds	r1, r3, #1
 8024eea:	ea47 070c 	orr.w	r7, r7, ip
 8024eee:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8024ef2:	0c3b      	lsrs	r3, r7, #16
 8024ef4:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8024ef8:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8024efc:	b2ff      	uxtb	r7, r7
 8024efe:	fb13 f304 	smulbb	r3, r3, r4
 8024f02:	b2c9      	uxtb	r1, r1
 8024f04:	fb1c fc04 	smulbb	ip, ip, r4
 8024f08:	fb02 3201 	mla	r2, r2, r1, r3
 8024f0c:	10c3      	asrs	r3, r0, #3
 8024f0e:	fb17 f704 	smulbb	r7, r7, r4
 8024f12:	00c0      	lsls	r0, r0, #3
 8024f14:	b292      	uxth	r2, r2
 8024f16:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8024f1a:	b2c0      	uxtb	r0, r0
 8024f1c:	fb03 c301 	mla	r3, r3, r1, ip
 8024f20:	f102 0c01 	add.w	ip, r2, #1
 8024f24:	fb00 7001 	mla	r0, r0, r1, r7
 8024f28:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8024f2c:	b280      	uxth	r0, r0
 8024f2e:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 8024f32:	b29b      	uxth	r3, r3
 8024f34:	1c42      	adds	r2, r0, #1
 8024f36:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8024f3a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8024f3e:	ea42 020c 	orr.w	r2, r2, ip
 8024f42:	f103 0c01 	add.w	ip, r3, #1
 8024f46:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8024f4a:	095b      	lsrs	r3, r3, #5
 8024f4c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024f50:	431a      	orrs	r2, r3
 8024f52:	f8a9 2000 	strh.w	r2, [r9]
 8024f56:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8024f58:	f109 0902 	add.w	r9, r9, #2
 8024f5c:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8024f5e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024f62:	441a      	add	r2, r3
 8024f64:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8024f66:	9231      	str	r2, [sp, #196]	; 0xc4
 8024f68:	441d      	add	r5, r3
 8024f6a:	e63d      	b.n	8024be8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8024f6c:	2800      	cmp	r0, #0
 8024f6e:	f43f aedd 	beq.w	8024d2c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 8024f72:	5c79      	ldrb	r1, [r7, r1]
 8024f74:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024f78:	910b      	str	r1, [sp, #44]	; 0x2c
 8024f7a:	0e09      	lsrs	r1, r1, #24
 8024f7c:	9114      	str	r1, [sp, #80]	; 0x50
 8024f7e:	e6d5      	b.n	8024d2c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 8024f80:	b01f      	add	sp, #124	; 0x7c
 8024f82:	ecbd 8b08 	vpop	{d8-d11}
 8024f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08024f8c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8024f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024f90:	880e      	ldrh	r6, [r1, #0]
 8024f92:	b085      	sub	sp, #20
 8024f94:	4691      	mov	r9, r2
 8024f96:	ea4f 2826 	mov.w	r8, r6, asr #8
 8024f9a:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8024f9e:	f9bd e03c 	ldrsh.w	lr, [sp, #60]	; 0x3c
 8024fa2:	f008 02f8 	and.w	r2, r8, #248	; 0xf8
 8024fa6:	ea4f 08e6 	mov.w	r8, r6, asr #3
 8024faa:	00f6      	lsls	r6, r6, #3
 8024fac:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8024fb0:	9200      	str	r2, [sp, #0]
 8024fb2:	f008 02fc 	and.w	r2, r8, #252	; 0xfc
 8024fb6:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8024fba:	9201      	str	r2, [sp, #4]
 8024fbc:	b2f2      	uxtb	r2, r6
 8024fbe:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 8024fc2:	9202      	str	r2, [sp, #8]
 8024fc4:	fb04 560c 	mla	r6, r4, ip, r5
 8024fc8:	2c00      	cmp	r4, #0
 8024fca:	eb09 0806 	add.w	r8, r9, r6
 8024fce:	db3f      	blt.n	8025050 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc4>
 8024fd0:	45a6      	cmp	lr, r4
 8024fd2:	dd3d      	ble.n	8025050 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc4>
 8024fd4:	2d00      	cmp	r5, #0
 8024fd6:	db39      	blt.n	802504c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc0>
 8024fd8:	45ac      	cmp	ip, r5
 8024fda:	dd37      	ble.n	802504c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc0>
 8024fdc:	f819 2006 	ldrb.w	r2, [r9, r6]
 8024fe0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8024fe4:	1c6e      	adds	r6, r5, #1
 8024fe6:	d436      	bmi.n	8025056 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xca>
 8024fe8:	45b4      	cmp	ip, r6
 8024fea:	dd34      	ble.n	8025056 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xca>
 8024fec:	b3a8      	cbz	r0, 802505a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xce>
 8024fee:	f898 6001 	ldrb.w	r6, [r8, #1]
 8024ff2:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8024ff6:	3401      	adds	r4, #1
 8024ff8:	d433      	bmi.n	8025062 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 8024ffa:	45a6      	cmp	lr, r4
 8024ffc:	dd31      	ble.n	8025062 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 8024ffe:	b39f      	cbz	r7, 8025068 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xdc>
 8025000:	2d00      	cmp	r5, #0
 8025002:	eb08 0e0c 	add.w	lr, r8, ip
 8025006:	db2a      	blt.n	802505e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd2>
 8025008:	45ac      	cmp	ip, r5
 802500a:	dd28      	ble.n	802505e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd2>
 802500c:	f818 400c 	ldrb.w	r4, [r8, ip]
 8025010:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8025014:	3501      	adds	r5, #1
 8025016:	d42a      	bmi.n	802506e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 8025018:	45ac      	cmp	ip, r5
 802501a:	dd28      	ble.n	802506e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 802501c:	b348      	cbz	r0, 8025072 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe6>
 802501e:	f89e 5001 	ldrb.w	r5, [lr, #1]
 8025022:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8025026:	280f      	cmp	r0, #15
 8025028:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 802502c:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8025030:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8025034:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8025038:	d801      	bhi.n	802503e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb2>
 802503a:	2f0f      	cmp	r7, #15
 802503c:	d91b      	bls.n	8025076 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xea>
 802503e:	4b7e      	ldr	r3, [pc, #504]	; (8025238 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2ac>)
 8025040:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8025044:	4a7d      	ldr	r2, [pc, #500]	; (802523c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b0>)
 8025046:	487e      	ldr	r0, [pc, #504]	; (8025240 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b4>)
 8025048:	f004 ffcc 	bl	8029fe4 <__assert_func>
 802504c:	2200      	movs	r2, #0
 802504e:	e7c9      	b.n	8024fe4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x58>
 8025050:	2600      	movs	r6, #0
 8025052:	4632      	mov	r2, r6
 8025054:	e7cf      	b.n	8024ff6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 8025056:	2600      	movs	r6, #0
 8025058:	e7cd      	b.n	8024ff6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 802505a:	4606      	mov	r6, r0
 802505c:	e7cb      	b.n	8024ff6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 802505e:	2400      	movs	r4, #0
 8025060:	e7d8      	b.n	8025014 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x88>
 8025062:	2300      	movs	r3, #0
 8025064:	461c      	mov	r4, r3
 8025066:	e7de      	b.n	8025026 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8025068:	463b      	mov	r3, r7
 802506a:	463c      	mov	r4, r7
 802506c:	e7db      	b.n	8025026 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 802506e:	2300      	movs	r3, #0
 8025070:	e7d9      	b.n	8025026 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8025072:	4603      	mov	r3, r0
 8025074:	e7d7      	b.n	8025026 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8025076:	b280      	uxth	r0, r0
 8025078:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 802507c:	b2bf      	uxth	r7, r7
 802507e:	fb00 fe07 	mul.w	lr, r0, r7
 8025082:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8025086:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 802508a:	eba0 0c0e 	sub.w	ip, r0, lr
 802508e:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8025092:	b2bf      	uxth	r7, r7
 8025094:	fa1f fc8c 	uxth.w	ip, ip
 8025098:	eba5 0507 	sub.w	r5, r5, r7
 802509c:	fb0c f00a 	mul.w	r0, ip, sl
 80250a0:	b2ad      	uxth	r5, r5
 80250a2:	fb05 000b 	mla	r0, r5, fp, r0
 80250a6:	fb07 0009 	mla	r0, r7, r9, r0
 80250aa:	fb0e 0008 	mla	r0, lr, r8, r0
 80250ae:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80250b2:	9003      	str	r0, [sp, #12]
 80250b4:	d018      	beq.n	80250e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x15c>
 80250b6:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80250ba:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80250be:	fb0b f000 	mul.w	r0, fp, r0
 80250c2:	fb0b fb02 	mul.w	fp, fp, r2
 80250c6:	0a02      	lsrs	r2, r0, #8
 80250c8:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80250cc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80250d0:	4402      	add	r2, r0
 80250d2:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 80250d6:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80250da:	0a12      	lsrs	r2, r2, #8
 80250dc:	0a00      	lsrs	r0, r0, #8
 80250de:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80250e2:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80250e6:	4302      	orrs	r2, r0
 80250e8:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80250ec:	d019      	beq.n	8025122 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x196>
 80250ee:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 80250f2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80250f6:	fb0a fb0b 	mul.w	fp, sl, fp
 80250fa:	fb0a fa06 	mul.w	sl, sl, r6
 80250fe:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8025102:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025106:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 802510a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802510e:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8025112:	445e      	add	r6, fp
 8025114:	0a00      	lsrs	r0, r0, #8
 8025116:	0a36      	lsrs	r6, r6, #8
 8025118:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802511c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8025120:	4306      	orrs	r6, r0
 8025122:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8025126:	d019      	beq.n	802515c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1d0>
 8025128:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 802512c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8025130:	fb09 fa0a 	mul.w	sl, r9, sl
 8025134:	fb09 f904 	mul.w	r9, r9, r4
 8025138:	ea4f 241a 	mov.w	r4, sl, lsr #8
 802513c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8025140:	f509 7080 	add.w	r0, r9, #256	; 0x100
 8025144:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8025148:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 802514c:	4454      	add	r4, sl
 802514e:	0a00      	lsrs	r0, r0, #8
 8025150:	0a24      	lsrs	r4, r4, #8
 8025152:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8025156:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802515a:	4304      	orrs	r4, r0
 802515c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8025160:	d019      	beq.n	8025196 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x20a>
 8025162:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8025166:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802516a:	fb08 f909 	mul.w	r9, r8, r9
 802516e:	fb08 f803 	mul.w	r8, r8, r3
 8025172:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8025176:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 802517a:	f508 7080 	add.w	r0, r8, #256	; 0x100
 802517e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025182:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8025186:	444b      	add	r3, r9
 8025188:	0a00      	lsrs	r0, r0, #8
 802518a:	0a1b      	lsrs	r3, r3, #8
 802518c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8025190:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025194:	4303      	orrs	r3, r0
 8025196:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 802519a:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 802519e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80251a2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80251a6:	fb0c f808 	mul.w	r8, ip, r8
 80251aa:	fb0c f606 	mul.w	r6, ip, r6
 80251ae:	fb05 8800 	mla	r8, r5, r0, r8
 80251b2:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 80251b6:	fb05 6202 	mla	r2, r5, r2, r6
 80251ba:	9d00      	ldr	r5, [sp, #0]
 80251bc:	fb07 8800 	mla	r8, r7, r0, r8
 80251c0:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 80251c4:	fb0e 8000 	mla	r0, lr, r0, r8
 80251c8:	0a00      	lsrs	r0, r0, #8
 80251ca:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 80251ce:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 80251d2:	fb07 2700 	mla	r7, r7, r0, r2
 80251d6:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 80251da:	9b03      	ldr	r3, [sp, #12]
 80251dc:	fb0e 7000 	mla	r0, lr, r0, r7
 80251e0:	9a02      	ldr	r2, [sp, #8]
 80251e2:	43dc      	mvns	r4, r3
 80251e4:	9b01      	ldr	r3, [sp, #4]
 80251e6:	0a00      	lsrs	r0, r0, #8
 80251e8:	b2e4      	uxtb	r4, r4
 80251ea:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80251ee:	4363      	muls	r3, r4
 80251f0:	4365      	muls	r5, r4
 80251f2:	ea48 0000 	orr.w	r0, r8, r0
 80251f6:	4362      	muls	r2, r4
 80251f8:	1c5e      	adds	r6, r3, #1
 80251fa:	4614      	mov	r4, r2
 80251fc:	1c6a      	adds	r2, r5, #1
 80251fe:	eb06 2613 	add.w	r6, r6, r3, lsr #8
 8025202:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 8025206:	0a03      	lsrs	r3, r0, #8
 8025208:	0c02      	lsrs	r2, r0, #16
 802520a:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 802520e:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 8025212:	00db      	lsls	r3, r3, #3
 8025214:	0212      	lsls	r2, r2, #8
 8025216:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802521a:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 802521e:	4313      	orrs	r3, r2
 8025220:	1c62      	adds	r2, r4, #1
 8025222:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8025226:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 802522a:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 802522e:	4318      	orrs	r0, r3
 8025230:	8008      	strh	r0, [r1, #0]
 8025232:	b005      	add	sp, #20
 8025234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025238:	0802f359 	.word	0x0802f359
 802523c:	0802f926 	.word	0x0802f926
 8025240:	0802f3dd 	.word	0x0802f3dd

08025244 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025248:	ed2d 8b08 	vpush	{d8-d11}
 802524c:	b09b      	sub	sp, #108	; 0x6c
 802524e:	eeb0 aa40 	vmov.f32	s20, s0
 8025252:	eef0 9a60 	vmov.f32	s19, s1
 8025256:	9218      	str	r2, [sp, #96]	; 0x60
 8025258:	eeb0 9a41 	vmov.f32	s18, s2
 802525c:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 802525e:	eeb0 8a62 	vmov.f32	s16, s5
 8025262:	9019      	str	r0, [sp, #100]	; 0x64
 8025264:	eef0 8a43 	vmov.f32	s17, s6
 8025268:	6850      	ldr	r0, [r2, #4]
 802526a:	eef0 ba44 	vmov.f32	s23, s8
 802526e:	9116      	str	r1, [sp, #88]	; 0x58
 8025270:	eeb0 ba64 	vmov.f32	s22, s9
 8025274:	9307      	str	r3, [sp, #28]
 8025276:	eef0 aa45 	vmov.f32	s21, s10
 802527a:	6812      	ldr	r2, [r2, #0]
 802527c:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 802527e:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 8025282:	fb00 1303 	mla	r3, r0, r3, r1
 8025286:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802528a:	930a      	str	r3, [sp, #40]	; 0x28
 802528c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802528e:	681b      	ldr	r3, [r3, #0]
 8025290:	930f      	str	r3, [sp, #60]	; 0x3c
 8025292:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8025294:	685e      	ldr	r6, [r3, #4]
 8025296:	3604      	adds	r6, #4
 8025298:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802529a:	2b00      	cmp	r3, #0
 802529c:	dc03      	bgt.n	80252a6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 802529e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80252a0:	2b00      	cmp	r3, #0
 80252a2:	f340 8373 	ble.w	802598c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 80252a6:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80252a8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80252ac:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80252b0:	1e48      	subs	r0, r1, #1
 80252b2:	1e57      	subs	r7, r2, #1
 80252b4:	9b07      	ldr	r3, [sp, #28]
 80252b6:	2b00      	cmp	r3, #0
 80252b8:	f340 818f 	ble.w	80255da <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x396>
 80252bc:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 80252be:	142b      	asrs	r3, r5, #16
 80252c0:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80252c4:	d406      	bmi.n	80252d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80252c6:	4584      	cmp	ip, r0
 80252c8:	da04      	bge.n	80252d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80252ca:	2b00      	cmp	r3, #0
 80252cc:	db02      	blt.n	80252d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80252ce:	42bb      	cmp	r3, r7
 80252d0:	f2c0 8184 	blt.w	80255dc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 80252d4:	f11c 0c01 	adds.w	ip, ip, #1
 80252d8:	f100 8172 	bmi.w	80255c0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 80252dc:	4561      	cmp	r1, ip
 80252de:	f2c0 816f 	blt.w	80255c0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 80252e2:	3301      	adds	r3, #1
 80252e4:	f100 816c 	bmi.w	80255c0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 80252e8:	429a      	cmp	r2, r3
 80252ea:	f2c0 8169 	blt.w	80255c0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 80252ee:	9b07      	ldr	r3, [sp, #28]
 80252f0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80252f2:	9317      	str	r3, [sp, #92]	; 0x5c
 80252f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80252f6:	2b00      	cmp	r3, #0
 80252f8:	f340 818e 	ble.w	8025618 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 80252fc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80252fe:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8025302:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8025306:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802530a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802530c:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8025310:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8025312:	141b      	asrs	r3, r3, #16
 8025314:	f100 81d1 	bmi.w	80256ba <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8025318:	f101 38ff 	add.w	r8, r1, #4294967295
 802531c:	4543      	cmp	r3, r8
 802531e:	f280 81cc 	bge.w	80256ba <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8025322:	f1bc 0f00 	cmp.w	ip, #0
 8025326:	f2c0 81c8 	blt.w	80256ba <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 802532a:	f10e 38ff 	add.w	r8, lr, #4294967295
 802532e:	45c4      	cmp	ip, r8
 8025330:	f280 81c3 	bge.w	80256ba <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8025334:	b209      	sxth	r1, r1
 8025336:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8025338:	fb0c 3301 	mla	r3, ip, r1, r3
 802533c:	eb04 0803 	add.w	r8, r4, r3
 8025340:	5ce3      	ldrb	r3, [r4, r3]
 8025342:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025346:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 802534a:	2a00      	cmp	r2, #0
 802534c:	f000 81aa 	beq.w	80256a4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x460>
 8025350:	f898 c001 	ldrb.w	ip, [r8, #1]
 8025354:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8025358:	940b      	str	r4, [sp, #44]	; 0x2c
 802535a:	0e24      	lsrs	r4, r4, #24
 802535c:	9412      	str	r4, [sp, #72]	; 0x48
 802535e:	b178      	cbz	r0, 8025380 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8025360:	eb08 0c01 	add.w	ip, r8, r1
 8025364:	f818 1001 	ldrb.w	r1, [r8, r1]
 8025368:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802536c:	9108      	str	r1, [sp, #32]
 802536e:	0e09      	lsrs	r1, r1, #24
 8025370:	9110      	str	r1, [sp, #64]	; 0x40
 8025372:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8025376:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802537a:	910c      	str	r1, [sp, #48]	; 0x30
 802537c:	0e09      	lsrs	r1, r1, #24
 802537e:	9113      	str	r1, [sp, #76]	; 0x4c
 8025380:	b292      	uxth	r2, r2
 8025382:	9912      	ldr	r1, [sp, #72]	; 0x48
 8025384:	b280      	uxth	r0, r0
 8025386:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025388:	fb02 f900 	mul.w	r9, r2, r0
 802538c:	0112      	lsls	r2, r2, #4
 802538e:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8025392:	eba2 0809 	sub.w	r8, r2, r9
 8025396:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802539a:	b280      	uxth	r0, r0
 802539c:	fa1f f888 	uxth.w	r8, r8
 80253a0:	1a12      	subs	r2, r2, r0
 80253a2:	fb08 f101 	mul.w	r1, r8, r1
 80253a6:	b292      	uxth	r2, r2
 80253a8:	fb02 110e 	mla	r1, r2, lr, r1
 80253ac:	fb00 1104 	mla	r1, r0, r4, r1
 80253b0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80253b2:	fb09 1104 	mla	r1, r9, r4, r1
 80253b6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80253ba:	2900      	cmp	r1, #0
 80253bc:	f000 80f5 	beq.w	80255aa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 80253c0:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80253c4:	d01b      	beq.n	80253fe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80253c6:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80253ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80253ce:	fb0e fa0a 	mul.w	sl, lr, sl
 80253d2:	fb0e fe03 	mul.w	lr, lr, r3
 80253d6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80253da:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80253de:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80253e2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80253e6:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80253ea:	4453      	add	r3, sl
 80253ec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80253f0:	0a1b      	lsrs	r3, r3, #8
 80253f2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80253f6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80253fa:	ea43 030c 	orr.w	r3, r3, ip
 80253fe:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8025400:	2cff      	cmp	r4, #255	; 0xff
 8025402:	d021      	beq.n	8025448 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8025404:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025406:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802540a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802540c:	fb04 fb0b 	mul.w	fp, r4, fp
 8025410:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025412:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025416:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8025418:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802541c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025420:	fb04 fa0a 	mul.w	sl, r4, sl
 8025424:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025428:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802542c:	44de      	add	lr, fp
 802542e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025432:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025436:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802543a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802543e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025442:	ea4e 040a 	orr.w	r4, lr, sl
 8025446:	940b      	str	r4, [sp, #44]	; 0x2c
 8025448:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802544a:	2cff      	cmp	r4, #255	; 0xff
 802544c:	d021      	beq.n	8025492 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 802544e:	9c08      	ldr	r4, [sp, #32]
 8025450:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8025454:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025456:	fb04 fb0b 	mul.w	fp, r4, fp
 802545a:	9c08      	ldr	r4, [sp, #32]
 802545c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025460:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025462:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025466:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802546a:	fb04 fa0a 	mul.w	sl, r4, sl
 802546e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025472:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025476:	44de      	add	lr, fp
 8025478:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802547c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025480:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025484:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025488:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802548c:	ea4e 040a 	orr.w	r4, lr, sl
 8025490:	9408      	str	r4, [sp, #32]
 8025492:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025494:	2cff      	cmp	r4, #255	; 0xff
 8025496:	d021      	beq.n	80254dc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 8025498:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802549a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802549e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80254a0:	fb04 fb0b 	mul.w	fp, r4, fp
 80254a4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80254a6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80254aa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80254ac:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80254b0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80254b4:	fb04 fa0a 	mul.w	sl, r4, sl
 80254b8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80254bc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80254c0:	44de      	add	lr, fp
 80254c2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80254c6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80254ca:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80254ce:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80254d2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80254d6:	ea4e 040a 	orr.w	r4, lr, sl
 80254da:	940c      	str	r4, [sp, #48]	; 0x30
 80254dc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80254de:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80254e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80254e6:	43c9      	mvns	r1, r1
 80254e8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80254ec:	9c08      	ldr	r4, [sp, #32]
 80254ee:	fb08 fc0c 	mul.w	ip, r8, ip
 80254f2:	fb02 cc0e 	mla	ip, r2, lr, ip
 80254f6:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80254fa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80254fc:	fb00 cc0e 	mla	ip, r0, lr, ip
 8025500:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8025504:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025506:	fb09 cc0e 	mla	ip, r9, lr, ip
 802550a:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 802550e:	fb08 f80e 	mul.w	r8, r8, lr
 8025512:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025516:	fa5f fe81 	uxtb.w	lr, r1
 802551a:	fb02 8303 	mla	r3, r2, r3, r8
 802551e:	9a08      	ldr	r2, [sp, #32]
 8025520:	f8b7 8000 	ldrh.w	r8, [r7]
 8025524:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025528:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 802552c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802552e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8025532:	fb00 330a 	mla	r3, r0, sl, r3
 8025536:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 802553a:	ea4f 2228 	mov.w	r2, r8, asr #8
 802553e:	fb09 3900 	mla	r9, r9, r0, r3
 8025542:	ea4f 00e8 	mov.w	r0, r8, asr #3
 8025546:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802554a:	b2c9      	uxtb	r1, r1
 802554c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025550:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8025554:	fb02 f20e 	mul.w	r2, r2, lr
 8025558:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802555c:	fb00 f00e 	mul.w	r0, r0, lr
 8025560:	1c53      	adds	r3, r2, #1
 8025562:	fb01 f10e 	mul.w	r1, r1, lr
 8025566:	ea4c 0c09 	orr.w	ip, ip, r9
 802556a:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802556e:	ea4f 431c 	mov.w	r3, ip, lsr #16
 8025572:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025576:	4a60      	ldr	r2, [pc, #384]	; (80256f8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>)
 8025578:	b2db      	uxtb	r3, r3
 802557a:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 802557e:	1c43      	adds	r3, r0, #1
 8025580:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8025584:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8025588:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802558c:	00db      	lsls	r3, r3, #3
 802558e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025592:	4313      	orrs	r3, r2
 8025594:	1c4a      	adds	r2, r1, #1
 8025596:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802559a:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 802559e:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 80255a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80255a6:	f8a7 c000 	strh.w	ip, [r7]
 80255aa:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80255ac:	3702      	adds	r7, #2
 80255ae:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80255b0:	441a      	add	r2, r3
 80255b2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80255b4:	441d      	add	r5, r3
 80255b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80255b8:	922d      	str	r2, [sp, #180]	; 0xb4
 80255ba:	3b01      	subs	r3, #1
 80255bc:	9317      	str	r3, [sp, #92]	; 0x5c
 80255be:	e699      	b.n	80252f4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80255c0:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80255c2:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 80255c4:	441c      	add	r4, r3
 80255c6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80255c8:	441d      	add	r5, r3
 80255ca:	9b07      	ldr	r3, [sp, #28]
 80255cc:	942d      	str	r4, [sp, #180]	; 0xb4
 80255ce:	3b01      	subs	r3, #1
 80255d0:	9307      	str	r3, [sp, #28]
 80255d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80255d4:	3302      	adds	r3, #2
 80255d6:	930a      	str	r3, [sp, #40]	; 0x28
 80255d8:	e66c      	b.n	80252b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80255da:	d024      	beq.n	8025626 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 80255dc:	9b07      	ldr	r3, [sp, #28]
 80255de:	982f      	ldr	r0, [sp, #188]	; 0xbc
 80255e0:	3b01      	subs	r3, #1
 80255e2:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 80255e4:	fb00 4003 	mla	r0, r0, r3, r4
 80255e8:	1400      	asrs	r0, r0, #16
 80255ea:	f53f ae80 	bmi.w	80252ee <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80255ee:	3901      	subs	r1, #1
 80255f0:	4288      	cmp	r0, r1
 80255f2:	f6bf ae7c 	bge.w	80252ee <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80255f6:	9930      	ldr	r1, [sp, #192]	; 0xc0
 80255f8:	fb01 5303 	mla	r3, r1, r3, r5
 80255fc:	141b      	asrs	r3, r3, #16
 80255fe:	f53f ae76 	bmi.w	80252ee <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8025602:	3a01      	subs	r2, #1
 8025604:	4293      	cmp	r3, r2
 8025606:	f6bf ae72 	bge.w	80252ee <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 802560a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802560e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8025612:	f1bb 0f00 	cmp.w	fp, #0
 8025616:	dc71      	bgt.n	80256fc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8025618:	9b07      	ldr	r3, [sp, #28]
 802561a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802561e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025620:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8025624:	930a      	str	r3, [sp, #40]	; 0x28
 8025626:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8025628:	2b00      	cmp	r3, #0
 802562a:	f340 81af 	ble.w	802598c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 802562e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025632:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025634:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8025638:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802563c:	eef0 6a48 	vmov.f32	s13, s16
 8025640:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8025644:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8025648:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802564c:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 8025650:	eef0 6a68 	vmov.f32	s13, s17
 8025654:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025658:	ee16 5a90 	vmov	r5, s13
 802565c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8025660:	ee69 7a27 	vmul.f32	s15, s18, s15
 8025664:	ee37 8a48 	vsub.f32	s16, s14, s16
 8025668:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802566c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8025670:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8025674:	ee18 2a10 	vmov	r2, s16
 8025678:	eeb0 8a47 	vmov.f32	s16, s14
 802567c:	fb92 f3f3 	sdiv	r3, r2, r3
 8025680:	ee18 2a90 	vmov	r2, s17
 8025684:	932f      	str	r3, [sp, #188]	; 0xbc
 8025686:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025688:	eef0 8a67 	vmov.f32	s17, s15
 802568c:	fb92 f3f3 	sdiv	r3, r2, r3
 8025690:	9330      	str	r3, [sp, #192]	; 0xc0
 8025692:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8025694:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8025696:	3b01      	subs	r3, #1
 8025698:	9316      	str	r3, [sp, #88]	; 0x58
 802569a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802569c:	bf08      	it	eq
 802569e:	4613      	moveq	r3, r2
 80256a0:	9307      	str	r3, [sp, #28]
 80256a2:	e5f9      	b.n	8025298 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 80256a4:	2800      	cmp	r0, #0
 80256a6:	f43f ae6b 	beq.w	8025380 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 80256aa:	f818 1001 	ldrb.w	r1, [r8, r1]
 80256ae:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80256b2:	9108      	str	r1, [sp, #32]
 80256b4:	0e09      	lsrs	r1, r1, #24
 80256b6:	9110      	str	r1, [sp, #64]	; 0x40
 80256b8:	e662      	b.n	8025380 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 80256ba:	f113 0801 	adds.w	r8, r3, #1
 80256be:	f53f af74 	bmi.w	80255aa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 80256c2:	4541      	cmp	r1, r8
 80256c4:	f6ff af71 	blt.w	80255aa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 80256c8:	f11c 0801 	adds.w	r8, ip, #1
 80256cc:	f53f af6d 	bmi.w	80255aa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 80256d0:	45c6      	cmp	lr, r8
 80256d2:	f6ff af6a 	blt.w	80255aa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 80256d6:	b209      	sxth	r1, r1
 80256d8:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80256dc:	fa0f f38e 	sxth.w	r3, lr
 80256e0:	9100      	str	r1, [sp, #0]
 80256e2:	4639      	mov	r1, r7
 80256e4:	9301      	str	r3, [sp, #4]
 80256e6:	4633      	mov	r3, r6
 80256e8:	e9cd 2004 	strd	r2, r0, [sp, #16]
 80256ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80256ee:	9819      	ldr	r0, [sp, #100]	; 0x64
 80256f0:	f7ff fc4c 	bl	8024f8c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 80256f4:	e759      	b.n	80255aa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 80256f6:	bf00      	nop
 80256f8:	fffff800 	.word	0xfffff800
 80256fc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80256fe:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8025702:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8025704:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025708:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802570a:	1427      	asrs	r7, r4, #16
 802570c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802570e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025712:	142b      	asrs	r3, r5, #16
 8025714:	fb01 7303 	mla	r3, r1, r3, r7
 8025718:	18e7      	adds	r7, r4, r3
 802571a:	5ce3      	ldrb	r3, [r4, r3]
 802571c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025720:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8025724:	2a00      	cmp	r2, #0
 8025726:	f000 8127 	beq.w	8025978 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x734>
 802572a:	f897 e001 	ldrb.w	lr, [r7, #1]
 802572e:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8025732:	940d      	str	r4, [sp, #52]	; 0x34
 8025734:	0e24      	lsrs	r4, r4, #24
 8025736:	9414      	str	r4, [sp, #80]	; 0x50
 8025738:	b170      	cbz	r0, 8025758 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 802573a:	eb07 0e01 	add.w	lr, r7, r1
 802573e:	5c79      	ldrb	r1, [r7, r1]
 8025740:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025744:	9109      	str	r1, [sp, #36]	; 0x24
 8025746:	0e09      	lsrs	r1, r1, #24
 8025748:	9111      	str	r1, [sp, #68]	; 0x44
 802574a:	f89e 1001 	ldrb.w	r1, [lr, #1]
 802574e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025752:	910e      	str	r1, [sp, #56]	; 0x38
 8025754:	0e09      	lsrs	r1, r1, #24
 8025756:	9115      	str	r1, [sp, #84]	; 0x54
 8025758:	b292      	uxth	r2, r2
 802575a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802575c:	b280      	uxth	r0, r0
 802575e:	fb02 f800 	mul.w	r8, r2, r0
 8025762:	0112      	lsls	r2, r2, #4
 8025764:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8025768:	eba2 0e08 	sub.w	lr, r2, r8
 802576c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8025770:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8025772:	b280      	uxth	r0, r0
 8025774:	fa1f fe8e 	uxth.w	lr, lr
 8025778:	1a09      	subs	r1, r1, r0
 802577a:	fb0e f202 	mul.w	r2, lr, r2
 802577e:	b289      	uxth	r1, r1
 8025780:	fb01 220c 	mla	r2, r1, ip, r2
 8025784:	fb00 2204 	mla	r2, r0, r4, r2
 8025788:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802578a:	fb08 2204 	mla	r2, r8, r4, r2
 802578e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8025792:	2a00      	cmp	r2, #0
 8025794:	f000 80e5 	beq.w	8025962 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 8025798:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802579c:	d019      	beq.n	80257d2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58e>
 802579e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80257a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80257a6:	fb0c fa0a 	mul.w	sl, ip, sl
 80257aa:	fb0c fc03 	mul.w	ip, ip, r3
 80257ae:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80257b2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80257b6:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80257ba:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80257be:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80257c2:	4453      	add	r3, sl
 80257c4:	0a3f      	lsrs	r7, r7, #8
 80257c6:	0a1b      	lsrs	r3, r3, #8
 80257c8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80257cc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80257d0:	433b      	orrs	r3, r7
 80257d2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80257d4:	2cff      	cmp	r4, #255	; 0xff
 80257d6:	d020      	beq.n	802581a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d6>
 80257d8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80257da:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80257de:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80257e0:	4367      	muls	r7, r4
 80257e2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80257e4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80257e8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80257ec:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80257ee:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80257f2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80257f6:	fb04 fa0a 	mul.w	sl, r4, sl
 80257fa:	44bc      	add	ip, r7
 80257fc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025800:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025804:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025808:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802580c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025810:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025814:	ea4c 040a 	orr.w	r4, ip, sl
 8025818:	940d      	str	r4, [sp, #52]	; 0x34
 802581a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802581c:	2cff      	cmp	r4, #255	; 0xff
 802581e:	d020      	beq.n	8025862 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61e>
 8025820:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8025822:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025826:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025828:	4367      	muls	r7, r4
 802582a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802582c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025830:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025834:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025836:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802583a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802583e:	fb04 fa0a 	mul.w	sl, r4, sl
 8025842:	44bc      	add	ip, r7
 8025844:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025848:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802584c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025850:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025854:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025858:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802585c:	ea4c 040a 	orr.w	r4, ip, sl
 8025860:	9409      	str	r4, [sp, #36]	; 0x24
 8025862:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8025864:	2cff      	cmp	r4, #255	; 0xff
 8025866:	d020      	beq.n	80258aa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x666>
 8025868:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802586a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802586e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8025870:	4367      	muls	r7, r4
 8025872:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025874:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025878:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802587c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802587e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025882:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025886:	fb04 fa0a 	mul.w	sl, r4, sl
 802588a:	44bc      	add	ip, r7
 802588c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025890:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025894:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025898:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802589c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80258a0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80258a4:	ea4c 040a 	orr.w	r4, ip, sl
 80258a8:	940e      	str	r4, [sp, #56]	; 0x38
 80258aa:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80258ac:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80258b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80258b4:	43d2      	mvns	r2, r2
 80258b6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80258ba:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80258bc:	b2d2      	uxtb	r2, r2
 80258be:	fb0e f707 	mul.w	r7, lr, r7
 80258c2:	fb01 770c 	mla	r7, r1, ip, r7
 80258c6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80258ca:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80258cc:	fb00 770c 	mla	r7, r0, ip, r7
 80258d0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80258d4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80258d6:	fb08 770c 	mla	r7, r8, ip, r7
 80258da:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 80258de:	fb0e fe0c 	mul.w	lr, lr, ip
 80258e2:	0a3f      	lsrs	r7, r7, #8
 80258e4:	fb01 e303 	mla	r3, r1, r3, lr
 80258e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80258ea:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80258ee:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80258f2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80258f4:	fb00 330a 	mla	r3, r0, sl, r3
 80258f8:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 80258fc:	fb08 3c0c 	mla	ip, r8, ip, r3
 8025900:	f8b9 3000 	ldrh.w	r3, [r9]
 8025904:	1218      	asrs	r0, r3, #8
 8025906:	10d9      	asrs	r1, r3, #3
 8025908:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802590c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025910:	00db      	lsls	r3, r3, #3
 8025912:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8025916:	4350      	muls	r0, r2
 8025918:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802591c:	b2db      	uxtb	r3, r3
 802591e:	4351      	muls	r1, r2
 8025920:	ea47 070c 	orr.w	r7, r7, ip
 8025924:	4353      	muls	r3, r2
 8025926:	1c42      	adds	r2, r0, #1
 8025928:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802592c:	0c3a      	lsrs	r2, r7, #16
 802592e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8025932:	4a19      	ldr	r2, [pc, #100]	; (8025998 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>)
 8025934:	b2c0      	uxtb	r0, r0
 8025936:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 802593a:	1c4a      	adds	r2, r1, #1
 802593c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8025940:	0a3a      	lsrs	r2, r7, #8
 8025942:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8025946:	00c9      	lsls	r1, r1, #3
 8025948:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802594c:	4301      	orrs	r1, r0
 802594e:	1c58      	adds	r0, r3, #1
 8025950:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8025954:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8025958:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 802595c:	4308      	orrs	r0, r1
 802595e:	f8a9 0000 	strh.w	r0, [r9]
 8025962:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8025964:	f109 0902 	add.w	r9, r9, #2
 8025968:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802596a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802596e:	441a      	add	r2, r3
 8025970:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025972:	922d      	str	r2, [sp, #180]	; 0xb4
 8025974:	441d      	add	r5, r3
 8025976:	e64c      	b.n	8025612 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 8025978:	2800      	cmp	r0, #0
 802597a:	f43f aeed 	beq.w	8025758 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 802597e:	5c79      	ldrb	r1, [r7, r1]
 8025980:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025984:	9109      	str	r1, [sp, #36]	; 0x24
 8025986:	0e09      	lsrs	r1, r1, #24
 8025988:	9111      	str	r1, [sp, #68]	; 0x44
 802598a:	e6e5      	b.n	8025758 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 802598c:	b01b      	add	sp, #108	; 0x6c
 802598e:	ecbd 8b08 	vpop	{d8-d11}
 8025992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025996:	bf00      	nop
 8025998:	fffff800 	.word	0xfffff800

0802599c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 802599c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80259a0:	b085      	sub	sp, #20
 80259a2:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 80259a6:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 80259aa:	9103      	str	r1, [sp, #12]
 80259ac:	2d00      	cmp	r5, #0
 80259ae:	fb05 7106 	mla	r1, r5, r6, r7
 80259b2:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 80259b6:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 80259ba:	eb02 0441 	add.w	r4, r2, r1, lsl #1
 80259be:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 80259c2:	eb03 0901 	add.w	r9, r3, r1
 80259c6:	9401      	str	r4, [sp, #4]
 80259c8:	f2c0 80c0 	blt.w	8025b4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 80259cc:	45a8      	cmp	r8, r5
 80259ce:	f340 80bd 	ble.w	8025b4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 80259d2:	2f00      	cmp	r7, #0
 80259d4:	f2c0 80b6 	blt.w	8025b44 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 80259d8:	42be      	cmp	r6, r7
 80259da:	f340 80b3 	ble.w	8025b44 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 80259de:	f813 c001 	ldrb.w	ip, [r3, r1]
 80259e2:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 80259e6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80259ea:	d019      	beq.n	8025a20 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x84>
 80259ec:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 80259f0:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80259f4:	435a      	muls	r2, r3
 80259f6:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 80259fa:	f64f 011f 	movw	r1, #63519	; 0xf81f
 80259fe:	fb0c f403 	mul.w	r4, ip, r3
 8025a02:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 8025a06:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8025a0a:	441a      	add	r2, r3
 8025a0c:	f104 0320 	add.w	r3, r4, #32
 8025a10:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8025a14:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 8025a18:	0a1b      	lsrs	r3, r3, #8
 8025a1a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025a1e:	4319      	orrs	r1, r3
 8025a20:	b289      	uxth	r1, r1
 8025a22:	1c7b      	adds	r3, r7, #1
 8025a24:	f100 8097 	bmi.w	8025b56 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 8025a28:	429e      	cmp	r6, r3
 8025a2a:	f340 8094 	ble.w	8025b56 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 8025a2e:	2800      	cmp	r0, #0
 8025a30:	f000 8094 	beq.w	8025b5c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c0>
 8025a34:	f899 4001 	ldrb.w	r4, [r9, #1]
 8025a38:	9b01      	ldr	r3, [sp, #4]
 8025a3a:	2cff      	cmp	r4, #255	; 0xff
 8025a3c:	885b      	ldrh	r3, [r3, #2]
 8025a3e:	d01b      	beq.n	8025a78 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xdc>
 8025a40:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 8025a44:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8025a48:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025a4c:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8025a50:	fb0a f202 	mul.w	r2, sl, r2
 8025a54:	fb04 fa03 	mul.w	sl, r4, r3
 8025a58:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 8025a5c:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8025a60:	441a      	add	r2, r3
 8025a62:	f10a 0320 	add.w	r3, sl, #32
 8025a66:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8025a6a:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 8025a6e:	0a1b      	lsrs	r3, r3, #8
 8025a70:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025a74:	ea4b 0303 	orr.w	r3, fp, r3
 8025a78:	b29b      	uxth	r3, r3
 8025a7a:	3501      	adds	r5, #1
 8025a7c:	d474      	bmi.n	8025b68 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 8025a7e:	45a8      	cmp	r8, r5
 8025a80:	dd72      	ble.n	8025b68 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 8025a82:	f1be 0f00 	cmp.w	lr, #0
 8025a86:	f000 8120 	beq.w	8025cca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x32e>
 8025a8a:	2f00      	cmp	r7, #0
 8025a8c:	db69      	blt.n	8025b62 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 8025a8e:	42be      	cmp	r6, r7
 8025a90:	dd67      	ble.n	8025b62 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 8025a92:	f819 5006 	ldrb.w	r5, [r9, r6]
 8025a96:	9a01      	ldr	r2, [sp, #4]
 8025a98:	2dff      	cmp	r5, #255	; 0xff
 8025a9a:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 8025a9e:	d01c      	beq.n	8025ada <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x13e>
 8025aa0:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 8025aa4:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8025aa8:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8025aac:	fb08 f802 	mul.w	r8, r8, r2
 8025ab0:	fb05 fa0b 	mul.w	sl, r5, fp
 8025ab4:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8025ab8:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 8025abc:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025ac0:	4490      	add	r8, r2
 8025ac2:	f10a 0220 	add.w	r2, sl, #32
 8025ac6:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 8025aca:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 8025ace:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025ad2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8025ad6:	ea4b 0b0a 	orr.w	fp, fp, sl
 8025ada:	fa1f fb8b 	uxth.w	fp, fp
 8025ade:	3701      	adds	r7, #1
 8025ae0:	d447      	bmi.n	8025b72 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 8025ae2:	42be      	cmp	r6, r7
 8025ae4:	dd45      	ble.n	8025b72 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 8025ae6:	2800      	cmp	r0, #0
 8025ae8:	d046      	beq.n	8025b78 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1dc>
 8025aea:	3601      	adds	r6, #1
 8025aec:	9a01      	ldr	r2, [sp, #4]
 8025aee:	f819 7006 	ldrb.w	r7, [r9, r6]
 8025af2:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 8025af6:	2fff      	cmp	r7, #255	; 0xff
 8025af8:	d01a      	beq.n	8025b30 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x194>
 8025afa:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 8025afe:	ea4f 08e7 	mov.w	r8, r7, asr #3
 8025b02:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025b06:	fb08 f806 	mul.w	r8, r8, r6
 8025b0a:	fb07 f902 	mul.w	r9, r7, r2
 8025b0e:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8025b12:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 8025b16:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025b1a:	44b0      	add	r8, r6
 8025b1c:	f109 0620 	add.w	r6, r9, #32
 8025b20:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 8025b24:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8025b28:	0a36      	lsrs	r6, r6, #8
 8025b2a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8025b2e:	4332      	orrs	r2, r6
 8025b30:	b292      	uxth	r2, r2
 8025b32:	280f      	cmp	r0, #15
 8025b34:	d922      	bls.n	8025b7c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e0>
 8025b36:	4b69      	ldr	r3, [pc, #420]	; (8025cdc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x340>)
 8025b38:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8025b3c:	4a68      	ldr	r2, [pc, #416]	; (8025ce0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x344>)
 8025b3e:	4869      	ldr	r0, [pc, #420]	; (8025ce4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x348>)
 8025b40:	f004 fa50 	bl	8029fe4 <__assert_func>
 8025b44:	f04f 0c00 	mov.w	ip, #0
 8025b48:	4661      	mov	r1, ip
 8025b4a:	e76a      	b.n	8025a22 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x86>
 8025b4c:	2400      	movs	r4, #0
 8025b4e:	46a4      	mov	ip, r4
 8025b50:	4623      	mov	r3, r4
 8025b52:	4621      	mov	r1, r4
 8025b54:	e791      	b.n	8025a7a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 8025b56:	2400      	movs	r4, #0
 8025b58:	4623      	mov	r3, r4
 8025b5a:	e78e      	b.n	8025a7a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 8025b5c:	4604      	mov	r4, r0
 8025b5e:	4603      	mov	r3, r0
 8025b60:	e78b      	b.n	8025a7a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 8025b62:	2500      	movs	r5, #0
 8025b64:	46ab      	mov	fp, r5
 8025b66:	e7ba      	b.n	8025ade <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x142>
 8025b68:	2700      	movs	r7, #0
 8025b6a:	463d      	mov	r5, r7
 8025b6c:	463a      	mov	r2, r7
 8025b6e:	46bb      	mov	fp, r7
 8025b70:	e7df      	b.n	8025b32 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 8025b72:	2700      	movs	r7, #0
 8025b74:	463a      	mov	r2, r7
 8025b76:	e7dc      	b.n	8025b32 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 8025b78:	4607      	mov	r7, r0
 8025b7a:	4602      	mov	r2, r0
 8025b7c:	f1be 0f0f 	cmp.w	lr, #15
 8025b80:	d8d9      	bhi.n	8025b36 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 8025b82:	b286      	uxth	r6, r0
 8025b84:	fa1f f98e 	uxth.w	r9, lr
 8025b88:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8025b8c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8025b90:	fb06 f809 	mul.w	r8, r6, r9
 8025b94:	0136      	lsls	r6, r6, #4
 8025b96:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025b9a:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8025b9e:	9601      	str	r6, [sp, #4]
 8025ba0:	ea4a 0101 	orr.w	r1, sl, r1
 8025ba4:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 8025ba8:	fa1f f689 	uxth.w	r6, r9
 8025bac:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8025bb0:	fb10 f90e 	smulbb	r9, r0, lr
 8025bb4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025bb8:	9602      	str	r6, [sp, #8]
 8025bba:	460e      	mov	r6, r1
 8025bbc:	ea4f 09e9 	mov.w	r9, r9, asr #3
 8025bc0:	f1ce 0110 	rsb	r1, lr, #16
 8025bc4:	ea4a 0303 	orr.w	r3, sl, r3
 8025bc8:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8025bcc:	1a09      	subs	r1, r1, r0
 8025bce:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 8025bd2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025bd6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025bda:	4343      	muls	r3, r0
 8025bdc:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 8025be0:	9801      	ldr	r0, [sp, #4]
 8025be2:	ea4a 0202 	orr.w	r2, sl, r2
 8025be6:	fb01 3106 	mla	r1, r1, r6, r3
 8025bea:	9e02      	ldr	r6, [sp, #8]
 8025bec:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8025bf0:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 8025bf4:	fb09 1302 	mla	r3, r9, r2, r1
 8025bf8:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8025bfc:	1b80      	subs	r0, r0, r6
 8025bfe:	9e01      	ldr	r6, [sp, #4]
 8025c00:	9a03      	ldr	r2, [sp, #12]
 8025c02:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025c06:	eba6 0608 	sub.w	r6, r6, r8
 8025c0a:	b280      	uxth	r0, r0
 8025c0c:	8811      	ldrh	r1, [r2, #0]
 8025c0e:	ea4a 0b0b 	orr.w	fp, sl, fp
 8025c12:	b2b6      	uxth	r6, r6
 8025c14:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8025c18:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8025c1c:	4374      	muls	r4, r6
 8025c1e:	b292      	uxth	r2, r2
 8025c20:	fb0e 3e0b 	mla	lr, lr, fp, r3
 8025c24:	fb0c 4400 	mla	r4, ip, r0, r4
 8025c28:	9802      	ldr	r0, [sp, #8]
 8025c2a:	ea4f 535e 	mov.w	r3, lr, lsr #21
 8025c2e:	fb00 4505 	mla	r5, r0, r5, r4
 8025c32:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8025c36:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025c3a:	1208      	asrs	r0, r1, #8
 8025c3c:	fb08 5707 	mla	r7, r8, r7, r5
 8025c40:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8025c44:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025c48:	10cd      	asrs	r5, r1, #3
 8025c4a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8025c4e:	ea43 0e0e 	orr.w	lr, r3, lr
 8025c52:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8025c56:	4357      	muls	r7, r2
 8025c58:	fa1f f38e 	uxth.w	r3, lr
 8025c5c:	f107 0801 	add.w	r8, r7, #1
 8025c60:	121c      	asrs	r4, r3, #8
 8025c62:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8025c66:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8025c6a:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 8025c6e:	b2ff      	uxtb	r7, r7
 8025c70:	fb10 f007 	smulbb	r0, r0, r7
 8025c74:	fb15 f507 	smulbb	r5, r5, r7
 8025c78:	fb04 0402 	mla	r4, r4, r2, r0
 8025c7c:	10d8      	asrs	r0, r3, #3
 8025c7e:	00db      	lsls	r3, r3, #3
 8025c80:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8025c84:	b2a4      	uxth	r4, r4
 8025c86:	fb00 5002 	mla	r0, r0, r2, r5
 8025c8a:	b2dd      	uxtb	r5, r3
 8025c8c:	00cb      	lsls	r3, r1, #3
 8025c8e:	b280      	uxth	r0, r0
 8025c90:	b2db      	uxtb	r3, r3
 8025c92:	fb13 f307 	smulbb	r3, r3, r7
 8025c96:	fb05 3202 	mla	r2, r5, r2, r3
 8025c9a:	1c63      	adds	r3, r4, #1
 8025c9c:	b292      	uxth	r2, r2
 8025c9e:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8025ca2:	1c53      	adds	r3, r2, #1
 8025ca4:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8025ca8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025cac:	1c42      	adds	r2, r0, #1
 8025cae:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8025cb2:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8025cb6:	9a03      	ldr	r2, [sp, #12]
 8025cb8:	0940      	lsrs	r0, r0, #5
 8025cba:	4323      	orrs	r3, r4
 8025cbc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025cc0:	4303      	orrs	r3, r0
 8025cc2:	8013      	strh	r3, [r2, #0]
 8025cc4:	b005      	add	sp, #20
 8025cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025cca:	280f      	cmp	r0, #15
 8025ccc:	f63f af33 	bhi.w	8025b36 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 8025cd0:	4677      	mov	r7, lr
 8025cd2:	4675      	mov	r5, lr
 8025cd4:	4672      	mov	r2, lr
 8025cd6:	46f3      	mov	fp, lr
 8025cd8:	e753      	b.n	8025b82 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e6>
 8025cda:	bf00      	nop
 8025cdc:	0802f359 	.word	0x0802f359
 8025ce0:	0802f926 	.word	0x0802f926
 8025ce4:	0802f3dd 	.word	0x0802f3dd

08025ce8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025cec:	ed2d 8b08 	vpush	{d8-d11}
 8025cf0:	b097      	sub	sp, #92	; 0x5c
 8025cf2:	eeb0 aa40 	vmov.f32	s20, s0
 8025cf6:	eef0 9a60 	vmov.f32	s19, s1
 8025cfa:	9214      	str	r2, [sp, #80]	; 0x50
 8025cfc:	eeb0 9a41 	vmov.f32	s18, s2
 8025d00:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8025d02:	eeb0 8a62 	vmov.f32	s16, s5
 8025d06:	9308      	str	r3, [sp, #32]
 8025d08:	eef0 8a43 	vmov.f32	s17, s6
 8025d0c:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8025d10:	eef0 ba44 	vmov.f32	s23, s8
 8025d14:	9015      	str	r0, [sp, #84]	; 0x54
 8025d16:	eeb0 ba64 	vmov.f32	s22, s9
 8025d1a:	9312      	str	r3, [sp, #72]	; 0x48
 8025d1c:	eef0 aa45 	vmov.f32	s21, s10
 8025d20:	6850      	ldr	r0, [r2, #4]
 8025d22:	9111      	str	r1, [sp, #68]	; 0x44
 8025d24:	6812      	ldr	r2, [r2, #0]
 8025d26:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8025d2a:	fb00 1303 	mla	r3, r0, r3, r1
 8025d2e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025d32:	9309      	str	r3, [sp, #36]	; 0x24
 8025d34:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025d36:	681b      	ldr	r3, [r3, #0]
 8025d38:	930b      	str	r3, [sp, #44]	; 0x2c
 8025d3a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025d3c:	685b      	ldr	r3, [r3, #4]
 8025d3e:	930c      	str	r3, [sp, #48]	; 0x30
 8025d40:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8025d44:	930a      	str	r3, [sp, #40]	; 0x28
 8025d46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025d48:	2b00      	cmp	r3, #0
 8025d4a:	dc03      	bgt.n	8025d54 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8025d4c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8025d4e:	2b00      	cmp	r3, #0
 8025d50:	f340 83cd 	ble.w	80264ee <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x806>
 8025d54:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025d56:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025d5a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025d5e:	1e48      	subs	r0, r1, #1
 8025d60:	1e55      	subs	r5, r2, #1
 8025d62:	9b08      	ldr	r3, [sp, #32]
 8025d64:	2b00      	cmp	r3, #0
 8025d66:	f340 81a5 	ble.w	80260b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8025d6a:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 8025d6c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025d6e:	1436      	asrs	r6, r6, #16
 8025d70:	ea4f 4323 	mov.w	r3, r3, asr #16
 8025d74:	d406      	bmi.n	8025d84 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8025d76:	4286      	cmp	r6, r0
 8025d78:	da04      	bge.n	8025d84 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8025d7a:	2b00      	cmp	r3, #0
 8025d7c:	db02      	blt.n	8025d84 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8025d7e:	42ab      	cmp	r3, r5
 8025d80:	f2c0 8199 	blt.w	80260b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 8025d84:	3601      	adds	r6, #1
 8025d86:	f100 8186 	bmi.w	8026096 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8025d8a:	42b1      	cmp	r1, r6
 8025d8c:	f2c0 8183 	blt.w	8026096 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8025d90:	3301      	adds	r3, #1
 8025d92:	f100 8180 	bmi.w	8026096 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8025d96:	429a      	cmp	r2, r3
 8025d98:	f2c0 817d 	blt.w	8026096 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8025d9c:	9b08      	ldr	r3, [sp, #32]
 8025d9e:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8025da2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8025da4:	9313      	str	r3, [sp, #76]	; 0x4c
 8025da6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025da8:	2b00      	cmp	r3, #0
 8025daa:	f340 81a6 	ble.w	80260fa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8025dae:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025db0:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8025db2:	1418      	asrs	r0, r3, #16
 8025db4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025db6:	142d      	asrs	r5, r5, #16
 8025db8:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8025dbc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025dbe:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8025dc2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025dc4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8025dc8:	f100 81fa 	bmi.w	80261c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8025dcc:	f102 3eff 	add.w	lr, r2, #4294967295
 8025dd0:	4575      	cmp	r5, lr
 8025dd2:	f280 81f5 	bge.w	80261c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8025dd6:	2800      	cmp	r0, #0
 8025dd8:	f2c0 81f2 	blt.w	80261c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8025ddc:	f103 3eff 	add.w	lr, r3, #4294967295
 8025de0:	4570      	cmp	r0, lr
 8025de2:	f280 81ed 	bge.w	80261c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8025de6:	b212      	sxth	r2, r2
 8025de8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025dea:	fa1f fe81 	uxth.w	lr, r1
 8025dee:	fb00 5002 	mla	r0, r0, r2, r5
 8025df2:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8025df6:	eb03 0a00 	add.w	sl, r3, r0
 8025dfa:	f813 9000 	ldrb.w	r9, [r3, r0]
 8025dfe:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8025e02:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8025e06:	b29b      	uxth	r3, r3
 8025e08:	f1bc 0f00 	cmp.w	ip, #0
 8025e0c:	f000 81bb 	beq.w	8026186 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8025e10:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8025e14:	eb0a 0b02 	add.w	fp, sl, r2
 8025e18:	fa1f fa8c 	uxth.w	sl, ip
 8025e1c:	940d      	str	r4, [sp, #52]	; 0x34
 8025e1e:	fb0a fe0e 	mul.w	lr, sl, lr
 8025e22:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8025e26:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8025e2a:	eba5 050e 	sub.w	r5, r5, lr
 8025e2e:	940e      	str	r4, [sp, #56]	; 0x38
 8025e30:	fa1f fa8a 	uxth.w	sl, sl
 8025e34:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025e36:	b2ad      	uxth	r5, r5
 8025e38:	eba3 030a 	sub.w	r3, r3, sl
 8025e3c:	fb08 f505 	mul.w	r5, r8, r5
 8025e40:	b29b      	uxth	r3, r3
 8025e42:	fb09 5303 	mla	r3, r9, r3, r5
 8025e46:	fb0a 3304 	mla	r3, sl, r4, r3
 8025e4a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025e4c:	fb0e 3304 	mla	r3, lr, r4, r3
 8025e50:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025e54:	2b00      	cmp	r3, #0
 8025e56:	f000 8111 	beq.w	802607c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8025e5a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025e5c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8025e60:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8025e64:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8025e68:	f000 8192 	beq.w	8026190 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 8025e6c:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8025e70:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8025e74:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025e78:	fb0a fe0e 	mul.w	lr, sl, lr
 8025e7c:	fb09 f000 	mul.w	r0, r9, r0
 8025e80:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8025e84:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8025e88:	f100 0b20 	add.w	fp, r0, #32
 8025e8c:	44ce      	add	lr, r9
 8025e8e:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8025e92:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8025e96:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025e9a:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8025e9e:	ea4e 0909 	orr.w	r9, lr, r9
 8025ea2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8025ea6:	8868      	ldrh	r0, [r5, #2]
 8025ea8:	d019      	beq.n	8025ede <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 8025eaa:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8025eae:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8025eb2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025eb6:	fb0a fe0e 	mul.w	lr, sl, lr
 8025eba:	fb08 f800 	mul.w	r8, r8, r0
 8025ebe:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8025ec2:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8025ec6:	f108 0b20 	add.w	fp, r8, #32
 8025eca:	4486      	add	lr, r0
 8025ecc:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8025ed0:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8025ed4:	0a00      	lsrs	r0, r0, #8
 8025ed6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025eda:	ea4e 0000 	orr.w	r0, lr, r0
 8025ede:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8025ee2:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8025ee6:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8025eea:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025eee:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8025ef2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025ef6:	ea4e 0909 	orr.w	r9, lr, r9
 8025efa:	ea4a 0000 	orr.w	r0, sl, r0
 8025efe:	f1bc 0f00 	cmp.w	ip, #0
 8025f02:	f000 8147 	beq.w	8026194 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 8025f06:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8025f0a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025f0c:	3a01      	subs	r2, #1
 8025f0e:	2cff      	cmp	r4, #255	; 0xff
 8025f10:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8025f14:	f102 0202 	add.w	r2, r2, #2
 8025f18:	eb05 0e02 	add.w	lr, r5, r2
 8025f1c:	5aaa      	ldrh	r2, [r5, r2]
 8025f1e:	d018      	beq.n	8025f52 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8025f20:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8025f24:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025f28:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025f2c:	fb04 fa02 	mul.w	sl, r4, r2
 8025f30:	fb08 f805 	mul.w	r8, r8, r5
 8025f34:	f10a 0520 	add.w	r5, sl, #32
 8025f38:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8025f3c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025f40:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8025f44:	4442      	add	r2, r8
 8025f46:	0a2d      	lsrs	r5, r5, #8
 8025f48:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8025f4c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8025f50:	432a      	orrs	r2, r5
 8025f52:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025f54:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8025f58:	2cff      	cmp	r4, #255	; 0xff
 8025f5a:	d01a      	beq.n	8025f92 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2aa>
 8025f5c:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8025f60:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8025f64:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025f68:	fb04 fa05 	mul.w	sl, r4, r5
 8025f6c:	fb08 f80e 	mul.w	r8, r8, lr
 8025f70:	f10a 0e20 	add.w	lr, sl, #32
 8025f74:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8025f78:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025f7c:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8025f80:	4445      	add	r5, r8
 8025f82:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025f86:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8025f8a:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8025f8e:	ea45 050e 	orr.w	r5, r5, lr
 8025f92:	fb1c fe01 	smulbb	lr, ip, r1
 8025f96:	f1cc 0810 	rsb	r8, ip, #16
 8025f9a:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8025f9e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025fa2:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8025fa6:	eba8 0801 	sub.w	r8, r8, r1
 8025faa:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8025fae:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025fb2:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8025fb6:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8025fba:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8025fbe:	ea4a 0202 	orr.w	r2, sl, r2
 8025fc2:	4341      	muls	r1, r0
 8025fc4:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8025fc8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8025fcc:	fb09 1108 	mla	r1, r9, r8, r1
 8025fd0:	ea4b 0505 	orr.w	r5, fp, r5
 8025fd4:	fb0c 1102 	mla	r1, ip, r2, r1
 8025fd8:	fb0e 1e05 	mla	lr, lr, r5, r1
 8025fdc:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8025fe0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8025fe4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025fe8:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8025fec:	ea42 0e0e 	orr.w	lr, r2, lr
 8025ff0:	fa1f f28e 	uxth.w	r2, lr
 8025ff4:	2bff      	cmp	r3, #255	; 0xff
 8025ff6:	d103      	bne.n	8026000 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8025ff8:	9912      	ldr	r1, [sp, #72]	; 0x48
 8025ffa:	29ff      	cmp	r1, #255	; 0xff
 8025ffc:	f000 80de 	beq.w	80261bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 8026000:	990a      	ldr	r1, [sp, #40]	; 0x28
 8026002:	1215      	asrs	r5, r2, #8
 8026004:	8838      	ldrh	r0, [r7, #0]
 8026006:	434b      	muls	r3, r1
 8026008:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802600c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802600e:	f103 0c01 	add.w	ip, r3, #1
 8026012:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 8026016:	ea6f 2323 	mvn.w	r3, r3, asr #8
 802601a:	fa5f fc83 	uxtb.w	ip, r3
 802601e:	1203      	asrs	r3, r0, #8
 8026020:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8026024:	fb13 f30c 	smulbb	r3, r3, ip
 8026028:	fb05 3501 	mla	r5, r5, r1, r3
 802602c:	10c3      	asrs	r3, r0, #3
 802602e:	10d1      	asrs	r1, r2, #3
 8026030:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8026034:	00d2      	lsls	r2, r2, #3
 8026036:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802603a:	b2ad      	uxth	r5, r5
 802603c:	fb13 f30c 	smulbb	r3, r3, ip
 8026040:	b2d2      	uxtb	r2, r2
 8026042:	fb01 3104 	mla	r1, r1, r4, r3
 8026046:	00c3      	lsls	r3, r0, #3
 8026048:	b2db      	uxtb	r3, r3
 802604a:	b289      	uxth	r1, r1
 802604c:	fb13 f30c 	smulbb	r3, r3, ip
 8026050:	fb02 3304 	mla	r3, r2, r4, r3
 8026054:	b29a      	uxth	r2, r3
 8026056:	1c6b      	adds	r3, r5, #1
 8026058:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802605c:	1c53      	adds	r3, r2, #1
 802605e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026062:	1c4a      	adds	r2, r1, #1
 8026064:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8026068:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802606c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026070:	0949      	lsrs	r1, r1, #5
 8026072:	432b      	orrs	r3, r5
 8026074:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026078:	430b      	orrs	r3, r1
 802607a:	803b      	strh	r3, [r7, #0]
 802607c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802607e:	3702      	adds	r7, #2
 8026080:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8026082:	4413      	add	r3, r2
 8026084:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8026086:	9329      	str	r3, [sp, #164]	; 0xa4
 8026088:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802608a:	441a      	add	r2, r3
 802608c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802608e:	3b01      	subs	r3, #1
 8026090:	922a      	str	r2, [sp, #168]	; 0xa8
 8026092:	9313      	str	r3, [sp, #76]	; 0x4c
 8026094:	e687      	b.n	8025da6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8026096:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8026098:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 802609a:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 802609c:	4433      	add	r3, r6
 802609e:	9329      	str	r3, [sp, #164]	; 0xa4
 80260a0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80260a2:	441c      	add	r4, r3
 80260a4:	9b08      	ldr	r3, [sp, #32]
 80260a6:	3b01      	subs	r3, #1
 80260a8:	942a      	str	r4, [sp, #168]	; 0xa8
 80260aa:	9308      	str	r3, [sp, #32]
 80260ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80260ae:	3302      	adds	r3, #2
 80260b0:	9309      	str	r3, [sp, #36]	; 0x24
 80260b2:	e656      	b.n	8025d62 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80260b4:	d028      	beq.n	8026108 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 80260b6:	9b08      	ldr	r3, [sp, #32]
 80260b8:	982b      	ldr	r0, [sp, #172]	; 0xac
 80260ba:	3b01      	subs	r3, #1
 80260bc:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 80260be:	fb00 5003 	mla	r0, r0, r3, r5
 80260c2:	1400      	asrs	r0, r0, #16
 80260c4:	f53f ae6a 	bmi.w	8025d9c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80260c8:	3901      	subs	r1, #1
 80260ca:	4288      	cmp	r0, r1
 80260cc:	f6bf ae66 	bge.w	8025d9c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80260d0:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80260d2:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80260d4:	fb01 0303 	mla	r3, r1, r3, r0
 80260d8:	141b      	asrs	r3, r3, #16
 80260da:	f53f ae5f 	bmi.w	8025d9c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80260de:	3a01      	subs	r2, #1
 80260e0:	4293      	cmp	r3, r2
 80260e2:	f6bf ae5b 	bge.w	8025d9c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80260e6:	9b08      	ldr	r3, [sp, #32]
 80260e8:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80260ec:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 80260f0:	9313      	str	r3, [sp, #76]	; 0x4c
 80260f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80260f4:	2b00      	cmp	r3, #0
 80260f6:	f300 8082 	bgt.w	80261fe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 80260fa:	9b08      	ldr	r3, [sp, #32]
 80260fc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026100:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026102:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8026106:	9309      	str	r3, [sp, #36]	; 0x24
 8026108:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802610a:	2b00      	cmp	r3, #0
 802610c:	f340 81ef 	ble.w	80264ee <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x806>
 8026110:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026114:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026116:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802611a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802611e:	eef0 6a48 	vmov.f32	s13, s16
 8026122:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8026126:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802612a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802612e:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8026132:	eef0 6a68 	vmov.f32	s13, s17
 8026136:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802613a:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 802613e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8026142:	ee69 7a27 	vmul.f32	s15, s18, s15
 8026146:	ee37 8a48 	vsub.f32	s16, s14, s16
 802614a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802614e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8026152:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8026156:	ee18 2a10 	vmov	r2, s16
 802615a:	eeb0 8a47 	vmov.f32	s16, s14
 802615e:	fb92 f3f3 	sdiv	r3, r2, r3
 8026162:	ee18 2a90 	vmov	r2, s17
 8026166:	932b      	str	r3, [sp, #172]	; 0xac
 8026168:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802616a:	eef0 8a67 	vmov.f32	s17, s15
 802616e:	fb92 f3f3 	sdiv	r3, r2, r3
 8026172:	932c      	str	r3, [sp, #176]	; 0xb0
 8026174:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8026176:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8026178:	3b01      	subs	r3, #1
 802617a:	9311      	str	r3, [sp, #68]	; 0x44
 802617c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802617e:	bf08      	it	eq
 8026180:	4613      	moveq	r3, r2
 8026182:	9308      	str	r3, [sp, #32]
 8026184:	e5df      	b.n	8025d46 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8026186:	fb08 f505 	mul.w	r5, r8, r5
 802618a:	fb09 5303 	mla	r3, r9, r3, r5
 802618e:	e65f      	b.n	8025e50 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x168>
 8026190:	4681      	mov	r9, r0
 8026192:	e686      	b.n	8025ea2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8026194:	f1c1 0210 	rsb	r2, r1, #16
 8026198:	4341      	muls	r1, r0
 802619a:	fb09 1902 	mla	r9, r9, r2, r1
 802619e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80261a2:	ea4f 5259 	mov.w	r2, r9, lsr #21
 80261a6:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80261aa:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80261ae:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80261b2:	ea42 0909 	orr.w	r9, r2, r9
 80261b6:	fa1f f289 	uxth.w	r2, r9
 80261ba:	e71b      	b.n	8025ff4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80261bc:	803a      	strh	r2, [r7, #0]
 80261be:	e75d      	b.n	802607c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80261c0:	f115 0e01 	adds.w	lr, r5, #1
 80261c4:	f53f af5a 	bmi.w	802607c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80261c8:	4572      	cmp	r2, lr
 80261ca:	f6ff af57 	blt.w	802607c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80261ce:	f110 0e01 	adds.w	lr, r0, #1
 80261d2:	f53f af53 	bmi.w	802607c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80261d6:	4573      	cmp	r3, lr
 80261d8:	f6ff af50 	blt.w	802607c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80261dc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80261de:	b21b      	sxth	r3, r3
 80261e0:	b212      	sxth	r2, r2
 80261e2:	9502      	str	r5, [sp, #8]
 80261e4:	9301      	str	r3, [sp, #4]
 80261e6:	9200      	str	r2, [sp, #0]
 80261e8:	e9cd 0103 	strd	r0, r1, [sp, #12]
 80261ec:	e9cd c405 	strd	ip, r4, [sp, #20]
 80261f0:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 80261f4:	4639      	mov	r1, r7
 80261f6:	9815      	ldr	r0, [sp, #84]	; 0x54
 80261f8:	f7ff fbd0 	bl	802599c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 80261fc:	e73e      	b.n	802607c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80261fe:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8026200:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8026204:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8026206:	f3c3 3503 	ubfx	r5, r3, #12, #4
 802620a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802620c:	fa1f fc82 	uxth.w	ip, r2
 8026210:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026214:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8026216:	ea4f 100c 	mov.w	r0, ip, lsl #4
 802621a:	141f      	asrs	r7, r3, #16
 802621c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802621e:	141b      	asrs	r3, r3, #16
 8026220:	fb01 3707 	mla	r7, r1, r7, r3
 8026224:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026226:	eb03 0a07 	add.w	sl, r3, r7
 802622a:	f813 9007 	ldrb.w	r9, [r3, r7]
 802622e:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8026232:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8026236:	b29b      	uxth	r3, r3
 8026238:	2d00      	cmp	r5, #0
 802623a:	f000 813d 	beq.w	80264b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d0>
 802623e:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8026242:	eb0a 0b01 	add.w	fp, sl, r1
 8026246:	fa1f fa85 	uxth.w	sl, r5
 802624a:	940f      	str	r4, [sp, #60]	; 0x3c
 802624c:	fb0a fc0c 	mul.w	ip, sl, ip
 8026250:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8026254:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8026258:	eba0 000c 	sub.w	r0, r0, ip
 802625c:	9410      	str	r4, [sp, #64]	; 0x40
 802625e:	fa1f fa8a 	uxth.w	sl, sl
 8026262:	b280      	uxth	r0, r0
 8026264:	eba3 030a 	sub.w	r3, r3, sl
 8026268:	fb08 f000 	mul.w	r0, r8, r0
 802626c:	b29b      	uxth	r3, r3
 802626e:	fb09 0303 	mla	r3, r9, r3, r0
 8026272:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8026274:	fb0a 3300 	mla	r3, sl, r0, r3
 8026278:	fb0c 3304 	mla	r3, ip, r4, r3
 802627c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026280:	2b00      	cmp	r3, #0
 8026282:	f000 810b 	beq.w	802649c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b4>
 8026286:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8026288:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802628c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802628e:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8026292:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8026296:	f000 8114 	beq.w	80264c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7da>
 802629a:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 802629e:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80262a2:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80262a6:	fb0a fc0c 	mul.w	ip, sl, ip
 80262aa:	fb09 f707 	mul.w	r7, r9, r7
 80262ae:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 80262b2:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80262b6:	f107 0b20 	add.w	fp, r7, #32
 80262ba:	44cc      	add	ip, r9
 80262bc:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 80262c0:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80262c4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80262c8:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80262cc:	ea4c 0909 	orr.w	r9, ip, r9
 80262d0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80262d4:	8847      	ldrh	r7, [r0, #2]
 80262d6:	d019      	beq.n	802630c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x624>
 80262d8:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80262dc:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80262e0:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80262e4:	fb0a fc0c 	mul.w	ip, sl, ip
 80262e8:	fb08 f807 	mul.w	r8, r8, r7
 80262ec:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 80262f0:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80262f4:	f108 0b20 	add.w	fp, r8, #32
 80262f8:	44bc      	add	ip, r7
 80262fa:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 80262fe:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8026302:	0a3f      	lsrs	r7, r7, #8
 8026304:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026308:	ea4c 0707 	orr.w	r7, ip, r7
 802630c:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8026310:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8026314:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8026318:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 802631c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8026320:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026324:	ea4c 0909 	orr.w	r9, ip, r9
 8026328:	ea4a 0707 	orr.w	r7, sl, r7
 802632c:	2d00      	cmp	r5, #0
 802632e:	f000 80ca 	beq.w	80264c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 8026332:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8026336:	3901      	subs	r1, #1
 8026338:	0049      	lsls	r1, r1, #1
 802633a:	3102      	adds	r1, #2
 802633c:	eb00 0c01 	add.w	ip, r0, r1
 8026340:	5a41      	ldrh	r1, [r0, r1]
 8026342:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8026344:	28ff      	cmp	r0, #255	; 0xff
 8026346:	d019      	beq.n	802637c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x694>
 8026348:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 802634c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802634e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026352:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026356:	fb04 fa01 	mul.w	sl, r4, r1
 802635a:	fb08 f800 	mul.w	r8, r8, r0
 802635e:	f10a 0020 	add.w	r0, sl, #32
 8026362:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8026366:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802636a:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 802636e:	4441      	add	r1, r8
 8026370:	0a00      	lsrs	r0, r0, #8
 8026372:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8026376:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802637a:	4301      	orrs	r1, r0
 802637c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802637e:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8026382:	2cff      	cmp	r4, #255	; 0xff
 8026384:	d01a      	beq.n	80263bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d4>
 8026386:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 802638a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802638e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026392:	fb04 fa00 	mul.w	sl, r4, r0
 8026396:	fb08 f80c 	mul.w	r8, r8, ip
 802639a:	f10a 0c20 	add.w	ip, sl, #32
 802639e:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 80263a2:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80263a6:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 80263aa:	4440      	add	r0, r8
 80263ac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80263b0:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 80263b4:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80263b8:	ea40 000c 	orr.w	r0, r0, ip
 80263bc:	fb15 fc02 	smulbb	ip, r5, r2
 80263c0:	f1c5 0810 	rsb	r8, r5, #16
 80263c4:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80263c8:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80263cc:	ea4f 0cec 	mov.w	ip, ip, asr #3
 80263d0:	eba8 0802 	sub.w	r8, r8, r2
 80263d4:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80263d8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80263dc:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 80263e0:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80263e4:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 80263e8:	ea4a 0101 	orr.w	r1, sl, r1
 80263ec:	437a      	muls	r2, r7
 80263ee:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 80263f2:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80263f6:	fb09 2208 	mla	r2, r9, r8, r2
 80263fa:	ea4b 0000 	orr.w	r0, fp, r0
 80263fe:	fb05 2201 	mla	r2, r5, r1, r2
 8026402:	fb0c 2200 	mla	r2, ip, r0, r2
 8026406:	0d57      	lsrs	r7, r2, #21
 8026408:	0952      	lsrs	r2, r2, #5
 802640a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802640e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026412:	433a      	orrs	r2, r7
 8026414:	2bff      	cmp	r3, #255	; 0xff
 8026416:	b292      	uxth	r2, r2
 8026418:	d102      	bne.n	8026420 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x738>
 802641a:	9912      	ldr	r1, [sp, #72]	; 0x48
 802641c:	29ff      	cmp	r1, #255	; 0xff
 802641e:	d063      	beq.n	80264e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x800>
 8026420:	980a      	ldr	r0, [sp, #40]	; 0x28
 8026422:	1215      	asrs	r5, r2, #8
 8026424:	f8be 1000 	ldrh.w	r1, [lr]
 8026428:	4343      	muls	r3, r0
 802642a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802642c:	10cf      	asrs	r7, r1, #3
 802642e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8026432:	1c58      	adds	r0, r3, #1
 8026434:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8026438:	eb00 2323 	add.w	r3, r0, r3, asr #8
 802643c:	1208      	asrs	r0, r1, #8
 802643e:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8026442:	00c9      	lsls	r1, r1, #3
 8026444:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8026448:	b2db      	uxtb	r3, r3
 802644a:	b2c9      	uxtb	r1, r1
 802644c:	fb10 f003 	smulbb	r0, r0, r3
 8026450:	fb11 f103 	smulbb	r1, r1, r3
 8026454:	fb05 0504 	mla	r5, r5, r4, r0
 8026458:	10d0      	asrs	r0, r2, #3
 802645a:	fb17 f703 	smulbb	r7, r7, r3
 802645e:	00d2      	lsls	r2, r2, #3
 8026460:	b2ad      	uxth	r5, r5
 8026462:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8026466:	b2d2      	uxtb	r2, r2
 8026468:	fb00 7004 	mla	r0, r0, r4, r7
 802646c:	1c6b      	adds	r3, r5, #1
 802646e:	fb02 1204 	mla	r2, r2, r4, r1
 8026472:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8026476:	b292      	uxth	r2, r2
 8026478:	b280      	uxth	r0, r0
 802647a:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 802647e:	1c57      	adds	r7, r2, #1
 8026480:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8026484:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8026488:	433d      	orrs	r5, r7
 802648a:	1c47      	adds	r7, r0, #1
 802648c:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8026490:	097f      	lsrs	r7, r7, #5
 8026492:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026496:	433d      	orrs	r5, r7
 8026498:	f8ae 5000 	strh.w	r5, [lr]
 802649c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802649e:	f10e 0e02 	add.w	lr, lr, #2
 80264a2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80264a4:	4413      	add	r3, r2
 80264a6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80264a8:	9329      	str	r3, [sp, #164]	; 0xa4
 80264aa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80264ac:	441a      	add	r2, r3
 80264ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80264b0:	3b01      	subs	r3, #1
 80264b2:	922a      	str	r2, [sp, #168]	; 0xa8
 80264b4:	9313      	str	r3, [sp, #76]	; 0x4c
 80264b6:	e61c      	b.n	80260f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 80264b8:	fb08 f000 	mul.w	r0, r8, r0
 80264bc:	fb09 0303 	mla	r3, r9, r3, r0
 80264c0:	e6dc      	b.n	802627c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x594>
 80264c2:	46b9      	mov	r9, r7
 80264c4:	e704      	b.n	80262d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e8>
 80264c6:	f1c2 0110 	rsb	r1, r2, #16
 80264ca:	437a      	muls	r2, r7
 80264cc:	fb09 2901 	mla	r9, r9, r1, r2
 80264d0:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80264d4:	ea4f 5059 	mov.w	r0, r9, lsr #21
 80264d8:	ea4f 1259 	mov.w	r2, r9, lsr #5
 80264dc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80264e0:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80264e4:	4302      	orrs	r2, r0
 80264e6:	e795      	b.n	8026414 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>
 80264e8:	f8ae 2000 	strh.w	r2, [lr]
 80264ec:	e7d6      	b.n	802649c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b4>
 80264ee:	b017      	add	sp, #92	; 0x5c
 80264f0:	ecbd 8b08 	vpop	{d8-d11}
 80264f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080264f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 80264f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80264fc:	b085      	sub	sp, #20
 80264fe:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 8026502:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8026506:	9103      	str	r1, [sp, #12]
 8026508:	2d00      	cmp	r5, #0
 802650a:	fb05 7106 	mla	r1, r5, r6, r7
 802650e:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8026512:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8026516:	eb03 0441 	add.w	r4, r3, r1, lsl #1
 802651a:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 802651e:	eb02 0901 	add.w	r9, r2, r1
 8026522:	9401      	str	r4, [sp, #4]
 8026524:	f2c0 80c0 	blt.w	80266a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 8026528:	45a8      	cmp	r8, r5
 802652a:	f340 80bd 	ble.w	80266a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 802652e:	2f00      	cmp	r7, #0
 8026530:	f2c0 80b6 	blt.w	80266a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 8026534:	42be      	cmp	r6, r7
 8026536:	f340 80b3 	ble.w	80266a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 802653a:	f812 c001 	ldrb.w	ip, [r2, r1]
 802653e:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8026542:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8026546:	d019      	beq.n	802657c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x84>
 8026548:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 802654c:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8026550:	435a      	muls	r2, r3
 8026552:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 8026556:	f64f 011f 	movw	r1, #63519	; 0xf81f
 802655a:	fb0c f403 	mul.w	r4, ip, r3
 802655e:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 8026562:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8026566:	441a      	add	r2, r3
 8026568:	f104 0320 	add.w	r3, r4, #32
 802656c:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8026570:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 8026574:	0a1b      	lsrs	r3, r3, #8
 8026576:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802657a:	4319      	orrs	r1, r3
 802657c:	b289      	uxth	r1, r1
 802657e:	1c7b      	adds	r3, r7, #1
 8026580:	f100 8097 	bmi.w	80266b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 8026584:	429e      	cmp	r6, r3
 8026586:	f340 8094 	ble.w	80266b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 802658a:	2800      	cmp	r0, #0
 802658c:	f000 8094 	beq.w	80266b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c0>
 8026590:	f899 4001 	ldrb.w	r4, [r9, #1]
 8026594:	9b01      	ldr	r3, [sp, #4]
 8026596:	2cff      	cmp	r4, #255	; 0xff
 8026598:	885b      	ldrh	r3, [r3, #2]
 802659a:	d01b      	beq.n	80265d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xdc>
 802659c:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 80265a0:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 80265a4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80265a8:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 80265ac:	fb0a f202 	mul.w	r2, sl, r2
 80265b0:	fb04 fa03 	mul.w	sl, r4, r3
 80265b4:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 80265b8:	f602 0201 	addw	r2, r2, #2049	; 0x801
 80265bc:	441a      	add	r2, r3
 80265be:	f10a 0320 	add.w	r3, sl, #32
 80265c2:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80265c6:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 80265ca:	0a1b      	lsrs	r3, r3, #8
 80265cc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80265d0:	ea4b 0303 	orr.w	r3, fp, r3
 80265d4:	b29b      	uxth	r3, r3
 80265d6:	3501      	adds	r5, #1
 80265d8:	d474      	bmi.n	80266c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 80265da:	45a8      	cmp	r8, r5
 80265dc:	dd72      	ble.n	80266c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 80265de:	f1be 0f00 	cmp.w	lr, #0
 80265e2:	f000 8110 	beq.w	8026806 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x30e>
 80265e6:	2f00      	cmp	r7, #0
 80265e8:	db69      	blt.n	80266be <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 80265ea:	42be      	cmp	r6, r7
 80265ec:	dd67      	ble.n	80266be <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 80265ee:	f819 5006 	ldrb.w	r5, [r9, r6]
 80265f2:	9a01      	ldr	r2, [sp, #4]
 80265f4:	2dff      	cmp	r5, #255	; 0xff
 80265f6:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 80265fa:	d01c      	beq.n	8026636 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x13e>
 80265fc:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 8026600:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8026604:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8026608:	fb08 f802 	mul.w	r8, r8, r2
 802660c:	fb05 fa0b 	mul.w	sl, r5, fp
 8026610:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8026614:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 8026618:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802661c:	4490      	add	r8, r2
 802661e:	f10a 0220 	add.w	r2, sl, #32
 8026622:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 8026626:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 802662a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802662e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8026632:	ea4b 0b0a 	orr.w	fp, fp, sl
 8026636:	fa1f fb8b 	uxth.w	fp, fp
 802663a:	3701      	adds	r7, #1
 802663c:	d447      	bmi.n	80266ce <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 802663e:	42be      	cmp	r6, r7
 8026640:	dd45      	ble.n	80266ce <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 8026642:	2800      	cmp	r0, #0
 8026644:	d046      	beq.n	80266d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1dc>
 8026646:	3601      	adds	r6, #1
 8026648:	9a01      	ldr	r2, [sp, #4]
 802664a:	f819 7006 	ldrb.w	r7, [r9, r6]
 802664e:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 8026652:	2fff      	cmp	r7, #255	; 0xff
 8026654:	d01a      	beq.n	802668c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x194>
 8026656:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 802665a:	ea4f 08e7 	mov.w	r8, r7, asr #3
 802665e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026662:	fb08 f806 	mul.w	r8, r8, r6
 8026666:	fb07 f902 	mul.w	r9, r7, r2
 802666a:	f64f 021f 	movw	r2, #63519	; 0xf81f
 802666e:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 8026672:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026676:	44b0      	add	r8, r6
 8026678:	f109 0620 	add.w	r6, r9, #32
 802667c:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 8026680:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8026684:	0a36      	lsrs	r6, r6, #8
 8026686:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 802668a:	4332      	orrs	r2, r6
 802668c:	b292      	uxth	r2, r2
 802668e:	280f      	cmp	r0, #15
 8026690:	d922      	bls.n	80266d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e0>
 8026692:	4b61      	ldr	r3, [pc, #388]	; (8026818 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x320>)
 8026694:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8026698:	4a60      	ldr	r2, [pc, #384]	; (802681c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x324>)
 802669a:	4861      	ldr	r0, [pc, #388]	; (8026820 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x328>)
 802669c:	f003 fca2 	bl	8029fe4 <__assert_func>
 80266a0:	f04f 0c00 	mov.w	ip, #0
 80266a4:	4661      	mov	r1, ip
 80266a6:	e76a      	b.n	802657e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 80266a8:	2400      	movs	r4, #0
 80266aa:	46a4      	mov	ip, r4
 80266ac:	4623      	mov	r3, r4
 80266ae:	4621      	mov	r1, r4
 80266b0:	e791      	b.n	80265d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 80266b2:	2400      	movs	r4, #0
 80266b4:	4623      	mov	r3, r4
 80266b6:	e78e      	b.n	80265d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 80266b8:	4604      	mov	r4, r0
 80266ba:	4603      	mov	r3, r0
 80266bc:	e78b      	b.n	80265d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 80266be:	2500      	movs	r5, #0
 80266c0:	46ab      	mov	fp, r5
 80266c2:	e7ba      	b.n	802663a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x142>
 80266c4:	2700      	movs	r7, #0
 80266c6:	463d      	mov	r5, r7
 80266c8:	463a      	mov	r2, r7
 80266ca:	46bb      	mov	fp, r7
 80266cc:	e7df      	b.n	802668e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 80266ce:	2700      	movs	r7, #0
 80266d0:	463a      	mov	r2, r7
 80266d2:	e7dc      	b.n	802668e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 80266d4:	4607      	mov	r7, r0
 80266d6:	4602      	mov	r2, r0
 80266d8:	f1be 0f0f 	cmp.w	lr, #15
 80266dc:	d8d9      	bhi.n	8026692 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 80266de:	b286      	uxth	r6, r0
 80266e0:	fa1f f98e 	uxth.w	r9, lr
 80266e4:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80266e8:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80266ec:	fb06 f809 	mul.w	r8, r6, r9
 80266f0:	0136      	lsls	r6, r6, #4
 80266f2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80266f6:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 80266fa:	9601      	str	r6, [sp, #4]
 80266fc:	ea4a 0101 	orr.w	r1, sl, r1
 8026700:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 8026704:	fa1f f689 	uxth.w	r6, r9
 8026708:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802670c:	fb10 f90e 	smulbb	r9, r0, lr
 8026710:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026714:	9602      	str	r6, [sp, #8]
 8026716:	460e      	mov	r6, r1
 8026718:	ea4f 09e9 	mov.w	r9, r9, asr #3
 802671c:	f1ce 0110 	rsb	r1, lr, #16
 8026720:	ea4a 0303 	orr.w	r3, sl, r3
 8026724:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8026728:	1a09      	subs	r1, r1, r0
 802672a:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 802672e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026732:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026736:	4343      	muls	r3, r0
 8026738:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 802673c:	ea4a 0202 	orr.w	r2, sl, r2
 8026740:	9802      	ldr	r0, [sp, #8]
 8026742:	fb01 3106 	mla	r1, r1, r6, r3
 8026746:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 802674a:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 802674e:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8026752:	fb09 1302 	mla	r3, r9, r2, r1
 8026756:	9a03      	ldr	r2, [sp, #12]
 8026758:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802675c:	8811      	ldrh	r1, [r2, #0]
 802675e:	9a01      	ldr	r2, [sp, #4]
 8026760:	ea4a 0b0b 	orr.w	fp, sl, fp
 8026764:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8026768:	fb0e 3e0b 	mla	lr, lr, fp, r3
 802676c:	1a12      	subs	r2, r2, r0
 802676e:	9801      	ldr	r0, [sp, #4]
 8026770:	ea4f 535e 	mov.w	r3, lr, lsr #21
 8026774:	eba0 0608 	sub.w	r6, r0, r8
 8026778:	b292      	uxth	r2, r2
 802677a:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 802677e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026782:	b2b6      	uxth	r6, r6
 8026784:	10c8      	asrs	r0, r1, #3
 8026786:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802678a:	4374      	muls	r4, r6
 802678c:	ea43 0e0e 	orr.w	lr, r3, lr
 8026790:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8026794:	fb0c 4402 	mla	r4, ip, r2, r4
 8026798:	9a02      	ldr	r2, [sp, #8]
 802679a:	fa1f f38e 	uxth.w	r3, lr
 802679e:	fb02 4505 	mla	r5, r2, r5, r4
 80267a2:	120a      	asrs	r2, r1, #8
 80267a4:	00c9      	lsls	r1, r1, #3
 80267a6:	fb08 5707 	mla	r7, r8, r7, r5
 80267aa:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80267ae:	b2c9      	uxtb	r1, r1
 80267b0:	ea6f 2727 	mvn.w	r7, r7, asr #8
 80267b4:	b2ff      	uxtb	r7, r7
 80267b6:	437a      	muls	r2, r7
 80267b8:	4378      	muls	r0, r7
 80267ba:	434f      	muls	r7, r1
 80267bc:	1c51      	adds	r1, r2, #1
 80267be:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 80267c2:	121a      	asrs	r2, r3, #8
 80267c4:	f022 0207 	bic.w	r2, r2, #7
 80267c8:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 80267cc:	1c41      	adds	r1, r0, #1
 80267ce:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80267d2:	10d9      	asrs	r1, r3, #3
 80267d4:	0212      	lsls	r2, r2, #8
 80267d6:	f021 0103 	bic.w	r1, r1, #3
 80267da:	00db      	lsls	r3, r3, #3
 80267dc:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 80267e0:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80267e4:	00c9      	lsls	r1, r1, #3
 80267e6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80267ea:	430a      	orrs	r2, r1
 80267ec:	1c79      	adds	r1, r7, #1
 80267ee:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 80267f2:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 80267f6:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 80267fa:	4313      	orrs	r3, r2
 80267fc:	9a03      	ldr	r2, [sp, #12]
 80267fe:	8013      	strh	r3, [r2, #0]
 8026800:	b005      	add	sp, #20
 8026802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026806:	280f      	cmp	r0, #15
 8026808:	f63f af43 	bhi.w	8026692 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 802680c:	4677      	mov	r7, lr
 802680e:	4675      	mov	r5, lr
 8026810:	4672      	mov	r2, lr
 8026812:	46f3      	mov	fp, lr
 8026814:	e763      	b.n	80266de <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e6>
 8026816:	bf00      	nop
 8026818:	0802f359 	.word	0x0802f359
 802681c:	0802f926 	.word	0x0802f926
 8026820:	0802f3dd 	.word	0x0802f3dd

08026824 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026828:	ed2d 8b08 	vpush	{d8-d11}
 802682c:	b093      	sub	sp, #76	; 0x4c
 802682e:	eeb0 aa40 	vmov.f32	s20, s0
 8026832:	eef0 9a60 	vmov.f32	s19, s1
 8026836:	9210      	str	r2, [sp, #64]	; 0x40
 8026838:	eeb0 9a41 	vmov.f32	s18, s2
 802683c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802683e:	eeb0 8a62 	vmov.f32	s16, s5
 8026842:	9011      	str	r0, [sp, #68]	; 0x44
 8026844:	eef0 8a43 	vmov.f32	s17, s6
 8026848:	6850      	ldr	r0, [r2, #4]
 802684a:	eef0 ba44 	vmov.f32	s23, s8
 802684e:	910e      	str	r1, [sp, #56]	; 0x38
 8026850:	eeb0 ba64 	vmov.f32	s22, s9
 8026854:	9306      	str	r3, [sp, #24]
 8026856:	eef0 aa45 	vmov.f32	s21, s10
 802685a:	6812      	ldr	r2, [r2, #0]
 802685c:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8026860:	fb00 1303 	mla	r3, r0, r3, r1
 8026864:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8026868:	9307      	str	r3, [sp, #28]
 802686a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802686c:	681b      	ldr	r3, [r3, #0]
 802686e:	9308      	str	r3, [sp, #32]
 8026870:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026872:	685b      	ldr	r3, [r3, #4]
 8026874:	9309      	str	r3, [sp, #36]	; 0x24
 8026876:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8026878:	2b00      	cmp	r3, #0
 802687a:	dc03      	bgt.n	8026884 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 802687c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802687e:	2b00      	cmp	r3, #0
 8026880:	f340 83b6 	ble.w	8026ff0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7cc>
 8026884:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026886:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802688a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802688e:	1e48      	subs	r0, r1, #1
 8026890:	1e55      	subs	r5, r2, #1
 8026892:	9b06      	ldr	r3, [sp, #24]
 8026894:	2b00      	cmp	r3, #0
 8026896:	f340 8165 	ble.w	8026b64 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 802689a:	9e25      	ldr	r6, [sp, #148]	; 0x94
 802689c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802689e:	1436      	asrs	r6, r6, #16
 80268a0:	ea4f 4323 	mov.w	r3, r3, asr #16
 80268a4:	d406      	bmi.n	80268b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80268a6:	4286      	cmp	r6, r0
 80268a8:	da04      	bge.n	80268b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80268aa:	2b00      	cmp	r3, #0
 80268ac:	db02      	blt.n	80268b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80268ae:	42ab      	cmp	r3, r5
 80268b0:	f2c0 8159 	blt.w	8026b66 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80268b4:	3601      	adds	r6, #1
 80268b6:	f100 8146 	bmi.w	8026b46 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80268ba:	42b1      	cmp	r1, r6
 80268bc:	f2c0 8143 	blt.w	8026b46 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80268c0:	3301      	adds	r3, #1
 80268c2:	f100 8140 	bmi.w	8026b46 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80268c6:	429a      	cmp	r2, r3
 80268c8:	f2c0 813d 	blt.w	8026b46 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80268cc:	9b06      	ldr	r3, [sp, #24]
 80268ce:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80268d2:	9f07      	ldr	r7, [sp, #28]
 80268d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80268d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80268d8:	2b00      	cmp	r3, #0
 80268da:	f340 8166 	ble.w	8026baa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 80268de:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80268e0:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80268e2:	1418      	asrs	r0, r3, #16
 80268e4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80268e6:	142d      	asrs	r5, r5, #16
 80268e8:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80268ec:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80268ee:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 80268f2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80268f4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80268f8:	f100 81f0 	bmi.w	8026cdc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 80268fc:	f102 3eff 	add.w	lr, r2, #4294967295
 8026900:	4575      	cmp	r5, lr
 8026902:	f280 81eb 	bge.w	8026cdc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8026906:	2800      	cmp	r0, #0
 8026908:	f2c0 81e8 	blt.w	8026cdc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 802690c:	f103 3eff 	add.w	lr, r3, #4294967295
 8026910:	4570      	cmp	r0, lr
 8026912:	f280 81e3 	bge.w	8026cdc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8026916:	b212      	sxth	r2, r2
 8026918:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802691a:	fa1f fe81 	uxth.w	lr, r1
 802691e:	fb00 5002 	mla	r0, r0, r2, r5
 8026922:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8026926:	eb03 0a00 	add.w	sl, r3, r0
 802692a:	f813 9000 	ldrb.w	r9, [r3, r0]
 802692e:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8026932:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8026936:	b29b      	uxth	r3, r3
 8026938:	f1bc 0f00 	cmp.w	ip, #0
 802693c:	f000 817b 	beq.w	8026c36 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8026940:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8026944:	eb0a 0b02 	add.w	fp, sl, r2
 8026948:	fa1f fa8c 	uxth.w	sl, ip
 802694c:	940a      	str	r4, [sp, #40]	; 0x28
 802694e:	fb0a fe0e 	mul.w	lr, sl, lr
 8026952:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8026956:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 802695a:	eba5 050e 	sub.w	r5, r5, lr
 802695e:	940b      	str	r4, [sp, #44]	; 0x2c
 8026960:	fa1f fa8a 	uxth.w	sl, sl
 8026964:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8026966:	b2ad      	uxth	r5, r5
 8026968:	eba3 030a 	sub.w	r3, r3, sl
 802696c:	fb08 f505 	mul.w	r5, r8, r5
 8026970:	b29b      	uxth	r3, r3
 8026972:	fb09 5303 	mla	r3, r9, r3, r5
 8026976:	fb0a 3304 	mla	r3, sl, r4, r3
 802697a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802697c:	fb0e 3304 	mla	r3, lr, r4, r3
 8026980:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026984:	2b00      	cmp	r3, #0
 8026986:	f000 80d1 	beq.w	8026b2c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 802698a:	9c08      	ldr	r4, [sp, #32]
 802698c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8026990:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8026994:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8026998:	f000 8152 	beq.w	8026c40 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 802699c:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80269a0:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80269a4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80269a8:	fb0a fe0e 	mul.w	lr, sl, lr
 80269ac:	fb09 f000 	mul.w	r0, r9, r0
 80269b0:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 80269b4:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80269b8:	f100 0b20 	add.w	fp, r0, #32
 80269bc:	44ce      	add	lr, r9
 80269be:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 80269c2:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80269c6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80269ca:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80269ce:	ea4e 0909 	orr.w	r9, lr, r9
 80269d2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80269d6:	8868      	ldrh	r0, [r5, #2]
 80269d8:	d019      	beq.n	8026a0e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80269da:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80269de:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80269e2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80269e6:	fb0a fe0e 	mul.w	lr, sl, lr
 80269ea:	fb08 f800 	mul.w	r8, r8, r0
 80269ee:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 80269f2:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80269f6:	f108 0b20 	add.w	fp, r8, #32
 80269fa:	4486      	add	lr, r0
 80269fc:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8026a00:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8026a04:	0a00      	lsrs	r0, r0, #8
 8026a06:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026a0a:	ea4e 0000 	orr.w	r0, lr, r0
 8026a0e:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8026a12:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8026a16:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8026a1a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8026a1e:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8026a22:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026a26:	ea4e 0909 	orr.w	r9, lr, r9
 8026a2a:	ea4a 0000 	orr.w	r0, sl, r0
 8026a2e:	f1bc 0f00 	cmp.w	ip, #0
 8026a32:	f000 8107 	beq.w	8026c44 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8026a36:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8026a3a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8026a3c:	3a01      	subs	r2, #1
 8026a3e:	2cff      	cmp	r4, #255	; 0xff
 8026a40:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8026a44:	f102 0202 	add.w	r2, r2, #2
 8026a48:	eb05 0e02 	add.w	lr, r5, r2
 8026a4c:	5aaa      	ldrh	r2, [r5, r2]
 8026a4e:	d018      	beq.n	8026a82 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8026a50:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8026a54:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026a58:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026a5c:	fb04 fa02 	mul.w	sl, r4, r2
 8026a60:	fb08 f805 	mul.w	r8, r8, r5
 8026a64:	f10a 0520 	add.w	r5, sl, #32
 8026a68:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8026a6c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026a70:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8026a74:	4442      	add	r2, r8
 8026a76:	0a2d      	lsrs	r5, r5, #8
 8026a78:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8026a7c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8026a80:	432a      	orrs	r2, r5
 8026a82:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026a84:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8026a88:	2cff      	cmp	r4, #255	; 0xff
 8026a8a:	d01a      	beq.n	8026ac2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8026a8c:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8026a90:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8026a94:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026a98:	fb04 fa05 	mul.w	sl, r4, r5
 8026a9c:	fb08 f80e 	mul.w	r8, r8, lr
 8026aa0:	f10a 0e20 	add.w	lr, sl, #32
 8026aa4:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8026aa8:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026aac:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8026ab0:	4445      	add	r5, r8
 8026ab2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026ab6:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8026aba:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8026abe:	ea45 050e 	orr.w	r5, r5, lr
 8026ac2:	fb1c fe01 	smulbb	lr, ip, r1
 8026ac6:	f1cc 0810 	rsb	r8, ip, #16
 8026aca:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8026ace:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026ad2:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8026ad6:	eba8 0801 	sub.w	r8, r8, r1
 8026ada:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8026ade:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026ae2:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8026ae6:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8026aea:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8026aee:	ea4a 0202 	orr.w	r2, sl, r2
 8026af2:	4341      	muls	r1, r0
 8026af4:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8026af8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026afc:	fb09 1108 	mla	r1, r9, r8, r1
 8026b00:	ea4b 0505 	orr.w	r5, fp, r5
 8026b04:	fb0c 1102 	mla	r1, ip, r2, r1
 8026b08:	fb0e 1e05 	mla	lr, lr, r5, r1
 8026b0c:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8026b10:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8026b14:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026b18:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8026b1c:	ea42 0e0e 	orr.w	lr, r2, lr
 8026b20:	fa1f f28e 	uxth.w	r2, lr
 8026b24:	2bff      	cmp	r3, #255	; 0xff
 8026b26:	f040 80a1 	bne.w	8026c6c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 8026b2a:	803a      	strh	r2, [r7, #0]
 8026b2c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8026b2e:	3702      	adds	r7, #2
 8026b30:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8026b32:	4413      	add	r3, r2
 8026b34:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8026b36:	9325      	str	r3, [sp, #148]	; 0x94
 8026b38:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026b3a:	441a      	add	r2, r3
 8026b3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8026b3e:	3b01      	subs	r3, #1
 8026b40:	9226      	str	r2, [sp, #152]	; 0x98
 8026b42:	930f      	str	r3, [sp, #60]	; 0x3c
 8026b44:	e6c7      	b.n	80268d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8026b46:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8026b48:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8026b4a:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8026b4c:	4433      	add	r3, r6
 8026b4e:	9325      	str	r3, [sp, #148]	; 0x94
 8026b50:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026b52:	441c      	add	r4, r3
 8026b54:	9b06      	ldr	r3, [sp, #24]
 8026b56:	3b01      	subs	r3, #1
 8026b58:	9426      	str	r4, [sp, #152]	; 0x98
 8026b5a:	9306      	str	r3, [sp, #24]
 8026b5c:	9b07      	ldr	r3, [sp, #28]
 8026b5e:	3302      	adds	r3, #2
 8026b60:	9307      	str	r3, [sp, #28]
 8026b62:	e696      	b.n	8026892 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8026b64:	d028      	beq.n	8026bb8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8026b66:	9b06      	ldr	r3, [sp, #24]
 8026b68:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8026b6a:	3b01      	subs	r3, #1
 8026b6c:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8026b6e:	fb00 5003 	mla	r0, r0, r3, r5
 8026b72:	1400      	asrs	r0, r0, #16
 8026b74:	f53f aeaa 	bmi.w	80268cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8026b78:	3901      	subs	r1, #1
 8026b7a:	4288      	cmp	r0, r1
 8026b7c:	f6bf aea6 	bge.w	80268cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8026b80:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8026b82:	9826      	ldr	r0, [sp, #152]	; 0x98
 8026b84:	fb01 0303 	mla	r3, r1, r3, r0
 8026b88:	141b      	asrs	r3, r3, #16
 8026b8a:	f53f ae9f 	bmi.w	80268cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8026b8e:	3a01      	subs	r2, #1
 8026b90:	4293      	cmp	r3, r2
 8026b92:	f6bf ae9b 	bge.w	80268cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8026b96:	9b06      	ldr	r3, [sp, #24]
 8026b98:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8026b9c:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8026ba0:	930f      	str	r3, [sp, #60]	; 0x3c
 8026ba2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8026ba4:	2b00      	cmp	r3, #0
 8026ba6:	f300 80b6 	bgt.w	8026d16 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 8026baa:	9b06      	ldr	r3, [sp, #24]
 8026bac:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026bb0:	9b07      	ldr	r3, [sp, #28]
 8026bb2:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8026bb6:	9307      	str	r3, [sp, #28]
 8026bb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8026bba:	2b00      	cmp	r3, #0
 8026bbc:	f340 8218 	ble.w	8026ff0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7cc>
 8026bc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026bc4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026bc6:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8026bca:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8026bce:	eef0 6a48 	vmov.f32	s13, s16
 8026bd2:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8026bd6:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8026bda:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026bde:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 8026be2:	eef0 6a68 	vmov.f32	s13, s17
 8026be6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026bea:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 8026bee:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8026bf2:	ee69 7a27 	vmul.f32	s15, s18, s15
 8026bf6:	ee37 8a48 	vsub.f32	s16, s14, s16
 8026bfa:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8026bfe:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8026c02:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8026c06:	ee18 2a10 	vmov	r2, s16
 8026c0a:	eeb0 8a47 	vmov.f32	s16, s14
 8026c0e:	fb92 f3f3 	sdiv	r3, r2, r3
 8026c12:	ee18 2a90 	vmov	r2, s17
 8026c16:	9327      	str	r3, [sp, #156]	; 0x9c
 8026c18:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026c1a:	eef0 8a67 	vmov.f32	s17, s15
 8026c1e:	fb92 f3f3 	sdiv	r3, r2, r3
 8026c22:	9328      	str	r3, [sp, #160]	; 0xa0
 8026c24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8026c26:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8026c28:	3b01      	subs	r3, #1
 8026c2a:	930e      	str	r3, [sp, #56]	; 0x38
 8026c2c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026c2e:	bf08      	it	eq
 8026c30:	4613      	moveq	r3, r2
 8026c32:	9306      	str	r3, [sp, #24]
 8026c34:	e61f      	b.n	8026876 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8026c36:	fb08 f505 	mul.w	r5, r8, r5
 8026c3a:	fb09 5303 	mla	r3, r9, r3, r5
 8026c3e:	e69f      	b.n	8026980 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8026c40:	4681      	mov	r9, r0
 8026c42:	e6c6      	b.n	80269d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8026c44:	f1c1 0210 	rsb	r2, r1, #16
 8026c48:	4341      	muls	r1, r0
 8026c4a:	fb09 1902 	mla	r9, r9, r2, r1
 8026c4e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8026c52:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8026c56:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8026c5a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026c5e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8026c62:	ea42 0909 	orr.w	r9, r2, r9
 8026c66:	fa1f f289 	uxth.w	r2, r9
 8026c6a:	e75b      	b.n	8026b24 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8026c6c:	f8b7 c000 	ldrh.w	ip, [r7]
 8026c70:	43db      	mvns	r3, r3
 8026c72:	ea4f 202c 	mov.w	r0, ip, asr #8
 8026c76:	fa5f fe83 	uxtb.w	lr, r3
 8026c7a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8026c7e:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8026c82:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8026c86:	fb00 f00e 	mul.w	r0, r0, lr
 8026c8a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8026c8e:	b2db      	uxtb	r3, r3
 8026c90:	1c41      	adds	r1, r0, #1
 8026c92:	fb05 f50e 	mul.w	r5, r5, lr
 8026c96:	fb03 f30e 	mul.w	r3, r3, lr
 8026c9a:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8026c9e:	1211      	asrs	r1, r2, #8
 8026ca0:	f021 0107 	bic.w	r1, r1, #7
 8026ca4:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8026ca8:	48d4      	ldr	r0, [pc, #848]	; (8026ffc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>)
 8026caa:	b2c9      	uxtb	r1, r1
 8026cac:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 8026cb0:	1c69      	adds	r1, r5, #1
 8026cb2:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8026cb6:	10d1      	asrs	r1, r2, #3
 8026cb8:	00d2      	lsls	r2, r2, #3
 8026cba:	f021 0103 	bic.w	r1, r1, #3
 8026cbe:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8026cc2:	00c9      	lsls	r1, r1, #3
 8026cc4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026cc8:	4301      	orrs	r1, r0
 8026cca:	1c58      	adds	r0, r3, #1
 8026ccc:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8026cd0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8026cd4:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8026cd8:	430a      	orrs	r2, r1
 8026cda:	e726      	b.n	8026b2a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8026cdc:	f115 0e01 	adds.w	lr, r5, #1
 8026ce0:	f53f af24 	bmi.w	8026b2c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8026ce4:	4572      	cmp	r2, lr
 8026ce6:	f6ff af21 	blt.w	8026b2c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8026cea:	f110 0e01 	adds.w	lr, r0, #1
 8026cee:	f53f af1d 	bmi.w	8026b2c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8026cf2:	4573      	cmp	r3, lr
 8026cf4:	f6ff af1a 	blt.w	8026b2c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8026cf8:	b21b      	sxth	r3, r3
 8026cfa:	b212      	sxth	r2, r2
 8026cfc:	9301      	str	r3, [sp, #4]
 8026cfe:	9200      	str	r2, [sp, #0]
 8026d00:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8026d04:	e9cd 5002 	strd	r5, r0, [sp, #8]
 8026d08:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8026d0c:	4639      	mov	r1, r7
 8026d0e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8026d10:	f7ff fbf2 	bl	80264f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8026d14:	e70a      	b.n	8026b2c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8026d16:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8026d18:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8026d1c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026d1e:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8026d22:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026d24:	fa1f fc82 	uxth.w	ip, r2
 8026d28:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026d2c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026d2e:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8026d32:	141f      	asrs	r7, r3, #16
 8026d34:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8026d36:	141b      	asrs	r3, r3, #16
 8026d38:	fb01 3707 	mla	r7, r1, r7, r3
 8026d3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026d3e:	eb03 0a07 	add.w	sl, r3, r7
 8026d42:	f813 9007 	ldrb.w	r9, [r3, r7]
 8026d46:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8026d4a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8026d4e:	b29b      	uxth	r3, r3
 8026d50:	2d00      	cmp	r5, #0
 8026d52:	f000 80fe 	beq.w	8026f52 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 8026d56:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8026d5a:	eb0a 0b01 	add.w	fp, sl, r1
 8026d5e:	fa1f fa85 	uxth.w	sl, r5
 8026d62:	940c      	str	r4, [sp, #48]	; 0x30
 8026d64:	fb0a fc0c 	mul.w	ip, sl, ip
 8026d68:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8026d6c:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8026d70:	eba0 000c 	sub.w	r0, r0, ip
 8026d74:	940d      	str	r4, [sp, #52]	; 0x34
 8026d76:	fa1f fa8a 	uxth.w	sl, sl
 8026d7a:	b280      	uxth	r0, r0
 8026d7c:	eba3 030a 	sub.w	r3, r3, sl
 8026d80:	fb08 f000 	mul.w	r0, r8, r0
 8026d84:	b29b      	uxth	r3, r3
 8026d86:	fb09 0303 	mla	r3, r9, r3, r0
 8026d8a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8026d8c:	fb0a 3300 	mla	r3, sl, r0, r3
 8026d90:	fb0c 3304 	mla	r3, ip, r4, r3
 8026d94:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026d98:	2b00      	cmp	r3, #0
 8026d9a:	f000 80cc 	beq.w	8026f36 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 8026d9e:	9808      	ldr	r0, [sp, #32]
 8026da0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8026da4:	9c08      	ldr	r4, [sp, #32]
 8026da6:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8026daa:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8026dae:	f000 80d5 	beq.w	8026f5c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x738>
 8026db2:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8026db6:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8026dba:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026dbe:	fb0a fc0c 	mul.w	ip, sl, ip
 8026dc2:	fb09 f707 	mul.w	r7, r9, r7
 8026dc6:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8026dca:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8026dce:	f107 0b20 	add.w	fp, r7, #32
 8026dd2:	44cc      	add	ip, r9
 8026dd4:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8026dd8:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8026ddc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026de0:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8026de4:	ea4c 0909 	orr.w	r9, ip, r9
 8026de8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8026dec:	8847      	ldrh	r7, [r0, #2]
 8026dee:	d019      	beq.n	8026e24 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
 8026df0:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8026df4:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8026df8:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026dfc:	fb0a fc0c 	mul.w	ip, sl, ip
 8026e00:	fb08 f807 	mul.w	r8, r8, r7
 8026e04:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8026e08:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8026e0c:	f108 0b20 	add.w	fp, r8, #32
 8026e10:	44bc      	add	ip, r7
 8026e12:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8026e16:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8026e1a:	0a3f      	lsrs	r7, r7, #8
 8026e1c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026e20:	ea4c 0707 	orr.w	r7, ip, r7
 8026e24:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8026e28:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8026e2c:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8026e30:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8026e34:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8026e38:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026e3c:	ea4c 0909 	orr.w	r9, ip, r9
 8026e40:	ea4a 0707 	orr.w	r7, sl, r7
 8026e44:	2d00      	cmp	r5, #0
 8026e46:	f000 808b 	beq.w	8026f60 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8026e4a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8026e4e:	3901      	subs	r1, #1
 8026e50:	0049      	lsls	r1, r1, #1
 8026e52:	3102      	adds	r1, #2
 8026e54:	eb00 0c01 	add.w	ip, r0, r1
 8026e58:	5a41      	ldrh	r1, [r0, r1]
 8026e5a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8026e5c:	28ff      	cmp	r0, #255	; 0xff
 8026e5e:	d019      	beq.n	8026e94 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 8026e60:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8026e64:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8026e66:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026e6a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026e6e:	fb04 fa01 	mul.w	sl, r4, r1
 8026e72:	fb08 f800 	mul.w	r8, r8, r0
 8026e76:	f10a 0020 	add.w	r0, sl, #32
 8026e7a:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8026e7e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026e82:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8026e86:	4441      	add	r1, r8
 8026e88:	0a00      	lsrs	r0, r0, #8
 8026e8a:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8026e8e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026e92:	4301      	orrs	r1, r0
 8026e94:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026e96:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8026e9a:	2cff      	cmp	r4, #255	; 0xff
 8026e9c:	d01a      	beq.n	8026ed4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
 8026e9e:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8026ea2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026ea6:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026eaa:	fb04 fa00 	mul.w	sl, r4, r0
 8026eae:	fb08 f80c 	mul.w	r8, r8, ip
 8026eb2:	f10a 0c20 	add.w	ip, sl, #32
 8026eb6:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8026eba:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026ebe:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8026ec2:	4440      	add	r0, r8
 8026ec4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026ec8:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8026ecc:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8026ed0:	ea40 000c 	orr.w	r0, r0, ip
 8026ed4:	fb15 fc02 	smulbb	ip, r5, r2
 8026ed8:	f1c5 0810 	rsb	r8, r5, #16
 8026edc:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8026ee0:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8026ee4:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8026ee8:	eba8 0802 	sub.w	r8, r8, r2
 8026eec:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8026ef0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026ef4:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8026ef8:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8026efc:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8026f00:	ea4a 0101 	orr.w	r1, sl, r1
 8026f04:	437a      	muls	r2, r7
 8026f06:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8026f0a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026f0e:	fb09 2208 	mla	r2, r9, r8, r2
 8026f12:	ea4b 0000 	orr.w	r0, fp, r0
 8026f16:	fb05 2201 	mla	r2, r5, r1, r2
 8026f1a:	fb0c 2200 	mla	r2, ip, r0, r2
 8026f1e:	0d57      	lsrs	r7, r2, #21
 8026f20:	0952      	lsrs	r2, r2, #5
 8026f22:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026f26:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026f2a:	433a      	orrs	r2, r7
 8026f2c:	2bff      	cmp	r3, #255	; 0xff
 8026f2e:	b292      	uxth	r2, r2
 8026f30:	d127      	bne.n	8026f82 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75e>
 8026f32:	f8ae 2000 	strh.w	r2, [lr]
 8026f36:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8026f38:	f10e 0e02 	add.w	lr, lr, #2
 8026f3c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8026f3e:	4413      	add	r3, r2
 8026f40:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8026f42:	9325      	str	r3, [sp, #148]	; 0x94
 8026f44:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026f46:	441a      	add	r2, r3
 8026f48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8026f4a:	3b01      	subs	r3, #1
 8026f4c:	9226      	str	r2, [sp, #152]	; 0x98
 8026f4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8026f50:	e627      	b.n	8026ba2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8026f52:	fb08 f000 	mul.w	r0, r8, r0
 8026f56:	fb09 0303 	mla	r3, r9, r3, r0
 8026f5a:	e71b      	b.n	8026d94 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
 8026f5c:	46b9      	mov	r9, r7
 8026f5e:	e743      	b.n	8026de8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 8026f60:	f1c2 0110 	rsb	r1, r2, #16
 8026f64:	437a      	muls	r2, r7
 8026f66:	fb09 2901 	mla	r9, r9, r1, r2
 8026f6a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8026f6e:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8026f72:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8026f76:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026f7a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026f7e:	4302      	orrs	r2, r0
 8026f80:	e7d4      	b.n	8026f2c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
 8026f82:	f8be 7000 	ldrh.w	r7, [lr]
 8026f86:	43db      	mvns	r3, r3
 8026f88:	4c1c      	ldr	r4, [pc, #112]	; (8026ffc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>)
 8026f8a:	1238      	asrs	r0, r7, #8
 8026f8c:	fa5f fc83 	uxtb.w	ip, r3
 8026f90:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8026f94:	10fd      	asrs	r5, r7, #3
 8026f96:	00fb      	lsls	r3, r7, #3
 8026f98:	fb00 f00c 	mul.w	r0, r0, ip
 8026f9c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8026fa0:	b2db      	uxtb	r3, r3
 8026fa2:	fb05 f10c 	mul.w	r1, r5, ip
 8026fa6:	1c45      	adds	r5, r0, #1
 8026fa8:	fb03 f30c 	mul.w	r3, r3, ip
 8026fac:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8026fb0:	1215      	asrs	r5, r2, #8
 8026fb2:	f025 0507 	bic.w	r5, r5, #7
 8026fb6:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8026fba:	1c4d      	adds	r5, r1, #1
 8026fbc:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8026fc0:	10d1      	asrs	r1, r2, #3
 8026fc2:	b2c0      	uxtb	r0, r0
 8026fc4:	f021 0103 	bic.w	r1, r1, #3
 8026fc8:	00d2      	lsls	r2, r2, #3
 8026fca:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 8026fce:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8026fd2:	00c9      	lsls	r1, r1, #3
 8026fd4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026fd8:	4308      	orrs	r0, r1
 8026fda:	1c59      	adds	r1, r3, #1
 8026fdc:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8026fe0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026fe4:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8026fe8:	4318      	orrs	r0, r3
 8026fea:	f8ae 0000 	strh.w	r0, [lr]
 8026fee:	e7a2      	b.n	8026f36 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 8026ff0:	b013      	add	sp, #76	; 0x4c
 8026ff2:	ecbd 8b08 	vpop	{d8-d11}
 8026ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026ffa:	bf00      	nop
 8026ffc:	fffff800 	.word	0xfffff800

08027000 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8027000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027004:	e9dd 4c09 	ldrd	r4, ip, [sp, #36]	; 0x24
 8027008:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 802700c:	fb0c 4e03 	mla	lr, ip, r3, r4
 8027010:	f1bc 0f00 	cmp.w	ip, #0
 8027014:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 8027018:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 802701c:	eb02 084e 	add.w	r8, r2, lr, lsl #1
 8027020:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8027024:	8808      	ldrh	r0, [r1, #0]
 8027026:	db2f      	blt.n	8027088 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 8027028:	45e2      	cmp	sl, ip
 802702a:	dd2d      	ble.n	8027088 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 802702c:	2c00      	cmp	r4, #0
 802702e:	db29      	blt.n	8027084 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 8027030:	42a3      	cmp	r3, r4
 8027032:	dd27      	ble.n	8027084 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 8027034:	f832 901e 	ldrh.w	r9, [r2, lr, lsl #1]
 8027038:	1c62      	adds	r2, r4, #1
 802703a:	d428      	bmi.n	802708e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 802703c:	4293      	cmp	r3, r2
 802703e:	dd26      	ble.n	802708e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8027040:	b32f      	cbz	r7, 802708e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8027042:	f8b8 e002 	ldrh.w	lr, [r8, #2]
 8027046:	f11c 0c01 	adds.w	ip, ip, #1
 802704a:	d424      	bmi.n	8027096 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 802704c:	45e2      	cmp	sl, ip
 802704e:	dd22      	ble.n	8027096 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 8027050:	2e00      	cmp	r6, #0
 8027052:	f000 809d 	beq.w	8027190 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x190>
 8027056:	2c00      	cmp	r4, #0
 8027058:	db1b      	blt.n	8027092 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 802705a:	42a3      	cmp	r3, r4
 802705c:	dd19      	ble.n	8027092 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 802705e:	f838 c013 	ldrh.w	ip, [r8, r3, lsl #1]
 8027062:	3401      	adds	r4, #1
 8027064:	d41a      	bmi.n	802709c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 8027066:	42a3      	cmp	r3, r4
 8027068:	dd18      	ble.n	802709c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 802706a:	b1cf      	cbz	r7, 80270a0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa0>
 802706c:	3301      	adds	r3, #1
 802706e:	f838 3013 	ldrh.w	r3, [r8, r3, lsl #1]
 8027072:	2f0f      	cmp	r7, #15
 8027074:	d915      	bls.n	80270a2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa2>
 8027076:	4b49      	ldr	r3, [pc, #292]	; (802719c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x19c>)
 8027078:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 802707c:	4a48      	ldr	r2, [pc, #288]	; (80271a0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a0>)
 802707e:	4849      	ldr	r0, [pc, #292]	; (80271a4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a4>)
 8027080:	f002 ffb0 	bl	8029fe4 <__assert_func>
 8027084:	4681      	mov	r9, r0
 8027086:	e7d7      	b.n	8027038 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x38>
 8027088:	4686      	mov	lr, r0
 802708a:	4681      	mov	r9, r0
 802708c:	e7db      	b.n	8027046 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 802708e:	4686      	mov	lr, r0
 8027090:	e7d9      	b.n	8027046 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 8027092:	4684      	mov	ip, r0
 8027094:	e7e5      	b.n	8027062 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x62>
 8027096:	4603      	mov	r3, r0
 8027098:	4684      	mov	ip, r0
 802709a:	e7ea      	b.n	8027072 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 802709c:	4603      	mov	r3, r0
 802709e:	e7e8      	b.n	8027072 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 80270a0:	4603      	mov	r3, r0
 80270a2:	2e0f      	cmp	r6, #15
 80270a4:	d8e7      	bhi.n	8027076 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 80270a6:	fb17 f806 	smulbb	r8, r7, r6
 80270aa:	ea4f 4409 	mov.w	r4, r9, lsl #16
 80270ae:	ea4f 4a0e 	mov.w	sl, lr, lsl #16
 80270b2:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80270b6:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80270ba:	ea4f 08e8 	mov.w	r8, r8, asr #3
 80270be:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80270c2:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80270c6:	ea44 0909 	orr.w	r9, r4, r9
 80270ca:	f1c6 0410 	rsb	r4, r6, #16
 80270ce:	041a      	lsls	r2, r3, #16
 80270d0:	ea4a 0e0e 	orr.w	lr, sl, lr
 80270d4:	1be4      	subs	r4, r4, r7
 80270d6:	ebc8 0747 	rsb	r7, r8, r7, lsl #1
 80270da:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80270de:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80270e2:	fb07 fe0e 	mul.w	lr, r7, lr
 80270e6:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 80270ea:	4313      	orrs	r3, r2
 80270ec:	ea4f 420c 	mov.w	r2, ip, lsl #16
 80270f0:	fb04 e409 	mla	r4, r4, r9, lr
 80270f4:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 80270f8:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80270fc:	b2af      	uxth	r7, r5
 80270fe:	fb08 4303 	mla	r3, r8, r3, r4
 8027102:	f42c 64fc 	bic.w	r4, ip, #2016	; 0x7e0
 8027106:	43ed      	mvns	r5, r5
 8027108:	4322      	orrs	r2, r4
 802710a:	b2ed      	uxtb	r5, r5
 802710c:	fb06 3202 	mla	r2, r6, r2, r3
 8027110:	10c6      	asrs	r6, r0, #3
 8027112:	0d53      	lsrs	r3, r2, #21
 8027114:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8027118:	0952      	lsrs	r2, r2, #5
 802711a:	fb16 f605 	smulbb	r6, r6, r5
 802711e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027122:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027126:	431a      	orrs	r2, r3
 8027128:	b293      	uxth	r3, r2
 802712a:	1202      	asrs	r2, r0, #8
 802712c:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8027130:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8027134:	00dc      	lsls	r4, r3, #3
 8027136:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802713a:	fb12 f205 	smulbb	r2, r2, r5
 802713e:	b2e4      	uxtb	r4, r4
 8027140:	fb0c 2c07 	mla	ip, ip, r7, r2
 8027144:	10da      	asrs	r2, r3, #3
 8027146:	00c3      	lsls	r3, r0, #3
 8027148:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802714c:	fa1f fc8c 	uxth.w	ip, ip
 8027150:	b2db      	uxtb	r3, r3
 8027152:	fb02 6207 	mla	r2, r2, r7, r6
 8027156:	fb13 f305 	smulbb	r3, r3, r5
 802715a:	b296      	uxth	r6, r2
 802715c:	fb04 3307 	mla	r3, r4, r7, r3
 8027160:	b29a      	uxth	r2, r3
 8027162:	f10c 0301 	add.w	r3, ip, #1
 8027166:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 802716a:	1c53      	adds	r3, r2, #1
 802716c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027170:	1c72      	adds	r2, r6, #1
 8027172:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8027176:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 802717a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802717e:	0952      	lsrs	r2, r2, #5
 8027180:	ea43 030c 	orr.w	r3, r3, ip
 8027184:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027188:	4313      	orrs	r3, r2
 802718a:	800b      	strh	r3, [r1, #0]
 802718c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027190:	2f0f      	cmp	r7, #15
 8027192:	f63f af70 	bhi.w	8027076 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 8027196:	4603      	mov	r3, r0
 8027198:	4684      	mov	ip, r0
 802719a:	e784      	b.n	80270a6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa6>
 802719c:	0802f359 	.word	0x0802f359
 80271a0:	0802f9cf 	.word	0x0802f9cf
 80271a4:	0802f3dd 	.word	0x0802f3dd

080271a8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80271a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80271ac:	ed2d 8b08 	vpush	{d8-d11}
 80271b0:	b093      	sub	sp, #76	; 0x4c
 80271b2:	461d      	mov	r5, r3
 80271b4:	eeb0 aa40 	vmov.f32	s20, s0
 80271b8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80271ba:	eef0 9a60 	vmov.f32	s19, s1
 80271be:	9210      	str	r2, [sp, #64]	; 0x40
 80271c0:	eeb0 9a41 	vmov.f32	s18, s2
 80271c4:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 80271c8:	eeb0 8a62 	vmov.f32	s16, s5
 80271cc:	910a      	str	r1, [sp, #40]	; 0x28
 80271ce:	eef0 8a43 	vmov.f32	s17, s6
 80271d2:	920b      	str	r2, [sp, #44]	; 0x2c
 80271d4:	eef0 ba44 	vmov.f32	s23, s8
 80271d8:	6859      	ldr	r1, [r3, #4]
 80271da:	eeb0 ba64 	vmov.f32	s22, s9
 80271de:	681b      	ldr	r3, [r3, #0]
 80271e0:	eef0 aa45 	vmov.f32	s21, s10
 80271e4:	9011      	str	r0, [sp, #68]	; 0x44
 80271e6:	e9dd 272a 	ldrd	r2, r7, [sp, #168]	; 0xa8
 80271ea:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 80271ee:	fb01 2707 	mla	r7, r1, r7, r2
 80271f2:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 80271f6:	9307      	str	r3, [sp, #28]
 80271f8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80271fa:	681b      	ldr	r3, [r3, #0]
 80271fc:	9309      	str	r3, [sp, #36]	; 0x24
 80271fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027200:	43db      	mvns	r3, r3
 8027202:	b2db      	uxtb	r3, r3
 8027204:	9308      	str	r3, [sp, #32]
 8027206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027208:	2b00      	cmp	r3, #0
 802720a:	dc03      	bgt.n	8027214 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802720c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802720e:	2b00      	cmp	r3, #0
 8027210:	f340 8205 	ble.w	802761e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8027214:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027216:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802721a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802721e:	1e48      	subs	r0, r1, #1
 8027220:	f102 3cff 	add.w	ip, r2, #4294967295
 8027224:	2d00      	cmp	r5, #0
 8027226:	f340 80da 	ble.w	80273de <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 802722a:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802722e:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027232:	d406      	bmi.n	8027242 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8027234:	4586      	cmp	lr, r0
 8027236:	da04      	bge.n	8027242 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8027238:	2b00      	cmp	r3, #0
 802723a:	db02      	blt.n	8027242 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 802723c:	4563      	cmp	r3, ip
 802723e:	f2c0 80cf 	blt.w	80273e0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8027242:	f11e 0e01 	adds.w	lr, lr, #1
 8027246:	f100 80c1 	bmi.w	80273cc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 802724a:	4571      	cmp	r1, lr
 802724c:	f2c0 80be 	blt.w	80273cc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8027250:	3301      	adds	r3, #1
 8027252:	f100 80bb 	bmi.w	80273cc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8027256:	429a      	cmp	r2, r3
 8027258:	f2c0 80b8 	blt.w	80273cc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 802725c:	46a9      	mov	r9, r5
 802725e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8027262:	f1b9 0f00 	cmp.w	r9, #0
 8027266:	f340 80d8 	ble.w	802741a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 802726a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802726c:	1421      	asrs	r1, r4, #16
 802726e:	ea4f 4026 	mov.w	r0, r6, asr #16
 8027272:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027276:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802727a:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 802727e:	f100 8112 	bmi.w	80274a6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8027282:	f10e 3aff 	add.w	sl, lr, #4294967295
 8027286:	4551      	cmp	r1, sl
 8027288:	f280 810d 	bge.w	80274a6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802728c:	2800      	cmp	r0, #0
 802728e:	f2c0 810a 	blt.w	80274a6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8027292:	f103 3aff 	add.w	sl, r3, #4294967295
 8027296:	4550      	cmp	r0, sl
 8027298:	f280 8105 	bge.w	80274a6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802729c:	fa0f f38e 	sxth.w	r3, lr
 80272a0:	fb00 1103 	mla	r1, r0, r3, r1
 80272a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80272a6:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 80272aa:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 80272ae:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 80272b2:	f1bc 0f00 	cmp.w	ip, #0
 80272b6:	d007      	beq.n	80272c8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 80272b8:	005b      	lsls	r3, r3, #1
 80272ba:	eb0a 0003 	add.w	r0, sl, r3
 80272be:	f83a 3003 	ldrh.w	r3, [sl, r3]
 80272c2:	930c      	str	r3, [sp, #48]	; 0x30
 80272c4:	8843      	ldrh	r3, [r0, #2]
 80272c6:	930d      	str	r3, [sp, #52]	; 0x34
 80272c8:	ea4f 400e 	mov.w	r0, lr, lsl #16
 80272cc:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80272d0:	fb12 f30c 	smulbb	r3, r2, ip
 80272d4:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80272d8:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80272dc:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80272e0:	10db      	asrs	r3, r3, #3
 80272e2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80272e6:	ea40 000e 	orr.w	r0, r0, lr
 80272ea:	f1cc 0e10 	rsb	lr, ip, #16
 80272ee:	ea4a 0101 	orr.w	r1, sl, r1
 80272f2:	9f08      	ldr	r7, [sp, #32]
 80272f4:	ebae 0e02 	sub.w	lr, lr, r2
 80272f8:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80272fc:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8027300:	4351      	muls	r1, r2
 8027302:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8027304:	fb0e 1e00 	mla	lr, lr, r0, r1
 8027308:	990c      	ldr	r1, [sp, #48]	; 0x30
 802730a:	0410      	lsls	r0, r2, #16
 802730c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027310:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8027314:	4310      	orrs	r0, r2
 8027316:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8027318:	0412      	lsls	r2, r2, #16
 802731a:	fb03 e000 	mla	r0, r3, r0, lr
 802731e:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8027322:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8027326:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802732a:	ea42 020e 	orr.w	r2, r2, lr
 802732e:	fb03 0302 	mla	r3, r3, r2, r0
 8027332:	f8b8 0000 	ldrh.w	r0, [r8]
 8027336:	0d5a      	lsrs	r2, r3, #21
 8027338:	095b      	lsrs	r3, r3, #5
 802733a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802733e:	1201      	asrs	r1, r0, #8
 8027340:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8027344:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8027348:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802734c:	00c0      	lsls	r0, r0, #3
 802734e:	4313      	orrs	r3, r2
 8027350:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8027354:	fb11 f107 	smulbb	r1, r1, r7
 8027358:	b2c0      	uxtb	r0, r0
 802735a:	b29b      	uxth	r3, r3
 802735c:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8027360:	fb10 f007 	smulbb	r0, r0, r7
 8027364:	fb1e fe07 	smulbb	lr, lr, r7
 8027368:	ea4f 2c23 	mov.w	ip, r3, asr #8
 802736c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8027370:	fb0c 1c02 	mla	ip, ip, r2, r1
 8027374:	10d9      	asrs	r1, r3, #3
 8027376:	00db      	lsls	r3, r3, #3
 8027378:	fa1f fc8c 	uxth.w	ip, ip
 802737c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8027380:	b2db      	uxtb	r3, r3
 8027382:	fb01 e102 	mla	r1, r1, r2, lr
 8027386:	fb03 0302 	mla	r3, r3, r2, r0
 802738a:	b289      	uxth	r1, r1
 802738c:	b29a      	uxth	r2, r3
 802738e:	f10c 0301 	add.w	r3, ip, #1
 8027392:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8027396:	1c53      	adds	r3, r2, #1
 8027398:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802739c:	1c4a      	adds	r2, r1, #1
 802739e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80273a2:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80273a6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80273aa:	0949      	lsrs	r1, r1, #5
 80273ac:	ea43 030c 	orr.w	r3, r3, ip
 80273b0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80273b4:	430b      	orrs	r3, r1
 80273b6:	f8a8 3000 	strh.w	r3, [r8]
 80273ba:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80273bc:	f108 0802 	add.w	r8, r8, #2
 80273c0:	f109 39ff 	add.w	r9, r9, #4294967295
 80273c4:	441c      	add	r4, r3
 80273c6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80273c8:	441e      	add	r6, r3
 80273ca:	e74a      	b.n	8027262 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80273cc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80273ce:	3d01      	subs	r5, #1
 80273d0:	441c      	add	r4, r3
 80273d2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80273d4:	441e      	add	r6, r3
 80273d6:	9b07      	ldr	r3, [sp, #28]
 80273d8:	3302      	adds	r3, #2
 80273da:	9307      	str	r3, [sp, #28]
 80273dc:	e722      	b.n	8027224 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80273de:	d022      	beq.n	8027426 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80273e0:	1e6b      	subs	r3, r5, #1
 80273e2:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80273e4:	fb00 4003 	mla	r0, r0, r3, r4
 80273e8:	1400      	asrs	r0, r0, #16
 80273ea:	f53f af37 	bmi.w	802725c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80273ee:	3901      	subs	r1, #1
 80273f0:	4288      	cmp	r0, r1
 80273f2:	f6bf af33 	bge.w	802725c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 80273f6:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80273f8:	fb01 6303 	mla	r3, r1, r3, r6
 80273fc:	141b      	asrs	r3, r3, #16
 80273fe:	f53f af2d 	bmi.w	802725c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8027402:	3a01      	subs	r2, #1
 8027404:	4293      	cmp	r3, r2
 8027406:	f6bf af29 	bge.w	802725c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 802740a:	46a8      	mov	r8, r5
 802740c:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8027410:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 8027414:	f1b8 0f00 	cmp.w	r8, #0
 8027418:	dc60      	bgt.n	80274dc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 802741a:	9b07      	ldr	r3, [sp, #28]
 802741c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8027420:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8027424:	9307      	str	r3, [sp, #28]
 8027426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027428:	2b00      	cmp	r3, #0
 802742a:	f340 80f8 	ble.w	802761e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 802742e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027432:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027434:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8027438:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802743c:	eef0 6a48 	vmov.f32	s13, s16
 8027440:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8027444:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8027448:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802744c:	ee16 4a90 	vmov	r4, s13
 8027450:	eef0 6a68 	vmov.f32	s13, s17
 8027454:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027458:	ee16 6a90 	vmov	r6, s13
 802745c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8027460:	ee69 7a27 	vmul.f32	s15, s18, s15
 8027464:	ee37 8a48 	vsub.f32	s16, s14, s16
 8027468:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802746c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8027470:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8027474:	ee18 2a10 	vmov	r2, s16
 8027478:	eeb0 8a47 	vmov.f32	s16, s14
 802747c:	fb92 f3f3 	sdiv	r3, r2, r3
 8027480:	ee18 2a90 	vmov	r2, s17
 8027484:	9327      	str	r3, [sp, #156]	; 0x9c
 8027486:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027488:	eef0 8a67 	vmov.f32	s17, s15
 802748c:	fb92 f3f3 	sdiv	r3, r2, r3
 8027490:	9328      	str	r3, [sp, #160]	; 0xa0
 8027492:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027494:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8027496:	3b01      	subs	r3, #1
 8027498:	930a      	str	r3, [sp, #40]	; 0x28
 802749a:	bf08      	it	eq
 802749c:	4615      	moveq	r5, r2
 802749e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80274a0:	bf18      	it	ne
 80274a2:	461d      	movne	r5, r3
 80274a4:	e6af      	b.n	8027206 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80274a6:	f111 0a01 	adds.w	sl, r1, #1
 80274aa:	d486      	bmi.n	80273ba <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80274ac:	45d6      	cmp	lr, sl
 80274ae:	db84      	blt.n	80273ba <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80274b0:	f110 0a01 	adds.w	sl, r0, #1
 80274b4:	d481      	bmi.n	80273ba <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80274b6:	4553      	cmp	r3, sl
 80274b8:	f6ff af7f 	blt.w	80273ba <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80274bc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80274be:	b21b      	sxth	r3, r3
 80274c0:	9101      	str	r1, [sp, #4]
 80274c2:	4641      	mov	r1, r8
 80274c4:	9300      	str	r3, [sp, #0]
 80274c6:	fa0f f38e 	sxth.w	r3, lr
 80274ca:	e9cd 0202 	strd	r0, r2, [sp, #8]
 80274ce:	e9cd c704 	strd	ip, r7, [sp, #16]
 80274d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80274d4:	9811      	ldr	r0, [sp, #68]	; 0x44
 80274d6:	f7ff fd93 	bl	8027000 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 80274da:	e76e      	b.n	80273ba <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80274dc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80274de:	1430      	asrs	r0, r6, #16
 80274e0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80274e2:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 80274e6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80274ea:	1423      	asrs	r3, r4, #16
 80274ec:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80274f0:	fb01 3000 	mla	r0, r1, r0, r3
 80274f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80274f6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80274fa:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 80274fe:	8858      	ldrh	r0, [r3, #2]
 8027500:	f1be 0f00 	cmp.w	lr, #0
 8027504:	d00b      	beq.n	802751e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 8027506:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 802750a:	3901      	subs	r1, #1
 802750c:	0049      	lsls	r1, r1, #1
 802750e:	3102      	adds	r1, #2
 8027510:	eb03 0b01 	add.w	fp, r3, r1
 8027514:	5a5b      	ldrh	r3, [r3, r1]
 8027516:	930e      	str	r3, [sp, #56]	; 0x38
 8027518:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 802751c:	930f      	str	r3, [sp, #60]	; 0x3c
 802751e:	ea4f 410c 	mov.w	r1, ip, lsl #16
 8027522:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8027526:	fb12 f30e 	smulbb	r3, r2, lr
 802752a:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 802752e:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 8027532:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027536:	10db      	asrs	r3, r3, #3
 8027538:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802753c:	ea41 010c 	orr.w	r1, r1, ip
 8027540:	f1ce 0c10 	rsb	ip, lr, #16
 8027544:	ea4b 0000 	orr.w	r0, fp, r0
 8027548:	9f08      	ldr	r7, [sp, #32]
 802754a:	ebac 0c02 	sub.w	ip, ip, r2
 802754e:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8027552:	f108 38ff 	add.w	r8, r8, #4294967295
 8027556:	4350      	muls	r0, r2
 8027558:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 802755c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802755e:	fb0c 0c01 	mla	ip, ip, r1, r0
 8027562:	980e      	ldr	r0, [sp, #56]	; 0x38
 8027564:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8027568:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 802756c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802756e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027572:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8027576:	0412      	lsls	r2, r2, #16
 8027578:	ea4b 0101 	orr.w	r1, fp, r1
 802757c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8027580:	fb03 c101 	mla	r1, r3, r1, ip
 8027584:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8027588:	4302      	orrs	r2, r0
 802758a:	fb03 1202 	mla	r2, r3, r2, r1
 802758e:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 8027592:	0952      	lsrs	r2, r2, #5
 8027594:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8027598:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 802759c:	f8b9 2000 	ldrh.w	r2, [r9]
 80275a0:	ea4b 0303 	orr.w	r3, fp, r3
 80275a4:	1211      	asrs	r1, r2, #8
 80275a6:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 80275aa:	b29b      	uxth	r3, r3
 80275ac:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80275b0:	00d2      	lsls	r2, r2, #3
 80275b2:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80275b6:	fb11 f107 	smulbb	r1, r1, r7
 80275ba:	1218      	asrs	r0, r3, #8
 80275bc:	fb1c fc07 	smulbb	ip, ip, r7
 80275c0:	b2d2      	uxtb	r2, r2
 80275c2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80275c6:	fb12 f207 	smulbb	r2, r2, r7
 80275ca:	fb00 100a 	mla	r0, r0, sl, r1
 80275ce:	10d9      	asrs	r1, r3, #3
 80275d0:	00db      	lsls	r3, r3, #3
 80275d2:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80275d6:	b280      	uxth	r0, r0
 80275d8:	b2db      	uxtb	r3, r3
 80275da:	fb01 c10a 	mla	r1, r1, sl, ip
 80275de:	fb03 230a 	mla	r3, r3, sl, r2
 80275e2:	1c42      	adds	r2, r0, #1
 80275e4:	b289      	uxth	r1, r1
 80275e6:	b29b      	uxth	r3, r3
 80275e8:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80275ec:	f101 0c01 	add.w	ip, r1, #1
 80275f0:	1c5a      	adds	r2, r3, #1
 80275f2:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 80275f6:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80275fa:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80275fe:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8027600:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8027604:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8027608:	441c      	add	r4, r3
 802760a:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802760e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027610:	4310      	orrs	r0, r2
 8027612:	441e      	add	r6, r3
 8027614:	ea40 000c 	orr.w	r0, r0, ip
 8027618:	f829 0b02 	strh.w	r0, [r9], #2
 802761c:	e6fa      	b.n	8027414 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 802761e:	b013      	add	sp, #76	; 0x4c
 8027620:	ecbd 8b08 	vpop	{d8-d11}
 8027624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027628 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 8027628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802762c:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
 8027630:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
 8027634:	fb06 5c03 	mla	ip, r6, r3, r5
 8027638:	2e00      	cmp	r6, #0
 802763a:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 802763e:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8027642:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 8027646:	8808      	ldrh	r0, [r1, #0]
 8027648:	db2e      	blt.n	80276a8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 802764a:	45b0      	cmp	r8, r6
 802764c:	dd2c      	ble.n	80276a8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 802764e:	2d00      	cmp	r5, #0
 8027650:	db28      	blt.n	80276a4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 8027652:	42ab      	cmp	r3, r5
 8027654:	dd26      	ble.n	80276a4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 8027656:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]
 802765a:	1c6a      	adds	r2, r5, #1
 802765c:	d427      	bmi.n	80276ae <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 802765e:	4293      	cmp	r3, r2
 8027660:	dd25      	ble.n	80276ae <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8027662:	b324      	cbz	r4, 80276ae <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8027664:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8027668:	3601      	adds	r6, #1
 802766a:	d424      	bmi.n	80276b6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 802766c:	45b0      	cmp	r8, r6
 802766e:	dd22      	ble.n	80276b6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 8027670:	b31f      	cbz	r7, 80276ba <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x92>
 8027672:	2d00      	cmp	r5, #0
 8027674:	db1d      	blt.n	80276b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 8027676:	42ab      	cmp	r3, r5
 8027678:	dd1b      	ble.n	80276b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 802767a:	f83e 6013 	ldrh.w	r6, [lr, r3, lsl #1]
 802767e:	3501      	adds	r5, #1
 8027680:	d405      	bmi.n	802768e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8027682:	42ab      	cmp	r3, r5
 8027684:	dd03      	ble.n	802768e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8027686:	b124      	cbz	r4, 8027692 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6a>
 8027688:	3301      	adds	r3, #1
 802768a:	f83e 0013 	ldrh.w	r0, [lr, r3, lsl #1]
 802768e:	2c0f      	cmp	r4, #15
 8027690:	d801      	bhi.n	8027696 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8027692:	2f0f      	cmp	r7, #15
 8027694:	d914      	bls.n	80276c0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x98>
 8027696:	4b27      	ldr	r3, [pc, #156]	; (8027734 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x10c>)
 8027698:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 802769c:	4a26      	ldr	r2, [pc, #152]	; (8027738 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x110>)
 802769e:	4827      	ldr	r0, [pc, #156]	; (802773c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x114>)
 80276a0:	f002 fca0 	bl	8029fe4 <__assert_func>
 80276a4:	4684      	mov	ip, r0
 80276a6:	e7d8      	b.n	802765a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x32>
 80276a8:	4602      	mov	r2, r0
 80276aa:	4684      	mov	ip, r0
 80276ac:	e7dc      	b.n	8027668 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 80276ae:	4602      	mov	r2, r0
 80276b0:	e7da      	b.n	8027668 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 80276b2:	4606      	mov	r6, r0
 80276b4:	e7e3      	b.n	802767e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x56>
 80276b6:	4606      	mov	r6, r0
 80276b8:	e7e9      	b.n	802768e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 80276ba:	2c0f      	cmp	r4, #15
 80276bc:	d8eb      	bhi.n	8027696 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 80276be:	4606      	mov	r6, r0
 80276c0:	fb14 f307 	smulbb	r3, r4, r7
 80276c4:	ea4f 450c 	mov.w	r5, ip, lsl #16
 80276c8:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 80276cc:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80276d0:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 80276d4:	10db      	asrs	r3, r3, #3
 80276d6:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80276da:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80276de:	ea45 0c0c 	orr.w	ip, r5, ip
 80276e2:	f1c7 0510 	rsb	r5, r7, #16
 80276e6:	ea4e 0202 	orr.w	r2, lr, r2
 80276ea:	ebc3 0747 	rsb	r7, r3, r7, lsl #1
 80276ee:	1b2d      	subs	r5, r5, r4
 80276f0:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 80276f4:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80276f8:	4354      	muls	r4, r2
 80276fa:	fb05 450c 	mla	r5, r5, ip, r4
 80276fe:	0404      	lsls	r4, r0, #16
 8027700:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027704:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8027708:	4320      	orrs	r0, r4
 802770a:	fb03 5400 	mla	r4, r3, r0, r5
 802770e:	0430      	lsls	r0, r6, #16
 8027710:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8027714:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8027718:	4330      	orrs	r0, r6
 802771a:	fb07 4000 	mla	r0, r7, r0, r4
 802771e:	0d43      	lsrs	r3, r0, #21
 8027720:	0940      	lsrs	r0, r0, #5
 8027722:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027726:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802772a:	4318      	orrs	r0, r3
 802772c:	8008      	strh	r0, [r1, #0]
 802772e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027732:	bf00      	nop
 8027734:	0802f359 	.word	0x0802f359
 8027738:	0802f9cf 	.word	0x0802f9cf
 802773c:	0802f3dd 	.word	0x0802f3dd

08027740 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027744:	ed2d 8b08 	vpush	{d8-d11}
 8027748:	b08f      	sub	sp, #60	; 0x3c
 802774a:	461d      	mov	r5, r3
 802774c:	eeb0 aa40 	vmov.f32	s20, s0
 8027750:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8027752:	eef0 9a60 	vmov.f32	s19, s1
 8027756:	9107      	str	r1, [sp, #28]
 8027758:	eeb0 9a41 	vmov.f32	s18, s2
 802775c:	6859      	ldr	r1, [r3, #4]
 802775e:	eeb0 8a62 	vmov.f32	s16, s5
 8027762:	920c      	str	r2, [sp, #48]	; 0x30
 8027764:	eef0 8a43 	vmov.f32	s17, s6
 8027768:	681b      	ldr	r3, [r3, #0]
 802776a:	eef0 ba44 	vmov.f32	s23, s8
 802776e:	eeb0 ba64 	vmov.f32	s22, s9
 8027772:	900d      	str	r0, [sp, #52]	; 0x34
 8027774:	eef0 aa45 	vmov.f32	s21, s10
 8027778:	e9dd 2726 	ldrd	r2, r7, [sp, #152]	; 0x98
 802777c:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 8027780:	fb01 2707 	mla	r7, r1, r7, r2
 8027784:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8027788:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802778a:	f8d3 8000 	ldr.w	r8, [r3]
 802778e:	9b07      	ldr	r3, [sp, #28]
 8027790:	2b00      	cmp	r3, #0
 8027792:	dc03      	bgt.n	802779c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8027794:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027796:	2b00      	cmp	r3, #0
 8027798:	f340 8182 	ble.w	8027aa0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 802779c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802779e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80277a2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80277a6:	1e48      	subs	r0, r1, #1
 80277a8:	f102 3cff 	add.w	ip, r2, #4294967295
 80277ac:	2d00      	cmp	r5, #0
 80277ae:	f340 809b 	ble.w	80278e8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a8>
 80277b2:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80277b6:	ea4f 4326 	mov.w	r3, r6, asr #16
 80277ba:	d406      	bmi.n	80277ca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80277bc:	4586      	cmp	lr, r0
 80277be:	da04      	bge.n	80277ca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80277c0:	2b00      	cmp	r3, #0
 80277c2:	db02      	blt.n	80277ca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80277c4:	4563      	cmp	r3, ip
 80277c6:	f2c0 8090 	blt.w	80278ea <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80277ca:	f11e 0e01 	adds.w	lr, lr, #1
 80277ce:	f100 8084 	bmi.w	80278da <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80277d2:	4571      	cmp	r1, lr
 80277d4:	f2c0 8081 	blt.w	80278da <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80277d8:	3301      	adds	r3, #1
 80277da:	d47e      	bmi.n	80278da <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80277dc:	429a      	cmp	r2, r3
 80277de:	db7c      	blt.n	80278da <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80277e0:	46aa      	mov	sl, r5
 80277e2:	46b9      	mov	r9, r7
 80277e4:	f1ba 0f00 	cmp.w	sl, #0
 80277e8:	f340 8099 	ble.w	802791e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 80277ec:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80277ee:	1421      	asrs	r1, r4, #16
 80277f0:	ea4f 4026 	mov.w	r0, r6, asr #16
 80277f4:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80277f8:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80277fc:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8027800:	f100 80d1 	bmi.w	80279a6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8027804:	f10e 3bff 	add.w	fp, lr, #4294967295
 8027808:	4559      	cmp	r1, fp
 802780a:	f280 80cc 	bge.w	80279a6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 802780e:	2800      	cmp	r0, #0
 8027810:	f2c0 80c9 	blt.w	80279a6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8027814:	f103 3bff 	add.w	fp, r3, #4294967295
 8027818:	4558      	cmp	r0, fp
 802781a:	f280 80c4 	bge.w	80279a6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 802781e:	fa0f fe8e 	sxth.w	lr, lr
 8027822:	fb00 110e 	mla	r1, r0, lr, r1
 8027826:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 802782a:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 802782e:	8841      	ldrh	r1, [r0, #2]
 8027830:	f1bc 0f00 	cmp.w	ip, #0
 8027834:	d00b      	beq.n	802784e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 8027836:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 802783a:	3b01      	subs	r3, #1
 802783c:	005b      	lsls	r3, r3, #1
 802783e:	3302      	adds	r3, #2
 8027840:	eb00 0e03 	add.w	lr, r0, r3
 8027844:	5ac3      	ldrh	r3, [r0, r3]
 8027846:	9308      	str	r3, [sp, #32]
 8027848:	f8be 3002 	ldrh.w	r3, [lr, #2]
 802784c:	9309      	str	r3, [sp, #36]	; 0x24
 802784e:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8027852:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8027856:	fb12 f30c 	smulbb	r3, r2, ip
 802785a:	f1cc 0e10 	rsb	lr, ip, #16
 802785e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8027862:	10db      	asrs	r3, r3, #3
 8027864:	ebae 0e02 	sub.w	lr, lr, r2
 8027868:	ea40 000b 	orr.w	r0, r0, fp
 802786c:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8027870:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8027874:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8027878:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802787c:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8027880:	ea4b 0101 	orr.w	r1, fp, r1
 8027884:	4351      	muls	r1, r2
 8027886:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027888:	fb0e 1e00 	mla	lr, lr, r0, r1
 802788c:	0410      	lsls	r0, r2, #16
 802788e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027892:	9908      	ldr	r1, [sp, #32]
 8027894:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8027898:	4310      	orrs	r0, r2
 802789a:	9a08      	ldr	r2, [sp, #32]
 802789c:	0412      	lsls	r2, r2, #16
 802789e:	fb03 e000 	mla	r0, r3, r0, lr
 80278a2:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 80278a6:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 80278aa:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80278ae:	ea42 020e 	orr.w	r2, r2, lr
 80278b2:	fb03 0302 	mla	r3, r3, r2, r0
 80278b6:	0d5a      	lsrs	r2, r3, #21
 80278b8:	095b      	lsrs	r3, r3, #5
 80278ba:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80278be:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80278c2:	4313      	orrs	r3, r2
 80278c4:	f8a9 3000 	strh.w	r3, [r9]
 80278c8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80278ca:	f109 0902 	add.w	r9, r9, #2
 80278ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80278d2:	441c      	add	r4, r3
 80278d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80278d6:	441e      	add	r6, r3
 80278d8:	e784      	b.n	80277e4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 80278da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80278dc:	3d01      	subs	r5, #1
 80278de:	3702      	adds	r7, #2
 80278e0:	441c      	add	r4, r3
 80278e2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80278e4:	441e      	add	r6, r3
 80278e6:	e761      	b.n	80277ac <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80278e8:	d01d      	beq.n	8027926 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 80278ea:	1e6b      	subs	r3, r5, #1
 80278ec:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80278ee:	fb00 4003 	mla	r0, r0, r3, r4
 80278f2:	1400      	asrs	r0, r0, #16
 80278f4:	f53f af74 	bmi.w	80277e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80278f8:	3901      	subs	r1, #1
 80278fa:	4288      	cmp	r0, r1
 80278fc:	f6bf af70 	bge.w	80277e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8027900:	9924      	ldr	r1, [sp, #144]	; 0x90
 8027902:	fb01 6303 	mla	r3, r1, r3, r6
 8027906:	141b      	asrs	r3, r3, #16
 8027908:	f53f af6a 	bmi.w	80277e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 802790c:	3a01      	subs	r2, #1
 802790e:	4293      	cmp	r3, r2
 8027910:	f6bf af66 	bge.w	80277e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8027914:	46a9      	mov	r9, r5
 8027916:	46ba      	mov	sl, r7
 8027918:	f1b9 0f00 	cmp.w	r9, #0
 802791c:	dc5b      	bgt.n	80279d6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 802791e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8027922:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8027926:	9b07      	ldr	r3, [sp, #28]
 8027928:	2b00      	cmp	r3, #0
 802792a:	f340 80b9 	ble.w	8027aa0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 802792e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027932:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027934:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8027938:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802793c:	eef0 6a48 	vmov.f32	s13, s16
 8027940:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8027944:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8027948:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802794c:	ee16 4a90 	vmov	r4, s13
 8027950:	eef0 6a68 	vmov.f32	s13, s17
 8027954:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027958:	ee16 6a90 	vmov	r6, s13
 802795c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8027960:	ee69 7a27 	vmul.f32	s15, s18, s15
 8027964:	ee37 8a48 	vsub.f32	s16, s14, s16
 8027968:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802796c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8027970:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8027974:	ee18 2a10 	vmov	r2, s16
 8027978:	eeb0 8a47 	vmov.f32	s16, s14
 802797c:	fb92 f3f3 	sdiv	r3, r2, r3
 8027980:	ee18 2a90 	vmov	r2, s17
 8027984:	9323      	str	r3, [sp, #140]	; 0x8c
 8027986:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027988:	eef0 8a67 	vmov.f32	s17, s15
 802798c:	fb92 f3f3 	sdiv	r3, r2, r3
 8027990:	9324      	str	r3, [sp, #144]	; 0x90
 8027992:	9b07      	ldr	r3, [sp, #28]
 8027994:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8027996:	3b01      	subs	r3, #1
 8027998:	9307      	str	r3, [sp, #28]
 802799a:	bf08      	it	eq
 802799c:	4615      	moveq	r5, r2
 802799e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80279a0:	bf18      	it	ne
 80279a2:	461d      	movne	r5, r3
 80279a4:	e6f3      	b.n	802778e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 80279a6:	f111 0b01 	adds.w	fp, r1, #1
 80279aa:	d48d      	bmi.n	80278c8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80279ac:	45de      	cmp	lr, fp
 80279ae:	db8b      	blt.n	80278c8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80279b0:	f110 0b01 	adds.w	fp, r0, #1
 80279b4:	d488      	bmi.n	80278c8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80279b6:	455b      	cmp	r3, fp
 80279b8:	db86      	blt.n	80278c8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80279ba:	b21b      	sxth	r3, r3
 80279bc:	e9cd 1001 	strd	r1, r0, [sp, #4]
 80279c0:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 80279c4:	9300      	str	r3, [sp, #0]
 80279c6:	4642      	mov	r2, r8
 80279c8:	fa0f f38e 	sxth.w	r3, lr
 80279cc:	4649      	mov	r1, r9
 80279ce:	980d      	ldr	r0, [sp, #52]	; 0x34
 80279d0:	f7ff fe2a 	bl	8027628 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 80279d4:	e778      	b.n	80278c8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80279d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80279d8:	1420      	asrs	r0, r4, #16
 80279da:	1431      	asrs	r1, r6, #16
 80279dc:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 80279e0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80279e4:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80279e8:	fb03 0101 	mla	r1, r3, r1, r0
 80279ec:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 80279f0:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 80279f4:	8841      	ldrh	r1, [r0, #2]
 80279f6:	f1be 0f00 	cmp.w	lr, #0
 80279fa:	d00b      	beq.n	8027a14 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 80279fc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8027a00:	3b01      	subs	r3, #1
 8027a02:	005b      	lsls	r3, r3, #1
 8027a04:	3302      	adds	r3, #2
 8027a06:	eb00 0b03 	add.w	fp, r0, r3
 8027a0a:	5ac3      	ldrh	r3, [r0, r3]
 8027a0c:	930a      	str	r3, [sp, #40]	; 0x28
 8027a0e:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8027a12:	930b      	str	r3, [sp, #44]	; 0x2c
 8027a14:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8027a18:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8027a1c:	fb12 f30e 	smulbb	r3, r2, lr
 8027a20:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8027a24:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8027a28:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8027a2c:	10db      	asrs	r3, r3, #3
 8027a2e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8027a32:	ea40 000c 	orr.w	r0, r0, ip
 8027a36:	f1ce 0c10 	rsb	ip, lr, #16
 8027a3a:	ea4b 0101 	orr.w	r1, fp, r1
 8027a3e:	f109 39ff 	add.w	r9, r9, #4294967295
 8027a42:	ebac 0c02 	sub.w	ip, ip, r2
 8027a46:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8027a4a:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8027a4e:	4351      	muls	r1, r2
 8027a50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8027a52:	fb0c 1c00 	mla	ip, ip, r0, r1
 8027a56:	990a      	ldr	r1, [sp, #40]	; 0x28
 8027a58:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8027a5c:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 8027a60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8027a62:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8027a66:	0412      	lsls	r2, r2, #16
 8027a68:	ea4b 0000 	orr.w	r0, fp, r0
 8027a6c:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 8027a70:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8027a74:	fb03 c000 	mla	r0, r3, r0, ip
 8027a78:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8027a7c:	ea42 0b0b 	orr.w	fp, r2, fp
 8027a80:	fb03 000b 	mla	r0, r3, fp, r0
 8027a84:	0d43      	lsrs	r3, r0, #21
 8027a86:	0940      	lsrs	r0, r0, #5
 8027a88:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027a8c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027a90:	4318      	orrs	r0, r3
 8027a92:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8027a94:	441c      	add	r4, r3
 8027a96:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027a98:	f82a 0b02 	strh.w	r0, [sl], #2
 8027a9c:	441e      	add	r6, r3
 8027a9e:	e73b      	b.n	8027918 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8027aa0:	b00f      	add	sp, #60	; 0x3c
 8027aa2:	ecbd 8b08 	vpop	{d8-d11}
 8027aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08027aac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 8027aac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027ab0:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 8027ab4:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8027ab8:	fb04 5603 	mla	r6, r4, r3, r5
 8027abc:	2c00      	cmp	r4, #0
 8027abe:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8027ac2:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8027ac6:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 8027aca:	db36      	blt.n	8027b3a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8e>
 8027acc:	45a6      	cmp	lr, r4
 8027ace:	dd34      	ble.n	8027b3a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8e>
 8027ad0:	2d00      	cmp	r5, #0
 8027ad2:	db30      	blt.n	8027b36 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8a>
 8027ad4:	42ab      	cmp	r3, r5
 8027ad6:	dd2e      	ble.n	8027b36 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8a>
 8027ad8:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8027adc:	1c6e      	adds	r6, r5, #1
 8027ade:	d42f      	bmi.n	8027b40 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x94>
 8027ae0:	42b3      	cmp	r3, r6
 8027ae2:	dd2d      	ble.n	8027b40 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x94>
 8027ae4:	b370      	cbz	r0, 8027b44 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 8027ae6:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8027aea:	3401      	adds	r4, #1
 8027aec:	d42e      	bmi.n	8027b4c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa0>
 8027aee:	45a6      	cmp	lr, r4
 8027af0:	dd2c      	ble.n	8027b4c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa0>
 8027af2:	b377      	cbz	r7, 8027b52 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa6>
 8027af4:	2d00      	cmp	r5, #0
 8027af6:	db27      	blt.n	8027b48 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 8027af8:	42ab      	cmp	r3, r5
 8027afa:	dd25      	ble.n	8027b48 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 8027afc:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8027b00:	3501      	adds	r5, #1
 8027b02:	d429      	bmi.n	8027b58 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xac>
 8027b04:	42ab      	cmp	r3, r5
 8027b06:	dd27      	ble.n	8027b58 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xac>
 8027b08:	b340      	cbz	r0, 8027b5c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb0>
 8027b0a:	3301      	adds	r3, #1
 8027b0c:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8027b10:	280f      	cmp	r0, #15
 8027b12:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8027b16:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8027b1a:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8027b1e:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8027b22:	d801      	bhi.n	8027b28 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x7c>
 8027b24:	2f0f      	cmp	r7, #15
 8027b26:	d91b      	bls.n	8027b60 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb4>
 8027b28:	4b8d      	ldr	r3, [pc, #564]	; (8027d60 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b4>)
 8027b2a:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8027b2e:	4a8d      	ldr	r2, [pc, #564]	; (8027d64 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b8>)
 8027b30:	488d      	ldr	r0, [pc, #564]	; (8027d68 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2bc>)
 8027b32:	f002 fa57 	bl	8029fe4 <__assert_func>
 8027b36:	2200      	movs	r2, #0
 8027b38:	e7d0      	b.n	8027adc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x30>
 8027b3a:	2600      	movs	r6, #0
 8027b3c:	4632      	mov	r2, r6
 8027b3e:	e7d4      	b.n	8027aea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 8027b40:	2600      	movs	r6, #0
 8027b42:	e7d2      	b.n	8027aea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 8027b44:	4606      	mov	r6, r0
 8027b46:	e7d0      	b.n	8027aea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 8027b48:	2400      	movs	r4, #0
 8027b4a:	e7d9      	b.n	8027b00 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x54>
 8027b4c:	2300      	movs	r3, #0
 8027b4e:	461c      	mov	r4, r3
 8027b50:	e7de      	b.n	8027b10 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 8027b52:	463b      	mov	r3, r7
 8027b54:	463c      	mov	r4, r7
 8027b56:	e7db      	b.n	8027b10 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 8027b58:	2300      	movs	r3, #0
 8027b5a:	e7d9      	b.n	8027b10 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 8027b5c:	4603      	mov	r3, r0
 8027b5e:	e7d7      	b.n	8027b10 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 8027b60:	b280      	uxth	r0, r0
 8027b62:	b2bf      	uxth	r7, r7
 8027b64:	fb07 fe00 	mul.w	lr, r7, r0
 8027b68:	0100      	lsls	r0, r0, #4
 8027b6a:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8027b6e:	eba0 0c0e 	sub.w	ip, r0, lr
 8027b72:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8027b76:	b2bf      	uxth	r7, r7
 8027b78:	fa1f fc8c 	uxth.w	ip, ip
 8027b7c:	1bed      	subs	r5, r5, r7
 8027b7e:	fb0a f00c 	mul.w	r0, sl, ip
 8027b82:	b2ad      	uxth	r5, r5
 8027b84:	fb0b 0005 	mla	r0, fp, r5, r0
 8027b88:	fb07 0009 	mla	r0, r7, r9, r0
 8027b8c:	fb0e 0008 	mla	r0, lr, r8, r0
 8027b90:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8027b94:	9001      	str	r0, [sp, #4]
 8027b96:	2800      	cmp	r0, #0
 8027b98:	f000 80de 	beq.w	8027d58 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2ac>
 8027b9c:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8027ba0:	d018      	beq.n	8027bd4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x128>
 8027ba2:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8027ba6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027baa:	fb0b f000 	mul.w	r0, fp, r0
 8027bae:	fb0b fb02 	mul.w	fp, fp, r2
 8027bb2:	0a02      	lsrs	r2, r0, #8
 8027bb4:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8027bb8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027bbc:	4402      	add	r2, r0
 8027bbe:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8027bc2:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8027bc6:	0a12      	lsrs	r2, r2, #8
 8027bc8:	0a00      	lsrs	r0, r0, #8
 8027bca:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027bce:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8027bd2:	4302      	orrs	r2, r0
 8027bd4:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8027bd8:	d01a      	beq.n	8027c10 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x164>
 8027bda:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8027bde:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8027be2:	fb0a f000 	mul.w	r0, sl, r0
 8027be6:	fb0a fa06 	mul.w	sl, sl, r6
 8027bea:	0a06      	lsrs	r6, r0, #8
 8027bec:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8027bf0:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8027bf4:	4406      	add	r6, r0
 8027bf6:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8027bfa:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8027bfe:	0a36      	lsrs	r6, r6, #8
 8027c00:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027c04:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8027c08:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027c0c:	ea46 060a 	orr.w	r6, r6, sl
 8027c10:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8027c14:	d01b      	beq.n	8027c4e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1a2>
 8027c16:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8027c1a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8027c1e:	fb09 fa0a 	mul.w	sl, r9, sl
 8027c22:	fb09 f004 	mul.w	r0, r9, r4
 8027c26:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8027c2a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8027c2e:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8027c32:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8027c36:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8027c3a:	4454      	add	r4, sl
 8027c3c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027c40:	0a24      	lsrs	r4, r4, #8
 8027c42:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8027c46:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8027c4a:	ea44 0409 	orr.w	r4, r4, r9
 8027c4e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8027c52:	d01b      	beq.n	8027c8c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1e0>
 8027c54:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8027c58:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027c5c:	fb08 f909 	mul.w	r9, r8, r9
 8027c60:	fb08 f003 	mul.w	r0, r8, r3
 8027c64:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8027c68:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8027c6c:	f500 7880 	add.w	r8, r0, #256	; 0x100
 8027c70:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027c74:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8027c78:	444b      	add	r3, r9
 8027c7a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8027c7e:	0a1b      	lsrs	r3, r3, #8
 8027c80:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8027c84:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027c88:	ea43 0308 	orr.w	r3, r3, r8
 8027c8c:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8027c90:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8027c94:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 8027c98:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027c9c:	fb0c f808 	mul.w	r8, ip, r8
 8027ca0:	8808      	ldrh	r0, [r1, #0]
 8027ca2:	fb0c f606 	mul.w	r6, ip, r6
 8027ca6:	fb05 8909 	mla	r9, r5, r9, r8
 8027caa:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 8027cae:	fb05 6502 	mla	r5, r5, r2, r6
 8027cb2:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8027cb6:	fb07 9908 	mla	r9, r7, r8, r9
 8027cba:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8027cbe:	fb07 5704 	mla	r7, r7, r4, r5
 8027cc2:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 8027cc6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027cca:	b2b6      	uxth	r6, r6
 8027ccc:	fb0e 9808 	mla	r8, lr, r8, r9
 8027cd0:	9a01      	ldr	r2, [sp, #4]
 8027cd2:	fb0e 7e03 	mla	lr, lr, r3, r7
 8027cd6:	1205      	asrs	r5, r0, #8
 8027cd8:	4372      	muls	r2, r6
 8027cda:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8027cde:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027ce2:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8027ce6:	1c53      	adds	r3, r2, #1
 8027ce8:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8027cec:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8027cf0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027cf4:	ea48 0e0e 	orr.w	lr, r8, lr
 8027cf8:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8027cfc:	ea4f 421e 	mov.w	r2, lr, lsr #16
 8027d00:	f3ce 2407 	ubfx	r4, lr, #8, #8
 8027d04:	b2db      	uxtb	r3, r3
 8027d06:	fb12 f206 	smulbb	r2, r2, r6
 8027d0a:	fa5f fe8e 	uxtb.w	lr, lr
 8027d0e:	fb14 f406 	smulbb	r4, r4, r6
 8027d12:	fb05 2503 	mla	r5, r5, r3, r2
 8027d16:	10c2      	asrs	r2, r0, #3
 8027d18:	fb1e fe06 	smulbb	lr, lr, r6
 8027d1c:	00c0      	lsls	r0, r0, #3
 8027d1e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8027d22:	b2ad      	uxth	r5, r5
 8027d24:	b2c0      	uxtb	r0, r0
 8027d26:	fb02 4203 	mla	r2, r2, r3, r4
 8027d2a:	fb00 e303 	mla	r3, r0, r3, lr
 8027d2e:	b294      	uxth	r4, r2
 8027d30:	b298      	uxth	r0, r3
 8027d32:	1c6b      	adds	r3, r5, #1
 8027d34:	1c62      	adds	r2, r4, #1
 8027d36:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8027d3a:	1c43      	adds	r3, r0, #1
 8027d3c:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8027d40:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8027d44:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8027d48:	0952      	lsrs	r2, r2, #5
 8027d4a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027d4e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027d52:	432b      	orrs	r3, r5
 8027d54:	4313      	orrs	r3, r2
 8027d56:	800b      	strh	r3, [r1, #0]
 8027d58:	b003      	add	sp, #12
 8027d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027d5e:	bf00      	nop
 8027d60:	0802f359 	.word	0x0802f359
 8027d64:	0802f926 	.word	0x0802f926
 8027d68:	0802f3dd 	.word	0x0802f3dd

08027d6c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027d70:	ed2d 8b08 	vpush	{d8-d11}
 8027d74:	b09d      	sub	sp, #116	; 0x74
 8027d76:	eeb0 aa40 	vmov.f32	s20, s0
 8027d7a:	eef0 9a60 	vmov.f32	s19, s1
 8027d7e:	9219      	str	r2, [sp, #100]	; 0x64
 8027d80:	eeb0 9a41 	vmov.f32	s18, s2
 8027d84:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8027d86:	eeb0 8a62 	vmov.f32	s16, s5
 8027d8a:	9307      	str	r3, [sp, #28]
 8027d8c:	eef0 8a43 	vmov.f32	s17, s6
 8027d90:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8027d94:	eef0 ba44 	vmov.f32	s23, s8
 8027d98:	901b      	str	r0, [sp, #108]	; 0x6c
 8027d9a:	eeb0 ba64 	vmov.f32	s22, s9
 8027d9e:	931a      	str	r3, [sp, #104]	; 0x68
 8027da0:	eef0 aa45 	vmov.f32	s21, s10
 8027da4:	6850      	ldr	r0, [r2, #4]
 8027da6:	9117      	str	r1, [sp, #92]	; 0x5c
 8027da8:	6812      	ldr	r2, [r2, #0]
 8027daa:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 8027dae:	e9dd 462f 	ldrd	r4, r6, [sp, #188]	; 0xbc
 8027db2:	fb00 1303 	mla	r3, r0, r3, r1
 8027db6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8027dba:	930a      	str	r3, [sp, #40]	; 0x28
 8027dbc:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8027dbe:	681b      	ldr	r3, [r3, #0]
 8027dc0:	9310      	str	r3, [sp, #64]	; 0x40
 8027dc2:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8027dc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8027dc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027dca:	2b00      	cmp	r3, #0
 8027dcc:	dc03      	bgt.n	8027dd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8027dce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8027dd0:	2b00      	cmp	r3, #0
 8027dd2:	f340 8375 	ble.w	80284c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>
 8027dd6:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8027dd8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027ddc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027de0:	1e48      	subs	r0, r1, #1
 8027de2:	1e57      	subs	r7, r2, #1
 8027de4:	9b07      	ldr	r3, [sp, #28]
 8027de6:	2b00      	cmp	r3, #0
 8027de8:	f340 818e 	ble.w	8028108 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8027dec:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8027df0:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027df4:	d406      	bmi.n	8027e04 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8027df6:	4584      	cmp	ip, r0
 8027df8:	da04      	bge.n	8027e04 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8027dfa:	2b00      	cmp	r3, #0
 8027dfc:	db02      	blt.n	8027e04 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8027dfe:	42bb      	cmp	r3, r7
 8027e00:	f2c0 8183 	blt.w	802810a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8027e04:	f11c 0c01 	adds.w	ip, ip, #1
 8027e08:	f100 8173 	bmi.w	80280f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8027e0c:	4561      	cmp	r1, ip
 8027e0e:	f2c0 8170 	blt.w	80280f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8027e12:	3301      	adds	r3, #1
 8027e14:	f100 816d 	bmi.w	80280f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8027e18:	429a      	cmp	r2, r3
 8027e1a:	f2c0 816a 	blt.w	80280f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8027e1e:	9b07      	ldr	r3, [sp, #28]
 8027e20:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8027e22:	9318      	str	r3, [sp, #96]	; 0x60
 8027e24:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8027e26:	2b00      	cmp	r3, #0
 8027e28:	f340 818c 	ble.w	8028144 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d8>
 8027e2c:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8027e2e:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8027e32:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8027e34:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8027e38:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8027e3c:	1422      	asrs	r2, r4, #16
 8027e3e:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8027e42:	689b      	ldr	r3, [r3, #8]
 8027e44:	f100 81cd 	bmi.w	80281e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8027e48:	f103 38ff 	add.w	r8, r3, #4294967295
 8027e4c:	4542      	cmp	r2, r8
 8027e4e:	f280 81c8 	bge.w	80281e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8027e52:	f1bc 0f00 	cmp.w	ip, #0
 8027e56:	f2c0 81c4 	blt.w	80281e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8027e5a:	f10e 38ff 	add.w	r8, lr, #4294967295
 8027e5e:	45c4      	cmp	ip, r8
 8027e60:	f280 81bf 	bge.w	80281e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8027e64:	b21b      	sxth	r3, r3
 8027e66:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8027e68:	fb0c 2203 	mla	r2, ip, r3, r2
 8027e6c:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8027e70:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8027e74:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8027e78:	2800      	cmp	r0, #0
 8027e7a:	f000 81a9 	beq.w	80281d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x464>
 8027e7e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8027e82:	950c      	str	r5, [sp, #48]	; 0x30
 8027e84:	0e2d      	lsrs	r5, r5, #24
 8027e86:	9513      	str	r5, [sp, #76]	; 0x4c
 8027e88:	b181      	cbz	r1, 8027eac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8027e8a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8027e8e:	3b01      	subs	r3, #1
 8027e90:	009b      	lsls	r3, r3, #2
 8027e92:	3304      	adds	r3, #4
 8027e94:	eb08 0c03 	add.w	ip, r8, r3
 8027e98:	f858 3003 	ldr.w	r3, [r8, r3]
 8027e9c:	9308      	str	r3, [sp, #32]
 8027e9e:	0e1b      	lsrs	r3, r3, #24
 8027ea0:	9311      	str	r3, [sp, #68]	; 0x44
 8027ea2:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8027ea6:	930d      	str	r3, [sp, #52]	; 0x34
 8027ea8:	0e1b      	lsrs	r3, r3, #24
 8027eaa:	9314      	str	r3, [sp, #80]	; 0x50
 8027eac:	b280      	uxth	r0, r0
 8027eae:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8027eb0:	b289      	uxth	r1, r1
 8027eb2:	fb00 f901 	mul.w	r9, r0, r1
 8027eb6:	0100      	lsls	r0, r0, #4
 8027eb8:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8027ebc:	eba0 0809 	sub.w	r8, r0, r9
 8027ec0:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8027ec4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8027ec6:	b289      	uxth	r1, r1
 8027ec8:	fa1f f888 	uxth.w	r8, r8
 8027ecc:	1a5b      	subs	r3, r3, r1
 8027ece:	fb08 f000 	mul.w	r0, r8, r0
 8027ed2:	b29b      	uxth	r3, r3
 8027ed4:	fb03 000e 	mla	r0, r3, lr, r0
 8027ed8:	fb01 0005 	mla	r0, r1, r5, r0
 8027edc:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8027ede:	fb09 0005 	mla	r0, r9, r5, r0
 8027ee2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8027ee6:	2800      	cmp	r0, #0
 8027ee8:	f000 80fa 	beq.w	80280e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8027eec:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8027ef0:	d01b      	beq.n	8027f2a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8027ef2:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8027ef6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027efa:	fb0e fa0a 	mul.w	sl, lr, sl
 8027efe:	fb0e fe02 	mul.w	lr, lr, r2
 8027f02:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8027f06:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8027f0a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8027f0e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027f12:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8027f16:	4452      	add	r2, sl
 8027f18:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027f1c:	0a12      	lsrs	r2, r2, #8
 8027f1e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8027f22:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027f26:	ea42 020c 	orr.w	r2, r2, ip
 8027f2a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8027f2c:	2dff      	cmp	r5, #255	; 0xff
 8027f2e:	d021      	beq.n	8027f74 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8027f30:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8027f32:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8027f36:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8027f38:	fb05 fb0b 	mul.w	fp, r5, fp
 8027f3c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8027f3e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027f42:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8027f44:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027f48:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027f4c:	fb05 fa0a 	mul.w	sl, r5, sl
 8027f50:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027f54:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8027f58:	44de      	add	lr, fp
 8027f5a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027f5e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027f62:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027f66:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027f6a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027f6e:	ea4e 050a 	orr.w	r5, lr, sl
 8027f72:	950c      	str	r5, [sp, #48]	; 0x30
 8027f74:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8027f76:	2dff      	cmp	r5, #255	; 0xff
 8027f78:	d021      	beq.n	8027fbe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8027f7a:	9d08      	ldr	r5, [sp, #32]
 8027f7c:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8027f80:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8027f82:	fb05 fb0b 	mul.w	fp, r5, fp
 8027f86:	9d08      	ldr	r5, [sp, #32]
 8027f88:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027f8c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8027f8e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027f92:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027f96:	fb05 fa0a 	mul.w	sl, r5, sl
 8027f9a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027f9e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8027fa2:	44de      	add	lr, fp
 8027fa4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027fa8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027fac:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027fb0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027fb4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027fb8:	ea4e 050a 	orr.w	r5, lr, sl
 8027fbc:	9508      	str	r5, [sp, #32]
 8027fbe:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8027fc0:	2dff      	cmp	r5, #255	; 0xff
 8027fc2:	d021      	beq.n	8028008 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 8027fc4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027fc6:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8027fca:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8027fcc:	fb05 fb0b 	mul.w	fp, r5, fp
 8027fd0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027fd2:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027fd6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8027fd8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027fdc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027fe0:	fb05 fa0a 	mul.w	sl, r5, sl
 8027fe4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027fe8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8027fec:	44de      	add	lr, fp
 8027fee:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027ff2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027ff6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027ffa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027ffe:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028002:	ea4e 050a 	orr.w	r5, lr, sl
 8028006:	950d      	str	r5, [sp, #52]	; 0x34
 8028008:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802800a:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802800e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028012:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8028016:	9d08      	ldr	r5, [sp, #32]
 8028018:	fb08 fc0c 	mul.w	ip, r8, ip
 802801c:	fb03 cc0e 	mla	ip, r3, lr, ip
 8028020:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8028024:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8028026:	fb01 cc0e 	mla	ip, r1, lr, ip
 802802a:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802802e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8028030:	fb09 cc0e 	mla	ip, r9, lr, ip
 8028034:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8028038:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802803a:	fb08 f80e 	mul.w	r8, r8, lr
 802803e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028042:	fb03 8202 	mla	r2, r3, r2, r8
 8028046:	9b08      	ldr	r3, [sp, #32]
 8028048:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802804c:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8028050:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028052:	fb01 220a 	mla	r2, r1, sl, r2
 8028056:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 802805a:	883b      	ldrh	r3, [r7, #0]
 802805c:	fb09 2901 	mla	r9, r9, r1, r2
 8028060:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8028062:	1219      	asrs	r1, r3, #8
 8028064:	4342      	muls	r2, r0
 8028066:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802806a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802806e:	1c50      	adds	r0, r2, #1
 8028070:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8028074:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8028078:	ea4c 0c09 	orr.w	ip, ip, r9
 802807c:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8028080:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8028084:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8028088:	fa5f fc8c 	uxtb.w	ip, ip
 802808c:	fb12 f205 	smulbb	r2, r2, r5
 8028090:	b2c0      	uxtb	r0, r0
 8028092:	fb1c fc05 	smulbb	ip, ip, r5
 8028096:	fb01 2100 	mla	r1, r1, r0, r2
 802809a:	10da      	asrs	r2, r3, #3
 802809c:	fb1e fe05 	smulbb	lr, lr, r5
 80280a0:	00db      	lsls	r3, r3, #3
 80280a2:	b289      	uxth	r1, r1
 80280a4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80280a8:	b2db      	uxtb	r3, r3
 80280aa:	fb02 e200 	mla	r2, r2, r0, lr
 80280ae:	fb03 c300 	mla	r3, r3, r0, ip
 80280b2:	b292      	uxth	r2, r2
 80280b4:	fa1f fc83 	uxth.w	ip, r3
 80280b8:	1c4b      	adds	r3, r1, #1
 80280ba:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80280be:	f10c 0301 	add.w	r3, ip, #1
 80280c2:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 80280c6:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 80280ca:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80280ce:	430b      	orrs	r3, r1
 80280d0:	1c51      	adds	r1, r2, #1
 80280d2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80280d6:	0952      	lsrs	r2, r2, #5
 80280d8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80280dc:	4313      	orrs	r3, r2
 80280de:	803b      	strh	r3, [r7, #0]
 80280e0:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80280e2:	3702      	adds	r7, #2
 80280e4:	441c      	add	r4, r3
 80280e6:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80280e8:	441e      	add	r6, r3
 80280ea:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80280ec:	3b01      	subs	r3, #1
 80280ee:	9318      	str	r3, [sp, #96]	; 0x60
 80280f0:	e698      	b.n	8027e24 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80280f2:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80280f4:	441c      	add	r4, r3
 80280f6:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80280f8:	441e      	add	r6, r3
 80280fa:	9b07      	ldr	r3, [sp, #28]
 80280fc:	3b01      	subs	r3, #1
 80280fe:	9307      	str	r3, [sp, #28]
 8028100:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028102:	3302      	adds	r3, #2
 8028104:	930a      	str	r3, [sp, #40]	; 0x28
 8028106:	e66d      	b.n	8027de4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8028108:	d023      	beq.n	8028152 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 802810a:	9b07      	ldr	r3, [sp, #28]
 802810c:	9831      	ldr	r0, [sp, #196]	; 0xc4
 802810e:	3b01      	subs	r3, #1
 8028110:	fb00 4003 	mla	r0, r0, r3, r4
 8028114:	1400      	asrs	r0, r0, #16
 8028116:	f53f ae82 	bmi.w	8027e1e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 802811a:	3901      	subs	r1, #1
 802811c:	4288      	cmp	r0, r1
 802811e:	f6bf ae7e 	bge.w	8027e1e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8028122:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8028124:	fb01 6303 	mla	r3, r1, r3, r6
 8028128:	141b      	asrs	r3, r3, #16
 802812a:	f53f ae78 	bmi.w	8027e1e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 802812e:	3a01      	subs	r2, #1
 8028130:	4293      	cmp	r3, r2
 8028132:	f6bf ae74 	bge.w	8027e1e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8028136:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802813a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 802813e:	f1bb 0f00 	cmp.w	fp, #0
 8028142:	dc6c      	bgt.n	802821e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b2>
 8028144:	9b07      	ldr	r3, [sp, #28]
 8028146:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802814a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802814c:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8028150:	930a      	str	r3, [sp, #40]	; 0x28
 8028152:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8028154:	2b00      	cmp	r3, #0
 8028156:	f340 81b3 	ble.w	80284c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>
 802815a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802815e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8028160:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8028164:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8028168:	eef0 6a48 	vmov.f32	s13, s16
 802816c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8028170:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8028174:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028178:	ee16 4a90 	vmov	r4, s13
 802817c:	eef0 6a68 	vmov.f32	s13, s17
 8028180:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028184:	ee16 6a90 	vmov	r6, s13
 8028188:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802818c:	ee69 7a27 	vmul.f32	s15, s18, s15
 8028190:	ee37 8a48 	vsub.f32	s16, s14, s16
 8028194:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8028198:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802819c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80281a0:	ee18 2a10 	vmov	r2, s16
 80281a4:	eeb0 8a47 	vmov.f32	s16, s14
 80281a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80281ac:	ee18 2a90 	vmov	r2, s17
 80281b0:	9331      	str	r3, [sp, #196]	; 0xc4
 80281b2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80281b4:	eef0 8a67 	vmov.f32	s17, s15
 80281b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80281bc:	9332      	str	r3, [sp, #200]	; 0xc8
 80281be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80281c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80281c2:	3b01      	subs	r3, #1
 80281c4:	9317      	str	r3, [sp, #92]	; 0x5c
 80281c6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80281c8:	bf08      	it	eq
 80281ca:	4613      	moveq	r3, r2
 80281cc:	9307      	str	r3, [sp, #28]
 80281ce:	e5fb      	b.n	8027dc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80281d0:	2900      	cmp	r1, #0
 80281d2:	f43f ae6b 	beq.w	8027eac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 80281d6:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80281da:	9308      	str	r3, [sp, #32]
 80281dc:	0e1b      	lsrs	r3, r3, #24
 80281de:	9311      	str	r3, [sp, #68]	; 0x44
 80281e0:	e664      	b.n	8027eac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 80281e2:	f112 0801 	adds.w	r8, r2, #1
 80281e6:	f53f af7b 	bmi.w	80280e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80281ea:	4543      	cmp	r3, r8
 80281ec:	f6ff af78 	blt.w	80280e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80281f0:	f11c 0801 	adds.w	r8, ip, #1
 80281f4:	f53f af74 	bmi.w	80280e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80281f8:	45c6      	cmp	lr, r8
 80281fa:	f6ff af71 	blt.w	80280e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80281fe:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8028200:	b21b      	sxth	r3, r3
 8028202:	9201      	str	r2, [sp, #4]
 8028204:	fa0f f28e 	sxth.w	r2, lr
 8028208:	e9cd 1504 	strd	r1, r5, [sp, #16]
 802820c:	e9cd c002 	strd	ip, r0, [sp, #8]
 8028210:	9200      	str	r2, [sp, #0]
 8028212:	4639      	mov	r1, r7
 8028214:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8028216:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8028218:	f7ff fc48 	bl	8027aac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 802821c:	e760      	b.n	80280e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 802821e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8028220:	1427      	asrs	r7, r4, #16
 8028222:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8028224:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8028228:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802822c:	1433      	asrs	r3, r6, #16
 802822e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8028232:	fb01 7303 	mla	r3, r1, r3, r7
 8028236:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 802823a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 802823e:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8028242:	2a00      	cmp	r2, #0
 8028244:	f000 8133 	beq.w	80284ae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x742>
 8028248:	687d      	ldr	r5, [r7, #4]
 802824a:	950e      	str	r5, [sp, #56]	; 0x38
 802824c:	0e2d      	lsrs	r5, r5, #24
 802824e:	9515      	str	r5, [sp, #84]	; 0x54
 8028250:	b178      	cbz	r0, 8028272 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8028252:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8028256:	3901      	subs	r1, #1
 8028258:	0089      	lsls	r1, r1, #2
 802825a:	3104      	adds	r1, #4
 802825c:	eb07 0e01 	add.w	lr, r7, r1
 8028260:	5879      	ldr	r1, [r7, r1]
 8028262:	9109      	str	r1, [sp, #36]	; 0x24
 8028264:	0e09      	lsrs	r1, r1, #24
 8028266:	9112      	str	r1, [sp, #72]	; 0x48
 8028268:	f8de 1004 	ldr.w	r1, [lr, #4]
 802826c:	910f      	str	r1, [sp, #60]	; 0x3c
 802826e:	0e09      	lsrs	r1, r1, #24
 8028270:	9116      	str	r1, [sp, #88]	; 0x58
 8028272:	b292      	uxth	r2, r2
 8028274:	9915      	ldr	r1, [sp, #84]	; 0x54
 8028276:	b280      	uxth	r0, r0
 8028278:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802827a:	fb02 f800 	mul.w	r8, r2, r0
 802827e:	0112      	lsls	r2, r2, #4
 8028280:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8028284:	eba2 0e08 	sub.w	lr, r2, r8
 8028288:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802828c:	b280      	uxth	r0, r0
 802828e:	fa1f fe8e 	uxth.w	lr, lr
 8028292:	1a12      	subs	r2, r2, r0
 8028294:	fb0e f101 	mul.w	r1, lr, r1
 8028298:	b292      	uxth	r2, r2
 802829a:	fb02 110c 	mla	r1, r2, ip, r1
 802829e:	fb00 1105 	mla	r1, r0, r5, r1
 80282a2:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80282a4:	fb08 1105 	mla	r1, r8, r5, r1
 80282a8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80282ac:	2900      	cmp	r1, #0
 80282ae:	f000 80f5 	beq.w	802849c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 80282b2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80282b6:	d019      	beq.n	80282ec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x580>
 80282b8:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80282bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80282c0:	fb0c fa0a 	mul.w	sl, ip, sl
 80282c4:	fb0c fc03 	mul.w	ip, ip, r3
 80282c8:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80282cc:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80282d0:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80282d4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80282d8:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80282dc:	4453      	add	r3, sl
 80282de:	0a3f      	lsrs	r7, r7, #8
 80282e0:	0a1b      	lsrs	r3, r3, #8
 80282e2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80282e6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80282ea:	433b      	orrs	r3, r7
 80282ec:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80282ee:	2dff      	cmp	r5, #255	; 0xff
 80282f0:	d020      	beq.n	8028334 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c8>
 80282f2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80282f4:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80282f8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80282fa:	436f      	muls	r7, r5
 80282fc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80282fe:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028302:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028306:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8028308:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802830c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028310:	fb05 fa0a 	mul.w	sl, r5, sl
 8028314:	44bc      	add	ip, r7
 8028316:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802831a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802831e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028322:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028326:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802832a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802832e:	ea4c 050a 	orr.w	r5, ip, sl
 8028332:	950e      	str	r5, [sp, #56]	; 0x38
 8028334:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028336:	2dff      	cmp	r5, #255	; 0xff
 8028338:	d020      	beq.n	802837c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x610>
 802833a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802833c:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8028340:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028342:	436f      	muls	r7, r5
 8028344:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8028346:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802834a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802834e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028350:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8028354:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028358:	fb05 fa0a 	mul.w	sl, r5, sl
 802835c:	44bc      	add	ip, r7
 802835e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8028362:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028366:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802836a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802836e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028372:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028376:	ea4c 050a 	orr.w	r5, ip, sl
 802837a:	9509      	str	r5, [sp, #36]	; 0x24
 802837c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802837e:	2dff      	cmp	r5, #255	; 0xff
 8028380:	d020      	beq.n	80283c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x658>
 8028382:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8028384:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8028388:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802838a:	436f      	muls	r7, r5
 802838c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802838e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028392:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028396:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8028398:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802839c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80283a0:	fb05 fa0a 	mul.w	sl, r5, sl
 80283a4:	44bc      	add	ip, r7
 80283a6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80283aa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80283ae:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80283b2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80283b6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80283ba:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80283be:	ea4c 050a 	orr.w	r5, ip, sl
 80283c2:	950f      	str	r5, [sp, #60]	; 0x3c
 80283c4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80283c6:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80283ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80283ce:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80283d2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80283d4:	fb0e f707 	mul.w	r7, lr, r7
 80283d8:	fb02 770c 	mla	r7, r2, ip, r7
 80283dc:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80283e0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80283e2:	fb00 770c 	mla	r7, r0, ip, r7
 80283e6:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80283ea:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80283ec:	fb08 770c 	mla	r7, r8, ip, r7
 80283f0:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 80283f4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80283f6:	fb0e fe0c 	mul.w	lr, lr, ip
 80283fa:	0a3f      	lsrs	r7, r7, #8
 80283fc:	fb02 e303 	mla	r3, r2, r3, lr
 8028400:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028402:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8028406:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 802840a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802840c:	fb00 330a 	mla	r3, r0, sl, r3
 8028410:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8028414:	f8b9 0000 	ldrh.w	r0, [r9]
 8028418:	fb08 3c0c 	mla	ip, r8, ip, r3
 802841c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802841e:	1202      	asrs	r2, r0, #8
 8028420:	4359      	muls	r1, r3
 8028422:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028426:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802842a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802842e:	1c4b      	adds	r3, r1, #1
 8028430:	ea47 070c 	orr.w	r7, r7, ip
 8028434:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8028438:	0c3b      	lsrs	r3, r7, #16
 802843a:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802843e:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8028442:	b2ff      	uxtb	r7, r7
 8028444:	fb13 f305 	smulbb	r3, r3, r5
 8028448:	b2c9      	uxtb	r1, r1
 802844a:	fb17 f705 	smulbb	r7, r7, r5
 802844e:	fb02 3201 	mla	r2, r2, r1, r3
 8028452:	10c3      	asrs	r3, r0, #3
 8028454:	fb1c fc05 	smulbb	ip, ip, r5
 8028458:	00c0      	lsls	r0, r0, #3
 802845a:	b292      	uxth	r2, r2
 802845c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8028460:	b2c0      	uxtb	r0, r0
 8028462:	fb03 c301 	mla	r3, r3, r1, ip
 8028466:	fb00 7001 	mla	r0, r0, r1, r7
 802846a:	1c51      	adds	r1, r2, #1
 802846c:	b29b      	uxth	r3, r3
 802846e:	b280      	uxth	r0, r0
 8028470:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8028474:	f100 0c01 	add.w	ip, r0, #1
 8028478:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 802847c:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 8028480:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8028484:	ea4c 0202 	orr.w	r2, ip, r2
 8028488:	f103 0c01 	add.w	ip, r3, #1
 802848c:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8028490:	095b      	lsrs	r3, r3, #5
 8028492:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028496:	431a      	orrs	r2, r3
 8028498:	f8a9 2000 	strh.w	r2, [r9]
 802849c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 802849e:	f109 0902 	add.w	r9, r9, #2
 80284a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80284a6:	441c      	add	r4, r3
 80284a8:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80284aa:	441e      	add	r6, r3
 80284ac:	e647      	b.n	802813e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d2>
 80284ae:	2800      	cmp	r0, #0
 80284b0:	f43f aedf 	beq.w	8028272 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 80284b4:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80284b8:	9109      	str	r1, [sp, #36]	; 0x24
 80284ba:	0e09      	lsrs	r1, r1, #24
 80284bc:	9112      	str	r1, [sp, #72]	; 0x48
 80284be:	e6d8      	b.n	8028272 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 80284c0:	b01d      	add	sp, #116	; 0x74
 80284c2:	ecbd 8b08 	vpop	{d8-d11}
 80284c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080284cc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 80284cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80284d0:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 80284d4:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 80284d8:	fb04 5603 	mla	r6, r4, r3, r5
 80284dc:	2c00      	cmp	r4, #0
 80284de:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80284e2:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 80284e6:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 80284ea:	db37      	blt.n	802855c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x90>
 80284ec:	45a6      	cmp	lr, r4
 80284ee:	dd35      	ble.n	802855c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x90>
 80284f0:	2d00      	cmp	r5, #0
 80284f2:	db31      	blt.n	8028558 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 80284f4:	42ab      	cmp	r3, r5
 80284f6:	dd2f      	ble.n	8028558 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 80284f8:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 80284fc:	1c6e      	adds	r6, r5, #1
 80284fe:	d430      	bmi.n	8028562 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x96>
 8028500:	42b3      	cmp	r3, r6
 8028502:	dd2e      	ble.n	8028562 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x96>
 8028504:	b378      	cbz	r0, 8028566 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9a>
 8028506:	f8dc 6004 	ldr.w	r6, [ip, #4]
 802850a:	3401      	adds	r4, #1
 802850c:	d42f      	bmi.n	802856e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa2>
 802850e:	45a6      	cmp	lr, r4
 8028510:	dd2d      	ble.n	802856e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa2>
 8028512:	b37f      	cbz	r7, 8028574 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa8>
 8028514:	2d00      	cmp	r5, #0
 8028516:	eb0c 0e83 	add.w	lr, ip, r3, lsl #2
 802851a:	db26      	blt.n	802856a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9e>
 802851c:	42ab      	cmp	r3, r5
 802851e:	dd24      	ble.n	802856a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9e>
 8028520:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8028524:	3501      	adds	r5, #1
 8028526:	d428      	bmi.n	802857a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 8028528:	42ab      	cmp	r3, r5
 802852a:	dd26      	ble.n	802857a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 802852c:	b338      	cbz	r0, 802857e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb2>
 802852e:	f8de 3004 	ldr.w	r3, [lr, #4]
 8028532:	280f      	cmp	r0, #15
 8028534:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8028538:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802853c:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8028540:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8028544:	d801      	bhi.n	802854a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x7e>
 8028546:	2f0f      	cmp	r7, #15
 8028548:	d91b      	bls.n	8028582 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb6>
 802854a:	4b87      	ldr	r3, [pc, #540]	; (8028768 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x29c>)
 802854c:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8028550:	4a86      	ldr	r2, [pc, #536]	; (802876c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a0>)
 8028552:	4887      	ldr	r0, [pc, #540]	; (8028770 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a4>)
 8028554:	f001 fd46 	bl	8029fe4 <__assert_func>
 8028558:	2200      	movs	r2, #0
 802855a:	e7cf      	b.n	80284fc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x30>
 802855c:	2600      	movs	r6, #0
 802855e:	4632      	mov	r2, r6
 8028560:	e7d3      	b.n	802850a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 8028562:	2600      	movs	r6, #0
 8028564:	e7d1      	b.n	802850a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 8028566:	4606      	mov	r6, r0
 8028568:	e7cf      	b.n	802850a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 802856a:	2400      	movs	r4, #0
 802856c:	e7da      	b.n	8028524 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x58>
 802856e:	2300      	movs	r3, #0
 8028570:	461c      	mov	r4, r3
 8028572:	e7de      	b.n	8028532 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 8028574:	463b      	mov	r3, r7
 8028576:	463c      	mov	r4, r7
 8028578:	e7db      	b.n	8028532 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 802857a:	2300      	movs	r3, #0
 802857c:	e7d9      	b.n	8028532 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 802857e:	4603      	mov	r3, r0
 8028580:	e7d7      	b.n	8028532 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 8028582:	b280      	uxth	r0, r0
 8028584:	b2bf      	uxth	r7, r7
 8028586:	fb07 fe00 	mul.w	lr, r7, r0
 802858a:	0100      	lsls	r0, r0, #4
 802858c:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8028590:	eba0 0c0e 	sub.w	ip, r0, lr
 8028594:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8028598:	b2bf      	uxth	r7, r7
 802859a:	fa1f fc8c 	uxth.w	ip, ip
 802859e:	1bed      	subs	r5, r5, r7
 80285a0:	fb0c f00a 	mul.w	r0, ip, sl
 80285a4:	b2ad      	uxth	r5, r5
 80285a6:	fb0b 0005 	mla	r0, fp, r5, r0
 80285aa:	fb07 0009 	mla	r0, r7, r9, r0
 80285ae:	fb0e 0008 	mla	r0, lr, r8, r0
 80285b2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80285b6:	9001      	str	r0, [sp, #4]
 80285b8:	2800      	cmp	r0, #0
 80285ba:	f000 80d1 	beq.w	8028760 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x294>
 80285be:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80285c2:	d018      	beq.n	80285f6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x12a>
 80285c4:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80285c8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80285cc:	fb0b f000 	mul.w	r0, fp, r0
 80285d0:	fb0b fb02 	mul.w	fp, fp, r2
 80285d4:	0a02      	lsrs	r2, r0, #8
 80285d6:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80285da:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80285de:	4402      	add	r2, r0
 80285e0:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 80285e4:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80285e8:	0a12      	lsrs	r2, r2, #8
 80285ea:	0a00      	lsrs	r0, r0, #8
 80285ec:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80285f0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80285f4:	4302      	orrs	r2, r0
 80285f6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80285fa:	d01a      	beq.n	8028632 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x166>
 80285fc:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8028600:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8028604:	fb0a f000 	mul.w	r0, sl, r0
 8028608:	fb0a fa06 	mul.w	sl, sl, r6
 802860c:	0a06      	lsrs	r6, r0, #8
 802860e:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8028612:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8028616:	4406      	add	r6, r0
 8028618:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 802861c:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8028620:	0a36      	lsrs	r6, r6, #8
 8028622:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028626:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802862a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802862e:	ea46 060a 	orr.w	r6, r6, sl
 8028632:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8028636:	d01b      	beq.n	8028670 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1a4>
 8028638:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 802863c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8028640:	fb09 fa0a 	mul.w	sl, r9, sl
 8028644:	fb09 f004 	mul.w	r0, r9, r4
 8028648:	ea4f 241a 	mov.w	r4, sl, lsr #8
 802864c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8028650:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8028654:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8028658:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 802865c:	4454      	add	r4, sl
 802865e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028662:	0a24      	lsrs	r4, r4, #8
 8028664:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8028668:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802866c:	ea44 0409 	orr.w	r4, r4, r9
 8028670:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8028674:	d01b      	beq.n	80286ae <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1e2>
 8028676:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 802867a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802867e:	fb08 f909 	mul.w	r9, r8, r9
 8028682:	fb08 f003 	mul.w	r0, r8, r3
 8028686:	ea4f 2319 	mov.w	r3, r9, lsr #8
 802868a:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 802868e:	f500 7880 	add.w	r8, r0, #256	; 0x100
 8028692:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028696:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 802869a:	444b      	add	r3, r9
 802869c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80286a0:	0a1b      	lsrs	r3, r3, #8
 80286a2:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80286a6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80286aa:	ea43 0308 	orr.w	r3, r3, r8
 80286ae:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 80286b2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80286b6:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 80286ba:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80286be:	fb0c f808 	mul.w	r8, ip, r8
 80286c2:	8808      	ldrh	r0, [r1, #0]
 80286c4:	fb0c f606 	mul.w	r6, ip, r6
 80286c8:	fb05 8909 	mla	r9, r5, r9, r8
 80286cc:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 80286d0:	fb05 6502 	mla	r5, r5, r2, r6
 80286d4:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80286d8:	fb07 9908 	mla	r9, r7, r8, r9
 80286dc:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 80286e0:	fb07 5704 	mla	r7, r7, r4, r5
 80286e4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80286e8:	fb0e 9808 	mla	r8, lr, r8, r9
 80286ec:	10c4      	asrs	r4, r0, #3
 80286ee:	fb0e 7e03 	mla	lr, lr, r3, r7
 80286f2:	9b01      	ldr	r3, [sp, #4]
 80286f4:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80286f8:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 80286fc:	43da      	mvns	r2, r3
 80286fe:	1203      	asrs	r3, r0, #8
 8028700:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028704:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8028708:	b2d2      	uxtb	r2, r2
 802870a:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 802870e:	00c0      	lsls	r0, r0, #3
 8028710:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8028714:	4353      	muls	r3, r2
 8028716:	b2c0      	uxtb	r0, r0
 8028718:	ea48 0e0e 	orr.w	lr, r8, lr
 802871c:	4354      	muls	r4, r2
 802871e:	4350      	muls	r0, r2
 8028720:	1c5a      	adds	r2, r3, #1
 8028722:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8028726:	ea4f 431e 	mov.w	r3, lr, lsr #16
 802872a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802872e:	1c62      	adds	r2, r4, #1
 8028730:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8028734:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8028738:	021b      	lsls	r3, r3, #8
 802873a:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802873e:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8028742:	00d2      	lsls	r2, r2, #3
 8028744:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028748:	4313      	orrs	r3, r2
 802874a:	1c42      	adds	r2, r0, #1
 802874c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8028750:	eb0e 2e10 	add.w	lr, lr, r0, lsr #8
 8028754:	f3ce 0ec4 	ubfx	lr, lr, #3, #5
 8028758:	ea4e 0e03 	orr.w	lr, lr, r3
 802875c:	f8a1 e000 	strh.w	lr, [r1]
 8028760:	b003      	add	sp, #12
 8028762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028766:	bf00      	nop
 8028768:	0802f359 	.word	0x0802f359
 802876c:	0802f926 	.word	0x0802f926
 8028770:	0802f3dd 	.word	0x0802f3dd

08028774 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028778:	ed2d 8b08 	vpush	{d8-d11}
 802877c:	b09b      	sub	sp, #108	; 0x6c
 802877e:	eeb0 aa40 	vmov.f32	s20, s0
 8028782:	eef0 9a60 	vmov.f32	s19, s1
 8028786:	9218      	str	r2, [sp, #96]	; 0x60
 8028788:	eeb0 9a41 	vmov.f32	s18, s2
 802878c:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 802878e:	eeb0 8a62 	vmov.f32	s16, s5
 8028792:	9019      	str	r0, [sp, #100]	; 0x64
 8028794:	eef0 8a43 	vmov.f32	s17, s6
 8028798:	6850      	ldr	r0, [r2, #4]
 802879a:	eef0 ba44 	vmov.f32	s23, s8
 802879e:	9116      	str	r1, [sp, #88]	; 0x58
 80287a0:	eeb0 ba64 	vmov.f32	s22, s9
 80287a4:	9307      	str	r3, [sp, #28]
 80287a6:	eef0 aa45 	vmov.f32	s21, s10
 80287aa:	6812      	ldr	r2, [r2, #0]
 80287ac:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 80287b0:	e9dd 462d 	ldrd	r4, r6, [sp, #180]	; 0xb4
 80287b4:	fb00 1303 	mla	r3, r0, r3, r1
 80287b8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80287bc:	930a      	str	r3, [sp, #40]	; 0x28
 80287be:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80287c0:	681b      	ldr	r3, [r3, #0]
 80287c2:	930f      	str	r3, [sp, #60]	; 0x3c
 80287c4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80287c6:	2b00      	cmp	r3, #0
 80287c8:	dc03      	bgt.n	80287d2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80287ca:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80287cc:	2b00      	cmp	r3, #0
 80287ce:	f340 8387 	ble.w	8028ee0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76c>
 80287d2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80287d4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80287d8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80287dc:	1e48      	subs	r0, r1, #1
 80287de:	1e57      	subs	r7, r2, #1
 80287e0:	9b07      	ldr	r3, [sp, #28]
 80287e2:	2b00      	cmp	r3, #0
 80287e4:	f340 8166 	ble.w	8028ab4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 80287e8:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80287ec:	ea4f 4326 	mov.w	r3, r6, asr #16
 80287f0:	d406      	bmi.n	8028800 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80287f2:	4584      	cmp	ip, r0
 80287f4:	da04      	bge.n	8028800 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80287f6:	2b00      	cmp	r3, #0
 80287f8:	db02      	blt.n	8028800 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80287fa:	42bb      	cmp	r3, r7
 80287fc:	f2c0 815b 	blt.w	8028ab6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8028800:	f11c 0c01 	adds.w	ip, ip, #1
 8028804:	f100 814b 	bmi.w	8028a9e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8028808:	4561      	cmp	r1, ip
 802880a:	f2c0 8148 	blt.w	8028a9e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 802880e:	3301      	adds	r3, #1
 8028810:	f100 8145 	bmi.w	8028a9e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8028814:	429a      	cmp	r2, r3
 8028816:	f2c0 8142 	blt.w	8028a9e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 802881a:	9b07      	ldr	r3, [sp, #28]
 802881c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802881e:	9317      	str	r3, [sp, #92]	; 0x5c
 8028820:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8028822:	2b00      	cmp	r3, #0
 8028824:	f340 8165 	ble.w	8028af2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8028828:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 802882a:	ea4f 4c26 	mov.w	ip, r6, asr #16
 802882e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8028830:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8028834:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8028838:	1422      	asrs	r2, r4, #16
 802883a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802883e:	689b      	ldr	r3, [r3, #8]
 8028840:	f100 81d5 	bmi.w	8028bee <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 8028844:	f103 38ff 	add.w	r8, r3, #4294967295
 8028848:	4542      	cmp	r2, r8
 802884a:	f280 81d0 	bge.w	8028bee <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 802884e:	f1bc 0f00 	cmp.w	ip, #0
 8028852:	f2c0 81cc 	blt.w	8028bee <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 8028856:	f10e 38ff 	add.w	r8, lr, #4294967295
 802885a:	45c4      	cmp	ip, r8
 802885c:	f280 81c7 	bge.w	8028bee <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 8028860:	b21b      	sxth	r3, r3
 8028862:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8028864:	fb0c 2203 	mla	r2, ip, r3, r2
 8028868:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 802886c:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8028870:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8028874:	2900      	cmp	r1, #0
 8028876:	f000 8182 	beq.w	8028b7e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 802887a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802887e:	950b      	str	r5, [sp, #44]	; 0x2c
 8028880:	0e2d      	lsrs	r5, r5, #24
 8028882:	9512      	str	r5, [sp, #72]	; 0x48
 8028884:	b180      	cbz	r0, 80288a8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8028886:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802888a:	3b01      	subs	r3, #1
 802888c:	009b      	lsls	r3, r3, #2
 802888e:	3304      	adds	r3, #4
 8028890:	eb08 0c03 	add.w	ip, r8, r3
 8028894:	f858 3003 	ldr.w	r3, [r8, r3]
 8028898:	9308      	str	r3, [sp, #32]
 802889a:	0e1b      	lsrs	r3, r3, #24
 802889c:	9310      	str	r3, [sp, #64]	; 0x40
 802889e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80288a2:	930c      	str	r3, [sp, #48]	; 0x30
 80288a4:	0e1b      	lsrs	r3, r3, #24
 80288a6:	9313      	str	r3, [sp, #76]	; 0x4c
 80288a8:	b289      	uxth	r1, r1
 80288aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80288ac:	b280      	uxth	r0, r0
 80288ae:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80288b0:	fb01 f900 	mul.w	r9, r1, r0
 80288b4:	0109      	lsls	r1, r1, #4
 80288b6:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80288ba:	eba1 0809 	sub.w	r8, r1, r9
 80288be:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 80288c2:	b280      	uxth	r0, r0
 80288c4:	fa1f f888 	uxth.w	r8, r8
 80288c8:	1a09      	subs	r1, r1, r0
 80288ca:	fb08 f303 	mul.w	r3, r8, r3
 80288ce:	b289      	uxth	r1, r1
 80288d0:	fb01 330e 	mla	r3, r1, lr, r3
 80288d4:	fb00 3305 	mla	r3, r0, r5, r3
 80288d8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80288da:	fb09 3305 	mla	r3, r9, r5, r3
 80288de:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80288e2:	2b00      	cmp	r3, #0
 80288e4:	f000 80d2 	beq.w	8028a8c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 80288e8:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80288ec:	d01b      	beq.n	8028926 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 80288ee:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 80288f2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80288f6:	fb0e fa0a 	mul.w	sl, lr, sl
 80288fa:	fb0e fe02 	mul.w	lr, lr, r2
 80288fe:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8028902:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8028906:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802890a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802890e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8028912:	4452      	add	r2, sl
 8028914:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028918:	0a12      	lsrs	r2, r2, #8
 802891a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802891e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8028922:	ea42 020c 	orr.w	r2, r2, ip
 8028926:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028928:	2dff      	cmp	r5, #255	; 0xff
 802892a:	d021      	beq.n	8028970 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 802892c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802892e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8028932:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028934:	fb05 fb0b 	mul.w	fp, r5, fp
 8028938:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802893a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802893e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028940:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028944:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8028948:	fb05 fa0a 	mul.w	sl, r5, sl
 802894c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028950:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8028954:	44de      	add	lr, fp
 8028956:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802895a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802895e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028962:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028966:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802896a:	ea4e 050a 	orr.w	r5, lr, sl
 802896e:	950b      	str	r5, [sp, #44]	; 0x2c
 8028970:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8028972:	2dff      	cmp	r5, #255	; 0xff
 8028974:	d021      	beq.n	80289ba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8028976:	9d08      	ldr	r5, [sp, #32]
 8028978:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802897c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802897e:	fb05 fb0b 	mul.w	fp, r5, fp
 8028982:	9d08      	ldr	r5, [sp, #32]
 8028984:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8028988:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802898a:	fb05 fa0e 	mul.w	sl, r5, lr
 802898e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028992:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8028996:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802899a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802899e:	44de      	add	lr, fp
 80289a0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80289a4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80289a8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80289ac:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80289b0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80289b4:	ea4e 050a 	orr.w	r5, lr, sl
 80289b8:	9508      	str	r5, [sp, #32]
 80289ba:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80289bc:	2dff      	cmp	r5, #255	; 0xff
 80289be:	d021      	beq.n	8028a04 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 80289c0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80289c2:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80289c6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80289c8:	fb05 fb0b 	mul.w	fp, r5, fp
 80289cc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80289ce:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80289d2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80289d4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80289d8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80289dc:	fb05 fa0a 	mul.w	sl, r5, sl
 80289e0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80289e4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80289e8:	44de      	add	lr, fp
 80289ea:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80289ee:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80289f2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80289f6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80289fa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80289fe:	ea4e 050a 	orr.w	r5, lr, sl
 8028a02:	950c      	str	r5, [sp, #48]	; 0x30
 8028a04:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8028a06:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8028a0a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028a0e:	2bff      	cmp	r3, #255	; 0xff
 8028a10:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8028a14:	9d08      	ldr	r5, [sp, #32]
 8028a16:	fb08 fc0c 	mul.w	ip, r8, ip
 8028a1a:	fb01 cc0e 	mla	ip, r1, lr, ip
 8028a1e:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8028a22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8028a24:	fb00 cc0e 	mla	ip, r0, lr, ip
 8028a28:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8028a2c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8028a2e:	fb09 cc0e 	mla	ip, r9, lr, ip
 8028a32:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8028a36:	fb08 f80e 	mul.w	r8, r8, lr
 8028a3a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028a3e:	fb01 8202 	mla	r2, r1, r2, r8
 8028a42:	9908      	ldr	r1, [sp, #32]
 8028a44:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028a48:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8028a4c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8028a4e:	fb00 220a 	mla	r2, r0, sl, r2
 8028a52:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8028a56:	fb09 2900 	mla	r9, r9, r0, r2
 8028a5a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028a5e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8028a62:	ea4c 0c09 	orr.w	ip, ip, r9
 8028a66:	ea4f 221c 	mov.w	r2, ip, lsr #8
 8028a6a:	f040 8091 	bne.w	8028b90 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 8028a6e:	ea4f 135c 	mov.w	r3, ip, lsr #5
 8028a72:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8028a76:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028a7a:	f022 0207 	bic.w	r2, r2, #7
 8028a7e:	431a      	orrs	r2, r3
 8028a80:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8028a84:	ea4c 0c02 	orr.w	ip, ip, r2
 8028a88:	f8a7 c000 	strh.w	ip, [r7]
 8028a8c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8028a8e:	3702      	adds	r7, #2
 8028a90:	441c      	add	r4, r3
 8028a92:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8028a94:	441e      	add	r6, r3
 8028a96:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8028a98:	3b01      	subs	r3, #1
 8028a9a:	9317      	str	r3, [sp, #92]	; 0x5c
 8028a9c:	e6c0      	b.n	8028820 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8028a9e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8028aa0:	441c      	add	r4, r3
 8028aa2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8028aa4:	441e      	add	r6, r3
 8028aa6:	9b07      	ldr	r3, [sp, #28]
 8028aa8:	3b01      	subs	r3, #1
 8028aaa:	9307      	str	r3, [sp, #28]
 8028aac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028aae:	3302      	adds	r3, #2
 8028ab0:	930a      	str	r3, [sp, #40]	; 0x28
 8028ab2:	e695      	b.n	80287e0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8028ab4:	d024      	beq.n	8028b00 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 8028ab6:	9b07      	ldr	r3, [sp, #28]
 8028ab8:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8028aba:	3b01      	subs	r3, #1
 8028abc:	fb00 4003 	mla	r0, r0, r3, r4
 8028ac0:	1400      	asrs	r0, r0, #16
 8028ac2:	f53f aeaa 	bmi.w	802881a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8028ac6:	3901      	subs	r1, #1
 8028ac8:	4288      	cmp	r0, r1
 8028aca:	f6bf aea6 	bge.w	802881a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8028ace:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8028ad0:	fb01 6303 	mla	r3, r1, r3, r6
 8028ad4:	141b      	asrs	r3, r3, #16
 8028ad6:	f53f aea0 	bmi.w	802881a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8028ada:	3a01      	subs	r2, #1
 8028adc:	4293      	cmp	r3, r2
 8028ade:	f6bf ae9c 	bge.w	802881a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8028ae2:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8028ae6:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8028aea:	f1bb 0f00 	cmp.w	fp, #0
 8028aee:	f300 809a 	bgt.w	8028c26 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b2>
 8028af2:	9b07      	ldr	r3, [sp, #28]
 8028af4:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8028af8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028afa:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8028afe:	930a      	str	r3, [sp, #40]	; 0x28
 8028b00:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8028b02:	2b00      	cmp	r3, #0
 8028b04:	f340 81ec 	ble.w	8028ee0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76c>
 8028b08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028b0c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028b0e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8028b12:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8028b16:	eef0 6a48 	vmov.f32	s13, s16
 8028b1a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8028b1e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8028b22:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028b26:	ee16 4a90 	vmov	r4, s13
 8028b2a:	eef0 6a68 	vmov.f32	s13, s17
 8028b2e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028b32:	ee16 6a90 	vmov	r6, s13
 8028b36:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8028b3a:	ee69 7a27 	vmul.f32	s15, s18, s15
 8028b3e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8028b42:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8028b46:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8028b4a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8028b4e:	ee18 2a10 	vmov	r2, s16
 8028b52:	eeb0 8a47 	vmov.f32	s16, s14
 8028b56:	fb92 f3f3 	sdiv	r3, r2, r3
 8028b5a:	ee18 2a90 	vmov	r2, s17
 8028b5e:	932f      	str	r3, [sp, #188]	; 0xbc
 8028b60:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028b62:	eef0 8a67 	vmov.f32	s17, s15
 8028b66:	fb92 f3f3 	sdiv	r3, r2, r3
 8028b6a:	9330      	str	r3, [sp, #192]	; 0xc0
 8028b6c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8028b6e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8028b70:	3b01      	subs	r3, #1
 8028b72:	9316      	str	r3, [sp, #88]	; 0x58
 8028b74:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028b76:	bf08      	it	eq
 8028b78:	4613      	moveq	r3, r2
 8028b7a:	9307      	str	r3, [sp, #28]
 8028b7c:	e622      	b.n	80287c4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8028b7e:	2800      	cmp	r0, #0
 8028b80:	f43f ae92 	beq.w	80288a8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8028b84:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8028b88:	9308      	str	r3, [sp, #32]
 8028b8a:	0e1b      	lsrs	r3, r3, #24
 8028b8c:	9310      	str	r3, [sp, #64]	; 0x40
 8028b8e:	e68b      	b.n	80288a8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8028b90:	8839      	ldrh	r1, [r7, #0]
 8028b92:	43db      	mvns	r3, r3
 8028b94:	4dd5      	ldr	r5, [pc, #852]	; (8028eec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x778>)
 8028b96:	ea4f 2e21 	mov.w	lr, r1, asr #8
 8028b9a:	fa5f f883 	uxtb.w	r8, r3
 8028b9e:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8028ba2:	10c8      	asrs	r0, r1, #3
 8028ba4:	00cb      	lsls	r3, r1, #3
 8028ba6:	fb0e fe08 	mul.w	lr, lr, r8
 8028baa:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8028bae:	b2db      	uxtb	r3, r3
 8028bb0:	f10e 0101 	add.w	r1, lr, #1
 8028bb4:	fb00 f008 	mul.w	r0, r0, r8
 8028bb8:	fb03 f308 	mul.w	r3, r3, r8
 8028bbc:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 8028bc0:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8028bc4:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 8028bc8:	f100 0e01 	add.w	lr, r0, #1
 8028bcc:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 8028bd0:	b2c9      	uxtb	r1, r1
 8028bd2:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8028bd6:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 8028bda:	00d2      	lsls	r2, r2, #3
 8028bdc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028be0:	430a      	orrs	r2, r1
 8028be2:	1c59      	adds	r1, r3, #1
 8028be4:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8028be8:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8028bec:	e748      	b.n	8028a80 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8028bee:	f112 0801 	adds.w	r8, r2, #1
 8028bf2:	f53f af4b 	bmi.w	8028a8c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8028bf6:	4543      	cmp	r3, r8
 8028bf8:	f6ff af48 	blt.w	8028a8c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8028bfc:	f11c 0801 	adds.w	r8, ip, #1
 8028c00:	f53f af44 	bmi.w	8028a8c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8028c04:	45c6      	cmp	lr, r8
 8028c06:	f6ff af41 	blt.w	8028a8c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8028c0a:	b21b      	sxth	r3, r3
 8028c0c:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8028c10:	fa0f f28e 	sxth.w	r2, lr
 8028c14:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8028c18:	9200      	str	r2, [sp, #0]
 8028c1a:	4639      	mov	r1, r7
 8028c1c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8028c1e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8028c20:	f7ff fc54 	bl	80284cc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8028c24:	e732      	b.n	8028a8c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8028c26:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8028c28:	1421      	asrs	r1, r4, #16
 8028c2a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8028c2c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8028c30:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 8028c34:	1433      	asrs	r3, r6, #16
 8028c36:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8028c3a:	fb07 1303 	mla	r3, r7, r3, r1
 8028c3e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8028c40:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8028c44:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8028c48:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8028c4c:	2a00      	cmp	r2, #0
 8028c4e:	f000 8108 	beq.w	8028e62 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 8028c52:	684d      	ldr	r5, [r1, #4]
 8028c54:	950d      	str	r5, [sp, #52]	; 0x34
 8028c56:	0e2d      	lsrs	r5, r5, #24
 8028c58:	9514      	str	r5, [sp, #80]	; 0x50
 8028c5a:	b178      	cbz	r0, 8028c7c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 8028c5c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8028c60:	3f01      	subs	r7, #1
 8028c62:	00bf      	lsls	r7, r7, #2
 8028c64:	3704      	adds	r7, #4
 8028c66:	eb01 0e07 	add.w	lr, r1, r7
 8028c6a:	59c9      	ldr	r1, [r1, r7]
 8028c6c:	9109      	str	r1, [sp, #36]	; 0x24
 8028c6e:	0e09      	lsrs	r1, r1, #24
 8028c70:	9111      	str	r1, [sp, #68]	; 0x44
 8028c72:	f8de 1004 	ldr.w	r1, [lr, #4]
 8028c76:	910e      	str	r1, [sp, #56]	; 0x38
 8028c78:	0e09      	lsrs	r1, r1, #24
 8028c7a:	9115      	str	r1, [sp, #84]	; 0x54
 8028c7c:	b292      	uxth	r2, r2
 8028c7e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8028c80:	b280      	uxth	r0, r0
 8028c82:	fb02 f900 	mul.w	r9, r2, r0
 8028c86:	0112      	lsls	r2, r2, #4
 8028c88:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8028c8c:	eba2 0e09 	sub.w	lr, r2, r9
 8028c90:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8028c94:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8028c96:	b280      	uxth	r0, r0
 8028c98:	fa1f fe8e 	uxth.w	lr, lr
 8028c9c:	1a09      	subs	r1, r1, r0
 8028c9e:	fb0e f202 	mul.w	r2, lr, r2
 8028ca2:	b289      	uxth	r1, r1
 8028ca4:	fb01 220c 	mla	r2, r1, ip, r2
 8028ca8:	fb00 2205 	mla	r2, r0, r5, r2
 8028cac:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8028cae:	fb09 2205 	mla	r2, r9, r5, r2
 8028cb2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8028cb6:	2a00      	cmp	r2, #0
 8028cb8:	f000 80ca 	beq.w	8028e50 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8028cbc:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8028cc0:	d019      	beq.n	8028cf6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x582>
 8028cc2:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8028cc6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028cca:	fb0c fa0a 	mul.w	sl, ip, sl
 8028cce:	fb0c fc03 	mul.w	ip, ip, r3
 8028cd2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8028cd6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8028cda:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8028cde:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028ce2:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8028ce6:	4453      	add	r3, sl
 8028ce8:	0a3f      	lsrs	r7, r7, #8
 8028cea:	0a1b      	lsrs	r3, r3, #8
 8028cec:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8028cf0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028cf4:	433b      	orrs	r3, r7
 8028cf6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8028cf8:	2dff      	cmp	r5, #255	; 0xff
 8028cfa:	d020      	beq.n	8028d3e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ca>
 8028cfc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8028cfe:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8028d02:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8028d04:	436f      	muls	r7, r5
 8028d06:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8028d08:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028d0c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028d10:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8028d12:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8028d16:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028d1a:	fb05 fa0a 	mul.w	sl, r5, sl
 8028d1e:	44bc      	add	ip, r7
 8028d20:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8028d24:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028d28:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028d2c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028d30:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028d34:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028d38:	ea4c 050a 	orr.w	r5, ip, sl
 8028d3c:	950d      	str	r5, [sp, #52]	; 0x34
 8028d3e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8028d40:	2dff      	cmp	r5, #255	; 0xff
 8028d42:	d020      	beq.n	8028d86 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x612>
 8028d44:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8028d46:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8028d4a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8028d4c:	436f      	muls	r7, r5
 8028d4e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8028d50:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8028d54:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8028d56:	fb05 fa0c 	mul.w	sl, r5, ip
 8028d5a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028d5e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8028d62:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028d66:	44bc      	add	ip, r7
 8028d68:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8028d6c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028d70:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028d74:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028d78:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028d7c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028d80:	ea4c 050a 	orr.w	r5, ip, sl
 8028d84:	9509      	str	r5, [sp, #36]	; 0x24
 8028d86:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8028d88:	2dff      	cmp	r5, #255	; 0xff
 8028d8a:	d020      	beq.n	8028dce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x65a>
 8028d8c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028d8e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8028d92:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8028d94:	436f      	muls	r7, r5
 8028d96:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028d98:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028d9c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028da0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8028da2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8028da6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028daa:	fb05 fa0a 	mul.w	sl, r5, sl
 8028dae:	44bc      	add	ip, r7
 8028db0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8028db4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028db8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028dbc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028dc0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028dc4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028dc8:	ea4c 050a 	orr.w	r5, ip, sl
 8028dcc:	950e      	str	r5, [sp, #56]	; 0x38
 8028dce:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8028dd0:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8028dd4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028dd8:	2aff      	cmp	r2, #255	; 0xff
 8028dda:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8028dde:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8028de0:	fb0e f707 	mul.w	r7, lr, r7
 8028de4:	fb01 770c 	mla	r7, r1, ip, r7
 8028de8:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8028dec:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028dee:	fb00 770c 	mla	r7, r0, ip, r7
 8028df2:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8028df6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8028df8:	fb09 770c 	mla	r7, r9, ip, r7
 8028dfc:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8028e00:	fb0e fe0c 	mul.w	lr, lr, ip
 8028e04:	ea4f 2717 	mov.w	r7, r7, lsr #8
 8028e08:	fb01 e303 	mla	r3, r1, r3, lr
 8028e0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8028e0e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8028e12:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8028e16:	990e      	ldr	r1, [sp, #56]	; 0x38
 8028e18:	fb00 330a 	mla	r3, r0, sl, r3
 8028e1c:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8028e20:	fb09 3c0c 	mla	ip, r9, ip, r3
 8028e24:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028e28:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8028e2c:	ea47 070c 	orr.w	r7, r7, ip
 8028e30:	ea4f 2317 	mov.w	r3, r7, lsr #8
 8028e34:	d11e      	bne.n	8028e74 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x700>
 8028e36:	097a      	lsrs	r2, r7, #5
 8028e38:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8028e3c:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8028e40:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028e44:	f023 0307 	bic.w	r3, r3, #7
 8028e48:	4313      	orrs	r3, r2
 8028e4a:	431f      	orrs	r7, r3
 8028e4c:	f8a8 7000 	strh.w	r7, [r8]
 8028e50:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8028e52:	f108 0802 	add.w	r8, r8, #2
 8028e56:	f10b 3bff 	add.w	fp, fp, #4294967295
 8028e5a:	441c      	add	r4, r3
 8028e5c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8028e5e:	441e      	add	r6, r3
 8028e60:	e643      	b.n	8028aea <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 8028e62:	2800      	cmp	r0, #0
 8028e64:	f43f af0a 	beq.w	8028c7c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 8028e68:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8028e6c:	9109      	str	r1, [sp, #36]	; 0x24
 8028e6e:	0e09      	lsrs	r1, r1, #24
 8028e70:	9111      	str	r1, [sp, #68]	; 0x44
 8028e72:	e703      	b.n	8028c7c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 8028e74:	f8b8 1000 	ldrh.w	r1, [r8]
 8028e78:	43d2      	mvns	r2, r2
 8028e7a:	ea4f 2c21 	mov.w	ip, r1, asr #8
 8028e7e:	fa5f fe82 	uxtb.w	lr, r2
 8028e82:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8028e86:	10c8      	asrs	r0, r1, #3
 8028e88:	00ca      	lsls	r2, r1, #3
 8028e8a:	fb0c fc0e 	mul.w	ip, ip, lr
 8028e8e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8028e92:	b2d2      	uxtb	r2, r2
 8028e94:	f10c 0101 	add.w	r1, ip, #1
 8028e98:	fb00 f00e 	mul.w	r0, r0, lr
 8028e9c:	fb02 f20e 	mul.w	r2, r2, lr
 8028ea0:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8028ea4:	0c39      	lsrs	r1, r7, #16
 8028ea6:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8028eaa:	4910      	ldr	r1, [pc, #64]	; (8028eec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x778>)
 8028eac:	fa5f fc8c 	uxtb.w	ip, ip
 8028eb0:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 8028eb4:	1c41      	adds	r1, r0, #1
 8028eb6:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8028eba:	1c51      	adds	r1, r2, #1
 8028ebc:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8028ec0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8028ec4:	00c0      	lsls	r0, r0, #3
 8028ec6:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8028eca:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8028ece:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8028ed2:	ea4c 0c00 	orr.w	ip, ip, r0
 8028ed6:	ea47 0c0c 	orr.w	ip, r7, ip
 8028eda:	f8a8 c000 	strh.w	ip, [r8]
 8028ede:	e7b7      	b.n	8028e50 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8028ee0:	b01b      	add	sp, #108	; 0x6c
 8028ee2:	ecbd 8b08 	vpop	{d8-d11}
 8028ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028eea:	bf00      	nop
 8028eec:	fffff800 	.word	0xfffff800

08028ef0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 8028ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028ef4:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 8028ef8:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8028efc:	2c00      	cmp	r4, #0
 8028efe:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8028f02:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8028f06:	fb04 ce03 	mla	lr, r4, r3, ip
 8028f0a:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 8028f0e:	db60      	blt.n	8028fd2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 8028f10:	45a1      	cmp	r9, r4
 8028f12:	dd5e      	ble.n	8028fd2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 8028f14:	f1bc 0f00 	cmp.w	ip, #0
 8028f18:	db59      	blt.n	8028fce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 8028f1a:	45e0      	cmp	r8, ip
 8028f1c:	dd57      	ble.n	8028fce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 8028f1e:	ea4f 005e 	mov.w	r0, lr, lsr #1
 8028f22:	f01e 0f01 	tst.w	lr, #1
 8028f26:	5c16      	ldrb	r6, [r2, r0]
 8028f28:	bf0c      	ite	eq
 8028f2a:	f006 060f 	andeq.w	r6, r6, #15
 8028f2e:	1136      	asrne	r6, r6, #4
 8028f30:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8028f34:	b2f6      	uxtb	r6, r6
 8028f36:	f11c 0001 	adds.w	r0, ip, #1
 8028f3a:	d44d      	bmi.n	8028fd8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 8028f3c:	4580      	cmp	r8, r0
 8028f3e:	dd4b      	ble.n	8028fd8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 8028f40:	2d00      	cmp	r5, #0
 8028f42:	d04b      	beq.n	8028fdc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xec>
 8028f44:	f10e 0a01 	add.w	sl, lr, #1
 8028f48:	ea4f 005a 	mov.w	r0, sl, lsr #1
 8028f4c:	f01a 0f01 	tst.w	sl, #1
 8028f50:	5c10      	ldrb	r0, [r2, r0]
 8028f52:	bf0c      	ite	eq
 8028f54:	f000 000f 	andeq.w	r0, r0, #15
 8028f58:	1100      	asrne	r0, r0, #4
 8028f5a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8028f5e:	b2c0      	uxtb	r0, r0
 8028f60:	3401      	adds	r4, #1
 8028f62:	d43f      	bmi.n	8028fe4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 8028f64:	45a1      	cmp	r9, r4
 8028f66:	dd3d      	ble.n	8028fe4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 8028f68:	2f00      	cmp	r7, #0
 8028f6a:	f000 80a8 	beq.w	80290be <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ce>
 8028f6e:	f1bc 0f00 	cmp.w	ip, #0
 8028f72:	db35      	blt.n	8028fe0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 8028f74:	45e0      	cmp	r8, ip
 8028f76:	dd33      	ble.n	8028fe0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 8028f78:	eb03 090e 	add.w	r9, r3, lr
 8028f7c:	ea4f 0459 	mov.w	r4, r9, lsr #1
 8028f80:	f019 0f01 	tst.w	r9, #1
 8028f84:	5d14      	ldrb	r4, [r2, r4]
 8028f86:	bf0c      	ite	eq
 8028f88:	f004 040f 	andeq.w	r4, r4, #15
 8028f8c:	1124      	asrne	r4, r4, #4
 8028f8e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8028f92:	b2e4      	uxtb	r4, r4
 8028f94:	f11c 0c01 	adds.w	ip, ip, #1
 8028f98:	d427      	bmi.n	8028fea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 8028f9a:	45e0      	cmp	r8, ip
 8028f9c:	dd25      	ble.n	8028fea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 8028f9e:	b335      	cbz	r5, 8028fee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfe>
 8028fa0:	3301      	adds	r3, #1
 8028fa2:	449e      	add	lr, r3
 8028fa4:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8028fa8:	f01e 0f01 	tst.w	lr, #1
 8028fac:	5cd2      	ldrb	r2, [r2, r3]
 8028fae:	bf0c      	ite	eq
 8028fb0:	f002 020f 	andeq.w	r2, r2, #15
 8028fb4:	1112      	asrne	r2, r2, #4
 8028fb6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8028fba:	b2d3      	uxtb	r3, r2
 8028fbc:	2d0f      	cmp	r5, #15
 8028fbe:	d917      	bls.n	8028ff0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x100>
 8028fc0:	4b42      	ldr	r3, [pc, #264]	; (80290cc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1dc>)
 8028fc2:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8028fc6:	4a42      	ldr	r2, [pc, #264]	; (80290d0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e0>)
 8028fc8:	4842      	ldr	r0, [pc, #264]	; (80290d4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e4>)
 8028fca:	f001 f80b 	bl	8029fe4 <__assert_func>
 8028fce:	2600      	movs	r6, #0
 8028fd0:	e7b1      	b.n	8028f36 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x46>
 8028fd2:	2000      	movs	r0, #0
 8028fd4:	4606      	mov	r6, r0
 8028fd6:	e7c3      	b.n	8028f60 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8028fd8:	2000      	movs	r0, #0
 8028fda:	e7c1      	b.n	8028f60 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8028fdc:	4628      	mov	r0, r5
 8028fde:	e7bf      	b.n	8028f60 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8028fe0:	2400      	movs	r4, #0
 8028fe2:	e7d7      	b.n	8028f94 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa4>
 8028fe4:	2300      	movs	r3, #0
 8028fe6:	461c      	mov	r4, r3
 8028fe8:	e7e8      	b.n	8028fbc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 8028fea:	2300      	movs	r3, #0
 8028fec:	e7e6      	b.n	8028fbc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 8028fee:	462b      	mov	r3, r5
 8028ff0:	2f0f      	cmp	r7, #15
 8028ff2:	d8e5      	bhi.n	8028fc0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 8028ff4:	b2ad      	uxth	r5, r5
 8028ff6:	b2bf      	uxth	r7, r7
 8028ff8:	fb05 fc07 	mul.w	ip, r5, r7
 8028ffc:	012d      	lsls	r5, r5, #4
 8028ffe:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 8029002:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 8029006:	eba5 050c 	sub.w	r5, r5, ip
 802900a:	b2bf      	uxth	r7, r7
 802900c:	b2ad      	uxth	r5, r5
 802900e:	1bd2      	subs	r2, r2, r7
 8029010:	4368      	muls	r0, r5
 8029012:	b292      	uxth	r2, r2
 8029014:	fb06 0002 	mla	r0, r6, r2, r0
 8029018:	fb07 0404 	mla	r4, r7, r4, r0
 802901c:	fb0c 4303 	mla	r3, ip, r3, r4
 8029020:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029024:	b1b3      	cbz	r3, 8029054 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x164>
 8029026:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 802902a:	435a      	muls	r2, r3
 802902c:	1c53      	adds	r3, r2, #1
 802902e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8029032:	4a29      	ldr	r2, [pc, #164]	; (80290d8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e8>)
 8029034:	121b      	asrs	r3, r3, #8
 8029036:	6812      	ldr	r2, [r2, #0]
 8029038:	2bff      	cmp	r3, #255	; 0xff
 802903a:	ea4f 2612 	mov.w	r6, r2, lsr #8
 802903e:	d10b      	bne.n	8029058 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x168>
 8029040:	0950      	lsrs	r0, r2, #5
 8029042:	4b26      	ldr	r3, [pc, #152]	; (80290dc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ec>)
 8029044:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8029048:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802904c:	4033      	ands	r3, r6
 802904e:	4318      	orrs	r0, r3
 8029050:	4302      	orrs	r2, r0
 8029052:	800a      	strh	r2, [r1, #0]
 8029054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029058:	880d      	ldrh	r5, [r1, #0]
 802905a:	b29f      	uxth	r7, r3
 802905c:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8029060:	43db      	mvns	r3, r3
 8029062:	122c      	asrs	r4, r5, #8
 8029064:	fb10 f007 	smulbb	r0, r0, r7
 8029068:	b2db      	uxtb	r3, r3
 802906a:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802906e:	b2f6      	uxtb	r6, r6
 8029070:	b2d2      	uxtb	r2, r2
 8029072:	fb04 0403 	mla	r4, r4, r3, r0
 8029076:	10e8      	asrs	r0, r5, #3
 8029078:	fb12 f207 	smulbb	r2, r2, r7
 802907c:	00ed      	lsls	r5, r5, #3
 802907e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8029082:	b2a4      	uxth	r4, r4
 8029084:	fb16 f607 	smulbb	r6, r6, r7
 8029088:	b2ed      	uxtb	r5, r5
 802908a:	fb00 6603 	mla	r6, r0, r3, r6
 802908e:	fb05 2303 	mla	r3, r5, r3, r2
 8029092:	b2b0      	uxth	r0, r6
 8029094:	b29a      	uxth	r2, r3
 8029096:	1c63      	adds	r3, r4, #1
 8029098:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802909c:	1c53      	adds	r3, r2, #1
 802909e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80290a2:	1c42      	adds	r2, r0, #1
 80290a4:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 80290a8:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80290ac:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80290b0:	0940      	lsrs	r0, r0, #5
 80290b2:	4323      	orrs	r3, r4
 80290b4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80290b8:	4303      	orrs	r3, r0
 80290ba:	800b      	strh	r3, [r1, #0]
 80290bc:	e7ca      	b.n	8029054 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x164>
 80290be:	2d0f      	cmp	r5, #15
 80290c0:	f63f af7e 	bhi.w	8028fc0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 80290c4:	463b      	mov	r3, r7
 80290c6:	463c      	mov	r4, r7
 80290c8:	e794      	b.n	8028ff4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x104>
 80290ca:	bf00      	nop
 80290cc:	0802f359 	.word	0x0802f359
 80290d0:	0802f926 	.word	0x0802f926
 80290d4:	0802f3dd 	.word	0x0802f3dd
 80290d8:	2400b5d8 	.word	0x2400b5d8
 80290dc:	00fff800 	.word	0x00fff800

080290e0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80290e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80290e4:	ed2d 8b08 	vpush	{d8-d11}
 80290e8:	b097      	sub	sp, #92	; 0x5c
 80290ea:	eeb0 aa40 	vmov.f32	s20, s0
 80290ee:	eef0 9a60 	vmov.f32	s19, s1
 80290f2:	9214      	str	r2, [sp, #80]	; 0x50
 80290f4:	eeb0 9a41 	vmov.f32	s18, s2
 80290f8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80290fa:	eeb0 8a62 	vmov.f32	s16, s5
 80290fe:	9309      	str	r3, [sp, #36]	; 0x24
 8029100:	eef0 8a43 	vmov.f32	s17, s6
 8029104:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8029108:	eef0 ba44 	vmov.f32	s23, s8
 802910c:	9015      	str	r0, [sp, #84]	; 0x54
 802910e:	eeb0 ba64 	vmov.f32	s22, s9
 8029112:	6850      	ldr	r0, [r2, #4]
 8029114:	eef0 aa45 	vmov.f32	s21, s10
 8029118:	910d      	str	r1, [sp, #52]	; 0x34
 802911a:	930f      	str	r3, [sp, #60]	; 0x3c
 802911c:	6812      	ldr	r2, [r2, #0]
 802911e:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8029122:	e9dd 4629 	ldrd	r4, r6, [sp, #164]	; 0xa4
 8029126:	fb00 1303 	mla	r3, r0, r3, r1
 802912a:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802912e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8029130:	689b      	ldr	r3, [r3, #8]
 8029132:	3301      	adds	r3, #1
 8029134:	f023 0301 	bic.w	r3, r3, #1
 8029138:	930a      	str	r3, [sp, #40]	; 0x28
 802913a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802913c:	681f      	ldr	r7, [r3, #0]
 802913e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8029140:	2b00      	cmp	r3, #0
 8029142:	dc03      	bgt.n	802914c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8029144:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8029146:	2b00      	cmp	r3, #0
 8029148:	f340 8289 	ble.w	802965e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 802914c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802914e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029152:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8029156:	1e48      	subs	r0, r1, #1
 8029158:	f102 3cff 	add.w	ip, r2, #4294967295
 802915c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802915e:	2b00      	cmp	r3, #0
 8029160:	f340 80c5 	ble.w	80292ee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8029164:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8029168:	ea4f 4326 	mov.w	r3, r6, asr #16
 802916c:	d406      	bmi.n	802917c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802916e:	4586      	cmp	lr, r0
 8029170:	da04      	bge.n	802917c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8029172:	2b00      	cmp	r3, #0
 8029174:	db02      	blt.n	802917c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8029176:	4563      	cmp	r3, ip
 8029178:	f2c0 80ba 	blt.w	80292f0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 802917c:	f11e 0e01 	adds.w	lr, lr, #1
 8029180:	f100 80ab 	bmi.w	80292da <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8029184:	4571      	cmp	r1, lr
 8029186:	f2c0 80a8 	blt.w	80292da <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 802918a:	3301      	adds	r3, #1
 802918c:	f100 80a5 	bmi.w	80292da <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8029190:	429a      	cmp	r2, r3
 8029192:	f2c0 80a2 	blt.w	80292da <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8029196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029198:	46c8      	mov	r8, r9
 802919a:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 802919e:	930e      	str	r3, [sp, #56]	; 0x38
 80291a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80291a2:	2b00      	cmp	r3, #0
 80291a4:	f340 80c4 	ble.w	8029330 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 80291a8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80291aa:	1430      	asrs	r0, r6, #16
 80291ac:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80291b0:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80291b4:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 80291b8:	1423      	asrs	r3, r4, #16
 80291ba:	f100 814f 	bmi.w	802945c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 80291be:	f10c 3bff 	add.w	fp, ip, #4294967295
 80291c2:	455b      	cmp	r3, fp
 80291c4:	f280 814a 	bge.w	802945c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 80291c8:	2800      	cmp	r0, #0
 80291ca:	f2c0 8147 	blt.w	802945c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 80291ce:	f10e 3bff 	add.w	fp, lr, #4294967295
 80291d2:	4558      	cmp	r0, fp
 80291d4:	f280 8142 	bge.w	802945c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 80291d8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80291da:	fb00 3305 	mla	r3, r0, r5, r3
 80291de:	0858      	lsrs	r0, r3, #1
 80291e0:	07dd      	lsls	r5, r3, #31
 80291e2:	f817 c000 	ldrb.w	ip, [r7, r0]
 80291e6:	bf54      	ite	pl
 80291e8:	f00c 0c0f 	andpl.w	ip, ip, #15
 80291ec:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80291f0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80291f4:	fa5f fc8c 	uxtb.w	ip, ip
 80291f8:	2a00      	cmp	r2, #0
 80291fa:	f000 80dd 	beq.w	80293b8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80291fe:	1c58      	adds	r0, r3, #1
 8029200:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8029204:	07c0      	lsls	r0, r0, #31
 8029206:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802920a:	bf54      	ite	pl
 802920c:	f00e 0e0f 	andpl.w	lr, lr, #15
 8029210:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8029214:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8029218:	fa5f f08e 	uxtb.w	r0, lr
 802921c:	9010      	str	r0, [sp, #64]	; 0x40
 802921e:	b1d9      	cbz	r1, 8029258 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x178>
 8029220:	4453      	add	r3, sl
 8029222:	0858      	lsrs	r0, r3, #1
 8029224:	07dd      	lsls	r5, r3, #31
 8029226:	f103 0301 	add.w	r3, r3, #1
 802922a:	5c38      	ldrb	r0, [r7, r0]
 802922c:	bf54      	ite	pl
 802922e:	f000 000f 	andpl.w	r0, r0, #15
 8029232:	1100      	asrmi	r0, r0, #4
 8029234:	07dd      	lsls	r5, r3, #31
 8029236:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802923a:	b2c0      	uxtb	r0, r0
 802923c:	900b      	str	r0, [sp, #44]	; 0x2c
 802923e:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8029242:	f817 e000 	ldrb.w	lr, [r7, r0]
 8029246:	bf54      	ite	pl
 8029248:	f00e 030f 	andpl.w	r3, lr, #15
 802924c:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8029250:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8029254:	b2db      	uxtb	r3, r3
 8029256:	9311      	str	r3, [sp, #68]	; 0x44
 8029258:	b292      	uxth	r2, r2
 802925a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802925c:	b289      	uxth	r1, r1
 802925e:	fb02 f301 	mul.w	r3, r2, r1
 8029262:	0112      	lsls	r2, r2, #4
 8029264:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8029268:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 802926c:	1ad2      	subs	r2, r2, r3
 802926e:	b289      	uxth	r1, r1
 8029270:	b292      	uxth	r2, r2
 8029272:	1a40      	subs	r0, r0, r1
 8029274:	436a      	muls	r2, r5
 8029276:	b280      	uxth	r0, r0
 8029278:	fb0c 2c00 	mla	ip, ip, r0, r2
 802927c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802927e:	fb01 c102 	mla	r1, r1, r2, ip
 8029282:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8029284:	fb03 1302 	mla	r3, r3, r2, r1
 8029288:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802928c:	b1db      	cbz	r3, 80292c6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802928e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8029290:	4353      	muls	r3, r2
 8029292:	1c5a      	adds	r2, r3, #1
 8029294:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8029298:	4ac6      	ldr	r2, [pc, #792]	; (80295b4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 802929a:	121b      	asrs	r3, r3, #8
 802929c:	6812      	ldr	r2, [r2, #0]
 802929e:	2bff      	cmp	r3, #255	; 0xff
 80292a0:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 80292a4:	f040 8099 	bne.w	80293da <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 80292a8:	0953      	lsrs	r3, r2, #5
 80292aa:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 80292ae:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80292b2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80292b6:	f02c 0c07 	bic.w	ip, ip, #7
 80292ba:	ea43 0c0c 	orr.w	ip, r3, ip
 80292be:	ea4c 0202 	orr.w	r2, ip, r2
 80292c2:	f8a8 2000 	strh.w	r2, [r8]
 80292c6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80292c8:	f108 0802 	add.w	r8, r8, #2
 80292cc:	441c      	add	r4, r3
 80292ce:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80292d0:	441e      	add	r6, r3
 80292d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80292d4:	3b01      	subs	r3, #1
 80292d6:	930e      	str	r3, [sp, #56]	; 0x38
 80292d8:	e762      	b.n	80291a0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 80292da:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80292dc:	f109 0902 	add.w	r9, r9, #2
 80292e0:	441c      	add	r4, r3
 80292e2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80292e4:	441e      	add	r6, r3
 80292e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80292e8:	3b01      	subs	r3, #1
 80292ea:	9309      	str	r3, [sp, #36]	; 0x24
 80292ec:	e736      	b.n	802915c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80292ee:	d024      	beq.n	802933a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 80292f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80292f2:	982b      	ldr	r0, [sp, #172]	; 0xac
 80292f4:	3b01      	subs	r3, #1
 80292f6:	fb00 4003 	mla	r0, r0, r3, r4
 80292fa:	1400      	asrs	r0, r0, #16
 80292fc:	f53f af4b 	bmi.w	8029196 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8029300:	3901      	subs	r1, #1
 8029302:	4288      	cmp	r0, r1
 8029304:	f6bf af47 	bge.w	8029196 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8029308:	992c      	ldr	r1, [sp, #176]	; 0xb0
 802930a:	fb01 6303 	mla	r3, r1, r3, r6
 802930e:	141b      	asrs	r3, r3, #16
 8029310:	f53f af41 	bmi.w	8029196 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8029314:	3a01      	subs	r2, #1
 8029316:	4293      	cmp	r3, r2
 8029318:	f6bf af3d 	bge.w	8029196 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802931c:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8029320:	46c8      	mov	r8, r9
 8029322:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8029326:	930e      	str	r3, [sp, #56]	; 0x38
 8029328:	f1bb 0f00 	cmp.w	fp, #0
 802932c:	f300 80b7 	bgt.w	802949e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 8029330:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029332:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8029336:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802933a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802933c:	2b00      	cmp	r3, #0
 802933e:	f340 818e 	ble.w	802965e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 8029342:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8029346:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029348:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802934c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8029350:	eef0 6a48 	vmov.f32	s13, s16
 8029354:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8029358:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802935c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029360:	ee16 4a90 	vmov	r4, s13
 8029364:	eef0 6a68 	vmov.f32	s13, s17
 8029368:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802936c:	ee16 6a90 	vmov	r6, s13
 8029370:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8029374:	ee69 7a27 	vmul.f32	s15, s18, s15
 8029378:	ee37 8a48 	vsub.f32	s16, s14, s16
 802937c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8029380:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8029384:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8029388:	ee18 2a10 	vmov	r2, s16
 802938c:	eeb0 8a47 	vmov.f32	s16, s14
 8029390:	fb92 f3f3 	sdiv	r3, r2, r3
 8029394:	ee18 2a90 	vmov	r2, s17
 8029398:	932b      	str	r3, [sp, #172]	; 0xac
 802939a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802939c:	eef0 8a67 	vmov.f32	s17, s15
 80293a0:	fb92 f3f3 	sdiv	r3, r2, r3
 80293a4:	932c      	str	r3, [sp, #176]	; 0xb0
 80293a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80293a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80293aa:	3b01      	subs	r3, #1
 80293ac:	930d      	str	r3, [sp, #52]	; 0x34
 80293ae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80293b0:	bf08      	it	eq
 80293b2:	4613      	moveq	r3, r2
 80293b4:	9309      	str	r3, [sp, #36]	; 0x24
 80293b6:	e6c2      	b.n	802913e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80293b8:	2900      	cmp	r1, #0
 80293ba:	f43f af4d 	beq.w	8029258 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x178>
 80293be:	eb0a 0003 	add.w	r0, sl, r3
 80293c2:	0843      	lsrs	r3, r0, #1
 80293c4:	07c0      	lsls	r0, r0, #31
 80293c6:	5cfb      	ldrb	r3, [r7, r3]
 80293c8:	bf54      	ite	pl
 80293ca:	f003 030f 	andpl.w	r3, r3, #15
 80293ce:	111b      	asrmi	r3, r3, #4
 80293d0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80293d4:	b2db      	uxtb	r3, r3
 80293d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80293d8:	e73e      	b.n	8029258 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x178>
 80293da:	f8b8 e000 	ldrh.w	lr, [r8]
 80293de:	fa1f fb83 	uxth.w	fp, r3
 80293e2:	f3c2 4107 	ubfx	r1, r2, #16, #8
 80293e6:	43db      	mvns	r3, r3
 80293e8:	ea4f 202e 	mov.w	r0, lr, asr #8
 80293ec:	fb11 f10b 	smulbb	r1, r1, fp
 80293f0:	b2db      	uxtb	r3, r3
 80293f2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80293f6:	fa5f fc8c 	uxtb.w	ip, ip
 80293fa:	b2d2      	uxtb	r2, r2
 80293fc:	fb00 1003 	mla	r0, r0, r3, r1
 8029400:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8029404:	fb1c fc0b 	smulbb	ip, ip, fp
 8029408:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802940c:	b280      	uxth	r0, r0
 802940e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8029412:	fb12 fb0b 	smulbb	fp, r2, fp
 8029416:	fa5f fe8e 	uxtb.w	lr, lr
 802941a:	fb01 cc03 	mla	ip, r1, r3, ip
 802941e:	fb0e bb03 	mla	fp, lr, r3, fp
 8029422:	1c43      	adds	r3, r0, #1
 8029424:	fa1f fc8c 	uxth.w	ip, ip
 8029428:	fa1f fb8b 	uxth.w	fp, fp
 802942c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8029430:	f10c 0101 	add.w	r1, ip, #1
 8029434:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 8029438:	f10b 0001 	add.w	r0, fp, #1
 802943c:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8029440:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8029444:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8029448:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802944c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8029450:	4318      	orrs	r0, r3
 8029452:	ea40 000c 	orr.w	r0, r0, ip
 8029456:	f8a8 0000 	strh.w	r0, [r8]
 802945a:	e734      	b.n	80292c6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802945c:	f113 0b01 	adds.w	fp, r3, #1
 8029460:	f53f af31 	bmi.w	80292c6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8029464:	45dc      	cmp	ip, fp
 8029466:	f6ff af2e 	blt.w	80292c6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802946a:	f110 0b01 	adds.w	fp, r0, #1
 802946e:	f53f af2a 	bmi.w	80292c6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8029472:	45de      	cmp	lr, fp
 8029474:	f6ff af27 	blt.w	80292c6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8029478:	9302      	str	r3, [sp, #8]
 802947a:	fa0f f38e 	sxth.w	r3, lr
 802947e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8029480:	9301      	str	r3, [sp, #4]
 8029482:	fa0f f38c 	sxth.w	r3, ip
 8029486:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802948a:	e9cd 1505 	strd	r1, r5, [sp, #20]
 802948e:	9300      	str	r3, [sp, #0]
 8029490:	463a      	mov	r2, r7
 8029492:	4653      	mov	r3, sl
 8029494:	4641      	mov	r1, r8
 8029496:	9815      	ldr	r0, [sp, #84]	; 0x54
 8029498:	f7ff fd2a 	bl	8028ef0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 802949c:	e713      	b.n	80292c6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802949e:	1422      	asrs	r2, r4, #16
 80294a0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80294a2:	1433      	asrs	r3, r6, #16
 80294a4:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80294a8:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80294ac:	fb05 2303 	mla	r3, r5, r3, r2
 80294b0:	085a      	lsrs	r2, r3, #1
 80294b2:	07dd      	lsls	r5, r3, #31
 80294b4:	5cba      	ldrb	r2, [r7, r2]
 80294b6:	bf54      	ite	pl
 80294b8:	f002 020f 	andpl.w	r2, r2, #15
 80294bc:	1112      	asrmi	r2, r2, #4
 80294be:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80294c2:	b2d2      	uxtb	r2, r2
 80294c4:	2900      	cmp	r1, #0
 80294c6:	d077      	beq.n	80295b8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 80294c8:	f103 0e01 	add.w	lr, r3, #1
 80294cc:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 80294d0:	f01e 0f01 	tst.w	lr, #1
 80294d4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80294d8:	bf0c      	ite	eq
 80294da:	f00c 0c0f 	andeq.w	ip, ip, #15
 80294de:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 80294e2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80294e6:	fa5f f58c 	uxtb.w	r5, ip
 80294ea:	9512      	str	r5, [sp, #72]	; 0x48
 80294ec:	b308      	cbz	r0, 8029532 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80294ee:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80294f0:	442b      	add	r3, r5
 80294f2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80294f6:	07dd      	lsls	r5, r3, #31
 80294f8:	f103 0301 	add.w	r3, r3, #1
 80294fc:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8029500:	bf54      	ite	pl
 8029502:	f00c 0c0f 	andpl.w	ip, ip, #15
 8029506:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802950a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802950e:	fa5f f58c 	uxtb.w	r5, ip
 8029512:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8029516:	950c      	str	r5, [sp, #48]	; 0x30
 8029518:	07dd      	lsls	r5, r3, #31
 802951a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802951e:	bf54      	ite	pl
 8029520:	f00c 0c0f 	andpl.w	ip, ip, #15
 8029524:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8029528:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802952c:	fa5f f38c 	uxtb.w	r3, ip
 8029530:	9313      	str	r3, [sp, #76]	; 0x4c
 8029532:	b289      	uxth	r1, r1
 8029534:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8029536:	b280      	uxth	r0, r0
 8029538:	fb01 f300 	mul.w	r3, r1, r0
 802953c:	0109      	lsls	r1, r1, #4
 802953e:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8029542:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8029546:	1ac9      	subs	r1, r1, r3
 8029548:	b280      	uxth	r0, r0
 802954a:	b289      	uxth	r1, r1
 802954c:	ebac 0c00 	sub.w	ip, ip, r0
 8029550:	4369      	muls	r1, r5
 8029552:	fa1f fc8c 	uxth.w	ip, ip
 8029556:	fb02 120c 	mla	r2, r2, ip, r1
 802955a:	990c      	ldr	r1, [sp, #48]	; 0x30
 802955c:	fb00 2001 	mla	r0, r0, r1, r2
 8029560:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8029562:	fb03 0302 	mla	r3, r3, r2, r0
 8029566:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802956a:	b1d3      	cbz	r3, 80295a2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 802956c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802956e:	4353      	muls	r3, r2
 8029570:	1c5a      	adds	r2, r3, #1
 8029572:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8029576:	4a0f      	ldr	r2, [pc, #60]	; (80295b4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 8029578:	121b      	asrs	r3, r3, #8
 802957a:	6812      	ldr	r2, [r2, #0]
 802957c:	2bff      	cmp	r3, #255	; 0xff
 802957e:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8029582:	d12d      	bne.n	80295e0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 8029584:	0953      	lsrs	r3, r2, #5
 8029586:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 802958a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802958e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8029592:	f02c 0c07 	bic.w	ip, ip, #7
 8029596:	ea43 0c0c 	orr.w	ip, r3, ip
 802959a:	ea4c 0202 	orr.w	r2, ip, r2
 802959e:	f8a8 2000 	strh.w	r2, [r8]
 80295a2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80295a4:	f108 0802 	add.w	r8, r8, #2
 80295a8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80295ac:	441c      	add	r4, r3
 80295ae:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80295b0:	441e      	add	r6, r3
 80295b2:	e6b9      	b.n	8029328 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80295b4:	2400b5d8 	.word	0x2400b5d8
 80295b8:	2800      	cmp	r0, #0
 80295ba:	d0ba      	beq.n	8029532 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80295bc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80295be:	442b      	add	r3, r5
 80295c0:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80295c4:	07db      	lsls	r3, r3, #31
 80295c6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80295ca:	bf54      	ite	pl
 80295cc:	f00c 0c0f 	andpl.w	ip, ip, #15
 80295d0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80295d4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80295d8:	fa5f f38c 	uxtb.w	r3, ip
 80295dc:	930c      	str	r3, [sp, #48]	; 0x30
 80295de:	e7a8      	b.n	8029532 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80295e0:	f8b8 e000 	ldrh.w	lr, [r8]
 80295e4:	fa1f fa83 	uxth.w	sl, r3
 80295e8:	f3c2 4107 	ubfx	r1, r2, #16, #8
 80295ec:	43db      	mvns	r3, r3
 80295ee:	ea4f 202e 	mov.w	r0, lr, asr #8
 80295f2:	fb11 f10a 	smulbb	r1, r1, sl
 80295f6:	b2db      	uxtb	r3, r3
 80295f8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80295fc:	b2d2      	uxtb	r2, r2
 80295fe:	fa5f fc8c 	uxtb.w	ip, ip
 8029602:	fb00 1003 	mla	r0, r0, r3, r1
 8029606:	ea4f 01ee 	mov.w	r1, lr, asr #3
 802960a:	fb12 f20a 	smulbb	r2, r2, sl
 802960e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8029612:	b280      	uxth	r0, r0
 8029614:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8029618:	fb1c fc0a 	smulbb	ip, ip, sl
 802961c:	fa5f fe8e 	uxtb.w	lr, lr
 8029620:	fb0e 2203 	mla	r2, lr, r3, r2
 8029624:	fb01 cc03 	mla	ip, r1, r3, ip
 8029628:	1c43      	adds	r3, r0, #1
 802962a:	b292      	uxth	r2, r2
 802962c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8029630:	1c51      	adds	r1, r2, #1
 8029632:	fa1f fc8c 	uxth.w	ip, ip
 8029636:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802963a:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 802963e:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8029642:	4308      	orrs	r0, r1
 8029644:	f10c 0101 	add.w	r1, ip, #1
 8029648:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802964c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8029650:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8029654:	ea40 000c 	orr.w	r0, r0, ip
 8029658:	f8a8 0000 	strh.w	r0, [r8]
 802965c:	e7a1      	b.n	80295a2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 802965e:	b017      	add	sp, #92	; 0x5c
 8029660:	ecbd 8b08 	vpop	{d8-d11}
 8029664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08029668 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 8029668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802966c:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 8029670:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8029674:	2c00      	cmp	r4, #0
 8029676:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802967a:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 802967e:	fb04 ce03 	mla	lr, r4, r3, ip
 8029682:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 8029686:	db60      	blt.n	802974a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 8029688:	45a1      	cmp	r9, r4
 802968a:	dd5e      	ble.n	802974a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 802968c:	f1bc 0f00 	cmp.w	ip, #0
 8029690:	db59      	blt.n	8029746 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 8029692:	45e0      	cmp	r8, ip
 8029694:	dd57      	ble.n	8029746 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 8029696:	ea4f 005e 	mov.w	r0, lr, lsr #1
 802969a:	f01e 0f01 	tst.w	lr, #1
 802969e:	5c16      	ldrb	r6, [r2, r0]
 80296a0:	bf0c      	ite	eq
 80296a2:	f006 060f 	andeq.w	r6, r6, #15
 80296a6:	1136      	asrne	r6, r6, #4
 80296a8:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80296ac:	b2f6      	uxtb	r6, r6
 80296ae:	f11c 0001 	adds.w	r0, ip, #1
 80296b2:	d44d      	bmi.n	8029750 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 80296b4:	4580      	cmp	r8, r0
 80296b6:	dd4b      	ble.n	8029750 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 80296b8:	2d00      	cmp	r5, #0
 80296ba:	d04b      	beq.n	8029754 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xec>
 80296bc:	f10e 0a01 	add.w	sl, lr, #1
 80296c0:	ea4f 005a 	mov.w	r0, sl, lsr #1
 80296c4:	f01a 0f01 	tst.w	sl, #1
 80296c8:	5c10      	ldrb	r0, [r2, r0]
 80296ca:	bf0c      	ite	eq
 80296cc:	f000 000f 	andeq.w	r0, r0, #15
 80296d0:	1100      	asrne	r0, r0, #4
 80296d2:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80296d6:	b2c0      	uxtb	r0, r0
 80296d8:	3401      	adds	r4, #1
 80296da:	d43f      	bmi.n	802975c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 80296dc:	45a1      	cmp	r9, r4
 80296de:	dd3d      	ble.n	802975c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 80296e0:	2f00      	cmp	r7, #0
 80296e2:	f000 8093 	beq.w	802980c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 80296e6:	f1bc 0f00 	cmp.w	ip, #0
 80296ea:	db35      	blt.n	8029758 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 80296ec:	45e0      	cmp	r8, ip
 80296ee:	dd33      	ble.n	8029758 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 80296f0:	eb03 090e 	add.w	r9, r3, lr
 80296f4:	ea4f 0459 	mov.w	r4, r9, lsr #1
 80296f8:	f019 0f01 	tst.w	r9, #1
 80296fc:	5d14      	ldrb	r4, [r2, r4]
 80296fe:	bf0c      	ite	eq
 8029700:	f004 040f 	andeq.w	r4, r4, #15
 8029704:	1124      	asrne	r4, r4, #4
 8029706:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802970a:	b2e4      	uxtb	r4, r4
 802970c:	f11c 0c01 	adds.w	ip, ip, #1
 8029710:	d427      	bmi.n	8029762 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 8029712:	45e0      	cmp	r8, ip
 8029714:	dd25      	ble.n	8029762 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 8029716:	b335      	cbz	r5, 8029766 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfe>
 8029718:	3301      	adds	r3, #1
 802971a:	449e      	add	lr, r3
 802971c:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8029720:	f01e 0f01 	tst.w	lr, #1
 8029724:	5cd2      	ldrb	r2, [r2, r3]
 8029726:	bf0c      	ite	eq
 8029728:	f002 020f 	andeq.w	r2, r2, #15
 802972c:	1112      	asrne	r2, r2, #4
 802972e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8029732:	b2d3      	uxtb	r3, r2
 8029734:	2d0f      	cmp	r5, #15
 8029736:	d917      	bls.n	8029768 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x100>
 8029738:	4b37      	ldr	r3, [pc, #220]	; (8029818 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b0>)
 802973a:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 802973e:	4a37      	ldr	r2, [pc, #220]	; (802981c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b4>)
 8029740:	4837      	ldr	r0, [pc, #220]	; (8029820 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b8>)
 8029742:	f000 fc4f 	bl	8029fe4 <__assert_func>
 8029746:	2600      	movs	r6, #0
 8029748:	e7b1      	b.n	80296ae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x46>
 802974a:	2000      	movs	r0, #0
 802974c:	4606      	mov	r6, r0
 802974e:	e7c3      	b.n	80296d8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 8029750:	2000      	movs	r0, #0
 8029752:	e7c1      	b.n	80296d8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 8029754:	4628      	mov	r0, r5
 8029756:	e7bf      	b.n	80296d8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 8029758:	2400      	movs	r4, #0
 802975a:	e7d7      	b.n	802970c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xa4>
 802975c:	2300      	movs	r3, #0
 802975e:	461c      	mov	r4, r3
 8029760:	e7e8      	b.n	8029734 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 8029762:	2300      	movs	r3, #0
 8029764:	e7e6      	b.n	8029734 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 8029766:	462b      	mov	r3, r5
 8029768:	2f0f      	cmp	r7, #15
 802976a:	d8e5      	bhi.n	8029738 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 802976c:	b2ad      	uxth	r5, r5
 802976e:	b2bf      	uxth	r7, r7
 8029770:	fb05 fc07 	mul.w	ip, r5, r7
 8029774:	012d      	lsls	r5, r5, #4
 8029776:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 802977a:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 802977e:	eba5 050c 	sub.w	r5, r5, ip
 8029782:	b2bf      	uxth	r7, r7
 8029784:	b2ad      	uxth	r5, r5
 8029786:	1bd2      	subs	r2, r2, r7
 8029788:	4368      	muls	r0, r5
 802978a:	b292      	uxth	r2, r2
 802978c:	fb06 0002 	mla	r0, r6, r2, r0
 8029790:	fb07 0404 	mla	r4, r7, r4, r0
 8029794:	fb0c 4303 	mla	r3, ip, r3, r4
 8029798:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802979c:	b3a3      	cbz	r3, 8029808 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802979e:	4a21      	ldr	r2, [pc, #132]	; (8029824 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1bc>)
 80297a0:	880e      	ldrh	r6, [r1, #0]
 80297a2:	6815      	ldr	r5, [r2, #0]
 80297a4:	b29a      	uxth	r2, r3
 80297a6:	1234      	asrs	r4, r6, #8
 80297a8:	43db      	mvns	r3, r3
 80297aa:	f3c5 4007 	ubfx	r0, r5, #16, #8
 80297ae:	f3c5 2707 	ubfx	r7, r5, #8, #8
 80297b2:	b2db      	uxtb	r3, r3
 80297b4:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 80297b8:	fb10 f002 	smulbb	r0, r0, r2
 80297bc:	b2ed      	uxtb	r5, r5
 80297be:	fb17 f702 	smulbb	r7, r7, r2
 80297c2:	fb04 0403 	mla	r4, r4, r3, r0
 80297c6:	10f0      	asrs	r0, r6, #3
 80297c8:	fb15 f202 	smulbb	r2, r5, r2
 80297cc:	00f6      	lsls	r6, r6, #3
 80297ce:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80297d2:	b2a4      	uxth	r4, r4
 80297d4:	b2f6      	uxtb	r6, r6
 80297d6:	fb00 7003 	mla	r0, r0, r3, r7
 80297da:	fb06 2303 	mla	r3, r6, r3, r2
 80297de:	b280      	uxth	r0, r0
 80297e0:	b29a      	uxth	r2, r3
 80297e2:	1c63      	adds	r3, r4, #1
 80297e4:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80297e8:	1c53      	adds	r3, r2, #1
 80297ea:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80297ee:	1c42      	adds	r2, r0, #1
 80297f0:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 80297f4:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80297f8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80297fc:	0940      	lsrs	r0, r0, #5
 80297fe:	4323      	orrs	r3, r4
 8029800:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8029804:	4303      	orrs	r3, r0
 8029806:	800b      	strh	r3, [r1, #0]
 8029808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802980c:	2d0f      	cmp	r5, #15
 802980e:	d893      	bhi.n	8029738 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 8029810:	463b      	mov	r3, r7
 8029812:	463c      	mov	r4, r7
 8029814:	e7aa      	b.n	802976c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x104>
 8029816:	bf00      	nop
 8029818:	0802f359 	.word	0x0802f359
 802981c:	0802f926 	.word	0x0802f926
 8029820:	0802f3dd 	.word	0x0802f3dd
 8029824:	2400b5d8 	.word	0x2400b5d8

08029828 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8029828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802982c:	ed2d 8b08 	vpush	{d8-d11}
 8029830:	b093      	sub	sp, #76	; 0x4c
 8029832:	461d      	mov	r5, r3
 8029834:	eeb0 aa40 	vmov.f32	s20, s0
 8029838:	920c      	str	r2, [sp, #48]	; 0x30
 802983a:	eef0 9a60 	vmov.f32	s19, s1
 802983e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8029840:	eeb0 9a41 	vmov.f32	s18, s2
 8029844:	9011      	str	r0, [sp, #68]	; 0x44
 8029846:	eeb0 8a62 	vmov.f32	s16, s5
 802984a:	6850      	ldr	r0, [r2, #4]
 802984c:	eef0 8a43 	vmov.f32	s17, s6
 8029850:	9107      	str	r1, [sp, #28]
 8029852:	eef0 ba44 	vmov.f32	s23, s8
 8029856:	6812      	ldr	r2, [r2, #0]
 8029858:	eeb0 ba64 	vmov.f32	s22, s9
 802985c:	eef0 aa45 	vmov.f32	s21, s10
 8029860:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8029864:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8029868:	fb00 1303 	mla	r3, r0, r3, r1
 802986c:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8029870:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8029872:	689b      	ldr	r3, [r3, #8]
 8029874:	3301      	adds	r3, #1
 8029876:	f023 0301 	bic.w	r3, r3, #1
 802987a:	9306      	str	r3, [sp, #24]
 802987c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802987e:	681f      	ldr	r7, [r3, #0]
 8029880:	9b07      	ldr	r3, [sp, #28]
 8029882:	2b00      	cmp	r3, #0
 8029884:	dc03      	bgt.n	802988e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8029886:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8029888:	2b00      	cmp	r3, #0
 802988a:	f340 8267 	ble.w	8029d5c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 802988e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8029890:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029894:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8029898:	1e48      	subs	r0, r1, #1
 802989a:	f102 3cff 	add.w	ip, r2, #4294967295
 802989e:	2d00      	cmp	r5, #0
 80298a0:	f340 80b7 	ble.w	8029a12 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80298a4:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80298a8:	ea4f 4326 	mov.w	r3, r6, asr #16
 80298ac:	d406      	bmi.n	80298bc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80298ae:	4586      	cmp	lr, r0
 80298b0:	da04      	bge.n	80298bc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80298b2:	2b00      	cmp	r3, #0
 80298b4:	db02      	blt.n	80298bc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80298b6:	4563      	cmp	r3, ip
 80298b8:	f2c0 80ac 	blt.w	8029a14 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 80298bc:	f11e 0e01 	adds.w	lr, lr, #1
 80298c0:	f100 809f 	bmi.w	8029a02 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 80298c4:	4571      	cmp	r1, lr
 80298c6:	f2c0 809c 	blt.w	8029a02 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 80298ca:	3301      	adds	r3, #1
 80298cc:	f100 8099 	bmi.w	8029a02 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 80298d0:	429a      	cmp	r2, r3
 80298d2:	f2c0 8096 	blt.w	8029a02 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 80298d6:	46c8      	mov	r8, r9
 80298d8:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 80298dc:	9509      	str	r5, [sp, #36]	; 0x24
 80298de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80298e0:	2b00      	cmp	r3, #0
 80298e2:	f340 80b5 	ble.w	8029a50 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 80298e6:	f3c4 3303 	ubfx	r3, r4, #12, #4
 80298ea:	1430      	asrs	r0, r6, #16
 80298ec:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80298f0:	9308      	str	r3, [sp, #32]
 80298f2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80298f4:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 80298f8:	1423      	asrs	r3, r4, #16
 80298fa:	f100 813f 	bmi.w	8029b7c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 80298fe:	f10c 3bff 	add.w	fp, ip, #4294967295
 8029902:	455b      	cmp	r3, fp
 8029904:	f280 813a 	bge.w	8029b7c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8029908:	2800      	cmp	r0, #0
 802990a:	f2c0 8137 	blt.w	8029b7c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802990e:	f10e 3bff 	add.w	fp, lr, #4294967295
 8029912:	4558      	cmp	r0, fp
 8029914:	f280 8132 	bge.w	8029b7c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8029918:	9a06      	ldr	r2, [sp, #24]
 802991a:	fb00 3302 	mla	r3, r0, r2, r3
 802991e:	0858      	lsrs	r0, r3, #1
 8029920:	07da      	lsls	r2, r3, #31
 8029922:	9a08      	ldr	r2, [sp, #32]
 8029924:	f817 c000 	ldrb.w	ip, [r7, r0]
 8029928:	bf54      	ite	pl
 802992a:	f00c 0c0f 	andpl.w	ip, ip, #15
 802992e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8029932:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8029936:	fa5f fc8c 	uxtb.w	ip, ip
 802993a:	2a00      	cmp	r2, #0
 802993c:	f000 80cc 	beq.w	8029ad8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8029940:	1c58      	adds	r0, r3, #1
 8029942:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8029946:	07c0      	lsls	r0, r0, #31
 8029948:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802994c:	bf54      	ite	pl
 802994e:	f00e 0e0f 	andpl.w	lr, lr, #15
 8029952:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8029956:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802995a:	fa5f fe8e 	uxtb.w	lr, lr
 802995e:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8029962:	b1b9      	cbz	r1, 8029994 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8029964:	4453      	add	r3, sl
 8029966:	0858      	lsrs	r0, r3, #1
 8029968:	07da      	lsls	r2, r3, #31
 802996a:	5c38      	ldrb	r0, [r7, r0]
 802996c:	bf54      	ite	pl
 802996e:	f000 000f 	andpl.w	r0, r0, #15
 8029972:	1100      	asrmi	r0, r0, #4
 8029974:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8029978:	b2c0      	uxtb	r0, r0
 802997a:	900a      	str	r0, [sp, #40]	; 0x28
 802997c:	1c58      	adds	r0, r3, #1
 802997e:	0843      	lsrs	r3, r0, #1
 8029980:	07c2      	lsls	r2, r0, #31
 8029982:	5cfb      	ldrb	r3, [r7, r3]
 8029984:	bf54      	ite	pl
 8029986:	f003 030f 	andpl.w	r3, r3, #15
 802998a:	111b      	asrmi	r3, r3, #4
 802998c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8029990:	b2db      	uxtb	r3, r3
 8029992:	930e      	str	r3, [sp, #56]	; 0x38
 8029994:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8029998:	b289      	uxth	r1, r1
 802999a:	fb02 f301 	mul.w	r3, r2, r1
 802999e:	0112      	lsls	r2, r2, #4
 80299a0:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80299a4:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 80299a8:	1ad2      	subs	r2, r2, r3
 80299aa:	b289      	uxth	r1, r1
 80299ac:	b292      	uxth	r2, r2
 80299ae:	1a40      	subs	r0, r0, r1
 80299b0:	fa1f fe80 	uxth.w	lr, r0
 80299b4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80299b6:	4342      	muls	r2, r0
 80299b8:	fb0c 2c0e 	mla	ip, ip, lr, r2
 80299bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80299be:	fb01 c102 	mla	r1, r1, r2, ip
 80299c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80299c4:	fb03 1302 	mla	r3, r3, r2, r1
 80299c8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80299cc:	2bff      	cmp	r3, #255	; 0xff
 80299ce:	f040 8094 	bne.w	8029afa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d2>
 80299d2:	4bbf      	ldr	r3, [pc, #764]	; (8029cd0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 80299d4:	681a      	ldr	r2, [r3, #0]
 80299d6:	4bbf      	ldr	r3, [pc, #764]	; (8029cd4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 80299d8:	0951      	lsrs	r1, r2, #5
 80299da:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 80299de:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80299e2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80299e6:	430b      	orrs	r3, r1
 80299e8:	4313      	orrs	r3, r2
 80299ea:	f8a8 3000 	strh.w	r3, [r8]
 80299ee:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80299f0:	f108 0802 	add.w	r8, r8, #2
 80299f4:	441c      	add	r4, r3
 80299f6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80299f8:	441e      	add	r6, r3
 80299fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80299fc:	3b01      	subs	r3, #1
 80299fe:	9309      	str	r3, [sp, #36]	; 0x24
 8029a00:	e76d      	b.n	80298de <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8029a02:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8029a04:	3d01      	subs	r5, #1
 8029a06:	f109 0902 	add.w	r9, r9, #2
 8029a0a:	441c      	add	r4, r3
 8029a0c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029a0e:	441e      	add	r6, r3
 8029a10:	e745      	b.n	802989e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8029a12:	d021      	beq.n	8029a58 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8029a14:	1e6b      	subs	r3, r5, #1
 8029a16:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8029a18:	fb00 4003 	mla	r0, r0, r3, r4
 8029a1c:	1400      	asrs	r0, r0, #16
 8029a1e:	f53f af5a 	bmi.w	80298d6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8029a22:	3901      	subs	r1, #1
 8029a24:	4288      	cmp	r0, r1
 8029a26:	f6bf af56 	bge.w	80298d6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8029a2a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8029a2c:	fb01 6303 	mla	r3, r1, r3, r6
 8029a30:	141b      	asrs	r3, r3, #16
 8029a32:	f53f af50 	bmi.w	80298d6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8029a36:	3a01      	subs	r2, #1
 8029a38:	4293      	cmp	r3, r2
 8029a3a:	f6bf af4c 	bge.w	80298d6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8029a3e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8029a42:	46a8      	mov	r8, r5
 8029a44:	46ce      	mov	lr, r9
 8029a46:	9308      	str	r3, [sp, #32]
 8029a48:	f1b8 0f00 	cmp.w	r8, #0
 8029a4c:	f300 80b6 	bgt.w	8029bbc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8029a50:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8029a54:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8029a58:	9b07      	ldr	r3, [sp, #28]
 8029a5a:	2b00      	cmp	r3, #0
 8029a5c:	f340 817e 	ble.w	8029d5c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 8029a60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8029a64:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029a66:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8029a6a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8029a6e:	eef0 6a48 	vmov.f32	s13, s16
 8029a72:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8029a76:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8029a7a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029a7e:	ee16 4a90 	vmov	r4, s13
 8029a82:	eef0 6a68 	vmov.f32	s13, s17
 8029a86:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029a8a:	ee16 6a90 	vmov	r6, s13
 8029a8e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8029a92:	ee69 7a27 	vmul.f32	s15, s18, s15
 8029a96:	ee37 8a48 	vsub.f32	s16, s14, s16
 8029a9a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8029a9e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8029aa2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8029aa6:	ee18 2a10 	vmov	r2, s16
 8029aaa:	eeb0 8a47 	vmov.f32	s16, s14
 8029aae:	fb92 f3f3 	sdiv	r3, r2, r3
 8029ab2:	ee18 2a90 	vmov	r2, s17
 8029ab6:	9327      	str	r3, [sp, #156]	; 0x9c
 8029ab8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029aba:	eef0 8a67 	vmov.f32	s17, s15
 8029abe:	fb92 f3f3 	sdiv	r3, r2, r3
 8029ac2:	9328      	str	r3, [sp, #160]	; 0xa0
 8029ac4:	9b07      	ldr	r3, [sp, #28]
 8029ac6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8029ac8:	3b01      	subs	r3, #1
 8029aca:	9307      	str	r3, [sp, #28]
 8029acc:	bf08      	it	eq
 8029ace:	4615      	moveq	r5, r2
 8029ad0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029ad2:	bf18      	it	ne
 8029ad4:	461d      	movne	r5, r3
 8029ad6:	e6d3      	b.n	8029880 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8029ad8:	2900      	cmp	r1, #0
 8029ada:	f43f af5b 	beq.w	8029994 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8029ade:	eb0a 0003 	add.w	r0, sl, r3
 8029ae2:	0843      	lsrs	r3, r0, #1
 8029ae4:	07c0      	lsls	r0, r0, #31
 8029ae6:	5cfb      	ldrb	r3, [r7, r3]
 8029ae8:	bf54      	ite	pl
 8029aea:	f003 030f 	andpl.w	r3, r3, #15
 8029aee:	111b      	asrmi	r3, r3, #4
 8029af0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8029af4:	b2db      	uxtb	r3, r3
 8029af6:	930a      	str	r3, [sp, #40]	; 0x28
 8029af8:	e74c      	b.n	8029994 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8029afa:	2b00      	cmp	r3, #0
 8029afc:	f43f af77 	beq.w	80299ee <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8029b00:	4a73      	ldr	r2, [pc, #460]	; (8029cd0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 8029b02:	fa1f fe83 	uxth.w	lr, r3
 8029b06:	f8b8 c000 	ldrh.w	ip, [r8]
 8029b0a:	43db      	mvns	r3, r3
 8029b0c:	6810      	ldr	r0, [r2, #0]
 8029b0e:	ea4f 212c 	mov.w	r1, ip, asr #8
 8029b12:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8029b16:	b2db      	uxtb	r3, r3
 8029b18:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8029b1c:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8029b20:	fb12 f20e 	smulbb	r2, r2, lr
 8029b24:	b2c0      	uxtb	r0, r0
 8029b26:	fb1b fb0e 	smulbb	fp, fp, lr
 8029b2a:	fb01 2103 	mla	r1, r1, r3, r2
 8029b2e:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8029b32:	fb10 fe0e 	smulbb	lr, r0, lr
 8029b36:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8029b3a:	b289      	uxth	r1, r1
 8029b3c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8029b40:	fa5f fc8c 	uxtb.w	ip, ip
 8029b44:	fb02 b203 	mla	r2, r2, r3, fp
 8029b48:	1c48      	adds	r0, r1, #1
 8029b4a:	fb0c e303 	mla	r3, ip, r3, lr
 8029b4e:	b292      	uxth	r2, r2
 8029b50:	b29b      	uxth	r3, r3
 8029b52:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8029b56:	f102 0b01 	add.w	fp, r2, #1
 8029b5a:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 8029b5e:	1c59      	adds	r1, r3, #1
 8029b60:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8029b64:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8029b68:	0952      	lsrs	r2, r2, #5
 8029b6a:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8029b6e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8029b72:	4301      	orrs	r1, r0
 8029b74:	4311      	orrs	r1, r2
 8029b76:	f8a8 1000 	strh.w	r1, [r8]
 8029b7a:	e738      	b.n	80299ee <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8029b7c:	f113 0b01 	adds.w	fp, r3, #1
 8029b80:	f53f af35 	bmi.w	80299ee <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8029b84:	45dc      	cmp	ip, fp
 8029b86:	f6ff af32 	blt.w	80299ee <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8029b8a:	f110 0b01 	adds.w	fp, r0, #1
 8029b8e:	f53f af2e 	bmi.w	80299ee <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8029b92:	45de      	cmp	lr, fp
 8029b94:	f6ff af2b 	blt.w	80299ee <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8029b98:	9302      	str	r3, [sp, #8]
 8029b9a:	fa0f f38e 	sxth.w	r3, lr
 8029b9e:	9a08      	ldr	r2, [sp, #32]
 8029ba0:	9301      	str	r3, [sp, #4]
 8029ba2:	fa0f f38c 	sxth.w	r3, ip
 8029ba6:	9105      	str	r1, [sp, #20]
 8029ba8:	4641      	mov	r1, r8
 8029baa:	9300      	str	r3, [sp, #0]
 8029bac:	4653      	mov	r3, sl
 8029bae:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8029bb2:	463a      	mov	r2, r7
 8029bb4:	9811      	ldr	r0, [sp, #68]	; 0x44
 8029bb6:	f7ff fd57 	bl	8029668 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 8029bba:	e718      	b.n	80299ee <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8029bbc:	1422      	asrs	r2, r4, #16
 8029bbe:	9906      	ldr	r1, [sp, #24]
 8029bc0:	1433      	asrs	r3, r6, #16
 8029bc2:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8029bc6:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8029bca:	fb01 2303 	mla	r3, r1, r3, r2
 8029bce:	085a      	lsrs	r2, r3, #1
 8029bd0:	07d9      	lsls	r1, r3, #31
 8029bd2:	5cba      	ldrb	r2, [r7, r2]
 8029bd4:	bf54      	ite	pl
 8029bd6:	f002 020f 	andpl.w	r2, r2, #15
 8029bda:	1112      	asrmi	r2, r2, #4
 8029bdc:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8029be0:	b2d2      	uxtb	r2, r2
 8029be2:	2800      	cmp	r0, #0
 8029be4:	d063      	beq.n	8029cae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 8029be6:	f103 0a01 	add.w	sl, r3, #1
 8029bea:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8029bee:	f01a 0f01 	tst.w	sl, #1
 8029bf2:	5c79      	ldrb	r1, [r7, r1]
 8029bf4:	bf0c      	ite	eq
 8029bf6:	f001 010f 	andeq.w	r1, r1, #15
 8029bfa:	1109      	asrne	r1, r1, #4
 8029bfc:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8029c00:	b2c9      	uxtb	r1, r1
 8029c02:	910f      	str	r1, [sp, #60]	; 0x3c
 8029c04:	f1bc 0f00 	cmp.w	ip, #0
 8029c08:	d01a      	beq.n	8029c40 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 8029c0a:	9908      	ldr	r1, [sp, #32]
 8029c0c:	440b      	add	r3, r1
 8029c0e:	0859      	lsrs	r1, r3, #1
 8029c10:	f013 0f01 	tst.w	r3, #1
 8029c14:	f103 0301 	add.w	r3, r3, #1
 8029c18:	5c79      	ldrb	r1, [r7, r1]
 8029c1a:	bf0c      	ite	eq
 8029c1c:	f001 010f 	andeq.w	r1, r1, #15
 8029c20:	1109      	asrne	r1, r1, #4
 8029c22:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8029c26:	b2c9      	uxtb	r1, r1
 8029c28:	910b      	str	r1, [sp, #44]	; 0x2c
 8029c2a:	0859      	lsrs	r1, r3, #1
 8029c2c:	07db      	lsls	r3, r3, #31
 8029c2e:	5c79      	ldrb	r1, [r7, r1]
 8029c30:	bf54      	ite	pl
 8029c32:	f001 010f 	andpl.w	r1, r1, #15
 8029c36:	1109      	asrmi	r1, r1, #4
 8029c38:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8029c3c:	b2c9      	uxtb	r1, r1
 8029c3e:	9110      	str	r1, [sp, #64]	; 0x40
 8029c40:	b280      	uxth	r0, r0
 8029c42:	fa1f fc8c 	uxth.w	ip, ip
 8029c46:	fb00 f30c 	mul.w	r3, r0, ip
 8029c4a:	0100      	lsls	r0, r0, #4
 8029c4c:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8029c50:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8029c54:	1ac0      	subs	r0, r0, r3
 8029c56:	fa1f fc8c 	uxth.w	ip, ip
 8029c5a:	b280      	uxth	r0, r0
 8029c5c:	eba1 010c 	sub.w	r1, r1, ip
 8029c60:	fa1f fa81 	uxth.w	sl, r1
 8029c64:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8029c66:	4348      	muls	r0, r1
 8029c68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8029c6a:	fb02 020a 	mla	r2, r2, sl, r0
 8029c6e:	fb0c 2c01 	mla	ip, ip, r1, r2
 8029c72:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8029c74:	fb03 c302 	mla	r3, r3, r2, ip
 8029c78:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029c7c:	2bff      	cmp	r3, #255	; 0xff
 8029c7e:	d12b      	bne.n	8029cd8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8029c80:	4b13      	ldr	r3, [pc, #76]	; (8029cd0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 8029c82:	681a      	ldr	r2, [r3, #0]
 8029c84:	4b13      	ldr	r3, [pc, #76]	; (8029cd4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 8029c86:	0951      	lsrs	r1, r2, #5
 8029c88:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8029c8c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8029c90:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8029c94:	430b      	orrs	r3, r1
 8029c96:	4313      	orrs	r3, r2
 8029c98:	f8ae 3000 	strh.w	r3, [lr]
 8029c9c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8029c9e:	f10e 0e02 	add.w	lr, lr, #2
 8029ca2:	f108 38ff 	add.w	r8, r8, #4294967295
 8029ca6:	441c      	add	r4, r3
 8029ca8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029caa:	441e      	add	r6, r3
 8029cac:	e6cc      	b.n	8029a48 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8029cae:	f1bc 0f00 	cmp.w	ip, #0
 8029cb2:	d0c5      	beq.n	8029c40 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 8029cb4:	9908      	ldr	r1, [sp, #32]
 8029cb6:	440b      	add	r3, r1
 8029cb8:	0859      	lsrs	r1, r3, #1
 8029cba:	07db      	lsls	r3, r3, #31
 8029cbc:	5c79      	ldrb	r1, [r7, r1]
 8029cbe:	bf54      	ite	pl
 8029cc0:	f001 010f 	andpl.w	r1, r1, #15
 8029cc4:	1109      	asrmi	r1, r1, #4
 8029cc6:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8029cca:	b2c9      	uxtb	r1, r1
 8029ccc:	910b      	str	r1, [sp, #44]	; 0x2c
 8029cce:	e7b7      	b.n	8029c40 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 8029cd0:	2400b5d8 	.word	0x2400b5d8
 8029cd4:	fffff800 	.word	0xfffff800
 8029cd8:	2b00      	cmp	r3, #0
 8029cda:	d0df      	beq.n	8029c9c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x474>
 8029cdc:	4a22      	ldr	r2, [pc, #136]	; (8029d68 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x540>)
 8029cde:	fa1f fa83 	uxth.w	sl, r3
 8029ce2:	f8be c000 	ldrh.w	ip, [lr]
 8029ce6:	43db      	mvns	r3, r3
 8029ce8:	6810      	ldr	r0, [r2, #0]
 8029cea:	ea4f 212c 	mov.w	r1, ip, asr #8
 8029cee:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8029cf2:	b2db      	uxtb	r3, r3
 8029cf4:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8029cf8:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8029cfc:	fb12 f20a 	smulbb	r2, r2, sl
 8029d00:	b2c0      	uxtb	r0, r0
 8029d02:	fb1b fb0a 	smulbb	fp, fp, sl
 8029d06:	fb01 2103 	mla	r1, r1, r3, r2
 8029d0a:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8029d0e:	fb10 f00a 	smulbb	r0, r0, sl
 8029d12:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8029d16:	b289      	uxth	r1, r1
 8029d18:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8029d1c:	fa5f fc8c 	uxtb.w	ip, ip
 8029d20:	fb02 b203 	mla	r2, r2, r3, fp
 8029d24:	fb0c 0003 	mla	r0, ip, r3, r0
 8029d28:	1c4b      	adds	r3, r1, #1
 8029d2a:	b292      	uxth	r2, r2
 8029d2c:	b280      	uxth	r0, r0
 8029d2e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8029d32:	f100 0b01 	add.w	fp, r0, #1
 8029d36:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8029d3a:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 8029d3e:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 8029d42:	ea4b 0101 	orr.w	r1, fp, r1
 8029d46:	f102 0b01 	add.w	fp, r2, #1
 8029d4a:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8029d4e:	0952      	lsrs	r2, r2, #5
 8029d50:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8029d54:	4311      	orrs	r1, r2
 8029d56:	f8ae 1000 	strh.w	r1, [lr]
 8029d5a:	e79f      	b.n	8029c9c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x474>
 8029d5c:	b013      	add	sp, #76	; 0x4c
 8029d5e:	ecbd 8b08 	vpop	{d8-d11}
 8029d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029d66:	bf00      	nop
 8029d68:	2400b5d8 	.word	0x2400b5d8

08029d6c <CRC_Lock>:
 8029d6c:	4a20      	ldr	r2, [pc, #128]	; (8029df0 <CRC_Lock+0x84>)
 8029d6e:	b530      	push	{r4, r5, lr}
 8029d70:	6813      	ldr	r3, [r2, #0]
 8029d72:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8029d76:	f24c 2540 	movw	r5, #49728	; 0xc240
 8029d7a:	f023 0301 	bic.w	r3, r3, #1
 8029d7e:	6013      	str	r3, [r2, #0]
 8029d80:	4b1c      	ldr	r3, [pc, #112]	; (8029df4 <CRC_Lock+0x88>)
 8029d82:	681a      	ldr	r2, [r3, #0]
 8029d84:	4022      	ands	r2, r4
 8029d86:	42aa      	cmp	r2, r5
 8029d88:	d005      	beq.n	8029d96 <CRC_Lock+0x2a>
 8029d8a:	681b      	ldr	r3, [r3, #0]
 8029d8c:	f24c 2270 	movw	r2, #49776	; 0xc270
 8029d90:	4023      	ands	r3, r4
 8029d92:	4293      	cmp	r3, r2
 8029d94:	d124      	bne.n	8029de0 <CRC_Lock+0x74>
 8029d96:	4b18      	ldr	r3, [pc, #96]	; (8029df8 <CRC_Lock+0x8c>)
 8029d98:	681b      	ldr	r3, [r3, #0]
 8029d9a:	bb0b      	cbnz	r3, 8029de0 <CRC_Lock+0x74>
 8029d9c:	4b17      	ldr	r3, [pc, #92]	; (8029dfc <CRC_Lock+0x90>)
 8029d9e:	681a      	ldr	r2, [r3, #0]
 8029da0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8029da4:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8029da8:	d00d      	beq.n	8029dc6 <CRC_Lock+0x5a>
 8029daa:	681a      	ldr	r2, [r3, #0]
 8029dac:	f240 4483 	movw	r4, #1155	; 0x483
 8029db0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8029db4:	42a2      	cmp	r2, r4
 8029db6:	d006      	beq.n	8029dc6 <CRC_Lock+0x5a>
 8029db8:	681b      	ldr	r3, [r3, #0]
 8029dba:	f240 4285 	movw	r2, #1157	; 0x485
 8029dbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8029dc2:	4293      	cmp	r3, r2
 8029dc4:	d10c      	bne.n	8029de0 <CRC_Lock+0x74>
 8029dc6:	4b0e      	ldr	r3, [pc, #56]	; (8029e00 <CRC_Lock+0x94>)
 8029dc8:	2201      	movs	r2, #1
 8029dca:	601a      	str	r2, [r3, #0]
 8029dcc:	681a      	ldr	r2, [r3, #0]
 8029dce:	2a00      	cmp	r2, #0
 8029dd0:	d1fc      	bne.n	8029dcc <CRC_Lock+0x60>
 8029dd2:	4b0c      	ldr	r3, [pc, #48]	; (8029e04 <CRC_Lock+0x98>)
 8029dd4:	6018      	str	r0, [r3, #0]
 8029dd6:	6818      	ldr	r0, [r3, #0]
 8029dd8:	1a43      	subs	r3, r0, r1
 8029dda:	4258      	negs	r0, r3
 8029ddc:	4158      	adcs	r0, r3
 8029dde:	bd30      	pop	{r4, r5, pc}
 8029de0:	4b09      	ldr	r3, [pc, #36]	; (8029e08 <CRC_Lock+0x9c>)
 8029de2:	2201      	movs	r2, #1
 8029de4:	601a      	str	r2, [r3, #0]
 8029de6:	681a      	ldr	r2, [r3, #0]
 8029de8:	2a00      	cmp	r2, #0
 8029dea:	d1fc      	bne.n	8029de6 <CRC_Lock+0x7a>
 8029dec:	4b07      	ldr	r3, [pc, #28]	; (8029e0c <CRC_Lock+0xa0>)
 8029dee:	e7f1      	b.n	8029dd4 <CRC_Lock+0x68>
 8029df0:	e0002000 	.word	0xe0002000
 8029df4:	e000ed00 	.word	0xe000ed00
 8029df8:	e0042000 	.word	0xe0042000
 8029dfc:	5c001000 	.word	0x5c001000
 8029e00:	58024c08 	.word	0x58024c08
 8029e04:	58024c00 	.word	0x58024c00
 8029e08:	40023008 	.word	0x40023008
 8029e0c:	40023000 	.word	0x40023000

08029e10 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8029e10:	6101      	str	r1, [r0, #16]
 8029e12:	4770      	bx	lr

08029e14 <_ZN8touchgfx8Gestures4tickEv>:
 8029e14:	7b83      	ldrb	r3, [r0, #14]
 8029e16:	b14b      	cbz	r3, 8029e2c <_ZN8touchgfx8Gestures4tickEv+0x18>
 8029e18:	8903      	ldrh	r3, [r0, #8]
 8029e1a:	3301      	adds	r3, #1
 8029e1c:	b29b      	uxth	r3, r3
 8029e1e:	2b07      	cmp	r3, #7
 8029e20:	8103      	strh	r3, [r0, #8]
 8029e22:	bf81      	itttt	hi
 8029e24:	2300      	movhi	r3, #0
 8029e26:	8143      	strhhi	r3, [r0, #10]
 8029e28:	8183      	strhhi	r3, [r0, #12]
 8029e2a:	7383      	strbhi	r3, [r0, #14]
 8029e2c:	4770      	bx	lr
	...

08029e30 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8029e30:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8029e34:	4604      	mov	r4, r0
 8029e36:	4698      	mov	r8, r3
 8029e38:	8880      	ldrh	r0, [r0, #4]
 8029e3a:	4617      	mov	r7, r2
 8029e3c:	4b1d      	ldr	r3, [pc, #116]	; (8029eb4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 8029e3e:	460e      	mov	r6, r1
 8029e40:	f8ad 0006 	strh.w	r0, [sp, #6]
 8029e44:	eba8 0000 	sub.w	r0, r8, r0
 8029e48:	9300      	str	r3, [sp, #0]
 8029e4a:	2300      	movs	r3, #0
 8029e4c:	b280      	uxth	r0, r0
 8029e4e:	8aa2      	ldrh	r2, [r4, #20]
 8029e50:	f88d 3004 	strb.w	r3, [sp, #4]
 8029e54:	b203      	sxth	r3, r0
 8029e56:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8029e5a:	88e1      	ldrh	r1, [r4, #6]
 8029e5c:	2b00      	cmp	r3, #0
 8029e5e:	f8ad 800a 	strh.w	r8, [sp, #10]
 8029e62:	f8ad 1008 	strh.w	r1, [sp, #8]
 8029e66:	bfb8      	it	lt
 8029e68:	4240      	neglt	r0, r0
 8029e6a:	f8ad 500c 	strh.w	r5, [sp, #12]
 8029e6e:	bfb8      	it	lt
 8029e70:	b203      	sxthlt	r3, r0
 8029e72:	4293      	cmp	r3, r2
 8029e74:	dc08      	bgt.n	8029e88 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 8029e76:	1a69      	subs	r1, r5, r1
 8029e78:	b289      	uxth	r1, r1
 8029e7a:	b20b      	sxth	r3, r1
 8029e7c:	2b00      	cmp	r3, #0
 8029e7e:	bfbc      	itt	lt
 8029e80:	4249      	neglt	r1, r1
 8029e82:	b20b      	sxthlt	r3, r1
 8029e84:	429a      	cmp	r2, r3
 8029e86:	da13      	bge.n	8029eb0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8029e88:	6920      	ldr	r0, [r4, #16]
 8029e8a:	4669      	mov	r1, sp
 8029e8c:	eba8 0606 	sub.w	r6, r8, r6
 8029e90:	1bef      	subs	r7, r5, r7
 8029e92:	6803      	ldr	r3, [r0, #0]
 8029e94:	685b      	ldr	r3, [r3, #4]
 8029e96:	4798      	blx	r3
 8029e98:	2300      	movs	r3, #0
 8029e9a:	2001      	movs	r0, #1
 8029e9c:	8166      	strh	r6, [r4, #10]
 8029e9e:	8123      	strh	r3, [r4, #8]
 8029ea0:	81a7      	strh	r7, [r4, #12]
 8029ea2:	f8a4 8004 	strh.w	r8, [r4, #4]
 8029ea6:	80e5      	strh	r5, [r4, #6]
 8029ea8:	73a0      	strb	r0, [r4, #14]
 8029eaa:	b004      	add	sp, #16
 8029eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029eb0:	2000      	movs	r0, #0
 8029eb2:	e7fa      	b.n	8029eaa <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8029eb4:	0802e7e8 	.word	0x0802e7e8

08029eb8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8029eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8029eba:	461e      	mov	r6, r3
 8029ebc:	1e4b      	subs	r3, r1, #1
 8029ebe:	b085      	sub	sp, #20
 8029ec0:	4604      	mov	r4, r0
 8029ec2:	2b01      	cmp	r3, #1
 8029ec4:	460d      	mov	r5, r1
 8029ec6:	4617      	mov	r7, r2
 8029ec8:	d84b      	bhi.n	8029f62 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8029eca:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8029ece:	1cd3      	adds	r3, r2, #3
 8029ed0:	b29b      	uxth	r3, r3
 8029ed2:	2b06      	cmp	r3, #6
 8029ed4:	d916      	bls.n	8029f04 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8029ed6:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8029f78 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8029eda:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8029ede:	f8cd c004 	str.w	ip, [sp, #4]
 8029ee2:	f04f 0c00 	mov.w	ip, #0
 8029ee6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8029eea:	6900      	ldr	r0, [r0, #16]
 8029eec:	f8ad 100c 	strh.w	r1, [sp, #12]
 8029ef0:	a901      	add	r1, sp, #4
 8029ef2:	f88d c008 	strb.w	ip, [sp, #8]
 8029ef6:	f8ad 200a 	strh.w	r2, [sp, #10]
 8029efa:	f8ad 300e 	strh.w	r3, [sp, #14]
 8029efe:	6803      	ldr	r3, [r0, #0]
 8029f00:	689b      	ldr	r3, [r3, #8]
 8029f02:	4798      	blx	r3
 8029f04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8029f08:	1cd3      	adds	r3, r2, #3
 8029f0a:	b29b      	uxth	r3, r3
 8029f0c:	2b06      	cmp	r3, #6
 8029f0e:	d916      	bls.n	8029f3e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8029f10:	f8df c064 	ldr.w	ip, [pc, #100]	; 8029f78 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8029f14:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8029f18:	f8cd c004 	str.w	ip, [sp, #4]
 8029f1c:	f04f 0c01 	mov.w	ip, #1
 8029f20:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8029f24:	6920      	ldr	r0, [r4, #16]
 8029f26:	f8ad 100c 	strh.w	r1, [sp, #12]
 8029f2a:	a901      	add	r1, sp, #4
 8029f2c:	f88d c008 	strb.w	ip, [sp, #8]
 8029f30:	f8ad 200a 	strh.w	r2, [sp, #10]
 8029f34:	f8ad 300e 	strh.w	r3, [sp, #14]
 8029f38:	6803      	ldr	r3, [r0, #0]
 8029f3a:	689b      	ldr	r3, [r3, #8]
 8029f3c:	4798      	blx	r3
 8029f3e:	4b0d      	ldr	r3, [pc, #52]	; (8029f74 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8029f40:	a901      	add	r1, sp, #4
 8029f42:	6920      	ldr	r0, [r4, #16]
 8029f44:	9301      	str	r3, [sp, #4]
 8029f46:	2300      	movs	r3, #0
 8029f48:	f88d 5008 	strb.w	r5, [sp, #8]
 8029f4c:	f8ad 700a 	strh.w	r7, [sp, #10]
 8029f50:	f8ad 600c 	strh.w	r6, [sp, #12]
 8029f54:	f8ad 300e 	strh.w	r3, [sp, #14]
 8029f58:	6803      	ldr	r3, [r0, #0]
 8029f5a:	681b      	ldr	r3, [r3, #0]
 8029f5c:	4798      	blx	r3
 8029f5e:	b005      	add	sp, #20
 8029f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029f62:	2900      	cmp	r1, #0
 8029f64:	d1eb      	bne.n	8029f3e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8029f66:	80a2      	strh	r2, [r4, #4]
 8029f68:	80c6      	strh	r6, [r0, #6]
 8029f6a:	60a1      	str	r1, [r4, #8]
 8029f6c:	81a1      	strh	r1, [r4, #12]
 8029f6e:	73a1      	strb	r1, [r4, #14]
 8029f70:	e7e5      	b.n	8029f3e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8029f72:	bf00      	nop
 8029f74:	0802e7d4 	.word	0x0802e7d4
 8029f78:	0802e7fc 	.word	0x0802e7fc

08029f7c <__aeabi_atexit>:
 8029f7c:	460b      	mov	r3, r1
 8029f7e:	4601      	mov	r1, r0
 8029f80:	4618      	mov	r0, r3
 8029f82:	f000 b853 	b.w	802a02c <__cxa_atexit>

08029f86 <_ZdlPvj>:
 8029f86:	f000 b812 	b.w	8029fae <_ZdlPv>

08029f8a <__cxa_guard_acquire>:
 8029f8a:	6803      	ldr	r3, [r0, #0]
 8029f8c:	07db      	lsls	r3, r3, #31
 8029f8e:	d406      	bmi.n	8029f9e <__cxa_guard_acquire+0x14>
 8029f90:	7843      	ldrb	r3, [r0, #1]
 8029f92:	b103      	cbz	r3, 8029f96 <__cxa_guard_acquire+0xc>
 8029f94:	deff      	udf	#255	; 0xff
 8029f96:	2301      	movs	r3, #1
 8029f98:	7043      	strb	r3, [r0, #1]
 8029f9a:	4618      	mov	r0, r3
 8029f9c:	4770      	bx	lr
 8029f9e:	2000      	movs	r0, #0
 8029fa0:	4770      	bx	lr

08029fa2 <__cxa_guard_release>:
 8029fa2:	2301      	movs	r3, #1
 8029fa4:	6003      	str	r3, [r0, #0]
 8029fa6:	4770      	bx	lr

08029fa8 <__cxa_pure_virtual>:
 8029fa8:	b508      	push	{r3, lr}
 8029faa:	f000 f80f 	bl	8029fcc <_ZSt9terminatev>

08029fae <_ZdlPv>:
 8029fae:	f000 b989 	b.w	802a2c4 <free>

08029fb2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8029fb2:	b508      	push	{r3, lr}
 8029fb4:	4780      	blx	r0
 8029fb6:	f000 f80e 	bl	8029fd6 <abort>
	...

08029fbc <_ZSt13get_terminatev>:
 8029fbc:	4b02      	ldr	r3, [pc, #8]	; (8029fc8 <_ZSt13get_terminatev+0xc>)
 8029fbe:	6818      	ldr	r0, [r3, #0]
 8029fc0:	f3bf 8f5b 	dmb	ish
 8029fc4:	4770      	bx	lr
 8029fc6:	bf00      	nop
 8029fc8:	240000c8 	.word	0x240000c8

08029fcc <_ZSt9terminatev>:
 8029fcc:	b508      	push	{r3, lr}
 8029fce:	f7ff fff5 	bl	8029fbc <_ZSt13get_terminatev>
 8029fd2:	f7ff ffee 	bl	8029fb2 <_ZN10__cxxabiv111__terminateEPFvvE>

08029fd6 <abort>:
 8029fd6:	b508      	push	{r3, lr}
 8029fd8:	2006      	movs	r0, #6
 8029fda:	f000 fdcb 	bl	802ab74 <raise>
 8029fde:	2001      	movs	r0, #1
 8029fe0:	f7d7 fb6e 	bl	80016c0 <_exit>

08029fe4 <__assert_func>:
 8029fe4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8029fe6:	4614      	mov	r4, r2
 8029fe8:	461a      	mov	r2, r3
 8029fea:	4b09      	ldr	r3, [pc, #36]	; (802a010 <__assert_func+0x2c>)
 8029fec:	681b      	ldr	r3, [r3, #0]
 8029fee:	4605      	mov	r5, r0
 8029ff0:	68d8      	ldr	r0, [r3, #12]
 8029ff2:	b14c      	cbz	r4, 802a008 <__assert_func+0x24>
 8029ff4:	4b07      	ldr	r3, [pc, #28]	; (802a014 <__assert_func+0x30>)
 8029ff6:	9100      	str	r1, [sp, #0]
 8029ff8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8029ffc:	4906      	ldr	r1, [pc, #24]	; (802a018 <__assert_func+0x34>)
 8029ffe:	462b      	mov	r3, r5
 802a000:	f000 f8fe 	bl	802a200 <fiprintf>
 802a004:	f7ff ffe7 	bl	8029fd6 <abort>
 802a008:	4b04      	ldr	r3, [pc, #16]	; (802a01c <__assert_func+0x38>)
 802a00a:	461c      	mov	r4, r3
 802a00c:	e7f3      	b.n	8029ff6 <__assert_func+0x12>
 802a00e:	bf00      	nop
 802a010:	240000cc 	.word	0x240000cc
 802a014:	0802fb61 	.word	0x0802fb61
 802a018:	0802fb6e 	.word	0x0802fb6e
 802a01c:	0802fb9c 	.word	0x0802fb9c

0802a020 <atexit>:
 802a020:	2300      	movs	r3, #0
 802a022:	4601      	mov	r1, r0
 802a024:	461a      	mov	r2, r3
 802a026:	4618      	mov	r0, r3
 802a028:	f000 bed6 	b.w	802add8 <__register_exitproc>

0802a02c <__cxa_atexit>:
 802a02c:	b510      	push	{r4, lr}
 802a02e:	4c05      	ldr	r4, [pc, #20]	; (802a044 <__cxa_atexit+0x18>)
 802a030:	4613      	mov	r3, r2
 802a032:	b12c      	cbz	r4, 802a040 <__cxa_atexit+0x14>
 802a034:	460a      	mov	r2, r1
 802a036:	4601      	mov	r1, r0
 802a038:	2002      	movs	r0, #2
 802a03a:	f000 fecd 	bl	802add8 <__register_exitproc>
 802a03e:	bd10      	pop	{r4, pc}
 802a040:	4620      	mov	r0, r4
 802a042:	e7fc      	b.n	802a03e <__cxa_atexit+0x12>
 802a044:	0802add9 	.word	0x0802add9

0802a048 <__errno>:
 802a048:	4b01      	ldr	r3, [pc, #4]	; (802a050 <__errno+0x8>)
 802a04a:	6818      	ldr	r0, [r3, #0]
 802a04c:	4770      	bx	lr
 802a04e:	bf00      	nop
 802a050:	240000cc 	.word	0x240000cc

0802a054 <std>:
 802a054:	2300      	movs	r3, #0
 802a056:	b510      	push	{r4, lr}
 802a058:	4604      	mov	r4, r0
 802a05a:	e9c0 3300 	strd	r3, r3, [r0]
 802a05e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802a062:	6083      	str	r3, [r0, #8]
 802a064:	8181      	strh	r1, [r0, #12]
 802a066:	6643      	str	r3, [r0, #100]	; 0x64
 802a068:	81c2      	strh	r2, [r0, #14]
 802a06a:	6183      	str	r3, [r0, #24]
 802a06c:	4619      	mov	r1, r3
 802a06e:	2208      	movs	r2, #8
 802a070:	305c      	adds	r0, #92	; 0x5c
 802a072:	f000 f93d 	bl	802a2f0 <memset>
 802a076:	4b05      	ldr	r3, [pc, #20]	; (802a08c <std+0x38>)
 802a078:	6263      	str	r3, [r4, #36]	; 0x24
 802a07a:	4b05      	ldr	r3, [pc, #20]	; (802a090 <std+0x3c>)
 802a07c:	62a3      	str	r3, [r4, #40]	; 0x28
 802a07e:	4b05      	ldr	r3, [pc, #20]	; (802a094 <std+0x40>)
 802a080:	62e3      	str	r3, [r4, #44]	; 0x2c
 802a082:	4b05      	ldr	r3, [pc, #20]	; (802a098 <std+0x44>)
 802a084:	6224      	str	r4, [r4, #32]
 802a086:	6323      	str	r3, [r4, #48]	; 0x30
 802a088:	bd10      	pop	{r4, pc}
 802a08a:	bf00      	nop
 802a08c:	0802abad 	.word	0x0802abad
 802a090:	0802abcf 	.word	0x0802abcf
 802a094:	0802ac07 	.word	0x0802ac07
 802a098:	0802ac2b 	.word	0x0802ac2b

0802a09c <_cleanup_r>:
 802a09c:	4901      	ldr	r1, [pc, #4]	; (802a0a4 <_cleanup_r+0x8>)
 802a09e:	f000 b8c1 	b.w	802a224 <_fwalk_reent>
 802a0a2:	bf00      	nop
 802a0a4:	0802afc9 	.word	0x0802afc9

0802a0a8 <__sfmoreglue>:
 802a0a8:	b570      	push	{r4, r5, r6, lr}
 802a0aa:	1e4a      	subs	r2, r1, #1
 802a0ac:	2568      	movs	r5, #104	; 0x68
 802a0ae:	4355      	muls	r5, r2
 802a0b0:	460e      	mov	r6, r1
 802a0b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802a0b6:	f000 f973 	bl	802a3a0 <_malloc_r>
 802a0ba:	4604      	mov	r4, r0
 802a0bc:	b140      	cbz	r0, 802a0d0 <__sfmoreglue+0x28>
 802a0be:	2100      	movs	r1, #0
 802a0c0:	e9c0 1600 	strd	r1, r6, [r0]
 802a0c4:	300c      	adds	r0, #12
 802a0c6:	60a0      	str	r0, [r4, #8]
 802a0c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802a0cc:	f000 f910 	bl	802a2f0 <memset>
 802a0d0:	4620      	mov	r0, r4
 802a0d2:	bd70      	pop	{r4, r5, r6, pc}

0802a0d4 <__sfp_lock_acquire>:
 802a0d4:	4801      	ldr	r0, [pc, #4]	; (802a0dc <__sfp_lock_acquire+0x8>)
 802a0d6:	f000 b8ea 	b.w	802a2ae <__retarget_lock_acquire_recursive>
 802a0da:	bf00      	nop
 802a0dc:	2400bb98 	.word	0x2400bb98

0802a0e0 <__sfp_lock_release>:
 802a0e0:	4801      	ldr	r0, [pc, #4]	; (802a0e8 <__sfp_lock_release+0x8>)
 802a0e2:	f000 b8e6 	b.w	802a2b2 <__retarget_lock_release_recursive>
 802a0e6:	bf00      	nop
 802a0e8:	2400bb98 	.word	0x2400bb98

0802a0ec <__sinit_lock_acquire>:
 802a0ec:	4801      	ldr	r0, [pc, #4]	; (802a0f4 <__sinit_lock_acquire+0x8>)
 802a0ee:	f000 b8de 	b.w	802a2ae <__retarget_lock_acquire_recursive>
 802a0f2:	bf00      	nop
 802a0f4:	2400bb93 	.word	0x2400bb93

0802a0f8 <__sinit_lock_release>:
 802a0f8:	4801      	ldr	r0, [pc, #4]	; (802a100 <__sinit_lock_release+0x8>)
 802a0fa:	f000 b8da 	b.w	802a2b2 <__retarget_lock_release_recursive>
 802a0fe:	bf00      	nop
 802a100:	2400bb93 	.word	0x2400bb93

0802a104 <__sinit>:
 802a104:	b510      	push	{r4, lr}
 802a106:	4604      	mov	r4, r0
 802a108:	f7ff fff0 	bl	802a0ec <__sinit_lock_acquire>
 802a10c:	69a3      	ldr	r3, [r4, #24]
 802a10e:	b11b      	cbz	r3, 802a118 <__sinit+0x14>
 802a110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802a114:	f7ff bff0 	b.w	802a0f8 <__sinit_lock_release>
 802a118:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802a11c:	6523      	str	r3, [r4, #80]	; 0x50
 802a11e:	4b13      	ldr	r3, [pc, #76]	; (802a16c <__sinit+0x68>)
 802a120:	4a13      	ldr	r2, [pc, #76]	; (802a170 <__sinit+0x6c>)
 802a122:	681b      	ldr	r3, [r3, #0]
 802a124:	62a2      	str	r2, [r4, #40]	; 0x28
 802a126:	42a3      	cmp	r3, r4
 802a128:	bf04      	itt	eq
 802a12a:	2301      	moveq	r3, #1
 802a12c:	61a3      	streq	r3, [r4, #24]
 802a12e:	4620      	mov	r0, r4
 802a130:	f000 f820 	bl	802a174 <__sfp>
 802a134:	6060      	str	r0, [r4, #4]
 802a136:	4620      	mov	r0, r4
 802a138:	f000 f81c 	bl	802a174 <__sfp>
 802a13c:	60a0      	str	r0, [r4, #8]
 802a13e:	4620      	mov	r0, r4
 802a140:	f000 f818 	bl	802a174 <__sfp>
 802a144:	2200      	movs	r2, #0
 802a146:	60e0      	str	r0, [r4, #12]
 802a148:	2104      	movs	r1, #4
 802a14a:	6860      	ldr	r0, [r4, #4]
 802a14c:	f7ff ff82 	bl	802a054 <std>
 802a150:	68a0      	ldr	r0, [r4, #8]
 802a152:	2201      	movs	r2, #1
 802a154:	2109      	movs	r1, #9
 802a156:	f7ff ff7d 	bl	802a054 <std>
 802a15a:	68e0      	ldr	r0, [r4, #12]
 802a15c:	2202      	movs	r2, #2
 802a15e:	2112      	movs	r1, #18
 802a160:	f7ff ff78 	bl	802a054 <std>
 802a164:	2301      	movs	r3, #1
 802a166:	61a3      	str	r3, [r4, #24]
 802a168:	e7d2      	b.n	802a110 <__sinit+0xc>
 802a16a:	bf00      	nop
 802a16c:	0802fc00 	.word	0x0802fc00
 802a170:	0802a09d 	.word	0x0802a09d

0802a174 <__sfp>:
 802a174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a176:	4607      	mov	r7, r0
 802a178:	f7ff ffac 	bl	802a0d4 <__sfp_lock_acquire>
 802a17c:	4b1e      	ldr	r3, [pc, #120]	; (802a1f8 <__sfp+0x84>)
 802a17e:	681e      	ldr	r6, [r3, #0]
 802a180:	69b3      	ldr	r3, [r6, #24]
 802a182:	b913      	cbnz	r3, 802a18a <__sfp+0x16>
 802a184:	4630      	mov	r0, r6
 802a186:	f7ff ffbd 	bl	802a104 <__sinit>
 802a18a:	3648      	adds	r6, #72	; 0x48
 802a18c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802a190:	3b01      	subs	r3, #1
 802a192:	d503      	bpl.n	802a19c <__sfp+0x28>
 802a194:	6833      	ldr	r3, [r6, #0]
 802a196:	b30b      	cbz	r3, 802a1dc <__sfp+0x68>
 802a198:	6836      	ldr	r6, [r6, #0]
 802a19a:	e7f7      	b.n	802a18c <__sfp+0x18>
 802a19c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802a1a0:	b9d5      	cbnz	r5, 802a1d8 <__sfp+0x64>
 802a1a2:	4b16      	ldr	r3, [pc, #88]	; (802a1fc <__sfp+0x88>)
 802a1a4:	60e3      	str	r3, [r4, #12]
 802a1a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802a1aa:	6665      	str	r5, [r4, #100]	; 0x64
 802a1ac:	f000 f87e 	bl	802a2ac <__retarget_lock_init_recursive>
 802a1b0:	f7ff ff96 	bl	802a0e0 <__sfp_lock_release>
 802a1b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802a1b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802a1bc:	6025      	str	r5, [r4, #0]
 802a1be:	61a5      	str	r5, [r4, #24]
 802a1c0:	2208      	movs	r2, #8
 802a1c2:	4629      	mov	r1, r5
 802a1c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802a1c8:	f000 f892 	bl	802a2f0 <memset>
 802a1cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802a1d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802a1d4:	4620      	mov	r0, r4
 802a1d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802a1d8:	3468      	adds	r4, #104	; 0x68
 802a1da:	e7d9      	b.n	802a190 <__sfp+0x1c>
 802a1dc:	2104      	movs	r1, #4
 802a1de:	4638      	mov	r0, r7
 802a1e0:	f7ff ff62 	bl	802a0a8 <__sfmoreglue>
 802a1e4:	4604      	mov	r4, r0
 802a1e6:	6030      	str	r0, [r6, #0]
 802a1e8:	2800      	cmp	r0, #0
 802a1ea:	d1d5      	bne.n	802a198 <__sfp+0x24>
 802a1ec:	f7ff ff78 	bl	802a0e0 <__sfp_lock_release>
 802a1f0:	230c      	movs	r3, #12
 802a1f2:	603b      	str	r3, [r7, #0]
 802a1f4:	e7ee      	b.n	802a1d4 <__sfp+0x60>
 802a1f6:	bf00      	nop
 802a1f8:	0802fc00 	.word	0x0802fc00
 802a1fc:	ffff0001 	.word	0xffff0001

0802a200 <fiprintf>:
 802a200:	b40e      	push	{r1, r2, r3}
 802a202:	b503      	push	{r0, r1, lr}
 802a204:	4601      	mov	r1, r0
 802a206:	ab03      	add	r3, sp, #12
 802a208:	4805      	ldr	r0, [pc, #20]	; (802a220 <fiprintf+0x20>)
 802a20a:	f853 2b04 	ldr.w	r2, [r3], #4
 802a20e:	6800      	ldr	r0, [r0, #0]
 802a210:	9301      	str	r3, [sp, #4]
 802a212:	f000 f949 	bl	802a4a8 <_vfiprintf_r>
 802a216:	b002      	add	sp, #8
 802a218:	f85d eb04 	ldr.w	lr, [sp], #4
 802a21c:	b003      	add	sp, #12
 802a21e:	4770      	bx	lr
 802a220:	240000cc 	.word	0x240000cc

0802a224 <_fwalk_reent>:
 802a224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802a228:	4606      	mov	r6, r0
 802a22a:	4688      	mov	r8, r1
 802a22c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802a230:	2700      	movs	r7, #0
 802a232:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802a236:	f1b9 0901 	subs.w	r9, r9, #1
 802a23a:	d505      	bpl.n	802a248 <_fwalk_reent+0x24>
 802a23c:	6824      	ldr	r4, [r4, #0]
 802a23e:	2c00      	cmp	r4, #0
 802a240:	d1f7      	bne.n	802a232 <_fwalk_reent+0xe>
 802a242:	4638      	mov	r0, r7
 802a244:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802a248:	89ab      	ldrh	r3, [r5, #12]
 802a24a:	2b01      	cmp	r3, #1
 802a24c:	d907      	bls.n	802a25e <_fwalk_reent+0x3a>
 802a24e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802a252:	3301      	adds	r3, #1
 802a254:	d003      	beq.n	802a25e <_fwalk_reent+0x3a>
 802a256:	4629      	mov	r1, r5
 802a258:	4630      	mov	r0, r6
 802a25a:	47c0      	blx	r8
 802a25c:	4307      	orrs	r7, r0
 802a25e:	3568      	adds	r5, #104	; 0x68
 802a260:	e7e9      	b.n	802a236 <_fwalk_reent+0x12>
	...

0802a264 <__libc_init_array>:
 802a264:	b570      	push	{r4, r5, r6, lr}
 802a266:	4d0d      	ldr	r5, [pc, #52]	; (802a29c <__libc_init_array+0x38>)
 802a268:	4c0d      	ldr	r4, [pc, #52]	; (802a2a0 <__libc_init_array+0x3c>)
 802a26a:	1b64      	subs	r4, r4, r5
 802a26c:	10a4      	asrs	r4, r4, #2
 802a26e:	2600      	movs	r6, #0
 802a270:	42a6      	cmp	r6, r4
 802a272:	d109      	bne.n	802a288 <__libc_init_array+0x24>
 802a274:	4d0b      	ldr	r5, [pc, #44]	; (802a2a4 <__libc_init_array+0x40>)
 802a276:	4c0c      	ldr	r4, [pc, #48]	; (802a2a8 <__libc_init_array+0x44>)
 802a278:	f000 ff98 	bl	802b1ac <_init>
 802a27c:	1b64      	subs	r4, r4, r5
 802a27e:	10a4      	asrs	r4, r4, #2
 802a280:	2600      	movs	r6, #0
 802a282:	42a6      	cmp	r6, r4
 802a284:	d105      	bne.n	802a292 <__libc_init_array+0x2e>
 802a286:	bd70      	pop	{r4, r5, r6, pc}
 802a288:	f855 3b04 	ldr.w	r3, [r5], #4
 802a28c:	4798      	blx	r3
 802a28e:	3601      	adds	r6, #1
 802a290:	e7ee      	b.n	802a270 <__libc_init_array+0xc>
 802a292:	f855 3b04 	ldr.w	r3, [r5], #4
 802a296:	4798      	blx	r3
 802a298:	3601      	adds	r6, #1
 802a29a:	e7f2      	b.n	802a282 <__libc_init_array+0x1e>
 802a29c:	0802fc64 	.word	0x0802fc64
 802a2a0:	0802fc64 	.word	0x0802fc64
 802a2a4:	0802fc64 	.word	0x0802fc64
 802a2a8:	0802fc78 	.word	0x0802fc78

0802a2ac <__retarget_lock_init_recursive>:
 802a2ac:	4770      	bx	lr

0802a2ae <__retarget_lock_acquire_recursive>:
 802a2ae:	4770      	bx	lr

0802a2b0 <__retarget_lock_release>:
 802a2b0:	4770      	bx	lr

0802a2b2 <__retarget_lock_release_recursive>:
 802a2b2:	4770      	bx	lr

0802a2b4 <malloc>:
 802a2b4:	4b02      	ldr	r3, [pc, #8]	; (802a2c0 <malloc+0xc>)
 802a2b6:	4601      	mov	r1, r0
 802a2b8:	6818      	ldr	r0, [r3, #0]
 802a2ba:	f000 b871 	b.w	802a3a0 <_malloc_r>
 802a2be:	bf00      	nop
 802a2c0:	240000cc 	.word	0x240000cc

0802a2c4 <free>:
 802a2c4:	4b02      	ldr	r3, [pc, #8]	; (802a2d0 <free+0xc>)
 802a2c6:	4601      	mov	r1, r0
 802a2c8:	6818      	ldr	r0, [r3, #0]
 802a2ca:	f000 b819 	b.w	802a300 <_free_r>
 802a2ce:	bf00      	nop
 802a2d0:	240000cc 	.word	0x240000cc

0802a2d4 <memcpy>:
 802a2d4:	440a      	add	r2, r1
 802a2d6:	4291      	cmp	r1, r2
 802a2d8:	f100 33ff 	add.w	r3, r0, #4294967295
 802a2dc:	d100      	bne.n	802a2e0 <memcpy+0xc>
 802a2de:	4770      	bx	lr
 802a2e0:	b510      	push	{r4, lr}
 802a2e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 802a2e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 802a2ea:	4291      	cmp	r1, r2
 802a2ec:	d1f9      	bne.n	802a2e2 <memcpy+0xe>
 802a2ee:	bd10      	pop	{r4, pc}

0802a2f0 <memset>:
 802a2f0:	4402      	add	r2, r0
 802a2f2:	4603      	mov	r3, r0
 802a2f4:	4293      	cmp	r3, r2
 802a2f6:	d100      	bne.n	802a2fa <memset+0xa>
 802a2f8:	4770      	bx	lr
 802a2fa:	f803 1b01 	strb.w	r1, [r3], #1
 802a2fe:	e7f9      	b.n	802a2f4 <memset+0x4>

0802a300 <_free_r>:
 802a300:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802a302:	2900      	cmp	r1, #0
 802a304:	d048      	beq.n	802a398 <_free_r+0x98>
 802a306:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802a30a:	9001      	str	r0, [sp, #4]
 802a30c:	2b00      	cmp	r3, #0
 802a30e:	f1a1 0404 	sub.w	r4, r1, #4
 802a312:	bfb8      	it	lt
 802a314:	18e4      	addlt	r4, r4, r3
 802a316:	f000 ff09 	bl	802b12c <__malloc_lock>
 802a31a:	4a20      	ldr	r2, [pc, #128]	; (802a39c <_free_r+0x9c>)
 802a31c:	9801      	ldr	r0, [sp, #4]
 802a31e:	6813      	ldr	r3, [r2, #0]
 802a320:	4615      	mov	r5, r2
 802a322:	b933      	cbnz	r3, 802a332 <_free_r+0x32>
 802a324:	6063      	str	r3, [r4, #4]
 802a326:	6014      	str	r4, [r2, #0]
 802a328:	b003      	add	sp, #12
 802a32a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802a32e:	f000 bf03 	b.w	802b138 <__malloc_unlock>
 802a332:	42a3      	cmp	r3, r4
 802a334:	d90b      	bls.n	802a34e <_free_r+0x4e>
 802a336:	6821      	ldr	r1, [r4, #0]
 802a338:	1862      	adds	r2, r4, r1
 802a33a:	4293      	cmp	r3, r2
 802a33c:	bf04      	itt	eq
 802a33e:	681a      	ldreq	r2, [r3, #0]
 802a340:	685b      	ldreq	r3, [r3, #4]
 802a342:	6063      	str	r3, [r4, #4]
 802a344:	bf04      	itt	eq
 802a346:	1852      	addeq	r2, r2, r1
 802a348:	6022      	streq	r2, [r4, #0]
 802a34a:	602c      	str	r4, [r5, #0]
 802a34c:	e7ec      	b.n	802a328 <_free_r+0x28>
 802a34e:	461a      	mov	r2, r3
 802a350:	685b      	ldr	r3, [r3, #4]
 802a352:	b10b      	cbz	r3, 802a358 <_free_r+0x58>
 802a354:	42a3      	cmp	r3, r4
 802a356:	d9fa      	bls.n	802a34e <_free_r+0x4e>
 802a358:	6811      	ldr	r1, [r2, #0]
 802a35a:	1855      	adds	r5, r2, r1
 802a35c:	42a5      	cmp	r5, r4
 802a35e:	d10b      	bne.n	802a378 <_free_r+0x78>
 802a360:	6824      	ldr	r4, [r4, #0]
 802a362:	4421      	add	r1, r4
 802a364:	1854      	adds	r4, r2, r1
 802a366:	42a3      	cmp	r3, r4
 802a368:	6011      	str	r1, [r2, #0]
 802a36a:	d1dd      	bne.n	802a328 <_free_r+0x28>
 802a36c:	681c      	ldr	r4, [r3, #0]
 802a36e:	685b      	ldr	r3, [r3, #4]
 802a370:	6053      	str	r3, [r2, #4]
 802a372:	4421      	add	r1, r4
 802a374:	6011      	str	r1, [r2, #0]
 802a376:	e7d7      	b.n	802a328 <_free_r+0x28>
 802a378:	d902      	bls.n	802a380 <_free_r+0x80>
 802a37a:	230c      	movs	r3, #12
 802a37c:	6003      	str	r3, [r0, #0]
 802a37e:	e7d3      	b.n	802a328 <_free_r+0x28>
 802a380:	6825      	ldr	r5, [r4, #0]
 802a382:	1961      	adds	r1, r4, r5
 802a384:	428b      	cmp	r3, r1
 802a386:	bf04      	itt	eq
 802a388:	6819      	ldreq	r1, [r3, #0]
 802a38a:	685b      	ldreq	r3, [r3, #4]
 802a38c:	6063      	str	r3, [r4, #4]
 802a38e:	bf04      	itt	eq
 802a390:	1949      	addeq	r1, r1, r5
 802a392:	6021      	streq	r1, [r4, #0]
 802a394:	6054      	str	r4, [r2, #4]
 802a396:	e7c7      	b.n	802a328 <_free_r+0x28>
 802a398:	b003      	add	sp, #12
 802a39a:	bd30      	pop	{r4, r5, pc}
 802a39c:	2400b6cc 	.word	0x2400b6cc

0802a3a0 <_malloc_r>:
 802a3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a3a2:	1ccd      	adds	r5, r1, #3
 802a3a4:	f025 0503 	bic.w	r5, r5, #3
 802a3a8:	3508      	adds	r5, #8
 802a3aa:	2d0c      	cmp	r5, #12
 802a3ac:	bf38      	it	cc
 802a3ae:	250c      	movcc	r5, #12
 802a3b0:	2d00      	cmp	r5, #0
 802a3b2:	4606      	mov	r6, r0
 802a3b4:	db01      	blt.n	802a3ba <_malloc_r+0x1a>
 802a3b6:	42a9      	cmp	r1, r5
 802a3b8:	d903      	bls.n	802a3c2 <_malloc_r+0x22>
 802a3ba:	230c      	movs	r3, #12
 802a3bc:	6033      	str	r3, [r6, #0]
 802a3be:	2000      	movs	r0, #0
 802a3c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802a3c2:	f000 feb3 	bl	802b12c <__malloc_lock>
 802a3c6:	4921      	ldr	r1, [pc, #132]	; (802a44c <_malloc_r+0xac>)
 802a3c8:	680a      	ldr	r2, [r1, #0]
 802a3ca:	4614      	mov	r4, r2
 802a3cc:	b99c      	cbnz	r4, 802a3f6 <_malloc_r+0x56>
 802a3ce:	4f20      	ldr	r7, [pc, #128]	; (802a450 <_malloc_r+0xb0>)
 802a3d0:	683b      	ldr	r3, [r7, #0]
 802a3d2:	b923      	cbnz	r3, 802a3de <_malloc_r+0x3e>
 802a3d4:	4621      	mov	r1, r4
 802a3d6:	4630      	mov	r0, r6
 802a3d8:	f000 fb94 	bl	802ab04 <_sbrk_r>
 802a3dc:	6038      	str	r0, [r7, #0]
 802a3de:	4629      	mov	r1, r5
 802a3e0:	4630      	mov	r0, r6
 802a3e2:	f000 fb8f 	bl	802ab04 <_sbrk_r>
 802a3e6:	1c43      	adds	r3, r0, #1
 802a3e8:	d123      	bne.n	802a432 <_malloc_r+0x92>
 802a3ea:	230c      	movs	r3, #12
 802a3ec:	6033      	str	r3, [r6, #0]
 802a3ee:	4630      	mov	r0, r6
 802a3f0:	f000 fea2 	bl	802b138 <__malloc_unlock>
 802a3f4:	e7e3      	b.n	802a3be <_malloc_r+0x1e>
 802a3f6:	6823      	ldr	r3, [r4, #0]
 802a3f8:	1b5b      	subs	r3, r3, r5
 802a3fa:	d417      	bmi.n	802a42c <_malloc_r+0x8c>
 802a3fc:	2b0b      	cmp	r3, #11
 802a3fe:	d903      	bls.n	802a408 <_malloc_r+0x68>
 802a400:	6023      	str	r3, [r4, #0]
 802a402:	441c      	add	r4, r3
 802a404:	6025      	str	r5, [r4, #0]
 802a406:	e004      	b.n	802a412 <_malloc_r+0x72>
 802a408:	6863      	ldr	r3, [r4, #4]
 802a40a:	42a2      	cmp	r2, r4
 802a40c:	bf0c      	ite	eq
 802a40e:	600b      	streq	r3, [r1, #0]
 802a410:	6053      	strne	r3, [r2, #4]
 802a412:	4630      	mov	r0, r6
 802a414:	f000 fe90 	bl	802b138 <__malloc_unlock>
 802a418:	f104 000b 	add.w	r0, r4, #11
 802a41c:	1d23      	adds	r3, r4, #4
 802a41e:	f020 0007 	bic.w	r0, r0, #7
 802a422:	1ac2      	subs	r2, r0, r3
 802a424:	d0cc      	beq.n	802a3c0 <_malloc_r+0x20>
 802a426:	1a1b      	subs	r3, r3, r0
 802a428:	50a3      	str	r3, [r4, r2]
 802a42a:	e7c9      	b.n	802a3c0 <_malloc_r+0x20>
 802a42c:	4622      	mov	r2, r4
 802a42e:	6864      	ldr	r4, [r4, #4]
 802a430:	e7cc      	b.n	802a3cc <_malloc_r+0x2c>
 802a432:	1cc4      	adds	r4, r0, #3
 802a434:	f024 0403 	bic.w	r4, r4, #3
 802a438:	42a0      	cmp	r0, r4
 802a43a:	d0e3      	beq.n	802a404 <_malloc_r+0x64>
 802a43c:	1a21      	subs	r1, r4, r0
 802a43e:	4630      	mov	r0, r6
 802a440:	f000 fb60 	bl	802ab04 <_sbrk_r>
 802a444:	3001      	adds	r0, #1
 802a446:	d1dd      	bne.n	802a404 <_malloc_r+0x64>
 802a448:	e7cf      	b.n	802a3ea <_malloc_r+0x4a>
 802a44a:	bf00      	nop
 802a44c:	2400b6cc 	.word	0x2400b6cc
 802a450:	2400b6d0 	.word	0x2400b6d0

0802a454 <__sfputc_r>:
 802a454:	6893      	ldr	r3, [r2, #8]
 802a456:	3b01      	subs	r3, #1
 802a458:	2b00      	cmp	r3, #0
 802a45a:	b410      	push	{r4}
 802a45c:	6093      	str	r3, [r2, #8]
 802a45e:	da08      	bge.n	802a472 <__sfputc_r+0x1e>
 802a460:	6994      	ldr	r4, [r2, #24]
 802a462:	42a3      	cmp	r3, r4
 802a464:	db01      	blt.n	802a46a <__sfputc_r+0x16>
 802a466:	290a      	cmp	r1, #10
 802a468:	d103      	bne.n	802a472 <__sfputc_r+0x1e>
 802a46a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802a46e:	f000 bbe1 	b.w	802ac34 <__swbuf_r>
 802a472:	6813      	ldr	r3, [r2, #0]
 802a474:	1c58      	adds	r0, r3, #1
 802a476:	6010      	str	r0, [r2, #0]
 802a478:	7019      	strb	r1, [r3, #0]
 802a47a:	4608      	mov	r0, r1
 802a47c:	f85d 4b04 	ldr.w	r4, [sp], #4
 802a480:	4770      	bx	lr

0802a482 <__sfputs_r>:
 802a482:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a484:	4606      	mov	r6, r0
 802a486:	460f      	mov	r7, r1
 802a488:	4614      	mov	r4, r2
 802a48a:	18d5      	adds	r5, r2, r3
 802a48c:	42ac      	cmp	r4, r5
 802a48e:	d101      	bne.n	802a494 <__sfputs_r+0x12>
 802a490:	2000      	movs	r0, #0
 802a492:	e007      	b.n	802a4a4 <__sfputs_r+0x22>
 802a494:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a498:	463a      	mov	r2, r7
 802a49a:	4630      	mov	r0, r6
 802a49c:	f7ff ffda 	bl	802a454 <__sfputc_r>
 802a4a0:	1c43      	adds	r3, r0, #1
 802a4a2:	d1f3      	bne.n	802a48c <__sfputs_r+0xa>
 802a4a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802a4a8 <_vfiprintf_r>:
 802a4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a4ac:	460d      	mov	r5, r1
 802a4ae:	b09d      	sub	sp, #116	; 0x74
 802a4b0:	4614      	mov	r4, r2
 802a4b2:	4698      	mov	r8, r3
 802a4b4:	4606      	mov	r6, r0
 802a4b6:	b118      	cbz	r0, 802a4c0 <_vfiprintf_r+0x18>
 802a4b8:	6983      	ldr	r3, [r0, #24]
 802a4ba:	b90b      	cbnz	r3, 802a4c0 <_vfiprintf_r+0x18>
 802a4bc:	f7ff fe22 	bl	802a104 <__sinit>
 802a4c0:	4b89      	ldr	r3, [pc, #548]	; (802a6e8 <_vfiprintf_r+0x240>)
 802a4c2:	429d      	cmp	r5, r3
 802a4c4:	d11b      	bne.n	802a4fe <_vfiprintf_r+0x56>
 802a4c6:	6875      	ldr	r5, [r6, #4]
 802a4c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802a4ca:	07d9      	lsls	r1, r3, #31
 802a4cc:	d405      	bmi.n	802a4da <_vfiprintf_r+0x32>
 802a4ce:	89ab      	ldrh	r3, [r5, #12]
 802a4d0:	059a      	lsls	r2, r3, #22
 802a4d2:	d402      	bmi.n	802a4da <_vfiprintf_r+0x32>
 802a4d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802a4d6:	f7ff feea 	bl	802a2ae <__retarget_lock_acquire_recursive>
 802a4da:	89ab      	ldrh	r3, [r5, #12]
 802a4dc:	071b      	lsls	r3, r3, #28
 802a4de:	d501      	bpl.n	802a4e4 <_vfiprintf_r+0x3c>
 802a4e0:	692b      	ldr	r3, [r5, #16]
 802a4e2:	b9eb      	cbnz	r3, 802a520 <_vfiprintf_r+0x78>
 802a4e4:	4629      	mov	r1, r5
 802a4e6:	4630      	mov	r0, r6
 802a4e8:	f000 fc08 	bl	802acfc <__swsetup_r>
 802a4ec:	b1c0      	cbz	r0, 802a520 <_vfiprintf_r+0x78>
 802a4ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802a4f0:	07dc      	lsls	r4, r3, #31
 802a4f2:	d50e      	bpl.n	802a512 <_vfiprintf_r+0x6a>
 802a4f4:	f04f 30ff 	mov.w	r0, #4294967295
 802a4f8:	b01d      	add	sp, #116	; 0x74
 802a4fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a4fe:	4b7b      	ldr	r3, [pc, #492]	; (802a6ec <_vfiprintf_r+0x244>)
 802a500:	429d      	cmp	r5, r3
 802a502:	d101      	bne.n	802a508 <_vfiprintf_r+0x60>
 802a504:	68b5      	ldr	r5, [r6, #8]
 802a506:	e7df      	b.n	802a4c8 <_vfiprintf_r+0x20>
 802a508:	4b79      	ldr	r3, [pc, #484]	; (802a6f0 <_vfiprintf_r+0x248>)
 802a50a:	429d      	cmp	r5, r3
 802a50c:	bf08      	it	eq
 802a50e:	68f5      	ldreq	r5, [r6, #12]
 802a510:	e7da      	b.n	802a4c8 <_vfiprintf_r+0x20>
 802a512:	89ab      	ldrh	r3, [r5, #12]
 802a514:	0598      	lsls	r0, r3, #22
 802a516:	d4ed      	bmi.n	802a4f4 <_vfiprintf_r+0x4c>
 802a518:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802a51a:	f7ff feca 	bl	802a2b2 <__retarget_lock_release_recursive>
 802a51e:	e7e9      	b.n	802a4f4 <_vfiprintf_r+0x4c>
 802a520:	2300      	movs	r3, #0
 802a522:	9309      	str	r3, [sp, #36]	; 0x24
 802a524:	2320      	movs	r3, #32
 802a526:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802a52a:	f8cd 800c 	str.w	r8, [sp, #12]
 802a52e:	2330      	movs	r3, #48	; 0x30
 802a530:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802a6f4 <_vfiprintf_r+0x24c>
 802a534:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802a538:	f04f 0901 	mov.w	r9, #1
 802a53c:	4623      	mov	r3, r4
 802a53e:	469a      	mov	sl, r3
 802a540:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a544:	b10a      	cbz	r2, 802a54a <_vfiprintf_r+0xa2>
 802a546:	2a25      	cmp	r2, #37	; 0x25
 802a548:	d1f9      	bne.n	802a53e <_vfiprintf_r+0x96>
 802a54a:	ebba 0b04 	subs.w	fp, sl, r4
 802a54e:	d00b      	beq.n	802a568 <_vfiprintf_r+0xc0>
 802a550:	465b      	mov	r3, fp
 802a552:	4622      	mov	r2, r4
 802a554:	4629      	mov	r1, r5
 802a556:	4630      	mov	r0, r6
 802a558:	f7ff ff93 	bl	802a482 <__sfputs_r>
 802a55c:	3001      	adds	r0, #1
 802a55e:	f000 80aa 	beq.w	802a6b6 <_vfiprintf_r+0x20e>
 802a562:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802a564:	445a      	add	r2, fp
 802a566:	9209      	str	r2, [sp, #36]	; 0x24
 802a568:	f89a 3000 	ldrb.w	r3, [sl]
 802a56c:	2b00      	cmp	r3, #0
 802a56e:	f000 80a2 	beq.w	802a6b6 <_vfiprintf_r+0x20e>
 802a572:	2300      	movs	r3, #0
 802a574:	f04f 32ff 	mov.w	r2, #4294967295
 802a578:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802a57c:	f10a 0a01 	add.w	sl, sl, #1
 802a580:	9304      	str	r3, [sp, #16]
 802a582:	9307      	str	r3, [sp, #28]
 802a584:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802a588:	931a      	str	r3, [sp, #104]	; 0x68
 802a58a:	4654      	mov	r4, sl
 802a58c:	2205      	movs	r2, #5
 802a58e:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a592:	4858      	ldr	r0, [pc, #352]	; (802a6f4 <_vfiprintf_r+0x24c>)
 802a594:	f7d5 fea4 	bl	80002e0 <memchr>
 802a598:	9a04      	ldr	r2, [sp, #16]
 802a59a:	b9d8      	cbnz	r0, 802a5d4 <_vfiprintf_r+0x12c>
 802a59c:	06d1      	lsls	r1, r2, #27
 802a59e:	bf44      	itt	mi
 802a5a0:	2320      	movmi	r3, #32
 802a5a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802a5a6:	0713      	lsls	r3, r2, #28
 802a5a8:	bf44      	itt	mi
 802a5aa:	232b      	movmi	r3, #43	; 0x2b
 802a5ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802a5b0:	f89a 3000 	ldrb.w	r3, [sl]
 802a5b4:	2b2a      	cmp	r3, #42	; 0x2a
 802a5b6:	d015      	beq.n	802a5e4 <_vfiprintf_r+0x13c>
 802a5b8:	9a07      	ldr	r2, [sp, #28]
 802a5ba:	4654      	mov	r4, sl
 802a5bc:	2000      	movs	r0, #0
 802a5be:	f04f 0c0a 	mov.w	ip, #10
 802a5c2:	4621      	mov	r1, r4
 802a5c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 802a5c8:	3b30      	subs	r3, #48	; 0x30
 802a5ca:	2b09      	cmp	r3, #9
 802a5cc:	d94e      	bls.n	802a66c <_vfiprintf_r+0x1c4>
 802a5ce:	b1b0      	cbz	r0, 802a5fe <_vfiprintf_r+0x156>
 802a5d0:	9207      	str	r2, [sp, #28]
 802a5d2:	e014      	b.n	802a5fe <_vfiprintf_r+0x156>
 802a5d4:	eba0 0308 	sub.w	r3, r0, r8
 802a5d8:	fa09 f303 	lsl.w	r3, r9, r3
 802a5dc:	4313      	orrs	r3, r2
 802a5de:	9304      	str	r3, [sp, #16]
 802a5e0:	46a2      	mov	sl, r4
 802a5e2:	e7d2      	b.n	802a58a <_vfiprintf_r+0xe2>
 802a5e4:	9b03      	ldr	r3, [sp, #12]
 802a5e6:	1d19      	adds	r1, r3, #4
 802a5e8:	681b      	ldr	r3, [r3, #0]
 802a5ea:	9103      	str	r1, [sp, #12]
 802a5ec:	2b00      	cmp	r3, #0
 802a5ee:	bfbb      	ittet	lt
 802a5f0:	425b      	neglt	r3, r3
 802a5f2:	f042 0202 	orrlt.w	r2, r2, #2
 802a5f6:	9307      	strge	r3, [sp, #28]
 802a5f8:	9307      	strlt	r3, [sp, #28]
 802a5fa:	bfb8      	it	lt
 802a5fc:	9204      	strlt	r2, [sp, #16]
 802a5fe:	7823      	ldrb	r3, [r4, #0]
 802a600:	2b2e      	cmp	r3, #46	; 0x2e
 802a602:	d10c      	bne.n	802a61e <_vfiprintf_r+0x176>
 802a604:	7863      	ldrb	r3, [r4, #1]
 802a606:	2b2a      	cmp	r3, #42	; 0x2a
 802a608:	d135      	bne.n	802a676 <_vfiprintf_r+0x1ce>
 802a60a:	9b03      	ldr	r3, [sp, #12]
 802a60c:	1d1a      	adds	r2, r3, #4
 802a60e:	681b      	ldr	r3, [r3, #0]
 802a610:	9203      	str	r2, [sp, #12]
 802a612:	2b00      	cmp	r3, #0
 802a614:	bfb8      	it	lt
 802a616:	f04f 33ff 	movlt.w	r3, #4294967295
 802a61a:	3402      	adds	r4, #2
 802a61c:	9305      	str	r3, [sp, #20]
 802a61e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802a704 <_vfiprintf_r+0x25c>
 802a622:	7821      	ldrb	r1, [r4, #0]
 802a624:	2203      	movs	r2, #3
 802a626:	4650      	mov	r0, sl
 802a628:	f7d5 fe5a 	bl	80002e0 <memchr>
 802a62c:	b140      	cbz	r0, 802a640 <_vfiprintf_r+0x198>
 802a62e:	2340      	movs	r3, #64	; 0x40
 802a630:	eba0 000a 	sub.w	r0, r0, sl
 802a634:	fa03 f000 	lsl.w	r0, r3, r0
 802a638:	9b04      	ldr	r3, [sp, #16]
 802a63a:	4303      	orrs	r3, r0
 802a63c:	3401      	adds	r4, #1
 802a63e:	9304      	str	r3, [sp, #16]
 802a640:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a644:	482c      	ldr	r0, [pc, #176]	; (802a6f8 <_vfiprintf_r+0x250>)
 802a646:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802a64a:	2206      	movs	r2, #6
 802a64c:	f7d5 fe48 	bl	80002e0 <memchr>
 802a650:	2800      	cmp	r0, #0
 802a652:	d03f      	beq.n	802a6d4 <_vfiprintf_r+0x22c>
 802a654:	4b29      	ldr	r3, [pc, #164]	; (802a6fc <_vfiprintf_r+0x254>)
 802a656:	bb1b      	cbnz	r3, 802a6a0 <_vfiprintf_r+0x1f8>
 802a658:	9b03      	ldr	r3, [sp, #12]
 802a65a:	3307      	adds	r3, #7
 802a65c:	f023 0307 	bic.w	r3, r3, #7
 802a660:	3308      	adds	r3, #8
 802a662:	9303      	str	r3, [sp, #12]
 802a664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a666:	443b      	add	r3, r7
 802a668:	9309      	str	r3, [sp, #36]	; 0x24
 802a66a:	e767      	b.n	802a53c <_vfiprintf_r+0x94>
 802a66c:	fb0c 3202 	mla	r2, ip, r2, r3
 802a670:	460c      	mov	r4, r1
 802a672:	2001      	movs	r0, #1
 802a674:	e7a5      	b.n	802a5c2 <_vfiprintf_r+0x11a>
 802a676:	2300      	movs	r3, #0
 802a678:	3401      	adds	r4, #1
 802a67a:	9305      	str	r3, [sp, #20]
 802a67c:	4619      	mov	r1, r3
 802a67e:	f04f 0c0a 	mov.w	ip, #10
 802a682:	4620      	mov	r0, r4
 802a684:	f810 2b01 	ldrb.w	r2, [r0], #1
 802a688:	3a30      	subs	r2, #48	; 0x30
 802a68a:	2a09      	cmp	r2, #9
 802a68c:	d903      	bls.n	802a696 <_vfiprintf_r+0x1ee>
 802a68e:	2b00      	cmp	r3, #0
 802a690:	d0c5      	beq.n	802a61e <_vfiprintf_r+0x176>
 802a692:	9105      	str	r1, [sp, #20]
 802a694:	e7c3      	b.n	802a61e <_vfiprintf_r+0x176>
 802a696:	fb0c 2101 	mla	r1, ip, r1, r2
 802a69a:	4604      	mov	r4, r0
 802a69c:	2301      	movs	r3, #1
 802a69e:	e7f0      	b.n	802a682 <_vfiprintf_r+0x1da>
 802a6a0:	ab03      	add	r3, sp, #12
 802a6a2:	9300      	str	r3, [sp, #0]
 802a6a4:	462a      	mov	r2, r5
 802a6a6:	4b16      	ldr	r3, [pc, #88]	; (802a700 <_vfiprintf_r+0x258>)
 802a6a8:	a904      	add	r1, sp, #16
 802a6aa:	4630      	mov	r0, r6
 802a6ac:	f3af 8000 	nop.w
 802a6b0:	4607      	mov	r7, r0
 802a6b2:	1c78      	adds	r0, r7, #1
 802a6b4:	d1d6      	bne.n	802a664 <_vfiprintf_r+0x1bc>
 802a6b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802a6b8:	07d9      	lsls	r1, r3, #31
 802a6ba:	d405      	bmi.n	802a6c8 <_vfiprintf_r+0x220>
 802a6bc:	89ab      	ldrh	r3, [r5, #12]
 802a6be:	059a      	lsls	r2, r3, #22
 802a6c0:	d402      	bmi.n	802a6c8 <_vfiprintf_r+0x220>
 802a6c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802a6c4:	f7ff fdf5 	bl	802a2b2 <__retarget_lock_release_recursive>
 802a6c8:	89ab      	ldrh	r3, [r5, #12]
 802a6ca:	065b      	lsls	r3, r3, #25
 802a6cc:	f53f af12 	bmi.w	802a4f4 <_vfiprintf_r+0x4c>
 802a6d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 802a6d2:	e711      	b.n	802a4f8 <_vfiprintf_r+0x50>
 802a6d4:	ab03      	add	r3, sp, #12
 802a6d6:	9300      	str	r3, [sp, #0]
 802a6d8:	462a      	mov	r2, r5
 802a6da:	4b09      	ldr	r3, [pc, #36]	; (802a700 <_vfiprintf_r+0x258>)
 802a6dc:	a904      	add	r1, sp, #16
 802a6de:	4630      	mov	r0, r6
 802a6e0:	f000 f880 	bl	802a7e4 <_printf_i>
 802a6e4:	e7e4      	b.n	802a6b0 <_vfiprintf_r+0x208>
 802a6e6:	bf00      	nop
 802a6e8:	0802fbc0 	.word	0x0802fbc0
 802a6ec:	0802fbe0 	.word	0x0802fbe0
 802a6f0:	0802fba0 	.word	0x0802fba0
 802a6f4:	0802fc04 	.word	0x0802fc04
 802a6f8:	0802fc0e 	.word	0x0802fc0e
 802a6fc:	00000000 	.word	0x00000000
 802a700:	0802a483 	.word	0x0802a483
 802a704:	0802fc0a 	.word	0x0802fc0a

0802a708 <_printf_common>:
 802a708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a70c:	4616      	mov	r6, r2
 802a70e:	4699      	mov	r9, r3
 802a710:	688a      	ldr	r2, [r1, #8]
 802a712:	690b      	ldr	r3, [r1, #16]
 802a714:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802a718:	4293      	cmp	r3, r2
 802a71a:	bfb8      	it	lt
 802a71c:	4613      	movlt	r3, r2
 802a71e:	6033      	str	r3, [r6, #0]
 802a720:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802a724:	4607      	mov	r7, r0
 802a726:	460c      	mov	r4, r1
 802a728:	b10a      	cbz	r2, 802a72e <_printf_common+0x26>
 802a72a:	3301      	adds	r3, #1
 802a72c:	6033      	str	r3, [r6, #0]
 802a72e:	6823      	ldr	r3, [r4, #0]
 802a730:	0699      	lsls	r1, r3, #26
 802a732:	bf42      	ittt	mi
 802a734:	6833      	ldrmi	r3, [r6, #0]
 802a736:	3302      	addmi	r3, #2
 802a738:	6033      	strmi	r3, [r6, #0]
 802a73a:	6825      	ldr	r5, [r4, #0]
 802a73c:	f015 0506 	ands.w	r5, r5, #6
 802a740:	d106      	bne.n	802a750 <_printf_common+0x48>
 802a742:	f104 0a19 	add.w	sl, r4, #25
 802a746:	68e3      	ldr	r3, [r4, #12]
 802a748:	6832      	ldr	r2, [r6, #0]
 802a74a:	1a9b      	subs	r3, r3, r2
 802a74c:	42ab      	cmp	r3, r5
 802a74e:	dc26      	bgt.n	802a79e <_printf_common+0x96>
 802a750:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802a754:	1e13      	subs	r3, r2, #0
 802a756:	6822      	ldr	r2, [r4, #0]
 802a758:	bf18      	it	ne
 802a75a:	2301      	movne	r3, #1
 802a75c:	0692      	lsls	r2, r2, #26
 802a75e:	d42b      	bmi.n	802a7b8 <_printf_common+0xb0>
 802a760:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802a764:	4649      	mov	r1, r9
 802a766:	4638      	mov	r0, r7
 802a768:	47c0      	blx	r8
 802a76a:	3001      	adds	r0, #1
 802a76c:	d01e      	beq.n	802a7ac <_printf_common+0xa4>
 802a76e:	6823      	ldr	r3, [r4, #0]
 802a770:	68e5      	ldr	r5, [r4, #12]
 802a772:	6832      	ldr	r2, [r6, #0]
 802a774:	f003 0306 	and.w	r3, r3, #6
 802a778:	2b04      	cmp	r3, #4
 802a77a:	bf08      	it	eq
 802a77c:	1aad      	subeq	r5, r5, r2
 802a77e:	68a3      	ldr	r3, [r4, #8]
 802a780:	6922      	ldr	r2, [r4, #16]
 802a782:	bf0c      	ite	eq
 802a784:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802a788:	2500      	movne	r5, #0
 802a78a:	4293      	cmp	r3, r2
 802a78c:	bfc4      	itt	gt
 802a78e:	1a9b      	subgt	r3, r3, r2
 802a790:	18ed      	addgt	r5, r5, r3
 802a792:	2600      	movs	r6, #0
 802a794:	341a      	adds	r4, #26
 802a796:	42b5      	cmp	r5, r6
 802a798:	d11a      	bne.n	802a7d0 <_printf_common+0xc8>
 802a79a:	2000      	movs	r0, #0
 802a79c:	e008      	b.n	802a7b0 <_printf_common+0xa8>
 802a79e:	2301      	movs	r3, #1
 802a7a0:	4652      	mov	r2, sl
 802a7a2:	4649      	mov	r1, r9
 802a7a4:	4638      	mov	r0, r7
 802a7a6:	47c0      	blx	r8
 802a7a8:	3001      	adds	r0, #1
 802a7aa:	d103      	bne.n	802a7b4 <_printf_common+0xac>
 802a7ac:	f04f 30ff 	mov.w	r0, #4294967295
 802a7b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a7b4:	3501      	adds	r5, #1
 802a7b6:	e7c6      	b.n	802a746 <_printf_common+0x3e>
 802a7b8:	18e1      	adds	r1, r4, r3
 802a7ba:	1c5a      	adds	r2, r3, #1
 802a7bc:	2030      	movs	r0, #48	; 0x30
 802a7be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802a7c2:	4422      	add	r2, r4
 802a7c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802a7c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802a7cc:	3302      	adds	r3, #2
 802a7ce:	e7c7      	b.n	802a760 <_printf_common+0x58>
 802a7d0:	2301      	movs	r3, #1
 802a7d2:	4622      	mov	r2, r4
 802a7d4:	4649      	mov	r1, r9
 802a7d6:	4638      	mov	r0, r7
 802a7d8:	47c0      	blx	r8
 802a7da:	3001      	adds	r0, #1
 802a7dc:	d0e6      	beq.n	802a7ac <_printf_common+0xa4>
 802a7de:	3601      	adds	r6, #1
 802a7e0:	e7d9      	b.n	802a796 <_printf_common+0x8e>
	...

0802a7e4 <_printf_i>:
 802a7e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802a7e8:	460c      	mov	r4, r1
 802a7ea:	4691      	mov	r9, r2
 802a7ec:	7e27      	ldrb	r7, [r4, #24]
 802a7ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 802a7f0:	2f78      	cmp	r7, #120	; 0x78
 802a7f2:	4680      	mov	r8, r0
 802a7f4:	469a      	mov	sl, r3
 802a7f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802a7fa:	d807      	bhi.n	802a80c <_printf_i+0x28>
 802a7fc:	2f62      	cmp	r7, #98	; 0x62
 802a7fe:	d80a      	bhi.n	802a816 <_printf_i+0x32>
 802a800:	2f00      	cmp	r7, #0
 802a802:	f000 80d8 	beq.w	802a9b6 <_printf_i+0x1d2>
 802a806:	2f58      	cmp	r7, #88	; 0x58
 802a808:	f000 80a3 	beq.w	802a952 <_printf_i+0x16e>
 802a80c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 802a810:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802a814:	e03a      	b.n	802a88c <_printf_i+0xa8>
 802a816:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802a81a:	2b15      	cmp	r3, #21
 802a81c:	d8f6      	bhi.n	802a80c <_printf_i+0x28>
 802a81e:	a001      	add	r0, pc, #4	; (adr r0, 802a824 <_printf_i+0x40>)
 802a820:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 802a824:	0802a87d 	.word	0x0802a87d
 802a828:	0802a891 	.word	0x0802a891
 802a82c:	0802a80d 	.word	0x0802a80d
 802a830:	0802a80d 	.word	0x0802a80d
 802a834:	0802a80d 	.word	0x0802a80d
 802a838:	0802a80d 	.word	0x0802a80d
 802a83c:	0802a891 	.word	0x0802a891
 802a840:	0802a80d 	.word	0x0802a80d
 802a844:	0802a80d 	.word	0x0802a80d
 802a848:	0802a80d 	.word	0x0802a80d
 802a84c:	0802a80d 	.word	0x0802a80d
 802a850:	0802a99d 	.word	0x0802a99d
 802a854:	0802a8c1 	.word	0x0802a8c1
 802a858:	0802a97f 	.word	0x0802a97f
 802a85c:	0802a80d 	.word	0x0802a80d
 802a860:	0802a80d 	.word	0x0802a80d
 802a864:	0802a9bf 	.word	0x0802a9bf
 802a868:	0802a80d 	.word	0x0802a80d
 802a86c:	0802a8c1 	.word	0x0802a8c1
 802a870:	0802a80d 	.word	0x0802a80d
 802a874:	0802a80d 	.word	0x0802a80d
 802a878:	0802a987 	.word	0x0802a987
 802a87c:	680b      	ldr	r3, [r1, #0]
 802a87e:	1d1a      	adds	r2, r3, #4
 802a880:	681b      	ldr	r3, [r3, #0]
 802a882:	600a      	str	r2, [r1, #0]
 802a884:	f104 0642 	add.w	r6, r4, #66	; 0x42
 802a888:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802a88c:	2301      	movs	r3, #1
 802a88e:	e0a3      	b.n	802a9d8 <_printf_i+0x1f4>
 802a890:	6825      	ldr	r5, [r4, #0]
 802a892:	6808      	ldr	r0, [r1, #0]
 802a894:	062e      	lsls	r6, r5, #24
 802a896:	f100 0304 	add.w	r3, r0, #4
 802a89a:	d50a      	bpl.n	802a8b2 <_printf_i+0xce>
 802a89c:	6805      	ldr	r5, [r0, #0]
 802a89e:	600b      	str	r3, [r1, #0]
 802a8a0:	2d00      	cmp	r5, #0
 802a8a2:	da03      	bge.n	802a8ac <_printf_i+0xc8>
 802a8a4:	232d      	movs	r3, #45	; 0x2d
 802a8a6:	426d      	negs	r5, r5
 802a8a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802a8ac:	485e      	ldr	r0, [pc, #376]	; (802aa28 <_printf_i+0x244>)
 802a8ae:	230a      	movs	r3, #10
 802a8b0:	e019      	b.n	802a8e6 <_printf_i+0x102>
 802a8b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 802a8b6:	6805      	ldr	r5, [r0, #0]
 802a8b8:	600b      	str	r3, [r1, #0]
 802a8ba:	bf18      	it	ne
 802a8bc:	b22d      	sxthne	r5, r5
 802a8be:	e7ef      	b.n	802a8a0 <_printf_i+0xbc>
 802a8c0:	680b      	ldr	r3, [r1, #0]
 802a8c2:	6825      	ldr	r5, [r4, #0]
 802a8c4:	1d18      	adds	r0, r3, #4
 802a8c6:	6008      	str	r0, [r1, #0]
 802a8c8:	0628      	lsls	r0, r5, #24
 802a8ca:	d501      	bpl.n	802a8d0 <_printf_i+0xec>
 802a8cc:	681d      	ldr	r5, [r3, #0]
 802a8ce:	e002      	b.n	802a8d6 <_printf_i+0xf2>
 802a8d0:	0669      	lsls	r1, r5, #25
 802a8d2:	d5fb      	bpl.n	802a8cc <_printf_i+0xe8>
 802a8d4:	881d      	ldrh	r5, [r3, #0]
 802a8d6:	4854      	ldr	r0, [pc, #336]	; (802aa28 <_printf_i+0x244>)
 802a8d8:	2f6f      	cmp	r7, #111	; 0x6f
 802a8da:	bf0c      	ite	eq
 802a8dc:	2308      	moveq	r3, #8
 802a8de:	230a      	movne	r3, #10
 802a8e0:	2100      	movs	r1, #0
 802a8e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802a8e6:	6866      	ldr	r6, [r4, #4]
 802a8e8:	60a6      	str	r6, [r4, #8]
 802a8ea:	2e00      	cmp	r6, #0
 802a8ec:	bfa2      	ittt	ge
 802a8ee:	6821      	ldrge	r1, [r4, #0]
 802a8f0:	f021 0104 	bicge.w	r1, r1, #4
 802a8f4:	6021      	strge	r1, [r4, #0]
 802a8f6:	b90d      	cbnz	r5, 802a8fc <_printf_i+0x118>
 802a8f8:	2e00      	cmp	r6, #0
 802a8fa:	d04d      	beq.n	802a998 <_printf_i+0x1b4>
 802a8fc:	4616      	mov	r6, r2
 802a8fe:	fbb5 f1f3 	udiv	r1, r5, r3
 802a902:	fb03 5711 	mls	r7, r3, r1, r5
 802a906:	5dc7      	ldrb	r7, [r0, r7]
 802a908:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802a90c:	462f      	mov	r7, r5
 802a90e:	42bb      	cmp	r3, r7
 802a910:	460d      	mov	r5, r1
 802a912:	d9f4      	bls.n	802a8fe <_printf_i+0x11a>
 802a914:	2b08      	cmp	r3, #8
 802a916:	d10b      	bne.n	802a930 <_printf_i+0x14c>
 802a918:	6823      	ldr	r3, [r4, #0]
 802a91a:	07df      	lsls	r7, r3, #31
 802a91c:	d508      	bpl.n	802a930 <_printf_i+0x14c>
 802a91e:	6923      	ldr	r3, [r4, #16]
 802a920:	6861      	ldr	r1, [r4, #4]
 802a922:	4299      	cmp	r1, r3
 802a924:	bfde      	ittt	le
 802a926:	2330      	movle	r3, #48	; 0x30
 802a928:	f806 3c01 	strble.w	r3, [r6, #-1]
 802a92c:	f106 36ff 	addle.w	r6, r6, #4294967295
 802a930:	1b92      	subs	r2, r2, r6
 802a932:	6122      	str	r2, [r4, #16]
 802a934:	f8cd a000 	str.w	sl, [sp]
 802a938:	464b      	mov	r3, r9
 802a93a:	aa03      	add	r2, sp, #12
 802a93c:	4621      	mov	r1, r4
 802a93e:	4640      	mov	r0, r8
 802a940:	f7ff fee2 	bl	802a708 <_printf_common>
 802a944:	3001      	adds	r0, #1
 802a946:	d14c      	bne.n	802a9e2 <_printf_i+0x1fe>
 802a948:	f04f 30ff 	mov.w	r0, #4294967295
 802a94c:	b004      	add	sp, #16
 802a94e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a952:	4835      	ldr	r0, [pc, #212]	; (802aa28 <_printf_i+0x244>)
 802a954:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802a958:	6823      	ldr	r3, [r4, #0]
 802a95a:	680e      	ldr	r6, [r1, #0]
 802a95c:	061f      	lsls	r7, r3, #24
 802a95e:	f856 5b04 	ldr.w	r5, [r6], #4
 802a962:	600e      	str	r6, [r1, #0]
 802a964:	d514      	bpl.n	802a990 <_printf_i+0x1ac>
 802a966:	07d9      	lsls	r1, r3, #31
 802a968:	bf44      	itt	mi
 802a96a:	f043 0320 	orrmi.w	r3, r3, #32
 802a96e:	6023      	strmi	r3, [r4, #0]
 802a970:	b91d      	cbnz	r5, 802a97a <_printf_i+0x196>
 802a972:	6823      	ldr	r3, [r4, #0]
 802a974:	f023 0320 	bic.w	r3, r3, #32
 802a978:	6023      	str	r3, [r4, #0]
 802a97a:	2310      	movs	r3, #16
 802a97c:	e7b0      	b.n	802a8e0 <_printf_i+0xfc>
 802a97e:	6823      	ldr	r3, [r4, #0]
 802a980:	f043 0320 	orr.w	r3, r3, #32
 802a984:	6023      	str	r3, [r4, #0]
 802a986:	2378      	movs	r3, #120	; 0x78
 802a988:	4828      	ldr	r0, [pc, #160]	; (802aa2c <_printf_i+0x248>)
 802a98a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802a98e:	e7e3      	b.n	802a958 <_printf_i+0x174>
 802a990:	065e      	lsls	r6, r3, #25
 802a992:	bf48      	it	mi
 802a994:	b2ad      	uxthmi	r5, r5
 802a996:	e7e6      	b.n	802a966 <_printf_i+0x182>
 802a998:	4616      	mov	r6, r2
 802a99a:	e7bb      	b.n	802a914 <_printf_i+0x130>
 802a99c:	680b      	ldr	r3, [r1, #0]
 802a99e:	6826      	ldr	r6, [r4, #0]
 802a9a0:	6960      	ldr	r0, [r4, #20]
 802a9a2:	1d1d      	adds	r5, r3, #4
 802a9a4:	600d      	str	r5, [r1, #0]
 802a9a6:	0635      	lsls	r5, r6, #24
 802a9a8:	681b      	ldr	r3, [r3, #0]
 802a9aa:	d501      	bpl.n	802a9b0 <_printf_i+0x1cc>
 802a9ac:	6018      	str	r0, [r3, #0]
 802a9ae:	e002      	b.n	802a9b6 <_printf_i+0x1d2>
 802a9b0:	0671      	lsls	r1, r6, #25
 802a9b2:	d5fb      	bpl.n	802a9ac <_printf_i+0x1c8>
 802a9b4:	8018      	strh	r0, [r3, #0]
 802a9b6:	2300      	movs	r3, #0
 802a9b8:	6123      	str	r3, [r4, #16]
 802a9ba:	4616      	mov	r6, r2
 802a9bc:	e7ba      	b.n	802a934 <_printf_i+0x150>
 802a9be:	680b      	ldr	r3, [r1, #0]
 802a9c0:	1d1a      	adds	r2, r3, #4
 802a9c2:	600a      	str	r2, [r1, #0]
 802a9c4:	681e      	ldr	r6, [r3, #0]
 802a9c6:	6862      	ldr	r2, [r4, #4]
 802a9c8:	2100      	movs	r1, #0
 802a9ca:	4630      	mov	r0, r6
 802a9cc:	f7d5 fc88 	bl	80002e0 <memchr>
 802a9d0:	b108      	cbz	r0, 802a9d6 <_printf_i+0x1f2>
 802a9d2:	1b80      	subs	r0, r0, r6
 802a9d4:	6060      	str	r0, [r4, #4]
 802a9d6:	6863      	ldr	r3, [r4, #4]
 802a9d8:	6123      	str	r3, [r4, #16]
 802a9da:	2300      	movs	r3, #0
 802a9dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802a9e0:	e7a8      	b.n	802a934 <_printf_i+0x150>
 802a9e2:	6923      	ldr	r3, [r4, #16]
 802a9e4:	4632      	mov	r2, r6
 802a9e6:	4649      	mov	r1, r9
 802a9e8:	4640      	mov	r0, r8
 802a9ea:	47d0      	blx	sl
 802a9ec:	3001      	adds	r0, #1
 802a9ee:	d0ab      	beq.n	802a948 <_printf_i+0x164>
 802a9f0:	6823      	ldr	r3, [r4, #0]
 802a9f2:	079b      	lsls	r3, r3, #30
 802a9f4:	d413      	bmi.n	802aa1e <_printf_i+0x23a>
 802a9f6:	68e0      	ldr	r0, [r4, #12]
 802a9f8:	9b03      	ldr	r3, [sp, #12]
 802a9fa:	4298      	cmp	r0, r3
 802a9fc:	bfb8      	it	lt
 802a9fe:	4618      	movlt	r0, r3
 802aa00:	e7a4      	b.n	802a94c <_printf_i+0x168>
 802aa02:	2301      	movs	r3, #1
 802aa04:	4632      	mov	r2, r6
 802aa06:	4649      	mov	r1, r9
 802aa08:	4640      	mov	r0, r8
 802aa0a:	47d0      	blx	sl
 802aa0c:	3001      	adds	r0, #1
 802aa0e:	d09b      	beq.n	802a948 <_printf_i+0x164>
 802aa10:	3501      	adds	r5, #1
 802aa12:	68e3      	ldr	r3, [r4, #12]
 802aa14:	9903      	ldr	r1, [sp, #12]
 802aa16:	1a5b      	subs	r3, r3, r1
 802aa18:	42ab      	cmp	r3, r5
 802aa1a:	dcf2      	bgt.n	802aa02 <_printf_i+0x21e>
 802aa1c:	e7eb      	b.n	802a9f6 <_printf_i+0x212>
 802aa1e:	2500      	movs	r5, #0
 802aa20:	f104 0619 	add.w	r6, r4, #25
 802aa24:	e7f5      	b.n	802aa12 <_printf_i+0x22e>
 802aa26:	bf00      	nop
 802aa28:	0802fc15 	.word	0x0802fc15
 802aa2c:	0802fc26 	.word	0x0802fc26

0802aa30 <cleanup_glue>:
 802aa30:	b538      	push	{r3, r4, r5, lr}
 802aa32:	460c      	mov	r4, r1
 802aa34:	6809      	ldr	r1, [r1, #0]
 802aa36:	4605      	mov	r5, r0
 802aa38:	b109      	cbz	r1, 802aa3e <cleanup_glue+0xe>
 802aa3a:	f7ff fff9 	bl	802aa30 <cleanup_glue>
 802aa3e:	4621      	mov	r1, r4
 802aa40:	4628      	mov	r0, r5
 802aa42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802aa46:	f7ff bc5b 	b.w	802a300 <_free_r>
	...

0802aa4c <_reclaim_reent>:
 802aa4c:	4b2c      	ldr	r3, [pc, #176]	; (802ab00 <_reclaim_reent+0xb4>)
 802aa4e:	681b      	ldr	r3, [r3, #0]
 802aa50:	4283      	cmp	r3, r0
 802aa52:	b570      	push	{r4, r5, r6, lr}
 802aa54:	4604      	mov	r4, r0
 802aa56:	d051      	beq.n	802aafc <_reclaim_reent+0xb0>
 802aa58:	6a43      	ldr	r3, [r0, #36]	; 0x24
 802aa5a:	b143      	cbz	r3, 802aa6e <_reclaim_reent+0x22>
 802aa5c:	68db      	ldr	r3, [r3, #12]
 802aa5e:	2b00      	cmp	r3, #0
 802aa60:	d14a      	bne.n	802aaf8 <_reclaim_reent+0xac>
 802aa62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802aa64:	6819      	ldr	r1, [r3, #0]
 802aa66:	b111      	cbz	r1, 802aa6e <_reclaim_reent+0x22>
 802aa68:	4620      	mov	r0, r4
 802aa6a:	f7ff fc49 	bl	802a300 <_free_r>
 802aa6e:	6961      	ldr	r1, [r4, #20]
 802aa70:	b111      	cbz	r1, 802aa78 <_reclaim_reent+0x2c>
 802aa72:	4620      	mov	r0, r4
 802aa74:	f7ff fc44 	bl	802a300 <_free_r>
 802aa78:	6a61      	ldr	r1, [r4, #36]	; 0x24
 802aa7a:	b111      	cbz	r1, 802aa82 <_reclaim_reent+0x36>
 802aa7c:	4620      	mov	r0, r4
 802aa7e:	f7ff fc3f 	bl	802a300 <_free_r>
 802aa82:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802aa84:	b111      	cbz	r1, 802aa8c <_reclaim_reent+0x40>
 802aa86:	4620      	mov	r0, r4
 802aa88:	f7ff fc3a 	bl	802a300 <_free_r>
 802aa8c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 802aa8e:	b111      	cbz	r1, 802aa96 <_reclaim_reent+0x4a>
 802aa90:	4620      	mov	r0, r4
 802aa92:	f7ff fc35 	bl	802a300 <_free_r>
 802aa96:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802aa98:	b111      	cbz	r1, 802aaa0 <_reclaim_reent+0x54>
 802aa9a:	4620      	mov	r0, r4
 802aa9c:	f7ff fc30 	bl	802a300 <_free_r>
 802aaa0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 802aaa2:	b111      	cbz	r1, 802aaaa <_reclaim_reent+0x5e>
 802aaa4:	4620      	mov	r0, r4
 802aaa6:	f7ff fc2b 	bl	802a300 <_free_r>
 802aaaa:	6da1      	ldr	r1, [r4, #88]	; 0x58
 802aaac:	b111      	cbz	r1, 802aab4 <_reclaim_reent+0x68>
 802aaae:	4620      	mov	r0, r4
 802aab0:	f7ff fc26 	bl	802a300 <_free_r>
 802aab4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802aab6:	b111      	cbz	r1, 802aabe <_reclaim_reent+0x72>
 802aab8:	4620      	mov	r0, r4
 802aaba:	f7ff fc21 	bl	802a300 <_free_r>
 802aabe:	69a3      	ldr	r3, [r4, #24]
 802aac0:	b1e3      	cbz	r3, 802aafc <_reclaim_reent+0xb0>
 802aac2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 802aac4:	4620      	mov	r0, r4
 802aac6:	4798      	blx	r3
 802aac8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 802aaca:	b1b9      	cbz	r1, 802aafc <_reclaim_reent+0xb0>
 802aacc:	4620      	mov	r0, r4
 802aace:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802aad2:	f7ff bfad 	b.w	802aa30 <cleanup_glue>
 802aad6:	5949      	ldr	r1, [r1, r5]
 802aad8:	b941      	cbnz	r1, 802aaec <_reclaim_reent+0xa0>
 802aada:	3504      	adds	r5, #4
 802aadc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802aade:	2d80      	cmp	r5, #128	; 0x80
 802aae0:	68d9      	ldr	r1, [r3, #12]
 802aae2:	d1f8      	bne.n	802aad6 <_reclaim_reent+0x8a>
 802aae4:	4620      	mov	r0, r4
 802aae6:	f7ff fc0b 	bl	802a300 <_free_r>
 802aaea:	e7ba      	b.n	802aa62 <_reclaim_reent+0x16>
 802aaec:	680e      	ldr	r6, [r1, #0]
 802aaee:	4620      	mov	r0, r4
 802aaf0:	f7ff fc06 	bl	802a300 <_free_r>
 802aaf4:	4631      	mov	r1, r6
 802aaf6:	e7ef      	b.n	802aad8 <_reclaim_reent+0x8c>
 802aaf8:	2500      	movs	r5, #0
 802aafa:	e7ef      	b.n	802aadc <_reclaim_reent+0x90>
 802aafc:	bd70      	pop	{r4, r5, r6, pc}
 802aafe:	bf00      	nop
 802ab00:	240000cc 	.word	0x240000cc

0802ab04 <_sbrk_r>:
 802ab04:	b538      	push	{r3, r4, r5, lr}
 802ab06:	4d06      	ldr	r5, [pc, #24]	; (802ab20 <_sbrk_r+0x1c>)
 802ab08:	2300      	movs	r3, #0
 802ab0a:	4604      	mov	r4, r0
 802ab0c:	4608      	mov	r0, r1
 802ab0e:	602b      	str	r3, [r5, #0]
 802ab10:	f7d6 fe4e 	bl	80017b0 <_sbrk>
 802ab14:	1c43      	adds	r3, r0, #1
 802ab16:	d102      	bne.n	802ab1e <_sbrk_r+0x1a>
 802ab18:	682b      	ldr	r3, [r5, #0]
 802ab1a:	b103      	cbz	r3, 802ab1e <_sbrk_r+0x1a>
 802ab1c:	6023      	str	r3, [r4, #0]
 802ab1e:	bd38      	pop	{r3, r4, r5, pc}
 802ab20:	2400bb9c 	.word	0x2400bb9c

0802ab24 <_raise_r>:
 802ab24:	291f      	cmp	r1, #31
 802ab26:	b538      	push	{r3, r4, r5, lr}
 802ab28:	4604      	mov	r4, r0
 802ab2a:	460d      	mov	r5, r1
 802ab2c:	d904      	bls.n	802ab38 <_raise_r+0x14>
 802ab2e:	2316      	movs	r3, #22
 802ab30:	6003      	str	r3, [r0, #0]
 802ab32:	f04f 30ff 	mov.w	r0, #4294967295
 802ab36:	bd38      	pop	{r3, r4, r5, pc}
 802ab38:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802ab3a:	b112      	cbz	r2, 802ab42 <_raise_r+0x1e>
 802ab3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802ab40:	b94b      	cbnz	r3, 802ab56 <_raise_r+0x32>
 802ab42:	4620      	mov	r0, r4
 802ab44:	f000 f830 	bl	802aba8 <_getpid_r>
 802ab48:	462a      	mov	r2, r5
 802ab4a:	4601      	mov	r1, r0
 802ab4c:	4620      	mov	r0, r4
 802ab4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802ab52:	f000 b817 	b.w	802ab84 <_kill_r>
 802ab56:	2b01      	cmp	r3, #1
 802ab58:	d00a      	beq.n	802ab70 <_raise_r+0x4c>
 802ab5a:	1c59      	adds	r1, r3, #1
 802ab5c:	d103      	bne.n	802ab66 <_raise_r+0x42>
 802ab5e:	2316      	movs	r3, #22
 802ab60:	6003      	str	r3, [r0, #0]
 802ab62:	2001      	movs	r0, #1
 802ab64:	e7e7      	b.n	802ab36 <_raise_r+0x12>
 802ab66:	2400      	movs	r4, #0
 802ab68:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802ab6c:	4628      	mov	r0, r5
 802ab6e:	4798      	blx	r3
 802ab70:	2000      	movs	r0, #0
 802ab72:	e7e0      	b.n	802ab36 <_raise_r+0x12>

0802ab74 <raise>:
 802ab74:	4b02      	ldr	r3, [pc, #8]	; (802ab80 <raise+0xc>)
 802ab76:	4601      	mov	r1, r0
 802ab78:	6818      	ldr	r0, [r3, #0]
 802ab7a:	f7ff bfd3 	b.w	802ab24 <_raise_r>
 802ab7e:	bf00      	nop
 802ab80:	240000cc 	.word	0x240000cc

0802ab84 <_kill_r>:
 802ab84:	b538      	push	{r3, r4, r5, lr}
 802ab86:	4d07      	ldr	r5, [pc, #28]	; (802aba4 <_kill_r+0x20>)
 802ab88:	2300      	movs	r3, #0
 802ab8a:	4604      	mov	r4, r0
 802ab8c:	4608      	mov	r0, r1
 802ab8e:	4611      	mov	r1, r2
 802ab90:	602b      	str	r3, [r5, #0]
 802ab92:	f7d6 fd85 	bl	80016a0 <_kill>
 802ab96:	1c43      	adds	r3, r0, #1
 802ab98:	d102      	bne.n	802aba0 <_kill_r+0x1c>
 802ab9a:	682b      	ldr	r3, [r5, #0]
 802ab9c:	b103      	cbz	r3, 802aba0 <_kill_r+0x1c>
 802ab9e:	6023      	str	r3, [r4, #0]
 802aba0:	bd38      	pop	{r3, r4, r5, pc}
 802aba2:	bf00      	nop
 802aba4:	2400bb9c 	.word	0x2400bb9c

0802aba8 <_getpid_r>:
 802aba8:	f7d6 bd72 	b.w	8001690 <_getpid>

0802abac <__sread>:
 802abac:	b510      	push	{r4, lr}
 802abae:	460c      	mov	r4, r1
 802abb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802abb4:	f000 fac6 	bl	802b144 <_read_r>
 802abb8:	2800      	cmp	r0, #0
 802abba:	bfab      	itete	ge
 802abbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802abbe:	89a3      	ldrhlt	r3, [r4, #12]
 802abc0:	181b      	addge	r3, r3, r0
 802abc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802abc6:	bfac      	ite	ge
 802abc8:	6563      	strge	r3, [r4, #84]	; 0x54
 802abca:	81a3      	strhlt	r3, [r4, #12]
 802abcc:	bd10      	pop	{r4, pc}

0802abce <__swrite>:
 802abce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802abd2:	461f      	mov	r7, r3
 802abd4:	898b      	ldrh	r3, [r1, #12]
 802abd6:	05db      	lsls	r3, r3, #23
 802abd8:	4605      	mov	r5, r0
 802abda:	460c      	mov	r4, r1
 802abdc:	4616      	mov	r6, r2
 802abde:	d505      	bpl.n	802abec <__swrite+0x1e>
 802abe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802abe4:	2302      	movs	r3, #2
 802abe6:	2200      	movs	r2, #0
 802abe8:	f000 fa2a 	bl	802b040 <_lseek_r>
 802abec:	89a3      	ldrh	r3, [r4, #12]
 802abee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802abf2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802abf6:	81a3      	strh	r3, [r4, #12]
 802abf8:	4632      	mov	r2, r6
 802abfa:	463b      	mov	r3, r7
 802abfc:	4628      	mov	r0, r5
 802abfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802ac02:	f000 b869 	b.w	802acd8 <_write_r>

0802ac06 <__sseek>:
 802ac06:	b510      	push	{r4, lr}
 802ac08:	460c      	mov	r4, r1
 802ac0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ac0e:	f000 fa17 	bl	802b040 <_lseek_r>
 802ac12:	1c43      	adds	r3, r0, #1
 802ac14:	89a3      	ldrh	r3, [r4, #12]
 802ac16:	bf15      	itete	ne
 802ac18:	6560      	strne	r0, [r4, #84]	; 0x54
 802ac1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802ac1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802ac22:	81a3      	strheq	r3, [r4, #12]
 802ac24:	bf18      	it	ne
 802ac26:	81a3      	strhne	r3, [r4, #12]
 802ac28:	bd10      	pop	{r4, pc}

0802ac2a <__sclose>:
 802ac2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ac2e:	f000 b935 	b.w	802ae9c <_close_r>
	...

0802ac34 <__swbuf_r>:
 802ac34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ac36:	460e      	mov	r6, r1
 802ac38:	4614      	mov	r4, r2
 802ac3a:	4605      	mov	r5, r0
 802ac3c:	b118      	cbz	r0, 802ac46 <__swbuf_r+0x12>
 802ac3e:	6983      	ldr	r3, [r0, #24]
 802ac40:	b90b      	cbnz	r3, 802ac46 <__swbuf_r+0x12>
 802ac42:	f7ff fa5f 	bl	802a104 <__sinit>
 802ac46:	4b21      	ldr	r3, [pc, #132]	; (802accc <__swbuf_r+0x98>)
 802ac48:	429c      	cmp	r4, r3
 802ac4a:	d12b      	bne.n	802aca4 <__swbuf_r+0x70>
 802ac4c:	686c      	ldr	r4, [r5, #4]
 802ac4e:	69a3      	ldr	r3, [r4, #24]
 802ac50:	60a3      	str	r3, [r4, #8]
 802ac52:	89a3      	ldrh	r3, [r4, #12]
 802ac54:	071a      	lsls	r2, r3, #28
 802ac56:	d52f      	bpl.n	802acb8 <__swbuf_r+0x84>
 802ac58:	6923      	ldr	r3, [r4, #16]
 802ac5a:	b36b      	cbz	r3, 802acb8 <__swbuf_r+0x84>
 802ac5c:	6923      	ldr	r3, [r4, #16]
 802ac5e:	6820      	ldr	r0, [r4, #0]
 802ac60:	1ac0      	subs	r0, r0, r3
 802ac62:	6963      	ldr	r3, [r4, #20]
 802ac64:	b2f6      	uxtb	r6, r6
 802ac66:	4283      	cmp	r3, r0
 802ac68:	4637      	mov	r7, r6
 802ac6a:	dc04      	bgt.n	802ac76 <__swbuf_r+0x42>
 802ac6c:	4621      	mov	r1, r4
 802ac6e:	4628      	mov	r0, r5
 802ac70:	f000 f9aa 	bl	802afc8 <_fflush_r>
 802ac74:	bb30      	cbnz	r0, 802acc4 <__swbuf_r+0x90>
 802ac76:	68a3      	ldr	r3, [r4, #8]
 802ac78:	3b01      	subs	r3, #1
 802ac7a:	60a3      	str	r3, [r4, #8]
 802ac7c:	6823      	ldr	r3, [r4, #0]
 802ac7e:	1c5a      	adds	r2, r3, #1
 802ac80:	6022      	str	r2, [r4, #0]
 802ac82:	701e      	strb	r6, [r3, #0]
 802ac84:	6963      	ldr	r3, [r4, #20]
 802ac86:	3001      	adds	r0, #1
 802ac88:	4283      	cmp	r3, r0
 802ac8a:	d004      	beq.n	802ac96 <__swbuf_r+0x62>
 802ac8c:	89a3      	ldrh	r3, [r4, #12]
 802ac8e:	07db      	lsls	r3, r3, #31
 802ac90:	d506      	bpl.n	802aca0 <__swbuf_r+0x6c>
 802ac92:	2e0a      	cmp	r6, #10
 802ac94:	d104      	bne.n	802aca0 <__swbuf_r+0x6c>
 802ac96:	4621      	mov	r1, r4
 802ac98:	4628      	mov	r0, r5
 802ac9a:	f000 f995 	bl	802afc8 <_fflush_r>
 802ac9e:	b988      	cbnz	r0, 802acc4 <__swbuf_r+0x90>
 802aca0:	4638      	mov	r0, r7
 802aca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802aca4:	4b0a      	ldr	r3, [pc, #40]	; (802acd0 <__swbuf_r+0x9c>)
 802aca6:	429c      	cmp	r4, r3
 802aca8:	d101      	bne.n	802acae <__swbuf_r+0x7a>
 802acaa:	68ac      	ldr	r4, [r5, #8]
 802acac:	e7cf      	b.n	802ac4e <__swbuf_r+0x1a>
 802acae:	4b09      	ldr	r3, [pc, #36]	; (802acd4 <__swbuf_r+0xa0>)
 802acb0:	429c      	cmp	r4, r3
 802acb2:	bf08      	it	eq
 802acb4:	68ec      	ldreq	r4, [r5, #12]
 802acb6:	e7ca      	b.n	802ac4e <__swbuf_r+0x1a>
 802acb8:	4621      	mov	r1, r4
 802acba:	4628      	mov	r0, r5
 802acbc:	f000 f81e 	bl	802acfc <__swsetup_r>
 802acc0:	2800      	cmp	r0, #0
 802acc2:	d0cb      	beq.n	802ac5c <__swbuf_r+0x28>
 802acc4:	f04f 37ff 	mov.w	r7, #4294967295
 802acc8:	e7ea      	b.n	802aca0 <__swbuf_r+0x6c>
 802acca:	bf00      	nop
 802accc:	0802fbc0 	.word	0x0802fbc0
 802acd0:	0802fbe0 	.word	0x0802fbe0
 802acd4:	0802fba0 	.word	0x0802fba0

0802acd8 <_write_r>:
 802acd8:	b538      	push	{r3, r4, r5, lr}
 802acda:	4d07      	ldr	r5, [pc, #28]	; (802acf8 <_write_r+0x20>)
 802acdc:	4604      	mov	r4, r0
 802acde:	4608      	mov	r0, r1
 802ace0:	4611      	mov	r1, r2
 802ace2:	2200      	movs	r2, #0
 802ace4:	602a      	str	r2, [r5, #0]
 802ace6:	461a      	mov	r2, r3
 802ace8:	f7d6 fd11 	bl	800170e <_write>
 802acec:	1c43      	adds	r3, r0, #1
 802acee:	d102      	bne.n	802acf6 <_write_r+0x1e>
 802acf0:	682b      	ldr	r3, [r5, #0]
 802acf2:	b103      	cbz	r3, 802acf6 <_write_r+0x1e>
 802acf4:	6023      	str	r3, [r4, #0]
 802acf6:	bd38      	pop	{r3, r4, r5, pc}
 802acf8:	2400bb9c 	.word	0x2400bb9c

0802acfc <__swsetup_r>:
 802acfc:	4b32      	ldr	r3, [pc, #200]	; (802adc8 <__swsetup_r+0xcc>)
 802acfe:	b570      	push	{r4, r5, r6, lr}
 802ad00:	681d      	ldr	r5, [r3, #0]
 802ad02:	4606      	mov	r6, r0
 802ad04:	460c      	mov	r4, r1
 802ad06:	b125      	cbz	r5, 802ad12 <__swsetup_r+0x16>
 802ad08:	69ab      	ldr	r3, [r5, #24]
 802ad0a:	b913      	cbnz	r3, 802ad12 <__swsetup_r+0x16>
 802ad0c:	4628      	mov	r0, r5
 802ad0e:	f7ff f9f9 	bl	802a104 <__sinit>
 802ad12:	4b2e      	ldr	r3, [pc, #184]	; (802adcc <__swsetup_r+0xd0>)
 802ad14:	429c      	cmp	r4, r3
 802ad16:	d10f      	bne.n	802ad38 <__swsetup_r+0x3c>
 802ad18:	686c      	ldr	r4, [r5, #4]
 802ad1a:	89a3      	ldrh	r3, [r4, #12]
 802ad1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802ad20:	0719      	lsls	r1, r3, #28
 802ad22:	d42c      	bmi.n	802ad7e <__swsetup_r+0x82>
 802ad24:	06dd      	lsls	r5, r3, #27
 802ad26:	d411      	bmi.n	802ad4c <__swsetup_r+0x50>
 802ad28:	2309      	movs	r3, #9
 802ad2a:	6033      	str	r3, [r6, #0]
 802ad2c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802ad30:	81a3      	strh	r3, [r4, #12]
 802ad32:	f04f 30ff 	mov.w	r0, #4294967295
 802ad36:	e03e      	b.n	802adb6 <__swsetup_r+0xba>
 802ad38:	4b25      	ldr	r3, [pc, #148]	; (802add0 <__swsetup_r+0xd4>)
 802ad3a:	429c      	cmp	r4, r3
 802ad3c:	d101      	bne.n	802ad42 <__swsetup_r+0x46>
 802ad3e:	68ac      	ldr	r4, [r5, #8]
 802ad40:	e7eb      	b.n	802ad1a <__swsetup_r+0x1e>
 802ad42:	4b24      	ldr	r3, [pc, #144]	; (802add4 <__swsetup_r+0xd8>)
 802ad44:	429c      	cmp	r4, r3
 802ad46:	bf08      	it	eq
 802ad48:	68ec      	ldreq	r4, [r5, #12]
 802ad4a:	e7e6      	b.n	802ad1a <__swsetup_r+0x1e>
 802ad4c:	0758      	lsls	r0, r3, #29
 802ad4e:	d512      	bpl.n	802ad76 <__swsetup_r+0x7a>
 802ad50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802ad52:	b141      	cbz	r1, 802ad66 <__swsetup_r+0x6a>
 802ad54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802ad58:	4299      	cmp	r1, r3
 802ad5a:	d002      	beq.n	802ad62 <__swsetup_r+0x66>
 802ad5c:	4630      	mov	r0, r6
 802ad5e:	f7ff facf 	bl	802a300 <_free_r>
 802ad62:	2300      	movs	r3, #0
 802ad64:	6363      	str	r3, [r4, #52]	; 0x34
 802ad66:	89a3      	ldrh	r3, [r4, #12]
 802ad68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802ad6c:	81a3      	strh	r3, [r4, #12]
 802ad6e:	2300      	movs	r3, #0
 802ad70:	6063      	str	r3, [r4, #4]
 802ad72:	6923      	ldr	r3, [r4, #16]
 802ad74:	6023      	str	r3, [r4, #0]
 802ad76:	89a3      	ldrh	r3, [r4, #12]
 802ad78:	f043 0308 	orr.w	r3, r3, #8
 802ad7c:	81a3      	strh	r3, [r4, #12]
 802ad7e:	6923      	ldr	r3, [r4, #16]
 802ad80:	b94b      	cbnz	r3, 802ad96 <__swsetup_r+0x9a>
 802ad82:	89a3      	ldrh	r3, [r4, #12]
 802ad84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802ad88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802ad8c:	d003      	beq.n	802ad96 <__swsetup_r+0x9a>
 802ad8e:	4621      	mov	r1, r4
 802ad90:	4630      	mov	r0, r6
 802ad92:	f000 f98b 	bl	802b0ac <__smakebuf_r>
 802ad96:	89a0      	ldrh	r0, [r4, #12]
 802ad98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802ad9c:	f010 0301 	ands.w	r3, r0, #1
 802ada0:	d00a      	beq.n	802adb8 <__swsetup_r+0xbc>
 802ada2:	2300      	movs	r3, #0
 802ada4:	60a3      	str	r3, [r4, #8]
 802ada6:	6963      	ldr	r3, [r4, #20]
 802ada8:	425b      	negs	r3, r3
 802adaa:	61a3      	str	r3, [r4, #24]
 802adac:	6923      	ldr	r3, [r4, #16]
 802adae:	b943      	cbnz	r3, 802adc2 <__swsetup_r+0xc6>
 802adb0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802adb4:	d1ba      	bne.n	802ad2c <__swsetup_r+0x30>
 802adb6:	bd70      	pop	{r4, r5, r6, pc}
 802adb8:	0781      	lsls	r1, r0, #30
 802adba:	bf58      	it	pl
 802adbc:	6963      	ldrpl	r3, [r4, #20]
 802adbe:	60a3      	str	r3, [r4, #8]
 802adc0:	e7f4      	b.n	802adac <__swsetup_r+0xb0>
 802adc2:	2000      	movs	r0, #0
 802adc4:	e7f7      	b.n	802adb6 <__swsetup_r+0xba>
 802adc6:	bf00      	nop
 802adc8:	240000cc 	.word	0x240000cc
 802adcc:	0802fbc0 	.word	0x0802fbc0
 802add0:	0802fbe0 	.word	0x0802fbe0
 802add4:	0802fba0 	.word	0x0802fba0

0802add8 <__register_exitproc>:
 802add8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802addc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 802ae98 <__register_exitproc+0xc0>
 802ade0:	4606      	mov	r6, r0
 802ade2:	f8d8 0000 	ldr.w	r0, [r8]
 802ade6:	461f      	mov	r7, r3
 802ade8:	460d      	mov	r5, r1
 802adea:	4691      	mov	r9, r2
 802adec:	f7ff fa5f 	bl	802a2ae <__retarget_lock_acquire_recursive>
 802adf0:	4b25      	ldr	r3, [pc, #148]	; (802ae88 <__register_exitproc+0xb0>)
 802adf2:	681c      	ldr	r4, [r3, #0]
 802adf4:	b934      	cbnz	r4, 802ae04 <__register_exitproc+0x2c>
 802adf6:	4c25      	ldr	r4, [pc, #148]	; (802ae8c <__register_exitproc+0xb4>)
 802adf8:	601c      	str	r4, [r3, #0]
 802adfa:	4b25      	ldr	r3, [pc, #148]	; (802ae90 <__register_exitproc+0xb8>)
 802adfc:	b113      	cbz	r3, 802ae04 <__register_exitproc+0x2c>
 802adfe:	681b      	ldr	r3, [r3, #0]
 802ae00:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802ae04:	6863      	ldr	r3, [r4, #4]
 802ae06:	2b1f      	cmp	r3, #31
 802ae08:	dd07      	ble.n	802ae1a <__register_exitproc+0x42>
 802ae0a:	f8d8 0000 	ldr.w	r0, [r8]
 802ae0e:	f7ff fa50 	bl	802a2b2 <__retarget_lock_release_recursive>
 802ae12:	f04f 30ff 	mov.w	r0, #4294967295
 802ae16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802ae1a:	b34e      	cbz	r6, 802ae70 <__register_exitproc+0x98>
 802ae1c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802ae20:	b988      	cbnz	r0, 802ae46 <__register_exitproc+0x6e>
 802ae22:	4b1c      	ldr	r3, [pc, #112]	; (802ae94 <__register_exitproc+0xbc>)
 802ae24:	b923      	cbnz	r3, 802ae30 <__register_exitproc+0x58>
 802ae26:	f8d8 0000 	ldr.w	r0, [r8]
 802ae2a:	f7ff fa41 	bl	802a2b0 <__retarget_lock_release>
 802ae2e:	e7f0      	b.n	802ae12 <__register_exitproc+0x3a>
 802ae30:	f44f 7084 	mov.w	r0, #264	; 0x108
 802ae34:	f7ff fa3e 	bl	802a2b4 <malloc>
 802ae38:	2800      	cmp	r0, #0
 802ae3a:	d0f4      	beq.n	802ae26 <__register_exitproc+0x4e>
 802ae3c:	2300      	movs	r3, #0
 802ae3e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802ae42:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802ae46:	6863      	ldr	r3, [r4, #4]
 802ae48:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802ae4c:	2201      	movs	r2, #1
 802ae4e:	409a      	lsls	r2, r3
 802ae50:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802ae54:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 802ae58:	4313      	orrs	r3, r2
 802ae5a:	2e02      	cmp	r6, #2
 802ae5c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802ae60:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 802ae64:	bf02      	ittt	eq
 802ae66:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802ae6a:	431a      	orreq	r2, r3
 802ae6c:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 802ae70:	6863      	ldr	r3, [r4, #4]
 802ae72:	f8d8 0000 	ldr.w	r0, [r8]
 802ae76:	1c5a      	adds	r2, r3, #1
 802ae78:	3302      	adds	r3, #2
 802ae7a:	6062      	str	r2, [r4, #4]
 802ae7c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 802ae80:	f7ff fa17 	bl	802a2b2 <__retarget_lock_release_recursive>
 802ae84:	2000      	movs	r0, #0
 802ae86:	e7c6      	b.n	802ae16 <__register_exitproc+0x3e>
 802ae88:	2400b868 	.word	0x2400b868
 802ae8c:	2400b7dc 	.word	0x2400b7dc
 802ae90:	0802fc38 	.word	0x0802fc38
 802ae94:	0802a2b5 	.word	0x0802a2b5
 802ae98:	24000130 	.word	0x24000130

0802ae9c <_close_r>:
 802ae9c:	b538      	push	{r3, r4, r5, lr}
 802ae9e:	4d06      	ldr	r5, [pc, #24]	; (802aeb8 <_close_r+0x1c>)
 802aea0:	2300      	movs	r3, #0
 802aea2:	4604      	mov	r4, r0
 802aea4:	4608      	mov	r0, r1
 802aea6:	602b      	str	r3, [r5, #0]
 802aea8:	f7d6 fc4d 	bl	8001746 <_close>
 802aeac:	1c43      	adds	r3, r0, #1
 802aeae:	d102      	bne.n	802aeb6 <_close_r+0x1a>
 802aeb0:	682b      	ldr	r3, [r5, #0]
 802aeb2:	b103      	cbz	r3, 802aeb6 <_close_r+0x1a>
 802aeb4:	6023      	str	r3, [r4, #0]
 802aeb6:	bd38      	pop	{r3, r4, r5, pc}
 802aeb8:	2400bb9c 	.word	0x2400bb9c

0802aebc <__sflush_r>:
 802aebc:	898a      	ldrh	r2, [r1, #12]
 802aebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802aec2:	4605      	mov	r5, r0
 802aec4:	0710      	lsls	r0, r2, #28
 802aec6:	460c      	mov	r4, r1
 802aec8:	d458      	bmi.n	802af7c <__sflush_r+0xc0>
 802aeca:	684b      	ldr	r3, [r1, #4]
 802aecc:	2b00      	cmp	r3, #0
 802aece:	dc05      	bgt.n	802aedc <__sflush_r+0x20>
 802aed0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802aed2:	2b00      	cmp	r3, #0
 802aed4:	dc02      	bgt.n	802aedc <__sflush_r+0x20>
 802aed6:	2000      	movs	r0, #0
 802aed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802aedc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802aede:	2e00      	cmp	r6, #0
 802aee0:	d0f9      	beq.n	802aed6 <__sflush_r+0x1a>
 802aee2:	2300      	movs	r3, #0
 802aee4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802aee8:	682f      	ldr	r7, [r5, #0]
 802aeea:	602b      	str	r3, [r5, #0]
 802aeec:	d032      	beq.n	802af54 <__sflush_r+0x98>
 802aeee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802aef0:	89a3      	ldrh	r3, [r4, #12]
 802aef2:	075a      	lsls	r2, r3, #29
 802aef4:	d505      	bpl.n	802af02 <__sflush_r+0x46>
 802aef6:	6863      	ldr	r3, [r4, #4]
 802aef8:	1ac0      	subs	r0, r0, r3
 802aefa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802aefc:	b10b      	cbz	r3, 802af02 <__sflush_r+0x46>
 802aefe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802af00:	1ac0      	subs	r0, r0, r3
 802af02:	2300      	movs	r3, #0
 802af04:	4602      	mov	r2, r0
 802af06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802af08:	6a21      	ldr	r1, [r4, #32]
 802af0a:	4628      	mov	r0, r5
 802af0c:	47b0      	blx	r6
 802af0e:	1c43      	adds	r3, r0, #1
 802af10:	89a3      	ldrh	r3, [r4, #12]
 802af12:	d106      	bne.n	802af22 <__sflush_r+0x66>
 802af14:	6829      	ldr	r1, [r5, #0]
 802af16:	291d      	cmp	r1, #29
 802af18:	d82c      	bhi.n	802af74 <__sflush_r+0xb8>
 802af1a:	4a2a      	ldr	r2, [pc, #168]	; (802afc4 <__sflush_r+0x108>)
 802af1c:	40ca      	lsrs	r2, r1
 802af1e:	07d6      	lsls	r6, r2, #31
 802af20:	d528      	bpl.n	802af74 <__sflush_r+0xb8>
 802af22:	2200      	movs	r2, #0
 802af24:	6062      	str	r2, [r4, #4]
 802af26:	04d9      	lsls	r1, r3, #19
 802af28:	6922      	ldr	r2, [r4, #16]
 802af2a:	6022      	str	r2, [r4, #0]
 802af2c:	d504      	bpl.n	802af38 <__sflush_r+0x7c>
 802af2e:	1c42      	adds	r2, r0, #1
 802af30:	d101      	bne.n	802af36 <__sflush_r+0x7a>
 802af32:	682b      	ldr	r3, [r5, #0]
 802af34:	b903      	cbnz	r3, 802af38 <__sflush_r+0x7c>
 802af36:	6560      	str	r0, [r4, #84]	; 0x54
 802af38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802af3a:	602f      	str	r7, [r5, #0]
 802af3c:	2900      	cmp	r1, #0
 802af3e:	d0ca      	beq.n	802aed6 <__sflush_r+0x1a>
 802af40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802af44:	4299      	cmp	r1, r3
 802af46:	d002      	beq.n	802af4e <__sflush_r+0x92>
 802af48:	4628      	mov	r0, r5
 802af4a:	f7ff f9d9 	bl	802a300 <_free_r>
 802af4e:	2000      	movs	r0, #0
 802af50:	6360      	str	r0, [r4, #52]	; 0x34
 802af52:	e7c1      	b.n	802aed8 <__sflush_r+0x1c>
 802af54:	6a21      	ldr	r1, [r4, #32]
 802af56:	2301      	movs	r3, #1
 802af58:	4628      	mov	r0, r5
 802af5a:	47b0      	blx	r6
 802af5c:	1c41      	adds	r1, r0, #1
 802af5e:	d1c7      	bne.n	802aef0 <__sflush_r+0x34>
 802af60:	682b      	ldr	r3, [r5, #0]
 802af62:	2b00      	cmp	r3, #0
 802af64:	d0c4      	beq.n	802aef0 <__sflush_r+0x34>
 802af66:	2b1d      	cmp	r3, #29
 802af68:	d001      	beq.n	802af6e <__sflush_r+0xb2>
 802af6a:	2b16      	cmp	r3, #22
 802af6c:	d101      	bne.n	802af72 <__sflush_r+0xb6>
 802af6e:	602f      	str	r7, [r5, #0]
 802af70:	e7b1      	b.n	802aed6 <__sflush_r+0x1a>
 802af72:	89a3      	ldrh	r3, [r4, #12]
 802af74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802af78:	81a3      	strh	r3, [r4, #12]
 802af7a:	e7ad      	b.n	802aed8 <__sflush_r+0x1c>
 802af7c:	690f      	ldr	r7, [r1, #16]
 802af7e:	2f00      	cmp	r7, #0
 802af80:	d0a9      	beq.n	802aed6 <__sflush_r+0x1a>
 802af82:	0793      	lsls	r3, r2, #30
 802af84:	680e      	ldr	r6, [r1, #0]
 802af86:	bf08      	it	eq
 802af88:	694b      	ldreq	r3, [r1, #20]
 802af8a:	600f      	str	r7, [r1, #0]
 802af8c:	bf18      	it	ne
 802af8e:	2300      	movne	r3, #0
 802af90:	eba6 0807 	sub.w	r8, r6, r7
 802af94:	608b      	str	r3, [r1, #8]
 802af96:	f1b8 0f00 	cmp.w	r8, #0
 802af9a:	dd9c      	ble.n	802aed6 <__sflush_r+0x1a>
 802af9c:	6a21      	ldr	r1, [r4, #32]
 802af9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802afa0:	4643      	mov	r3, r8
 802afa2:	463a      	mov	r2, r7
 802afa4:	4628      	mov	r0, r5
 802afa6:	47b0      	blx	r6
 802afa8:	2800      	cmp	r0, #0
 802afaa:	dc06      	bgt.n	802afba <__sflush_r+0xfe>
 802afac:	89a3      	ldrh	r3, [r4, #12]
 802afae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802afb2:	81a3      	strh	r3, [r4, #12]
 802afb4:	f04f 30ff 	mov.w	r0, #4294967295
 802afb8:	e78e      	b.n	802aed8 <__sflush_r+0x1c>
 802afba:	4407      	add	r7, r0
 802afbc:	eba8 0800 	sub.w	r8, r8, r0
 802afc0:	e7e9      	b.n	802af96 <__sflush_r+0xda>
 802afc2:	bf00      	nop
 802afc4:	20400001 	.word	0x20400001

0802afc8 <_fflush_r>:
 802afc8:	b538      	push	{r3, r4, r5, lr}
 802afca:	690b      	ldr	r3, [r1, #16]
 802afcc:	4605      	mov	r5, r0
 802afce:	460c      	mov	r4, r1
 802afd0:	b913      	cbnz	r3, 802afd8 <_fflush_r+0x10>
 802afd2:	2500      	movs	r5, #0
 802afd4:	4628      	mov	r0, r5
 802afd6:	bd38      	pop	{r3, r4, r5, pc}
 802afd8:	b118      	cbz	r0, 802afe2 <_fflush_r+0x1a>
 802afda:	6983      	ldr	r3, [r0, #24]
 802afdc:	b90b      	cbnz	r3, 802afe2 <_fflush_r+0x1a>
 802afde:	f7ff f891 	bl	802a104 <__sinit>
 802afe2:	4b14      	ldr	r3, [pc, #80]	; (802b034 <_fflush_r+0x6c>)
 802afe4:	429c      	cmp	r4, r3
 802afe6:	d11b      	bne.n	802b020 <_fflush_r+0x58>
 802afe8:	686c      	ldr	r4, [r5, #4]
 802afea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802afee:	2b00      	cmp	r3, #0
 802aff0:	d0ef      	beq.n	802afd2 <_fflush_r+0xa>
 802aff2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802aff4:	07d0      	lsls	r0, r2, #31
 802aff6:	d404      	bmi.n	802b002 <_fflush_r+0x3a>
 802aff8:	0599      	lsls	r1, r3, #22
 802affa:	d402      	bmi.n	802b002 <_fflush_r+0x3a>
 802affc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802affe:	f7ff f956 	bl	802a2ae <__retarget_lock_acquire_recursive>
 802b002:	4628      	mov	r0, r5
 802b004:	4621      	mov	r1, r4
 802b006:	f7ff ff59 	bl	802aebc <__sflush_r>
 802b00a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802b00c:	07da      	lsls	r2, r3, #31
 802b00e:	4605      	mov	r5, r0
 802b010:	d4e0      	bmi.n	802afd4 <_fflush_r+0xc>
 802b012:	89a3      	ldrh	r3, [r4, #12]
 802b014:	059b      	lsls	r3, r3, #22
 802b016:	d4dd      	bmi.n	802afd4 <_fflush_r+0xc>
 802b018:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802b01a:	f7ff f94a 	bl	802a2b2 <__retarget_lock_release_recursive>
 802b01e:	e7d9      	b.n	802afd4 <_fflush_r+0xc>
 802b020:	4b05      	ldr	r3, [pc, #20]	; (802b038 <_fflush_r+0x70>)
 802b022:	429c      	cmp	r4, r3
 802b024:	d101      	bne.n	802b02a <_fflush_r+0x62>
 802b026:	68ac      	ldr	r4, [r5, #8]
 802b028:	e7df      	b.n	802afea <_fflush_r+0x22>
 802b02a:	4b04      	ldr	r3, [pc, #16]	; (802b03c <_fflush_r+0x74>)
 802b02c:	429c      	cmp	r4, r3
 802b02e:	bf08      	it	eq
 802b030:	68ec      	ldreq	r4, [r5, #12]
 802b032:	e7da      	b.n	802afea <_fflush_r+0x22>
 802b034:	0802fbc0 	.word	0x0802fbc0
 802b038:	0802fbe0 	.word	0x0802fbe0
 802b03c:	0802fba0 	.word	0x0802fba0

0802b040 <_lseek_r>:
 802b040:	b538      	push	{r3, r4, r5, lr}
 802b042:	4d07      	ldr	r5, [pc, #28]	; (802b060 <_lseek_r+0x20>)
 802b044:	4604      	mov	r4, r0
 802b046:	4608      	mov	r0, r1
 802b048:	4611      	mov	r1, r2
 802b04a:	2200      	movs	r2, #0
 802b04c:	602a      	str	r2, [r5, #0]
 802b04e:	461a      	mov	r2, r3
 802b050:	f7d6 fba0 	bl	8001794 <_lseek>
 802b054:	1c43      	adds	r3, r0, #1
 802b056:	d102      	bne.n	802b05e <_lseek_r+0x1e>
 802b058:	682b      	ldr	r3, [r5, #0]
 802b05a:	b103      	cbz	r3, 802b05e <_lseek_r+0x1e>
 802b05c:	6023      	str	r3, [r4, #0]
 802b05e:	bd38      	pop	{r3, r4, r5, pc}
 802b060:	2400bb9c 	.word	0x2400bb9c

0802b064 <__swhatbuf_r>:
 802b064:	b570      	push	{r4, r5, r6, lr}
 802b066:	460e      	mov	r6, r1
 802b068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b06c:	2900      	cmp	r1, #0
 802b06e:	b096      	sub	sp, #88	; 0x58
 802b070:	4614      	mov	r4, r2
 802b072:	461d      	mov	r5, r3
 802b074:	da07      	bge.n	802b086 <__swhatbuf_r+0x22>
 802b076:	2300      	movs	r3, #0
 802b078:	602b      	str	r3, [r5, #0]
 802b07a:	89b3      	ldrh	r3, [r6, #12]
 802b07c:	061a      	lsls	r2, r3, #24
 802b07e:	d410      	bmi.n	802b0a2 <__swhatbuf_r+0x3e>
 802b080:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802b084:	e00e      	b.n	802b0a4 <__swhatbuf_r+0x40>
 802b086:	466a      	mov	r2, sp
 802b088:	f000 f86e 	bl	802b168 <_fstat_r>
 802b08c:	2800      	cmp	r0, #0
 802b08e:	dbf2      	blt.n	802b076 <__swhatbuf_r+0x12>
 802b090:	9a01      	ldr	r2, [sp, #4]
 802b092:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802b096:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802b09a:	425a      	negs	r2, r3
 802b09c:	415a      	adcs	r2, r3
 802b09e:	602a      	str	r2, [r5, #0]
 802b0a0:	e7ee      	b.n	802b080 <__swhatbuf_r+0x1c>
 802b0a2:	2340      	movs	r3, #64	; 0x40
 802b0a4:	2000      	movs	r0, #0
 802b0a6:	6023      	str	r3, [r4, #0]
 802b0a8:	b016      	add	sp, #88	; 0x58
 802b0aa:	bd70      	pop	{r4, r5, r6, pc}

0802b0ac <__smakebuf_r>:
 802b0ac:	898b      	ldrh	r3, [r1, #12]
 802b0ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802b0b0:	079d      	lsls	r5, r3, #30
 802b0b2:	4606      	mov	r6, r0
 802b0b4:	460c      	mov	r4, r1
 802b0b6:	d507      	bpl.n	802b0c8 <__smakebuf_r+0x1c>
 802b0b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802b0bc:	6023      	str	r3, [r4, #0]
 802b0be:	6123      	str	r3, [r4, #16]
 802b0c0:	2301      	movs	r3, #1
 802b0c2:	6163      	str	r3, [r4, #20]
 802b0c4:	b002      	add	sp, #8
 802b0c6:	bd70      	pop	{r4, r5, r6, pc}
 802b0c8:	ab01      	add	r3, sp, #4
 802b0ca:	466a      	mov	r2, sp
 802b0cc:	f7ff ffca 	bl	802b064 <__swhatbuf_r>
 802b0d0:	9900      	ldr	r1, [sp, #0]
 802b0d2:	4605      	mov	r5, r0
 802b0d4:	4630      	mov	r0, r6
 802b0d6:	f7ff f963 	bl	802a3a0 <_malloc_r>
 802b0da:	b948      	cbnz	r0, 802b0f0 <__smakebuf_r+0x44>
 802b0dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b0e0:	059a      	lsls	r2, r3, #22
 802b0e2:	d4ef      	bmi.n	802b0c4 <__smakebuf_r+0x18>
 802b0e4:	f023 0303 	bic.w	r3, r3, #3
 802b0e8:	f043 0302 	orr.w	r3, r3, #2
 802b0ec:	81a3      	strh	r3, [r4, #12]
 802b0ee:	e7e3      	b.n	802b0b8 <__smakebuf_r+0xc>
 802b0f0:	4b0d      	ldr	r3, [pc, #52]	; (802b128 <__smakebuf_r+0x7c>)
 802b0f2:	62b3      	str	r3, [r6, #40]	; 0x28
 802b0f4:	89a3      	ldrh	r3, [r4, #12]
 802b0f6:	6020      	str	r0, [r4, #0]
 802b0f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802b0fc:	81a3      	strh	r3, [r4, #12]
 802b0fe:	9b00      	ldr	r3, [sp, #0]
 802b100:	6163      	str	r3, [r4, #20]
 802b102:	9b01      	ldr	r3, [sp, #4]
 802b104:	6120      	str	r0, [r4, #16]
 802b106:	b15b      	cbz	r3, 802b120 <__smakebuf_r+0x74>
 802b108:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802b10c:	4630      	mov	r0, r6
 802b10e:	f000 f83d 	bl	802b18c <_isatty_r>
 802b112:	b128      	cbz	r0, 802b120 <__smakebuf_r+0x74>
 802b114:	89a3      	ldrh	r3, [r4, #12]
 802b116:	f023 0303 	bic.w	r3, r3, #3
 802b11a:	f043 0301 	orr.w	r3, r3, #1
 802b11e:	81a3      	strh	r3, [r4, #12]
 802b120:	89a0      	ldrh	r0, [r4, #12]
 802b122:	4305      	orrs	r5, r0
 802b124:	81a5      	strh	r5, [r4, #12]
 802b126:	e7cd      	b.n	802b0c4 <__smakebuf_r+0x18>
 802b128:	0802a09d 	.word	0x0802a09d

0802b12c <__malloc_lock>:
 802b12c:	4801      	ldr	r0, [pc, #4]	; (802b134 <__malloc_lock+0x8>)
 802b12e:	f7ff b8be 	b.w	802a2ae <__retarget_lock_acquire_recursive>
 802b132:	bf00      	nop
 802b134:	2400bb94 	.word	0x2400bb94

0802b138 <__malloc_unlock>:
 802b138:	4801      	ldr	r0, [pc, #4]	; (802b140 <__malloc_unlock+0x8>)
 802b13a:	f7ff b8ba 	b.w	802a2b2 <__retarget_lock_release_recursive>
 802b13e:	bf00      	nop
 802b140:	2400bb94 	.word	0x2400bb94

0802b144 <_read_r>:
 802b144:	b538      	push	{r3, r4, r5, lr}
 802b146:	4d07      	ldr	r5, [pc, #28]	; (802b164 <_read_r+0x20>)
 802b148:	4604      	mov	r4, r0
 802b14a:	4608      	mov	r0, r1
 802b14c:	4611      	mov	r1, r2
 802b14e:	2200      	movs	r2, #0
 802b150:	602a      	str	r2, [r5, #0]
 802b152:	461a      	mov	r2, r3
 802b154:	f7d6 fabe 	bl	80016d4 <_read>
 802b158:	1c43      	adds	r3, r0, #1
 802b15a:	d102      	bne.n	802b162 <_read_r+0x1e>
 802b15c:	682b      	ldr	r3, [r5, #0]
 802b15e:	b103      	cbz	r3, 802b162 <_read_r+0x1e>
 802b160:	6023      	str	r3, [r4, #0]
 802b162:	bd38      	pop	{r3, r4, r5, pc}
 802b164:	2400bb9c 	.word	0x2400bb9c

0802b168 <_fstat_r>:
 802b168:	b538      	push	{r3, r4, r5, lr}
 802b16a:	4d07      	ldr	r5, [pc, #28]	; (802b188 <_fstat_r+0x20>)
 802b16c:	2300      	movs	r3, #0
 802b16e:	4604      	mov	r4, r0
 802b170:	4608      	mov	r0, r1
 802b172:	4611      	mov	r1, r2
 802b174:	602b      	str	r3, [r5, #0]
 802b176:	f7d6 faf2 	bl	800175e <_fstat>
 802b17a:	1c43      	adds	r3, r0, #1
 802b17c:	d102      	bne.n	802b184 <_fstat_r+0x1c>
 802b17e:	682b      	ldr	r3, [r5, #0]
 802b180:	b103      	cbz	r3, 802b184 <_fstat_r+0x1c>
 802b182:	6023      	str	r3, [r4, #0]
 802b184:	bd38      	pop	{r3, r4, r5, pc}
 802b186:	bf00      	nop
 802b188:	2400bb9c 	.word	0x2400bb9c

0802b18c <_isatty_r>:
 802b18c:	b538      	push	{r3, r4, r5, lr}
 802b18e:	4d06      	ldr	r5, [pc, #24]	; (802b1a8 <_isatty_r+0x1c>)
 802b190:	2300      	movs	r3, #0
 802b192:	4604      	mov	r4, r0
 802b194:	4608      	mov	r0, r1
 802b196:	602b      	str	r3, [r5, #0]
 802b198:	f7d6 faf1 	bl	800177e <_isatty>
 802b19c:	1c43      	adds	r3, r0, #1
 802b19e:	d102      	bne.n	802b1a6 <_isatty_r+0x1a>
 802b1a0:	682b      	ldr	r3, [r5, #0]
 802b1a2:	b103      	cbz	r3, 802b1a6 <_isatty_r+0x1a>
 802b1a4:	6023      	str	r3, [r4, #0]
 802b1a6:	bd38      	pop	{r3, r4, r5, pc}
 802b1a8:	2400bb9c 	.word	0x2400bb9c

0802b1ac <_init>:
 802b1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b1ae:	bf00      	nop
 802b1b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802b1b2:	bc08      	pop	{r3}
 802b1b4:	469e      	mov	lr, r3
 802b1b6:	4770      	bx	lr

0802b1b8 <_fini>:
 802b1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b1ba:	bf00      	nop
 802b1bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802b1be:	bc08      	pop	{r3}
 802b1c0:	469e      	mov	lr, r3
 802b1c2:	4770      	bx	lr
