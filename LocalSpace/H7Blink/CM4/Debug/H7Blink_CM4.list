
H7Blink_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a490  08100298  08100298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0810a728  0810a728  0001a728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810a768  0810a768  0001a768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810a770  0810a770  0001a770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810a774  0810a774  0001a774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  10000000  0810a778  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000330  10000010  0810a788  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  10000340  0810a788  00020340  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001b2ff  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000033bc  00000000  00000000  0003b382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000015d0  00000000  00000000  0003e740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000010f4  00000000  00000000  0003fd10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003cbcc  00000000  00000000  00040e04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001f1e5  00000000  00000000  0007d9d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00197034  00000000  00000000  0009cbb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00005d00  00000000  00000000  00233bec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000069  00000000  00000000  002398ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000010 	.word	0x10000010
 81002b4:	00000000 	.word	0x00000000
 81002b8:	0810a710 	.word	0x0810a710

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000014 	.word	0x10000014
 81002d4:	0810a710 	.word	0x0810a710

081002d8 <__aeabi_uldivmod>:
 81002d8:	b953      	cbnz	r3, 81002f0 <__aeabi_uldivmod+0x18>
 81002da:	b94a      	cbnz	r2, 81002f0 <__aeabi_uldivmod+0x18>
 81002dc:	2900      	cmp	r1, #0
 81002de:	bf08      	it	eq
 81002e0:	2800      	cmpeq	r0, #0
 81002e2:	bf1c      	itt	ne
 81002e4:	f04f 31ff 	movne.w	r1, #4294967295
 81002e8:	f04f 30ff 	movne.w	r0, #4294967295
 81002ec:	f000 b970 	b.w	81005d0 <__aeabi_idiv0>
 81002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 81002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 81002f8:	f000 f806 	bl	8100308 <__udivmoddi4>
 81002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100304:	b004      	add	sp, #16
 8100306:	4770      	bx	lr

08100308 <__udivmoddi4>:
 8100308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810030c:	9e08      	ldr	r6, [sp, #32]
 810030e:	460d      	mov	r5, r1
 8100310:	4604      	mov	r4, r0
 8100312:	460f      	mov	r7, r1
 8100314:	2b00      	cmp	r3, #0
 8100316:	d14a      	bne.n	81003ae <__udivmoddi4+0xa6>
 8100318:	428a      	cmp	r2, r1
 810031a:	4694      	mov	ip, r2
 810031c:	d965      	bls.n	81003ea <__udivmoddi4+0xe2>
 810031e:	fab2 f382 	clz	r3, r2
 8100322:	b143      	cbz	r3, 8100336 <__udivmoddi4+0x2e>
 8100324:	fa02 fc03 	lsl.w	ip, r2, r3
 8100328:	f1c3 0220 	rsb	r2, r3, #32
 810032c:	409f      	lsls	r7, r3
 810032e:	fa20 f202 	lsr.w	r2, r0, r2
 8100332:	4317      	orrs	r7, r2
 8100334:	409c      	lsls	r4, r3
 8100336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 810033a:	fa1f f58c 	uxth.w	r5, ip
 810033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8100342:	0c22      	lsrs	r2, r4, #16
 8100344:	fb0e 7711 	mls	r7, lr, r1, r7
 8100348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 810034c:	fb01 f005 	mul.w	r0, r1, r5
 8100350:	4290      	cmp	r0, r2
 8100352:	d90a      	bls.n	810036a <__udivmoddi4+0x62>
 8100354:	eb1c 0202 	adds.w	r2, ip, r2
 8100358:	f101 37ff 	add.w	r7, r1, #4294967295
 810035c:	f080 811c 	bcs.w	8100598 <__udivmoddi4+0x290>
 8100360:	4290      	cmp	r0, r2
 8100362:	f240 8119 	bls.w	8100598 <__udivmoddi4+0x290>
 8100366:	3902      	subs	r1, #2
 8100368:	4462      	add	r2, ip
 810036a:	1a12      	subs	r2, r2, r0
 810036c:	b2a4      	uxth	r4, r4
 810036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8100372:	fb0e 2210 	mls	r2, lr, r0, r2
 8100376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 810037a:	fb00 f505 	mul.w	r5, r0, r5
 810037e:	42a5      	cmp	r5, r4
 8100380:	d90a      	bls.n	8100398 <__udivmoddi4+0x90>
 8100382:	eb1c 0404 	adds.w	r4, ip, r4
 8100386:	f100 32ff 	add.w	r2, r0, #4294967295
 810038a:	f080 8107 	bcs.w	810059c <__udivmoddi4+0x294>
 810038e:	42a5      	cmp	r5, r4
 8100390:	f240 8104 	bls.w	810059c <__udivmoddi4+0x294>
 8100394:	4464      	add	r4, ip
 8100396:	3802      	subs	r0, #2
 8100398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 810039c:	1b64      	subs	r4, r4, r5
 810039e:	2100      	movs	r1, #0
 81003a0:	b11e      	cbz	r6, 81003aa <__udivmoddi4+0xa2>
 81003a2:	40dc      	lsrs	r4, r3
 81003a4:	2300      	movs	r3, #0
 81003a6:	e9c6 4300 	strd	r4, r3, [r6]
 81003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81003ae:	428b      	cmp	r3, r1
 81003b0:	d908      	bls.n	81003c4 <__udivmoddi4+0xbc>
 81003b2:	2e00      	cmp	r6, #0
 81003b4:	f000 80ed 	beq.w	8100592 <__udivmoddi4+0x28a>
 81003b8:	2100      	movs	r1, #0
 81003ba:	e9c6 0500 	strd	r0, r5, [r6]
 81003be:	4608      	mov	r0, r1
 81003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81003c4:	fab3 f183 	clz	r1, r3
 81003c8:	2900      	cmp	r1, #0
 81003ca:	d149      	bne.n	8100460 <__udivmoddi4+0x158>
 81003cc:	42ab      	cmp	r3, r5
 81003ce:	d302      	bcc.n	81003d6 <__udivmoddi4+0xce>
 81003d0:	4282      	cmp	r2, r0
 81003d2:	f200 80f8 	bhi.w	81005c6 <__udivmoddi4+0x2be>
 81003d6:	1a84      	subs	r4, r0, r2
 81003d8:	eb65 0203 	sbc.w	r2, r5, r3
 81003dc:	2001      	movs	r0, #1
 81003de:	4617      	mov	r7, r2
 81003e0:	2e00      	cmp	r6, #0
 81003e2:	d0e2      	beq.n	81003aa <__udivmoddi4+0xa2>
 81003e4:	e9c6 4700 	strd	r4, r7, [r6]
 81003e8:	e7df      	b.n	81003aa <__udivmoddi4+0xa2>
 81003ea:	b902      	cbnz	r2, 81003ee <__udivmoddi4+0xe6>
 81003ec:	deff      	udf	#255	; 0xff
 81003ee:	fab2 f382 	clz	r3, r2
 81003f2:	2b00      	cmp	r3, #0
 81003f4:	f040 8090 	bne.w	8100518 <__udivmoddi4+0x210>
 81003f8:	1a8a      	subs	r2, r1, r2
 81003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 81003fe:	fa1f fe8c 	uxth.w	lr, ip
 8100402:	2101      	movs	r1, #1
 8100404:	fbb2 f5f7 	udiv	r5, r2, r7
 8100408:	fb07 2015 	mls	r0, r7, r5, r2
 810040c:	0c22      	lsrs	r2, r4, #16
 810040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8100412:	fb0e f005 	mul.w	r0, lr, r5
 8100416:	4290      	cmp	r0, r2
 8100418:	d908      	bls.n	810042c <__udivmoddi4+0x124>
 810041a:	eb1c 0202 	adds.w	r2, ip, r2
 810041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8100422:	d202      	bcs.n	810042a <__udivmoddi4+0x122>
 8100424:	4290      	cmp	r0, r2
 8100426:	f200 80cb 	bhi.w	81005c0 <__udivmoddi4+0x2b8>
 810042a:	4645      	mov	r5, r8
 810042c:	1a12      	subs	r2, r2, r0
 810042e:	b2a4      	uxth	r4, r4
 8100430:	fbb2 f0f7 	udiv	r0, r2, r7
 8100434:	fb07 2210 	mls	r2, r7, r0, r2
 8100438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 810043c:	fb0e fe00 	mul.w	lr, lr, r0
 8100440:	45a6      	cmp	lr, r4
 8100442:	d908      	bls.n	8100456 <__udivmoddi4+0x14e>
 8100444:	eb1c 0404 	adds.w	r4, ip, r4
 8100448:	f100 32ff 	add.w	r2, r0, #4294967295
 810044c:	d202      	bcs.n	8100454 <__udivmoddi4+0x14c>
 810044e:	45a6      	cmp	lr, r4
 8100450:	f200 80bb 	bhi.w	81005ca <__udivmoddi4+0x2c2>
 8100454:	4610      	mov	r0, r2
 8100456:	eba4 040e 	sub.w	r4, r4, lr
 810045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 810045e:	e79f      	b.n	81003a0 <__udivmoddi4+0x98>
 8100460:	f1c1 0720 	rsb	r7, r1, #32
 8100464:	408b      	lsls	r3, r1
 8100466:	fa22 fc07 	lsr.w	ip, r2, r7
 810046a:	ea4c 0c03 	orr.w	ip, ip, r3
 810046e:	fa05 f401 	lsl.w	r4, r5, r1
 8100472:	fa20 f307 	lsr.w	r3, r0, r7
 8100476:	40fd      	lsrs	r5, r7
 8100478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 810047c:	4323      	orrs	r3, r4
 810047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8100482:	fa1f fe8c 	uxth.w	lr, ip
 8100486:	fb09 5518 	mls	r5, r9, r8, r5
 810048a:	0c1c      	lsrs	r4, r3, #16
 810048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8100490:	fb08 f50e 	mul.w	r5, r8, lr
 8100494:	42a5      	cmp	r5, r4
 8100496:	fa02 f201 	lsl.w	r2, r2, r1
 810049a:	fa00 f001 	lsl.w	r0, r0, r1
 810049e:	d90b      	bls.n	81004b8 <__udivmoddi4+0x1b0>
 81004a0:	eb1c 0404 	adds.w	r4, ip, r4
 81004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 81004a8:	f080 8088 	bcs.w	81005bc <__udivmoddi4+0x2b4>
 81004ac:	42a5      	cmp	r5, r4
 81004ae:	f240 8085 	bls.w	81005bc <__udivmoddi4+0x2b4>
 81004b2:	f1a8 0802 	sub.w	r8, r8, #2
 81004b6:	4464      	add	r4, ip
 81004b8:	1b64      	subs	r4, r4, r5
 81004ba:	b29d      	uxth	r5, r3
 81004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 81004c0:	fb09 4413 	mls	r4, r9, r3, r4
 81004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 81004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 81004cc:	45a6      	cmp	lr, r4
 81004ce:	d908      	bls.n	81004e2 <__udivmoddi4+0x1da>
 81004d0:	eb1c 0404 	adds.w	r4, ip, r4
 81004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 81004d8:	d26c      	bcs.n	81005b4 <__udivmoddi4+0x2ac>
 81004da:	45a6      	cmp	lr, r4
 81004dc:	d96a      	bls.n	81005b4 <__udivmoddi4+0x2ac>
 81004de:	3b02      	subs	r3, #2
 81004e0:	4464      	add	r4, ip
 81004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 81004e6:	fba3 9502 	umull	r9, r5, r3, r2
 81004ea:	eba4 040e 	sub.w	r4, r4, lr
 81004ee:	42ac      	cmp	r4, r5
 81004f0:	46c8      	mov	r8, r9
 81004f2:	46ae      	mov	lr, r5
 81004f4:	d356      	bcc.n	81005a4 <__udivmoddi4+0x29c>
 81004f6:	d053      	beq.n	81005a0 <__udivmoddi4+0x298>
 81004f8:	b156      	cbz	r6, 8100510 <__udivmoddi4+0x208>
 81004fa:	ebb0 0208 	subs.w	r2, r0, r8
 81004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8100502:	fa04 f707 	lsl.w	r7, r4, r7
 8100506:	40ca      	lsrs	r2, r1
 8100508:	40cc      	lsrs	r4, r1
 810050a:	4317      	orrs	r7, r2
 810050c:	e9c6 7400 	strd	r7, r4, [r6]
 8100510:	4618      	mov	r0, r3
 8100512:	2100      	movs	r1, #0
 8100514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100518:	f1c3 0120 	rsb	r1, r3, #32
 810051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8100520:	fa20 f201 	lsr.w	r2, r0, r1
 8100524:	fa25 f101 	lsr.w	r1, r5, r1
 8100528:	409d      	lsls	r5, r3
 810052a:	432a      	orrs	r2, r5
 810052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100530:	fa1f fe8c 	uxth.w	lr, ip
 8100534:	fbb1 f0f7 	udiv	r0, r1, r7
 8100538:	fb07 1510 	mls	r5, r7, r0, r1
 810053c:	0c11      	lsrs	r1, r2, #16
 810053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8100542:	fb00 f50e 	mul.w	r5, r0, lr
 8100546:	428d      	cmp	r5, r1
 8100548:	fa04 f403 	lsl.w	r4, r4, r3
 810054c:	d908      	bls.n	8100560 <__udivmoddi4+0x258>
 810054e:	eb1c 0101 	adds.w	r1, ip, r1
 8100552:	f100 38ff 	add.w	r8, r0, #4294967295
 8100556:	d22f      	bcs.n	81005b8 <__udivmoddi4+0x2b0>
 8100558:	428d      	cmp	r5, r1
 810055a:	d92d      	bls.n	81005b8 <__udivmoddi4+0x2b0>
 810055c:	3802      	subs	r0, #2
 810055e:	4461      	add	r1, ip
 8100560:	1b49      	subs	r1, r1, r5
 8100562:	b292      	uxth	r2, r2
 8100564:	fbb1 f5f7 	udiv	r5, r1, r7
 8100568:	fb07 1115 	mls	r1, r7, r5, r1
 810056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8100570:	fb05 f10e 	mul.w	r1, r5, lr
 8100574:	4291      	cmp	r1, r2
 8100576:	d908      	bls.n	810058a <__udivmoddi4+0x282>
 8100578:	eb1c 0202 	adds.w	r2, ip, r2
 810057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8100580:	d216      	bcs.n	81005b0 <__udivmoddi4+0x2a8>
 8100582:	4291      	cmp	r1, r2
 8100584:	d914      	bls.n	81005b0 <__udivmoddi4+0x2a8>
 8100586:	3d02      	subs	r5, #2
 8100588:	4462      	add	r2, ip
 810058a:	1a52      	subs	r2, r2, r1
 810058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8100590:	e738      	b.n	8100404 <__udivmoddi4+0xfc>
 8100592:	4631      	mov	r1, r6
 8100594:	4630      	mov	r0, r6
 8100596:	e708      	b.n	81003aa <__udivmoddi4+0xa2>
 8100598:	4639      	mov	r1, r7
 810059a:	e6e6      	b.n	810036a <__udivmoddi4+0x62>
 810059c:	4610      	mov	r0, r2
 810059e:	e6fb      	b.n	8100398 <__udivmoddi4+0x90>
 81005a0:	4548      	cmp	r0, r9
 81005a2:	d2a9      	bcs.n	81004f8 <__udivmoddi4+0x1f0>
 81005a4:	ebb9 0802 	subs.w	r8, r9, r2
 81005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 81005ac:	3b01      	subs	r3, #1
 81005ae:	e7a3      	b.n	81004f8 <__udivmoddi4+0x1f0>
 81005b0:	4645      	mov	r5, r8
 81005b2:	e7ea      	b.n	810058a <__udivmoddi4+0x282>
 81005b4:	462b      	mov	r3, r5
 81005b6:	e794      	b.n	81004e2 <__udivmoddi4+0x1da>
 81005b8:	4640      	mov	r0, r8
 81005ba:	e7d1      	b.n	8100560 <__udivmoddi4+0x258>
 81005bc:	46d0      	mov	r8, sl
 81005be:	e77b      	b.n	81004b8 <__udivmoddi4+0x1b0>
 81005c0:	3d02      	subs	r5, #2
 81005c2:	4462      	add	r2, ip
 81005c4:	e732      	b.n	810042c <__udivmoddi4+0x124>
 81005c6:	4608      	mov	r0, r1
 81005c8:	e70a      	b.n	81003e0 <__udivmoddi4+0xd8>
 81005ca:	4464      	add	r4, ip
 81005cc:	3802      	subs	r0, #2
 81005ce:	e742      	b.n	8100456 <__udivmoddi4+0x14e>

081005d0 <__aeabi_idiv0>:
 81005d0:	4770      	bx	lr
 81005d2:	bf00      	nop

081005d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81005d4:	b480      	push	{r7}
 81005d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81005d8:	4b09      	ldr	r3, [pc, #36]	; (8100600 <SystemInit+0x2c>)
 81005da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81005de:	4a08      	ldr	r2, [pc, #32]	; (8100600 <SystemInit+0x2c>)
 81005e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81005e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81005e8:	4b05      	ldr	r3, [pc, #20]	; (8100600 <SystemInit+0x2c>)
 81005ea:	691b      	ldr	r3, [r3, #16]
 81005ec:	4a04      	ldr	r2, [pc, #16]	; (8100600 <SystemInit+0x2c>)
 81005ee:	f043 0310 	orr.w	r3, r3, #16
 81005f2:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81005f4:	bf00      	nop
 81005f6:	46bd      	mov	sp, r7
 81005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81005fc:	4770      	bx	lr
 81005fe:	bf00      	nop
 8100600:	e000ed00 	.word	0xe000ed00

08100604 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8100604:	b580      	push	{r7, lr}
 8100606:	b08a      	sub	sp, #40	; 0x28
 8100608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 810060a:	f107 031c 	add.w	r3, r7, #28
 810060e:	2200      	movs	r2, #0
 8100610:	601a      	str	r2, [r3, #0]
 8100612:	605a      	str	r2, [r3, #4]
 8100614:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8100616:	463b      	mov	r3, r7
 8100618:	2200      	movs	r2, #0
 810061a:	601a      	str	r2, [r3, #0]
 810061c:	605a      	str	r2, [r3, #4]
 810061e:	609a      	str	r2, [r3, #8]
 8100620:	60da      	str	r2, [r3, #12]
 8100622:	611a      	str	r2, [r3, #16]
 8100624:	615a      	str	r2, [r3, #20]
 8100626:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8100628:	4b3f      	ldr	r3, [pc, #252]	; (8100728 <MX_ADC1_Init+0x124>)
 810062a:	4a40      	ldr	r2, [pc, #256]	; (810072c <MX_ADC1_Init+0x128>)
 810062c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 810062e:	4b3e      	ldr	r3, [pc, #248]	; (8100728 <MX_ADC1_Init+0x124>)
 8100630:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8100634:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8100636:	4b3c      	ldr	r3, [pc, #240]	; (8100728 <MX_ADC1_Init+0x124>)
 8100638:	2200      	movs	r2, #0
 810063a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 810063c:	4b3a      	ldr	r3, [pc, #232]	; (8100728 <MX_ADC1_Init+0x124>)
 810063e:	2201      	movs	r2, #1
 8100640:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8100642:	4b39      	ldr	r3, [pc, #228]	; (8100728 <MX_ADC1_Init+0x124>)
 8100644:	2204      	movs	r2, #4
 8100646:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8100648:	4b37      	ldr	r3, [pc, #220]	; (8100728 <MX_ADC1_Init+0x124>)
 810064a:	2200      	movs	r2, #0
 810064c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 810064e:	4b36      	ldr	r3, [pc, #216]	; (8100728 <MX_ADC1_Init+0x124>)
 8100650:	2200      	movs	r2, #0
 8100652:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 3;
 8100654:	4b34      	ldr	r3, [pc, #208]	; (8100728 <MX_ADC1_Init+0x124>)
 8100656:	2203      	movs	r2, #3
 8100658:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 810065a:	4b33      	ldr	r3, [pc, #204]	; (8100728 <MX_ADC1_Init+0x124>)
 810065c:	2200      	movs	r2, #0
 810065e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8100660:	4b31      	ldr	r3, [pc, #196]	; (8100728 <MX_ADC1_Init+0x124>)
 8100662:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8100666:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8100668:	4b2f      	ldr	r3, [pc, #188]	; (8100728 <MX_ADC1_Init+0x124>)
 810066a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 810066e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8100670:	4b2d      	ldr	r3, [pc, #180]	; (8100728 <MX_ADC1_Init+0x124>)
 8100672:	2203      	movs	r2, #3
 8100674:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8100676:	4b2c      	ldr	r3, [pc, #176]	; (8100728 <MX_ADC1_Init+0x124>)
 8100678:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 810067c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 810067e:	4b2a      	ldr	r3, [pc, #168]	; (8100728 <MX_ADC1_Init+0x124>)
 8100680:	2200      	movs	r2, #0
 8100682:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8100684:	4b28      	ldr	r3, [pc, #160]	; (8100728 <MX_ADC1_Init+0x124>)
 8100686:	2200      	movs	r2, #0
 8100688:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 810068c:	4826      	ldr	r0, [pc, #152]	; (8100728 <MX_ADC1_Init+0x124>)
 810068e:	f001 f803 	bl	8101698 <HAL_ADC_Init>
 8100692:	4603      	mov	r3, r0
 8100694:	2b00      	cmp	r3, #0
 8100696:	d001      	beq.n	810069c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8100698:	f000 fb2e 	bl	8100cf8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 810069c:	2300      	movs	r3, #0
 810069e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 81006a0:	f107 031c 	add.w	r3, r7, #28
 81006a4:	4619      	mov	r1, r3
 81006a6:	4820      	ldr	r0, [pc, #128]	; (8100728 <MX_ADC1_Init+0x124>)
 81006a8:	f001 fe1a 	bl	81022e0 <HAL_ADCEx_MultiModeConfigChannel>
 81006ac:	4603      	mov	r3, r0
 81006ae:	2b00      	cmp	r3, #0
 81006b0:	d001      	beq.n	81006b6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 81006b2:	f000 fb21 	bl	8100cf8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 81006b6:	4b1e      	ldr	r3, [pc, #120]	; (8100730 <MX_ADC1_Init+0x12c>)
 81006b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 81006ba:	2306      	movs	r3, #6
 81006bc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 81006be:	2303      	movs	r3, #3
 81006c0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 81006c2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 81006c6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 81006c8:	2304      	movs	r3, #4
 81006ca:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 81006cc:	2300      	movs	r3, #0
 81006ce:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 81006d0:	2300      	movs	r3, #0
 81006d2:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 81006d4:	463b      	mov	r3, r7
 81006d6:	4619      	mov	r1, r3
 81006d8:	4813      	ldr	r0, [pc, #76]	; (8100728 <MX_ADC1_Init+0x124>)
 81006da:	f001 f97f 	bl	81019dc <HAL_ADC_ConfigChannel>
 81006de:	4603      	mov	r3, r0
 81006e0:	2b00      	cmp	r3, #0
 81006e2:	d001      	beq.n	81006e8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 81006e4:	f000 fb08 	bl	8100cf8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 81006e8:	2301      	movs	r3, #1
 81006ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 81006ec:	230c      	movs	r3, #12
 81006ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 81006f0:	463b      	mov	r3, r7
 81006f2:	4619      	mov	r1, r3
 81006f4:	480c      	ldr	r0, [pc, #48]	; (8100728 <MX_ADC1_Init+0x124>)
 81006f6:	f001 f971 	bl	81019dc <HAL_ADC_ConfigChannel>
 81006fa:	4603      	mov	r3, r0
 81006fc:	2b00      	cmp	r3, #0
 81006fe:	d001      	beq.n	8100704 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8100700:	f000 fafa 	bl	8100cf8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8100704:	4b0b      	ldr	r3, [pc, #44]	; (8100734 <MX_ADC1_Init+0x130>)
 8100706:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8100708:	2312      	movs	r3, #18
 810070a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 810070c:	463b      	mov	r3, r7
 810070e:	4619      	mov	r1, r3
 8100710:	4805      	ldr	r0, [pc, #20]	; (8100728 <MX_ADC1_Init+0x124>)
 8100712:	f001 f963 	bl	81019dc <HAL_ADC_ConfigChannel>
 8100716:	4603      	mov	r3, r0
 8100718:	2b00      	cmp	r3, #0
 810071a:	d001      	beq.n	8100720 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 810071c:	f000 faec 	bl	8100cf8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8100720:	bf00      	nop
 8100722:	3728      	adds	r7, #40	; 0x28
 8100724:	46bd      	mov	sp, r7
 8100726:	bd80      	pop	{r7, pc}
 8100728:	1000002c 	.word	0x1000002c
 810072c:	40022000 	.word	0x40022000
 8100730:	2a000400 	.word	0x2a000400
 8100734:	04300002 	.word	0x04300002

08100738 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8100738:	b580      	push	{r7, lr}
 810073a:	b088      	sub	sp, #32
 810073c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 810073e:	1d3b      	adds	r3, r7, #4
 8100740:	2200      	movs	r2, #0
 8100742:	601a      	str	r2, [r3, #0]
 8100744:	605a      	str	r2, [r3, #4]
 8100746:	609a      	str	r2, [r3, #8]
 8100748:	60da      	str	r2, [r3, #12]
 810074a:	611a      	str	r2, [r3, #16]
 810074c:	615a      	str	r2, [r3, #20]
 810074e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8100750:	4b39      	ldr	r3, [pc, #228]	; (8100838 <MX_ADC3_Init+0x100>)
 8100752:	4a3a      	ldr	r2, [pc, #232]	; (810083c <MX_ADC3_Init+0x104>)
 8100754:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8100756:	4b38      	ldr	r3, [pc, #224]	; (8100838 <MX_ADC3_Init+0x100>)
 8100758:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 810075c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 810075e:	4b36      	ldr	r3, [pc, #216]	; (8100838 <MX_ADC3_Init+0x100>)
 8100760:	2200      	movs	r2, #0
 8100762:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8100764:	4b34      	ldr	r3, [pc, #208]	; (8100838 <MX_ADC3_Init+0x100>)
 8100766:	2201      	movs	r2, #1
 8100768:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 810076a:	4b33      	ldr	r3, [pc, #204]	; (8100838 <MX_ADC3_Init+0x100>)
 810076c:	2204      	movs	r2, #4
 810076e:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8100770:	4b31      	ldr	r3, [pc, #196]	; (8100838 <MX_ADC3_Init+0x100>)
 8100772:	2200      	movs	r2, #0
 8100774:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8100776:	4b30      	ldr	r3, [pc, #192]	; (8100838 <MX_ADC3_Init+0x100>)
 8100778:	2200      	movs	r2, #0
 810077a:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 3;
 810077c:	4b2e      	ldr	r3, [pc, #184]	; (8100838 <MX_ADC3_Init+0x100>)
 810077e:	2203      	movs	r2, #3
 8100780:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8100782:	4b2d      	ldr	r3, [pc, #180]	; (8100838 <MX_ADC3_Init+0x100>)
 8100784:	2200      	movs	r2, #0
 8100786:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8100788:	4b2b      	ldr	r3, [pc, #172]	; (8100838 <MX_ADC3_Init+0x100>)
 810078a:	f44f 6290 	mov.w	r2, #1152	; 0x480
 810078e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8100790:	4b29      	ldr	r3, [pc, #164]	; (8100838 <MX_ADC3_Init+0x100>)
 8100792:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8100796:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8100798:	4b27      	ldr	r3, [pc, #156]	; (8100838 <MX_ADC3_Init+0x100>)
 810079a:	2203      	movs	r2, #3
 810079c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 810079e:	4b26      	ldr	r3, [pc, #152]	; (8100838 <MX_ADC3_Init+0x100>)
 81007a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 81007a4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 81007a6:	4b24      	ldr	r3, [pc, #144]	; (8100838 <MX_ADC3_Init+0x100>)
 81007a8:	2200      	movs	r2, #0
 81007aa:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 81007ac:	4b22      	ldr	r3, [pc, #136]	; (8100838 <MX_ADC3_Init+0x100>)
 81007ae:	2200      	movs	r2, #0
 81007b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 81007b4:	4820      	ldr	r0, [pc, #128]	; (8100838 <MX_ADC3_Init+0x100>)
 81007b6:	f000 ff6f 	bl	8101698 <HAL_ADC_Init>
 81007ba:	4603      	mov	r3, r0
 81007bc:	2b00      	cmp	r3, #0
 81007be:	d001      	beq.n	81007c4 <MX_ADC3_Init+0x8c>
  {
    Error_Handler();
 81007c0:	f000 fa9a 	bl	8100cf8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 81007c4:	4b1e      	ldr	r3, [pc, #120]	; (8100840 <MX_ADC3_Init+0x108>)
 81007c6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 81007c8:	2306      	movs	r3, #6
 81007ca:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 81007cc:	2303      	movs	r3, #3
 81007ce:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 81007d0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 81007d4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 81007d6:	2304      	movs	r3, #4
 81007d8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 81007da:	2300      	movs	r3, #0
 81007dc:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 81007de:	2300      	movs	r3, #0
 81007e0:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 81007e2:	1d3b      	adds	r3, r7, #4
 81007e4:	4619      	mov	r1, r3
 81007e6:	4814      	ldr	r0, [pc, #80]	; (8100838 <MX_ADC3_Init+0x100>)
 81007e8:	f001 f8f8 	bl	81019dc <HAL_ADC_ConfigChannel>
 81007ec:	4603      	mov	r3, r0
 81007ee:	2b00      	cmp	r3, #0
 81007f0:	d001      	beq.n	81007f6 <MX_ADC3_Init+0xbe>
  {
    Error_Handler();
 81007f2:	f000 fa81 	bl	8100cf8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 81007f6:	2301      	movs	r3, #1
 81007f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 81007fa:	230c      	movs	r3, #12
 81007fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 81007fe:	1d3b      	adds	r3, r7, #4
 8100800:	4619      	mov	r1, r3
 8100802:	480d      	ldr	r0, [pc, #52]	; (8100838 <MX_ADC3_Init+0x100>)
 8100804:	f001 f8ea 	bl	81019dc <HAL_ADC_ConfigChannel>
 8100808:	4603      	mov	r3, r0
 810080a:	2b00      	cmp	r3, #0
 810080c:	d001      	beq.n	8100812 <MX_ADC3_Init+0xda>
  {
    Error_Handler();
 810080e:	f000 fa73 	bl	8100cf8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8100812:	4b0c      	ldr	r3, [pc, #48]	; (8100844 <MX_ADC3_Init+0x10c>)
 8100814:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8100816:	2312      	movs	r3, #18
 8100818:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 810081a:	1d3b      	adds	r3, r7, #4
 810081c:	4619      	mov	r1, r3
 810081e:	4806      	ldr	r0, [pc, #24]	; (8100838 <MX_ADC3_Init+0x100>)
 8100820:	f001 f8dc 	bl	81019dc <HAL_ADC_ConfigChannel>
 8100824:	4603      	mov	r3, r0
 8100826:	2b00      	cmp	r3, #0
 8100828:	d001      	beq.n	810082e <MX_ADC3_Init+0xf6>
  {
    Error_Handler();
 810082a:	f000 fa65 	bl	8100cf8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 810082e:	bf00      	nop
 8100830:	3720      	adds	r7, #32
 8100832:	46bd      	mov	sp, r7
 8100834:	bd80      	pop	{r7, pc}
 8100836:	bf00      	nop
 8100838:	10000090 	.word	0x10000090
 810083c:	58026000 	.word	0x58026000
 8100840:	1d500080 	.word	0x1d500080
 8100844:	04300002 	.word	0x04300002

08100848 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8100848:	b580      	push	{r7, lr}
 810084a:	b08e      	sub	sp, #56	; 0x38
 810084c:	af00      	add	r7, sp, #0
 810084e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100850:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8100854:	2200      	movs	r2, #0
 8100856:	601a      	str	r2, [r3, #0]
 8100858:	605a      	str	r2, [r3, #4]
 810085a:	609a      	str	r2, [r3, #8]
 810085c:	60da      	str	r2, [r3, #12]
 810085e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8100860:	687b      	ldr	r3, [r7, #4]
 8100862:	681b      	ldr	r3, [r3, #0]
 8100864:	4a7c      	ldr	r2, [pc, #496]	; (8100a58 <HAL_ADC_MspInit+0x210>)
 8100866:	4293      	cmp	r3, r2
 8100868:	d176      	bne.n	8100958 <HAL_ADC_MspInit+0x110>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 810086a:	4b7c      	ldr	r3, [pc, #496]	; (8100a5c <HAL_ADC_MspInit+0x214>)
 810086c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100870:	4a7a      	ldr	r2, [pc, #488]	; (8100a5c <HAL_ADC_MspInit+0x214>)
 8100872:	f043 0320 	orr.w	r3, r3, #32
 8100876:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810087a:	4b78      	ldr	r3, [pc, #480]	; (8100a5c <HAL_ADC_MspInit+0x214>)
 810087c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100880:	f003 0320 	and.w	r3, r3, #32
 8100884:	623b      	str	r3, [r7, #32]
 8100886:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8100888:	4b74      	ldr	r3, [pc, #464]	; (8100a5c <HAL_ADC_MspInit+0x214>)
 810088a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810088e:	4a73      	ldr	r2, [pc, #460]	; (8100a5c <HAL_ADC_MspInit+0x214>)
 8100890:	f043 0304 	orr.w	r3, r3, #4
 8100894:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100898:	4b70      	ldr	r3, [pc, #448]	; (8100a5c <HAL_ADC_MspInit+0x214>)
 810089a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810089e:	f003 0304 	and.w	r3, r3, #4
 81008a2:	61fb      	str	r3, [r7, #28]
 81008a4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 81008a6:	4b6d      	ldr	r3, [pc, #436]	; (8100a5c <HAL_ADC_MspInit+0x214>)
 81008a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81008ac:	4a6b      	ldr	r2, [pc, #428]	; (8100a5c <HAL_ADC_MspInit+0x214>)
 81008ae:	f043 0301 	orr.w	r3, r3, #1
 81008b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81008b6:	4b69      	ldr	r3, [pc, #420]	; (8100a5c <HAL_ADC_MspInit+0x214>)
 81008b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81008bc:	f003 0301 	and.w	r3, r3, #1
 81008c0:	61bb      	str	r3, [r7, #24]
 81008c2:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA0_C     ------> ADC1_INP0
    PA1_C     ------> ADC1_INP1
    */
    GPIO_InitStruct.Pin = MEMS_AIN_1_Pin;
 81008c4:	2301      	movs	r3, #1
 81008c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 81008c8:	2303      	movs	r3, #3
 81008ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81008cc:	2300      	movs	r3, #0
 81008ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MEMS_AIN_1_GPIO_Port, &GPIO_InitStruct);
 81008d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81008d4:	4619      	mov	r1, r3
 81008d6:	4862      	ldr	r0, [pc, #392]	; (8100a60 <HAL_ADC_MspInit+0x218>)
 81008d8:	f004 f92c 	bl	8104b34 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 81008dc:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 81008e0:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 81008e4:	f000 fd36 	bl	8101354 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 81008e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 81008ec:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 81008f0:	f000 fd30 	bl	8101354 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 81008f4:	4b5b      	ldr	r3, [pc, #364]	; (8100a64 <HAL_ADC_MspInit+0x21c>)
 81008f6:	4a5c      	ldr	r2, [pc, #368]	; (8100a68 <HAL_ADC_MspInit+0x220>)
 81008f8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 81008fa:	4b5a      	ldr	r3, [pc, #360]	; (8100a64 <HAL_ADC_MspInit+0x21c>)
 81008fc:	2209      	movs	r2, #9
 81008fe:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8100900:	4b58      	ldr	r3, [pc, #352]	; (8100a64 <HAL_ADC_MspInit+0x21c>)
 8100902:	2200      	movs	r2, #0
 8100904:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8100906:	4b57      	ldr	r3, [pc, #348]	; (8100a64 <HAL_ADC_MspInit+0x21c>)
 8100908:	2200      	movs	r2, #0
 810090a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 810090c:	4b55      	ldr	r3, [pc, #340]	; (8100a64 <HAL_ADC_MspInit+0x21c>)
 810090e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8100912:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8100914:	4b53      	ldr	r3, [pc, #332]	; (8100a64 <HAL_ADC_MspInit+0x21c>)
 8100916:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810091a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 810091c:	4b51      	ldr	r3, [pc, #324]	; (8100a64 <HAL_ADC_MspInit+0x21c>)
 810091e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8100922:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8100924:	4b4f      	ldr	r3, [pc, #316]	; (8100a64 <HAL_ADC_MspInit+0x21c>)
 8100926:	f44f 7280 	mov.w	r2, #256	; 0x100
 810092a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 810092c:	4b4d      	ldr	r3, [pc, #308]	; (8100a64 <HAL_ADC_MspInit+0x21c>)
 810092e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8100932:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8100934:	4b4b      	ldr	r3, [pc, #300]	; (8100a64 <HAL_ADC_MspInit+0x21c>)
 8100936:	2200      	movs	r2, #0
 8100938:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 810093a:	484a      	ldr	r0, [pc, #296]	; (8100a64 <HAL_ADC_MspInit+0x21c>)
 810093c:	f001 fed6 	bl	81026ec <HAL_DMA_Init>
 8100940:	4603      	mov	r3, r0
 8100942:	2b00      	cmp	r3, #0
 8100944:	d001      	beq.n	810094a <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8100946:	f000 f9d7 	bl	8100cf8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 810094a:	687b      	ldr	r3, [r7, #4]
 810094c:	4a45      	ldr	r2, [pc, #276]	; (8100a64 <HAL_ADC_MspInit+0x21c>)
 810094e:	64da      	str	r2, [r3, #76]	; 0x4c
 8100950:	4a44      	ldr	r2, [pc, #272]	; (8100a64 <HAL_ADC_MspInit+0x21c>)
 8100952:	687b      	ldr	r3, [r7, #4]
 8100954:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8100956:	e07b      	b.n	8100a50 <HAL_ADC_MspInit+0x208>
  else if(adcHandle->Instance==ADC3)
 8100958:	687b      	ldr	r3, [r7, #4]
 810095a:	681b      	ldr	r3, [r3, #0]
 810095c:	4a43      	ldr	r2, [pc, #268]	; (8100a6c <HAL_ADC_MspInit+0x224>)
 810095e:	4293      	cmp	r3, r2
 8100960:	d176      	bne.n	8100a50 <HAL_ADC_MspInit+0x208>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8100962:	4b3e      	ldr	r3, [pc, #248]	; (8100a5c <HAL_ADC_MspInit+0x214>)
 8100964:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100968:	4a3c      	ldr	r2, [pc, #240]	; (8100a5c <HAL_ADC_MspInit+0x214>)
 810096a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 810096e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100972:	4b3a      	ldr	r3, [pc, #232]	; (8100a5c <HAL_ADC_MspInit+0x214>)
 8100974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100978:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810097c:	617b      	str	r3, [r7, #20]
 810097e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8100980:	4b36      	ldr	r3, [pc, #216]	; (8100a5c <HAL_ADC_MspInit+0x214>)
 8100982:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100986:	4a35      	ldr	r2, [pc, #212]	; (8100a5c <HAL_ADC_MspInit+0x214>)
 8100988:	f043 0320 	orr.w	r3, r3, #32
 810098c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100990:	4b32      	ldr	r3, [pc, #200]	; (8100a5c <HAL_ADC_MspInit+0x214>)
 8100992:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100996:	f003 0320 	and.w	r3, r3, #32
 810099a:	613b      	str	r3, [r7, #16]
 810099c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 810099e:	4b2f      	ldr	r3, [pc, #188]	; (8100a5c <HAL_ADC_MspInit+0x214>)
 81009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81009a4:	4a2d      	ldr	r2, [pc, #180]	; (8100a5c <HAL_ADC_MspInit+0x214>)
 81009a6:	f043 0304 	orr.w	r3, r3, #4
 81009aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81009ae:	4b2b      	ldr	r3, [pc, #172]	; (8100a5c <HAL_ADC_MspInit+0x214>)
 81009b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81009b4:	f003 0304 	and.w	r3, r3, #4
 81009b8:	60fb      	str	r3, [r7, #12]
 81009ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MEMS_AIN_2_Pin;
 81009bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 81009c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 81009c2:	2303      	movs	r3, #3
 81009c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81009c6:	2300      	movs	r3, #0
 81009c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MEMS_AIN_2_GPIO_Port, &GPIO_InitStruct);
 81009ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81009ce:	4619      	mov	r1, r3
 81009d0:	4827      	ldr	r0, [pc, #156]	; (8100a70 <HAL_ADC_MspInit+0x228>)
 81009d2:	f004 f8af 	bl	8104b34 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 81009d6:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 81009da:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 81009de:	f000 fcb9 	bl	8101354 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 81009e2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 81009e6:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 81009ea:	f000 fcb3 	bl	8101354 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 81009ee:	4b21      	ldr	r3, [pc, #132]	; (8100a74 <HAL_ADC_MspInit+0x22c>)
 81009f0:	4a21      	ldr	r2, [pc, #132]	; (8100a78 <HAL_ADC_MspInit+0x230>)
 81009f2:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 81009f4:	4b1f      	ldr	r3, [pc, #124]	; (8100a74 <HAL_ADC_MspInit+0x22c>)
 81009f6:	2273      	movs	r2, #115	; 0x73
 81009f8:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 81009fa:	4b1e      	ldr	r3, [pc, #120]	; (8100a74 <HAL_ADC_MspInit+0x22c>)
 81009fc:	2200      	movs	r2, #0
 81009fe:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8100a00:	4b1c      	ldr	r3, [pc, #112]	; (8100a74 <HAL_ADC_MspInit+0x22c>)
 8100a02:	2200      	movs	r2, #0
 8100a04:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8100a06:	4b1b      	ldr	r3, [pc, #108]	; (8100a74 <HAL_ADC_MspInit+0x22c>)
 8100a08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8100a0c:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8100a0e:	4b19      	ldr	r3, [pc, #100]	; (8100a74 <HAL_ADC_MspInit+0x22c>)
 8100a10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8100a14:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8100a16:	4b17      	ldr	r3, [pc, #92]	; (8100a74 <HAL_ADC_MspInit+0x22c>)
 8100a18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8100a1c:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8100a1e:	4b15      	ldr	r3, [pc, #84]	; (8100a74 <HAL_ADC_MspInit+0x22c>)
 8100a20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8100a24:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 8100a26:	4b13      	ldr	r3, [pc, #76]	; (8100a74 <HAL_ADC_MspInit+0x22c>)
 8100a28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8100a2c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8100a2e:	4b11      	ldr	r3, [pc, #68]	; (8100a74 <HAL_ADC_MspInit+0x22c>)
 8100a30:	2200      	movs	r2, #0
 8100a32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8100a34:	480f      	ldr	r0, [pc, #60]	; (8100a74 <HAL_ADC_MspInit+0x22c>)
 8100a36:	f001 fe59 	bl	81026ec <HAL_DMA_Init>
 8100a3a:	4603      	mov	r3, r0
 8100a3c:	2b00      	cmp	r3, #0
 8100a3e:	d001      	beq.n	8100a44 <HAL_ADC_MspInit+0x1fc>
      Error_Handler();
 8100a40:	f000 f95a 	bl	8100cf8 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8100a44:	687b      	ldr	r3, [r7, #4]
 8100a46:	4a0b      	ldr	r2, [pc, #44]	; (8100a74 <HAL_ADC_MspInit+0x22c>)
 8100a48:	64da      	str	r2, [r3, #76]	; 0x4c
 8100a4a:	4a0a      	ldr	r2, [pc, #40]	; (8100a74 <HAL_ADC_MspInit+0x22c>)
 8100a4c:	687b      	ldr	r3, [r7, #4]
 8100a4e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8100a50:	bf00      	nop
 8100a52:	3738      	adds	r7, #56	; 0x38
 8100a54:	46bd      	mov	sp, r7
 8100a56:	bd80      	pop	{r7, pc}
 8100a58:	40022000 	.word	0x40022000
 8100a5c:	58024400 	.word	0x58024400
 8100a60:	58020800 	.word	0x58020800
 8100a64:	100000f4 	.word	0x100000f4
 8100a68:	40020010 	.word	0x40020010
 8100a6c:	58026000 	.word	0x58026000
 8100a70:	58021400 	.word	0x58021400
 8100a74:	1000016c 	.word	0x1000016c
 8100a78:	40020028 	.word	0x40020028

08100a7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8100a7c:	b580      	push	{r7, lr}
 8100a7e:	b082      	sub	sp, #8
 8100a80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8100a82:	4b15      	ldr	r3, [pc, #84]	; (8100ad8 <MX_DMA_Init+0x5c>)
 8100a84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100a88:	4a13      	ldr	r2, [pc, #76]	; (8100ad8 <MX_DMA_Init+0x5c>)
 8100a8a:	f043 0301 	orr.w	r3, r3, #1
 8100a8e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8100a92:	4b11      	ldr	r3, [pc, #68]	; (8100ad8 <MX_DMA_Init+0x5c>)
 8100a94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100a98:	f003 0301 	and.w	r3, r3, #1
 8100a9c:	607b      	str	r3, [r7, #4]
 8100a9e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8100aa0:	2200      	movs	r2, #0
 8100aa2:	2100      	movs	r1, #0
 8100aa4:	200b      	movs	r0, #11
 8100aa6:	f001 fdd8 	bl	810265a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8100aaa:	200b      	movs	r0, #11
 8100aac:	f001 fdef 	bl	810268e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8100ab0:	2200      	movs	r2, #0
 8100ab2:	2100      	movs	r1, #0
 8100ab4:	200c      	movs	r0, #12
 8100ab6:	f001 fdd0 	bl	810265a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8100aba:	200c      	movs	r0, #12
 8100abc:	f001 fde7 	bl	810268e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8100ac0:	2200      	movs	r2, #0
 8100ac2:	2100      	movs	r1, #0
 8100ac4:	202f      	movs	r0, #47	; 0x2f
 8100ac6:	f001 fdc8 	bl	810265a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8100aca:	202f      	movs	r0, #47	; 0x2f
 8100acc:	f001 fddf 	bl	810268e <HAL_NVIC_EnableIRQ>

}
 8100ad0:	bf00      	nop
 8100ad2:	3708      	adds	r7, #8
 8100ad4:	46bd      	mov	sp, r7
 8100ad6:	bd80      	pop	{r7, pc}
 8100ad8:	58024400 	.word	0x58024400

08100adc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8100adc:	b580      	push	{r7, lr}
 8100ade:	b08c      	sub	sp, #48	; 0x30
 8100ae0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100ae2:	f107 031c 	add.w	r3, r7, #28
 8100ae6:	2200      	movs	r2, #0
 8100ae8:	601a      	str	r2, [r3, #0]
 8100aea:	605a      	str	r2, [r3, #4]
 8100aec:	609a      	str	r2, [r3, #8]
 8100aee:	60da      	str	r2, [r3, #12]
 8100af0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100af2:	4b57      	ldr	r3, [pc, #348]	; (8100c50 <MX_GPIO_Init+0x174>)
 8100af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100af8:	4a55      	ldr	r2, [pc, #340]	; (8100c50 <MX_GPIO_Init+0x174>)
 8100afa:	f043 0302 	orr.w	r3, r3, #2
 8100afe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100b02:	4b53      	ldr	r3, [pc, #332]	; (8100c50 <MX_GPIO_Init+0x174>)
 8100b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b08:	f003 0302 	and.w	r3, r3, #2
 8100b0c:	61bb      	str	r3, [r7, #24]
 8100b0e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8100b10:	4b4f      	ldr	r3, [pc, #316]	; (8100c50 <MX_GPIO_Init+0x174>)
 8100b12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b16:	4a4e      	ldr	r2, [pc, #312]	; (8100c50 <MX_GPIO_Init+0x174>)
 8100b18:	f043 0308 	orr.w	r3, r3, #8
 8100b1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100b20:	4b4b      	ldr	r3, [pc, #300]	; (8100c50 <MX_GPIO_Init+0x174>)
 8100b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b26:	f003 0308 	and.w	r3, r3, #8
 8100b2a:	617b      	str	r3, [r7, #20]
 8100b2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8100b2e:	4b48      	ldr	r3, [pc, #288]	; (8100c50 <MX_GPIO_Init+0x174>)
 8100b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b34:	4a46      	ldr	r2, [pc, #280]	; (8100c50 <MX_GPIO_Init+0x174>)
 8100b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8100b3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100b3e:	4b44      	ldr	r3, [pc, #272]	; (8100c50 <MX_GPIO_Init+0x174>)
 8100b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8100b48:	613b      	str	r3, [r7, #16]
 8100b4a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8100b4c:	4b40      	ldr	r3, [pc, #256]	; (8100c50 <MX_GPIO_Init+0x174>)
 8100b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b52:	4a3f      	ldr	r2, [pc, #252]	; (8100c50 <MX_GPIO_Init+0x174>)
 8100b54:	f043 0304 	orr.w	r3, r3, #4
 8100b58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100b5c:	4b3c      	ldr	r3, [pc, #240]	; (8100c50 <MX_GPIO_Init+0x174>)
 8100b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b62:	f003 0304 	and.w	r3, r3, #4
 8100b66:	60fb      	str	r3, [r7, #12]
 8100b68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8100b6a:	4b39      	ldr	r3, [pc, #228]	; (8100c50 <MX_GPIO_Init+0x174>)
 8100b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b70:	4a37      	ldr	r2, [pc, #220]	; (8100c50 <MX_GPIO_Init+0x174>)
 8100b72:	f043 0320 	orr.w	r3, r3, #32
 8100b76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100b7a:	4b35      	ldr	r3, [pc, #212]	; (8100c50 <MX_GPIO_Init+0x174>)
 8100b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b80:	f003 0320 	and.w	r3, r3, #32
 8100b84:	60bb      	str	r3, [r7, #8]
 8100b86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8100b88:	4b31      	ldr	r3, [pc, #196]	; (8100c50 <MX_GPIO_Init+0x174>)
 8100b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b8e:	4a30      	ldr	r2, [pc, #192]	; (8100c50 <MX_GPIO_Init+0x174>)
 8100b90:	f043 0301 	orr.w	r3, r3, #1
 8100b94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100b98:	4b2d      	ldr	r3, [pc, #180]	; (8100c50 <MX_GPIO_Init+0x174>)
 8100b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b9e:	f003 0301 	and.w	r3, r3, #1
 8100ba2:	607b      	str	r3, [r7, #4]
 8100ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8100ba6:	4b2a      	ldr	r3, [pc, #168]	; (8100c50 <MX_GPIO_Init+0x174>)
 8100ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100bac:	4a28      	ldr	r2, [pc, #160]	; (8100c50 <MX_GPIO_Init+0x174>)
 8100bae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8100bb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100bb6:	4b26      	ldr	r3, [pc, #152]	; (8100c50 <MX_GPIO_Init+0x174>)
 8100bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100bbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8100bc0:	603b      	str	r3, [r7, #0]
 8100bc2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, DEBUG_GPIO_0_Pin|LD2_Pin, GPIO_PIN_RESET);
 8100bc4:	2200      	movs	r2, #0
 8100bc6:	f242 0104 	movw	r1, #8196	; 0x2004
 8100bca:	4822      	ldr	r0, [pc, #136]	; (8100c54 <MX_GPIO_Init+0x178>)
 8100bcc:	f004 f962 	bl	8104e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8100bd0:	2200      	movs	r2, #0
 8100bd2:	2104      	movs	r1, #4
 8100bd4:	4820      	ldr	r0, [pc, #128]	; (8100c58 <MX_GPIO_Init+0x17c>)
 8100bd6:	f004 f95d 	bl	8104e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DEBUG_EN_IN_Pin;
 8100bda:	2308      	movs	r3, #8
 8100bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8100bde:	2300      	movs	r3, #0
 8100be0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8100be2:	2301      	movs	r3, #1
 8100be4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DEBUG_EN_IN_GPIO_Port, &GPIO_InitStruct);
 8100be6:	f107 031c 	add.w	r3, r7, #28
 8100bea:	4619      	mov	r1, r3
 8100bec:	481b      	ldr	r0, [pc, #108]	; (8100c5c <MX_GPIO_Init+0x180>)
 8100bee:	f003 ffa1 	bl	8104b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = DEBUG_GPIO_0_Pin|LD2_Pin;
 8100bf2:	f242 0304 	movw	r3, #8196	; 0x2004
 8100bf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100bf8:	2301      	movs	r3, #1
 8100bfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100bfc:	2300      	movs	r3, #0
 8100bfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100c00:	2300      	movs	r3, #0
 8100c02:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8100c04:	f107 031c 	add.w	r3, r7, #28
 8100c08:	4619      	mov	r1, r3
 8100c0a:	4812      	ldr	r0, [pc, #72]	; (8100c54 <MX_GPIO_Init+0x178>)
 8100c0c:	f003 ff92 	bl	8104b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8100c10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8100c14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8100c16:	2300      	movs	r3, #0
 8100c18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100c1a:	2300      	movs	r3, #0
 8100c1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8100c1e:	f107 031c 	add.w	r3, r7, #28
 8100c22:	4619      	mov	r1, r3
 8100c24:	480e      	ldr	r0, [pc, #56]	; (8100c60 <MX_GPIO_Init+0x184>)
 8100c26:	f003 ff85 	bl	8104b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8100c2a:	2304      	movs	r3, #4
 8100c2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100c2e:	2301      	movs	r3, #1
 8100c30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100c32:	2300      	movs	r3, #0
 8100c34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100c36:	2300      	movs	r3, #0
 8100c38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8100c3a:	f107 031c 	add.w	r3, r7, #28
 8100c3e:	4619      	mov	r1, r3
 8100c40:	4805      	ldr	r0, [pc, #20]	; (8100c58 <MX_GPIO_Init+0x17c>)
 8100c42:	f003 ff77 	bl	8104b34 <HAL_GPIO_Init>

}
 8100c46:	bf00      	nop
 8100c48:	3730      	adds	r7, #48	; 0x30
 8100c4a:	46bd      	mov	sp, r7
 8100c4c:	bd80      	pop	{r7, pc}
 8100c4e:	bf00      	nop
 8100c50:	58024400 	.word	0x58024400
 8100c54:	58022000 	.word	0x58022000
 8100c58:	58022400 	.word	0x58022400
 8100c5c:	58020c00 	.word	0x58020c00
 8100c60:	58020800 	.word	0x58020800

08100c64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100c64:	b580      	push	{r7, lr}
 8100c66:	b082      	sub	sp, #8
 8100c68:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100c6a:	4b20      	ldr	r3, [pc, #128]	; (8100cec <main+0x88>)
 8100c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c70:	4a1e      	ldr	r2, [pc, #120]	; (8100cec <main+0x88>)
 8100c72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8100c76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100c7a:	4b1c      	ldr	r3, [pc, #112]	; (8100cec <main+0x88>)
 8100c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100c84:	607b      	str	r3, [r7, #4]
 8100c86:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100c88:	2001      	movs	r0, #1
 8100c8a:	f004 f91d 	bl	8104ec8 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100c8e:	f004 f9a7 	bl	8104fe0 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100c92:	2201      	movs	r2, #1
 8100c94:	2102      	movs	r1, #2
 8100c96:	2000      	movs	r0, #0
 8100c98:	f004 f928 	bl	8104eec <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100c9c:	4b14      	ldr	r3, [pc, #80]	; (8100cf0 <main+0x8c>)
 8100c9e:	681b      	ldr	r3, [r3, #0]
 8100ca0:	091b      	lsrs	r3, r3, #4
 8100ca2:	f003 030f 	and.w	r3, r3, #15
 8100ca6:	2b07      	cmp	r3, #7
 8100ca8:	d108      	bne.n	8100cbc <main+0x58>
 8100caa:	4b12      	ldr	r3, [pc, #72]	; (8100cf4 <main+0x90>)
 8100cac:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100cb0:	4a10      	ldr	r2, [pc, #64]	; (8100cf4 <main+0x90>)
 8100cb2:	f043 0301 	orr.w	r3, r3, #1
 8100cb6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8100cba:	e007      	b.n	8100ccc <main+0x68>
 8100cbc:	4b0d      	ldr	r3, [pc, #52]	; (8100cf4 <main+0x90>)
 8100cbe:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100cc2:	4a0c      	ldr	r2, [pc, #48]	; (8100cf4 <main+0x90>)
 8100cc4:	f043 0301 	orr.w	r3, r3, #1
 8100cc8:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100ccc:	f000 fa82 	bl	81011d4 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100cd0:	f7ff ff04 	bl	8100adc <MX_GPIO_Init>
  MX_DMA_Init();
 8100cd4:	f7ff fed2 	bl	8100a7c <MX_DMA_Init>
  MX_ADC1_Init();
 8100cd8:	f7ff fc94 	bl	8100604 <MX_ADC1_Init>
  MX_ADC3_Init();
 8100cdc:	f7ff fd2c 	bl	8100738 <MX_ADC3_Init>
  MX_USART3_UART_Init();
 8100ce0:	f000 f95e 	bl	8100fa0 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8100ce4:	f000 f87c 	bl	8100de0 <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8100ce8:	e7fe      	b.n	8100ce8 <main+0x84>
 8100cea:	bf00      	nop
 8100cec:	58024400 	.word	0x58024400
 8100cf0:	e000ed00 	.word	0xe000ed00
 8100cf4:	58026400 	.word	0x58026400

08100cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8100cf8:	b480      	push	{r7}
 8100cfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100cfc:	b672      	cpsid	i
}
 8100cfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8100d00:	e7fe      	b.n	8100d00 <Error_Handler+0x8>
	...

08100d04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100d04:	b480      	push	{r7}
 8100d06:	b083      	sub	sp, #12
 8100d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100d0a:	4b0a      	ldr	r3, [pc, #40]	; (8100d34 <HAL_MspInit+0x30>)
 8100d0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100d10:	4a08      	ldr	r2, [pc, #32]	; (8100d34 <HAL_MspInit+0x30>)
 8100d12:	f043 0302 	orr.w	r3, r3, #2
 8100d16:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100d1a:	4b06      	ldr	r3, [pc, #24]	; (8100d34 <HAL_MspInit+0x30>)
 8100d1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100d20:	f003 0302 	and.w	r3, r3, #2
 8100d24:	607b      	str	r3, [r7, #4]
 8100d26:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100d28:	bf00      	nop
 8100d2a:	370c      	adds	r7, #12
 8100d2c:	46bd      	mov	sp, r7
 8100d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d32:	4770      	bx	lr
 8100d34:	58024400 	.word	0x58024400

08100d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100d38:	b580      	push	{r7, lr}
 8100d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8100d3c:	f004 fb36 	bl	81053ac <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8100d40:	e7fe      	b.n	8100d40 <NMI_Handler+0x8>

08100d42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100d42:	b480      	push	{r7}
 8100d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100d46:	e7fe      	b.n	8100d46 <HardFault_Handler+0x4>

08100d48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100d48:	b480      	push	{r7}
 8100d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100d4c:	e7fe      	b.n	8100d4c <MemManage_Handler+0x4>

08100d4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100d4e:	b480      	push	{r7}
 8100d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100d52:	e7fe      	b.n	8100d52 <BusFault_Handler+0x4>

08100d54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100d54:	b480      	push	{r7}
 8100d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100d58:	e7fe      	b.n	8100d58 <UsageFault_Handler+0x4>

08100d5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8100d5a:	b480      	push	{r7}
 8100d5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8100d5e:	bf00      	nop
 8100d60:	46bd      	mov	sp, r7
 8100d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d66:	4770      	bx	lr

08100d68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100d68:	b480      	push	{r7}
 8100d6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8100d6c:	bf00      	nop
 8100d6e:	46bd      	mov	sp, r7
 8100d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d74:	4770      	bx	lr

08100d76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8100d76:	b480      	push	{r7}
 8100d78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8100d7a:	bf00      	nop
 8100d7c:	46bd      	mov	sp, r7
 8100d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d82:	4770      	bx	lr

08100d84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8100d84:	b580      	push	{r7, lr}
 8100d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8100d88:	f000 fab8 	bl	81012fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8100d8c:	bf00      	nop
 8100d8e:	bd80      	pop	{r7, pc}

08100d90 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8100d90:	b580      	push	{r7, lr}
 8100d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8100d94:	4802      	ldr	r0, [pc, #8]	; (8100da0 <DMA1_Stream0_IRQHandler+0x10>)
 8100d96:	f002 fd67 	bl	8103868 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8100d9a:	bf00      	nop
 8100d9c:	bd80      	pop	{r7, pc}
 8100d9e:	bf00      	nop
 8100da0:	100000f4 	.word	0x100000f4

08100da4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8100da4:	b580      	push	{r7, lr}
 8100da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8100da8:	4802      	ldr	r0, [pc, #8]	; (8100db4 <DMA1_Stream1_IRQHandler+0x10>)
 8100daa:	f002 fd5d 	bl	8103868 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8100dae:	bf00      	nop
 8100db0:	bd80      	pop	{r7, pc}
 8100db2:	bf00      	nop
 8100db4:	1000016c 	.word	0x1000016c

08100db8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8100db8:	b580      	push	{r7, lr}
 8100dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8100dbc:	4802      	ldr	r0, [pc, #8]	; (8100dc8 <USART3_IRQHandler+0x10>)
 8100dbe:	f007 ffbd 	bl	8108d3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8100dc2:	bf00      	nop
 8100dc4:	bd80      	pop	{r7, pc}
 8100dc6:	bf00      	nop
 8100dc8:	10000230 	.word	0x10000230

08100dcc <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8100dcc:	b580      	push	{r7, lr}
 8100dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8100dd0:	4802      	ldr	r0, [pc, #8]	; (8100ddc <DMA1_Stream7_IRQHandler+0x10>)
 8100dd2:	f002 fd49 	bl	8103868 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8100dd6:	bf00      	nop
 8100dd8:	bd80      	pop	{r7, pc}
 8100dda:	bf00      	nop
 8100ddc:	100002c4 	.word	0x100002c4

08100de0 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8100de0:	b580      	push	{r7, lr}
 8100de2:	b08e      	sub	sp, #56	; 0x38
 8100de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8100de6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8100dea:	2200      	movs	r2, #0
 8100dec:	601a      	str	r2, [r3, #0]
 8100dee:	605a      	str	r2, [r3, #4]
 8100df0:	609a      	str	r2, [r3, #8]
 8100df2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8100df4:	f107 031c 	add.w	r3, r7, #28
 8100df8:	2200      	movs	r2, #0
 8100dfa:	601a      	str	r2, [r3, #0]
 8100dfc:	605a      	str	r2, [r3, #4]
 8100dfe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8100e00:	463b      	mov	r3, r7
 8100e02:	2200      	movs	r2, #0
 8100e04:	601a      	str	r2, [r3, #0]
 8100e06:	605a      	str	r2, [r3, #4]
 8100e08:	609a      	str	r2, [r3, #8]
 8100e0a:	60da      	str	r2, [r3, #12]
 8100e0c:	611a      	str	r2, [r3, #16]
 8100e0e:	615a      	str	r2, [r3, #20]
 8100e10:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8100e12:	4b33      	ldr	r3, [pc, #204]	; (8100ee0 <MX_TIM3_Init+0x100>)
 8100e14:	4a33      	ldr	r2, [pc, #204]	; (8100ee4 <MX_TIM3_Init+0x104>)
 8100e16:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8100e18:	4b31      	ldr	r3, [pc, #196]	; (8100ee0 <MX_TIM3_Init+0x100>)
 8100e1a:	2200      	movs	r2, #0
 8100e1c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100e1e:	4b30      	ldr	r3, [pc, #192]	; (8100ee0 <MX_TIM3_Init+0x100>)
 8100e20:	2200      	movs	r2, #0
 8100e22:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 750;
 8100e24:	4b2e      	ldr	r3, [pc, #184]	; (8100ee0 <MX_TIM3_Init+0x100>)
 8100e26:	f240 22ee 	movw	r2, #750	; 0x2ee
 8100e2a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8100e2c:	4b2c      	ldr	r3, [pc, #176]	; (8100ee0 <MX_TIM3_Init+0x100>)
 8100e2e:	2200      	movs	r2, #0
 8100e30:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8100e32:	4b2b      	ldr	r3, [pc, #172]	; (8100ee0 <MX_TIM3_Init+0x100>)
 8100e34:	2200      	movs	r2, #0
 8100e36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8100e38:	4829      	ldr	r0, [pc, #164]	; (8100ee0 <MX_TIM3_Init+0x100>)
 8100e3a:	f006 ffd1 	bl	8107de0 <HAL_TIM_Base_Init>
 8100e3e:	4603      	mov	r3, r0
 8100e40:	2b00      	cmp	r3, #0
 8100e42:	d001      	beq.n	8100e48 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8100e44:	f7ff ff58 	bl	8100cf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8100e48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8100e4c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8100e4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8100e52:	4619      	mov	r1, r3
 8100e54:	4822      	ldr	r0, [pc, #136]	; (8100ee0 <MX_TIM3_Init+0x100>)
 8100e56:	f007 f98f 	bl	8108178 <HAL_TIM_ConfigClockSource>
 8100e5a:	4603      	mov	r3, r0
 8100e5c:	2b00      	cmp	r3, #0
 8100e5e:	d001      	beq.n	8100e64 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8100e60:	f7ff ff4a 	bl	8100cf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8100e64:	481e      	ldr	r0, [pc, #120]	; (8100ee0 <MX_TIM3_Init+0x100>)
 8100e66:	f007 f812 	bl	8107e8e <HAL_TIM_PWM_Init>
 8100e6a:	4603      	mov	r3, r0
 8100e6c:	2b00      	cmp	r3, #0
 8100e6e:	d001      	beq.n	8100e74 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8100e70:	f7ff ff42 	bl	8100cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8100e74:	2320      	movs	r3, #32
 8100e76:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8100e78:	2300      	movs	r3, #0
 8100e7a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8100e7c:	f107 031c 	add.w	r3, r7, #28
 8100e80:	4619      	mov	r1, r3
 8100e82:	4817      	ldr	r0, [pc, #92]	; (8100ee0 <MX_TIM3_Init+0x100>)
 8100e84:	f007 fe7c 	bl	8108b80 <HAL_TIMEx_MasterConfigSynchronization>
 8100e88:	4603      	mov	r3, r0
 8100e8a:	2b00      	cmp	r3, #0
 8100e8c:	d001      	beq.n	8100e92 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8100e8e:	f7ff ff33 	bl	8100cf8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8100e92:	2370      	movs	r3, #112	; 0x70
 8100e94:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 400;
 8100e96:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8100e9a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8100e9c:	2300      	movs	r3, #0
 8100e9e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8100ea0:	2300      	movs	r3, #0
 8100ea2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8100ea4:	463b      	mov	r3, r7
 8100ea6:	2200      	movs	r2, #0
 8100ea8:	4619      	mov	r1, r3
 8100eaa:	480d      	ldr	r0, [pc, #52]	; (8100ee0 <MX_TIM3_Init+0x100>)
 8100eac:	f007 f850 	bl	8107f50 <HAL_TIM_PWM_ConfigChannel>
 8100eb0:	4603      	mov	r3, r0
 8100eb2:	2b00      	cmp	r3, #0
 8100eb4:	d001      	beq.n	8100eba <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8100eb6:	f7ff ff1f 	bl	8100cf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8100eba:	463b      	mov	r3, r7
 8100ebc:	220c      	movs	r2, #12
 8100ebe:	4619      	mov	r1, r3
 8100ec0:	4807      	ldr	r0, [pc, #28]	; (8100ee0 <MX_TIM3_Init+0x100>)
 8100ec2:	f007 f845 	bl	8107f50 <HAL_TIM_PWM_ConfigChannel>
 8100ec6:	4603      	mov	r3, r0
 8100ec8:	2b00      	cmp	r3, #0
 8100eca:	d001      	beq.n	8100ed0 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8100ecc:	f7ff ff14 	bl	8100cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8100ed0:	4803      	ldr	r0, [pc, #12]	; (8100ee0 <MX_TIM3_Init+0x100>)
 8100ed2:	f000 f82b 	bl	8100f2c <HAL_TIM_MspPostInit>

}
 8100ed6:	bf00      	nop
 8100ed8:	3738      	adds	r7, #56	; 0x38
 8100eda:	46bd      	mov	sp, r7
 8100edc:	bd80      	pop	{r7, pc}
 8100ede:	bf00      	nop
 8100ee0:	100001e4 	.word	0x100001e4
 8100ee4:	40000400 	.word	0x40000400

08100ee8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8100ee8:	b480      	push	{r7}
 8100eea:	b085      	sub	sp, #20
 8100eec:	af00      	add	r7, sp, #0
 8100eee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8100ef0:	687b      	ldr	r3, [r7, #4]
 8100ef2:	681b      	ldr	r3, [r3, #0]
 8100ef4:	4a0b      	ldr	r2, [pc, #44]	; (8100f24 <HAL_TIM_Base_MspInit+0x3c>)
 8100ef6:	4293      	cmp	r3, r2
 8100ef8:	d10e      	bne.n	8100f18 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8100efa:	4b0b      	ldr	r3, [pc, #44]	; (8100f28 <HAL_TIM_Base_MspInit+0x40>)
 8100efc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100f00:	4a09      	ldr	r2, [pc, #36]	; (8100f28 <HAL_TIM_Base_MspInit+0x40>)
 8100f02:	f043 0302 	orr.w	r3, r3, #2
 8100f06:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8100f0a:	4b07      	ldr	r3, [pc, #28]	; (8100f28 <HAL_TIM_Base_MspInit+0x40>)
 8100f0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100f10:	f003 0302 	and.w	r3, r3, #2
 8100f14:	60fb      	str	r3, [r7, #12]
 8100f16:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8100f18:	bf00      	nop
 8100f1a:	3714      	adds	r7, #20
 8100f1c:	46bd      	mov	sp, r7
 8100f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f22:	4770      	bx	lr
 8100f24:	40000400 	.word	0x40000400
 8100f28:	58024400 	.word	0x58024400

08100f2c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8100f2c:	b580      	push	{r7, lr}
 8100f2e:	b088      	sub	sp, #32
 8100f30:	af00      	add	r7, sp, #0
 8100f32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100f34:	f107 030c 	add.w	r3, r7, #12
 8100f38:	2200      	movs	r2, #0
 8100f3a:	601a      	str	r2, [r3, #0]
 8100f3c:	605a      	str	r2, [r3, #4]
 8100f3e:	609a      	str	r2, [r3, #8]
 8100f40:	60da      	str	r2, [r3, #12]
 8100f42:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8100f44:	687b      	ldr	r3, [r7, #4]
 8100f46:	681b      	ldr	r3, [r3, #0]
 8100f48:	4a12      	ldr	r2, [pc, #72]	; (8100f94 <HAL_TIM_MspPostInit+0x68>)
 8100f4a:	4293      	cmp	r3, r2
 8100f4c:	d11e      	bne.n	8100f8c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8100f4e:	4b12      	ldr	r3, [pc, #72]	; (8100f98 <HAL_TIM_MspPostInit+0x6c>)
 8100f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f54:	4a10      	ldr	r2, [pc, #64]	; (8100f98 <HAL_TIM_MspPostInit+0x6c>)
 8100f56:	f043 0302 	orr.w	r3, r3, #2
 8100f5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100f5e:	4b0e      	ldr	r3, [pc, #56]	; (8100f98 <HAL_TIM_MspPostInit+0x6c>)
 8100f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f64:	f003 0302 	and.w	r3, r3, #2
 8100f68:	60bb      	str	r3, [r7, #8]
 8100f6a:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8100f6c:	2310      	movs	r3, #16
 8100f6e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100f70:	2302      	movs	r3, #2
 8100f72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100f74:	2300      	movs	r3, #0
 8100f76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100f78:	2300      	movs	r3, #0
 8100f7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8100f7c:	2302      	movs	r3, #2
 8100f7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8100f80:	f107 030c 	add.w	r3, r7, #12
 8100f84:	4619      	mov	r1, r3
 8100f86:	4805      	ldr	r0, [pc, #20]	; (8100f9c <HAL_TIM_MspPostInit+0x70>)
 8100f88:	f003 fdd4 	bl	8104b34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8100f8c:	bf00      	nop
 8100f8e:	3720      	adds	r7, #32
 8100f90:	46bd      	mov	sp, r7
 8100f92:	bd80      	pop	{r7, pc}
 8100f94:	40000400 	.word	0x40000400
 8100f98:	58024400 	.word	0x58024400
 8100f9c:	58020400 	.word	0x58020400

08100fa0 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8100fa0:	b580      	push	{r7, lr}
 8100fa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8100fa4:	4b22      	ldr	r3, [pc, #136]	; (8101030 <MX_USART3_UART_Init+0x90>)
 8100fa6:	4a23      	ldr	r2, [pc, #140]	; (8101034 <MX_USART3_UART_Init+0x94>)
 8100fa8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 4000000;
 8100faa:	4b21      	ldr	r3, [pc, #132]	; (8101030 <MX_USART3_UART_Init+0x90>)
 8100fac:	4a22      	ldr	r2, [pc, #136]	; (8101038 <MX_USART3_UART_Init+0x98>)
 8100fae:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8100fb0:	4b1f      	ldr	r3, [pc, #124]	; (8101030 <MX_USART3_UART_Init+0x90>)
 8100fb2:	2200      	movs	r2, #0
 8100fb4:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8100fb6:	4b1e      	ldr	r3, [pc, #120]	; (8101030 <MX_USART3_UART_Init+0x90>)
 8100fb8:	2200      	movs	r2, #0
 8100fba:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8100fbc:	4b1c      	ldr	r3, [pc, #112]	; (8101030 <MX_USART3_UART_Init+0x90>)
 8100fbe:	2200      	movs	r2, #0
 8100fc0:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8100fc2:	4b1b      	ldr	r3, [pc, #108]	; (8101030 <MX_USART3_UART_Init+0x90>)
 8100fc4:	220c      	movs	r2, #12
 8100fc6:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8100fc8:	4b19      	ldr	r3, [pc, #100]	; (8101030 <MX_USART3_UART_Init+0x90>)
 8100fca:	2200      	movs	r2, #0
 8100fcc:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8100fce:	4b18      	ldr	r3, [pc, #96]	; (8101030 <MX_USART3_UART_Init+0x90>)
 8100fd0:	2200      	movs	r2, #0
 8100fd2:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8100fd4:	4b16      	ldr	r3, [pc, #88]	; (8101030 <MX_USART3_UART_Init+0x90>)
 8100fd6:	2200      	movs	r2, #0
 8100fd8:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8100fda:	4b15      	ldr	r3, [pc, #84]	; (8101030 <MX_USART3_UART_Init+0x90>)
 8100fdc:	2200      	movs	r2, #0
 8100fde:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8100fe0:	4b13      	ldr	r3, [pc, #76]	; (8101030 <MX_USART3_UART_Init+0x90>)
 8100fe2:	2200      	movs	r2, #0
 8100fe4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8100fe6:	4812      	ldr	r0, [pc, #72]	; (8101030 <MX_USART3_UART_Init+0x90>)
 8100fe8:	f007 fe58 	bl	8108c9c <HAL_UART_Init>
 8100fec:	4603      	mov	r3, r0
 8100fee:	2b00      	cmp	r3, #0
 8100ff0:	d001      	beq.n	8100ff6 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8100ff2:	f7ff fe81 	bl	8100cf8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8100ff6:	2100      	movs	r1, #0
 8100ff8:	480d      	ldr	r0, [pc, #52]	; (8101030 <MX_USART3_UART_Init+0x90>)
 8100ffa:	f009 fa92 	bl	810a522 <HAL_UARTEx_SetTxFifoThreshold>
 8100ffe:	4603      	mov	r3, r0
 8101000:	2b00      	cmp	r3, #0
 8101002:	d001      	beq.n	8101008 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8101004:	f7ff fe78 	bl	8100cf8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101008:	2100      	movs	r1, #0
 810100a:	4809      	ldr	r0, [pc, #36]	; (8101030 <MX_USART3_UART_Init+0x90>)
 810100c:	f009 fac7 	bl	810a59e <HAL_UARTEx_SetRxFifoThreshold>
 8101010:	4603      	mov	r3, r0
 8101012:	2b00      	cmp	r3, #0
 8101014:	d001      	beq.n	810101a <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8101016:	f7ff fe6f 	bl	8100cf8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 810101a:	4805      	ldr	r0, [pc, #20]	; (8101030 <MX_USART3_UART_Init+0x90>)
 810101c:	f009 fa48 	bl	810a4b0 <HAL_UARTEx_DisableFifoMode>
 8101020:	4603      	mov	r3, r0
 8101022:	2b00      	cmp	r3, #0
 8101024:	d001      	beq.n	810102a <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8101026:	f7ff fe67 	bl	8100cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 810102a:	bf00      	nop
 810102c:	bd80      	pop	{r7, pc}
 810102e:	bf00      	nop
 8101030:	10000230 	.word	0x10000230
 8101034:	40004800 	.word	0x40004800
 8101038:	003d0900 	.word	0x003d0900

0810103c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 810103c:	b580      	push	{r7, lr}
 810103e:	b0ba      	sub	sp, #232	; 0xe8
 8101040:	af00      	add	r7, sp, #0
 8101042:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101044:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8101048:	2200      	movs	r2, #0
 810104a:	601a      	str	r2, [r3, #0]
 810104c:	605a      	str	r2, [r3, #4]
 810104e:	609a      	str	r2, [r3, #8]
 8101050:	60da      	str	r2, [r3, #12]
 8101052:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101054:	f107 0310 	add.w	r3, r7, #16
 8101058:	22c0      	movs	r2, #192	; 0xc0
 810105a:	2100      	movs	r1, #0
 810105c:	4618      	mov	r0, r3
 810105e:	f009 fb2b 	bl	810a6b8 <memset>
  if(uartHandle->Instance==USART3)
 8101062:	687b      	ldr	r3, [r7, #4]
 8101064:	681b      	ldr	r3, [r3, #0]
 8101066:	4a41      	ldr	r2, [pc, #260]	; (810116c <HAL_UART_MspInit+0x130>)
 8101068:	4293      	cmp	r3, r2
 810106a:	d17b      	bne.n	8101164 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 810106c:	f04f 0202 	mov.w	r2, #2
 8101070:	f04f 0300 	mov.w	r3, #0
 8101074:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8101078:	2300      	movs	r3, #0
 810107a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810107e:	f107 0310 	add.w	r3, r7, #16
 8101082:	4618      	mov	r0, r3
 8101084:	f004 f9ae 	bl	81053e4 <HAL_RCCEx_PeriphCLKConfig>
 8101088:	4603      	mov	r3, r0
 810108a:	2b00      	cmp	r3, #0
 810108c:	d001      	beq.n	8101092 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 810108e:	f7ff fe33 	bl	8100cf8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8101092:	4b37      	ldr	r3, [pc, #220]	; (8101170 <HAL_UART_MspInit+0x134>)
 8101094:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101098:	4a35      	ldr	r2, [pc, #212]	; (8101170 <HAL_UART_MspInit+0x134>)
 810109a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 810109e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81010a2:	4b33      	ldr	r3, [pc, #204]	; (8101170 <HAL_UART_MspInit+0x134>)
 81010a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81010a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81010ac:	60fb      	str	r3, [r7, #12]
 81010ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 81010b0:	4b2f      	ldr	r3, [pc, #188]	; (8101170 <HAL_UART_MspInit+0x134>)
 81010b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81010b6:	4a2e      	ldr	r2, [pc, #184]	; (8101170 <HAL_UART_MspInit+0x134>)
 81010b8:	f043 0302 	orr.w	r3, r3, #2
 81010bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81010c0:	4b2b      	ldr	r3, [pc, #172]	; (8101170 <HAL_UART_MspInit+0x134>)
 81010c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81010c6:	f003 0302 	and.w	r3, r3, #2
 81010ca:	60bb      	str	r3, [r7, #8]
 81010cc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 81010ce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 81010d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81010d6:	2302      	movs	r3, #2
 81010d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81010dc:	2300      	movs	r3, #0
 81010de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81010e2:	2300      	movs	r3, #0
 81010e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 81010e8:	2307      	movs	r3, #7
 81010ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81010ee:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81010f2:	4619      	mov	r1, r3
 81010f4:	481f      	ldr	r0, [pc, #124]	; (8101174 <HAL_UART_MspInit+0x138>)
 81010f6:	f003 fd1d 	bl	8104b34 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream7;
 81010fa:	4b1f      	ldr	r3, [pc, #124]	; (8101178 <HAL_UART_MspInit+0x13c>)
 81010fc:	4a1f      	ldr	r2, [pc, #124]	; (810117c <HAL_UART_MspInit+0x140>)
 81010fe:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8101100:	4b1d      	ldr	r3, [pc, #116]	; (8101178 <HAL_UART_MspInit+0x13c>)
 8101102:	222e      	movs	r2, #46	; 0x2e
 8101104:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8101106:	4b1c      	ldr	r3, [pc, #112]	; (8101178 <HAL_UART_MspInit+0x13c>)
 8101108:	2240      	movs	r2, #64	; 0x40
 810110a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 810110c:	4b1a      	ldr	r3, [pc, #104]	; (8101178 <HAL_UART_MspInit+0x13c>)
 810110e:	2200      	movs	r2, #0
 8101110:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8101112:	4b19      	ldr	r3, [pc, #100]	; (8101178 <HAL_UART_MspInit+0x13c>)
 8101114:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101118:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 810111a:	4b17      	ldr	r3, [pc, #92]	; (8101178 <HAL_UART_MspInit+0x13c>)
 810111c:	2200      	movs	r2, #0
 810111e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101120:	4b15      	ldr	r3, [pc, #84]	; (8101178 <HAL_UART_MspInit+0x13c>)
 8101122:	2200      	movs	r2, #0
 8101124:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8101126:	4b14      	ldr	r3, [pc, #80]	; (8101178 <HAL_UART_MspInit+0x13c>)
 8101128:	2200      	movs	r2, #0
 810112a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 810112c:	4b12      	ldr	r3, [pc, #72]	; (8101178 <HAL_UART_MspInit+0x13c>)
 810112e:	2200      	movs	r2, #0
 8101130:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101132:	4b11      	ldr	r3, [pc, #68]	; (8101178 <HAL_UART_MspInit+0x13c>)
 8101134:	2200      	movs	r2, #0
 8101136:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8101138:	480f      	ldr	r0, [pc, #60]	; (8101178 <HAL_UART_MspInit+0x13c>)
 810113a:	f001 fad7 	bl	81026ec <HAL_DMA_Init>
 810113e:	4603      	mov	r3, r0
 8101140:	2b00      	cmp	r3, #0
 8101142:	d001      	beq.n	8101148 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8101144:	f7ff fdd8 	bl	8100cf8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8101148:	687b      	ldr	r3, [r7, #4]
 810114a:	4a0b      	ldr	r2, [pc, #44]	; (8101178 <HAL_UART_MspInit+0x13c>)
 810114c:	67da      	str	r2, [r3, #124]	; 0x7c
 810114e:	4a0a      	ldr	r2, [pc, #40]	; (8101178 <HAL_UART_MspInit+0x13c>)
 8101150:	687b      	ldr	r3, [r7, #4]
 8101152:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8101154:	2200      	movs	r2, #0
 8101156:	2100      	movs	r1, #0
 8101158:	2027      	movs	r0, #39	; 0x27
 810115a:	f001 fa7e 	bl	810265a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 810115e:	2027      	movs	r0, #39	; 0x27
 8101160:	f001 fa95 	bl	810268e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8101164:	bf00      	nop
 8101166:	37e8      	adds	r7, #232	; 0xe8
 8101168:	46bd      	mov	sp, r7
 810116a:	bd80      	pop	{r7, pc}
 810116c:	40004800 	.word	0x40004800
 8101170:	58024400 	.word	0x58024400
 8101174:	58020400 	.word	0x58020400
 8101178:	100002c4 	.word	0x100002c4
 810117c:	400200b8 	.word	0x400200b8

08101180 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8101180:	f8df d034 	ldr.w	sp, [pc, #52]	; 81011b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8101184:	f7ff fa26 	bl	81005d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8101188:	480c      	ldr	r0, [pc, #48]	; (81011bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 810118a:	490d      	ldr	r1, [pc, #52]	; (81011c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 810118c:	4a0d      	ldr	r2, [pc, #52]	; (81011c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 810118e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101190:	e002      	b.n	8101198 <LoopCopyDataInit>

08101192 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8101192:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8101194:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8101196:	3304      	adds	r3, #4

08101198 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8101198:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 810119a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 810119c:	d3f9      	bcc.n	8101192 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 810119e:	4a0a      	ldr	r2, [pc, #40]	; (81011c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81011a0:	4c0a      	ldr	r4, [pc, #40]	; (81011cc <LoopFillZerobss+0x22>)
  movs r3, #0
 81011a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 81011a4:	e001      	b.n	81011aa <LoopFillZerobss>

081011a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81011a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81011a8:	3204      	adds	r2, #4

081011aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81011aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81011ac:	d3fb      	bcc.n	81011a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81011ae:	f009 fa8b 	bl	810a6c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81011b2:	f7ff fd57 	bl	8100c64 <main>
  bx  lr
 81011b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81011b8:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81011bc:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81011c0:	10000010 	.word	0x10000010
  ldr r2, =_sidata
 81011c4:	0810a778 	.word	0x0810a778
  ldr r2, =_sbss
 81011c8:	10000010 	.word	0x10000010
  ldr r4, =_ebss
 81011cc:	10000340 	.word	0x10000340

081011d0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81011d0:	e7fe      	b.n	81011d0 <ADC3_IRQHandler>
	...

081011d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81011d4:	b580      	push	{r7, lr}
 81011d6:	b082      	sub	sp, #8
 81011d8:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81011da:	4b28      	ldr	r3, [pc, #160]	; (810127c <HAL_Init+0xa8>)
 81011dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81011e0:	4a26      	ldr	r2, [pc, #152]	; (810127c <HAL_Init+0xa8>)
 81011e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 81011e6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81011ea:	4b24      	ldr	r3, [pc, #144]	; (810127c <HAL_Init+0xa8>)
 81011ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81011f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81011f4:	603b      	str	r3, [r7, #0]
 81011f6:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81011f8:	4b21      	ldr	r3, [pc, #132]	; (8101280 <HAL_Init+0xac>)
 81011fa:	681b      	ldr	r3, [r3, #0]
 81011fc:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8101200:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8101204:	4a1e      	ldr	r2, [pc, #120]	; (8101280 <HAL_Init+0xac>)
 8101206:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 810120a:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 810120c:	4b1c      	ldr	r3, [pc, #112]	; (8101280 <HAL_Init+0xac>)
 810120e:	681b      	ldr	r3, [r3, #0]
 8101210:	4a1b      	ldr	r2, [pc, #108]	; (8101280 <HAL_Init+0xac>)
 8101212:	f043 0301 	orr.w	r3, r3, #1
 8101216:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101218:	2003      	movs	r0, #3
 810121a:	f001 fa13 	bl	8102644 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810121e:	f003 feed 	bl	8104ffc <HAL_RCC_GetSysClockFreq>
 8101222:	4602      	mov	r2, r0
 8101224:	4b15      	ldr	r3, [pc, #84]	; (810127c <HAL_Init+0xa8>)
 8101226:	699b      	ldr	r3, [r3, #24]
 8101228:	0a1b      	lsrs	r3, r3, #8
 810122a:	f003 030f 	and.w	r3, r3, #15
 810122e:	4915      	ldr	r1, [pc, #84]	; (8101284 <HAL_Init+0xb0>)
 8101230:	5ccb      	ldrb	r3, [r1, r3]
 8101232:	f003 031f 	and.w	r3, r3, #31
 8101236:	fa22 f303 	lsr.w	r3, r2, r3
 810123a:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810123c:	4b0f      	ldr	r3, [pc, #60]	; (810127c <HAL_Init+0xa8>)
 810123e:	699b      	ldr	r3, [r3, #24]
 8101240:	f003 030f 	and.w	r3, r3, #15
 8101244:	4a0f      	ldr	r2, [pc, #60]	; (8101284 <HAL_Init+0xb0>)
 8101246:	5cd3      	ldrb	r3, [r2, r3]
 8101248:	f003 031f 	and.w	r3, r3, #31
 810124c:	687a      	ldr	r2, [r7, #4]
 810124e:	fa22 f303 	lsr.w	r3, r2, r3
 8101252:	4a0d      	ldr	r2, [pc, #52]	; (8101288 <HAL_Init+0xb4>)
 8101254:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101256:	4b0c      	ldr	r3, [pc, #48]	; (8101288 <HAL_Init+0xb4>)
 8101258:	681b      	ldr	r3, [r3, #0]
 810125a:	4a0c      	ldr	r2, [pc, #48]	; (810128c <HAL_Init+0xb8>)
 810125c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810125e:	2000      	movs	r0, #0
 8101260:	f000 f816 	bl	8101290 <HAL_InitTick>
 8101264:	4603      	mov	r3, r0
 8101266:	2b00      	cmp	r3, #0
 8101268:	d001      	beq.n	810126e <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 810126a:	2301      	movs	r3, #1
 810126c:	e002      	b.n	8101274 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810126e:	f7ff fd49 	bl	8100d04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8101272:	2300      	movs	r3, #0
}
 8101274:	4618      	mov	r0, r3
 8101276:	3708      	adds	r7, #8
 8101278:	46bd      	mov	sp, r7
 810127a:	bd80      	pop	{r7, pc}
 810127c:	58024400 	.word	0x58024400
 8101280:	40024400 	.word	0x40024400
 8101284:	0810a728 	.word	0x0810a728
 8101288:	10000004 	.word	0x10000004
 810128c:	10000000 	.word	0x10000000

08101290 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101290:	b580      	push	{r7, lr}
 8101292:	b082      	sub	sp, #8
 8101294:	af00      	add	r7, sp, #0
 8101296:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8101298:	4b15      	ldr	r3, [pc, #84]	; (81012f0 <HAL_InitTick+0x60>)
 810129a:	781b      	ldrb	r3, [r3, #0]
 810129c:	2b00      	cmp	r3, #0
 810129e:	d101      	bne.n	81012a4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 81012a0:	2301      	movs	r3, #1
 81012a2:	e021      	b.n	81012e8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 81012a4:	4b13      	ldr	r3, [pc, #76]	; (81012f4 <HAL_InitTick+0x64>)
 81012a6:	681a      	ldr	r2, [r3, #0]
 81012a8:	4b11      	ldr	r3, [pc, #68]	; (81012f0 <HAL_InitTick+0x60>)
 81012aa:	781b      	ldrb	r3, [r3, #0]
 81012ac:	4619      	mov	r1, r3
 81012ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81012b2:	fbb3 f3f1 	udiv	r3, r3, r1
 81012b6:	fbb2 f3f3 	udiv	r3, r2, r3
 81012ba:	4618      	mov	r0, r3
 81012bc:	f001 f9f5 	bl	81026aa <HAL_SYSTICK_Config>
 81012c0:	4603      	mov	r3, r0
 81012c2:	2b00      	cmp	r3, #0
 81012c4:	d001      	beq.n	81012ca <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 81012c6:	2301      	movs	r3, #1
 81012c8:	e00e      	b.n	81012e8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81012ca:	687b      	ldr	r3, [r7, #4]
 81012cc:	2b0f      	cmp	r3, #15
 81012ce:	d80a      	bhi.n	81012e6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 81012d0:	2200      	movs	r2, #0
 81012d2:	6879      	ldr	r1, [r7, #4]
 81012d4:	f04f 30ff 	mov.w	r0, #4294967295
 81012d8:	f001 f9bf 	bl	810265a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 81012dc:	4a06      	ldr	r2, [pc, #24]	; (81012f8 <HAL_InitTick+0x68>)
 81012de:	687b      	ldr	r3, [r7, #4]
 81012e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 81012e2:	2300      	movs	r3, #0
 81012e4:	e000      	b.n	81012e8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 81012e6:	2301      	movs	r3, #1
}
 81012e8:	4618      	mov	r0, r3
 81012ea:	3708      	adds	r7, #8
 81012ec:	46bd      	mov	sp, r7
 81012ee:	bd80      	pop	{r7, pc}
 81012f0:	1000000c 	.word	0x1000000c
 81012f4:	10000000 	.word	0x10000000
 81012f8:	10000008 	.word	0x10000008

081012fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81012fc:	b480      	push	{r7}
 81012fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101300:	4b06      	ldr	r3, [pc, #24]	; (810131c <HAL_IncTick+0x20>)
 8101302:	781b      	ldrb	r3, [r3, #0]
 8101304:	461a      	mov	r2, r3
 8101306:	4b06      	ldr	r3, [pc, #24]	; (8101320 <HAL_IncTick+0x24>)
 8101308:	681b      	ldr	r3, [r3, #0]
 810130a:	4413      	add	r3, r2
 810130c:	4a04      	ldr	r2, [pc, #16]	; (8101320 <HAL_IncTick+0x24>)
 810130e:	6013      	str	r3, [r2, #0]
}
 8101310:	bf00      	nop
 8101312:	46bd      	mov	sp, r7
 8101314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101318:	4770      	bx	lr
 810131a:	bf00      	nop
 810131c:	1000000c 	.word	0x1000000c
 8101320:	1000033c 	.word	0x1000033c

08101324 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101324:	b480      	push	{r7}
 8101326:	af00      	add	r7, sp, #0
  return uwTick;
 8101328:	4b03      	ldr	r3, [pc, #12]	; (8101338 <HAL_GetTick+0x14>)
 810132a:	681b      	ldr	r3, [r3, #0]
}
 810132c:	4618      	mov	r0, r3
 810132e:	46bd      	mov	sp, r7
 8101330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101334:	4770      	bx	lr
 8101336:	bf00      	nop
 8101338:	1000033c 	.word	0x1000033c

0810133c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 810133c:	b480      	push	{r7}
 810133e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8101340:	4b03      	ldr	r3, [pc, #12]	; (8101350 <HAL_GetREVID+0x14>)
 8101342:	681b      	ldr	r3, [r3, #0]
 8101344:	0c1b      	lsrs	r3, r3, #16
}
 8101346:	4618      	mov	r0, r3
 8101348:	46bd      	mov	sp, r7
 810134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810134e:	4770      	bx	lr
 8101350:	5c001000 	.word	0x5c001000

08101354 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8101354:	b480      	push	{r7}
 8101356:	b083      	sub	sp, #12
 8101358:	af00      	add	r7, sp, #0
 810135a:	6078      	str	r0, [r7, #4]
 810135c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 810135e:	4b07      	ldr	r3, [pc, #28]	; (810137c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8101360:	685a      	ldr	r2, [r3, #4]
 8101362:	687b      	ldr	r3, [r7, #4]
 8101364:	43db      	mvns	r3, r3
 8101366:	401a      	ands	r2, r3
 8101368:	4904      	ldr	r1, [pc, #16]	; (810137c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 810136a:	683b      	ldr	r3, [r7, #0]
 810136c:	4313      	orrs	r3, r2
 810136e:	604b      	str	r3, [r1, #4]
}
 8101370:	bf00      	nop
 8101372:	370c      	adds	r7, #12
 8101374:	46bd      	mov	sp, r7
 8101376:	f85d 7b04 	ldr.w	r7, [sp], #4
 810137a:	4770      	bx	lr
 810137c:	58000400 	.word	0x58000400

08101380 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8101380:	b480      	push	{r7}
 8101382:	b083      	sub	sp, #12
 8101384:	af00      	add	r7, sp, #0
 8101386:	6078      	str	r0, [r7, #4]
 8101388:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 810138a:	687b      	ldr	r3, [r7, #4]
 810138c:	689b      	ldr	r3, [r3, #8]
 810138e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8101392:	683b      	ldr	r3, [r7, #0]
 8101394:	431a      	orrs	r2, r3
 8101396:	687b      	ldr	r3, [r7, #4]
 8101398:	609a      	str	r2, [r3, #8]
}
 810139a:	bf00      	nop
 810139c:	370c      	adds	r7, #12
 810139e:	46bd      	mov	sp, r7
 81013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013a4:	4770      	bx	lr

081013a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 81013a6:	b480      	push	{r7}
 81013a8:	b083      	sub	sp, #12
 81013aa:	af00      	add	r7, sp, #0
 81013ac:	6078      	str	r0, [r7, #4]
 81013ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 81013b0:	687b      	ldr	r3, [r7, #4]
 81013b2:	689b      	ldr	r3, [r3, #8]
 81013b4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 81013b8:	683b      	ldr	r3, [r7, #0]
 81013ba:	431a      	orrs	r2, r3
 81013bc:	687b      	ldr	r3, [r7, #4]
 81013be:	609a      	str	r2, [r3, #8]
}
 81013c0:	bf00      	nop
 81013c2:	370c      	adds	r7, #12
 81013c4:	46bd      	mov	sp, r7
 81013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013ca:	4770      	bx	lr

081013cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 81013cc:	b480      	push	{r7}
 81013ce:	b083      	sub	sp, #12
 81013d0:	af00      	add	r7, sp, #0
 81013d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 81013d4:	687b      	ldr	r3, [r7, #4]
 81013d6:	689b      	ldr	r3, [r3, #8]
 81013d8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 81013dc:	4618      	mov	r0, r3
 81013de:	370c      	adds	r7, #12
 81013e0:	46bd      	mov	sp, r7
 81013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013e6:	4770      	bx	lr

081013e8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 81013e8:	b480      	push	{r7}
 81013ea:	b087      	sub	sp, #28
 81013ec:	af00      	add	r7, sp, #0
 81013ee:	60f8      	str	r0, [r7, #12]
 81013f0:	60b9      	str	r1, [r7, #8]
 81013f2:	607a      	str	r2, [r7, #4]
 81013f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 81013f6:	68fb      	ldr	r3, [r7, #12]
 81013f8:	3360      	adds	r3, #96	; 0x60
 81013fa:	461a      	mov	r2, r3
 81013fc:	68bb      	ldr	r3, [r7, #8]
 81013fe:	009b      	lsls	r3, r3, #2
 8101400:	4413      	add	r3, r2
 8101402:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8101404:	697b      	ldr	r3, [r7, #20]
 8101406:	681b      	ldr	r3, [r3, #0]
 8101408:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 810140c:	687b      	ldr	r3, [r7, #4]
 810140e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8101412:	683b      	ldr	r3, [r7, #0]
 8101414:	430b      	orrs	r3, r1
 8101416:	431a      	orrs	r2, r3
 8101418:	697b      	ldr	r3, [r7, #20]
 810141a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 810141c:	bf00      	nop
 810141e:	371c      	adds	r7, #28
 8101420:	46bd      	mov	sp, r7
 8101422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101426:	4770      	bx	lr

08101428 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8101428:	b480      	push	{r7}
 810142a:	b085      	sub	sp, #20
 810142c:	af00      	add	r7, sp, #0
 810142e:	60f8      	str	r0, [r7, #12]
 8101430:	60b9      	str	r1, [r7, #8]
 8101432:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8101434:	68fb      	ldr	r3, [r7, #12]
 8101436:	691b      	ldr	r3, [r3, #16]
 8101438:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 810143c:	68bb      	ldr	r3, [r7, #8]
 810143e:	f003 031f 	and.w	r3, r3, #31
 8101442:	6879      	ldr	r1, [r7, #4]
 8101444:	fa01 f303 	lsl.w	r3, r1, r3
 8101448:	431a      	orrs	r2, r3
 810144a:	68fb      	ldr	r3, [r7, #12]
 810144c:	611a      	str	r2, [r3, #16]
}
 810144e:	bf00      	nop
 8101450:	3714      	adds	r7, #20
 8101452:	46bd      	mov	sp, r7
 8101454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101458:	4770      	bx	lr

0810145a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 810145a:	b480      	push	{r7}
 810145c:	b087      	sub	sp, #28
 810145e:	af00      	add	r7, sp, #0
 8101460:	60f8      	str	r0, [r7, #12]
 8101462:	60b9      	str	r1, [r7, #8]
 8101464:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8101466:	68fb      	ldr	r3, [r7, #12]
 8101468:	3360      	adds	r3, #96	; 0x60
 810146a:	461a      	mov	r2, r3
 810146c:	68bb      	ldr	r3, [r7, #8]
 810146e:	009b      	lsls	r3, r3, #2
 8101470:	4413      	add	r3, r2
 8101472:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8101474:	697b      	ldr	r3, [r7, #20]
 8101476:	681b      	ldr	r3, [r3, #0]
 8101478:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 810147c:	687b      	ldr	r3, [r7, #4]
 810147e:	431a      	orrs	r2, r3
 8101480:	697b      	ldr	r3, [r7, #20]
 8101482:	601a      	str	r2, [r3, #0]
  }
}
 8101484:	bf00      	nop
 8101486:	371c      	adds	r7, #28
 8101488:	46bd      	mov	sp, r7
 810148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810148e:	4770      	bx	lr

08101490 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8101490:	b480      	push	{r7}
 8101492:	b087      	sub	sp, #28
 8101494:	af00      	add	r7, sp, #0
 8101496:	60f8      	str	r0, [r7, #12]
 8101498:	60b9      	str	r1, [r7, #8]
 810149a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 810149c:	68fb      	ldr	r3, [r7, #12]
 810149e:	3330      	adds	r3, #48	; 0x30
 81014a0:	461a      	mov	r2, r3
 81014a2:	68bb      	ldr	r3, [r7, #8]
 81014a4:	0a1b      	lsrs	r3, r3, #8
 81014a6:	009b      	lsls	r3, r3, #2
 81014a8:	f003 030c 	and.w	r3, r3, #12
 81014ac:	4413      	add	r3, r2
 81014ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 81014b0:	697b      	ldr	r3, [r7, #20]
 81014b2:	681a      	ldr	r2, [r3, #0]
 81014b4:	68bb      	ldr	r3, [r7, #8]
 81014b6:	f003 031f 	and.w	r3, r3, #31
 81014ba:	211f      	movs	r1, #31
 81014bc:	fa01 f303 	lsl.w	r3, r1, r3
 81014c0:	43db      	mvns	r3, r3
 81014c2:	401a      	ands	r2, r3
 81014c4:	687b      	ldr	r3, [r7, #4]
 81014c6:	0e9b      	lsrs	r3, r3, #26
 81014c8:	f003 011f 	and.w	r1, r3, #31
 81014cc:	68bb      	ldr	r3, [r7, #8]
 81014ce:	f003 031f 	and.w	r3, r3, #31
 81014d2:	fa01 f303 	lsl.w	r3, r1, r3
 81014d6:	431a      	orrs	r2, r3
 81014d8:	697b      	ldr	r3, [r7, #20]
 81014da:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 81014dc:	bf00      	nop
 81014de:	371c      	adds	r7, #28
 81014e0:	46bd      	mov	sp, r7
 81014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014e6:	4770      	bx	lr

081014e8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 81014e8:	b480      	push	{r7}
 81014ea:	b087      	sub	sp, #28
 81014ec:	af00      	add	r7, sp, #0
 81014ee:	60f8      	str	r0, [r7, #12]
 81014f0:	60b9      	str	r1, [r7, #8]
 81014f2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 81014f4:	68fb      	ldr	r3, [r7, #12]
 81014f6:	3314      	adds	r3, #20
 81014f8:	461a      	mov	r2, r3
 81014fa:	68bb      	ldr	r3, [r7, #8]
 81014fc:	0e5b      	lsrs	r3, r3, #25
 81014fe:	009b      	lsls	r3, r3, #2
 8101500:	f003 0304 	and.w	r3, r3, #4
 8101504:	4413      	add	r3, r2
 8101506:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8101508:	697b      	ldr	r3, [r7, #20]
 810150a:	681a      	ldr	r2, [r3, #0]
 810150c:	68bb      	ldr	r3, [r7, #8]
 810150e:	0d1b      	lsrs	r3, r3, #20
 8101510:	f003 031f 	and.w	r3, r3, #31
 8101514:	2107      	movs	r1, #7
 8101516:	fa01 f303 	lsl.w	r3, r1, r3
 810151a:	43db      	mvns	r3, r3
 810151c:	401a      	ands	r2, r3
 810151e:	68bb      	ldr	r3, [r7, #8]
 8101520:	0d1b      	lsrs	r3, r3, #20
 8101522:	f003 031f 	and.w	r3, r3, #31
 8101526:	6879      	ldr	r1, [r7, #4]
 8101528:	fa01 f303 	lsl.w	r3, r1, r3
 810152c:	431a      	orrs	r2, r3
 810152e:	697b      	ldr	r3, [r7, #20]
 8101530:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8101532:	bf00      	nop
 8101534:	371c      	adds	r7, #28
 8101536:	46bd      	mov	sp, r7
 8101538:	f85d 7b04 	ldr.w	r7, [sp], #4
 810153c:	4770      	bx	lr
	...

08101540 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8101540:	b480      	push	{r7}
 8101542:	b085      	sub	sp, #20
 8101544:	af00      	add	r7, sp, #0
 8101546:	60f8      	str	r0, [r7, #12]
 8101548:	60b9      	str	r1, [r7, #8]
 810154a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 810154c:	68fb      	ldr	r3, [r7, #12]
 810154e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8101552:	68bb      	ldr	r3, [r7, #8]
 8101554:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8101558:	43db      	mvns	r3, r3
 810155a:	401a      	ands	r2, r3
 810155c:	687b      	ldr	r3, [r7, #4]
 810155e:	f003 0318 	and.w	r3, r3, #24
 8101562:	4908      	ldr	r1, [pc, #32]	; (8101584 <LL_ADC_SetChannelSingleDiff+0x44>)
 8101564:	40d9      	lsrs	r1, r3
 8101566:	68bb      	ldr	r3, [r7, #8]
 8101568:	400b      	ands	r3, r1
 810156a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810156e:	431a      	orrs	r2, r3
 8101570:	68fb      	ldr	r3, [r7, #12]
 8101572:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8101576:	bf00      	nop
 8101578:	3714      	adds	r7, #20
 810157a:	46bd      	mov	sp, r7
 810157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101580:	4770      	bx	lr
 8101582:	bf00      	nop
 8101584:	000fffff 	.word	0x000fffff

08101588 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8101588:	b480      	push	{r7}
 810158a:	b083      	sub	sp, #12
 810158c:	af00      	add	r7, sp, #0
 810158e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8101590:	687b      	ldr	r3, [r7, #4]
 8101592:	689b      	ldr	r3, [r3, #8]
 8101594:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8101598:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 810159c:	687a      	ldr	r2, [r7, #4]
 810159e:	6093      	str	r3, [r2, #8]
}
 81015a0:	bf00      	nop
 81015a2:	370c      	adds	r7, #12
 81015a4:	46bd      	mov	sp, r7
 81015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015aa:	4770      	bx	lr

081015ac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 81015ac:	b480      	push	{r7}
 81015ae:	b083      	sub	sp, #12
 81015b0:	af00      	add	r7, sp, #0
 81015b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 81015b4:	687b      	ldr	r3, [r7, #4]
 81015b6:	689b      	ldr	r3, [r3, #8]
 81015b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81015bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81015c0:	d101      	bne.n	81015c6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 81015c2:	2301      	movs	r3, #1
 81015c4:	e000      	b.n	81015c8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 81015c6:	2300      	movs	r3, #0
}
 81015c8:	4618      	mov	r0, r3
 81015ca:	370c      	adds	r7, #12
 81015cc:	46bd      	mov	sp, r7
 81015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015d2:	4770      	bx	lr

081015d4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 81015d4:	b480      	push	{r7}
 81015d6:	b083      	sub	sp, #12
 81015d8:	af00      	add	r7, sp, #0
 81015da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 81015dc:	687b      	ldr	r3, [r7, #4]
 81015de:	689b      	ldr	r3, [r3, #8]
 81015e0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 81015e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 81015e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 81015ec:	687b      	ldr	r3, [r7, #4]
 81015ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 81015f0:	bf00      	nop
 81015f2:	370c      	adds	r7, #12
 81015f4:	46bd      	mov	sp, r7
 81015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015fa:	4770      	bx	lr

081015fc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 81015fc:	b480      	push	{r7}
 81015fe:	b083      	sub	sp, #12
 8101600:	af00      	add	r7, sp, #0
 8101602:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8101604:	687b      	ldr	r3, [r7, #4]
 8101606:	689b      	ldr	r3, [r3, #8]
 8101608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810160c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8101610:	d101      	bne.n	8101616 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8101612:	2301      	movs	r3, #1
 8101614:	e000      	b.n	8101618 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8101616:	2300      	movs	r3, #0
}
 8101618:	4618      	mov	r0, r3
 810161a:	370c      	adds	r7, #12
 810161c:	46bd      	mov	sp, r7
 810161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101622:	4770      	bx	lr

08101624 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8101624:	b480      	push	{r7}
 8101626:	b083      	sub	sp, #12
 8101628:	af00      	add	r7, sp, #0
 810162a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 810162c:	687b      	ldr	r3, [r7, #4]
 810162e:	689b      	ldr	r3, [r3, #8]
 8101630:	f003 0301 	and.w	r3, r3, #1
 8101634:	2b01      	cmp	r3, #1
 8101636:	d101      	bne.n	810163c <LL_ADC_IsEnabled+0x18>
 8101638:	2301      	movs	r3, #1
 810163a:	e000      	b.n	810163e <LL_ADC_IsEnabled+0x1a>
 810163c:	2300      	movs	r3, #0
}
 810163e:	4618      	mov	r0, r3
 8101640:	370c      	adds	r7, #12
 8101642:	46bd      	mov	sp, r7
 8101644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101648:	4770      	bx	lr

0810164a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 810164a:	b480      	push	{r7}
 810164c:	b083      	sub	sp, #12
 810164e:	af00      	add	r7, sp, #0
 8101650:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8101652:	687b      	ldr	r3, [r7, #4]
 8101654:	689b      	ldr	r3, [r3, #8]
 8101656:	f003 0304 	and.w	r3, r3, #4
 810165a:	2b04      	cmp	r3, #4
 810165c:	d101      	bne.n	8101662 <LL_ADC_REG_IsConversionOngoing+0x18>
 810165e:	2301      	movs	r3, #1
 8101660:	e000      	b.n	8101664 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8101662:	2300      	movs	r3, #0
}
 8101664:	4618      	mov	r0, r3
 8101666:	370c      	adds	r7, #12
 8101668:	46bd      	mov	sp, r7
 810166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810166e:	4770      	bx	lr

08101670 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8101670:	b480      	push	{r7}
 8101672:	b083      	sub	sp, #12
 8101674:	af00      	add	r7, sp, #0
 8101676:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8101678:	687b      	ldr	r3, [r7, #4]
 810167a:	689b      	ldr	r3, [r3, #8]
 810167c:	f003 0308 	and.w	r3, r3, #8
 8101680:	2b08      	cmp	r3, #8
 8101682:	d101      	bne.n	8101688 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8101684:	2301      	movs	r3, #1
 8101686:	e000      	b.n	810168a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8101688:	2300      	movs	r3, #0
}
 810168a:	4618      	mov	r0, r3
 810168c:	370c      	adds	r7, #12
 810168e:	46bd      	mov	sp, r7
 8101690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101694:	4770      	bx	lr
	...

08101698 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8101698:	b590      	push	{r4, r7, lr}
 810169a:	b089      	sub	sp, #36	; 0x24
 810169c:	af00      	add	r7, sp, #0
 810169e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 81016a0:	2300      	movs	r3, #0
 81016a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 81016a4:	2300      	movs	r3, #0
 81016a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 81016a8:	687b      	ldr	r3, [r7, #4]
 81016aa:	2b00      	cmp	r3, #0
 81016ac:	d101      	bne.n	81016b2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 81016ae:	2301      	movs	r3, #1
 81016b0:	e18f      	b.n	81019d2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 81016b2:	687b      	ldr	r3, [r7, #4]
 81016b4:	68db      	ldr	r3, [r3, #12]
 81016b6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 81016b8:	687b      	ldr	r3, [r7, #4]
 81016ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81016bc:	2b00      	cmp	r3, #0
 81016be:	d109      	bne.n	81016d4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 81016c0:	6878      	ldr	r0, [r7, #4]
 81016c2:	f7ff f8c1 	bl	8100848 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 81016c6:	687b      	ldr	r3, [r7, #4]
 81016c8:	2200      	movs	r2, #0
 81016ca:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 81016cc:	687b      	ldr	r3, [r7, #4]
 81016ce:	2200      	movs	r2, #0
 81016d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 81016d4:	687b      	ldr	r3, [r7, #4]
 81016d6:	681b      	ldr	r3, [r3, #0]
 81016d8:	4618      	mov	r0, r3
 81016da:	f7ff ff67 	bl	81015ac <LL_ADC_IsDeepPowerDownEnabled>
 81016de:	4603      	mov	r3, r0
 81016e0:	2b00      	cmp	r3, #0
 81016e2:	d004      	beq.n	81016ee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 81016e4:	687b      	ldr	r3, [r7, #4]
 81016e6:	681b      	ldr	r3, [r3, #0]
 81016e8:	4618      	mov	r0, r3
 81016ea:	f7ff ff4d 	bl	8101588 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 81016ee:	687b      	ldr	r3, [r7, #4]
 81016f0:	681b      	ldr	r3, [r3, #0]
 81016f2:	4618      	mov	r0, r3
 81016f4:	f7ff ff82 	bl	81015fc <LL_ADC_IsInternalRegulatorEnabled>
 81016f8:	4603      	mov	r3, r0
 81016fa:	2b00      	cmp	r3, #0
 81016fc:	d114      	bne.n	8101728 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 81016fe:	687b      	ldr	r3, [r7, #4]
 8101700:	681b      	ldr	r3, [r3, #0]
 8101702:	4618      	mov	r0, r3
 8101704:	f7ff ff66 	bl	81015d4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8101708:	4b88      	ldr	r3, [pc, #544]	; (810192c <HAL_ADC_Init+0x294>)
 810170a:	681b      	ldr	r3, [r3, #0]
 810170c:	099b      	lsrs	r3, r3, #6
 810170e:	4a88      	ldr	r2, [pc, #544]	; (8101930 <HAL_ADC_Init+0x298>)
 8101710:	fba2 2303 	umull	r2, r3, r2, r3
 8101714:	099b      	lsrs	r3, r3, #6
 8101716:	3301      	adds	r3, #1
 8101718:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 810171a:	e002      	b.n	8101722 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 810171c:	68bb      	ldr	r3, [r7, #8]
 810171e:	3b01      	subs	r3, #1
 8101720:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8101722:	68bb      	ldr	r3, [r7, #8]
 8101724:	2b00      	cmp	r3, #0
 8101726:	d1f9      	bne.n	810171c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8101728:	687b      	ldr	r3, [r7, #4]
 810172a:	681b      	ldr	r3, [r3, #0]
 810172c:	4618      	mov	r0, r3
 810172e:	f7ff ff65 	bl	81015fc <LL_ADC_IsInternalRegulatorEnabled>
 8101732:	4603      	mov	r3, r0
 8101734:	2b00      	cmp	r3, #0
 8101736:	d10d      	bne.n	8101754 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8101738:	687b      	ldr	r3, [r7, #4]
 810173a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810173c:	f043 0210 	orr.w	r2, r3, #16
 8101740:	687b      	ldr	r3, [r7, #4]
 8101742:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8101744:	687b      	ldr	r3, [r7, #4]
 8101746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101748:	f043 0201 	orr.w	r2, r3, #1
 810174c:	687b      	ldr	r3, [r7, #4]
 810174e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8101750:	2301      	movs	r3, #1
 8101752:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8101754:	687b      	ldr	r3, [r7, #4]
 8101756:	681b      	ldr	r3, [r3, #0]
 8101758:	4618      	mov	r0, r3
 810175a:	f7ff ff76 	bl	810164a <LL_ADC_REG_IsConversionOngoing>
 810175e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8101760:	687b      	ldr	r3, [r7, #4]
 8101762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101764:	f003 0310 	and.w	r3, r3, #16
 8101768:	2b00      	cmp	r3, #0
 810176a:	f040 8129 	bne.w	81019c0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 810176e:	697b      	ldr	r3, [r7, #20]
 8101770:	2b00      	cmp	r3, #0
 8101772:	f040 8125 	bne.w	81019c0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8101776:	687b      	ldr	r3, [r7, #4]
 8101778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810177a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 810177e:	f043 0202 	orr.w	r2, r3, #2
 8101782:	687b      	ldr	r3, [r7, #4]
 8101784:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8101786:	687b      	ldr	r3, [r7, #4]
 8101788:	681b      	ldr	r3, [r3, #0]
 810178a:	4618      	mov	r0, r3
 810178c:	f7ff ff4a 	bl	8101624 <LL_ADC_IsEnabled>
 8101790:	4603      	mov	r3, r0
 8101792:	2b00      	cmp	r3, #0
 8101794:	d136      	bne.n	8101804 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8101796:	687b      	ldr	r3, [r7, #4]
 8101798:	681b      	ldr	r3, [r3, #0]
 810179a:	4a66      	ldr	r2, [pc, #408]	; (8101934 <HAL_ADC_Init+0x29c>)
 810179c:	4293      	cmp	r3, r2
 810179e:	d004      	beq.n	81017aa <HAL_ADC_Init+0x112>
 81017a0:	687b      	ldr	r3, [r7, #4]
 81017a2:	681b      	ldr	r3, [r3, #0]
 81017a4:	4a64      	ldr	r2, [pc, #400]	; (8101938 <HAL_ADC_Init+0x2a0>)
 81017a6:	4293      	cmp	r3, r2
 81017a8:	d10e      	bne.n	81017c8 <HAL_ADC_Init+0x130>
 81017aa:	4862      	ldr	r0, [pc, #392]	; (8101934 <HAL_ADC_Init+0x29c>)
 81017ac:	f7ff ff3a 	bl	8101624 <LL_ADC_IsEnabled>
 81017b0:	4604      	mov	r4, r0
 81017b2:	4861      	ldr	r0, [pc, #388]	; (8101938 <HAL_ADC_Init+0x2a0>)
 81017b4:	f7ff ff36 	bl	8101624 <LL_ADC_IsEnabled>
 81017b8:	4603      	mov	r3, r0
 81017ba:	4323      	orrs	r3, r4
 81017bc:	2b00      	cmp	r3, #0
 81017be:	bf0c      	ite	eq
 81017c0:	2301      	moveq	r3, #1
 81017c2:	2300      	movne	r3, #0
 81017c4:	b2db      	uxtb	r3, r3
 81017c6:	e008      	b.n	81017da <HAL_ADC_Init+0x142>
 81017c8:	485c      	ldr	r0, [pc, #368]	; (810193c <HAL_ADC_Init+0x2a4>)
 81017ca:	f7ff ff2b 	bl	8101624 <LL_ADC_IsEnabled>
 81017ce:	4603      	mov	r3, r0
 81017d0:	2b00      	cmp	r3, #0
 81017d2:	bf0c      	ite	eq
 81017d4:	2301      	moveq	r3, #1
 81017d6:	2300      	movne	r3, #0
 81017d8:	b2db      	uxtb	r3, r3
 81017da:	2b00      	cmp	r3, #0
 81017dc:	d012      	beq.n	8101804 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 81017de:	687b      	ldr	r3, [r7, #4]
 81017e0:	681b      	ldr	r3, [r3, #0]
 81017e2:	4a54      	ldr	r2, [pc, #336]	; (8101934 <HAL_ADC_Init+0x29c>)
 81017e4:	4293      	cmp	r3, r2
 81017e6:	d004      	beq.n	81017f2 <HAL_ADC_Init+0x15a>
 81017e8:	687b      	ldr	r3, [r7, #4]
 81017ea:	681b      	ldr	r3, [r3, #0]
 81017ec:	4a52      	ldr	r2, [pc, #328]	; (8101938 <HAL_ADC_Init+0x2a0>)
 81017ee:	4293      	cmp	r3, r2
 81017f0:	d101      	bne.n	81017f6 <HAL_ADC_Init+0x15e>
 81017f2:	4a53      	ldr	r2, [pc, #332]	; (8101940 <HAL_ADC_Init+0x2a8>)
 81017f4:	e000      	b.n	81017f8 <HAL_ADC_Init+0x160>
 81017f6:	4a53      	ldr	r2, [pc, #332]	; (8101944 <HAL_ADC_Init+0x2ac>)
 81017f8:	687b      	ldr	r3, [r7, #4]
 81017fa:	685b      	ldr	r3, [r3, #4]
 81017fc:	4619      	mov	r1, r3
 81017fe:	4610      	mov	r0, r2
 8101800:	f7ff fdbe 	bl	8101380 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8101804:	f7ff fd9a 	bl	810133c <HAL_GetREVID>
 8101808:	4603      	mov	r3, r0
 810180a:	f241 0203 	movw	r2, #4099	; 0x1003
 810180e:	4293      	cmp	r3, r2
 8101810:	d914      	bls.n	810183c <HAL_ADC_Init+0x1a4>
 8101812:	687b      	ldr	r3, [r7, #4]
 8101814:	689b      	ldr	r3, [r3, #8]
 8101816:	2b10      	cmp	r3, #16
 8101818:	d110      	bne.n	810183c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 810181a:	687b      	ldr	r3, [r7, #4]
 810181c:	7d5b      	ldrb	r3, [r3, #21]
 810181e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8101820:	687b      	ldr	r3, [r7, #4]
 8101822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101824:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8101826:	687b      	ldr	r3, [r7, #4]
 8101828:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 810182a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 810182c:	687b      	ldr	r3, [r7, #4]
 810182e:	7f1b      	ldrb	r3, [r3, #28]
 8101830:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8101832:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101834:	f043 030c 	orr.w	r3, r3, #12
 8101838:	61bb      	str	r3, [r7, #24]
 810183a:	e00d      	b.n	8101858 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 810183c:	687b      	ldr	r3, [r7, #4]
 810183e:	7d5b      	ldrb	r3, [r3, #21]
 8101840:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8101842:	687b      	ldr	r3, [r7, #4]
 8101844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101846:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8101848:	687b      	ldr	r3, [r7, #4]
 810184a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 810184c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 810184e:	687b      	ldr	r3, [r7, #4]
 8101850:	7f1b      	ldrb	r3, [r3, #28]
 8101852:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101854:	4313      	orrs	r3, r2
 8101856:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8101858:	687b      	ldr	r3, [r7, #4]
 810185a:	7f1b      	ldrb	r3, [r3, #28]
 810185c:	2b01      	cmp	r3, #1
 810185e:	d106      	bne.n	810186e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8101860:	687b      	ldr	r3, [r7, #4]
 8101862:	6a1b      	ldr	r3, [r3, #32]
 8101864:	3b01      	subs	r3, #1
 8101866:	045b      	lsls	r3, r3, #17
 8101868:	69ba      	ldr	r2, [r7, #24]
 810186a:	4313      	orrs	r3, r2
 810186c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 810186e:	687b      	ldr	r3, [r7, #4]
 8101870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101872:	2b00      	cmp	r3, #0
 8101874:	d009      	beq.n	810188a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8101876:	687b      	ldr	r3, [r7, #4]
 8101878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810187a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 810187e:	687b      	ldr	r3, [r7, #4]
 8101880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101882:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8101884:	69ba      	ldr	r2, [r7, #24]
 8101886:	4313      	orrs	r3, r2
 8101888:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 810188a:	687b      	ldr	r3, [r7, #4]
 810188c:	681b      	ldr	r3, [r3, #0]
 810188e:	68da      	ldr	r2, [r3, #12]
 8101890:	4b2d      	ldr	r3, [pc, #180]	; (8101948 <HAL_ADC_Init+0x2b0>)
 8101892:	4013      	ands	r3, r2
 8101894:	687a      	ldr	r2, [r7, #4]
 8101896:	6812      	ldr	r2, [r2, #0]
 8101898:	69b9      	ldr	r1, [r7, #24]
 810189a:	430b      	orrs	r3, r1
 810189c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 810189e:	687b      	ldr	r3, [r7, #4]
 81018a0:	681b      	ldr	r3, [r3, #0]
 81018a2:	4618      	mov	r0, r3
 81018a4:	f7ff fed1 	bl	810164a <LL_ADC_REG_IsConversionOngoing>
 81018a8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 81018aa:	687b      	ldr	r3, [r7, #4]
 81018ac:	681b      	ldr	r3, [r3, #0]
 81018ae:	4618      	mov	r0, r3
 81018b0:	f7ff fede 	bl	8101670 <LL_ADC_INJ_IsConversionOngoing>
 81018b4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 81018b6:	693b      	ldr	r3, [r7, #16]
 81018b8:	2b00      	cmp	r3, #0
 81018ba:	d15f      	bne.n	810197c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 81018bc:	68fb      	ldr	r3, [r7, #12]
 81018be:	2b00      	cmp	r3, #0
 81018c0:	d15c      	bne.n	810197c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 81018c2:	687b      	ldr	r3, [r7, #4]
 81018c4:	7d1b      	ldrb	r3, [r3, #20]
 81018c6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 81018c8:	687b      	ldr	r3, [r7, #4]
 81018ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 81018cc:	4313      	orrs	r3, r2
 81018ce:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 81018d0:	687b      	ldr	r3, [r7, #4]
 81018d2:	681b      	ldr	r3, [r3, #0]
 81018d4:	68db      	ldr	r3, [r3, #12]
 81018d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 81018da:	f023 0303 	bic.w	r3, r3, #3
 81018de:	687a      	ldr	r2, [r7, #4]
 81018e0:	6812      	ldr	r2, [r2, #0]
 81018e2:	69b9      	ldr	r1, [r7, #24]
 81018e4:	430b      	orrs	r3, r1
 81018e6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 81018e8:	687b      	ldr	r3, [r7, #4]
 81018ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 81018ee:	2b01      	cmp	r3, #1
 81018f0:	d12e      	bne.n	8101950 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 81018f2:	687b      	ldr	r3, [r7, #4]
 81018f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81018f6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 81018f8:	687b      	ldr	r3, [r7, #4]
 81018fa:	681b      	ldr	r3, [r3, #0]
 81018fc:	691a      	ldr	r2, [r3, #16]
 81018fe:	4b13      	ldr	r3, [pc, #76]	; (810194c <HAL_ADC_Init+0x2b4>)
 8101900:	4013      	ands	r3, r2
 8101902:	687a      	ldr	r2, [r7, #4]
 8101904:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8101906:	3a01      	subs	r2, #1
 8101908:	0411      	lsls	r1, r2, #16
 810190a:	687a      	ldr	r2, [r7, #4]
 810190c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 810190e:	4311      	orrs	r1, r2
 8101910:	687a      	ldr	r2, [r7, #4]
 8101912:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8101914:	4311      	orrs	r1, r2
 8101916:	687a      	ldr	r2, [r7, #4]
 8101918:	6c92      	ldr	r2, [r2, #72]	; 0x48
 810191a:	430a      	orrs	r2, r1
 810191c:	431a      	orrs	r2, r3
 810191e:	687b      	ldr	r3, [r7, #4]
 8101920:	681b      	ldr	r3, [r3, #0]
 8101922:	f042 0201 	orr.w	r2, r2, #1
 8101926:	611a      	str	r2, [r3, #16]
 8101928:	e01a      	b.n	8101960 <HAL_ADC_Init+0x2c8>
 810192a:	bf00      	nop
 810192c:	10000000 	.word	0x10000000
 8101930:	053e2d63 	.word	0x053e2d63
 8101934:	40022000 	.word	0x40022000
 8101938:	40022100 	.word	0x40022100
 810193c:	58026000 	.word	0x58026000
 8101940:	40022300 	.word	0x40022300
 8101944:	58026300 	.word	0x58026300
 8101948:	fff0c003 	.word	0xfff0c003
 810194c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8101950:	687b      	ldr	r3, [r7, #4]
 8101952:	681b      	ldr	r3, [r3, #0]
 8101954:	691a      	ldr	r2, [r3, #16]
 8101956:	687b      	ldr	r3, [r7, #4]
 8101958:	681b      	ldr	r3, [r3, #0]
 810195a:	f022 0201 	bic.w	r2, r2, #1
 810195e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8101960:	687b      	ldr	r3, [r7, #4]
 8101962:	681b      	ldr	r3, [r3, #0]
 8101964:	691b      	ldr	r3, [r3, #16]
 8101966:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 810196a:	687b      	ldr	r3, [r7, #4]
 810196c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810196e:	687b      	ldr	r3, [r7, #4]
 8101970:	681b      	ldr	r3, [r3, #0]
 8101972:	430a      	orrs	r2, r1
 8101974:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8101976:	6878      	ldr	r0, [r7, #4]
 8101978:	f000 fb80 	bl	810207c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 810197c:	687b      	ldr	r3, [r7, #4]
 810197e:	68db      	ldr	r3, [r3, #12]
 8101980:	2b01      	cmp	r3, #1
 8101982:	d10c      	bne.n	810199e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8101984:	687b      	ldr	r3, [r7, #4]
 8101986:	681b      	ldr	r3, [r3, #0]
 8101988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810198a:	f023 010f 	bic.w	r1, r3, #15
 810198e:	687b      	ldr	r3, [r7, #4]
 8101990:	699b      	ldr	r3, [r3, #24]
 8101992:	1e5a      	subs	r2, r3, #1
 8101994:	687b      	ldr	r3, [r7, #4]
 8101996:	681b      	ldr	r3, [r3, #0]
 8101998:	430a      	orrs	r2, r1
 810199a:	631a      	str	r2, [r3, #48]	; 0x30
 810199c:	e007      	b.n	81019ae <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 810199e:	687b      	ldr	r3, [r7, #4]
 81019a0:	681b      	ldr	r3, [r3, #0]
 81019a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 81019a4:	687b      	ldr	r3, [r7, #4]
 81019a6:	681b      	ldr	r3, [r3, #0]
 81019a8:	f022 020f 	bic.w	r2, r2, #15
 81019ac:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 81019ae:	687b      	ldr	r3, [r7, #4]
 81019b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81019b2:	f023 0303 	bic.w	r3, r3, #3
 81019b6:	f043 0201 	orr.w	r2, r3, #1
 81019ba:	687b      	ldr	r3, [r7, #4]
 81019bc:	655a      	str	r2, [r3, #84]	; 0x54
 81019be:	e007      	b.n	81019d0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81019c0:	687b      	ldr	r3, [r7, #4]
 81019c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81019c4:	f043 0210 	orr.w	r2, r3, #16
 81019c8:	687b      	ldr	r3, [r7, #4]
 81019ca:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 81019cc:	2301      	movs	r3, #1
 81019ce:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 81019d0:	7ffb      	ldrb	r3, [r7, #31]
}
 81019d2:	4618      	mov	r0, r3
 81019d4:	3724      	adds	r7, #36	; 0x24
 81019d6:	46bd      	mov	sp, r7
 81019d8:	bd90      	pop	{r4, r7, pc}
 81019da:	bf00      	nop

081019dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 81019dc:	b590      	push	{r4, r7, lr}
 81019de:	b0a1      	sub	sp, #132	; 0x84
 81019e0:	af00      	add	r7, sp, #0
 81019e2:	6078      	str	r0, [r7, #4]
 81019e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 81019e6:	2300      	movs	r3, #0
 81019e8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 81019ec:	2300      	movs	r3, #0
 81019ee:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 81019f0:	683b      	ldr	r3, [r7, #0]
 81019f2:	68db      	ldr	r3, [r3, #12]
 81019f4:	4a9d      	ldr	r2, [pc, #628]	; (8101c6c <HAL_ADC_ConfigChannel+0x290>)
 81019f6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 81019f8:	687b      	ldr	r3, [r7, #4]
 81019fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 81019fe:	2b01      	cmp	r3, #1
 8101a00:	d101      	bne.n	8101a06 <HAL_ADC_ConfigChannel+0x2a>
 8101a02:	2302      	movs	r3, #2
 8101a04:	e321      	b.n	810204a <HAL_ADC_ConfigChannel+0x66e>
 8101a06:	687b      	ldr	r3, [r7, #4]
 8101a08:	2201      	movs	r2, #1
 8101a0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8101a0e:	687b      	ldr	r3, [r7, #4]
 8101a10:	681b      	ldr	r3, [r3, #0]
 8101a12:	4618      	mov	r0, r3
 8101a14:	f7ff fe19 	bl	810164a <LL_ADC_REG_IsConversionOngoing>
 8101a18:	4603      	mov	r3, r0
 8101a1a:	2b00      	cmp	r3, #0
 8101a1c:	f040 8306 	bne.w	810202c <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8101a20:	683b      	ldr	r3, [r7, #0]
 8101a22:	681b      	ldr	r3, [r3, #0]
 8101a24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8101a28:	2b00      	cmp	r3, #0
 8101a2a:	d108      	bne.n	8101a3e <HAL_ADC_ConfigChannel+0x62>
 8101a2c:	683b      	ldr	r3, [r7, #0]
 8101a2e:	681b      	ldr	r3, [r3, #0]
 8101a30:	0e9b      	lsrs	r3, r3, #26
 8101a32:	f003 031f 	and.w	r3, r3, #31
 8101a36:	2201      	movs	r2, #1
 8101a38:	fa02 f303 	lsl.w	r3, r2, r3
 8101a3c:	e016      	b.n	8101a6c <HAL_ADC_ConfigChannel+0x90>
 8101a3e:	683b      	ldr	r3, [r7, #0]
 8101a40:	681b      	ldr	r3, [r3, #0]
 8101a42:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8101a44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8101a46:	fa93 f3a3 	rbit	r3, r3
 8101a4a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8101a4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8101a4e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8101a50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8101a52:	2b00      	cmp	r3, #0
 8101a54:	d101      	bne.n	8101a5a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8101a56:	2320      	movs	r3, #32
 8101a58:	e003      	b.n	8101a62 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8101a5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8101a5c:	fab3 f383 	clz	r3, r3
 8101a60:	b2db      	uxtb	r3, r3
 8101a62:	f003 031f 	and.w	r3, r3, #31
 8101a66:	2201      	movs	r2, #1
 8101a68:	fa02 f303 	lsl.w	r3, r2, r3
 8101a6c:	687a      	ldr	r2, [r7, #4]
 8101a6e:	6812      	ldr	r2, [r2, #0]
 8101a70:	69d1      	ldr	r1, [r2, #28]
 8101a72:	687a      	ldr	r2, [r7, #4]
 8101a74:	6812      	ldr	r2, [r2, #0]
 8101a76:	430b      	orrs	r3, r1
 8101a78:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8101a7a:	687b      	ldr	r3, [r7, #4]
 8101a7c:	6818      	ldr	r0, [r3, #0]
 8101a7e:	683b      	ldr	r3, [r7, #0]
 8101a80:	6859      	ldr	r1, [r3, #4]
 8101a82:	683b      	ldr	r3, [r7, #0]
 8101a84:	681b      	ldr	r3, [r3, #0]
 8101a86:	461a      	mov	r2, r3
 8101a88:	f7ff fd02 	bl	8101490 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8101a8c:	687b      	ldr	r3, [r7, #4]
 8101a8e:	681b      	ldr	r3, [r3, #0]
 8101a90:	4618      	mov	r0, r3
 8101a92:	f7ff fdda 	bl	810164a <LL_ADC_REG_IsConversionOngoing>
 8101a96:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8101a98:	687b      	ldr	r3, [r7, #4]
 8101a9a:	681b      	ldr	r3, [r3, #0]
 8101a9c:	4618      	mov	r0, r3
 8101a9e:	f7ff fde7 	bl	8101670 <LL_ADC_INJ_IsConversionOngoing>
 8101aa2:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8101aa4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8101aa6:	2b00      	cmp	r3, #0
 8101aa8:	f040 80b3 	bne.w	8101c12 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8101aac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8101aae:	2b00      	cmp	r3, #0
 8101ab0:	f040 80af 	bne.w	8101c12 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8101ab4:	687b      	ldr	r3, [r7, #4]
 8101ab6:	6818      	ldr	r0, [r3, #0]
 8101ab8:	683b      	ldr	r3, [r7, #0]
 8101aba:	6819      	ldr	r1, [r3, #0]
 8101abc:	683b      	ldr	r3, [r7, #0]
 8101abe:	689b      	ldr	r3, [r3, #8]
 8101ac0:	461a      	mov	r2, r3
 8101ac2:	f7ff fd11 	bl	81014e8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8101ac6:	4b6a      	ldr	r3, [pc, #424]	; (8101c70 <HAL_ADC_ConfigChannel+0x294>)
 8101ac8:	681b      	ldr	r3, [r3, #0]
 8101aca:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8101ace:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8101ad2:	d10b      	bne.n	8101aec <HAL_ADC_ConfigChannel+0x110>
 8101ad4:	683b      	ldr	r3, [r7, #0]
 8101ad6:	695a      	ldr	r2, [r3, #20]
 8101ad8:	687b      	ldr	r3, [r7, #4]
 8101ada:	681b      	ldr	r3, [r3, #0]
 8101adc:	68db      	ldr	r3, [r3, #12]
 8101ade:	089b      	lsrs	r3, r3, #2
 8101ae0:	f003 0307 	and.w	r3, r3, #7
 8101ae4:	005b      	lsls	r3, r3, #1
 8101ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8101aea:	e01d      	b.n	8101b28 <HAL_ADC_ConfigChannel+0x14c>
 8101aec:	687b      	ldr	r3, [r7, #4]
 8101aee:	681b      	ldr	r3, [r3, #0]
 8101af0:	68db      	ldr	r3, [r3, #12]
 8101af2:	f003 0310 	and.w	r3, r3, #16
 8101af6:	2b00      	cmp	r3, #0
 8101af8:	d10b      	bne.n	8101b12 <HAL_ADC_ConfigChannel+0x136>
 8101afa:	683b      	ldr	r3, [r7, #0]
 8101afc:	695a      	ldr	r2, [r3, #20]
 8101afe:	687b      	ldr	r3, [r7, #4]
 8101b00:	681b      	ldr	r3, [r3, #0]
 8101b02:	68db      	ldr	r3, [r3, #12]
 8101b04:	089b      	lsrs	r3, r3, #2
 8101b06:	f003 0307 	and.w	r3, r3, #7
 8101b0a:	005b      	lsls	r3, r3, #1
 8101b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8101b10:	e00a      	b.n	8101b28 <HAL_ADC_ConfigChannel+0x14c>
 8101b12:	683b      	ldr	r3, [r7, #0]
 8101b14:	695a      	ldr	r2, [r3, #20]
 8101b16:	687b      	ldr	r3, [r7, #4]
 8101b18:	681b      	ldr	r3, [r3, #0]
 8101b1a:	68db      	ldr	r3, [r3, #12]
 8101b1c:	089b      	lsrs	r3, r3, #2
 8101b1e:	f003 0304 	and.w	r3, r3, #4
 8101b22:	005b      	lsls	r3, r3, #1
 8101b24:	fa02 f303 	lsl.w	r3, r2, r3
 8101b28:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8101b2a:	683b      	ldr	r3, [r7, #0]
 8101b2c:	691b      	ldr	r3, [r3, #16]
 8101b2e:	2b04      	cmp	r3, #4
 8101b30:	d027      	beq.n	8101b82 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8101b32:	687b      	ldr	r3, [r7, #4]
 8101b34:	6818      	ldr	r0, [r3, #0]
 8101b36:	683b      	ldr	r3, [r7, #0]
 8101b38:	6919      	ldr	r1, [r3, #16]
 8101b3a:	683b      	ldr	r3, [r7, #0]
 8101b3c:	681a      	ldr	r2, [r3, #0]
 8101b3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8101b40:	f7ff fc52 	bl	81013e8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8101b44:	687b      	ldr	r3, [r7, #4]
 8101b46:	6818      	ldr	r0, [r3, #0]
 8101b48:	683b      	ldr	r3, [r7, #0]
 8101b4a:	6919      	ldr	r1, [r3, #16]
 8101b4c:	683b      	ldr	r3, [r7, #0]
 8101b4e:	7e5b      	ldrb	r3, [r3, #25]
 8101b50:	2b01      	cmp	r3, #1
 8101b52:	d102      	bne.n	8101b5a <HAL_ADC_ConfigChannel+0x17e>
 8101b54:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8101b58:	e000      	b.n	8101b5c <HAL_ADC_ConfigChannel+0x180>
 8101b5a:	2300      	movs	r3, #0
 8101b5c:	461a      	mov	r2, r3
 8101b5e:	f7ff fc7c 	bl	810145a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8101b62:	687b      	ldr	r3, [r7, #4]
 8101b64:	6818      	ldr	r0, [r3, #0]
 8101b66:	683b      	ldr	r3, [r7, #0]
 8101b68:	6919      	ldr	r1, [r3, #16]
 8101b6a:	683b      	ldr	r3, [r7, #0]
 8101b6c:	7e1b      	ldrb	r3, [r3, #24]
 8101b6e:	2b01      	cmp	r3, #1
 8101b70:	d102      	bne.n	8101b78 <HAL_ADC_ConfigChannel+0x19c>
 8101b72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8101b76:	e000      	b.n	8101b7a <HAL_ADC_ConfigChannel+0x19e>
 8101b78:	2300      	movs	r3, #0
 8101b7a:	461a      	mov	r2, r3
 8101b7c:	f7ff fc54 	bl	8101428 <LL_ADC_SetDataRightShift>
 8101b80:	e047      	b.n	8101c12 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8101b82:	687b      	ldr	r3, [r7, #4]
 8101b84:	681b      	ldr	r3, [r3, #0]
 8101b86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8101b88:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8101b8c:	683b      	ldr	r3, [r7, #0]
 8101b8e:	681b      	ldr	r3, [r3, #0]
 8101b90:	069b      	lsls	r3, r3, #26
 8101b92:	429a      	cmp	r2, r3
 8101b94:	d107      	bne.n	8101ba6 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8101b96:	687b      	ldr	r3, [r7, #4]
 8101b98:	681b      	ldr	r3, [r3, #0]
 8101b9a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8101b9c:	687b      	ldr	r3, [r7, #4]
 8101b9e:	681b      	ldr	r3, [r3, #0]
 8101ba0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8101ba4:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8101ba6:	687b      	ldr	r3, [r7, #4]
 8101ba8:	681b      	ldr	r3, [r3, #0]
 8101baa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8101bac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8101bb0:	683b      	ldr	r3, [r7, #0]
 8101bb2:	681b      	ldr	r3, [r3, #0]
 8101bb4:	069b      	lsls	r3, r3, #26
 8101bb6:	429a      	cmp	r2, r3
 8101bb8:	d107      	bne.n	8101bca <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8101bba:	687b      	ldr	r3, [r7, #4]
 8101bbc:	681b      	ldr	r3, [r3, #0]
 8101bbe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8101bc0:	687b      	ldr	r3, [r7, #4]
 8101bc2:	681b      	ldr	r3, [r3, #0]
 8101bc4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8101bc8:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8101bca:	687b      	ldr	r3, [r7, #4]
 8101bcc:	681b      	ldr	r3, [r3, #0]
 8101bce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8101bd0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8101bd4:	683b      	ldr	r3, [r7, #0]
 8101bd6:	681b      	ldr	r3, [r3, #0]
 8101bd8:	069b      	lsls	r3, r3, #26
 8101bda:	429a      	cmp	r2, r3
 8101bdc:	d107      	bne.n	8101bee <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8101bde:	687b      	ldr	r3, [r7, #4]
 8101be0:	681b      	ldr	r3, [r3, #0]
 8101be2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8101be4:	687b      	ldr	r3, [r7, #4]
 8101be6:	681b      	ldr	r3, [r3, #0]
 8101be8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8101bec:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8101bee:	687b      	ldr	r3, [r7, #4]
 8101bf0:	681b      	ldr	r3, [r3, #0]
 8101bf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8101bf4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8101bf8:	683b      	ldr	r3, [r7, #0]
 8101bfa:	681b      	ldr	r3, [r3, #0]
 8101bfc:	069b      	lsls	r3, r3, #26
 8101bfe:	429a      	cmp	r2, r3
 8101c00:	d107      	bne.n	8101c12 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8101c02:	687b      	ldr	r3, [r7, #4]
 8101c04:	681b      	ldr	r3, [r3, #0]
 8101c06:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8101c08:	687b      	ldr	r3, [r7, #4]
 8101c0a:	681b      	ldr	r3, [r3, #0]
 8101c0c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8101c10:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8101c12:	687b      	ldr	r3, [r7, #4]
 8101c14:	681b      	ldr	r3, [r3, #0]
 8101c16:	4618      	mov	r0, r3
 8101c18:	f7ff fd04 	bl	8101624 <LL_ADC_IsEnabled>
 8101c1c:	4603      	mov	r3, r0
 8101c1e:	2b00      	cmp	r3, #0
 8101c20:	f040 820d 	bne.w	810203e <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8101c24:	687b      	ldr	r3, [r7, #4]
 8101c26:	6818      	ldr	r0, [r3, #0]
 8101c28:	683b      	ldr	r3, [r7, #0]
 8101c2a:	6819      	ldr	r1, [r3, #0]
 8101c2c:	683b      	ldr	r3, [r7, #0]
 8101c2e:	68db      	ldr	r3, [r3, #12]
 8101c30:	461a      	mov	r2, r3
 8101c32:	f7ff fc85 	bl	8101540 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8101c36:	683b      	ldr	r3, [r7, #0]
 8101c38:	68db      	ldr	r3, [r3, #12]
 8101c3a:	4a0c      	ldr	r2, [pc, #48]	; (8101c6c <HAL_ADC_ConfigChannel+0x290>)
 8101c3c:	4293      	cmp	r3, r2
 8101c3e:	f040 8133 	bne.w	8101ea8 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8101c42:	687b      	ldr	r3, [r7, #4]
 8101c44:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8101c46:	683b      	ldr	r3, [r7, #0]
 8101c48:	681b      	ldr	r3, [r3, #0]
 8101c4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8101c4e:	2b00      	cmp	r3, #0
 8101c50:	d110      	bne.n	8101c74 <HAL_ADC_ConfigChannel+0x298>
 8101c52:	683b      	ldr	r3, [r7, #0]
 8101c54:	681b      	ldr	r3, [r3, #0]
 8101c56:	0e9b      	lsrs	r3, r3, #26
 8101c58:	3301      	adds	r3, #1
 8101c5a:	f003 031f 	and.w	r3, r3, #31
 8101c5e:	2b09      	cmp	r3, #9
 8101c60:	bf94      	ite	ls
 8101c62:	2301      	movls	r3, #1
 8101c64:	2300      	movhi	r3, #0
 8101c66:	b2db      	uxtb	r3, r3
 8101c68:	e01e      	b.n	8101ca8 <HAL_ADC_ConfigChannel+0x2cc>
 8101c6a:	bf00      	nop
 8101c6c:	47ff0000 	.word	0x47ff0000
 8101c70:	5c001000 	.word	0x5c001000
 8101c74:	683b      	ldr	r3, [r7, #0]
 8101c76:	681b      	ldr	r3, [r3, #0]
 8101c78:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8101c7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8101c7c:	fa93 f3a3 	rbit	r3, r3
 8101c80:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8101c82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8101c84:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8101c86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8101c88:	2b00      	cmp	r3, #0
 8101c8a:	d101      	bne.n	8101c90 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8101c8c:	2320      	movs	r3, #32
 8101c8e:	e003      	b.n	8101c98 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8101c90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8101c92:	fab3 f383 	clz	r3, r3
 8101c96:	b2db      	uxtb	r3, r3
 8101c98:	3301      	adds	r3, #1
 8101c9a:	f003 031f 	and.w	r3, r3, #31
 8101c9e:	2b09      	cmp	r3, #9
 8101ca0:	bf94      	ite	ls
 8101ca2:	2301      	movls	r3, #1
 8101ca4:	2300      	movhi	r3, #0
 8101ca6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8101ca8:	2b00      	cmp	r3, #0
 8101caa:	d079      	beq.n	8101da0 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8101cac:	683b      	ldr	r3, [r7, #0]
 8101cae:	681b      	ldr	r3, [r3, #0]
 8101cb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8101cb4:	2b00      	cmp	r3, #0
 8101cb6:	d107      	bne.n	8101cc8 <HAL_ADC_ConfigChannel+0x2ec>
 8101cb8:	683b      	ldr	r3, [r7, #0]
 8101cba:	681b      	ldr	r3, [r3, #0]
 8101cbc:	0e9b      	lsrs	r3, r3, #26
 8101cbe:	3301      	adds	r3, #1
 8101cc0:	069b      	lsls	r3, r3, #26
 8101cc2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8101cc6:	e015      	b.n	8101cf4 <HAL_ADC_ConfigChannel+0x318>
 8101cc8:	683b      	ldr	r3, [r7, #0]
 8101cca:	681b      	ldr	r3, [r3, #0]
 8101ccc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8101cce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8101cd0:	fa93 f3a3 	rbit	r3, r3
 8101cd4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8101cd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8101cd8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8101cda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8101cdc:	2b00      	cmp	r3, #0
 8101cde:	d101      	bne.n	8101ce4 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8101ce0:	2320      	movs	r3, #32
 8101ce2:	e003      	b.n	8101cec <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8101ce4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8101ce6:	fab3 f383 	clz	r3, r3
 8101cea:	b2db      	uxtb	r3, r3
 8101cec:	3301      	adds	r3, #1
 8101cee:	069b      	lsls	r3, r3, #26
 8101cf0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8101cf4:	683b      	ldr	r3, [r7, #0]
 8101cf6:	681b      	ldr	r3, [r3, #0]
 8101cf8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8101cfc:	2b00      	cmp	r3, #0
 8101cfe:	d109      	bne.n	8101d14 <HAL_ADC_ConfigChannel+0x338>
 8101d00:	683b      	ldr	r3, [r7, #0]
 8101d02:	681b      	ldr	r3, [r3, #0]
 8101d04:	0e9b      	lsrs	r3, r3, #26
 8101d06:	3301      	adds	r3, #1
 8101d08:	f003 031f 	and.w	r3, r3, #31
 8101d0c:	2101      	movs	r1, #1
 8101d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8101d12:	e017      	b.n	8101d44 <HAL_ADC_ConfigChannel+0x368>
 8101d14:	683b      	ldr	r3, [r7, #0]
 8101d16:	681b      	ldr	r3, [r3, #0]
 8101d18:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8101d1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8101d1c:	fa93 f3a3 	rbit	r3, r3
 8101d20:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8101d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8101d24:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8101d26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8101d28:	2b00      	cmp	r3, #0
 8101d2a:	d101      	bne.n	8101d30 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8101d2c:	2320      	movs	r3, #32
 8101d2e:	e003      	b.n	8101d38 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8101d30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8101d32:	fab3 f383 	clz	r3, r3
 8101d36:	b2db      	uxtb	r3, r3
 8101d38:	3301      	adds	r3, #1
 8101d3a:	f003 031f 	and.w	r3, r3, #31
 8101d3e:	2101      	movs	r1, #1
 8101d40:	fa01 f303 	lsl.w	r3, r1, r3
 8101d44:	ea42 0103 	orr.w	r1, r2, r3
 8101d48:	683b      	ldr	r3, [r7, #0]
 8101d4a:	681b      	ldr	r3, [r3, #0]
 8101d4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8101d50:	2b00      	cmp	r3, #0
 8101d52:	d10a      	bne.n	8101d6a <HAL_ADC_ConfigChannel+0x38e>
 8101d54:	683b      	ldr	r3, [r7, #0]
 8101d56:	681b      	ldr	r3, [r3, #0]
 8101d58:	0e9b      	lsrs	r3, r3, #26
 8101d5a:	3301      	adds	r3, #1
 8101d5c:	f003 021f 	and.w	r2, r3, #31
 8101d60:	4613      	mov	r3, r2
 8101d62:	005b      	lsls	r3, r3, #1
 8101d64:	4413      	add	r3, r2
 8101d66:	051b      	lsls	r3, r3, #20
 8101d68:	e018      	b.n	8101d9c <HAL_ADC_ConfigChannel+0x3c0>
 8101d6a:	683b      	ldr	r3, [r7, #0]
 8101d6c:	681b      	ldr	r3, [r3, #0]
 8101d6e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8101d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101d72:	fa93 f3a3 	rbit	r3, r3
 8101d76:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8101d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101d7a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8101d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8101d7e:	2b00      	cmp	r3, #0
 8101d80:	d101      	bne.n	8101d86 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8101d82:	2320      	movs	r3, #32
 8101d84:	e003      	b.n	8101d8e <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8101d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8101d88:	fab3 f383 	clz	r3, r3
 8101d8c:	b2db      	uxtb	r3, r3
 8101d8e:	3301      	adds	r3, #1
 8101d90:	f003 021f 	and.w	r2, r3, #31
 8101d94:	4613      	mov	r3, r2
 8101d96:	005b      	lsls	r3, r3, #1
 8101d98:	4413      	add	r3, r2
 8101d9a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8101d9c:	430b      	orrs	r3, r1
 8101d9e:	e07e      	b.n	8101e9e <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8101da0:	683b      	ldr	r3, [r7, #0]
 8101da2:	681b      	ldr	r3, [r3, #0]
 8101da4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8101da8:	2b00      	cmp	r3, #0
 8101daa:	d107      	bne.n	8101dbc <HAL_ADC_ConfigChannel+0x3e0>
 8101dac:	683b      	ldr	r3, [r7, #0]
 8101dae:	681b      	ldr	r3, [r3, #0]
 8101db0:	0e9b      	lsrs	r3, r3, #26
 8101db2:	3301      	adds	r3, #1
 8101db4:	069b      	lsls	r3, r3, #26
 8101db6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8101dba:	e015      	b.n	8101de8 <HAL_ADC_ConfigChannel+0x40c>
 8101dbc:	683b      	ldr	r3, [r7, #0]
 8101dbe:	681b      	ldr	r3, [r3, #0]
 8101dc0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8101dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101dc4:	fa93 f3a3 	rbit	r3, r3
 8101dc8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8101dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8101dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101dd0:	2b00      	cmp	r3, #0
 8101dd2:	d101      	bne.n	8101dd8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8101dd4:	2320      	movs	r3, #32
 8101dd6:	e003      	b.n	8101de0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8101dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101dda:	fab3 f383 	clz	r3, r3
 8101dde:	b2db      	uxtb	r3, r3
 8101de0:	3301      	adds	r3, #1
 8101de2:	069b      	lsls	r3, r3, #26
 8101de4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8101de8:	683b      	ldr	r3, [r7, #0]
 8101dea:	681b      	ldr	r3, [r3, #0]
 8101dec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8101df0:	2b00      	cmp	r3, #0
 8101df2:	d109      	bne.n	8101e08 <HAL_ADC_ConfigChannel+0x42c>
 8101df4:	683b      	ldr	r3, [r7, #0]
 8101df6:	681b      	ldr	r3, [r3, #0]
 8101df8:	0e9b      	lsrs	r3, r3, #26
 8101dfa:	3301      	adds	r3, #1
 8101dfc:	f003 031f 	and.w	r3, r3, #31
 8101e00:	2101      	movs	r1, #1
 8101e02:	fa01 f303 	lsl.w	r3, r1, r3
 8101e06:	e017      	b.n	8101e38 <HAL_ADC_ConfigChannel+0x45c>
 8101e08:	683b      	ldr	r3, [r7, #0]
 8101e0a:	681b      	ldr	r3, [r3, #0]
 8101e0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8101e0e:	69fb      	ldr	r3, [r7, #28]
 8101e10:	fa93 f3a3 	rbit	r3, r3
 8101e14:	61bb      	str	r3, [r7, #24]
  return result;
 8101e16:	69bb      	ldr	r3, [r7, #24]
 8101e18:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8101e1a:	6a3b      	ldr	r3, [r7, #32]
 8101e1c:	2b00      	cmp	r3, #0
 8101e1e:	d101      	bne.n	8101e24 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8101e20:	2320      	movs	r3, #32
 8101e22:	e003      	b.n	8101e2c <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8101e24:	6a3b      	ldr	r3, [r7, #32]
 8101e26:	fab3 f383 	clz	r3, r3
 8101e2a:	b2db      	uxtb	r3, r3
 8101e2c:	3301      	adds	r3, #1
 8101e2e:	f003 031f 	and.w	r3, r3, #31
 8101e32:	2101      	movs	r1, #1
 8101e34:	fa01 f303 	lsl.w	r3, r1, r3
 8101e38:	ea42 0103 	orr.w	r1, r2, r3
 8101e3c:	683b      	ldr	r3, [r7, #0]
 8101e3e:	681b      	ldr	r3, [r3, #0]
 8101e40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8101e44:	2b00      	cmp	r3, #0
 8101e46:	d10d      	bne.n	8101e64 <HAL_ADC_ConfigChannel+0x488>
 8101e48:	683b      	ldr	r3, [r7, #0]
 8101e4a:	681b      	ldr	r3, [r3, #0]
 8101e4c:	0e9b      	lsrs	r3, r3, #26
 8101e4e:	3301      	adds	r3, #1
 8101e50:	f003 021f 	and.w	r2, r3, #31
 8101e54:	4613      	mov	r3, r2
 8101e56:	005b      	lsls	r3, r3, #1
 8101e58:	4413      	add	r3, r2
 8101e5a:	3b1e      	subs	r3, #30
 8101e5c:	051b      	lsls	r3, r3, #20
 8101e5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8101e62:	e01b      	b.n	8101e9c <HAL_ADC_ConfigChannel+0x4c0>
 8101e64:	683b      	ldr	r3, [r7, #0]
 8101e66:	681b      	ldr	r3, [r3, #0]
 8101e68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8101e6a:	693b      	ldr	r3, [r7, #16]
 8101e6c:	fa93 f3a3 	rbit	r3, r3
 8101e70:	60fb      	str	r3, [r7, #12]
  return result;
 8101e72:	68fb      	ldr	r3, [r7, #12]
 8101e74:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8101e76:	697b      	ldr	r3, [r7, #20]
 8101e78:	2b00      	cmp	r3, #0
 8101e7a:	d101      	bne.n	8101e80 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8101e7c:	2320      	movs	r3, #32
 8101e7e:	e003      	b.n	8101e88 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8101e80:	697b      	ldr	r3, [r7, #20]
 8101e82:	fab3 f383 	clz	r3, r3
 8101e86:	b2db      	uxtb	r3, r3
 8101e88:	3301      	adds	r3, #1
 8101e8a:	f003 021f 	and.w	r2, r3, #31
 8101e8e:	4613      	mov	r3, r2
 8101e90:	005b      	lsls	r3, r3, #1
 8101e92:	4413      	add	r3, r2
 8101e94:	3b1e      	subs	r3, #30
 8101e96:	051b      	lsls	r3, r3, #20
 8101e98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8101e9c:	430b      	orrs	r3, r1
 8101e9e:	683a      	ldr	r2, [r7, #0]
 8101ea0:	6892      	ldr	r2, [r2, #8]
 8101ea2:	4619      	mov	r1, r3
 8101ea4:	f7ff fb20 	bl	81014e8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8101ea8:	683b      	ldr	r3, [r7, #0]
 8101eaa:	681b      	ldr	r3, [r3, #0]
 8101eac:	2b00      	cmp	r3, #0
 8101eae:	f280 80c6 	bge.w	810203e <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8101eb2:	687b      	ldr	r3, [r7, #4]
 8101eb4:	681b      	ldr	r3, [r3, #0]
 8101eb6:	4a67      	ldr	r2, [pc, #412]	; (8102054 <HAL_ADC_ConfigChannel+0x678>)
 8101eb8:	4293      	cmp	r3, r2
 8101eba:	d004      	beq.n	8101ec6 <HAL_ADC_ConfigChannel+0x4ea>
 8101ebc:	687b      	ldr	r3, [r7, #4]
 8101ebe:	681b      	ldr	r3, [r3, #0]
 8101ec0:	4a65      	ldr	r2, [pc, #404]	; (8102058 <HAL_ADC_ConfigChannel+0x67c>)
 8101ec2:	4293      	cmp	r3, r2
 8101ec4:	d101      	bne.n	8101eca <HAL_ADC_ConfigChannel+0x4ee>
 8101ec6:	4b65      	ldr	r3, [pc, #404]	; (810205c <HAL_ADC_ConfigChannel+0x680>)
 8101ec8:	e000      	b.n	8101ecc <HAL_ADC_ConfigChannel+0x4f0>
 8101eca:	4b65      	ldr	r3, [pc, #404]	; (8102060 <HAL_ADC_ConfigChannel+0x684>)
 8101ecc:	4618      	mov	r0, r3
 8101ece:	f7ff fa7d 	bl	81013cc <LL_ADC_GetCommonPathInternalCh>
 8101ed2:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8101ed4:	687b      	ldr	r3, [r7, #4]
 8101ed6:	681b      	ldr	r3, [r3, #0]
 8101ed8:	4a5e      	ldr	r2, [pc, #376]	; (8102054 <HAL_ADC_ConfigChannel+0x678>)
 8101eda:	4293      	cmp	r3, r2
 8101edc:	d004      	beq.n	8101ee8 <HAL_ADC_ConfigChannel+0x50c>
 8101ede:	687b      	ldr	r3, [r7, #4]
 8101ee0:	681b      	ldr	r3, [r3, #0]
 8101ee2:	4a5d      	ldr	r2, [pc, #372]	; (8102058 <HAL_ADC_ConfigChannel+0x67c>)
 8101ee4:	4293      	cmp	r3, r2
 8101ee6:	d10e      	bne.n	8101f06 <HAL_ADC_ConfigChannel+0x52a>
 8101ee8:	485a      	ldr	r0, [pc, #360]	; (8102054 <HAL_ADC_ConfigChannel+0x678>)
 8101eea:	f7ff fb9b 	bl	8101624 <LL_ADC_IsEnabled>
 8101eee:	4604      	mov	r4, r0
 8101ef0:	4859      	ldr	r0, [pc, #356]	; (8102058 <HAL_ADC_ConfigChannel+0x67c>)
 8101ef2:	f7ff fb97 	bl	8101624 <LL_ADC_IsEnabled>
 8101ef6:	4603      	mov	r3, r0
 8101ef8:	4323      	orrs	r3, r4
 8101efa:	2b00      	cmp	r3, #0
 8101efc:	bf0c      	ite	eq
 8101efe:	2301      	moveq	r3, #1
 8101f00:	2300      	movne	r3, #0
 8101f02:	b2db      	uxtb	r3, r3
 8101f04:	e008      	b.n	8101f18 <HAL_ADC_ConfigChannel+0x53c>
 8101f06:	4857      	ldr	r0, [pc, #348]	; (8102064 <HAL_ADC_ConfigChannel+0x688>)
 8101f08:	f7ff fb8c 	bl	8101624 <LL_ADC_IsEnabled>
 8101f0c:	4603      	mov	r3, r0
 8101f0e:	2b00      	cmp	r3, #0
 8101f10:	bf0c      	ite	eq
 8101f12:	2301      	moveq	r3, #1
 8101f14:	2300      	movne	r3, #0
 8101f16:	b2db      	uxtb	r3, r3
 8101f18:	2b00      	cmp	r3, #0
 8101f1a:	d07d      	beq.n	8102018 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8101f1c:	683b      	ldr	r3, [r7, #0]
 8101f1e:	681b      	ldr	r3, [r3, #0]
 8101f20:	4a51      	ldr	r2, [pc, #324]	; (8102068 <HAL_ADC_ConfigChannel+0x68c>)
 8101f22:	4293      	cmp	r3, r2
 8101f24:	d130      	bne.n	8101f88 <HAL_ADC_ConfigChannel+0x5ac>
 8101f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8101f28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8101f2c:	2b00      	cmp	r3, #0
 8101f2e:	d12b      	bne.n	8101f88 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8101f30:	687b      	ldr	r3, [r7, #4]
 8101f32:	681b      	ldr	r3, [r3, #0]
 8101f34:	4a4b      	ldr	r2, [pc, #300]	; (8102064 <HAL_ADC_ConfigChannel+0x688>)
 8101f36:	4293      	cmp	r3, r2
 8101f38:	f040 8081 	bne.w	810203e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8101f3c:	687b      	ldr	r3, [r7, #4]
 8101f3e:	681b      	ldr	r3, [r3, #0]
 8101f40:	4a44      	ldr	r2, [pc, #272]	; (8102054 <HAL_ADC_ConfigChannel+0x678>)
 8101f42:	4293      	cmp	r3, r2
 8101f44:	d004      	beq.n	8101f50 <HAL_ADC_ConfigChannel+0x574>
 8101f46:	687b      	ldr	r3, [r7, #4]
 8101f48:	681b      	ldr	r3, [r3, #0]
 8101f4a:	4a43      	ldr	r2, [pc, #268]	; (8102058 <HAL_ADC_ConfigChannel+0x67c>)
 8101f4c:	4293      	cmp	r3, r2
 8101f4e:	d101      	bne.n	8101f54 <HAL_ADC_ConfigChannel+0x578>
 8101f50:	4a42      	ldr	r2, [pc, #264]	; (810205c <HAL_ADC_ConfigChannel+0x680>)
 8101f52:	e000      	b.n	8101f56 <HAL_ADC_ConfigChannel+0x57a>
 8101f54:	4a42      	ldr	r2, [pc, #264]	; (8102060 <HAL_ADC_ConfigChannel+0x684>)
 8101f56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8101f58:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8101f5c:	4619      	mov	r1, r3
 8101f5e:	4610      	mov	r0, r2
 8101f60:	f7ff fa21 	bl	81013a6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8101f64:	4b41      	ldr	r3, [pc, #260]	; (810206c <HAL_ADC_ConfigChannel+0x690>)
 8101f66:	681b      	ldr	r3, [r3, #0]
 8101f68:	099b      	lsrs	r3, r3, #6
 8101f6a:	4a41      	ldr	r2, [pc, #260]	; (8102070 <HAL_ADC_ConfigChannel+0x694>)
 8101f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8101f70:	099b      	lsrs	r3, r3, #6
 8101f72:	3301      	adds	r3, #1
 8101f74:	005b      	lsls	r3, r3, #1
 8101f76:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8101f78:	e002      	b.n	8101f80 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8101f7a:	68bb      	ldr	r3, [r7, #8]
 8101f7c:	3b01      	subs	r3, #1
 8101f7e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8101f80:	68bb      	ldr	r3, [r7, #8]
 8101f82:	2b00      	cmp	r3, #0
 8101f84:	d1f9      	bne.n	8101f7a <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8101f86:	e05a      	b.n	810203e <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8101f88:	683b      	ldr	r3, [r7, #0]
 8101f8a:	681b      	ldr	r3, [r3, #0]
 8101f8c:	4a39      	ldr	r2, [pc, #228]	; (8102074 <HAL_ADC_ConfigChannel+0x698>)
 8101f8e:	4293      	cmp	r3, r2
 8101f90:	d11e      	bne.n	8101fd0 <HAL_ADC_ConfigChannel+0x5f4>
 8101f92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8101f94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8101f98:	2b00      	cmp	r3, #0
 8101f9a:	d119      	bne.n	8101fd0 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8101f9c:	687b      	ldr	r3, [r7, #4]
 8101f9e:	681b      	ldr	r3, [r3, #0]
 8101fa0:	4a30      	ldr	r2, [pc, #192]	; (8102064 <HAL_ADC_ConfigChannel+0x688>)
 8101fa2:	4293      	cmp	r3, r2
 8101fa4:	d14b      	bne.n	810203e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8101fa6:	687b      	ldr	r3, [r7, #4]
 8101fa8:	681b      	ldr	r3, [r3, #0]
 8101faa:	4a2a      	ldr	r2, [pc, #168]	; (8102054 <HAL_ADC_ConfigChannel+0x678>)
 8101fac:	4293      	cmp	r3, r2
 8101fae:	d004      	beq.n	8101fba <HAL_ADC_ConfigChannel+0x5de>
 8101fb0:	687b      	ldr	r3, [r7, #4]
 8101fb2:	681b      	ldr	r3, [r3, #0]
 8101fb4:	4a28      	ldr	r2, [pc, #160]	; (8102058 <HAL_ADC_ConfigChannel+0x67c>)
 8101fb6:	4293      	cmp	r3, r2
 8101fb8:	d101      	bne.n	8101fbe <HAL_ADC_ConfigChannel+0x5e2>
 8101fba:	4a28      	ldr	r2, [pc, #160]	; (810205c <HAL_ADC_ConfigChannel+0x680>)
 8101fbc:	e000      	b.n	8101fc0 <HAL_ADC_ConfigChannel+0x5e4>
 8101fbe:	4a28      	ldr	r2, [pc, #160]	; (8102060 <HAL_ADC_ConfigChannel+0x684>)
 8101fc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8101fc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8101fc6:	4619      	mov	r1, r3
 8101fc8:	4610      	mov	r0, r2
 8101fca:	f7ff f9ec 	bl	81013a6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8101fce:	e036      	b.n	810203e <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8101fd0:	683b      	ldr	r3, [r7, #0]
 8101fd2:	681b      	ldr	r3, [r3, #0]
 8101fd4:	4a28      	ldr	r2, [pc, #160]	; (8102078 <HAL_ADC_ConfigChannel+0x69c>)
 8101fd6:	4293      	cmp	r3, r2
 8101fd8:	d131      	bne.n	810203e <HAL_ADC_ConfigChannel+0x662>
 8101fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8101fdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8101fe0:	2b00      	cmp	r3, #0
 8101fe2:	d12c      	bne.n	810203e <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8101fe4:	687b      	ldr	r3, [r7, #4]
 8101fe6:	681b      	ldr	r3, [r3, #0]
 8101fe8:	4a1e      	ldr	r2, [pc, #120]	; (8102064 <HAL_ADC_ConfigChannel+0x688>)
 8101fea:	4293      	cmp	r3, r2
 8101fec:	d127      	bne.n	810203e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8101fee:	687b      	ldr	r3, [r7, #4]
 8101ff0:	681b      	ldr	r3, [r3, #0]
 8101ff2:	4a18      	ldr	r2, [pc, #96]	; (8102054 <HAL_ADC_ConfigChannel+0x678>)
 8101ff4:	4293      	cmp	r3, r2
 8101ff6:	d004      	beq.n	8102002 <HAL_ADC_ConfigChannel+0x626>
 8101ff8:	687b      	ldr	r3, [r7, #4]
 8101ffa:	681b      	ldr	r3, [r3, #0]
 8101ffc:	4a16      	ldr	r2, [pc, #88]	; (8102058 <HAL_ADC_ConfigChannel+0x67c>)
 8101ffe:	4293      	cmp	r3, r2
 8102000:	d101      	bne.n	8102006 <HAL_ADC_ConfigChannel+0x62a>
 8102002:	4a16      	ldr	r2, [pc, #88]	; (810205c <HAL_ADC_ConfigChannel+0x680>)
 8102004:	e000      	b.n	8102008 <HAL_ADC_ConfigChannel+0x62c>
 8102006:	4a16      	ldr	r2, [pc, #88]	; (8102060 <HAL_ADC_ConfigChannel+0x684>)
 8102008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810200a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 810200e:	4619      	mov	r1, r3
 8102010:	4610      	mov	r0, r2
 8102012:	f7ff f9c8 	bl	81013a6 <LL_ADC_SetCommonPathInternalCh>
 8102016:	e012      	b.n	810203e <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8102018:	687b      	ldr	r3, [r7, #4]
 810201a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810201c:	f043 0220 	orr.w	r2, r3, #32
 8102020:	687b      	ldr	r3, [r7, #4]
 8102022:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8102024:	2301      	movs	r3, #1
 8102026:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 810202a:	e008      	b.n	810203e <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 810202c:	687b      	ldr	r3, [r7, #4]
 810202e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102030:	f043 0220 	orr.w	r2, r3, #32
 8102034:	687b      	ldr	r3, [r7, #4]
 8102036:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8102038:	2301      	movs	r3, #1
 810203a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 810203e:	687b      	ldr	r3, [r7, #4]
 8102040:	2200      	movs	r2, #0
 8102042:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8102046:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 810204a:	4618      	mov	r0, r3
 810204c:	3784      	adds	r7, #132	; 0x84
 810204e:	46bd      	mov	sp, r7
 8102050:	bd90      	pop	{r4, r7, pc}
 8102052:	bf00      	nop
 8102054:	40022000 	.word	0x40022000
 8102058:	40022100 	.word	0x40022100
 810205c:	40022300 	.word	0x40022300
 8102060:	58026300 	.word	0x58026300
 8102064:	58026000 	.word	0x58026000
 8102068:	cb840000 	.word	0xcb840000
 810206c:	10000000 	.word	0x10000000
 8102070:	053e2d63 	.word	0x053e2d63
 8102074:	c7520000 	.word	0xc7520000
 8102078:	cfb80000 	.word	0xcfb80000

0810207c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 810207c:	b580      	push	{r7, lr}
 810207e:	b084      	sub	sp, #16
 8102080:	af00      	add	r7, sp, #0
 8102082:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8102084:	687b      	ldr	r3, [r7, #4]
 8102086:	681b      	ldr	r3, [r3, #0]
 8102088:	4a7a      	ldr	r2, [pc, #488]	; (8102274 <ADC_ConfigureBoostMode+0x1f8>)
 810208a:	4293      	cmp	r3, r2
 810208c:	d004      	beq.n	8102098 <ADC_ConfigureBoostMode+0x1c>
 810208e:	687b      	ldr	r3, [r7, #4]
 8102090:	681b      	ldr	r3, [r3, #0]
 8102092:	4a79      	ldr	r2, [pc, #484]	; (8102278 <ADC_ConfigureBoostMode+0x1fc>)
 8102094:	4293      	cmp	r3, r2
 8102096:	d109      	bne.n	81020ac <ADC_ConfigureBoostMode+0x30>
 8102098:	4b78      	ldr	r3, [pc, #480]	; (810227c <ADC_ConfigureBoostMode+0x200>)
 810209a:	689b      	ldr	r3, [r3, #8]
 810209c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81020a0:	2b00      	cmp	r3, #0
 81020a2:	bf14      	ite	ne
 81020a4:	2301      	movne	r3, #1
 81020a6:	2300      	moveq	r3, #0
 81020a8:	b2db      	uxtb	r3, r3
 81020aa:	e008      	b.n	81020be <ADC_ConfigureBoostMode+0x42>
 81020ac:	4b74      	ldr	r3, [pc, #464]	; (8102280 <ADC_ConfigureBoostMode+0x204>)
 81020ae:	689b      	ldr	r3, [r3, #8]
 81020b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81020b4:	2b00      	cmp	r3, #0
 81020b6:	bf14      	ite	ne
 81020b8:	2301      	movne	r3, #1
 81020ba:	2300      	moveq	r3, #0
 81020bc:	b2db      	uxtb	r3, r3
 81020be:	2b00      	cmp	r3, #0
 81020c0:	d01c      	beq.n	81020fc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 81020c2:	f003 f915 	bl	81052f0 <HAL_RCC_GetHCLKFreq>
 81020c6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 81020c8:	687b      	ldr	r3, [r7, #4]
 81020ca:	685b      	ldr	r3, [r3, #4]
 81020cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81020d0:	d010      	beq.n	81020f4 <ADC_ConfigureBoostMode+0x78>
 81020d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81020d6:	d873      	bhi.n	81021c0 <ADC_ConfigureBoostMode+0x144>
 81020d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81020dc:	d002      	beq.n	81020e4 <ADC_ConfigureBoostMode+0x68>
 81020de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81020e2:	d16d      	bne.n	81021c0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 81020e4:	687b      	ldr	r3, [r7, #4]
 81020e6:	685b      	ldr	r3, [r3, #4]
 81020e8:	0c1b      	lsrs	r3, r3, #16
 81020ea:	68fa      	ldr	r2, [r7, #12]
 81020ec:	fbb2 f3f3 	udiv	r3, r2, r3
 81020f0:	60fb      	str	r3, [r7, #12]
        break;
 81020f2:	e068      	b.n	81021c6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 81020f4:	68fb      	ldr	r3, [r7, #12]
 81020f6:	089b      	lsrs	r3, r3, #2
 81020f8:	60fb      	str	r3, [r7, #12]
        break;
 81020fa:	e064      	b.n	81021c6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 81020fc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8102100:	f04f 0100 	mov.w	r1, #0
 8102104:	f004 fb78 	bl	81067f8 <HAL_RCCEx_GetPeriphCLKFreq>
 8102108:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 810210a:	687b      	ldr	r3, [r7, #4]
 810210c:	685b      	ldr	r3, [r3, #4]
 810210e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8102112:	d051      	beq.n	81021b8 <ADC_ConfigureBoostMode+0x13c>
 8102114:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8102118:	d854      	bhi.n	81021c4 <ADC_ConfigureBoostMode+0x148>
 810211a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 810211e:	d047      	beq.n	81021b0 <ADC_ConfigureBoostMode+0x134>
 8102120:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8102124:	d84e      	bhi.n	81021c4 <ADC_ConfigureBoostMode+0x148>
 8102126:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 810212a:	d03d      	beq.n	81021a8 <ADC_ConfigureBoostMode+0x12c>
 810212c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8102130:	d848      	bhi.n	81021c4 <ADC_ConfigureBoostMode+0x148>
 8102132:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102136:	d033      	beq.n	81021a0 <ADC_ConfigureBoostMode+0x124>
 8102138:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810213c:	d842      	bhi.n	81021c4 <ADC_ConfigureBoostMode+0x148>
 810213e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8102142:	d029      	beq.n	8102198 <ADC_ConfigureBoostMode+0x11c>
 8102144:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8102148:	d83c      	bhi.n	81021c4 <ADC_ConfigureBoostMode+0x148>
 810214a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 810214e:	d01a      	beq.n	8102186 <ADC_ConfigureBoostMode+0x10a>
 8102150:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8102154:	d836      	bhi.n	81021c4 <ADC_ConfigureBoostMode+0x148>
 8102156:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 810215a:	d014      	beq.n	8102186 <ADC_ConfigureBoostMode+0x10a>
 810215c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8102160:	d830      	bhi.n	81021c4 <ADC_ConfigureBoostMode+0x148>
 8102162:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8102166:	d00e      	beq.n	8102186 <ADC_ConfigureBoostMode+0x10a>
 8102168:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810216c:	d82a      	bhi.n	81021c4 <ADC_ConfigureBoostMode+0x148>
 810216e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8102172:	d008      	beq.n	8102186 <ADC_ConfigureBoostMode+0x10a>
 8102174:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8102178:	d824      	bhi.n	81021c4 <ADC_ConfigureBoostMode+0x148>
 810217a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 810217e:	d002      	beq.n	8102186 <ADC_ConfigureBoostMode+0x10a>
 8102180:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8102184:	d11e      	bne.n	81021c4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8102186:	687b      	ldr	r3, [r7, #4]
 8102188:	685b      	ldr	r3, [r3, #4]
 810218a:	0c9b      	lsrs	r3, r3, #18
 810218c:	005b      	lsls	r3, r3, #1
 810218e:	68fa      	ldr	r2, [r7, #12]
 8102190:	fbb2 f3f3 	udiv	r3, r2, r3
 8102194:	60fb      	str	r3, [r7, #12]
        break;
 8102196:	e016      	b.n	81021c6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8102198:	68fb      	ldr	r3, [r7, #12]
 810219a:	091b      	lsrs	r3, r3, #4
 810219c:	60fb      	str	r3, [r7, #12]
        break;
 810219e:	e012      	b.n	81021c6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 81021a0:	68fb      	ldr	r3, [r7, #12]
 81021a2:	095b      	lsrs	r3, r3, #5
 81021a4:	60fb      	str	r3, [r7, #12]
        break;
 81021a6:	e00e      	b.n	81021c6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 81021a8:	68fb      	ldr	r3, [r7, #12]
 81021aa:	099b      	lsrs	r3, r3, #6
 81021ac:	60fb      	str	r3, [r7, #12]
        break;
 81021ae:	e00a      	b.n	81021c6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 81021b0:	68fb      	ldr	r3, [r7, #12]
 81021b2:	09db      	lsrs	r3, r3, #7
 81021b4:	60fb      	str	r3, [r7, #12]
        break;
 81021b6:	e006      	b.n	81021c6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 81021b8:	68fb      	ldr	r3, [r7, #12]
 81021ba:	0a1b      	lsrs	r3, r3, #8
 81021bc:	60fb      	str	r3, [r7, #12]
        break;
 81021be:	e002      	b.n	81021c6 <ADC_ConfigureBoostMode+0x14a>
        break;
 81021c0:	bf00      	nop
 81021c2:	e000      	b.n	81021c6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 81021c4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 81021c6:	f7ff f8b9 	bl	810133c <HAL_GetREVID>
 81021ca:	4603      	mov	r3, r0
 81021cc:	f241 0203 	movw	r2, #4099	; 0x1003
 81021d0:	4293      	cmp	r3, r2
 81021d2:	d815      	bhi.n	8102200 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 81021d4:	68fb      	ldr	r3, [r7, #12]
 81021d6:	4a2b      	ldr	r2, [pc, #172]	; (8102284 <ADC_ConfigureBoostMode+0x208>)
 81021d8:	4293      	cmp	r3, r2
 81021da:	d908      	bls.n	81021ee <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 81021dc:	687b      	ldr	r3, [r7, #4]
 81021de:	681b      	ldr	r3, [r3, #0]
 81021e0:	689a      	ldr	r2, [r3, #8]
 81021e2:	687b      	ldr	r3, [r7, #4]
 81021e4:	681b      	ldr	r3, [r3, #0]
 81021e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 81021ea:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 81021ec:	e03e      	b.n	810226c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 81021ee:	687b      	ldr	r3, [r7, #4]
 81021f0:	681b      	ldr	r3, [r3, #0]
 81021f2:	689a      	ldr	r2, [r3, #8]
 81021f4:	687b      	ldr	r3, [r7, #4]
 81021f6:	681b      	ldr	r3, [r3, #0]
 81021f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 81021fc:	609a      	str	r2, [r3, #8]
}
 81021fe:	e035      	b.n	810226c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8102200:	68fb      	ldr	r3, [r7, #12]
 8102202:	085b      	lsrs	r3, r3, #1
 8102204:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8102206:	68fb      	ldr	r3, [r7, #12]
 8102208:	4a1f      	ldr	r2, [pc, #124]	; (8102288 <ADC_ConfigureBoostMode+0x20c>)
 810220a:	4293      	cmp	r3, r2
 810220c:	d808      	bhi.n	8102220 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 810220e:	687b      	ldr	r3, [r7, #4]
 8102210:	681b      	ldr	r3, [r3, #0]
 8102212:	689a      	ldr	r2, [r3, #8]
 8102214:	687b      	ldr	r3, [r7, #4]
 8102216:	681b      	ldr	r3, [r3, #0]
 8102218:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 810221c:	609a      	str	r2, [r3, #8]
}
 810221e:	e025      	b.n	810226c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8102220:	68fb      	ldr	r3, [r7, #12]
 8102222:	4a1a      	ldr	r2, [pc, #104]	; (810228c <ADC_ConfigureBoostMode+0x210>)
 8102224:	4293      	cmp	r3, r2
 8102226:	d80a      	bhi.n	810223e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8102228:	687b      	ldr	r3, [r7, #4]
 810222a:	681b      	ldr	r3, [r3, #0]
 810222c:	689b      	ldr	r3, [r3, #8]
 810222e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8102232:	687b      	ldr	r3, [r7, #4]
 8102234:	681b      	ldr	r3, [r3, #0]
 8102236:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810223a:	609a      	str	r2, [r3, #8]
}
 810223c:	e016      	b.n	810226c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 810223e:	68fb      	ldr	r3, [r7, #12]
 8102240:	4a13      	ldr	r2, [pc, #76]	; (8102290 <ADC_ConfigureBoostMode+0x214>)
 8102242:	4293      	cmp	r3, r2
 8102244:	d80a      	bhi.n	810225c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8102246:	687b      	ldr	r3, [r7, #4]
 8102248:	681b      	ldr	r3, [r3, #0]
 810224a:	689b      	ldr	r3, [r3, #8]
 810224c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8102250:	687b      	ldr	r3, [r7, #4]
 8102252:	681b      	ldr	r3, [r3, #0]
 8102254:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8102258:	609a      	str	r2, [r3, #8]
}
 810225a:	e007      	b.n	810226c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 810225c:	687b      	ldr	r3, [r7, #4]
 810225e:	681b      	ldr	r3, [r3, #0]
 8102260:	689a      	ldr	r2, [r3, #8]
 8102262:	687b      	ldr	r3, [r7, #4]
 8102264:	681b      	ldr	r3, [r3, #0]
 8102266:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 810226a:	609a      	str	r2, [r3, #8]
}
 810226c:	bf00      	nop
 810226e:	3710      	adds	r7, #16
 8102270:	46bd      	mov	sp, r7
 8102272:	bd80      	pop	{r7, pc}
 8102274:	40022000 	.word	0x40022000
 8102278:	40022100 	.word	0x40022100
 810227c:	40022300 	.word	0x40022300
 8102280:	58026300 	.word	0x58026300
 8102284:	01312d00 	.word	0x01312d00
 8102288:	005f5e10 	.word	0x005f5e10
 810228c:	00bebc20 	.word	0x00bebc20
 8102290:	017d7840 	.word	0x017d7840

08102294 <LL_ADC_IsEnabled>:
{
 8102294:	b480      	push	{r7}
 8102296:	b083      	sub	sp, #12
 8102298:	af00      	add	r7, sp, #0
 810229a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 810229c:	687b      	ldr	r3, [r7, #4]
 810229e:	689b      	ldr	r3, [r3, #8]
 81022a0:	f003 0301 	and.w	r3, r3, #1
 81022a4:	2b01      	cmp	r3, #1
 81022a6:	d101      	bne.n	81022ac <LL_ADC_IsEnabled+0x18>
 81022a8:	2301      	movs	r3, #1
 81022aa:	e000      	b.n	81022ae <LL_ADC_IsEnabled+0x1a>
 81022ac:	2300      	movs	r3, #0
}
 81022ae:	4618      	mov	r0, r3
 81022b0:	370c      	adds	r7, #12
 81022b2:	46bd      	mov	sp, r7
 81022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022b8:	4770      	bx	lr

081022ba <LL_ADC_REG_IsConversionOngoing>:
{
 81022ba:	b480      	push	{r7}
 81022bc:	b083      	sub	sp, #12
 81022be:	af00      	add	r7, sp, #0
 81022c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 81022c2:	687b      	ldr	r3, [r7, #4]
 81022c4:	689b      	ldr	r3, [r3, #8]
 81022c6:	f003 0304 	and.w	r3, r3, #4
 81022ca:	2b04      	cmp	r3, #4
 81022cc:	d101      	bne.n	81022d2 <LL_ADC_REG_IsConversionOngoing+0x18>
 81022ce:	2301      	movs	r3, #1
 81022d0:	e000      	b.n	81022d4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 81022d2:	2300      	movs	r3, #0
}
 81022d4:	4618      	mov	r0, r3
 81022d6:	370c      	adds	r7, #12
 81022d8:	46bd      	mov	sp, r7
 81022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022de:	4770      	bx	lr

081022e0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 81022e0:	b590      	push	{r4, r7, lr}
 81022e2:	b09f      	sub	sp, #124	; 0x7c
 81022e4:	af00      	add	r7, sp, #0
 81022e6:	6078      	str	r0, [r7, #4]
 81022e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 81022ea:	2300      	movs	r3, #0
 81022ec:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 81022f0:	687b      	ldr	r3, [r7, #4]
 81022f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 81022f6:	2b01      	cmp	r3, #1
 81022f8:	d101      	bne.n	81022fe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 81022fa:	2302      	movs	r3, #2
 81022fc:	e0c4      	b.n	8102488 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
 81022fe:	687b      	ldr	r3, [r7, #4]
 8102300:	2201      	movs	r2, #1
 8102302:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8102306:	2300      	movs	r3, #0
 8102308:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 810230a:	2300      	movs	r3, #0
 810230c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 810230e:	687b      	ldr	r3, [r7, #4]
 8102310:	681b      	ldr	r3, [r3, #0]
 8102312:	4a5f      	ldr	r2, [pc, #380]	; (8102490 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8102314:	4293      	cmp	r3, r2
 8102316:	d102      	bne.n	810231e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8102318:	4b5e      	ldr	r3, [pc, #376]	; (8102494 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 810231a:	60bb      	str	r3, [r7, #8]
 810231c:	e001      	b.n	8102322 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 810231e:	2300      	movs	r3, #0
 8102320:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8102322:	68bb      	ldr	r3, [r7, #8]
 8102324:	2b00      	cmp	r3, #0
 8102326:	d10b      	bne.n	8102340 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8102328:	687b      	ldr	r3, [r7, #4]
 810232a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810232c:	f043 0220 	orr.w	r2, r3, #32
 8102330:	687b      	ldr	r3, [r7, #4]
 8102332:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8102334:	687b      	ldr	r3, [r7, #4]
 8102336:	2200      	movs	r2, #0
 8102338:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 810233c:	2301      	movs	r3, #1
 810233e:	e0a3      	b.n	8102488 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8102340:	68bb      	ldr	r3, [r7, #8]
 8102342:	4618      	mov	r0, r3
 8102344:	f7ff ffb9 	bl	81022ba <LL_ADC_REG_IsConversionOngoing>
 8102348:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 810234a:	687b      	ldr	r3, [r7, #4]
 810234c:	681b      	ldr	r3, [r3, #0]
 810234e:	4618      	mov	r0, r3
 8102350:	f7ff ffb3 	bl	81022ba <LL_ADC_REG_IsConversionOngoing>
 8102354:	4603      	mov	r3, r0
 8102356:	2b00      	cmp	r3, #0
 8102358:	f040 8085 	bne.w	8102466 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      && (tmphadcSlave_conversion_on_going == 0UL))
 810235c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 810235e:	2b00      	cmp	r3, #0
 8102360:	f040 8081 	bne.w	8102466 <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8102364:	687b      	ldr	r3, [r7, #4]
 8102366:	681b      	ldr	r3, [r3, #0]
 8102368:	4a49      	ldr	r2, [pc, #292]	; (8102490 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 810236a:	4293      	cmp	r3, r2
 810236c:	d004      	beq.n	8102378 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 810236e:	687b      	ldr	r3, [r7, #4]
 8102370:	681b      	ldr	r3, [r3, #0]
 8102372:	4a48      	ldr	r2, [pc, #288]	; (8102494 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8102374:	4293      	cmp	r3, r2
 8102376:	d101      	bne.n	810237c <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8102378:	4b47      	ldr	r3, [pc, #284]	; (8102498 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 810237a:	e000      	b.n	810237e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 810237c:	4b47      	ldr	r3, [pc, #284]	; (810249c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 810237e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8102380:	683b      	ldr	r3, [r7, #0]
 8102382:	681b      	ldr	r3, [r3, #0]
 8102384:	2b00      	cmp	r3, #0
 8102386:	d03b      	beq.n	8102400 <HAL_ADCEx_MultiModeConfigChannel+0x120>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8102388:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810238a:	689b      	ldr	r3, [r3, #8]
 810238c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8102390:	683b      	ldr	r3, [r7, #0]
 8102392:	685b      	ldr	r3, [r3, #4]
 8102394:	431a      	orrs	r2, r3
 8102396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102398:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 810239a:	687b      	ldr	r3, [r7, #4]
 810239c:	681b      	ldr	r3, [r3, #0]
 810239e:	4a3c      	ldr	r2, [pc, #240]	; (8102490 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81023a0:	4293      	cmp	r3, r2
 81023a2:	d004      	beq.n	81023ae <HAL_ADCEx_MultiModeConfigChannel+0xce>
 81023a4:	687b      	ldr	r3, [r7, #4]
 81023a6:	681b      	ldr	r3, [r3, #0]
 81023a8:	4a3a      	ldr	r2, [pc, #232]	; (8102494 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81023aa:	4293      	cmp	r3, r2
 81023ac:	d10e      	bne.n	81023cc <HAL_ADCEx_MultiModeConfigChannel+0xec>
 81023ae:	4838      	ldr	r0, [pc, #224]	; (8102490 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81023b0:	f7ff ff70 	bl	8102294 <LL_ADC_IsEnabled>
 81023b4:	4604      	mov	r4, r0
 81023b6:	4837      	ldr	r0, [pc, #220]	; (8102494 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81023b8:	f7ff ff6c 	bl	8102294 <LL_ADC_IsEnabled>
 81023bc:	4603      	mov	r3, r0
 81023be:	4323      	orrs	r3, r4
 81023c0:	2b00      	cmp	r3, #0
 81023c2:	bf0c      	ite	eq
 81023c4:	2301      	moveq	r3, #1
 81023c6:	2300      	movne	r3, #0
 81023c8:	b2db      	uxtb	r3, r3
 81023ca:	e008      	b.n	81023de <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 81023cc:	4834      	ldr	r0, [pc, #208]	; (81024a0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 81023ce:	f7ff ff61 	bl	8102294 <LL_ADC_IsEnabled>
 81023d2:	4603      	mov	r3, r0
 81023d4:	2b00      	cmp	r3, #0
 81023d6:	bf0c      	ite	eq
 81023d8:	2301      	moveq	r3, #1
 81023da:	2300      	movne	r3, #0
 81023dc:	b2db      	uxtb	r3, r3
 81023de:	2b00      	cmp	r3, #0
 81023e0:	d04b      	beq.n	810247a <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 81023e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81023e4:	689b      	ldr	r3, [r3, #8]
 81023e6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 81023ea:	f023 030f 	bic.w	r3, r3, #15
 81023ee:	683a      	ldr	r2, [r7, #0]
 81023f0:	6811      	ldr	r1, [r2, #0]
 81023f2:	683a      	ldr	r2, [r7, #0]
 81023f4:	6892      	ldr	r2, [r2, #8]
 81023f6:	430a      	orrs	r2, r1
 81023f8:	431a      	orrs	r2, r3
 81023fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81023fc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81023fe:	e03c      	b.n	810247a <HAL_ADCEx_MultiModeConfigChannel+0x19a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8102400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102402:	689b      	ldr	r3, [r3, #8]
 8102404:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8102408:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810240a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 810240c:	687b      	ldr	r3, [r7, #4]
 810240e:	681b      	ldr	r3, [r3, #0]
 8102410:	4a1f      	ldr	r2, [pc, #124]	; (8102490 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8102412:	4293      	cmp	r3, r2
 8102414:	d004      	beq.n	8102420 <HAL_ADCEx_MultiModeConfigChannel+0x140>
 8102416:	687b      	ldr	r3, [r7, #4]
 8102418:	681b      	ldr	r3, [r3, #0]
 810241a:	4a1e      	ldr	r2, [pc, #120]	; (8102494 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 810241c:	4293      	cmp	r3, r2
 810241e:	d10e      	bne.n	810243e <HAL_ADCEx_MultiModeConfigChannel+0x15e>
 8102420:	481b      	ldr	r0, [pc, #108]	; (8102490 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8102422:	f7ff ff37 	bl	8102294 <LL_ADC_IsEnabled>
 8102426:	4604      	mov	r4, r0
 8102428:	481a      	ldr	r0, [pc, #104]	; (8102494 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 810242a:	f7ff ff33 	bl	8102294 <LL_ADC_IsEnabled>
 810242e:	4603      	mov	r3, r0
 8102430:	4323      	orrs	r3, r4
 8102432:	2b00      	cmp	r3, #0
 8102434:	bf0c      	ite	eq
 8102436:	2301      	moveq	r3, #1
 8102438:	2300      	movne	r3, #0
 810243a:	b2db      	uxtb	r3, r3
 810243c:	e008      	b.n	8102450 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 810243e:	4818      	ldr	r0, [pc, #96]	; (81024a0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8102440:	f7ff ff28 	bl	8102294 <LL_ADC_IsEnabled>
 8102444:	4603      	mov	r3, r0
 8102446:	2b00      	cmp	r3, #0
 8102448:	bf0c      	ite	eq
 810244a:	2301      	moveq	r3, #1
 810244c:	2300      	movne	r3, #0
 810244e:	b2db      	uxtb	r3, r3
 8102450:	2b00      	cmp	r3, #0
 8102452:	d012      	beq.n	810247a <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8102454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102456:	689b      	ldr	r3, [r3, #8]
 8102458:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 810245c:	f023 030f 	bic.w	r3, r3, #15
 8102460:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8102462:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8102464:	e009      	b.n	810247a <HAL_ADCEx_MultiModeConfigChannel+0x19a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8102466:	687b      	ldr	r3, [r7, #4]
 8102468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810246a:	f043 0220 	orr.w	r2, r3, #32
 810246e:	687b      	ldr	r3, [r7, #4]
 8102470:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8102472:	2301      	movs	r3, #1
 8102474:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8102478:	e000      	b.n	810247c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 810247a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 810247c:	687b      	ldr	r3, [r7, #4]
 810247e:	2200      	movs	r2, #0
 8102480:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8102484:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8102488:	4618      	mov	r0, r3
 810248a:	377c      	adds	r7, #124	; 0x7c
 810248c:	46bd      	mov	sp, r7
 810248e:	bd90      	pop	{r4, r7, pc}
 8102490:	40022000 	.word	0x40022000
 8102494:	40022100 	.word	0x40022100
 8102498:	40022300 	.word	0x40022300
 810249c:	58026300 	.word	0x58026300
 81024a0:	58026000 	.word	0x58026000

081024a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81024a4:	b480      	push	{r7}
 81024a6:	b085      	sub	sp, #20
 81024a8:	af00      	add	r7, sp, #0
 81024aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81024ac:	687b      	ldr	r3, [r7, #4]
 81024ae:	f003 0307 	and.w	r3, r3, #7
 81024b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81024b4:	4b0c      	ldr	r3, [pc, #48]	; (81024e8 <__NVIC_SetPriorityGrouping+0x44>)
 81024b6:	68db      	ldr	r3, [r3, #12]
 81024b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81024ba:	68ba      	ldr	r2, [r7, #8]
 81024bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 81024c0:	4013      	ands	r3, r2
 81024c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81024c4:	68fb      	ldr	r3, [r7, #12]
 81024c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81024c8:	68bb      	ldr	r3, [r7, #8]
 81024ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81024cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 81024d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81024d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81024d6:	4a04      	ldr	r2, [pc, #16]	; (81024e8 <__NVIC_SetPriorityGrouping+0x44>)
 81024d8:	68bb      	ldr	r3, [r7, #8]
 81024da:	60d3      	str	r3, [r2, #12]
}
 81024dc:	bf00      	nop
 81024de:	3714      	adds	r7, #20
 81024e0:	46bd      	mov	sp, r7
 81024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81024e6:	4770      	bx	lr
 81024e8:	e000ed00 	.word	0xe000ed00

081024ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81024ec:	b480      	push	{r7}
 81024ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81024f0:	4b04      	ldr	r3, [pc, #16]	; (8102504 <__NVIC_GetPriorityGrouping+0x18>)
 81024f2:	68db      	ldr	r3, [r3, #12]
 81024f4:	0a1b      	lsrs	r3, r3, #8
 81024f6:	f003 0307 	and.w	r3, r3, #7
}
 81024fa:	4618      	mov	r0, r3
 81024fc:	46bd      	mov	sp, r7
 81024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102502:	4770      	bx	lr
 8102504:	e000ed00 	.word	0xe000ed00

08102508 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8102508:	b480      	push	{r7}
 810250a:	b083      	sub	sp, #12
 810250c:	af00      	add	r7, sp, #0
 810250e:	4603      	mov	r3, r0
 8102510:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102512:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102516:	2b00      	cmp	r3, #0
 8102518:	db0b      	blt.n	8102532 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 810251a:	88fb      	ldrh	r3, [r7, #6]
 810251c:	f003 021f 	and.w	r2, r3, #31
 8102520:	4907      	ldr	r1, [pc, #28]	; (8102540 <__NVIC_EnableIRQ+0x38>)
 8102522:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102526:	095b      	lsrs	r3, r3, #5
 8102528:	2001      	movs	r0, #1
 810252a:	fa00 f202 	lsl.w	r2, r0, r2
 810252e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8102532:	bf00      	nop
 8102534:	370c      	adds	r7, #12
 8102536:	46bd      	mov	sp, r7
 8102538:	f85d 7b04 	ldr.w	r7, [sp], #4
 810253c:	4770      	bx	lr
 810253e:	bf00      	nop
 8102540:	e000e100 	.word	0xe000e100

08102544 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8102544:	b480      	push	{r7}
 8102546:	b083      	sub	sp, #12
 8102548:	af00      	add	r7, sp, #0
 810254a:	4603      	mov	r3, r0
 810254c:	6039      	str	r1, [r7, #0]
 810254e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102550:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102554:	2b00      	cmp	r3, #0
 8102556:	db0a      	blt.n	810256e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102558:	683b      	ldr	r3, [r7, #0]
 810255a:	b2da      	uxtb	r2, r3
 810255c:	490c      	ldr	r1, [pc, #48]	; (8102590 <__NVIC_SetPriority+0x4c>)
 810255e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102562:	0112      	lsls	r2, r2, #4
 8102564:	b2d2      	uxtb	r2, r2
 8102566:	440b      	add	r3, r1
 8102568:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 810256c:	e00a      	b.n	8102584 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810256e:	683b      	ldr	r3, [r7, #0]
 8102570:	b2da      	uxtb	r2, r3
 8102572:	4908      	ldr	r1, [pc, #32]	; (8102594 <__NVIC_SetPriority+0x50>)
 8102574:	88fb      	ldrh	r3, [r7, #6]
 8102576:	f003 030f 	and.w	r3, r3, #15
 810257a:	3b04      	subs	r3, #4
 810257c:	0112      	lsls	r2, r2, #4
 810257e:	b2d2      	uxtb	r2, r2
 8102580:	440b      	add	r3, r1
 8102582:	761a      	strb	r2, [r3, #24]
}
 8102584:	bf00      	nop
 8102586:	370c      	adds	r7, #12
 8102588:	46bd      	mov	sp, r7
 810258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810258e:	4770      	bx	lr
 8102590:	e000e100 	.word	0xe000e100
 8102594:	e000ed00 	.word	0xe000ed00

08102598 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102598:	b480      	push	{r7}
 810259a:	b089      	sub	sp, #36	; 0x24
 810259c:	af00      	add	r7, sp, #0
 810259e:	60f8      	str	r0, [r7, #12]
 81025a0:	60b9      	str	r1, [r7, #8]
 81025a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81025a4:	68fb      	ldr	r3, [r7, #12]
 81025a6:	f003 0307 	and.w	r3, r3, #7
 81025aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81025ac:	69fb      	ldr	r3, [r7, #28]
 81025ae:	f1c3 0307 	rsb	r3, r3, #7
 81025b2:	2b04      	cmp	r3, #4
 81025b4:	bf28      	it	cs
 81025b6:	2304      	movcs	r3, #4
 81025b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81025ba:	69fb      	ldr	r3, [r7, #28]
 81025bc:	3304      	adds	r3, #4
 81025be:	2b06      	cmp	r3, #6
 81025c0:	d902      	bls.n	81025c8 <NVIC_EncodePriority+0x30>
 81025c2:	69fb      	ldr	r3, [r7, #28]
 81025c4:	3b03      	subs	r3, #3
 81025c6:	e000      	b.n	81025ca <NVIC_EncodePriority+0x32>
 81025c8:	2300      	movs	r3, #0
 81025ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81025cc:	f04f 32ff 	mov.w	r2, #4294967295
 81025d0:	69bb      	ldr	r3, [r7, #24]
 81025d2:	fa02 f303 	lsl.w	r3, r2, r3
 81025d6:	43da      	mvns	r2, r3
 81025d8:	68bb      	ldr	r3, [r7, #8]
 81025da:	401a      	ands	r2, r3
 81025dc:	697b      	ldr	r3, [r7, #20]
 81025de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81025e0:	f04f 31ff 	mov.w	r1, #4294967295
 81025e4:	697b      	ldr	r3, [r7, #20]
 81025e6:	fa01 f303 	lsl.w	r3, r1, r3
 81025ea:	43d9      	mvns	r1, r3
 81025ec:	687b      	ldr	r3, [r7, #4]
 81025ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81025f0:	4313      	orrs	r3, r2
         );
}
 81025f2:	4618      	mov	r0, r3
 81025f4:	3724      	adds	r7, #36	; 0x24
 81025f6:	46bd      	mov	sp, r7
 81025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025fc:	4770      	bx	lr
	...

08102600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8102600:	b580      	push	{r7, lr}
 8102602:	b082      	sub	sp, #8
 8102604:	af00      	add	r7, sp, #0
 8102606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8102608:	687b      	ldr	r3, [r7, #4]
 810260a:	3b01      	subs	r3, #1
 810260c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8102610:	d301      	bcc.n	8102616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8102612:	2301      	movs	r3, #1
 8102614:	e00f      	b.n	8102636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8102616:	4a0a      	ldr	r2, [pc, #40]	; (8102640 <SysTick_Config+0x40>)
 8102618:	687b      	ldr	r3, [r7, #4]
 810261a:	3b01      	subs	r3, #1
 810261c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 810261e:	210f      	movs	r1, #15
 8102620:	f04f 30ff 	mov.w	r0, #4294967295
 8102624:	f7ff ff8e 	bl	8102544 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8102628:	4b05      	ldr	r3, [pc, #20]	; (8102640 <SysTick_Config+0x40>)
 810262a:	2200      	movs	r2, #0
 810262c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 810262e:	4b04      	ldr	r3, [pc, #16]	; (8102640 <SysTick_Config+0x40>)
 8102630:	2207      	movs	r2, #7
 8102632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8102634:	2300      	movs	r3, #0
}
 8102636:	4618      	mov	r0, r3
 8102638:	3708      	adds	r7, #8
 810263a:	46bd      	mov	sp, r7
 810263c:	bd80      	pop	{r7, pc}
 810263e:	bf00      	nop
 8102640:	e000e010 	.word	0xe000e010

08102644 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102644:	b580      	push	{r7, lr}
 8102646:	b082      	sub	sp, #8
 8102648:	af00      	add	r7, sp, #0
 810264a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 810264c:	6878      	ldr	r0, [r7, #4]
 810264e:	f7ff ff29 	bl	81024a4 <__NVIC_SetPriorityGrouping>
}
 8102652:	bf00      	nop
 8102654:	3708      	adds	r7, #8
 8102656:	46bd      	mov	sp, r7
 8102658:	bd80      	pop	{r7, pc}

0810265a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810265a:	b580      	push	{r7, lr}
 810265c:	b086      	sub	sp, #24
 810265e:	af00      	add	r7, sp, #0
 8102660:	4603      	mov	r3, r0
 8102662:	60b9      	str	r1, [r7, #8]
 8102664:	607a      	str	r2, [r7, #4]
 8102666:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8102668:	f7ff ff40 	bl	81024ec <__NVIC_GetPriorityGrouping>
 810266c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 810266e:	687a      	ldr	r2, [r7, #4]
 8102670:	68b9      	ldr	r1, [r7, #8]
 8102672:	6978      	ldr	r0, [r7, #20]
 8102674:	f7ff ff90 	bl	8102598 <NVIC_EncodePriority>
 8102678:	4602      	mov	r2, r0
 810267a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810267e:	4611      	mov	r1, r2
 8102680:	4618      	mov	r0, r3
 8102682:	f7ff ff5f 	bl	8102544 <__NVIC_SetPriority>
}
 8102686:	bf00      	nop
 8102688:	3718      	adds	r7, #24
 810268a:	46bd      	mov	sp, r7
 810268c:	bd80      	pop	{r7, pc}

0810268e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810268e:	b580      	push	{r7, lr}
 8102690:	b082      	sub	sp, #8
 8102692:	af00      	add	r7, sp, #0
 8102694:	4603      	mov	r3, r0
 8102696:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8102698:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810269c:	4618      	mov	r0, r3
 810269e:	f7ff ff33 	bl	8102508 <__NVIC_EnableIRQ>
}
 81026a2:	bf00      	nop
 81026a4:	3708      	adds	r7, #8
 81026a6:	46bd      	mov	sp, r7
 81026a8:	bd80      	pop	{r7, pc}

081026aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 81026aa:	b580      	push	{r7, lr}
 81026ac:	b082      	sub	sp, #8
 81026ae:	af00      	add	r7, sp, #0
 81026b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 81026b2:	6878      	ldr	r0, [r7, #4]
 81026b4:	f7ff ffa4 	bl	8102600 <SysTick_Config>
 81026b8:	4603      	mov	r3, r0
}
 81026ba:	4618      	mov	r0, r3
 81026bc:	3708      	adds	r7, #8
 81026be:	46bd      	mov	sp, r7
 81026c0:	bd80      	pop	{r7, pc}
	...

081026c4 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81026c4:	b480      	push	{r7}
 81026c6:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81026c8:	4b07      	ldr	r3, [pc, #28]	; (81026e8 <HAL_GetCurrentCPUID+0x24>)
 81026ca:	681b      	ldr	r3, [r3, #0]
 81026cc:	091b      	lsrs	r3, r3, #4
 81026ce:	f003 030f 	and.w	r3, r3, #15
 81026d2:	2b07      	cmp	r3, #7
 81026d4:	d101      	bne.n	81026da <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81026d6:	2303      	movs	r3, #3
 81026d8:	e000      	b.n	81026dc <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81026da:	2301      	movs	r3, #1
  }
}
 81026dc:	4618      	mov	r0, r3
 81026de:	46bd      	mov	sp, r7
 81026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81026e4:	4770      	bx	lr
 81026e6:	bf00      	nop
 81026e8:	e000ed00 	.word	0xe000ed00

081026ec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 81026ec:	b580      	push	{r7, lr}
 81026ee:	b086      	sub	sp, #24
 81026f0:	af00      	add	r7, sp, #0
 81026f2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 81026f4:	f7fe fe16 	bl	8101324 <HAL_GetTick>
 81026f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 81026fa:	687b      	ldr	r3, [r7, #4]
 81026fc:	2b00      	cmp	r3, #0
 81026fe:	d101      	bne.n	8102704 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8102700:	2301      	movs	r3, #1
 8102702:	e314      	b.n	8102d2e <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8102704:	687b      	ldr	r3, [r7, #4]
 8102706:	681b      	ldr	r3, [r3, #0]
 8102708:	4a66      	ldr	r2, [pc, #408]	; (81028a4 <HAL_DMA_Init+0x1b8>)
 810270a:	4293      	cmp	r3, r2
 810270c:	d04a      	beq.n	81027a4 <HAL_DMA_Init+0xb8>
 810270e:	687b      	ldr	r3, [r7, #4]
 8102710:	681b      	ldr	r3, [r3, #0]
 8102712:	4a65      	ldr	r2, [pc, #404]	; (81028a8 <HAL_DMA_Init+0x1bc>)
 8102714:	4293      	cmp	r3, r2
 8102716:	d045      	beq.n	81027a4 <HAL_DMA_Init+0xb8>
 8102718:	687b      	ldr	r3, [r7, #4]
 810271a:	681b      	ldr	r3, [r3, #0]
 810271c:	4a63      	ldr	r2, [pc, #396]	; (81028ac <HAL_DMA_Init+0x1c0>)
 810271e:	4293      	cmp	r3, r2
 8102720:	d040      	beq.n	81027a4 <HAL_DMA_Init+0xb8>
 8102722:	687b      	ldr	r3, [r7, #4]
 8102724:	681b      	ldr	r3, [r3, #0]
 8102726:	4a62      	ldr	r2, [pc, #392]	; (81028b0 <HAL_DMA_Init+0x1c4>)
 8102728:	4293      	cmp	r3, r2
 810272a:	d03b      	beq.n	81027a4 <HAL_DMA_Init+0xb8>
 810272c:	687b      	ldr	r3, [r7, #4]
 810272e:	681b      	ldr	r3, [r3, #0]
 8102730:	4a60      	ldr	r2, [pc, #384]	; (81028b4 <HAL_DMA_Init+0x1c8>)
 8102732:	4293      	cmp	r3, r2
 8102734:	d036      	beq.n	81027a4 <HAL_DMA_Init+0xb8>
 8102736:	687b      	ldr	r3, [r7, #4]
 8102738:	681b      	ldr	r3, [r3, #0]
 810273a:	4a5f      	ldr	r2, [pc, #380]	; (81028b8 <HAL_DMA_Init+0x1cc>)
 810273c:	4293      	cmp	r3, r2
 810273e:	d031      	beq.n	81027a4 <HAL_DMA_Init+0xb8>
 8102740:	687b      	ldr	r3, [r7, #4]
 8102742:	681b      	ldr	r3, [r3, #0]
 8102744:	4a5d      	ldr	r2, [pc, #372]	; (81028bc <HAL_DMA_Init+0x1d0>)
 8102746:	4293      	cmp	r3, r2
 8102748:	d02c      	beq.n	81027a4 <HAL_DMA_Init+0xb8>
 810274a:	687b      	ldr	r3, [r7, #4]
 810274c:	681b      	ldr	r3, [r3, #0]
 810274e:	4a5c      	ldr	r2, [pc, #368]	; (81028c0 <HAL_DMA_Init+0x1d4>)
 8102750:	4293      	cmp	r3, r2
 8102752:	d027      	beq.n	81027a4 <HAL_DMA_Init+0xb8>
 8102754:	687b      	ldr	r3, [r7, #4]
 8102756:	681b      	ldr	r3, [r3, #0]
 8102758:	4a5a      	ldr	r2, [pc, #360]	; (81028c4 <HAL_DMA_Init+0x1d8>)
 810275a:	4293      	cmp	r3, r2
 810275c:	d022      	beq.n	81027a4 <HAL_DMA_Init+0xb8>
 810275e:	687b      	ldr	r3, [r7, #4]
 8102760:	681b      	ldr	r3, [r3, #0]
 8102762:	4a59      	ldr	r2, [pc, #356]	; (81028c8 <HAL_DMA_Init+0x1dc>)
 8102764:	4293      	cmp	r3, r2
 8102766:	d01d      	beq.n	81027a4 <HAL_DMA_Init+0xb8>
 8102768:	687b      	ldr	r3, [r7, #4]
 810276a:	681b      	ldr	r3, [r3, #0]
 810276c:	4a57      	ldr	r2, [pc, #348]	; (81028cc <HAL_DMA_Init+0x1e0>)
 810276e:	4293      	cmp	r3, r2
 8102770:	d018      	beq.n	81027a4 <HAL_DMA_Init+0xb8>
 8102772:	687b      	ldr	r3, [r7, #4]
 8102774:	681b      	ldr	r3, [r3, #0]
 8102776:	4a56      	ldr	r2, [pc, #344]	; (81028d0 <HAL_DMA_Init+0x1e4>)
 8102778:	4293      	cmp	r3, r2
 810277a:	d013      	beq.n	81027a4 <HAL_DMA_Init+0xb8>
 810277c:	687b      	ldr	r3, [r7, #4]
 810277e:	681b      	ldr	r3, [r3, #0]
 8102780:	4a54      	ldr	r2, [pc, #336]	; (81028d4 <HAL_DMA_Init+0x1e8>)
 8102782:	4293      	cmp	r3, r2
 8102784:	d00e      	beq.n	81027a4 <HAL_DMA_Init+0xb8>
 8102786:	687b      	ldr	r3, [r7, #4]
 8102788:	681b      	ldr	r3, [r3, #0]
 810278a:	4a53      	ldr	r2, [pc, #332]	; (81028d8 <HAL_DMA_Init+0x1ec>)
 810278c:	4293      	cmp	r3, r2
 810278e:	d009      	beq.n	81027a4 <HAL_DMA_Init+0xb8>
 8102790:	687b      	ldr	r3, [r7, #4]
 8102792:	681b      	ldr	r3, [r3, #0]
 8102794:	4a51      	ldr	r2, [pc, #324]	; (81028dc <HAL_DMA_Init+0x1f0>)
 8102796:	4293      	cmp	r3, r2
 8102798:	d004      	beq.n	81027a4 <HAL_DMA_Init+0xb8>
 810279a:	687b      	ldr	r3, [r7, #4]
 810279c:	681b      	ldr	r3, [r3, #0]
 810279e:	4a50      	ldr	r2, [pc, #320]	; (81028e0 <HAL_DMA_Init+0x1f4>)
 81027a0:	4293      	cmp	r3, r2
 81027a2:	d101      	bne.n	81027a8 <HAL_DMA_Init+0xbc>
 81027a4:	2301      	movs	r3, #1
 81027a6:	e000      	b.n	81027aa <HAL_DMA_Init+0xbe>
 81027a8:	2300      	movs	r3, #0
 81027aa:	2b00      	cmp	r3, #0
 81027ac:	f000 813b 	beq.w	8102a26 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 81027b0:	687b      	ldr	r3, [r7, #4]
 81027b2:	2202      	movs	r2, #2
 81027b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 81027b8:	687b      	ldr	r3, [r7, #4]
 81027ba:	2200      	movs	r2, #0
 81027bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 81027c0:	687b      	ldr	r3, [r7, #4]
 81027c2:	681b      	ldr	r3, [r3, #0]
 81027c4:	4a37      	ldr	r2, [pc, #220]	; (81028a4 <HAL_DMA_Init+0x1b8>)
 81027c6:	4293      	cmp	r3, r2
 81027c8:	d04a      	beq.n	8102860 <HAL_DMA_Init+0x174>
 81027ca:	687b      	ldr	r3, [r7, #4]
 81027cc:	681b      	ldr	r3, [r3, #0]
 81027ce:	4a36      	ldr	r2, [pc, #216]	; (81028a8 <HAL_DMA_Init+0x1bc>)
 81027d0:	4293      	cmp	r3, r2
 81027d2:	d045      	beq.n	8102860 <HAL_DMA_Init+0x174>
 81027d4:	687b      	ldr	r3, [r7, #4]
 81027d6:	681b      	ldr	r3, [r3, #0]
 81027d8:	4a34      	ldr	r2, [pc, #208]	; (81028ac <HAL_DMA_Init+0x1c0>)
 81027da:	4293      	cmp	r3, r2
 81027dc:	d040      	beq.n	8102860 <HAL_DMA_Init+0x174>
 81027de:	687b      	ldr	r3, [r7, #4]
 81027e0:	681b      	ldr	r3, [r3, #0]
 81027e2:	4a33      	ldr	r2, [pc, #204]	; (81028b0 <HAL_DMA_Init+0x1c4>)
 81027e4:	4293      	cmp	r3, r2
 81027e6:	d03b      	beq.n	8102860 <HAL_DMA_Init+0x174>
 81027e8:	687b      	ldr	r3, [r7, #4]
 81027ea:	681b      	ldr	r3, [r3, #0]
 81027ec:	4a31      	ldr	r2, [pc, #196]	; (81028b4 <HAL_DMA_Init+0x1c8>)
 81027ee:	4293      	cmp	r3, r2
 81027f0:	d036      	beq.n	8102860 <HAL_DMA_Init+0x174>
 81027f2:	687b      	ldr	r3, [r7, #4]
 81027f4:	681b      	ldr	r3, [r3, #0]
 81027f6:	4a30      	ldr	r2, [pc, #192]	; (81028b8 <HAL_DMA_Init+0x1cc>)
 81027f8:	4293      	cmp	r3, r2
 81027fa:	d031      	beq.n	8102860 <HAL_DMA_Init+0x174>
 81027fc:	687b      	ldr	r3, [r7, #4]
 81027fe:	681b      	ldr	r3, [r3, #0]
 8102800:	4a2e      	ldr	r2, [pc, #184]	; (81028bc <HAL_DMA_Init+0x1d0>)
 8102802:	4293      	cmp	r3, r2
 8102804:	d02c      	beq.n	8102860 <HAL_DMA_Init+0x174>
 8102806:	687b      	ldr	r3, [r7, #4]
 8102808:	681b      	ldr	r3, [r3, #0]
 810280a:	4a2d      	ldr	r2, [pc, #180]	; (81028c0 <HAL_DMA_Init+0x1d4>)
 810280c:	4293      	cmp	r3, r2
 810280e:	d027      	beq.n	8102860 <HAL_DMA_Init+0x174>
 8102810:	687b      	ldr	r3, [r7, #4]
 8102812:	681b      	ldr	r3, [r3, #0]
 8102814:	4a2b      	ldr	r2, [pc, #172]	; (81028c4 <HAL_DMA_Init+0x1d8>)
 8102816:	4293      	cmp	r3, r2
 8102818:	d022      	beq.n	8102860 <HAL_DMA_Init+0x174>
 810281a:	687b      	ldr	r3, [r7, #4]
 810281c:	681b      	ldr	r3, [r3, #0]
 810281e:	4a2a      	ldr	r2, [pc, #168]	; (81028c8 <HAL_DMA_Init+0x1dc>)
 8102820:	4293      	cmp	r3, r2
 8102822:	d01d      	beq.n	8102860 <HAL_DMA_Init+0x174>
 8102824:	687b      	ldr	r3, [r7, #4]
 8102826:	681b      	ldr	r3, [r3, #0]
 8102828:	4a28      	ldr	r2, [pc, #160]	; (81028cc <HAL_DMA_Init+0x1e0>)
 810282a:	4293      	cmp	r3, r2
 810282c:	d018      	beq.n	8102860 <HAL_DMA_Init+0x174>
 810282e:	687b      	ldr	r3, [r7, #4]
 8102830:	681b      	ldr	r3, [r3, #0]
 8102832:	4a27      	ldr	r2, [pc, #156]	; (81028d0 <HAL_DMA_Init+0x1e4>)
 8102834:	4293      	cmp	r3, r2
 8102836:	d013      	beq.n	8102860 <HAL_DMA_Init+0x174>
 8102838:	687b      	ldr	r3, [r7, #4]
 810283a:	681b      	ldr	r3, [r3, #0]
 810283c:	4a25      	ldr	r2, [pc, #148]	; (81028d4 <HAL_DMA_Init+0x1e8>)
 810283e:	4293      	cmp	r3, r2
 8102840:	d00e      	beq.n	8102860 <HAL_DMA_Init+0x174>
 8102842:	687b      	ldr	r3, [r7, #4]
 8102844:	681b      	ldr	r3, [r3, #0]
 8102846:	4a24      	ldr	r2, [pc, #144]	; (81028d8 <HAL_DMA_Init+0x1ec>)
 8102848:	4293      	cmp	r3, r2
 810284a:	d009      	beq.n	8102860 <HAL_DMA_Init+0x174>
 810284c:	687b      	ldr	r3, [r7, #4]
 810284e:	681b      	ldr	r3, [r3, #0]
 8102850:	4a22      	ldr	r2, [pc, #136]	; (81028dc <HAL_DMA_Init+0x1f0>)
 8102852:	4293      	cmp	r3, r2
 8102854:	d004      	beq.n	8102860 <HAL_DMA_Init+0x174>
 8102856:	687b      	ldr	r3, [r7, #4]
 8102858:	681b      	ldr	r3, [r3, #0]
 810285a:	4a21      	ldr	r2, [pc, #132]	; (81028e0 <HAL_DMA_Init+0x1f4>)
 810285c:	4293      	cmp	r3, r2
 810285e:	d108      	bne.n	8102872 <HAL_DMA_Init+0x186>
 8102860:	687b      	ldr	r3, [r7, #4]
 8102862:	681b      	ldr	r3, [r3, #0]
 8102864:	681a      	ldr	r2, [r3, #0]
 8102866:	687b      	ldr	r3, [r7, #4]
 8102868:	681b      	ldr	r3, [r3, #0]
 810286a:	f022 0201 	bic.w	r2, r2, #1
 810286e:	601a      	str	r2, [r3, #0]
 8102870:	e007      	b.n	8102882 <HAL_DMA_Init+0x196>
 8102872:	687b      	ldr	r3, [r7, #4]
 8102874:	681b      	ldr	r3, [r3, #0]
 8102876:	681a      	ldr	r2, [r3, #0]
 8102878:	687b      	ldr	r3, [r7, #4]
 810287a:	681b      	ldr	r3, [r3, #0]
 810287c:	f022 0201 	bic.w	r2, r2, #1
 8102880:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8102882:	e02f      	b.n	81028e4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8102884:	f7fe fd4e 	bl	8101324 <HAL_GetTick>
 8102888:	4602      	mov	r2, r0
 810288a:	693b      	ldr	r3, [r7, #16]
 810288c:	1ad3      	subs	r3, r2, r3
 810288e:	2b05      	cmp	r3, #5
 8102890:	d928      	bls.n	81028e4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8102892:	687b      	ldr	r3, [r7, #4]
 8102894:	2220      	movs	r2, #32
 8102896:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8102898:	687b      	ldr	r3, [r7, #4]
 810289a:	2203      	movs	r2, #3
 810289c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 81028a0:	2301      	movs	r3, #1
 81028a2:	e244      	b.n	8102d2e <HAL_DMA_Init+0x642>
 81028a4:	40020010 	.word	0x40020010
 81028a8:	40020028 	.word	0x40020028
 81028ac:	40020040 	.word	0x40020040
 81028b0:	40020058 	.word	0x40020058
 81028b4:	40020070 	.word	0x40020070
 81028b8:	40020088 	.word	0x40020088
 81028bc:	400200a0 	.word	0x400200a0
 81028c0:	400200b8 	.word	0x400200b8
 81028c4:	40020410 	.word	0x40020410
 81028c8:	40020428 	.word	0x40020428
 81028cc:	40020440 	.word	0x40020440
 81028d0:	40020458 	.word	0x40020458
 81028d4:	40020470 	.word	0x40020470
 81028d8:	40020488 	.word	0x40020488
 81028dc:	400204a0 	.word	0x400204a0
 81028e0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 81028e4:	687b      	ldr	r3, [r7, #4]
 81028e6:	681b      	ldr	r3, [r3, #0]
 81028e8:	681b      	ldr	r3, [r3, #0]
 81028ea:	f003 0301 	and.w	r3, r3, #1
 81028ee:	2b00      	cmp	r3, #0
 81028f0:	d1c8      	bne.n	8102884 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 81028f2:	687b      	ldr	r3, [r7, #4]
 81028f4:	681b      	ldr	r3, [r3, #0]
 81028f6:	681b      	ldr	r3, [r3, #0]
 81028f8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 81028fa:	697a      	ldr	r2, [r7, #20]
 81028fc:	4b84      	ldr	r3, [pc, #528]	; (8102b10 <HAL_DMA_Init+0x424>)
 81028fe:	4013      	ands	r3, r2
 8102900:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8102902:	687b      	ldr	r3, [r7, #4]
 8102904:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8102906:	687b      	ldr	r3, [r7, #4]
 8102908:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 810290a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 810290c:	687b      	ldr	r3, [r7, #4]
 810290e:	691b      	ldr	r3, [r3, #16]
 8102910:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8102912:	687b      	ldr	r3, [r7, #4]
 8102914:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8102916:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8102918:	687b      	ldr	r3, [r7, #4]
 810291a:	699b      	ldr	r3, [r3, #24]
 810291c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 810291e:	687b      	ldr	r3, [r7, #4]
 8102920:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8102922:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8102924:	687b      	ldr	r3, [r7, #4]
 8102926:	6a1b      	ldr	r3, [r3, #32]
 8102928:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 810292a:	697a      	ldr	r2, [r7, #20]
 810292c:	4313      	orrs	r3, r2
 810292e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8102930:	687b      	ldr	r3, [r7, #4]
 8102932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102934:	2b04      	cmp	r3, #4
 8102936:	d107      	bne.n	8102948 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8102938:	687b      	ldr	r3, [r7, #4]
 810293a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810293c:	687b      	ldr	r3, [r7, #4]
 810293e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102940:	4313      	orrs	r3, r2
 8102942:	697a      	ldr	r2, [r7, #20]
 8102944:	4313      	orrs	r3, r2
 8102946:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8102948:	4b72      	ldr	r3, [pc, #456]	; (8102b14 <HAL_DMA_Init+0x428>)
 810294a:	681b      	ldr	r3, [r3, #0]
 810294c:	0c1b      	lsrs	r3, r3, #16
 810294e:	041b      	lsls	r3, r3, #16
 8102950:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102954:	d328      	bcc.n	81029a8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8102956:	687b      	ldr	r3, [r7, #4]
 8102958:	685b      	ldr	r3, [r3, #4]
 810295a:	2b28      	cmp	r3, #40	; 0x28
 810295c:	d903      	bls.n	8102966 <HAL_DMA_Init+0x27a>
 810295e:	687b      	ldr	r3, [r7, #4]
 8102960:	685b      	ldr	r3, [r3, #4]
 8102962:	2b2e      	cmp	r3, #46	; 0x2e
 8102964:	d917      	bls.n	8102996 <HAL_DMA_Init+0x2aa>
 8102966:	687b      	ldr	r3, [r7, #4]
 8102968:	685b      	ldr	r3, [r3, #4]
 810296a:	2b3e      	cmp	r3, #62	; 0x3e
 810296c:	d903      	bls.n	8102976 <HAL_DMA_Init+0x28a>
 810296e:	687b      	ldr	r3, [r7, #4]
 8102970:	685b      	ldr	r3, [r3, #4]
 8102972:	2b42      	cmp	r3, #66	; 0x42
 8102974:	d90f      	bls.n	8102996 <HAL_DMA_Init+0x2aa>
 8102976:	687b      	ldr	r3, [r7, #4]
 8102978:	685b      	ldr	r3, [r3, #4]
 810297a:	2b46      	cmp	r3, #70	; 0x46
 810297c:	d903      	bls.n	8102986 <HAL_DMA_Init+0x29a>
 810297e:	687b      	ldr	r3, [r7, #4]
 8102980:	685b      	ldr	r3, [r3, #4]
 8102982:	2b48      	cmp	r3, #72	; 0x48
 8102984:	d907      	bls.n	8102996 <HAL_DMA_Init+0x2aa>
 8102986:	687b      	ldr	r3, [r7, #4]
 8102988:	685b      	ldr	r3, [r3, #4]
 810298a:	2b4e      	cmp	r3, #78	; 0x4e
 810298c:	d905      	bls.n	810299a <HAL_DMA_Init+0x2ae>
 810298e:	687b      	ldr	r3, [r7, #4]
 8102990:	685b      	ldr	r3, [r3, #4]
 8102992:	2b52      	cmp	r3, #82	; 0x52
 8102994:	d801      	bhi.n	810299a <HAL_DMA_Init+0x2ae>
 8102996:	2301      	movs	r3, #1
 8102998:	e000      	b.n	810299c <HAL_DMA_Init+0x2b0>
 810299a:	2300      	movs	r3, #0
 810299c:	2b00      	cmp	r3, #0
 810299e:	d003      	beq.n	81029a8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 81029a0:	697b      	ldr	r3, [r7, #20]
 81029a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 81029a6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 81029a8:	687b      	ldr	r3, [r7, #4]
 81029aa:	681b      	ldr	r3, [r3, #0]
 81029ac:	697a      	ldr	r2, [r7, #20]
 81029ae:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 81029b0:	687b      	ldr	r3, [r7, #4]
 81029b2:	681b      	ldr	r3, [r3, #0]
 81029b4:	695b      	ldr	r3, [r3, #20]
 81029b6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 81029b8:	697b      	ldr	r3, [r7, #20]
 81029ba:	f023 0307 	bic.w	r3, r3, #7
 81029be:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 81029c0:	687b      	ldr	r3, [r7, #4]
 81029c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81029c4:	697a      	ldr	r2, [r7, #20]
 81029c6:	4313      	orrs	r3, r2
 81029c8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 81029ca:	687b      	ldr	r3, [r7, #4]
 81029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81029ce:	2b04      	cmp	r3, #4
 81029d0:	d117      	bne.n	8102a02 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 81029d2:	687b      	ldr	r3, [r7, #4]
 81029d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81029d6:	697a      	ldr	r2, [r7, #20]
 81029d8:	4313      	orrs	r3, r2
 81029da:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 81029dc:	687b      	ldr	r3, [r7, #4]
 81029de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81029e0:	2b00      	cmp	r3, #0
 81029e2:	d00e      	beq.n	8102a02 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 81029e4:	6878      	ldr	r0, [r7, #4]
 81029e6:	f001 ff1b 	bl	8104820 <DMA_CheckFifoParam>
 81029ea:	4603      	mov	r3, r0
 81029ec:	2b00      	cmp	r3, #0
 81029ee:	d008      	beq.n	8102a02 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 81029f0:	687b      	ldr	r3, [r7, #4]
 81029f2:	2240      	movs	r2, #64	; 0x40
 81029f4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 81029f6:	687b      	ldr	r3, [r7, #4]
 81029f8:	2201      	movs	r2, #1
 81029fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 81029fe:	2301      	movs	r3, #1
 8102a00:	e195      	b.n	8102d2e <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8102a02:	687b      	ldr	r3, [r7, #4]
 8102a04:	681b      	ldr	r3, [r3, #0]
 8102a06:	697a      	ldr	r2, [r7, #20]
 8102a08:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8102a0a:	6878      	ldr	r0, [r7, #4]
 8102a0c:	f001 fe56 	bl	81046bc <DMA_CalcBaseAndBitshift>
 8102a10:	4603      	mov	r3, r0
 8102a12:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8102a14:	687b      	ldr	r3, [r7, #4]
 8102a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102a18:	f003 031f 	and.w	r3, r3, #31
 8102a1c:	223f      	movs	r2, #63	; 0x3f
 8102a1e:	409a      	lsls	r2, r3
 8102a20:	68bb      	ldr	r3, [r7, #8]
 8102a22:	609a      	str	r2, [r3, #8]
 8102a24:	e0cb      	b.n	8102bbe <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8102a26:	687b      	ldr	r3, [r7, #4]
 8102a28:	681b      	ldr	r3, [r3, #0]
 8102a2a:	4a3b      	ldr	r2, [pc, #236]	; (8102b18 <HAL_DMA_Init+0x42c>)
 8102a2c:	4293      	cmp	r3, r2
 8102a2e:	d022      	beq.n	8102a76 <HAL_DMA_Init+0x38a>
 8102a30:	687b      	ldr	r3, [r7, #4]
 8102a32:	681b      	ldr	r3, [r3, #0]
 8102a34:	4a39      	ldr	r2, [pc, #228]	; (8102b1c <HAL_DMA_Init+0x430>)
 8102a36:	4293      	cmp	r3, r2
 8102a38:	d01d      	beq.n	8102a76 <HAL_DMA_Init+0x38a>
 8102a3a:	687b      	ldr	r3, [r7, #4]
 8102a3c:	681b      	ldr	r3, [r3, #0]
 8102a3e:	4a38      	ldr	r2, [pc, #224]	; (8102b20 <HAL_DMA_Init+0x434>)
 8102a40:	4293      	cmp	r3, r2
 8102a42:	d018      	beq.n	8102a76 <HAL_DMA_Init+0x38a>
 8102a44:	687b      	ldr	r3, [r7, #4]
 8102a46:	681b      	ldr	r3, [r3, #0]
 8102a48:	4a36      	ldr	r2, [pc, #216]	; (8102b24 <HAL_DMA_Init+0x438>)
 8102a4a:	4293      	cmp	r3, r2
 8102a4c:	d013      	beq.n	8102a76 <HAL_DMA_Init+0x38a>
 8102a4e:	687b      	ldr	r3, [r7, #4]
 8102a50:	681b      	ldr	r3, [r3, #0]
 8102a52:	4a35      	ldr	r2, [pc, #212]	; (8102b28 <HAL_DMA_Init+0x43c>)
 8102a54:	4293      	cmp	r3, r2
 8102a56:	d00e      	beq.n	8102a76 <HAL_DMA_Init+0x38a>
 8102a58:	687b      	ldr	r3, [r7, #4]
 8102a5a:	681b      	ldr	r3, [r3, #0]
 8102a5c:	4a33      	ldr	r2, [pc, #204]	; (8102b2c <HAL_DMA_Init+0x440>)
 8102a5e:	4293      	cmp	r3, r2
 8102a60:	d009      	beq.n	8102a76 <HAL_DMA_Init+0x38a>
 8102a62:	687b      	ldr	r3, [r7, #4]
 8102a64:	681b      	ldr	r3, [r3, #0]
 8102a66:	4a32      	ldr	r2, [pc, #200]	; (8102b30 <HAL_DMA_Init+0x444>)
 8102a68:	4293      	cmp	r3, r2
 8102a6a:	d004      	beq.n	8102a76 <HAL_DMA_Init+0x38a>
 8102a6c:	687b      	ldr	r3, [r7, #4]
 8102a6e:	681b      	ldr	r3, [r3, #0]
 8102a70:	4a30      	ldr	r2, [pc, #192]	; (8102b34 <HAL_DMA_Init+0x448>)
 8102a72:	4293      	cmp	r3, r2
 8102a74:	d101      	bne.n	8102a7a <HAL_DMA_Init+0x38e>
 8102a76:	2301      	movs	r3, #1
 8102a78:	e000      	b.n	8102a7c <HAL_DMA_Init+0x390>
 8102a7a:	2300      	movs	r3, #0
 8102a7c:	2b00      	cmp	r3, #0
 8102a7e:	f000 8095 	beq.w	8102bac <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8102a82:	687b      	ldr	r3, [r7, #4]
 8102a84:	681b      	ldr	r3, [r3, #0]
 8102a86:	4a24      	ldr	r2, [pc, #144]	; (8102b18 <HAL_DMA_Init+0x42c>)
 8102a88:	4293      	cmp	r3, r2
 8102a8a:	d021      	beq.n	8102ad0 <HAL_DMA_Init+0x3e4>
 8102a8c:	687b      	ldr	r3, [r7, #4]
 8102a8e:	681b      	ldr	r3, [r3, #0]
 8102a90:	4a22      	ldr	r2, [pc, #136]	; (8102b1c <HAL_DMA_Init+0x430>)
 8102a92:	4293      	cmp	r3, r2
 8102a94:	d01c      	beq.n	8102ad0 <HAL_DMA_Init+0x3e4>
 8102a96:	687b      	ldr	r3, [r7, #4]
 8102a98:	681b      	ldr	r3, [r3, #0]
 8102a9a:	4a21      	ldr	r2, [pc, #132]	; (8102b20 <HAL_DMA_Init+0x434>)
 8102a9c:	4293      	cmp	r3, r2
 8102a9e:	d017      	beq.n	8102ad0 <HAL_DMA_Init+0x3e4>
 8102aa0:	687b      	ldr	r3, [r7, #4]
 8102aa2:	681b      	ldr	r3, [r3, #0]
 8102aa4:	4a1f      	ldr	r2, [pc, #124]	; (8102b24 <HAL_DMA_Init+0x438>)
 8102aa6:	4293      	cmp	r3, r2
 8102aa8:	d012      	beq.n	8102ad0 <HAL_DMA_Init+0x3e4>
 8102aaa:	687b      	ldr	r3, [r7, #4]
 8102aac:	681b      	ldr	r3, [r3, #0]
 8102aae:	4a1e      	ldr	r2, [pc, #120]	; (8102b28 <HAL_DMA_Init+0x43c>)
 8102ab0:	4293      	cmp	r3, r2
 8102ab2:	d00d      	beq.n	8102ad0 <HAL_DMA_Init+0x3e4>
 8102ab4:	687b      	ldr	r3, [r7, #4]
 8102ab6:	681b      	ldr	r3, [r3, #0]
 8102ab8:	4a1c      	ldr	r2, [pc, #112]	; (8102b2c <HAL_DMA_Init+0x440>)
 8102aba:	4293      	cmp	r3, r2
 8102abc:	d008      	beq.n	8102ad0 <HAL_DMA_Init+0x3e4>
 8102abe:	687b      	ldr	r3, [r7, #4]
 8102ac0:	681b      	ldr	r3, [r3, #0]
 8102ac2:	4a1b      	ldr	r2, [pc, #108]	; (8102b30 <HAL_DMA_Init+0x444>)
 8102ac4:	4293      	cmp	r3, r2
 8102ac6:	d003      	beq.n	8102ad0 <HAL_DMA_Init+0x3e4>
 8102ac8:	687b      	ldr	r3, [r7, #4]
 8102aca:	681b      	ldr	r3, [r3, #0]
 8102acc:	4a19      	ldr	r2, [pc, #100]	; (8102b34 <HAL_DMA_Init+0x448>)
 8102ace:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8102ad0:	687b      	ldr	r3, [r7, #4]
 8102ad2:	2202      	movs	r2, #2
 8102ad4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8102ad8:	687b      	ldr	r3, [r7, #4]
 8102ada:	2200      	movs	r2, #0
 8102adc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8102ae0:	687b      	ldr	r3, [r7, #4]
 8102ae2:	681b      	ldr	r3, [r3, #0]
 8102ae4:	681b      	ldr	r3, [r3, #0]
 8102ae6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8102ae8:	697b      	ldr	r3, [r7, #20]
 8102aea:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8102aee:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8102af2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8102af4:	687b      	ldr	r3, [r7, #4]
 8102af6:	689b      	ldr	r3, [r3, #8]
 8102af8:	2b40      	cmp	r3, #64	; 0x40
 8102afa:	d01d      	beq.n	8102b38 <HAL_DMA_Init+0x44c>
 8102afc:	687b      	ldr	r3, [r7, #4]
 8102afe:	689b      	ldr	r3, [r3, #8]
 8102b00:	2b80      	cmp	r3, #128	; 0x80
 8102b02:	d102      	bne.n	8102b0a <HAL_DMA_Init+0x41e>
 8102b04:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8102b08:	e017      	b.n	8102b3a <HAL_DMA_Init+0x44e>
 8102b0a:	2300      	movs	r3, #0
 8102b0c:	e015      	b.n	8102b3a <HAL_DMA_Init+0x44e>
 8102b0e:	bf00      	nop
 8102b10:	fe10803f 	.word	0xfe10803f
 8102b14:	5c001000 	.word	0x5c001000
 8102b18:	58025408 	.word	0x58025408
 8102b1c:	5802541c 	.word	0x5802541c
 8102b20:	58025430 	.word	0x58025430
 8102b24:	58025444 	.word	0x58025444
 8102b28:	58025458 	.word	0x58025458
 8102b2c:	5802546c 	.word	0x5802546c
 8102b30:	58025480 	.word	0x58025480
 8102b34:	58025494 	.word	0x58025494
 8102b38:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8102b3a:	687a      	ldr	r2, [r7, #4]
 8102b3c:	68d2      	ldr	r2, [r2, #12]
 8102b3e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8102b40:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8102b42:	687b      	ldr	r3, [r7, #4]
 8102b44:	691b      	ldr	r3, [r3, #16]
 8102b46:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8102b48:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8102b4a:	687b      	ldr	r3, [r7, #4]
 8102b4c:	695b      	ldr	r3, [r3, #20]
 8102b4e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8102b50:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8102b52:	687b      	ldr	r3, [r7, #4]
 8102b54:	699b      	ldr	r3, [r3, #24]
 8102b56:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8102b58:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8102b5a:	687b      	ldr	r3, [r7, #4]
 8102b5c:	69db      	ldr	r3, [r3, #28]
 8102b5e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8102b60:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8102b62:	687b      	ldr	r3, [r7, #4]
 8102b64:	6a1b      	ldr	r3, [r3, #32]
 8102b66:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8102b68:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8102b6a:	697a      	ldr	r2, [r7, #20]
 8102b6c:	4313      	orrs	r3, r2
 8102b6e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8102b70:	687b      	ldr	r3, [r7, #4]
 8102b72:	681b      	ldr	r3, [r3, #0]
 8102b74:	697a      	ldr	r2, [r7, #20]
 8102b76:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8102b78:	687b      	ldr	r3, [r7, #4]
 8102b7a:	681b      	ldr	r3, [r3, #0]
 8102b7c:	461a      	mov	r2, r3
 8102b7e:	4b6e      	ldr	r3, [pc, #440]	; (8102d38 <HAL_DMA_Init+0x64c>)
 8102b80:	4413      	add	r3, r2
 8102b82:	4a6e      	ldr	r2, [pc, #440]	; (8102d3c <HAL_DMA_Init+0x650>)
 8102b84:	fba2 2303 	umull	r2, r3, r2, r3
 8102b88:	091b      	lsrs	r3, r3, #4
 8102b8a:	009a      	lsls	r2, r3, #2
 8102b8c:	687b      	ldr	r3, [r7, #4]
 8102b8e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8102b90:	6878      	ldr	r0, [r7, #4]
 8102b92:	f001 fd93 	bl	81046bc <DMA_CalcBaseAndBitshift>
 8102b96:	4603      	mov	r3, r0
 8102b98:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8102b9a:	687b      	ldr	r3, [r7, #4]
 8102b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102b9e:	f003 031f 	and.w	r3, r3, #31
 8102ba2:	2201      	movs	r2, #1
 8102ba4:	409a      	lsls	r2, r3
 8102ba6:	68fb      	ldr	r3, [r7, #12]
 8102ba8:	605a      	str	r2, [r3, #4]
 8102baa:	e008      	b.n	8102bbe <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8102bac:	687b      	ldr	r3, [r7, #4]
 8102bae:	2240      	movs	r2, #64	; 0x40
 8102bb0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8102bb2:	687b      	ldr	r3, [r7, #4]
 8102bb4:	2203      	movs	r2, #3
 8102bb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8102bba:	2301      	movs	r3, #1
 8102bbc:	e0b7      	b.n	8102d2e <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8102bbe:	687b      	ldr	r3, [r7, #4]
 8102bc0:	681b      	ldr	r3, [r3, #0]
 8102bc2:	4a5f      	ldr	r2, [pc, #380]	; (8102d40 <HAL_DMA_Init+0x654>)
 8102bc4:	4293      	cmp	r3, r2
 8102bc6:	d072      	beq.n	8102cae <HAL_DMA_Init+0x5c2>
 8102bc8:	687b      	ldr	r3, [r7, #4]
 8102bca:	681b      	ldr	r3, [r3, #0]
 8102bcc:	4a5d      	ldr	r2, [pc, #372]	; (8102d44 <HAL_DMA_Init+0x658>)
 8102bce:	4293      	cmp	r3, r2
 8102bd0:	d06d      	beq.n	8102cae <HAL_DMA_Init+0x5c2>
 8102bd2:	687b      	ldr	r3, [r7, #4]
 8102bd4:	681b      	ldr	r3, [r3, #0]
 8102bd6:	4a5c      	ldr	r2, [pc, #368]	; (8102d48 <HAL_DMA_Init+0x65c>)
 8102bd8:	4293      	cmp	r3, r2
 8102bda:	d068      	beq.n	8102cae <HAL_DMA_Init+0x5c2>
 8102bdc:	687b      	ldr	r3, [r7, #4]
 8102bde:	681b      	ldr	r3, [r3, #0]
 8102be0:	4a5a      	ldr	r2, [pc, #360]	; (8102d4c <HAL_DMA_Init+0x660>)
 8102be2:	4293      	cmp	r3, r2
 8102be4:	d063      	beq.n	8102cae <HAL_DMA_Init+0x5c2>
 8102be6:	687b      	ldr	r3, [r7, #4]
 8102be8:	681b      	ldr	r3, [r3, #0]
 8102bea:	4a59      	ldr	r2, [pc, #356]	; (8102d50 <HAL_DMA_Init+0x664>)
 8102bec:	4293      	cmp	r3, r2
 8102bee:	d05e      	beq.n	8102cae <HAL_DMA_Init+0x5c2>
 8102bf0:	687b      	ldr	r3, [r7, #4]
 8102bf2:	681b      	ldr	r3, [r3, #0]
 8102bf4:	4a57      	ldr	r2, [pc, #348]	; (8102d54 <HAL_DMA_Init+0x668>)
 8102bf6:	4293      	cmp	r3, r2
 8102bf8:	d059      	beq.n	8102cae <HAL_DMA_Init+0x5c2>
 8102bfa:	687b      	ldr	r3, [r7, #4]
 8102bfc:	681b      	ldr	r3, [r3, #0]
 8102bfe:	4a56      	ldr	r2, [pc, #344]	; (8102d58 <HAL_DMA_Init+0x66c>)
 8102c00:	4293      	cmp	r3, r2
 8102c02:	d054      	beq.n	8102cae <HAL_DMA_Init+0x5c2>
 8102c04:	687b      	ldr	r3, [r7, #4]
 8102c06:	681b      	ldr	r3, [r3, #0]
 8102c08:	4a54      	ldr	r2, [pc, #336]	; (8102d5c <HAL_DMA_Init+0x670>)
 8102c0a:	4293      	cmp	r3, r2
 8102c0c:	d04f      	beq.n	8102cae <HAL_DMA_Init+0x5c2>
 8102c0e:	687b      	ldr	r3, [r7, #4]
 8102c10:	681b      	ldr	r3, [r3, #0]
 8102c12:	4a53      	ldr	r2, [pc, #332]	; (8102d60 <HAL_DMA_Init+0x674>)
 8102c14:	4293      	cmp	r3, r2
 8102c16:	d04a      	beq.n	8102cae <HAL_DMA_Init+0x5c2>
 8102c18:	687b      	ldr	r3, [r7, #4]
 8102c1a:	681b      	ldr	r3, [r3, #0]
 8102c1c:	4a51      	ldr	r2, [pc, #324]	; (8102d64 <HAL_DMA_Init+0x678>)
 8102c1e:	4293      	cmp	r3, r2
 8102c20:	d045      	beq.n	8102cae <HAL_DMA_Init+0x5c2>
 8102c22:	687b      	ldr	r3, [r7, #4]
 8102c24:	681b      	ldr	r3, [r3, #0]
 8102c26:	4a50      	ldr	r2, [pc, #320]	; (8102d68 <HAL_DMA_Init+0x67c>)
 8102c28:	4293      	cmp	r3, r2
 8102c2a:	d040      	beq.n	8102cae <HAL_DMA_Init+0x5c2>
 8102c2c:	687b      	ldr	r3, [r7, #4]
 8102c2e:	681b      	ldr	r3, [r3, #0]
 8102c30:	4a4e      	ldr	r2, [pc, #312]	; (8102d6c <HAL_DMA_Init+0x680>)
 8102c32:	4293      	cmp	r3, r2
 8102c34:	d03b      	beq.n	8102cae <HAL_DMA_Init+0x5c2>
 8102c36:	687b      	ldr	r3, [r7, #4]
 8102c38:	681b      	ldr	r3, [r3, #0]
 8102c3a:	4a4d      	ldr	r2, [pc, #308]	; (8102d70 <HAL_DMA_Init+0x684>)
 8102c3c:	4293      	cmp	r3, r2
 8102c3e:	d036      	beq.n	8102cae <HAL_DMA_Init+0x5c2>
 8102c40:	687b      	ldr	r3, [r7, #4]
 8102c42:	681b      	ldr	r3, [r3, #0]
 8102c44:	4a4b      	ldr	r2, [pc, #300]	; (8102d74 <HAL_DMA_Init+0x688>)
 8102c46:	4293      	cmp	r3, r2
 8102c48:	d031      	beq.n	8102cae <HAL_DMA_Init+0x5c2>
 8102c4a:	687b      	ldr	r3, [r7, #4]
 8102c4c:	681b      	ldr	r3, [r3, #0]
 8102c4e:	4a4a      	ldr	r2, [pc, #296]	; (8102d78 <HAL_DMA_Init+0x68c>)
 8102c50:	4293      	cmp	r3, r2
 8102c52:	d02c      	beq.n	8102cae <HAL_DMA_Init+0x5c2>
 8102c54:	687b      	ldr	r3, [r7, #4]
 8102c56:	681b      	ldr	r3, [r3, #0]
 8102c58:	4a48      	ldr	r2, [pc, #288]	; (8102d7c <HAL_DMA_Init+0x690>)
 8102c5a:	4293      	cmp	r3, r2
 8102c5c:	d027      	beq.n	8102cae <HAL_DMA_Init+0x5c2>
 8102c5e:	687b      	ldr	r3, [r7, #4]
 8102c60:	681b      	ldr	r3, [r3, #0]
 8102c62:	4a47      	ldr	r2, [pc, #284]	; (8102d80 <HAL_DMA_Init+0x694>)
 8102c64:	4293      	cmp	r3, r2
 8102c66:	d022      	beq.n	8102cae <HAL_DMA_Init+0x5c2>
 8102c68:	687b      	ldr	r3, [r7, #4]
 8102c6a:	681b      	ldr	r3, [r3, #0]
 8102c6c:	4a45      	ldr	r2, [pc, #276]	; (8102d84 <HAL_DMA_Init+0x698>)
 8102c6e:	4293      	cmp	r3, r2
 8102c70:	d01d      	beq.n	8102cae <HAL_DMA_Init+0x5c2>
 8102c72:	687b      	ldr	r3, [r7, #4]
 8102c74:	681b      	ldr	r3, [r3, #0]
 8102c76:	4a44      	ldr	r2, [pc, #272]	; (8102d88 <HAL_DMA_Init+0x69c>)
 8102c78:	4293      	cmp	r3, r2
 8102c7a:	d018      	beq.n	8102cae <HAL_DMA_Init+0x5c2>
 8102c7c:	687b      	ldr	r3, [r7, #4]
 8102c7e:	681b      	ldr	r3, [r3, #0]
 8102c80:	4a42      	ldr	r2, [pc, #264]	; (8102d8c <HAL_DMA_Init+0x6a0>)
 8102c82:	4293      	cmp	r3, r2
 8102c84:	d013      	beq.n	8102cae <HAL_DMA_Init+0x5c2>
 8102c86:	687b      	ldr	r3, [r7, #4]
 8102c88:	681b      	ldr	r3, [r3, #0]
 8102c8a:	4a41      	ldr	r2, [pc, #260]	; (8102d90 <HAL_DMA_Init+0x6a4>)
 8102c8c:	4293      	cmp	r3, r2
 8102c8e:	d00e      	beq.n	8102cae <HAL_DMA_Init+0x5c2>
 8102c90:	687b      	ldr	r3, [r7, #4]
 8102c92:	681b      	ldr	r3, [r3, #0]
 8102c94:	4a3f      	ldr	r2, [pc, #252]	; (8102d94 <HAL_DMA_Init+0x6a8>)
 8102c96:	4293      	cmp	r3, r2
 8102c98:	d009      	beq.n	8102cae <HAL_DMA_Init+0x5c2>
 8102c9a:	687b      	ldr	r3, [r7, #4]
 8102c9c:	681b      	ldr	r3, [r3, #0]
 8102c9e:	4a3e      	ldr	r2, [pc, #248]	; (8102d98 <HAL_DMA_Init+0x6ac>)
 8102ca0:	4293      	cmp	r3, r2
 8102ca2:	d004      	beq.n	8102cae <HAL_DMA_Init+0x5c2>
 8102ca4:	687b      	ldr	r3, [r7, #4]
 8102ca6:	681b      	ldr	r3, [r3, #0]
 8102ca8:	4a3c      	ldr	r2, [pc, #240]	; (8102d9c <HAL_DMA_Init+0x6b0>)
 8102caa:	4293      	cmp	r3, r2
 8102cac:	d101      	bne.n	8102cb2 <HAL_DMA_Init+0x5c6>
 8102cae:	2301      	movs	r3, #1
 8102cb0:	e000      	b.n	8102cb4 <HAL_DMA_Init+0x5c8>
 8102cb2:	2300      	movs	r3, #0
 8102cb4:	2b00      	cmp	r3, #0
 8102cb6:	d032      	beq.n	8102d1e <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8102cb8:	6878      	ldr	r0, [r7, #4]
 8102cba:	f001 fe2d 	bl	8104918 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8102cbe:	687b      	ldr	r3, [r7, #4]
 8102cc0:	689b      	ldr	r3, [r3, #8]
 8102cc2:	2b80      	cmp	r3, #128	; 0x80
 8102cc4:	d102      	bne.n	8102ccc <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8102cc6:	687b      	ldr	r3, [r7, #4]
 8102cc8:	2200      	movs	r2, #0
 8102cca:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8102ccc:	687b      	ldr	r3, [r7, #4]
 8102cce:	685a      	ldr	r2, [r3, #4]
 8102cd0:	687b      	ldr	r3, [r7, #4]
 8102cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102cd4:	b2d2      	uxtb	r2, r2
 8102cd6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8102cd8:	687b      	ldr	r3, [r7, #4]
 8102cda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102cdc:	687a      	ldr	r2, [r7, #4]
 8102cde:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8102ce0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8102ce2:	687b      	ldr	r3, [r7, #4]
 8102ce4:	685b      	ldr	r3, [r3, #4]
 8102ce6:	2b00      	cmp	r3, #0
 8102ce8:	d010      	beq.n	8102d0c <HAL_DMA_Init+0x620>
 8102cea:	687b      	ldr	r3, [r7, #4]
 8102cec:	685b      	ldr	r3, [r3, #4]
 8102cee:	2b08      	cmp	r3, #8
 8102cf0:	d80c      	bhi.n	8102d0c <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8102cf2:	6878      	ldr	r0, [r7, #4]
 8102cf4:	f001 feaa 	bl	8104a4c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8102cf8:	687b      	ldr	r3, [r7, #4]
 8102cfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102cfc:	2200      	movs	r2, #0
 8102cfe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8102d00:	687b      	ldr	r3, [r7, #4]
 8102d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102d04:	687a      	ldr	r2, [r7, #4]
 8102d06:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8102d08:	605a      	str	r2, [r3, #4]
 8102d0a:	e008      	b.n	8102d1e <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8102d0c:	687b      	ldr	r3, [r7, #4]
 8102d0e:	2200      	movs	r2, #0
 8102d10:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8102d12:	687b      	ldr	r3, [r7, #4]
 8102d14:	2200      	movs	r2, #0
 8102d16:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8102d18:	687b      	ldr	r3, [r7, #4]
 8102d1a:	2200      	movs	r2, #0
 8102d1c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8102d1e:	687b      	ldr	r3, [r7, #4]
 8102d20:	2200      	movs	r2, #0
 8102d22:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8102d24:	687b      	ldr	r3, [r7, #4]
 8102d26:	2201      	movs	r2, #1
 8102d28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8102d2c:	2300      	movs	r3, #0
}
 8102d2e:	4618      	mov	r0, r3
 8102d30:	3718      	adds	r7, #24
 8102d32:	46bd      	mov	sp, r7
 8102d34:	bd80      	pop	{r7, pc}
 8102d36:	bf00      	nop
 8102d38:	a7fdabf8 	.word	0xa7fdabf8
 8102d3c:	cccccccd 	.word	0xcccccccd
 8102d40:	40020010 	.word	0x40020010
 8102d44:	40020028 	.word	0x40020028
 8102d48:	40020040 	.word	0x40020040
 8102d4c:	40020058 	.word	0x40020058
 8102d50:	40020070 	.word	0x40020070
 8102d54:	40020088 	.word	0x40020088
 8102d58:	400200a0 	.word	0x400200a0
 8102d5c:	400200b8 	.word	0x400200b8
 8102d60:	40020410 	.word	0x40020410
 8102d64:	40020428 	.word	0x40020428
 8102d68:	40020440 	.word	0x40020440
 8102d6c:	40020458 	.word	0x40020458
 8102d70:	40020470 	.word	0x40020470
 8102d74:	40020488 	.word	0x40020488
 8102d78:	400204a0 	.word	0x400204a0
 8102d7c:	400204b8 	.word	0x400204b8
 8102d80:	58025408 	.word	0x58025408
 8102d84:	5802541c 	.word	0x5802541c
 8102d88:	58025430 	.word	0x58025430
 8102d8c:	58025444 	.word	0x58025444
 8102d90:	58025458 	.word	0x58025458
 8102d94:	5802546c 	.word	0x5802546c
 8102d98:	58025480 	.word	0x58025480
 8102d9c:	58025494 	.word	0x58025494

08102da0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8102da0:	b580      	push	{r7, lr}
 8102da2:	b086      	sub	sp, #24
 8102da4:	af00      	add	r7, sp, #0
 8102da6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8102da8:	f7fe fabc 	bl	8101324 <HAL_GetTick>
 8102dac:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8102dae:	687b      	ldr	r3, [r7, #4]
 8102db0:	2b00      	cmp	r3, #0
 8102db2:	d101      	bne.n	8102db8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8102db4:	2301      	movs	r3, #1
 8102db6:	e2dc      	b.n	8103372 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8102db8:	687b      	ldr	r3, [r7, #4]
 8102dba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8102dbe:	b2db      	uxtb	r3, r3
 8102dc0:	2b02      	cmp	r3, #2
 8102dc2:	d008      	beq.n	8102dd6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8102dc4:	687b      	ldr	r3, [r7, #4]
 8102dc6:	2280      	movs	r2, #128	; 0x80
 8102dc8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8102dca:	687b      	ldr	r3, [r7, #4]
 8102dcc:	2200      	movs	r2, #0
 8102dce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8102dd2:	2301      	movs	r3, #1
 8102dd4:	e2cd      	b.n	8103372 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8102dd6:	687b      	ldr	r3, [r7, #4]
 8102dd8:	681b      	ldr	r3, [r3, #0]
 8102dda:	4a76      	ldr	r2, [pc, #472]	; (8102fb4 <HAL_DMA_Abort+0x214>)
 8102ddc:	4293      	cmp	r3, r2
 8102dde:	d04a      	beq.n	8102e76 <HAL_DMA_Abort+0xd6>
 8102de0:	687b      	ldr	r3, [r7, #4]
 8102de2:	681b      	ldr	r3, [r3, #0]
 8102de4:	4a74      	ldr	r2, [pc, #464]	; (8102fb8 <HAL_DMA_Abort+0x218>)
 8102de6:	4293      	cmp	r3, r2
 8102de8:	d045      	beq.n	8102e76 <HAL_DMA_Abort+0xd6>
 8102dea:	687b      	ldr	r3, [r7, #4]
 8102dec:	681b      	ldr	r3, [r3, #0]
 8102dee:	4a73      	ldr	r2, [pc, #460]	; (8102fbc <HAL_DMA_Abort+0x21c>)
 8102df0:	4293      	cmp	r3, r2
 8102df2:	d040      	beq.n	8102e76 <HAL_DMA_Abort+0xd6>
 8102df4:	687b      	ldr	r3, [r7, #4]
 8102df6:	681b      	ldr	r3, [r3, #0]
 8102df8:	4a71      	ldr	r2, [pc, #452]	; (8102fc0 <HAL_DMA_Abort+0x220>)
 8102dfa:	4293      	cmp	r3, r2
 8102dfc:	d03b      	beq.n	8102e76 <HAL_DMA_Abort+0xd6>
 8102dfe:	687b      	ldr	r3, [r7, #4]
 8102e00:	681b      	ldr	r3, [r3, #0]
 8102e02:	4a70      	ldr	r2, [pc, #448]	; (8102fc4 <HAL_DMA_Abort+0x224>)
 8102e04:	4293      	cmp	r3, r2
 8102e06:	d036      	beq.n	8102e76 <HAL_DMA_Abort+0xd6>
 8102e08:	687b      	ldr	r3, [r7, #4]
 8102e0a:	681b      	ldr	r3, [r3, #0]
 8102e0c:	4a6e      	ldr	r2, [pc, #440]	; (8102fc8 <HAL_DMA_Abort+0x228>)
 8102e0e:	4293      	cmp	r3, r2
 8102e10:	d031      	beq.n	8102e76 <HAL_DMA_Abort+0xd6>
 8102e12:	687b      	ldr	r3, [r7, #4]
 8102e14:	681b      	ldr	r3, [r3, #0]
 8102e16:	4a6d      	ldr	r2, [pc, #436]	; (8102fcc <HAL_DMA_Abort+0x22c>)
 8102e18:	4293      	cmp	r3, r2
 8102e1a:	d02c      	beq.n	8102e76 <HAL_DMA_Abort+0xd6>
 8102e1c:	687b      	ldr	r3, [r7, #4]
 8102e1e:	681b      	ldr	r3, [r3, #0]
 8102e20:	4a6b      	ldr	r2, [pc, #428]	; (8102fd0 <HAL_DMA_Abort+0x230>)
 8102e22:	4293      	cmp	r3, r2
 8102e24:	d027      	beq.n	8102e76 <HAL_DMA_Abort+0xd6>
 8102e26:	687b      	ldr	r3, [r7, #4]
 8102e28:	681b      	ldr	r3, [r3, #0]
 8102e2a:	4a6a      	ldr	r2, [pc, #424]	; (8102fd4 <HAL_DMA_Abort+0x234>)
 8102e2c:	4293      	cmp	r3, r2
 8102e2e:	d022      	beq.n	8102e76 <HAL_DMA_Abort+0xd6>
 8102e30:	687b      	ldr	r3, [r7, #4]
 8102e32:	681b      	ldr	r3, [r3, #0]
 8102e34:	4a68      	ldr	r2, [pc, #416]	; (8102fd8 <HAL_DMA_Abort+0x238>)
 8102e36:	4293      	cmp	r3, r2
 8102e38:	d01d      	beq.n	8102e76 <HAL_DMA_Abort+0xd6>
 8102e3a:	687b      	ldr	r3, [r7, #4]
 8102e3c:	681b      	ldr	r3, [r3, #0]
 8102e3e:	4a67      	ldr	r2, [pc, #412]	; (8102fdc <HAL_DMA_Abort+0x23c>)
 8102e40:	4293      	cmp	r3, r2
 8102e42:	d018      	beq.n	8102e76 <HAL_DMA_Abort+0xd6>
 8102e44:	687b      	ldr	r3, [r7, #4]
 8102e46:	681b      	ldr	r3, [r3, #0]
 8102e48:	4a65      	ldr	r2, [pc, #404]	; (8102fe0 <HAL_DMA_Abort+0x240>)
 8102e4a:	4293      	cmp	r3, r2
 8102e4c:	d013      	beq.n	8102e76 <HAL_DMA_Abort+0xd6>
 8102e4e:	687b      	ldr	r3, [r7, #4]
 8102e50:	681b      	ldr	r3, [r3, #0]
 8102e52:	4a64      	ldr	r2, [pc, #400]	; (8102fe4 <HAL_DMA_Abort+0x244>)
 8102e54:	4293      	cmp	r3, r2
 8102e56:	d00e      	beq.n	8102e76 <HAL_DMA_Abort+0xd6>
 8102e58:	687b      	ldr	r3, [r7, #4]
 8102e5a:	681b      	ldr	r3, [r3, #0]
 8102e5c:	4a62      	ldr	r2, [pc, #392]	; (8102fe8 <HAL_DMA_Abort+0x248>)
 8102e5e:	4293      	cmp	r3, r2
 8102e60:	d009      	beq.n	8102e76 <HAL_DMA_Abort+0xd6>
 8102e62:	687b      	ldr	r3, [r7, #4]
 8102e64:	681b      	ldr	r3, [r3, #0]
 8102e66:	4a61      	ldr	r2, [pc, #388]	; (8102fec <HAL_DMA_Abort+0x24c>)
 8102e68:	4293      	cmp	r3, r2
 8102e6a:	d004      	beq.n	8102e76 <HAL_DMA_Abort+0xd6>
 8102e6c:	687b      	ldr	r3, [r7, #4]
 8102e6e:	681b      	ldr	r3, [r3, #0]
 8102e70:	4a5f      	ldr	r2, [pc, #380]	; (8102ff0 <HAL_DMA_Abort+0x250>)
 8102e72:	4293      	cmp	r3, r2
 8102e74:	d101      	bne.n	8102e7a <HAL_DMA_Abort+0xda>
 8102e76:	2301      	movs	r3, #1
 8102e78:	e000      	b.n	8102e7c <HAL_DMA_Abort+0xdc>
 8102e7a:	2300      	movs	r3, #0
 8102e7c:	2b00      	cmp	r3, #0
 8102e7e:	d013      	beq.n	8102ea8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8102e80:	687b      	ldr	r3, [r7, #4]
 8102e82:	681b      	ldr	r3, [r3, #0]
 8102e84:	681a      	ldr	r2, [r3, #0]
 8102e86:	687b      	ldr	r3, [r7, #4]
 8102e88:	681b      	ldr	r3, [r3, #0]
 8102e8a:	f022 021e 	bic.w	r2, r2, #30
 8102e8e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8102e90:	687b      	ldr	r3, [r7, #4]
 8102e92:	681b      	ldr	r3, [r3, #0]
 8102e94:	695a      	ldr	r2, [r3, #20]
 8102e96:	687b      	ldr	r3, [r7, #4]
 8102e98:	681b      	ldr	r3, [r3, #0]
 8102e9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8102e9e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8102ea0:	687b      	ldr	r3, [r7, #4]
 8102ea2:	681b      	ldr	r3, [r3, #0]
 8102ea4:	617b      	str	r3, [r7, #20]
 8102ea6:	e00a      	b.n	8102ebe <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8102ea8:	687b      	ldr	r3, [r7, #4]
 8102eaa:	681b      	ldr	r3, [r3, #0]
 8102eac:	681a      	ldr	r2, [r3, #0]
 8102eae:	687b      	ldr	r3, [r7, #4]
 8102eb0:	681b      	ldr	r3, [r3, #0]
 8102eb2:	f022 020e 	bic.w	r2, r2, #14
 8102eb6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8102eb8:	687b      	ldr	r3, [r7, #4]
 8102eba:	681b      	ldr	r3, [r3, #0]
 8102ebc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8102ebe:	687b      	ldr	r3, [r7, #4]
 8102ec0:	681b      	ldr	r3, [r3, #0]
 8102ec2:	4a3c      	ldr	r2, [pc, #240]	; (8102fb4 <HAL_DMA_Abort+0x214>)
 8102ec4:	4293      	cmp	r3, r2
 8102ec6:	d072      	beq.n	8102fae <HAL_DMA_Abort+0x20e>
 8102ec8:	687b      	ldr	r3, [r7, #4]
 8102eca:	681b      	ldr	r3, [r3, #0]
 8102ecc:	4a3a      	ldr	r2, [pc, #232]	; (8102fb8 <HAL_DMA_Abort+0x218>)
 8102ece:	4293      	cmp	r3, r2
 8102ed0:	d06d      	beq.n	8102fae <HAL_DMA_Abort+0x20e>
 8102ed2:	687b      	ldr	r3, [r7, #4]
 8102ed4:	681b      	ldr	r3, [r3, #0]
 8102ed6:	4a39      	ldr	r2, [pc, #228]	; (8102fbc <HAL_DMA_Abort+0x21c>)
 8102ed8:	4293      	cmp	r3, r2
 8102eda:	d068      	beq.n	8102fae <HAL_DMA_Abort+0x20e>
 8102edc:	687b      	ldr	r3, [r7, #4]
 8102ede:	681b      	ldr	r3, [r3, #0]
 8102ee0:	4a37      	ldr	r2, [pc, #220]	; (8102fc0 <HAL_DMA_Abort+0x220>)
 8102ee2:	4293      	cmp	r3, r2
 8102ee4:	d063      	beq.n	8102fae <HAL_DMA_Abort+0x20e>
 8102ee6:	687b      	ldr	r3, [r7, #4]
 8102ee8:	681b      	ldr	r3, [r3, #0]
 8102eea:	4a36      	ldr	r2, [pc, #216]	; (8102fc4 <HAL_DMA_Abort+0x224>)
 8102eec:	4293      	cmp	r3, r2
 8102eee:	d05e      	beq.n	8102fae <HAL_DMA_Abort+0x20e>
 8102ef0:	687b      	ldr	r3, [r7, #4]
 8102ef2:	681b      	ldr	r3, [r3, #0]
 8102ef4:	4a34      	ldr	r2, [pc, #208]	; (8102fc8 <HAL_DMA_Abort+0x228>)
 8102ef6:	4293      	cmp	r3, r2
 8102ef8:	d059      	beq.n	8102fae <HAL_DMA_Abort+0x20e>
 8102efa:	687b      	ldr	r3, [r7, #4]
 8102efc:	681b      	ldr	r3, [r3, #0]
 8102efe:	4a33      	ldr	r2, [pc, #204]	; (8102fcc <HAL_DMA_Abort+0x22c>)
 8102f00:	4293      	cmp	r3, r2
 8102f02:	d054      	beq.n	8102fae <HAL_DMA_Abort+0x20e>
 8102f04:	687b      	ldr	r3, [r7, #4]
 8102f06:	681b      	ldr	r3, [r3, #0]
 8102f08:	4a31      	ldr	r2, [pc, #196]	; (8102fd0 <HAL_DMA_Abort+0x230>)
 8102f0a:	4293      	cmp	r3, r2
 8102f0c:	d04f      	beq.n	8102fae <HAL_DMA_Abort+0x20e>
 8102f0e:	687b      	ldr	r3, [r7, #4]
 8102f10:	681b      	ldr	r3, [r3, #0]
 8102f12:	4a30      	ldr	r2, [pc, #192]	; (8102fd4 <HAL_DMA_Abort+0x234>)
 8102f14:	4293      	cmp	r3, r2
 8102f16:	d04a      	beq.n	8102fae <HAL_DMA_Abort+0x20e>
 8102f18:	687b      	ldr	r3, [r7, #4]
 8102f1a:	681b      	ldr	r3, [r3, #0]
 8102f1c:	4a2e      	ldr	r2, [pc, #184]	; (8102fd8 <HAL_DMA_Abort+0x238>)
 8102f1e:	4293      	cmp	r3, r2
 8102f20:	d045      	beq.n	8102fae <HAL_DMA_Abort+0x20e>
 8102f22:	687b      	ldr	r3, [r7, #4]
 8102f24:	681b      	ldr	r3, [r3, #0]
 8102f26:	4a2d      	ldr	r2, [pc, #180]	; (8102fdc <HAL_DMA_Abort+0x23c>)
 8102f28:	4293      	cmp	r3, r2
 8102f2a:	d040      	beq.n	8102fae <HAL_DMA_Abort+0x20e>
 8102f2c:	687b      	ldr	r3, [r7, #4]
 8102f2e:	681b      	ldr	r3, [r3, #0]
 8102f30:	4a2b      	ldr	r2, [pc, #172]	; (8102fe0 <HAL_DMA_Abort+0x240>)
 8102f32:	4293      	cmp	r3, r2
 8102f34:	d03b      	beq.n	8102fae <HAL_DMA_Abort+0x20e>
 8102f36:	687b      	ldr	r3, [r7, #4]
 8102f38:	681b      	ldr	r3, [r3, #0]
 8102f3a:	4a2a      	ldr	r2, [pc, #168]	; (8102fe4 <HAL_DMA_Abort+0x244>)
 8102f3c:	4293      	cmp	r3, r2
 8102f3e:	d036      	beq.n	8102fae <HAL_DMA_Abort+0x20e>
 8102f40:	687b      	ldr	r3, [r7, #4]
 8102f42:	681b      	ldr	r3, [r3, #0]
 8102f44:	4a28      	ldr	r2, [pc, #160]	; (8102fe8 <HAL_DMA_Abort+0x248>)
 8102f46:	4293      	cmp	r3, r2
 8102f48:	d031      	beq.n	8102fae <HAL_DMA_Abort+0x20e>
 8102f4a:	687b      	ldr	r3, [r7, #4]
 8102f4c:	681b      	ldr	r3, [r3, #0]
 8102f4e:	4a27      	ldr	r2, [pc, #156]	; (8102fec <HAL_DMA_Abort+0x24c>)
 8102f50:	4293      	cmp	r3, r2
 8102f52:	d02c      	beq.n	8102fae <HAL_DMA_Abort+0x20e>
 8102f54:	687b      	ldr	r3, [r7, #4]
 8102f56:	681b      	ldr	r3, [r3, #0]
 8102f58:	4a25      	ldr	r2, [pc, #148]	; (8102ff0 <HAL_DMA_Abort+0x250>)
 8102f5a:	4293      	cmp	r3, r2
 8102f5c:	d027      	beq.n	8102fae <HAL_DMA_Abort+0x20e>
 8102f5e:	687b      	ldr	r3, [r7, #4]
 8102f60:	681b      	ldr	r3, [r3, #0]
 8102f62:	4a24      	ldr	r2, [pc, #144]	; (8102ff4 <HAL_DMA_Abort+0x254>)
 8102f64:	4293      	cmp	r3, r2
 8102f66:	d022      	beq.n	8102fae <HAL_DMA_Abort+0x20e>
 8102f68:	687b      	ldr	r3, [r7, #4]
 8102f6a:	681b      	ldr	r3, [r3, #0]
 8102f6c:	4a22      	ldr	r2, [pc, #136]	; (8102ff8 <HAL_DMA_Abort+0x258>)
 8102f6e:	4293      	cmp	r3, r2
 8102f70:	d01d      	beq.n	8102fae <HAL_DMA_Abort+0x20e>
 8102f72:	687b      	ldr	r3, [r7, #4]
 8102f74:	681b      	ldr	r3, [r3, #0]
 8102f76:	4a21      	ldr	r2, [pc, #132]	; (8102ffc <HAL_DMA_Abort+0x25c>)
 8102f78:	4293      	cmp	r3, r2
 8102f7a:	d018      	beq.n	8102fae <HAL_DMA_Abort+0x20e>
 8102f7c:	687b      	ldr	r3, [r7, #4]
 8102f7e:	681b      	ldr	r3, [r3, #0]
 8102f80:	4a1f      	ldr	r2, [pc, #124]	; (8103000 <HAL_DMA_Abort+0x260>)
 8102f82:	4293      	cmp	r3, r2
 8102f84:	d013      	beq.n	8102fae <HAL_DMA_Abort+0x20e>
 8102f86:	687b      	ldr	r3, [r7, #4]
 8102f88:	681b      	ldr	r3, [r3, #0]
 8102f8a:	4a1e      	ldr	r2, [pc, #120]	; (8103004 <HAL_DMA_Abort+0x264>)
 8102f8c:	4293      	cmp	r3, r2
 8102f8e:	d00e      	beq.n	8102fae <HAL_DMA_Abort+0x20e>
 8102f90:	687b      	ldr	r3, [r7, #4]
 8102f92:	681b      	ldr	r3, [r3, #0]
 8102f94:	4a1c      	ldr	r2, [pc, #112]	; (8103008 <HAL_DMA_Abort+0x268>)
 8102f96:	4293      	cmp	r3, r2
 8102f98:	d009      	beq.n	8102fae <HAL_DMA_Abort+0x20e>
 8102f9a:	687b      	ldr	r3, [r7, #4]
 8102f9c:	681b      	ldr	r3, [r3, #0]
 8102f9e:	4a1b      	ldr	r2, [pc, #108]	; (810300c <HAL_DMA_Abort+0x26c>)
 8102fa0:	4293      	cmp	r3, r2
 8102fa2:	d004      	beq.n	8102fae <HAL_DMA_Abort+0x20e>
 8102fa4:	687b      	ldr	r3, [r7, #4]
 8102fa6:	681b      	ldr	r3, [r3, #0]
 8102fa8:	4a19      	ldr	r2, [pc, #100]	; (8103010 <HAL_DMA_Abort+0x270>)
 8102faa:	4293      	cmp	r3, r2
 8102fac:	d132      	bne.n	8103014 <HAL_DMA_Abort+0x274>
 8102fae:	2301      	movs	r3, #1
 8102fb0:	e031      	b.n	8103016 <HAL_DMA_Abort+0x276>
 8102fb2:	bf00      	nop
 8102fb4:	40020010 	.word	0x40020010
 8102fb8:	40020028 	.word	0x40020028
 8102fbc:	40020040 	.word	0x40020040
 8102fc0:	40020058 	.word	0x40020058
 8102fc4:	40020070 	.word	0x40020070
 8102fc8:	40020088 	.word	0x40020088
 8102fcc:	400200a0 	.word	0x400200a0
 8102fd0:	400200b8 	.word	0x400200b8
 8102fd4:	40020410 	.word	0x40020410
 8102fd8:	40020428 	.word	0x40020428
 8102fdc:	40020440 	.word	0x40020440
 8102fe0:	40020458 	.word	0x40020458
 8102fe4:	40020470 	.word	0x40020470
 8102fe8:	40020488 	.word	0x40020488
 8102fec:	400204a0 	.word	0x400204a0
 8102ff0:	400204b8 	.word	0x400204b8
 8102ff4:	58025408 	.word	0x58025408
 8102ff8:	5802541c 	.word	0x5802541c
 8102ffc:	58025430 	.word	0x58025430
 8103000:	58025444 	.word	0x58025444
 8103004:	58025458 	.word	0x58025458
 8103008:	5802546c 	.word	0x5802546c
 810300c:	58025480 	.word	0x58025480
 8103010:	58025494 	.word	0x58025494
 8103014:	2300      	movs	r3, #0
 8103016:	2b00      	cmp	r3, #0
 8103018:	d007      	beq.n	810302a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 810301a:	687b      	ldr	r3, [r7, #4]
 810301c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810301e:	681a      	ldr	r2, [r3, #0]
 8103020:	687b      	ldr	r3, [r7, #4]
 8103022:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103024:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8103028:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 810302a:	687b      	ldr	r3, [r7, #4]
 810302c:	681b      	ldr	r3, [r3, #0]
 810302e:	4a6d      	ldr	r2, [pc, #436]	; (81031e4 <HAL_DMA_Abort+0x444>)
 8103030:	4293      	cmp	r3, r2
 8103032:	d04a      	beq.n	81030ca <HAL_DMA_Abort+0x32a>
 8103034:	687b      	ldr	r3, [r7, #4]
 8103036:	681b      	ldr	r3, [r3, #0]
 8103038:	4a6b      	ldr	r2, [pc, #428]	; (81031e8 <HAL_DMA_Abort+0x448>)
 810303a:	4293      	cmp	r3, r2
 810303c:	d045      	beq.n	81030ca <HAL_DMA_Abort+0x32a>
 810303e:	687b      	ldr	r3, [r7, #4]
 8103040:	681b      	ldr	r3, [r3, #0]
 8103042:	4a6a      	ldr	r2, [pc, #424]	; (81031ec <HAL_DMA_Abort+0x44c>)
 8103044:	4293      	cmp	r3, r2
 8103046:	d040      	beq.n	81030ca <HAL_DMA_Abort+0x32a>
 8103048:	687b      	ldr	r3, [r7, #4]
 810304a:	681b      	ldr	r3, [r3, #0]
 810304c:	4a68      	ldr	r2, [pc, #416]	; (81031f0 <HAL_DMA_Abort+0x450>)
 810304e:	4293      	cmp	r3, r2
 8103050:	d03b      	beq.n	81030ca <HAL_DMA_Abort+0x32a>
 8103052:	687b      	ldr	r3, [r7, #4]
 8103054:	681b      	ldr	r3, [r3, #0]
 8103056:	4a67      	ldr	r2, [pc, #412]	; (81031f4 <HAL_DMA_Abort+0x454>)
 8103058:	4293      	cmp	r3, r2
 810305a:	d036      	beq.n	81030ca <HAL_DMA_Abort+0x32a>
 810305c:	687b      	ldr	r3, [r7, #4]
 810305e:	681b      	ldr	r3, [r3, #0]
 8103060:	4a65      	ldr	r2, [pc, #404]	; (81031f8 <HAL_DMA_Abort+0x458>)
 8103062:	4293      	cmp	r3, r2
 8103064:	d031      	beq.n	81030ca <HAL_DMA_Abort+0x32a>
 8103066:	687b      	ldr	r3, [r7, #4]
 8103068:	681b      	ldr	r3, [r3, #0]
 810306a:	4a64      	ldr	r2, [pc, #400]	; (81031fc <HAL_DMA_Abort+0x45c>)
 810306c:	4293      	cmp	r3, r2
 810306e:	d02c      	beq.n	81030ca <HAL_DMA_Abort+0x32a>
 8103070:	687b      	ldr	r3, [r7, #4]
 8103072:	681b      	ldr	r3, [r3, #0]
 8103074:	4a62      	ldr	r2, [pc, #392]	; (8103200 <HAL_DMA_Abort+0x460>)
 8103076:	4293      	cmp	r3, r2
 8103078:	d027      	beq.n	81030ca <HAL_DMA_Abort+0x32a>
 810307a:	687b      	ldr	r3, [r7, #4]
 810307c:	681b      	ldr	r3, [r3, #0]
 810307e:	4a61      	ldr	r2, [pc, #388]	; (8103204 <HAL_DMA_Abort+0x464>)
 8103080:	4293      	cmp	r3, r2
 8103082:	d022      	beq.n	81030ca <HAL_DMA_Abort+0x32a>
 8103084:	687b      	ldr	r3, [r7, #4]
 8103086:	681b      	ldr	r3, [r3, #0]
 8103088:	4a5f      	ldr	r2, [pc, #380]	; (8103208 <HAL_DMA_Abort+0x468>)
 810308a:	4293      	cmp	r3, r2
 810308c:	d01d      	beq.n	81030ca <HAL_DMA_Abort+0x32a>
 810308e:	687b      	ldr	r3, [r7, #4]
 8103090:	681b      	ldr	r3, [r3, #0]
 8103092:	4a5e      	ldr	r2, [pc, #376]	; (810320c <HAL_DMA_Abort+0x46c>)
 8103094:	4293      	cmp	r3, r2
 8103096:	d018      	beq.n	81030ca <HAL_DMA_Abort+0x32a>
 8103098:	687b      	ldr	r3, [r7, #4]
 810309a:	681b      	ldr	r3, [r3, #0]
 810309c:	4a5c      	ldr	r2, [pc, #368]	; (8103210 <HAL_DMA_Abort+0x470>)
 810309e:	4293      	cmp	r3, r2
 81030a0:	d013      	beq.n	81030ca <HAL_DMA_Abort+0x32a>
 81030a2:	687b      	ldr	r3, [r7, #4]
 81030a4:	681b      	ldr	r3, [r3, #0]
 81030a6:	4a5b      	ldr	r2, [pc, #364]	; (8103214 <HAL_DMA_Abort+0x474>)
 81030a8:	4293      	cmp	r3, r2
 81030aa:	d00e      	beq.n	81030ca <HAL_DMA_Abort+0x32a>
 81030ac:	687b      	ldr	r3, [r7, #4]
 81030ae:	681b      	ldr	r3, [r3, #0]
 81030b0:	4a59      	ldr	r2, [pc, #356]	; (8103218 <HAL_DMA_Abort+0x478>)
 81030b2:	4293      	cmp	r3, r2
 81030b4:	d009      	beq.n	81030ca <HAL_DMA_Abort+0x32a>
 81030b6:	687b      	ldr	r3, [r7, #4]
 81030b8:	681b      	ldr	r3, [r3, #0]
 81030ba:	4a58      	ldr	r2, [pc, #352]	; (810321c <HAL_DMA_Abort+0x47c>)
 81030bc:	4293      	cmp	r3, r2
 81030be:	d004      	beq.n	81030ca <HAL_DMA_Abort+0x32a>
 81030c0:	687b      	ldr	r3, [r7, #4]
 81030c2:	681b      	ldr	r3, [r3, #0]
 81030c4:	4a56      	ldr	r2, [pc, #344]	; (8103220 <HAL_DMA_Abort+0x480>)
 81030c6:	4293      	cmp	r3, r2
 81030c8:	d108      	bne.n	81030dc <HAL_DMA_Abort+0x33c>
 81030ca:	687b      	ldr	r3, [r7, #4]
 81030cc:	681b      	ldr	r3, [r3, #0]
 81030ce:	681a      	ldr	r2, [r3, #0]
 81030d0:	687b      	ldr	r3, [r7, #4]
 81030d2:	681b      	ldr	r3, [r3, #0]
 81030d4:	f022 0201 	bic.w	r2, r2, #1
 81030d8:	601a      	str	r2, [r3, #0]
 81030da:	e007      	b.n	81030ec <HAL_DMA_Abort+0x34c>
 81030dc:	687b      	ldr	r3, [r7, #4]
 81030de:	681b      	ldr	r3, [r3, #0]
 81030e0:	681a      	ldr	r2, [r3, #0]
 81030e2:	687b      	ldr	r3, [r7, #4]
 81030e4:	681b      	ldr	r3, [r3, #0]
 81030e6:	f022 0201 	bic.w	r2, r2, #1
 81030ea:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 81030ec:	e013      	b.n	8103116 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 81030ee:	f7fe f919 	bl	8101324 <HAL_GetTick>
 81030f2:	4602      	mov	r2, r0
 81030f4:	693b      	ldr	r3, [r7, #16]
 81030f6:	1ad3      	subs	r3, r2, r3
 81030f8:	2b05      	cmp	r3, #5
 81030fa:	d90c      	bls.n	8103116 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 81030fc:	687b      	ldr	r3, [r7, #4]
 81030fe:	2220      	movs	r2, #32
 8103100:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8103102:	687b      	ldr	r3, [r7, #4]
 8103104:	2203      	movs	r2, #3
 8103106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 810310a:	687b      	ldr	r3, [r7, #4]
 810310c:	2200      	movs	r2, #0
 810310e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8103112:	2301      	movs	r3, #1
 8103114:	e12d      	b.n	8103372 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8103116:	697b      	ldr	r3, [r7, #20]
 8103118:	681b      	ldr	r3, [r3, #0]
 810311a:	f003 0301 	and.w	r3, r3, #1
 810311e:	2b00      	cmp	r3, #0
 8103120:	d1e5      	bne.n	81030ee <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103122:	687b      	ldr	r3, [r7, #4]
 8103124:	681b      	ldr	r3, [r3, #0]
 8103126:	4a2f      	ldr	r2, [pc, #188]	; (81031e4 <HAL_DMA_Abort+0x444>)
 8103128:	4293      	cmp	r3, r2
 810312a:	d04a      	beq.n	81031c2 <HAL_DMA_Abort+0x422>
 810312c:	687b      	ldr	r3, [r7, #4]
 810312e:	681b      	ldr	r3, [r3, #0]
 8103130:	4a2d      	ldr	r2, [pc, #180]	; (81031e8 <HAL_DMA_Abort+0x448>)
 8103132:	4293      	cmp	r3, r2
 8103134:	d045      	beq.n	81031c2 <HAL_DMA_Abort+0x422>
 8103136:	687b      	ldr	r3, [r7, #4]
 8103138:	681b      	ldr	r3, [r3, #0]
 810313a:	4a2c      	ldr	r2, [pc, #176]	; (81031ec <HAL_DMA_Abort+0x44c>)
 810313c:	4293      	cmp	r3, r2
 810313e:	d040      	beq.n	81031c2 <HAL_DMA_Abort+0x422>
 8103140:	687b      	ldr	r3, [r7, #4]
 8103142:	681b      	ldr	r3, [r3, #0]
 8103144:	4a2a      	ldr	r2, [pc, #168]	; (81031f0 <HAL_DMA_Abort+0x450>)
 8103146:	4293      	cmp	r3, r2
 8103148:	d03b      	beq.n	81031c2 <HAL_DMA_Abort+0x422>
 810314a:	687b      	ldr	r3, [r7, #4]
 810314c:	681b      	ldr	r3, [r3, #0]
 810314e:	4a29      	ldr	r2, [pc, #164]	; (81031f4 <HAL_DMA_Abort+0x454>)
 8103150:	4293      	cmp	r3, r2
 8103152:	d036      	beq.n	81031c2 <HAL_DMA_Abort+0x422>
 8103154:	687b      	ldr	r3, [r7, #4]
 8103156:	681b      	ldr	r3, [r3, #0]
 8103158:	4a27      	ldr	r2, [pc, #156]	; (81031f8 <HAL_DMA_Abort+0x458>)
 810315a:	4293      	cmp	r3, r2
 810315c:	d031      	beq.n	81031c2 <HAL_DMA_Abort+0x422>
 810315e:	687b      	ldr	r3, [r7, #4]
 8103160:	681b      	ldr	r3, [r3, #0]
 8103162:	4a26      	ldr	r2, [pc, #152]	; (81031fc <HAL_DMA_Abort+0x45c>)
 8103164:	4293      	cmp	r3, r2
 8103166:	d02c      	beq.n	81031c2 <HAL_DMA_Abort+0x422>
 8103168:	687b      	ldr	r3, [r7, #4]
 810316a:	681b      	ldr	r3, [r3, #0]
 810316c:	4a24      	ldr	r2, [pc, #144]	; (8103200 <HAL_DMA_Abort+0x460>)
 810316e:	4293      	cmp	r3, r2
 8103170:	d027      	beq.n	81031c2 <HAL_DMA_Abort+0x422>
 8103172:	687b      	ldr	r3, [r7, #4]
 8103174:	681b      	ldr	r3, [r3, #0]
 8103176:	4a23      	ldr	r2, [pc, #140]	; (8103204 <HAL_DMA_Abort+0x464>)
 8103178:	4293      	cmp	r3, r2
 810317a:	d022      	beq.n	81031c2 <HAL_DMA_Abort+0x422>
 810317c:	687b      	ldr	r3, [r7, #4]
 810317e:	681b      	ldr	r3, [r3, #0]
 8103180:	4a21      	ldr	r2, [pc, #132]	; (8103208 <HAL_DMA_Abort+0x468>)
 8103182:	4293      	cmp	r3, r2
 8103184:	d01d      	beq.n	81031c2 <HAL_DMA_Abort+0x422>
 8103186:	687b      	ldr	r3, [r7, #4]
 8103188:	681b      	ldr	r3, [r3, #0]
 810318a:	4a20      	ldr	r2, [pc, #128]	; (810320c <HAL_DMA_Abort+0x46c>)
 810318c:	4293      	cmp	r3, r2
 810318e:	d018      	beq.n	81031c2 <HAL_DMA_Abort+0x422>
 8103190:	687b      	ldr	r3, [r7, #4]
 8103192:	681b      	ldr	r3, [r3, #0]
 8103194:	4a1e      	ldr	r2, [pc, #120]	; (8103210 <HAL_DMA_Abort+0x470>)
 8103196:	4293      	cmp	r3, r2
 8103198:	d013      	beq.n	81031c2 <HAL_DMA_Abort+0x422>
 810319a:	687b      	ldr	r3, [r7, #4]
 810319c:	681b      	ldr	r3, [r3, #0]
 810319e:	4a1d      	ldr	r2, [pc, #116]	; (8103214 <HAL_DMA_Abort+0x474>)
 81031a0:	4293      	cmp	r3, r2
 81031a2:	d00e      	beq.n	81031c2 <HAL_DMA_Abort+0x422>
 81031a4:	687b      	ldr	r3, [r7, #4]
 81031a6:	681b      	ldr	r3, [r3, #0]
 81031a8:	4a1b      	ldr	r2, [pc, #108]	; (8103218 <HAL_DMA_Abort+0x478>)
 81031aa:	4293      	cmp	r3, r2
 81031ac:	d009      	beq.n	81031c2 <HAL_DMA_Abort+0x422>
 81031ae:	687b      	ldr	r3, [r7, #4]
 81031b0:	681b      	ldr	r3, [r3, #0]
 81031b2:	4a1a      	ldr	r2, [pc, #104]	; (810321c <HAL_DMA_Abort+0x47c>)
 81031b4:	4293      	cmp	r3, r2
 81031b6:	d004      	beq.n	81031c2 <HAL_DMA_Abort+0x422>
 81031b8:	687b      	ldr	r3, [r7, #4]
 81031ba:	681b      	ldr	r3, [r3, #0]
 81031bc:	4a18      	ldr	r2, [pc, #96]	; (8103220 <HAL_DMA_Abort+0x480>)
 81031be:	4293      	cmp	r3, r2
 81031c0:	d101      	bne.n	81031c6 <HAL_DMA_Abort+0x426>
 81031c2:	2301      	movs	r3, #1
 81031c4:	e000      	b.n	81031c8 <HAL_DMA_Abort+0x428>
 81031c6:	2300      	movs	r3, #0
 81031c8:	2b00      	cmp	r3, #0
 81031ca:	d02b      	beq.n	8103224 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 81031cc:	687b      	ldr	r3, [r7, #4]
 81031ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81031d0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 81031d2:	687b      	ldr	r3, [r7, #4]
 81031d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81031d6:	f003 031f 	and.w	r3, r3, #31
 81031da:	223f      	movs	r2, #63	; 0x3f
 81031dc:	409a      	lsls	r2, r3
 81031de:	68bb      	ldr	r3, [r7, #8]
 81031e0:	609a      	str	r2, [r3, #8]
 81031e2:	e02a      	b.n	810323a <HAL_DMA_Abort+0x49a>
 81031e4:	40020010 	.word	0x40020010
 81031e8:	40020028 	.word	0x40020028
 81031ec:	40020040 	.word	0x40020040
 81031f0:	40020058 	.word	0x40020058
 81031f4:	40020070 	.word	0x40020070
 81031f8:	40020088 	.word	0x40020088
 81031fc:	400200a0 	.word	0x400200a0
 8103200:	400200b8 	.word	0x400200b8
 8103204:	40020410 	.word	0x40020410
 8103208:	40020428 	.word	0x40020428
 810320c:	40020440 	.word	0x40020440
 8103210:	40020458 	.word	0x40020458
 8103214:	40020470 	.word	0x40020470
 8103218:	40020488 	.word	0x40020488
 810321c:	400204a0 	.word	0x400204a0
 8103220:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8103224:	687b      	ldr	r3, [r7, #4]
 8103226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103228:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 810322a:	687b      	ldr	r3, [r7, #4]
 810322c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810322e:	f003 031f 	and.w	r3, r3, #31
 8103232:	2201      	movs	r2, #1
 8103234:	409a      	lsls	r2, r3
 8103236:	68fb      	ldr	r3, [r7, #12]
 8103238:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810323a:	687b      	ldr	r3, [r7, #4]
 810323c:	681b      	ldr	r3, [r3, #0]
 810323e:	4a4f      	ldr	r2, [pc, #316]	; (810337c <HAL_DMA_Abort+0x5dc>)
 8103240:	4293      	cmp	r3, r2
 8103242:	d072      	beq.n	810332a <HAL_DMA_Abort+0x58a>
 8103244:	687b      	ldr	r3, [r7, #4]
 8103246:	681b      	ldr	r3, [r3, #0]
 8103248:	4a4d      	ldr	r2, [pc, #308]	; (8103380 <HAL_DMA_Abort+0x5e0>)
 810324a:	4293      	cmp	r3, r2
 810324c:	d06d      	beq.n	810332a <HAL_DMA_Abort+0x58a>
 810324e:	687b      	ldr	r3, [r7, #4]
 8103250:	681b      	ldr	r3, [r3, #0]
 8103252:	4a4c      	ldr	r2, [pc, #304]	; (8103384 <HAL_DMA_Abort+0x5e4>)
 8103254:	4293      	cmp	r3, r2
 8103256:	d068      	beq.n	810332a <HAL_DMA_Abort+0x58a>
 8103258:	687b      	ldr	r3, [r7, #4]
 810325a:	681b      	ldr	r3, [r3, #0]
 810325c:	4a4a      	ldr	r2, [pc, #296]	; (8103388 <HAL_DMA_Abort+0x5e8>)
 810325e:	4293      	cmp	r3, r2
 8103260:	d063      	beq.n	810332a <HAL_DMA_Abort+0x58a>
 8103262:	687b      	ldr	r3, [r7, #4]
 8103264:	681b      	ldr	r3, [r3, #0]
 8103266:	4a49      	ldr	r2, [pc, #292]	; (810338c <HAL_DMA_Abort+0x5ec>)
 8103268:	4293      	cmp	r3, r2
 810326a:	d05e      	beq.n	810332a <HAL_DMA_Abort+0x58a>
 810326c:	687b      	ldr	r3, [r7, #4]
 810326e:	681b      	ldr	r3, [r3, #0]
 8103270:	4a47      	ldr	r2, [pc, #284]	; (8103390 <HAL_DMA_Abort+0x5f0>)
 8103272:	4293      	cmp	r3, r2
 8103274:	d059      	beq.n	810332a <HAL_DMA_Abort+0x58a>
 8103276:	687b      	ldr	r3, [r7, #4]
 8103278:	681b      	ldr	r3, [r3, #0]
 810327a:	4a46      	ldr	r2, [pc, #280]	; (8103394 <HAL_DMA_Abort+0x5f4>)
 810327c:	4293      	cmp	r3, r2
 810327e:	d054      	beq.n	810332a <HAL_DMA_Abort+0x58a>
 8103280:	687b      	ldr	r3, [r7, #4]
 8103282:	681b      	ldr	r3, [r3, #0]
 8103284:	4a44      	ldr	r2, [pc, #272]	; (8103398 <HAL_DMA_Abort+0x5f8>)
 8103286:	4293      	cmp	r3, r2
 8103288:	d04f      	beq.n	810332a <HAL_DMA_Abort+0x58a>
 810328a:	687b      	ldr	r3, [r7, #4]
 810328c:	681b      	ldr	r3, [r3, #0]
 810328e:	4a43      	ldr	r2, [pc, #268]	; (810339c <HAL_DMA_Abort+0x5fc>)
 8103290:	4293      	cmp	r3, r2
 8103292:	d04a      	beq.n	810332a <HAL_DMA_Abort+0x58a>
 8103294:	687b      	ldr	r3, [r7, #4]
 8103296:	681b      	ldr	r3, [r3, #0]
 8103298:	4a41      	ldr	r2, [pc, #260]	; (81033a0 <HAL_DMA_Abort+0x600>)
 810329a:	4293      	cmp	r3, r2
 810329c:	d045      	beq.n	810332a <HAL_DMA_Abort+0x58a>
 810329e:	687b      	ldr	r3, [r7, #4]
 81032a0:	681b      	ldr	r3, [r3, #0]
 81032a2:	4a40      	ldr	r2, [pc, #256]	; (81033a4 <HAL_DMA_Abort+0x604>)
 81032a4:	4293      	cmp	r3, r2
 81032a6:	d040      	beq.n	810332a <HAL_DMA_Abort+0x58a>
 81032a8:	687b      	ldr	r3, [r7, #4]
 81032aa:	681b      	ldr	r3, [r3, #0]
 81032ac:	4a3e      	ldr	r2, [pc, #248]	; (81033a8 <HAL_DMA_Abort+0x608>)
 81032ae:	4293      	cmp	r3, r2
 81032b0:	d03b      	beq.n	810332a <HAL_DMA_Abort+0x58a>
 81032b2:	687b      	ldr	r3, [r7, #4]
 81032b4:	681b      	ldr	r3, [r3, #0]
 81032b6:	4a3d      	ldr	r2, [pc, #244]	; (81033ac <HAL_DMA_Abort+0x60c>)
 81032b8:	4293      	cmp	r3, r2
 81032ba:	d036      	beq.n	810332a <HAL_DMA_Abort+0x58a>
 81032bc:	687b      	ldr	r3, [r7, #4]
 81032be:	681b      	ldr	r3, [r3, #0]
 81032c0:	4a3b      	ldr	r2, [pc, #236]	; (81033b0 <HAL_DMA_Abort+0x610>)
 81032c2:	4293      	cmp	r3, r2
 81032c4:	d031      	beq.n	810332a <HAL_DMA_Abort+0x58a>
 81032c6:	687b      	ldr	r3, [r7, #4]
 81032c8:	681b      	ldr	r3, [r3, #0]
 81032ca:	4a3a      	ldr	r2, [pc, #232]	; (81033b4 <HAL_DMA_Abort+0x614>)
 81032cc:	4293      	cmp	r3, r2
 81032ce:	d02c      	beq.n	810332a <HAL_DMA_Abort+0x58a>
 81032d0:	687b      	ldr	r3, [r7, #4]
 81032d2:	681b      	ldr	r3, [r3, #0]
 81032d4:	4a38      	ldr	r2, [pc, #224]	; (81033b8 <HAL_DMA_Abort+0x618>)
 81032d6:	4293      	cmp	r3, r2
 81032d8:	d027      	beq.n	810332a <HAL_DMA_Abort+0x58a>
 81032da:	687b      	ldr	r3, [r7, #4]
 81032dc:	681b      	ldr	r3, [r3, #0]
 81032de:	4a37      	ldr	r2, [pc, #220]	; (81033bc <HAL_DMA_Abort+0x61c>)
 81032e0:	4293      	cmp	r3, r2
 81032e2:	d022      	beq.n	810332a <HAL_DMA_Abort+0x58a>
 81032e4:	687b      	ldr	r3, [r7, #4]
 81032e6:	681b      	ldr	r3, [r3, #0]
 81032e8:	4a35      	ldr	r2, [pc, #212]	; (81033c0 <HAL_DMA_Abort+0x620>)
 81032ea:	4293      	cmp	r3, r2
 81032ec:	d01d      	beq.n	810332a <HAL_DMA_Abort+0x58a>
 81032ee:	687b      	ldr	r3, [r7, #4]
 81032f0:	681b      	ldr	r3, [r3, #0]
 81032f2:	4a34      	ldr	r2, [pc, #208]	; (81033c4 <HAL_DMA_Abort+0x624>)
 81032f4:	4293      	cmp	r3, r2
 81032f6:	d018      	beq.n	810332a <HAL_DMA_Abort+0x58a>
 81032f8:	687b      	ldr	r3, [r7, #4]
 81032fa:	681b      	ldr	r3, [r3, #0]
 81032fc:	4a32      	ldr	r2, [pc, #200]	; (81033c8 <HAL_DMA_Abort+0x628>)
 81032fe:	4293      	cmp	r3, r2
 8103300:	d013      	beq.n	810332a <HAL_DMA_Abort+0x58a>
 8103302:	687b      	ldr	r3, [r7, #4]
 8103304:	681b      	ldr	r3, [r3, #0]
 8103306:	4a31      	ldr	r2, [pc, #196]	; (81033cc <HAL_DMA_Abort+0x62c>)
 8103308:	4293      	cmp	r3, r2
 810330a:	d00e      	beq.n	810332a <HAL_DMA_Abort+0x58a>
 810330c:	687b      	ldr	r3, [r7, #4]
 810330e:	681b      	ldr	r3, [r3, #0]
 8103310:	4a2f      	ldr	r2, [pc, #188]	; (81033d0 <HAL_DMA_Abort+0x630>)
 8103312:	4293      	cmp	r3, r2
 8103314:	d009      	beq.n	810332a <HAL_DMA_Abort+0x58a>
 8103316:	687b      	ldr	r3, [r7, #4]
 8103318:	681b      	ldr	r3, [r3, #0]
 810331a:	4a2e      	ldr	r2, [pc, #184]	; (81033d4 <HAL_DMA_Abort+0x634>)
 810331c:	4293      	cmp	r3, r2
 810331e:	d004      	beq.n	810332a <HAL_DMA_Abort+0x58a>
 8103320:	687b      	ldr	r3, [r7, #4]
 8103322:	681b      	ldr	r3, [r3, #0]
 8103324:	4a2c      	ldr	r2, [pc, #176]	; (81033d8 <HAL_DMA_Abort+0x638>)
 8103326:	4293      	cmp	r3, r2
 8103328:	d101      	bne.n	810332e <HAL_DMA_Abort+0x58e>
 810332a:	2301      	movs	r3, #1
 810332c:	e000      	b.n	8103330 <HAL_DMA_Abort+0x590>
 810332e:	2300      	movs	r3, #0
 8103330:	2b00      	cmp	r3, #0
 8103332:	d015      	beq.n	8103360 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8103334:	687b      	ldr	r3, [r7, #4]
 8103336:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103338:	687a      	ldr	r2, [r7, #4]
 810333a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 810333c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 810333e:	687b      	ldr	r3, [r7, #4]
 8103340:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103342:	2b00      	cmp	r3, #0
 8103344:	d00c      	beq.n	8103360 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8103346:	687b      	ldr	r3, [r7, #4]
 8103348:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810334a:	681a      	ldr	r2, [r3, #0]
 810334c:	687b      	ldr	r3, [r7, #4]
 810334e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103350:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8103354:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8103356:	687b      	ldr	r3, [r7, #4]
 8103358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810335a:	687a      	ldr	r2, [r7, #4]
 810335c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 810335e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8103360:	687b      	ldr	r3, [r7, #4]
 8103362:	2201      	movs	r2, #1
 8103364:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8103368:	687b      	ldr	r3, [r7, #4]
 810336a:	2200      	movs	r2, #0
 810336c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8103370:	2300      	movs	r3, #0
}
 8103372:	4618      	mov	r0, r3
 8103374:	3718      	adds	r7, #24
 8103376:	46bd      	mov	sp, r7
 8103378:	bd80      	pop	{r7, pc}
 810337a:	bf00      	nop
 810337c:	40020010 	.word	0x40020010
 8103380:	40020028 	.word	0x40020028
 8103384:	40020040 	.word	0x40020040
 8103388:	40020058 	.word	0x40020058
 810338c:	40020070 	.word	0x40020070
 8103390:	40020088 	.word	0x40020088
 8103394:	400200a0 	.word	0x400200a0
 8103398:	400200b8 	.word	0x400200b8
 810339c:	40020410 	.word	0x40020410
 81033a0:	40020428 	.word	0x40020428
 81033a4:	40020440 	.word	0x40020440
 81033a8:	40020458 	.word	0x40020458
 81033ac:	40020470 	.word	0x40020470
 81033b0:	40020488 	.word	0x40020488
 81033b4:	400204a0 	.word	0x400204a0
 81033b8:	400204b8 	.word	0x400204b8
 81033bc:	58025408 	.word	0x58025408
 81033c0:	5802541c 	.word	0x5802541c
 81033c4:	58025430 	.word	0x58025430
 81033c8:	58025444 	.word	0x58025444
 81033cc:	58025458 	.word	0x58025458
 81033d0:	5802546c 	.word	0x5802546c
 81033d4:	58025480 	.word	0x58025480
 81033d8:	58025494 	.word	0x58025494

081033dc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 81033dc:	b580      	push	{r7, lr}
 81033de:	b084      	sub	sp, #16
 81033e0:	af00      	add	r7, sp, #0
 81033e2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 81033e4:	687b      	ldr	r3, [r7, #4]
 81033e6:	2b00      	cmp	r3, #0
 81033e8:	d101      	bne.n	81033ee <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 81033ea:	2301      	movs	r3, #1
 81033ec:	e237      	b.n	810385e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 81033ee:	687b      	ldr	r3, [r7, #4]
 81033f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 81033f4:	b2db      	uxtb	r3, r3
 81033f6:	2b02      	cmp	r3, #2
 81033f8:	d004      	beq.n	8103404 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 81033fa:	687b      	ldr	r3, [r7, #4]
 81033fc:	2280      	movs	r2, #128	; 0x80
 81033fe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8103400:	2301      	movs	r3, #1
 8103402:	e22c      	b.n	810385e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103404:	687b      	ldr	r3, [r7, #4]
 8103406:	681b      	ldr	r3, [r3, #0]
 8103408:	4a5c      	ldr	r2, [pc, #368]	; (810357c <HAL_DMA_Abort_IT+0x1a0>)
 810340a:	4293      	cmp	r3, r2
 810340c:	d04a      	beq.n	81034a4 <HAL_DMA_Abort_IT+0xc8>
 810340e:	687b      	ldr	r3, [r7, #4]
 8103410:	681b      	ldr	r3, [r3, #0]
 8103412:	4a5b      	ldr	r2, [pc, #364]	; (8103580 <HAL_DMA_Abort_IT+0x1a4>)
 8103414:	4293      	cmp	r3, r2
 8103416:	d045      	beq.n	81034a4 <HAL_DMA_Abort_IT+0xc8>
 8103418:	687b      	ldr	r3, [r7, #4]
 810341a:	681b      	ldr	r3, [r3, #0]
 810341c:	4a59      	ldr	r2, [pc, #356]	; (8103584 <HAL_DMA_Abort_IT+0x1a8>)
 810341e:	4293      	cmp	r3, r2
 8103420:	d040      	beq.n	81034a4 <HAL_DMA_Abort_IT+0xc8>
 8103422:	687b      	ldr	r3, [r7, #4]
 8103424:	681b      	ldr	r3, [r3, #0]
 8103426:	4a58      	ldr	r2, [pc, #352]	; (8103588 <HAL_DMA_Abort_IT+0x1ac>)
 8103428:	4293      	cmp	r3, r2
 810342a:	d03b      	beq.n	81034a4 <HAL_DMA_Abort_IT+0xc8>
 810342c:	687b      	ldr	r3, [r7, #4]
 810342e:	681b      	ldr	r3, [r3, #0]
 8103430:	4a56      	ldr	r2, [pc, #344]	; (810358c <HAL_DMA_Abort_IT+0x1b0>)
 8103432:	4293      	cmp	r3, r2
 8103434:	d036      	beq.n	81034a4 <HAL_DMA_Abort_IT+0xc8>
 8103436:	687b      	ldr	r3, [r7, #4]
 8103438:	681b      	ldr	r3, [r3, #0]
 810343a:	4a55      	ldr	r2, [pc, #340]	; (8103590 <HAL_DMA_Abort_IT+0x1b4>)
 810343c:	4293      	cmp	r3, r2
 810343e:	d031      	beq.n	81034a4 <HAL_DMA_Abort_IT+0xc8>
 8103440:	687b      	ldr	r3, [r7, #4]
 8103442:	681b      	ldr	r3, [r3, #0]
 8103444:	4a53      	ldr	r2, [pc, #332]	; (8103594 <HAL_DMA_Abort_IT+0x1b8>)
 8103446:	4293      	cmp	r3, r2
 8103448:	d02c      	beq.n	81034a4 <HAL_DMA_Abort_IT+0xc8>
 810344a:	687b      	ldr	r3, [r7, #4]
 810344c:	681b      	ldr	r3, [r3, #0]
 810344e:	4a52      	ldr	r2, [pc, #328]	; (8103598 <HAL_DMA_Abort_IT+0x1bc>)
 8103450:	4293      	cmp	r3, r2
 8103452:	d027      	beq.n	81034a4 <HAL_DMA_Abort_IT+0xc8>
 8103454:	687b      	ldr	r3, [r7, #4]
 8103456:	681b      	ldr	r3, [r3, #0]
 8103458:	4a50      	ldr	r2, [pc, #320]	; (810359c <HAL_DMA_Abort_IT+0x1c0>)
 810345a:	4293      	cmp	r3, r2
 810345c:	d022      	beq.n	81034a4 <HAL_DMA_Abort_IT+0xc8>
 810345e:	687b      	ldr	r3, [r7, #4]
 8103460:	681b      	ldr	r3, [r3, #0]
 8103462:	4a4f      	ldr	r2, [pc, #316]	; (81035a0 <HAL_DMA_Abort_IT+0x1c4>)
 8103464:	4293      	cmp	r3, r2
 8103466:	d01d      	beq.n	81034a4 <HAL_DMA_Abort_IT+0xc8>
 8103468:	687b      	ldr	r3, [r7, #4]
 810346a:	681b      	ldr	r3, [r3, #0]
 810346c:	4a4d      	ldr	r2, [pc, #308]	; (81035a4 <HAL_DMA_Abort_IT+0x1c8>)
 810346e:	4293      	cmp	r3, r2
 8103470:	d018      	beq.n	81034a4 <HAL_DMA_Abort_IT+0xc8>
 8103472:	687b      	ldr	r3, [r7, #4]
 8103474:	681b      	ldr	r3, [r3, #0]
 8103476:	4a4c      	ldr	r2, [pc, #304]	; (81035a8 <HAL_DMA_Abort_IT+0x1cc>)
 8103478:	4293      	cmp	r3, r2
 810347a:	d013      	beq.n	81034a4 <HAL_DMA_Abort_IT+0xc8>
 810347c:	687b      	ldr	r3, [r7, #4]
 810347e:	681b      	ldr	r3, [r3, #0]
 8103480:	4a4a      	ldr	r2, [pc, #296]	; (81035ac <HAL_DMA_Abort_IT+0x1d0>)
 8103482:	4293      	cmp	r3, r2
 8103484:	d00e      	beq.n	81034a4 <HAL_DMA_Abort_IT+0xc8>
 8103486:	687b      	ldr	r3, [r7, #4]
 8103488:	681b      	ldr	r3, [r3, #0]
 810348a:	4a49      	ldr	r2, [pc, #292]	; (81035b0 <HAL_DMA_Abort_IT+0x1d4>)
 810348c:	4293      	cmp	r3, r2
 810348e:	d009      	beq.n	81034a4 <HAL_DMA_Abort_IT+0xc8>
 8103490:	687b      	ldr	r3, [r7, #4]
 8103492:	681b      	ldr	r3, [r3, #0]
 8103494:	4a47      	ldr	r2, [pc, #284]	; (81035b4 <HAL_DMA_Abort_IT+0x1d8>)
 8103496:	4293      	cmp	r3, r2
 8103498:	d004      	beq.n	81034a4 <HAL_DMA_Abort_IT+0xc8>
 810349a:	687b      	ldr	r3, [r7, #4]
 810349c:	681b      	ldr	r3, [r3, #0]
 810349e:	4a46      	ldr	r2, [pc, #280]	; (81035b8 <HAL_DMA_Abort_IT+0x1dc>)
 81034a0:	4293      	cmp	r3, r2
 81034a2:	d101      	bne.n	81034a8 <HAL_DMA_Abort_IT+0xcc>
 81034a4:	2301      	movs	r3, #1
 81034a6:	e000      	b.n	81034aa <HAL_DMA_Abort_IT+0xce>
 81034a8:	2300      	movs	r3, #0
 81034aa:	2b00      	cmp	r3, #0
 81034ac:	f000 8086 	beq.w	81035bc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 81034b0:	687b      	ldr	r3, [r7, #4]
 81034b2:	2204      	movs	r2, #4
 81034b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 81034b8:	687b      	ldr	r3, [r7, #4]
 81034ba:	681b      	ldr	r3, [r3, #0]
 81034bc:	4a2f      	ldr	r2, [pc, #188]	; (810357c <HAL_DMA_Abort_IT+0x1a0>)
 81034be:	4293      	cmp	r3, r2
 81034c0:	d04a      	beq.n	8103558 <HAL_DMA_Abort_IT+0x17c>
 81034c2:	687b      	ldr	r3, [r7, #4]
 81034c4:	681b      	ldr	r3, [r3, #0]
 81034c6:	4a2e      	ldr	r2, [pc, #184]	; (8103580 <HAL_DMA_Abort_IT+0x1a4>)
 81034c8:	4293      	cmp	r3, r2
 81034ca:	d045      	beq.n	8103558 <HAL_DMA_Abort_IT+0x17c>
 81034cc:	687b      	ldr	r3, [r7, #4]
 81034ce:	681b      	ldr	r3, [r3, #0]
 81034d0:	4a2c      	ldr	r2, [pc, #176]	; (8103584 <HAL_DMA_Abort_IT+0x1a8>)
 81034d2:	4293      	cmp	r3, r2
 81034d4:	d040      	beq.n	8103558 <HAL_DMA_Abort_IT+0x17c>
 81034d6:	687b      	ldr	r3, [r7, #4]
 81034d8:	681b      	ldr	r3, [r3, #0]
 81034da:	4a2b      	ldr	r2, [pc, #172]	; (8103588 <HAL_DMA_Abort_IT+0x1ac>)
 81034dc:	4293      	cmp	r3, r2
 81034de:	d03b      	beq.n	8103558 <HAL_DMA_Abort_IT+0x17c>
 81034e0:	687b      	ldr	r3, [r7, #4]
 81034e2:	681b      	ldr	r3, [r3, #0]
 81034e4:	4a29      	ldr	r2, [pc, #164]	; (810358c <HAL_DMA_Abort_IT+0x1b0>)
 81034e6:	4293      	cmp	r3, r2
 81034e8:	d036      	beq.n	8103558 <HAL_DMA_Abort_IT+0x17c>
 81034ea:	687b      	ldr	r3, [r7, #4]
 81034ec:	681b      	ldr	r3, [r3, #0]
 81034ee:	4a28      	ldr	r2, [pc, #160]	; (8103590 <HAL_DMA_Abort_IT+0x1b4>)
 81034f0:	4293      	cmp	r3, r2
 81034f2:	d031      	beq.n	8103558 <HAL_DMA_Abort_IT+0x17c>
 81034f4:	687b      	ldr	r3, [r7, #4]
 81034f6:	681b      	ldr	r3, [r3, #0]
 81034f8:	4a26      	ldr	r2, [pc, #152]	; (8103594 <HAL_DMA_Abort_IT+0x1b8>)
 81034fa:	4293      	cmp	r3, r2
 81034fc:	d02c      	beq.n	8103558 <HAL_DMA_Abort_IT+0x17c>
 81034fe:	687b      	ldr	r3, [r7, #4]
 8103500:	681b      	ldr	r3, [r3, #0]
 8103502:	4a25      	ldr	r2, [pc, #148]	; (8103598 <HAL_DMA_Abort_IT+0x1bc>)
 8103504:	4293      	cmp	r3, r2
 8103506:	d027      	beq.n	8103558 <HAL_DMA_Abort_IT+0x17c>
 8103508:	687b      	ldr	r3, [r7, #4]
 810350a:	681b      	ldr	r3, [r3, #0]
 810350c:	4a23      	ldr	r2, [pc, #140]	; (810359c <HAL_DMA_Abort_IT+0x1c0>)
 810350e:	4293      	cmp	r3, r2
 8103510:	d022      	beq.n	8103558 <HAL_DMA_Abort_IT+0x17c>
 8103512:	687b      	ldr	r3, [r7, #4]
 8103514:	681b      	ldr	r3, [r3, #0]
 8103516:	4a22      	ldr	r2, [pc, #136]	; (81035a0 <HAL_DMA_Abort_IT+0x1c4>)
 8103518:	4293      	cmp	r3, r2
 810351a:	d01d      	beq.n	8103558 <HAL_DMA_Abort_IT+0x17c>
 810351c:	687b      	ldr	r3, [r7, #4]
 810351e:	681b      	ldr	r3, [r3, #0]
 8103520:	4a20      	ldr	r2, [pc, #128]	; (81035a4 <HAL_DMA_Abort_IT+0x1c8>)
 8103522:	4293      	cmp	r3, r2
 8103524:	d018      	beq.n	8103558 <HAL_DMA_Abort_IT+0x17c>
 8103526:	687b      	ldr	r3, [r7, #4]
 8103528:	681b      	ldr	r3, [r3, #0]
 810352a:	4a1f      	ldr	r2, [pc, #124]	; (81035a8 <HAL_DMA_Abort_IT+0x1cc>)
 810352c:	4293      	cmp	r3, r2
 810352e:	d013      	beq.n	8103558 <HAL_DMA_Abort_IT+0x17c>
 8103530:	687b      	ldr	r3, [r7, #4]
 8103532:	681b      	ldr	r3, [r3, #0]
 8103534:	4a1d      	ldr	r2, [pc, #116]	; (81035ac <HAL_DMA_Abort_IT+0x1d0>)
 8103536:	4293      	cmp	r3, r2
 8103538:	d00e      	beq.n	8103558 <HAL_DMA_Abort_IT+0x17c>
 810353a:	687b      	ldr	r3, [r7, #4]
 810353c:	681b      	ldr	r3, [r3, #0]
 810353e:	4a1c      	ldr	r2, [pc, #112]	; (81035b0 <HAL_DMA_Abort_IT+0x1d4>)
 8103540:	4293      	cmp	r3, r2
 8103542:	d009      	beq.n	8103558 <HAL_DMA_Abort_IT+0x17c>
 8103544:	687b      	ldr	r3, [r7, #4]
 8103546:	681b      	ldr	r3, [r3, #0]
 8103548:	4a1a      	ldr	r2, [pc, #104]	; (81035b4 <HAL_DMA_Abort_IT+0x1d8>)
 810354a:	4293      	cmp	r3, r2
 810354c:	d004      	beq.n	8103558 <HAL_DMA_Abort_IT+0x17c>
 810354e:	687b      	ldr	r3, [r7, #4]
 8103550:	681b      	ldr	r3, [r3, #0]
 8103552:	4a19      	ldr	r2, [pc, #100]	; (81035b8 <HAL_DMA_Abort_IT+0x1dc>)
 8103554:	4293      	cmp	r3, r2
 8103556:	d108      	bne.n	810356a <HAL_DMA_Abort_IT+0x18e>
 8103558:	687b      	ldr	r3, [r7, #4]
 810355a:	681b      	ldr	r3, [r3, #0]
 810355c:	681a      	ldr	r2, [r3, #0]
 810355e:	687b      	ldr	r3, [r7, #4]
 8103560:	681b      	ldr	r3, [r3, #0]
 8103562:	f022 0201 	bic.w	r2, r2, #1
 8103566:	601a      	str	r2, [r3, #0]
 8103568:	e178      	b.n	810385c <HAL_DMA_Abort_IT+0x480>
 810356a:	687b      	ldr	r3, [r7, #4]
 810356c:	681b      	ldr	r3, [r3, #0]
 810356e:	681a      	ldr	r2, [r3, #0]
 8103570:	687b      	ldr	r3, [r7, #4]
 8103572:	681b      	ldr	r3, [r3, #0]
 8103574:	f022 0201 	bic.w	r2, r2, #1
 8103578:	601a      	str	r2, [r3, #0]
 810357a:	e16f      	b.n	810385c <HAL_DMA_Abort_IT+0x480>
 810357c:	40020010 	.word	0x40020010
 8103580:	40020028 	.word	0x40020028
 8103584:	40020040 	.word	0x40020040
 8103588:	40020058 	.word	0x40020058
 810358c:	40020070 	.word	0x40020070
 8103590:	40020088 	.word	0x40020088
 8103594:	400200a0 	.word	0x400200a0
 8103598:	400200b8 	.word	0x400200b8
 810359c:	40020410 	.word	0x40020410
 81035a0:	40020428 	.word	0x40020428
 81035a4:	40020440 	.word	0x40020440
 81035a8:	40020458 	.word	0x40020458
 81035ac:	40020470 	.word	0x40020470
 81035b0:	40020488 	.word	0x40020488
 81035b4:	400204a0 	.word	0x400204a0
 81035b8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 81035bc:	687b      	ldr	r3, [r7, #4]
 81035be:	681b      	ldr	r3, [r3, #0]
 81035c0:	681a      	ldr	r2, [r3, #0]
 81035c2:	687b      	ldr	r3, [r7, #4]
 81035c4:	681b      	ldr	r3, [r3, #0]
 81035c6:	f022 020e 	bic.w	r2, r2, #14
 81035ca:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 81035cc:	687b      	ldr	r3, [r7, #4]
 81035ce:	681b      	ldr	r3, [r3, #0]
 81035d0:	4a6c      	ldr	r2, [pc, #432]	; (8103784 <HAL_DMA_Abort_IT+0x3a8>)
 81035d2:	4293      	cmp	r3, r2
 81035d4:	d04a      	beq.n	810366c <HAL_DMA_Abort_IT+0x290>
 81035d6:	687b      	ldr	r3, [r7, #4]
 81035d8:	681b      	ldr	r3, [r3, #0]
 81035da:	4a6b      	ldr	r2, [pc, #428]	; (8103788 <HAL_DMA_Abort_IT+0x3ac>)
 81035dc:	4293      	cmp	r3, r2
 81035de:	d045      	beq.n	810366c <HAL_DMA_Abort_IT+0x290>
 81035e0:	687b      	ldr	r3, [r7, #4]
 81035e2:	681b      	ldr	r3, [r3, #0]
 81035e4:	4a69      	ldr	r2, [pc, #420]	; (810378c <HAL_DMA_Abort_IT+0x3b0>)
 81035e6:	4293      	cmp	r3, r2
 81035e8:	d040      	beq.n	810366c <HAL_DMA_Abort_IT+0x290>
 81035ea:	687b      	ldr	r3, [r7, #4]
 81035ec:	681b      	ldr	r3, [r3, #0]
 81035ee:	4a68      	ldr	r2, [pc, #416]	; (8103790 <HAL_DMA_Abort_IT+0x3b4>)
 81035f0:	4293      	cmp	r3, r2
 81035f2:	d03b      	beq.n	810366c <HAL_DMA_Abort_IT+0x290>
 81035f4:	687b      	ldr	r3, [r7, #4]
 81035f6:	681b      	ldr	r3, [r3, #0]
 81035f8:	4a66      	ldr	r2, [pc, #408]	; (8103794 <HAL_DMA_Abort_IT+0x3b8>)
 81035fa:	4293      	cmp	r3, r2
 81035fc:	d036      	beq.n	810366c <HAL_DMA_Abort_IT+0x290>
 81035fe:	687b      	ldr	r3, [r7, #4]
 8103600:	681b      	ldr	r3, [r3, #0]
 8103602:	4a65      	ldr	r2, [pc, #404]	; (8103798 <HAL_DMA_Abort_IT+0x3bc>)
 8103604:	4293      	cmp	r3, r2
 8103606:	d031      	beq.n	810366c <HAL_DMA_Abort_IT+0x290>
 8103608:	687b      	ldr	r3, [r7, #4]
 810360a:	681b      	ldr	r3, [r3, #0]
 810360c:	4a63      	ldr	r2, [pc, #396]	; (810379c <HAL_DMA_Abort_IT+0x3c0>)
 810360e:	4293      	cmp	r3, r2
 8103610:	d02c      	beq.n	810366c <HAL_DMA_Abort_IT+0x290>
 8103612:	687b      	ldr	r3, [r7, #4]
 8103614:	681b      	ldr	r3, [r3, #0]
 8103616:	4a62      	ldr	r2, [pc, #392]	; (81037a0 <HAL_DMA_Abort_IT+0x3c4>)
 8103618:	4293      	cmp	r3, r2
 810361a:	d027      	beq.n	810366c <HAL_DMA_Abort_IT+0x290>
 810361c:	687b      	ldr	r3, [r7, #4]
 810361e:	681b      	ldr	r3, [r3, #0]
 8103620:	4a60      	ldr	r2, [pc, #384]	; (81037a4 <HAL_DMA_Abort_IT+0x3c8>)
 8103622:	4293      	cmp	r3, r2
 8103624:	d022      	beq.n	810366c <HAL_DMA_Abort_IT+0x290>
 8103626:	687b      	ldr	r3, [r7, #4]
 8103628:	681b      	ldr	r3, [r3, #0]
 810362a:	4a5f      	ldr	r2, [pc, #380]	; (81037a8 <HAL_DMA_Abort_IT+0x3cc>)
 810362c:	4293      	cmp	r3, r2
 810362e:	d01d      	beq.n	810366c <HAL_DMA_Abort_IT+0x290>
 8103630:	687b      	ldr	r3, [r7, #4]
 8103632:	681b      	ldr	r3, [r3, #0]
 8103634:	4a5d      	ldr	r2, [pc, #372]	; (81037ac <HAL_DMA_Abort_IT+0x3d0>)
 8103636:	4293      	cmp	r3, r2
 8103638:	d018      	beq.n	810366c <HAL_DMA_Abort_IT+0x290>
 810363a:	687b      	ldr	r3, [r7, #4]
 810363c:	681b      	ldr	r3, [r3, #0]
 810363e:	4a5c      	ldr	r2, [pc, #368]	; (81037b0 <HAL_DMA_Abort_IT+0x3d4>)
 8103640:	4293      	cmp	r3, r2
 8103642:	d013      	beq.n	810366c <HAL_DMA_Abort_IT+0x290>
 8103644:	687b      	ldr	r3, [r7, #4]
 8103646:	681b      	ldr	r3, [r3, #0]
 8103648:	4a5a      	ldr	r2, [pc, #360]	; (81037b4 <HAL_DMA_Abort_IT+0x3d8>)
 810364a:	4293      	cmp	r3, r2
 810364c:	d00e      	beq.n	810366c <HAL_DMA_Abort_IT+0x290>
 810364e:	687b      	ldr	r3, [r7, #4]
 8103650:	681b      	ldr	r3, [r3, #0]
 8103652:	4a59      	ldr	r2, [pc, #356]	; (81037b8 <HAL_DMA_Abort_IT+0x3dc>)
 8103654:	4293      	cmp	r3, r2
 8103656:	d009      	beq.n	810366c <HAL_DMA_Abort_IT+0x290>
 8103658:	687b      	ldr	r3, [r7, #4]
 810365a:	681b      	ldr	r3, [r3, #0]
 810365c:	4a57      	ldr	r2, [pc, #348]	; (81037bc <HAL_DMA_Abort_IT+0x3e0>)
 810365e:	4293      	cmp	r3, r2
 8103660:	d004      	beq.n	810366c <HAL_DMA_Abort_IT+0x290>
 8103662:	687b      	ldr	r3, [r7, #4]
 8103664:	681b      	ldr	r3, [r3, #0]
 8103666:	4a56      	ldr	r2, [pc, #344]	; (81037c0 <HAL_DMA_Abort_IT+0x3e4>)
 8103668:	4293      	cmp	r3, r2
 810366a:	d108      	bne.n	810367e <HAL_DMA_Abort_IT+0x2a2>
 810366c:	687b      	ldr	r3, [r7, #4]
 810366e:	681b      	ldr	r3, [r3, #0]
 8103670:	681a      	ldr	r2, [r3, #0]
 8103672:	687b      	ldr	r3, [r7, #4]
 8103674:	681b      	ldr	r3, [r3, #0]
 8103676:	f022 0201 	bic.w	r2, r2, #1
 810367a:	601a      	str	r2, [r3, #0]
 810367c:	e007      	b.n	810368e <HAL_DMA_Abort_IT+0x2b2>
 810367e:	687b      	ldr	r3, [r7, #4]
 8103680:	681b      	ldr	r3, [r3, #0]
 8103682:	681a      	ldr	r2, [r3, #0]
 8103684:	687b      	ldr	r3, [r7, #4]
 8103686:	681b      	ldr	r3, [r3, #0]
 8103688:	f022 0201 	bic.w	r2, r2, #1
 810368c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810368e:	687b      	ldr	r3, [r7, #4]
 8103690:	681b      	ldr	r3, [r3, #0]
 8103692:	4a3c      	ldr	r2, [pc, #240]	; (8103784 <HAL_DMA_Abort_IT+0x3a8>)
 8103694:	4293      	cmp	r3, r2
 8103696:	d072      	beq.n	810377e <HAL_DMA_Abort_IT+0x3a2>
 8103698:	687b      	ldr	r3, [r7, #4]
 810369a:	681b      	ldr	r3, [r3, #0]
 810369c:	4a3a      	ldr	r2, [pc, #232]	; (8103788 <HAL_DMA_Abort_IT+0x3ac>)
 810369e:	4293      	cmp	r3, r2
 81036a0:	d06d      	beq.n	810377e <HAL_DMA_Abort_IT+0x3a2>
 81036a2:	687b      	ldr	r3, [r7, #4]
 81036a4:	681b      	ldr	r3, [r3, #0]
 81036a6:	4a39      	ldr	r2, [pc, #228]	; (810378c <HAL_DMA_Abort_IT+0x3b0>)
 81036a8:	4293      	cmp	r3, r2
 81036aa:	d068      	beq.n	810377e <HAL_DMA_Abort_IT+0x3a2>
 81036ac:	687b      	ldr	r3, [r7, #4]
 81036ae:	681b      	ldr	r3, [r3, #0]
 81036b0:	4a37      	ldr	r2, [pc, #220]	; (8103790 <HAL_DMA_Abort_IT+0x3b4>)
 81036b2:	4293      	cmp	r3, r2
 81036b4:	d063      	beq.n	810377e <HAL_DMA_Abort_IT+0x3a2>
 81036b6:	687b      	ldr	r3, [r7, #4]
 81036b8:	681b      	ldr	r3, [r3, #0]
 81036ba:	4a36      	ldr	r2, [pc, #216]	; (8103794 <HAL_DMA_Abort_IT+0x3b8>)
 81036bc:	4293      	cmp	r3, r2
 81036be:	d05e      	beq.n	810377e <HAL_DMA_Abort_IT+0x3a2>
 81036c0:	687b      	ldr	r3, [r7, #4]
 81036c2:	681b      	ldr	r3, [r3, #0]
 81036c4:	4a34      	ldr	r2, [pc, #208]	; (8103798 <HAL_DMA_Abort_IT+0x3bc>)
 81036c6:	4293      	cmp	r3, r2
 81036c8:	d059      	beq.n	810377e <HAL_DMA_Abort_IT+0x3a2>
 81036ca:	687b      	ldr	r3, [r7, #4]
 81036cc:	681b      	ldr	r3, [r3, #0]
 81036ce:	4a33      	ldr	r2, [pc, #204]	; (810379c <HAL_DMA_Abort_IT+0x3c0>)
 81036d0:	4293      	cmp	r3, r2
 81036d2:	d054      	beq.n	810377e <HAL_DMA_Abort_IT+0x3a2>
 81036d4:	687b      	ldr	r3, [r7, #4]
 81036d6:	681b      	ldr	r3, [r3, #0]
 81036d8:	4a31      	ldr	r2, [pc, #196]	; (81037a0 <HAL_DMA_Abort_IT+0x3c4>)
 81036da:	4293      	cmp	r3, r2
 81036dc:	d04f      	beq.n	810377e <HAL_DMA_Abort_IT+0x3a2>
 81036de:	687b      	ldr	r3, [r7, #4]
 81036e0:	681b      	ldr	r3, [r3, #0]
 81036e2:	4a30      	ldr	r2, [pc, #192]	; (81037a4 <HAL_DMA_Abort_IT+0x3c8>)
 81036e4:	4293      	cmp	r3, r2
 81036e6:	d04a      	beq.n	810377e <HAL_DMA_Abort_IT+0x3a2>
 81036e8:	687b      	ldr	r3, [r7, #4]
 81036ea:	681b      	ldr	r3, [r3, #0]
 81036ec:	4a2e      	ldr	r2, [pc, #184]	; (81037a8 <HAL_DMA_Abort_IT+0x3cc>)
 81036ee:	4293      	cmp	r3, r2
 81036f0:	d045      	beq.n	810377e <HAL_DMA_Abort_IT+0x3a2>
 81036f2:	687b      	ldr	r3, [r7, #4]
 81036f4:	681b      	ldr	r3, [r3, #0]
 81036f6:	4a2d      	ldr	r2, [pc, #180]	; (81037ac <HAL_DMA_Abort_IT+0x3d0>)
 81036f8:	4293      	cmp	r3, r2
 81036fa:	d040      	beq.n	810377e <HAL_DMA_Abort_IT+0x3a2>
 81036fc:	687b      	ldr	r3, [r7, #4]
 81036fe:	681b      	ldr	r3, [r3, #0]
 8103700:	4a2b      	ldr	r2, [pc, #172]	; (81037b0 <HAL_DMA_Abort_IT+0x3d4>)
 8103702:	4293      	cmp	r3, r2
 8103704:	d03b      	beq.n	810377e <HAL_DMA_Abort_IT+0x3a2>
 8103706:	687b      	ldr	r3, [r7, #4]
 8103708:	681b      	ldr	r3, [r3, #0]
 810370a:	4a2a      	ldr	r2, [pc, #168]	; (81037b4 <HAL_DMA_Abort_IT+0x3d8>)
 810370c:	4293      	cmp	r3, r2
 810370e:	d036      	beq.n	810377e <HAL_DMA_Abort_IT+0x3a2>
 8103710:	687b      	ldr	r3, [r7, #4]
 8103712:	681b      	ldr	r3, [r3, #0]
 8103714:	4a28      	ldr	r2, [pc, #160]	; (81037b8 <HAL_DMA_Abort_IT+0x3dc>)
 8103716:	4293      	cmp	r3, r2
 8103718:	d031      	beq.n	810377e <HAL_DMA_Abort_IT+0x3a2>
 810371a:	687b      	ldr	r3, [r7, #4]
 810371c:	681b      	ldr	r3, [r3, #0]
 810371e:	4a27      	ldr	r2, [pc, #156]	; (81037bc <HAL_DMA_Abort_IT+0x3e0>)
 8103720:	4293      	cmp	r3, r2
 8103722:	d02c      	beq.n	810377e <HAL_DMA_Abort_IT+0x3a2>
 8103724:	687b      	ldr	r3, [r7, #4]
 8103726:	681b      	ldr	r3, [r3, #0]
 8103728:	4a25      	ldr	r2, [pc, #148]	; (81037c0 <HAL_DMA_Abort_IT+0x3e4>)
 810372a:	4293      	cmp	r3, r2
 810372c:	d027      	beq.n	810377e <HAL_DMA_Abort_IT+0x3a2>
 810372e:	687b      	ldr	r3, [r7, #4]
 8103730:	681b      	ldr	r3, [r3, #0]
 8103732:	4a24      	ldr	r2, [pc, #144]	; (81037c4 <HAL_DMA_Abort_IT+0x3e8>)
 8103734:	4293      	cmp	r3, r2
 8103736:	d022      	beq.n	810377e <HAL_DMA_Abort_IT+0x3a2>
 8103738:	687b      	ldr	r3, [r7, #4]
 810373a:	681b      	ldr	r3, [r3, #0]
 810373c:	4a22      	ldr	r2, [pc, #136]	; (81037c8 <HAL_DMA_Abort_IT+0x3ec>)
 810373e:	4293      	cmp	r3, r2
 8103740:	d01d      	beq.n	810377e <HAL_DMA_Abort_IT+0x3a2>
 8103742:	687b      	ldr	r3, [r7, #4]
 8103744:	681b      	ldr	r3, [r3, #0]
 8103746:	4a21      	ldr	r2, [pc, #132]	; (81037cc <HAL_DMA_Abort_IT+0x3f0>)
 8103748:	4293      	cmp	r3, r2
 810374a:	d018      	beq.n	810377e <HAL_DMA_Abort_IT+0x3a2>
 810374c:	687b      	ldr	r3, [r7, #4]
 810374e:	681b      	ldr	r3, [r3, #0]
 8103750:	4a1f      	ldr	r2, [pc, #124]	; (81037d0 <HAL_DMA_Abort_IT+0x3f4>)
 8103752:	4293      	cmp	r3, r2
 8103754:	d013      	beq.n	810377e <HAL_DMA_Abort_IT+0x3a2>
 8103756:	687b      	ldr	r3, [r7, #4]
 8103758:	681b      	ldr	r3, [r3, #0]
 810375a:	4a1e      	ldr	r2, [pc, #120]	; (81037d4 <HAL_DMA_Abort_IT+0x3f8>)
 810375c:	4293      	cmp	r3, r2
 810375e:	d00e      	beq.n	810377e <HAL_DMA_Abort_IT+0x3a2>
 8103760:	687b      	ldr	r3, [r7, #4]
 8103762:	681b      	ldr	r3, [r3, #0]
 8103764:	4a1c      	ldr	r2, [pc, #112]	; (81037d8 <HAL_DMA_Abort_IT+0x3fc>)
 8103766:	4293      	cmp	r3, r2
 8103768:	d009      	beq.n	810377e <HAL_DMA_Abort_IT+0x3a2>
 810376a:	687b      	ldr	r3, [r7, #4]
 810376c:	681b      	ldr	r3, [r3, #0]
 810376e:	4a1b      	ldr	r2, [pc, #108]	; (81037dc <HAL_DMA_Abort_IT+0x400>)
 8103770:	4293      	cmp	r3, r2
 8103772:	d004      	beq.n	810377e <HAL_DMA_Abort_IT+0x3a2>
 8103774:	687b      	ldr	r3, [r7, #4]
 8103776:	681b      	ldr	r3, [r3, #0]
 8103778:	4a19      	ldr	r2, [pc, #100]	; (81037e0 <HAL_DMA_Abort_IT+0x404>)
 810377a:	4293      	cmp	r3, r2
 810377c:	d132      	bne.n	81037e4 <HAL_DMA_Abort_IT+0x408>
 810377e:	2301      	movs	r3, #1
 8103780:	e031      	b.n	81037e6 <HAL_DMA_Abort_IT+0x40a>
 8103782:	bf00      	nop
 8103784:	40020010 	.word	0x40020010
 8103788:	40020028 	.word	0x40020028
 810378c:	40020040 	.word	0x40020040
 8103790:	40020058 	.word	0x40020058
 8103794:	40020070 	.word	0x40020070
 8103798:	40020088 	.word	0x40020088
 810379c:	400200a0 	.word	0x400200a0
 81037a0:	400200b8 	.word	0x400200b8
 81037a4:	40020410 	.word	0x40020410
 81037a8:	40020428 	.word	0x40020428
 81037ac:	40020440 	.word	0x40020440
 81037b0:	40020458 	.word	0x40020458
 81037b4:	40020470 	.word	0x40020470
 81037b8:	40020488 	.word	0x40020488
 81037bc:	400204a0 	.word	0x400204a0
 81037c0:	400204b8 	.word	0x400204b8
 81037c4:	58025408 	.word	0x58025408
 81037c8:	5802541c 	.word	0x5802541c
 81037cc:	58025430 	.word	0x58025430
 81037d0:	58025444 	.word	0x58025444
 81037d4:	58025458 	.word	0x58025458
 81037d8:	5802546c 	.word	0x5802546c
 81037dc:	58025480 	.word	0x58025480
 81037e0:	58025494 	.word	0x58025494
 81037e4:	2300      	movs	r3, #0
 81037e6:	2b00      	cmp	r3, #0
 81037e8:	d028      	beq.n	810383c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 81037ea:	687b      	ldr	r3, [r7, #4]
 81037ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81037ee:	681a      	ldr	r2, [r3, #0]
 81037f0:	687b      	ldr	r3, [r7, #4]
 81037f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81037f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 81037f8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 81037fa:	687b      	ldr	r3, [r7, #4]
 81037fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81037fe:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8103800:	687b      	ldr	r3, [r7, #4]
 8103802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103804:	f003 031f 	and.w	r3, r3, #31
 8103808:	2201      	movs	r2, #1
 810380a:	409a      	lsls	r2, r3
 810380c:	68fb      	ldr	r3, [r7, #12]
 810380e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8103810:	687b      	ldr	r3, [r7, #4]
 8103812:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103814:	687a      	ldr	r2, [r7, #4]
 8103816:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8103818:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 810381a:	687b      	ldr	r3, [r7, #4]
 810381c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810381e:	2b00      	cmp	r3, #0
 8103820:	d00c      	beq.n	810383c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8103822:	687b      	ldr	r3, [r7, #4]
 8103824:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103826:	681a      	ldr	r2, [r3, #0]
 8103828:	687b      	ldr	r3, [r7, #4]
 810382a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810382c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8103830:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8103832:	687b      	ldr	r3, [r7, #4]
 8103834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103836:	687a      	ldr	r2, [r7, #4]
 8103838:	6f52      	ldr	r2, [r2, #116]	; 0x74
 810383a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 810383c:	687b      	ldr	r3, [r7, #4]
 810383e:	2201      	movs	r2, #1
 8103840:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8103844:	687b      	ldr	r3, [r7, #4]
 8103846:	2200      	movs	r2, #0
 8103848:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 810384c:	687b      	ldr	r3, [r7, #4]
 810384e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103850:	2b00      	cmp	r3, #0
 8103852:	d003      	beq.n	810385c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8103854:	687b      	ldr	r3, [r7, #4]
 8103856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103858:	6878      	ldr	r0, [r7, #4]
 810385a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 810385c:	2300      	movs	r3, #0
}
 810385e:	4618      	mov	r0, r3
 8103860:	3710      	adds	r7, #16
 8103862:	46bd      	mov	sp, r7
 8103864:	bd80      	pop	{r7, pc}
 8103866:	bf00      	nop

08103868 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8103868:	b580      	push	{r7, lr}
 810386a:	b08a      	sub	sp, #40	; 0x28
 810386c:	af00      	add	r7, sp, #0
 810386e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8103870:	2300      	movs	r3, #0
 8103872:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8103874:	4b67      	ldr	r3, [pc, #412]	; (8103a14 <HAL_DMA_IRQHandler+0x1ac>)
 8103876:	681b      	ldr	r3, [r3, #0]
 8103878:	4a67      	ldr	r2, [pc, #412]	; (8103a18 <HAL_DMA_IRQHandler+0x1b0>)
 810387a:	fba2 2303 	umull	r2, r3, r2, r3
 810387e:	0a9b      	lsrs	r3, r3, #10
 8103880:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8103882:	687b      	ldr	r3, [r7, #4]
 8103884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103886:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8103888:	687b      	ldr	r3, [r7, #4]
 810388a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810388c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 810388e:	6a3b      	ldr	r3, [r7, #32]
 8103890:	681b      	ldr	r3, [r3, #0]
 8103892:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8103894:	69fb      	ldr	r3, [r7, #28]
 8103896:	681b      	ldr	r3, [r3, #0]
 8103898:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 810389a:	687b      	ldr	r3, [r7, #4]
 810389c:	681b      	ldr	r3, [r3, #0]
 810389e:	4a5f      	ldr	r2, [pc, #380]	; (8103a1c <HAL_DMA_IRQHandler+0x1b4>)
 81038a0:	4293      	cmp	r3, r2
 81038a2:	d04a      	beq.n	810393a <HAL_DMA_IRQHandler+0xd2>
 81038a4:	687b      	ldr	r3, [r7, #4]
 81038a6:	681b      	ldr	r3, [r3, #0]
 81038a8:	4a5d      	ldr	r2, [pc, #372]	; (8103a20 <HAL_DMA_IRQHandler+0x1b8>)
 81038aa:	4293      	cmp	r3, r2
 81038ac:	d045      	beq.n	810393a <HAL_DMA_IRQHandler+0xd2>
 81038ae:	687b      	ldr	r3, [r7, #4]
 81038b0:	681b      	ldr	r3, [r3, #0]
 81038b2:	4a5c      	ldr	r2, [pc, #368]	; (8103a24 <HAL_DMA_IRQHandler+0x1bc>)
 81038b4:	4293      	cmp	r3, r2
 81038b6:	d040      	beq.n	810393a <HAL_DMA_IRQHandler+0xd2>
 81038b8:	687b      	ldr	r3, [r7, #4]
 81038ba:	681b      	ldr	r3, [r3, #0]
 81038bc:	4a5a      	ldr	r2, [pc, #360]	; (8103a28 <HAL_DMA_IRQHandler+0x1c0>)
 81038be:	4293      	cmp	r3, r2
 81038c0:	d03b      	beq.n	810393a <HAL_DMA_IRQHandler+0xd2>
 81038c2:	687b      	ldr	r3, [r7, #4]
 81038c4:	681b      	ldr	r3, [r3, #0]
 81038c6:	4a59      	ldr	r2, [pc, #356]	; (8103a2c <HAL_DMA_IRQHandler+0x1c4>)
 81038c8:	4293      	cmp	r3, r2
 81038ca:	d036      	beq.n	810393a <HAL_DMA_IRQHandler+0xd2>
 81038cc:	687b      	ldr	r3, [r7, #4]
 81038ce:	681b      	ldr	r3, [r3, #0]
 81038d0:	4a57      	ldr	r2, [pc, #348]	; (8103a30 <HAL_DMA_IRQHandler+0x1c8>)
 81038d2:	4293      	cmp	r3, r2
 81038d4:	d031      	beq.n	810393a <HAL_DMA_IRQHandler+0xd2>
 81038d6:	687b      	ldr	r3, [r7, #4]
 81038d8:	681b      	ldr	r3, [r3, #0]
 81038da:	4a56      	ldr	r2, [pc, #344]	; (8103a34 <HAL_DMA_IRQHandler+0x1cc>)
 81038dc:	4293      	cmp	r3, r2
 81038de:	d02c      	beq.n	810393a <HAL_DMA_IRQHandler+0xd2>
 81038e0:	687b      	ldr	r3, [r7, #4]
 81038e2:	681b      	ldr	r3, [r3, #0]
 81038e4:	4a54      	ldr	r2, [pc, #336]	; (8103a38 <HAL_DMA_IRQHandler+0x1d0>)
 81038e6:	4293      	cmp	r3, r2
 81038e8:	d027      	beq.n	810393a <HAL_DMA_IRQHandler+0xd2>
 81038ea:	687b      	ldr	r3, [r7, #4]
 81038ec:	681b      	ldr	r3, [r3, #0]
 81038ee:	4a53      	ldr	r2, [pc, #332]	; (8103a3c <HAL_DMA_IRQHandler+0x1d4>)
 81038f0:	4293      	cmp	r3, r2
 81038f2:	d022      	beq.n	810393a <HAL_DMA_IRQHandler+0xd2>
 81038f4:	687b      	ldr	r3, [r7, #4]
 81038f6:	681b      	ldr	r3, [r3, #0]
 81038f8:	4a51      	ldr	r2, [pc, #324]	; (8103a40 <HAL_DMA_IRQHandler+0x1d8>)
 81038fa:	4293      	cmp	r3, r2
 81038fc:	d01d      	beq.n	810393a <HAL_DMA_IRQHandler+0xd2>
 81038fe:	687b      	ldr	r3, [r7, #4]
 8103900:	681b      	ldr	r3, [r3, #0]
 8103902:	4a50      	ldr	r2, [pc, #320]	; (8103a44 <HAL_DMA_IRQHandler+0x1dc>)
 8103904:	4293      	cmp	r3, r2
 8103906:	d018      	beq.n	810393a <HAL_DMA_IRQHandler+0xd2>
 8103908:	687b      	ldr	r3, [r7, #4]
 810390a:	681b      	ldr	r3, [r3, #0]
 810390c:	4a4e      	ldr	r2, [pc, #312]	; (8103a48 <HAL_DMA_IRQHandler+0x1e0>)
 810390e:	4293      	cmp	r3, r2
 8103910:	d013      	beq.n	810393a <HAL_DMA_IRQHandler+0xd2>
 8103912:	687b      	ldr	r3, [r7, #4]
 8103914:	681b      	ldr	r3, [r3, #0]
 8103916:	4a4d      	ldr	r2, [pc, #308]	; (8103a4c <HAL_DMA_IRQHandler+0x1e4>)
 8103918:	4293      	cmp	r3, r2
 810391a:	d00e      	beq.n	810393a <HAL_DMA_IRQHandler+0xd2>
 810391c:	687b      	ldr	r3, [r7, #4]
 810391e:	681b      	ldr	r3, [r3, #0]
 8103920:	4a4b      	ldr	r2, [pc, #300]	; (8103a50 <HAL_DMA_IRQHandler+0x1e8>)
 8103922:	4293      	cmp	r3, r2
 8103924:	d009      	beq.n	810393a <HAL_DMA_IRQHandler+0xd2>
 8103926:	687b      	ldr	r3, [r7, #4]
 8103928:	681b      	ldr	r3, [r3, #0]
 810392a:	4a4a      	ldr	r2, [pc, #296]	; (8103a54 <HAL_DMA_IRQHandler+0x1ec>)
 810392c:	4293      	cmp	r3, r2
 810392e:	d004      	beq.n	810393a <HAL_DMA_IRQHandler+0xd2>
 8103930:	687b      	ldr	r3, [r7, #4]
 8103932:	681b      	ldr	r3, [r3, #0]
 8103934:	4a48      	ldr	r2, [pc, #288]	; (8103a58 <HAL_DMA_IRQHandler+0x1f0>)
 8103936:	4293      	cmp	r3, r2
 8103938:	d101      	bne.n	810393e <HAL_DMA_IRQHandler+0xd6>
 810393a:	2301      	movs	r3, #1
 810393c:	e000      	b.n	8103940 <HAL_DMA_IRQHandler+0xd8>
 810393e:	2300      	movs	r3, #0
 8103940:	2b00      	cmp	r3, #0
 8103942:	f000 842b 	beq.w	810419c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103946:	687b      	ldr	r3, [r7, #4]
 8103948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810394a:	f003 031f 	and.w	r3, r3, #31
 810394e:	2208      	movs	r2, #8
 8103950:	409a      	lsls	r2, r3
 8103952:	69bb      	ldr	r3, [r7, #24]
 8103954:	4013      	ands	r3, r2
 8103956:	2b00      	cmp	r3, #0
 8103958:	f000 80a2 	beq.w	8103aa0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 810395c:	687b      	ldr	r3, [r7, #4]
 810395e:	681b      	ldr	r3, [r3, #0]
 8103960:	4a2e      	ldr	r2, [pc, #184]	; (8103a1c <HAL_DMA_IRQHandler+0x1b4>)
 8103962:	4293      	cmp	r3, r2
 8103964:	d04a      	beq.n	81039fc <HAL_DMA_IRQHandler+0x194>
 8103966:	687b      	ldr	r3, [r7, #4]
 8103968:	681b      	ldr	r3, [r3, #0]
 810396a:	4a2d      	ldr	r2, [pc, #180]	; (8103a20 <HAL_DMA_IRQHandler+0x1b8>)
 810396c:	4293      	cmp	r3, r2
 810396e:	d045      	beq.n	81039fc <HAL_DMA_IRQHandler+0x194>
 8103970:	687b      	ldr	r3, [r7, #4]
 8103972:	681b      	ldr	r3, [r3, #0]
 8103974:	4a2b      	ldr	r2, [pc, #172]	; (8103a24 <HAL_DMA_IRQHandler+0x1bc>)
 8103976:	4293      	cmp	r3, r2
 8103978:	d040      	beq.n	81039fc <HAL_DMA_IRQHandler+0x194>
 810397a:	687b      	ldr	r3, [r7, #4]
 810397c:	681b      	ldr	r3, [r3, #0]
 810397e:	4a2a      	ldr	r2, [pc, #168]	; (8103a28 <HAL_DMA_IRQHandler+0x1c0>)
 8103980:	4293      	cmp	r3, r2
 8103982:	d03b      	beq.n	81039fc <HAL_DMA_IRQHandler+0x194>
 8103984:	687b      	ldr	r3, [r7, #4]
 8103986:	681b      	ldr	r3, [r3, #0]
 8103988:	4a28      	ldr	r2, [pc, #160]	; (8103a2c <HAL_DMA_IRQHandler+0x1c4>)
 810398a:	4293      	cmp	r3, r2
 810398c:	d036      	beq.n	81039fc <HAL_DMA_IRQHandler+0x194>
 810398e:	687b      	ldr	r3, [r7, #4]
 8103990:	681b      	ldr	r3, [r3, #0]
 8103992:	4a27      	ldr	r2, [pc, #156]	; (8103a30 <HAL_DMA_IRQHandler+0x1c8>)
 8103994:	4293      	cmp	r3, r2
 8103996:	d031      	beq.n	81039fc <HAL_DMA_IRQHandler+0x194>
 8103998:	687b      	ldr	r3, [r7, #4]
 810399a:	681b      	ldr	r3, [r3, #0]
 810399c:	4a25      	ldr	r2, [pc, #148]	; (8103a34 <HAL_DMA_IRQHandler+0x1cc>)
 810399e:	4293      	cmp	r3, r2
 81039a0:	d02c      	beq.n	81039fc <HAL_DMA_IRQHandler+0x194>
 81039a2:	687b      	ldr	r3, [r7, #4]
 81039a4:	681b      	ldr	r3, [r3, #0]
 81039a6:	4a24      	ldr	r2, [pc, #144]	; (8103a38 <HAL_DMA_IRQHandler+0x1d0>)
 81039a8:	4293      	cmp	r3, r2
 81039aa:	d027      	beq.n	81039fc <HAL_DMA_IRQHandler+0x194>
 81039ac:	687b      	ldr	r3, [r7, #4]
 81039ae:	681b      	ldr	r3, [r3, #0]
 81039b0:	4a22      	ldr	r2, [pc, #136]	; (8103a3c <HAL_DMA_IRQHandler+0x1d4>)
 81039b2:	4293      	cmp	r3, r2
 81039b4:	d022      	beq.n	81039fc <HAL_DMA_IRQHandler+0x194>
 81039b6:	687b      	ldr	r3, [r7, #4]
 81039b8:	681b      	ldr	r3, [r3, #0]
 81039ba:	4a21      	ldr	r2, [pc, #132]	; (8103a40 <HAL_DMA_IRQHandler+0x1d8>)
 81039bc:	4293      	cmp	r3, r2
 81039be:	d01d      	beq.n	81039fc <HAL_DMA_IRQHandler+0x194>
 81039c0:	687b      	ldr	r3, [r7, #4]
 81039c2:	681b      	ldr	r3, [r3, #0]
 81039c4:	4a1f      	ldr	r2, [pc, #124]	; (8103a44 <HAL_DMA_IRQHandler+0x1dc>)
 81039c6:	4293      	cmp	r3, r2
 81039c8:	d018      	beq.n	81039fc <HAL_DMA_IRQHandler+0x194>
 81039ca:	687b      	ldr	r3, [r7, #4]
 81039cc:	681b      	ldr	r3, [r3, #0]
 81039ce:	4a1e      	ldr	r2, [pc, #120]	; (8103a48 <HAL_DMA_IRQHandler+0x1e0>)
 81039d0:	4293      	cmp	r3, r2
 81039d2:	d013      	beq.n	81039fc <HAL_DMA_IRQHandler+0x194>
 81039d4:	687b      	ldr	r3, [r7, #4]
 81039d6:	681b      	ldr	r3, [r3, #0]
 81039d8:	4a1c      	ldr	r2, [pc, #112]	; (8103a4c <HAL_DMA_IRQHandler+0x1e4>)
 81039da:	4293      	cmp	r3, r2
 81039dc:	d00e      	beq.n	81039fc <HAL_DMA_IRQHandler+0x194>
 81039de:	687b      	ldr	r3, [r7, #4]
 81039e0:	681b      	ldr	r3, [r3, #0]
 81039e2:	4a1b      	ldr	r2, [pc, #108]	; (8103a50 <HAL_DMA_IRQHandler+0x1e8>)
 81039e4:	4293      	cmp	r3, r2
 81039e6:	d009      	beq.n	81039fc <HAL_DMA_IRQHandler+0x194>
 81039e8:	687b      	ldr	r3, [r7, #4]
 81039ea:	681b      	ldr	r3, [r3, #0]
 81039ec:	4a19      	ldr	r2, [pc, #100]	; (8103a54 <HAL_DMA_IRQHandler+0x1ec>)
 81039ee:	4293      	cmp	r3, r2
 81039f0:	d004      	beq.n	81039fc <HAL_DMA_IRQHandler+0x194>
 81039f2:	687b      	ldr	r3, [r7, #4]
 81039f4:	681b      	ldr	r3, [r3, #0]
 81039f6:	4a18      	ldr	r2, [pc, #96]	; (8103a58 <HAL_DMA_IRQHandler+0x1f0>)
 81039f8:	4293      	cmp	r3, r2
 81039fa:	d12f      	bne.n	8103a5c <HAL_DMA_IRQHandler+0x1f4>
 81039fc:	687b      	ldr	r3, [r7, #4]
 81039fe:	681b      	ldr	r3, [r3, #0]
 8103a00:	681b      	ldr	r3, [r3, #0]
 8103a02:	f003 0304 	and.w	r3, r3, #4
 8103a06:	2b00      	cmp	r3, #0
 8103a08:	bf14      	ite	ne
 8103a0a:	2301      	movne	r3, #1
 8103a0c:	2300      	moveq	r3, #0
 8103a0e:	b2db      	uxtb	r3, r3
 8103a10:	e02e      	b.n	8103a70 <HAL_DMA_IRQHandler+0x208>
 8103a12:	bf00      	nop
 8103a14:	10000000 	.word	0x10000000
 8103a18:	1b4e81b5 	.word	0x1b4e81b5
 8103a1c:	40020010 	.word	0x40020010
 8103a20:	40020028 	.word	0x40020028
 8103a24:	40020040 	.word	0x40020040
 8103a28:	40020058 	.word	0x40020058
 8103a2c:	40020070 	.word	0x40020070
 8103a30:	40020088 	.word	0x40020088
 8103a34:	400200a0 	.word	0x400200a0
 8103a38:	400200b8 	.word	0x400200b8
 8103a3c:	40020410 	.word	0x40020410
 8103a40:	40020428 	.word	0x40020428
 8103a44:	40020440 	.word	0x40020440
 8103a48:	40020458 	.word	0x40020458
 8103a4c:	40020470 	.word	0x40020470
 8103a50:	40020488 	.word	0x40020488
 8103a54:	400204a0 	.word	0x400204a0
 8103a58:	400204b8 	.word	0x400204b8
 8103a5c:	687b      	ldr	r3, [r7, #4]
 8103a5e:	681b      	ldr	r3, [r3, #0]
 8103a60:	681b      	ldr	r3, [r3, #0]
 8103a62:	f003 0308 	and.w	r3, r3, #8
 8103a66:	2b00      	cmp	r3, #0
 8103a68:	bf14      	ite	ne
 8103a6a:	2301      	movne	r3, #1
 8103a6c:	2300      	moveq	r3, #0
 8103a6e:	b2db      	uxtb	r3, r3
 8103a70:	2b00      	cmp	r3, #0
 8103a72:	d015      	beq.n	8103aa0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8103a74:	687b      	ldr	r3, [r7, #4]
 8103a76:	681b      	ldr	r3, [r3, #0]
 8103a78:	681a      	ldr	r2, [r3, #0]
 8103a7a:	687b      	ldr	r3, [r7, #4]
 8103a7c:	681b      	ldr	r3, [r3, #0]
 8103a7e:	f022 0204 	bic.w	r2, r2, #4
 8103a82:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103a84:	687b      	ldr	r3, [r7, #4]
 8103a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103a88:	f003 031f 	and.w	r3, r3, #31
 8103a8c:	2208      	movs	r2, #8
 8103a8e:	409a      	lsls	r2, r3
 8103a90:	6a3b      	ldr	r3, [r7, #32]
 8103a92:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8103a94:	687b      	ldr	r3, [r7, #4]
 8103a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103a98:	f043 0201 	orr.w	r2, r3, #1
 8103a9c:	687b      	ldr	r3, [r7, #4]
 8103a9e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103aa0:	687b      	ldr	r3, [r7, #4]
 8103aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103aa4:	f003 031f 	and.w	r3, r3, #31
 8103aa8:	69ba      	ldr	r2, [r7, #24]
 8103aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8103aae:	f003 0301 	and.w	r3, r3, #1
 8103ab2:	2b00      	cmp	r3, #0
 8103ab4:	d06e      	beq.n	8103b94 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8103ab6:	687b      	ldr	r3, [r7, #4]
 8103ab8:	681b      	ldr	r3, [r3, #0]
 8103aba:	4a69      	ldr	r2, [pc, #420]	; (8103c60 <HAL_DMA_IRQHandler+0x3f8>)
 8103abc:	4293      	cmp	r3, r2
 8103abe:	d04a      	beq.n	8103b56 <HAL_DMA_IRQHandler+0x2ee>
 8103ac0:	687b      	ldr	r3, [r7, #4]
 8103ac2:	681b      	ldr	r3, [r3, #0]
 8103ac4:	4a67      	ldr	r2, [pc, #412]	; (8103c64 <HAL_DMA_IRQHandler+0x3fc>)
 8103ac6:	4293      	cmp	r3, r2
 8103ac8:	d045      	beq.n	8103b56 <HAL_DMA_IRQHandler+0x2ee>
 8103aca:	687b      	ldr	r3, [r7, #4]
 8103acc:	681b      	ldr	r3, [r3, #0]
 8103ace:	4a66      	ldr	r2, [pc, #408]	; (8103c68 <HAL_DMA_IRQHandler+0x400>)
 8103ad0:	4293      	cmp	r3, r2
 8103ad2:	d040      	beq.n	8103b56 <HAL_DMA_IRQHandler+0x2ee>
 8103ad4:	687b      	ldr	r3, [r7, #4]
 8103ad6:	681b      	ldr	r3, [r3, #0]
 8103ad8:	4a64      	ldr	r2, [pc, #400]	; (8103c6c <HAL_DMA_IRQHandler+0x404>)
 8103ada:	4293      	cmp	r3, r2
 8103adc:	d03b      	beq.n	8103b56 <HAL_DMA_IRQHandler+0x2ee>
 8103ade:	687b      	ldr	r3, [r7, #4]
 8103ae0:	681b      	ldr	r3, [r3, #0]
 8103ae2:	4a63      	ldr	r2, [pc, #396]	; (8103c70 <HAL_DMA_IRQHandler+0x408>)
 8103ae4:	4293      	cmp	r3, r2
 8103ae6:	d036      	beq.n	8103b56 <HAL_DMA_IRQHandler+0x2ee>
 8103ae8:	687b      	ldr	r3, [r7, #4]
 8103aea:	681b      	ldr	r3, [r3, #0]
 8103aec:	4a61      	ldr	r2, [pc, #388]	; (8103c74 <HAL_DMA_IRQHandler+0x40c>)
 8103aee:	4293      	cmp	r3, r2
 8103af0:	d031      	beq.n	8103b56 <HAL_DMA_IRQHandler+0x2ee>
 8103af2:	687b      	ldr	r3, [r7, #4]
 8103af4:	681b      	ldr	r3, [r3, #0]
 8103af6:	4a60      	ldr	r2, [pc, #384]	; (8103c78 <HAL_DMA_IRQHandler+0x410>)
 8103af8:	4293      	cmp	r3, r2
 8103afa:	d02c      	beq.n	8103b56 <HAL_DMA_IRQHandler+0x2ee>
 8103afc:	687b      	ldr	r3, [r7, #4]
 8103afe:	681b      	ldr	r3, [r3, #0]
 8103b00:	4a5e      	ldr	r2, [pc, #376]	; (8103c7c <HAL_DMA_IRQHandler+0x414>)
 8103b02:	4293      	cmp	r3, r2
 8103b04:	d027      	beq.n	8103b56 <HAL_DMA_IRQHandler+0x2ee>
 8103b06:	687b      	ldr	r3, [r7, #4]
 8103b08:	681b      	ldr	r3, [r3, #0]
 8103b0a:	4a5d      	ldr	r2, [pc, #372]	; (8103c80 <HAL_DMA_IRQHandler+0x418>)
 8103b0c:	4293      	cmp	r3, r2
 8103b0e:	d022      	beq.n	8103b56 <HAL_DMA_IRQHandler+0x2ee>
 8103b10:	687b      	ldr	r3, [r7, #4]
 8103b12:	681b      	ldr	r3, [r3, #0]
 8103b14:	4a5b      	ldr	r2, [pc, #364]	; (8103c84 <HAL_DMA_IRQHandler+0x41c>)
 8103b16:	4293      	cmp	r3, r2
 8103b18:	d01d      	beq.n	8103b56 <HAL_DMA_IRQHandler+0x2ee>
 8103b1a:	687b      	ldr	r3, [r7, #4]
 8103b1c:	681b      	ldr	r3, [r3, #0]
 8103b1e:	4a5a      	ldr	r2, [pc, #360]	; (8103c88 <HAL_DMA_IRQHandler+0x420>)
 8103b20:	4293      	cmp	r3, r2
 8103b22:	d018      	beq.n	8103b56 <HAL_DMA_IRQHandler+0x2ee>
 8103b24:	687b      	ldr	r3, [r7, #4]
 8103b26:	681b      	ldr	r3, [r3, #0]
 8103b28:	4a58      	ldr	r2, [pc, #352]	; (8103c8c <HAL_DMA_IRQHandler+0x424>)
 8103b2a:	4293      	cmp	r3, r2
 8103b2c:	d013      	beq.n	8103b56 <HAL_DMA_IRQHandler+0x2ee>
 8103b2e:	687b      	ldr	r3, [r7, #4]
 8103b30:	681b      	ldr	r3, [r3, #0]
 8103b32:	4a57      	ldr	r2, [pc, #348]	; (8103c90 <HAL_DMA_IRQHandler+0x428>)
 8103b34:	4293      	cmp	r3, r2
 8103b36:	d00e      	beq.n	8103b56 <HAL_DMA_IRQHandler+0x2ee>
 8103b38:	687b      	ldr	r3, [r7, #4]
 8103b3a:	681b      	ldr	r3, [r3, #0]
 8103b3c:	4a55      	ldr	r2, [pc, #340]	; (8103c94 <HAL_DMA_IRQHandler+0x42c>)
 8103b3e:	4293      	cmp	r3, r2
 8103b40:	d009      	beq.n	8103b56 <HAL_DMA_IRQHandler+0x2ee>
 8103b42:	687b      	ldr	r3, [r7, #4]
 8103b44:	681b      	ldr	r3, [r3, #0]
 8103b46:	4a54      	ldr	r2, [pc, #336]	; (8103c98 <HAL_DMA_IRQHandler+0x430>)
 8103b48:	4293      	cmp	r3, r2
 8103b4a:	d004      	beq.n	8103b56 <HAL_DMA_IRQHandler+0x2ee>
 8103b4c:	687b      	ldr	r3, [r7, #4]
 8103b4e:	681b      	ldr	r3, [r3, #0]
 8103b50:	4a52      	ldr	r2, [pc, #328]	; (8103c9c <HAL_DMA_IRQHandler+0x434>)
 8103b52:	4293      	cmp	r3, r2
 8103b54:	d10a      	bne.n	8103b6c <HAL_DMA_IRQHandler+0x304>
 8103b56:	687b      	ldr	r3, [r7, #4]
 8103b58:	681b      	ldr	r3, [r3, #0]
 8103b5a:	695b      	ldr	r3, [r3, #20]
 8103b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103b60:	2b00      	cmp	r3, #0
 8103b62:	bf14      	ite	ne
 8103b64:	2301      	movne	r3, #1
 8103b66:	2300      	moveq	r3, #0
 8103b68:	b2db      	uxtb	r3, r3
 8103b6a:	e003      	b.n	8103b74 <HAL_DMA_IRQHandler+0x30c>
 8103b6c:	687b      	ldr	r3, [r7, #4]
 8103b6e:	681b      	ldr	r3, [r3, #0]
 8103b70:	681b      	ldr	r3, [r3, #0]
 8103b72:	2300      	movs	r3, #0
 8103b74:	2b00      	cmp	r3, #0
 8103b76:	d00d      	beq.n	8103b94 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103b78:	687b      	ldr	r3, [r7, #4]
 8103b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103b7c:	f003 031f 	and.w	r3, r3, #31
 8103b80:	2201      	movs	r2, #1
 8103b82:	409a      	lsls	r2, r3
 8103b84:	6a3b      	ldr	r3, [r7, #32]
 8103b86:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8103b88:	687b      	ldr	r3, [r7, #4]
 8103b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103b8c:	f043 0202 	orr.w	r2, r3, #2
 8103b90:	687b      	ldr	r3, [r7, #4]
 8103b92:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103b94:	687b      	ldr	r3, [r7, #4]
 8103b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103b98:	f003 031f 	and.w	r3, r3, #31
 8103b9c:	2204      	movs	r2, #4
 8103b9e:	409a      	lsls	r2, r3
 8103ba0:	69bb      	ldr	r3, [r7, #24]
 8103ba2:	4013      	ands	r3, r2
 8103ba4:	2b00      	cmp	r3, #0
 8103ba6:	f000 808f 	beq.w	8103cc8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8103baa:	687b      	ldr	r3, [r7, #4]
 8103bac:	681b      	ldr	r3, [r3, #0]
 8103bae:	4a2c      	ldr	r2, [pc, #176]	; (8103c60 <HAL_DMA_IRQHandler+0x3f8>)
 8103bb0:	4293      	cmp	r3, r2
 8103bb2:	d04a      	beq.n	8103c4a <HAL_DMA_IRQHandler+0x3e2>
 8103bb4:	687b      	ldr	r3, [r7, #4]
 8103bb6:	681b      	ldr	r3, [r3, #0]
 8103bb8:	4a2a      	ldr	r2, [pc, #168]	; (8103c64 <HAL_DMA_IRQHandler+0x3fc>)
 8103bba:	4293      	cmp	r3, r2
 8103bbc:	d045      	beq.n	8103c4a <HAL_DMA_IRQHandler+0x3e2>
 8103bbe:	687b      	ldr	r3, [r7, #4]
 8103bc0:	681b      	ldr	r3, [r3, #0]
 8103bc2:	4a29      	ldr	r2, [pc, #164]	; (8103c68 <HAL_DMA_IRQHandler+0x400>)
 8103bc4:	4293      	cmp	r3, r2
 8103bc6:	d040      	beq.n	8103c4a <HAL_DMA_IRQHandler+0x3e2>
 8103bc8:	687b      	ldr	r3, [r7, #4]
 8103bca:	681b      	ldr	r3, [r3, #0]
 8103bcc:	4a27      	ldr	r2, [pc, #156]	; (8103c6c <HAL_DMA_IRQHandler+0x404>)
 8103bce:	4293      	cmp	r3, r2
 8103bd0:	d03b      	beq.n	8103c4a <HAL_DMA_IRQHandler+0x3e2>
 8103bd2:	687b      	ldr	r3, [r7, #4]
 8103bd4:	681b      	ldr	r3, [r3, #0]
 8103bd6:	4a26      	ldr	r2, [pc, #152]	; (8103c70 <HAL_DMA_IRQHandler+0x408>)
 8103bd8:	4293      	cmp	r3, r2
 8103bda:	d036      	beq.n	8103c4a <HAL_DMA_IRQHandler+0x3e2>
 8103bdc:	687b      	ldr	r3, [r7, #4]
 8103bde:	681b      	ldr	r3, [r3, #0]
 8103be0:	4a24      	ldr	r2, [pc, #144]	; (8103c74 <HAL_DMA_IRQHandler+0x40c>)
 8103be2:	4293      	cmp	r3, r2
 8103be4:	d031      	beq.n	8103c4a <HAL_DMA_IRQHandler+0x3e2>
 8103be6:	687b      	ldr	r3, [r7, #4]
 8103be8:	681b      	ldr	r3, [r3, #0]
 8103bea:	4a23      	ldr	r2, [pc, #140]	; (8103c78 <HAL_DMA_IRQHandler+0x410>)
 8103bec:	4293      	cmp	r3, r2
 8103bee:	d02c      	beq.n	8103c4a <HAL_DMA_IRQHandler+0x3e2>
 8103bf0:	687b      	ldr	r3, [r7, #4]
 8103bf2:	681b      	ldr	r3, [r3, #0]
 8103bf4:	4a21      	ldr	r2, [pc, #132]	; (8103c7c <HAL_DMA_IRQHandler+0x414>)
 8103bf6:	4293      	cmp	r3, r2
 8103bf8:	d027      	beq.n	8103c4a <HAL_DMA_IRQHandler+0x3e2>
 8103bfa:	687b      	ldr	r3, [r7, #4]
 8103bfc:	681b      	ldr	r3, [r3, #0]
 8103bfe:	4a20      	ldr	r2, [pc, #128]	; (8103c80 <HAL_DMA_IRQHandler+0x418>)
 8103c00:	4293      	cmp	r3, r2
 8103c02:	d022      	beq.n	8103c4a <HAL_DMA_IRQHandler+0x3e2>
 8103c04:	687b      	ldr	r3, [r7, #4]
 8103c06:	681b      	ldr	r3, [r3, #0]
 8103c08:	4a1e      	ldr	r2, [pc, #120]	; (8103c84 <HAL_DMA_IRQHandler+0x41c>)
 8103c0a:	4293      	cmp	r3, r2
 8103c0c:	d01d      	beq.n	8103c4a <HAL_DMA_IRQHandler+0x3e2>
 8103c0e:	687b      	ldr	r3, [r7, #4]
 8103c10:	681b      	ldr	r3, [r3, #0]
 8103c12:	4a1d      	ldr	r2, [pc, #116]	; (8103c88 <HAL_DMA_IRQHandler+0x420>)
 8103c14:	4293      	cmp	r3, r2
 8103c16:	d018      	beq.n	8103c4a <HAL_DMA_IRQHandler+0x3e2>
 8103c18:	687b      	ldr	r3, [r7, #4]
 8103c1a:	681b      	ldr	r3, [r3, #0]
 8103c1c:	4a1b      	ldr	r2, [pc, #108]	; (8103c8c <HAL_DMA_IRQHandler+0x424>)
 8103c1e:	4293      	cmp	r3, r2
 8103c20:	d013      	beq.n	8103c4a <HAL_DMA_IRQHandler+0x3e2>
 8103c22:	687b      	ldr	r3, [r7, #4]
 8103c24:	681b      	ldr	r3, [r3, #0]
 8103c26:	4a1a      	ldr	r2, [pc, #104]	; (8103c90 <HAL_DMA_IRQHandler+0x428>)
 8103c28:	4293      	cmp	r3, r2
 8103c2a:	d00e      	beq.n	8103c4a <HAL_DMA_IRQHandler+0x3e2>
 8103c2c:	687b      	ldr	r3, [r7, #4]
 8103c2e:	681b      	ldr	r3, [r3, #0]
 8103c30:	4a18      	ldr	r2, [pc, #96]	; (8103c94 <HAL_DMA_IRQHandler+0x42c>)
 8103c32:	4293      	cmp	r3, r2
 8103c34:	d009      	beq.n	8103c4a <HAL_DMA_IRQHandler+0x3e2>
 8103c36:	687b      	ldr	r3, [r7, #4]
 8103c38:	681b      	ldr	r3, [r3, #0]
 8103c3a:	4a17      	ldr	r2, [pc, #92]	; (8103c98 <HAL_DMA_IRQHandler+0x430>)
 8103c3c:	4293      	cmp	r3, r2
 8103c3e:	d004      	beq.n	8103c4a <HAL_DMA_IRQHandler+0x3e2>
 8103c40:	687b      	ldr	r3, [r7, #4]
 8103c42:	681b      	ldr	r3, [r3, #0]
 8103c44:	4a15      	ldr	r2, [pc, #84]	; (8103c9c <HAL_DMA_IRQHandler+0x434>)
 8103c46:	4293      	cmp	r3, r2
 8103c48:	d12a      	bne.n	8103ca0 <HAL_DMA_IRQHandler+0x438>
 8103c4a:	687b      	ldr	r3, [r7, #4]
 8103c4c:	681b      	ldr	r3, [r3, #0]
 8103c4e:	681b      	ldr	r3, [r3, #0]
 8103c50:	f003 0302 	and.w	r3, r3, #2
 8103c54:	2b00      	cmp	r3, #0
 8103c56:	bf14      	ite	ne
 8103c58:	2301      	movne	r3, #1
 8103c5a:	2300      	moveq	r3, #0
 8103c5c:	b2db      	uxtb	r3, r3
 8103c5e:	e023      	b.n	8103ca8 <HAL_DMA_IRQHandler+0x440>
 8103c60:	40020010 	.word	0x40020010
 8103c64:	40020028 	.word	0x40020028
 8103c68:	40020040 	.word	0x40020040
 8103c6c:	40020058 	.word	0x40020058
 8103c70:	40020070 	.word	0x40020070
 8103c74:	40020088 	.word	0x40020088
 8103c78:	400200a0 	.word	0x400200a0
 8103c7c:	400200b8 	.word	0x400200b8
 8103c80:	40020410 	.word	0x40020410
 8103c84:	40020428 	.word	0x40020428
 8103c88:	40020440 	.word	0x40020440
 8103c8c:	40020458 	.word	0x40020458
 8103c90:	40020470 	.word	0x40020470
 8103c94:	40020488 	.word	0x40020488
 8103c98:	400204a0 	.word	0x400204a0
 8103c9c:	400204b8 	.word	0x400204b8
 8103ca0:	687b      	ldr	r3, [r7, #4]
 8103ca2:	681b      	ldr	r3, [r3, #0]
 8103ca4:	681b      	ldr	r3, [r3, #0]
 8103ca6:	2300      	movs	r3, #0
 8103ca8:	2b00      	cmp	r3, #0
 8103caa:	d00d      	beq.n	8103cc8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103cac:	687b      	ldr	r3, [r7, #4]
 8103cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103cb0:	f003 031f 	and.w	r3, r3, #31
 8103cb4:	2204      	movs	r2, #4
 8103cb6:	409a      	lsls	r2, r3
 8103cb8:	6a3b      	ldr	r3, [r7, #32]
 8103cba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8103cbc:	687b      	ldr	r3, [r7, #4]
 8103cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103cc0:	f043 0204 	orr.w	r2, r3, #4
 8103cc4:	687b      	ldr	r3, [r7, #4]
 8103cc6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103cc8:	687b      	ldr	r3, [r7, #4]
 8103cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103ccc:	f003 031f 	and.w	r3, r3, #31
 8103cd0:	2210      	movs	r2, #16
 8103cd2:	409a      	lsls	r2, r3
 8103cd4:	69bb      	ldr	r3, [r7, #24]
 8103cd6:	4013      	ands	r3, r2
 8103cd8:	2b00      	cmp	r3, #0
 8103cda:	f000 80a6 	beq.w	8103e2a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8103cde:	687b      	ldr	r3, [r7, #4]
 8103ce0:	681b      	ldr	r3, [r3, #0]
 8103ce2:	4a85      	ldr	r2, [pc, #532]	; (8103ef8 <HAL_DMA_IRQHandler+0x690>)
 8103ce4:	4293      	cmp	r3, r2
 8103ce6:	d04a      	beq.n	8103d7e <HAL_DMA_IRQHandler+0x516>
 8103ce8:	687b      	ldr	r3, [r7, #4]
 8103cea:	681b      	ldr	r3, [r3, #0]
 8103cec:	4a83      	ldr	r2, [pc, #524]	; (8103efc <HAL_DMA_IRQHandler+0x694>)
 8103cee:	4293      	cmp	r3, r2
 8103cf0:	d045      	beq.n	8103d7e <HAL_DMA_IRQHandler+0x516>
 8103cf2:	687b      	ldr	r3, [r7, #4]
 8103cf4:	681b      	ldr	r3, [r3, #0]
 8103cf6:	4a82      	ldr	r2, [pc, #520]	; (8103f00 <HAL_DMA_IRQHandler+0x698>)
 8103cf8:	4293      	cmp	r3, r2
 8103cfa:	d040      	beq.n	8103d7e <HAL_DMA_IRQHandler+0x516>
 8103cfc:	687b      	ldr	r3, [r7, #4]
 8103cfe:	681b      	ldr	r3, [r3, #0]
 8103d00:	4a80      	ldr	r2, [pc, #512]	; (8103f04 <HAL_DMA_IRQHandler+0x69c>)
 8103d02:	4293      	cmp	r3, r2
 8103d04:	d03b      	beq.n	8103d7e <HAL_DMA_IRQHandler+0x516>
 8103d06:	687b      	ldr	r3, [r7, #4]
 8103d08:	681b      	ldr	r3, [r3, #0]
 8103d0a:	4a7f      	ldr	r2, [pc, #508]	; (8103f08 <HAL_DMA_IRQHandler+0x6a0>)
 8103d0c:	4293      	cmp	r3, r2
 8103d0e:	d036      	beq.n	8103d7e <HAL_DMA_IRQHandler+0x516>
 8103d10:	687b      	ldr	r3, [r7, #4]
 8103d12:	681b      	ldr	r3, [r3, #0]
 8103d14:	4a7d      	ldr	r2, [pc, #500]	; (8103f0c <HAL_DMA_IRQHandler+0x6a4>)
 8103d16:	4293      	cmp	r3, r2
 8103d18:	d031      	beq.n	8103d7e <HAL_DMA_IRQHandler+0x516>
 8103d1a:	687b      	ldr	r3, [r7, #4]
 8103d1c:	681b      	ldr	r3, [r3, #0]
 8103d1e:	4a7c      	ldr	r2, [pc, #496]	; (8103f10 <HAL_DMA_IRQHandler+0x6a8>)
 8103d20:	4293      	cmp	r3, r2
 8103d22:	d02c      	beq.n	8103d7e <HAL_DMA_IRQHandler+0x516>
 8103d24:	687b      	ldr	r3, [r7, #4]
 8103d26:	681b      	ldr	r3, [r3, #0]
 8103d28:	4a7a      	ldr	r2, [pc, #488]	; (8103f14 <HAL_DMA_IRQHandler+0x6ac>)
 8103d2a:	4293      	cmp	r3, r2
 8103d2c:	d027      	beq.n	8103d7e <HAL_DMA_IRQHandler+0x516>
 8103d2e:	687b      	ldr	r3, [r7, #4]
 8103d30:	681b      	ldr	r3, [r3, #0]
 8103d32:	4a79      	ldr	r2, [pc, #484]	; (8103f18 <HAL_DMA_IRQHandler+0x6b0>)
 8103d34:	4293      	cmp	r3, r2
 8103d36:	d022      	beq.n	8103d7e <HAL_DMA_IRQHandler+0x516>
 8103d38:	687b      	ldr	r3, [r7, #4]
 8103d3a:	681b      	ldr	r3, [r3, #0]
 8103d3c:	4a77      	ldr	r2, [pc, #476]	; (8103f1c <HAL_DMA_IRQHandler+0x6b4>)
 8103d3e:	4293      	cmp	r3, r2
 8103d40:	d01d      	beq.n	8103d7e <HAL_DMA_IRQHandler+0x516>
 8103d42:	687b      	ldr	r3, [r7, #4]
 8103d44:	681b      	ldr	r3, [r3, #0]
 8103d46:	4a76      	ldr	r2, [pc, #472]	; (8103f20 <HAL_DMA_IRQHandler+0x6b8>)
 8103d48:	4293      	cmp	r3, r2
 8103d4a:	d018      	beq.n	8103d7e <HAL_DMA_IRQHandler+0x516>
 8103d4c:	687b      	ldr	r3, [r7, #4]
 8103d4e:	681b      	ldr	r3, [r3, #0]
 8103d50:	4a74      	ldr	r2, [pc, #464]	; (8103f24 <HAL_DMA_IRQHandler+0x6bc>)
 8103d52:	4293      	cmp	r3, r2
 8103d54:	d013      	beq.n	8103d7e <HAL_DMA_IRQHandler+0x516>
 8103d56:	687b      	ldr	r3, [r7, #4]
 8103d58:	681b      	ldr	r3, [r3, #0]
 8103d5a:	4a73      	ldr	r2, [pc, #460]	; (8103f28 <HAL_DMA_IRQHandler+0x6c0>)
 8103d5c:	4293      	cmp	r3, r2
 8103d5e:	d00e      	beq.n	8103d7e <HAL_DMA_IRQHandler+0x516>
 8103d60:	687b      	ldr	r3, [r7, #4]
 8103d62:	681b      	ldr	r3, [r3, #0]
 8103d64:	4a71      	ldr	r2, [pc, #452]	; (8103f2c <HAL_DMA_IRQHandler+0x6c4>)
 8103d66:	4293      	cmp	r3, r2
 8103d68:	d009      	beq.n	8103d7e <HAL_DMA_IRQHandler+0x516>
 8103d6a:	687b      	ldr	r3, [r7, #4]
 8103d6c:	681b      	ldr	r3, [r3, #0]
 8103d6e:	4a70      	ldr	r2, [pc, #448]	; (8103f30 <HAL_DMA_IRQHandler+0x6c8>)
 8103d70:	4293      	cmp	r3, r2
 8103d72:	d004      	beq.n	8103d7e <HAL_DMA_IRQHandler+0x516>
 8103d74:	687b      	ldr	r3, [r7, #4]
 8103d76:	681b      	ldr	r3, [r3, #0]
 8103d78:	4a6e      	ldr	r2, [pc, #440]	; (8103f34 <HAL_DMA_IRQHandler+0x6cc>)
 8103d7a:	4293      	cmp	r3, r2
 8103d7c:	d10a      	bne.n	8103d94 <HAL_DMA_IRQHandler+0x52c>
 8103d7e:	687b      	ldr	r3, [r7, #4]
 8103d80:	681b      	ldr	r3, [r3, #0]
 8103d82:	681b      	ldr	r3, [r3, #0]
 8103d84:	f003 0308 	and.w	r3, r3, #8
 8103d88:	2b00      	cmp	r3, #0
 8103d8a:	bf14      	ite	ne
 8103d8c:	2301      	movne	r3, #1
 8103d8e:	2300      	moveq	r3, #0
 8103d90:	b2db      	uxtb	r3, r3
 8103d92:	e009      	b.n	8103da8 <HAL_DMA_IRQHandler+0x540>
 8103d94:	687b      	ldr	r3, [r7, #4]
 8103d96:	681b      	ldr	r3, [r3, #0]
 8103d98:	681b      	ldr	r3, [r3, #0]
 8103d9a:	f003 0304 	and.w	r3, r3, #4
 8103d9e:	2b00      	cmp	r3, #0
 8103da0:	bf14      	ite	ne
 8103da2:	2301      	movne	r3, #1
 8103da4:	2300      	moveq	r3, #0
 8103da6:	b2db      	uxtb	r3, r3
 8103da8:	2b00      	cmp	r3, #0
 8103daa:	d03e      	beq.n	8103e2a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103dac:	687b      	ldr	r3, [r7, #4]
 8103dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103db0:	f003 031f 	and.w	r3, r3, #31
 8103db4:	2210      	movs	r2, #16
 8103db6:	409a      	lsls	r2, r3
 8103db8:	6a3b      	ldr	r3, [r7, #32]
 8103dba:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8103dbc:	687b      	ldr	r3, [r7, #4]
 8103dbe:	681b      	ldr	r3, [r3, #0]
 8103dc0:	681b      	ldr	r3, [r3, #0]
 8103dc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8103dc6:	2b00      	cmp	r3, #0
 8103dc8:	d018      	beq.n	8103dfc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8103dca:	687b      	ldr	r3, [r7, #4]
 8103dcc:	681b      	ldr	r3, [r3, #0]
 8103dce:	681b      	ldr	r3, [r3, #0]
 8103dd0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8103dd4:	2b00      	cmp	r3, #0
 8103dd6:	d108      	bne.n	8103dea <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8103dd8:	687b      	ldr	r3, [r7, #4]
 8103dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103ddc:	2b00      	cmp	r3, #0
 8103dde:	d024      	beq.n	8103e2a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8103de0:	687b      	ldr	r3, [r7, #4]
 8103de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103de4:	6878      	ldr	r0, [r7, #4]
 8103de6:	4798      	blx	r3
 8103de8:	e01f      	b.n	8103e2a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8103dea:	687b      	ldr	r3, [r7, #4]
 8103dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103dee:	2b00      	cmp	r3, #0
 8103df0:	d01b      	beq.n	8103e2a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8103df2:	687b      	ldr	r3, [r7, #4]
 8103df4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103df6:	6878      	ldr	r0, [r7, #4]
 8103df8:	4798      	blx	r3
 8103dfa:	e016      	b.n	8103e2a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8103dfc:	687b      	ldr	r3, [r7, #4]
 8103dfe:	681b      	ldr	r3, [r3, #0]
 8103e00:	681b      	ldr	r3, [r3, #0]
 8103e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103e06:	2b00      	cmp	r3, #0
 8103e08:	d107      	bne.n	8103e1a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8103e0a:	687b      	ldr	r3, [r7, #4]
 8103e0c:	681b      	ldr	r3, [r3, #0]
 8103e0e:	681a      	ldr	r2, [r3, #0]
 8103e10:	687b      	ldr	r3, [r7, #4]
 8103e12:	681b      	ldr	r3, [r3, #0]
 8103e14:	f022 0208 	bic.w	r2, r2, #8
 8103e18:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8103e1a:	687b      	ldr	r3, [r7, #4]
 8103e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103e1e:	2b00      	cmp	r3, #0
 8103e20:	d003      	beq.n	8103e2a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8103e22:	687b      	ldr	r3, [r7, #4]
 8103e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103e26:	6878      	ldr	r0, [r7, #4]
 8103e28:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103e2a:	687b      	ldr	r3, [r7, #4]
 8103e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103e2e:	f003 031f 	and.w	r3, r3, #31
 8103e32:	2220      	movs	r2, #32
 8103e34:	409a      	lsls	r2, r3
 8103e36:	69bb      	ldr	r3, [r7, #24]
 8103e38:	4013      	ands	r3, r2
 8103e3a:	2b00      	cmp	r3, #0
 8103e3c:	f000 8110 	beq.w	8104060 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8103e40:	687b      	ldr	r3, [r7, #4]
 8103e42:	681b      	ldr	r3, [r3, #0]
 8103e44:	4a2c      	ldr	r2, [pc, #176]	; (8103ef8 <HAL_DMA_IRQHandler+0x690>)
 8103e46:	4293      	cmp	r3, r2
 8103e48:	d04a      	beq.n	8103ee0 <HAL_DMA_IRQHandler+0x678>
 8103e4a:	687b      	ldr	r3, [r7, #4]
 8103e4c:	681b      	ldr	r3, [r3, #0]
 8103e4e:	4a2b      	ldr	r2, [pc, #172]	; (8103efc <HAL_DMA_IRQHandler+0x694>)
 8103e50:	4293      	cmp	r3, r2
 8103e52:	d045      	beq.n	8103ee0 <HAL_DMA_IRQHandler+0x678>
 8103e54:	687b      	ldr	r3, [r7, #4]
 8103e56:	681b      	ldr	r3, [r3, #0]
 8103e58:	4a29      	ldr	r2, [pc, #164]	; (8103f00 <HAL_DMA_IRQHandler+0x698>)
 8103e5a:	4293      	cmp	r3, r2
 8103e5c:	d040      	beq.n	8103ee0 <HAL_DMA_IRQHandler+0x678>
 8103e5e:	687b      	ldr	r3, [r7, #4]
 8103e60:	681b      	ldr	r3, [r3, #0]
 8103e62:	4a28      	ldr	r2, [pc, #160]	; (8103f04 <HAL_DMA_IRQHandler+0x69c>)
 8103e64:	4293      	cmp	r3, r2
 8103e66:	d03b      	beq.n	8103ee0 <HAL_DMA_IRQHandler+0x678>
 8103e68:	687b      	ldr	r3, [r7, #4]
 8103e6a:	681b      	ldr	r3, [r3, #0]
 8103e6c:	4a26      	ldr	r2, [pc, #152]	; (8103f08 <HAL_DMA_IRQHandler+0x6a0>)
 8103e6e:	4293      	cmp	r3, r2
 8103e70:	d036      	beq.n	8103ee0 <HAL_DMA_IRQHandler+0x678>
 8103e72:	687b      	ldr	r3, [r7, #4]
 8103e74:	681b      	ldr	r3, [r3, #0]
 8103e76:	4a25      	ldr	r2, [pc, #148]	; (8103f0c <HAL_DMA_IRQHandler+0x6a4>)
 8103e78:	4293      	cmp	r3, r2
 8103e7a:	d031      	beq.n	8103ee0 <HAL_DMA_IRQHandler+0x678>
 8103e7c:	687b      	ldr	r3, [r7, #4]
 8103e7e:	681b      	ldr	r3, [r3, #0]
 8103e80:	4a23      	ldr	r2, [pc, #140]	; (8103f10 <HAL_DMA_IRQHandler+0x6a8>)
 8103e82:	4293      	cmp	r3, r2
 8103e84:	d02c      	beq.n	8103ee0 <HAL_DMA_IRQHandler+0x678>
 8103e86:	687b      	ldr	r3, [r7, #4]
 8103e88:	681b      	ldr	r3, [r3, #0]
 8103e8a:	4a22      	ldr	r2, [pc, #136]	; (8103f14 <HAL_DMA_IRQHandler+0x6ac>)
 8103e8c:	4293      	cmp	r3, r2
 8103e8e:	d027      	beq.n	8103ee0 <HAL_DMA_IRQHandler+0x678>
 8103e90:	687b      	ldr	r3, [r7, #4]
 8103e92:	681b      	ldr	r3, [r3, #0]
 8103e94:	4a20      	ldr	r2, [pc, #128]	; (8103f18 <HAL_DMA_IRQHandler+0x6b0>)
 8103e96:	4293      	cmp	r3, r2
 8103e98:	d022      	beq.n	8103ee0 <HAL_DMA_IRQHandler+0x678>
 8103e9a:	687b      	ldr	r3, [r7, #4]
 8103e9c:	681b      	ldr	r3, [r3, #0]
 8103e9e:	4a1f      	ldr	r2, [pc, #124]	; (8103f1c <HAL_DMA_IRQHandler+0x6b4>)
 8103ea0:	4293      	cmp	r3, r2
 8103ea2:	d01d      	beq.n	8103ee0 <HAL_DMA_IRQHandler+0x678>
 8103ea4:	687b      	ldr	r3, [r7, #4]
 8103ea6:	681b      	ldr	r3, [r3, #0]
 8103ea8:	4a1d      	ldr	r2, [pc, #116]	; (8103f20 <HAL_DMA_IRQHandler+0x6b8>)
 8103eaa:	4293      	cmp	r3, r2
 8103eac:	d018      	beq.n	8103ee0 <HAL_DMA_IRQHandler+0x678>
 8103eae:	687b      	ldr	r3, [r7, #4]
 8103eb0:	681b      	ldr	r3, [r3, #0]
 8103eb2:	4a1c      	ldr	r2, [pc, #112]	; (8103f24 <HAL_DMA_IRQHandler+0x6bc>)
 8103eb4:	4293      	cmp	r3, r2
 8103eb6:	d013      	beq.n	8103ee0 <HAL_DMA_IRQHandler+0x678>
 8103eb8:	687b      	ldr	r3, [r7, #4]
 8103eba:	681b      	ldr	r3, [r3, #0]
 8103ebc:	4a1a      	ldr	r2, [pc, #104]	; (8103f28 <HAL_DMA_IRQHandler+0x6c0>)
 8103ebe:	4293      	cmp	r3, r2
 8103ec0:	d00e      	beq.n	8103ee0 <HAL_DMA_IRQHandler+0x678>
 8103ec2:	687b      	ldr	r3, [r7, #4]
 8103ec4:	681b      	ldr	r3, [r3, #0]
 8103ec6:	4a19      	ldr	r2, [pc, #100]	; (8103f2c <HAL_DMA_IRQHandler+0x6c4>)
 8103ec8:	4293      	cmp	r3, r2
 8103eca:	d009      	beq.n	8103ee0 <HAL_DMA_IRQHandler+0x678>
 8103ecc:	687b      	ldr	r3, [r7, #4]
 8103ece:	681b      	ldr	r3, [r3, #0]
 8103ed0:	4a17      	ldr	r2, [pc, #92]	; (8103f30 <HAL_DMA_IRQHandler+0x6c8>)
 8103ed2:	4293      	cmp	r3, r2
 8103ed4:	d004      	beq.n	8103ee0 <HAL_DMA_IRQHandler+0x678>
 8103ed6:	687b      	ldr	r3, [r7, #4]
 8103ed8:	681b      	ldr	r3, [r3, #0]
 8103eda:	4a16      	ldr	r2, [pc, #88]	; (8103f34 <HAL_DMA_IRQHandler+0x6cc>)
 8103edc:	4293      	cmp	r3, r2
 8103ede:	d12b      	bne.n	8103f38 <HAL_DMA_IRQHandler+0x6d0>
 8103ee0:	687b      	ldr	r3, [r7, #4]
 8103ee2:	681b      	ldr	r3, [r3, #0]
 8103ee4:	681b      	ldr	r3, [r3, #0]
 8103ee6:	f003 0310 	and.w	r3, r3, #16
 8103eea:	2b00      	cmp	r3, #0
 8103eec:	bf14      	ite	ne
 8103eee:	2301      	movne	r3, #1
 8103ef0:	2300      	moveq	r3, #0
 8103ef2:	b2db      	uxtb	r3, r3
 8103ef4:	e02a      	b.n	8103f4c <HAL_DMA_IRQHandler+0x6e4>
 8103ef6:	bf00      	nop
 8103ef8:	40020010 	.word	0x40020010
 8103efc:	40020028 	.word	0x40020028
 8103f00:	40020040 	.word	0x40020040
 8103f04:	40020058 	.word	0x40020058
 8103f08:	40020070 	.word	0x40020070
 8103f0c:	40020088 	.word	0x40020088
 8103f10:	400200a0 	.word	0x400200a0
 8103f14:	400200b8 	.word	0x400200b8
 8103f18:	40020410 	.word	0x40020410
 8103f1c:	40020428 	.word	0x40020428
 8103f20:	40020440 	.word	0x40020440
 8103f24:	40020458 	.word	0x40020458
 8103f28:	40020470 	.word	0x40020470
 8103f2c:	40020488 	.word	0x40020488
 8103f30:	400204a0 	.word	0x400204a0
 8103f34:	400204b8 	.word	0x400204b8
 8103f38:	687b      	ldr	r3, [r7, #4]
 8103f3a:	681b      	ldr	r3, [r3, #0]
 8103f3c:	681b      	ldr	r3, [r3, #0]
 8103f3e:	f003 0302 	and.w	r3, r3, #2
 8103f42:	2b00      	cmp	r3, #0
 8103f44:	bf14      	ite	ne
 8103f46:	2301      	movne	r3, #1
 8103f48:	2300      	moveq	r3, #0
 8103f4a:	b2db      	uxtb	r3, r3
 8103f4c:	2b00      	cmp	r3, #0
 8103f4e:	f000 8087 	beq.w	8104060 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103f52:	687b      	ldr	r3, [r7, #4]
 8103f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103f56:	f003 031f 	and.w	r3, r3, #31
 8103f5a:	2220      	movs	r2, #32
 8103f5c:	409a      	lsls	r2, r3
 8103f5e:	6a3b      	ldr	r3, [r7, #32]
 8103f60:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8103f62:	687b      	ldr	r3, [r7, #4]
 8103f64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8103f68:	b2db      	uxtb	r3, r3
 8103f6a:	2b04      	cmp	r3, #4
 8103f6c:	d139      	bne.n	8103fe2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8103f6e:	687b      	ldr	r3, [r7, #4]
 8103f70:	681b      	ldr	r3, [r3, #0]
 8103f72:	681a      	ldr	r2, [r3, #0]
 8103f74:	687b      	ldr	r3, [r7, #4]
 8103f76:	681b      	ldr	r3, [r3, #0]
 8103f78:	f022 0216 	bic.w	r2, r2, #22
 8103f7c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8103f7e:	687b      	ldr	r3, [r7, #4]
 8103f80:	681b      	ldr	r3, [r3, #0]
 8103f82:	695a      	ldr	r2, [r3, #20]
 8103f84:	687b      	ldr	r3, [r7, #4]
 8103f86:	681b      	ldr	r3, [r3, #0]
 8103f88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8103f8c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8103f8e:	687b      	ldr	r3, [r7, #4]
 8103f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103f92:	2b00      	cmp	r3, #0
 8103f94:	d103      	bne.n	8103f9e <HAL_DMA_IRQHandler+0x736>
 8103f96:	687b      	ldr	r3, [r7, #4]
 8103f98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103f9a:	2b00      	cmp	r3, #0
 8103f9c:	d007      	beq.n	8103fae <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8103f9e:	687b      	ldr	r3, [r7, #4]
 8103fa0:	681b      	ldr	r3, [r3, #0]
 8103fa2:	681a      	ldr	r2, [r3, #0]
 8103fa4:	687b      	ldr	r3, [r7, #4]
 8103fa6:	681b      	ldr	r3, [r3, #0]
 8103fa8:	f022 0208 	bic.w	r2, r2, #8
 8103fac:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8103fae:	687b      	ldr	r3, [r7, #4]
 8103fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103fb2:	f003 031f 	and.w	r3, r3, #31
 8103fb6:	223f      	movs	r2, #63	; 0x3f
 8103fb8:	409a      	lsls	r2, r3
 8103fba:	6a3b      	ldr	r3, [r7, #32]
 8103fbc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8103fbe:	687b      	ldr	r3, [r7, #4]
 8103fc0:	2201      	movs	r2, #1
 8103fc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8103fc6:	687b      	ldr	r3, [r7, #4]
 8103fc8:	2200      	movs	r2, #0
 8103fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8103fce:	687b      	ldr	r3, [r7, #4]
 8103fd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103fd2:	2b00      	cmp	r3, #0
 8103fd4:	f000 834a 	beq.w	810466c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8103fd8:	687b      	ldr	r3, [r7, #4]
 8103fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103fdc:	6878      	ldr	r0, [r7, #4]
 8103fde:	4798      	blx	r3
          }
          return;
 8103fe0:	e344      	b.n	810466c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8103fe2:	687b      	ldr	r3, [r7, #4]
 8103fe4:	681b      	ldr	r3, [r3, #0]
 8103fe6:	681b      	ldr	r3, [r3, #0]
 8103fe8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8103fec:	2b00      	cmp	r3, #0
 8103fee:	d018      	beq.n	8104022 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8103ff0:	687b      	ldr	r3, [r7, #4]
 8103ff2:	681b      	ldr	r3, [r3, #0]
 8103ff4:	681b      	ldr	r3, [r3, #0]
 8103ff6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8103ffa:	2b00      	cmp	r3, #0
 8103ffc:	d108      	bne.n	8104010 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8103ffe:	687b      	ldr	r3, [r7, #4]
 8104000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104002:	2b00      	cmp	r3, #0
 8104004:	d02c      	beq.n	8104060 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8104006:	687b      	ldr	r3, [r7, #4]
 8104008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810400a:	6878      	ldr	r0, [r7, #4]
 810400c:	4798      	blx	r3
 810400e:	e027      	b.n	8104060 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8104010:	687b      	ldr	r3, [r7, #4]
 8104012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104014:	2b00      	cmp	r3, #0
 8104016:	d023      	beq.n	8104060 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8104018:	687b      	ldr	r3, [r7, #4]
 810401a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810401c:	6878      	ldr	r0, [r7, #4]
 810401e:	4798      	blx	r3
 8104020:	e01e      	b.n	8104060 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8104022:	687b      	ldr	r3, [r7, #4]
 8104024:	681b      	ldr	r3, [r3, #0]
 8104026:	681b      	ldr	r3, [r3, #0]
 8104028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810402c:	2b00      	cmp	r3, #0
 810402e:	d10f      	bne.n	8104050 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8104030:	687b      	ldr	r3, [r7, #4]
 8104032:	681b      	ldr	r3, [r3, #0]
 8104034:	681a      	ldr	r2, [r3, #0]
 8104036:	687b      	ldr	r3, [r7, #4]
 8104038:	681b      	ldr	r3, [r3, #0]
 810403a:	f022 0210 	bic.w	r2, r2, #16
 810403e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8104040:	687b      	ldr	r3, [r7, #4]
 8104042:	2201      	movs	r2, #1
 8104044:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8104048:	687b      	ldr	r3, [r7, #4]
 810404a:	2200      	movs	r2, #0
 810404c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8104050:	687b      	ldr	r3, [r7, #4]
 8104052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104054:	2b00      	cmp	r3, #0
 8104056:	d003      	beq.n	8104060 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8104058:	687b      	ldr	r3, [r7, #4]
 810405a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810405c:	6878      	ldr	r0, [r7, #4]
 810405e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8104060:	687b      	ldr	r3, [r7, #4]
 8104062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104064:	2b00      	cmp	r3, #0
 8104066:	f000 8306 	beq.w	8104676 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 810406a:	687b      	ldr	r3, [r7, #4]
 810406c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810406e:	f003 0301 	and.w	r3, r3, #1
 8104072:	2b00      	cmp	r3, #0
 8104074:	f000 8088 	beq.w	8104188 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8104078:	687b      	ldr	r3, [r7, #4]
 810407a:	2204      	movs	r2, #4
 810407c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8104080:	687b      	ldr	r3, [r7, #4]
 8104082:	681b      	ldr	r3, [r3, #0]
 8104084:	4a7a      	ldr	r2, [pc, #488]	; (8104270 <HAL_DMA_IRQHandler+0xa08>)
 8104086:	4293      	cmp	r3, r2
 8104088:	d04a      	beq.n	8104120 <HAL_DMA_IRQHandler+0x8b8>
 810408a:	687b      	ldr	r3, [r7, #4]
 810408c:	681b      	ldr	r3, [r3, #0]
 810408e:	4a79      	ldr	r2, [pc, #484]	; (8104274 <HAL_DMA_IRQHandler+0xa0c>)
 8104090:	4293      	cmp	r3, r2
 8104092:	d045      	beq.n	8104120 <HAL_DMA_IRQHandler+0x8b8>
 8104094:	687b      	ldr	r3, [r7, #4]
 8104096:	681b      	ldr	r3, [r3, #0]
 8104098:	4a77      	ldr	r2, [pc, #476]	; (8104278 <HAL_DMA_IRQHandler+0xa10>)
 810409a:	4293      	cmp	r3, r2
 810409c:	d040      	beq.n	8104120 <HAL_DMA_IRQHandler+0x8b8>
 810409e:	687b      	ldr	r3, [r7, #4]
 81040a0:	681b      	ldr	r3, [r3, #0]
 81040a2:	4a76      	ldr	r2, [pc, #472]	; (810427c <HAL_DMA_IRQHandler+0xa14>)
 81040a4:	4293      	cmp	r3, r2
 81040a6:	d03b      	beq.n	8104120 <HAL_DMA_IRQHandler+0x8b8>
 81040a8:	687b      	ldr	r3, [r7, #4]
 81040aa:	681b      	ldr	r3, [r3, #0]
 81040ac:	4a74      	ldr	r2, [pc, #464]	; (8104280 <HAL_DMA_IRQHandler+0xa18>)
 81040ae:	4293      	cmp	r3, r2
 81040b0:	d036      	beq.n	8104120 <HAL_DMA_IRQHandler+0x8b8>
 81040b2:	687b      	ldr	r3, [r7, #4]
 81040b4:	681b      	ldr	r3, [r3, #0]
 81040b6:	4a73      	ldr	r2, [pc, #460]	; (8104284 <HAL_DMA_IRQHandler+0xa1c>)
 81040b8:	4293      	cmp	r3, r2
 81040ba:	d031      	beq.n	8104120 <HAL_DMA_IRQHandler+0x8b8>
 81040bc:	687b      	ldr	r3, [r7, #4]
 81040be:	681b      	ldr	r3, [r3, #0]
 81040c0:	4a71      	ldr	r2, [pc, #452]	; (8104288 <HAL_DMA_IRQHandler+0xa20>)
 81040c2:	4293      	cmp	r3, r2
 81040c4:	d02c      	beq.n	8104120 <HAL_DMA_IRQHandler+0x8b8>
 81040c6:	687b      	ldr	r3, [r7, #4]
 81040c8:	681b      	ldr	r3, [r3, #0]
 81040ca:	4a70      	ldr	r2, [pc, #448]	; (810428c <HAL_DMA_IRQHandler+0xa24>)
 81040cc:	4293      	cmp	r3, r2
 81040ce:	d027      	beq.n	8104120 <HAL_DMA_IRQHandler+0x8b8>
 81040d0:	687b      	ldr	r3, [r7, #4]
 81040d2:	681b      	ldr	r3, [r3, #0]
 81040d4:	4a6e      	ldr	r2, [pc, #440]	; (8104290 <HAL_DMA_IRQHandler+0xa28>)
 81040d6:	4293      	cmp	r3, r2
 81040d8:	d022      	beq.n	8104120 <HAL_DMA_IRQHandler+0x8b8>
 81040da:	687b      	ldr	r3, [r7, #4]
 81040dc:	681b      	ldr	r3, [r3, #0]
 81040de:	4a6d      	ldr	r2, [pc, #436]	; (8104294 <HAL_DMA_IRQHandler+0xa2c>)
 81040e0:	4293      	cmp	r3, r2
 81040e2:	d01d      	beq.n	8104120 <HAL_DMA_IRQHandler+0x8b8>
 81040e4:	687b      	ldr	r3, [r7, #4]
 81040e6:	681b      	ldr	r3, [r3, #0]
 81040e8:	4a6b      	ldr	r2, [pc, #428]	; (8104298 <HAL_DMA_IRQHandler+0xa30>)
 81040ea:	4293      	cmp	r3, r2
 81040ec:	d018      	beq.n	8104120 <HAL_DMA_IRQHandler+0x8b8>
 81040ee:	687b      	ldr	r3, [r7, #4]
 81040f0:	681b      	ldr	r3, [r3, #0]
 81040f2:	4a6a      	ldr	r2, [pc, #424]	; (810429c <HAL_DMA_IRQHandler+0xa34>)
 81040f4:	4293      	cmp	r3, r2
 81040f6:	d013      	beq.n	8104120 <HAL_DMA_IRQHandler+0x8b8>
 81040f8:	687b      	ldr	r3, [r7, #4]
 81040fa:	681b      	ldr	r3, [r3, #0]
 81040fc:	4a68      	ldr	r2, [pc, #416]	; (81042a0 <HAL_DMA_IRQHandler+0xa38>)
 81040fe:	4293      	cmp	r3, r2
 8104100:	d00e      	beq.n	8104120 <HAL_DMA_IRQHandler+0x8b8>
 8104102:	687b      	ldr	r3, [r7, #4]
 8104104:	681b      	ldr	r3, [r3, #0]
 8104106:	4a67      	ldr	r2, [pc, #412]	; (81042a4 <HAL_DMA_IRQHandler+0xa3c>)
 8104108:	4293      	cmp	r3, r2
 810410a:	d009      	beq.n	8104120 <HAL_DMA_IRQHandler+0x8b8>
 810410c:	687b      	ldr	r3, [r7, #4]
 810410e:	681b      	ldr	r3, [r3, #0]
 8104110:	4a65      	ldr	r2, [pc, #404]	; (81042a8 <HAL_DMA_IRQHandler+0xa40>)
 8104112:	4293      	cmp	r3, r2
 8104114:	d004      	beq.n	8104120 <HAL_DMA_IRQHandler+0x8b8>
 8104116:	687b      	ldr	r3, [r7, #4]
 8104118:	681b      	ldr	r3, [r3, #0]
 810411a:	4a64      	ldr	r2, [pc, #400]	; (81042ac <HAL_DMA_IRQHandler+0xa44>)
 810411c:	4293      	cmp	r3, r2
 810411e:	d108      	bne.n	8104132 <HAL_DMA_IRQHandler+0x8ca>
 8104120:	687b      	ldr	r3, [r7, #4]
 8104122:	681b      	ldr	r3, [r3, #0]
 8104124:	681a      	ldr	r2, [r3, #0]
 8104126:	687b      	ldr	r3, [r7, #4]
 8104128:	681b      	ldr	r3, [r3, #0]
 810412a:	f022 0201 	bic.w	r2, r2, #1
 810412e:	601a      	str	r2, [r3, #0]
 8104130:	e007      	b.n	8104142 <HAL_DMA_IRQHandler+0x8da>
 8104132:	687b      	ldr	r3, [r7, #4]
 8104134:	681b      	ldr	r3, [r3, #0]
 8104136:	681a      	ldr	r2, [r3, #0]
 8104138:	687b      	ldr	r3, [r7, #4]
 810413a:	681b      	ldr	r3, [r3, #0]
 810413c:	f022 0201 	bic.w	r2, r2, #1
 8104140:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8104142:	68fb      	ldr	r3, [r7, #12]
 8104144:	3301      	adds	r3, #1
 8104146:	60fb      	str	r3, [r7, #12]
 8104148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810414a:	429a      	cmp	r2, r3
 810414c:	d307      	bcc.n	810415e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 810414e:	687b      	ldr	r3, [r7, #4]
 8104150:	681b      	ldr	r3, [r3, #0]
 8104152:	681b      	ldr	r3, [r3, #0]
 8104154:	f003 0301 	and.w	r3, r3, #1
 8104158:	2b00      	cmp	r3, #0
 810415a:	d1f2      	bne.n	8104142 <HAL_DMA_IRQHandler+0x8da>
 810415c:	e000      	b.n	8104160 <HAL_DMA_IRQHandler+0x8f8>
            break;
 810415e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8104160:	687b      	ldr	r3, [r7, #4]
 8104162:	681b      	ldr	r3, [r3, #0]
 8104164:	681b      	ldr	r3, [r3, #0]
 8104166:	f003 0301 	and.w	r3, r3, #1
 810416a:	2b00      	cmp	r3, #0
 810416c:	d004      	beq.n	8104178 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 810416e:	687b      	ldr	r3, [r7, #4]
 8104170:	2203      	movs	r2, #3
 8104172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8104176:	e003      	b.n	8104180 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8104178:	687b      	ldr	r3, [r7, #4]
 810417a:	2201      	movs	r2, #1
 810417c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8104180:	687b      	ldr	r3, [r7, #4]
 8104182:	2200      	movs	r2, #0
 8104184:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8104188:	687b      	ldr	r3, [r7, #4]
 810418a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810418c:	2b00      	cmp	r3, #0
 810418e:	f000 8272 	beq.w	8104676 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8104192:	687b      	ldr	r3, [r7, #4]
 8104194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104196:	6878      	ldr	r0, [r7, #4]
 8104198:	4798      	blx	r3
 810419a:	e26c      	b.n	8104676 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 810419c:	687b      	ldr	r3, [r7, #4]
 810419e:	681b      	ldr	r3, [r3, #0]
 81041a0:	4a43      	ldr	r2, [pc, #268]	; (81042b0 <HAL_DMA_IRQHandler+0xa48>)
 81041a2:	4293      	cmp	r3, r2
 81041a4:	d022      	beq.n	81041ec <HAL_DMA_IRQHandler+0x984>
 81041a6:	687b      	ldr	r3, [r7, #4]
 81041a8:	681b      	ldr	r3, [r3, #0]
 81041aa:	4a42      	ldr	r2, [pc, #264]	; (81042b4 <HAL_DMA_IRQHandler+0xa4c>)
 81041ac:	4293      	cmp	r3, r2
 81041ae:	d01d      	beq.n	81041ec <HAL_DMA_IRQHandler+0x984>
 81041b0:	687b      	ldr	r3, [r7, #4]
 81041b2:	681b      	ldr	r3, [r3, #0]
 81041b4:	4a40      	ldr	r2, [pc, #256]	; (81042b8 <HAL_DMA_IRQHandler+0xa50>)
 81041b6:	4293      	cmp	r3, r2
 81041b8:	d018      	beq.n	81041ec <HAL_DMA_IRQHandler+0x984>
 81041ba:	687b      	ldr	r3, [r7, #4]
 81041bc:	681b      	ldr	r3, [r3, #0]
 81041be:	4a3f      	ldr	r2, [pc, #252]	; (81042bc <HAL_DMA_IRQHandler+0xa54>)
 81041c0:	4293      	cmp	r3, r2
 81041c2:	d013      	beq.n	81041ec <HAL_DMA_IRQHandler+0x984>
 81041c4:	687b      	ldr	r3, [r7, #4]
 81041c6:	681b      	ldr	r3, [r3, #0]
 81041c8:	4a3d      	ldr	r2, [pc, #244]	; (81042c0 <HAL_DMA_IRQHandler+0xa58>)
 81041ca:	4293      	cmp	r3, r2
 81041cc:	d00e      	beq.n	81041ec <HAL_DMA_IRQHandler+0x984>
 81041ce:	687b      	ldr	r3, [r7, #4]
 81041d0:	681b      	ldr	r3, [r3, #0]
 81041d2:	4a3c      	ldr	r2, [pc, #240]	; (81042c4 <HAL_DMA_IRQHandler+0xa5c>)
 81041d4:	4293      	cmp	r3, r2
 81041d6:	d009      	beq.n	81041ec <HAL_DMA_IRQHandler+0x984>
 81041d8:	687b      	ldr	r3, [r7, #4]
 81041da:	681b      	ldr	r3, [r3, #0]
 81041dc:	4a3a      	ldr	r2, [pc, #232]	; (81042c8 <HAL_DMA_IRQHandler+0xa60>)
 81041de:	4293      	cmp	r3, r2
 81041e0:	d004      	beq.n	81041ec <HAL_DMA_IRQHandler+0x984>
 81041e2:	687b      	ldr	r3, [r7, #4]
 81041e4:	681b      	ldr	r3, [r3, #0]
 81041e6:	4a39      	ldr	r2, [pc, #228]	; (81042cc <HAL_DMA_IRQHandler+0xa64>)
 81041e8:	4293      	cmp	r3, r2
 81041ea:	d101      	bne.n	81041f0 <HAL_DMA_IRQHandler+0x988>
 81041ec:	2301      	movs	r3, #1
 81041ee:	e000      	b.n	81041f2 <HAL_DMA_IRQHandler+0x98a>
 81041f0:	2300      	movs	r3, #0
 81041f2:	2b00      	cmp	r3, #0
 81041f4:	f000 823f 	beq.w	8104676 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 81041f8:	687b      	ldr	r3, [r7, #4]
 81041fa:	681b      	ldr	r3, [r3, #0]
 81041fc:	681b      	ldr	r3, [r3, #0]
 81041fe:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8104200:	687b      	ldr	r3, [r7, #4]
 8104202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104204:	f003 031f 	and.w	r3, r3, #31
 8104208:	2204      	movs	r2, #4
 810420a:	409a      	lsls	r2, r3
 810420c:	697b      	ldr	r3, [r7, #20]
 810420e:	4013      	ands	r3, r2
 8104210:	2b00      	cmp	r3, #0
 8104212:	f000 80cd 	beq.w	81043b0 <HAL_DMA_IRQHandler+0xb48>
 8104216:	693b      	ldr	r3, [r7, #16]
 8104218:	f003 0304 	and.w	r3, r3, #4
 810421c:	2b00      	cmp	r3, #0
 810421e:	f000 80c7 	beq.w	81043b0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8104222:	687b      	ldr	r3, [r7, #4]
 8104224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104226:	f003 031f 	and.w	r3, r3, #31
 810422a:	2204      	movs	r2, #4
 810422c:	409a      	lsls	r2, r3
 810422e:	69fb      	ldr	r3, [r7, #28]
 8104230:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104232:	693b      	ldr	r3, [r7, #16]
 8104234:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8104238:	2b00      	cmp	r3, #0
 810423a:	d049      	beq.n	81042d0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 810423c:	693b      	ldr	r3, [r7, #16]
 810423e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8104242:	2b00      	cmp	r3, #0
 8104244:	d109      	bne.n	810425a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8104246:	687b      	ldr	r3, [r7, #4]
 8104248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810424a:	2b00      	cmp	r3, #0
 810424c:	f000 8210 	beq.w	8104670 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8104250:	687b      	ldr	r3, [r7, #4]
 8104252:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8104254:	6878      	ldr	r0, [r7, #4]
 8104256:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104258:	e20a      	b.n	8104670 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 810425a:	687b      	ldr	r3, [r7, #4]
 810425c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810425e:	2b00      	cmp	r3, #0
 8104260:	f000 8206 	beq.w	8104670 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8104264:	687b      	ldr	r3, [r7, #4]
 8104266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104268:	6878      	ldr	r0, [r7, #4]
 810426a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810426c:	e200      	b.n	8104670 <HAL_DMA_IRQHandler+0xe08>
 810426e:	bf00      	nop
 8104270:	40020010 	.word	0x40020010
 8104274:	40020028 	.word	0x40020028
 8104278:	40020040 	.word	0x40020040
 810427c:	40020058 	.word	0x40020058
 8104280:	40020070 	.word	0x40020070
 8104284:	40020088 	.word	0x40020088
 8104288:	400200a0 	.word	0x400200a0
 810428c:	400200b8 	.word	0x400200b8
 8104290:	40020410 	.word	0x40020410
 8104294:	40020428 	.word	0x40020428
 8104298:	40020440 	.word	0x40020440
 810429c:	40020458 	.word	0x40020458
 81042a0:	40020470 	.word	0x40020470
 81042a4:	40020488 	.word	0x40020488
 81042a8:	400204a0 	.word	0x400204a0
 81042ac:	400204b8 	.word	0x400204b8
 81042b0:	58025408 	.word	0x58025408
 81042b4:	5802541c 	.word	0x5802541c
 81042b8:	58025430 	.word	0x58025430
 81042bc:	58025444 	.word	0x58025444
 81042c0:	58025458 	.word	0x58025458
 81042c4:	5802546c 	.word	0x5802546c
 81042c8:	58025480 	.word	0x58025480
 81042cc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 81042d0:	693b      	ldr	r3, [r7, #16]
 81042d2:	f003 0320 	and.w	r3, r3, #32
 81042d6:	2b00      	cmp	r3, #0
 81042d8:	d160      	bne.n	810439c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 81042da:	687b      	ldr	r3, [r7, #4]
 81042dc:	681b      	ldr	r3, [r3, #0]
 81042de:	4a7f      	ldr	r2, [pc, #508]	; (81044dc <HAL_DMA_IRQHandler+0xc74>)
 81042e0:	4293      	cmp	r3, r2
 81042e2:	d04a      	beq.n	810437a <HAL_DMA_IRQHandler+0xb12>
 81042e4:	687b      	ldr	r3, [r7, #4]
 81042e6:	681b      	ldr	r3, [r3, #0]
 81042e8:	4a7d      	ldr	r2, [pc, #500]	; (81044e0 <HAL_DMA_IRQHandler+0xc78>)
 81042ea:	4293      	cmp	r3, r2
 81042ec:	d045      	beq.n	810437a <HAL_DMA_IRQHandler+0xb12>
 81042ee:	687b      	ldr	r3, [r7, #4]
 81042f0:	681b      	ldr	r3, [r3, #0]
 81042f2:	4a7c      	ldr	r2, [pc, #496]	; (81044e4 <HAL_DMA_IRQHandler+0xc7c>)
 81042f4:	4293      	cmp	r3, r2
 81042f6:	d040      	beq.n	810437a <HAL_DMA_IRQHandler+0xb12>
 81042f8:	687b      	ldr	r3, [r7, #4]
 81042fa:	681b      	ldr	r3, [r3, #0]
 81042fc:	4a7a      	ldr	r2, [pc, #488]	; (81044e8 <HAL_DMA_IRQHandler+0xc80>)
 81042fe:	4293      	cmp	r3, r2
 8104300:	d03b      	beq.n	810437a <HAL_DMA_IRQHandler+0xb12>
 8104302:	687b      	ldr	r3, [r7, #4]
 8104304:	681b      	ldr	r3, [r3, #0]
 8104306:	4a79      	ldr	r2, [pc, #484]	; (81044ec <HAL_DMA_IRQHandler+0xc84>)
 8104308:	4293      	cmp	r3, r2
 810430a:	d036      	beq.n	810437a <HAL_DMA_IRQHandler+0xb12>
 810430c:	687b      	ldr	r3, [r7, #4]
 810430e:	681b      	ldr	r3, [r3, #0]
 8104310:	4a77      	ldr	r2, [pc, #476]	; (81044f0 <HAL_DMA_IRQHandler+0xc88>)
 8104312:	4293      	cmp	r3, r2
 8104314:	d031      	beq.n	810437a <HAL_DMA_IRQHandler+0xb12>
 8104316:	687b      	ldr	r3, [r7, #4]
 8104318:	681b      	ldr	r3, [r3, #0]
 810431a:	4a76      	ldr	r2, [pc, #472]	; (81044f4 <HAL_DMA_IRQHandler+0xc8c>)
 810431c:	4293      	cmp	r3, r2
 810431e:	d02c      	beq.n	810437a <HAL_DMA_IRQHandler+0xb12>
 8104320:	687b      	ldr	r3, [r7, #4]
 8104322:	681b      	ldr	r3, [r3, #0]
 8104324:	4a74      	ldr	r2, [pc, #464]	; (81044f8 <HAL_DMA_IRQHandler+0xc90>)
 8104326:	4293      	cmp	r3, r2
 8104328:	d027      	beq.n	810437a <HAL_DMA_IRQHandler+0xb12>
 810432a:	687b      	ldr	r3, [r7, #4]
 810432c:	681b      	ldr	r3, [r3, #0]
 810432e:	4a73      	ldr	r2, [pc, #460]	; (81044fc <HAL_DMA_IRQHandler+0xc94>)
 8104330:	4293      	cmp	r3, r2
 8104332:	d022      	beq.n	810437a <HAL_DMA_IRQHandler+0xb12>
 8104334:	687b      	ldr	r3, [r7, #4]
 8104336:	681b      	ldr	r3, [r3, #0]
 8104338:	4a71      	ldr	r2, [pc, #452]	; (8104500 <HAL_DMA_IRQHandler+0xc98>)
 810433a:	4293      	cmp	r3, r2
 810433c:	d01d      	beq.n	810437a <HAL_DMA_IRQHandler+0xb12>
 810433e:	687b      	ldr	r3, [r7, #4]
 8104340:	681b      	ldr	r3, [r3, #0]
 8104342:	4a70      	ldr	r2, [pc, #448]	; (8104504 <HAL_DMA_IRQHandler+0xc9c>)
 8104344:	4293      	cmp	r3, r2
 8104346:	d018      	beq.n	810437a <HAL_DMA_IRQHandler+0xb12>
 8104348:	687b      	ldr	r3, [r7, #4]
 810434a:	681b      	ldr	r3, [r3, #0]
 810434c:	4a6e      	ldr	r2, [pc, #440]	; (8104508 <HAL_DMA_IRQHandler+0xca0>)
 810434e:	4293      	cmp	r3, r2
 8104350:	d013      	beq.n	810437a <HAL_DMA_IRQHandler+0xb12>
 8104352:	687b      	ldr	r3, [r7, #4]
 8104354:	681b      	ldr	r3, [r3, #0]
 8104356:	4a6d      	ldr	r2, [pc, #436]	; (810450c <HAL_DMA_IRQHandler+0xca4>)
 8104358:	4293      	cmp	r3, r2
 810435a:	d00e      	beq.n	810437a <HAL_DMA_IRQHandler+0xb12>
 810435c:	687b      	ldr	r3, [r7, #4]
 810435e:	681b      	ldr	r3, [r3, #0]
 8104360:	4a6b      	ldr	r2, [pc, #428]	; (8104510 <HAL_DMA_IRQHandler+0xca8>)
 8104362:	4293      	cmp	r3, r2
 8104364:	d009      	beq.n	810437a <HAL_DMA_IRQHandler+0xb12>
 8104366:	687b      	ldr	r3, [r7, #4]
 8104368:	681b      	ldr	r3, [r3, #0]
 810436a:	4a6a      	ldr	r2, [pc, #424]	; (8104514 <HAL_DMA_IRQHandler+0xcac>)
 810436c:	4293      	cmp	r3, r2
 810436e:	d004      	beq.n	810437a <HAL_DMA_IRQHandler+0xb12>
 8104370:	687b      	ldr	r3, [r7, #4]
 8104372:	681b      	ldr	r3, [r3, #0]
 8104374:	4a68      	ldr	r2, [pc, #416]	; (8104518 <HAL_DMA_IRQHandler+0xcb0>)
 8104376:	4293      	cmp	r3, r2
 8104378:	d108      	bne.n	810438c <HAL_DMA_IRQHandler+0xb24>
 810437a:	687b      	ldr	r3, [r7, #4]
 810437c:	681b      	ldr	r3, [r3, #0]
 810437e:	681a      	ldr	r2, [r3, #0]
 8104380:	687b      	ldr	r3, [r7, #4]
 8104382:	681b      	ldr	r3, [r3, #0]
 8104384:	f022 0208 	bic.w	r2, r2, #8
 8104388:	601a      	str	r2, [r3, #0]
 810438a:	e007      	b.n	810439c <HAL_DMA_IRQHandler+0xb34>
 810438c:	687b      	ldr	r3, [r7, #4]
 810438e:	681b      	ldr	r3, [r3, #0]
 8104390:	681a      	ldr	r2, [r3, #0]
 8104392:	687b      	ldr	r3, [r7, #4]
 8104394:	681b      	ldr	r3, [r3, #0]
 8104396:	f022 0204 	bic.w	r2, r2, #4
 810439a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 810439c:	687b      	ldr	r3, [r7, #4]
 810439e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81043a0:	2b00      	cmp	r3, #0
 81043a2:	f000 8165 	beq.w	8104670 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 81043a6:	687b      	ldr	r3, [r7, #4]
 81043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81043aa:	6878      	ldr	r0, [r7, #4]
 81043ac:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81043ae:	e15f      	b.n	8104670 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 81043b0:	687b      	ldr	r3, [r7, #4]
 81043b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81043b4:	f003 031f 	and.w	r3, r3, #31
 81043b8:	2202      	movs	r2, #2
 81043ba:	409a      	lsls	r2, r3
 81043bc:	697b      	ldr	r3, [r7, #20]
 81043be:	4013      	ands	r3, r2
 81043c0:	2b00      	cmp	r3, #0
 81043c2:	f000 80c5 	beq.w	8104550 <HAL_DMA_IRQHandler+0xce8>
 81043c6:	693b      	ldr	r3, [r7, #16]
 81043c8:	f003 0302 	and.w	r3, r3, #2
 81043cc:	2b00      	cmp	r3, #0
 81043ce:	f000 80bf 	beq.w	8104550 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 81043d2:	687b      	ldr	r3, [r7, #4]
 81043d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81043d6:	f003 031f 	and.w	r3, r3, #31
 81043da:	2202      	movs	r2, #2
 81043dc:	409a      	lsls	r2, r3
 81043de:	69fb      	ldr	r3, [r7, #28]
 81043e0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81043e2:	693b      	ldr	r3, [r7, #16]
 81043e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81043e8:	2b00      	cmp	r3, #0
 81043ea:	d018      	beq.n	810441e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 81043ec:	693b      	ldr	r3, [r7, #16]
 81043ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81043f2:	2b00      	cmp	r3, #0
 81043f4:	d109      	bne.n	810440a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 81043f6:	687b      	ldr	r3, [r7, #4]
 81043f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81043fa:	2b00      	cmp	r3, #0
 81043fc:	f000 813a 	beq.w	8104674 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8104400:	687b      	ldr	r3, [r7, #4]
 8104402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104404:	6878      	ldr	r0, [r7, #4]
 8104406:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104408:	e134      	b.n	8104674 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 810440a:	687b      	ldr	r3, [r7, #4]
 810440c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810440e:	2b00      	cmp	r3, #0
 8104410:	f000 8130 	beq.w	8104674 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8104414:	687b      	ldr	r3, [r7, #4]
 8104416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104418:	6878      	ldr	r0, [r7, #4]
 810441a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810441c:	e12a      	b.n	8104674 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 810441e:	693b      	ldr	r3, [r7, #16]
 8104420:	f003 0320 	and.w	r3, r3, #32
 8104424:	2b00      	cmp	r3, #0
 8104426:	f040 8089 	bne.w	810453c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 810442a:	687b      	ldr	r3, [r7, #4]
 810442c:	681b      	ldr	r3, [r3, #0]
 810442e:	4a2b      	ldr	r2, [pc, #172]	; (81044dc <HAL_DMA_IRQHandler+0xc74>)
 8104430:	4293      	cmp	r3, r2
 8104432:	d04a      	beq.n	81044ca <HAL_DMA_IRQHandler+0xc62>
 8104434:	687b      	ldr	r3, [r7, #4]
 8104436:	681b      	ldr	r3, [r3, #0]
 8104438:	4a29      	ldr	r2, [pc, #164]	; (81044e0 <HAL_DMA_IRQHandler+0xc78>)
 810443a:	4293      	cmp	r3, r2
 810443c:	d045      	beq.n	81044ca <HAL_DMA_IRQHandler+0xc62>
 810443e:	687b      	ldr	r3, [r7, #4]
 8104440:	681b      	ldr	r3, [r3, #0]
 8104442:	4a28      	ldr	r2, [pc, #160]	; (81044e4 <HAL_DMA_IRQHandler+0xc7c>)
 8104444:	4293      	cmp	r3, r2
 8104446:	d040      	beq.n	81044ca <HAL_DMA_IRQHandler+0xc62>
 8104448:	687b      	ldr	r3, [r7, #4]
 810444a:	681b      	ldr	r3, [r3, #0]
 810444c:	4a26      	ldr	r2, [pc, #152]	; (81044e8 <HAL_DMA_IRQHandler+0xc80>)
 810444e:	4293      	cmp	r3, r2
 8104450:	d03b      	beq.n	81044ca <HAL_DMA_IRQHandler+0xc62>
 8104452:	687b      	ldr	r3, [r7, #4]
 8104454:	681b      	ldr	r3, [r3, #0]
 8104456:	4a25      	ldr	r2, [pc, #148]	; (81044ec <HAL_DMA_IRQHandler+0xc84>)
 8104458:	4293      	cmp	r3, r2
 810445a:	d036      	beq.n	81044ca <HAL_DMA_IRQHandler+0xc62>
 810445c:	687b      	ldr	r3, [r7, #4]
 810445e:	681b      	ldr	r3, [r3, #0]
 8104460:	4a23      	ldr	r2, [pc, #140]	; (81044f0 <HAL_DMA_IRQHandler+0xc88>)
 8104462:	4293      	cmp	r3, r2
 8104464:	d031      	beq.n	81044ca <HAL_DMA_IRQHandler+0xc62>
 8104466:	687b      	ldr	r3, [r7, #4]
 8104468:	681b      	ldr	r3, [r3, #0]
 810446a:	4a22      	ldr	r2, [pc, #136]	; (81044f4 <HAL_DMA_IRQHandler+0xc8c>)
 810446c:	4293      	cmp	r3, r2
 810446e:	d02c      	beq.n	81044ca <HAL_DMA_IRQHandler+0xc62>
 8104470:	687b      	ldr	r3, [r7, #4]
 8104472:	681b      	ldr	r3, [r3, #0]
 8104474:	4a20      	ldr	r2, [pc, #128]	; (81044f8 <HAL_DMA_IRQHandler+0xc90>)
 8104476:	4293      	cmp	r3, r2
 8104478:	d027      	beq.n	81044ca <HAL_DMA_IRQHandler+0xc62>
 810447a:	687b      	ldr	r3, [r7, #4]
 810447c:	681b      	ldr	r3, [r3, #0]
 810447e:	4a1f      	ldr	r2, [pc, #124]	; (81044fc <HAL_DMA_IRQHandler+0xc94>)
 8104480:	4293      	cmp	r3, r2
 8104482:	d022      	beq.n	81044ca <HAL_DMA_IRQHandler+0xc62>
 8104484:	687b      	ldr	r3, [r7, #4]
 8104486:	681b      	ldr	r3, [r3, #0]
 8104488:	4a1d      	ldr	r2, [pc, #116]	; (8104500 <HAL_DMA_IRQHandler+0xc98>)
 810448a:	4293      	cmp	r3, r2
 810448c:	d01d      	beq.n	81044ca <HAL_DMA_IRQHandler+0xc62>
 810448e:	687b      	ldr	r3, [r7, #4]
 8104490:	681b      	ldr	r3, [r3, #0]
 8104492:	4a1c      	ldr	r2, [pc, #112]	; (8104504 <HAL_DMA_IRQHandler+0xc9c>)
 8104494:	4293      	cmp	r3, r2
 8104496:	d018      	beq.n	81044ca <HAL_DMA_IRQHandler+0xc62>
 8104498:	687b      	ldr	r3, [r7, #4]
 810449a:	681b      	ldr	r3, [r3, #0]
 810449c:	4a1a      	ldr	r2, [pc, #104]	; (8104508 <HAL_DMA_IRQHandler+0xca0>)
 810449e:	4293      	cmp	r3, r2
 81044a0:	d013      	beq.n	81044ca <HAL_DMA_IRQHandler+0xc62>
 81044a2:	687b      	ldr	r3, [r7, #4]
 81044a4:	681b      	ldr	r3, [r3, #0]
 81044a6:	4a19      	ldr	r2, [pc, #100]	; (810450c <HAL_DMA_IRQHandler+0xca4>)
 81044a8:	4293      	cmp	r3, r2
 81044aa:	d00e      	beq.n	81044ca <HAL_DMA_IRQHandler+0xc62>
 81044ac:	687b      	ldr	r3, [r7, #4]
 81044ae:	681b      	ldr	r3, [r3, #0]
 81044b0:	4a17      	ldr	r2, [pc, #92]	; (8104510 <HAL_DMA_IRQHandler+0xca8>)
 81044b2:	4293      	cmp	r3, r2
 81044b4:	d009      	beq.n	81044ca <HAL_DMA_IRQHandler+0xc62>
 81044b6:	687b      	ldr	r3, [r7, #4]
 81044b8:	681b      	ldr	r3, [r3, #0]
 81044ba:	4a16      	ldr	r2, [pc, #88]	; (8104514 <HAL_DMA_IRQHandler+0xcac>)
 81044bc:	4293      	cmp	r3, r2
 81044be:	d004      	beq.n	81044ca <HAL_DMA_IRQHandler+0xc62>
 81044c0:	687b      	ldr	r3, [r7, #4]
 81044c2:	681b      	ldr	r3, [r3, #0]
 81044c4:	4a14      	ldr	r2, [pc, #80]	; (8104518 <HAL_DMA_IRQHandler+0xcb0>)
 81044c6:	4293      	cmp	r3, r2
 81044c8:	d128      	bne.n	810451c <HAL_DMA_IRQHandler+0xcb4>
 81044ca:	687b      	ldr	r3, [r7, #4]
 81044cc:	681b      	ldr	r3, [r3, #0]
 81044ce:	681a      	ldr	r2, [r3, #0]
 81044d0:	687b      	ldr	r3, [r7, #4]
 81044d2:	681b      	ldr	r3, [r3, #0]
 81044d4:	f022 0214 	bic.w	r2, r2, #20
 81044d8:	601a      	str	r2, [r3, #0]
 81044da:	e027      	b.n	810452c <HAL_DMA_IRQHandler+0xcc4>
 81044dc:	40020010 	.word	0x40020010
 81044e0:	40020028 	.word	0x40020028
 81044e4:	40020040 	.word	0x40020040
 81044e8:	40020058 	.word	0x40020058
 81044ec:	40020070 	.word	0x40020070
 81044f0:	40020088 	.word	0x40020088
 81044f4:	400200a0 	.word	0x400200a0
 81044f8:	400200b8 	.word	0x400200b8
 81044fc:	40020410 	.word	0x40020410
 8104500:	40020428 	.word	0x40020428
 8104504:	40020440 	.word	0x40020440
 8104508:	40020458 	.word	0x40020458
 810450c:	40020470 	.word	0x40020470
 8104510:	40020488 	.word	0x40020488
 8104514:	400204a0 	.word	0x400204a0
 8104518:	400204b8 	.word	0x400204b8
 810451c:	687b      	ldr	r3, [r7, #4]
 810451e:	681b      	ldr	r3, [r3, #0]
 8104520:	681a      	ldr	r2, [r3, #0]
 8104522:	687b      	ldr	r3, [r7, #4]
 8104524:	681b      	ldr	r3, [r3, #0]
 8104526:	f022 020a 	bic.w	r2, r2, #10
 810452a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 810452c:	687b      	ldr	r3, [r7, #4]
 810452e:	2201      	movs	r2, #1
 8104530:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8104534:	687b      	ldr	r3, [r7, #4]
 8104536:	2200      	movs	r2, #0
 8104538:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 810453c:	687b      	ldr	r3, [r7, #4]
 810453e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104540:	2b00      	cmp	r3, #0
 8104542:	f000 8097 	beq.w	8104674 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8104546:	687b      	ldr	r3, [r7, #4]
 8104548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810454a:	6878      	ldr	r0, [r7, #4]
 810454c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810454e:	e091      	b.n	8104674 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8104550:	687b      	ldr	r3, [r7, #4]
 8104552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104554:	f003 031f 	and.w	r3, r3, #31
 8104558:	2208      	movs	r2, #8
 810455a:	409a      	lsls	r2, r3
 810455c:	697b      	ldr	r3, [r7, #20]
 810455e:	4013      	ands	r3, r2
 8104560:	2b00      	cmp	r3, #0
 8104562:	f000 8088 	beq.w	8104676 <HAL_DMA_IRQHandler+0xe0e>
 8104566:	693b      	ldr	r3, [r7, #16]
 8104568:	f003 0308 	and.w	r3, r3, #8
 810456c:	2b00      	cmp	r3, #0
 810456e:	f000 8082 	beq.w	8104676 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8104572:	687b      	ldr	r3, [r7, #4]
 8104574:	681b      	ldr	r3, [r3, #0]
 8104576:	4a41      	ldr	r2, [pc, #260]	; (810467c <HAL_DMA_IRQHandler+0xe14>)
 8104578:	4293      	cmp	r3, r2
 810457a:	d04a      	beq.n	8104612 <HAL_DMA_IRQHandler+0xdaa>
 810457c:	687b      	ldr	r3, [r7, #4]
 810457e:	681b      	ldr	r3, [r3, #0]
 8104580:	4a3f      	ldr	r2, [pc, #252]	; (8104680 <HAL_DMA_IRQHandler+0xe18>)
 8104582:	4293      	cmp	r3, r2
 8104584:	d045      	beq.n	8104612 <HAL_DMA_IRQHandler+0xdaa>
 8104586:	687b      	ldr	r3, [r7, #4]
 8104588:	681b      	ldr	r3, [r3, #0]
 810458a:	4a3e      	ldr	r2, [pc, #248]	; (8104684 <HAL_DMA_IRQHandler+0xe1c>)
 810458c:	4293      	cmp	r3, r2
 810458e:	d040      	beq.n	8104612 <HAL_DMA_IRQHandler+0xdaa>
 8104590:	687b      	ldr	r3, [r7, #4]
 8104592:	681b      	ldr	r3, [r3, #0]
 8104594:	4a3c      	ldr	r2, [pc, #240]	; (8104688 <HAL_DMA_IRQHandler+0xe20>)
 8104596:	4293      	cmp	r3, r2
 8104598:	d03b      	beq.n	8104612 <HAL_DMA_IRQHandler+0xdaa>
 810459a:	687b      	ldr	r3, [r7, #4]
 810459c:	681b      	ldr	r3, [r3, #0]
 810459e:	4a3b      	ldr	r2, [pc, #236]	; (810468c <HAL_DMA_IRQHandler+0xe24>)
 81045a0:	4293      	cmp	r3, r2
 81045a2:	d036      	beq.n	8104612 <HAL_DMA_IRQHandler+0xdaa>
 81045a4:	687b      	ldr	r3, [r7, #4]
 81045a6:	681b      	ldr	r3, [r3, #0]
 81045a8:	4a39      	ldr	r2, [pc, #228]	; (8104690 <HAL_DMA_IRQHandler+0xe28>)
 81045aa:	4293      	cmp	r3, r2
 81045ac:	d031      	beq.n	8104612 <HAL_DMA_IRQHandler+0xdaa>
 81045ae:	687b      	ldr	r3, [r7, #4]
 81045b0:	681b      	ldr	r3, [r3, #0]
 81045b2:	4a38      	ldr	r2, [pc, #224]	; (8104694 <HAL_DMA_IRQHandler+0xe2c>)
 81045b4:	4293      	cmp	r3, r2
 81045b6:	d02c      	beq.n	8104612 <HAL_DMA_IRQHandler+0xdaa>
 81045b8:	687b      	ldr	r3, [r7, #4]
 81045ba:	681b      	ldr	r3, [r3, #0]
 81045bc:	4a36      	ldr	r2, [pc, #216]	; (8104698 <HAL_DMA_IRQHandler+0xe30>)
 81045be:	4293      	cmp	r3, r2
 81045c0:	d027      	beq.n	8104612 <HAL_DMA_IRQHandler+0xdaa>
 81045c2:	687b      	ldr	r3, [r7, #4]
 81045c4:	681b      	ldr	r3, [r3, #0]
 81045c6:	4a35      	ldr	r2, [pc, #212]	; (810469c <HAL_DMA_IRQHandler+0xe34>)
 81045c8:	4293      	cmp	r3, r2
 81045ca:	d022      	beq.n	8104612 <HAL_DMA_IRQHandler+0xdaa>
 81045cc:	687b      	ldr	r3, [r7, #4]
 81045ce:	681b      	ldr	r3, [r3, #0]
 81045d0:	4a33      	ldr	r2, [pc, #204]	; (81046a0 <HAL_DMA_IRQHandler+0xe38>)
 81045d2:	4293      	cmp	r3, r2
 81045d4:	d01d      	beq.n	8104612 <HAL_DMA_IRQHandler+0xdaa>
 81045d6:	687b      	ldr	r3, [r7, #4]
 81045d8:	681b      	ldr	r3, [r3, #0]
 81045da:	4a32      	ldr	r2, [pc, #200]	; (81046a4 <HAL_DMA_IRQHandler+0xe3c>)
 81045dc:	4293      	cmp	r3, r2
 81045de:	d018      	beq.n	8104612 <HAL_DMA_IRQHandler+0xdaa>
 81045e0:	687b      	ldr	r3, [r7, #4]
 81045e2:	681b      	ldr	r3, [r3, #0]
 81045e4:	4a30      	ldr	r2, [pc, #192]	; (81046a8 <HAL_DMA_IRQHandler+0xe40>)
 81045e6:	4293      	cmp	r3, r2
 81045e8:	d013      	beq.n	8104612 <HAL_DMA_IRQHandler+0xdaa>
 81045ea:	687b      	ldr	r3, [r7, #4]
 81045ec:	681b      	ldr	r3, [r3, #0]
 81045ee:	4a2f      	ldr	r2, [pc, #188]	; (81046ac <HAL_DMA_IRQHandler+0xe44>)
 81045f0:	4293      	cmp	r3, r2
 81045f2:	d00e      	beq.n	8104612 <HAL_DMA_IRQHandler+0xdaa>
 81045f4:	687b      	ldr	r3, [r7, #4]
 81045f6:	681b      	ldr	r3, [r3, #0]
 81045f8:	4a2d      	ldr	r2, [pc, #180]	; (81046b0 <HAL_DMA_IRQHandler+0xe48>)
 81045fa:	4293      	cmp	r3, r2
 81045fc:	d009      	beq.n	8104612 <HAL_DMA_IRQHandler+0xdaa>
 81045fe:	687b      	ldr	r3, [r7, #4]
 8104600:	681b      	ldr	r3, [r3, #0]
 8104602:	4a2c      	ldr	r2, [pc, #176]	; (81046b4 <HAL_DMA_IRQHandler+0xe4c>)
 8104604:	4293      	cmp	r3, r2
 8104606:	d004      	beq.n	8104612 <HAL_DMA_IRQHandler+0xdaa>
 8104608:	687b      	ldr	r3, [r7, #4]
 810460a:	681b      	ldr	r3, [r3, #0]
 810460c:	4a2a      	ldr	r2, [pc, #168]	; (81046b8 <HAL_DMA_IRQHandler+0xe50>)
 810460e:	4293      	cmp	r3, r2
 8104610:	d108      	bne.n	8104624 <HAL_DMA_IRQHandler+0xdbc>
 8104612:	687b      	ldr	r3, [r7, #4]
 8104614:	681b      	ldr	r3, [r3, #0]
 8104616:	681a      	ldr	r2, [r3, #0]
 8104618:	687b      	ldr	r3, [r7, #4]
 810461a:	681b      	ldr	r3, [r3, #0]
 810461c:	f022 021c 	bic.w	r2, r2, #28
 8104620:	601a      	str	r2, [r3, #0]
 8104622:	e007      	b.n	8104634 <HAL_DMA_IRQHandler+0xdcc>
 8104624:	687b      	ldr	r3, [r7, #4]
 8104626:	681b      	ldr	r3, [r3, #0]
 8104628:	681a      	ldr	r2, [r3, #0]
 810462a:	687b      	ldr	r3, [r7, #4]
 810462c:	681b      	ldr	r3, [r3, #0]
 810462e:	f022 020e 	bic.w	r2, r2, #14
 8104632:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8104634:	687b      	ldr	r3, [r7, #4]
 8104636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104638:	f003 031f 	and.w	r3, r3, #31
 810463c:	2201      	movs	r2, #1
 810463e:	409a      	lsls	r2, r3
 8104640:	69fb      	ldr	r3, [r7, #28]
 8104642:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8104644:	687b      	ldr	r3, [r7, #4]
 8104646:	2201      	movs	r2, #1
 8104648:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 810464a:	687b      	ldr	r3, [r7, #4]
 810464c:	2201      	movs	r2, #1
 810464e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8104652:	687b      	ldr	r3, [r7, #4]
 8104654:	2200      	movs	r2, #0
 8104656:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 810465a:	687b      	ldr	r3, [r7, #4]
 810465c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810465e:	2b00      	cmp	r3, #0
 8104660:	d009      	beq.n	8104676 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8104662:	687b      	ldr	r3, [r7, #4]
 8104664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104666:	6878      	ldr	r0, [r7, #4]
 8104668:	4798      	blx	r3
 810466a:	e004      	b.n	8104676 <HAL_DMA_IRQHandler+0xe0e>
          return;
 810466c:	bf00      	nop
 810466e:	e002      	b.n	8104676 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104670:	bf00      	nop
 8104672:	e000      	b.n	8104676 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104674:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8104676:	3728      	adds	r7, #40	; 0x28
 8104678:	46bd      	mov	sp, r7
 810467a:	bd80      	pop	{r7, pc}
 810467c:	40020010 	.word	0x40020010
 8104680:	40020028 	.word	0x40020028
 8104684:	40020040 	.word	0x40020040
 8104688:	40020058 	.word	0x40020058
 810468c:	40020070 	.word	0x40020070
 8104690:	40020088 	.word	0x40020088
 8104694:	400200a0 	.word	0x400200a0
 8104698:	400200b8 	.word	0x400200b8
 810469c:	40020410 	.word	0x40020410
 81046a0:	40020428 	.word	0x40020428
 81046a4:	40020440 	.word	0x40020440
 81046a8:	40020458 	.word	0x40020458
 81046ac:	40020470 	.word	0x40020470
 81046b0:	40020488 	.word	0x40020488
 81046b4:	400204a0 	.word	0x400204a0
 81046b8:	400204b8 	.word	0x400204b8

081046bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 81046bc:	b480      	push	{r7}
 81046be:	b085      	sub	sp, #20
 81046c0:	af00      	add	r7, sp, #0
 81046c2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81046c4:	687b      	ldr	r3, [r7, #4]
 81046c6:	681b      	ldr	r3, [r3, #0]
 81046c8:	4a43      	ldr	r2, [pc, #268]	; (81047d8 <DMA_CalcBaseAndBitshift+0x11c>)
 81046ca:	4293      	cmp	r3, r2
 81046cc:	d04a      	beq.n	8104764 <DMA_CalcBaseAndBitshift+0xa8>
 81046ce:	687b      	ldr	r3, [r7, #4]
 81046d0:	681b      	ldr	r3, [r3, #0]
 81046d2:	4a42      	ldr	r2, [pc, #264]	; (81047dc <DMA_CalcBaseAndBitshift+0x120>)
 81046d4:	4293      	cmp	r3, r2
 81046d6:	d045      	beq.n	8104764 <DMA_CalcBaseAndBitshift+0xa8>
 81046d8:	687b      	ldr	r3, [r7, #4]
 81046da:	681b      	ldr	r3, [r3, #0]
 81046dc:	4a40      	ldr	r2, [pc, #256]	; (81047e0 <DMA_CalcBaseAndBitshift+0x124>)
 81046de:	4293      	cmp	r3, r2
 81046e0:	d040      	beq.n	8104764 <DMA_CalcBaseAndBitshift+0xa8>
 81046e2:	687b      	ldr	r3, [r7, #4]
 81046e4:	681b      	ldr	r3, [r3, #0]
 81046e6:	4a3f      	ldr	r2, [pc, #252]	; (81047e4 <DMA_CalcBaseAndBitshift+0x128>)
 81046e8:	4293      	cmp	r3, r2
 81046ea:	d03b      	beq.n	8104764 <DMA_CalcBaseAndBitshift+0xa8>
 81046ec:	687b      	ldr	r3, [r7, #4]
 81046ee:	681b      	ldr	r3, [r3, #0]
 81046f0:	4a3d      	ldr	r2, [pc, #244]	; (81047e8 <DMA_CalcBaseAndBitshift+0x12c>)
 81046f2:	4293      	cmp	r3, r2
 81046f4:	d036      	beq.n	8104764 <DMA_CalcBaseAndBitshift+0xa8>
 81046f6:	687b      	ldr	r3, [r7, #4]
 81046f8:	681b      	ldr	r3, [r3, #0]
 81046fa:	4a3c      	ldr	r2, [pc, #240]	; (81047ec <DMA_CalcBaseAndBitshift+0x130>)
 81046fc:	4293      	cmp	r3, r2
 81046fe:	d031      	beq.n	8104764 <DMA_CalcBaseAndBitshift+0xa8>
 8104700:	687b      	ldr	r3, [r7, #4]
 8104702:	681b      	ldr	r3, [r3, #0]
 8104704:	4a3a      	ldr	r2, [pc, #232]	; (81047f0 <DMA_CalcBaseAndBitshift+0x134>)
 8104706:	4293      	cmp	r3, r2
 8104708:	d02c      	beq.n	8104764 <DMA_CalcBaseAndBitshift+0xa8>
 810470a:	687b      	ldr	r3, [r7, #4]
 810470c:	681b      	ldr	r3, [r3, #0]
 810470e:	4a39      	ldr	r2, [pc, #228]	; (81047f4 <DMA_CalcBaseAndBitshift+0x138>)
 8104710:	4293      	cmp	r3, r2
 8104712:	d027      	beq.n	8104764 <DMA_CalcBaseAndBitshift+0xa8>
 8104714:	687b      	ldr	r3, [r7, #4]
 8104716:	681b      	ldr	r3, [r3, #0]
 8104718:	4a37      	ldr	r2, [pc, #220]	; (81047f8 <DMA_CalcBaseAndBitshift+0x13c>)
 810471a:	4293      	cmp	r3, r2
 810471c:	d022      	beq.n	8104764 <DMA_CalcBaseAndBitshift+0xa8>
 810471e:	687b      	ldr	r3, [r7, #4]
 8104720:	681b      	ldr	r3, [r3, #0]
 8104722:	4a36      	ldr	r2, [pc, #216]	; (81047fc <DMA_CalcBaseAndBitshift+0x140>)
 8104724:	4293      	cmp	r3, r2
 8104726:	d01d      	beq.n	8104764 <DMA_CalcBaseAndBitshift+0xa8>
 8104728:	687b      	ldr	r3, [r7, #4]
 810472a:	681b      	ldr	r3, [r3, #0]
 810472c:	4a34      	ldr	r2, [pc, #208]	; (8104800 <DMA_CalcBaseAndBitshift+0x144>)
 810472e:	4293      	cmp	r3, r2
 8104730:	d018      	beq.n	8104764 <DMA_CalcBaseAndBitshift+0xa8>
 8104732:	687b      	ldr	r3, [r7, #4]
 8104734:	681b      	ldr	r3, [r3, #0]
 8104736:	4a33      	ldr	r2, [pc, #204]	; (8104804 <DMA_CalcBaseAndBitshift+0x148>)
 8104738:	4293      	cmp	r3, r2
 810473a:	d013      	beq.n	8104764 <DMA_CalcBaseAndBitshift+0xa8>
 810473c:	687b      	ldr	r3, [r7, #4]
 810473e:	681b      	ldr	r3, [r3, #0]
 8104740:	4a31      	ldr	r2, [pc, #196]	; (8104808 <DMA_CalcBaseAndBitshift+0x14c>)
 8104742:	4293      	cmp	r3, r2
 8104744:	d00e      	beq.n	8104764 <DMA_CalcBaseAndBitshift+0xa8>
 8104746:	687b      	ldr	r3, [r7, #4]
 8104748:	681b      	ldr	r3, [r3, #0]
 810474a:	4a30      	ldr	r2, [pc, #192]	; (810480c <DMA_CalcBaseAndBitshift+0x150>)
 810474c:	4293      	cmp	r3, r2
 810474e:	d009      	beq.n	8104764 <DMA_CalcBaseAndBitshift+0xa8>
 8104750:	687b      	ldr	r3, [r7, #4]
 8104752:	681b      	ldr	r3, [r3, #0]
 8104754:	4a2e      	ldr	r2, [pc, #184]	; (8104810 <DMA_CalcBaseAndBitshift+0x154>)
 8104756:	4293      	cmp	r3, r2
 8104758:	d004      	beq.n	8104764 <DMA_CalcBaseAndBitshift+0xa8>
 810475a:	687b      	ldr	r3, [r7, #4]
 810475c:	681b      	ldr	r3, [r3, #0]
 810475e:	4a2d      	ldr	r2, [pc, #180]	; (8104814 <DMA_CalcBaseAndBitshift+0x158>)
 8104760:	4293      	cmp	r3, r2
 8104762:	d101      	bne.n	8104768 <DMA_CalcBaseAndBitshift+0xac>
 8104764:	2301      	movs	r3, #1
 8104766:	e000      	b.n	810476a <DMA_CalcBaseAndBitshift+0xae>
 8104768:	2300      	movs	r3, #0
 810476a:	2b00      	cmp	r3, #0
 810476c:	d026      	beq.n	81047bc <DMA_CalcBaseAndBitshift+0x100>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 810476e:	687b      	ldr	r3, [r7, #4]
 8104770:	681b      	ldr	r3, [r3, #0]
 8104772:	b2db      	uxtb	r3, r3
 8104774:	3b10      	subs	r3, #16
 8104776:	4a28      	ldr	r2, [pc, #160]	; (8104818 <DMA_CalcBaseAndBitshift+0x15c>)
 8104778:	fba2 2303 	umull	r2, r3, r2, r3
 810477c:	091b      	lsrs	r3, r3, #4
 810477e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8104780:	68fb      	ldr	r3, [r7, #12]
 8104782:	f003 0307 	and.w	r3, r3, #7
 8104786:	4a25      	ldr	r2, [pc, #148]	; (810481c <DMA_CalcBaseAndBitshift+0x160>)
 8104788:	5cd3      	ldrb	r3, [r2, r3]
 810478a:	461a      	mov	r2, r3
 810478c:	687b      	ldr	r3, [r7, #4]
 810478e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8104790:	68fb      	ldr	r3, [r7, #12]
 8104792:	2b03      	cmp	r3, #3
 8104794:	d909      	bls.n	81047aa <DMA_CalcBaseAndBitshift+0xee>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8104796:	687b      	ldr	r3, [r7, #4]
 8104798:	681b      	ldr	r3, [r3, #0]
 810479a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 810479e:	f023 0303 	bic.w	r3, r3, #3
 81047a2:	1d1a      	adds	r2, r3, #4
 81047a4:	687b      	ldr	r3, [r7, #4]
 81047a6:	659a      	str	r2, [r3, #88]	; 0x58
 81047a8:	e00e      	b.n	81047c8 <DMA_CalcBaseAndBitshift+0x10c>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 81047aa:	687b      	ldr	r3, [r7, #4]
 81047ac:	681b      	ldr	r3, [r3, #0]
 81047ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 81047b2:	f023 0303 	bic.w	r3, r3, #3
 81047b6:	687a      	ldr	r2, [r7, #4]
 81047b8:	6593      	str	r3, [r2, #88]	; 0x58
 81047ba:	e005      	b.n	81047c8 <DMA_CalcBaseAndBitshift+0x10c>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 81047bc:	687b      	ldr	r3, [r7, #4]
 81047be:	681b      	ldr	r3, [r3, #0]
 81047c0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 81047c4:	687b      	ldr	r3, [r7, #4]
 81047c6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 81047c8:	687b      	ldr	r3, [r7, #4]
 81047ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 81047cc:	4618      	mov	r0, r3
 81047ce:	3714      	adds	r7, #20
 81047d0:	46bd      	mov	sp, r7
 81047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81047d6:	4770      	bx	lr
 81047d8:	40020010 	.word	0x40020010
 81047dc:	40020028 	.word	0x40020028
 81047e0:	40020040 	.word	0x40020040
 81047e4:	40020058 	.word	0x40020058
 81047e8:	40020070 	.word	0x40020070
 81047ec:	40020088 	.word	0x40020088
 81047f0:	400200a0 	.word	0x400200a0
 81047f4:	400200b8 	.word	0x400200b8
 81047f8:	40020410 	.word	0x40020410
 81047fc:	40020428 	.word	0x40020428
 8104800:	40020440 	.word	0x40020440
 8104804:	40020458 	.word	0x40020458
 8104808:	40020470 	.word	0x40020470
 810480c:	40020488 	.word	0x40020488
 8104810:	400204a0 	.word	0x400204a0
 8104814:	400204b8 	.word	0x400204b8
 8104818:	aaaaaaab 	.word	0xaaaaaaab
 810481c:	0810a738 	.word	0x0810a738

08104820 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8104820:	b480      	push	{r7}
 8104822:	b085      	sub	sp, #20
 8104824:	af00      	add	r7, sp, #0
 8104826:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8104828:	2300      	movs	r3, #0
 810482a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 810482c:	687b      	ldr	r3, [r7, #4]
 810482e:	699b      	ldr	r3, [r3, #24]
 8104830:	2b00      	cmp	r3, #0
 8104832:	d120      	bne.n	8104876 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8104834:	687b      	ldr	r3, [r7, #4]
 8104836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104838:	2b03      	cmp	r3, #3
 810483a:	d858      	bhi.n	81048ee <DMA_CheckFifoParam+0xce>
 810483c:	a201      	add	r2, pc, #4	; (adr r2, 8104844 <DMA_CheckFifoParam+0x24>)
 810483e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104842:	bf00      	nop
 8104844:	08104855 	.word	0x08104855
 8104848:	08104867 	.word	0x08104867
 810484c:	08104855 	.word	0x08104855
 8104850:	081048ef 	.word	0x081048ef
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8104854:	687b      	ldr	r3, [r7, #4]
 8104856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104858:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810485c:	2b00      	cmp	r3, #0
 810485e:	d048      	beq.n	81048f2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8104860:	2301      	movs	r3, #1
 8104862:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8104864:	e045      	b.n	81048f2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8104866:	687b      	ldr	r3, [r7, #4]
 8104868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810486a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 810486e:	d142      	bne.n	81048f6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8104870:	2301      	movs	r3, #1
 8104872:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8104874:	e03f      	b.n	81048f6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8104876:	687b      	ldr	r3, [r7, #4]
 8104878:	699b      	ldr	r3, [r3, #24]
 810487a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810487e:	d123      	bne.n	81048c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8104880:	687b      	ldr	r3, [r7, #4]
 8104882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104884:	2b03      	cmp	r3, #3
 8104886:	d838      	bhi.n	81048fa <DMA_CheckFifoParam+0xda>
 8104888:	a201      	add	r2, pc, #4	; (adr r2, 8104890 <DMA_CheckFifoParam+0x70>)
 810488a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810488e:	bf00      	nop
 8104890:	081048a1 	.word	0x081048a1
 8104894:	081048a7 	.word	0x081048a7
 8104898:	081048a1 	.word	0x081048a1
 810489c:	081048b9 	.word	0x081048b9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 81048a0:	2301      	movs	r3, #1
 81048a2:	73fb      	strb	r3, [r7, #15]
        break;
 81048a4:	e030      	b.n	8104908 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 81048a6:	687b      	ldr	r3, [r7, #4]
 81048a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81048aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81048ae:	2b00      	cmp	r3, #0
 81048b0:	d025      	beq.n	81048fe <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 81048b2:	2301      	movs	r3, #1
 81048b4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 81048b6:	e022      	b.n	81048fe <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 81048b8:	687b      	ldr	r3, [r7, #4]
 81048ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81048bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 81048c0:	d11f      	bne.n	8104902 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 81048c2:	2301      	movs	r3, #1
 81048c4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 81048c6:	e01c      	b.n	8104902 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 81048c8:	687b      	ldr	r3, [r7, #4]
 81048ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81048cc:	2b02      	cmp	r3, #2
 81048ce:	d902      	bls.n	81048d6 <DMA_CheckFifoParam+0xb6>
 81048d0:	2b03      	cmp	r3, #3
 81048d2:	d003      	beq.n	81048dc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 81048d4:	e018      	b.n	8104908 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 81048d6:	2301      	movs	r3, #1
 81048d8:	73fb      	strb	r3, [r7, #15]
        break;
 81048da:	e015      	b.n	8104908 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 81048dc:	687b      	ldr	r3, [r7, #4]
 81048de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81048e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81048e4:	2b00      	cmp	r3, #0
 81048e6:	d00e      	beq.n	8104906 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 81048e8:	2301      	movs	r3, #1
 81048ea:	73fb      	strb	r3, [r7, #15]
    break;
 81048ec:	e00b      	b.n	8104906 <DMA_CheckFifoParam+0xe6>
        break;
 81048ee:	bf00      	nop
 81048f0:	e00a      	b.n	8104908 <DMA_CheckFifoParam+0xe8>
        break;
 81048f2:	bf00      	nop
 81048f4:	e008      	b.n	8104908 <DMA_CheckFifoParam+0xe8>
        break;
 81048f6:	bf00      	nop
 81048f8:	e006      	b.n	8104908 <DMA_CheckFifoParam+0xe8>
        break;
 81048fa:	bf00      	nop
 81048fc:	e004      	b.n	8104908 <DMA_CheckFifoParam+0xe8>
        break;
 81048fe:	bf00      	nop
 8104900:	e002      	b.n	8104908 <DMA_CheckFifoParam+0xe8>
        break;
 8104902:	bf00      	nop
 8104904:	e000      	b.n	8104908 <DMA_CheckFifoParam+0xe8>
    break;
 8104906:	bf00      	nop
    }
  }

  return status;
 8104908:	7bfb      	ldrb	r3, [r7, #15]
}
 810490a:	4618      	mov	r0, r3
 810490c:	3714      	adds	r7, #20
 810490e:	46bd      	mov	sp, r7
 8104910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104914:	4770      	bx	lr
 8104916:	bf00      	nop

08104918 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8104918:	b480      	push	{r7}
 810491a:	b085      	sub	sp, #20
 810491c:	af00      	add	r7, sp, #0
 810491e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8104920:	687b      	ldr	r3, [r7, #4]
 8104922:	681b      	ldr	r3, [r3, #0]
 8104924:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8104926:	687b      	ldr	r3, [r7, #4]
 8104928:	681b      	ldr	r3, [r3, #0]
 810492a:	4a3a      	ldr	r2, [pc, #232]	; (8104a14 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 810492c:	4293      	cmp	r3, r2
 810492e:	d022      	beq.n	8104976 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104930:	687b      	ldr	r3, [r7, #4]
 8104932:	681b      	ldr	r3, [r3, #0]
 8104934:	4a38      	ldr	r2, [pc, #224]	; (8104a18 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8104936:	4293      	cmp	r3, r2
 8104938:	d01d      	beq.n	8104976 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810493a:	687b      	ldr	r3, [r7, #4]
 810493c:	681b      	ldr	r3, [r3, #0]
 810493e:	4a37      	ldr	r2, [pc, #220]	; (8104a1c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8104940:	4293      	cmp	r3, r2
 8104942:	d018      	beq.n	8104976 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104944:	687b      	ldr	r3, [r7, #4]
 8104946:	681b      	ldr	r3, [r3, #0]
 8104948:	4a35      	ldr	r2, [pc, #212]	; (8104a20 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 810494a:	4293      	cmp	r3, r2
 810494c:	d013      	beq.n	8104976 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810494e:	687b      	ldr	r3, [r7, #4]
 8104950:	681b      	ldr	r3, [r3, #0]
 8104952:	4a34      	ldr	r2, [pc, #208]	; (8104a24 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8104954:	4293      	cmp	r3, r2
 8104956:	d00e      	beq.n	8104976 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104958:	687b      	ldr	r3, [r7, #4]
 810495a:	681b      	ldr	r3, [r3, #0]
 810495c:	4a32      	ldr	r2, [pc, #200]	; (8104a28 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 810495e:	4293      	cmp	r3, r2
 8104960:	d009      	beq.n	8104976 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104962:	687b      	ldr	r3, [r7, #4]
 8104964:	681b      	ldr	r3, [r3, #0]
 8104966:	4a31      	ldr	r2, [pc, #196]	; (8104a2c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8104968:	4293      	cmp	r3, r2
 810496a:	d004      	beq.n	8104976 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810496c:	687b      	ldr	r3, [r7, #4]
 810496e:	681b      	ldr	r3, [r3, #0]
 8104970:	4a2f      	ldr	r2, [pc, #188]	; (8104a30 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8104972:	4293      	cmp	r3, r2
 8104974:	d101      	bne.n	810497a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8104976:	2301      	movs	r3, #1
 8104978:	e000      	b.n	810497c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 810497a:	2300      	movs	r3, #0
 810497c:	2b00      	cmp	r3, #0
 810497e:	d01c      	beq.n	81049ba <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8104980:	687b      	ldr	r3, [r7, #4]
 8104982:	681b      	ldr	r3, [r3, #0]
 8104984:	b2db      	uxtb	r3, r3
 8104986:	3b08      	subs	r3, #8
 8104988:	4a2a      	ldr	r2, [pc, #168]	; (8104a34 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 810498a:	fba2 2303 	umull	r2, r3, r2, r3
 810498e:	091b      	lsrs	r3, r3, #4
 8104990:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8104992:	68fb      	ldr	r3, [r7, #12]
 8104994:	f103 53b0 	add.w	r3, r3, #369098752	; 0x16000000
 8104998:	f503 4316 	add.w	r3, r3, #38400	; 0x9600
 810499c:	009b      	lsls	r3, r3, #2
 810499e:	461a      	mov	r2, r3
 81049a0:	687b      	ldr	r3, [r7, #4]
 81049a2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 81049a4:	687b      	ldr	r3, [r7, #4]
 81049a6:	4a24      	ldr	r2, [pc, #144]	; (8104a38 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 81049a8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 81049aa:	68fb      	ldr	r3, [r7, #12]
 81049ac:	f003 031f 	and.w	r3, r3, #31
 81049b0:	2201      	movs	r2, #1
 81049b2:	409a      	lsls	r2, r3
 81049b4:	687b      	ldr	r3, [r7, #4]
 81049b6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 81049b8:	e026      	b.n	8104a08 <DMA_CalcDMAMUXChannelBaseAndMask+0xf0>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 81049ba:	687b      	ldr	r3, [r7, #4]
 81049bc:	681b      	ldr	r3, [r3, #0]
 81049be:	b2db      	uxtb	r3, r3
 81049c0:	3b10      	subs	r3, #16
 81049c2:	4a1e      	ldr	r2, [pc, #120]	; (8104a3c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 81049c4:	fba2 2303 	umull	r2, r3, r2, r3
 81049c8:	091b      	lsrs	r3, r3, #4
 81049ca:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 81049cc:	68bb      	ldr	r3, [r7, #8]
 81049ce:	4a1c      	ldr	r2, [pc, #112]	; (8104a40 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 81049d0:	4293      	cmp	r3, r2
 81049d2:	d806      	bhi.n	81049e2 <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
 81049d4:	68bb      	ldr	r3, [r7, #8]
 81049d6:	4a1b      	ldr	r2, [pc, #108]	; (8104a44 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 81049d8:	4293      	cmp	r3, r2
 81049da:	d902      	bls.n	81049e2 <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
      stream_number += 8U;
 81049dc:	68fb      	ldr	r3, [r7, #12]
 81049de:	3308      	adds	r3, #8
 81049e0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 81049e2:	68fb      	ldr	r3, [r7, #12]
 81049e4:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 81049e8:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 81049ec:	009b      	lsls	r3, r3, #2
 81049ee:	461a      	mov	r2, r3
 81049f0:	687b      	ldr	r3, [r7, #4]
 81049f2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 81049f4:	687b      	ldr	r3, [r7, #4]
 81049f6:	4a14      	ldr	r2, [pc, #80]	; (8104a48 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 81049f8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 81049fa:	68fb      	ldr	r3, [r7, #12]
 81049fc:	f003 031f 	and.w	r3, r3, #31
 8104a00:	2201      	movs	r2, #1
 8104a02:	409a      	lsls	r2, r3
 8104a04:	687b      	ldr	r3, [r7, #4]
 8104a06:	669a      	str	r2, [r3, #104]	; 0x68
}
 8104a08:	bf00      	nop
 8104a0a:	3714      	adds	r7, #20
 8104a0c:	46bd      	mov	sp, r7
 8104a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104a12:	4770      	bx	lr
 8104a14:	58025408 	.word	0x58025408
 8104a18:	5802541c 	.word	0x5802541c
 8104a1c:	58025430 	.word	0x58025430
 8104a20:	58025444 	.word	0x58025444
 8104a24:	58025458 	.word	0x58025458
 8104a28:	5802546c 	.word	0x5802546c
 8104a2c:	58025480 	.word	0x58025480
 8104a30:	58025494 	.word	0x58025494
 8104a34:	cccccccd 	.word	0xcccccccd
 8104a38:	58025880 	.word	0x58025880
 8104a3c:	aaaaaaab 	.word	0xaaaaaaab
 8104a40:	400204b8 	.word	0x400204b8
 8104a44:	4002040f 	.word	0x4002040f
 8104a48:	40020880 	.word	0x40020880

08104a4c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8104a4c:	b480      	push	{r7}
 8104a4e:	b085      	sub	sp, #20
 8104a50:	af00      	add	r7, sp, #0
 8104a52:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8104a54:	687b      	ldr	r3, [r7, #4]
 8104a56:	685b      	ldr	r3, [r3, #4]
 8104a58:	b2db      	uxtb	r3, r3
 8104a5a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8104a5c:	68fb      	ldr	r3, [r7, #12]
 8104a5e:	2b00      	cmp	r3, #0
 8104a60:	d04a      	beq.n	8104af8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8104a62:	68fb      	ldr	r3, [r7, #12]
 8104a64:	2b08      	cmp	r3, #8
 8104a66:	d847      	bhi.n	8104af8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8104a68:	687b      	ldr	r3, [r7, #4]
 8104a6a:	681b      	ldr	r3, [r3, #0]
 8104a6c:	4a25      	ldr	r2, [pc, #148]	; (8104b04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8104a6e:	4293      	cmp	r3, r2
 8104a70:	d022      	beq.n	8104ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104a72:	687b      	ldr	r3, [r7, #4]
 8104a74:	681b      	ldr	r3, [r3, #0]
 8104a76:	4a24      	ldr	r2, [pc, #144]	; (8104b08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8104a78:	4293      	cmp	r3, r2
 8104a7a:	d01d      	beq.n	8104ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104a7c:	687b      	ldr	r3, [r7, #4]
 8104a7e:	681b      	ldr	r3, [r3, #0]
 8104a80:	4a22      	ldr	r2, [pc, #136]	; (8104b0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8104a82:	4293      	cmp	r3, r2
 8104a84:	d018      	beq.n	8104ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104a86:	687b      	ldr	r3, [r7, #4]
 8104a88:	681b      	ldr	r3, [r3, #0]
 8104a8a:	4a21      	ldr	r2, [pc, #132]	; (8104b10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8104a8c:	4293      	cmp	r3, r2
 8104a8e:	d013      	beq.n	8104ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104a90:	687b      	ldr	r3, [r7, #4]
 8104a92:	681b      	ldr	r3, [r3, #0]
 8104a94:	4a1f      	ldr	r2, [pc, #124]	; (8104b14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8104a96:	4293      	cmp	r3, r2
 8104a98:	d00e      	beq.n	8104ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104a9a:	687b      	ldr	r3, [r7, #4]
 8104a9c:	681b      	ldr	r3, [r3, #0]
 8104a9e:	4a1e      	ldr	r2, [pc, #120]	; (8104b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8104aa0:	4293      	cmp	r3, r2
 8104aa2:	d009      	beq.n	8104ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104aa4:	687b      	ldr	r3, [r7, #4]
 8104aa6:	681b      	ldr	r3, [r3, #0]
 8104aa8:	4a1c      	ldr	r2, [pc, #112]	; (8104b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8104aaa:	4293      	cmp	r3, r2
 8104aac:	d004      	beq.n	8104ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104aae:	687b      	ldr	r3, [r7, #4]
 8104ab0:	681b      	ldr	r3, [r3, #0]
 8104ab2:	4a1b      	ldr	r2, [pc, #108]	; (8104b20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8104ab4:	4293      	cmp	r3, r2
 8104ab6:	d101      	bne.n	8104abc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8104ab8:	2301      	movs	r3, #1
 8104aba:	e000      	b.n	8104abe <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8104abc:	2300      	movs	r3, #0
 8104abe:	2b00      	cmp	r3, #0
 8104ac0:	d00a      	beq.n	8104ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8104ac2:	68fa      	ldr	r2, [r7, #12]
 8104ac4:	4b17      	ldr	r3, [pc, #92]	; (8104b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8104ac6:	4413      	add	r3, r2
 8104ac8:	009b      	lsls	r3, r3, #2
 8104aca:	461a      	mov	r2, r3
 8104acc:	687b      	ldr	r3, [r7, #4]
 8104ace:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8104ad0:	687b      	ldr	r3, [r7, #4]
 8104ad2:	4a15      	ldr	r2, [pc, #84]	; (8104b28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8104ad4:	671a      	str	r2, [r3, #112]	; 0x70
 8104ad6:	e009      	b.n	8104aec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8104ad8:	68fa      	ldr	r2, [r7, #12]
 8104ada:	4b14      	ldr	r3, [pc, #80]	; (8104b2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8104adc:	4413      	add	r3, r2
 8104ade:	009b      	lsls	r3, r3, #2
 8104ae0:	461a      	mov	r2, r3
 8104ae2:	687b      	ldr	r3, [r7, #4]
 8104ae4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8104ae6:	687b      	ldr	r3, [r7, #4]
 8104ae8:	4a11      	ldr	r2, [pc, #68]	; (8104b30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8104aea:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8104aec:	68fb      	ldr	r3, [r7, #12]
 8104aee:	3b01      	subs	r3, #1
 8104af0:	2201      	movs	r2, #1
 8104af2:	409a      	lsls	r2, r3
 8104af4:	687b      	ldr	r3, [r7, #4]
 8104af6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8104af8:	bf00      	nop
 8104afa:	3714      	adds	r7, #20
 8104afc:	46bd      	mov	sp, r7
 8104afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b02:	4770      	bx	lr
 8104b04:	58025408 	.word	0x58025408
 8104b08:	5802541c 	.word	0x5802541c
 8104b0c:	58025430 	.word	0x58025430
 8104b10:	58025444 	.word	0x58025444
 8104b14:	58025458 	.word	0x58025458
 8104b18:	5802546c 	.word	0x5802546c
 8104b1c:	58025480 	.word	0x58025480
 8104b20:	58025494 	.word	0x58025494
 8104b24:	1600963f 	.word	0x1600963f
 8104b28:	58025940 	.word	0x58025940
 8104b2c:	1000823f 	.word	0x1000823f
 8104b30:	40020940 	.word	0x40020940

08104b34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8104b34:	b480      	push	{r7}
 8104b36:	b089      	sub	sp, #36	; 0x24
 8104b38:	af00      	add	r7, sp, #0
 8104b3a:	6078      	str	r0, [r7, #4]
 8104b3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8104b3e:	2300      	movs	r3, #0
 8104b40:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8104b42:	4b89      	ldr	r3, [pc, #548]	; (8104d68 <HAL_GPIO_Init+0x234>)
 8104b44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8104b46:	e194      	b.n	8104e72 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8104b48:	683b      	ldr	r3, [r7, #0]
 8104b4a:	681a      	ldr	r2, [r3, #0]
 8104b4c:	2101      	movs	r1, #1
 8104b4e:	69fb      	ldr	r3, [r7, #28]
 8104b50:	fa01 f303 	lsl.w	r3, r1, r3
 8104b54:	4013      	ands	r3, r2
 8104b56:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8104b58:	693b      	ldr	r3, [r7, #16]
 8104b5a:	2b00      	cmp	r3, #0
 8104b5c:	f000 8186 	beq.w	8104e6c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8104b60:	683b      	ldr	r3, [r7, #0]
 8104b62:	685b      	ldr	r3, [r3, #4]
 8104b64:	f003 0303 	and.w	r3, r3, #3
 8104b68:	2b01      	cmp	r3, #1
 8104b6a:	d005      	beq.n	8104b78 <HAL_GPIO_Init+0x44>
 8104b6c:	683b      	ldr	r3, [r7, #0]
 8104b6e:	685b      	ldr	r3, [r3, #4]
 8104b70:	f003 0303 	and.w	r3, r3, #3
 8104b74:	2b02      	cmp	r3, #2
 8104b76:	d130      	bne.n	8104bda <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8104b78:	687b      	ldr	r3, [r7, #4]
 8104b7a:	689b      	ldr	r3, [r3, #8]
 8104b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8104b7e:	69fb      	ldr	r3, [r7, #28]
 8104b80:	005b      	lsls	r3, r3, #1
 8104b82:	2203      	movs	r2, #3
 8104b84:	fa02 f303 	lsl.w	r3, r2, r3
 8104b88:	43db      	mvns	r3, r3
 8104b8a:	69ba      	ldr	r2, [r7, #24]
 8104b8c:	4013      	ands	r3, r2
 8104b8e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8104b90:	683b      	ldr	r3, [r7, #0]
 8104b92:	68da      	ldr	r2, [r3, #12]
 8104b94:	69fb      	ldr	r3, [r7, #28]
 8104b96:	005b      	lsls	r3, r3, #1
 8104b98:	fa02 f303 	lsl.w	r3, r2, r3
 8104b9c:	69ba      	ldr	r2, [r7, #24]
 8104b9e:	4313      	orrs	r3, r2
 8104ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8104ba2:	687b      	ldr	r3, [r7, #4]
 8104ba4:	69ba      	ldr	r2, [r7, #24]
 8104ba6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8104ba8:	687b      	ldr	r3, [r7, #4]
 8104baa:	685b      	ldr	r3, [r3, #4]
 8104bac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8104bae:	2201      	movs	r2, #1
 8104bb0:	69fb      	ldr	r3, [r7, #28]
 8104bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8104bb6:	43db      	mvns	r3, r3
 8104bb8:	69ba      	ldr	r2, [r7, #24]
 8104bba:	4013      	ands	r3, r2
 8104bbc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8104bbe:	683b      	ldr	r3, [r7, #0]
 8104bc0:	685b      	ldr	r3, [r3, #4]
 8104bc2:	091b      	lsrs	r3, r3, #4
 8104bc4:	f003 0201 	and.w	r2, r3, #1
 8104bc8:	69fb      	ldr	r3, [r7, #28]
 8104bca:	fa02 f303 	lsl.w	r3, r2, r3
 8104bce:	69ba      	ldr	r2, [r7, #24]
 8104bd0:	4313      	orrs	r3, r2
 8104bd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8104bd4:	687b      	ldr	r3, [r7, #4]
 8104bd6:	69ba      	ldr	r2, [r7, #24]
 8104bd8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8104bda:	683b      	ldr	r3, [r7, #0]
 8104bdc:	685b      	ldr	r3, [r3, #4]
 8104bde:	f003 0303 	and.w	r3, r3, #3
 8104be2:	2b03      	cmp	r3, #3
 8104be4:	d017      	beq.n	8104c16 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8104be6:	687b      	ldr	r3, [r7, #4]
 8104be8:	68db      	ldr	r3, [r3, #12]
 8104bea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8104bec:	69fb      	ldr	r3, [r7, #28]
 8104bee:	005b      	lsls	r3, r3, #1
 8104bf0:	2203      	movs	r2, #3
 8104bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8104bf6:	43db      	mvns	r3, r3
 8104bf8:	69ba      	ldr	r2, [r7, #24]
 8104bfa:	4013      	ands	r3, r2
 8104bfc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8104bfe:	683b      	ldr	r3, [r7, #0]
 8104c00:	689a      	ldr	r2, [r3, #8]
 8104c02:	69fb      	ldr	r3, [r7, #28]
 8104c04:	005b      	lsls	r3, r3, #1
 8104c06:	fa02 f303 	lsl.w	r3, r2, r3
 8104c0a:	69ba      	ldr	r2, [r7, #24]
 8104c0c:	4313      	orrs	r3, r2
 8104c0e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8104c10:	687b      	ldr	r3, [r7, #4]
 8104c12:	69ba      	ldr	r2, [r7, #24]
 8104c14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8104c16:	683b      	ldr	r3, [r7, #0]
 8104c18:	685b      	ldr	r3, [r3, #4]
 8104c1a:	f003 0303 	and.w	r3, r3, #3
 8104c1e:	2b02      	cmp	r3, #2
 8104c20:	d123      	bne.n	8104c6a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8104c22:	69fb      	ldr	r3, [r7, #28]
 8104c24:	08da      	lsrs	r2, r3, #3
 8104c26:	687b      	ldr	r3, [r7, #4]
 8104c28:	3208      	adds	r2, #8
 8104c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8104c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8104c30:	69fb      	ldr	r3, [r7, #28]
 8104c32:	f003 0307 	and.w	r3, r3, #7
 8104c36:	009b      	lsls	r3, r3, #2
 8104c38:	220f      	movs	r2, #15
 8104c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8104c3e:	43db      	mvns	r3, r3
 8104c40:	69ba      	ldr	r2, [r7, #24]
 8104c42:	4013      	ands	r3, r2
 8104c44:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8104c46:	683b      	ldr	r3, [r7, #0]
 8104c48:	691a      	ldr	r2, [r3, #16]
 8104c4a:	69fb      	ldr	r3, [r7, #28]
 8104c4c:	f003 0307 	and.w	r3, r3, #7
 8104c50:	009b      	lsls	r3, r3, #2
 8104c52:	fa02 f303 	lsl.w	r3, r2, r3
 8104c56:	69ba      	ldr	r2, [r7, #24]
 8104c58:	4313      	orrs	r3, r2
 8104c5a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8104c5c:	69fb      	ldr	r3, [r7, #28]
 8104c5e:	08da      	lsrs	r2, r3, #3
 8104c60:	687b      	ldr	r3, [r7, #4]
 8104c62:	3208      	adds	r2, #8
 8104c64:	69b9      	ldr	r1, [r7, #24]
 8104c66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8104c6a:	687b      	ldr	r3, [r7, #4]
 8104c6c:	681b      	ldr	r3, [r3, #0]
 8104c6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8104c70:	69fb      	ldr	r3, [r7, #28]
 8104c72:	005b      	lsls	r3, r3, #1
 8104c74:	2203      	movs	r2, #3
 8104c76:	fa02 f303 	lsl.w	r3, r2, r3
 8104c7a:	43db      	mvns	r3, r3
 8104c7c:	69ba      	ldr	r2, [r7, #24]
 8104c7e:	4013      	ands	r3, r2
 8104c80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8104c82:	683b      	ldr	r3, [r7, #0]
 8104c84:	685b      	ldr	r3, [r3, #4]
 8104c86:	f003 0203 	and.w	r2, r3, #3
 8104c8a:	69fb      	ldr	r3, [r7, #28]
 8104c8c:	005b      	lsls	r3, r3, #1
 8104c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8104c92:	69ba      	ldr	r2, [r7, #24]
 8104c94:	4313      	orrs	r3, r2
 8104c96:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8104c98:	687b      	ldr	r3, [r7, #4]
 8104c9a:	69ba      	ldr	r2, [r7, #24]
 8104c9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8104c9e:	683b      	ldr	r3, [r7, #0]
 8104ca0:	685b      	ldr	r3, [r3, #4]
 8104ca2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8104ca6:	2b00      	cmp	r3, #0
 8104ca8:	f000 80e0 	beq.w	8104e6c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8104cac:	4b2f      	ldr	r3, [pc, #188]	; (8104d6c <HAL_GPIO_Init+0x238>)
 8104cae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8104cb2:	4a2e      	ldr	r2, [pc, #184]	; (8104d6c <HAL_GPIO_Init+0x238>)
 8104cb4:	f043 0302 	orr.w	r3, r3, #2
 8104cb8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8104cbc:	4b2b      	ldr	r3, [pc, #172]	; (8104d6c <HAL_GPIO_Init+0x238>)
 8104cbe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8104cc2:	f003 0302 	and.w	r3, r3, #2
 8104cc6:	60fb      	str	r3, [r7, #12]
 8104cc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8104cca:	4a29      	ldr	r2, [pc, #164]	; (8104d70 <HAL_GPIO_Init+0x23c>)
 8104ccc:	69fb      	ldr	r3, [r7, #28]
 8104cce:	089b      	lsrs	r3, r3, #2
 8104cd0:	3302      	adds	r3, #2
 8104cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8104cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8104cd8:	69fb      	ldr	r3, [r7, #28]
 8104cda:	f003 0303 	and.w	r3, r3, #3
 8104cde:	009b      	lsls	r3, r3, #2
 8104ce0:	220f      	movs	r2, #15
 8104ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8104ce6:	43db      	mvns	r3, r3
 8104ce8:	69ba      	ldr	r2, [r7, #24]
 8104cea:	4013      	ands	r3, r2
 8104cec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8104cee:	687b      	ldr	r3, [r7, #4]
 8104cf0:	4a20      	ldr	r2, [pc, #128]	; (8104d74 <HAL_GPIO_Init+0x240>)
 8104cf2:	4293      	cmp	r3, r2
 8104cf4:	d052      	beq.n	8104d9c <HAL_GPIO_Init+0x268>
 8104cf6:	687b      	ldr	r3, [r7, #4]
 8104cf8:	4a1f      	ldr	r2, [pc, #124]	; (8104d78 <HAL_GPIO_Init+0x244>)
 8104cfa:	4293      	cmp	r3, r2
 8104cfc:	d031      	beq.n	8104d62 <HAL_GPIO_Init+0x22e>
 8104cfe:	687b      	ldr	r3, [r7, #4]
 8104d00:	4a1e      	ldr	r2, [pc, #120]	; (8104d7c <HAL_GPIO_Init+0x248>)
 8104d02:	4293      	cmp	r3, r2
 8104d04:	d02b      	beq.n	8104d5e <HAL_GPIO_Init+0x22a>
 8104d06:	687b      	ldr	r3, [r7, #4]
 8104d08:	4a1d      	ldr	r2, [pc, #116]	; (8104d80 <HAL_GPIO_Init+0x24c>)
 8104d0a:	4293      	cmp	r3, r2
 8104d0c:	d025      	beq.n	8104d5a <HAL_GPIO_Init+0x226>
 8104d0e:	687b      	ldr	r3, [r7, #4]
 8104d10:	4a1c      	ldr	r2, [pc, #112]	; (8104d84 <HAL_GPIO_Init+0x250>)
 8104d12:	4293      	cmp	r3, r2
 8104d14:	d01f      	beq.n	8104d56 <HAL_GPIO_Init+0x222>
 8104d16:	687b      	ldr	r3, [r7, #4]
 8104d18:	4a1b      	ldr	r2, [pc, #108]	; (8104d88 <HAL_GPIO_Init+0x254>)
 8104d1a:	4293      	cmp	r3, r2
 8104d1c:	d019      	beq.n	8104d52 <HAL_GPIO_Init+0x21e>
 8104d1e:	687b      	ldr	r3, [r7, #4]
 8104d20:	4a1a      	ldr	r2, [pc, #104]	; (8104d8c <HAL_GPIO_Init+0x258>)
 8104d22:	4293      	cmp	r3, r2
 8104d24:	d013      	beq.n	8104d4e <HAL_GPIO_Init+0x21a>
 8104d26:	687b      	ldr	r3, [r7, #4]
 8104d28:	4a19      	ldr	r2, [pc, #100]	; (8104d90 <HAL_GPIO_Init+0x25c>)
 8104d2a:	4293      	cmp	r3, r2
 8104d2c:	d00d      	beq.n	8104d4a <HAL_GPIO_Init+0x216>
 8104d2e:	687b      	ldr	r3, [r7, #4]
 8104d30:	4a18      	ldr	r2, [pc, #96]	; (8104d94 <HAL_GPIO_Init+0x260>)
 8104d32:	4293      	cmp	r3, r2
 8104d34:	d007      	beq.n	8104d46 <HAL_GPIO_Init+0x212>
 8104d36:	687b      	ldr	r3, [r7, #4]
 8104d38:	4a17      	ldr	r2, [pc, #92]	; (8104d98 <HAL_GPIO_Init+0x264>)
 8104d3a:	4293      	cmp	r3, r2
 8104d3c:	d101      	bne.n	8104d42 <HAL_GPIO_Init+0x20e>
 8104d3e:	2309      	movs	r3, #9
 8104d40:	e02d      	b.n	8104d9e <HAL_GPIO_Init+0x26a>
 8104d42:	230a      	movs	r3, #10
 8104d44:	e02b      	b.n	8104d9e <HAL_GPIO_Init+0x26a>
 8104d46:	2308      	movs	r3, #8
 8104d48:	e029      	b.n	8104d9e <HAL_GPIO_Init+0x26a>
 8104d4a:	2307      	movs	r3, #7
 8104d4c:	e027      	b.n	8104d9e <HAL_GPIO_Init+0x26a>
 8104d4e:	2306      	movs	r3, #6
 8104d50:	e025      	b.n	8104d9e <HAL_GPIO_Init+0x26a>
 8104d52:	2305      	movs	r3, #5
 8104d54:	e023      	b.n	8104d9e <HAL_GPIO_Init+0x26a>
 8104d56:	2304      	movs	r3, #4
 8104d58:	e021      	b.n	8104d9e <HAL_GPIO_Init+0x26a>
 8104d5a:	2303      	movs	r3, #3
 8104d5c:	e01f      	b.n	8104d9e <HAL_GPIO_Init+0x26a>
 8104d5e:	2302      	movs	r3, #2
 8104d60:	e01d      	b.n	8104d9e <HAL_GPIO_Init+0x26a>
 8104d62:	2301      	movs	r3, #1
 8104d64:	e01b      	b.n	8104d9e <HAL_GPIO_Init+0x26a>
 8104d66:	bf00      	nop
 8104d68:	580000c0 	.word	0x580000c0
 8104d6c:	58024400 	.word	0x58024400
 8104d70:	58000400 	.word	0x58000400
 8104d74:	58020000 	.word	0x58020000
 8104d78:	58020400 	.word	0x58020400
 8104d7c:	58020800 	.word	0x58020800
 8104d80:	58020c00 	.word	0x58020c00
 8104d84:	58021000 	.word	0x58021000
 8104d88:	58021400 	.word	0x58021400
 8104d8c:	58021800 	.word	0x58021800
 8104d90:	58021c00 	.word	0x58021c00
 8104d94:	58022000 	.word	0x58022000
 8104d98:	58022400 	.word	0x58022400
 8104d9c:	2300      	movs	r3, #0
 8104d9e:	69fa      	ldr	r2, [r7, #28]
 8104da0:	f002 0203 	and.w	r2, r2, #3
 8104da4:	0092      	lsls	r2, r2, #2
 8104da6:	4093      	lsls	r3, r2
 8104da8:	69ba      	ldr	r2, [r7, #24]
 8104daa:	4313      	orrs	r3, r2
 8104dac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8104dae:	4938      	ldr	r1, [pc, #224]	; (8104e90 <HAL_GPIO_Init+0x35c>)
 8104db0:	69fb      	ldr	r3, [r7, #28]
 8104db2:	089b      	lsrs	r3, r3, #2
 8104db4:	3302      	adds	r3, #2
 8104db6:	69ba      	ldr	r2, [r7, #24]
 8104db8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8104dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8104dc0:	681b      	ldr	r3, [r3, #0]
 8104dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104dc4:	693b      	ldr	r3, [r7, #16]
 8104dc6:	43db      	mvns	r3, r3
 8104dc8:	69ba      	ldr	r2, [r7, #24]
 8104dca:	4013      	ands	r3, r2
 8104dcc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8104dce:	683b      	ldr	r3, [r7, #0]
 8104dd0:	685b      	ldr	r3, [r3, #4]
 8104dd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8104dd6:	2b00      	cmp	r3, #0
 8104dd8:	d003      	beq.n	8104de2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8104dda:	69ba      	ldr	r2, [r7, #24]
 8104ddc:	693b      	ldr	r3, [r7, #16]
 8104dde:	4313      	orrs	r3, r2
 8104de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8104de2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8104de6:	69bb      	ldr	r3, [r7, #24]
 8104de8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8104dea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8104dee:	685b      	ldr	r3, [r3, #4]
 8104df0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104df2:	693b      	ldr	r3, [r7, #16]
 8104df4:	43db      	mvns	r3, r3
 8104df6:	69ba      	ldr	r2, [r7, #24]
 8104df8:	4013      	ands	r3, r2
 8104dfa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8104dfc:	683b      	ldr	r3, [r7, #0]
 8104dfe:	685b      	ldr	r3, [r3, #4]
 8104e00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8104e04:	2b00      	cmp	r3, #0
 8104e06:	d003      	beq.n	8104e10 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8104e08:	69ba      	ldr	r2, [r7, #24]
 8104e0a:	693b      	ldr	r3, [r7, #16]
 8104e0c:	4313      	orrs	r3, r2
 8104e0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8104e10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8104e14:	69bb      	ldr	r3, [r7, #24]
 8104e16:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8104e18:	697b      	ldr	r3, [r7, #20]
 8104e1a:	685b      	ldr	r3, [r3, #4]
 8104e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104e1e:	693b      	ldr	r3, [r7, #16]
 8104e20:	43db      	mvns	r3, r3
 8104e22:	69ba      	ldr	r2, [r7, #24]
 8104e24:	4013      	ands	r3, r2
 8104e26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8104e28:	683b      	ldr	r3, [r7, #0]
 8104e2a:	685b      	ldr	r3, [r3, #4]
 8104e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104e30:	2b00      	cmp	r3, #0
 8104e32:	d003      	beq.n	8104e3c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8104e34:	69ba      	ldr	r2, [r7, #24]
 8104e36:	693b      	ldr	r3, [r7, #16]
 8104e38:	4313      	orrs	r3, r2
 8104e3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8104e3c:	697b      	ldr	r3, [r7, #20]
 8104e3e:	69ba      	ldr	r2, [r7, #24]
 8104e40:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8104e42:	697b      	ldr	r3, [r7, #20]
 8104e44:	681b      	ldr	r3, [r3, #0]
 8104e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104e48:	693b      	ldr	r3, [r7, #16]
 8104e4a:	43db      	mvns	r3, r3
 8104e4c:	69ba      	ldr	r2, [r7, #24]
 8104e4e:	4013      	ands	r3, r2
 8104e50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8104e52:	683b      	ldr	r3, [r7, #0]
 8104e54:	685b      	ldr	r3, [r3, #4]
 8104e56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8104e5a:	2b00      	cmp	r3, #0
 8104e5c:	d003      	beq.n	8104e66 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8104e5e:	69ba      	ldr	r2, [r7, #24]
 8104e60:	693b      	ldr	r3, [r7, #16]
 8104e62:	4313      	orrs	r3, r2
 8104e64:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8104e66:	697b      	ldr	r3, [r7, #20]
 8104e68:	69ba      	ldr	r2, [r7, #24]
 8104e6a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8104e6c:	69fb      	ldr	r3, [r7, #28]
 8104e6e:	3301      	adds	r3, #1
 8104e70:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8104e72:	683b      	ldr	r3, [r7, #0]
 8104e74:	681a      	ldr	r2, [r3, #0]
 8104e76:	69fb      	ldr	r3, [r7, #28]
 8104e78:	fa22 f303 	lsr.w	r3, r2, r3
 8104e7c:	2b00      	cmp	r3, #0
 8104e7e:	f47f ae63 	bne.w	8104b48 <HAL_GPIO_Init+0x14>
  }
}
 8104e82:	bf00      	nop
 8104e84:	bf00      	nop
 8104e86:	3724      	adds	r7, #36	; 0x24
 8104e88:	46bd      	mov	sp, r7
 8104e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e8e:	4770      	bx	lr
 8104e90:	58000400 	.word	0x58000400

08104e94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8104e94:	b480      	push	{r7}
 8104e96:	b083      	sub	sp, #12
 8104e98:	af00      	add	r7, sp, #0
 8104e9a:	6078      	str	r0, [r7, #4]
 8104e9c:	460b      	mov	r3, r1
 8104e9e:	807b      	strh	r3, [r7, #2]
 8104ea0:	4613      	mov	r3, r2
 8104ea2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8104ea4:	787b      	ldrb	r3, [r7, #1]
 8104ea6:	2b00      	cmp	r3, #0
 8104ea8:	d003      	beq.n	8104eb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8104eaa:	887a      	ldrh	r2, [r7, #2]
 8104eac:	687b      	ldr	r3, [r7, #4]
 8104eae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8104eb0:	e003      	b.n	8104eba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8104eb2:	887b      	ldrh	r3, [r7, #2]
 8104eb4:	041a      	lsls	r2, r3, #16
 8104eb6:	687b      	ldr	r3, [r7, #4]
 8104eb8:	619a      	str	r2, [r3, #24]
}
 8104eba:	bf00      	nop
 8104ebc:	370c      	adds	r7, #12
 8104ebe:	46bd      	mov	sp, r7
 8104ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ec4:	4770      	bx	lr
	...

08104ec8 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8104ec8:	b480      	push	{r7}
 8104eca:	b083      	sub	sp, #12
 8104ecc:	af00      	add	r7, sp, #0
 8104ece:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8104ed0:	4b05      	ldr	r3, [pc, #20]	; (8104ee8 <HAL_HSEM_ActivateNotification+0x20>)
 8104ed2:	681a      	ldr	r2, [r3, #0]
 8104ed4:	4904      	ldr	r1, [pc, #16]	; (8104ee8 <HAL_HSEM_ActivateNotification+0x20>)
 8104ed6:	687b      	ldr	r3, [r7, #4]
 8104ed8:	4313      	orrs	r3, r2
 8104eda:	600b      	str	r3, [r1, #0]
#endif
}
 8104edc:	bf00      	nop
 8104ede:	370c      	adds	r7, #12
 8104ee0:	46bd      	mov	sp, r7
 8104ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ee6:	4770      	bx	lr
 8104ee8:	58026510 	.word	0x58026510

08104eec <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8104eec:	b580      	push	{r7, lr}
 8104eee:	b084      	sub	sp, #16
 8104ef0:	af00      	add	r7, sp, #0
 8104ef2:	60f8      	str	r0, [r7, #12]
 8104ef4:	460b      	mov	r3, r1
 8104ef6:	607a      	str	r2, [r7, #4]
 8104ef8:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8104efa:	4b37      	ldr	r3, [pc, #220]	; (8104fd8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104efc:	681b      	ldr	r3, [r3, #0]
 8104efe:	f023 0201 	bic.w	r2, r3, #1
 8104f02:	4935      	ldr	r1, [pc, #212]	; (8104fd8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104f04:	68fb      	ldr	r3, [r7, #12]
 8104f06:	4313      	orrs	r3, r2
 8104f08:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8104f0a:	687b      	ldr	r3, [r7, #4]
 8104f0c:	2b00      	cmp	r3, #0
 8104f0e:	d123      	bne.n	8104f58 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8104f10:	f7fd fbd8 	bl	81026c4 <HAL_GetCurrentCPUID>
 8104f14:	4603      	mov	r3, r0
 8104f16:	2b03      	cmp	r3, #3
 8104f18:	d158      	bne.n	8104fcc <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8104f1a:	4b2f      	ldr	r3, [pc, #188]	; (8104fd8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104f1c:	691b      	ldr	r3, [r3, #16]
 8104f1e:	4a2e      	ldr	r2, [pc, #184]	; (8104fd8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104f20:	f023 0301 	bic.w	r3, r3, #1
 8104f24:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104f26:	4b2d      	ldr	r3, [pc, #180]	; (8104fdc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104f28:	691b      	ldr	r3, [r3, #16]
 8104f2a:	4a2c      	ldr	r2, [pc, #176]	; (8104fdc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104f2c:	f043 0304 	orr.w	r3, r3, #4
 8104f30:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8104f32:	f3bf 8f4f 	dsb	sy
}
 8104f36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8104f38:	f3bf 8f6f 	isb	sy
}
 8104f3c:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8104f3e:	7afb      	ldrb	r3, [r7, #11]
 8104f40:	2b01      	cmp	r3, #1
 8104f42:	d101      	bne.n	8104f48 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8104f44:	bf30      	wfi
 8104f46:	e000      	b.n	8104f4a <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8104f48:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104f4a:	4b24      	ldr	r3, [pc, #144]	; (8104fdc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104f4c:	691b      	ldr	r3, [r3, #16]
 8104f4e:	4a23      	ldr	r2, [pc, #140]	; (8104fdc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104f50:	f023 0304 	bic.w	r3, r3, #4
 8104f54:	6113      	str	r3, [r2, #16]
 8104f56:	e03c      	b.n	8104fd2 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8104f58:	687b      	ldr	r3, [r7, #4]
 8104f5a:	2b01      	cmp	r3, #1
 8104f5c:	d123      	bne.n	8104fa6 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8104f5e:	f7fd fbb1 	bl	81026c4 <HAL_GetCurrentCPUID>
 8104f62:	4603      	mov	r3, r0
 8104f64:	2b01      	cmp	r3, #1
 8104f66:	d133      	bne.n	8104fd0 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8104f68:	4b1b      	ldr	r3, [pc, #108]	; (8104fd8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104f6a:	695b      	ldr	r3, [r3, #20]
 8104f6c:	4a1a      	ldr	r2, [pc, #104]	; (8104fd8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104f6e:	f023 0302 	bic.w	r3, r3, #2
 8104f72:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104f74:	4b19      	ldr	r3, [pc, #100]	; (8104fdc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104f76:	691b      	ldr	r3, [r3, #16]
 8104f78:	4a18      	ldr	r2, [pc, #96]	; (8104fdc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104f7a:	f043 0304 	orr.w	r3, r3, #4
 8104f7e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8104f80:	f3bf 8f4f 	dsb	sy
}
 8104f84:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8104f86:	f3bf 8f6f 	isb	sy
}
 8104f8a:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8104f8c:	7afb      	ldrb	r3, [r7, #11]
 8104f8e:	2b01      	cmp	r3, #1
 8104f90:	d101      	bne.n	8104f96 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8104f92:	bf30      	wfi
 8104f94:	e000      	b.n	8104f98 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8104f96:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104f98:	4b10      	ldr	r3, [pc, #64]	; (8104fdc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104f9a:	691b      	ldr	r3, [r3, #16]
 8104f9c:	4a0f      	ldr	r2, [pc, #60]	; (8104fdc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104f9e:	f023 0304 	bic.w	r3, r3, #4
 8104fa2:	6113      	str	r3, [r2, #16]
 8104fa4:	e015      	b.n	8104fd2 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8104fa6:	f7fd fb8d 	bl	81026c4 <HAL_GetCurrentCPUID>
 8104faa:	4603      	mov	r3, r0
 8104fac:	2b03      	cmp	r3, #3
 8104fae:	d106      	bne.n	8104fbe <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8104fb0:	4b09      	ldr	r3, [pc, #36]	; (8104fd8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104fb2:	691b      	ldr	r3, [r3, #16]
 8104fb4:	4a08      	ldr	r2, [pc, #32]	; (8104fd8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104fb6:	f023 0304 	bic.w	r3, r3, #4
 8104fba:	6113      	str	r3, [r2, #16]
 8104fbc:	e009      	b.n	8104fd2 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8104fbe:	4b06      	ldr	r3, [pc, #24]	; (8104fd8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104fc0:	695b      	ldr	r3, [r3, #20]
 8104fc2:	4a05      	ldr	r2, [pc, #20]	; (8104fd8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104fc4:	f023 0304 	bic.w	r3, r3, #4
 8104fc8:	6153      	str	r3, [r2, #20]
 8104fca:	e002      	b.n	8104fd2 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8104fcc:	bf00      	nop
 8104fce:	e000      	b.n	8104fd2 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8104fd0:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8104fd2:	3710      	adds	r7, #16
 8104fd4:	46bd      	mov	sp, r7
 8104fd6:	bd80      	pop	{r7, pc}
 8104fd8:	58024800 	.word	0x58024800
 8104fdc:	e000ed00 	.word	0xe000ed00

08104fe0 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8104fe0:	b580      	push	{r7, lr}
 8104fe2:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8104fe4:	f7fd fb6e 	bl	81026c4 <HAL_GetCurrentCPUID>
 8104fe8:	4603      	mov	r3, r0
 8104fea:	2b03      	cmp	r3, #3
 8104fec:	d101      	bne.n	8104ff2 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8104fee:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8104ff0:	e001      	b.n	8104ff6 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8104ff2:	bf40      	sev
    __WFE ();
 8104ff4:	bf20      	wfe
}
 8104ff6:	bf00      	nop
 8104ff8:	bd80      	pop	{r7, pc}
	...

08104ffc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8104ffc:	b480      	push	{r7}
 8104ffe:	b089      	sub	sp, #36	; 0x24
 8105000:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8105002:	4bb3      	ldr	r3, [pc, #716]	; (81052d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105004:	691b      	ldr	r3, [r3, #16]
 8105006:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810500a:	2b18      	cmp	r3, #24
 810500c:	f200 8155 	bhi.w	81052ba <HAL_RCC_GetSysClockFreq+0x2be>
 8105010:	a201      	add	r2, pc, #4	; (adr r2, 8105018 <HAL_RCC_GetSysClockFreq+0x1c>)
 8105012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105016:	bf00      	nop
 8105018:	0810507d 	.word	0x0810507d
 810501c:	081052bb 	.word	0x081052bb
 8105020:	081052bb 	.word	0x081052bb
 8105024:	081052bb 	.word	0x081052bb
 8105028:	081052bb 	.word	0x081052bb
 810502c:	081052bb 	.word	0x081052bb
 8105030:	081052bb 	.word	0x081052bb
 8105034:	081052bb 	.word	0x081052bb
 8105038:	081050a3 	.word	0x081050a3
 810503c:	081052bb 	.word	0x081052bb
 8105040:	081052bb 	.word	0x081052bb
 8105044:	081052bb 	.word	0x081052bb
 8105048:	081052bb 	.word	0x081052bb
 810504c:	081052bb 	.word	0x081052bb
 8105050:	081052bb 	.word	0x081052bb
 8105054:	081052bb 	.word	0x081052bb
 8105058:	081050a9 	.word	0x081050a9
 810505c:	081052bb 	.word	0x081052bb
 8105060:	081052bb 	.word	0x081052bb
 8105064:	081052bb 	.word	0x081052bb
 8105068:	081052bb 	.word	0x081052bb
 810506c:	081052bb 	.word	0x081052bb
 8105070:	081052bb 	.word	0x081052bb
 8105074:	081052bb 	.word	0x081052bb
 8105078:	081050af 	.word	0x081050af
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810507c:	4b94      	ldr	r3, [pc, #592]	; (81052d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810507e:	681b      	ldr	r3, [r3, #0]
 8105080:	f003 0320 	and.w	r3, r3, #32
 8105084:	2b00      	cmp	r3, #0
 8105086:	d009      	beq.n	810509c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105088:	4b91      	ldr	r3, [pc, #580]	; (81052d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810508a:	681b      	ldr	r3, [r3, #0]
 810508c:	08db      	lsrs	r3, r3, #3
 810508e:	f003 0303 	and.w	r3, r3, #3
 8105092:	4a90      	ldr	r2, [pc, #576]	; (81052d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8105094:	fa22 f303 	lsr.w	r3, r2, r3
 8105098:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 810509a:	e111      	b.n	81052c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 810509c:	4b8d      	ldr	r3, [pc, #564]	; (81052d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810509e:	61bb      	str	r3, [r7, #24]
      break;
 81050a0:	e10e      	b.n	81052c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 81050a2:	4b8d      	ldr	r3, [pc, #564]	; (81052d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81050a4:	61bb      	str	r3, [r7, #24]
      break;
 81050a6:	e10b      	b.n	81052c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 81050a8:	4b8c      	ldr	r3, [pc, #560]	; (81052dc <HAL_RCC_GetSysClockFreq+0x2e0>)
 81050aa:	61bb      	str	r3, [r7, #24]
      break;
 81050ac:	e108      	b.n	81052c0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81050ae:	4b88      	ldr	r3, [pc, #544]	; (81052d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81050b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81050b2:	f003 0303 	and.w	r3, r3, #3
 81050b6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 81050b8:	4b85      	ldr	r3, [pc, #532]	; (81052d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81050ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81050bc:	091b      	lsrs	r3, r3, #4
 81050be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81050c2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 81050c4:	4b82      	ldr	r3, [pc, #520]	; (81052d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81050c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81050c8:	f003 0301 	and.w	r3, r3, #1
 81050cc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81050ce:	4b80      	ldr	r3, [pc, #512]	; (81052d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81050d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81050d2:	08db      	lsrs	r3, r3, #3
 81050d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81050d8:	68fa      	ldr	r2, [r7, #12]
 81050da:	fb02 f303 	mul.w	r3, r2, r3
 81050de:	ee07 3a90 	vmov	s15, r3
 81050e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81050e6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 81050ea:	693b      	ldr	r3, [r7, #16]
 81050ec:	2b00      	cmp	r3, #0
 81050ee:	f000 80e1 	beq.w	81052b4 <HAL_RCC_GetSysClockFreq+0x2b8>
 81050f2:	697b      	ldr	r3, [r7, #20]
 81050f4:	2b02      	cmp	r3, #2
 81050f6:	f000 8083 	beq.w	8105200 <HAL_RCC_GetSysClockFreq+0x204>
 81050fa:	697b      	ldr	r3, [r7, #20]
 81050fc:	2b02      	cmp	r3, #2
 81050fe:	f200 80a1 	bhi.w	8105244 <HAL_RCC_GetSysClockFreq+0x248>
 8105102:	697b      	ldr	r3, [r7, #20]
 8105104:	2b00      	cmp	r3, #0
 8105106:	d003      	beq.n	8105110 <HAL_RCC_GetSysClockFreq+0x114>
 8105108:	697b      	ldr	r3, [r7, #20]
 810510a:	2b01      	cmp	r3, #1
 810510c:	d056      	beq.n	81051bc <HAL_RCC_GetSysClockFreq+0x1c0>
 810510e:	e099      	b.n	8105244 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105110:	4b6f      	ldr	r3, [pc, #444]	; (81052d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105112:	681b      	ldr	r3, [r3, #0]
 8105114:	f003 0320 	and.w	r3, r3, #32
 8105118:	2b00      	cmp	r3, #0
 810511a:	d02d      	beq.n	8105178 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810511c:	4b6c      	ldr	r3, [pc, #432]	; (81052d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810511e:	681b      	ldr	r3, [r3, #0]
 8105120:	08db      	lsrs	r3, r3, #3
 8105122:	f003 0303 	and.w	r3, r3, #3
 8105126:	4a6b      	ldr	r2, [pc, #428]	; (81052d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8105128:	fa22 f303 	lsr.w	r3, r2, r3
 810512c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810512e:	687b      	ldr	r3, [r7, #4]
 8105130:	ee07 3a90 	vmov	s15, r3
 8105134:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105138:	693b      	ldr	r3, [r7, #16]
 810513a:	ee07 3a90 	vmov	s15, r3
 810513e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105146:	4b62      	ldr	r3, [pc, #392]	; (81052d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810514a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810514e:	ee07 3a90 	vmov	s15, r3
 8105152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105156:	ed97 6a02 	vldr	s12, [r7, #8]
 810515a:	eddf 5a61 	vldr	s11, [pc, #388]	; 81052e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 810515e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105166:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810516a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810516e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105172:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8105176:	e087      	b.n	8105288 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105178:	693b      	ldr	r3, [r7, #16]
 810517a:	ee07 3a90 	vmov	s15, r3
 810517e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105182:	eddf 6a58 	vldr	s13, [pc, #352]	; 81052e4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8105186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810518a:	4b51      	ldr	r3, [pc, #324]	; (81052d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810518c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810518e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105192:	ee07 3a90 	vmov	s15, r3
 8105196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810519a:	ed97 6a02 	vldr	s12, [r7, #8]
 810519e:	eddf 5a50 	vldr	s11, [pc, #320]	; 81052e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 81051a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81051a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81051aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81051ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81051b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81051b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81051ba:	e065      	b.n	8105288 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81051bc:	693b      	ldr	r3, [r7, #16]
 81051be:	ee07 3a90 	vmov	s15, r3
 81051c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81051c6:	eddf 6a48 	vldr	s13, [pc, #288]	; 81052e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 81051ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81051ce:	4b40      	ldr	r3, [pc, #256]	; (81052d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81051d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81051d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81051d6:	ee07 3a90 	vmov	s15, r3
 81051da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81051de:	ed97 6a02 	vldr	s12, [r7, #8]
 81051e2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 81052e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 81051e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81051ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81051ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81051f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81051f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81051fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81051fe:	e043      	b.n	8105288 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105200:	693b      	ldr	r3, [r7, #16]
 8105202:	ee07 3a90 	vmov	s15, r3
 8105206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810520a:	eddf 6a38 	vldr	s13, [pc, #224]	; 81052ec <HAL_RCC_GetSysClockFreq+0x2f0>
 810520e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105212:	4b2f      	ldr	r3, [pc, #188]	; (81052d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810521a:	ee07 3a90 	vmov	s15, r3
 810521e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105222:	ed97 6a02 	vldr	s12, [r7, #8]
 8105226:	eddf 5a2e 	vldr	s11, [pc, #184]	; 81052e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 810522a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810522e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105232:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810523a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810523e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8105242:	e021      	b.n	8105288 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105244:	693b      	ldr	r3, [r7, #16]
 8105246:	ee07 3a90 	vmov	s15, r3
 810524a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810524e:	eddf 6a26 	vldr	s13, [pc, #152]	; 81052e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8105252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105256:	4b1e      	ldr	r3, [pc, #120]	; (81052d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810525a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810525e:	ee07 3a90 	vmov	s15, r3
 8105262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105266:	ed97 6a02 	vldr	s12, [r7, #8]
 810526a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 81052e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 810526e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105276:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810527a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810527e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105282:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8105286:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8105288:	4b11      	ldr	r3, [pc, #68]	; (81052d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810528a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810528c:	0a5b      	lsrs	r3, r3, #9
 810528e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105292:	3301      	adds	r3, #1
 8105294:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8105296:	683b      	ldr	r3, [r7, #0]
 8105298:	ee07 3a90 	vmov	s15, r3
 810529c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81052a0:	edd7 6a07 	vldr	s13, [r7, #28]
 81052a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81052a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81052ac:	ee17 3a90 	vmov	r3, s15
 81052b0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 81052b2:	e005      	b.n	81052c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 81052b4:	2300      	movs	r3, #0
 81052b6:	61bb      	str	r3, [r7, #24]
      break;
 81052b8:	e002      	b.n	81052c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 81052ba:	4b07      	ldr	r3, [pc, #28]	; (81052d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81052bc:	61bb      	str	r3, [r7, #24]
      break;
 81052be:	bf00      	nop
  }

  return sysclockfreq;
 81052c0:	69bb      	ldr	r3, [r7, #24]
}
 81052c2:	4618      	mov	r0, r3
 81052c4:	3724      	adds	r7, #36	; 0x24
 81052c6:	46bd      	mov	sp, r7
 81052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81052cc:	4770      	bx	lr
 81052ce:	bf00      	nop
 81052d0:	58024400 	.word	0x58024400
 81052d4:	03d09000 	.word	0x03d09000
 81052d8:	003d0900 	.word	0x003d0900
 81052dc:	017d7840 	.word	0x017d7840
 81052e0:	46000000 	.word	0x46000000
 81052e4:	4c742400 	.word	0x4c742400
 81052e8:	4a742400 	.word	0x4a742400
 81052ec:	4bbebc20 	.word	0x4bbebc20

081052f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 81052f0:	b580      	push	{r7, lr}
 81052f2:	b082      	sub	sp, #8
 81052f4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 81052f6:	f7ff fe81 	bl	8104ffc <HAL_RCC_GetSysClockFreq>
 81052fa:	4602      	mov	r2, r0
 81052fc:	4b11      	ldr	r3, [pc, #68]	; (8105344 <HAL_RCC_GetHCLKFreq+0x54>)
 81052fe:	699b      	ldr	r3, [r3, #24]
 8105300:	0a1b      	lsrs	r3, r3, #8
 8105302:	f003 030f 	and.w	r3, r3, #15
 8105306:	4910      	ldr	r1, [pc, #64]	; (8105348 <HAL_RCC_GetHCLKFreq+0x58>)
 8105308:	5ccb      	ldrb	r3, [r1, r3]
 810530a:	f003 031f 	and.w	r3, r3, #31
 810530e:	fa22 f303 	lsr.w	r3, r2, r3
 8105312:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8105314:	4b0b      	ldr	r3, [pc, #44]	; (8105344 <HAL_RCC_GetHCLKFreq+0x54>)
 8105316:	699b      	ldr	r3, [r3, #24]
 8105318:	f003 030f 	and.w	r3, r3, #15
 810531c:	4a0a      	ldr	r2, [pc, #40]	; (8105348 <HAL_RCC_GetHCLKFreq+0x58>)
 810531e:	5cd3      	ldrb	r3, [r2, r3]
 8105320:	f003 031f 	and.w	r3, r3, #31
 8105324:	687a      	ldr	r2, [r7, #4]
 8105326:	fa22 f303 	lsr.w	r3, r2, r3
 810532a:	4a08      	ldr	r2, [pc, #32]	; (810534c <HAL_RCC_GetHCLKFreq+0x5c>)
 810532c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810532e:	4b07      	ldr	r3, [pc, #28]	; (810534c <HAL_RCC_GetHCLKFreq+0x5c>)
 8105330:	681b      	ldr	r3, [r3, #0]
 8105332:	4a07      	ldr	r2, [pc, #28]	; (8105350 <HAL_RCC_GetHCLKFreq+0x60>)
 8105334:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8105336:	4b05      	ldr	r3, [pc, #20]	; (810534c <HAL_RCC_GetHCLKFreq+0x5c>)
 8105338:	681b      	ldr	r3, [r3, #0]
}
 810533a:	4618      	mov	r0, r3
 810533c:	3708      	adds	r7, #8
 810533e:	46bd      	mov	sp, r7
 8105340:	bd80      	pop	{r7, pc}
 8105342:	bf00      	nop
 8105344:	58024400 	.word	0x58024400
 8105348:	0810a728 	.word	0x0810a728
 810534c:	10000004 	.word	0x10000004
 8105350:	10000000 	.word	0x10000000

08105354 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8105354:	b580      	push	{r7, lr}
 8105356:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8105358:	f7ff ffca 	bl	81052f0 <HAL_RCC_GetHCLKFreq>
 810535c:	4602      	mov	r2, r0
 810535e:	4b06      	ldr	r3, [pc, #24]	; (8105378 <HAL_RCC_GetPCLK1Freq+0x24>)
 8105360:	69db      	ldr	r3, [r3, #28]
 8105362:	091b      	lsrs	r3, r3, #4
 8105364:	f003 0307 	and.w	r3, r3, #7
 8105368:	4904      	ldr	r1, [pc, #16]	; (810537c <HAL_RCC_GetPCLK1Freq+0x28>)
 810536a:	5ccb      	ldrb	r3, [r1, r3]
 810536c:	f003 031f 	and.w	r3, r3, #31
 8105370:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8105374:	4618      	mov	r0, r3
 8105376:	bd80      	pop	{r7, pc}
 8105378:	58024400 	.word	0x58024400
 810537c:	0810a728 	.word	0x0810a728

08105380 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8105380:	b580      	push	{r7, lr}
 8105382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8105384:	f7ff ffb4 	bl	81052f0 <HAL_RCC_GetHCLKFreq>
 8105388:	4602      	mov	r2, r0
 810538a:	4b06      	ldr	r3, [pc, #24]	; (81053a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 810538c:	69db      	ldr	r3, [r3, #28]
 810538e:	0a1b      	lsrs	r3, r3, #8
 8105390:	f003 0307 	and.w	r3, r3, #7
 8105394:	4904      	ldr	r1, [pc, #16]	; (81053a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8105396:	5ccb      	ldrb	r3, [r1, r3]
 8105398:	f003 031f 	and.w	r3, r3, #31
 810539c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 81053a0:	4618      	mov	r0, r3
 81053a2:	bd80      	pop	{r7, pc}
 81053a4:	58024400 	.word	0x58024400
 81053a8:	0810a728 	.word	0x0810a728

081053ac <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 81053ac:	b580      	push	{r7, lr}
 81053ae:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 81053b0:	4b07      	ldr	r3, [pc, #28]	; (81053d0 <HAL_RCC_NMI_IRQHandler+0x24>)
 81053b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81053b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 81053b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 81053bc:	d105      	bne.n	81053ca <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 81053be:	f000 f809 	bl	81053d4 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 81053c2:	4b03      	ldr	r3, [pc, #12]	; (81053d0 <HAL_RCC_NMI_IRQHandler+0x24>)
 81053c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81053c8:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 81053ca:	bf00      	nop
 81053cc:	bd80      	pop	{r7, pc}
 81053ce:	bf00      	nop
 81053d0:	58024400 	.word	0x58024400

081053d4 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 81053d4:	b480      	push	{r7}
 81053d6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 81053d8:	bf00      	nop
 81053da:	46bd      	mov	sp, r7
 81053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81053e0:	4770      	bx	lr
	...

081053e4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 81053e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 81053e8:	b0ca      	sub	sp, #296	; 0x128
 81053ea:	af00      	add	r7, sp, #0
 81053ec:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 81053f0:	2300      	movs	r3, #0
 81053f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 81053f6:	2300      	movs	r3, #0
 81053f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 81053fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105404:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8105408:	2500      	movs	r5, #0
 810540a:	ea54 0305 	orrs.w	r3, r4, r5
 810540e:	d049      	beq.n	81054a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8105410:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105414:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8105416:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810541a:	d02f      	beq.n	810547c <HAL_RCCEx_PeriphCLKConfig+0x98>
 810541c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8105420:	d828      	bhi.n	8105474 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8105422:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8105426:	d01a      	beq.n	810545e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8105428:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810542c:	d822      	bhi.n	8105474 <HAL_RCCEx_PeriphCLKConfig+0x90>
 810542e:	2b00      	cmp	r3, #0
 8105430:	d003      	beq.n	810543a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8105432:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8105436:	d007      	beq.n	8105448 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8105438:	e01c      	b.n	8105474 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810543a:	4bb8      	ldr	r3, [pc, #736]	; (810571c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810543c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810543e:	4ab7      	ldr	r2, [pc, #732]	; (810571c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105440:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105444:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8105446:	e01a      	b.n	810547e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8105448:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810544c:	3308      	adds	r3, #8
 810544e:	2102      	movs	r1, #2
 8105450:	4618      	mov	r0, r3
 8105452:	f002 fb61 	bl	8107b18 <RCCEx_PLL2_Config>
 8105456:	4603      	mov	r3, r0
 8105458:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810545c:	e00f      	b.n	810547e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810545e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105462:	3328      	adds	r3, #40	; 0x28
 8105464:	2102      	movs	r1, #2
 8105466:	4618      	mov	r0, r3
 8105468:	f002 fc08 	bl	8107c7c <RCCEx_PLL3_Config>
 810546c:	4603      	mov	r3, r0
 810546e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8105472:	e004      	b.n	810547e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105474:	2301      	movs	r3, #1
 8105476:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810547a:	e000      	b.n	810547e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 810547c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810547e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105482:	2b00      	cmp	r3, #0
 8105484:	d10a      	bne.n	810549c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8105486:	4ba5      	ldr	r3, [pc, #660]	; (810571c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810548a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 810548e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105492:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8105494:	4aa1      	ldr	r2, [pc, #644]	; (810571c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105496:	430b      	orrs	r3, r1
 8105498:	6513      	str	r3, [r2, #80]	; 0x50
 810549a:	e003      	b.n	81054a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810549c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81054a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 81054a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81054a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81054ac:	f402 7880 	and.w	r8, r2, #256	; 0x100
 81054b0:	f04f 0900 	mov.w	r9, #0
 81054b4:	ea58 0309 	orrs.w	r3, r8, r9
 81054b8:	d047      	beq.n	810554a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 81054ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81054be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81054c0:	2b04      	cmp	r3, #4
 81054c2:	d82a      	bhi.n	810551a <HAL_RCCEx_PeriphCLKConfig+0x136>
 81054c4:	a201      	add	r2, pc, #4	; (adr r2, 81054cc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 81054c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81054ca:	bf00      	nop
 81054cc:	081054e1 	.word	0x081054e1
 81054d0:	081054ef 	.word	0x081054ef
 81054d4:	08105505 	.word	0x08105505
 81054d8:	08105523 	.word	0x08105523
 81054dc:	08105523 	.word	0x08105523
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81054e0:	4b8e      	ldr	r3, [pc, #568]	; (810571c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81054e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81054e4:	4a8d      	ldr	r2, [pc, #564]	; (810571c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81054e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81054ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81054ec:	e01a      	b.n	8105524 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81054ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81054f2:	3308      	adds	r3, #8
 81054f4:	2100      	movs	r1, #0
 81054f6:	4618      	mov	r0, r3
 81054f8:	f002 fb0e 	bl	8107b18 <RCCEx_PLL2_Config>
 81054fc:	4603      	mov	r3, r0
 81054fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105502:	e00f      	b.n	8105524 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105504:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105508:	3328      	adds	r3, #40	; 0x28
 810550a:	2100      	movs	r1, #0
 810550c:	4618      	mov	r0, r3
 810550e:	f002 fbb5 	bl	8107c7c <RCCEx_PLL3_Config>
 8105512:	4603      	mov	r3, r0
 8105514:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105518:	e004      	b.n	8105524 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810551a:	2301      	movs	r3, #1
 810551c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105520:	e000      	b.n	8105524 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8105522:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105524:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105528:	2b00      	cmp	r3, #0
 810552a:	d10a      	bne.n	8105542 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 810552c:	4b7b      	ldr	r3, [pc, #492]	; (810571c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810552e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105530:	f023 0107 	bic.w	r1, r3, #7
 8105534:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810553a:	4a78      	ldr	r2, [pc, #480]	; (810571c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810553c:	430b      	orrs	r3, r1
 810553e:	6513      	str	r3, [r2, #80]	; 0x50
 8105540:	e003      	b.n	810554a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105542:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105546:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 810554a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810554e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105552:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8105556:	f04f 0b00 	mov.w	fp, #0
 810555a:	ea5a 030b 	orrs.w	r3, sl, fp
 810555e:	d04c      	beq.n	81055fa <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8105560:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810556a:	d030      	beq.n	81055ce <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 810556c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105570:	d829      	bhi.n	81055c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8105572:	2bc0      	cmp	r3, #192	; 0xc0
 8105574:	d02d      	beq.n	81055d2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8105576:	2bc0      	cmp	r3, #192	; 0xc0
 8105578:	d825      	bhi.n	81055c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810557a:	2b80      	cmp	r3, #128	; 0x80
 810557c:	d018      	beq.n	81055b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 810557e:	2b80      	cmp	r3, #128	; 0x80
 8105580:	d821      	bhi.n	81055c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8105582:	2b00      	cmp	r3, #0
 8105584:	d002      	beq.n	810558c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8105586:	2b40      	cmp	r3, #64	; 0x40
 8105588:	d007      	beq.n	810559a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 810558a:	e01c      	b.n	81055c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810558c:	4b63      	ldr	r3, [pc, #396]	; (810571c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810558e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105590:	4a62      	ldr	r2, [pc, #392]	; (810571c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105592:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105596:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8105598:	e01c      	b.n	81055d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810559a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810559e:	3308      	adds	r3, #8
 81055a0:	2100      	movs	r1, #0
 81055a2:	4618      	mov	r0, r3
 81055a4:	f002 fab8 	bl	8107b18 <RCCEx_PLL2_Config>
 81055a8:	4603      	mov	r3, r0
 81055aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81055ae:	e011      	b.n	81055d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81055b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81055b4:	3328      	adds	r3, #40	; 0x28
 81055b6:	2100      	movs	r1, #0
 81055b8:	4618      	mov	r0, r3
 81055ba:	f002 fb5f 	bl	8107c7c <RCCEx_PLL3_Config>
 81055be:	4603      	mov	r3, r0
 81055c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81055c4:	e006      	b.n	81055d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81055c6:	2301      	movs	r3, #1
 81055c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81055cc:	e002      	b.n	81055d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 81055ce:	bf00      	nop
 81055d0:	e000      	b.n	81055d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 81055d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81055d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81055d8:	2b00      	cmp	r3, #0
 81055da:	d10a      	bne.n	81055f2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 81055dc:	4b4f      	ldr	r3, [pc, #316]	; (810571c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81055de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81055e0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 81055e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81055e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81055ea:	4a4c      	ldr	r2, [pc, #304]	; (810571c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81055ec:	430b      	orrs	r3, r1
 81055ee:	6513      	str	r3, [r2, #80]	; 0x50
 81055f0:	e003      	b.n	81055fa <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81055f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81055f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 81055fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81055fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105602:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8105606:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 810560a:	2300      	movs	r3, #0
 810560c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8105610:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8105614:	460b      	mov	r3, r1
 8105616:	4313      	orrs	r3, r2
 8105618:	d053      	beq.n	81056c2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 810561a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810561e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8105622:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8105626:	d035      	beq.n	8105694 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8105628:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810562c:	d82e      	bhi.n	810568c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810562e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8105632:	d031      	beq.n	8105698 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8105634:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8105638:	d828      	bhi.n	810568c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810563a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810563e:	d01a      	beq.n	8105676 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8105640:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8105644:	d822      	bhi.n	810568c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8105646:	2b00      	cmp	r3, #0
 8105648:	d003      	beq.n	8105652 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 810564a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810564e:	d007      	beq.n	8105660 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8105650:	e01c      	b.n	810568c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105652:	4b32      	ldr	r3, [pc, #200]	; (810571c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105656:	4a31      	ldr	r2, [pc, #196]	; (810571c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810565c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810565e:	e01c      	b.n	810569a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105660:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105664:	3308      	adds	r3, #8
 8105666:	2100      	movs	r1, #0
 8105668:	4618      	mov	r0, r3
 810566a:	f002 fa55 	bl	8107b18 <RCCEx_PLL2_Config>
 810566e:	4603      	mov	r3, r0
 8105670:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8105674:	e011      	b.n	810569a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105676:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810567a:	3328      	adds	r3, #40	; 0x28
 810567c:	2100      	movs	r1, #0
 810567e:	4618      	mov	r0, r3
 8105680:	f002 fafc 	bl	8107c7c <RCCEx_PLL3_Config>
 8105684:	4603      	mov	r3, r0
 8105686:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810568a:	e006      	b.n	810569a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 810568c:	2301      	movs	r3, #1
 810568e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105692:	e002      	b.n	810569a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8105694:	bf00      	nop
 8105696:	e000      	b.n	810569a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8105698:	bf00      	nop
    }

    if (ret == HAL_OK)
 810569a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810569e:	2b00      	cmp	r3, #0
 81056a0:	d10b      	bne.n	81056ba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 81056a2:	4b1e      	ldr	r3, [pc, #120]	; (810571c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81056a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81056a6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 81056aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81056ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 81056b2:	4a1a      	ldr	r2, [pc, #104]	; (810571c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81056b4:	430b      	orrs	r3, r1
 81056b6:	6593      	str	r3, [r2, #88]	; 0x58
 81056b8:	e003      	b.n	81056c2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81056ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81056be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 81056c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81056c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81056ca:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 81056ce:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 81056d2:	2300      	movs	r3, #0
 81056d4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 81056d8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 81056dc:	460b      	mov	r3, r1
 81056de:	4313      	orrs	r3, r2
 81056e0:	d056      	beq.n	8105790 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 81056e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81056e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 81056ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81056ee:	d038      	beq.n	8105762 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 81056f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81056f4:	d831      	bhi.n	810575a <HAL_RCCEx_PeriphCLKConfig+0x376>
 81056f6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81056fa:	d034      	beq.n	8105766 <HAL_RCCEx_PeriphCLKConfig+0x382>
 81056fc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8105700:	d82b      	bhi.n	810575a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8105702:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105706:	d01d      	beq.n	8105744 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8105708:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810570c:	d825      	bhi.n	810575a <HAL_RCCEx_PeriphCLKConfig+0x376>
 810570e:	2b00      	cmp	r3, #0
 8105710:	d006      	beq.n	8105720 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8105712:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8105716:	d00a      	beq.n	810572e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8105718:	e01f      	b.n	810575a <HAL_RCCEx_PeriphCLKConfig+0x376>
 810571a:	bf00      	nop
 810571c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105720:	4ba2      	ldr	r3, [pc, #648]	; (81059ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105724:	4aa1      	ldr	r2, [pc, #644]	; (81059ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105726:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810572a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810572c:	e01c      	b.n	8105768 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810572e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105732:	3308      	adds	r3, #8
 8105734:	2100      	movs	r1, #0
 8105736:	4618      	mov	r0, r3
 8105738:	f002 f9ee 	bl	8107b18 <RCCEx_PLL2_Config>
 810573c:	4603      	mov	r3, r0
 810573e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8105742:	e011      	b.n	8105768 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105744:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105748:	3328      	adds	r3, #40	; 0x28
 810574a:	2100      	movs	r1, #0
 810574c:	4618      	mov	r0, r3
 810574e:	f002 fa95 	bl	8107c7c <RCCEx_PLL3_Config>
 8105752:	4603      	mov	r3, r0
 8105754:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105758:	e006      	b.n	8105768 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 810575a:	2301      	movs	r3, #1
 810575c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105760:	e002      	b.n	8105768 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8105762:	bf00      	nop
 8105764:	e000      	b.n	8105768 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8105766:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105768:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810576c:	2b00      	cmp	r3, #0
 810576e:	d10b      	bne.n	8105788 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8105770:	4b8e      	ldr	r3, [pc, #568]	; (81059ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105774:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8105778:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810577c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8105780:	4a8a      	ldr	r2, [pc, #552]	; (81059ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105782:	430b      	orrs	r3, r1
 8105784:	6593      	str	r3, [r2, #88]	; 0x58
 8105786:	e003      	b.n	8105790 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105788:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810578c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8105790:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105798:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 810579c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 81057a0:	2300      	movs	r3, #0
 81057a2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 81057a6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 81057aa:	460b      	mov	r3, r1
 81057ac:	4313      	orrs	r3, r2
 81057ae:	d03a      	beq.n	8105826 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 81057b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81057b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81057b6:	2b30      	cmp	r3, #48	; 0x30
 81057b8:	d01f      	beq.n	81057fa <HAL_RCCEx_PeriphCLKConfig+0x416>
 81057ba:	2b30      	cmp	r3, #48	; 0x30
 81057bc:	d819      	bhi.n	81057f2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 81057be:	2b20      	cmp	r3, #32
 81057c0:	d00c      	beq.n	81057dc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 81057c2:	2b20      	cmp	r3, #32
 81057c4:	d815      	bhi.n	81057f2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 81057c6:	2b00      	cmp	r3, #0
 81057c8:	d019      	beq.n	81057fe <HAL_RCCEx_PeriphCLKConfig+0x41a>
 81057ca:	2b10      	cmp	r3, #16
 81057cc:	d111      	bne.n	81057f2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81057ce:	4b77      	ldr	r3, [pc, #476]	; (81059ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81057d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81057d2:	4a76      	ldr	r2, [pc, #472]	; (81059ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81057d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81057d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 81057da:	e011      	b.n	8105800 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81057dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81057e0:	3308      	adds	r3, #8
 81057e2:	2102      	movs	r1, #2
 81057e4:	4618      	mov	r0, r3
 81057e6:	f002 f997 	bl	8107b18 <RCCEx_PLL2_Config>
 81057ea:	4603      	mov	r3, r0
 81057ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 81057f0:	e006      	b.n	8105800 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 81057f2:	2301      	movs	r3, #1
 81057f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81057f8:	e002      	b.n	8105800 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 81057fa:	bf00      	nop
 81057fc:	e000      	b.n	8105800 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 81057fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105800:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105804:	2b00      	cmp	r3, #0
 8105806:	d10a      	bne.n	810581e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8105808:	4b68      	ldr	r3, [pc, #416]	; (81059ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810580a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810580c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8105810:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105816:	4a65      	ldr	r2, [pc, #404]	; (81059ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105818:	430b      	orrs	r3, r1
 810581a:	64d3      	str	r3, [r2, #76]	; 0x4c
 810581c:	e003      	b.n	8105826 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810581e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105822:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8105826:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810582a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810582e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8105832:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8105836:	2300      	movs	r3, #0
 8105838:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 810583c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8105840:	460b      	mov	r3, r1
 8105842:	4313      	orrs	r3, r2
 8105844:	d051      	beq.n	81058ea <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8105846:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810584a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810584c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105850:	d035      	beq.n	81058be <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8105852:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105856:	d82e      	bhi.n	81058b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8105858:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810585c:	d031      	beq.n	81058c2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 810585e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8105862:	d828      	bhi.n	81058b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8105864:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105868:	d01a      	beq.n	81058a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 810586a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810586e:	d822      	bhi.n	81058b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8105870:	2b00      	cmp	r3, #0
 8105872:	d003      	beq.n	810587c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8105874:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105878:	d007      	beq.n	810588a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 810587a:	e01c      	b.n	81058b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810587c:	4b4b      	ldr	r3, [pc, #300]	; (81059ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810587e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105880:	4a4a      	ldr	r2, [pc, #296]	; (81059ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105882:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105886:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8105888:	e01c      	b.n	81058c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810588a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810588e:	3308      	adds	r3, #8
 8105890:	2100      	movs	r1, #0
 8105892:	4618      	mov	r0, r3
 8105894:	f002 f940 	bl	8107b18 <RCCEx_PLL2_Config>
 8105898:	4603      	mov	r3, r0
 810589a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 810589e:	e011      	b.n	81058c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81058a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81058a4:	3328      	adds	r3, #40	; 0x28
 81058a6:	2100      	movs	r1, #0
 81058a8:	4618      	mov	r0, r3
 81058aa:	f002 f9e7 	bl	8107c7c <RCCEx_PLL3_Config>
 81058ae:	4603      	mov	r3, r0
 81058b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81058b4:	e006      	b.n	81058c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81058b6:	2301      	movs	r3, #1
 81058b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81058bc:	e002      	b.n	81058c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 81058be:	bf00      	nop
 81058c0:	e000      	b.n	81058c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 81058c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81058c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81058c8:	2b00      	cmp	r3, #0
 81058ca:	d10a      	bne.n	81058e2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 81058cc:	4b37      	ldr	r3, [pc, #220]	; (81059ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81058ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81058d0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 81058d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81058d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81058da:	4a34      	ldr	r2, [pc, #208]	; (81059ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81058dc:	430b      	orrs	r3, r1
 81058de:	6513      	str	r3, [r2, #80]	; 0x50
 81058e0:	e003      	b.n	81058ea <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81058e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81058e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 81058ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81058ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 81058f2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 81058f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 81058fa:	2300      	movs	r3, #0
 81058fc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8105900:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8105904:	460b      	mov	r3, r1
 8105906:	4313      	orrs	r3, r2
 8105908:	d056      	beq.n	81059b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 810590a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810590e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105910:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8105914:	d033      	beq.n	810597e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8105916:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 810591a:	d82c      	bhi.n	8105976 <HAL_RCCEx_PeriphCLKConfig+0x592>
 810591c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8105920:	d02f      	beq.n	8105982 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8105922:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8105926:	d826      	bhi.n	8105976 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8105928:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810592c:	d02b      	beq.n	8105986 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 810592e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8105932:	d820      	bhi.n	8105976 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8105934:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105938:	d012      	beq.n	8105960 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 810593a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810593e:	d81a      	bhi.n	8105976 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8105940:	2b00      	cmp	r3, #0
 8105942:	d022      	beq.n	810598a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8105944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105948:	d115      	bne.n	8105976 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810594a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810594e:	3308      	adds	r3, #8
 8105950:	2101      	movs	r1, #1
 8105952:	4618      	mov	r0, r3
 8105954:	f002 f8e0 	bl	8107b18 <RCCEx_PLL2_Config>
 8105958:	4603      	mov	r3, r0
 810595a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 810595e:	e015      	b.n	810598c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105960:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105964:	3328      	adds	r3, #40	; 0x28
 8105966:	2101      	movs	r1, #1
 8105968:	4618      	mov	r0, r3
 810596a:	f002 f987 	bl	8107c7c <RCCEx_PLL3_Config>
 810596e:	4603      	mov	r3, r0
 8105970:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8105974:	e00a      	b.n	810598c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105976:	2301      	movs	r3, #1
 8105978:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810597c:	e006      	b.n	810598c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810597e:	bf00      	nop
 8105980:	e004      	b.n	810598c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8105982:	bf00      	nop
 8105984:	e002      	b.n	810598c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8105986:	bf00      	nop
 8105988:	e000      	b.n	810598c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810598a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810598c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105990:	2b00      	cmp	r3, #0
 8105992:	d10d      	bne.n	81059b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8105994:	4b05      	ldr	r3, [pc, #20]	; (81059ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105998:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 810599c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81059a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81059a2:	4a02      	ldr	r2, [pc, #8]	; (81059ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81059a4:	430b      	orrs	r3, r1
 81059a6:	6513      	str	r3, [r2, #80]	; 0x50
 81059a8:	e006      	b.n	81059b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 81059aa:	bf00      	nop
 81059ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81059b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81059b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 81059b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81059bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81059c0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 81059c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 81059c8:	2300      	movs	r3, #0
 81059ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 81059ce:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 81059d2:	460b      	mov	r3, r1
 81059d4:	4313      	orrs	r3, r2
 81059d6:	d055      	beq.n	8105a84 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 81059d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81059dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81059e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81059e4:	d033      	beq.n	8105a4e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 81059e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81059ea:	d82c      	bhi.n	8105a46 <HAL_RCCEx_PeriphCLKConfig+0x662>
 81059ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81059f0:	d02f      	beq.n	8105a52 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 81059f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81059f6:	d826      	bhi.n	8105a46 <HAL_RCCEx_PeriphCLKConfig+0x662>
 81059f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81059fc:	d02b      	beq.n	8105a56 <HAL_RCCEx_PeriphCLKConfig+0x672>
 81059fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8105a02:	d820      	bhi.n	8105a46 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8105a04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105a08:	d012      	beq.n	8105a30 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8105a0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105a0e:	d81a      	bhi.n	8105a46 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8105a10:	2b00      	cmp	r3, #0
 8105a12:	d022      	beq.n	8105a5a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8105a14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105a18:	d115      	bne.n	8105a46 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105a1e:	3308      	adds	r3, #8
 8105a20:	2101      	movs	r1, #1
 8105a22:	4618      	mov	r0, r3
 8105a24:	f002 f878 	bl	8107b18 <RCCEx_PLL2_Config>
 8105a28:	4603      	mov	r3, r0
 8105a2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8105a2e:	e015      	b.n	8105a5c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105a34:	3328      	adds	r3, #40	; 0x28
 8105a36:	2101      	movs	r1, #1
 8105a38:	4618      	mov	r0, r3
 8105a3a:	f002 f91f 	bl	8107c7c <RCCEx_PLL3_Config>
 8105a3e:	4603      	mov	r3, r0
 8105a40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8105a44:	e00a      	b.n	8105a5c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8105a46:	2301      	movs	r3, #1
 8105a48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105a4c:	e006      	b.n	8105a5c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8105a4e:	bf00      	nop
 8105a50:	e004      	b.n	8105a5c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8105a52:	bf00      	nop
 8105a54:	e002      	b.n	8105a5c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8105a56:	bf00      	nop
 8105a58:	e000      	b.n	8105a5c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8105a5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105a5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105a60:	2b00      	cmp	r3, #0
 8105a62:	d10b      	bne.n	8105a7c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8105a64:	4ba4      	ldr	r3, [pc, #656]	; (8105cf8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105a68:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8105a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105a70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8105a74:	4aa0      	ldr	r2, [pc, #640]	; (8105cf8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105a76:	430b      	orrs	r3, r1
 8105a78:	6593      	str	r3, [r2, #88]	; 0x58
 8105a7a:	e003      	b.n	8105a84 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105a7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105a80:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8105a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105a8c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8105a90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8105a94:	2300      	movs	r3, #0
 8105a96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8105a9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8105a9e:	460b      	mov	r3, r1
 8105aa0:	4313      	orrs	r3, r2
 8105aa2:	d037      	beq.n	8105b14 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8105aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105aaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105aae:	d00e      	beq.n	8105ace <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8105ab0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105ab4:	d816      	bhi.n	8105ae4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8105ab6:	2b00      	cmp	r3, #0
 8105ab8:	d018      	beq.n	8105aec <HAL_RCCEx_PeriphCLKConfig+0x708>
 8105aba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105abe:	d111      	bne.n	8105ae4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105ac0:	4b8d      	ldr	r3, [pc, #564]	; (8105cf8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105ac4:	4a8c      	ldr	r2, [pc, #560]	; (8105cf8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105ac6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105aca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8105acc:	e00f      	b.n	8105aee <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105ad2:	3308      	adds	r3, #8
 8105ad4:	2101      	movs	r1, #1
 8105ad6:	4618      	mov	r0, r3
 8105ad8:	f002 f81e 	bl	8107b18 <RCCEx_PLL2_Config>
 8105adc:	4603      	mov	r3, r0
 8105ade:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8105ae2:	e004      	b.n	8105aee <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105ae4:	2301      	movs	r3, #1
 8105ae6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105aea:	e000      	b.n	8105aee <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8105aec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105aee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105af2:	2b00      	cmp	r3, #0
 8105af4:	d10a      	bne.n	8105b0c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8105af6:	4b80      	ldr	r3, [pc, #512]	; (8105cf8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105af8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105afa:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8105afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105b04:	4a7c      	ldr	r2, [pc, #496]	; (8105cf8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105b06:	430b      	orrs	r3, r1
 8105b08:	6513      	str	r3, [r2, #80]	; 0x50
 8105b0a:	e003      	b.n	8105b14 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105b0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105b10:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8105b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105b1c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8105b20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8105b24:	2300      	movs	r3, #0
 8105b26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8105b2a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8105b2e:	460b      	mov	r3, r1
 8105b30:	4313      	orrs	r3, r2
 8105b32:	d039      	beq.n	8105ba8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8105b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105b38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105b3a:	2b03      	cmp	r3, #3
 8105b3c:	d81c      	bhi.n	8105b78 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8105b3e:	a201      	add	r2, pc, #4	; (adr r2, 8105b44 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8105b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105b44:	08105b81 	.word	0x08105b81
 8105b48:	08105b55 	.word	0x08105b55
 8105b4c:	08105b63 	.word	0x08105b63
 8105b50:	08105b81 	.word	0x08105b81
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105b54:	4b68      	ldr	r3, [pc, #416]	; (8105cf8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105b58:	4a67      	ldr	r2, [pc, #412]	; (8105cf8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105b5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105b5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8105b60:	e00f      	b.n	8105b82 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8105b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105b66:	3308      	adds	r3, #8
 8105b68:	2102      	movs	r1, #2
 8105b6a:	4618      	mov	r0, r3
 8105b6c:	f001 ffd4 	bl	8107b18 <RCCEx_PLL2_Config>
 8105b70:	4603      	mov	r3, r0
 8105b72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8105b76:	e004      	b.n	8105b82 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8105b78:	2301      	movs	r3, #1
 8105b7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105b7e:	e000      	b.n	8105b82 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8105b80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105b82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105b86:	2b00      	cmp	r3, #0
 8105b88:	d10a      	bne.n	8105ba0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8105b8a:	4b5b      	ldr	r3, [pc, #364]	; (8105cf8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105b8e:	f023 0103 	bic.w	r1, r3, #3
 8105b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105b96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105b98:	4a57      	ldr	r2, [pc, #348]	; (8105cf8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105b9a:	430b      	orrs	r3, r1
 8105b9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8105b9e:	e003      	b.n	8105ba8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105ba0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105ba4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8105ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105bb0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8105bb4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8105bb8:	2300      	movs	r3, #0
 8105bba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8105bbe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8105bc2:	460b      	mov	r3, r1
 8105bc4:	4313      	orrs	r3, r2
 8105bc6:	f000 809f 	beq.w	8105d08 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8105bca:	4b4c      	ldr	r3, [pc, #304]	; (8105cfc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8105bcc:	681b      	ldr	r3, [r3, #0]
 8105bce:	4a4b      	ldr	r2, [pc, #300]	; (8105cfc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8105bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8105bd4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8105bd6:	f7fb fba5 	bl	8101324 <HAL_GetTick>
 8105bda:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8105bde:	e00b      	b.n	8105bf8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8105be0:	f7fb fba0 	bl	8101324 <HAL_GetTick>
 8105be4:	4602      	mov	r2, r0
 8105be6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8105bea:	1ad3      	subs	r3, r2, r3
 8105bec:	2b64      	cmp	r3, #100	; 0x64
 8105bee:	d903      	bls.n	8105bf8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8105bf0:	2303      	movs	r3, #3
 8105bf2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105bf6:	e005      	b.n	8105c04 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8105bf8:	4b40      	ldr	r3, [pc, #256]	; (8105cfc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8105bfa:	681b      	ldr	r3, [r3, #0]
 8105bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105c00:	2b00      	cmp	r3, #0
 8105c02:	d0ed      	beq.n	8105be0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8105c04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105c08:	2b00      	cmp	r3, #0
 8105c0a:	d179      	bne.n	8105d00 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8105c0c:	4b3a      	ldr	r3, [pc, #232]	; (8105cf8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105c0e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8105c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105c14:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8105c18:	4053      	eors	r3, r2
 8105c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8105c1e:	2b00      	cmp	r3, #0
 8105c20:	d015      	beq.n	8105c4e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8105c22:	4b35      	ldr	r3, [pc, #212]	; (8105cf8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105c26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8105c2a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8105c2e:	4b32      	ldr	r3, [pc, #200]	; (8105cf8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105c32:	4a31      	ldr	r2, [pc, #196]	; (8105cf8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8105c38:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8105c3a:	4b2f      	ldr	r3, [pc, #188]	; (8105cf8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105c3e:	4a2e      	ldr	r2, [pc, #184]	; (8105cf8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105c40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8105c44:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8105c46:	4a2c      	ldr	r2, [pc, #176]	; (8105cf8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105c48:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8105c4c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8105c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105c52:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8105c56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105c5a:	d118      	bne.n	8105c8e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8105c5c:	f7fb fb62 	bl	8101324 <HAL_GetTick>
 8105c60:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8105c64:	e00d      	b.n	8105c82 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8105c66:	f7fb fb5d 	bl	8101324 <HAL_GetTick>
 8105c6a:	4602      	mov	r2, r0
 8105c6c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8105c70:	1ad2      	subs	r2, r2, r3
 8105c72:	f241 3388 	movw	r3, #5000	; 0x1388
 8105c76:	429a      	cmp	r2, r3
 8105c78:	d903      	bls.n	8105c82 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8105c7a:	2303      	movs	r3, #3
 8105c7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8105c80:	e005      	b.n	8105c8e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8105c82:	4b1d      	ldr	r3, [pc, #116]	; (8105cf8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105c86:	f003 0302 	and.w	r3, r3, #2
 8105c8a:	2b00      	cmp	r3, #0
 8105c8c:	d0eb      	beq.n	8105c66 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8105c8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105c92:	2b00      	cmp	r3, #0
 8105c94:	d12b      	bne.n	8105cee <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8105c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105c9a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8105c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8105ca2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8105ca6:	d110      	bne.n	8105cca <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8105ca8:	4b13      	ldr	r3, [pc, #76]	; (8105cf8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105caa:	691b      	ldr	r3, [r3, #16]
 8105cac:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8105cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105cb4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8105cb8:	091b      	lsrs	r3, r3, #4
 8105cba:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8105cbe:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8105cc2:	4a0d      	ldr	r2, [pc, #52]	; (8105cf8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105cc4:	430b      	orrs	r3, r1
 8105cc6:	6113      	str	r3, [r2, #16]
 8105cc8:	e005      	b.n	8105cd6 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8105cca:	4b0b      	ldr	r3, [pc, #44]	; (8105cf8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105ccc:	691b      	ldr	r3, [r3, #16]
 8105cce:	4a0a      	ldr	r2, [pc, #40]	; (8105cf8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105cd0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8105cd4:	6113      	str	r3, [r2, #16]
 8105cd6:	4b08      	ldr	r3, [pc, #32]	; (8105cf8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105cd8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8105cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105cde:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8105ce2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8105ce6:	4a04      	ldr	r2, [pc, #16]	; (8105cf8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105ce8:	430b      	orrs	r3, r1
 8105cea:	6713      	str	r3, [r2, #112]	; 0x70
 8105cec:	e00c      	b.n	8105d08 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8105cee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105cf2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8105cf6:	e007      	b.n	8105d08 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8105cf8:	58024400 	.word	0x58024400
 8105cfc:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105d00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105d04:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8105d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105d10:	f002 0301 	and.w	r3, r2, #1
 8105d14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8105d18:	2300      	movs	r3, #0
 8105d1a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8105d1e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8105d22:	460b      	mov	r3, r1
 8105d24:	4313      	orrs	r3, r2
 8105d26:	f000 8089 	beq.w	8105e3c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8105d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105d2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105d30:	2b28      	cmp	r3, #40	; 0x28
 8105d32:	d86b      	bhi.n	8105e0c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8105d34:	a201      	add	r2, pc, #4	; (adr r2, 8105d3c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8105d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105d3a:	bf00      	nop
 8105d3c:	08105e15 	.word	0x08105e15
 8105d40:	08105e0d 	.word	0x08105e0d
 8105d44:	08105e0d 	.word	0x08105e0d
 8105d48:	08105e0d 	.word	0x08105e0d
 8105d4c:	08105e0d 	.word	0x08105e0d
 8105d50:	08105e0d 	.word	0x08105e0d
 8105d54:	08105e0d 	.word	0x08105e0d
 8105d58:	08105e0d 	.word	0x08105e0d
 8105d5c:	08105de1 	.word	0x08105de1
 8105d60:	08105e0d 	.word	0x08105e0d
 8105d64:	08105e0d 	.word	0x08105e0d
 8105d68:	08105e0d 	.word	0x08105e0d
 8105d6c:	08105e0d 	.word	0x08105e0d
 8105d70:	08105e0d 	.word	0x08105e0d
 8105d74:	08105e0d 	.word	0x08105e0d
 8105d78:	08105e0d 	.word	0x08105e0d
 8105d7c:	08105df7 	.word	0x08105df7
 8105d80:	08105e0d 	.word	0x08105e0d
 8105d84:	08105e0d 	.word	0x08105e0d
 8105d88:	08105e0d 	.word	0x08105e0d
 8105d8c:	08105e0d 	.word	0x08105e0d
 8105d90:	08105e0d 	.word	0x08105e0d
 8105d94:	08105e0d 	.word	0x08105e0d
 8105d98:	08105e0d 	.word	0x08105e0d
 8105d9c:	08105e15 	.word	0x08105e15
 8105da0:	08105e0d 	.word	0x08105e0d
 8105da4:	08105e0d 	.word	0x08105e0d
 8105da8:	08105e0d 	.word	0x08105e0d
 8105dac:	08105e0d 	.word	0x08105e0d
 8105db0:	08105e0d 	.word	0x08105e0d
 8105db4:	08105e0d 	.word	0x08105e0d
 8105db8:	08105e0d 	.word	0x08105e0d
 8105dbc:	08105e15 	.word	0x08105e15
 8105dc0:	08105e0d 	.word	0x08105e0d
 8105dc4:	08105e0d 	.word	0x08105e0d
 8105dc8:	08105e0d 	.word	0x08105e0d
 8105dcc:	08105e0d 	.word	0x08105e0d
 8105dd0:	08105e0d 	.word	0x08105e0d
 8105dd4:	08105e0d 	.word	0x08105e0d
 8105dd8:	08105e0d 	.word	0x08105e0d
 8105ddc:	08105e15 	.word	0x08105e15
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105de4:	3308      	adds	r3, #8
 8105de6:	2101      	movs	r1, #1
 8105de8:	4618      	mov	r0, r3
 8105dea:	f001 fe95 	bl	8107b18 <RCCEx_PLL2_Config>
 8105dee:	4603      	mov	r3, r0
 8105df0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8105df4:	e00f      	b.n	8105e16 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105dfa:	3328      	adds	r3, #40	; 0x28
 8105dfc:	2101      	movs	r1, #1
 8105dfe:	4618      	mov	r0, r3
 8105e00:	f001 ff3c 	bl	8107c7c <RCCEx_PLL3_Config>
 8105e04:	4603      	mov	r3, r0
 8105e06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8105e0a:	e004      	b.n	8105e16 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105e0c:	2301      	movs	r3, #1
 8105e0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105e12:	e000      	b.n	8105e16 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8105e14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105e16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105e1a:	2b00      	cmp	r3, #0
 8105e1c:	d10a      	bne.n	8105e34 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8105e1e:	4bbf      	ldr	r3, [pc, #764]	; (810611c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105e22:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8105e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105e2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105e2c:	4abb      	ldr	r2, [pc, #748]	; (810611c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105e2e:	430b      	orrs	r3, r1
 8105e30:	6553      	str	r3, [r2, #84]	; 0x54
 8105e32:	e003      	b.n	8105e3c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105e34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105e38:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8105e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105e44:	f002 0302 	and.w	r3, r2, #2
 8105e48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8105e4c:	2300      	movs	r3, #0
 8105e4e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8105e52:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8105e56:	460b      	mov	r3, r1
 8105e58:	4313      	orrs	r3, r2
 8105e5a:	d041      	beq.n	8105ee0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8105e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105e60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8105e62:	2b05      	cmp	r3, #5
 8105e64:	d824      	bhi.n	8105eb0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8105e66:	a201      	add	r2, pc, #4	; (adr r2, 8105e6c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8105e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105e6c:	08105eb9 	.word	0x08105eb9
 8105e70:	08105e85 	.word	0x08105e85
 8105e74:	08105e9b 	.word	0x08105e9b
 8105e78:	08105eb9 	.word	0x08105eb9
 8105e7c:	08105eb9 	.word	0x08105eb9
 8105e80:	08105eb9 	.word	0x08105eb9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105e88:	3308      	adds	r3, #8
 8105e8a:	2101      	movs	r1, #1
 8105e8c:	4618      	mov	r0, r3
 8105e8e:	f001 fe43 	bl	8107b18 <RCCEx_PLL2_Config>
 8105e92:	4603      	mov	r3, r0
 8105e94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8105e98:	e00f      	b.n	8105eba <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105e9e:	3328      	adds	r3, #40	; 0x28
 8105ea0:	2101      	movs	r1, #1
 8105ea2:	4618      	mov	r0, r3
 8105ea4:	f001 feea 	bl	8107c7c <RCCEx_PLL3_Config>
 8105ea8:	4603      	mov	r3, r0
 8105eaa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8105eae:	e004      	b.n	8105eba <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105eb0:	2301      	movs	r3, #1
 8105eb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105eb6:	e000      	b.n	8105eba <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8105eb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105eba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105ebe:	2b00      	cmp	r3, #0
 8105ec0:	d10a      	bne.n	8105ed8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8105ec2:	4b96      	ldr	r3, [pc, #600]	; (810611c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105ec6:	f023 0107 	bic.w	r1, r3, #7
 8105eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105ece:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8105ed0:	4a92      	ldr	r2, [pc, #584]	; (810611c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105ed2:	430b      	orrs	r3, r1
 8105ed4:	6553      	str	r3, [r2, #84]	; 0x54
 8105ed6:	e003      	b.n	8105ee0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105ed8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105edc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8105ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105ee8:	f002 0304 	and.w	r3, r2, #4
 8105eec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8105ef0:	2300      	movs	r3, #0
 8105ef2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8105ef6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8105efa:	460b      	mov	r3, r1
 8105efc:	4313      	orrs	r3, r2
 8105efe:	d044      	beq.n	8105f8a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8105f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105f04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8105f08:	2b05      	cmp	r3, #5
 8105f0a:	d825      	bhi.n	8105f58 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8105f0c:	a201      	add	r2, pc, #4	; (adr r2, 8105f14 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8105f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105f12:	bf00      	nop
 8105f14:	08105f61 	.word	0x08105f61
 8105f18:	08105f2d 	.word	0x08105f2d
 8105f1c:	08105f43 	.word	0x08105f43
 8105f20:	08105f61 	.word	0x08105f61
 8105f24:	08105f61 	.word	0x08105f61
 8105f28:	08105f61 	.word	0x08105f61
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105f30:	3308      	adds	r3, #8
 8105f32:	2101      	movs	r1, #1
 8105f34:	4618      	mov	r0, r3
 8105f36:	f001 fdef 	bl	8107b18 <RCCEx_PLL2_Config>
 8105f3a:	4603      	mov	r3, r0
 8105f3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8105f40:	e00f      	b.n	8105f62 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105f46:	3328      	adds	r3, #40	; 0x28
 8105f48:	2101      	movs	r1, #1
 8105f4a:	4618      	mov	r0, r3
 8105f4c:	f001 fe96 	bl	8107c7c <RCCEx_PLL3_Config>
 8105f50:	4603      	mov	r3, r0
 8105f52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8105f56:	e004      	b.n	8105f62 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105f58:	2301      	movs	r3, #1
 8105f5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105f5e:	e000      	b.n	8105f62 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8105f60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105f62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105f66:	2b00      	cmp	r3, #0
 8105f68:	d10b      	bne.n	8105f82 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8105f6a:	4b6c      	ldr	r3, [pc, #432]	; (810611c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105f6e:	f023 0107 	bic.w	r1, r3, #7
 8105f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105f76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8105f7a:	4a68      	ldr	r2, [pc, #416]	; (810611c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105f7c:	430b      	orrs	r3, r1
 8105f7e:	6593      	str	r3, [r2, #88]	; 0x58
 8105f80:	e003      	b.n	8105f8a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105f82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105f86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8105f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105f92:	f002 0320 	and.w	r3, r2, #32
 8105f96:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8105f9a:	2300      	movs	r3, #0
 8105f9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8105fa0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8105fa4:	460b      	mov	r3, r1
 8105fa6:	4313      	orrs	r3, r2
 8105fa8:	d055      	beq.n	8106056 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8105faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8105fb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8105fb6:	d033      	beq.n	8106020 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8105fb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8105fbc:	d82c      	bhi.n	8106018 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8105fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105fc2:	d02f      	beq.n	8106024 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8105fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105fc8:	d826      	bhi.n	8106018 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8105fca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8105fce:	d02b      	beq.n	8106028 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8105fd0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8105fd4:	d820      	bhi.n	8106018 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8105fd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105fda:	d012      	beq.n	8106002 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8105fdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105fe0:	d81a      	bhi.n	8106018 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8105fe2:	2b00      	cmp	r3, #0
 8105fe4:	d022      	beq.n	810602c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8105fe6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105fea:	d115      	bne.n	8106018 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105ff0:	3308      	adds	r3, #8
 8105ff2:	2100      	movs	r1, #0
 8105ff4:	4618      	mov	r0, r3
 8105ff6:	f001 fd8f 	bl	8107b18 <RCCEx_PLL2_Config>
 8105ffa:	4603      	mov	r3, r0
 8105ffc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8106000:	e015      	b.n	810602e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8106002:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106006:	3328      	adds	r3, #40	; 0x28
 8106008:	2102      	movs	r1, #2
 810600a:	4618      	mov	r0, r3
 810600c:	f001 fe36 	bl	8107c7c <RCCEx_PLL3_Config>
 8106010:	4603      	mov	r3, r0
 8106012:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8106016:	e00a      	b.n	810602e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106018:	2301      	movs	r3, #1
 810601a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810601e:	e006      	b.n	810602e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8106020:	bf00      	nop
 8106022:	e004      	b.n	810602e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8106024:	bf00      	nop
 8106026:	e002      	b.n	810602e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8106028:	bf00      	nop
 810602a:	e000      	b.n	810602e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 810602c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810602e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106032:	2b00      	cmp	r3, #0
 8106034:	d10b      	bne.n	810604e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8106036:	4b39      	ldr	r3, [pc, #228]	; (810611c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8106038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810603a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 810603e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8106046:	4a35      	ldr	r2, [pc, #212]	; (810611c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8106048:	430b      	orrs	r3, r1
 810604a:	6553      	str	r3, [r2, #84]	; 0x54
 810604c:	e003      	b.n	8106056 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810604e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106052:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8106056:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810605a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810605e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8106062:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8106066:	2300      	movs	r3, #0
 8106068:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 810606c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8106070:	460b      	mov	r3, r1
 8106072:	4313      	orrs	r3, r2
 8106074:	d058      	beq.n	8106128 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8106076:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810607a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810607e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8106082:	d033      	beq.n	81060ec <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8106084:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8106088:	d82c      	bhi.n	81060e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810608a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810608e:	d02f      	beq.n	81060f0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8106090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106094:	d826      	bhi.n	81060e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8106096:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 810609a:	d02b      	beq.n	81060f4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 810609c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 81060a0:	d820      	bhi.n	81060e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81060a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81060a6:	d012      	beq.n	81060ce <HAL_RCCEx_PeriphCLKConfig+0xcea>
 81060a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81060ac:	d81a      	bhi.n	81060e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81060ae:	2b00      	cmp	r3, #0
 81060b0:	d022      	beq.n	81060f8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 81060b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 81060b6:	d115      	bne.n	81060e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81060b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81060bc:	3308      	adds	r3, #8
 81060be:	2100      	movs	r1, #0
 81060c0:	4618      	mov	r0, r3
 81060c2:	f001 fd29 	bl	8107b18 <RCCEx_PLL2_Config>
 81060c6:	4603      	mov	r3, r0
 81060c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 81060cc:	e015      	b.n	81060fa <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81060ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81060d2:	3328      	adds	r3, #40	; 0x28
 81060d4:	2102      	movs	r1, #2
 81060d6:	4618      	mov	r0, r3
 81060d8:	f001 fdd0 	bl	8107c7c <RCCEx_PLL3_Config>
 81060dc:	4603      	mov	r3, r0
 81060de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 81060e2:	e00a      	b.n	81060fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81060e4:	2301      	movs	r3, #1
 81060e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81060ea:	e006      	b.n	81060fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81060ec:	bf00      	nop
 81060ee:	e004      	b.n	81060fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81060f0:	bf00      	nop
 81060f2:	e002      	b.n	81060fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81060f4:	bf00      	nop
 81060f6:	e000      	b.n	81060fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81060f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81060fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81060fe:	2b00      	cmp	r3, #0
 8106100:	d10e      	bne.n	8106120 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8106102:	4b06      	ldr	r3, [pc, #24]	; (810611c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8106104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106106:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 810610a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810610e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8106112:	4a02      	ldr	r2, [pc, #8]	; (810611c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8106114:	430b      	orrs	r3, r1
 8106116:	6593      	str	r3, [r2, #88]	; 0x58
 8106118:	e006      	b.n	8106128 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 810611a:	bf00      	nop
 810611c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106120:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106124:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8106128:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810612c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106130:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8106134:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8106138:	2300      	movs	r3, #0
 810613a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 810613e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8106142:	460b      	mov	r3, r1
 8106144:	4313      	orrs	r3, r2
 8106146:	d055      	beq.n	81061f4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8106148:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810614c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8106150:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8106154:	d033      	beq.n	81061be <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8106156:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 810615a:	d82c      	bhi.n	81061b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 810615c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8106160:	d02f      	beq.n	81061c2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8106162:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8106166:	d826      	bhi.n	81061b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8106168:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 810616c:	d02b      	beq.n	81061c6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 810616e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8106172:	d820      	bhi.n	81061b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8106174:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8106178:	d012      	beq.n	81061a0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 810617a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810617e:	d81a      	bhi.n	81061b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8106180:	2b00      	cmp	r3, #0
 8106182:	d022      	beq.n	81061ca <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8106184:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8106188:	d115      	bne.n	81061b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810618a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810618e:	3308      	adds	r3, #8
 8106190:	2100      	movs	r1, #0
 8106192:	4618      	mov	r0, r3
 8106194:	f001 fcc0 	bl	8107b18 <RCCEx_PLL2_Config>
 8106198:	4603      	mov	r3, r0
 810619a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810619e:	e015      	b.n	81061cc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81061a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81061a4:	3328      	adds	r3, #40	; 0x28
 81061a6:	2102      	movs	r1, #2
 81061a8:	4618      	mov	r0, r3
 81061aa:	f001 fd67 	bl	8107c7c <RCCEx_PLL3_Config>
 81061ae:	4603      	mov	r3, r0
 81061b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 81061b4:	e00a      	b.n	81061cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81061b6:	2301      	movs	r3, #1
 81061b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81061bc:	e006      	b.n	81061cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81061be:	bf00      	nop
 81061c0:	e004      	b.n	81061cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81061c2:	bf00      	nop
 81061c4:	e002      	b.n	81061cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81061c6:	bf00      	nop
 81061c8:	e000      	b.n	81061cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81061ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 81061cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81061d0:	2b00      	cmp	r3, #0
 81061d2:	d10b      	bne.n	81061ec <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 81061d4:	4ba1      	ldr	r3, [pc, #644]	; (810645c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81061d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81061d8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 81061dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81061e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81061e4:	4a9d      	ldr	r2, [pc, #628]	; (810645c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81061e6:	430b      	orrs	r3, r1
 81061e8:	6593      	str	r3, [r2, #88]	; 0x58
 81061ea:	e003      	b.n	81061f4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81061ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81061f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 81061f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81061f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81061fc:	f002 0308 	and.w	r3, r2, #8
 8106200:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8106204:	2300      	movs	r3, #0
 8106206:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 810620a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 810620e:	460b      	mov	r3, r1
 8106210:	4313      	orrs	r3, r2
 8106212:	d01e      	beq.n	8106252 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8106214:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106218:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810621c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106220:	d10c      	bne.n	810623c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8106222:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106226:	3328      	adds	r3, #40	; 0x28
 8106228:	2102      	movs	r1, #2
 810622a:	4618      	mov	r0, r3
 810622c:	f001 fd26 	bl	8107c7c <RCCEx_PLL3_Config>
 8106230:	4603      	mov	r3, r0
 8106232:	2b00      	cmp	r3, #0
 8106234:	d002      	beq.n	810623c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8106236:	2301      	movs	r3, #1
 8106238:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 810623c:	4b87      	ldr	r3, [pc, #540]	; (810645c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810623e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106240:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8106244:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106248:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810624c:	4a83      	ldr	r2, [pc, #524]	; (810645c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810624e:	430b      	orrs	r3, r1
 8106250:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8106252:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106256:	e9d3 2300 	ldrd	r2, r3, [r3]
 810625a:	f002 0310 	and.w	r3, r2, #16
 810625e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8106262:	2300      	movs	r3, #0
 8106264:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8106268:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 810626c:	460b      	mov	r3, r1
 810626e:	4313      	orrs	r3, r2
 8106270:	d01e      	beq.n	81062b0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8106272:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106276:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810627a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810627e:	d10c      	bne.n	810629a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8106280:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106284:	3328      	adds	r3, #40	; 0x28
 8106286:	2102      	movs	r1, #2
 8106288:	4618      	mov	r0, r3
 810628a:	f001 fcf7 	bl	8107c7c <RCCEx_PLL3_Config>
 810628e:	4603      	mov	r3, r0
 8106290:	2b00      	cmp	r3, #0
 8106292:	d002      	beq.n	810629a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8106294:	2301      	movs	r3, #1
 8106296:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 810629a:	4b70      	ldr	r3, [pc, #448]	; (810645c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810629c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810629e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 81062a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81062a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81062aa:	4a6c      	ldr	r2, [pc, #432]	; (810645c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81062ac:	430b      	orrs	r3, r1
 81062ae:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 81062b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81062b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81062b8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 81062bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 81062c0:	2300      	movs	r3, #0
 81062c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 81062c6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 81062ca:	460b      	mov	r3, r1
 81062cc:	4313      	orrs	r3, r2
 81062ce:	d03e      	beq.n	810634e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 81062d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81062d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 81062d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81062dc:	d022      	beq.n	8106324 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 81062de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81062e2:	d81b      	bhi.n	810631c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 81062e4:	2b00      	cmp	r3, #0
 81062e6:	d003      	beq.n	81062f0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 81062e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81062ec:	d00b      	beq.n	8106306 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 81062ee:	e015      	b.n	810631c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81062f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81062f4:	3308      	adds	r3, #8
 81062f6:	2100      	movs	r1, #0
 81062f8:	4618      	mov	r0, r3
 81062fa:	f001 fc0d 	bl	8107b18 <RCCEx_PLL2_Config>
 81062fe:	4603      	mov	r3, r0
 8106300:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8106304:	e00f      	b.n	8106326 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8106306:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810630a:	3328      	adds	r3, #40	; 0x28
 810630c:	2102      	movs	r1, #2
 810630e:	4618      	mov	r0, r3
 8106310:	f001 fcb4 	bl	8107c7c <RCCEx_PLL3_Config>
 8106314:	4603      	mov	r3, r0
 8106316:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 810631a:	e004      	b.n	8106326 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810631c:	2301      	movs	r3, #1
 810631e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8106322:	e000      	b.n	8106326 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8106324:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106326:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810632a:	2b00      	cmp	r3, #0
 810632c:	d10b      	bne.n	8106346 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 810632e:	4b4b      	ldr	r3, [pc, #300]	; (810645c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106332:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8106336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810633a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 810633e:	4a47      	ldr	r2, [pc, #284]	; (810645c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106340:	430b      	orrs	r3, r1
 8106342:	6593      	str	r3, [r2, #88]	; 0x58
 8106344:	e003      	b.n	810634e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106346:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810634a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 810634e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106356:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 810635a:	67bb      	str	r3, [r7, #120]	; 0x78
 810635c:	2300      	movs	r3, #0
 810635e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8106360:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8106364:	460b      	mov	r3, r1
 8106366:	4313      	orrs	r3, r2
 8106368:	d03b      	beq.n	81063e2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 810636a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810636e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8106372:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8106376:	d01f      	beq.n	81063b8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8106378:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810637c:	d818      	bhi.n	81063b0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 810637e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8106382:	d003      	beq.n	810638c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8106384:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8106388:	d007      	beq.n	810639a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 810638a:	e011      	b.n	81063b0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810638c:	4b33      	ldr	r3, [pc, #204]	; (810645c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810638e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106390:	4a32      	ldr	r2, [pc, #200]	; (810645c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106392:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106396:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8106398:	e00f      	b.n	81063ba <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810639a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810639e:	3328      	adds	r3, #40	; 0x28
 81063a0:	2101      	movs	r1, #1
 81063a2:	4618      	mov	r0, r3
 81063a4:	f001 fc6a 	bl	8107c7c <RCCEx_PLL3_Config>
 81063a8:	4603      	mov	r3, r0
 81063aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 81063ae:	e004      	b.n	81063ba <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81063b0:	2301      	movs	r3, #1
 81063b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81063b6:	e000      	b.n	81063ba <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 81063b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81063ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81063be:	2b00      	cmp	r3, #0
 81063c0:	d10b      	bne.n	81063da <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 81063c2:	4b26      	ldr	r3, [pc, #152]	; (810645c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81063c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81063c6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 81063ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81063ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81063d2:	4a22      	ldr	r2, [pc, #136]	; (810645c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81063d4:	430b      	orrs	r3, r1
 81063d6:	6553      	str	r3, [r2, #84]	; 0x54
 81063d8:	e003      	b.n	81063e2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81063da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81063de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 81063e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81063e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81063ea:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 81063ee:	673b      	str	r3, [r7, #112]	; 0x70
 81063f0:	2300      	movs	r3, #0
 81063f2:	677b      	str	r3, [r7, #116]	; 0x74
 81063f4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 81063f8:	460b      	mov	r3, r1
 81063fa:	4313      	orrs	r3, r2
 81063fc:	d034      	beq.n	8106468 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 81063fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106402:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106404:	2b00      	cmp	r3, #0
 8106406:	d003      	beq.n	8106410 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8106408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810640c:	d007      	beq.n	810641e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 810640e:	e011      	b.n	8106434 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106410:	4b12      	ldr	r3, [pc, #72]	; (810645c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106414:	4a11      	ldr	r2, [pc, #68]	; (810645c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106416:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810641a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 810641c:	e00e      	b.n	810643c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810641e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106422:	3308      	adds	r3, #8
 8106424:	2102      	movs	r1, #2
 8106426:	4618      	mov	r0, r3
 8106428:	f001 fb76 	bl	8107b18 <RCCEx_PLL2_Config>
 810642c:	4603      	mov	r3, r0
 810642e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8106432:	e003      	b.n	810643c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8106434:	2301      	movs	r3, #1
 8106436:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810643a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810643c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106440:	2b00      	cmp	r3, #0
 8106442:	d10d      	bne.n	8106460 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8106444:	4b05      	ldr	r3, [pc, #20]	; (810645c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106448:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 810644c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106452:	4a02      	ldr	r2, [pc, #8]	; (810645c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106454:	430b      	orrs	r3, r1
 8106456:	64d3      	str	r3, [r2, #76]	; 0x4c
 8106458:	e006      	b.n	8106468 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 810645a:	bf00      	nop
 810645c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106460:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106464:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8106468:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810646c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106470:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8106474:	66bb      	str	r3, [r7, #104]	; 0x68
 8106476:	2300      	movs	r3, #0
 8106478:	66fb      	str	r3, [r7, #108]	; 0x6c
 810647a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 810647e:	460b      	mov	r3, r1
 8106480:	4313      	orrs	r3, r2
 8106482:	d00c      	beq.n	810649e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8106484:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106488:	3328      	adds	r3, #40	; 0x28
 810648a:	2102      	movs	r1, #2
 810648c:	4618      	mov	r0, r3
 810648e:	f001 fbf5 	bl	8107c7c <RCCEx_PLL3_Config>
 8106492:	4603      	mov	r3, r0
 8106494:	2b00      	cmp	r3, #0
 8106496:	d002      	beq.n	810649e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8106498:	2301      	movs	r3, #1
 810649a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 810649e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81064a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81064a6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 81064aa:	663b      	str	r3, [r7, #96]	; 0x60
 81064ac:	2300      	movs	r3, #0
 81064ae:	667b      	str	r3, [r7, #100]	; 0x64
 81064b0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 81064b4:	460b      	mov	r3, r1
 81064b6:	4313      	orrs	r3, r2
 81064b8:	d038      	beq.n	810652c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 81064ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81064be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81064c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81064c6:	d018      	beq.n	81064fa <HAL_RCCEx_PeriphCLKConfig+0x1116>
 81064c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81064cc:	d811      	bhi.n	81064f2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 81064ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81064d2:	d014      	beq.n	81064fe <HAL_RCCEx_PeriphCLKConfig+0x111a>
 81064d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81064d8:	d80b      	bhi.n	81064f2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 81064da:	2b00      	cmp	r3, #0
 81064dc:	d011      	beq.n	8106502 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 81064de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81064e2:	d106      	bne.n	81064f2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81064e4:	4bc3      	ldr	r3, [pc, #780]	; (81067f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81064e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81064e8:	4ac2      	ldr	r2, [pc, #776]	; (81067f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81064ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81064ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 81064f0:	e008      	b.n	8106504 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81064f2:	2301      	movs	r3, #1
 81064f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81064f8:	e004      	b.n	8106504 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 81064fa:	bf00      	nop
 81064fc:	e002      	b.n	8106504 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 81064fe:	bf00      	nop
 8106500:	e000      	b.n	8106504 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8106502:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106504:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106508:	2b00      	cmp	r3, #0
 810650a:	d10b      	bne.n	8106524 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 810650c:	4bb9      	ldr	r3, [pc, #740]	; (81067f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810650e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106510:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8106514:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106518:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810651c:	4ab5      	ldr	r2, [pc, #724]	; (81067f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810651e:	430b      	orrs	r3, r1
 8106520:	6553      	str	r3, [r2, #84]	; 0x54
 8106522:	e003      	b.n	810652c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106524:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106528:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 810652c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106534:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8106538:	65bb      	str	r3, [r7, #88]	; 0x58
 810653a:	2300      	movs	r3, #0
 810653c:	65fb      	str	r3, [r7, #92]	; 0x5c
 810653e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8106542:	460b      	mov	r3, r1
 8106544:	4313      	orrs	r3, r2
 8106546:	d009      	beq.n	810655c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8106548:	4baa      	ldr	r3, [pc, #680]	; (81067f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810654a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810654c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8106550:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8106556:	4aa7      	ldr	r2, [pc, #668]	; (81067f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106558:	430b      	orrs	r3, r1
 810655a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 810655c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106564:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8106568:	653b      	str	r3, [r7, #80]	; 0x50
 810656a:	2300      	movs	r3, #0
 810656c:	657b      	str	r3, [r7, #84]	; 0x54
 810656e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8106572:	460b      	mov	r3, r1
 8106574:	4313      	orrs	r3, r2
 8106576:	d00a      	beq.n	810658e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8106578:	4b9e      	ldr	r3, [pc, #632]	; (81067f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810657a:	691b      	ldr	r3, [r3, #16]
 810657c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8106580:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106584:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8106588:	4a9a      	ldr	r2, [pc, #616]	; (81067f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810658a:	430b      	orrs	r3, r1
 810658c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 810658e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106596:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 810659a:	64bb      	str	r3, [r7, #72]	; 0x48
 810659c:	2300      	movs	r3, #0
 810659e:	64fb      	str	r3, [r7, #76]	; 0x4c
 81065a0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 81065a4:	460b      	mov	r3, r1
 81065a6:	4313      	orrs	r3, r2
 81065a8:	d009      	beq.n	81065be <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 81065aa:	4b92      	ldr	r3, [pc, #584]	; (81067f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81065ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81065ae:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 81065b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81065b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81065b8:	4a8e      	ldr	r2, [pc, #568]	; (81067f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81065ba:	430b      	orrs	r3, r1
 81065bc:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 81065be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81065c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81065c6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 81065ca:	643b      	str	r3, [r7, #64]	; 0x40
 81065cc:	2300      	movs	r3, #0
 81065ce:	647b      	str	r3, [r7, #68]	; 0x44
 81065d0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 81065d4:	460b      	mov	r3, r1
 81065d6:	4313      	orrs	r3, r2
 81065d8:	d00e      	beq.n	81065f8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 81065da:	4b86      	ldr	r3, [pc, #536]	; (81067f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81065dc:	691b      	ldr	r3, [r3, #16]
 81065de:	4a85      	ldr	r2, [pc, #532]	; (81067f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81065e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 81065e4:	6113      	str	r3, [r2, #16]
 81065e6:	4b83      	ldr	r3, [pc, #524]	; (81067f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81065e8:	6919      	ldr	r1, [r3, #16]
 81065ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81065ee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 81065f2:	4a80      	ldr	r2, [pc, #512]	; (81067f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81065f4:	430b      	orrs	r3, r1
 81065f6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 81065f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81065fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106600:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8106604:	63bb      	str	r3, [r7, #56]	; 0x38
 8106606:	2300      	movs	r3, #0
 8106608:	63fb      	str	r3, [r7, #60]	; 0x3c
 810660a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 810660e:	460b      	mov	r3, r1
 8106610:	4313      	orrs	r3, r2
 8106612:	d009      	beq.n	8106628 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8106614:	4b77      	ldr	r3, [pc, #476]	; (81067f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106618:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 810661c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106622:	4a74      	ldr	r2, [pc, #464]	; (81067f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106624:	430b      	orrs	r3, r1
 8106626:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8106628:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810662c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106630:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8106634:	633b      	str	r3, [r7, #48]	; 0x30
 8106636:	2300      	movs	r3, #0
 8106638:	637b      	str	r3, [r7, #52]	; 0x34
 810663a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 810663e:	460b      	mov	r3, r1
 8106640:	4313      	orrs	r3, r2
 8106642:	d00a      	beq.n	810665a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8106644:	4b6b      	ldr	r3, [pc, #428]	; (81067f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106648:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 810664c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106650:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8106654:	4a67      	ldr	r2, [pc, #412]	; (81067f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106656:	430b      	orrs	r3, r1
 8106658:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 810665a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810665e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106662:	2100      	movs	r1, #0
 8106664:	62b9      	str	r1, [r7, #40]	; 0x28
 8106666:	f003 0301 	and.w	r3, r3, #1
 810666a:	62fb      	str	r3, [r7, #44]	; 0x2c
 810666c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8106670:	460b      	mov	r3, r1
 8106672:	4313      	orrs	r3, r2
 8106674:	d011      	beq.n	810669a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106676:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810667a:	3308      	adds	r3, #8
 810667c:	2100      	movs	r1, #0
 810667e:	4618      	mov	r0, r3
 8106680:	f001 fa4a 	bl	8107b18 <RCCEx_PLL2_Config>
 8106684:	4603      	mov	r3, r0
 8106686:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 810668a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810668e:	2b00      	cmp	r3, #0
 8106690:	d003      	beq.n	810669a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106692:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106696:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 810669a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810669e:	e9d3 2300 	ldrd	r2, r3, [r3]
 81066a2:	2100      	movs	r1, #0
 81066a4:	6239      	str	r1, [r7, #32]
 81066a6:	f003 0302 	and.w	r3, r3, #2
 81066aa:	627b      	str	r3, [r7, #36]	; 0x24
 81066ac:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 81066b0:	460b      	mov	r3, r1
 81066b2:	4313      	orrs	r3, r2
 81066b4:	d011      	beq.n	81066da <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81066b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81066ba:	3308      	adds	r3, #8
 81066bc:	2101      	movs	r1, #1
 81066be:	4618      	mov	r0, r3
 81066c0:	f001 fa2a 	bl	8107b18 <RCCEx_PLL2_Config>
 81066c4:	4603      	mov	r3, r0
 81066c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 81066ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81066ce:	2b00      	cmp	r3, #0
 81066d0:	d003      	beq.n	81066da <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81066d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81066d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 81066da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81066de:	e9d3 2300 	ldrd	r2, r3, [r3]
 81066e2:	2100      	movs	r1, #0
 81066e4:	61b9      	str	r1, [r7, #24]
 81066e6:	f003 0304 	and.w	r3, r3, #4
 81066ea:	61fb      	str	r3, [r7, #28]
 81066ec:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 81066f0:	460b      	mov	r3, r1
 81066f2:	4313      	orrs	r3, r2
 81066f4:	d011      	beq.n	810671a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81066f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81066fa:	3308      	adds	r3, #8
 81066fc:	2102      	movs	r1, #2
 81066fe:	4618      	mov	r0, r3
 8106700:	f001 fa0a 	bl	8107b18 <RCCEx_PLL2_Config>
 8106704:	4603      	mov	r3, r0
 8106706:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 810670a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810670e:	2b00      	cmp	r3, #0
 8106710:	d003      	beq.n	810671a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106712:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106716:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 810671a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810671e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106722:	2100      	movs	r1, #0
 8106724:	6139      	str	r1, [r7, #16]
 8106726:	f003 0308 	and.w	r3, r3, #8
 810672a:	617b      	str	r3, [r7, #20]
 810672c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8106730:	460b      	mov	r3, r1
 8106732:	4313      	orrs	r3, r2
 8106734:	d011      	beq.n	810675a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8106736:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810673a:	3328      	adds	r3, #40	; 0x28
 810673c:	2100      	movs	r1, #0
 810673e:	4618      	mov	r0, r3
 8106740:	f001 fa9c 	bl	8107c7c <RCCEx_PLL3_Config>
 8106744:	4603      	mov	r3, r0
 8106746:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 810674a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810674e:	2b00      	cmp	r3, #0
 8106750:	d003      	beq.n	810675a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106752:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106756:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 810675a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810675e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106762:	2100      	movs	r1, #0
 8106764:	60b9      	str	r1, [r7, #8]
 8106766:	f003 0310 	and.w	r3, r3, #16
 810676a:	60fb      	str	r3, [r7, #12]
 810676c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8106770:	460b      	mov	r3, r1
 8106772:	4313      	orrs	r3, r2
 8106774:	d011      	beq.n	810679a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106776:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810677a:	3328      	adds	r3, #40	; 0x28
 810677c:	2101      	movs	r1, #1
 810677e:	4618      	mov	r0, r3
 8106780:	f001 fa7c 	bl	8107c7c <RCCEx_PLL3_Config>
 8106784:	4603      	mov	r3, r0
 8106786:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 810678a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810678e:	2b00      	cmp	r3, #0
 8106790:	d003      	beq.n	810679a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106792:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106796:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 810679a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810679e:	e9d3 2300 	ldrd	r2, r3, [r3]
 81067a2:	2100      	movs	r1, #0
 81067a4:	6039      	str	r1, [r7, #0]
 81067a6:	f003 0320 	and.w	r3, r3, #32
 81067aa:	607b      	str	r3, [r7, #4]
 81067ac:	e9d7 1200 	ldrd	r1, r2, [r7]
 81067b0:	460b      	mov	r3, r1
 81067b2:	4313      	orrs	r3, r2
 81067b4:	d011      	beq.n	81067da <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81067b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81067ba:	3328      	adds	r3, #40	; 0x28
 81067bc:	2102      	movs	r1, #2
 81067be:	4618      	mov	r0, r3
 81067c0:	f001 fa5c 	bl	8107c7c <RCCEx_PLL3_Config>
 81067c4:	4603      	mov	r3, r0
 81067c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 81067ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81067ce:	2b00      	cmp	r3, #0
 81067d0:	d003      	beq.n	81067da <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81067d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81067d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 81067da:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 81067de:	2b00      	cmp	r3, #0
 81067e0:	d101      	bne.n	81067e6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 81067e2:	2300      	movs	r3, #0
 81067e4:	e000      	b.n	81067e8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 81067e6:	2301      	movs	r3, #1
}
 81067e8:	4618      	mov	r0, r3
 81067ea:	f507 7794 	add.w	r7, r7, #296	; 0x128
 81067ee:	46bd      	mov	sp, r7
 81067f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 81067f4:	58024400 	.word	0x58024400

081067f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 81067f8:	b580      	push	{r7, lr}
 81067fa:	b090      	sub	sp, #64	; 0x40
 81067fc:	af00      	add	r7, sp, #0
 81067fe:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8106802:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106806:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 810680a:	430b      	orrs	r3, r1
 810680c:	f040 8094 	bne.w	8106938 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8106810:	4b9e      	ldr	r3, [pc, #632]	; (8106a8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106814:	f003 0307 	and.w	r3, r3, #7
 8106818:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 810681a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810681c:	2b04      	cmp	r3, #4
 810681e:	f200 8087 	bhi.w	8106930 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8106822:	a201      	add	r2, pc, #4	; (adr r2, 8106828 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8106824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106828:	0810683d 	.word	0x0810683d
 810682c:	08106865 	.word	0x08106865
 8106830:	0810688d 	.word	0x0810688d
 8106834:	08106929 	.word	0x08106929
 8106838:	081068b5 	.word	0x081068b5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810683c:	4b93      	ldr	r3, [pc, #588]	; (8106a8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810683e:	681b      	ldr	r3, [r3, #0]
 8106840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8106844:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106848:	d108      	bne.n	810685c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810684a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810684e:	4618      	mov	r0, r3
 8106850:	f001 f810 	bl	8107874 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8106854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106856:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106858:	f000 bd45 	b.w	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810685c:	2300      	movs	r3, #0
 810685e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106860:	f000 bd41 	b.w	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106864:	4b89      	ldr	r3, [pc, #548]	; (8106a8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106866:	681b      	ldr	r3, [r3, #0]
 8106868:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810686c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8106870:	d108      	bne.n	8106884 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106872:	f107 0318 	add.w	r3, r7, #24
 8106876:	4618      	mov	r0, r3
 8106878:	f000 fd54 	bl	8107324 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810687c:	69bb      	ldr	r3, [r7, #24]
 810687e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106880:	f000 bd31 	b.w	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106884:	2300      	movs	r3, #0
 8106886:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106888:	f000 bd2d 	b.w	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810688c:	4b7f      	ldr	r3, [pc, #508]	; (8106a8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810688e:	681b      	ldr	r3, [r3, #0]
 8106890:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106894:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106898:	d108      	bne.n	81068ac <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810689a:	f107 030c 	add.w	r3, r7, #12
 810689e:	4618      	mov	r0, r3
 81068a0:	f000 fe94 	bl	81075cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81068a4:	68fb      	ldr	r3, [r7, #12]
 81068a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81068a8:	f000 bd1d 	b.w	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81068ac:	2300      	movs	r3, #0
 81068ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81068b0:	f000 bd19 	b.w	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81068b4:	4b75      	ldr	r3, [pc, #468]	; (8106a8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81068b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81068b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 81068bc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81068be:	4b73      	ldr	r3, [pc, #460]	; (8106a8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81068c0:	681b      	ldr	r3, [r3, #0]
 81068c2:	f003 0304 	and.w	r3, r3, #4
 81068c6:	2b04      	cmp	r3, #4
 81068c8:	d10c      	bne.n	81068e4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 81068ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81068cc:	2b00      	cmp	r3, #0
 81068ce:	d109      	bne.n	81068e4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81068d0:	4b6e      	ldr	r3, [pc, #440]	; (8106a8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81068d2:	681b      	ldr	r3, [r3, #0]
 81068d4:	08db      	lsrs	r3, r3, #3
 81068d6:	f003 0303 	and.w	r3, r3, #3
 81068da:	4a6d      	ldr	r2, [pc, #436]	; (8106a90 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 81068dc:	fa22 f303 	lsr.w	r3, r2, r3
 81068e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 81068e2:	e01f      	b.n	8106924 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81068e4:	4b69      	ldr	r3, [pc, #420]	; (8106a8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81068e6:	681b      	ldr	r3, [r3, #0]
 81068e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81068ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81068f0:	d106      	bne.n	8106900 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 81068f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81068f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81068f8:	d102      	bne.n	8106900 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81068fa:	4b66      	ldr	r3, [pc, #408]	; (8106a94 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 81068fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 81068fe:	e011      	b.n	8106924 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106900:	4b62      	ldr	r3, [pc, #392]	; (8106a8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106902:	681b      	ldr	r3, [r3, #0]
 8106904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106908:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810690c:	d106      	bne.n	810691c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 810690e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106910:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106914:	d102      	bne.n	810691c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8106916:	4b60      	ldr	r3, [pc, #384]	; (8106a98 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8106918:	63fb      	str	r3, [r7, #60]	; 0x3c
 810691a:	e003      	b.n	8106924 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810691c:	2300      	movs	r3, #0
 810691e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8106920:	f000 bce1 	b.w	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8106924:	f000 bcdf 	b.w	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8106928:	4b5c      	ldr	r3, [pc, #368]	; (8106a9c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 810692a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810692c:	f000 bcdb 	b.w	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8106930:	2300      	movs	r3, #0
 8106932:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106934:	f000 bcd7 	b.w	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8106938:	e9d7 2300 	ldrd	r2, r3, [r7]
 810693c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8106940:	430b      	orrs	r3, r1
 8106942:	f040 80ad 	bne.w	8106aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8106946:	4b51      	ldr	r3, [pc, #324]	; (8106a8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106948:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810694a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 810694e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8106950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106952:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106956:	d056      	beq.n	8106a06 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8106958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810695a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810695e:	f200 8090 	bhi.w	8106a82 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8106962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106964:	2bc0      	cmp	r3, #192	; 0xc0
 8106966:	f000 8088 	beq.w	8106a7a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 810696a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810696c:	2bc0      	cmp	r3, #192	; 0xc0
 810696e:	f200 8088 	bhi.w	8106a82 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8106972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106974:	2b80      	cmp	r3, #128	; 0x80
 8106976:	d032      	beq.n	81069de <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8106978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810697a:	2b80      	cmp	r3, #128	; 0x80
 810697c:	f200 8081 	bhi.w	8106a82 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8106980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106982:	2b00      	cmp	r3, #0
 8106984:	d003      	beq.n	810698e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8106986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106988:	2b40      	cmp	r3, #64	; 0x40
 810698a:	d014      	beq.n	81069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 810698c:	e079      	b.n	8106a82 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810698e:	4b3f      	ldr	r3, [pc, #252]	; (8106a8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106990:	681b      	ldr	r3, [r3, #0]
 8106992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8106996:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810699a:	d108      	bne.n	81069ae <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810699c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81069a0:	4618      	mov	r0, r3
 81069a2:	f000 ff67 	bl	8107874 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81069a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81069a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81069aa:	f000 bc9c 	b.w	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81069ae:	2300      	movs	r3, #0
 81069b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81069b2:	f000 bc98 	b.w	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81069b6:	4b35      	ldr	r3, [pc, #212]	; (8106a8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81069b8:	681b      	ldr	r3, [r3, #0]
 81069ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81069be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81069c2:	d108      	bne.n	81069d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81069c4:	f107 0318 	add.w	r3, r7, #24
 81069c8:	4618      	mov	r0, r3
 81069ca:	f000 fcab 	bl	8107324 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81069ce:	69bb      	ldr	r3, [r7, #24]
 81069d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81069d2:	f000 bc88 	b.w	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81069d6:	2300      	movs	r3, #0
 81069d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81069da:	f000 bc84 	b.w	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81069de:	4b2b      	ldr	r3, [pc, #172]	; (8106a8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81069e0:	681b      	ldr	r3, [r3, #0]
 81069e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81069e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81069ea:	d108      	bne.n	81069fe <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81069ec:	f107 030c 	add.w	r3, r7, #12
 81069f0:	4618      	mov	r0, r3
 81069f2:	f000 fdeb 	bl	81075cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81069f6:	68fb      	ldr	r3, [r7, #12]
 81069f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81069fa:	f000 bc74 	b.w	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81069fe:	2300      	movs	r3, #0
 8106a00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106a02:	f000 bc70 	b.w	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8106a06:	4b21      	ldr	r3, [pc, #132]	; (8106a8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106a0a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8106a0e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106a10:	4b1e      	ldr	r3, [pc, #120]	; (8106a8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106a12:	681b      	ldr	r3, [r3, #0]
 8106a14:	f003 0304 	and.w	r3, r3, #4
 8106a18:	2b04      	cmp	r3, #4
 8106a1a:	d10c      	bne.n	8106a36 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8106a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106a1e:	2b00      	cmp	r3, #0
 8106a20:	d109      	bne.n	8106a36 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106a22:	4b1a      	ldr	r3, [pc, #104]	; (8106a8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106a24:	681b      	ldr	r3, [r3, #0]
 8106a26:	08db      	lsrs	r3, r3, #3
 8106a28:	f003 0303 	and.w	r3, r3, #3
 8106a2c:	4a18      	ldr	r2, [pc, #96]	; (8106a90 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8106a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8106a32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106a34:	e01f      	b.n	8106a76 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8106a36:	4b15      	ldr	r3, [pc, #84]	; (8106a8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106a38:	681b      	ldr	r3, [r3, #0]
 8106a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106a3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106a42:	d106      	bne.n	8106a52 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8106a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106a46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106a4a:	d102      	bne.n	8106a52 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8106a4c:	4b11      	ldr	r3, [pc, #68]	; (8106a94 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8106a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106a50:	e011      	b.n	8106a76 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106a52:	4b0e      	ldr	r3, [pc, #56]	; (8106a8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106a54:	681b      	ldr	r3, [r3, #0]
 8106a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106a5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106a5e:	d106      	bne.n	8106a6e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8106a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106a62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106a66:	d102      	bne.n	8106a6e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8106a68:	4b0b      	ldr	r3, [pc, #44]	; (8106a98 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8106a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106a6c:	e003      	b.n	8106a76 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8106a6e:	2300      	movs	r3, #0
 8106a70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8106a72:	f000 bc38 	b.w	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8106a76:	f000 bc36 	b.w	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8106a7a:	4b08      	ldr	r3, [pc, #32]	; (8106a9c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8106a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106a7e:	f000 bc32 	b.w	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8106a82:	2300      	movs	r3, #0
 8106a84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106a86:	f000 bc2e 	b.w	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8106a8a:	bf00      	nop
 8106a8c:	58024400 	.word	0x58024400
 8106a90:	03d09000 	.word	0x03d09000
 8106a94:	003d0900 	.word	0x003d0900
 8106a98:	017d7840 	.word	0x017d7840
 8106a9c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8106aa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106aa4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8106aa8:	430b      	orrs	r3, r1
 8106aaa:	f040 809c 	bne.w	8106be6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8106aae:	4b9e      	ldr	r3, [pc, #632]	; (8106d28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106ab2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8106ab6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8106ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106aba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8106abe:	d054      	beq.n	8106b6a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8106ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106ac2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8106ac6:	f200 808b 	bhi.w	8106be0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8106aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106acc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8106ad0:	f000 8083 	beq.w	8106bda <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8106ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106ad6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8106ada:	f200 8081 	bhi.w	8106be0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8106ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106ae0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8106ae4:	d02f      	beq.n	8106b46 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8106ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106ae8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8106aec:	d878      	bhi.n	8106be0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8106aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106af0:	2b00      	cmp	r3, #0
 8106af2:	d004      	beq.n	8106afe <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8106af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106af6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8106afa:	d012      	beq.n	8106b22 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8106afc:	e070      	b.n	8106be0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106afe:	4b8a      	ldr	r3, [pc, #552]	; (8106d28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106b00:	681b      	ldr	r3, [r3, #0]
 8106b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8106b06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106b0a:	d107      	bne.n	8106b1c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8106b10:	4618      	mov	r0, r3
 8106b12:	f000 feaf 	bl	8107874 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8106b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106b18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106b1a:	e3e4      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106b1c:	2300      	movs	r3, #0
 8106b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106b20:	e3e1      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106b22:	4b81      	ldr	r3, [pc, #516]	; (8106d28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106b24:	681b      	ldr	r3, [r3, #0]
 8106b26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106b2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8106b2e:	d107      	bne.n	8106b40 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106b30:	f107 0318 	add.w	r3, r7, #24
 8106b34:	4618      	mov	r0, r3
 8106b36:	f000 fbf5 	bl	8107324 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8106b3a:	69bb      	ldr	r3, [r7, #24]
 8106b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106b3e:	e3d2      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106b40:	2300      	movs	r3, #0
 8106b42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106b44:	e3cf      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106b46:	4b78      	ldr	r3, [pc, #480]	; (8106d28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106b48:	681b      	ldr	r3, [r3, #0]
 8106b4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106b4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106b52:	d107      	bne.n	8106b64 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106b54:	f107 030c 	add.w	r3, r7, #12
 8106b58:	4618      	mov	r0, r3
 8106b5a:	f000 fd37 	bl	81075cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8106b5e:	68fb      	ldr	r3, [r7, #12]
 8106b60:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106b62:	e3c0      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106b64:	2300      	movs	r3, #0
 8106b66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106b68:	e3bd      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8106b6a:	4b6f      	ldr	r3, [pc, #444]	; (8106d28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106b6e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8106b72:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106b74:	4b6c      	ldr	r3, [pc, #432]	; (8106d28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106b76:	681b      	ldr	r3, [r3, #0]
 8106b78:	f003 0304 	and.w	r3, r3, #4
 8106b7c:	2b04      	cmp	r3, #4
 8106b7e:	d10c      	bne.n	8106b9a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8106b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106b82:	2b00      	cmp	r3, #0
 8106b84:	d109      	bne.n	8106b9a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106b86:	4b68      	ldr	r3, [pc, #416]	; (8106d28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106b88:	681b      	ldr	r3, [r3, #0]
 8106b8a:	08db      	lsrs	r3, r3, #3
 8106b8c:	f003 0303 	and.w	r3, r3, #3
 8106b90:	4a66      	ldr	r2, [pc, #408]	; (8106d2c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8106b92:	fa22 f303 	lsr.w	r3, r2, r3
 8106b96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106b98:	e01e      	b.n	8106bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8106b9a:	4b63      	ldr	r3, [pc, #396]	; (8106d28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106b9c:	681b      	ldr	r3, [r3, #0]
 8106b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106ba2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106ba6:	d106      	bne.n	8106bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8106ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106baa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106bae:	d102      	bne.n	8106bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8106bb0:	4b5f      	ldr	r3, [pc, #380]	; (8106d30 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8106bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106bb4:	e010      	b.n	8106bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106bb6:	4b5c      	ldr	r3, [pc, #368]	; (8106d28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106bb8:	681b      	ldr	r3, [r3, #0]
 8106bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106bbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106bc2:	d106      	bne.n	8106bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8106bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106bc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106bca:	d102      	bne.n	8106bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8106bcc:	4b59      	ldr	r3, [pc, #356]	; (8106d34 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8106bce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106bd0:	e002      	b.n	8106bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8106bd2:	2300      	movs	r3, #0
 8106bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8106bd6:	e386      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8106bd8:	e385      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8106bda:	4b57      	ldr	r3, [pc, #348]	; (8106d38 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8106bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106bde:	e382      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8106be0:	2300      	movs	r3, #0
 8106be2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106be4:	e37f      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8106be6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106bea:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8106bee:	430b      	orrs	r3, r1
 8106bf0:	f040 80a7 	bne.w	8106d42 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8106bf4:	4b4c      	ldr	r3, [pc, #304]	; (8106d28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106bf8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8106bfc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8106bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106c00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8106c04:	d055      	beq.n	8106cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8106c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106c08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8106c0c:	f200 8096 	bhi.w	8106d3c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8106c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106c12:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8106c16:	f000 8084 	beq.w	8106d22 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8106c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106c1c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8106c20:	f200 808c 	bhi.w	8106d3c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8106c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106c26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106c2a:	d030      	beq.n	8106c8e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8106c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106c2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106c32:	f200 8083 	bhi.w	8106d3c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8106c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106c38:	2b00      	cmp	r3, #0
 8106c3a:	d004      	beq.n	8106c46 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8106c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106c3e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8106c42:	d012      	beq.n	8106c6a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8106c44:	e07a      	b.n	8106d3c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106c46:	4b38      	ldr	r3, [pc, #224]	; (8106d28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106c48:	681b      	ldr	r3, [r3, #0]
 8106c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8106c4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106c52:	d107      	bne.n	8106c64 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106c54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8106c58:	4618      	mov	r0, r3
 8106c5a:	f000 fe0b 	bl	8107874 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8106c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106c60:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106c62:	e340      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106c64:	2300      	movs	r3, #0
 8106c66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106c68:	e33d      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106c6a:	4b2f      	ldr	r3, [pc, #188]	; (8106d28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106c6c:	681b      	ldr	r3, [r3, #0]
 8106c6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106c72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8106c76:	d107      	bne.n	8106c88 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106c78:	f107 0318 	add.w	r3, r7, #24
 8106c7c:	4618      	mov	r0, r3
 8106c7e:	f000 fb51 	bl	8107324 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8106c82:	69bb      	ldr	r3, [r7, #24]
 8106c84:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106c86:	e32e      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106c88:	2300      	movs	r3, #0
 8106c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106c8c:	e32b      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106c8e:	4b26      	ldr	r3, [pc, #152]	; (8106d28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106c90:	681b      	ldr	r3, [r3, #0]
 8106c92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106c96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106c9a:	d107      	bne.n	8106cac <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106c9c:	f107 030c 	add.w	r3, r7, #12
 8106ca0:	4618      	mov	r0, r3
 8106ca2:	f000 fc93 	bl	81075cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8106ca6:	68fb      	ldr	r3, [r7, #12]
 8106ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106caa:	e31c      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106cac:	2300      	movs	r3, #0
 8106cae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106cb0:	e319      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8106cb2:	4b1d      	ldr	r3, [pc, #116]	; (8106d28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106cb6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8106cba:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106cbc:	4b1a      	ldr	r3, [pc, #104]	; (8106d28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106cbe:	681b      	ldr	r3, [r3, #0]
 8106cc0:	f003 0304 	and.w	r3, r3, #4
 8106cc4:	2b04      	cmp	r3, #4
 8106cc6:	d10c      	bne.n	8106ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8106cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106cca:	2b00      	cmp	r3, #0
 8106ccc:	d109      	bne.n	8106ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106cce:	4b16      	ldr	r3, [pc, #88]	; (8106d28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106cd0:	681b      	ldr	r3, [r3, #0]
 8106cd2:	08db      	lsrs	r3, r3, #3
 8106cd4:	f003 0303 	and.w	r3, r3, #3
 8106cd8:	4a14      	ldr	r2, [pc, #80]	; (8106d2c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8106cda:	fa22 f303 	lsr.w	r3, r2, r3
 8106cde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106ce0:	e01e      	b.n	8106d20 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8106ce2:	4b11      	ldr	r3, [pc, #68]	; (8106d28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106ce4:	681b      	ldr	r3, [r3, #0]
 8106ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106cea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106cee:	d106      	bne.n	8106cfe <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8106cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106cf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106cf6:	d102      	bne.n	8106cfe <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8106cf8:	4b0d      	ldr	r3, [pc, #52]	; (8106d30 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8106cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106cfc:	e010      	b.n	8106d20 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106cfe:	4b0a      	ldr	r3, [pc, #40]	; (8106d28 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8106d00:	681b      	ldr	r3, [r3, #0]
 8106d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106d06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106d0a:	d106      	bne.n	8106d1a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8106d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106d0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106d12:	d102      	bne.n	8106d1a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8106d14:	4b07      	ldr	r3, [pc, #28]	; (8106d34 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8106d16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106d18:	e002      	b.n	8106d20 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8106d1a:	2300      	movs	r3, #0
 8106d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8106d1e:	e2e2      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8106d20:	e2e1      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8106d22:	4b05      	ldr	r3, [pc, #20]	; (8106d38 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8106d24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106d26:	e2de      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8106d28:	58024400 	.word	0x58024400
 8106d2c:	03d09000 	.word	0x03d09000
 8106d30:	003d0900 	.word	0x003d0900
 8106d34:	017d7840 	.word	0x017d7840
 8106d38:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8106d3c:	2300      	movs	r3, #0
 8106d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106d40:	e2d1      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8106d42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106d46:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8106d4a:	430b      	orrs	r3, r1
 8106d4c:	f040 809c 	bne.w	8106e88 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8106d50:	4b93      	ldr	r3, [pc, #588]	; (8106fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106d52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106d54:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8106d58:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8106d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106d5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8106d60:	d054      	beq.n	8106e0c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8106d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106d64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8106d68:	f200 808b 	bhi.w	8106e82 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8106d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106d6e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8106d72:	f000 8083 	beq.w	8106e7c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8106d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106d78:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8106d7c:	f200 8081 	bhi.w	8106e82 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8106d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106d82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8106d86:	d02f      	beq.n	8106de8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8106d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106d8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8106d8e:	d878      	bhi.n	8106e82 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8106d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106d92:	2b00      	cmp	r3, #0
 8106d94:	d004      	beq.n	8106da0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8106d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106d98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106d9c:	d012      	beq.n	8106dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8106d9e:	e070      	b.n	8106e82 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106da0:	4b7f      	ldr	r3, [pc, #508]	; (8106fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106da2:	681b      	ldr	r3, [r3, #0]
 8106da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8106da8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106dac:	d107      	bne.n	8106dbe <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106dae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8106db2:	4618      	mov	r0, r3
 8106db4:	f000 fd5e 	bl	8107874 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8106db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106dba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106dbc:	e293      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106dbe:	2300      	movs	r3, #0
 8106dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106dc2:	e290      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106dc4:	4b76      	ldr	r3, [pc, #472]	; (8106fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106dc6:	681b      	ldr	r3, [r3, #0]
 8106dc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106dcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8106dd0:	d107      	bne.n	8106de2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106dd2:	f107 0318 	add.w	r3, r7, #24
 8106dd6:	4618      	mov	r0, r3
 8106dd8:	f000 faa4 	bl	8107324 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8106ddc:	69bb      	ldr	r3, [r7, #24]
 8106dde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106de0:	e281      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106de2:	2300      	movs	r3, #0
 8106de4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106de6:	e27e      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106de8:	4b6d      	ldr	r3, [pc, #436]	; (8106fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106dea:	681b      	ldr	r3, [r3, #0]
 8106dec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106df0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106df4:	d107      	bne.n	8106e06 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106df6:	f107 030c 	add.w	r3, r7, #12
 8106dfa:	4618      	mov	r0, r3
 8106dfc:	f000 fbe6 	bl	81075cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8106e00:	68fb      	ldr	r3, [r7, #12]
 8106e02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106e04:	e26f      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106e06:	2300      	movs	r3, #0
 8106e08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106e0a:	e26c      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8106e0c:	4b64      	ldr	r3, [pc, #400]	; (8106fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106e10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8106e14:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106e16:	4b62      	ldr	r3, [pc, #392]	; (8106fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106e18:	681b      	ldr	r3, [r3, #0]
 8106e1a:	f003 0304 	and.w	r3, r3, #4
 8106e1e:	2b04      	cmp	r3, #4
 8106e20:	d10c      	bne.n	8106e3c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8106e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106e24:	2b00      	cmp	r3, #0
 8106e26:	d109      	bne.n	8106e3c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106e28:	4b5d      	ldr	r3, [pc, #372]	; (8106fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106e2a:	681b      	ldr	r3, [r3, #0]
 8106e2c:	08db      	lsrs	r3, r3, #3
 8106e2e:	f003 0303 	and.w	r3, r3, #3
 8106e32:	4a5c      	ldr	r2, [pc, #368]	; (8106fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8106e34:	fa22 f303 	lsr.w	r3, r2, r3
 8106e38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106e3a:	e01e      	b.n	8106e7a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8106e3c:	4b58      	ldr	r3, [pc, #352]	; (8106fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106e3e:	681b      	ldr	r3, [r3, #0]
 8106e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106e44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106e48:	d106      	bne.n	8106e58 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8106e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106e4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106e50:	d102      	bne.n	8106e58 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8106e52:	4b55      	ldr	r3, [pc, #340]	; (8106fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8106e54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106e56:	e010      	b.n	8106e7a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106e58:	4b51      	ldr	r3, [pc, #324]	; (8106fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106e5a:	681b      	ldr	r3, [r3, #0]
 8106e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106e60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106e64:	d106      	bne.n	8106e74 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8106e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106e68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106e6c:	d102      	bne.n	8106e74 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8106e6e:	4b4f      	ldr	r3, [pc, #316]	; (8106fac <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8106e70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106e72:	e002      	b.n	8106e7a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8106e74:	2300      	movs	r3, #0
 8106e76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8106e78:	e235      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8106e7a:	e234      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8106e7c:	4b4c      	ldr	r3, [pc, #304]	; (8106fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8106e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106e80:	e231      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8106e82:	2300      	movs	r3, #0
 8106e84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106e86:	e22e      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8106e88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106e8c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8106e90:	430b      	orrs	r3, r1
 8106e92:	f040 808f 	bne.w	8106fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8106e96:	4b42      	ldr	r3, [pc, #264]	; (8106fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106e9a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8106e9e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8106ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106ea2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8106ea6:	d06b      	beq.n	8106f80 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8106ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106eaa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8106eae:	d874      	bhi.n	8106f9a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8106eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106eb2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8106eb6:	d056      	beq.n	8106f66 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8106eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106eba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8106ebe:	d86c      	bhi.n	8106f9a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8106ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106ec2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8106ec6:	d03b      	beq.n	8106f40 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8106ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106eca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8106ece:	d864      	bhi.n	8106f9a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8106ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106ed2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106ed6:	d021      	beq.n	8106f1c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8106ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106eda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106ede:	d85c      	bhi.n	8106f9a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8106ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106ee2:	2b00      	cmp	r3, #0
 8106ee4:	d004      	beq.n	8106ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8106ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106eec:	d004      	beq.n	8106ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8106eee:	e054      	b.n	8106f9a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8106ef0:	f7fe fa30 	bl	8105354 <HAL_RCC_GetPCLK1Freq>
 8106ef4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8106ef6:	e1f6      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106ef8:	4b29      	ldr	r3, [pc, #164]	; (8106fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106efa:	681b      	ldr	r3, [r3, #0]
 8106efc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106f00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8106f04:	d107      	bne.n	8106f16 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106f06:	f107 0318 	add.w	r3, r7, #24
 8106f0a:	4618      	mov	r0, r3
 8106f0c:	f000 fa0a 	bl	8107324 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8106f10:	69fb      	ldr	r3, [r7, #28]
 8106f12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106f14:	e1e7      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106f16:	2300      	movs	r3, #0
 8106f18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106f1a:	e1e4      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106f1c:	4b20      	ldr	r3, [pc, #128]	; (8106fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106f1e:	681b      	ldr	r3, [r3, #0]
 8106f20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106f24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106f28:	d107      	bne.n	8106f3a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106f2a:	f107 030c 	add.w	r3, r7, #12
 8106f2e:	4618      	mov	r0, r3
 8106f30:	f000 fb4c 	bl	81075cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8106f34:	693b      	ldr	r3, [r7, #16]
 8106f36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106f38:	e1d5      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106f3a:	2300      	movs	r3, #0
 8106f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106f3e:	e1d2      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8106f40:	4b17      	ldr	r3, [pc, #92]	; (8106fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106f42:	681b      	ldr	r3, [r3, #0]
 8106f44:	f003 0304 	and.w	r3, r3, #4
 8106f48:	2b04      	cmp	r3, #4
 8106f4a:	d109      	bne.n	8106f60 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106f4c:	4b14      	ldr	r3, [pc, #80]	; (8106fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106f4e:	681b      	ldr	r3, [r3, #0]
 8106f50:	08db      	lsrs	r3, r3, #3
 8106f52:	f003 0303 	and.w	r3, r3, #3
 8106f56:	4a13      	ldr	r2, [pc, #76]	; (8106fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8106f58:	fa22 f303 	lsr.w	r3, r2, r3
 8106f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106f5e:	e1c2      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106f60:	2300      	movs	r3, #0
 8106f62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106f64:	e1bf      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8106f66:	4b0e      	ldr	r3, [pc, #56]	; (8106fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106f68:	681b      	ldr	r3, [r3, #0]
 8106f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106f6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106f72:	d102      	bne.n	8106f7a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8106f74:	4b0c      	ldr	r3, [pc, #48]	; (8106fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8106f76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106f78:	e1b5      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106f7a:	2300      	movs	r3, #0
 8106f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106f7e:	e1b2      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8106f80:	4b07      	ldr	r3, [pc, #28]	; (8106fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8106f82:	681b      	ldr	r3, [r3, #0]
 8106f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106f88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106f8c:	d102      	bne.n	8106f94 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8106f8e:	4b07      	ldr	r3, [pc, #28]	; (8106fac <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8106f90:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106f92:	e1a8      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106f94:	2300      	movs	r3, #0
 8106f96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106f98:	e1a5      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8106f9a:	2300      	movs	r3, #0
 8106f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8106f9e:	e1a2      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8106fa0:	58024400 	.word	0x58024400
 8106fa4:	03d09000 	.word	0x03d09000
 8106fa8:	003d0900 	.word	0x003d0900
 8106fac:	017d7840 	.word	0x017d7840
 8106fb0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8106fb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106fb8:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8106fbc:	430b      	orrs	r3, r1
 8106fbe:	d173      	bne.n	81070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8106fc0:	4b9c      	ldr	r3, [pc, #624]	; (8107234 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8106fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106fc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8106fc8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8106fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106fcc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106fd0:	d02f      	beq.n	8107032 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8106fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106fd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106fd8:	d863      	bhi.n	81070a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8106fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106fdc:	2b00      	cmp	r3, #0
 8106fde:	d004      	beq.n	8106fea <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8106fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106fe2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106fe6:	d012      	beq.n	810700e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8106fe8:	e05b      	b.n	81070a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106fea:	4b92      	ldr	r3, [pc, #584]	; (8107234 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8106fec:	681b      	ldr	r3, [r3, #0]
 8106fee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106ff2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8106ff6:	d107      	bne.n	8107008 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106ff8:	f107 0318 	add.w	r3, r7, #24
 8106ffc:	4618      	mov	r0, r3
 8106ffe:	f000 f991 	bl	8107324 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8107002:	69bb      	ldr	r3, [r7, #24]
 8107004:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107006:	e16e      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107008:	2300      	movs	r3, #0
 810700a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810700c:	e16b      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810700e:	4b89      	ldr	r3, [pc, #548]	; (8107234 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107010:	681b      	ldr	r3, [r3, #0]
 8107012:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8107016:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810701a:	d107      	bne.n	810702c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810701c:	f107 030c 	add.w	r3, r7, #12
 8107020:	4618      	mov	r0, r3
 8107022:	f000 fad3 	bl	81075cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8107026:	697b      	ldr	r3, [r7, #20]
 8107028:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810702a:	e15c      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810702c:	2300      	movs	r3, #0
 810702e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107030:	e159      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8107032:	4b80      	ldr	r3, [pc, #512]	; (8107234 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8107036:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810703a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810703c:	4b7d      	ldr	r3, [pc, #500]	; (8107234 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810703e:	681b      	ldr	r3, [r3, #0]
 8107040:	f003 0304 	and.w	r3, r3, #4
 8107044:	2b04      	cmp	r3, #4
 8107046:	d10c      	bne.n	8107062 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8107048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810704a:	2b00      	cmp	r3, #0
 810704c:	d109      	bne.n	8107062 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810704e:	4b79      	ldr	r3, [pc, #484]	; (8107234 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107050:	681b      	ldr	r3, [r3, #0]
 8107052:	08db      	lsrs	r3, r3, #3
 8107054:	f003 0303 	and.w	r3, r3, #3
 8107058:	4a77      	ldr	r2, [pc, #476]	; (8107238 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 810705a:	fa22 f303 	lsr.w	r3, r2, r3
 810705e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8107060:	e01e      	b.n	81070a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8107062:	4b74      	ldr	r3, [pc, #464]	; (8107234 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107064:	681b      	ldr	r3, [r3, #0]
 8107066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810706a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810706e:	d106      	bne.n	810707e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8107070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107072:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8107076:	d102      	bne.n	810707e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8107078:	4b70      	ldr	r3, [pc, #448]	; (810723c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 810707a:	63fb      	str	r3, [r7, #60]	; 0x3c
 810707c:	e010      	b.n	81070a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810707e:	4b6d      	ldr	r3, [pc, #436]	; (8107234 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107080:	681b      	ldr	r3, [r3, #0]
 8107082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8107086:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810708a:	d106      	bne.n	810709a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 810708c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810708e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107092:	d102      	bne.n	810709a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8107094:	4b6a      	ldr	r3, [pc, #424]	; (8107240 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8107096:	63fb      	str	r3, [r7, #60]	; 0x3c
 8107098:	e002      	b.n	81070a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810709a:	2300      	movs	r3, #0
 810709c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 810709e:	e122      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81070a0:	e121      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 81070a2:	2300      	movs	r3, #0
 81070a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81070a6:	e11e      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 81070a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 81070ac:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 81070b0:	430b      	orrs	r3, r1
 81070b2:	d133      	bne.n	810711c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 81070b4:	4b5f      	ldr	r3, [pc, #380]	; (8107234 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81070b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81070b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81070bc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 81070be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81070c0:	2b00      	cmp	r3, #0
 81070c2:	d004      	beq.n	81070ce <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 81070c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81070c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81070ca:	d012      	beq.n	81070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 81070cc:	e023      	b.n	8107116 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81070ce:	4b59      	ldr	r3, [pc, #356]	; (8107234 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81070d0:	681b      	ldr	r3, [r3, #0]
 81070d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81070d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81070da:	d107      	bne.n	81070ec <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81070dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81070e0:	4618      	mov	r0, r3
 81070e2:	f000 fbc7 	bl	8107874 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81070e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81070e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81070ea:	e0fc      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81070ec:	2300      	movs	r3, #0
 81070ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81070f0:	e0f9      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81070f2:	4b50      	ldr	r3, [pc, #320]	; (8107234 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81070f4:	681b      	ldr	r3, [r3, #0]
 81070f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81070fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81070fe:	d107      	bne.n	8107110 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107100:	f107 0318 	add.w	r3, r7, #24
 8107104:	4618      	mov	r0, r3
 8107106:	f000 f90d 	bl	8107324 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 810710a:	6a3b      	ldr	r3, [r7, #32]
 810710c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810710e:	e0ea      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107110:	2300      	movs	r3, #0
 8107112:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107114:	e0e7      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8107116:	2300      	movs	r3, #0
 8107118:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810711a:	e0e4      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 810711c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107120:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8107124:	430b      	orrs	r3, r1
 8107126:	f040 808d 	bne.w	8107244 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 810712a:	4b42      	ldr	r3, [pc, #264]	; (8107234 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810712c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810712e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8107132:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8107134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107136:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810713a:	d06b      	beq.n	8107214 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 810713c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810713e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8107142:	d874      	bhi.n	810722e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8107144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810714a:	d056      	beq.n	81071fa <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 810714c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810714e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107152:	d86c      	bhi.n	810722e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8107154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107156:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810715a:	d03b      	beq.n	81071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 810715c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810715e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8107162:	d864      	bhi.n	810722e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8107164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107166:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810716a:	d021      	beq.n	81071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 810716c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810716e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107172:	d85c      	bhi.n	810722e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8107174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107176:	2b00      	cmp	r3, #0
 8107178:	d004      	beq.n	8107184 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 810717a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810717c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8107180:	d004      	beq.n	810718c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8107182:	e054      	b.n	810722e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8107184:	f000 f8b8 	bl	81072f8 <HAL_RCCEx_GetD3PCLK1Freq>
 8107188:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810718a:	e0ac      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810718c:	4b29      	ldr	r3, [pc, #164]	; (8107234 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810718e:	681b      	ldr	r3, [r3, #0]
 8107190:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8107194:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8107198:	d107      	bne.n	81071aa <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810719a:	f107 0318 	add.w	r3, r7, #24
 810719e:	4618      	mov	r0, r3
 81071a0:	f000 f8c0 	bl	8107324 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 81071a4:	69fb      	ldr	r3, [r7, #28]
 81071a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81071a8:	e09d      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81071aa:	2300      	movs	r3, #0
 81071ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81071ae:	e09a      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81071b0:	4b20      	ldr	r3, [pc, #128]	; (8107234 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81071b2:	681b      	ldr	r3, [r3, #0]
 81071b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81071b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81071bc:	d107      	bne.n	81071ce <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81071be:	f107 030c 	add.w	r3, r7, #12
 81071c2:	4618      	mov	r0, r3
 81071c4:	f000 fa02 	bl	81075cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 81071c8:	693b      	ldr	r3, [r7, #16]
 81071ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81071cc:	e08b      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81071ce:	2300      	movs	r3, #0
 81071d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81071d2:	e088      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 81071d4:	4b17      	ldr	r3, [pc, #92]	; (8107234 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81071d6:	681b      	ldr	r3, [r3, #0]
 81071d8:	f003 0304 	and.w	r3, r3, #4
 81071dc:	2b04      	cmp	r3, #4
 81071de:	d109      	bne.n	81071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81071e0:	4b14      	ldr	r3, [pc, #80]	; (8107234 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81071e2:	681b      	ldr	r3, [r3, #0]
 81071e4:	08db      	lsrs	r3, r3, #3
 81071e6:	f003 0303 	and.w	r3, r3, #3
 81071ea:	4a13      	ldr	r2, [pc, #76]	; (8107238 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 81071ec:	fa22 f303 	lsr.w	r3, r2, r3
 81071f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81071f2:	e078      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81071f4:	2300      	movs	r3, #0
 81071f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81071f8:	e075      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 81071fa:	4b0e      	ldr	r3, [pc, #56]	; (8107234 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81071fc:	681b      	ldr	r3, [r3, #0]
 81071fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8107202:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8107206:	d102      	bne.n	810720e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8107208:	4b0c      	ldr	r3, [pc, #48]	; (810723c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 810720a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810720c:	e06b      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810720e:	2300      	movs	r3, #0
 8107210:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107212:	e068      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8107214:	4b07      	ldr	r3, [pc, #28]	; (8107234 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107216:	681b      	ldr	r3, [r3, #0]
 8107218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810721c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8107220:	d102      	bne.n	8107228 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8107222:	4b07      	ldr	r3, [pc, #28]	; (8107240 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8107224:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107226:	e05e      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107228:	2300      	movs	r3, #0
 810722a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810722c:	e05b      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 810722e:	2300      	movs	r3, #0
 8107230:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107232:	e058      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107234:	58024400 	.word	0x58024400
 8107238:	03d09000 	.word	0x03d09000
 810723c:	003d0900 	.word	0x003d0900
 8107240:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8107244:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107248:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 810724c:	430b      	orrs	r3, r1
 810724e:	d148      	bne.n	81072e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8107250:	4b27      	ldr	r3, [pc, #156]	; (81072f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8107252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8107254:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8107258:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 810725a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810725c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107260:	d02a      	beq.n	81072b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8107262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107264:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107268:	d838      	bhi.n	81072dc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 810726a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810726c:	2b00      	cmp	r3, #0
 810726e:	d004      	beq.n	810727a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8107270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107272:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8107276:	d00d      	beq.n	8107294 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8107278:	e030      	b.n	81072dc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 810727a:	4b1d      	ldr	r3, [pc, #116]	; (81072f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810727c:	681b      	ldr	r3, [r3, #0]
 810727e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8107282:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8107286:	d102      	bne.n	810728e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8107288:	4b1a      	ldr	r3, [pc, #104]	; (81072f4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 810728a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810728c:	e02b      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810728e:	2300      	movs	r3, #0
 8107290:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107292:	e028      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107294:	4b16      	ldr	r3, [pc, #88]	; (81072f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8107296:	681b      	ldr	r3, [r3, #0]
 8107298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810729c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81072a0:	d107      	bne.n	81072b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81072a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81072a6:	4618      	mov	r0, r3
 81072a8:	f000 fae4 	bl	8107874 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81072ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81072ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81072b0:	e019      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81072b2:	2300      	movs	r3, #0
 81072b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81072b6:	e016      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81072b8:	4b0d      	ldr	r3, [pc, #52]	; (81072f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 81072ba:	681b      	ldr	r3, [r3, #0]
 81072bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81072c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81072c4:	d107      	bne.n	81072d6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81072c6:	f107 0318 	add.w	r3, r7, #24
 81072ca:	4618      	mov	r0, r3
 81072cc:	f000 f82a 	bl	8107324 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 81072d0:	69fb      	ldr	r3, [r7, #28]
 81072d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81072d4:	e007      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81072d6:	2300      	movs	r3, #0
 81072d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81072da:	e004      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81072dc:	2300      	movs	r3, #0
 81072de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81072e0:	e001      	b.n	81072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 81072e2:	2300      	movs	r3, #0
 81072e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 81072e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 81072e8:	4618      	mov	r0, r3
 81072ea:	3740      	adds	r7, #64	; 0x40
 81072ec:	46bd      	mov	sp, r7
 81072ee:	bd80      	pop	{r7, pc}
 81072f0:	58024400 	.word	0x58024400
 81072f4:	017d7840 	.word	0x017d7840

081072f8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 81072f8:	b580      	push	{r7, lr}
 81072fa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 81072fc:	f7fd fff8 	bl	81052f0 <HAL_RCC_GetHCLKFreq>
 8107300:	4602      	mov	r2, r0
 8107302:	4b06      	ldr	r3, [pc, #24]	; (810731c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8107304:	6a1b      	ldr	r3, [r3, #32]
 8107306:	091b      	lsrs	r3, r3, #4
 8107308:	f003 0307 	and.w	r3, r3, #7
 810730c:	4904      	ldr	r1, [pc, #16]	; (8107320 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 810730e:	5ccb      	ldrb	r3, [r1, r3]
 8107310:	f003 031f 	and.w	r3, r3, #31
 8107314:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8107318:	4618      	mov	r0, r3
 810731a:	bd80      	pop	{r7, pc}
 810731c:	58024400 	.word	0x58024400
 8107320:	0810a728 	.word	0x0810a728

08107324 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8107324:	b480      	push	{r7}
 8107326:	b089      	sub	sp, #36	; 0x24
 8107328:	af00      	add	r7, sp, #0
 810732a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810732c:	4ba1      	ldr	r3, [pc, #644]	; (81075b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810732e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107330:	f003 0303 	and.w	r3, r3, #3
 8107334:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8107336:	4b9f      	ldr	r3, [pc, #636]	; (81075b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810733a:	0b1b      	lsrs	r3, r3, #12
 810733c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8107340:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8107342:	4b9c      	ldr	r3, [pc, #624]	; (81075b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107346:	091b      	lsrs	r3, r3, #4
 8107348:	f003 0301 	and.w	r3, r3, #1
 810734c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 810734e:	4b99      	ldr	r3, [pc, #612]	; (81075b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107352:	08db      	lsrs	r3, r3, #3
 8107354:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8107358:	693a      	ldr	r2, [r7, #16]
 810735a:	fb02 f303 	mul.w	r3, r2, r3
 810735e:	ee07 3a90 	vmov	s15, r3
 8107362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107366:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 810736a:	697b      	ldr	r3, [r7, #20]
 810736c:	2b00      	cmp	r3, #0
 810736e:	f000 8111 	beq.w	8107594 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8107372:	69bb      	ldr	r3, [r7, #24]
 8107374:	2b02      	cmp	r3, #2
 8107376:	f000 8083 	beq.w	8107480 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 810737a:	69bb      	ldr	r3, [r7, #24]
 810737c:	2b02      	cmp	r3, #2
 810737e:	f200 80a1 	bhi.w	81074c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8107382:	69bb      	ldr	r3, [r7, #24]
 8107384:	2b00      	cmp	r3, #0
 8107386:	d003      	beq.n	8107390 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8107388:	69bb      	ldr	r3, [r7, #24]
 810738a:	2b01      	cmp	r3, #1
 810738c:	d056      	beq.n	810743c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 810738e:	e099      	b.n	81074c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107390:	4b88      	ldr	r3, [pc, #544]	; (81075b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107392:	681b      	ldr	r3, [r3, #0]
 8107394:	f003 0320 	and.w	r3, r3, #32
 8107398:	2b00      	cmp	r3, #0
 810739a:	d02d      	beq.n	81073f8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810739c:	4b85      	ldr	r3, [pc, #532]	; (81075b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810739e:	681b      	ldr	r3, [r3, #0]
 81073a0:	08db      	lsrs	r3, r3, #3
 81073a2:	f003 0303 	and.w	r3, r3, #3
 81073a6:	4a84      	ldr	r2, [pc, #528]	; (81075b8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 81073a8:	fa22 f303 	lsr.w	r3, r2, r3
 81073ac:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81073ae:	68bb      	ldr	r3, [r7, #8]
 81073b0:	ee07 3a90 	vmov	s15, r3
 81073b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81073b8:	697b      	ldr	r3, [r7, #20]
 81073ba:	ee07 3a90 	vmov	s15, r3
 81073be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81073c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81073c6:	4b7b      	ldr	r3, [pc, #492]	; (81075b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81073c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81073ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81073ce:	ee07 3a90 	vmov	s15, r3
 81073d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81073d6:	ed97 6a03 	vldr	s12, [r7, #12]
 81073da:	eddf 5a78 	vldr	s11, [pc, #480]	; 81075bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81073de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81073e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81073e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81073ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81073ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 81073f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 81073f6:	e087      	b.n	8107508 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81073f8:	697b      	ldr	r3, [r7, #20]
 81073fa:	ee07 3a90 	vmov	s15, r3
 81073fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107402:	eddf 6a6f 	vldr	s13, [pc, #444]	; 81075c0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8107406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810740a:	4b6a      	ldr	r3, [pc, #424]	; (81075b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810740c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810740e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107412:	ee07 3a90 	vmov	s15, r3
 8107416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810741a:	ed97 6a03 	vldr	s12, [r7, #12]
 810741e:	eddf 5a67 	vldr	s11, [pc, #412]	; 81075bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810742a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810742e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107436:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810743a:	e065      	b.n	8107508 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810743c:	697b      	ldr	r3, [r7, #20]
 810743e:	ee07 3a90 	vmov	s15, r3
 8107442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107446:	eddf 6a5f 	vldr	s13, [pc, #380]	; 81075c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810744a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810744e:	4b59      	ldr	r3, [pc, #356]	; (81075b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107456:	ee07 3a90 	vmov	s15, r3
 810745a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810745e:	ed97 6a03 	vldr	s12, [r7, #12]
 8107462:	eddf 5a56 	vldr	s11, [pc, #344]	; 81075bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810746a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810746e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107476:	ee67 7a27 	vmul.f32	s15, s14, s15
 810747a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810747e:	e043      	b.n	8107508 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8107480:	697b      	ldr	r3, [r7, #20]
 8107482:	ee07 3a90 	vmov	s15, r3
 8107486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810748a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 81075c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 810748e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107492:	4b48      	ldr	r3, [pc, #288]	; (81075b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810749a:	ee07 3a90 	vmov	s15, r3
 810749e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81074a2:	ed97 6a03 	vldr	s12, [r7, #12]
 81074a6:	eddf 5a45 	vldr	s11, [pc, #276]	; 81075bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81074aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81074ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81074b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81074b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81074ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 81074be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81074c2:	e021      	b.n	8107508 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81074c4:	697b      	ldr	r3, [r7, #20]
 81074c6:	ee07 3a90 	vmov	s15, r3
 81074ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81074ce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 81075c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81074d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81074d6:	4b37      	ldr	r3, [pc, #220]	; (81075b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81074d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81074da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81074de:	ee07 3a90 	vmov	s15, r3
 81074e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81074e6:	ed97 6a03 	vldr	s12, [r7, #12]
 81074ea:	eddf 5a34 	vldr	s11, [pc, #208]	; 81075bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81074ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81074f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81074f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81074fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81074fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107502:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107506:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8107508:	4b2a      	ldr	r3, [pc, #168]	; (81075b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810750a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810750c:	0a5b      	lsrs	r3, r3, #9
 810750e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8107512:	ee07 3a90 	vmov	s15, r3
 8107516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810751a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810751e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107522:	edd7 6a07 	vldr	s13, [r7, #28]
 8107526:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810752a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810752e:	ee17 2a90 	vmov	r2, s15
 8107532:	687b      	ldr	r3, [r7, #4]
 8107534:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8107536:	4b1f      	ldr	r3, [pc, #124]	; (81075b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810753a:	0c1b      	lsrs	r3, r3, #16
 810753c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8107540:	ee07 3a90 	vmov	s15, r3
 8107544:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107548:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810754c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107550:	edd7 6a07 	vldr	s13, [r7, #28]
 8107554:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107558:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810755c:	ee17 2a90 	vmov	r2, s15
 8107560:	687b      	ldr	r3, [r7, #4]
 8107562:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8107564:	4b13      	ldr	r3, [pc, #76]	; (81075b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107568:	0e1b      	lsrs	r3, r3, #24
 810756a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810756e:	ee07 3a90 	vmov	s15, r3
 8107572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107576:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810757a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810757e:	edd7 6a07 	vldr	s13, [r7, #28]
 8107582:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107586:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810758a:	ee17 2a90 	vmov	r2, s15
 810758e:	687b      	ldr	r3, [r7, #4]
 8107590:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8107592:	e008      	b.n	81075a6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8107594:	687b      	ldr	r3, [r7, #4]
 8107596:	2200      	movs	r2, #0
 8107598:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 810759a:	687b      	ldr	r3, [r7, #4]
 810759c:	2200      	movs	r2, #0
 810759e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 81075a0:	687b      	ldr	r3, [r7, #4]
 81075a2:	2200      	movs	r2, #0
 81075a4:	609a      	str	r2, [r3, #8]
}
 81075a6:	bf00      	nop
 81075a8:	3724      	adds	r7, #36	; 0x24
 81075aa:	46bd      	mov	sp, r7
 81075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81075b0:	4770      	bx	lr
 81075b2:	bf00      	nop
 81075b4:	58024400 	.word	0x58024400
 81075b8:	03d09000 	.word	0x03d09000
 81075bc:	46000000 	.word	0x46000000
 81075c0:	4c742400 	.word	0x4c742400
 81075c4:	4a742400 	.word	0x4a742400
 81075c8:	4bbebc20 	.word	0x4bbebc20

081075cc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 81075cc:	b480      	push	{r7}
 81075ce:	b089      	sub	sp, #36	; 0x24
 81075d0:	af00      	add	r7, sp, #0
 81075d2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81075d4:	4ba1      	ldr	r3, [pc, #644]	; (810785c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81075d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81075d8:	f003 0303 	and.w	r3, r3, #3
 81075dc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 81075de:	4b9f      	ldr	r3, [pc, #636]	; (810785c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81075e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81075e2:	0d1b      	lsrs	r3, r3, #20
 81075e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81075e8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 81075ea:	4b9c      	ldr	r3, [pc, #624]	; (810785c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81075ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81075ee:	0a1b      	lsrs	r3, r3, #8
 81075f0:	f003 0301 	and.w	r3, r3, #1
 81075f4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 81075f6:	4b99      	ldr	r3, [pc, #612]	; (810785c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81075f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81075fa:	08db      	lsrs	r3, r3, #3
 81075fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8107600:	693a      	ldr	r2, [r7, #16]
 8107602:	fb02 f303 	mul.w	r3, r2, r3
 8107606:	ee07 3a90 	vmov	s15, r3
 810760a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810760e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8107612:	697b      	ldr	r3, [r7, #20]
 8107614:	2b00      	cmp	r3, #0
 8107616:	f000 8111 	beq.w	810783c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 810761a:	69bb      	ldr	r3, [r7, #24]
 810761c:	2b02      	cmp	r3, #2
 810761e:	f000 8083 	beq.w	8107728 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8107622:	69bb      	ldr	r3, [r7, #24]
 8107624:	2b02      	cmp	r3, #2
 8107626:	f200 80a1 	bhi.w	810776c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 810762a:	69bb      	ldr	r3, [r7, #24]
 810762c:	2b00      	cmp	r3, #0
 810762e:	d003      	beq.n	8107638 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8107630:	69bb      	ldr	r3, [r7, #24]
 8107632:	2b01      	cmp	r3, #1
 8107634:	d056      	beq.n	81076e4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8107636:	e099      	b.n	810776c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107638:	4b88      	ldr	r3, [pc, #544]	; (810785c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810763a:	681b      	ldr	r3, [r3, #0]
 810763c:	f003 0320 	and.w	r3, r3, #32
 8107640:	2b00      	cmp	r3, #0
 8107642:	d02d      	beq.n	81076a0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107644:	4b85      	ldr	r3, [pc, #532]	; (810785c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107646:	681b      	ldr	r3, [r3, #0]
 8107648:	08db      	lsrs	r3, r3, #3
 810764a:	f003 0303 	and.w	r3, r3, #3
 810764e:	4a84      	ldr	r2, [pc, #528]	; (8107860 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8107650:	fa22 f303 	lsr.w	r3, r2, r3
 8107654:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8107656:	68bb      	ldr	r3, [r7, #8]
 8107658:	ee07 3a90 	vmov	s15, r3
 810765c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107660:	697b      	ldr	r3, [r7, #20]
 8107662:	ee07 3a90 	vmov	s15, r3
 8107666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810766a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810766e:	4b7b      	ldr	r3, [pc, #492]	; (810785c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107676:	ee07 3a90 	vmov	s15, r3
 810767a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810767e:	ed97 6a03 	vldr	s12, [r7, #12]
 8107682:	eddf 5a78 	vldr	s11, [pc, #480]	; 8107864 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8107686:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810768a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810768e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107696:	ee67 7a27 	vmul.f32	s15, s14, s15
 810769a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810769e:	e087      	b.n	81077b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81076a0:	697b      	ldr	r3, [r7, #20]
 81076a2:	ee07 3a90 	vmov	s15, r3
 81076a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81076aa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8107868 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 81076ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81076b2:	4b6a      	ldr	r3, [pc, #424]	; (810785c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81076b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81076b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81076ba:	ee07 3a90 	vmov	s15, r3
 81076be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81076c2:	ed97 6a03 	vldr	s12, [r7, #12]
 81076c6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8107864 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81076ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81076ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81076d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81076d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81076da:	ee67 7a27 	vmul.f32	s15, s14, s15
 81076de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81076e2:	e065      	b.n	81077b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81076e4:	697b      	ldr	r3, [r7, #20]
 81076e6:	ee07 3a90 	vmov	s15, r3
 81076ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81076ee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 810786c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81076f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81076f6:	4b59      	ldr	r3, [pc, #356]	; (810785c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81076f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81076fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81076fe:	ee07 3a90 	vmov	s15, r3
 8107702:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107706:	ed97 6a03 	vldr	s12, [r7, #12]
 810770a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8107864 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810770e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107712:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107716:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810771a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810771e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107722:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107726:	e043      	b.n	81077b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8107728:	697b      	ldr	r3, [r7, #20]
 810772a:	ee07 3a90 	vmov	s15, r3
 810772e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107732:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8107870 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8107736:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810773a:	4b48      	ldr	r3, [pc, #288]	; (810785c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810773c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810773e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107742:	ee07 3a90 	vmov	s15, r3
 8107746:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810774a:	ed97 6a03 	vldr	s12, [r7, #12]
 810774e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8107864 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8107752:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107756:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810775a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810775e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107766:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810776a:	e021      	b.n	81077b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810776c:	697b      	ldr	r3, [r7, #20]
 810776e:	ee07 3a90 	vmov	s15, r3
 8107772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107776:	eddf 6a3d 	vldr	s13, [pc, #244]	; 810786c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810777a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810777e:	4b37      	ldr	r3, [pc, #220]	; (810785c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107786:	ee07 3a90 	vmov	s15, r3
 810778a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810778e:	ed97 6a03 	vldr	s12, [r7, #12]
 8107792:	eddf 5a34 	vldr	s11, [pc, #208]	; 8107864 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8107796:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810779a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810779e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81077a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81077a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81077aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81077ae:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 81077b0:	4b2a      	ldr	r3, [pc, #168]	; (810785c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81077b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81077b4:	0a5b      	lsrs	r3, r3, #9
 81077b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81077ba:	ee07 3a90 	vmov	s15, r3
 81077be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81077c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81077c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 81077ca:	edd7 6a07 	vldr	s13, [r7, #28]
 81077ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81077d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81077d6:	ee17 2a90 	vmov	r2, s15
 81077da:	687b      	ldr	r3, [r7, #4]
 81077dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 81077de:	4b1f      	ldr	r3, [pc, #124]	; (810785c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81077e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81077e2:	0c1b      	lsrs	r3, r3, #16
 81077e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81077e8:	ee07 3a90 	vmov	s15, r3
 81077ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81077f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81077f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 81077f8:	edd7 6a07 	vldr	s13, [r7, #28]
 81077fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107800:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107804:	ee17 2a90 	vmov	r2, s15
 8107808:	687b      	ldr	r3, [r7, #4]
 810780a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 810780c:	4b13      	ldr	r3, [pc, #76]	; (810785c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810780e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107810:	0e1b      	lsrs	r3, r3, #24
 8107812:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8107816:	ee07 3a90 	vmov	s15, r3
 810781a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810781e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107822:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107826:	edd7 6a07 	vldr	s13, [r7, #28]
 810782a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810782e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107832:	ee17 2a90 	vmov	r2, s15
 8107836:	687b      	ldr	r3, [r7, #4]
 8107838:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 810783a:	e008      	b.n	810784e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 810783c:	687b      	ldr	r3, [r7, #4]
 810783e:	2200      	movs	r2, #0
 8107840:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8107842:	687b      	ldr	r3, [r7, #4]
 8107844:	2200      	movs	r2, #0
 8107846:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8107848:	687b      	ldr	r3, [r7, #4]
 810784a:	2200      	movs	r2, #0
 810784c:	609a      	str	r2, [r3, #8]
}
 810784e:	bf00      	nop
 8107850:	3724      	adds	r7, #36	; 0x24
 8107852:	46bd      	mov	sp, r7
 8107854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107858:	4770      	bx	lr
 810785a:	bf00      	nop
 810785c:	58024400 	.word	0x58024400
 8107860:	03d09000 	.word	0x03d09000
 8107864:	46000000 	.word	0x46000000
 8107868:	4c742400 	.word	0x4c742400
 810786c:	4a742400 	.word	0x4a742400
 8107870:	4bbebc20 	.word	0x4bbebc20

08107874 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8107874:	b480      	push	{r7}
 8107876:	b089      	sub	sp, #36	; 0x24
 8107878:	af00      	add	r7, sp, #0
 810787a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810787c:	4ba0      	ldr	r3, [pc, #640]	; (8107b00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810787e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107880:	f003 0303 	and.w	r3, r3, #3
 8107884:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8107886:	4b9e      	ldr	r3, [pc, #632]	; (8107b00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810788a:	091b      	lsrs	r3, r3, #4
 810788c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8107890:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8107892:	4b9b      	ldr	r3, [pc, #620]	; (8107b00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107896:	f003 0301 	and.w	r3, r3, #1
 810789a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 810789c:	4b98      	ldr	r3, [pc, #608]	; (8107b00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810789e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81078a0:	08db      	lsrs	r3, r3, #3
 81078a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81078a6:	693a      	ldr	r2, [r7, #16]
 81078a8:	fb02 f303 	mul.w	r3, r2, r3
 81078ac:	ee07 3a90 	vmov	s15, r3
 81078b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81078b4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 81078b8:	697b      	ldr	r3, [r7, #20]
 81078ba:	2b00      	cmp	r3, #0
 81078bc:	f000 8111 	beq.w	8107ae2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 81078c0:	69bb      	ldr	r3, [r7, #24]
 81078c2:	2b02      	cmp	r3, #2
 81078c4:	f000 8083 	beq.w	81079ce <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 81078c8:	69bb      	ldr	r3, [r7, #24]
 81078ca:	2b02      	cmp	r3, #2
 81078cc:	f200 80a1 	bhi.w	8107a12 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 81078d0:	69bb      	ldr	r3, [r7, #24]
 81078d2:	2b00      	cmp	r3, #0
 81078d4:	d003      	beq.n	81078de <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 81078d6:	69bb      	ldr	r3, [r7, #24]
 81078d8:	2b01      	cmp	r3, #1
 81078da:	d056      	beq.n	810798a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 81078dc:	e099      	b.n	8107a12 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81078de:	4b88      	ldr	r3, [pc, #544]	; (8107b00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81078e0:	681b      	ldr	r3, [r3, #0]
 81078e2:	f003 0320 	and.w	r3, r3, #32
 81078e6:	2b00      	cmp	r3, #0
 81078e8:	d02d      	beq.n	8107946 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81078ea:	4b85      	ldr	r3, [pc, #532]	; (8107b00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81078ec:	681b      	ldr	r3, [r3, #0]
 81078ee:	08db      	lsrs	r3, r3, #3
 81078f0:	f003 0303 	and.w	r3, r3, #3
 81078f4:	4a83      	ldr	r2, [pc, #524]	; (8107b04 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 81078f6:	fa22 f303 	lsr.w	r3, r2, r3
 81078fa:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81078fc:	68bb      	ldr	r3, [r7, #8]
 81078fe:	ee07 3a90 	vmov	s15, r3
 8107902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107906:	697b      	ldr	r3, [r7, #20]
 8107908:	ee07 3a90 	vmov	s15, r3
 810790c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107910:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107914:	4b7a      	ldr	r3, [pc, #488]	; (8107b00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107918:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810791c:	ee07 3a90 	vmov	s15, r3
 8107920:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107924:	ed97 6a03 	vldr	s12, [r7, #12]
 8107928:	eddf 5a77 	vldr	s11, [pc, #476]	; 8107b08 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810792c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107930:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107934:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107938:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810793c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107940:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8107944:	e087      	b.n	8107a56 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8107946:	697b      	ldr	r3, [r7, #20]
 8107948:	ee07 3a90 	vmov	s15, r3
 810794c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107950:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8107b0c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8107954:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107958:	4b69      	ldr	r3, [pc, #420]	; (8107b00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810795a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810795c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107960:	ee07 3a90 	vmov	s15, r3
 8107964:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107968:	ed97 6a03 	vldr	s12, [r7, #12]
 810796c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8107b08 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8107970:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107974:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107978:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810797c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107980:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107984:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107988:	e065      	b.n	8107a56 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810798a:	697b      	ldr	r3, [r7, #20]
 810798c:	ee07 3a90 	vmov	s15, r3
 8107990:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107994:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8107b10 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8107998:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810799c:	4b58      	ldr	r3, [pc, #352]	; (8107b00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810799e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81079a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81079a4:	ee07 3a90 	vmov	s15, r3
 81079a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81079ac:	ed97 6a03 	vldr	s12, [r7, #12]
 81079b0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8107b08 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81079b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81079b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81079bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81079c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81079c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 81079c8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81079cc:	e043      	b.n	8107a56 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81079ce:	697b      	ldr	r3, [r7, #20]
 81079d0:	ee07 3a90 	vmov	s15, r3
 81079d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81079d8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8107b14 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 81079dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81079e0:	4b47      	ldr	r3, [pc, #284]	; (8107b00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81079e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81079e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81079e8:	ee07 3a90 	vmov	s15, r3
 81079ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81079f0:	ed97 6a03 	vldr	s12, [r7, #12]
 81079f4:	eddf 5a44 	vldr	s11, [pc, #272]	; 8107b08 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81079f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81079fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107a00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107a04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107a08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107a0c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107a10:	e021      	b.n	8107a56 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8107a12:	697b      	ldr	r3, [r7, #20]
 8107a14:	ee07 3a90 	vmov	s15, r3
 8107a18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107a1c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8107b0c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8107a20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107a24:	4b36      	ldr	r3, [pc, #216]	; (8107b00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107a28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107a2c:	ee07 3a90 	vmov	s15, r3
 8107a30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107a34:	ed97 6a03 	vldr	s12, [r7, #12]
 8107a38:	eddf 5a33 	vldr	s11, [pc, #204]	; 8107b08 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8107a3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107a40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107a44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107a48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107a4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107a50:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107a54:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8107a56:	4b2a      	ldr	r3, [pc, #168]	; (8107b00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107a5a:	0a5b      	lsrs	r3, r3, #9
 8107a5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8107a60:	ee07 3a90 	vmov	s15, r3
 8107a64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107a68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107a6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107a70:	edd7 6a07 	vldr	s13, [r7, #28]
 8107a74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107a78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107a7c:	ee17 2a90 	vmov	r2, s15
 8107a80:	687b      	ldr	r3, [r7, #4]
 8107a82:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8107a84:	4b1e      	ldr	r3, [pc, #120]	; (8107b00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107a88:	0c1b      	lsrs	r3, r3, #16
 8107a8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8107a8e:	ee07 3a90 	vmov	s15, r3
 8107a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107a96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107a9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107a9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8107aa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107aa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107aaa:	ee17 2a90 	vmov	r2, s15
 8107aae:	687b      	ldr	r3, [r7, #4]
 8107ab0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8107ab2:	4b13      	ldr	r3, [pc, #76]	; (8107b00 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107ab6:	0e1b      	lsrs	r3, r3, #24
 8107ab8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8107abc:	ee07 3a90 	vmov	s15, r3
 8107ac0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107ac4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107ac8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107acc:	edd7 6a07 	vldr	s13, [r7, #28]
 8107ad0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107ad4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107ad8:	ee17 2a90 	vmov	r2, s15
 8107adc:	687b      	ldr	r3, [r7, #4]
 8107ade:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8107ae0:	e008      	b.n	8107af4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8107ae2:	687b      	ldr	r3, [r7, #4]
 8107ae4:	2200      	movs	r2, #0
 8107ae6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8107ae8:	687b      	ldr	r3, [r7, #4]
 8107aea:	2200      	movs	r2, #0
 8107aec:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8107aee:	687b      	ldr	r3, [r7, #4]
 8107af0:	2200      	movs	r2, #0
 8107af2:	609a      	str	r2, [r3, #8]
}
 8107af4:	bf00      	nop
 8107af6:	3724      	adds	r7, #36	; 0x24
 8107af8:	46bd      	mov	sp, r7
 8107afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107afe:	4770      	bx	lr
 8107b00:	58024400 	.word	0x58024400
 8107b04:	03d09000 	.word	0x03d09000
 8107b08:	46000000 	.word	0x46000000
 8107b0c:	4c742400 	.word	0x4c742400
 8107b10:	4a742400 	.word	0x4a742400
 8107b14:	4bbebc20 	.word	0x4bbebc20

08107b18 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8107b18:	b580      	push	{r7, lr}
 8107b1a:	b084      	sub	sp, #16
 8107b1c:	af00      	add	r7, sp, #0
 8107b1e:	6078      	str	r0, [r7, #4]
 8107b20:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8107b22:	2300      	movs	r3, #0
 8107b24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8107b26:	4b54      	ldr	r3, [pc, #336]	; (8107c78 <RCCEx_PLL2_Config+0x160>)
 8107b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107b2a:	f003 0303 	and.w	r3, r3, #3
 8107b2e:	2b03      	cmp	r3, #3
 8107b30:	d101      	bne.n	8107b36 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8107b32:	2301      	movs	r3, #1
 8107b34:	e09b      	b.n	8107c6e <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8107b36:	4b50      	ldr	r3, [pc, #320]	; (8107c78 <RCCEx_PLL2_Config+0x160>)
 8107b38:	681b      	ldr	r3, [r3, #0]
 8107b3a:	4a4f      	ldr	r2, [pc, #316]	; (8107c78 <RCCEx_PLL2_Config+0x160>)
 8107b3c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8107b40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107b42:	f7f9 fbef 	bl	8101324 <HAL_GetTick>
 8107b46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8107b48:	e008      	b.n	8107b5c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8107b4a:	f7f9 fbeb 	bl	8101324 <HAL_GetTick>
 8107b4e:	4602      	mov	r2, r0
 8107b50:	68bb      	ldr	r3, [r7, #8]
 8107b52:	1ad3      	subs	r3, r2, r3
 8107b54:	2b02      	cmp	r3, #2
 8107b56:	d901      	bls.n	8107b5c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8107b58:	2303      	movs	r3, #3
 8107b5a:	e088      	b.n	8107c6e <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8107b5c:	4b46      	ldr	r3, [pc, #280]	; (8107c78 <RCCEx_PLL2_Config+0x160>)
 8107b5e:	681b      	ldr	r3, [r3, #0]
 8107b60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8107b64:	2b00      	cmp	r3, #0
 8107b66:	d1f0      	bne.n	8107b4a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8107b68:	4b43      	ldr	r3, [pc, #268]	; (8107c78 <RCCEx_PLL2_Config+0x160>)
 8107b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107b6c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8107b70:	687b      	ldr	r3, [r7, #4]
 8107b72:	681b      	ldr	r3, [r3, #0]
 8107b74:	031b      	lsls	r3, r3, #12
 8107b76:	4940      	ldr	r1, [pc, #256]	; (8107c78 <RCCEx_PLL2_Config+0x160>)
 8107b78:	4313      	orrs	r3, r2
 8107b7a:	628b      	str	r3, [r1, #40]	; 0x28
 8107b7c:	687b      	ldr	r3, [r7, #4]
 8107b7e:	685b      	ldr	r3, [r3, #4]
 8107b80:	3b01      	subs	r3, #1
 8107b82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8107b86:	687b      	ldr	r3, [r7, #4]
 8107b88:	689b      	ldr	r3, [r3, #8]
 8107b8a:	3b01      	subs	r3, #1
 8107b8c:	025b      	lsls	r3, r3, #9
 8107b8e:	b29b      	uxth	r3, r3
 8107b90:	431a      	orrs	r2, r3
 8107b92:	687b      	ldr	r3, [r7, #4]
 8107b94:	68db      	ldr	r3, [r3, #12]
 8107b96:	3b01      	subs	r3, #1
 8107b98:	041b      	lsls	r3, r3, #16
 8107b9a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8107b9e:	431a      	orrs	r2, r3
 8107ba0:	687b      	ldr	r3, [r7, #4]
 8107ba2:	691b      	ldr	r3, [r3, #16]
 8107ba4:	3b01      	subs	r3, #1
 8107ba6:	061b      	lsls	r3, r3, #24
 8107ba8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8107bac:	4932      	ldr	r1, [pc, #200]	; (8107c78 <RCCEx_PLL2_Config+0x160>)
 8107bae:	4313      	orrs	r3, r2
 8107bb0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8107bb2:	4b31      	ldr	r3, [pc, #196]	; (8107c78 <RCCEx_PLL2_Config+0x160>)
 8107bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107bb6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8107bba:	687b      	ldr	r3, [r7, #4]
 8107bbc:	695b      	ldr	r3, [r3, #20]
 8107bbe:	492e      	ldr	r1, [pc, #184]	; (8107c78 <RCCEx_PLL2_Config+0x160>)
 8107bc0:	4313      	orrs	r3, r2
 8107bc2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8107bc4:	4b2c      	ldr	r3, [pc, #176]	; (8107c78 <RCCEx_PLL2_Config+0x160>)
 8107bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107bc8:	f023 0220 	bic.w	r2, r3, #32
 8107bcc:	687b      	ldr	r3, [r7, #4]
 8107bce:	699b      	ldr	r3, [r3, #24]
 8107bd0:	4929      	ldr	r1, [pc, #164]	; (8107c78 <RCCEx_PLL2_Config+0x160>)
 8107bd2:	4313      	orrs	r3, r2
 8107bd4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8107bd6:	4b28      	ldr	r3, [pc, #160]	; (8107c78 <RCCEx_PLL2_Config+0x160>)
 8107bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107bda:	4a27      	ldr	r2, [pc, #156]	; (8107c78 <RCCEx_PLL2_Config+0x160>)
 8107bdc:	f023 0310 	bic.w	r3, r3, #16
 8107be0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8107be2:	4b25      	ldr	r3, [pc, #148]	; (8107c78 <RCCEx_PLL2_Config+0x160>)
 8107be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107be6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8107bea:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8107bee:	687a      	ldr	r2, [r7, #4]
 8107bf0:	69d2      	ldr	r2, [r2, #28]
 8107bf2:	00d2      	lsls	r2, r2, #3
 8107bf4:	4920      	ldr	r1, [pc, #128]	; (8107c78 <RCCEx_PLL2_Config+0x160>)
 8107bf6:	4313      	orrs	r3, r2
 8107bf8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8107bfa:	4b1f      	ldr	r3, [pc, #124]	; (8107c78 <RCCEx_PLL2_Config+0x160>)
 8107bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107bfe:	4a1e      	ldr	r2, [pc, #120]	; (8107c78 <RCCEx_PLL2_Config+0x160>)
 8107c00:	f043 0310 	orr.w	r3, r3, #16
 8107c04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8107c06:	683b      	ldr	r3, [r7, #0]
 8107c08:	2b00      	cmp	r3, #0
 8107c0a:	d106      	bne.n	8107c1a <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8107c0c:	4b1a      	ldr	r3, [pc, #104]	; (8107c78 <RCCEx_PLL2_Config+0x160>)
 8107c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107c10:	4a19      	ldr	r2, [pc, #100]	; (8107c78 <RCCEx_PLL2_Config+0x160>)
 8107c12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8107c16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8107c18:	e00f      	b.n	8107c3a <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8107c1a:	683b      	ldr	r3, [r7, #0]
 8107c1c:	2b01      	cmp	r3, #1
 8107c1e:	d106      	bne.n	8107c2e <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8107c20:	4b15      	ldr	r3, [pc, #84]	; (8107c78 <RCCEx_PLL2_Config+0x160>)
 8107c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107c24:	4a14      	ldr	r2, [pc, #80]	; (8107c78 <RCCEx_PLL2_Config+0x160>)
 8107c26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8107c2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8107c2c:	e005      	b.n	8107c3a <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8107c2e:	4b12      	ldr	r3, [pc, #72]	; (8107c78 <RCCEx_PLL2_Config+0x160>)
 8107c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107c32:	4a11      	ldr	r2, [pc, #68]	; (8107c78 <RCCEx_PLL2_Config+0x160>)
 8107c34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8107c38:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8107c3a:	4b0f      	ldr	r3, [pc, #60]	; (8107c78 <RCCEx_PLL2_Config+0x160>)
 8107c3c:	681b      	ldr	r3, [r3, #0]
 8107c3e:	4a0e      	ldr	r2, [pc, #56]	; (8107c78 <RCCEx_PLL2_Config+0x160>)
 8107c40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8107c44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107c46:	f7f9 fb6d 	bl	8101324 <HAL_GetTick>
 8107c4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8107c4c:	e008      	b.n	8107c60 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8107c4e:	f7f9 fb69 	bl	8101324 <HAL_GetTick>
 8107c52:	4602      	mov	r2, r0
 8107c54:	68bb      	ldr	r3, [r7, #8]
 8107c56:	1ad3      	subs	r3, r2, r3
 8107c58:	2b02      	cmp	r3, #2
 8107c5a:	d901      	bls.n	8107c60 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8107c5c:	2303      	movs	r3, #3
 8107c5e:	e006      	b.n	8107c6e <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8107c60:	4b05      	ldr	r3, [pc, #20]	; (8107c78 <RCCEx_PLL2_Config+0x160>)
 8107c62:	681b      	ldr	r3, [r3, #0]
 8107c64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8107c68:	2b00      	cmp	r3, #0
 8107c6a:	d0f0      	beq.n	8107c4e <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8107c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8107c6e:	4618      	mov	r0, r3
 8107c70:	3710      	adds	r7, #16
 8107c72:	46bd      	mov	sp, r7
 8107c74:	bd80      	pop	{r7, pc}
 8107c76:	bf00      	nop
 8107c78:	58024400 	.word	0x58024400

08107c7c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8107c7c:	b580      	push	{r7, lr}
 8107c7e:	b084      	sub	sp, #16
 8107c80:	af00      	add	r7, sp, #0
 8107c82:	6078      	str	r0, [r7, #4]
 8107c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8107c86:	2300      	movs	r3, #0
 8107c88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8107c8a:	4b54      	ldr	r3, [pc, #336]	; (8107ddc <RCCEx_PLL3_Config+0x160>)
 8107c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107c8e:	f003 0303 	and.w	r3, r3, #3
 8107c92:	2b03      	cmp	r3, #3
 8107c94:	d101      	bne.n	8107c9a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8107c96:	2301      	movs	r3, #1
 8107c98:	e09b      	b.n	8107dd2 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8107c9a:	4b50      	ldr	r3, [pc, #320]	; (8107ddc <RCCEx_PLL3_Config+0x160>)
 8107c9c:	681b      	ldr	r3, [r3, #0]
 8107c9e:	4a4f      	ldr	r2, [pc, #316]	; (8107ddc <RCCEx_PLL3_Config+0x160>)
 8107ca0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8107ca4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107ca6:	f7f9 fb3d 	bl	8101324 <HAL_GetTick>
 8107caa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8107cac:	e008      	b.n	8107cc0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8107cae:	f7f9 fb39 	bl	8101324 <HAL_GetTick>
 8107cb2:	4602      	mov	r2, r0
 8107cb4:	68bb      	ldr	r3, [r7, #8]
 8107cb6:	1ad3      	subs	r3, r2, r3
 8107cb8:	2b02      	cmp	r3, #2
 8107cba:	d901      	bls.n	8107cc0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8107cbc:	2303      	movs	r3, #3
 8107cbe:	e088      	b.n	8107dd2 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8107cc0:	4b46      	ldr	r3, [pc, #280]	; (8107ddc <RCCEx_PLL3_Config+0x160>)
 8107cc2:	681b      	ldr	r3, [r3, #0]
 8107cc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8107cc8:	2b00      	cmp	r3, #0
 8107cca:	d1f0      	bne.n	8107cae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8107ccc:	4b43      	ldr	r3, [pc, #268]	; (8107ddc <RCCEx_PLL3_Config+0x160>)
 8107cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107cd0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8107cd4:	687b      	ldr	r3, [r7, #4]
 8107cd6:	681b      	ldr	r3, [r3, #0]
 8107cd8:	051b      	lsls	r3, r3, #20
 8107cda:	4940      	ldr	r1, [pc, #256]	; (8107ddc <RCCEx_PLL3_Config+0x160>)
 8107cdc:	4313      	orrs	r3, r2
 8107cde:	628b      	str	r3, [r1, #40]	; 0x28
 8107ce0:	687b      	ldr	r3, [r7, #4]
 8107ce2:	685b      	ldr	r3, [r3, #4]
 8107ce4:	3b01      	subs	r3, #1
 8107ce6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8107cea:	687b      	ldr	r3, [r7, #4]
 8107cec:	689b      	ldr	r3, [r3, #8]
 8107cee:	3b01      	subs	r3, #1
 8107cf0:	025b      	lsls	r3, r3, #9
 8107cf2:	b29b      	uxth	r3, r3
 8107cf4:	431a      	orrs	r2, r3
 8107cf6:	687b      	ldr	r3, [r7, #4]
 8107cf8:	68db      	ldr	r3, [r3, #12]
 8107cfa:	3b01      	subs	r3, #1
 8107cfc:	041b      	lsls	r3, r3, #16
 8107cfe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8107d02:	431a      	orrs	r2, r3
 8107d04:	687b      	ldr	r3, [r7, #4]
 8107d06:	691b      	ldr	r3, [r3, #16]
 8107d08:	3b01      	subs	r3, #1
 8107d0a:	061b      	lsls	r3, r3, #24
 8107d0c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8107d10:	4932      	ldr	r1, [pc, #200]	; (8107ddc <RCCEx_PLL3_Config+0x160>)
 8107d12:	4313      	orrs	r3, r2
 8107d14:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8107d16:	4b31      	ldr	r3, [pc, #196]	; (8107ddc <RCCEx_PLL3_Config+0x160>)
 8107d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107d1a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8107d1e:	687b      	ldr	r3, [r7, #4]
 8107d20:	695b      	ldr	r3, [r3, #20]
 8107d22:	492e      	ldr	r1, [pc, #184]	; (8107ddc <RCCEx_PLL3_Config+0x160>)
 8107d24:	4313      	orrs	r3, r2
 8107d26:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8107d28:	4b2c      	ldr	r3, [pc, #176]	; (8107ddc <RCCEx_PLL3_Config+0x160>)
 8107d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107d2c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8107d30:	687b      	ldr	r3, [r7, #4]
 8107d32:	699b      	ldr	r3, [r3, #24]
 8107d34:	4929      	ldr	r1, [pc, #164]	; (8107ddc <RCCEx_PLL3_Config+0x160>)
 8107d36:	4313      	orrs	r3, r2
 8107d38:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8107d3a:	4b28      	ldr	r3, [pc, #160]	; (8107ddc <RCCEx_PLL3_Config+0x160>)
 8107d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107d3e:	4a27      	ldr	r2, [pc, #156]	; (8107ddc <RCCEx_PLL3_Config+0x160>)
 8107d40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8107d44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8107d46:	4b25      	ldr	r3, [pc, #148]	; (8107ddc <RCCEx_PLL3_Config+0x160>)
 8107d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107d4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8107d4e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8107d52:	687a      	ldr	r2, [r7, #4]
 8107d54:	69d2      	ldr	r2, [r2, #28]
 8107d56:	00d2      	lsls	r2, r2, #3
 8107d58:	4920      	ldr	r1, [pc, #128]	; (8107ddc <RCCEx_PLL3_Config+0x160>)
 8107d5a:	4313      	orrs	r3, r2
 8107d5c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8107d5e:	4b1f      	ldr	r3, [pc, #124]	; (8107ddc <RCCEx_PLL3_Config+0x160>)
 8107d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107d62:	4a1e      	ldr	r2, [pc, #120]	; (8107ddc <RCCEx_PLL3_Config+0x160>)
 8107d64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8107d68:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8107d6a:	683b      	ldr	r3, [r7, #0]
 8107d6c:	2b00      	cmp	r3, #0
 8107d6e:	d106      	bne.n	8107d7e <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8107d70:	4b1a      	ldr	r3, [pc, #104]	; (8107ddc <RCCEx_PLL3_Config+0x160>)
 8107d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107d74:	4a19      	ldr	r2, [pc, #100]	; (8107ddc <RCCEx_PLL3_Config+0x160>)
 8107d76:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8107d7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8107d7c:	e00f      	b.n	8107d9e <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8107d7e:	683b      	ldr	r3, [r7, #0]
 8107d80:	2b01      	cmp	r3, #1
 8107d82:	d106      	bne.n	8107d92 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8107d84:	4b15      	ldr	r3, [pc, #84]	; (8107ddc <RCCEx_PLL3_Config+0x160>)
 8107d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107d88:	4a14      	ldr	r2, [pc, #80]	; (8107ddc <RCCEx_PLL3_Config+0x160>)
 8107d8a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8107d8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8107d90:	e005      	b.n	8107d9e <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8107d92:	4b12      	ldr	r3, [pc, #72]	; (8107ddc <RCCEx_PLL3_Config+0x160>)
 8107d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107d96:	4a11      	ldr	r2, [pc, #68]	; (8107ddc <RCCEx_PLL3_Config+0x160>)
 8107d98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8107d9c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8107d9e:	4b0f      	ldr	r3, [pc, #60]	; (8107ddc <RCCEx_PLL3_Config+0x160>)
 8107da0:	681b      	ldr	r3, [r3, #0]
 8107da2:	4a0e      	ldr	r2, [pc, #56]	; (8107ddc <RCCEx_PLL3_Config+0x160>)
 8107da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8107da8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107daa:	f7f9 fabb 	bl	8101324 <HAL_GetTick>
 8107dae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8107db0:	e008      	b.n	8107dc4 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8107db2:	f7f9 fab7 	bl	8101324 <HAL_GetTick>
 8107db6:	4602      	mov	r2, r0
 8107db8:	68bb      	ldr	r3, [r7, #8]
 8107dba:	1ad3      	subs	r3, r2, r3
 8107dbc:	2b02      	cmp	r3, #2
 8107dbe:	d901      	bls.n	8107dc4 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8107dc0:	2303      	movs	r3, #3
 8107dc2:	e006      	b.n	8107dd2 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8107dc4:	4b05      	ldr	r3, [pc, #20]	; (8107ddc <RCCEx_PLL3_Config+0x160>)
 8107dc6:	681b      	ldr	r3, [r3, #0]
 8107dc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8107dcc:	2b00      	cmp	r3, #0
 8107dce:	d0f0      	beq.n	8107db2 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8107dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8107dd2:	4618      	mov	r0, r3
 8107dd4:	3710      	adds	r7, #16
 8107dd6:	46bd      	mov	sp, r7
 8107dd8:	bd80      	pop	{r7, pc}
 8107dda:	bf00      	nop
 8107ddc:	58024400 	.word	0x58024400

08107de0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8107de0:	b580      	push	{r7, lr}
 8107de2:	b082      	sub	sp, #8
 8107de4:	af00      	add	r7, sp, #0
 8107de6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8107de8:	687b      	ldr	r3, [r7, #4]
 8107dea:	2b00      	cmp	r3, #0
 8107dec:	d101      	bne.n	8107df2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8107dee:	2301      	movs	r3, #1
 8107df0:	e049      	b.n	8107e86 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8107df2:	687b      	ldr	r3, [r7, #4]
 8107df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8107df8:	b2db      	uxtb	r3, r3
 8107dfa:	2b00      	cmp	r3, #0
 8107dfc:	d106      	bne.n	8107e0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8107dfe:	687b      	ldr	r3, [r7, #4]
 8107e00:	2200      	movs	r2, #0
 8107e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8107e06:	6878      	ldr	r0, [r7, #4]
 8107e08:	f7f9 f86e 	bl	8100ee8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8107e0c:	687b      	ldr	r3, [r7, #4]
 8107e0e:	2202      	movs	r2, #2
 8107e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8107e14:	687b      	ldr	r3, [r7, #4]
 8107e16:	681a      	ldr	r2, [r3, #0]
 8107e18:	687b      	ldr	r3, [r7, #4]
 8107e1a:	3304      	adds	r3, #4
 8107e1c:	4619      	mov	r1, r3
 8107e1e:	4610      	mov	r0, r2
 8107e20:	f000 faa2 	bl	8108368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8107e24:	687b      	ldr	r3, [r7, #4]
 8107e26:	2201      	movs	r2, #1
 8107e28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8107e2c:	687b      	ldr	r3, [r7, #4]
 8107e2e:	2201      	movs	r2, #1
 8107e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8107e34:	687b      	ldr	r3, [r7, #4]
 8107e36:	2201      	movs	r2, #1
 8107e38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8107e3c:	687b      	ldr	r3, [r7, #4]
 8107e3e:	2201      	movs	r2, #1
 8107e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8107e44:	687b      	ldr	r3, [r7, #4]
 8107e46:	2201      	movs	r2, #1
 8107e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8107e4c:	687b      	ldr	r3, [r7, #4]
 8107e4e:	2201      	movs	r2, #1
 8107e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8107e54:	687b      	ldr	r3, [r7, #4]
 8107e56:	2201      	movs	r2, #1
 8107e58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8107e5c:	687b      	ldr	r3, [r7, #4]
 8107e5e:	2201      	movs	r2, #1
 8107e60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8107e64:	687b      	ldr	r3, [r7, #4]
 8107e66:	2201      	movs	r2, #1
 8107e68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8107e6c:	687b      	ldr	r3, [r7, #4]
 8107e6e:	2201      	movs	r2, #1
 8107e70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8107e74:	687b      	ldr	r3, [r7, #4]
 8107e76:	2201      	movs	r2, #1
 8107e78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8107e7c:	687b      	ldr	r3, [r7, #4]
 8107e7e:	2201      	movs	r2, #1
 8107e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8107e84:	2300      	movs	r3, #0
}
 8107e86:	4618      	mov	r0, r3
 8107e88:	3708      	adds	r7, #8
 8107e8a:	46bd      	mov	sp, r7
 8107e8c:	bd80      	pop	{r7, pc}

08107e8e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8107e8e:	b580      	push	{r7, lr}
 8107e90:	b082      	sub	sp, #8
 8107e92:	af00      	add	r7, sp, #0
 8107e94:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8107e96:	687b      	ldr	r3, [r7, #4]
 8107e98:	2b00      	cmp	r3, #0
 8107e9a:	d101      	bne.n	8107ea0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8107e9c:	2301      	movs	r3, #1
 8107e9e:	e049      	b.n	8107f34 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8107ea0:	687b      	ldr	r3, [r7, #4]
 8107ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8107ea6:	b2db      	uxtb	r3, r3
 8107ea8:	2b00      	cmp	r3, #0
 8107eaa:	d106      	bne.n	8107eba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8107eac:	687b      	ldr	r3, [r7, #4]
 8107eae:	2200      	movs	r2, #0
 8107eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8107eb4:	6878      	ldr	r0, [r7, #4]
 8107eb6:	f000 f841 	bl	8107f3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8107eba:	687b      	ldr	r3, [r7, #4]
 8107ebc:	2202      	movs	r2, #2
 8107ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8107ec2:	687b      	ldr	r3, [r7, #4]
 8107ec4:	681a      	ldr	r2, [r3, #0]
 8107ec6:	687b      	ldr	r3, [r7, #4]
 8107ec8:	3304      	adds	r3, #4
 8107eca:	4619      	mov	r1, r3
 8107ecc:	4610      	mov	r0, r2
 8107ece:	f000 fa4b 	bl	8108368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8107ed2:	687b      	ldr	r3, [r7, #4]
 8107ed4:	2201      	movs	r2, #1
 8107ed6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8107eda:	687b      	ldr	r3, [r7, #4]
 8107edc:	2201      	movs	r2, #1
 8107ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8107ee2:	687b      	ldr	r3, [r7, #4]
 8107ee4:	2201      	movs	r2, #1
 8107ee6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8107eea:	687b      	ldr	r3, [r7, #4]
 8107eec:	2201      	movs	r2, #1
 8107eee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8107ef2:	687b      	ldr	r3, [r7, #4]
 8107ef4:	2201      	movs	r2, #1
 8107ef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8107efa:	687b      	ldr	r3, [r7, #4]
 8107efc:	2201      	movs	r2, #1
 8107efe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8107f02:	687b      	ldr	r3, [r7, #4]
 8107f04:	2201      	movs	r2, #1
 8107f06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8107f0a:	687b      	ldr	r3, [r7, #4]
 8107f0c:	2201      	movs	r2, #1
 8107f0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8107f12:	687b      	ldr	r3, [r7, #4]
 8107f14:	2201      	movs	r2, #1
 8107f16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8107f1a:	687b      	ldr	r3, [r7, #4]
 8107f1c:	2201      	movs	r2, #1
 8107f1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8107f22:	687b      	ldr	r3, [r7, #4]
 8107f24:	2201      	movs	r2, #1
 8107f26:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8107f2a:	687b      	ldr	r3, [r7, #4]
 8107f2c:	2201      	movs	r2, #1
 8107f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8107f32:	2300      	movs	r3, #0
}
 8107f34:	4618      	mov	r0, r3
 8107f36:	3708      	adds	r7, #8
 8107f38:	46bd      	mov	sp, r7
 8107f3a:	bd80      	pop	{r7, pc}

08107f3c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8107f3c:	b480      	push	{r7}
 8107f3e:	b083      	sub	sp, #12
 8107f40:	af00      	add	r7, sp, #0
 8107f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8107f44:	bf00      	nop
 8107f46:	370c      	adds	r7, #12
 8107f48:	46bd      	mov	sp, r7
 8107f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107f4e:	4770      	bx	lr

08107f50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8107f50:	b580      	push	{r7, lr}
 8107f52:	b086      	sub	sp, #24
 8107f54:	af00      	add	r7, sp, #0
 8107f56:	60f8      	str	r0, [r7, #12]
 8107f58:	60b9      	str	r1, [r7, #8]
 8107f5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8107f5c:	2300      	movs	r3, #0
 8107f5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8107f60:	68fb      	ldr	r3, [r7, #12]
 8107f62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8107f66:	2b01      	cmp	r3, #1
 8107f68:	d101      	bne.n	8107f6e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8107f6a:	2302      	movs	r3, #2
 8107f6c:	e0ff      	b.n	810816e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8107f6e:	68fb      	ldr	r3, [r7, #12]
 8107f70:	2201      	movs	r2, #1
 8107f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8107f76:	687b      	ldr	r3, [r7, #4]
 8107f78:	2b14      	cmp	r3, #20
 8107f7a:	f200 80f0 	bhi.w	810815e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8107f7e:	a201      	add	r2, pc, #4	; (adr r2, 8107f84 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8107f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107f84:	08107fd9 	.word	0x08107fd9
 8107f88:	0810815f 	.word	0x0810815f
 8107f8c:	0810815f 	.word	0x0810815f
 8107f90:	0810815f 	.word	0x0810815f
 8107f94:	08108019 	.word	0x08108019
 8107f98:	0810815f 	.word	0x0810815f
 8107f9c:	0810815f 	.word	0x0810815f
 8107fa0:	0810815f 	.word	0x0810815f
 8107fa4:	0810805b 	.word	0x0810805b
 8107fa8:	0810815f 	.word	0x0810815f
 8107fac:	0810815f 	.word	0x0810815f
 8107fb0:	0810815f 	.word	0x0810815f
 8107fb4:	0810809b 	.word	0x0810809b
 8107fb8:	0810815f 	.word	0x0810815f
 8107fbc:	0810815f 	.word	0x0810815f
 8107fc0:	0810815f 	.word	0x0810815f
 8107fc4:	081080dd 	.word	0x081080dd
 8107fc8:	0810815f 	.word	0x0810815f
 8107fcc:	0810815f 	.word	0x0810815f
 8107fd0:	0810815f 	.word	0x0810815f
 8107fd4:	0810811d 	.word	0x0810811d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8107fd8:	68fb      	ldr	r3, [r7, #12]
 8107fda:	681b      	ldr	r3, [r3, #0]
 8107fdc:	68b9      	ldr	r1, [r7, #8]
 8107fde:	4618      	mov	r0, r3
 8107fe0:	f000 fa5c 	bl	810849c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8107fe4:	68fb      	ldr	r3, [r7, #12]
 8107fe6:	681b      	ldr	r3, [r3, #0]
 8107fe8:	699a      	ldr	r2, [r3, #24]
 8107fea:	68fb      	ldr	r3, [r7, #12]
 8107fec:	681b      	ldr	r3, [r3, #0]
 8107fee:	f042 0208 	orr.w	r2, r2, #8
 8107ff2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8107ff4:	68fb      	ldr	r3, [r7, #12]
 8107ff6:	681b      	ldr	r3, [r3, #0]
 8107ff8:	699a      	ldr	r2, [r3, #24]
 8107ffa:	68fb      	ldr	r3, [r7, #12]
 8107ffc:	681b      	ldr	r3, [r3, #0]
 8107ffe:	f022 0204 	bic.w	r2, r2, #4
 8108002:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8108004:	68fb      	ldr	r3, [r7, #12]
 8108006:	681b      	ldr	r3, [r3, #0]
 8108008:	6999      	ldr	r1, [r3, #24]
 810800a:	68bb      	ldr	r3, [r7, #8]
 810800c:	691a      	ldr	r2, [r3, #16]
 810800e:	68fb      	ldr	r3, [r7, #12]
 8108010:	681b      	ldr	r3, [r3, #0]
 8108012:	430a      	orrs	r2, r1
 8108014:	619a      	str	r2, [r3, #24]
      break;
 8108016:	e0a5      	b.n	8108164 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8108018:	68fb      	ldr	r3, [r7, #12]
 810801a:	681b      	ldr	r3, [r3, #0]
 810801c:	68b9      	ldr	r1, [r7, #8]
 810801e:	4618      	mov	r0, r3
 8108020:	f000 facc 	bl	81085bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8108024:	68fb      	ldr	r3, [r7, #12]
 8108026:	681b      	ldr	r3, [r3, #0]
 8108028:	699a      	ldr	r2, [r3, #24]
 810802a:	68fb      	ldr	r3, [r7, #12]
 810802c:	681b      	ldr	r3, [r3, #0]
 810802e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8108032:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8108034:	68fb      	ldr	r3, [r7, #12]
 8108036:	681b      	ldr	r3, [r3, #0]
 8108038:	699a      	ldr	r2, [r3, #24]
 810803a:	68fb      	ldr	r3, [r7, #12]
 810803c:	681b      	ldr	r3, [r3, #0]
 810803e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8108042:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8108044:	68fb      	ldr	r3, [r7, #12]
 8108046:	681b      	ldr	r3, [r3, #0]
 8108048:	6999      	ldr	r1, [r3, #24]
 810804a:	68bb      	ldr	r3, [r7, #8]
 810804c:	691b      	ldr	r3, [r3, #16]
 810804e:	021a      	lsls	r2, r3, #8
 8108050:	68fb      	ldr	r3, [r7, #12]
 8108052:	681b      	ldr	r3, [r3, #0]
 8108054:	430a      	orrs	r2, r1
 8108056:	619a      	str	r2, [r3, #24]
      break;
 8108058:	e084      	b.n	8108164 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 810805a:	68fb      	ldr	r3, [r7, #12]
 810805c:	681b      	ldr	r3, [r3, #0]
 810805e:	68b9      	ldr	r1, [r7, #8]
 8108060:	4618      	mov	r0, r3
 8108062:	f000 fb35 	bl	81086d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8108066:	68fb      	ldr	r3, [r7, #12]
 8108068:	681b      	ldr	r3, [r3, #0]
 810806a:	69da      	ldr	r2, [r3, #28]
 810806c:	68fb      	ldr	r3, [r7, #12]
 810806e:	681b      	ldr	r3, [r3, #0]
 8108070:	f042 0208 	orr.w	r2, r2, #8
 8108074:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8108076:	68fb      	ldr	r3, [r7, #12]
 8108078:	681b      	ldr	r3, [r3, #0]
 810807a:	69da      	ldr	r2, [r3, #28]
 810807c:	68fb      	ldr	r3, [r7, #12]
 810807e:	681b      	ldr	r3, [r3, #0]
 8108080:	f022 0204 	bic.w	r2, r2, #4
 8108084:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8108086:	68fb      	ldr	r3, [r7, #12]
 8108088:	681b      	ldr	r3, [r3, #0]
 810808a:	69d9      	ldr	r1, [r3, #28]
 810808c:	68bb      	ldr	r3, [r7, #8]
 810808e:	691a      	ldr	r2, [r3, #16]
 8108090:	68fb      	ldr	r3, [r7, #12]
 8108092:	681b      	ldr	r3, [r3, #0]
 8108094:	430a      	orrs	r2, r1
 8108096:	61da      	str	r2, [r3, #28]
      break;
 8108098:	e064      	b.n	8108164 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 810809a:	68fb      	ldr	r3, [r7, #12]
 810809c:	681b      	ldr	r3, [r3, #0]
 810809e:	68b9      	ldr	r1, [r7, #8]
 81080a0:	4618      	mov	r0, r3
 81080a2:	f000 fb9d 	bl	81087e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 81080a6:	68fb      	ldr	r3, [r7, #12]
 81080a8:	681b      	ldr	r3, [r3, #0]
 81080aa:	69da      	ldr	r2, [r3, #28]
 81080ac:	68fb      	ldr	r3, [r7, #12]
 81080ae:	681b      	ldr	r3, [r3, #0]
 81080b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81080b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 81080b6:	68fb      	ldr	r3, [r7, #12]
 81080b8:	681b      	ldr	r3, [r3, #0]
 81080ba:	69da      	ldr	r2, [r3, #28]
 81080bc:	68fb      	ldr	r3, [r7, #12]
 81080be:	681b      	ldr	r3, [r3, #0]
 81080c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 81080c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 81080c6:	68fb      	ldr	r3, [r7, #12]
 81080c8:	681b      	ldr	r3, [r3, #0]
 81080ca:	69d9      	ldr	r1, [r3, #28]
 81080cc:	68bb      	ldr	r3, [r7, #8]
 81080ce:	691b      	ldr	r3, [r3, #16]
 81080d0:	021a      	lsls	r2, r3, #8
 81080d2:	68fb      	ldr	r3, [r7, #12]
 81080d4:	681b      	ldr	r3, [r3, #0]
 81080d6:	430a      	orrs	r2, r1
 81080d8:	61da      	str	r2, [r3, #28]
      break;
 81080da:	e043      	b.n	8108164 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 81080dc:	68fb      	ldr	r3, [r7, #12]
 81080de:	681b      	ldr	r3, [r3, #0]
 81080e0:	68b9      	ldr	r1, [r7, #8]
 81080e2:	4618      	mov	r0, r3
 81080e4:	f000 fbe6 	bl	81088b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 81080e8:	68fb      	ldr	r3, [r7, #12]
 81080ea:	681b      	ldr	r3, [r3, #0]
 81080ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 81080ee:	68fb      	ldr	r3, [r7, #12]
 81080f0:	681b      	ldr	r3, [r3, #0]
 81080f2:	f042 0208 	orr.w	r2, r2, #8
 81080f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 81080f8:	68fb      	ldr	r3, [r7, #12]
 81080fa:	681b      	ldr	r3, [r3, #0]
 81080fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 81080fe:	68fb      	ldr	r3, [r7, #12]
 8108100:	681b      	ldr	r3, [r3, #0]
 8108102:	f022 0204 	bic.w	r2, r2, #4
 8108106:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8108108:	68fb      	ldr	r3, [r7, #12]
 810810a:	681b      	ldr	r3, [r3, #0]
 810810c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 810810e:	68bb      	ldr	r3, [r7, #8]
 8108110:	691a      	ldr	r2, [r3, #16]
 8108112:	68fb      	ldr	r3, [r7, #12]
 8108114:	681b      	ldr	r3, [r3, #0]
 8108116:	430a      	orrs	r2, r1
 8108118:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 810811a:	e023      	b.n	8108164 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 810811c:	68fb      	ldr	r3, [r7, #12]
 810811e:	681b      	ldr	r3, [r3, #0]
 8108120:	68b9      	ldr	r1, [r7, #8]
 8108122:	4618      	mov	r0, r3
 8108124:	f000 fc2a 	bl	810897c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8108128:	68fb      	ldr	r3, [r7, #12]
 810812a:	681b      	ldr	r3, [r3, #0]
 810812c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810812e:	68fb      	ldr	r3, [r7, #12]
 8108130:	681b      	ldr	r3, [r3, #0]
 8108132:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8108136:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8108138:	68fb      	ldr	r3, [r7, #12]
 810813a:	681b      	ldr	r3, [r3, #0]
 810813c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810813e:	68fb      	ldr	r3, [r7, #12]
 8108140:	681b      	ldr	r3, [r3, #0]
 8108142:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8108146:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8108148:	68fb      	ldr	r3, [r7, #12]
 810814a:	681b      	ldr	r3, [r3, #0]
 810814c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 810814e:	68bb      	ldr	r3, [r7, #8]
 8108150:	691b      	ldr	r3, [r3, #16]
 8108152:	021a      	lsls	r2, r3, #8
 8108154:	68fb      	ldr	r3, [r7, #12]
 8108156:	681b      	ldr	r3, [r3, #0]
 8108158:	430a      	orrs	r2, r1
 810815a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 810815c:	e002      	b.n	8108164 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 810815e:	2301      	movs	r3, #1
 8108160:	75fb      	strb	r3, [r7, #23]
      break;
 8108162:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8108164:	68fb      	ldr	r3, [r7, #12]
 8108166:	2200      	movs	r2, #0
 8108168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 810816c:	7dfb      	ldrb	r3, [r7, #23]
}
 810816e:	4618      	mov	r0, r3
 8108170:	3718      	adds	r7, #24
 8108172:	46bd      	mov	sp, r7
 8108174:	bd80      	pop	{r7, pc}
 8108176:	bf00      	nop

08108178 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8108178:	b580      	push	{r7, lr}
 810817a:	b084      	sub	sp, #16
 810817c:	af00      	add	r7, sp, #0
 810817e:	6078      	str	r0, [r7, #4]
 8108180:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8108182:	2300      	movs	r3, #0
 8108184:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8108186:	687b      	ldr	r3, [r7, #4]
 8108188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 810818c:	2b01      	cmp	r3, #1
 810818e:	d101      	bne.n	8108194 <HAL_TIM_ConfigClockSource+0x1c>
 8108190:	2302      	movs	r3, #2
 8108192:	e0de      	b.n	8108352 <HAL_TIM_ConfigClockSource+0x1da>
 8108194:	687b      	ldr	r3, [r7, #4]
 8108196:	2201      	movs	r2, #1
 8108198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 810819c:	687b      	ldr	r3, [r7, #4]
 810819e:	2202      	movs	r2, #2
 81081a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 81081a4:	687b      	ldr	r3, [r7, #4]
 81081a6:	681b      	ldr	r3, [r3, #0]
 81081a8:	689b      	ldr	r3, [r3, #8]
 81081aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 81081ac:	68bb      	ldr	r3, [r7, #8]
 81081ae:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 81081b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 81081b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 81081b8:	68bb      	ldr	r3, [r7, #8]
 81081ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81081be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 81081c0:	687b      	ldr	r3, [r7, #4]
 81081c2:	681b      	ldr	r3, [r3, #0]
 81081c4:	68ba      	ldr	r2, [r7, #8]
 81081c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 81081c8:	683b      	ldr	r3, [r7, #0]
 81081ca:	681b      	ldr	r3, [r3, #0]
 81081cc:	4a63      	ldr	r2, [pc, #396]	; (810835c <HAL_TIM_ConfigClockSource+0x1e4>)
 81081ce:	4293      	cmp	r3, r2
 81081d0:	f000 80a9 	beq.w	8108326 <HAL_TIM_ConfigClockSource+0x1ae>
 81081d4:	4a61      	ldr	r2, [pc, #388]	; (810835c <HAL_TIM_ConfigClockSource+0x1e4>)
 81081d6:	4293      	cmp	r3, r2
 81081d8:	f200 80ae 	bhi.w	8108338 <HAL_TIM_ConfigClockSource+0x1c0>
 81081dc:	4a60      	ldr	r2, [pc, #384]	; (8108360 <HAL_TIM_ConfigClockSource+0x1e8>)
 81081de:	4293      	cmp	r3, r2
 81081e0:	f000 80a1 	beq.w	8108326 <HAL_TIM_ConfigClockSource+0x1ae>
 81081e4:	4a5e      	ldr	r2, [pc, #376]	; (8108360 <HAL_TIM_ConfigClockSource+0x1e8>)
 81081e6:	4293      	cmp	r3, r2
 81081e8:	f200 80a6 	bhi.w	8108338 <HAL_TIM_ConfigClockSource+0x1c0>
 81081ec:	4a5d      	ldr	r2, [pc, #372]	; (8108364 <HAL_TIM_ConfigClockSource+0x1ec>)
 81081ee:	4293      	cmp	r3, r2
 81081f0:	f000 8099 	beq.w	8108326 <HAL_TIM_ConfigClockSource+0x1ae>
 81081f4:	4a5b      	ldr	r2, [pc, #364]	; (8108364 <HAL_TIM_ConfigClockSource+0x1ec>)
 81081f6:	4293      	cmp	r3, r2
 81081f8:	f200 809e 	bhi.w	8108338 <HAL_TIM_ConfigClockSource+0x1c0>
 81081fc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8108200:	f000 8091 	beq.w	8108326 <HAL_TIM_ConfigClockSource+0x1ae>
 8108204:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8108208:	f200 8096 	bhi.w	8108338 <HAL_TIM_ConfigClockSource+0x1c0>
 810820c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8108210:	f000 8089 	beq.w	8108326 <HAL_TIM_ConfigClockSource+0x1ae>
 8108214:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8108218:	f200 808e 	bhi.w	8108338 <HAL_TIM_ConfigClockSource+0x1c0>
 810821c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8108220:	d03e      	beq.n	81082a0 <HAL_TIM_ConfigClockSource+0x128>
 8108222:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8108226:	f200 8087 	bhi.w	8108338 <HAL_TIM_ConfigClockSource+0x1c0>
 810822a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810822e:	f000 8086 	beq.w	810833e <HAL_TIM_ConfigClockSource+0x1c6>
 8108232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8108236:	d87f      	bhi.n	8108338 <HAL_TIM_ConfigClockSource+0x1c0>
 8108238:	2b70      	cmp	r3, #112	; 0x70
 810823a:	d01a      	beq.n	8108272 <HAL_TIM_ConfigClockSource+0xfa>
 810823c:	2b70      	cmp	r3, #112	; 0x70
 810823e:	d87b      	bhi.n	8108338 <HAL_TIM_ConfigClockSource+0x1c0>
 8108240:	2b60      	cmp	r3, #96	; 0x60
 8108242:	d050      	beq.n	81082e6 <HAL_TIM_ConfigClockSource+0x16e>
 8108244:	2b60      	cmp	r3, #96	; 0x60
 8108246:	d877      	bhi.n	8108338 <HAL_TIM_ConfigClockSource+0x1c0>
 8108248:	2b50      	cmp	r3, #80	; 0x50
 810824a:	d03c      	beq.n	81082c6 <HAL_TIM_ConfigClockSource+0x14e>
 810824c:	2b50      	cmp	r3, #80	; 0x50
 810824e:	d873      	bhi.n	8108338 <HAL_TIM_ConfigClockSource+0x1c0>
 8108250:	2b40      	cmp	r3, #64	; 0x40
 8108252:	d058      	beq.n	8108306 <HAL_TIM_ConfigClockSource+0x18e>
 8108254:	2b40      	cmp	r3, #64	; 0x40
 8108256:	d86f      	bhi.n	8108338 <HAL_TIM_ConfigClockSource+0x1c0>
 8108258:	2b30      	cmp	r3, #48	; 0x30
 810825a:	d064      	beq.n	8108326 <HAL_TIM_ConfigClockSource+0x1ae>
 810825c:	2b30      	cmp	r3, #48	; 0x30
 810825e:	d86b      	bhi.n	8108338 <HAL_TIM_ConfigClockSource+0x1c0>
 8108260:	2b20      	cmp	r3, #32
 8108262:	d060      	beq.n	8108326 <HAL_TIM_ConfigClockSource+0x1ae>
 8108264:	2b20      	cmp	r3, #32
 8108266:	d867      	bhi.n	8108338 <HAL_TIM_ConfigClockSource+0x1c0>
 8108268:	2b00      	cmp	r3, #0
 810826a:	d05c      	beq.n	8108326 <HAL_TIM_ConfigClockSource+0x1ae>
 810826c:	2b10      	cmp	r3, #16
 810826e:	d05a      	beq.n	8108326 <HAL_TIM_ConfigClockSource+0x1ae>
 8108270:	e062      	b.n	8108338 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8108272:	687b      	ldr	r3, [r7, #4]
 8108274:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8108276:	683b      	ldr	r3, [r7, #0]
 8108278:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 810827a:	683b      	ldr	r3, [r7, #0]
 810827c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 810827e:	683b      	ldr	r3, [r7, #0]
 8108280:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8108282:	f000 fc5d 	bl	8108b40 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8108286:	687b      	ldr	r3, [r7, #4]
 8108288:	681b      	ldr	r3, [r3, #0]
 810828a:	689b      	ldr	r3, [r3, #8]
 810828c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 810828e:	68bb      	ldr	r3, [r7, #8]
 8108290:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8108294:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8108296:	687b      	ldr	r3, [r7, #4]
 8108298:	681b      	ldr	r3, [r3, #0]
 810829a:	68ba      	ldr	r2, [r7, #8]
 810829c:	609a      	str	r2, [r3, #8]
      break;
 810829e:	e04f      	b.n	8108340 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 81082a0:	687b      	ldr	r3, [r7, #4]
 81082a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 81082a4:	683b      	ldr	r3, [r7, #0]
 81082a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 81082a8:	683b      	ldr	r3, [r7, #0]
 81082aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 81082ac:	683b      	ldr	r3, [r7, #0]
 81082ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 81082b0:	f000 fc46 	bl	8108b40 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 81082b4:	687b      	ldr	r3, [r7, #4]
 81082b6:	681b      	ldr	r3, [r3, #0]
 81082b8:	689a      	ldr	r2, [r3, #8]
 81082ba:	687b      	ldr	r3, [r7, #4]
 81082bc:	681b      	ldr	r3, [r3, #0]
 81082be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 81082c2:	609a      	str	r2, [r3, #8]
      break;
 81082c4:	e03c      	b.n	8108340 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 81082c6:	687b      	ldr	r3, [r7, #4]
 81082c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 81082ca:	683b      	ldr	r3, [r7, #0]
 81082cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 81082ce:	683b      	ldr	r3, [r7, #0]
 81082d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 81082d2:	461a      	mov	r2, r3
 81082d4:	f000 fbb8 	bl	8108a48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 81082d8:	687b      	ldr	r3, [r7, #4]
 81082da:	681b      	ldr	r3, [r3, #0]
 81082dc:	2150      	movs	r1, #80	; 0x50
 81082de:	4618      	mov	r0, r3
 81082e0:	f000 fc11 	bl	8108b06 <TIM_ITRx_SetConfig>
      break;
 81082e4:	e02c      	b.n	8108340 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 81082e6:	687b      	ldr	r3, [r7, #4]
 81082e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 81082ea:	683b      	ldr	r3, [r7, #0]
 81082ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 81082ee:	683b      	ldr	r3, [r7, #0]
 81082f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 81082f2:	461a      	mov	r2, r3
 81082f4:	f000 fbd7 	bl	8108aa6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 81082f8:	687b      	ldr	r3, [r7, #4]
 81082fa:	681b      	ldr	r3, [r3, #0]
 81082fc:	2160      	movs	r1, #96	; 0x60
 81082fe:	4618      	mov	r0, r3
 8108300:	f000 fc01 	bl	8108b06 <TIM_ITRx_SetConfig>
      break;
 8108304:	e01c      	b.n	8108340 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8108306:	687b      	ldr	r3, [r7, #4]
 8108308:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 810830a:	683b      	ldr	r3, [r7, #0]
 810830c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 810830e:	683b      	ldr	r3, [r7, #0]
 8108310:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8108312:	461a      	mov	r2, r3
 8108314:	f000 fb98 	bl	8108a48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8108318:	687b      	ldr	r3, [r7, #4]
 810831a:	681b      	ldr	r3, [r3, #0]
 810831c:	2140      	movs	r1, #64	; 0x40
 810831e:	4618      	mov	r0, r3
 8108320:	f000 fbf1 	bl	8108b06 <TIM_ITRx_SetConfig>
      break;
 8108324:	e00c      	b.n	8108340 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8108326:	687b      	ldr	r3, [r7, #4]
 8108328:	681a      	ldr	r2, [r3, #0]
 810832a:	683b      	ldr	r3, [r7, #0]
 810832c:	681b      	ldr	r3, [r3, #0]
 810832e:	4619      	mov	r1, r3
 8108330:	4610      	mov	r0, r2
 8108332:	f000 fbe8 	bl	8108b06 <TIM_ITRx_SetConfig>
      break;
 8108336:	e003      	b.n	8108340 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8108338:	2301      	movs	r3, #1
 810833a:	73fb      	strb	r3, [r7, #15]
      break;
 810833c:	e000      	b.n	8108340 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 810833e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8108340:	687b      	ldr	r3, [r7, #4]
 8108342:	2201      	movs	r2, #1
 8108344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8108348:	687b      	ldr	r3, [r7, #4]
 810834a:	2200      	movs	r2, #0
 810834c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8108350:	7bfb      	ldrb	r3, [r7, #15]
}
 8108352:	4618      	mov	r0, r3
 8108354:	3710      	adds	r7, #16
 8108356:	46bd      	mov	sp, r7
 8108358:	bd80      	pop	{r7, pc}
 810835a:	bf00      	nop
 810835c:	00100040 	.word	0x00100040
 8108360:	00100030 	.word	0x00100030
 8108364:	00100020 	.word	0x00100020

08108368 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8108368:	b480      	push	{r7}
 810836a:	b085      	sub	sp, #20
 810836c:	af00      	add	r7, sp, #0
 810836e:	6078      	str	r0, [r7, #4]
 8108370:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8108372:	687b      	ldr	r3, [r7, #4]
 8108374:	681b      	ldr	r3, [r3, #0]
 8108376:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8108378:	687b      	ldr	r3, [r7, #4]
 810837a:	4a40      	ldr	r2, [pc, #256]	; (810847c <TIM_Base_SetConfig+0x114>)
 810837c:	4293      	cmp	r3, r2
 810837e:	d013      	beq.n	81083a8 <TIM_Base_SetConfig+0x40>
 8108380:	687b      	ldr	r3, [r7, #4]
 8108382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8108386:	d00f      	beq.n	81083a8 <TIM_Base_SetConfig+0x40>
 8108388:	687b      	ldr	r3, [r7, #4]
 810838a:	4a3d      	ldr	r2, [pc, #244]	; (8108480 <TIM_Base_SetConfig+0x118>)
 810838c:	4293      	cmp	r3, r2
 810838e:	d00b      	beq.n	81083a8 <TIM_Base_SetConfig+0x40>
 8108390:	687b      	ldr	r3, [r7, #4]
 8108392:	4a3c      	ldr	r2, [pc, #240]	; (8108484 <TIM_Base_SetConfig+0x11c>)
 8108394:	4293      	cmp	r3, r2
 8108396:	d007      	beq.n	81083a8 <TIM_Base_SetConfig+0x40>
 8108398:	687b      	ldr	r3, [r7, #4]
 810839a:	4a3b      	ldr	r2, [pc, #236]	; (8108488 <TIM_Base_SetConfig+0x120>)
 810839c:	4293      	cmp	r3, r2
 810839e:	d003      	beq.n	81083a8 <TIM_Base_SetConfig+0x40>
 81083a0:	687b      	ldr	r3, [r7, #4]
 81083a2:	4a3a      	ldr	r2, [pc, #232]	; (810848c <TIM_Base_SetConfig+0x124>)
 81083a4:	4293      	cmp	r3, r2
 81083a6:	d108      	bne.n	81083ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 81083a8:	68fb      	ldr	r3, [r7, #12]
 81083aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81083ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 81083b0:	683b      	ldr	r3, [r7, #0]
 81083b2:	685b      	ldr	r3, [r3, #4]
 81083b4:	68fa      	ldr	r2, [r7, #12]
 81083b6:	4313      	orrs	r3, r2
 81083b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 81083ba:	687b      	ldr	r3, [r7, #4]
 81083bc:	4a2f      	ldr	r2, [pc, #188]	; (810847c <TIM_Base_SetConfig+0x114>)
 81083be:	4293      	cmp	r3, r2
 81083c0:	d01f      	beq.n	8108402 <TIM_Base_SetConfig+0x9a>
 81083c2:	687b      	ldr	r3, [r7, #4]
 81083c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81083c8:	d01b      	beq.n	8108402 <TIM_Base_SetConfig+0x9a>
 81083ca:	687b      	ldr	r3, [r7, #4]
 81083cc:	4a2c      	ldr	r2, [pc, #176]	; (8108480 <TIM_Base_SetConfig+0x118>)
 81083ce:	4293      	cmp	r3, r2
 81083d0:	d017      	beq.n	8108402 <TIM_Base_SetConfig+0x9a>
 81083d2:	687b      	ldr	r3, [r7, #4]
 81083d4:	4a2b      	ldr	r2, [pc, #172]	; (8108484 <TIM_Base_SetConfig+0x11c>)
 81083d6:	4293      	cmp	r3, r2
 81083d8:	d013      	beq.n	8108402 <TIM_Base_SetConfig+0x9a>
 81083da:	687b      	ldr	r3, [r7, #4]
 81083dc:	4a2a      	ldr	r2, [pc, #168]	; (8108488 <TIM_Base_SetConfig+0x120>)
 81083de:	4293      	cmp	r3, r2
 81083e0:	d00f      	beq.n	8108402 <TIM_Base_SetConfig+0x9a>
 81083e2:	687b      	ldr	r3, [r7, #4]
 81083e4:	4a29      	ldr	r2, [pc, #164]	; (810848c <TIM_Base_SetConfig+0x124>)
 81083e6:	4293      	cmp	r3, r2
 81083e8:	d00b      	beq.n	8108402 <TIM_Base_SetConfig+0x9a>
 81083ea:	687b      	ldr	r3, [r7, #4]
 81083ec:	4a28      	ldr	r2, [pc, #160]	; (8108490 <TIM_Base_SetConfig+0x128>)
 81083ee:	4293      	cmp	r3, r2
 81083f0:	d007      	beq.n	8108402 <TIM_Base_SetConfig+0x9a>
 81083f2:	687b      	ldr	r3, [r7, #4]
 81083f4:	4a27      	ldr	r2, [pc, #156]	; (8108494 <TIM_Base_SetConfig+0x12c>)
 81083f6:	4293      	cmp	r3, r2
 81083f8:	d003      	beq.n	8108402 <TIM_Base_SetConfig+0x9a>
 81083fa:	687b      	ldr	r3, [r7, #4]
 81083fc:	4a26      	ldr	r2, [pc, #152]	; (8108498 <TIM_Base_SetConfig+0x130>)
 81083fe:	4293      	cmp	r3, r2
 8108400:	d108      	bne.n	8108414 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8108402:	68fb      	ldr	r3, [r7, #12]
 8108404:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8108408:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810840a:	683b      	ldr	r3, [r7, #0]
 810840c:	68db      	ldr	r3, [r3, #12]
 810840e:	68fa      	ldr	r2, [r7, #12]
 8108410:	4313      	orrs	r3, r2
 8108412:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8108414:	68fb      	ldr	r3, [r7, #12]
 8108416:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 810841a:	683b      	ldr	r3, [r7, #0]
 810841c:	695b      	ldr	r3, [r3, #20]
 810841e:	4313      	orrs	r3, r2
 8108420:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8108422:	687b      	ldr	r3, [r7, #4]
 8108424:	68fa      	ldr	r2, [r7, #12]
 8108426:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8108428:	683b      	ldr	r3, [r7, #0]
 810842a:	689a      	ldr	r2, [r3, #8]
 810842c:	687b      	ldr	r3, [r7, #4]
 810842e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8108430:	683b      	ldr	r3, [r7, #0]
 8108432:	681a      	ldr	r2, [r3, #0]
 8108434:	687b      	ldr	r3, [r7, #4]
 8108436:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8108438:	687b      	ldr	r3, [r7, #4]
 810843a:	4a10      	ldr	r2, [pc, #64]	; (810847c <TIM_Base_SetConfig+0x114>)
 810843c:	4293      	cmp	r3, r2
 810843e:	d00f      	beq.n	8108460 <TIM_Base_SetConfig+0xf8>
 8108440:	687b      	ldr	r3, [r7, #4]
 8108442:	4a12      	ldr	r2, [pc, #72]	; (810848c <TIM_Base_SetConfig+0x124>)
 8108444:	4293      	cmp	r3, r2
 8108446:	d00b      	beq.n	8108460 <TIM_Base_SetConfig+0xf8>
 8108448:	687b      	ldr	r3, [r7, #4]
 810844a:	4a11      	ldr	r2, [pc, #68]	; (8108490 <TIM_Base_SetConfig+0x128>)
 810844c:	4293      	cmp	r3, r2
 810844e:	d007      	beq.n	8108460 <TIM_Base_SetConfig+0xf8>
 8108450:	687b      	ldr	r3, [r7, #4]
 8108452:	4a10      	ldr	r2, [pc, #64]	; (8108494 <TIM_Base_SetConfig+0x12c>)
 8108454:	4293      	cmp	r3, r2
 8108456:	d003      	beq.n	8108460 <TIM_Base_SetConfig+0xf8>
 8108458:	687b      	ldr	r3, [r7, #4]
 810845a:	4a0f      	ldr	r2, [pc, #60]	; (8108498 <TIM_Base_SetConfig+0x130>)
 810845c:	4293      	cmp	r3, r2
 810845e:	d103      	bne.n	8108468 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8108460:	683b      	ldr	r3, [r7, #0]
 8108462:	691a      	ldr	r2, [r3, #16]
 8108464:	687b      	ldr	r3, [r7, #4]
 8108466:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8108468:	687b      	ldr	r3, [r7, #4]
 810846a:	2201      	movs	r2, #1
 810846c:	615a      	str	r2, [r3, #20]
}
 810846e:	bf00      	nop
 8108470:	3714      	adds	r7, #20
 8108472:	46bd      	mov	sp, r7
 8108474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108478:	4770      	bx	lr
 810847a:	bf00      	nop
 810847c:	40010000 	.word	0x40010000
 8108480:	40000400 	.word	0x40000400
 8108484:	40000800 	.word	0x40000800
 8108488:	40000c00 	.word	0x40000c00
 810848c:	40010400 	.word	0x40010400
 8108490:	40014000 	.word	0x40014000
 8108494:	40014400 	.word	0x40014400
 8108498:	40014800 	.word	0x40014800

0810849c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810849c:	b480      	push	{r7}
 810849e:	b087      	sub	sp, #28
 81084a0:	af00      	add	r7, sp, #0
 81084a2:	6078      	str	r0, [r7, #4]
 81084a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 81084a6:	687b      	ldr	r3, [r7, #4]
 81084a8:	6a1b      	ldr	r3, [r3, #32]
 81084aa:	f023 0201 	bic.w	r2, r3, #1
 81084ae:	687b      	ldr	r3, [r7, #4]
 81084b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81084b2:	687b      	ldr	r3, [r7, #4]
 81084b4:	6a1b      	ldr	r3, [r3, #32]
 81084b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81084b8:	687b      	ldr	r3, [r7, #4]
 81084ba:	685b      	ldr	r3, [r3, #4]
 81084bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 81084be:	687b      	ldr	r3, [r7, #4]
 81084c0:	699b      	ldr	r3, [r3, #24]
 81084c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 81084c4:	68fb      	ldr	r3, [r7, #12]
 81084c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81084ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81084ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 81084d0:	68fb      	ldr	r3, [r7, #12]
 81084d2:	f023 0303 	bic.w	r3, r3, #3
 81084d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 81084d8:	683b      	ldr	r3, [r7, #0]
 81084da:	681b      	ldr	r3, [r3, #0]
 81084dc:	68fa      	ldr	r2, [r7, #12]
 81084de:	4313      	orrs	r3, r2
 81084e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 81084e2:	697b      	ldr	r3, [r7, #20]
 81084e4:	f023 0302 	bic.w	r3, r3, #2
 81084e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 81084ea:	683b      	ldr	r3, [r7, #0]
 81084ec:	689b      	ldr	r3, [r3, #8]
 81084ee:	697a      	ldr	r2, [r7, #20]
 81084f0:	4313      	orrs	r3, r2
 81084f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 81084f4:	687b      	ldr	r3, [r7, #4]
 81084f6:	4a2c      	ldr	r2, [pc, #176]	; (81085a8 <TIM_OC1_SetConfig+0x10c>)
 81084f8:	4293      	cmp	r3, r2
 81084fa:	d00f      	beq.n	810851c <TIM_OC1_SetConfig+0x80>
 81084fc:	687b      	ldr	r3, [r7, #4]
 81084fe:	4a2b      	ldr	r2, [pc, #172]	; (81085ac <TIM_OC1_SetConfig+0x110>)
 8108500:	4293      	cmp	r3, r2
 8108502:	d00b      	beq.n	810851c <TIM_OC1_SetConfig+0x80>
 8108504:	687b      	ldr	r3, [r7, #4]
 8108506:	4a2a      	ldr	r2, [pc, #168]	; (81085b0 <TIM_OC1_SetConfig+0x114>)
 8108508:	4293      	cmp	r3, r2
 810850a:	d007      	beq.n	810851c <TIM_OC1_SetConfig+0x80>
 810850c:	687b      	ldr	r3, [r7, #4]
 810850e:	4a29      	ldr	r2, [pc, #164]	; (81085b4 <TIM_OC1_SetConfig+0x118>)
 8108510:	4293      	cmp	r3, r2
 8108512:	d003      	beq.n	810851c <TIM_OC1_SetConfig+0x80>
 8108514:	687b      	ldr	r3, [r7, #4]
 8108516:	4a28      	ldr	r2, [pc, #160]	; (81085b8 <TIM_OC1_SetConfig+0x11c>)
 8108518:	4293      	cmp	r3, r2
 810851a:	d10c      	bne.n	8108536 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 810851c:	697b      	ldr	r3, [r7, #20]
 810851e:	f023 0308 	bic.w	r3, r3, #8
 8108522:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8108524:	683b      	ldr	r3, [r7, #0]
 8108526:	68db      	ldr	r3, [r3, #12]
 8108528:	697a      	ldr	r2, [r7, #20]
 810852a:	4313      	orrs	r3, r2
 810852c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 810852e:	697b      	ldr	r3, [r7, #20]
 8108530:	f023 0304 	bic.w	r3, r3, #4
 8108534:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8108536:	687b      	ldr	r3, [r7, #4]
 8108538:	4a1b      	ldr	r2, [pc, #108]	; (81085a8 <TIM_OC1_SetConfig+0x10c>)
 810853a:	4293      	cmp	r3, r2
 810853c:	d00f      	beq.n	810855e <TIM_OC1_SetConfig+0xc2>
 810853e:	687b      	ldr	r3, [r7, #4]
 8108540:	4a1a      	ldr	r2, [pc, #104]	; (81085ac <TIM_OC1_SetConfig+0x110>)
 8108542:	4293      	cmp	r3, r2
 8108544:	d00b      	beq.n	810855e <TIM_OC1_SetConfig+0xc2>
 8108546:	687b      	ldr	r3, [r7, #4]
 8108548:	4a19      	ldr	r2, [pc, #100]	; (81085b0 <TIM_OC1_SetConfig+0x114>)
 810854a:	4293      	cmp	r3, r2
 810854c:	d007      	beq.n	810855e <TIM_OC1_SetConfig+0xc2>
 810854e:	687b      	ldr	r3, [r7, #4]
 8108550:	4a18      	ldr	r2, [pc, #96]	; (81085b4 <TIM_OC1_SetConfig+0x118>)
 8108552:	4293      	cmp	r3, r2
 8108554:	d003      	beq.n	810855e <TIM_OC1_SetConfig+0xc2>
 8108556:	687b      	ldr	r3, [r7, #4]
 8108558:	4a17      	ldr	r2, [pc, #92]	; (81085b8 <TIM_OC1_SetConfig+0x11c>)
 810855a:	4293      	cmp	r3, r2
 810855c:	d111      	bne.n	8108582 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 810855e:	693b      	ldr	r3, [r7, #16]
 8108560:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8108564:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8108566:	693b      	ldr	r3, [r7, #16]
 8108568:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 810856c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 810856e:	683b      	ldr	r3, [r7, #0]
 8108570:	695b      	ldr	r3, [r3, #20]
 8108572:	693a      	ldr	r2, [r7, #16]
 8108574:	4313      	orrs	r3, r2
 8108576:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8108578:	683b      	ldr	r3, [r7, #0]
 810857a:	699b      	ldr	r3, [r3, #24]
 810857c:	693a      	ldr	r2, [r7, #16]
 810857e:	4313      	orrs	r3, r2
 8108580:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8108582:	687b      	ldr	r3, [r7, #4]
 8108584:	693a      	ldr	r2, [r7, #16]
 8108586:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8108588:	687b      	ldr	r3, [r7, #4]
 810858a:	68fa      	ldr	r2, [r7, #12]
 810858c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 810858e:	683b      	ldr	r3, [r7, #0]
 8108590:	685a      	ldr	r2, [r3, #4]
 8108592:	687b      	ldr	r3, [r7, #4]
 8108594:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8108596:	687b      	ldr	r3, [r7, #4]
 8108598:	697a      	ldr	r2, [r7, #20]
 810859a:	621a      	str	r2, [r3, #32]
}
 810859c:	bf00      	nop
 810859e:	371c      	adds	r7, #28
 81085a0:	46bd      	mov	sp, r7
 81085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81085a6:	4770      	bx	lr
 81085a8:	40010000 	.word	0x40010000
 81085ac:	40010400 	.word	0x40010400
 81085b0:	40014000 	.word	0x40014000
 81085b4:	40014400 	.word	0x40014400
 81085b8:	40014800 	.word	0x40014800

081085bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 81085bc:	b480      	push	{r7}
 81085be:	b087      	sub	sp, #28
 81085c0:	af00      	add	r7, sp, #0
 81085c2:	6078      	str	r0, [r7, #4]
 81085c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 81085c6:	687b      	ldr	r3, [r7, #4]
 81085c8:	6a1b      	ldr	r3, [r3, #32]
 81085ca:	f023 0210 	bic.w	r2, r3, #16
 81085ce:	687b      	ldr	r3, [r7, #4]
 81085d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81085d2:	687b      	ldr	r3, [r7, #4]
 81085d4:	6a1b      	ldr	r3, [r3, #32]
 81085d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81085d8:	687b      	ldr	r3, [r7, #4]
 81085da:	685b      	ldr	r3, [r3, #4]
 81085dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 81085de:	687b      	ldr	r3, [r7, #4]
 81085e0:	699b      	ldr	r3, [r3, #24]
 81085e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 81085e4:	68fb      	ldr	r3, [r7, #12]
 81085e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 81085ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 81085ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 81085f0:	68fb      	ldr	r3, [r7, #12]
 81085f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81085f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 81085f8:	683b      	ldr	r3, [r7, #0]
 81085fa:	681b      	ldr	r3, [r3, #0]
 81085fc:	021b      	lsls	r3, r3, #8
 81085fe:	68fa      	ldr	r2, [r7, #12]
 8108600:	4313      	orrs	r3, r2
 8108602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8108604:	697b      	ldr	r3, [r7, #20]
 8108606:	f023 0320 	bic.w	r3, r3, #32
 810860a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 810860c:	683b      	ldr	r3, [r7, #0]
 810860e:	689b      	ldr	r3, [r3, #8]
 8108610:	011b      	lsls	r3, r3, #4
 8108612:	697a      	ldr	r2, [r7, #20]
 8108614:	4313      	orrs	r3, r2
 8108616:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8108618:	687b      	ldr	r3, [r7, #4]
 810861a:	4a28      	ldr	r2, [pc, #160]	; (81086bc <TIM_OC2_SetConfig+0x100>)
 810861c:	4293      	cmp	r3, r2
 810861e:	d003      	beq.n	8108628 <TIM_OC2_SetConfig+0x6c>
 8108620:	687b      	ldr	r3, [r7, #4]
 8108622:	4a27      	ldr	r2, [pc, #156]	; (81086c0 <TIM_OC2_SetConfig+0x104>)
 8108624:	4293      	cmp	r3, r2
 8108626:	d10d      	bne.n	8108644 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8108628:	697b      	ldr	r3, [r7, #20]
 810862a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 810862e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8108630:	683b      	ldr	r3, [r7, #0]
 8108632:	68db      	ldr	r3, [r3, #12]
 8108634:	011b      	lsls	r3, r3, #4
 8108636:	697a      	ldr	r2, [r7, #20]
 8108638:	4313      	orrs	r3, r2
 810863a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 810863c:	697b      	ldr	r3, [r7, #20]
 810863e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8108642:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8108644:	687b      	ldr	r3, [r7, #4]
 8108646:	4a1d      	ldr	r2, [pc, #116]	; (81086bc <TIM_OC2_SetConfig+0x100>)
 8108648:	4293      	cmp	r3, r2
 810864a:	d00f      	beq.n	810866c <TIM_OC2_SetConfig+0xb0>
 810864c:	687b      	ldr	r3, [r7, #4]
 810864e:	4a1c      	ldr	r2, [pc, #112]	; (81086c0 <TIM_OC2_SetConfig+0x104>)
 8108650:	4293      	cmp	r3, r2
 8108652:	d00b      	beq.n	810866c <TIM_OC2_SetConfig+0xb0>
 8108654:	687b      	ldr	r3, [r7, #4]
 8108656:	4a1b      	ldr	r2, [pc, #108]	; (81086c4 <TIM_OC2_SetConfig+0x108>)
 8108658:	4293      	cmp	r3, r2
 810865a:	d007      	beq.n	810866c <TIM_OC2_SetConfig+0xb0>
 810865c:	687b      	ldr	r3, [r7, #4]
 810865e:	4a1a      	ldr	r2, [pc, #104]	; (81086c8 <TIM_OC2_SetConfig+0x10c>)
 8108660:	4293      	cmp	r3, r2
 8108662:	d003      	beq.n	810866c <TIM_OC2_SetConfig+0xb0>
 8108664:	687b      	ldr	r3, [r7, #4]
 8108666:	4a19      	ldr	r2, [pc, #100]	; (81086cc <TIM_OC2_SetConfig+0x110>)
 8108668:	4293      	cmp	r3, r2
 810866a:	d113      	bne.n	8108694 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 810866c:	693b      	ldr	r3, [r7, #16]
 810866e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8108672:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8108674:	693b      	ldr	r3, [r7, #16]
 8108676:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 810867a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 810867c:	683b      	ldr	r3, [r7, #0]
 810867e:	695b      	ldr	r3, [r3, #20]
 8108680:	009b      	lsls	r3, r3, #2
 8108682:	693a      	ldr	r2, [r7, #16]
 8108684:	4313      	orrs	r3, r2
 8108686:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8108688:	683b      	ldr	r3, [r7, #0]
 810868a:	699b      	ldr	r3, [r3, #24]
 810868c:	009b      	lsls	r3, r3, #2
 810868e:	693a      	ldr	r2, [r7, #16]
 8108690:	4313      	orrs	r3, r2
 8108692:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8108694:	687b      	ldr	r3, [r7, #4]
 8108696:	693a      	ldr	r2, [r7, #16]
 8108698:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 810869a:	687b      	ldr	r3, [r7, #4]
 810869c:	68fa      	ldr	r2, [r7, #12]
 810869e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 81086a0:	683b      	ldr	r3, [r7, #0]
 81086a2:	685a      	ldr	r2, [r3, #4]
 81086a4:	687b      	ldr	r3, [r7, #4]
 81086a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81086a8:	687b      	ldr	r3, [r7, #4]
 81086aa:	697a      	ldr	r2, [r7, #20]
 81086ac:	621a      	str	r2, [r3, #32]
}
 81086ae:	bf00      	nop
 81086b0:	371c      	adds	r7, #28
 81086b2:	46bd      	mov	sp, r7
 81086b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81086b8:	4770      	bx	lr
 81086ba:	bf00      	nop
 81086bc:	40010000 	.word	0x40010000
 81086c0:	40010400 	.word	0x40010400
 81086c4:	40014000 	.word	0x40014000
 81086c8:	40014400 	.word	0x40014400
 81086cc:	40014800 	.word	0x40014800

081086d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 81086d0:	b480      	push	{r7}
 81086d2:	b087      	sub	sp, #28
 81086d4:	af00      	add	r7, sp, #0
 81086d6:	6078      	str	r0, [r7, #4]
 81086d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 81086da:	687b      	ldr	r3, [r7, #4]
 81086dc:	6a1b      	ldr	r3, [r3, #32]
 81086de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 81086e2:	687b      	ldr	r3, [r7, #4]
 81086e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81086e6:	687b      	ldr	r3, [r7, #4]
 81086e8:	6a1b      	ldr	r3, [r3, #32]
 81086ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81086ec:	687b      	ldr	r3, [r7, #4]
 81086ee:	685b      	ldr	r3, [r3, #4]
 81086f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 81086f2:	687b      	ldr	r3, [r7, #4]
 81086f4:	69db      	ldr	r3, [r3, #28]
 81086f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 81086f8:	68fb      	ldr	r3, [r7, #12]
 81086fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81086fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8108702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8108704:	68fb      	ldr	r3, [r7, #12]
 8108706:	f023 0303 	bic.w	r3, r3, #3
 810870a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810870c:	683b      	ldr	r3, [r7, #0]
 810870e:	681b      	ldr	r3, [r3, #0]
 8108710:	68fa      	ldr	r2, [r7, #12]
 8108712:	4313      	orrs	r3, r2
 8108714:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8108716:	697b      	ldr	r3, [r7, #20]
 8108718:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 810871c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 810871e:	683b      	ldr	r3, [r7, #0]
 8108720:	689b      	ldr	r3, [r3, #8]
 8108722:	021b      	lsls	r3, r3, #8
 8108724:	697a      	ldr	r2, [r7, #20]
 8108726:	4313      	orrs	r3, r2
 8108728:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 810872a:	687b      	ldr	r3, [r7, #4]
 810872c:	4a27      	ldr	r2, [pc, #156]	; (81087cc <TIM_OC3_SetConfig+0xfc>)
 810872e:	4293      	cmp	r3, r2
 8108730:	d003      	beq.n	810873a <TIM_OC3_SetConfig+0x6a>
 8108732:	687b      	ldr	r3, [r7, #4]
 8108734:	4a26      	ldr	r2, [pc, #152]	; (81087d0 <TIM_OC3_SetConfig+0x100>)
 8108736:	4293      	cmp	r3, r2
 8108738:	d10d      	bne.n	8108756 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 810873a:	697b      	ldr	r3, [r7, #20]
 810873c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8108740:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8108742:	683b      	ldr	r3, [r7, #0]
 8108744:	68db      	ldr	r3, [r3, #12]
 8108746:	021b      	lsls	r3, r3, #8
 8108748:	697a      	ldr	r2, [r7, #20]
 810874a:	4313      	orrs	r3, r2
 810874c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 810874e:	697b      	ldr	r3, [r7, #20]
 8108750:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8108754:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8108756:	687b      	ldr	r3, [r7, #4]
 8108758:	4a1c      	ldr	r2, [pc, #112]	; (81087cc <TIM_OC3_SetConfig+0xfc>)
 810875a:	4293      	cmp	r3, r2
 810875c:	d00f      	beq.n	810877e <TIM_OC3_SetConfig+0xae>
 810875e:	687b      	ldr	r3, [r7, #4]
 8108760:	4a1b      	ldr	r2, [pc, #108]	; (81087d0 <TIM_OC3_SetConfig+0x100>)
 8108762:	4293      	cmp	r3, r2
 8108764:	d00b      	beq.n	810877e <TIM_OC3_SetConfig+0xae>
 8108766:	687b      	ldr	r3, [r7, #4]
 8108768:	4a1a      	ldr	r2, [pc, #104]	; (81087d4 <TIM_OC3_SetConfig+0x104>)
 810876a:	4293      	cmp	r3, r2
 810876c:	d007      	beq.n	810877e <TIM_OC3_SetConfig+0xae>
 810876e:	687b      	ldr	r3, [r7, #4]
 8108770:	4a19      	ldr	r2, [pc, #100]	; (81087d8 <TIM_OC3_SetConfig+0x108>)
 8108772:	4293      	cmp	r3, r2
 8108774:	d003      	beq.n	810877e <TIM_OC3_SetConfig+0xae>
 8108776:	687b      	ldr	r3, [r7, #4]
 8108778:	4a18      	ldr	r2, [pc, #96]	; (81087dc <TIM_OC3_SetConfig+0x10c>)
 810877a:	4293      	cmp	r3, r2
 810877c:	d113      	bne.n	81087a6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 810877e:	693b      	ldr	r3, [r7, #16]
 8108780:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8108784:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8108786:	693b      	ldr	r3, [r7, #16]
 8108788:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 810878c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 810878e:	683b      	ldr	r3, [r7, #0]
 8108790:	695b      	ldr	r3, [r3, #20]
 8108792:	011b      	lsls	r3, r3, #4
 8108794:	693a      	ldr	r2, [r7, #16]
 8108796:	4313      	orrs	r3, r2
 8108798:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 810879a:	683b      	ldr	r3, [r7, #0]
 810879c:	699b      	ldr	r3, [r3, #24]
 810879e:	011b      	lsls	r3, r3, #4
 81087a0:	693a      	ldr	r2, [r7, #16]
 81087a2:	4313      	orrs	r3, r2
 81087a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81087a6:	687b      	ldr	r3, [r7, #4]
 81087a8:	693a      	ldr	r2, [r7, #16]
 81087aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 81087ac:	687b      	ldr	r3, [r7, #4]
 81087ae:	68fa      	ldr	r2, [r7, #12]
 81087b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 81087b2:	683b      	ldr	r3, [r7, #0]
 81087b4:	685a      	ldr	r2, [r3, #4]
 81087b6:	687b      	ldr	r3, [r7, #4]
 81087b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81087ba:	687b      	ldr	r3, [r7, #4]
 81087bc:	697a      	ldr	r2, [r7, #20]
 81087be:	621a      	str	r2, [r3, #32]
}
 81087c0:	bf00      	nop
 81087c2:	371c      	adds	r7, #28
 81087c4:	46bd      	mov	sp, r7
 81087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81087ca:	4770      	bx	lr
 81087cc:	40010000 	.word	0x40010000
 81087d0:	40010400 	.word	0x40010400
 81087d4:	40014000 	.word	0x40014000
 81087d8:	40014400 	.word	0x40014400
 81087dc:	40014800 	.word	0x40014800

081087e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 81087e0:	b480      	push	{r7}
 81087e2:	b087      	sub	sp, #28
 81087e4:	af00      	add	r7, sp, #0
 81087e6:	6078      	str	r0, [r7, #4]
 81087e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 81087ea:	687b      	ldr	r3, [r7, #4]
 81087ec:	6a1b      	ldr	r3, [r3, #32]
 81087ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 81087f2:	687b      	ldr	r3, [r7, #4]
 81087f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81087f6:	687b      	ldr	r3, [r7, #4]
 81087f8:	6a1b      	ldr	r3, [r3, #32]
 81087fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81087fc:	687b      	ldr	r3, [r7, #4]
 81087fe:	685b      	ldr	r3, [r3, #4]
 8108800:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8108802:	687b      	ldr	r3, [r7, #4]
 8108804:	69db      	ldr	r3, [r3, #28]
 8108806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8108808:	68fb      	ldr	r3, [r7, #12]
 810880a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 810880e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8108812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8108814:	68fb      	ldr	r3, [r7, #12]
 8108816:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810881a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810881c:	683b      	ldr	r3, [r7, #0]
 810881e:	681b      	ldr	r3, [r3, #0]
 8108820:	021b      	lsls	r3, r3, #8
 8108822:	68fa      	ldr	r2, [r7, #12]
 8108824:	4313      	orrs	r3, r2
 8108826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8108828:	693b      	ldr	r3, [r7, #16]
 810882a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 810882e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8108830:	683b      	ldr	r3, [r7, #0]
 8108832:	689b      	ldr	r3, [r3, #8]
 8108834:	031b      	lsls	r3, r3, #12
 8108836:	693a      	ldr	r2, [r7, #16]
 8108838:	4313      	orrs	r3, r2
 810883a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810883c:	687b      	ldr	r3, [r7, #4]
 810883e:	4a18      	ldr	r2, [pc, #96]	; (81088a0 <TIM_OC4_SetConfig+0xc0>)
 8108840:	4293      	cmp	r3, r2
 8108842:	d00f      	beq.n	8108864 <TIM_OC4_SetConfig+0x84>
 8108844:	687b      	ldr	r3, [r7, #4]
 8108846:	4a17      	ldr	r2, [pc, #92]	; (81088a4 <TIM_OC4_SetConfig+0xc4>)
 8108848:	4293      	cmp	r3, r2
 810884a:	d00b      	beq.n	8108864 <TIM_OC4_SetConfig+0x84>
 810884c:	687b      	ldr	r3, [r7, #4]
 810884e:	4a16      	ldr	r2, [pc, #88]	; (81088a8 <TIM_OC4_SetConfig+0xc8>)
 8108850:	4293      	cmp	r3, r2
 8108852:	d007      	beq.n	8108864 <TIM_OC4_SetConfig+0x84>
 8108854:	687b      	ldr	r3, [r7, #4]
 8108856:	4a15      	ldr	r2, [pc, #84]	; (81088ac <TIM_OC4_SetConfig+0xcc>)
 8108858:	4293      	cmp	r3, r2
 810885a:	d003      	beq.n	8108864 <TIM_OC4_SetConfig+0x84>
 810885c:	687b      	ldr	r3, [r7, #4]
 810885e:	4a14      	ldr	r2, [pc, #80]	; (81088b0 <TIM_OC4_SetConfig+0xd0>)
 8108860:	4293      	cmp	r3, r2
 8108862:	d109      	bne.n	8108878 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8108864:	697b      	ldr	r3, [r7, #20]
 8108866:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 810886a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 810886c:	683b      	ldr	r3, [r7, #0]
 810886e:	695b      	ldr	r3, [r3, #20]
 8108870:	019b      	lsls	r3, r3, #6
 8108872:	697a      	ldr	r2, [r7, #20]
 8108874:	4313      	orrs	r3, r2
 8108876:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8108878:	687b      	ldr	r3, [r7, #4]
 810887a:	697a      	ldr	r2, [r7, #20]
 810887c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810887e:	687b      	ldr	r3, [r7, #4]
 8108880:	68fa      	ldr	r2, [r7, #12]
 8108882:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8108884:	683b      	ldr	r3, [r7, #0]
 8108886:	685a      	ldr	r2, [r3, #4]
 8108888:	687b      	ldr	r3, [r7, #4]
 810888a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810888c:	687b      	ldr	r3, [r7, #4]
 810888e:	693a      	ldr	r2, [r7, #16]
 8108890:	621a      	str	r2, [r3, #32]
}
 8108892:	bf00      	nop
 8108894:	371c      	adds	r7, #28
 8108896:	46bd      	mov	sp, r7
 8108898:	f85d 7b04 	ldr.w	r7, [sp], #4
 810889c:	4770      	bx	lr
 810889e:	bf00      	nop
 81088a0:	40010000 	.word	0x40010000
 81088a4:	40010400 	.word	0x40010400
 81088a8:	40014000 	.word	0x40014000
 81088ac:	40014400 	.word	0x40014400
 81088b0:	40014800 	.word	0x40014800

081088b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 81088b4:	b480      	push	{r7}
 81088b6:	b087      	sub	sp, #28
 81088b8:	af00      	add	r7, sp, #0
 81088ba:	6078      	str	r0, [r7, #4]
 81088bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 81088be:	687b      	ldr	r3, [r7, #4]
 81088c0:	6a1b      	ldr	r3, [r3, #32]
 81088c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 81088c6:	687b      	ldr	r3, [r7, #4]
 81088c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81088ca:	687b      	ldr	r3, [r7, #4]
 81088cc:	6a1b      	ldr	r3, [r3, #32]
 81088ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81088d0:	687b      	ldr	r3, [r7, #4]
 81088d2:	685b      	ldr	r3, [r3, #4]
 81088d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 81088d6:	687b      	ldr	r3, [r7, #4]
 81088d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81088da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 81088dc:	68fb      	ldr	r3, [r7, #12]
 81088de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81088e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81088e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 81088e8:	683b      	ldr	r3, [r7, #0]
 81088ea:	681b      	ldr	r3, [r3, #0]
 81088ec:	68fa      	ldr	r2, [r7, #12]
 81088ee:	4313      	orrs	r3, r2
 81088f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 81088f2:	693b      	ldr	r3, [r7, #16]
 81088f4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 81088f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 81088fa:	683b      	ldr	r3, [r7, #0]
 81088fc:	689b      	ldr	r3, [r3, #8]
 81088fe:	041b      	lsls	r3, r3, #16
 8108900:	693a      	ldr	r2, [r7, #16]
 8108902:	4313      	orrs	r3, r2
 8108904:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8108906:	687b      	ldr	r3, [r7, #4]
 8108908:	4a17      	ldr	r2, [pc, #92]	; (8108968 <TIM_OC5_SetConfig+0xb4>)
 810890a:	4293      	cmp	r3, r2
 810890c:	d00f      	beq.n	810892e <TIM_OC5_SetConfig+0x7a>
 810890e:	687b      	ldr	r3, [r7, #4]
 8108910:	4a16      	ldr	r2, [pc, #88]	; (810896c <TIM_OC5_SetConfig+0xb8>)
 8108912:	4293      	cmp	r3, r2
 8108914:	d00b      	beq.n	810892e <TIM_OC5_SetConfig+0x7a>
 8108916:	687b      	ldr	r3, [r7, #4]
 8108918:	4a15      	ldr	r2, [pc, #84]	; (8108970 <TIM_OC5_SetConfig+0xbc>)
 810891a:	4293      	cmp	r3, r2
 810891c:	d007      	beq.n	810892e <TIM_OC5_SetConfig+0x7a>
 810891e:	687b      	ldr	r3, [r7, #4]
 8108920:	4a14      	ldr	r2, [pc, #80]	; (8108974 <TIM_OC5_SetConfig+0xc0>)
 8108922:	4293      	cmp	r3, r2
 8108924:	d003      	beq.n	810892e <TIM_OC5_SetConfig+0x7a>
 8108926:	687b      	ldr	r3, [r7, #4]
 8108928:	4a13      	ldr	r2, [pc, #76]	; (8108978 <TIM_OC5_SetConfig+0xc4>)
 810892a:	4293      	cmp	r3, r2
 810892c:	d109      	bne.n	8108942 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 810892e:	697b      	ldr	r3, [r7, #20]
 8108930:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8108934:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8108936:	683b      	ldr	r3, [r7, #0]
 8108938:	695b      	ldr	r3, [r3, #20]
 810893a:	021b      	lsls	r3, r3, #8
 810893c:	697a      	ldr	r2, [r7, #20]
 810893e:	4313      	orrs	r3, r2
 8108940:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8108942:	687b      	ldr	r3, [r7, #4]
 8108944:	697a      	ldr	r2, [r7, #20]
 8108946:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8108948:	687b      	ldr	r3, [r7, #4]
 810894a:	68fa      	ldr	r2, [r7, #12]
 810894c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 810894e:	683b      	ldr	r3, [r7, #0]
 8108950:	685a      	ldr	r2, [r3, #4]
 8108952:	687b      	ldr	r3, [r7, #4]
 8108954:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8108956:	687b      	ldr	r3, [r7, #4]
 8108958:	693a      	ldr	r2, [r7, #16]
 810895a:	621a      	str	r2, [r3, #32]
}
 810895c:	bf00      	nop
 810895e:	371c      	adds	r7, #28
 8108960:	46bd      	mov	sp, r7
 8108962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108966:	4770      	bx	lr
 8108968:	40010000 	.word	0x40010000
 810896c:	40010400 	.word	0x40010400
 8108970:	40014000 	.word	0x40014000
 8108974:	40014400 	.word	0x40014400
 8108978:	40014800 	.word	0x40014800

0810897c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 810897c:	b480      	push	{r7}
 810897e:	b087      	sub	sp, #28
 8108980:	af00      	add	r7, sp, #0
 8108982:	6078      	str	r0, [r7, #4]
 8108984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8108986:	687b      	ldr	r3, [r7, #4]
 8108988:	6a1b      	ldr	r3, [r3, #32]
 810898a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 810898e:	687b      	ldr	r3, [r7, #4]
 8108990:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8108992:	687b      	ldr	r3, [r7, #4]
 8108994:	6a1b      	ldr	r3, [r3, #32]
 8108996:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8108998:	687b      	ldr	r3, [r7, #4]
 810899a:	685b      	ldr	r3, [r3, #4]
 810899c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810899e:	687b      	ldr	r3, [r7, #4]
 81089a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81089a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 81089a4:	68fb      	ldr	r3, [r7, #12]
 81089a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 81089aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 81089ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 81089b0:	683b      	ldr	r3, [r7, #0]
 81089b2:	681b      	ldr	r3, [r3, #0]
 81089b4:	021b      	lsls	r3, r3, #8
 81089b6:	68fa      	ldr	r2, [r7, #12]
 81089b8:	4313      	orrs	r3, r2
 81089ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 81089bc:	693b      	ldr	r3, [r7, #16]
 81089be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 81089c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 81089c4:	683b      	ldr	r3, [r7, #0]
 81089c6:	689b      	ldr	r3, [r3, #8]
 81089c8:	051b      	lsls	r3, r3, #20
 81089ca:	693a      	ldr	r2, [r7, #16]
 81089cc:	4313      	orrs	r3, r2
 81089ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81089d0:	687b      	ldr	r3, [r7, #4]
 81089d2:	4a18      	ldr	r2, [pc, #96]	; (8108a34 <TIM_OC6_SetConfig+0xb8>)
 81089d4:	4293      	cmp	r3, r2
 81089d6:	d00f      	beq.n	81089f8 <TIM_OC6_SetConfig+0x7c>
 81089d8:	687b      	ldr	r3, [r7, #4]
 81089da:	4a17      	ldr	r2, [pc, #92]	; (8108a38 <TIM_OC6_SetConfig+0xbc>)
 81089dc:	4293      	cmp	r3, r2
 81089de:	d00b      	beq.n	81089f8 <TIM_OC6_SetConfig+0x7c>
 81089e0:	687b      	ldr	r3, [r7, #4]
 81089e2:	4a16      	ldr	r2, [pc, #88]	; (8108a3c <TIM_OC6_SetConfig+0xc0>)
 81089e4:	4293      	cmp	r3, r2
 81089e6:	d007      	beq.n	81089f8 <TIM_OC6_SetConfig+0x7c>
 81089e8:	687b      	ldr	r3, [r7, #4]
 81089ea:	4a15      	ldr	r2, [pc, #84]	; (8108a40 <TIM_OC6_SetConfig+0xc4>)
 81089ec:	4293      	cmp	r3, r2
 81089ee:	d003      	beq.n	81089f8 <TIM_OC6_SetConfig+0x7c>
 81089f0:	687b      	ldr	r3, [r7, #4]
 81089f2:	4a14      	ldr	r2, [pc, #80]	; (8108a44 <TIM_OC6_SetConfig+0xc8>)
 81089f4:	4293      	cmp	r3, r2
 81089f6:	d109      	bne.n	8108a0c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 81089f8:	697b      	ldr	r3, [r7, #20]
 81089fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 81089fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8108a00:	683b      	ldr	r3, [r7, #0]
 8108a02:	695b      	ldr	r3, [r3, #20]
 8108a04:	029b      	lsls	r3, r3, #10
 8108a06:	697a      	ldr	r2, [r7, #20]
 8108a08:	4313      	orrs	r3, r2
 8108a0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8108a0c:	687b      	ldr	r3, [r7, #4]
 8108a0e:	697a      	ldr	r2, [r7, #20]
 8108a10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8108a12:	687b      	ldr	r3, [r7, #4]
 8108a14:	68fa      	ldr	r2, [r7, #12]
 8108a16:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8108a18:	683b      	ldr	r3, [r7, #0]
 8108a1a:	685a      	ldr	r2, [r3, #4]
 8108a1c:	687b      	ldr	r3, [r7, #4]
 8108a1e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8108a20:	687b      	ldr	r3, [r7, #4]
 8108a22:	693a      	ldr	r2, [r7, #16]
 8108a24:	621a      	str	r2, [r3, #32]
}
 8108a26:	bf00      	nop
 8108a28:	371c      	adds	r7, #28
 8108a2a:	46bd      	mov	sp, r7
 8108a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108a30:	4770      	bx	lr
 8108a32:	bf00      	nop
 8108a34:	40010000 	.word	0x40010000
 8108a38:	40010400 	.word	0x40010400
 8108a3c:	40014000 	.word	0x40014000
 8108a40:	40014400 	.word	0x40014400
 8108a44:	40014800 	.word	0x40014800

08108a48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8108a48:	b480      	push	{r7}
 8108a4a:	b087      	sub	sp, #28
 8108a4c:	af00      	add	r7, sp, #0
 8108a4e:	60f8      	str	r0, [r7, #12]
 8108a50:	60b9      	str	r1, [r7, #8]
 8108a52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8108a54:	68fb      	ldr	r3, [r7, #12]
 8108a56:	6a1b      	ldr	r3, [r3, #32]
 8108a58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8108a5a:	68fb      	ldr	r3, [r7, #12]
 8108a5c:	6a1b      	ldr	r3, [r3, #32]
 8108a5e:	f023 0201 	bic.w	r2, r3, #1
 8108a62:	68fb      	ldr	r3, [r7, #12]
 8108a64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8108a66:	68fb      	ldr	r3, [r7, #12]
 8108a68:	699b      	ldr	r3, [r3, #24]
 8108a6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8108a6c:	693b      	ldr	r3, [r7, #16]
 8108a6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8108a72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8108a74:	687b      	ldr	r3, [r7, #4]
 8108a76:	011b      	lsls	r3, r3, #4
 8108a78:	693a      	ldr	r2, [r7, #16]
 8108a7a:	4313      	orrs	r3, r2
 8108a7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8108a7e:	697b      	ldr	r3, [r7, #20]
 8108a80:	f023 030a 	bic.w	r3, r3, #10
 8108a84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8108a86:	697a      	ldr	r2, [r7, #20]
 8108a88:	68bb      	ldr	r3, [r7, #8]
 8108a8a:	4313      	orrs	r3, r2
 8108a8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8108a8e:	68fb      	ldr	r3, [r7, #12]
 8108a90:	693a      	ldr	r2, [r7, #16]
 8108a92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8108a94:	68fb      	ldr	r3, [r7, #12]
 8108a96:	697a      	ldr	r2, [r7, #20]
 8108a98:	621a      	str	r2, [r3, #32]
}
 8108a9a:	bf00      	nop
 8108a9c:	371c      	adds	r7, #28
 8108a9e:	46bd      	mov	sp, r7
 8108aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108aa4:	4770      	bx	lr

08108aa6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8108aa6:	b480      	push	{r7}
 8108aa8:	b087      	sub	sp, #28
 8108aaa:	af00      	add	r7, sp, #0
 8108aac:	60f8      	str	r0, [r7, #12]
 8108aae:	60b9      	str	r1, [r7, #8]
 8108ab0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8108ab2:	68fb      	ldr	r3, [r7, #12]
 8108ab4:	6a1b      	ldr	r3, [r3, #32]
 8108ab6:	f023 0210 	bic.w	r2, r3, #16
 8108aba:	68fb      	ldr	r3, [r7, #12]
 8108abc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8108abe:	68fb      	ldr	r3, [r7, #12]
 8108ac0:	699b      	ldr	r3, [r3, #24]
 8108ac2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8108ac4:	68fb      	ldr	r3, [r7, #12]
 8108ac6:	6a1b      	ldr	r3, [r3, #32]
 8108ac8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8108aca:	697b      	ldr	r3, [r7, #20]
 8108acc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8108ad0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8108ad2:	687b      	ldr	r3, [r7, #4]
 8108ad4:	031b      	lsls	r3, r3, #12
 8108ad6:	697a      	ldr	r2, [r7, #20]
 8108ad8:	4313      	orrs	r3, r2
 8108ada:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8108adc:	693b      	ldr	r3, [r7, #16]
 8108ade:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8108ae2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8108ae4:	68bb      	ldr	r3, [r7, #8]
 8108ae6:	011b      	lsls	r3, r3, #4
 8108ae8:	693a      	ldr	r2, [r7, #16]
 8108aea:	4313      	orrs	r3, r2
 8108aec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8108aee:	68fb      	ldr	r3, [r7, #12]
 8108af0:	697a      	ldr	r2, [r7, #20]
 8108af2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8108af4:	68fb      	ldr	r3, [r7, #12]
 8108af6:	693a      	ldr	r2, [r7, #16]
 8108af8:	621a      	str	r2, [r3, #32]
}
 8108afa:	bf00      	nop
 8108afc:	371c      	adds	r7, #28
 8108afe:	46bd      	mov	sp, r7
 8108b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108b04:	4770      	bx	lr

08108b06 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8108b06:	b480      	push	{r7}
 8108b08:	b085      	sub	sp, #20
 8108b0a:	af00      	add	r7, sp, #0
 8108b0c:	6078      	str	r0, [r7, #4]
 8108b0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8108b10:	687b      	ldr	r3, [r7, #4]
 8108b12:	689b      	ldr	r3, [r3, #8]
 8108b14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8108b16:	68fb      	ldr	r3, [r7, #12]
 8108b18:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8108b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8108b20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8108b22:	683a      	ldr	r2, [r7, #0]
 8108b24:	68fb      	ldr	r3, [r7, #12]
 8108b26:	4313      	orrs	r3, r2
 8108b28:	f043 0307 	orr.w	r3, r3, #7
 8108b2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8108b2e:	687b      	ldr	r3, [r7, #4]
 8108b30:	68fa      	ldr	r2, [r7, #12]
 8108b32:	609a      	str	r2, [r3, #8]
}
 8108b34:	bf00      	nop
 8108b36:	3714      	adds	r7, #20
 8108b38:	46bd      	mov	sp, r7
 8108b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108b3e:	4770      	bx	lr

08108b40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8108b40:	b480      	push	{r7}
 8108b42:	b087      	sub	sp, #28
 8108b44:	af00      	add	r7, sp, #0
 8108b46:	60f8      	str	r0, [r7, #12]
 8108b48:	60b9      	str	r1, [r7, #8]
 8108b4a:	607a      	str	r2, [r7, #4]
 8108b4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8108b4e:	68fb      	ldr	r3, [r7, #12]
 8108b50:	689b      	ldr	r3, [r3, #8]
 8108b52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8108b54:	697b      	ldr	r3, [r7, #20]
 8108b56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8108b5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8108b5c:	683b      	ldr	r3, [r7, #0]
 8108b5e:	021a      	lsls	r2, r3, #8
 8108b60:	687b      	ldr	r3, [r7, #4]
 8108b62:	431a      	orrs	r2, r3
 8108b64:	68bb      	ldr	r3, [r7, #8]
 8108b66:	4313      	orrs	r3, r2
 8108b68:	697a      	ldr	r2, [r7, #20]
 8108b6a:	4313      	orrs	r3, r2
 8108b6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8108b6e:	68fb      	ldr	r3, [r7, #12]
 8108b70:	697a      	ldr	r2, [r7, #20]
 8108b72:	609a      	str	r2, [r3, #8]
}
 8108b74:	bf00      	nop
 8108b76:	371c      	adds	r7, #28
 8108b78:	46bd      	mov	sp, r7
 8108b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108b7e:	4770      	bx	lr

08108b80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8108b80:	b480      	push	{r7}
 8108b82:	b085      	sub	sp, #20
 8108b84:	af00      	add	r7, sp, #0
 8108b86:	6078      	str	r0, [r7, #4]
 8108b88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8108b8a:	687b      	ldr	r3, [r7, #4]
 8108b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8108b90:	2b01      	cmp	r3, #1
 8108b92:	d101      	bne.n	8108b98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8108b94:	2302      	movs	r3, #2
 8108b96:	e06d      	b.n	8108c74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8108b98:	687b      	ldr	r3, [r7, #4]
 8108b9a:	2201      	movs	r2, #1
 8108b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8108ba0:	687b      	ldr	r3, [r7, #4]
 8108ba2:	2202      	movs	r2, #2
 8108ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8108ba8:	687b      	ldr	r3, [r7, #4]
 8108baa:	681b      	ldr	r3, [r3, #0]
 8108bac:	685b      	ldr	r3, [r3, #4]
 8108bae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8108bb0:	687b      	ldr	r3, [r7, #4]
 8108bb2:	681b      	ldr	r3, [r3, #0]
 8108bb4:	689b      	ldr	r3, [r3, #8]
 8108bb6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8108bb8:	687b      	ldr	r3, [r7, #4]
 8108bba:	681b      	ldr	r3, [r3, #0]
 8108bbc:	4a30      	ldr	r2, [pc, #192]	; (8108c80 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8108bbe:	4293      	cmp	r3, r2
 8108bc0:	d004      	beq.n	8108bcc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8108bc2:	687b      	ldr	r3, [r7, #4]
 8108bc4:	681b      	ldr	r3, [r3, #0]
 8108bc6:	4a2f      	ldr	r2, [pc, #188]	; (8108c84 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8108bc8:	4293      	cmp	r3, r2
 8108bca:	d108      	bne.n	8108bde <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8108bcc:	68fb      	ldr	r3, [r7, #12]
 8108bce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8108bd2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8108bd4:	683b      	ldr	r3, [r7, #0]
 8108bd6:	685b      	ldr	r3, [r3, #4]
 8108bd8:	68fa      	ldr	r2, [r7, #12]
 8108bda:	4313      	orrs	r3, r2
 8108bdc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8108bde:	68fb      	ldr	r3, [r7, #12]
 8108be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8108be4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8108be6:	683b      	ldr	r3, [r7, #0]
 8108be8:	681b      	ldr	r3, [r3, #0]
 8108bea:	68fa      	ldr	r2, [r7, #12]
 8108bec:	4313      	orrs	r3, r2
 8108bee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8108bf0:	687b      	ldr	r3, [r7, #4]
 8108bf2:	681b      	ldr	r3, [r3, #0]
 8108bf4:	68fa      	ldr	r2, [r7, #12]
 8108bf6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8108bf8:	687b      	ldr	r3, [r7, #4]
 8108bfa:	681b      	ldr	r3, [r3, #0]
 8108bfc:	4a20      	ldr	r2, [pc, #128]	; (8108c80 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8108bfe:	4293      	cmp	r3, r2
 8108c00:	d022      	beq.n	8108c48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8108c02:	687b      	ldr	r3, [r7, #4]
 8108c04:	681b      	ldr	r3, [r3, #0]
 8108c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8108c0a:	d01d      	beq.n	8108c48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8108c0c:	687b      	ldr	r3, [r7, #4]
 8108c0e:	681b      	ldr	r3, [r3, #0]
 8108c10:	4a1d      	ldr	r2, [pc, #116]	; (8108c88 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8108c12:	4293      	cmp	r3, r2
 8108c14:	d018      	beq.n	8108c48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8108c16:	687b      	ldr	r3, [r7, #4]
 8108c18:	681b      	ldr	r3, [r3, #0]
 8108c1a:	4a1c      	ldr	r2, [pc, #112]	; (8108c8c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8108c1c:	4293      	cmp	r3, r2
 8108c1e:	d013      	beq.n	8108c48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8108c20:	687b      	ldr	r3, [r7, #4]
 8108c22:	681b      	ldr	r3, [r3, #0]
 8108c24:	4a1a      	ldr	r2, [pc, #104]	; (8108c90 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8108c26:	4293      	cmp	r3, r2
 8108c28:	d00e      	beq.n	8108c48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8108c2a:	687b      	ldr	r3, [r7, #4]
 8108c2c:	681b      	ldr	r3, [r3, #0]
 8108c2e:	4a15      	ldr	r2, [pc, #84]	; (8108c84 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8108c30:	4293      	cmp	r3, r2
 8108c32:	d009      	beq.n	8108c48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8108c34:	687b      	ldr	r3, [r7, #4]
 8108c36:	681b      	ldr	r3, [r3, #0]
 8108c38:	4a16      	ldr	r2, [pc, #88]	; (8108c94 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8108c3a:	4293      	cmp	r3, r2
 8108c3c:	d004      	beq.n	8108c48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8108c3e:	687b      	ldr	r3, [r7, #4]
 8108c40:	681b      	ldr	r3, [r3, #0]
 8108c42:	4a15      	ldr	r2, [pc, #84]	; (8108c98 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8108c44:	4293      	cmp	r3, r2
 8108c46:	d10c      	bne.n	8108c62 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8108c48:	68bb      	ldr	r3, [r7, #8]
 8108c4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8108c4e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8108c50:	683b      	ldr	r3, [r7, #0]
 8108c52:	689b      	ldr	r3, [r3, #8]
 8108c54:	68ba      	ldr	r2, [r7, #8]
 8108c56:	4313      	orrs	r3, r2
 8108c58:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8108c5a:	687b      	ldr	r3, [r7, #4]
 8108c5c:	681b      	ldr	r3, [r3, #0]
 8108c5e:	68ba      	ldr	r2, [r7, #8]
 8108c60:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8108c62:	687b      	ldr	r3, [r7, #4]
 8108c64:	2201      	movs	r2, #1
 8108c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8108c6a:	687b      	ldr	r3, [r7, #4]
 8108c6c:	2200      	movs	r2, #0
 8108c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8108c72:	2300      	movs	r3, #0
}
 8108c74:	4618      	mov	r0, r3
 8108c76:	3714      	adds	r7, #20
 8108c78:	46bd      	mov	sp, r7
 8108c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108c7e:	4770      	bx	lr
 8108c80:	40010000 	.word	0x40010000
 8108c84:	40010400 	.word	0x40010400
 8108c88:	40000400 	.word	0x40000400
 8108c8c:	40000800 	.word	0x40000800
 8108c90:	40000c00 	.word	0x40000c00
 8108c94:	40001800 	.word	0x40001800
 8108c98:	40014000 	.word	0x40014000

08108c9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8108c9c:	b580      	push	{r7, lr}
 8108c9e:	b082      	sub	sp, #8
 8108ca0:	af00      	add	r7, sp, #0
 8108ca2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8108ca4:	687b      	ldr	r3, [r7, #4]
 8108ca6:	2b00      	cmp	r3, #0
 8108ca8:	d101      	bne.n	8108cae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8108caa:	2301      	movs	r3, #1
 8108cac:	e042      	b.n	8108d34 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8108cae:	687b      	ldr	r3, [r7, #4]
 8108cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8108cb4:	2b00      	cmp	r3, #0
 8108cb6:	d106      	bne.n	8108cc6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8108cb8:	687b      	ldr	r3, [r7, #4]
 8108cba:	2200      	movs	r2, #0
 8108cbc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8108cc0:	6878      	ldr	r0, [r7, #4]
 8108cc2:	f7f8 f9bb 	bl	810103c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8108cc6:	687b      	ldr	r3, [r7, #4]
 8108cc8:	2224      	movs	r2, #36	; 0x24
 8108cca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8108cce:	687b      	ldr	r3, [r7, #4]
 8108cd0:	681b      	ldr	r3, [r3, #0]
 8108cd2:	681a      	ldr	r2, [r3, #0]
 8108cd4:	687b      	ldr	r3, [r7, #4]
 8108cd6:	681b      	ldr	r3, [r3, #0]
 8108cd8:	f022 0201 	bic.w	r2, r2, #1
 8108cdc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8108cde:	6878      	ldr	r0, [r7, #4]
 8108ce0:	f000 fc06 	bl	81094f0 <UART_SetConfig>
 8108ce4:	4603      	mov	r3, r0
 8108ce6:	2b01      	cmp	r3, #1
 8108ce8:	d101      	bne.n	8108cee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8108cea:	2301      	movs	r3, #1
 8108cec:	e022      	b.n	8108d34 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8108cee:	687b      	ldr	r3, [r7, #4]
 8108cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108cf2:	2b00      	cmp	r3, #0
 8108cf4:	d002      	beq.n	8108cfc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8108cf6:	6878      	ldr	r0, [r7, #4]
 8108cf8:	f001 f962 	bl	8109fc0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8108cfc:	687b      	ldr	r3, [r7, #4]
 8108cfe:	681b      	ldr	r3, [r3, #0]
 8108d00:	685a      	ldr	r2, [r3, #4]
 8108d02:	687b      	ldr	r3, [r7, #4]
 8108d04:	681b      	ldr	r3, [r3, #0]
 8108d06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8108d0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8108d0c:	687b      	ldr	r3, [r7, #4]
 8108d0e:	681b      	ldr	r3, [r3, #0]
 8108d10:	689a      	ldr	r2, [r3, #8]
 8108d12:	687b      	ldr	r3, [r7, #4]
 8108d14:	681b      	ldr	r3, [r3, #0]
 8108d16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8108d1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8108d1c:	687b      	ldr	r3, [r7, #4]
 8108d1e:	681b      	ldr	r3, [r3, #0]
 8108d20:	681a      	ldr	r2, [r3, #0]
 8108d22:	687b      	ldr	r3, [r7, #4]
 8108d24:	681b      	ldr	r3, [r3, #0]
 8108d26:	f042 0201 	orr.w	r2, r2, #1
 8108d2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8108d2c:	6878      	ldr	r0, [r7, #4]
 8108d2e:	f001 f9e9 	bl	810a104 <UART_CheckIdleState>
 8108d32:	4603      	mov	r3, r0
}
 8108d34:	4618      	mov	r0, r3
 8108d36:	3708      	adds	r7, #8
 8108d38:	46bd      	mov	sp, r7
 8108d3a:	bd80      	pop	{r7, pc}

08108d3c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8108d3c:	b580      	push	{r7, lr}
 8108d3e:	b0ba      	sub	sp, #232	; 0xe8
 8108d40:	af00      	add	r7, sp, #0
 8108d42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8108d44:	687b      	ldr	r3, [r7, #4]
 8108d46:	681b      	ldr	r3, [r3, #0]
 8108d48:	69db      	ldr	r3, [r3, #28]
 8108d4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8108d4e:	687b      	ldr	r3, [r7, #4]
 8108d50:	681b      	ldr	r3, [r3, #0]
 8108d52:	681b      	ldr	r3, [r3, #0]
 8108d54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8108d58:	687b      	ldr	r3, [r7, #4]
 8108d5a:	681b      	ldr	r3, [r3, #0]
 8108d5c:	689b      	ldr	r3, [r3, #8]
 8108d5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8108d62:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8108d66:	f640 030f 	movw	r3, #2063	; 0x80f
 8108d6a:	4013      	ands	r3, r2
 8108d6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8108d70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8108d74:	2b00      	cmp	r3, #0
 8108d76:	d11b      	bne.n	8108db0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8108d78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8108d7c:	f003 0320 	and.w	r3, r3, #32
 8108d80:	2b00      	cmp	r3, #0
 8108d82:	d015      	beq.n	8108db0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8108d84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8108d88:	f003 0320 	and.w	r3, r3, #32
 8108d8c:	2b00      	cmp	r3, #0
 8108d8e:	d105      	bne.n	8108d9c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8108d90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8108d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8108d98:	2b00      	cmp	r3, #0
 8108d9a:	d009      	beq.n	8108db0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8108d9c:	687b      	ldr	r3, [r7, #4]
 8108d9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8108da0:	2b00      	cmp	r3, #0
 8108da2:	f000 8379 	beq.w	8109498 <HAL_UART_IRQHandler+0x75c>
      {
        huart->RxISR(huart);
 8108da6:	687b      	ldr	r3, [r7, #4]
 8108da8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8108daa:	6878      	ldr	r0, [r7, #4]
 8108dac:	4798      	blx	r3
      }
      return;
 8108dae:	e373      	b.n	8109498 <HAL_UART_IRQHandler+0x75c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8108db0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8108db4:	2b00      	cmp	r3, #0
 8108db6:	f000 8123 	beq.w	8109000 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8108dba:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8108dbe:	4b8d      	ldr	r3, [pc, #564]	; (8108ff4 <HAL_UART_IRQHandler+0x2b8>)
 8108dc0:	4013      	ands	r3, r2
 8108dc2:	2b00      	cmp	r3, #0
 8108dc4:	d106      	bne.n	8108dd4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8108dc6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8108dca:	4b8b      	ldr	r3, [pc, #556]	; (8108ff8 <HAL_UART_IRQHandler+0x2bc>)
 8108dcc:	4013      	ands	r3, r2
 8108dce:	2b00      	cmp	r3, #0
 8108dd0:	f000 8116 	beq.w	8109000 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8108dd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8108dd8:	f003 0301 	and.w	r3, r3, #1
 8108ddc:	2b00      	cmp	r3, #0
 8108dde:	d011      	beq.n	8108e04 <HAL_UART_IRQHandler+0xc8>
 8108de0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8108de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8108de8:	2b00      	cmp	r3, #0
 8108dea:	d00b      	beq.n	8108e04 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8108dec:	687b      	ldr	r3, [r7, #4]
 8108dee:	681b      	ldr	r3, [r3, #0]
 8108df0:	2201      	movs	r2, #1
 8108df2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8108df4:	687b      	ldr	r3, [r7, #4]
 8108df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8108dfa:	f043 0201 	orr.w	r2, r3, #1
 8108dfe:	687b      	ldr	r3, [r7, #4]
 8108e00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8108e04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8108e08:	f003 0302 	and.w	r3, r3, #2
 8108e0c:	2b00      	cmp	r3, #0
 8108e0e:	d011      	beq.n	8108e34 <HAL_UART_IRQHandler+0xf8>
 8108e10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8108e14:	f003 0301 	and.w	r3, r3, #1
 8108e18:	2b00      	cmp	r3, #0
 8108e1a:	d00b      	beq.n	8108e34 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8108e1c:	687b      	ldr	r3, [r7, #4]
 8108e1e:	681b      	ldr	r3, [r3, #0]
 8108e20:	2202      	movs	r2, #2
 8108e22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8108e24:	687b      	ldr	r3, [r7, #4]
 8108e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8108e2a:	f043 0204 	orr.w	r2, r3, #4
 8108e2e:	687b      	ldr	r3, [r7, #4]
 8108e30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8108e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8108e38:	f003 0304 	and.w	r3, r3, #4
 8108e3c:	2b00      	cmp	r3, #0
 8108e3e:	d011      	beq.n	8108e64 <HAL_UART_IRQHandler+0x128>
 8108e40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8108e44:	f003 0301 	and.w	r3, r3, #1
 8108e48:	2b00      	cmp	r3, #0
 8108e4a:	d00b      	beq.n	8108e64 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8108e4c:	687b      	ldr	r3, [r7, #4]
 8108e4e:	681b      	ldr	r3, [r3, #0]
 8108e50:	2204      	movs	r2, #4
 8108e52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8108e54:	687b      	ldr	r3, [r7, #4]
 8108e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8108e5a:	f043 0202 	orr.w	r2, r3, #2
 8108e5e:	687b      	ldr	r3, [r7, #4]
 8108e60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8108e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8108e68:	f003 0308 	and.w	r3, r3, #8
 8108e6c:	2b00      	cmp	r3, #0
 8108e6e:	d017      	beq.n	8108ea0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8108e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8108e74:	f003 0320 	and.w	r3, r3, #32
 8108e78:	2b00      	cmp	r3, #0
 8108e7a:	d105      	bne.n	8108e88 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8108e7c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8108e80:	4b5c      	ldr	r3, [pc, #368]	; (8108ff4 <HAL_UART_IRQHandler+0x2b8>)
 8108e82:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8108e84:	2b00      	cmp	r3, #0
 8108e86:	d00b      	beq.n	8108ea0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8108e88:	687b      	ldr	r3, [r7, #4]
 8108e8a:	681b      	ldr	r3, [r3, #0]
 8108e8c:	2208      	movs	r2, #8
 8108e8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8108e90:	687b      	ldr	r3, [r7, #4]
 8108e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8108e96:	f043 0208 	orr.w	r2, r3, #8
 8108e9a:	687b      	ldr	r3, [r7, #4]
 8108e9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8108ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8108ea4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8108ea8:	2b00      	cmp	r3, #0
 8108eaa:	d012      	beq.n	8108ed2 <HAL_UART_IRQHandler+0x196>
 8108eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8108eb0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8108eb4:	2b00      	cmp	r3, #0
 8108eb6:	d00c      	beq.n	8108ed2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8108eb8:	687b      	ldr	r3, [r7, #4]
 8108eba:	681b      	ldr	r3, [r3, #0]
 8108ebc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8108ec0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8108ec2:	687b      	ldr	r3, [r7, #4]
 8108ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8108ec8:	f043 0220 	orr.w	r2, r3, #32
 8108ecc:	687b      	ldr	r3, [r7, #4]
 8108ece:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8108ed2:	687b      	ldr	r3, [r7, #4]
 8108ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8108ed8:	2b00      	cmp	r3, #0
 8108eda:	f000 82df 	beq.w	810949c <HAL_UART_IRQHandler+0x760>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8108ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8108ee2:	f003 0320 	and.w	r3, r3, #32
 8108ee6:	2b00      	cmp	r3, #0
 8108ee8:	d013      	beq.n	8108f12 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8108eea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8108eee:	f003 0320 	and.w	r3, r3, #32
 8108ef2:	2b00      	cmp	r3, #0
 8108ef4:	d105      	bne.n	8108f02 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8108ef6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8108efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8108efe:	2b00      	cmp	r3, #0
 8108f00:	d007      	beq.n	8108f12 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8108f02:	687b      	ldr	r3, [r7, #4]
 8108f04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8108f06:	2b00      	cmp	r3, #0
 8108f08:	d003      	beq.n	8108f12 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8108f0a:	687b      	ldr	r3, [r7, #4]
 8108f0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8108f0e:	6878      	ldr	r0, [r7, #4]
 8108f10:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8108f12:	687b      	ldr	r3, [r7, #4]
 8108f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8108f18:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8108f1c:	687b      	ldr	r3, [r7, #4]
 8108f1e:	681b      	ldr	r3, [r3, #0]
 8108f20:	689b      	ldr	r3, [r3, #8]
 8108f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8108f26:	2b40      	cmp	r3, #64	; 0x40
 8108f28:	d005      	beq.n	8108f36 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8108f2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8108f2e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8108f32:	2b00      	cmp	r3, #0
 8108f34:	d054      	beq.n	8108fe0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8108f36:	6878      	ldr	r0, [r7, #4]
 8108f38:	f001 f9f5 	bl	810a326 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8108f3c:	687b      	ldr	r3, [r7, #4]
 8108f3e:	681b      	ldr	r3, [r3, #0]
 8108f40:	689b      	ldr	r3, [r3, #8]
 8108f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8108f46:	2b40      	cmp	r3, #64	; 0x40
 8108f48:	d146      	bne.n	8108fd8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8108f4a:	687b      	ldr	r3, [r7, #4]
 8108f4c:	681b      	ldr	r3, [r3, #0]
 8108f4e:	3308      	adds	r3, #8
 8108f50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108f54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8108f58:	e853 3f00 	ldrex	r3, [r3]
 8108f5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8108f60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8108f64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8108f68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8108f6c:	687b      	ldr	r3, [r7, #4]
 8108f6e:	681b      	ldr	r3, [r3, #0]
 8108f70:	3308      	adds	r3, #8
 8108f72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8108f76:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8108f7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108f7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8108f82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8108f86:	e841 2300 	strex	r3, r2, [r1]
 8108f8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8108f8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8108f92:	2b00      	cmp	r3, #0
 8108f94:	d1d9      	bne.n	8108f4a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8108f96:	687b      	ldr	r3, [r7, #4]
 8108f98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8108f9c:	2b00      	cmp	r3, #0
 8108f9e:	d017      	beq.n	8108fd0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8108fa0:	687b      	ldr	r3, [r7, #4]
 8108fa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8108fa6:	4a15      	ldr	r2, [pc, #84]	; (8108ffc <HAL_UART_IRQHandler+0x2c0>)
 8108fa8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8108faa:	687b      	ldr	r3, [r7, #4]
 8108fac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8108fb0:	4618      	mov	r0, r3
 8108fb2:	f7fa fa13 	bl	81033dc <HAL_DMA_Abort_IT>
 8108fb6:	4603      	mov	r3, r0
 8108fb8:	2b00      	cmp	r3, #0
 8108fba:	d019      	beq.n	8108ff0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8108fbc:	687b      	ldr	r3, [r7, #4]
 8108fbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8108fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108fc4:	687a      	ldr	r2, [r7, #4]
 8108fc6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8108fca:	4610      	mov	r0, r2
 8108fcc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8108fce:	e00f      	b.n	8108ff0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8108fd0:	6878      	ldr	r0, [r7, #4]
 8108fd2:	f000 fa77 	bl	81094c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8108fd6:	e00b      	b.n	8108ff0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8108fd8:	6878      	ldr	r0, [r7, #4]
 8108fda:	f000 fa73 	bl	81094c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8108fde:	e007      	b.n	8108ff0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8108fe0:	6878      	ldr	r0, [r7, #4]
 8108fe2:	f000 fa6f 	bl	81094c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8108fe6:	687b      	ldr	r3, [r7, #4]
 8108fe8:	2200      	movs	r2, #0
 8108fea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8108fee:	e255      	b.n	810949c <HAL_UART_IRQHandler+0x760>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8108ff0:	bf00      	nop
    return;
 8108ff2:	e253      	b.n	810949c <HAL_UART_IRQHandler+0x760>
 8108ff4:	10000001 	.word	0x10000001
 8108ff8:	04000120 	.word	0x04000120
 8108ffc:	0810a3f3 	.word	0x0810a3f3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8109000:	687b      	ldr	r3, [r7, #4]
 8109002:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8109004:	2b01      	cmp	r3, #1
 8109006:	f040 81e9 	bne.w	81093dc <HAL_UART_IRQHandler+0x6a0>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 810900a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 810900e:	f003 0310 	and.w	r3, r3, #16
 8109012:	2b00      	cmp	r3, #0
 8109014:	f000 81e2 	beq.w	81093dc <HAL_UART_IRQHandler+0x6a0>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8109018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 810901c:	f003 0310 	and.w	r3, r3, #16
 8109020:	2b00      	cmp	r3, #0
 8109022:	f000 81db 	beq.w	81093dc <HAL_UART_IRQHandler+0x6a0>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8109026:	687b      	ldr	r3, [r7, #4]
 8109028:	681b      	ldr	r3, [r3, #0]
 810902a:	2210      	movs	r2, #16
 810902c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810902e:	687b      	ldr	r3, [r7, #4]
 8109030:	681b      	ldr	r3, [r3, #0]
 8109032:	689b      	ldr	r3, [r3, #8]
 8109034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8109038:	2b40      	cmp	r3, #64	; 0x40
 810903a:	f040 8151 	bne.w	81092e0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 810903e:	687b      	ldr	r3, [r7, #4]
 8109040:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8109044:	681b      	ldr	r3, [r3, #0]
 8109046:	4a96      	ldr	r2, [pc, #600]	; (81092a0 <HAL_UART_IRQHandler+0x564>)
 8109048:	4293      	cmp	r3, r2
 810904a:	d068      	beq.n	810911e <HAL_UART_IRQHandler+0x3e2>
 810904c:	687b      	ldr	r3, [r7, #4]
 810904e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8109052:	681b      	ldr	r3, [r3, #0]
 8109054:	4a93      	ldr	r2, [pc, #588]	; (81092a4 <HAL_UART_IRQHandler+0x568>)
 8109056:	4293      	cmp	r3, r2
 8109058:	d061      	beq.n	810911e <HAL_UART_IRQHandler+0x3e2>
 810905a:	687b      	ldr	r3, [r7, #4]
 810905c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8109060:	681b      	ldr	r3, [r3, #0]
 8109062:	4a91      	ldr	r2, [pc, #580]	; (81092a8 <HAL_UART_IRQHandler+0x56c>)
 8109064:	4293      	cmp	r3, r2
 8109066:	d05a      	beq.n	810911e <HAL_UART_IRQHandler+0x3e2>
 8109068:	687b      	ldr	r3, [r7, #4]
 810906a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810906e:	681b      	ldr	r3, [r3, #0]
 8109070:	4a8e      	ldr	r2, [pc, #568]	; (81092ac <HAL_UART_IRQHandler+0x570>)
 8109072:	4293      	cmp	r3, r2
 8109074:	d053      	beq.n	810911e <HAL_UART_IRQHandler+0x3e2>
 8109076:	687b      	ldr	r3, [r7, #4]
 8109078:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810907c:	681b      	ldr	r3, [r3, #0]
 810907e:	4a8c      	ldr	r2, [pc, #560]	; (81092b0 <HAL_UART_IRQHandler+0x574>)
 8109080:	4293      	cmp	r3, r2
 8109082:	d04c      	beq.n	810911e <HAL_UART_IRQHandler+0x3e2>
 8109084:	687b      	ldr	r3, [r7, #4]
 8109086:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810908a:	681b      	ldr	r3, [r3, #0]
 810908c:	4a89      	ldr	r2, [pc, #548]	; (81092b4 <HAL_UART_IRQHandler+0x578>)
 810908e:	4293      	cmp	r3, r2
 8109090:	d045      	beq.n	810911e <HAL_UART_IRQHandler+0x3e2>
 8109092:	687b      	ldr	r3, [r7, #4]
 8109094:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8109098:	681b      	ldr	r3, [r3, #0]
 810909a:	4a87      	ldr	r2, [pc, #540]	; (81092b8 <HAL_UART_IRQHandler+0x57c>)
 810909c:	4293      	cmp	r3, r2
 810909e:	d03e      	beq.n	810911e <HAL_UART_IRQHandler+0x3e2>
 81090a0:	687b      	ldr	r3, [r7, #4]
 81090a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81090a6:	681b      	ldr	r3, [r3, #0]
 81090a8:	4a84      	ldr	r2, [pc, #528]	; (81092bc <HAL_UART_IRQHandler+0x580>)
 81090aa:	4293      	cmp	r3, r2
 81090ac:	d037      	beq.n	810911e <HAL_UART_IRQHandler+0x3e2>
 81090ae:	687b      	ldr	r3, [r7, #4]
 81090b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81090b4:	681b      	ldr	r3, [r3, #0]
 81090b6:	4a82      	ldr	r2, [pc, #520]	; (81092c0 <HAL_UART_IRQHandler+0x584>)
 81090b8:	4293      	cmp	r3, r2
 81090ba:	d030      	beq.n	810911e <HAL_UART_IRQHandler+0x3e2>
 81090bc:	687b      	ldr	r3, [r7, #4]
 81090be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81090c2:	681b      	ldr	r3, [r3, #0]
 81090c4:	4a7f      	ldr	r2, [pc, #508]	; (81092c4 <HAL_UART_IRQHandler+0x588>)
 81090c6:	4293      	cmp	r3, r2
 81090c8:	d029      	beq.n	810911e <HAL_UART_IRQHandler+0x3e2>
 81090ca:	687b      	ldr	r3, [r7, #4]
 81090cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81090d0:	681b      	ldr	r3, [r3, #0]
 81090d2:	4a7d      	ldr	r2, [pc, #500]	; (81092c8 <HAL_UART_IRQHandler+0x58c>)
 81090d4:	4293      	cmp	r3, r2
 81090d6:	d022      	beq.n	810911e <HAL_UART_IRQHandler+0x3e2>
 81090d8:	687b      	ldr	r3, [r7, #4]
 81090da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81090de:	681b      	ldr	r3, [r3, #0]
 81090e0:	4a7a      	ldr	r2, [pc, #488]	; (81092cc <HAL_UART_IRQHandler+0x590>)
 81090e2:	4293      	cmp	r3, r2
 81090e4:	d01b      	beq.n	810911e <HAL_UART_IRQHandler+0x3e2>
 81090e6:	687b      	ldr	r3, [r7, #4]
 81090e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81090ec:	681b      	ldr	r3, [r3, #0]
 81090ee:	4a78      	ldr	r2, [pc, #480]	; (81092d0 <HAL_UART_IRQHandler+0x594>)
 81090f0:	4293      	cmp	r3, r2
 81090f2:	d014      	beq.n	810911e <HAL_UART_IRQHandler+0x3e2>
 81090f4:	687b      	ldr	r3, [r7, #4]
 81090f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81090fa:	681b      	ldr	r3, [r3, #0]
 81090fc:	4a75      	ldr	r2, [pc, #468]	; (81092d4 <HAL_UART_IRQHandler+0x598>)
 81090fe:	4293      	cmp	r3, r2
 8109100:	d00d      	beq.n	810911e <HAL_UART_IRQHandler+0x3e2>
 8109102:	687b      	ldr	r3, [r7, #4]
 8109104:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8109108:	681b      	ldr	r3, [r3, #0]
 810910a:	4a73      	ldr	r2, [pc, #460]	; (81092d8 <HAL_UART_IRQHandler+0x59c>)
 810910c:	4293      	cmp	r3, r2
 810910e:	d006      	beq.n	810911e <HAL_UART_IRQHandler+0x3e2>
 8109110:	687b      	ldr	r3, [r7, #4]
 8109112:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8109116:	681b      	ldr	r3, [r3, #0]
 8109118:	4a70      	ldr	r2, [pc, #448]	; (81092dc <HAL_UART_IRQHandler+0x5a0>)
 810911a:	4293      	cmp	r3, r2
 810911c:	d106      	bne.n	810912c <HAL_UART_IRQHandler+0x3f0>
 810911e:	687b      	ldr	r3, [r7, #4]
 8109120:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8109124:	681b      	ldr	r3, [r3, #0]
 8109126:	685b      	ldr	r3, [r3, #4]
 8109128:	b29b      	uxth	r3, r3
 810912a:	e005      	b.n	8109138 <HAL_UART_IRQHandler+0x3fc>
 810912c:	687b      	ldr	r3, [r7, #4]
 810912e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8109132:	681b      	ldr	r3, [r3, #0]
 8109134:	685b      	ldr	r3, [r3, #4]
 8109136:	b29b      	uxth	r3, r3
 8109138:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 810913c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8109140:	2b00      	cmp	r3, #0
 8109142:	f000 81ad 	beq.w	81094a0 <HAL_UART_IRQHandler+0x764>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8109146:	687b      	ldr	r3, [r7, #4]
 8109148:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 810914c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8109150:	429a      	cmp	r2, r3
 8109152:	f080 81a5 	bcs.w	81094a0 <HAL_UART_IRQHandler+0x764>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8109156:	687b      	ldr	r3, [r7, #4]
 8109158:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 810915c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8109160:	687b      	ldr	r3, [r7, #4]
 8109162:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8109166:	69db      	ldr	r3, [r3, #28]
 8109168:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810916c:	f000 8087 	beq.w	810927e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8109170:	687b      	ldr	r3, [r7, #4]
 8109172:	681b      	ldr	r3, [r3, #0]
 8109174:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109178:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 810917c:	e853 3f00 	ldrex	r3, [r3]
 8109180:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8109184:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8109188:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810918c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8109190:	687b      	ldr	r3, [r7, #4]
 8109192:	681b      	ldr	r3, [r3, #0]
 8109194:	461a      	mov	r2, r3
 8109196:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 810919a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 810919e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81091a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 81091a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 81091aa:	e841 2300 	strex	r3, r2, [r1]
 81091ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 81091b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 81091b6:	2b00      	cmp	r3, #0
 81091b8:	d1da      	bne.n	8109170 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 81091ba:	687b      	ldr	r3, [r7, #4]
 81091bc:	681b      	ldr	r3, [r3, #0]
 81091be:	3308      	adds	r3, #8
 81091c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81091c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 81091c4:	e853 3f00 	ldrex	r3, [r3]
 81091c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 81091ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 81091cc:	f023 0301 	bic.w	r3, r3, #1
 81091d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 81091d4:	687b      	ldr	r3, [r7, #4]
 81091d6:	681b      	ldr	r3, [r3, #0]
 81091d8:	3308      	adds	r3, #8
 81091da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 81091de:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 81091e2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81091e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 81091e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 81091ea:	e841 2300 	strex	r3, r2, [r1]
 81091ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 81091f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 81091f2:	2b00      	cmp	r3, #0
 81091f4:	d1e1      	bne.n	81091ba <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 81091f6:	687b      	ldr	r3, [r7, #4]
 81091f8:	681b      	ldr	r3, [r3, #0]
 81091fa:	3308      	adds	r3, #8
 81091fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81091fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8109200:	e853 3f00 	ldrex	r3, [r3]
 8109204:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8109206:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8109208:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 810920c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8109210:	687b      	ldr	r3, [r7, #4]
 8109212:	681b      	ldr	r3, [r3, #0]
 8109214:	3308      	adds	r3, #8
 8109216:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 810921a:	66fa      	str	r2, [r7, #108]	; 0x6c
 810921c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810921e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8109220:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8109222:	e841 2300 	strex	r3, r2, [r1]
 8109226:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8109228:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 810922a:	2b00      	cmp	r3, #0
 810922c:	d1e3      	bne.n	81091f6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 810922e:	687b      	ldr	r3, [r7, #4]
 8109230:	2220      	movs	r2, #32
 8109232:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8109236:	687b      	ldr	r3, [r7, #4]
 8109238:	2200      	movs	r2, #0
 810923a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810923c:	687b      	ldr	r3, [r7, #4]
 810923e:	681b      	ldr	r3, [r3, #0]
 8109240:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8109244:	e853 3f00 	ldrex	r3, [r3]
 8109248:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 810924a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 810924c:	f023 0310 	bic.w	r3, r3, #16
 8109250:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8109254:	687b      	ldr	r3, [r7, #4]
 8109256:	681b      	ldr	r3, [r3, #0]
 8109258:	461a      	mov	r2, r3
 810925a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 810925e:	65bb      	str	r3, [r7, #88]	; 0x58
 8109260:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109262:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8109264:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8109266:	e841 2300 	strex	r3, r2, [r1]
 810926a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 810926c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 810926e:	2b00      	cmp	r3, #0
 8109270:	d1e4      	bne.n	810923c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8109272:	687b      	ldr	r3, [r7, #4]
 8109274:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8109278:	4618      	mov	r0, r3
 810927a:	f7f9 fd91 	bl	8102da0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 810927e:	687b      	ldr	r3, [r7, #4]
 8109280:	2202      	movs	r2, #2
 8109282:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8109284:	687b      	ldr	r3, [r7, #4]
 8109286:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 810928a:	687b      	ldr	r3, [r7, #4]
 810928c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8109290:	b29b      	uxth	r3, r3
 8109292:	1ad3      	subs	r3, r2, r3
 8109294:	b29b      	uxth	r3, r3
 8109296:	4619      	mov	r1, r3
 8109298:	6878      	ldr	r0, [r7, #4]
 810929a:	f000 f91d 	bl	81094d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 810929e:	e0ff      	b.n	81094a0 <HAL_UART_IRQHandler+0x764>
 81092a0:	40020010 	.word	0x40020010
 81092a4:	40020028 	.word	0x40020028
 81092a8:	40020040 	.word	0x40020040
 81092ac:	40020058 	.word	0x40020058
 81092b0:	40020070 	.word	0x40020070
 81092b4:	40020088 	.word	0x40020088
 81092b8:	400200a0 	.word	0x400200a0
 81092bc:	400200b8 	.word	0x400200b8
 81092c0:	40020410 	.word	0x40020410
 81092c4:	40020428 	.word	0x40020428
 81092c8:	40020440 	.word	0x40020440
 81092cc:	40020458 	.word	0x40020458
 81092d0:	40020470 	.word	0x40020470
 81092d4:	40020488 	.word	0x40020488
 81092d8:	400204a0 	.word	0x400204a0
 81092dc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 81092e0:	687b      	ldr	r3, [r7, #4]
 81092e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 81092e6:	687b      	ldr	r3, [r7, #4]
 81092e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 81092ec:	b29b      	uxth	r3, r3
 81092ee:	1ad3      	subs	r3, r2, r3
 81092f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 81092f4:	687b      	ldr	r3, [r7, #4]
 81092f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 81092fa:	b29b      	uxth	r3, r3
 81092fc:	2b00      	cmp	r3, #0
 81092fe:	f000 80d1 	beq.w	81094a4 <HAL_UART_IRQHandler+0x768>
          && (nb_rx_data > 0U))
 8109302:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8109306:	2b00      	cmp	r3, #0
 8109308:	f000 80cc 	beq.w	81094a4 <HAL_UART_IRQHandler+0x768>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810930c:	687b      	ldr	r3, [r7, #4]
 810930e:	681b      	ldr	r3, [r3, #0]
 8109310:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109314:	e853 3f00 	ldrex	r3, [r3]
 8109318:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 810931a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810931c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8109320:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8109324:	687b      	ldr	r3, [r7, #4]
 8109326:	681b      	ldr	r3, [r3, #0]
 8109328:	461a      	mov	r2, r3
 810932a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 810932e:	647b      	str	r3, [r7, #68]	; 0x44
 8109330:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109332:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8109334:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8109336:	e841 2300 	strex	r3, r2, [r1]
 810933a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 810933c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810933e:	2b00      	cmp	r3, #0
 8109340:	d1e4      	bne.n	810930c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8109342:	687b      	ldr	r3, [r7, #4]
 8109344:	681b      	ldr	r3, [r3, #0]
 8109346:	3308      	adds	r3, #8
 8109348:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810934a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810934c:	e853 3f00 	ldrex	r3, [r3]
 8109350:	623b      	str	r3, [r7, #32]
   return(result);
 8109352:	6a3b      	ldr	r3, [r7, #32]
 8109354:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8109358:	f023 0301 	bic.w	r3, r3, #1
 810935c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8109360:	687b      	ldr	r3, [r7, #4]
 8109362:	681b      	ldr	r3, [r3, #0]
 8109364:	3308      	adds	r3, #8
 8109366:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 810936a:	633a      	str	r2, [r7, #48]	; 0x30
 810936c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810936e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8109370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8109372:	e841 2300 	strex	r3, r2, [r1]
 8109376:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8109378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810937a:	2b00      	cmp	r3, #0
 810937c:	d1e1      	bne.n	8109342 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 810937e:	687b      	ldr	r3, [r7, #4]
 8109380:	2220      	movs	r2, #32
 8109382:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8109386:	687b      	ldr	r3, [r7, #4]
 8109388:	2200      	movs	r2, #0
 810938a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 810938c:	687b      	ldr	r3, [r7, #4]
 810938e:	2200      	movs	r2, #0
 8109390:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8109392:	687b      	ldr	r3, [r7, #4]
 8109394:	681b      	ldr	r3, [r3, #0]
 8109396:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109398:	693b      	ldr	r3, [r7, #16]
 810939a:	e853 3f00 	ldrex	r3, [r3]
 810939e:	60fb      	str	r3, [r7, #12]
   return(result);
 81093a0:	68fb      	ldr	r3, [r7, #12]
 81093a2:	f023 0310 	bic.w	r3, r3, #16
 81093a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 81093aa:	687b      	ldr	r3, [r7, #4]
 81093ac:	681b      	ldr	r3, [r3, #0]
 81093ae:	461a      	mov	r2, r3
 81093b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 81093b4:	61fb      	str	r3, [r7, #28]
 81093b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81093b8:	69b9      	ldr	r1, [r7, #24]
 81093ba:	69fa      	ldr	r2, [r7, #28]
 81093bc:	e841 2300 	strex	r3, r2, [r1]
 81093c0:	617b      	str	r3, [r7, #20]
   return(result);
 81093c2:	697b      	ldr	r3, [r7, #20]
 81093c4:	2b00      	cmp	r3, #0
 81093c6:	d1e4      	bne.n	8109392 <HAL_UART_IRQHandler+0x656>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 81093c8:	687b      	ldr	r3, [r7, #4]
 81093ca:	2202      	movs	r2, #2
 81093cc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 81093ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 81093d2:	4619      	mov	r1, r3
 81093d4:	6878      	ldr	r0, [r7, #4]
 81093d6:	f000 f87f 	bl	81094d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 81093da:	e063      	b.n	81094a4 <HAL_UART_IRQHandler+0x768>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 81093dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 81093e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81093e4:	2b00      	cmp	r3, #0
 81093e6:	d00e      	beq.n	8109406 <HAL_UART_IRQHandler+0x6ca>
 81093e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 81093ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 81093f0:	2b00      	cmp	r3, #0
 81093f2:	d008      	beq.n	8109406 <HAL_UART_IRQHandler+0x6ca>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 81093f4:	687b      	ldr	r3, [r7, #4]
 81093f6:	681b      	ldr	r3, [r3, #0]
 81093f8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 81093fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 81093fe:	6878      	ldr	r0, [r7, #4]
 8109400:	f001 f838 	bl	810a474 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8109404:	e051      	b.n	81094aa <HAL_UART_IRQHandler+0x76e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8109406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 810940a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810940e:	2b00      	cmp	r3, #0
 8109410:	d014      	beq.n	810943c <HAL_UART_IRQHandler+0x700>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8109412:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8109416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810941a:	2b00      	cmp	r3, #0
 810941c:	d105      	bne.n	810942a <HAL_UART_IRQHandler+0x6ee>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 810941e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8109422:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8109426:	2b00      	cmp	r3, #0
 8109428:	d008      	beq.n	810943c <HAL_UART_IRQHandler+0x700>
  {
    if (huart->TxISR != NULL)
 810942a:	687b      	ldr	r3, [r7, #4]
 810942c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810942e:	2b00      	cmp	r3, #0
 8109430:	d03a      	beq.n	81094a8 <HAL_UART_IRQHandler+0x76c>
    {
      huart->TxISR(huart);
 8109432:	687b      	ldr	r3, [r7, #4]
 8109434:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8109436:	6878      	ldr	r0, [r7, #4]
 8109438:	4798      	blx	r3
    }
    return;
 810943a:	e035      	b.n	81094a8 <HAL_UART_IRQHandler+0x76c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 810943c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8109440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8109444:	2b00      	cmp	r3, #0
 8109446:	d009      	beq.n	810945c <HAL_UART_IRQHandler+0x720>
 8109448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 810944c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8109450:	2b00      	cmp	r3, #0
 8109452:	d003      	beq.n	810945c <HAL_UART_IRQHandler+0x720>
  {
    UART_EndTransmit_IT(huart);
 8109454:	6878      	ldr	r0, [r7, #4]
 8109456:	f000 ffe2 	bl	810a41e <UART_EndTransmit_IT>
    return;
 810945a:	e026      	b.n	81094aa <HAL_UART_IRQHandler+0x76e>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 810945c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8109460:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8109464:	2b00      	cmp	r3, #0
 8109466:	d009      	beq.n	810947c <HAL_UART_IRQHandler+0x740>
 8109468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 810946c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8109470:	2b00      	cmp	r3, #0
 8109472:	d003      	beq.n	810947c <HAL_UART_IRQHandler+0x740>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8109474:	6878      	ldr	r0, [r7, #4]
 8109476:	f001 f811 	bl	810a49c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810947a:	e016      	b.n	81094aa <HAL_UART_IRQHandler+0x76e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 810947c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8109480:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8109484:	2b00      	cmp	r3, #0
 8109486:	d010      	beq.n	81094aa <HAL_UART_IRQHandler+0x76e>
 8109488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 810948c:	2b00      	cmp	r3, #0
 810948e:	da0c      	bge.n	81094aa <HAL_UART_IRQHandler+0x76e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8109490:	6878      	ldr	r0, [r7, #4]
 8109492:	f000 fff9 	bl	810a488 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8109496:	e008      	b.n	81094aa <HAL_UART_IRQHandler+0x76e>
      return;
 8109498:	bf00      	nop
 810949a:	e006      	b.n	81094aa <HAL_UART_IRQHandler+0x76e>
    return;
 810949c:	bf00      	nop
 810949e:	e004      	b.n	81094aa <HAL_UART_IRQHandler+0x76e>
      return;
 81094a0:	bf00      	nop
 81094a2:	e002      	b.n	81094aa <HAL_UART_IRQHandler+0x76e>
      return;
 81094a4:	bf00      	nop
 81094a6:	e000      	b.n	81094aa <HAL_UART_IRQHandler+0x76e>
    return;
 81094a8:	bf00      	nop
  }
}
 81094aa:	37e8      	adds	r7, #232	; 0xe8
 81094ac:	46bd      	mov	sp, r7
 81094ae:	bd80      	pop	{r7, pc}

081094b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 81094b0:	b480      	push	{r7}
 81094b2:	b083      	sub	sp, #12
 81094b4:	af00      	add	r7, sp, #0
 81094b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 81094b8:	bf00      	nop
 81094ba:	370c      	adds	r7, #12
 81094bc:	46bd      	mov	sp, r7
 81094be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81094c2:	4770      	bx	lr

081094c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 81094c4:	b480      	push	{r7}
 81094c6:	b083      	sub	sp, #12
 81094c8:	af00      	add	r7, sp, #0
 81094ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 81094cc:	bf00      	nop
 81094ce:	370c      	adds	r7, #12
 81094d0:	46bd      	mov	sp, r7
 81094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81094d6:	4770      	bx	lr

081094d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 81094d8:	b480      	push	{r7}
 81094da:	b083      	sub	sp, #12
 81094dc:	af00      	add	r7, sp, #0
 81094de:	6078      	str	r0, [r7, #4]
 81094e0:	460b      	mov	r3, r1
 81094e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 81094e4:	bf00      	nop
 81094e6:	370c      	adds	r7, #12
 81094e8:	46bd      	mov	sp, r7
 81094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81094ee:	4770      	bx	lr

081094f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 81094f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 81094f4:	b092      	sub	sp, #72	; 0x48
 81094f6:	af00      	add	r7, sp, #0
 81094f8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 81094fa:	2300      	movs	r3, #0
 81094fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8109500:	697b      	ldr	r3, [r7, #20]
 8109502:	689a      	ldr	r2, [r3, #8]
 8109504:	697b      	ldr	r3, [r7, #20]
 8109506:	691b      	ldr	r3, [r3, #16]
 8109508:	431a      	orrs	r2, r3
 810950a:	697b      	ldr	r3, [r7, #20]
 810950c:	695b      	ldr	r3, [r3, #20]
 810950e:	431a      	orrs	r2, r3
 8109510:	697b      	ldr	r3, [r7, #20]
 8109512:	69db      	ldr	r3, [r3, #28]
 8109514:	4313      	orrs	r3, r2
 8109516:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8109518:	697b      	ldr	r3, [r7, #20]
 810951a:	681b      	ldr	r3, [r3, #0]
 810951c:	681a      	ldr	r2, [r3, #0]
 810951e:	4bbd      	ldr	r3, [pc, #756]	; (8109814 <UART_SetConfig+0x324>)
 8109520:	4013      	ands	r3, r2
 8109522:	697a      	ldr	r2, [r7, #20]
 8109524:	6812      	ldr	r2, [r2, #0]
 8109526:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8109528:	430b      	orrs	r3, r1
 810952a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 810952c:	697b      	ldr	r3, [r7, #20]
 810952e:	681b      	ldr	r3, [r3, #0]
 8109530:	685b      	ldr	r3, [r3, #4]
 8109532:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8109536:	697b      	ldr	r3, [r7, #20]
 8109538:	68da      	ldr	r2, [r3, #12]
 810953a:	697b      	ldr	r3, [r7, #20]
 810953c:	681b      	ldr	r3, [r3, #0]
 810953e:	430a      	orrs	r2, r1
 8109540:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8109542:	697b      	ldr	r3, [r7, #20]
 8109544:	699b      	ldr	r3, [r3, #24]
 8109546:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8109548:	697b      	ldr	r3, [r7, #20]
 810954a:	681b      	ldr	r3, [r3, #0]
 810954c:	4ab2      	ldr	r2, [pc, #712]	; (8109818 <UART_SetConfig+0x328>)
 810954e:	4293      	cmp	r3, r2
 8109550:	d004      	beq.n	810955c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8109552:	697b      	ldr	r3, [r7, #20]
 8109554:	6a1b      	ldr	r3, [r3, #32]
 8109556:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8109558:	4313      	orrs	r3, r2
 810955a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810955c:	697b      	ldr	r3, [r7, #20]
 810955e:	681b      	ldr	r3, [r3, #0]
 8109560:	689b      	ldr	r3, [r3, #8]
 8109562:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8109566:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 810956a:	697a      	ldr	r2, [r7, #20]
 810956c:	6812      	ldr	r2, [r2, #0]
 810956e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8109570:	430b      	orrs	r3, r1
 8109572:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8109574:	697b      	ldr	r3, [r7, #20]
 8109576:	681b      	ldr	r3, [r3, #0]
 8109578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810957a:	f023 010f 	bic.w	r1, r3, #15
 810957e:	697b      	ldr	r3, [r7, #20]
 8109580:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8109582:	697b      	ldr	r3, [r7, #20]
 8109584:	681b      	ldr	r3, [r3, #0]
 8109586:	430a      	orrs	r2, r1
 8109588:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810958a:	697b      	ldr	r3, [r7, #20]
 810958c:	681b      	ldr	r3, [r3, #0]
 810958e:	4aa3      	ldr	r2, [pc, #652]	; (810981c <UART_SetConfig+0x32c>)
 8109590:	4293      	cmp	r3, r2
 8109592:	d177      	bne.n	8109684 <UART_SetConfig+0x194>
 8109594:	4ba2      	ldr	r3, [pc, #648]	; (8109820 <UART_SetConfig+0x330>)
 8109596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109598:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810959c:	2b28      	cmp	r3, #40	; 0x28
 810959e:	d86d      	bhi.n	810967c <UART_SetConfig+0x18c>
 81095a0:	a201      	add	r2, pc, #4	; (adr r2, 81095a8 <UART_SetConfig+0xb8>)
 81095a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81095a6:	bf00      	nop
 81095a8:	0810964d 	.word	0x0810964d
 81095ac:	0810967d 	.word	0x0810967d
 81095b0:	0810967d 	.word	0x0810967d
 81095b4:	0810967d 	.word	0x0810967d
 81095b8:	0810967d 	.word	0x0810967d
 81095bc:	0810967d 	.word	0x0810967d
 81095c0:	0810967d 	.word	0x0810967d
 81095c4:	0810967d 	.word	0x0810967d
 81095c8:	08109655 	.word	0x08109655
 81095cc:	0810967d 	.word	0x0810967d
 81095d0:	0810967d 	.word	0x0810967d
 81095d4:	0810967d 	.word	0x0810967d
 81095d8:	0810967d 	.word	0x0810967d
 81095dc:	0810967d 	.word	0x0810967d
 81095e0:	0810967d 	.word	0x0810967d
 81095e4:	0810967d 	.word	0x0810967d
 81095e8:	0810965d 	.word	0x0810965d
 81095ec:	0810967d 	.word	0x0810967d
 81095f0:	0810967d 	.word	0x0810967d
 81095f4:	0810967d 	.word	0x0810967d
 81095f8:	0810967d 	.word	0x0810967d
 81095fc:	0810967d 	.word	0x0810967d
 8109600:	0810967d 	.word	0x0810967d
 8109604:	0810967d 	.word	0x0810967d
 8109608:	08109665 	.word	0x08109665
 810960c:	0810967d 	.word	0x0810967d
 8109610:	0810967d 	.word	0x0810967d
 8109614:	0810967d 	.word	0x0810967d
 8109618:	0810967d 	.word	0x0810967d
 810961c:	0810967d 	.word	0x0810967d
 8109620:	0810967d 	.word	0x0810967d
 8109624:	0810967d 	.word	0x0810967d
 8109628:	0810966d 	.word	0x0810966d
 810962c:	0810967d 	.word	0x0810967d
 8109630:	0810967d 	.word	0x0810967d
 8109634:	0810967d 	.word	0x0810967d
 8109638:	0810967d 	.word	0x0810967d
 810963c:	0810967d 	.word	0x0810967d
 8109640:	0810967d 	.word	0x0810967d
 8109644:	0810967d 	.word	0x0810967d
 8109648:	08109675 	.word	0x08109675
 810964c:	2301      	movs	r3, #1
 810964e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109652:	e220      	b.n	8109a96 <UART_SetConfig+0x5a6>
 8109654:	2304      	movs	r3, #4
 8109656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810965a:	e21c      	b.n	8109a96 <UART_SetConfig+0x5a6>
 810965c:	2308      	movs	r3, #8
 810965e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109662:	e218      	b.n	8109a96 <UART_SetConfig+0x5a6>
 8109664:	2310      	movs	r3, #16
 8109666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810966a:	e214      	b.n	8109a96 <UART_SetConfig+0x5a6>
 810966c:	2320      	movs	r3, #32
 810966e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109672:	e210      	b.n	8109a96 <UART_SetConfig+0x5a6>
 8109674:	2340      	movs	r3, #64	; 0x40
 8109676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810967a:	e20c      	b.n	8109a96 <UART_SetConfig+0x5a6>
 810967c:	2380      	movs	r3, #128	; 0x80
 810967e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109682:	e208      	b.n	8109a96 <UART_SetConfig+0x5a6>
 8109684:	697b      	ldr	r3, [r7, #20]
 8109686:	681b      	ldr	r3, [r3, #0]
 8109688:	4a66      	ldr	r2, [pc, #408]	; (8109824 <UART_SetConfig+0x334>)
 810968a:	4293      	cmp	r3, r2
 810968c:	d130      	bne.n	81096f0 <UART_SetConfig+0x200>
 810968e:	4b64      	ldr	r3, [pc, #400]	; (8109820 <UART_SetConfig+0x330>)
 8109690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109692:	f003 0307 	and.w	r3, r3, #7
 8109696:	2b05      	cmp	r3, #5
 8109698:	d826      	bhi.n	81096e8 <UART_SetConfig+0x1f8>
 810969a:	a201      	add	r2, pc, #4	; (adr r2, 81096a0 <UART_SetConfig+0x1b0>)
 810969c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81096a0:	081096b9 	.word	0x081096b9
 81096a4:	081096c1 	.word	0x081096c1
 81096a8:	081096c9 	.word	0x081096c9
 81096ac:	081096d1 	.word	0x081096d1
 81096b0:	081096d9 	.word	0x081096d9
 81096b4:	081096e1 	.word	0x081096e1
 81096b8:	2300      	movs	r3, #0
 81096ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81096be:	e1ea      	b.n	8109a96 <UART_SetConfig+0x5a6>
 81096c0:	2304      	movs	r3, #4
 81096c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81096c6:	e1e6      	b.n	8109a96 <UART_SetConfig+0x5a6>
 81096c8:	2308      	movs	r3, #8
 81096ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81096ce:	e1e2      	b.n	8109a96 <UART_SetConfig+0x5a6>
 81096d0:	2310      	movs	r3, #16
 81096d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81096d6:	e1de      	b.n	8109a96 <UART_SetConfig+0x5a6>
 81096d8:	2320      	movs	r3, #32
 81096da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81096de:	e1da      	b.n	8109a96 <UART_SetConfig+0x5a6>
 81096e0:	2340      	movs	r3, #64	; 0x40
 81096e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81096e6:	e1d6      	b.n	8109a96 <UART_SetConfig+0x5a6>
 81096e8:	2380      	movs	r3, #128	; 0x80
 81096ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81096ee:	e1d2      	b.n	8109a96 <UART_SetConfig+0x5a6>
 81096f0:	697b      	ldr	r3, [r7, #20]
 81096f2:	681b      	ldr	r3, [r3, #0]
 81096f4:	4a4c      	ldr	r2, [pc, #304]	; (8109828 <UART_SetConfig+0x338>)
 81096f6:	4293      	cmp	r3, r2
 81096f8:	d130      	bne.n	810975c <UART_SetConfig+0x26c>
 81096fa:	4b49      	ldr	r3, [pc, #292]	; (8109820 <UART_SetConfig+0x330>)
 81096fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81096fe:	f003 0307 	and.w	r3, r3, #7
 8109702:	2b05      	cmp	r3, #5
 8109704:	d826      	bhi.n	8109754 <UART_SetConfig+0x264>
 8109706:	a201      	add	r2, pc, #4	; (adr r2, 810970c <UART_SetConfig+0x21c>)
 8109708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810970c:	08109725 	.word	0x08109725
 8109710:	0810972d 	.word	0x0810972d
 8109714:	08109735 	.word	0x08109735
 8109718:	0810973d 	.word	0x0810973d
 810971c:	08109745 	.word	0x08109745
 8109720:	0810974d 	.word	0x0810974d
 8109724:	2300      	movs	r3, #0
 8109726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810972a:	e1b4      	b.n	8109a96 <UART_SetConfig+0x5a6>
 810972c:	2304      	movs	r3, #4
 810972e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109732:	e1b0      	b.n	8109a96 <UART_SetConfig+0x5a6>
 8109734:	2308      	movs	r3, #8
 8109736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810973a:	e1ac      	b.n	8109a96 <UART_SetConfig+0x5a6>
 810973c:	2310      	movs	r3, #16
 810973e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109742:	e1a8      	b.n	8109a96 <UART_SetConfig+0x5a6>
 8109744:	2320      	movs	r3, #32
 8109746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810974a:	e1a4      	b.n	8109a96 <UART_SetConfig+0x5a6>
 810974c:	2340      	movs	r3, #64	; 0x40
 810974e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109752:	e1a0      	b.n	8109a96 <UART_SetConfig+0x5a6>
 8109754:	2380      	movs	r3, #128	; 0x80
 8109756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810975a:	e19c      	b.n	8109a96 <UART_SetConfig+0x5a6>
 810975c:	697b      	ldr	r3, [r7, #20]
 810975e:	681b      	ldr	r3, [r3, #0]
 8109760:	4a32      	ldr	r2, [pc, #200]	; (810982c <UART_SetConfig+0x33c>)
 8109762:	4293      	cmp	r3, r2
 8109764:	d130      	bne.n	81097c8 <UART_SetConfig+0x2d8>
 8109766:	4b2e      	ldr	r3, [pc, #184]	; (8109820 <UART_SetConfig+0x330>)
 8109768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810976a:	f003 0307 	and.w	r3, r3, #7
 810976e:	2b05      	cmp	r3, #5
 8109770:	d826      	bhi.n	81097c0 <UART_SetConfig+0x2d0>
 8109772:	a201      	add	r2, pc, #4	; (adr r2, 8109778 <UART_SetConfig+0x288>)
 8109774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109778:	08109791 	.word	0x08109791
 810977c:	08109799 	.word	0x08109799
 8109780:	081097a1 	.word	0x081097a1
 8109784:	081097a9 	.word	0x081097a9
 8109788:	081097b1 	.word	0x081097b1
 810978c:	081097b9 	.word	0x081097b9
 8109790:	2300      	movs	r3, #0
 8109792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109796:	e17e      	b.n	8109a96 <UART_SetConfig+0x5a6>
 8109798:	2304      	movs	r3, #4
 810979a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810979e:	e17a      	b.n	8109a96 <UART_SetConfig+0x5a6>
 81097a0:	2308      	movs	r3, #8
 81097a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81097a6:	e176      	b.n	8109a96 <UART_SetConfig+0x5a6>
 81097a8:	2310      	movs	r3, #16
 81097aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81097ae:	e172      	b.n	8109a96 <UART_SetConfig+0x5a6>
 81097b0:	2320      	movs	r3, #32
 81097b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81097b6:	e16e      	b.n	8109a96 <UART_SetConfig+0x5a6>
 81097b8:	2340      	movs	r3, #64	; 0x40
 81097ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81097be:	e16a      	b.n	8109a96 <UART_SetConfig+0x5a6>
 81097c0:	2380      	movs	r3, #128	; 0x80
 81097c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81097c6:	e166      	b.n	8109a96 <UART_SetConfig+0x5a6>
 81097c8:	697b      	ldr	r3, [r7, #20]
 81097ca:	681b      	ldr	r3, [r3, #0]
 81097cc:	4a18      	ldr	r2, [pc, #96]	; (8109830 <UART_SetConfig+0x340>)
 81097ce:	4293      	cmp	r3, r2
 81097d0:	d140      	bne.n	8109854 <UART_SetConfig+0x364>
 81097d2:	4b13      	ldr	r3, [pc, #76]	; (8109820 <UART_SetConfig+0x330>)
 81097d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81097d6:	f003 0307 	and.w	r3, r3, #7
 81097da:	2b05      	cmp	r3, #5
 81097dc:	d836      	bhi.n	810984c <UART_SetConfig+0x35c>
 81097de:	a201      	add	r2, pc, #4	; (adr r2, 81097e4 <UART_SetConfig+0x2f4>)
 81097e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81097e4:	081097fd 	.word	0x081097fd
 81097e8:	08109805 	.word	0x08109805
 81097ec:	0810980d 	.word	0x0810980d
 81097f0:	08109835 	.word	0x08109835
 81097f4:	0810983d 	.word	0x0810983d
 81097f8:	08109845 	.word	0x08109845
 81097fc:	2300      	movs	r3, #0
 81097fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109802:	e148      	b.n	8109a96 <UART_SetConfig+0x5a6>
 8109804:	2304      	movs	r3, #4
 8109806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810980a:	e144      	b.n	8109a96 <UART_SetConfig+0x5a6>
 810980c:	2308      	movs	r3, #8
 810980e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109812:	e140      	b.n	8109a96 <UART_SetConfig+0x5a6>
 8109814:	cfff69f3 	.word	0xcfff69f3
 8109818:	58000c00 	.word	0x58000c00
 810981c:	40011000 	.word	0x40011000
 8109820:	58024400 	.word	0x58024400
 8109824:	40004400 	.word	0x40004400
 8109828:	40004800 	.word	0x40004800
 810982c:	40004c00 	.word	0x40004c00
 8109830:	40005000 	.word	0x40005000
 8109834:	2310      	movs	r3, #16
 8109836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810983a:	e12c      	b.n	8109a96 <UART_SetConfig+0x5a6>
 810983c:	2320      	movs	r3, #32
 810983e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109842:	e128      	b.n	8109a96 <UART_SetConfig+0x5a6>
 8109844:	2340      	movs	r3, #64	; 0x40
 8109846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810984a:	e124      	b.n	8109a96 <UART_SetConfig+0x5a6>
 810984c:	2380      	movs	r3, #128	; 0x80
 810984e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109852:	e120      	b.n	8109a96 <UART_SetConfig+0x5a6>
 8109854:	697b      	ldr	r3, [r7, #20]
 8109856:	681b      	ldr	r3, [r3, #0]
 8109858:	4acb      	ldr	r2, [pc, #812]	; (8109b88 <UART_SetConfig+0x698>)
 810985a:	4293      	cmp	r3, r2
 810985c:	d176      	bne.n	810994c <UART_SetConfig+0x45c>
 810985e:	4bcb      	ldr	r3, [pc, #812]	; (8109b8c <UART_SetConfig+0x69c>)
 8109860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109862:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8109866:	2b28      	cmp	r3, #40	; 0x28
 8109868:	d86c      	bhi.n	8109944 <UART_SetConfig+0x454>
 810986a:	a201      	add	r2, pc, #4	; (adr r2, 8109870 <UART_SetConfig+0x380>)
 810986c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109870:	08109915 	.word	0x08109915
 8109874:	08109945 	.word	0x08109945
 8109878:	08109945 	.word	0x08109945
 810987c:	08109945 	.word	0x08109945
 8109880:	08109945 	.word	0x08109945
 8109884:	08109945 	.word	0x08109945
 8109888:	08109945 	.word	0x08109945
 810988c:	08109945 	.word	0x08109945
 8109890:	0810991d 	.word	0x0810991d
 8109894:	08109945 	.word	0x08109945
 8109898:	08109945 	.word	0x08109945
 810989c:	08109945 	.word	0x08109945
 81098a0:	08109945 	.word	0x08109945
 81098a4:	08109945 	.word	0x08109945
 81098a8:	08109945 	.word	0x08109945
 81098ac:	08109945 	.word	0x08109945
 81098b0:	08109925 	.word	0x08109925
 81098b4:	08109945 	.word	0x08109945
 81098b8:	08109945 	.word	0x08109945
 81098bc:	08109945 	.word	0x08109945
 81098c0:	08109945 	.word	0x08109945
 81098c4:	08109945 	.word	0x08109945
 81098c8:	08109945 	.word	0x08109945
 81098cc:	08109945 	.word	0x08109945
 81098d0:	0810992d 	.word	0x0810992d
 81098d4:	08109945 	.word	0x08109945
 81098d8:	08109945 	.word	0x08109945
 81098dc:	08109945 	.word	0x08109945
 81098e0:	08109945 	.word	0x08109945
 81098e4:	08109945 	.word	0x08109945
 81098e8:	08109945 	.word	0x08109945
 81098ec:	08109945 	.word	0x08109945
 81098f0:	08109935 	.word	0x08109935
 81098f4:	08109945 	.word	0x08109945
 81098f8:	08109945 	.word	0x08109945
 81098fc:	08109945 	.word	0x08109945
 8109900:	08109945 	.word	0x08109945
 8109904:	08109945 	.word	0x08109945
 8109908:	08109945 	.word	0x08109945
 810990c:	08109945 	.word	0x08109945
 8109910:	0810993d 	.word	0x0810993d
 8109914:	2301      	movs	r3, #1
 8109916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810991a:	e0bc      	b.n	8109a96 <UART_SetConfig+0x5a6>
 810991c:	2304      	movs	r3, #4
 810991e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109922:	e0b8      	b.n	8109a96 <UART_SetConfig+0x5a6>
 8109924:	2308      	movs	r3, #8
 8109926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810992a:	e0b4      	b.n	8109a96 <UART_SetConfig+0x5a6>
 810992c:	2310      	movs	r3, #16
 810992e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109932:	e0b0      	b.n	8109a96 <UART_SetConfig+0x5a6>
 8109934:	2320      	movs	r3, #32
 8109936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810993a:	e0ac      	b.n	8109a96 <UART_SetConfig+0x5a6>
 810993c:	2340      	movs	r3, #64	; 0x40
 810993e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109942:	e0a8      	b.n	8109a96 <UART_SetConfig+0x5a6>
 8109944:	2380      	movs	r3, #128	; 0x80
 8109946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810994a:	e0a4      	b.n	8109a96 <UART_SetConfig+0x5a6>
 810994c:	697b      	ldr	r3, [r7, #20]
 810994e:	681b      	ldr	r3, [r3, #0]
 8109950:	4a8f      	ldr	r2, [pc, #572]	; (8109b90 <UART_SetConfig+0x6a0>)
 8109952:	4293      	cmp	r3, r2
 8109954:	d130      	bne.n	81099b8 <UART_SetConfig+0x4c8>
 8109956:	4b8d      	ldr	r3, [pc, #564]	; (8109b8c <UART_SetConfig+0x69c>)
 8109958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810995a:	f003 0307 	and.w	r3, r3, #7
 810995e:	2b05      	cmp	r3, #5
 8109960:	d826      	bhi.n	81099b0 <UART_SetConfig+0x4c0>
 8109962:	a201      	add	r2, pc, #4	; (adr r2, 8109968 <UART_SetConfig+0x478>)
 8109964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109968:	08109981 	.word	0x08109981
 810996c:	08109989 	.word	0x08109989
 8109970:	08109991 	.word	0x08109991
 8109974:	08109999 	.word	0x08109999
 8109978:	081099a1 	.word	0x081099a1
 810997c:	081099a9 	.word	0x081099a9
 8109980:	2300      	movs	r3, #0
 8109982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109986:	e086      	b.n	8109a96 <UART_SetConfig+0x5a6>
 8109988:	2304      	movs	r3, #4
 810998a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810998e:	e082      	b.n	8109a96 <UART_SetConfig+0x5a6>
 8109990:	2308      	movs	r3, #8
 8109992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109996:	e07e      	b.n	8109a96 <UART_SetConfig+0x5a6>
 8109998:	2310      	movs	r3, #16
 810999a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810999e:	e07a      	b.n	8109a96 <UART_SetConfig+0x5a6>
 81099a0:	2320      	movs	r3, #32
 81099a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81099a6:	e076      	b.n	8109a96 <UART_SetConfig+0x5a6>
 81099a8:	2340      	movs	r3, #64	; 0x40
 81099aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81099ae:	e072      	b.n	8109a96 <UART_SetConfig+0x5a6>
 81099b0:	2380      	movs	r3, #128	; 0x80
 81099b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81099b6:	e06e      	b.n	8109a96 <UART_SetConfig+0x5a6>
 81099b8:	697b      	ldr	r3, [r7, #20]
 81099ba:	681b      	ldr	r3, [r3, #0]
 81099bc:	4a75      	ldr	r2, [pc, #468]	; (8109b94 <UART_SetConfig+0x6a4>)
 81099be:	4293      	cmp	r3, r2
 81099c0:	d130      	bne.n	8109a24 <UART_SetConfig+0x534>
 81099c2:	4b72      	ldr	r3, [pc, #456]	; (8109b8c <UART_SetConfig+0x69c>)
 81099c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81099c6:	f003 0307 	and.w	r3, r3, #7
 81099ca:	2b05      	cmp	r3, #5
 81099cc:	d826      	bhi.n	8109a1c <UART_SetConfig+0x52c>
 81099ce:	a201      	add	r2, pc, #4	; (adr r2, 81099d4 <UART_SetConfig+0x4e4>)
 81099d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81099d4:	081099ed 	.word	0x081099ed
 81099d8:	081099f5 	.word	0x081099f5
 81099dc:	081099fd 	.word	0x081099fd
 81099e0:	08109a05 	.word	0x08109a05
 81099e4:	08109a0d 	.word	0x08109a0d
 81099e8:	08109a15 	.word	0x08109a15
 81099ec:	2300      	movs	r3, #0
 81099ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81099f2:	e050      	b.n	8109a96 <UART_SetConfig+0x5a6>
 81099f4:	2304      	movs	r3, #4
 81099f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81099fa:	e04c      	b.n	8109a96 <UART_SetConfig+0x5a6>
 81099fc:	2308      	movs	r3, #8
 81099fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109a02:	e048      	b.n	8109a96 <UART_SetConfig+0x5a6>
 8109a04:	2310      	movs	r3, #16
 8109a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109a0a:	e044      	b.n	8109a96 <UART_SetConfig+0x5a6>
 8109a0c:	2320      	movs	r3, #32
 8109a0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109a12:	e040      	b.n	8109a96 <UART_SetConfig+0x5a6>
 8109a14:	2340      	movs	r3, #64	; 0x40
 8109a16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109a1a:	e03c      	b.n	8109a96 <UART_SetConfig+0x5a6>
 8109a1c:	2380      	movs	r3, #128	; 0x80
 8109a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109a22:	e038      	b.n	8109a96 <UART_SetConfig+0x5a6>
 8109a24:	697b      	ldr	r3, [r7, #20]
 8109a26:	681b      	ldr	r3, [r3, #0]
 8109a28:	4a5b      	ldr	r2, [pc, #364]	; (8109b98 <UART_SetConfig+0x6a8>)
 8109a2a:	4293      	cmp	r3, r2
 8109a2c:	d130      	bne.n	8109a90 <UART_SetConfig+0x5a0>
 8109a2e:	4b57      	ldr	r3, [pc, #348]	; (8109b8c <UART_SetConfig+0x69c>)
 8109a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8109a32:	f003 0307 	and.w	r3, r3, #7
 8109a36:	2b05      	cmp	r3, #5
 8109a38:	d826      	bhi.n	8109a88 <UART_SetConfig+0x598>
 8109a3a:	a201      	add	r2, pc, #4	; (adr r2, 8109a40 <UART_SetConfig+0x550>)
 8109a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109a40:	08109a59 	.word	0x08109a59
 8109a44:	08109a61 	.word	0x08109a61
 8109a48:	08109a69 	.word	0x08109a69
 8109a4c:	08109a71 	.word	0x08109a71
 8109a50:	08109a79 	.word	0x08109a79
 8109a54:	08109a81 	.word	0x08109a81
 8109a58:	2302      	movs	r3, #2
 8109a5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109a5e:	e01a      	b.n	8109a96 <UART_SetConfig+0x5a6>
 8109a60:	2304      	movs	r3, #4
 8109a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109a66:	e016      	b.n	8109a96 <UART_SetConfig+0x5a6>
 8109a68:	2308      	movs	r3, #8
 8109a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109a6e:	e012      	b.n	8109a96 <UART_SetConfig+0x5a6>
 8109a70:	2310      	movs	r3, #16
 8109a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109a76:	e00e      	b.n	8109a96 <UART_SetConfig+0x5a6>
 8109a78:	2320      	movs	r3, #32
 8109a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109a7e:	e00a      	b.n	8109a96 <UART_SetConfig+0x5a6>
 8109a80:	2340      	movs	r3, #64	; 0x40
 8109a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109a86:	e006      	b.n	8109a96 <UART_SetConfig+0x5a6>
 8109a88:	2380      	movs	r3, #128	; 0x80
 8109a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109a8e:	e002      	b.n	8109a96 <UART_SetConfig+0x5a6>
 8109a90:	2380      	movs	r3, #128	; 0x80
 8109a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8109a96:	697b      	ldr	r3, [r7, #20]
 8109a98:	681b      	ldr	r3, [r3, #0]
 8109a9a:	4a3f      	ldr	r2, [pc, #252]	; (8109b98 <UART_SetConfig+0x6a8>)
 8109a9c:	4293      	cmp	r3, r2
 8109a9e:	f040 80f8 	bne.w	8109c92 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8109aa2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8109aa6:	2b20      	cmp	r3, #32
 8109aa8:	dc46      	bgt.n	8109b38 <UART_SetConfig+0x648>
 8109aaa:	2b02      	cmp	r3, #2
 8109aac:	f2c0 8082 	blt.w	8109bb4 <UART_SetConfig+0x6c4>
 8109ab0:	3b02      	subs	r3, #2
 8109ab2:	2b1e      	cmp	r3, #30
 8109ab4:	d87e      	bhi.n	8109bb4 <UART_SetConfig+0x6c4>
 8109ab6:	a201      	add	r2, pc, #4	; (adr r2, 8109abc <UART_SetConfig+0x5cc>)
 8109ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109abc:	08109b3f 	.word	0x08109b3f
 8109ac0:	08109bb5 	.word	0x08109bb5
 8109ac4:	08109b47 	.word	0x08109b47
 8109ac8:	08109bb5 	.word	0x08109bb5
 8109acc:	08109bb5 	.word	0x08109bb5
 8109ad0:	08109bb5 	.word	0x08109bb5
 8109ad4:	08109b57 	.word	0x08109b57
 8109ad8:	08109bb5 	.word	0x08109bb5
 8109adc:	08109bb5 	.word	0x08109bb5
 8109ae0:	08109bb5 	.word	0x08109bb5
 8109ae4:	08109bb5 	.word	0x08109bb5
 8109ae8:	08109bb5 	.word	0x08109bb5
 8109aec:	08109bb5 	.word	0x08109bb5
 8109af0:	08109bb5 	.word	0x08109bb5
 8109af4:	08109b67 	.word	0x08109b67
 8109af8:	08109bb5 	.word	0x08109bb5
 8109afc:	08109bb5 	.word	0x08109bb5
 8109b00:	08109bb5 	.word	0x08109bb5
 8109b04:	08109bb5 	.word	0x08109bb5
 8109b08:	08109bb5 	.word	0x08109bb5
 8109b0c:	08109bb5 	.word	0x08109bb5
 8109b10:	08109bb5 	.word	0x08109bb5
 8109b14:	08109bb5 	.word	0x08109bb5
 8109b18:	08109bb5 	.word	0x08109bb5
 8109b1c:	08109bb5 	.word	0x08109bb5
 8109b20:	08109bb5 	.word	0x08109bb5
 8109b24:	08109bb5 	.word	0x08109bb5
 8109b28:	08109bb5 	.word	0x08109bb5
 8109b2c:	08109bb5 	.word	0x08109bb5
 8109b30:	08109bb5 	.word	0x08109bb5
 8109b34:	08109ba7 	.word	0x08109ba7
 8109b38:	2b40      	cmp	r3, #64	; 0x40
 8109b3a:	d037      	beq.n	8109bac <UART_SetConfig+0x6bc>
 8109b3c:	e03a      	b.n	8109bb4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8109b3e:	f7fd fbdb 	bl	81072f8 <HAL_RCCEx_GetD3PCLK1Freq>
 8109b42:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8109b44:	e03c      	b.n	8109bc0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8109b46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8109b4a:	4618      	mov	r0, r3
 8109b4c:	f7fd fbea 	bl	8107324 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8109b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109b52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109b54:	e034      	b.n	8109bc0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8109b56:	f107 0318 	add.w	r3, r7, #24
 8109b5a:	4618      	mov	r0, r3
 8109b5c:	f7fd fd36 	bl	81075cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8109b60:	69fb      	ldr	r3, [r7, #28]
 8109b62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109b64:	e02c      	b.n	8109bc0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8109b66:	4b09      	ldr	r3, [pc, #36]	; (8109b8c <UART_SetConfig+0x69c>)
 8109b68:	681b      	ldr	r3, [r3, #0]
 8109b6a:	f003 0320 	and.w	r3, r3, #32
 8109b6e:	2b00      	cmp	r3, #0
 8109b70:	d016      	beq.n	8109ba0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8109b72:	4b06      	ldr	r3, [pc, #24]	; (8109b8c <UART_SetConfig+0x69c>)
 8109b74:	681b      	ldr	r3, [r3, #0]
 8109b76:	08db      	lsrs	r3, r3, #3
 8109b78:	f003 0303 	and.w	r3, r3, #3
 8109b7c:	4a07      	ldr	r2, [pc, #28]	; (8109b9c <UART_SetConfig+0x6ac>)
 8109b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8109b82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8109b84:	e01c      	b.n	8109bc0 <UART_SetConfig+0x6d0>
 8109b86:	bf00      	nop
 8109b88:	40011400 	.word	0x40011400
 8109b8c:	58024400 	.word	0x58024400
 8109b90:	40007800 	.word	0x40007800
 8109b94:	40007c00 	.word	0x40007c00
 8109b98:	58000c00 	.word	0x58000c00
 8109b9c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8109ba0:	4b9d      	ldr	r3, [pc, #628]	; (8109e18 <UART_SetConfig+0x928>)
 8109ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109ba4:	e00c      	b.n	8109bc0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8109ba6:	4b9d      	ldr	r3, [pc, #628]	; (8109e1c <UART_SetConfig+0x92c>)
 8109ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109baa:	e009      	b.n	8109bc0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8109bac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8109bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109bb2:	e005      	b.n	8109bc0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8109bb4:	2300      	movs	r3, #0
 8109bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8109bb8:	2301      	movs	r3, #1
 8109bba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8109bbe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8109bc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109bc2:	2b00      	cmp	r3, #0
 8109bc4:	f000 81de 	beq.w	8109f84 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8109bc8:	697b      	ldr	r3, [r7, #20]
 8109bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109bcc:	4a94      	ldr	r2, [pc, #592]	; (8109e20 <UART_SetConfig+0x930>)
 8109bce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8109bd2:	461a      	mov	r2, r3
 8109bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109bd6:	fbb3 f3f2 	udiv	r3, r3, r2
 8109bda:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8109bdc:	697b      	ldr	r3, [r7, #20]
 8109bde:	685a      	ldr	r2, [r3, #4]
 8109be0:	4613      	mov	r3, r2
 8109be2:	005b      	lsls	r3, r3, #1
 8109be4:	4413      	add	r3, r2
 8109be6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8109be8:	429a      	cmp	r2, r3
 8109bea:	d305      	bcc.n	8109bf8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8109bec:	697b      	ldr	r3, [r7, #20]
 8109bee:	685b      	ldr	r3, [r3, #4]
 8109bf0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8109bf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8109bf4:	429a      	cmp	r2, r3
 8109bf6:	d903      	bls.n	8109c00 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8109bf8:	2301      	movs	r3, #1
 8109bfa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8109bfe:	e1c1      	b.n	8109f84 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8109c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109c02:	2200      	movs	r2, #0
 8109c04:	60bb      	str	r3, [r7, #8]
 8109c06:	60fa      	str	r2, [r7, #12]
 8109c08:	697b      	ldr	r3, [r7, #20]
 8109c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109c0c:	4a84      	ldr	r2, [pc, #528]	; (8109e20 <UART_SetConfig+0x930>)
 8109c0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8109c12:	b29b      	uxth	r3, r3
 8109c14:	2200      	movs	r2, #0
 8109c16:	603b      	str	r3, [r7, #0]
 8109c18:	607a      	str	r2, [r7, #4]
 8109c1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8109c1e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8109c22:	f7f6 fb59 	bl	81002d8 <__aeabi_uldivmod>
 8109c26:	4602      	mov	r2, r0
 8109c28:	460b      	mov	r3, r1
 8109c2a:	4610      	mov	r0, r2
 8109c2c:	4619      	mov	r1, r3
 8109c2e:	f04f 0200 	mov.w	r2, #0
 8109c32:	f04f 0300 	mov.w	r3, #0
 8109c36:	020b      	lsls	r3, r1, #8
 8109c38:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8109c3c:	0202      	lsls	r2, r0, #8
 8109c3e:	6979      	ldr	r1, [r7, #20]
 8109c40:	6849      	ldr	r1, [r1, #4]
 8109c42:	0849      	lsrs	r1, r1, #1
 8109c44:	2000      	movs	r0, #0
 8109c46:	460c      	mov	r4, r1
 8109c48:	4605      	mov	r5, r0
 8109c4a:	eb12 0804 	adds.w	r8, r2, r4
 8109c4e:	eb43 0905 	adc.w	r9, r3, r5
 8109c52:	697b      	ldr	r3, [r7, #20]
 8109c54:	685b      	ldr	r3, [r3, #4]
 8109c56:	2200      	movs	r2, #0
 8109c58:	469a      	mov	sl, r3
 8109c5a:	4693      	mov	fp, r2
 8109c5c:	4652      	mov	r2, sl
 8109c5e:	465b      	mov	r3, fp
 8109c60:	4640      	mov	r0, r8
 8109c62:	4649      	mov	r1, r9
 8109c64:	f7f6 fb38 	bl	81002d8 <__aeabi_uldivmod>
 8109c68:	4602      	mov	r2, r0
 8109c6a:	460b      	mov	r3, r1
 8109c6c:	4613      	mov	r3, r2
 8109c6e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8109c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109c72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8109c76:	d308      	bcc.n	8109c8a <UART_SetConfig+0x79a>
 8109c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109c7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8109c7e:	d204      	bcs.n	8109c8a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8109c80:	697b      	ldr	r3, [r7, #20]
 8109c82:	681b      	ldr	r3, [r3, #0]
 8109c84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8109c86:	60da      	str	r2, [r3, #12]
 8109c88:	e17c      	b.n	8109f84 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8109c8a:	2301      	movs	r3, #1
 8109c8c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8109c90:	e178      	b.n	8109f84 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8109c92:	697b      	ldr	r3, [r7, #20]
 8109c94:	69db      	ldr	r3, [r3, #28]
 8109c96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8109c9a:	f040 80c5 	bne.w	8109e28 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8109c9e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8109ca2:	2b20      	cmp	r3, #32
 8109ca4:	dc48      	bgt.n	8109d38 <UART_SetConfig+0x848>
 8109ca6:	2b00      	cmp	r3, #0
 8109ca8:	db7b      	blt.n	8109da2 <UART_SetConfig+0x8b2>
 8109caa:	2b20      	cmp	r3, #32
 8109cac:	d879      	bhi.n	8109da2 <UART_SetConfig+0x8b2>
 8109cae:	a201      	add	r2, pc, #4	; (adr r2, 8109cb4 <UART_SetConfig+0x7c4>)
 8109cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109cb4:	08109d3f 	.word	0x08109d3f
 8109cb8:	08109d47 	.word	0x08109d47
 8109cbc:	08109da3 	.word	0x08109da3
 8109cc0:	08109da3 	.word	0x08109da3
 8109cc4:	08109d4f 	.word	0x08109d4f
 8109cc8:	08109da3 	.word	0x08109da3
 8109ccc:	08109da3 	.word	0x08109da3
 8109cd0:	08109da3 	.word	0x08109da3
 8109cd4:	08109d5f 	.word	0x08109d5f
 8109cd8:	08109da3 	.word	0x08109da3
 8109cdc:	08109da3 	.word	0x08109da3
 8109ce0:	08109da3 	.word	0x08109da3
 8109ce4:	08109da3 	.word	0x08109da3
 8109ce8:	08109da3 	.word	0x08109da3
 8109cec:	08109da3 	.word	0x08109da3
 8109cf0:	08109da3 	.word	0x08109da3
 8109cf4:	08109d6f 	.word	0x08109d6f
 8109cf8:	08109da3 	.word	0x08109da3
 8109cfc:	08109da3 	.word	0x08109da3
 8109d00:	08109da3 	.word	0x08109da3
 8109d04:	08109da3 	.word	0x08109da3
 8109d08:	08109da3 	.word	0x08109da3
 8109d0c:	08109da3 	.word	0x08109da3
 8109d10:	08109da3 	.word	0x08109da3
 8109d14:	08109da3 	.word	0x08109da3
 8109d18:	08109da3 	.word	0x08109da3
 8109d1c:	08109da3 	.word	0x08109da3
 8109d20:	08109da3 	.word	0x08109da3
 8109d24:	08109da3 	.word	0x08109da3
 8109d28:	08109da3 	.word	0x08109da3
 8109d2c:	08109da3 	.word	0x08109da3
 8109d30:	08109da3 	.word	0x08109da3
 8109d34:	08109d95 	.word	0x08109d95
 8109d38:	2b40      	cmp	r3, #64	; 0x40
 8109d3a:	d02e      	beq.n	8109d9a <UART_SetConfig+0x8aa>
 8109d3c:	e031      	b.n	8109da2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8109d3e:	f7fb fb09 	bl	8105354 <HAL_RCC_GetPCLK1Freq>
 8109d42:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8109d44:	e033      	b.n	8109dae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8109d46:	f7fb fb1b 	bl	8105380 <HAL_RCC_GetPCLK2Freq>
 8109d4a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8109d4c:	e02f      	b.n	8109dae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8109d4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8109d52:	4618      	mov	r0, r3
 8109d54:	f7fd fae6 	bl	8107324 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8109d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109d5c:	e027      	b.n	8109dae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8109d5e:	f107 0318 	add.w	r3, r7, #24
 8109d62:	4618      	mov	r0, r3
 8109d64:	f7fd fc32 	bl	81075cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8109d68:	69fb      	ldr	r3, [r7, #28]
 8109d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109d6c:	e01f      	b.n	8109dae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8109d6e:	4b2d      	ldr	r3, [pc, #180]	; (8109e24 <UART_SetConfig+0x934>)
 8109d70:	681b      	ldr	r3, [r3, #0]
 8109d72:	f003 0320 	and.w	r3, r3, #32
 8109d76:	2b00      	cmp	r3, #0
 8109d78:	d009      	beq.n	8109d8e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8109d7a:	4b2a      	ldr	r3, [pc, #168]	; (8109e24 <UART_SetConfig+0x934>)
 8109d7c:	681b      	ldr	r3, [r3, #0]
 8109d7e:	08db      	lsrs	r3, r3, #3
 8109d80:	f003 0303 	and.w	r3, r3, #3
 8109d84:	4a24      	ldr	r2, [pc, #144]	; (8109e18 <UART_SetConfig+0x928>)
 8109d86:	fa22 f303 	lsr.w	r3, r2, r3
 8109d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8109d8c:	e00f      	b.n	8109dae <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8109d8e:	4b22      	ldr	r3, [pc, #136]	; (8109e18 <UART_SetConfig+0x928>)
 8109d90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109d92:	e00c      	b.n	8109dae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8109d94:	4b21      	ldr	r3, [pc, #132]	; (8109e1c <UART_SetConfig+0x92c>)
 8109d96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109d98:	e009      	b.n	8109dae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8109d9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8109d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109da0:	e005      	b.n	8109dae <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8109da2:	2300      	movs	r3, #0
 8109da4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8109da6:	2301      	movs	r3, #1
 8109da8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8109dac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8109dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109db0:	2b00      	cmp	r3, #0
 8109db2:	f000 80e7 	beq.w	8109f84 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8109db6:	697b      	ldr	r3, [r7, #20]
 8109db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109dba:	4a19      	ldr	r2, [pc, #100]	; (8109e20 <UART_SetConfig+0x930>)
 8109dbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8109dc0:	461a      	mov	r2, r3
 8109dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109dc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8109dc8:	005a      	lsls	r2, r3, #1
 8109dca:	697b      	ldr	r3, [r7, #20]
 8109dcc:	685b      	ldr	r3, [r3, #4]
 8109dce:	085b      	lsrs	r3, r3, #1
 8109dd0:	441a      	add	r2, r3
 8109dd2:	697b      	ldr	r3, [r7, #20]
 8109dd4:	685b      	ldr	r3, [r3, #4]
 8109dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8109dda:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8109ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109dde:	2b0f      	cmp	r3, #15
 8109de0:	d916      	bls.n	8109e10 <UART_SetConfig+0x920>
 8109de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8109de8:	d212      	bcs.n	8109e10 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8109dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109dec:	b29b      	uxth	r3, r3
 8109dee:	f023 030f 	bic.w	r3, r3, #15
 8109df2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8109df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109df6:	085b      	lsrs	r3, r3, #1
 8109df8:	b29b      	uxth	r3, r3
 8109dfa:	f003 0307 	and.w	r3, r3, #7
 8109dfe:	b29a      	uxth	r2, r3
 8109e00:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8109e02:	4313      	orrs	r3, r2
 8109e04:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8109e06:	697b      	ldr	r3, [r7, #20]
 8109e08:	681b      	ldr	r3, [r3, #0]
 8109e0a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8109e0c:	60da      	str	r2, [r3, #12]
 8109e0e:	e0b9      	b.n	8109f84 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8109e10:	2301      	movs	r3, #1
 8109e12:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8109e16:	e0b5      	b.n	8109f84 <UART_SetConfig+0xa94>
 8109e18:	03d09000 	.word	0x03d09000
 8109e1c:	003d0900 	.word	0x003d0900
 8109e20:	0810a740 	.word	0x0810a740
 8109e24:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8109e28:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8109e2c:	2b20      	cmp	r3, #32
 8109e2e:	dc49      	bgt.n	8109ec4 <UART_SetConfig+0x9d4>
 8109e30:	2b00      	cmp	r3, #0
 8109e32:	db7c      	blt.n	8109f2e <UART_SetConfig+0xa3e>
 8109e34:	2b20      	cmp	r3, #32
 8109e36:	d87a      	bhi.n	8109f2e <UART_SetConfig+0xa3e>
 8109e38:	a201      	add	r2, pc, #4	; (adr r2, 8109e40 <UART_SetConfig+0x950>)
 8109e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109e3e:	bf00      	nop
 8109e40:	08109ecb 	.word	0x08109ecb
 8109e44:	08109ed3 	.word	0x08109ed3
 8109e48:	08109f2f 	.word	0x08109f2f
 8109e4c:	08109f2f 	.word	0x08109f2f
 8109e50:	08109edb 	.word	0x08109edb
 8109e54:	08109f2f 	.word	0x08109f2f
 8109e58:	08109f2f 	.word	0x08109f2f
 8109e5c:	08109f2f 	.word	0x08109f2f
 8109e60:	08109eeb 	.word	0x08109eeb
 8109e64:	08109f2f 	.word	0x08109f2f
 8109e68:	08109f2f 	.word	0x08109f2f
 8109e6c:	08109f2f 	.word	0x08109f2f
 8109e70:	08109f2f 	.word	0x08109f2f
 8109e74:	08109f2f 	.word	0x08109f2f
 8109e78:	08109f2f 	.word	0x08109f2f
 8109e7c:	08109f2f 	.word	0x08109f2f
 8109e80:	08109efb 	.word	0x08109efb
 8109e84:	08109f2f 	.word	0x08109f2f
 8109e88:	08109f2f 	.word	0x08109f2f
 8109e8c:	08109f2f 	.word	0x08109f2f
 8109e90:	08109f2f 	.word	0x08109f2f
 8109e94:	08109f2f 	.word	0x08109f2f
 8109e98:	08109f2f 	.word	0x08109f2f
 8109e9c:	08109f2f 	.word	0x08109f2f
 8109ea0:	08109f2f 	.word	0x08109f2f
 8109ea4:	08109f2f 	.word	0x08109f2f
 8109ea8:	08109f2f 	.word	0x08109f2f
 8109eac:	08109f2f 	.word	0x08109f2f
 8109eb0:	08109f2f 	.word	0x08109f2f
 8109eb4:	08109f2f 	.word	0x08109f2f
 8109eb8:	08109f2f 	.word	0x08109f2f
 8109ebc:	08109f2f 	.word	0x08109f2f
 8109ec0:	08109f21 	.word	0x08109f21
 8109ec4:	2b40      	cmp	r3, #64	; 0x40
 8109ec6:	d02e      	beq.n	8109f26 <UART_SetConfig+0xa36>
 8109ec8:	e031      	b.n	8109f2e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8109eca:	f7fb fa43 	bl	8105354 <HAL_RCC_GetPCLK1Freq>
 8109ece:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8109ed0:	e033      	b.n	8109f3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8109ed2:	f7fb fa55 	bl	8105380 <HAL_RCC_GetPCLK2Freq>
 8109ed6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8109ed8:	e02f      	b.n	8109f3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8109eda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8109ede:	4618      	mov	r0, r3
 8109ee0:	f7fd fa20 	bl	8107324 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8109ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109ee8:	e027      	b.n	8109f3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8109eea:	f107 0318 	add.w	r3, r7, #24
 8109eee:	4618      	mov	r0, r3
 8109ef0:	f7fd fb6c 	bl	81075cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8109ef4:	69fb      	ldr	r3, [r7, #28]
 8109ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109ef8:	e01f      	b.n	8109f3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8109efa:	4b2d      	ldr	r3, [pc, #180]	; (8109fb0 <UART_SetConfig+0xac0>)
 8109efc:	681b      	ldr	r3, [r3, #0]
 8109efe:	f003 0320 	and.w	r3, r3, #32
 8109f02:	2b00      	cmp	r3, #0
 8109f04:	d009      	beq.n	8109f1a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8109f06:	4b2a      	ldr	r3, [pc, #168]	; (8109fb0 <UART_SetConfig+0xac0>)
 8109f08:	681b      	ldr	r3, [r3, #0]
 8109f0a:	08db      	lsrs	r3, r3, #3
 8109f0c:	f003 0303 	and.w	r3, r3, #3
 8109f10:	4a28      	ldr	r2, [pc, #160]	; (8109fb4 <UART_SetConfig+0xac4>)
 8109f12:	fa22 f303 	lsr.w	r3, r2, r3
 8109f16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8109f18:	e00f      	b.n	8109f3a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8109f1a:	4b26      	ldr	r3, [pc, #152]	; (8109fb4 <UART_SetConfig+0xac4>)
 8109f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109f1e:	e00c      	b.n	8109f3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8109f20:	4b25      	ldr	r3, [pc, #148]	; (8109fb8 <UART_SetConfig+0xac8>)
 8109f22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109f24:	e009      	b.n	8109f3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8109f26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8109f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109f2c:	e005      	b.n	8109f3a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8109f2e:	2300      	movs	r3, #0
 8109f30:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8109f32:	2301      	movs	r3, #1
 8109f34:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8109f38:	bf00      	nop
    }

    if (pclk != 0U)
 8109f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109f3c:	2b00      	cmp	r3, #0
 8109f3e:	d021      	beq.n	8109f84 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8109f40:	697b      	ldr	r3, [r7, #20]
 8109f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109f44:	4a1d      	ldr	r2, [pc, #116]	; (8109fbc <UART_SetConfig+0xacc>)
 8109f46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8109f4a:	461a      	mov	r2, r3
 8109f4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109f4e:	fbb3 f2f2 	udiv	r2, r3, r2
 8109f52:	697b      	ldr	r3, [r7, #20]
 8109f54:	685b      	ldr	r3, [r3, #4]
 8109f56:	085b      	lsrs	r3, r3, #1
 8109f58:	441a      	add	r2, r3
 8109f5a:	697b      	ldr	r3, [r7, #20]
 8109f5c:	685b      	ldr	r3, [r3, #4]
 8109f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8109f62:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8109f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109f66:	2b0f      	cmp	r3, #15
 8109f68:	d909      	bls.n	8109f7e <UART_SetConfig+0xa8e>
 8109f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8109f70:	d205      	bcs.n	8109f7e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8109f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109f74:	b29a      	uxth	r2, r3
 8109f76:	697b      	ldr	r3, [r7, #20]
 8109f78:	681b      	ldr	r3, [r3, #0]
 8109f7a:	60da      	str	r2, [r3, #12]
 8109f7c:	e002      	b.n	8109f84 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8109f7e:	2301      	movs	r3, #1
 8109f80:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8109f84:	697b      	ldr	r3, [r7, #20]
 8109f86:	2201      	movs	r2, #1
 8109f88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8109f8c:	697b      	ldr	r3, [r7, #20]
 8109f8e:	2201      	movs	r2, #1
 8109f90:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8109f94:	697b      	ldr	r3, [r7, #20]
 8109f96:	2200      	movs	r2, #0
 8109f98:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8109f9a:	697b      	ldr	r3, [r7, #20]
 8109f9c:	2200      	movs	r2, #0
 8109f9e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8109fa0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8109fa4:	4618      	mov	r0, r3
 8109fa6:	3748      	adds	r7, #72	; 0x48
 8109fa8:	46bd      	mov	sp, r7
 8109faa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8109fae:	bf00      	nop
 8109fb0:	58024400 	.word	0x58024400
 8109fb4:	03d09000 	.word	0x03d09000
 8109fb8:	003d0900 	.word	0x003d0900
 8109fbc:	0810a740 	.word	0x0810a740

08109fc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8109fc0:	b480      	push	{r7}
 8109fc2:	b083      	sub	sp, #12
 8109fc4:	af00      	add	r7, sp, #0
 8109fc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8109fc8:	687b      	ldr	r3, [r7, #4]
 8109fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109fcc:	f003 0301 	and.w	r3, r3, #1
 8109fd0:	2b00      	cmp	r3, #0
 8109fd2:	d00a      	beq.n	8109fea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8109fd4:	687b      	ldr	r3, [r7, #4]
 8109fd6:	681b      	ldr	r3, [r3, #0]
 8109fd8:	685b      	ldr	r3, [r3, #4]
 8109fda:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8109fde:	687b      	ldr	r3, [r7, #4]
 8109fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8109fe2:	687b      	ldr	r3, [r7, #4]
 8109fe4:	681b      	ldr	r3, [r3, #0]
 8109fe6:	430a      	orrs	r2, r1
 8109fe8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8109fea:	687b      	ldr	r3, [r7, #4]
 8109fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109fee:	f003 0302 	and.w	r3, r3, #2
 8109ff2:	2b00      	cmp	r3, #0
 8109ff4:	d00a      	beq.n	810a00c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8109ff6:	687b      	ldr	r3, [r7, #4]
 8109ff8:	681b      	ldr	r3, [r3, #0]
 8109ffa:	685b      	ldr	r3, [r3, #4]
 8109ffc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 810a000:	687b      	ldr	r3, [r7, #4]
 810a002:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 810a004:	687b      	ldr	r3, [r7, #4]
 810a006:	681b      	ldr	r3, [r3, #0]
 810a008:	430a      	orrs	r2, r1
 810a00a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 810a00c:	687b      	ldr	r3, [r7, #4]
 810a00e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a010:	f003 0304 	and.w	r3, r3, #4
 810a014:	2b00      	cmp	r3, #0
 810a016:	d00a      	beq.n	810a02e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 810a018:	687b      	ldr	r3, [r7, #4]
 810a01a:	681b      	ldr	r3, [r3, #0]
 810a01c:	685b      	ldr	r3, [r3, #4]
 810a01e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 810a022:	687b      	ldr	r3, [r7, #4]
 810a024:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810a026:	687b      	ldr	r3, [r7, #4]
 810a028:	681b      	ldr	r3, [r3, #0]
 810a02a:	430a      	orrs	r2, r1
 810a02c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810a02e:	687b      	ldr	r3, [r7, #4]
 810a030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a032:	f003 0308 	and.w	r3, r3, #8
 810a036:	2b00      	cmp	r3, #0
 810a038:	d00a      	beq.n	810a050 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810a03a:	687b      	ldr	r3, [r7, #4]
 810a03c:	681b      	ldr	r3, [r3, #0]
 810a03e:	685b      	ldr	r3, [r3, #4]
 810a040:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 810a044:	687b      	ldr	r3, [r7, #4]
 810a046:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810a048:	687b      	ldr	r3, [r7, #4]
 810a04a:	681b      	ldr	r3, [r3, #0]
 810a04c:	430a      	orrs	r2, r1
 810a04e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810a050:	687b      	ldr	r3, [r7, #4]
 810a052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a054:	f003 0310 	and.w	r3, r3, #16
 810a058:	2b00      	cmp	r3, #0
 810a05a:	d00a      	beq.n	810a072 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 810a05c:	687b      	ldr	r3, [r7, #4]
 810a05e:	681b      	ldr	r3, [r3, #0]
 810a060:	689b      	ldr	r3, [r3, #8]
 810a062:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 810a066:	687b      	ldr	r3, [r7, #4]
 810a068:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 810a06a:	687b      	ldr	r3, [r7, #4]
 810a06c:	681b      	ldr	r3, [r3, #0]
 810a06e:	430a      	orrs	r2, r1
 810a070:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810a072:	687b      	ldr	r3, [r7, #4]
 810a074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a076:	f003 0320 	and.w	r3, r3, #32
 810a07a:	2b00      	cmp	r3, #0
 810a07c:	d00a      	beq.n	810a094 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810a07e:	687b      	ldr	r3, [r7, #4]
 810a080:	681b      	ldr	r3, [r3, #0]
 810a082:	689b      	ldr	r3, [r3, #8]
 810a084:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 810a088:	687b      	ldr	r3, [r7, #4]
 810a08a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 810a08c:	687b      	ldr	r3, [r7, #4]
 810a08e:	681b      	ldr	r3, [r3, #0]
 810a090:	430a      	orrs	r2, r1
 810a092:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810a094:	687b      	ldr	r3, [r7, #4]
 810a096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810a09c:	2b00      	cmp	r3, #0
 810a09e:	d01a      	beq.n	810a0d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 810a0a0:	687b      	ldr	r3, [r7, #4]
 810a0a2:	681b      	ldr	r3, [r3, #0]
 810a0a4:	685b      	ldr	r3, [r3, #4]
 810a0a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 810a0aa:	687b      	ldr	r3, [r7, #4]
 810a0ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810a0ae:	687b      	ldr	r3, [r7, #4]
 810a0b0:	681b      	ldr	r3, [r3, #0]
 810a0b2:	430a      	orrs	r2, r1
 810a0b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810a0b6:	687b      	ldr	r3, [r7, #4]
 810a0b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810a0ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810a0be:	d10a      	bne.n	810a0d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 810a0c0:	687b      	ldr	r3, [r7, #4]
 810a0c2:	681b      	ldr	r3, [r3, #0]
 810a0c4:	685b      	ldr	r3, [r3, #4]
 810a0c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 810a0ca:	687b      	ldr	r3, [r7, #4]
 810a0cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 810a0ce:	687b      	ldr	r3, [r7, #4]
 810a0d0:	681b      	ldr	r3, [r3, #0]
 810a0d2:	430a      	orrs	r2, r1
 810a0d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810a0d6:	687b      	ldr	r3, [r7, #4]
 810a0d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a0da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810a0de:	2b00      	cmp	r3, #0
 810a0e0:	d00a      	beq.n	810a0f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810a0e2:	687b      	ldr	r3, [r7, #4]
 810a0e4:	681b      	ldr	r3, [r3, #0]
 810a0e6:	685b      	ldr	r3, [r3, #4]
 810a0e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 810a0ec:	687b      	ldr	r3, [r7, #4]
 810a0ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 810a0f0:	687b      	ldr	r3, [r7, #4]
 810a0f2:	681b      	ldr	r3, [r3, #0]
 810a0f4:	430a      	orrs	r2, r1
 810a0f6:	605a      	str	r2, [r3, #4]
  }
}
 810a0f8:	bf00      	nop
 810a0fa:	370c      	adds	r7, #12
 810a0fc:	46bd      	mov	sp, r7
 810a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a102:	4770      	bx	lr

0810a104 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810a104:	b580      	push	{r7, lr}
 810a106:	b098      	sub	sp, #96	; 0x60
 810a108:	af02      	add	r7, sp, #8
 810a10a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810a10c:	687b      	ldr	r3, [r7, #4]
 810a10e:	2200      	movs	r2, #0
 810a110:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 810a114:	f7f7 f906 	bl	8101324 <HAL_GetTick>
 810a118:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810a11a:	687b      	ldr	r3, [r7, #4]
 810a11c:	681b      	ldr	r3, [r3, #0]
 810a11e:	681b      	ldr	r3, [r3, #0]
 810a120:	f003 0308 	and.w	r3, r3, #8
 810a124:	2b08      	cmp	r3, #8
 810a126:	d12f      	bne.n	810a188 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810a128:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810a12c:	9300      	str	r3, [sp, #0]
 810a12e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 810a130:	2200      	movs	r2, #0
 810a132:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 810a136:	6878      	ldr	r0, [r7, #4]
 810a138:	f000 f88e 	bl	810a258 <UART_WaitOnFlagUntilTimeout>
 810a13c:	4603      	mov	r3, r0
 810a13e:	2b00      	cmp	r3, #0
 810a140:	d022      	beq.n	810a188 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 810a142:	687b      	ldr	r3, [r7, #4]
 810a144:	681b      	ldr	r3, [r3, #0]
 810a146:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a14a:	e853 3f00 	ldrex	r3, [r3]
 810a14e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 810a150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810a152:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 810a156:	653b      	str	r3, [r7, #80]	; 0x50
 810a158:	687b      	ldr	r3, [r7, #4]
 810a15a:	681b      	ldr	r3, [r3, #0]
 810a15c:	461a      	mov	r2, r3
 810a15e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 810a160:	647b      	str	r3, [r7, #68]	; 0x44
 810a162:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a164:	6c39      	ldr	r1, [r7, #64]	; 0x40
 810a166:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 810a168:	e841 2300 	strex	r3, r2, [r1]
 810a16c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 810a16e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810a170:	2b00      	cmp	r3, #0
 810a172:	d1e6      	bne.n	810a142 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 810a174:	687b      	ldr	r3, [r7, #4]
 810a176:	2220      	movs	r2, #32
 810a178:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 810a17c:	687b      	ldr	r3, [r7, #4]
 810a17e:	2200      	movs	r2, #0
 810a180:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810a184:	2303      	movs	r3, #3
 810a186:	e063      	b.n	810a250 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810a188:	687b      	ldr	r3, [r7, #4]
 810a18a:	681b      	ldr	r3, [r3, #0]
 810a18c:	681b      	ldr	r3, [r3, #0]
 810a18e:	f003 0304 	and.w	r3, r3, #4
 810a192:	2b04      	cmp	r3, #4
 810a194:	d149      	bne.n	810a22a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810a196:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810a19a:	9300      	str	r3, [sp, #0]
 810a19c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 810a19e:	2200      	movs	r2, #0
 810a1a0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 810a1a4:	6878      	ldr	r0, [r7, #4]
 810a1a6:	f000 f857 	bl	810a258 <UART_WaitOnFlagUntilTimeout>
 810a1aa:	4603      	mov	r3, r0
 810a1ac:	2b00      	cmp	r3, #0
 810a1ae:	d03c      	beq.n	810a22a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810a1b0:	687b      	ldr	r3, [r7, #4]
 810a1b2:	681b      	ldr	r3, [r3, #0]
 810a1b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810a1b8:	e853 3f00 	ldrex	r3, [r3]
 810a1bc:	623b      	str	r3, [r7, #32]
   return(result);
 810a1be:	6a3b      	ldr	r3, [r7, #32]
 810a1c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 810a1c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 810a1c6:	687b      	ldr	r3, [r7, #4]
 810a1c8:	681b      	ldr	r3, [r3, #0]
 810a1ca:	461a      	mov	r2, r3
 810a1cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810a1ce:	633b      	str	r3, [r7, #48]	; 0x30
 810a1d0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a1d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 810a1d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810a1d6:	e841 2300 	strex	r3, r2, [r1]
 810a1da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 810a1dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a1de:	2b00      	cmp	r3, #0
 810a1e0:	d1e6      	bne.n	810a1b0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810a1e2:	687b      	ldr	r3, [r7, #4]
 810a1e4:	681b      	ldr	r3, [r3, #0]
 810a1e6:	3308      	adds	r3, #8
 810a1e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a1ea:	693b      	ldr	r3, [r7, #16]
 810a1ec:	e853 3f00 	ldrex	r3, [r3]
 810a1f0:	60fb      	str	r3, [r7, #12]
   return(result);
 810a1f2:	68fb      	ldr	r3, [r7, #12]
 810a1f4:	f023 0301 	bic.w	r3, r3, #1
 810a1f8:	64bb      	str	r3, [r7, #72]	; 0x48
 810a1fa:	687b      	ldr	r3, [r7, #4]
 810a1fc:	681b      	ldr	r3, [r3, #0]
 810a1fe:	3308      	adds	r3, #8
 810a200:	6cba      	ldr	r2, [r7, #72]	; 0x48
 810a202:	61fa      	str	r2, [r7, #28]
 810a204:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a206:	69b9      	ldr	r1, [r7, #24]
 810a208:	69fa      	ldr	r2, [r7, #28]
 810a20a:	e841 2300 	strex	r3, r2, [r1]
 810a20e:	617b      	str	r3, [r7, #20]
   return(result);
 810a210:	697b      	ldr	r3, [r7, #20]
 810a212:	2b00      	cmp	r3, #0
 810a214:	d1e5      	bne.n	810a1e2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 810a216:	687b      	ldr	r3, [r7, #4]
 810a218:	2220      	movs	r2, #32
 810a21a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 810a21e:	687b      	ldr	r3, [r7, #4]
 810a220:	2200      	movs	r2, #0
 810a222:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810a226:	2303      	movs	r3, #3
 810a228:	e012      	b.n	810a250 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810a22a:	687b      	ldr	r3, [r7, #4]
 810a22c:	2220      	movs	r2, #32
 810a22e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 810a232:	687b      	ldr	r3, [r7, #4]
 810a234:	2220      	movs	r2, #32
 810a236:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810a23a:	687b      	ldr	r3, [r7, #4]
 810a23c:	2200      	movs	r2, #0
 810a23e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 810a240:	687b      	ldr	r3, [r7, #4]
 810a242:	2200      	movs	r2, #0
 810a244:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 810a246:	687b      	ldr	r3, [r7, #4]
 810a248:	2200      	movs	r2, #0
 810a24a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 810a24e:	2300      	movs	r3, #0
}
 810a250:	4618      	mov	r0, r3
 810a252:	3758      	adds	r7, #88	; 0x58
 810a254:	46bd      	mov	sp, r7
 810a256:	bd80      	pop	{r7, pc}

0810a258 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810a258:	b580      	push	{r7, lr}
 810a25a:	b084      	sub	sp, #16
 810a25c:	af00      	add	r7, sp, #0
 810a25e:	60f8      	str	r0, [r7, #12]
 810a260:	60b9      	str	r1, [r7, #8]
 810a262:	603b      	str	r3, [r7, #0]
 810a264:	4613      	mov	r3, r2
 810a266:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810a268:	e049      	b.n	810a2fe <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810a26a:	69bb      	ldr	r3, [r7, #24]
 810a26c:	f1b3 3fff 	cmp.w	r3, #4294967295
 810a270:	d045      	beq.n	810a2fe <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810a272:	f7f7 f857 	bl	8101324 <HAL_GetTick>
 810a276:	4602      	mov	r2, r0
 810a278:	683b      	ldr	r3, [r7, #0]
 810a27a:	1ad3      	subs	r3, r2, r3
 810a27c:	69ba      	ldr	r2, [r7, #24]
 810a27e:	429a      	cmp	r2, r3
 810a280:	d302      	bcc.n	810a288 <UART_WaitOnFlagUntilTimeout+0x30>
 810a282:	69bb      	ldr	r3, [r7, #24]
 810a284:	2b00      	cmp	r3, #0
 810a286:	d101      	bne.n	810a28c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 810a288:	2303      	movs	r3, #3
 810a28a:	e048      	b.n	810a31e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 810a28c:	68fb      	ldr	r3, [r7, #12]
 810a28e:	681b      	ldr	r3, [r3, #0]
 810a290:	681b      	ldr	r3, [r3, #0]
 810a292:	f003 0304 	and.w	r3, r3, #4
 810a296:	2b00      	cmp	r3, #0
 810a298:	d031      	beq.n	810a2fe <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 810a29a:	68fb      	ldr	r3, [r7, #12]
 810a29c:	681b      	ldr	r3, [r3, #0]
 810a29e:	69db      	ldr	r3, [r3, #28]
 810a2a0:	f003 0308 	and.w	r3, r3, #8
 810a2a4:	2b08      	cmp	r3, #8
 810a2a6:	d110      	bne.n	810a2ca <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810a2a8:	68fb      	ldr	r3, [r7, #12]
 810a2aa:	681b      	ldr	r3, [r3, #0]
 810a2ac:	2208      	movs	r2, #8
 810a2ae:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 810a2b0:	68f8      	ldr	r0, [r7, #12]
 810a2b2:	f000 f838 	bl	810a326 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 810a2b6:	68fb      	ldr	r3, [r7, #12]
 810a2b8:	2208      	movs	r2, #8
 810a2ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 810a2be:	68fb      	ldr	r3, [r7, #12]
 810a2c0:	2200      	movs	r2, #0
 810a2c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 810a2c6:	2301      	movs	r3, #1
 810a2c8:	e029      	b.n	810a31e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810a2ca:	68fb      	ldr	r3, [r7, #12]
 810a2cc:	681b      	ldr	r3, [r3, #0]
 810a2ce:	69db      	ldr	r3, [r3, #28]
 810a2d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810a2d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810a2d8:	d111      	bne.n	810a2fe <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810a2da:	68fb      	ldr	r3, [r7, #12]
 810a2dc:	681b      	ldr	r3, [r3, #0]
 810a2de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810a2e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810a2e4:	68f8      	ldr	r0, [r7, #12]
 810a2e6:	f000 f81e 	bl	810a326 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810a2ea:	68fb      	ldr	r3, [r7, #12]
 810a2ec:	2220      	movs	r2, #32
 810a2ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810a2f2:	68fb      	ldr	r3, [r7, #12]
 810a2f4:	2200      	movs	r2, #0
 810a2f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 810a2fa:	2303      	movs	r3, #3
 810a2fc:	e00f      	b.n	810a31e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810a2fe:	68fb      	ldr	r3, [r7, #12]
 810a300:	681b      	ldr	r3, [r3, #0]
 810a302:	69da      	ldr	r2, [r3, #28]
 810a304:	68bb      	ldr	r3, [r7, #8]
 810a306:	4013      	ands	r3, r2
 810a308:	68ba      	ldr	r2, [r7, #8]
 810a30a:	429a      	cmp	r2, r3
 810a30c:	bf0c      	ite	eq
 810a30e:	2301      	moveq	r3, #1
 810a310:	2300      	movne	r3, #0
 810a312:	b2db      	uxtb	r3, r3
 810a314:	461a      	mov	r2, r3
 810a316:	79fb      	ldrb	r3, [r7, #7]
 810a318:	429a      	cmp	r2, r3
 810a31a:	d0a6      	beq.n	810a26a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810a31c:	2300      	movs	r3, #0
}
 810a31e:	4618      	mov	r0, r3
 810a320:	3710      	adds	r7, #16
 810a322:	46bd      	mov	sp, r7
 810a324:	bd80      	pop	{r7, pc}

0810a326 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 810a326:	b480      	push	{r7}
 810a328:	b095      	sub	sp, #84	; 0x54
 810a32a:	af00      	add	r7, sp, #0
 810a32c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810a32e:	687b      	ldr	r3, [r7, #4]
 810a330:	681b      	ldr	r3, [r3, #0]
 810a332:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810a336:	e853 3f00 	ldrex	r3, [r3]
 810a33a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 810a33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a33e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 810a342:	64fb      	str	r3, [r7, #76]	; 0x4c
 810a344:	687b      	ldr	r3, [r7, #4]
 810a346:	681b      	ldr	r3, [r3, #0]
 810a348:	461a      	mov	r2, r3
 810a34a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810a34c:	643b      	str	r3, [r7, #64]	; 0x40
 810a34e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a350:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 810a352:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 810a354:	e841 2300 	strex	r3, r2, [r1]
 810a358:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 810a35a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a35c:	2b00      	cmp	r3, #0
 810a35e:	d1e6      	bne.n	810a32e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810a360:	687b      	ldr	r3, [r7, #4]
 810a362:	681b      	ldr	r3, [r3, #0]
 810a364:	3308      	adds	r3, #8
 810a366:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a368:	6a3b      	ldr	r3, [r7, #32]
 810a36a:	e853 3f00 	ldrex	r3, [r3]
 810a36e:	61fb      	str	r3, [r7, #28]
   return(result);
 810a370:	69fb      	ldr	r3, [r7, #28]
 810a372:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810a376:	f023 0301 	bic.w	r3, r3, #1
 810a37a:	64bb      	str	r3, [r7, #72]	; 0x48
 810a37c:	687b      	ldr	r3, [r7, #4]
 810a37e:	681b      	ldr	r3, [r3, #0]
 810a380:	3308      	adds	r3, #8
 810a382:	6cba      	ldr	r2, [r7, #72]	; 0x48
 810a384:	62fa      	str	r2, [r7, #44]	; 0x2c
 810a386:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a388:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810a38a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810a38c:	e841 2300 	strex	r3, r2, [r1]
 810a390:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 810a392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810a394:	2b00      	cmp	r3, #0
 810a396:	d1e3      	bne.n	810a360 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810a398:	687b      	ldr	r3, [r7, #4]
 810a39a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810a39c:	2b01      	cmp	r3, #1
 810a39e:	d118      	bne.n	810a3d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810a3a0:	687b      	ldr	r3, [r7, #4]
 810a3a2:	681b      	ldr	r3, [r3, #0]
 810a3a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a3a6:	68fb      	ldr	r3, [r7, #12]
 810a3a8:	e853 3f00 	ldrex	r3, [r3]
 810a3ac:	60bb      	str	r3, [r7, #8]
   return(result);
 810a3ae:	68bb      	ldr	r3, [r7, #8]
 810a3b0:	f023 0310 	bic.w	r3, r3, #16
 810a3b4:	647b      	str	r3, [r7, #68]	; 0x44
 810a3b6:	687b      	ldr	r3, [r7, #4]
 810a3b8:	681b      	ldr	r3, [r3, #0]
 810a3ba:	461a      	mov	r2, r3
 810a3bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 810a3be:	61bb      	str	r3, [r7, #24]
 810a3c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a3c2:	6979      	ldr	r1, [r7, #20]
 810a3c4:	69ba      	ldr	r2, [r7, #24]
 810a3c6:	e841 2300 	strex	r3, r2, [r1]
 810a3ca:	613b      	str	r3, [r7, #16]
   return(result);
 810a3cc:	693b      	ldr	r3, [r7, #16]
 810a3ce:	2b00      	cmp	r3, #0
 810a3d0:	d1e6      	bne.n	810a3a0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 810a3d2:	687b      	ldr	r3, [r7, #4]
 810a3d4:	2220      	movs	r2, #32
 810a3d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810a3da:	687b      	ldr	r3, [r7, #4]
 810a3dc:	2200      	movs	r2, #0
 810a3de:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 810a3e0:	687b      	ldr	r3, [r7, #4]
 810a3e2:	2200      	movs	r2, #0
 810a3e4:	675a      	str	r2, [r3, #116]	; 0x74
}
 810a3e6:	bf00      	nop
 810a3e8:	3754      	adds	r7, #84	; 0x54
 810a3ea:	46bd      	mov	sp, r7
 810a3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a3f0:	4770      	bx	lr

0810a3f2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 810a3f2:	b580      	push	{r7, lr}
 810a3f4:	b084      	sub	sp, #16
 810a3f6:	af00      	add	r7, sp, #0
 810a3f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810a3fa:	687b      	ldr	r3, [r7, #4]
 810a3fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a3fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 810a400:	68fb      	ldr	r3, [r7, #12]
 810a402:	2200      	movs	r2, #0
 810a404:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 810a408:	68fb      	ldr	r3, [r7, #12]
 810a40a:	2200      	movs	r2, #0
 810a40c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 810a410:	68f8      	ldr	r0, [r7, #12]
 810a412:	f7ff f857 	bl	81094c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810a416:	bf00      	nop
 810a418:	3710      	adds	r7, #16
 810a41a:	46bd      	mov	sp, r7
 810a41c:	bd80      	pop	{r7, pc}

0810a41e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 810a41e:	b580      	push	{r7, lr}
 810a420:	b088      	sub	sp, #32
 810a422:	af00      	add	r7, sp, #0
 810a424:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 810a426:	687b      	ldr	r3, [r7, #4]
 810a428:	681b      	ldr	r3, [r3, #0]
 810a42a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a42c:	68fb      	ldr	r3, [r7, #12]
 810a42e:	e853 3f00 	ldrex	r3, [r3]
 810a432:	60bb      	str	r3, [r7, #8]
   return(result);
 810a434:	68bb      	ldr	r3, [r7, #8]
 810a436:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 810a43a:	61fb      	str	r3, [r7, #28]
 810a43c:	687b      	ldr	r3, [r7, #4]
 810a43e:	681b      	ldr	r3, [r3, #0]
 810a440:	461a      	mov	r2, r3
 810a442:	69fb      	ldr	r3, [r7, #28]
 810a444:	61bb      	str	r3, [r7, #24]
 810a446:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a448:	6979      	ldr	r1, [r7, #20]
 810a44a:	69ba      	ldr	r2, [r7, #24]
 810a44c:	e841 2300 	strex	r3, r2, [r1]
 810a450:	613b      	str	r3, [r7, #16]
   return(result);
 810a452:	693b      	ldr	r3, [r7, #16]
 810a454:	2b00      	cmp	r3, #0
 810a456:	d1e6      	bne.n	810a426 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 810a458:	687b      	ldr	r3, [r7, #4]
 810a45a:	2220      	movs	r2, #32
 810a45c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 810a460:	687b      	ldr	r3, [r7, #4]
 810a462:	2200      	movs	r2, #0
 810a464:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 810a466:	6878      	ldr	r0, [r7, #4]
 810a468:	f7ff f822 	bl	81094b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810a46c:	bf00      	nop
 810a46e:	3720      	adds	r7, #32
 810a470:	46bd      	mov	sp, r7
 810a472:	bd80      	pop	{r7, pc}

0810a474 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 810a474:	b480      	push	{r7}
 810a476:	b083      	sub	sp, #12
 810a478:	af00      	add	r7, sp, #0
 810a47a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 810a47c:	bf00      	nop
 810a47e:	370c      	adds	r7, #12
 810a480:	46bd      	mov	sp, r7
 810a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a486:	4770      	bx	lr

0810a488 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 810a488:	b480      	push	{r7}
 810a48a:	b083      	sub	sp, #12
 810a48c:	af00      	add	r7, sp, #0
 810a48e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 810a490:	bf00      	nop
 810a492:	370c      	adds	r7, #12
 810a494:	46bd      	mov	sp, r7
 810a496:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a49a:	4770      	bx	lr

0810a49c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 810a49c:	b480      	push	{r7}
 810a49e:	b083      	sub	sp, #12
 810a4a0:	af00      	add	r7, sp, #0
 810a4a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 810a4a4:	bf00      	nop
 810a4a6:	370c      	adds	r7, #12
 810a4a8:	46bd      	mov	sp, r7
 810a4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a4ae:	4770      	bx	lr

0810a4b0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810a4b0:	b480      	push	{r7}
 810a4b2:	b085      	sub	sp, #20
 810a4b4:	af00      	add	r7, sp, #0
 810a4b6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810a4b8:	687b      	ldr	r3, [r7, #4]
 810a4ba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 810a4be:	2b01      	cmp	r3, #1
 810a4c0:	d101      	bne.n	810a4c6 <HAL_UARTEx_DisableFifoMode+0x16>
 810a4c2:	2302      	movs	r3, #2
 810a4c4:	e027      	b.n	810a516 <HAL_UARTEx_DisableFifoMode+0x66>
 810a4c6:	687b      	ldr	r3, [r7, #4]
 810a4c8:	2201      	movs	r2, #1
 810a4ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810a4ce:	687b      	ldr	r3, [r7, #4]
 810a4d0:	2224      	movs	r2, #36	; 0x24
 810a4d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810a4d6:	687b      	ldr	r3, [r7, #4]
 810a4d8:	681b      	ldr	r3, [r3, #0]
 810a4da:	681b      	ldr	r3, [r3, #0]
 810a4dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810a4de:	687b      	ldr	r3, [r7, #4]
 810a4e0:	681b      	ldr	r3, [r3, #0]
 810a4e2:	681a      	ldr	r2, [r3, #0]
 810a4e4:	687b      	ldr	r3, [r7, #4]
 810a4e6:	681b      	ldr	r3, [r3, #0]
 810a4e8:	f022 0201 	bic.w	r2, r2, #1
 810a4ec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 810a4ee:	68fb      	ldr	r3, [r7, #12]
 810a4f0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 810a4f4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810a4f6:	687b      	ldr	r3, [r7, #4]
 810a4f8:	2200      	movs	r2, #0
 810a4fa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810a4fc:	687b      	ldr	r3, [r7, #4]
 810a4fe:	681b      	ldr	r3, [r3, #0]
 810a500:	68fa      	ldr	r2, [r7, #12]
 810a502:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810a504:	687b      	ldr	r3, [r7, #4]
 810a506:	2220      	movs	r2, #32
 810a508:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810a50c:	687b      	ldr	r3, [r7, #4]
 810a50e:	2200      	movs	r2, #0
 810a510:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 810a514:	2300      	movs	r3, #0
}
 810a516:	4618      	mov	r0, r3
 810a518:	3714      	adds	r7, #20
 810a51a:	46bd      	mov	sp, r7
 810a51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a520:	4770      	bx	lr

0810a522 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810a522:	b580      	push	{r7, lr}
 810a524:	b084      	sub	sp, #16
 810a526:	af00      	add	r7, sp, #0
 810a528:	6078      	str	r0, [r7, #4]
 810a52a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810a52c:	687b      	ldr	r3, [r7, #4]
 810a52e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 810a532:	2b01      	cmp	r3, #1
 810a534:	d101      	bne.n	810a53a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 810a536:	2302      	movs	r3, #2
 810a538:	e02d      	b.n	810a596 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810a53a:	687b      	ldr	r3, [r7, #4]
 810a53c:	2201      	movs	r2, #1
 810a53e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810a542:	687b      	ldr	r3, [r7, #4]
 810a544:	2224      	movs	r2, #36	; 0x24
 810a546:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810a54a:	687b      	ldr	r3, [r7, #4]
 810a54c:	681b      	ldr	r3, [r3, #0]
 810a54e:	681b      	ldr	r3, [r3, #0]
 810a550:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810a552:	687b      	ldr	r3, [r7, #4]
 810a554:	681b      	ldr	r3, [r3, #0]
 810a556:	681a      	ldr	r2, [r3, #0]
 810a558:	687b      	ldr	r3, [r7, #4]
 810a55a:	681b      	ldr	r3, [r3, #0]
 810a55c:	f022 0201 	bic.w	r2, r2, #1
 810a560:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810a562:	687b      	ldr	r3, [r7, #4]
 810a564:	681b      	ldr	r3, [r3, #0]
 810a566:	689b      	ldr	r3, [r3, #8]
 810a568:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 810a56c:	687b      	ldr	r3, [r7, #4]
 810a56e:	681b      	ldr	r3, [r3, #0]
 810a570:	683a      	ldr	r2, [r7, #0]
 810a572:	430a      	orrs	r2, r1
 810a574:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810a576:	6878      	ldr	r0, [r7, #4]
 810a578:	f000 f850 	bl	810a61c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810a57c:	687b      	ldr	r3, [r7, #4]
 810a57e:	681b      	ldr	r3, [r3, #0]
 810a580:	68fa      	ldr	r2, [r7, #12]
 810a582:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810a584:	687b      	ldr	r3, [r7, #4]
 810a586:	2220      	movs	r2, #32
 810a588:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810a58c:	687b      	ldr	r3, [r7, #4]
 810a58e:	2200      	movs	r2, #0
 810a590:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 810a594:	2300      	movs	r3, #0
}
 810a596:	4618      	mov	r0, r3
 810a598:	3710      	adds	r7, #16
 810a59a:	46bd      	mov	sp, r7
 810a59c:	bd80      	pop	{r7, pc}

0810a59e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810a59e:	b580      	push	{r7, lr}
 810a5a0:	b084      	sub	sp, #16
 810a5a2:	af00      	add	r7, sp, #0
 810a5a4:	6078      	str	r0, [r7, #4]
 810a5a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810a5a8:	687b      	ldr	r3, [r7, #4]
 810a5aa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 810a5ae:	2b01      	cmp	r3, #1
 810a5b0:	d101      	bne.n	810a5b6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810a5b2:	2302      	movs	r3, #2
 810a5b4:	e02d      	b.n	810a612 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810a5b6:	687b      	ldr	r3, [r7, #4]
 810a5b8:	2201      	movs	r2, #1
 810a5ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810a5be:	687b      	ldr	r3, [r7, #4]
 810a5c0:	2224      	movs	r2, #36	; 0x24
 810a5c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810a5c6:	687b      	ldr	r3, [r7, #4]
 810a5c8:	681b      	ldr	r3, [r3, #0]
 810a5ca:	681b      	ldr	r3, [r3, #0]
 810a5cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810a5ce:	687b      	ldr	r3, [r7, #4]
 810a5d0:	681b      	ldr	r3, [r3, #0]
 810a5d2:	681a      	ldr	r2, [r3, #0]
 810a5d4:	687b      	ldr	r3, [r7, #4]
 810a5d6:	681b      	ldr	r3, [r3, #0]
 810a5d8:	f022 0201 	bic.w	r2, r2, #1
 810a5dc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810a5de:	687b      	ldr	r3, [r7, #4]
 810a5e0:	681b      	ldr	r3, [r3, #0]
 810a5e2:	689b      	ldr	r3, [r3, #8]
 810a5e4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 810a5e8:	687b      	ldr	r3, [r7, #4]
 810a5ea:	681b      	ldr	r3, [r3, #0]
 810a5ec:	683a      	ldr	r2, [r7, #0]
 810a5ee:	430a      	orrs	r2, r1
 810a5f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810a5f2:	6878      	ldr	r0, [r7, #4]
 810a5f4:	f000 f812 	bl	810a61c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810a5f8:	687b      	ldr	r3, [r7, #4]
 810a5fa:	681b      	ldr	r3, [r3, #0]
 810a5fc:	68fa      	ldr	r2, [r7, #12]
 810a5fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810a600:	687b      	ldr	r3, [r7, #4]
 810a602:	2220      	movs	r2, #32
 810a604:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810a608:	687b      	ldr	r3, [r7, #4]
 810a60a:	2200      	movs	r2, #0
 810a60c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 810a610:	2300      	movs	r3, #0
}
 810a612:	4618      	mov	r0, r3
 810a614:	3710      	adds	r7, #16
 810a616:	46bd      	mov	sp, r7
 810a618:	bd80      	pop	{r7, pc}
	...

0810a61c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810a61c:	b480      	push	{r7}
 810a61e:	b085      	sub	sp, #20
 810a620:	af00      	add	r7, sp, #0
 810a622:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810a624:	687b      	ldr	r3, [r7, #4]
 810a626:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810a628:	2b00      	cmp	r3, #0
 810a62a:	d108      	bne.n	810a63e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 810a62c:	687b      	ldr	r3, [r7, #4]
 810a62e:	2201      	movs	r2, #1
 810a630:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 810a634:	687b      	ldr	r3, [r7, #4]
 810a636:	2201      	movs	r2, #1
 810a638:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810a63c:	e031      	b.n	810a6a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810a63e:	2310      	movs	r3, #16
 810a640:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810a642:	2310      	movs	r3, #16
 810a644:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810a646:	687b      	ldr	r3, [r7, #4]
 810a648:	681b      	ldr	r3, [r3, #0]
 810a64a:	689b      	ldr	r3, [r3, #8]
 810a64c:	0e5b      	lsrs	r3, r3, #25
 810a64e:	b2db      	uxtb	r3, r3
 810a650:	f003 0307 	and.w	r3, r3, #7
 810a654:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810a656:	687b      	ldr	r3, [r7, #4]
 810a658:	681b      	ldr	r3, [r3, #0]
 810a65a:	689b      	ldr	r3, [r3, #8]
 810a65c:	0f5b      	lsrs	r3, r3, #29
 810a65e:	b2db      	uxtb	r3, r3
 810a660:	f003 0307 	and.w	r3, r3, #7
 810a664:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810a666:	7bbb      	ldrb	r3, [r7, #14]
 810a668:	7b3a      	ldrb	r2, [r7, #12]
 810a66a:	4911      	ldr	r1, [pc, #68]	; (810a6b0 <UARTEx_SetNbDataToProcess+0x94>)
 810a66c:	5c8a      	ldrb	r2, [r1, r2]
 810a66e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810a672:	7b3a      	ldrb	r2, [r7, #12]
 810a674:	490f      	ldr	r1, [pc, #60]	; (810a6b4 <UARTEx_SetNbDataToProcess+0x98>)
 810a676:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810a678:	fb93 f3f2 	sdiv	r3, r3, r2
 810a67c:	b29a      	uxth	r2, r3
 810a67e:	687b      	ldr	r3, [r7, #4]
 810a680:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810a684:	7bfb      	ldrb	r3, [r7, #15]
 810a686:	7b7a      	ldrb	r2, [r7, #13]
 810a688:	4909      	ldr	r1, [pc, #36]	; (810a6b0 <UARTEx_SetNbDataToProcess+0x94>)
 810a68a:	5c8a      	ldrb	r2, [r1, r2]
 810a68c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 810a690:	7b7a      	ldrb	r2, [r7, #13]
 810a692:	4908      	ldr	r1, [pc, #32]	; (810a6b4 <UARTEx_SetNbDataToProcess+0x98>)
 810a694:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810a696:	fb93 f3f2 	sdiv	r3, r3, r2
 810a69a:	b29a      	uxth	r2, r3
 810a69c:	687b      	ldr	r3, [r7, #4]
 810a69e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 810a6a2:	bf00      	nop
 810a6a4:	3714      	adds	r7, #20
 810a6a6:	46bd      	mov	sp, r7
 810a6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a6ac:	4770      	bx	lr
 810a6ae:	bf00      	nop
 810a6b0:	0810a758 	.word	0x0810a758
 810a6b4:	0810a760 	.word	0x0810a760

0810a6b8 <memset>:
 810a6b8:	4402      	add	r2, r0
 810a6ba:	4603      	mov	r3, r0
 810a6bc:	4293      	cmp	r3, r2
 810a6be:	d100      	bne.n	810a6c2 <memset+0xa>
 810a6c0:	4770      	bx	lr
 810a6c2:	f803 1b01 	strb.w	r1, [r3], #1
 810a6c6:	e7f9      	b.n	810a6bc <memset+0x4>

0810a6c8 <__libc_init_array>:
 810a6c8:	b570      	push	{r4, r5, r6, lr}
 810a6ca:	4d0d      	ldr	r5, [pc, #52]	; (810a700 <__libc_init_array+0x38>)
 810a6cc:	4c0d      	ldr	r4, [pc, #52]	; (810a704 <__libc_init_array+0x3c>)
 810a6ce:	1b64      	subs	r4, r4, r5
 810a6d0:	10a4      	asrs	r4, r4, #2
 810a6d2:	2600      	movs	r6, #0
 810a6d4:	42a6      	cmp	r6, r4
 810a6d6:	d109      	bne.n	810a6ec <__libc_init_array+0x24>
 810a6d8:	4d0b      	ldr	r5, [pc, #44]	; (810a708 <__libc_init_array+0x40>)
 810a6da:	4c0c      	ldr	r4, [pc, #48]	; (810a70c <__libc_init_array+0x44>)
 810a6dc:	f000 f818 	bl	810a710 <_init>
 810a6e0:	1b64      	subs	r4, r4, r5
 810a6e2:	10a4      	asrs	r4, r4, #2
 810a6e4:	2600      	movs	r6, #0
 810a6e6:	42a6      	cmp	r6, r4
 810a6e8:	d105      	bne.n	810a6f6 <__libc_init_array+0x2e>
 810a6ea:	bd70      	pop	{r4, r5, r6, pc}
 810a6ec:	f855 3b04 	ldr.w	r3, [r5], #4
 810a6f0:	4798      	blx	r3
 810a6f2:	3601      	adds	r6, #1
 810a6f4:	e7ee      	b.n	810a6d4 <__libc_init_array+0xc>
 810a6f6:	f855 3b04 	ldr.w	r3, [r5], #4
 810a6fa:	4798      	blx	r3
 810a6fc:	3601      	adds	r6, #1
 810a6fe:	e7f2      	b.n	810a6e6 <__libc_init_array+0x1e>
 810a700:	0810a770 	.word	0x0810a770
 810a704:	0810a770 	.word	0x0810a770
 810a708:	0810a770 	.word	0x0810a770
 810a70c:	0810a774 	.word	0x0810a774

0810a710 <_init>:
 810a710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810a712:	bf00      	nop
 810a714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810a716:	bc08      	pop	{r3}
 810a718:	469e      	mov	lr, r3
 810a71a:	4770      	bx	lr

0810a71c <_fini>:
 810a71c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810a71e:	bf00      	nop
 810a720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810a722:	bc08      	pop	{r3}
 810a724:	469e      	mov	lr, r3
 810a726:	4770      	bx	lr
