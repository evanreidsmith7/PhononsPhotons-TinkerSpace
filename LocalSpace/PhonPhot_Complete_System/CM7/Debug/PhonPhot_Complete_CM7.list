
PhonPhot_Complete_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002d4e4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000027cc  0802d784  0802d784  0003d784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 00000028  0802ff50  0802ff50  0003ff50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0802ff78  0802ff78  000c8ae0  2**0
                  CONTENTS
  5 .ARM          00000000  0802ff78  0802ff78  000c8ae0  2**0
                  CONTENTS
  6 .preinit_array 00000000  0802ff78  0802ff78  000c8ae0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000014  0802ff78  0802ff78  0003ff78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  0802ff8c  0802ff8c  0003ff8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000134  24000000  0802ff94  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000c5ec  24000134  080300c8  00040134  2**2
                  ALLOC
 11 ._user_heap_stack 00002000  2400c720  080300c8  0004c720  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  000c8ae0  2**0
                  CONTENTS, READONLY
 13 FontFlashSection 00000bd4  90000000  90000000  00060000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 TextFlashSection 0000021c  90000bd4  90000bd4  00060bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 ExtFlashSection 00067cf0  90000df0  90000df0  00060df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .comment      000000c2  00000000  00000000  000c8b0e  2**0
                  CONTENTS, READONLY
 17 .ipc_data     0000004c  30000000  30000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 18 .debug_info   000b6a09  00000000  00000000  000c8bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 00014d77  00000000  00000000  0017f5d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00004548  00000000  00000000  00194350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_rnglists 000032c6  00000000  00000000  00198898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  00013138  00000000  00000000  0019bb5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line   0005455c  00000000  00000000  001aec96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str    001b9033  00000000  00000000  002031f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_frame  000126c4  00000000  00000000  003bc228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 00000089  00000000  00000000  003ce8ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000134 	.word	0x24000134
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0802d76c 	.word	0x0802d76c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000138 	.word	0x24000138
 80002dc:	0802d76c 	.word	0x0802d76c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <IPCSetVoiceVolumeNormalized>:
{
  return shared_memory.voice_volume_normalized;
}

void IPCSetVoiceVolumeNormalized( float new_vol )
{
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	ed87 0a01 	vstr	s0, [r7, #4]
  shared_memory.voice_volume_normalized = new_vol;
 800038a:	4a04      	ldr	r2, [pc, #16]	; (800039c <IPCSetVoiceVolumeNormalized+0x1c>)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	6013      	str	r3, [r2, #0]
}
 8000390:	bf00      	nop
 8000392:	370c      	adds	r7, #12
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	30000000 	.word	0x30000000

080003a0 <IPCSetVoiceMuteState>:
{
  return shared_memory.voice_mute_active;
}

void IPCSetVoiceMuteState( boolean_t new_state )
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	4603      	mov	r3, r0
 80003a8:	71fb      	strb	r3, [r7, #7]
  shared_memory.voice_mute_active = new_state;
 80003aa:	4a04      	ldr	r2, [pc, #16]	; (80003bc <IPCSetVoiceMuteState+0x1c>)
 80003ac:	79fb      	ldrb	r3, [r7, #7]
 80003ae:	7113      	strb	r3, [r2, #4]
}
 80003b0:	bf00      	nop
 80003b2:	370c      	adds	r7, #12
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr
 80003bc:	30000000 	.word	0x30000000

080003c0 <IPCGetAnomalyDetectState>:

boolean_t IPCGetAnomalyDetectState( void )
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
  return shared_memory.anomaly_detection_active;
 80003c4:	4b03      	ldr	r3, [pc, #12]	; (80003d4 <IPCGetAnomalyDetectState+0x14>)
 80003c6:	795b      	ldrb	r3, [r3, #5]
 80003c8:	b2db      	uxtb	r3, r3
}
 80003ca:	4618      	mov	r0, r3
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	30000000 	.word	0x30000000

080003d8 <IPCGetAlarmMuteState>:
{
  shared_memory.anomaly_magnitude_db = new_mag;
}

boolean_t IPCGetAlarmMuteState( void )
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  return shared_memory.alarm_mute;
 80003dc:	4b03      	ldr	r3, [pc, #12]	; (80003ec <IPCGetAlarmMuteState+0x14>)
 80003de:	799b      	ldrb	r3, [r3, #6]
 80003e0:	b2db      	uxtb	r3, r3
}
 80003e2:	4618      	mov	r0, r3
 80003e4:	46bd      	mov	sp, r7
 80003e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ea:	4770      	bx	lr
 80003ec:	30000000 	.word	0x30000000

080003f0 <IPCSetAlarmMuteState>:

void IPCSetAlarmMuteState( boolean_t new_state )
{
 80003f0:	b480      	push	{r7}
 80003f2:	b083      	sub	sp, #12
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	4603      	mov	r3, r0
 80003f8:	71fb      	strb	r3, [r7, #7]
  shared_memory.alarm_mute = new_state;
 80003fa:	4a04      	ldr	r2, [pc, #16]	; (800040c <IPCSetAlarmMuteState+0x1c>)
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	7193      	strb	r3, [r2, #6]
}
 8000400:	bf00      	nop
 8000402:	370c      	adds	r7, #12
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr
 800040c:	30000000 	.word	0x30000000

08000410 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b084      	sub	sp, #16
 8000414:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000416:	f000 fc17 	bl	8000c48 <MPU_Config>
  /* Enable D-Cache---------------------------------------------------------*/
  //SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800041a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800041e:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000420:	bf00      	nop
 8000422:	4b46      	ldr	r3, [pc, #280]	; (800053c <main+0x12c>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800042a:	2b00      	cmp	r3, #0
 800042c:	d004      	beq.n	8000438 <main+0x28>
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	1e5a      	subs	r2, r3, #1
 8000432:	60fa      	str	r2, [r7, #12]
 8000434:	2b00      	cmp	r3, #0
 8000436:	dcf4      	bgt.n	8000422 <main+0x12>
  if ( timeout < 0 )
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	2b00      	cmp	r3, #0
 800043c:	da01      	bge.n	8000442 <main+0x32>
  {
    Error_Handler();
 800043e:	f000 fc4d 	bl	8000cdc <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000442:	f010 feed 	bl	8011220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000446:	f000 f88b 	bl	8000560 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800044a:	f000 f913 	bl	8000674 <PeriphCommonClock_Config>

  /* USER CODE BEGIN Boot_Mode_Sequence_2 */
  /* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
  HSEM notification */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 800044e:	4b3b      	ldr	r3, [pc, #236]	; (800053c <main+0x12c>)
 8000450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000454:	4a39      	ldr	r2, [pc, #228]	; (800053c <main+0x12c>)
 8000456:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800045a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800045e:	4b37      	ldr	r3, [pc, #220]	; (800053c <main+0x12c>)
 8000460:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000468:	60bb      	str	r3, [r7, #8]
 800046a:	68bb      	ldr	r3, [r7, #8]
  /*Take HSEM */
  HAL_HSEM_FastTake(HSEM_ID_0);
 800046c:	2000      	movs	r0, #0
 800046e:	f011 fe17 	bl	80120a0 <HAL_HSEM_FastTake>
  /*Release HSEM in order to notify the CPU2(CM4)*/
  HAL_HSEM_Release(HSEM_ID_0,0);
 8000472:	2100      	movs	r1, #0
 8000474:	2000      	movs	r0, #0
 8000476:	f011 fe2d 	bl	80120d4 <HAL_HSEM_Release>
  /* wait until CPU2 wakes up from stop mode */
  timeout = 0xFFFF;
 800047a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800047e:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000480:	bf00      	nop
 8000482:	4b2e      	ldr	r3, [pc, #184]	; (800053c <main+0x12c>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800048a:	2b00      	cmp	r3, #0
 800048c:	d104      	bne.n	8000498 <main+0x88>
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	1e5a      	subs	r2, r3, #1
 8000492:	60fa      	str	r2, [r7, #12]
 8000494:	2b00      	cmp	r3, #0
 8000496:	dcf4      	bgt.n	8000482 <main+0x72>
  if ( timeout < 0 )
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	2b00      	cmp	r3, #0
 800049c:	da01      	bge.n	80004a2 <main+0x92>
  {
    Error_Handler();
 800049e:	f000 fc1d 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE END Boot_Mode_Sequence_2 */

  /* USER CODE BEGIN SysInit */

  __HAL_RCC_DMA1_CLK_ENABLE();
 80004a2:	4b26      	ldr	r3, [pc, #152]	; (800053c <main+0x12c>)
 80004a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80004a8:	4a24      	ldr	r2, [pc, #144]	; (800053c <main+0x12c>)
 80004aa:	f043 0301 	orr.w	r3, r3, #1
 80004ae:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80004b2:	4b22      	ldr	r3, [pc, #136]	; (800053c <main+0x12c>)
 80004b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80004b8:	f003 0301 	and.w	r3, r3, #1
 80004bc:	607b      	str	r3, [r7, #4]
 80004be:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c0:	f000 fa9e 	bl	8000a00 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 80004c4:	f000 f9c6 	bl	8000854 <MX_QUADSPI_Init>
  MX_FMC_Init();
 80004c8:	f000 fa44 	bl	8000954 <MX_FMC_Init>
  MX_LTDC_Init();
 80004cc:	f000 f93e 	bl	800074c <MX_LTDC_Init>
  MX_CRC_Init();
 80004d0:	f000 f8fc 	bl	80006cc <MX_CRC_Init>
  MX_DMA2D_Init();
 80004d4:	f000 f91c 	bl	8000710 <MX_DMA2D_Init>
  MX_TIM4_Init();
 80004d8:	f000 f9ea 	bl	80008b0 <MX_TIM4_Init>
  MX_TouchGFX_Init();
 80004dc:	f001 f9fd 	bl	80018da <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */

  TIM4->SMCR &= ~TIM_SMCR_SMS;
 80004e0:	4b17      	ldr	r3, [pc, #92]	; (8000540 <main+0x130>)
 80004e2:	689a      	ldr	r2, [r3, #8]
 80004e4:	4916      	ldr	r1, [pc, #88]	; (8000540 <main+0x130>)
 80004e6:	4b17      	ldr	r3, [pc, #92]	; (8000544 <main+0x134>)
 80004e8:	4013      	ands	r3, r2
 80004ea:	608b      	str	r3, [r1, #8]
  // only need to set the low 3 bits of SMS
  TIM4->SMCR |= 0b011;
 80004ec:	4b14      	ldr	r3, [pc, #80]	; (8000540 <main+0x130>)
 80004ee:	689b      	ldr	r3, [r3, #8]
 80004f0:	4a13      	ldr	r2, [pc, #76]	; (8000540 <main+0x130>)
 80004f2:	f043 0303 	orr.w	r3, r3, #3
 80004f6:	6093      	str	r3, [r2, #8]

  // set timer channel inputs
  TIM4->CCMR1 |= (0x01 << 0) | (0x01 << 8);
 80004f8:	4b11      	ldr	r3, [pc, #68]	; (8000540 <main+0x130>)
 80004fa:	699a      	ldr	r2, [r3, #24]
 80004fc:	4910      	ldr	r1, [pc, #64]	; (8000540 <main+0x130>)
 80004fe:	f240 1301 	movw	r3, #257	; 0x101
 8000502:	4313      	orrs	r3, r2
 8000504:	618b      	str	r3, [r1, #24]

  // start/enable timer
  TIM4->CR1 |= TIM_CR1_CEN;
 8000506:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <main+0x130>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4a0d      	ldr	r2, [pc, #52]	; (8000540 <main+0x130>)
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000512:	f00a fe69 	bl	800b1e8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000516:	4a0c      	ldr	r2, [pc, #48]	; (8000548 <main+0x138>)
 8000518:	2100      	movs	r1, #0
 800051a:	480c      	ldr	r0, [pc, #48]	; (800054c <main+0x13c>)
 800051c:	f00a feae 	bl	800b27c <osThreadNew>
 8000520:	4603      	mov	r3, r0
 8000522:	4a0b      	ldr	r2, [pc, #44]	; (8000550 <main+0x140>)
 8000524:	6013      	str	r3, [r2, #0]

  /* creation of TouchGFXTask */
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000526:	4a0b      	ldr	r2, [pc, #44]	; (8000554 <main+0x144>)
 8000528:	2100      	movs	r1, #0
 800052a:	480b      	ldr	r0, [pc, #44]	; (8000558 <main+0x148>)
 800052c:	f00a fea6 	bl	800b27c <osThreadNew>
 8000530:	4603      	mov	r3, r0
 8000532:	4a0a      	ldr	r2, [pc, #40]	; (800055c <main+0x14c>)
 8000534:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000536:	f00a fe7b 	bl	800b230 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800053a:	e7fe      	b.n	800053a <main+0x12a>
 800053c:	58024400 	.word	0x58024400
 8000540:	40000800 	.word	0x40000800
 8000544:	fffefff8 	.word	0xfffefff8
 8000548:	0802e5f8 	.word	0x0802e5f8
 800054c:	08000c39 	.word	0x08000c39
 8000550:	24000350 	.word	0x24000350
 8000554:	0802e61c 	.word	0x0802e61c
 8000558:	080018e7 	.word	0x080018e7
 800055c:	24000354 	.word	0x24000354

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b09c      	sub	sp, #112	; 0x70
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800056a:	224c      	movs	r2, #76	; 0x4c
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f02c fa81 	bl	802ca76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	2220      	movs	r2, #32
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f02c fa7b 	bl	802ca76 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000580:	2004      	movs	r0, #4
 8000582:	f013 f911 	bl	80137a8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000586:	2300      	movs	r3, #0
 8000588:	603b      	str	r3, [r7, #0]
 800058a:	4b37      	ldr	r3, [pc, #220]	; (8000668 <SystemClock_Config+0x108>)
 800058c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800058e:	4a36      	ldr	r2, [pc, #216]	; (8000668 <SystemClock_Config+0x108>)
 8000590:	f023 0301 	bic.w	r3, r3, #1
 8000594:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000596:	4b34      	ldr	r3, [pc, #208]	; (8000668 <SystemClock_Config+0x108>)
 8000598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800059a:	f003 0301 	and.w	r3, r3, #1
 800059e:	603b      	str	r3, [r7, #0]
 80005a0:	4b32      	ldr	r3, [pc, #200]	; (800066c <SystemClock_Config+0x10c>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	4a31      	ldr	r2, [pc, #196]	; (800066c <SystemClock_Config+0x10c>)
 80005a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005aa:	6193      	str	r3, [r2, #24]
 80005ac:	4b2f      	ldr	r3, [pc, #188]	; (800066c <SystemClock_Config+0x10c>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b4:	603b      	str	r3, [r7, #0]
 80005b6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80005b8:	bf00      	nop
 80005ba:	4b2c      	ldr	r3, [pc, #176]	; (800066c <SystemClock_Config+0x10c>)
 80005bc:	699b      	ldr	r3, [r3, #24]
 80005be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005c6:	d1f8      	bne.n	80005ba <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80005c8:	4b29      	ldr	r3, [pc, #164]	; (8000670 <SystemClock_Config+0x110>)
 80005ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005cc:	f023 0303 	bic.w	r3, r3, #3
 80005d0:	4a27      	ldr	r2, [pc, #156]	; (8000670 <SystemClock_Config+0x110>)
 80005d2:	f043 0302 	orr.w	r3, r3, #2
 80005d6:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d8:	2301      	movs	r3, #1
 80005da:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e2:	2302      	movs	r3, #2
 80005e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e6:	2302      	movs	r3, #2
 80005e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80005ea:	2305      	movs	r3, #5
 80005ec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 144;
 80005ee:	2390      	movs	r3, #144	; 0x90
 80005f0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80005f2:	2302      	movs	r3, #2
 80005f4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005f6:	2304      	movs	r3, #4
 80005f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 80005fa:	2304      	movs	r3, #4
 80005fc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80005fe:	2308      	movs	r3, #8
 8000600:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000602:	2300      	movs	r3, #0
 8000604:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800060e:	4618      	mov	r0, r3
 8000610:	f014 f806 	bl	8014620 <HAL_RCC_OscConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800061a:	f000 fb5f 	bl	8000cdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061e:	233f      	movs	r3, #63	; 0x3f
 8000620:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000622:	2303      	movs	r3, #3
 8000624:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000626:	2300      	movs	r3, #0
 8000628:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800062a:	2308      	movs	r3, #8
 800062c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800062e:	2340      	movs	r3, #64	; 0x40
 8000630:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000632:	2340      	movs	r3, #64	; 0x40
 8000634:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000636:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800063a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800063c:	2340      	movs	r3, #64	; 0x40
 800063e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	2102      	movs	r1, #2
 8000644:	4618      	mov	r0, r3
 8000646:	f014 fc19 	bl	8014e7c <HAL_RCC_ClockConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000650:	f000 fb44 	bl	8000cdc <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000654:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000658:	2100      	movs	r1, #0
 800065a:	2000      	movs	r0, #0
 800065c:	f014 fdc4 	bl	80151e8 <HAL_RCC_MCOConfig>
}
 8000660:	bf00      	nop
 8000662:	3770      	adds	r7, #112	; 0x70
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	58000400 	.word	0x58000400
 800066c:	58024800 	.word	0x58024800
 8000670:	58024400 	.word	0x58024400

08000674 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b0b0      	sub	sp, #192	; 0xc0
 8000678:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	22bc      	movs	r2, #188	; 0xbc
 800067e:	2100      	movs	r1, #0
 8000680:	4618      	mov	r0, r3
 8000682:	f02c f9f8 	bl	802ca76 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000686:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800068a:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 800068c:	2305      	movs	r3, #5
 800068e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 100;
 8000690:	2364      	movs	r3, #100	; 0x64
 8000692:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 10;
 8000694:	230a      	movs	r3, #10
 8000696:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 10;
 8000698:	230a      	movs	r3, #10
 800069a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800069c:	2302      	movs	r3, #2
 800069e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 80006a0:	2380      	movs	r3, #128	; 0x80
 80006a2:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80006a4:	2300      	movs	r3, #0
 80006a6:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80006ac:	2300      	movs	r3, #0
 80006ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	4618      	mov	r0, r3
 80006b6:	f015 f819 	bl	80156ec <HAL_RCCEx_PeriphCLKConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 80006c0:	f000 fb0c 	bl	8000cdc <Error_Handler>
  }
}
 80006c4:	bf00      	nop
 80006c6:	37c0      	adds	r7, #192	; 0xc0
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006d0:	4b0d      	ldr	r3, [pc, #52]	; (8000708 <MX_CRC_Init+0x3c>)
 80006d2:	4a0e      	ldr	r2, [pc, #56]	; (800070c <MX_CRC_Init+0x40>)
 80006d4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80006d6:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <MX_CRC_Init+0x3c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80006dc:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <MX_CRC_Init+0x3c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80006e2:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_CRC_Init+0x3c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80006e8:	4b07      	ldr	r3, [pc, #28]	; (8000708 <MX_CRC_Init+0x3c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_CRC_Init+0x3c>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006f4:	4804      	ldr	r0, [pc, #16]	; (8000708 <MX_CRC_Init+0x3c>)
 80006f6:	f010 ff89 	bl	801160c <HAL_CRC_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000700:	f000 faec 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	24000150 	.word	0x24000150
 800070c:	58024c00 	.word	0x58024c00

08000710 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000714:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <MX_DMA2D_Init+0x34>)
 8000716:	4a0c      	ldr	r2, [pc, #48]	; (8000748 <MX_DMA2D_Init+0x38>)
 8000718:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 800071a:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <MX_DMA2D_Init+0x34>)
 800071c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000720:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8000722:	4b08      	ldr	r3, [pc, #32]	; (8000744 <MX_DMA2D_Init+0x34>)
 8000724:	2202      	movs	r2, #2
 8000726:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <MX_DMA2D_Init+0x34>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <MX_DMA2D_Init+0x34>)
 8000730:	f011 f856 	bl	80117e0 <HAL_DMA2D_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_DMA2D_Init+0x2e>
  {
    Error_Handler();
 800073a:	f000 facf 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	24000174 	.word	0x24000174
 8000748:	52001000 	.word	0x52001000

0800074c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08e      	sub	sp, #56	; 0x38
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */
  initLtdcClocks();
 8000752:	f000 fac9 	bl	8000ce8 <initLtdcClocks>
  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	2234      	movs	r2, #52	; 0x34
 800075a:	2100      	movs	r1, #0
 800075c:	4618      	mov	r0, r3
 800075e:	f02c f98a 	bl	802ca76 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000762:	4b3a      	ldr	r3, [pc, #232]	; (800084c <MX_LTDC_Init+0x100>)
 8000764:	4a3a      	ldr	r2, [pc, #232]	; (8000850 <MX_LTDC_Init+0x104>)
 8000766:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000768:	4b38      	ldr	r3, [pc, #224]	; (800084c <MX_LTDC_Init+0x100>)
 800076a:	2200      	movs	r2, #0
 800076c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800076e:	4b37      	ldr	r3, [pc, #220]	; (800084c <MX_LTDC_Init+0x100>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000774:	4b35      	ldr	r3, [pc, #212]	; (800084c <MX_LTDC_Init+0x100>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800077a:	4b34      	ldr	r3, [pc, #208]	; (800084c <MX_LTDC_Init+0x100>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000780:	4b32      	ldr	r3, [pc, #200]	; (800084c <MX_LTDC_Init+0x100>)
 8000782:	2228      	movs	r2, #40	; 0x28
 8000784:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000786:	4b31      	ldr	r3, [pc, #196]	; (800084c <MX_LTDC_Init+0x100>)
 8000788:	2209      	movs	r2, #9
 800078a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 800078c:	4b2f      	ldr	r3, [pc, #188]	; (800084c <MX_LTDC_Init+0x100>)
 800078e:	2235      	movs	r2, #53	; 0x35
 8000790:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000792:	4b2e      	ldr	r3, [pc, #184]	; (800084c <MX_LTDC_Init+0x100>)
 8000794:	220b      	movs	r2, #11
 8000796:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000798:	4b2c      	ldr	r3, [pc, #176]	; (800084c <MX_LTDC_Init+0x100>)
 800079a:	f240 2215 	movw	r2, #533	; 0x215
 800079e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80007a0:	4b2a      	ldr	r3, [pc, #168]	; (800084c <MX_LTDC_Init+0x100>)
 80007a2:	f240 121b 	movw	r2, #283	; 0x11b
 80007a6:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 80007a8:	4b28      	ldr	r3, [pc, #160]	; (800084c <MX_LTDC_Init+0x100>)
 80007aa:	f240 2235 	movw	r2, #565	; 0x235
 80007ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 80007b0:	4b26      	ldr	r3, [pc, #152]	; (800084c <MX_LTDC_Init+0x100>)
 80007b2:	f240 121d 	movw	r2, #285	; 0x11d
 80007b6:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80007b8:	4b24      	ldr	r3, [pc, #144]	; (800084c <MX_LTDC_Init+0x100>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80007c0:	4b22      	ldr	r3, [pc, #136]	; (800084c <MX_LTDC_Init+0x100>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80007c8:	4b20      	ldr	r3, [pc, #128]	; (800084c <MX_LTDC_Init+0x100>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80007d0:	481e      	ldr	r0, [pc, #120]	; (800084c <MX_LTDC_Init+0x100>)
 80007d2:	f012 faed 	bl	8012db0 <HAL_LTDC_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_LTDC_Init+0x94>
  {
    Error_Handler();
 80007dc:	f000 fa7e 	bl	8000cdc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80007e4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80007e8:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80007ee:	f44f 7388 	mov.w	r3, #272	; 0x110
 80007f2:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80007f4:	2302      	movs	r3, #2
 80007f6:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80007f8:	23ff      	movs	r3, #255	; 0xff
 80007fa:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000800:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000804:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000806:	2305      	movs	r3, #5
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 800080a:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 800080e:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8000810:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000814:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8000816:	f44f 7388 	mov.w	r3, #272	; 0x110
 800081a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800081c:	2300      	movs	r3, #0
 800081e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000822:	2300      	movs	r3, #0
 8000824:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	4619      	mov	r1, r3
 8000834:	4805      	ldr	r0, [pc, #20]	; (800084c <MX_LTDC_Init+0x100>)
 8000836:	f012 fc43 	bl	80130c0 <HAL_LTDC_ConfigLayer>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_LTDC_Init+0xf8>
  {
    Error_Handler();
 8000840:	f000 fa4c 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000844:	bf00      	nop
 8000846:	3738      	adds	r7, #56	; 0x38
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	240001dc 	.word	0x240001dc
 8000850:	50001000 	.word	0x50001000

08000854 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000858:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <MX_QUADSPI_Init+0x50>)
 800085a:	4a13      	ldr	r2, [pc, #76]	; (80008a8 <MX_QUADSPI_Init+0x54>)
 800085c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 800085e:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <MX_QUADSPI_Init+0x50>)
 8000860:	2201      	movs	r2, #1
 8000862:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000864:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <MX_QUADSPI_Init+0x50>)
 8000866:	2201      	movs	r2, #1
 8000868:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <MX_QUADSPI_Init+0x50>)
 800086c:	2210      	movs	r2, #16
 800086e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 26;
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <MX_QUADSPI_Init+0x50>)
 8000872:	221a      	movs	r2, #26
 8000874:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_3_CYCLE;
 8000876:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <MX_QUADSPI_Init+0x50>)
 8000878:	f44f 7200 	mov.w	r2, #512	; 0x200
 800087c:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <MX_QUADSPI_Init+0x50>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8000884:	4b07      	ldr	r3, [pc, #28]	; (80008a4 <MX_QUADSPI_Init+0x50>)
 8000886:	2240      	movs	r2, #64	; 0x40
 8000888:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800088a:	4806      	ldr	r0, [pc, #24]	; (80008a4 <MX_QUADSPI_Init+0x50>)
 800088c:	f012 ffe6 	bl	801385c <HAL_QSPI_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_QUADSPI_Init+0x46>
  {
    Error_Handler();
 8000896:	f000 fa21 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */
  initBspQuadSpi(&Error_Handler);
 800089a:	4804      	ldr	r0, [pc, #16]	; (80008ac <MX_QUADSPI_Init+0x58>)
 800089c:	f000 fa98 	bl	8000dd0 <initBspQuadSpi>
  /* USER CODE END QUADSPI_Init 2 */

}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	24000284 	.word	0x24000284
 80008a8:	52005000 	.word	0x52005000
 80008ac:	08000cdd 	.word	0x08000cdd

080008b0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b088      	sub	sp, #32
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80008b6:	f107 030c 	add.w	r3, r7, #12
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
 80008c4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c6:	463b      	mov	r3, r7
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008d0:	4b1e      	ldr	r3, [pc, #120]	; (800094c <MX_TIM4_Init+0x9c>)
 80008d2:	4a1f      	ldr	r2, [pc, #124]	; (8000950 <MX_TIM4_Init+0xa0>)
 80008d4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80008d6:	4b1d      	ldr	r3, [pc, #116]	; (800094c <MX_TIM4_Init+0x9c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008dc:	4b1b      	ldr	r3, [pc, #108]	; (800094c <MX_TIM4_Init+0x9c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80008e2:	4b1a      	ldr	r3, [pc, #104]	; (800094c <MX_TIM4_Init+0x9c>)
 80008e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008e8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ea:	4b18      	ldr	r3, [pc, #96]	; (800094c <MX_TIM4_Init+0x9c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f0:	4b16      	ldr	r3, [pc, #88]	; (800094c <MX_TIM4_Init+0x9c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80008f6:	4815      	ldr	r0, [pc, #84]	; (800094c <MX_TIM4_Init+0x9c>)
 80008f8:	f016 f857 	bl	80169aa <HAL_TIM_Base_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8000902:	f000 f9eb 	bl	8000cdc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000906:	2307      	movs	r3, #7
 8000908:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 800090a:	2340      	movs	r3, #64	; 0x40
 800090c:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerFilter = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000912:	f107 030c 	add.w	r3, r7, #12
 8000916:	4619      	mov	r1, r3
 8000918:	480c      	ldr	r0, [pc, #48]	; (800094c <MX_TIM4_Init+0x9c>)
 800091a:	f016 fa34 	bl	8016d86 <HAL_TIM_SlaveConfigSynchro>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000924:	f000 f9da 	bl	8000cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000928:	2300      	movs	r3, #0
 800092a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800092c:	2300      	movs	r3, #0
 800092e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000930:	463b      	mov	r3, r7
 8000932:	4619      	mov	r1, r3
 8000934:	4805      	ldr	r0, [pc, #20]	; (800094c <MX_TIM4_Init+0x9c>)
 8000936:	f016 fc95 	bl	8017264 <HAL_TIMEx_MasterConfigSynchronization>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000940:	f000 f9cc 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000944:	bf00      	nop
 8000946:	3720      	adds	r7, #32
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	240002d0 	.word	0x240002d0
 8000950:	40000800 	.word	0x40000800

08000954 <MX_FMC_Init>:

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b088      	sub	sp, #32
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]
 8000968:	615a      	str	r2, [r3, #20]
 800096a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM2 memory initialization sequence
  */
  hsdram2.Instance = FMC_SDRAM_DEVICE;
 800096c:	4b21      	ldr	r3, [pc, #132]	; (80009f4 <MX_FMC_Init+0xa0>)
 800096e:	4a22      	ldr	r2, [pc, #136]	; (80009f8 <MX_FMC_Init+0xa4>)
 8000970:	601a      	str	r2, [r3, #0]
  /* hsdram2.Init */
  hsdram2.Init.SDBank = FMC_SDRAM_BANK2;
 8000972:	4b20      	ldr	r3, [pc, #128]	; (80009f4 <MX_FMC_Init+0xa0>)
 8000974:	2201      	movs	r2, #1
 8000976:	605a      	str	r2, [r3, #4]
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000978:	4b1e      	ldr	r3, [pc, #120]	; (80009f4 <MX_FMC_Init+0xa0>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800097e:	4b1d      	ldr	r3, [pc, #116]	; (80009f4 <MX_FMC_Init+0xa0>)
 8000980:	2204      	movs	r2, #4
 8000982:	60da      	str	r2, [r3, #12]
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000984:	4b1b      	ldr	r3, [pc, #108]	; (80009f4 <MX_FMC_Init+0xa0>)
 8000986:	2210      	movs	r2, #16
 8000988:	611a      	str	r2, [r3, #16]
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800098a:	4b1a      	ldr	r3, [pc, #104]	; (80009f4 <MX_FMC_Init+0xa0>)
 800098c:	2240      	movs	r2, #64	; 0x40
 800098e:	615a      	str	r2, [r3, #20]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000990:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <MX_FMC_Init+0xa0>)
 8000992:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000996:	619a      	str	r2, [r3, #24]
  hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000998:	4b16      	ldr	r3, [pc, #88]	; (80009f4 <MX_FMC_Init+0xa0>)
 800099a:	2200      	movs	r2, #0
 800099c:	61da      	str	r2, [r3, #28]
  hsdram2.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800099e:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <MX_FMC_Init+0xa0>)
 80009a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009a4:	621a      	str	r2, [r3, #32]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80009a6:	4b13      	ldr	r3, [pc, #76]	; (80009f4 <MX_FMC_Init+0xa0>)
 80009a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009ac:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80009ae:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <MX_FMC_Init+0xa0>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80009b4:	2302      	movs	r3, #2
 80009b6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 80009b8:	2306      	movs	r3, #6
 80009ba:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80009bc:	2304      	movs	r3, #4
 80009be:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 80009c0:	2306      	movs	r3, #6
 80009c2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 80009c4:	2302      	movs	r3, #2
 80009c6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80009c8:	2302      	movs	r3, #2
 80009ca:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80009cc:	2302      	movs	r3, #2
 80009ce:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	4619      	mov	r1, r3
 80009d4:	4807      	ldr	r0, [pc, #28]	; (80009f4 <MX_FMC_Init+0xa0>)
 80009d6:	f015 ff33 	bl	8016840 <HAL_SDRAM_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80009e0:	f000 f97c 	bl	8000cdc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  initBspSdRam(&Error_Handler);
 80009e4:	4805      	ldr	r0, [pc, #20]	; (80009fc <MX_FMC_Init+0xa8>)
 80009e6:	f000 fa14 	bl	8000e12 <initBspSdRam>
  /* USER CODE END FMC_Init 2 */
}
 80009ea:	bf00      	nop
 80009ec:	3720      	adds	r7, #32
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	2400031c 	.word	0x2400031c
 80009f8:	52004140 	.word	0x52004140
 80009fc:	08000cdd 	.word	0x08000cdd

08000a00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b090      	sub	sp, #64	; 0x40
 8000a04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
 8000a14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000a16:	4b81      	ldr	r3, [pc, #516]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a1c:	4a7f      	ldr	r2, [pc, #508]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000a1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a26:	4b7d      	ldr	r3, [pc, #500]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a30:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a34:	4b79      	ldr	r3, [pc, #484]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000a36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a3a:	4a78      	ldr	r2, [pc, #480]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000a3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a44:	4b75      	ldr	r3, [pc, #468]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000a46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8000a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a52:	4b72      	ldr	r3, [pc, #456]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a58:	4a70      	ldr	r2, [pc, #448]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a62:	4b6e      	ldr	r3, [pc, #440]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000a64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a6c:	623b      	str	r3, [r7, #32]
 8000a6e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a70:	4b6a      	ldr	r3, [pc, #424]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a76:	4a69      	ldr	r2, [pc, #420]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000a78:	f043 0310 	orr.w	r3, r3, #16
 8000a7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a80:	4b66      	ldr	r3, [pc, #408]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a86:	f003 0310 	and.w	r3, r3, #16
 8000a8a:	61fb      	str	r3, [r7, #28]
 8000a8c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000a8e:	4b63      	ldr	r3, [pc, #396]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a94:	4a61      	ldr	r2, [pc, #388]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000a96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a9e:	4b5f      	ldr	r3, [pc, #380]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000aa8:	61bb      	str	r3, [r7, #24]
 8000aaa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aac:	4b5b      	ldr	r3, [pc, #364]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	4a5a      	ldr	r2, [pc, #360]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000ab4:	f043 0308 	orr.w	r3, r3, #8
 8000ab8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000abc:	4b57      	ldr	r3, [pc, #348]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000abe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac2:	f003 0308 	and.w	r3, r3, #8
 8000ac6:	617b      	str	r3, [r7, #20]
 8000ac8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aca:	4b54      	ldr	r3, [pc, #336]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	4a52      	ldr	r2, [pc, #328]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000ad2:	f043 0304 	orr.w	r3, r3, #4
 8000ad6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ada:	4b50      	ldr	r3, [pc, #320]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae0:	f003 0304 	and.w	r3, r3, #4
 8000ae4:	613b      	str	r3, [r7, #16]
 8000ae6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae8:	4b4c      	ldr	r3, [pc, #304]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000aea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aee:	4a4b      	ldr	r2, [pc, #300]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000af8:	4b48      	ldr	r3, [pc, #288]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000afa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b06:	4b45      	ldr	r3, [pc, #276]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b0c:	4a43      	ldr	r2, [pc, #268]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000b0e:	f043 0320 	orr.w	r3, r3, #32
 8000b12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b16:	4b41      	ldr	r3, [pc, #260]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b1c:	f003 0320 	and.w	r3, r3, #32
 8000b20:	60bb      	str	r3, [r7, #8]
 8000b22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b24:	4b3d      	ldr	r3, [pc, #244]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2a:	4a3c      	ldr	r2, [pc, #240]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b34:	4b39      	ldr	r3, [pc, #228]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000b36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b42:	4b36      	ldr	r3, [pc, #216]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b48:	4a34      	ldr	r2, [pc, #208]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000b4a:	f043 0302 	orr.w	r3, r3, #2
 8000b4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b52:	4b32      	ldr	r3, [pc, #200]	; (8000c1c <MX_GPIO_Init+0x21c>)
 8000b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b58:	f003 0302 	and.w	r3, r3, #2
 8000b5c:	603b      	str	r3, [r7, #0]
 8000b5e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D3_ImprGnD_GPIO_Port, D3_ImprGnD_Pin, GPIO_PIN_RESET);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2140      	movs	r1, #64	; 0x40
 8000b64:	482e      	ldr	r0, [pc, #184]	; (8000c20 <MX_GPIO_Init+0x220>)
 8000b66:	f011 fa81 	bl	801206c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b6a:	2308      	movs	r3, #8
 8000b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4829      	ldr	r0, [pc, #164]	; (8000c24 <MX_GPIO_Init+0x224>)
 8000b7e:	f010 ffa3 	bl	8011ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b90:	2300      	movs	r3, #0
 8000b92:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000b94:	2300      	movs	r3, #0
 8000b96:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4820      	ldr	r0, [pc, #128]	; (8000c20 <MX_GPIO_Init+0x220>)
 8000ba0:	f010 ff92 	bl	8011ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : D2_SWToggle_Pin */
  GPIO_InitStruct.Pin = D2_SWToggle_Pin;
 8000ba4:	2308      	movs	r3, #8
 8000ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bac:	2301      	movs	r3, #1
 8000bae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(D2_SWToggle_GPIO_Port, &GPIO_InitStruct);
 8000bb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	481c      	ldr	r0, [pc, #112]	; (8000c28 <MX_GPIO_Init+0x228>)
 8000bb8:	f010 ff86 	bl	8011ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : D4_MoButton_Pin */
  GPIO_InitStruct.Pin = D4_MoButton_Pin;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(D4_MoButton_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4817      	ldr	r0, [pc, #92]	; (8000c2c <MX_GPIO_Init+0x22c>)
 8000bd0:	f010 ff7a 	bl	8011ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : D3_ImprGnD_Pin */
  GPIO_InitStruct.Pin = D3_ImprGnD_Pin;
 8000bd4:	2340      	movs	r3, #64	; 0x40
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2300      	movs	r3, #0
 8000be2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(D3_ImprGnD_GPIO_Port, &GPIO_InitStruct);
 8000be4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000be8:	4619      	mov	r1, r3
 8000bea:	480d      	ldr	r0, [pc, #52]	; (8000c20 <MX_GPIO_Init+0x220>)
 8000bec:	f010 ff6c 	bl	8011ac8 <HAL_GPIO_Init>

  // PE3, used for alarm LEDs
  // Use hal to set things
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bf0:	2308      	movs	r3, #8
 8000bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bf4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	480d      	ldr	r0, [pc, #52]	; (8000c30 <MX_GPIO_Init+0x230>)
 8000bfc:	f010 ff64 	bl	8011ac8 <HAL_GPIO_Init>

  // PH15, also used for alarm LEDs
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4809      	ldr	r0, [pc, #36]	; (8000c34 <MX_GPIO_Init+0x234>)
 8000c0e:	f010 ff5b 	bl	8011ac8 <HAL_GPIO_Init>
}
 8000c12:	bf00      	nop
 8000c14:	3740      	adds	r7, #64	; 0x40
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	58024400 	.word	0x58024400
 8000c20:	58020000 	.word	0x58020000
 8000c24:	58022000 	.word	0x58022000
 8000c28:	58021800 	.word	0x58021800
 8000c2c:	58022800 	.word	0x58022800
 8000c30:	58021000 	.word	0x58021000
 8000c34:	58021c00 	.word	0x58021c00

08000c38 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c40:	2001      	movs	r0, #1
 8000c42:	f00a fbad 	bl	800b3a0 <osDelay>
 8000c46:	e7fb      	b.n	8000c40 <StartDefaultTask+0x8>

08000c48 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000c4e:	463b      	mov	r3, r7
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000c5a:	f010 fc5b 	bl	8011514 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8000c66:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000c6a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1MB;
 8000c6c:	2313      	movs	r3, #19
 8000c6e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000c80:	2300      	movs	r3, #0
 8000c82:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000c84:	2301      	movs	r3, #1
 8000c86:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c8c:	463b      	mov	r3, r7
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f010 fc78 	bl	8011584 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000c94:	2301      	movs	r3, #1
 8000c96:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 8000c98:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8000c9c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8000c9e:	231a      	movs	r3, #26
 8000ca0:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ca2:	463b      	mov	r3, r7
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f010 fc6d 	bl	8011584 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000caa:	2004      	movs	r0, #4
 8000cac:	f010 fc4a 	bl	8011544 <HAL_MPU_Enable>

}
 8000cb0:	bf00      	nop
 8000cb2:	3710      	adds	r7, #16
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a04      	ldr	r2, [pc, #16]	; (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d101      	bne.n	8000cce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cca:	f010 fae5 	bl	8011298 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40001000 	.word	0x40001000

08000cdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce0:	b672      	cpsid	i
}
 8000ce2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <Error_Handler+0x8>
	...

08000ce8 <initLtdcClocks>:

/**
 * @brief initLtdcClocks initialize LTDC clocks
 */
void initLtdcClocks(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08c      	sub	sp, #48	; 0x30
 8000cec:	af00      	add	r7, sp, #0
   // enable the LTDC and DMA2D clocks
   __HAL_RCC_LTDC_CLK_ENABLE();
 8000cee:	4b36      	ldr	r3, [pc, #216]	; (8000dc8 <initLtdcClocks+0xe0>)
 8000cf0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000cf4:	4a34      	ldr	r2, [pc, #208]	; (8000dc8 <initLtdcClocks+0xe0>)
 8000cf6:	f043 0308 	orr.w	r3, r3, #8
 8000cfa:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8000cfe:	4b32      	ldr	r3, [pc, #200]	; (8000dc8 <initLtdcClocks+0xe0>)
 8000d00:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000d04:	f003 0308 	and.w	r3, r3, #8
 8000d08:	61bb      	str	r3, [r7, #24]
 8000d0a:	69bb      	ldr	r3, [r7, #24]

   // enable GPIOs clock
   __HAL_RCC_GPIOI_CLK_ENABLE();
 8000d0c:	4b2e      	ldr	r3, [pc, #184]	; (8000dc8 <initLtdcClocks+0xe0>)
 8000d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d12:	4a2d      	ldr	r2, [pc, #180]	; (8000dc8 <initLtdcClocks+0xe0>)
 8000d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d1c:	4b2a      	ldr	r3, [pc, #168]	; (8000dc8 <initLtdcClocks+0xe0>)
 8000d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d26:	617b      	str	r3, [r7, #20]
 8000d28:	697b      	ldr	r3, [r7, #20]
   __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d2a:	4b27      	ldr	r3, [pc, #156]	; (8000dc8 <initLtdcClocks+0xe0>)
 8000d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d30:	4a25      	ldr	r2, [pc, #148]	; (8000dc8 <initLtdcClocks+0xe0>)
 8000d32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d3a:	4b23      	ldr	r3, [pc, #140]	; (8000dc8 <initLtdcClocks+0xe0>)
 8000d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d44:	613b      	str	r3, [r7, #16]
 8000d46:	693b      	ldr	r3, [r7, #16]
   __HAL_RCC_GPIOK_CLK_ENABLE();
 8000d48:	4b1f      	ldr	r3, [pc, #124]	; (8000dc8 <initLtdcClocks+0xe0>)
 8000d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d4e:	4a1e      	ldr	r2, [pc, #120]	; (8000dc8 <initLtdcClocks+0xe0>)
 8000d50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d58:	4b1b      	ldr	r3, [pc, #108]	; (8000dc8 <initLtdcClocks+0xe0>)
 8000d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
   __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d66:	4b18      	ldr	r3, [pc, #96]	; (8000dc8 <initLtdcClocks+0xe0>)
 8000d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d6c:	4a16      	ldr	r2, [pc, #88]	; (8000dc8 <initLtdcClocks+0xe0>)
 8000d6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d76:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <initLtdcClocks+0xe0>)
 8000d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d80:	60bb      	str	r3, [r7, #8]
 8000d82:	68bb      	ldr	r3, [r7, #8]
   __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d84:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <initLtdcClocks+0xe0>)
 8000d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d8a:	4a0f      	ldr	r2, [pc, #60]	; (8000dc8 <initLtdcClocks+0xe0>)
 8000d8c:	f043 0308 	orr.w	r3, r3, #8
 8000d90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d94:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <initLtdcClocks+0xe0>)
 8000d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9a:	f003 0308 	and.w	r3, r3, #8
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]

   // LCD_DISP pin has to be manually controlled
   GPIO_InitTypeDef gpio_init_structure;
   gpio_init_structure.Pin = GPIO_PIN_7;
 8000da2:	2380      	movs	r3, #128	; 0x80
 8000da4:	61fb      	str	r3, [r7, #28]
   gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8000da6:	2301      	movs	r3, #1
 8000da8:	623b      	str	r3, [r7, #32]
   HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8000daa:	f107 031c 	add.w	r3, r7, #28
 8000dae:	4619      	mov	r1, r3
 8000db0:	4806      	ldr	r0, [pc, #24]	; (8000dcc <initLtdcClocks+0xe4>)
 8000db2:	f010 fe89 	bl	8011ac8 <HAL_GPIO_Init>

   // assert display enable LCD_DISP pin
   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8000db6:	2201      	movs	r2, #1
 8000db8:	2180      	movs	r1, #128	; 0x80
 8000dba:	4804      	ldr	r0, [pc, #16]	; (8000dcc <initLtdcClocks+0xe4>)
 8000dbc:	f011 f956 	bl	801206c <HAL_GPIO_WritePin>
}
 8000dc0:	bf00      	nop
 8000dc2:	3730      	adds	r7, #48	; 0x30
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	58024400 	.word	0x58024400
 8000dcc:	58020c00 	.word	0x58020c00

08000dd0 <initBspQuadSpi>:
/**
 * @brief initBspQuadSpi initialize QSPI via BSP
 * @param error_handler callback to error handler
 */
void initBspQuadSpi(void (*error_handler)())
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
   BSP_QSPI_Init_t init;

   init.InterfaceMode = MT25TL01G_QPI_MODE;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	733b      	strb	r3, [r7, #12]
   init.TransferRate = MT25TL01G_DTR_TRANSFER;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	737b      	strb	r3, [r7, #13]
   init.DualFlashMode = MT25TL01G_DUALFLASH_ENABLE;
 8000de0:	2340      	movs	r3, #64	; 0x40
 8000de2:	73bb      	strb	r3, [r7, #14]

   if (BSP_QSPI_Init(0, &init) != BSP_ERROR_NONE)
 8000de4:	f107 030c 	add.w	r3, r7, #12
 8000de8:	4619      	mov	r1, r3
 8000dea:	2000      	movs	r0, #0
 8000dec:	f00f f9d2 	bl	8010194 <BSP_QSPI_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <initBspQuadSpi+0x2a>
   {
      error_handler();
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4798      	blx	r3
   }

   if (BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	f00f faa4 	bl	8010348 <BSP_QSPI_EnableMemoryMappedMode>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <initBspQuadSpi+0x3a>
   {
      error_handler();
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4798      	blx	r3
   }
}
 8000e0a:	bf00      	nop
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <initBspSdRam>:
/**
 * @brief initBspSdRam initialize SDRAM/FMC via BSP
 * @param error_handler callback to error handler
 */
void initBspSdRam(void (*error_handler)())
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b082      	sub	sp, #8
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
   BSP_SDRAM_DeInit(0);
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f00f fe02 	bl	8010a24 <BSP_SDRAM_DeInit>

   if (BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8000e20:	2000      	movs	r0, #0
 8000e22:	f00f fda3 	bl	801096c <BSP_SDRAM_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <initBspSdRam+0x1e>
   {
      error_handler();
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4798      	blx	r3
   }
}
 8000e30:	bf00      	nop
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e3e:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <HAL_MspInit+0x38>)
 8000e40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e44:	4a0a      	ldr	r2, [pc, #40]	; (8000e70 <HAL_MspInit+0x38>)
 8000e46:	f043 0302 	orr.w	r3, r3, #2
 8000e4a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e4e:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <HAL_MspInit+0x38>)
 8000e50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e54:	f003 0302 	and.w	r3, r3, #2
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	210f      	movs	r1, #15
 8000e60:	f06f 0001 	mvn.w	r0, #1
 8000e64:	f010 fb20 	bl	80114a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e68:	bf00      	nop
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	58024400 	.word	0x58024400

08000e74 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a0b      	ldr	r2, [pc, #44]	; (8000eb0 <HAL_CRC_MspInit+0x3c>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d10e      	bne.n	8000ea4 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e86:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <HAL_CRC_MspInit+0x40>)
 8000e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e8c:	4a09      	ldr	r2, [pc, #36]	; (8000eb4 <HAL_CRC_MspInit+0x40>)
 8000e8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e96:	4b07      	ldr	r3, [pc, #28]	; (8000eb4 <HAL_CRC_MspInit+0x40>)
 8000e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000ea4:	bf00      	nop
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	58024c00 	.word	0x58024c00
 8000eb4:	58024400 	.word	0x58024400

08000eb8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a0e      	ldr	r2, [pc, #56]	; (8000f00 <HAL_DMA2D_MspInit+0x48>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d116      	bne.n	8000ef8 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000eca:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <HAL_DMA2D_MspInit+0x4c>)
 8000ecc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000ed0:	4a0c      	ldr	r2, [pc, #48]	; (8000f04 <HAL_DMA2D_MspInit+0x4c>)
 8000ed2:	f043 0310 	orr.w	r3, r3, #16
 8000ed6:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000eda:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <HAL_DMA2D_MspInit+0x4c>)
 8000edc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000ee0:	f003 0310 	and.w	r3, r3, #16
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2105      	movs	r1, #5
 8000eec:	205a      	movs	r0, #90	; 0x5a
 8000eee:	f010 fadb 	bl	80114a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000ef2:	205a      	movs	r0, #90	; 0x5a
 8000ef4:	f010 faf2 	bl	80114dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000ef8:	bf00      	nop
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	52001000 	.word	0x52001000
 8000f04:	58024400 	.word	0x58024400

08000f08 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b0bc      	sub	sp, #240	; 0xf0
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f10:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f20:	f107 0320 	add.w	r3, r7, #32
 8000f24:	22bc      	movs	r2, #188	; 0xbc
 8000f26:	2100      	movs	r1, #0
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f02b fda4 	bl	802ca76 <memset>
  if(hltdc->Instance==LTDC)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a68      	ldr	r2, [pc, #416]	; (80010d4 <HAL_LTDC_MspInit+0x1cc>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	f040 80c8 	bne.w	80010ca <HAL_LTDC_MspInit+0x1c2>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000f3a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000f3e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 5;
 8000f40:	2305      	movs	r3, #5
 8000f42:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3N = 160;
 8000f44:	23a0      	movs	r3, #160	; 0xa0
 8000f46:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3R = 83;
 8000f50:	2353      	movs	r3, #83	; 0x53
 8000f52:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8000f54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f58:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f62:	f107 0320 	add.w	r3, r7, #32
 8000f66:	4618      	mov	r0, r3
 8000f68:	f014 fbc0 	bl	80156ec <HAL_RCCEx_PeriphCLKConfig>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <HAL_LTDC_MspInit+0x6e>
    {
      Error_Handler();
 8000f72:	f7ff feb3 	bl	8000cdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000f76:	4b58      	ldr	r3, [pc, #352]	; (80010d8 <HAL_LTDC_MspInit+0x1d0>)
 8000f78:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000f7c:	4a56      	ldr	r2, [pc, #344]	; (80010d8 <HAL_LTDC_MspInit+0x1d0>)
 8000f7e:	f043 0308 	orr.w	r3, r3, #8
 8000f82:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8000f86:	4b54      	ldr	r3, [pc, #336]	; (80010d8 <HAL_LTDC_MspInit+0x1d0>)
 8000f88:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000f8c:	f003 0308 	and.w	r3, r3, #8
 8000f90:	61fb      	str	r3, [r7, #28]
 8000f92:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000f94:	4b50      	ldr	r3, [pc, #320]	; (80010d8 <HAL_LTDC_MspInit+0x1d0>)
 8000f96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f9a:	4a4f      	ldr	r2, [pc, #316]	; (80010d8 <HAL_LTDC_MspInit+0x1d0>)
 8000f9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fa0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fa4:	4b4c      	ldr	r3, [pc, #304]	; (80010d8 <HAL_LTDC_MspInit+0x1d0>)
 8000fa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000faa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fae:	61bb      	str	r3, [r7, #24]
 8000fb0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000fb2:	4b49      	ldr	r3, [pc, #292]	; (80010d8 <HAL_LTDC_MspInit+0x1d0>)
 8000fb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb8:	4a47      	ldr	r2, [pc, #284]	; (80010d8 <HAL_LTDC_MspInit+0x1d0>)
 8000fba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fc2:	4b45      	ldr	r3, [pc, #276]	; (80010d8 <HAL_LTDC_MspInit+0x1d0>)
 8000fc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fcc:	617b      	str	r3, [r7, #20]
 8000fce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000fd0:	4b41      	ldr	r3, [pc, #260]	; (80010d8 <HAL_LTDC_MspInit+0x1d0>)
 8000fd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd6:	4a40      	ldr	r2, [pc, #256]	; (80010d8 <HAL_LTDC_MspInit+0x1d0>)
 8000fd8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fdc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fe0:	4b3d      	ldr	r3, [pc, #244]	; (80010d8 <HAL_LTDC_MspInit+0x1d0>)
 8000fe2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fee:	4b3a      	ldr	r3, [pc, #232]	; (80010d8 <HAL_LTDC_MspInit+0x1d0>)
 8000ff0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff4:	4a38      	ldr	r2, [pc, #224]	; (80010d8 <HAL_LTDC_MspInit+0x1d0>)
 8000ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ffa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ffe:	4b36      	ldr	r3, [pc, #216]	; (80010d8 <HAL_LTDC_MspInit+0x1d0>)
 8001000:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	68fb      	ldr	r3, [r7, #12]
    PJ5     ------> LTDC_R6
    PH9     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 800100c:	23fc      	movs	r3, #252	; 0xfc
 800100e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_7|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001012:	2302      	movs	r3, #2
 8001014:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800101e:	2302      	movs	r3, #2
 8001020:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001024:	230e      	movs	r3, #14
 8001026:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800102a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800102e:	4619      	mov	r1, r3
 8001030:	482a      	ldr	r0, [pc, #168]	; (80010dc <HAL_LTDC_MspInit+0x1d4>)
 8001032:	f010 fd49 	bl	8011ac8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 8001036:	f24d 2303 	movw	r3, #53763	; 0xd203
 800103a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103e:	2302      	movs	r3, #2
 8001040:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800104a:	2302      	movs	r3, #2
 800104c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001050:	230e      	movs	r3, #14
 8001052:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001056:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800105a:	4619      	mov	r1, r3
 800105c:	4820      	ldr	r0, [pc, #128]	; (80010e0 <HAL_LTDC_MspInit+0x1d8>)
 800105e:	f010 fd33 	bl	8011ac8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 8001062:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8001066:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106a:	2302      	movs	r3, #2
 800106c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001076:	2302      	movs	r3, #2
 8001078:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800107c:	230e      	movs	r3, #14
 800107e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001082:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001086:	4619      	mov	r1, r3
 8001088:	4816      	ldr	r0, [pc, #88]	; (80010e4 <HAL_LTDC_MspInit+0x1dc>)
 800108a:	f010 fd1d 	bl	8011ac8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800108e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001092:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001096:	2302      	movs	r3, #2
 8001098:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010a2:	2302      	movs	r3, #2
 80010a4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010a8:	230e      	movs	r3, #14
 80010aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80010ae:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80010b2:	4619      	mov	r1, r3
 80010b4:	480c      	ldr	r0, [pc, #48]	; (80010e8 <HAL_LTDC_MspInit+0x1e0>)
 80010b6:	f010 fd07 	bl	8011ac8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2105      	movs	r1, #5
 80010be:	2058      	movs	r0, #88	; 0x58
 80010c0:	f010 f9f2 	bl	80114a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80010c4:	2058      	movs	r0, #88	; 0x58
 80010c6:	f010 fa09 	bl	80114dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80010ca:	bf00      	nop
 80010cc:	37f0      	adds	r7, #240	; 0xf0
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	50001000 	.word	0x50001000
 80010d8:	58024400 	.word	0x58024400
 80010dc:	58022800 	.word	0x58022800
 80010e0:	58022000 	.word	0x58022000
 80010e4:	58022400 	.word	0x58022400
 80010e8:	58021c00 	.word	0x58021c00

080010ec <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b0bc      	sub	sp, #240	; 0xf0
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001104:	f107 0320 	add.w	r3, r7, #32
 8001108:	22bc      	movs	r2, #188	; 0xbc
 800110a:	2100      	movs	r1, #0
 800110c:	4618      	mov	r0, r3
 800110e:	f02b fcb2 	bl	802ca76 <memset>
  if(hqspi->Instance==QUADSPI)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a76      	ldr	r2, [pc, #472]	; (80012f0 <HAL_QSPI_MspInit+0x204>)
 8001118:	4293      	cmp	r3, r2
 800111a:	f040 80e4 	bne.w	80012e6 <HAL_QSPI_MspInit+0x1fa>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 800111e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001122:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8001124:	2300      	movs	r3, #0
 8001126:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001128:	f107 0320 	add.w	r3, r7, #32
 800112c:	4618      	mov	r0, r3
 800112e:	f014 fadd 	bl	80156ec <HAL_RCCEx_PeriphCLKConfig>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
 8001138:	f7ff fdd0 	bl	8000cdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800113c:	4b6d      	ldr	r3, [pc, #436]	; (80012f4 <HAL_QSPI_MspInit+0x208>)
 800113e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001142:	4a6c      	ldr	r2, [pc, #432]	; (80012f4 <HAL_QSPI_MspInit+0x208>)
 8001144:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001148:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800114c:	4b69      	ldr	r3, [pc, #420]	; (80012f4 <HAL_QSPI_MspInit+0x208>)
 800114e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001156:	61fb      	str	r3, [r7, #28]
 8001158:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800115a:	4b66      	ldr	r3, [pc, #408]	; (80012f4 <HAL_QSPI_MspInit+0x208>)
 800115c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001160:	4a64      	ldr	r2, [pc, #400]	; (80012f4 <HAL_QSPI_MspInit+0x208>)
 8001162:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001166:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800116a:	4b62      	ldr	r3, [pc, #392]	; (80012f4 <HAL_QSPI_MspInit+0x208>)
 800116c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001174:	61bb      	str	r3, [r7, #24]
 8001176:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001178:	4b5e      	ldr	r3, [pc, #376]	; (80012f4 <HAL_QSPI_MspInit+0x208>)
 800117a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800117e:	4a5d      	ldr	r2, [pc, #372]	; (80012f4 <HAL_QSPI_MspInit+0x208>)
 8001180:	f043 0320 	orr.w	r3, r3, #32
 8001184:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001188:	4b5a      	ldr	r3, [pc, #360]	; (80012f4 <HAL_QSPI_MspInit+0x208>)
 800118a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800118e:	f003 0320 	and.w	r3, r3, #32
 8001192:	617b      	str	r3, [r7, #20]
 8001194:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001196:	4b57      	ldr	r3, [pc, #348]	; (80012f4 <HAL_QSPI_MspInit+0x208>)
 8001198:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800119c:	4a55      	ldr	r2, [pc, #340]	; (80012f4 <HAL_QSPI_MspInit+0x208>)
 800119e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011a6:	4b53      	ldr	r3, [pc, #332]	; (80012f4 <HAL_QSPI_MspInit+0x208>)
 80011a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011b4:	4b4f      	ldr	r3, [pc, #316]	; (80012f4 <HAL_QSPI_MspInit+0x208>)
 80011b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ba:	4a4e      	ldr	r2, [pc, #312]	; (80012f4 <HAL_QSPI_MspInit+0x208>)
 80011bc:	f043 0308 	orr.w	r3, r3, #8
 80011c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011c4:	4b4b      	ldr	r3, [pc, #300]	; (80012f4 <HAL_QSPI_MspInit+0x208>)
 80011c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ca:	f003 0308 	and.w	r3, r3, #8
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PH2     ------> QUADSPI_BK2_IO0
    PH3     ------> QUADSPI_BK2_IO1
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 80011d2:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80011d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011da:	2302      	movs	r3, #2
 80011dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e6:	2303      	movs	r3, #3
 80011e8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80011ec:	2309      	movs	r3, #9
 80011ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011f2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011f6:	4619      	mov	r1, r3
 80011f8:	483f      	ldr	r0, [pc, #252]	; (80012f8 <HAL_QSPI_MspInit+0x20c>)
 80011fa:	f010 fc65 	bl	8011ac8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011fe:	2340      	movs	r3, #64	; 0x40
 8001200:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001204:	2302      	movs	r3, #2
 8001206:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800120a:	2301      	movs	r3, #1
 800120c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001210:	2303      	movs	r3, #3
 8001212:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001216:	230a      	movs	r3, #10
 8001218:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800121c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001220:	4619      	mov	r1, r3
 8001222:	4835      	ldr	r0, [pc, #212]	; (80012f8 <HAL_QSPI_MspInit+0x20c>)
 8001224:	f010 fc50 	bl	8011ac8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8001228:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800122c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001230:	2302      	movs	r3, #2
 8001232:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123c:	2303      	movs	r3, #3
 800123e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001242:	2309      	movs	r3, #9
 8001244:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001248:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800124c:	4619      	mov	r1, r3
 800124e:	482b      	ldr	r0, [pc, #172]	; (80012fc <HAL_QSPI_MspInit+0x210>)
 8001250:	f010 fc3a 	bl	8011ac8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001254:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001258:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125c:	2302      	movs	r3, #2
 800125e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001268:	2303      	movs	r3, #3
 800126a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800126e:	230a      	movs	r3, #10
 8001270:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001274:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001278:	4619      	mov	r1, r3
 800127a:	4820      	ldr	r0, [pc, #128]	; (80012fc <HAL_QSPI_MspInit+0x210>)
 800127c:	f010 fc24 	bl	8011ac8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001280:	230c      	movs	r3, #12
 8001282:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001286:	2302      	movs	r3, #2
 8001288:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001292:	2303      	movs	r3, #3
 8001294:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001298:	2309      	movs	r3, #9
 800129a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800129e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012a2:	4619      	mov	r1, r3
 80012a4:	4816      	ldr	r0, [pc, #88]	; (8001300 <HAL_QSPI_MspInit+0x214>)
 80012a6:	f010 fc0f 	bl	8011ac8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80012aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b2:	2302      	movs	r3, #2
 80012b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012be:	2303      	movs	r3, #3
 80012c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80012c4:	2309      	movs	r3, #9
 80012c6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ca:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012ce:	4619      	mov	r1, r3
 80012d0:	480c      	ldr	r0, [pc, #48]	; (8001304 <HAL_QSPI_MspInit+0x218>)
 80012d2:	f010 fbf9 	bl	8011ac8 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 5, 0);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2105      	movs	r1, #5
 80012da:	205c      	movs	r0, #92	; 0x5c
 80012dc:	f010 f8e4 	bl	80114a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 80012e0:	205c      	movs	r0, #92	; 0x5c
 80012e2:	f010 f8fb 	bl	80114dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80012e6:	bf00      	nop
 80012e8:	37f0      	adds	r7, #240	; 0xf0
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	52005000 	.word	0x52005000
 80012f4:	58024400 	.word	0x58024400
 80012f8:	58021800 	.word	0x58021800
 80012fc:	58021400 	.word	0x58021400
 8001300:	58021c00 	.word	0x58021c00
 8001304:	58020c00 	.word	0x58020c00

08001308 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	; 0x28
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM4)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a1a      	ldr	r2, [pc, #104]	; (8001390 <HAL_TIM_Base_MspInit+0x88>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d12d      	bne.n	8001386 <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800132a:	4b1a      	ldr	r3, [pc, #104]	; (8001394 <HAL_TIM_Base_MspInit+0x8c>)
 800132c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001330:	4a18      	ldr	r2, [pc, #96]	; (8001394 <HAL_TIM_Base_MspInit+0x8c>)
 8001332:	f043 0304 	orr.w	r3, r3, #4
 8001336:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800133a:	4b16      	ldr	r3, [pc, #88]	; (8001394 <HAL_TIM_Base_MspInit+0x8c>)
 800133c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001340:	f003 0304 	and.w	r3, r3, #4
 8001344:	613b      	str	r3, [r7, #16]
 8001346:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001348:	4b12      	ldr	r3, [pc, #72]	; (8001394 <HAL_TIM_Base_MspInit+0x8c>)
 800134a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800134e:	4a11      	ldr	r2, [pc, #68]	; (8001394 <HAL_TIM_Base_MspInit+0x8c>)
 8001350:	f043 0302 	orr.w	r3, r3, #2
 8001354:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001358:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <HAL_TIM_Base_MspInit+0x8c>)
 800135a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001366:	23c0      	movs	r3, #192	; 0xc0
 8001368:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136a:	2302      	movs	r3, #2
 800136c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800136e:	2301      	movs	r3, #1
 8001370:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001372:	2300      	movs	r3, #0
 8001374:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001376:	2302      	movs	r3, #2
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137a:	f107 0314 	add.w	r3, r7, #20
 800137e:	4619      	mov	r1, r3
 8001380:	4805      	ldr	r0, [pc, #20]	; (8001398 <HAL_TIM_Base_MspInit+0x90>)
 8001382:	f010 fba1 	bl	8011ac8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001386:	bf00      	nop
 8001388:	3728      	adds	r7, #40	; 0x28
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40000800 	.word	0x40000800
 8001394:	58024400 	.word	0x58024400
 8001398:	58020400 	.word	0x58020400

0800139c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800139c:	b580      	push	{r7, lr}
 800139e:	b0b6      	sub	sp, #216	; 0xd8
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80013a2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	60da      	str	r2, [r3, #12]
 80013b0:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80013b2:	4b4f      	ldr	r3, [pc, #316]	; (80014f0 <HAL_FMC_MspInit+0x154>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	f040 8096 	bne.w	80014e8 <HAL_FMC_MspInit+0x14c>
    return;
  }
  FMC_Initialized = 1;
 80013bc:	4b4c      	ldr	r3, [pc, #304]	; (80014f0 <HAL_FMC_MspInit+0x154>)
 80013be:	2201      	movs	r2, #1
 80013c0:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013c2:	f107 0308 	add.w	r3, r7, #8
 80013c6:	22bc      	movs	r2, #188	; 0xbc
 80013c8:	2100      	movs	r1, #0
 80013ca:	4618      	mov	r0, r3
 80013cc:	f02b fb53 	bl	802ca76 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80013d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013d4:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 80013d6:	2300      	movs	r3, #0
 80013d8:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013da:	f107 0308 	add.w	r3, r7, #8
 80013de:	4618      	mov	r0, r3
 80013e0:	f014 f984 	bl	80156ec <HAL_RCCEx_PeriphCLKConfig>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <HAL_FMC_MspInit+0x52>
    {
      Error_Handler();
 80013ea:	f7ff fc77 	bl	8000cdc <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80013ee:	4b41      	ldr	r3, [pc, #260]	; (80014f4 <HAL_FMC_MspInit+0x158>)
 80013f0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80013f4:	4a3f      	ldr	r2, [pc, #252]	; (80014f4 <HAL_FMC_MspInit+0x158>)
 80013f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013fa:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80013fe:	4b3d      	ldr	r3, [pc, #244]	; (80014f4 <HAL_FMC_MspInit+0x158>)
 8001400:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001404:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001408:	607b      	str	r3, [r7, #4]
 800140a:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 800140c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001410:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001414:	2302      	movs	r3, #2
 8001416:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001420:	2303      	movs	r3, #3
 8001422:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001426:	230c      	movs	r3, #12
 8001428:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800142c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001430:	4619      	mov	r1, r3
 8001432:	4831      	ldr	r0, [pc, #196]	; (80014f8 <HAL_FMC_MspInit+0x15c>)
 8001434:	f010 fb48 	bl	8011ac8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001438:	f248 1333 	movw	r3, #33075	; 0x8133
 800143c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001440:	2302      	movs	r3, #2
 8001442:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144c:	2303      	movs	r3, #3
 800144e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001452:	230c      	movs	r3, #12
 8001454:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001458:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800145c:	4619      	mov	r1, r3
 800145e:	4827      	ldr	r0, [pc, #156]	; (80014fc <HAL_FMC_MspInit+0x160>)
 8001460:	f010 fb32 	bl	8011ac8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8001464:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001468:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146c:	2302      	movs	r3, #2
 800146e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001478:	2303      	movs	r3, #3
 800147a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800147e:	230c      	movs	r3, #12
 8001480:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001484:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001488:	4619      	mov	r1, r3
 800148a:	481d      	ldr	r0, [pc, #116]	; (8001500 <HAL_FMC_MspInit+0x164>)
 800148c:	f010 fb1c 	bl	8011ac8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8001490:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001494:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001498:	2302      	movs	r3, #2
 800149a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a4:	2303      	movs	r3, #3
 80014a6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014aa:	230c      	movs	r3, #12
 80014ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014b0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80014b4:	4619      	mov	r1, r3
 80014b6:	4813      	ldr	r0, [pc, #76]	; (8001504 <HAL_FMC_MspInit+0x168>)
 80014b8:	f010 fb06 	bl	8011ac8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80014bc:	23e0      	movs	r3, #224	; 0xe0
 80014be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ce:	2303      	movs	r3, #3
 80014d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014d4:	230c      	movs	r3, #12
 80014d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80014da:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80014de:	4619      	mov	r1, r3
 80014e0:	4809      	ldr	r0, [pc, #36]	; (8001508 <HAL_FMC_MspInit+0x16c>)
 80014e2:	f010 faf1 	bl	8011ac8 <HAL_GPIO_Init>
 80014e6:	e000      	b.n	80014ea <HAL_FMC_MspInit+0x14e>
    return;
 80014e8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80014ea:	37d8      	adds	r7, #216	; 0xd8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	24000358 	.word	0x24000358
 80014f4:	58024400 	.word	0x58024400
 80014f8:	58021000 	.word	0x58021000
 80014fc:	58021800 	.word	0x58021800
 8001500:	58020c00 	.word	0x58020c00
 8001504:	58021400 	.word	0x58021400
 8001508:	58021c00 	.word	0x58021c00

0800150c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001514:	f7ff ff42 	bl	800139c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001518:	bf00      	nop
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <HAL_FMC_MspDeInit>:

static uint32_t FMC_DeInitialized = 0;

static void HAL_FMC_MspDeInit(void){
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
 8001524:	4b14      	ldr	r3, [pc, #80]	; (8001578 <HAL_FMC_MspDeInit+0x58>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d123      	bne.n	8001574 <HAL_FMC_MspDeInit+0x54>
    return;
  }
  FMC_DeInitialized = 1;
 800152c:	4b12      	ldr	r3, [pc, #72]	; (8001578 <HAL_FMC_MspDeInit+0x58>)
 800152e:	2201      	movs	r2, #1
 8001530:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_DISABLE();
 8001532:	4b12      	ldr	r3, [pc, #72]	; (800157c <HAL_FMC_MspDeInit+0x5c>)
 8001534:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001538:	4a10      	ldr	r2, [pc, #64]	; (800157c <HAL_FMC_MspDeInit+0x5c>)
 800153a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800153e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001542:	f64f 7183 	movw	r1, #65411	; 0xff83
 8001546:	480e      	ldr	r0, [pc, #56]	; (8001580 <HAL_FMC_MspDeInit+0x60>)
 8001548:	f010 fc6e 	bl	8011e28 <HAL_GPIO_DeInit>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14);

  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 800154c:	f248 1133 	movw	r1, #33075	; 0x8133
 8001550:	480c      	ldr	r0, [pc, #48]	; (8001584 <HAL_FMC_MspDeInit+0x64>)
 8001552:	f010 fc69 	bl	8011e28 <HAL_GPIO_DeInit>
                          |GPIO_PIN_0|GPIO_PIN_1);

  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8001556:	f24c 7103 	movw	r1, #50947	; 0xc703
 800155a:	480b      	ldr	r0, [pc, #44]	; (8001588 <HAL_FMC_MspDeInit+0x68>)
 800155c:	f010 fc64 	bl	8011e28 <HAL_GPIO_DeInit>
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8);

  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8001560:	f64f 013f 	movw	r1, #63551	; 0xf83f
 8001564:	4809      	ldr	r0, [pc, #36]	; (800158c <HAL_FMC_MspDeInit+0x6c>)
 8001566:	f010 fc5f 	bl	8011e28 <HAL_GPIO_DeInit>
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11);

  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 800156a:	21e0      	movs	r1, #224	; 0xe0
 800156c:	4808      	ldr	r0, [pc, #32]	; (8001590 <HAL_FMC_MspDeInit+0x70>)
 800156e:	f010 fc5b 	bl	8011e28 <HAL_GPIO_DeInit>
 8001572:	e000      	b.n	8001576 <HAL_FMC_MspDeInit+0x56>
    return;
 8001574:	bf00      	nop

  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}
 8001576:	bd80      	pop	{r7, pc}
 8001578:	2400035c 	.word	0x2400035c
 800157c:	58024400 	.word	0x58024400
 8001580:	58021000 	.word	0x58021000
 8001584:	58021800 	.word	0x58021800
 8001588:	58020c00 	.word	0x58020c00
 800158c:	58021400 	.word	0x58021400
 8001590:	58021c00 	.word	0x58021c00

08001594 <HAL_SDRAM_MspDeInit>:

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspDeInit 0 */

  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
 800159c:	f7ff ffc0 	bl	8001520 <HAL_FMC_MspDeInit>
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b090      	sub	sp, #64	; 0x40
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b0f      	cmp	r3, #15
 80015b4:	d827      	bhi.n	8001606 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80015b6:	2200      	movs	r2, #0
 80015b8:	6879      	ldr	r1, [r7, #4]
 80015ba:	2036      	movs	r0, #54	; 0x36
 80015bc:	f00f ff74 	bl	80114a8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015c0:	2036      	movs	r0, #54	; 0x36
 80015c2:	f00f ff8b 	bl	80114dc <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80015c6:	4a29      	ldr	r2, [pc, #164]	; (800166c <HAL_InitTick+0xc4>)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80015cc:	4b28      	ldr	r3, [pc, #160]	; (8001670 <HAL_InitTick+0xc8>)
 80015ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015d2:	4a27      	ldr	r2, [pc, #156]	; (8001670 <HAL_InitTick+0xc8>)
 80015d4:	f043 0310 	orr.w	r3, r3, #16
 80015d8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80015dc:	4b24      	ldr	r3, [pc, #144]	; (8001670 <HAL_InitTick+0xc8>)
 80015de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015e2:	f003 0310 	and.w	r3, r3, #16
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015ea:	f107 0210 	add.w	r2, r7, #16
 80015ee:	f107 0314 	add.w	r3, r7, #20
 80015f2:	4611      	mov	r1, r2
 80015f4:	4618      	mov	r0, r3
 80015f6:	f014 f837 	bl	8015668 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80015fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015fc:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80015fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001600:	2b00      	cmp	r3, #0
 8001602:	d106      	bne.n	8001612 <HAL_InitTick+0x6a>
 8001604:	e001      	b.n	800160a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e02b      	b.n	8001662 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800160a:	f014 f801 	bl	8015610 <HAL_RCC_GetPCLK1Freq>
 800160e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001610:	e004      	b.n	800161c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001612:	f013 fffd 	bl	8015610 <HAL_RCC_GetPCLK1Freq>
 8001616:	4603      	mov	r3, r0
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800161c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800161e:	4a15      	ldr	r2, [pc, #84]	; (8001674 <HAL_InitTick+0xcc>)
 8001620:	fba2 2303 	umull	r2, r3, r2, r3
 8001624:	0c9b      	lsrs	r3, r3, #18
 8001626:	3b01      	subs	r3, #1
 8001628:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800162a:	4b13      	ldr	r3, [pc, #76]	; (8001678 <HAL_InitTick+0xd0>)
 800162c:	4a13      	ldr	r2, [pc, #76]	; (800167c <HAL_InitTick+0xd4>)
 800162e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001630:	4b11      	ldr	r3, [pc, #68]	; (8001678 <HAL_InitTick+0xd0>)
 8001632:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001636:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001638:	4a0f      	ldr	r2, [pc, #60]	; (8001678 <HAL_InitTick+0xd0>)
 800163a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800163c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800163e:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <HAL_InitTick+0xd0>)
 8001640:	2200      	movs	r2, #0
 8001642:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001644:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <HAL_InitTick+0xd0>)
 8001646:	2200      	movs	r2, #0
 8001648:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800164a:	480b      	ldr	r0, [pc, #44]	; (8001678 <HAL_InitTick+0xd0>)
 800164c:	f015 f9ad 	bl	80169aa <HAL_TIM_Base_Init>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d104      	bne.n	8001660 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001656:	4808      	ldr	r0, [pc, #32]	; (8001678 <HAL_InitTick+0xd0>)
 8001658:	f015 f9fe 	bl	8016a58 <HAL_TIM_Base_Start_IT>
 800165c:	4603      	mov	r3, r0
 800165e:	e000      	b.n	8001662 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
}
 8001662:	4618      	mov	r0, r3
 8001664:	3740      	adds	r7, #64	; 0x40
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	24000050 	.word	0x24000050
 8001670:	58024400 	.word	0x58024400
 8001674:	431bde83 	.word	0x431bde83
 8001678:	24000360 	.word	0x24000360
 800167c:	40001000 	.word	0x40001000

08001680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001684:	e7fe      	b.n	8001684 <NMI_Handler+0x4>

08001686 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800168a:	e7fe      	b.n	800168a <HardFault_Handler+0x4>

0800168c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001690:	e7fe      	b.n	8001690 <MemManage_Handler+0x4>

08001692 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001696:	e7fe      	b.n	8001696 <BusFault_Handler+0x4>

08001698 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800169c:	e7fe      	b.n	800169c <UsageFault_Handler+0x4>

0800169e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800169e:	b480      	push	{r7}
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016b0:	4802      	ldr	r0, [pc, #8]	; (80016bc <TIM6_DAC_IRQHandler+0x10>)
 80016b2:	f015 fa49 	bl	8016b48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	24000360 	.word	0x24000360

080016c0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80016c4:	4802      	ldr	r0, [pc, #8]	; (80016d0 <LTDC_IRQHandler+0x10>)
 80016c6:	f011 fc43 	bl	8012f50 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	240001dc 	.word	0x240001dc

080016d4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80016d8:	4802      	ldr	r0, [pc, #8]	; (80016e4 <DMA2D_IRQHandler+0x10>)
 80016da:	f010 f8e5 	bl	80118a8 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	24000174 	.word	0x24000174

080016e8 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 80016ec:	4802      	ldr	r0, [pc, #8]	; (80016f8 <QUADSPI_IRQHandler+0x10>)
 80016ee:	f012 f929 	bl	8013944 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	24000284 	.word	0x24000284

080016fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
	return 1;
 8001700:	2301      	movs	r3, #1
}
 8001702:	4618      	mov	r0, r3
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <_kill>:

int _kill(int pid, int sig)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001716:	f02b faa7 	bl	802cc68 <__errno>
 800171a:	4603      	mov	r3, r0
 800171c:	2216      	movs	r2, #22
 800171e:	601a      	str	r2, [r3, #0]
	return -1;
 8001720:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001724:	4618      	mov	r0, r3
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <_exit>:

void _exit (int status)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001734:	f04f 31ff 	mov.w	r1, #4294967295
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff ffe7 	bl	800170c <_kill>
	while (1) {}		/* Make sure we hang here */
 800173e:	e7fe      	b.n	800173e <_exit+0x12>

08001740 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	e00a      	b.n	8001768 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001752:	f3af 8000 	nop.w
 8001756:	4601      	mov	r1, r0
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	1c5a      	adds	r2, r3, #1
 800175c:	60ba      	str	r2, [r7, #8]
 800175e:	b2ca      	uxtb	r2, r1
 8001760:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	3301      	adds	r3, #1
 8001766:	617b      	str	r3, [r7, #20]
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	429a      	cmp	r2, r3
 800176e:	dbf0      	blt.n	8001752 <_read+0x12>
	}

return len;
 8001770:	687b      	ldr	r3, [r7, #4]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b086      	sub	sp, #24
 800177e:	af00      	add	r7, sp, #0
 8001780:	60f8      	str	r0, [r7, #12]
 8001782:	60b9      	str	r1, [r7, #8]
 8001784:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001786:	2300      	movs	r3, #0
 8001788:	617b      	str	r3, [r7, #20]
 800178a:	e009      	b.n	80017a0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	1c5a      	adds	r2, r3, #1
 8001790:	60ba      	str	r2, [r7, #8]
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	3301      	adds	r3, #1
 800179e:	617b      	str	r3, [r7, #20]
 80017a0:	697a      	ldr	r2, [r7, #20]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	dbf1      	blt.n	800178c <_write+0x12>
	}
	return len;
 80017a8:	687b      	ldr	r3, [r7, #4]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <_close>:

int _close(int file)
{
 80017b2:	b480      	push	{r7}
 80017b4:	b083      	sub	sp, #12
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
	return -1;
 80017ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017be:	4618      	mov	r0, r3
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b083      	sub	sp, #12
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
 80017d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017da:	605a      	str	r2, [r3, #4]
	return 0;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <_isatty>:

int _isatty(int file)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b083      	sub	sp, #12
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
	return 1;
 80017f2:	2301      	movs	r3, #1
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
	return 0;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3714      	adds	r7, #20
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
	...

0800181c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001824:	4a14      	ldr	r2, [pc, #80]	; (8001878 <_sbrk+0x5c>)
 8001826:	4b15      	ldr	r3, [pc, #84]	; (800187c <_sbrk+0x60>)
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001830:	4b13      	ldr	r3, [pc, #76]	; (8001880 <_sbrk+0x64>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d102      	bne.n	800183e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001838:	4b11      	ldr	r3, [pc, #68]	; (8001880 <_sbrk+0x64>)
 800183a:	4a12      	ldr	r2, [pc, #72]	; (8001884 <_sbrk+0x68>)
 800183c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800183e:	4b10      	ldr	r3, [pc, #64]	; (8001880 <_sbrk+0x64>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4413      	add	r3, r2
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	429a      	cmp	r2, r3
 800184a:	d207      	bcs.n	800185c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800184c:	f02b fa0c 	bl	802cc68 <__errno>
 8001850:	4603      	mov	r3, r0
 8001852:	220c      	movs	r2, #12
 8001854:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001856:	f04f 33ff 	mov.w	r3, #4294967295
 800185a:	e009      	b.n	8001870 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800185c:	4b08      	ldr	r3, [pc, #32]	; (8001880 <_sbrk+0x64>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001862:	4b07      	ldr	r3, [pc, #28]	; (8001880 <_sbrk+0x64>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	4a05      	ldr	r2, [pc, #20]	; (8001880 <_sbrk+0x64>)
 800186c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800186e:	68fb      	ldr	r3, [r7, #12]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	24080000 	.word	0x24080000
 800187c:	00001000 	.word	0x00001000
 8001880:	240003ac 	.word	0x240003ac
 8001884:	2400c720 	.word	0x2400c720

08001888 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001888:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800188c:	f00d f896 	bl	800e9bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001890:	480c      	ldr	r0, [pc, #48]	; (80018c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001892:	490d      	ldr	r1, [pc, #52]	; (80018c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001894:	4a0d      	ldr	r2, [pc, #52]	; (80018cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001896:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001898:	e002      	b.n	80018a0 <LoopCopyDataInit>

0800189a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800189a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800189c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800189e:	3304      	adds	r3, #4

080018a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018a4:	d3f9      	bcc.n	800189a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018a6:	4a0a      	ldr	r2, [pc, #40]	; (80018d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018a8:	4c0a      	ldr	r4, [pc, #40]	; (80018d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018ac:	e001      	b.n	80018b2 <LoopFillZerobss>

080018ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018b0:	3204      	adds	r2, #4

080018b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018b4:	d3fb      	bcc.n	80018ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018b6:	f02b f9dd 	bl	802cc74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ba:	f7fe fda9 	bl	8000410 <main>
  bx  lr
 80018be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018c0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80018c4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80018c8:	24000134 	.word	0x24000134
  ldr r2, =_sidata
 80018cc:	0802ff94 	.word	0x0802ff94
  ldr r2, =_sbss
 80018d0:	24000134 	.word	0x24000134
  ldr r4, =_ebss
 80018d4:	2400c720 	.word	0x2400c720

080018d8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018d8:	e7fe      	b.n	80018d8 <ADC3_IRQHandler>

080018da <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 80018de:	f001 fcd9 	bl	8003294 <touchgfx_init>
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 80018ee:	f001 fcfb 	bl	80032e8 <touchgfx_taskEntry>
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
	...

080018fc <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
    {
 8001904:	4a04      	ldr	r2, [pc, #16]	; (8001918 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	601a      	str	r2, [r3, #0]
    }
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4618      	mov	r0, r3
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	0802e660 	.word	0x0802e660

0800191c <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
    }
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f7ff ffe9 	bl	80018fc <_ZN8touchgfx15TouchControllerD1Ev>
 800192a:	2104      	movs	r1, #4
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f02a fe6e 	bl	802c60e <_ZdlPvj>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4618      	mov	r0, r3
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <_ZN20STM32TouchController4initEv>:

#include <STM32TouchController.hpp>
#include "stm32h745i_touchcontroller.hpp"

void STM32TouchController::init()
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
    STM32H745ITouchController::init();
 8001944:	f000 fb02 	bl	8001f4c <_ZN25STM32H745ITouchController4initEv>
}
 8001948:	bf00      	nop
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return STM32H745ITouchController::sampleTouch(x, y);
 800195c:	6879      	ldr	r1, [r7, #4]
 800195e:	68b8      	ldr	r0, [r7, #8]
 8001960:	f000 fb18 	bl	8001f94 <_ZN25STM32H745ITouchController11sampleTouchERlS0_>
 8001964:	4603      	mov	r3, r0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
	...

08001970 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	4a05      	ldr	r2, [pc, #20]	; (8001990 <_ZN20STM32TouchControllerD1Ev+0x20>)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff ffbb 	bl	80018fc <_ZN8touchgfx15TouchControllerD1Ev>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4618      	mov	r0, r3
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	0802e648 	.word	0x0802e648

08001994 <_ZN20STM32TouchControllerD0Ev>:
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f7ff ffe7 	bl	8001970 <_ZN20STM32TouchControllerD1Ev>
 80019a2:	2104      	movs	r1, #4
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f02a fe32 	bl	802c60e <_ZdlPvj>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4618      	mov	r0, r3
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <_ZN8touchgfx4GPIO4initEv>:

/*
 * Perform configuration of IO pins.
 */
void GPIO::init()
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
    for (int id = 0; id < 4; id++)
 80019ba:	2300      	movs	r3, #0
 80019bc:	607b      	str	r3, [r7, #4]
 80019be:	e015      	b.n	80019ec <_ZN8touchgfx4GPIO4initEv+0x38>
    {
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	4618      	mov	r0, r3
 80019c6:	f000 f86f 	bl	8001aa8 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d00a      	beq.n	80019e6 <_ZN8touchgfx4GPIO4initEv+0x32>
        {
            if (GPIO_InvertedLevels[id] != 1)
 80019d0:	4a0a      	ldr	r2, [pc, #40]	; (80019fc <_ZN8touchgfx4GPIO4initEv+0x48>)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d004      	beq.n	80019e6 <_ZN8touchgfx4GPIO4initEv+0x32>
            {
                GPIO_InvertedLevels[id] = 1;
 80019dc:	4a07      	ldr	r2, [pc, #28]	; (80019fc <_ZN8touchgfx4GPIO4initEv+0x48>)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2101      	movs	r1, #1
 80019e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int id = 0; id < 4; id++)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	3301      	adds	r3, #1
 80019ea:	607b      	str	r3, [r7, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2b03      	cmp	r3, #3
 80019f0:	dde6      	ble.n	80019c0 <_ZN8touchgfx4GPIO4initEv+0xc>
            }
        }
    }
}
 80019f2:	bf00      	nop
 80019f4:	bf00      	nop
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	240003b0 	.word	0x240003b0

08001a00 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	2b03      	cmp	r3, #3
 8001a0e:	d80c      	bhi.n	8001a2a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 8001a10:	a201      	add	r2, pc, #4	; (adr r2, 8001a18 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 8001a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a16:	bf00      	nop
 8001a18:	08001a29 	.word	0x08001a29
 8001a1c:	08001a29 	.word	0x08001a29
 8001a20:	08001a29 	.word	0x08001a29
 8001a24:	08001a29 	.word	0x08001a29
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
 8001a28:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    }
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop

08001a38 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	2b03      	cmp	r3, #3
 8001a46:	d80c      	bhi.n	8001a62 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 8001a48:	a201      	add	r2, pc, #4	; (adr r2, 8001a50 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 8001a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a4e:	bf00      	nop
 8001a50:	08001a61 	.word	0x08001a61
 8001a54:	08001a61 	.word	0x08001a61
 8001a58:	08001a61 	.word	0x08001a61
 8001a5c:	08001a61 	.word	0x08001a61
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
 8001a60:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    }
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop

08001a70 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	2b03      	cmp	r3, #3
 8001a7e:	d80c      	bhi.n	8001a9a <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 8001a80:	a201      	add	r2, pc, #4	; (adr r2, 8001a88 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 8001a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a86:	bf00      	nop
 8001a88:	08001a99 	.word	0x08001a99
 8001a8c:	08001a99 	.word	0x08001a99
 8001a90:	08001a99 	.word	0x08001a99
 8001a94:	08001a99 	.word	0x08001a99
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 8001a98:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop

08001aa8 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	71fb      	strb	r3, [r7, #7]
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	73fb      	strb	r3, [r7, #15]
    switch (id)
 8001ab6:	79fb      	ldrb	r3, [r7, #7]
 8001ab8:	2b03      	cmp	r3, #3
 8001aba:	d80b      	bhi.n	8001ad4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x2c>
 8001abc:	a201      	add	r2, pc, #4	; (adr r2, 8001ac4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x1c>)
 8001abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac2:	bf00      	nop
 8001ac4:	08001ad5 	.word	0x08001ad5
 8001ac8:	08001ad5 	.word	0x08001ad5
 8001acc:	08001ad5 	.word	0x08001ad5
 8001ad0:	08001ad5 	.word	0x08001ad5
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	bf0c      	ite	eq
 8001ada:	2301      	moveq	r3, #1
 8001adc:	2300      	movne	r3, #0
 8001ade:	b2db      	uxtb	r3, r3
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <_ZN8touchgfx3HALD1Ev>:
        DISPLAY_ROTATION = rotate0;
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
    }

    /** Finalizes an instance of the HAL class. */
    virtual ~HAL()
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
    {
 8001af4:	4a04      	ldr	r2, [pc, #16]	; (8001b08 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	601a      	str	r2, [r3, #0]
    }
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4618      	mov	r0, r3
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	0802f524 	.word	0x0802f524

08001b0c <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
    }
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f7ff ffe9 	bl	8001aec <_ZN8touchgfx3HALD1Ev>
 8001b1a:	217c      	movs	r1, #124	; 0x7c
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f02a fd76 	bl	802c60e <_ZdlPvj>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4618      	mov	r0, r3
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @param  orientation The desired display orientation.
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	460b      	mov	r3, r1
 8001b36:	70fb      	strb	r3, [r7, #3]
    {
        requestedOrientation = orientation;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	78fa      	ldrb	r2, [r7, #3]
 8001b3c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        displayOrientationChangeRequested = true;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
    }
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
     * @param   width   The width of the framebuffer.
     * @param   height  The height of the framebuffer.
     *
     * @see touchgfx_generic_init
     */
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	807b      	strh	r3, [r7, #2]
 8001b60:	4613      	mov	r3, r2
 8001b62:	803b      	strh	r3, [r7, #0]
    {
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001b64:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 8001b66:	881b      	ldrh	r3, [r3, #0]
 8001b68:	887a      	ldrh	r2, [r7, #2]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d304      	bcc.n	8001b78 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 8001b6e:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 8001b70:	881b      	ldrh	r3, [r3, #0]
 8001b72:	883a      	ldrh	r2, [r7, #0]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d205      	bcs.n	8001b84 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 8001b78:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 8001b7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ba4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 8001b7c:	219e      	movs	r1, #158	; 0x9e
 8001b7e:	480a      	ldr	r0, [pc, #40]	; (8001ba8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 8001b80:	f02a fd74 	bl	802c66c <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001b84:	4a09      	ldr	r2, [pc, #36]	; (8001bac <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 8001b86:	887b      	ldrh	r3, [r7, #2]
 8001b88:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001b8a:	4a09      	ldr	r2, [pc, #36]	; (8001bb0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 8001b8c:	883b      	ldrh	r3, [r7, #0]
 8001b8e:	8013      	strh	r3, [r2, #0]
    }
 8001b90:	bf00      	nop
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	2400bae4 	.word	0x2400bae4
 8001b9c:	2400bae6 	.word	0x2400bae6
 8001ba0:	0802d7a0 	.word	0x0802d7a0
 8001ba4:	0802d804 	.word	0x0802d804
 8001ba8:	0802d848 	.word	0x0802d848
 8001bac:	2400baea 	.word	0x2400baea
 8001bb0:	2400baec 	.word	0x2400baec

08001bb4 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d009      	beq.n	8001bda <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685a      	ldr	r2, [r3, #4]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4610      	mov	r0, r2
 8001bd4:	4798      	blx	r3
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	e000      	b.n	8001bdc <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 8001bda:	2300      	movs	r3, #0
    }
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f017 fa8d 	bl	801910c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	33ac      	adds	r3, #172	; 0xac
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	4798      	blx	r3
    }
 8001bfe:	bf00      	nop
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
 8001c0e:	6039      	str	r1, [r7, #0]
    {
        (void)key; // Unused variable
        return false;
 8001c10:	2300      	movs	r3, #0
    }
 8001c12:	4618      	mov	r0, r3
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
	...

08001c20 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
 8001c2c:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d106      	bne.n	8001c42 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8001c34:	4b0f      	ldr	r3, [pc, #60]	; (8001c74 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 8001c36:	4a10      	ldr	r2, [pc, #64]	; (8001c78 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 8001c38:	f240 21d2 	movw	r1, #722	; 0x2d2
 8001c3c:	480f      	ldr	r0, [pc, #60]	; (8001c7c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8001c3e:	f02a fd15 	bl	802c66c <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	68ba      	ldr	r2, [r7, #8]
 8001c46:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	bf14      	ite	ne
 8001c54:	2301      	movne	r3, #1
 8001c56:	2300      	moveq	r3, #0
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8001c5c:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	338c      	adds	r3, #140	; 0x8c
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	6839      	ldr	r1, [r7, #0]
 8001c68:	68f8      	ldr	r0, [r7, #12]
 8001c6a:	4798      	blx	r3
    }
 8001c6c:	bf00      	nop
 8001c6e:	3710      	adds	r7, #16
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	0802d890 	.word	0x0802d890
 8001c78:	0802d8c8 	.word	0x0802d8c8
 8001c7c:	0802d848 	.word	0x0802d848
 8001c80:	2400baee 	.word	0x2400baee

08001c84 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	645a      	str	r2, [r3, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	bf14      	ite	ne
 8001c9a:	2301      	movne	r3, #1
 8001c9c:	2300      	moveq	r3, #0
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	4b03      	ldr	r3, [pc, #12]	; (8001cb0 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 8001ca2:	701a      	strb	r2, [r3, #0]
    }
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	2400baef 	.word	0x2400baef

08001cb4 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8001cbc:	2300      	movs	r3, #0
    }
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b082      	sub	sp, #8
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d004      	beq.n	8001ce8 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce2:	887a      	ldrh	r2, [r7, #2]
 8001ce4:	4610      	mov	r0, r2
 8001ce6:	4798      	blx	r3
        }
    }
 8001ce8:	bf00      	nop
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 8001cf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685a      	ldr	r2, [r3, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	3318      	adds	r3, #24
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4610      	mov	r0, r2
 8001d20:	4798      	blx	r3
 8001d22:	4603      	mov	r3, r0
    }
 8001d24:	4618      	mov	r0, r3
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d011      	beq.n	8001d68 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 8001d44:	4b14      	ldr	r3, [pc, #80]	; (8001d98 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d11e      	bne.n	8001d8a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001d4c:	4b13      	ldr	r3, [pc, #76]	; (8001d9c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001d4e:	881b      	ldrh	r3, [r3, #0]
 8001d50:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d52:	4b13      	ldr	r3, [pc, #76]	; (8001da0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001d54:	881a      	ldrh	r2, [r3, #0]
 8001d56:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001d58:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 8001d5a:	4a11      	ldr	r2, [pc, #68]	; (8001da0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001d5c:	89bb      	ldrh	r3, [r7, #12]
 8001d5e:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001d60:	4b0d      	ldr	r3, [pc, #52]	; (8001d98 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8001d66:	e010      	b.n	8001d8a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 8001d68:	4b0b      	ldr	r3, [pc, #44]	; (8001d98 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d00c      	beq.n	8001d8a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001d70:	4b0a      	ldr	r3, [pc, #40]	; (8001d9c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001d72:	881b      	ldrh	r3, [r3, #0]
 8001d74:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d76:	4b0a      	ldr	r3, [pc, #40]	; (8001da0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001d78:	881a      	ldrh	r2, [r3, #0]
 8001d7a:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001d7c:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 8001d7e:	4a08      	ldr	r2, [pc, #32]	; (8001da0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001d80:	89fb      	ldrh	r3, [r7, #14]
 8001d82:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001d84:	4b04      	ldr	r3, [pc, #16]	; (8001d98 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	701a      	strb	r2, [r3, #0]
    }
 8001d8a:	bf00      	nop
 8001d8c:	3714      	adds	r7, #20
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	2400bae8 	.word	0x2400bae8
 8001d9c:	2400bae6 	.word	0x2400bae6
 8001da0:	2400bae4 	.word	0x2400bae4

08001da4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f016 fc09 	bl	80185c6 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8001db4:	bf00      	nop
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	4a05      	ldr	r2, [pc, #20]	; (8001ddc <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff fe8d 	bl	8001aec <_ZN8touchgfx3HALD1Ev>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	0802ea00 	.word	0x0802ea00

08001de0 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f7ff ffe7 	bl	8001dbc <_ZN20TouchGFXGeneratedHALD1Ev>
 8001dee:	217c      	movs	r1, #124	; 0x7c
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f02a fc0c 	bl	802c60e <_ZdlPvj>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff ffca 	bl	8001da4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8001e10:	bf00      	nop
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <_ZN11TouchGFXHAL10initializeEv>:
/* USER CODE BEGIN TouchGFXHAL.cpp */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f001 fd50 	bl	80038c8 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8001e28:	bf00      	nop
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f001 fddc 	bl	80039f8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8001e40:	4603      	mov	r3, r0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
 8001e52:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6839      	ldr	r1, [r7, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f001 fddb 	bl	8003a14 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b082      	sub	sp, #8
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
 8001e6e:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6839      	ldr	r1, [r7, #0]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f001 fde3 	bl	8003a40 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 8001e7a:	bf00      	nop
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b084      	sub	sp, #16
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	60f8      	str	r0, [r7, #12]
 8001e8a:	60b9      	str	r1, [r7, #8]
 8001e8c:	607a      	str	r2, [r7, #4]
 8001e8e:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8001e90:	68f8      	ldr	r0, [r7, #12]
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	68b9      	ldr	r1, [r7, #8]
 8001e98:	f001 fe28 	bl	8003aec <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8001e9c:	4603      	mov	r3, r0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b082      	sub	sp, #8
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f001 fd2d 	bl	8003910 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8001eb6:	bf00      	nop
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f001 fd31 	bl	8003930 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b082      	sub	sp, #8
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f001 fd33 	bl	800394c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b082      	sub	sp, #8
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f001 fd35 	bl	8003968 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
	...

08001f08 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	4a05      	ldr	r2, [pc, #20]	; (8001f28 <_ZN11TouchGFXHALD1Ev+0x20>)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff ff4f 	bl	8001dbc <_ZN20TouchGFXGeneratedHALD1Ev>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4618      	mov	r0, r3
 8001f22:	3708      	adds	r7, #8
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	0802e678 	.word	0x0802e678

08001f2c <_ZN11TouchGFXHALD0Ev>:
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f7ff ffe7 	bl	8001f08 <_ZN11TouchGFXHALD1Ev>
 8001f3a:	217c      	movs	r1, #124	; 0x7c
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f02a fb66 	bl	802c60e <_ZdlPvj>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4618      	mov	r0, r3
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <_ZN25STM32H745ITouchController4initEv>:

/**
 * @brief initializes the touch controller
 */
void STM32H745ITouchController::init()
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
    static const uint32_t width = 480;
    static const uint32_t height = 272;

    TS_Init_t config;
    config.Width = width;
 8001f52:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001f56:	603b      	str	r3, [r7, #0]
    config.Height = height;
 8001f58:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001f5c:	607b      	str	r3, [r7, #4]
    config.Orientation = TS_SWAP_XY;
 8001f5e:	2308      	movs	r3, #8
 8001f60:	60bb      	str	r3, [r7, #8]
    config.Accuracy = 0;
 8001f62:	2300      	movs	r3, #0
 8001f64:	60fb      	str	r3, [r7, #12]

    if (BSP_TS_Init(0, &config) != BSP_ERROR_NONE)
 8001f66:	463b      	mov	r3, r7
 8001f68:	4619      	mov	r1, r3
 8001f6a:	2000      	movs	r0, #0
 8001f6c:	f00e fee0 	bl	8010d30 <BSP_TS_Init>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	bf14      	ite	ne
 8001f76:	2301      	movne	r3, #1
 8001f78:	2300      	moveq	r3, #0
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d103      	bne.n	8001f88 <_ZN25STM32H745ITouchController4initEv+0x3c>
    {
        return;
    }

    _bsp_ts_initialized = true;
 8001f80:	4b03      	ldr	r3, [pc, #12]	; (8001f90 <_ZN25STM32H745ITouchController4initEv+0x44>)
 8001f82:	2201      	movs	r2, #1
 8001f84:	701a      	strb	r2, [r3, #0]
 8001f86:	e000      	b.n	8001f8a <_ZN25STM32H745ITouchController4initEv+0x3e>
        return;
 8001f88:	bf00      	nop
}
 8001f8a:	3710      	adds	r7, #16
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	240003c0 	.word	0x240003c0

08001f94 <_ZN25STM32H745ITouchController11sampleTouchERlS0_>:
 * @param x touch x coordinate
 * @param y touch y coordinate
 * @return \c true if a touch event was detected, else \c false
 */
bool STM32H745ITouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
    static TS_State_t state;

    if (!_bsp_ts_initialized)
 8001f9e:	4b11      	ldr	r3, [pc, #68]	; (8001fe4 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x50>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	f083 0301 	eor.w	r3, r3, #1
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x1c>
    {
        return false;
 8001fac:	2300      	movs	r3, #0
 8001fae:	e014      	b.n	8001fda <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x46>
    }

    BSP_TS_GetState(0, &state);
 8001fb0:	490d      	ldr	r1, [pc, #52]	; (8001fe8 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8001fb2:	2000      	movs	r0, #0
 8001fb4:	f00e ff78 	bl	8010ea8 <BSP_TS_GetState>

    if (!state.TouchDetected)
 8001fb8:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x30>
    {
        return false;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	e00a      	b.n	8001fda <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x46>
    }

    x = state.TouchX;
 8001fc4:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	601a      	str	r2, [r3, #0]
    y = state.TouchY;
 8001fce:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	601a      	str	r2, [r3, #0]
    return true;
 8001fd8:	2301      	movs	r3, #1
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	240003c0 	.word	0x240003c0
 8001fe8:	240003c4 	.word	0x240003c4

08001fec <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	2001      	movs	r0, #1
 8001ff6:	f009 f9ee 	bl	800b3d6 <osSemaphoreNew>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	4a0f      	ldr	r2, [pc, #60]	; (800203c <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8001ffe:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8002000:	4b0e      	ldr	r3, [pc, #56]	; (800203c <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d105      	bne.n	8002014 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8002008:	4b0d      	ldr	r3, [pc, #52]	; (8002040 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 800200a:	4a0e      	ldr	r2, [pc, #56]	; (8002044 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 800200c:	2128      	movs	r1, #40	; 0x28
 800200e:	480e      	ldr	r0, [pc, #56]	; (8002048 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8002010:	f02a fb2c 	bl	802c66c <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8002014:	2200      	movs	r2, #0
 8002016:	2104      	movs	r1, #4
 8002018:	2001      	movs	r0, #1
 800201a:	f009 fafb 	bl	800b614 <osMessageQueueNew>
 800201e:	4603      	mov	r3, r0
 8002020:	4a0a      	ldr	r2, [pc, #40]	; (800204c <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8002022:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8002024:	4b09      	ldr	r3, [pc, #36]	; (800204c <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d105      	bne.n	8002038 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 800202c:	4b08      	ldr	r3, [pc, #32]	; (8002050 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 800202e:	4a05      	ldr	r2, [pc, #20]	; (8002044 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8002030:	212c      	movs	r1, #44	; 0x2c
 8002032:	4805      	ldr	r0, [pc, #20]	; (8002048 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8002034:	f02a fb1a 	bl	802c66c <__assert_func>
}
 8002038:	bf00      	nop
 800203a:	bd80      	pop	{r7, pc}
 800203c:	240003d0 	.word	0x240003d0
 8002040:	0802d918 	.word	0x0802d918
 8002044:	0802d964 	.word	0x0802d964
 8002048:	0802d994 	.word	0x0802d994
 800204c:	240003d4 	.word	0x240003d4
 8002050:	0802da08 	.word	0x0802da08

08002054 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8002058:	4b04      	ldr	r3, [pc, #16]	; (800206c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f04f 31ff 	mov.w	r1, #4294967295
 8002060:	4618      	mov	r0, r3
 8002062:	f009 fa41 	bl	800b4e8 <osSemaphoreAcquire>
}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	240003d0 	.word	0x240003d0

08002070 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8002074:	4b03      	ldr	r3, [pc, #12]	; (8002084 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4618      	mov	r0, r3
 800207a:	f009 fa87 	bl	800b58c <osSemaphoreRelease>
}
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	240003d0 	.word	0x240003d0

08002088 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 800208c:	4b03      	ldr	r3, [pc, #12]	; (800209c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2100      	movs	r1, #0
 8002092:	4618      	mov	r0, r3
 8002094:	f009 fa28 	bl	800b4e8 <osSemaphoreAcquire>
}
 8002098:	bf00      	nop
 800209a:	bd80      	pop	{r7, pc}
 800209c:	240003d0 	.word	0x240003d0

080020a0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 80020a4:	4b03      	ldr	r3, [pc, #12]	; (80020b4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f009 fa6f 	bl	800b58c <osSemaphoreRelease>
}
 80020ae:	bf00      	nop
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	240003d0 	.word	0x240003d0

080020b8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 80020bc:	4b04      	ldr	r3, [pc, #16]	; (80020d0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 80020be:	6818      	ldr	r0, [r3, #0]
 80020c0:	2300      	movs	r3, #0
 80020c2:	2200      	movs	r2, #0
 80020c4:	4903      	ldr	r1, [pc, #12]	; (80020d4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 80020c6:	f009 fb19 	bl	800b6fc <osMessageQueuePut>
}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	240003d4 	.word	0x240003d4
 80020d4:	24000004 	.word	0x24000004

080020d8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 80020de:	4b09      	ldr	r3, [pc, #36]	; (8002104 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 80020e0:	6818      	ldr	r0, [r3, #0]
 80020e2:	1d39      	adds	r1, r7, #4
 80020e4:	2300      	movs	r3, #0
 80020e6:	2200      	movs	r2, #0
 80020e8:	f009 fb68 	bl	800b7bc <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 80020ec:	4b05      	ldr	r3, [pc, #20]	; (8002104 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 80020ee:	6818      	ldr	r0, [r3, #0]
 80020f0:	1d39      	adds	r1, r7, #4
 80020f2:	f04f 33ff 	mov.w	r3, #4294967295
 80020f6:	2200      	movs	r2, #0
 80020f8:	f009 fb60 	bl	800b7bc <osMessageQueueGet>
}
 80020fc:	bf00      	nop
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	240003d4 	.word	0x240003d4

08002108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002112:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002116:	2b00      	cmp	r3, #0
 8002118:	db0b      	blt.n	8002132 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800211a:	88fb      	ldrh	r3, [r7, #6]
 800211c:	f003 021f 	and.w	r2, r3, #31
 8002120:	4907      	ldr	r1, [pc, #28]	; (8002140 <__NVIC_EnableIRQ+0x38>)
 8002122:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002126:	095b      	lsrs	r3, r3, #5
 8002128:	2001      	movs	r0, #1
 800212a:	fa00 f202 	lsl.w	r2, r0, r2
 800212e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	e000e100 	.word	0xe000e100

08002144 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800214e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002152:	2b00      	cmp	r3, #0
 8002154:	db12      	blt.n	800217c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002156:	88fb      	ldrh	r3, [r7, #6]
 8002158:	f003 021f 	and.w	r2, r3, #31
 800215c:	490a      	ldr	r1, [pc, #40]	; (8002188 <__NVIC_DisableIRQ+0x44>)
 800215e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002162:	095b      	lsrs	r3, r3, #5
 8002164:	2001      	movs	r0, #1
 8002166:	fa00 f202 	lsl.w	r2, r0, r2
 800216a:	3320      	adds	r3, #32
 800216c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002170:	f3bf 8f4f 	dsb	sy
}
 8002174:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002176:	f3bf 8f6f 	isb	sy
}
 800217a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	e000e100 	.word	0xe000e100

0800218c <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
        : color(0)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
    {
    }
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4618      	mov	r0, r3
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <_ZNK8touchgfx9colortypecvmEv>:
    /**
     * Cast that converts the given colortype to an uint32_t.
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
    {
        return color;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
    }
 80021b4:	4618      	mov	r0, r3
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
    {
 80021c8:	4a04      	ldr	r2, [pc, #16]	; (80021dc <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	601a      	str	r2, [r3, #0]
    }
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4618      	mov	r0, r3
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	0802e7a0 	.word	0x0802e7a0

080021e0 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
    }
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f7ff ffe9 	bl	80021c0 <_ZN8touchgfx9DMA_QueueD1Ev>
 80021ee:	2104      	movs	r1, #4
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f02a fa0c 	bl	802c60e <_ZdlPvj>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4618      	mov	r0, r3
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	3344      	adds	r3, #68	; 0x44
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	4798      	blx	r3
    }
 8002214:	bf00      	nop
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
    {
 8002224:	4a04      	ldr	r2, [pc, #16]	; (8002238 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	601a      	str	r2, [r3, #0]
    }
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4618      	mov	r0, r3
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	0802f5fc 	.word	0x0802f5fc

0800223c <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
    }
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f7ff ffe9 	bl	800221c <_ZN8touchgfx13DMA_InterfaceD1Ev>
 800224a:	210c      	movs	r1, #12
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f02a f9de 	bl	802c60e <_ZdlPvj>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4618      	mov	r0, r3
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8002266:	4a09      	ldr	r2, [pc, #36]	; (800228c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	683a      	ldr	r2, [r7, #0]
 8002270:	605a      	str	r2, [r3, #4]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	721a      	strb	r2, [r3, #8]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	725a      	strb	r2, [r3, #9]
    {
    }
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4618      	mov	r0, r3
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	0802f5fc 	.word	0x0802f5fc

08002290 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8002298:	2301      	movs	r3, #1
    }
 800229a:	4618      	mov	r0, r3
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	3328      	adds	r3, #40	; 0x28
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4610      	mov	r0, r2
 80022ba:	4798      	blx	r3
    }
 80022bc:	bf00      	nop
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <_ZN8touchgfx3HAL11getInstanceEv>:
    static HAL* getInstance()
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
        return instance;
 80022c8:	4b03      	ldr	r3, [pc, #12]	; (80022d8 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 80022ca:	681b      	ldr	r3, [r3, #0]
    }
 80022cc:	4618      	mov	r0, r3
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	2400baf0 	.word	0x2400baf0

080022dc <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	3314      	adds	r3, #20
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4610      	mov	r0, r2
 80022f4:	4798      	blx	r3
    }
 80022f6:	bf00      	nop
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 80022fe:	b580      	push	{r7, lr}
 8002300:	b082      	sub	sp, #8
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 8002306:	f7ff ffdd 	bl	80022c4 <_ZN8touchgfx3HAL11getInstanceEv>
 800230a:	4603      	mov	r3, r0
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff ffe5 	bl	80022dc <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 8002312:	bf00      	nop
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 800231a:	b580      	push	{r7, lr}
 800231c:	b082      	sub	sp, #8
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	330c      	adds	r3, #12
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff ff30 	bl	800218c <_ZN8touchgfx9colortypeC1Ev>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4618      	mov	r0, r3
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
	...

08002338 <_ZN8STM32DMAC1Ev>:
}

STM32DMA::STM32DMA()
 8002338:	b5b0      	push	{r4, r5, r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	330c      	adds	r3, #12
 8002346:	4619      	mov	r1, r3
 8002348:	4610      	mov	r0, r2
 800234a:	f7ff ff87 	bl	800225c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 800234e:	4a0e      	ldr	r2, [pc, #56]	; (8002388 <_ZN8STM32DMAC1Ev+0x50>)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f103 000c 	add.w	r0, r3, #12
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	3320      	adds	r3, #32
 800235e:	2260      	movs	r2, #96	; 0x60
 8002360:	4619      	mov	r1, r3
 8002362:	f017 f80d 	bl	8019380 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3320      	adds	r3, #32
 800236a:	245f      	movs	r4, #95	; 0x5f
 800236c:	461d      	mov	r5, r3
 800236e:	e004      	b.n	800237a <_ZN8STM32DMAC1Ev+0x42>
 8002370:	4628      	mov	r0, r5
 8002372:	f7ff ffd2 	bl	800231a <_ZN8touchgfx6BlitOpC1Ev>
 8002376:	3524      	adds	r5, #36	; 0x24
 8002378:	3c01      	subs	r4, #1
 800237a:	2c00      	cmp	r4, #0
 800237c:	daf8      	bge.n	8002370 <_ZN8STM32DMAC1Ev+0x38>
{
}
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4618      	mov	r0, r3
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	bdb0      	pop	{r4, r5, r7, pc}
 8002388:	0802e750 	.word	0x0802e750

0800238c <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	4a09      	ldr	r2, [pc, #36]	; (80023bc <_ZN8STM32DMAD1Ev+0x30>)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 800239a:	205a      	movs	r0, #90	; 0x5a
 800239c:	f7ff fed2 	bl	8002144 <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	330c      	adds	r3, #12
 80023a4:	4618      	mov	r0, r3
 80023a6:	f000 facb 	bl	8002940 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff ff35 	bl	800221c <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4618      	mov	r0, r3
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	0802e750 	.word	0x0802e750

080023c0 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
}
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f7ff ffdf 	bl	800238c <_ZN8STM32DMAD1Ev>
 80023ce:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f02a f91b 	bl	802c60e <_ZdlPvj>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4618      	mov	r0, r3
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
	...

080023e4 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80023ec:	4b12      	ldr	r3, [pc, #72]	; (8002438 <_ZN8STM32DMA10initializeEv+0x54>)
 80023ee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80023f2:	4a11      	ldr	r2, [pc, #68]	; (8002438 <_ZN8STM32DMA10initializeEv+0x54>)
 80023f4:	f043 0310 	orr.w	r3, r3, #16
 80023f8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80023fc:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <_ZN8STM32DMA10initializeEv+0x54>)
 80023fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002402:	f003 0310 	and.w	r3, r3, #16
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 800240a:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <_ZN8STM32DMA10initializeEv+0x54>)
 800240c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800240e:	4a0a      	ldr	r2, [pc, #40]	; (8002438 <_ZN8STM32DMA10initializeEv+0x54>)
 8002410:	f043 0310 	orr.w	r3, r3, #16
 8002414:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8002416:	4b08      	ldr	r3, [pc, #32]	; (8002438 <_ZN8STM32DMA10initializeEv+0x54>)
 8002418:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800241a:	4a07      	ldr	r2, [pc, #28]	; (8002438 <_ZN8STM32DMA10initializeEv+0x54>)
 800241c:	f023 0310 	bic.w	r3, r3, #16
 8002420:	67d3      	str	r3, [r2, #124]	; 0x7c

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8002422:	4b06      	ldr	r3, [pc, #24]	; (800243c <_ZN8STM32DMA10initializeEv+0x58>)
 8002424:	4a06      	ldr	r2, [pc, #24]	; (8002440 <_ZN8STM32DMA10initializeEv+0x5c>)
 8002426:	621a      	str	r2, [r3, #32]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 8002428:	205a      	movs	r0, #90	; 0x5a
 800242a:	f7ff fe6d 	bl	8002108 <__NVIC_EnableIRQ>
}
 800242e:	bf00      	nop
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	58024400 	.word	0x58024400
 800243c:	24000174 	.word	0x24000174
 8002440:	080022ff 	.word	0x080022ff

08002444 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	460b      	mov	r3, r1
 800244e:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002450:	2300      	movs	r3, #0
 8002452:	60fb      	str	r3, [r7, #12]

    switch (format)
 8002454:	78fb      	ldrb	r3, [r7, #3]
 8002456:	2b0b      	cmp	r3, #11
 8002458:	d826      	bhi.n	80024a8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 800245a:	a201      	add	r2, pc, #4	; (adr r2, 8002460 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 800245c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002460:	0800249d 	.word	0x0800249d
 8002464:	08002497 	.word	0x08002497
 8002468:	08002491 	.word	0x08002491
 800246c:	080024a9 	.word	0x080024a9
 8002470:	080024a9 	.word	0x080024a9
 8002474:	080024a9 	.word	0x080024a9
 8002478:	080024a9 	.word	0x080024a9
 800247c:	080024a3 	.word	0x080024a3
 8002480:	080024a3 	.word	0x080024a3
 8002484:	080024a3 	.word	0x080024a3
 8002488:	080024a3 	.word	0x080024a3
 800248c:	080024a3 	.word	0x080024a3
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002490:	2300      	movs	r3, #0
 8002492:	60fb      	str	r3, [r7, #12]
        break;
 8002494:	e00e      	b.n	80024b4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8002496:	2301      	movs	r3, #1
 8002498:	60fb      	str	r3, [r7, #12]
        break;
 800249a:	e00b      	b.n	80024b4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 800249c:	2302      	movs	r3, #2
 800249e:	60fb      	str	r3, [r7, #12]
        break;
 80024a0:	e008      	b.n	80024b4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 80024a2:	2305      	movs	r3, #5
 80024a4:	60fb      	str	r3, [r7, #12]
        break;
 80024a6:	e005      	b.n	80024b4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 80024a8:	4b05      	ldr	r3, [pc, #20]	; (80024c0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 80024aa:	4a06      	ldr	r2, [pc, #24]	; (80024c4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 80024ac:	2166      	movs	r1, #102	; 0x66
 80024ae:	4806      	ldr	r0, [pc, #24]	; (80024c8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 80024b0:	f02a f8dc 	bl	802c66c <__assert_func>
        break;
    }

    return dma2dColorMode;
 80024b4:	68fb      	ldr	r3, [r7, #12]
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	0802da4c 	.word	0x0802da4c
 80024c4:	0802da68 	.word	0x0802da68
 80024c8:	0802dab4 	.word	0x0802dab4

080024cc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	460b      	mov	r3, r1
 80024d6:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 80024d8:	2300      	movs	r3, #0
 80024da:	60fb      	str	r3, [r7, #12]

    switch (format)
 80024dc:	78fb      	ldrb	r3, [r7, #3]
 80024de:	2b0a      	cmp	r3, #10
 80024e0:	d821      	bhi.n	8002526 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 80024e2:	a201      	add	r2, pc, #4	; (adr r2, 80024e8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 80024e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e8:	08002521 	.word	0x08002521
 80024ec:	0800251b 	.word	0x0800251b
 80024f0:	08002515 	.word	0x08002515
 80024f4:	08002527 	.word	0x08002527
 80024f8:	08002527 	.word	0x08002527
 80024fc:	08002527 	.word	0x08002527
 8002500:	08002527 	.word	0x08002527
 8002504:	0800251b 	.word	0x0800251b
 8002508:	0800251b 	.word	0x0800251b
 800250c:	0800251b 	.word	0x0800251b
 8002510:	0800251b 	.word	0x0800251b
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002514:	2300      	movs	r3, #0
 8002516:	60fb      	str	r3, [r7, #12]
        break;
 8002518:	e00b      	b.n	8002532 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 800251a:	2301      	movs	r3, #1
 800251c:	60fb      	str	r3, [r7, #12]
        break;
 800251e:	e008      	b.n	8002532 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8002520:	2302      	movs	r3, #2
 8002522:	60fb      	str	r3, [r7, #12]
        break;
 8002524:	e005      	b.n	8002532 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8002526:	4b05      	ldr	r3, [pc, #20]	; (800253c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8002528:	4a05      	ldr	r2, [pc, #20]	; (8002540 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 800252a:	2187      	movs	r1, #135	; 0x87
 800252c:	4805      	ldr	r0, [pc, #20]	; (8002544 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 800252e:	f02a f89d 	bl	802c66c <__assert_func>
        break;
    }

    return dma2dColorMode;
 8002532:	68fb      	ldr	r3, [r7, #12]
}
 8002534:	4618      	mov	r0, r3
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	0802da4c 	.word	0x0802da4c
 8002540:	0802db28 	.word	0x0802db28
 8002544:	0802dab4 	.word	0x0802dab4

08002548 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8002550:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 8002554:	4618      	mov	r0, r3
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8002560:	b590      	push	{r4, r7, lr}
 8002562:	b089      	sub	sp, #36	; 0x24
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	7f5b      	ldrb	r3, [r3, #29]
 800256e:	4619      	mov	r1, r3
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f7ff ff67 	bl	8002444 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8002576:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	7f9b      	ldrb	r3, [r3, #30]
 800257c:	4619      	mov	r1, r3
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7ff ff60 	bl	8002444 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8002584:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	7f9b      	ldrb	r3, [r3, #30]
 800258a:	4619      	mov	r1, r3
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f7ff ff9d 	bl	80024cc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8002592:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	8b5b      	ldrh	r3, [r3, #26]
 8002598:	461a      	mov	r2, r3
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	8a9b      	ldrh	r3, [r3, #20]
 800259e:	1ad2      	subs	r2, r2, r3
 80025a0:	4b92      	ldr	r3, [pc, #584]	; (80027ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80025a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	8b5b      	ldrh	r3, [r3, #26]
 80025a8:	461a      	mov	r2, r3
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	8a9b      	ldrh	r3, [r3, #20]
 80025ae:	1ad2      	subs	r2, r2, r3
 80025b0:	4b8e      	ldr	r3, [pc, #568]	; (80027ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80025b2:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	8b1b      	ldrh	r3, [r3, #24]
 80025b8:	461a      	mov	r2, r3
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	8a9b      	ldrh	r3, [r3, #20]
 80025be:	1ad2      	subs	r2, r2, r3
 80025c0:	4b8a      	ldr	r3, [pc, #552]	; (80027ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80025c2:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80025c4:	4a89      	ldr	r2, [pc, #548]	; (80027ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	8adb      	ldrh	r3, [r3, #22]
 80025ce:	461a      	mov	r2, r3
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	8a9b      	ldrh	r3, [r3, #20]
 80025d4:	041b      	lsls	r3, r3, #16
 80025d6:	431a      	orrs	r2, r3
 80025d8:	4b84      	ldr	r3, [pc, #528]	; (80027ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80025da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	691a      	ldr	r2, [r3, #16]
 80025e0:	4b82      	ldr	r3, [pc, #520]	; (80027ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80025e2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685a      	ldr	r2, [r3, #4]
 80025e8:	4b80      	ldr	r3, [pc, #512]	; (80027ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80025ea:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025f4:	d036      	beq.n	8002664 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x104>
 80025f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025fa:	f200 80e2 	bhi.w	80027c2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 80025fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002602:	d014      	beq.n	800262e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xce>
 8002604:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002608:	f200 80db 	bhi.w	80027c2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 800260c:	2b80      	cmp	r3, #128	; 0x80
 800260e:	d059      	beq.n	80026c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x164>
 8002610:	2b80      	cmp	r3, #128	; 0x80
 8002612:	f200 80d6 	bhi.w	80027c2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 8002616:	2b40      	cmp	r3, #64	; 0x40
 8002618:	f000 80be 	beq.w	8002798 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>
 800261c:	2b40      	cmp	r3, #64	; 0x40
 800261e:	f200 80d0 	bhi.w	80027c2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 8002622:	2b04      	cmp	r3, #4
 8002624:	d039      	beq.n	800269a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13a>
 8002626:	2b20      	cmp	r3, #32
 8002628:	f000 80b6 	beq.w	8002798 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>
 800262c:	e0c9      	b.n	80027c2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	7f1b      	ldrb	r3, [r3, #28]
 8002632:	061b      	lsls	r3, r3, #24
 8002634:	4619      	mov	r1, r3
 8002636:	4a6d      	ldr	r2, [pc, #436]	; (80027ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002638:	4b6d      	ldr	r3, [pc, #436]	; (80027f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800263a:	430b      	orrs	r3, r1
 800263c:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	330c      	adds	r3, #12
 8002642:	4c6a      	ldr	r4, [pc, #424]	; (80027ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff fdaf 	bl	80021a8 <_ZNK8touchgfx9colortypecvmEv>
 800264a:	4603      	mov	r3, r0
 800264c:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800264e:	4a67      	ldr	r2, [pc, #412]	; (80027ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	691a      	ldr	r2, [r3, #16]
 8002658:	4b64      	ldr	r3, [pc, #400]	; (80027ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800265a:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800265c:	4b63      	ldr	r3, [pc, #396]	; (80027ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800265e:	4a65      	ldr	r2, [pc, #404]	; (80027f4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8002660:	601a      	str	r2, [r3, #0]
        break;
 8002662:	e0da      	b.n	800281a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	7f1b      	ldrb	r3, [r3, #28]
 8002668:	061b      	lsls	r3, r3, #24
 800266a:	4619      	mov	r1, r3
 800266c:	4a5f      	ldr	r2, [pc, #380]	; (80027ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800266e:	4b62      	ldr	r3, [pc, #392]	; (80027f8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8002670:	430b      	orrs	r3, r1
 8002672:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	330c      	adds	r3, #12
 8002678:	4c5c      	ldr	r4, [pc, #368]	; (80027ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff fd94 	bl	80021a8 <_ZNK8touchgfx9colortypecvmEv>
 8002680:	4603      	mov	r3, r0
 8002682:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002684:	4a59      	ldr	r2, [pc, #356]	; (80027ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	691a      	ldr	r2, [r3, #16]
 800268e:	4b57      	ldr	r3, [pc, #348]	; (80027ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002690:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002692:	4b56      	ldr	r3, [pc, #344]	; (80027ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002694:	4a57      	ldr	r2, [pc, #348]	; (80027f4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8002696:	601a      	str	r2, [r3, #0]
        break;
 8002698:	e0bf      	b.n	800281a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	7f1b      	ldrb	r3, [r3, #28]
 800269e:	061b      	lsls	r3, r3, #24
 80026a0:	461a      	mov	r2, r3
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	4a51      	ldr	r2, [pc, #324]	; (80027ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80026a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026ac:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80026ae:	4a4f      	ldr	r2, [pc, #316]	; (80027ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	691a      	ldr	r2, [r3, #16]
 80026b8:	4b4c      	ldr	r3, [pc, #304]	; (80027ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80026ba:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80026bc:	4b4b      	ldr	r3, [pc, #300]	; (80027ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80026be:	4a4d      	ldr	r2, [pc, #308]	; (80027f4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80026c0:	601a      	str	r2, [r3, #0]
        break;
 80026c2:	e0aa      	b.n	800281a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 80026c4:	2301      	movs	r3, #1
 80026c6:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	1d1a      	adds	r2, r3, #4
 80026d2:	4b46      	ldr	r3, [pc, #280]	; (80027ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80026d4:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	7f1b      	ldrb	r3, [r3, #28]
 80026da:	061b      	lsls	r3, r3, #24
 80026dc:	461a      	mov	r2, r3
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	4a42      	ldr	r2, [pc, #264]	; (80027ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80026e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026e8:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80026ea:	4a40      	ldr	r2, [pc, #256]	; (80027ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	6253      	str	r3, [r2, #36]	; 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	691a      	ldr	r2, [r3, #16]
 80026f4:	4b3d      	ldr	r3, [pc, #244]	; (80027ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80026f6:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	881b      	ldrh	r3, [r3, #0]
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d002      	beq.n	8002708 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a8>
 8002702:	2b01      	cmp	r3, #1
 8002704:	d00d      	beq.n	8002722 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
 8002706:	e020      	b.n	800274a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ea>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002708:	4b38      	ldr	r3, [pc, #224]	; (80027ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800270a:	69da      	ldr	r2, [r3, #28]
 800270c:	4b3b      	ldr	r3, [pc, #236]	; (80027fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800270e:	4013      	ands	r3, r2
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	8852      	ldrh	r2, [r2, #2]
 8002714:	3a01      	subs	r2, #1
 8002716:	0212      	lsls	r2, r2, #8
 8002718:	4611      	mov	r1, r2
 800271a:	4a34      	ldr	r2, [pc, #208]	; (80027ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800271c:	430b      	orrs	r3, r1
 800271e:	61d3      	str	r3, [r2, #28]
                break;
 8002720:	e01a      	b.n	8002758 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f8>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if(blitOp.alpha == 255)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	7f1b      	ldrb	r3, [r3, #28]
 8002726:	2bff      	cmp	r3, #255	; 0xff
 8002728:	d101      	bne.n	800272e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ce>
                {
                  blend = false;
 800272a:	2300      	movs	r3, #0
 800272c:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800272e:	4b2f      	ldr	r3, [pc, #188]	; (80027ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002730:	69da      	ldr	r2, [r3, #28]
 8002732:	4b32      	ldr	r3, [pc, #200]	; (80027fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002734:	4013      	ands	r3, r2
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	8852      	ldrh	r2, [r2, #2]
 800273a:	3a01      	subs	r2, #1
 800273c:	0212      	lsls	r2, r2, #8
 800273e:	4313      	orrs	r3, r2
 8002740:	4a2a      	ldr	r2, [pc, #168]	; (80027ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002742:	f043 0310 	orr.w	r3, r3, #16
 8002746:	61d3      	str	r3, [r2, #28]
                break;
 8002748:	e006      	b.n	8002758 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f8>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 800274a:	4b2d      	ldr	r3, [pc, #180]	; (8002800 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800274c:	4a2d      	ldr	r2, [pc, #180]	; (8002804 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 800274e:	f240 1111 	movw	r1, #273	; 0x111
 8002752:	482d      	ldr	r0, [pc, #180]	; (8002808 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8002754:	f029 ff8a 	bl	802c66c <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8002758:	4b24      	ldr	r3, [pc, #144]	; (80027ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800275a:	69db      	ldr	r3, [r3, #28]
 800275c:	4a23      	ldr	r2, [pc, #140]	; (80027ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800275e:	f043 0320 	orr.w	r3, r3, #32
 8002762:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8002764:	bf00      	nop
 8002766:	4b21      	ldr	r3, [pc, #132]	; (80027ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002768:	69db      	ldr	r3, [r3, #28]
 800276a:	f003 0320 	and.w	r3, r3, #32
 800276e:	2b00      	cmp	r3, #0
 8002770:	bf14      	ite	ne
 8002772:	2301      	movne	r3, #1
 8002774:	2300      	moveq	r3, #0
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1f4      	bne.n	8002766 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x206>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 800277c:	4b1b      	ldr	r3, [pc, #108]	; (80027ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800277e:	2210      	movs	r2, #16
 8002780:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if(blend)
 8002782:	7ffb      	ldrb	r3, [r7, #31]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d003      	beq.n	8002790 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002788:	4b18      	ldr	r3, [pc, #96]	; (80027ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800278a:	4a1a      	ldr	r2, [pc, #104]	; (80027f4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800278c:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
      break;
 800278e:	e044      	b.n	800281a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8002790:	4b16      	ldr	r3, [pc, #88]	; (80027ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002792:	4a1e      	ldr	r2, [pc, #120]	; (800280c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8002794:	601a      	str	r2, [r3, #0]
      break;
 8002796:	e040      	b.n	800281a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	7f1b      	ldrb	r3, [r3, #28]
 800279c:	061b      	lsls	r3, r3, #24
 800279e:	461a      	mov	r2, r3
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	4a11      	ldr	r2, [pc, #68]	; (80027ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80027a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027aa:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80027ac:	4a0f      	ldr	r2, [pc, #60]	; (80027ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	691a      	ldr	r2, [r3, #16]
 80027b6:	4b0d      	ldr	r3, [pc, #52]	; (80027ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80027b8:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80027ba:	4b0c      	ldr	r3, [pc, #48]	; (80027ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80027bc:	4a0d      	ldr	r2, [pc, #52]	; (80027f4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80027be:	601a      	str	r2, [r3, #0]
        break;
 80027c0:	e02b      	b.n	800281a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	7f1b      	ldrb	r3, [r3, #28]
 80027c6:	061b      	lsls	r3, r3, #24
 80027c8:	461a      	mov	r2, r3
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	4a07      	ldr	r2, [pc, #28]	; (80027ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80027d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027d4:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	7f5a      	ldrb	r2, [r3, #29]
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	7f9b      	ldrb	r3, [r3, #30]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d016      	beq.n	8002810 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80027e2:	4b02      	ldr	r3, [pc, #8]	; (80027ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80027e4:	4a09      	ldr	r2, [pc, #36]	; (800280c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 80027e6:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 80027e8:	e016      	b.n	8002818 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>
 80027ea:	bf00      	nop
 80027ec:	52001000 	.word	0x52001000
 80027f0:	0002000a 	.word	0x0002000a
 80027f4:	00020201 	.word	0x00020201
 80027f8:	00020009 	.word	0x00020009
 80027fc:	ffff00ef 	.word	0xffff00ef
 8002800:	0802db74 	.word	0x0802db74
 8002804:	0802db90 	.word	0x0802db90
 8002808:	0802dab4 	.word	0x0802dab4
 800280c:	00010201 	.word	0x00010201
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002810:	4b04      	ldr	r3, [pc, #16]	; (8002824 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 8002812:	f240 2201 	movw	r2, #513	; 0x201
 8002816:	601a      	str	r2, [r3, #0]
        break;
 8002818:	bf00      	nop
    }
}
 800281a:	bf00      	nop
 800281c:	3724      	adds	r7, #36	; 0x24
 800281e:	46bd      	mov	sp, r7
 8002820:	bd90      	pop	{r4, r7, pc}
 8002822:	bf00      	nop
 8002824:	52001000 	.word	0x52001000

08002828 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8002828:	b590      	push	{r4, r7, lr}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	7f9b      	ldrb	r3, [r3, #30]
 8002836:	4619      	mov	r1, r3
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f7ff fe47 	bl	80024cc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800283e:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002840:	4a3b      	ldr	r2, [pc, #236]	; (8002930 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	8adb      	ldrh	r3, [r3, #22]
 800284a:	461a      	mov	r2, r3
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	8a9b      	ldrh	r3, [r3, #20]
 8002850:	041b      	lsls	r3, r3, #16
 8002852:	431a      	orrs	r2, r3
 8002854:	4b36      	ldr	r3, [pc, #216]	; (8002930 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002856:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	691a      	ldr	r2, [r3, #16]
 800285c:	4b34      	ldr	r3, [pc, #208]	; (8002930 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800285e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	8b5b      	ldrh	r3, [r3, #26]
 8002864:	461a      	mov	r2, r3
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	8a9b      	ldrh	r3, [r3, #20]
 800286a:	1ad2      	subs	r2, r2, r3
 800286c:	4b30      	ldr	r3, [pc, #192]	; (8002930 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800286e:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2b08      	cmp	r3, #8
 8002876:	d12e      	bne.n	80028d6 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xae>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	8b5b      	ldrh	r3, [r3, #26]
 800287c:	461a      	mov	r2, r3
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	8a9b      	ldrh	r3, [r3, #20]
 8002882:	1ad2      	subs	r2, r2, r3
 8002884:	4b2a      	ldr	r3, [pc, #168]	; (8002930 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002886:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	8b5b      	ldrh	r3, [r3, #26]
 800288c:	461a      	mov	r2, r3
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	8a9b      	ldrh	r3, [r3, #20]
 8002892:	1ad2      	subs	r2, r2, r3
 8002894:	4b26      	ldr	r3, [pc, #152]	; (8002930 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002896:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002898:	4a25      	ldr	r2, [pc, #148]	; (8002930 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	7f1b      	ldrb	r3, [r3, #28]
 80028a2:	061b      	lsls	r3, r3, #24
 80028a4:	4619      	mov	r1, r3
 80028a6:	4a22      	ldr	r2, [pc, #136]	; (8002930 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80028a8:	4b22      	ldr	r3, [pc, #136]	; (8002934 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>)
 80028aa:	430b      	orrs	r3, r1
 80028ac:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	330c      	adds	r3, #12
 80028b2:	4c1f      	ldr	r4, [pc, #124]	; (8002930 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff fc77 	bl	80021a8 <_ZNK8touchgfx9colortypecvmEv>
 80028ba:	4603      	mov	r3, r0
 80028bc:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	691a      	ldr	r2, [r3, #16]
 80028c2:	4b1b      	ldr	r3, [pc, #108]	; (8002930 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80028c4:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	691a      	ldr	r2, [r3, #16]
 80028ca:	4b19      	ldr	r3, [pc, #100]	; (8002930 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80028cc:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 80028ce:	4b18      	ldr	r3, [pc, #96]	; (8002930 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80028d0:	4a19      	ldr	r2, [pc, #100]	; (8002938 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 80028d2:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 80028d4:	e027      	b.n	8002926 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfe>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80028d6:	4a16      	ldr	r2, [pc, #88]	; (8002930 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 80028dc:	4b14      	ldr	r3, [pc, #80]	; (8002930 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80028de:	2200      	movs	r2, #0
 80028e0:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	330c      	adds	r3, #12
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7ff fc5e 	bl	80021a8 <_ZNK8touchgfx9colortypecvmEv>
 80028ec:	4603      	mov	r3, r0
 80028ee:	0a1b      	lsrs	r3, r3, #8
 80028f0:	f403 4478 	and.w	r4, r3, #63488	; 0xf800
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	330c      	adds	r3, #12
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff fc55 	bl	80021a8 <_ZNK8touchgfx9colortypecvmEv>
 80028fe:	4603      	mov	r3, r0
 8002900:	095b      	lsrs	r3, r3, #5
 8002902:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8002906:	431c      	orrs	r4, r3
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	330c      	adds	r3, #12
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff fc4b 	bl	80021a8 <_ZNK8touchgfx9colortypecvmEv>
 8002912:	4603      	mov	r3, r0
 8002914:	08db      	lsrs	r3, r3, #3
 8002916:	f003 031f 	and.w	r3, r3, #31
 800291a:	4a05      	ldr	r2, [pc, #20]	; (8002930 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800291c:	4323      	orrs	r3, r4
 800291e:	6393      	str	r3, [r2, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002920:	4b03      	ldr	r3, [pc, #12]	; (8002930 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002922:	4a06      	ldr	r2, [pc, #24]	; (800293c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x114>)
 8002924:	601a      	str	r2, [r3, #0]
}
 8002926:	bf00      	nop
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	bd90      	pop	{r4, r7, pc}
 800292e:	bf00      	nop
 8002930:	52001000 	.word	0x52001000
 8002934:	00010009 	.word	0x00010009
 8002938:	00020201 	.word	0x00020201
 800293c:	00030201 	.word	0x00030201

08002940 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	4a05      	ldr	r2, [pc, #20]	; (8002960 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff fc35 	bl	80021c0 <_ZN8touchgfx9DMA_QueueD1Ev>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4618      	mov	r0, r3
 800295a:	3708      	adds	r7, #8
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	0802f64c 	.word	0x0802f64c

08002964 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f7ff ffe7 	bl	8002940 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8002972:	2114      	movs	r1, #20
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f029 fe4a 	bl	802c60e <_ZdlPvj>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4618      	mov	r0, r3
 800297e:	3708      	adds	r7, #8
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	801a      	strh	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	805a      	strh	r2, [r3, #2]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	809a      	strh	r2, [r3, #4]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	80da      	strh	r2, [r3, #6]
    {
    }
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4618      	mov	r0, r3
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
	...

080029b4 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 80029bc:	4a04      	ldr	r2, [pc, #16]	; (80029d0 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6013      	str	r3, [r2, #0]
    }
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	2400bb4c 	.word	0x2400bb4c

080029d4 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
    {
 80029dc:	4a04      	ldr	r2, [pc, #16]	; (80029f0 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	601a      	str	r2, [r3, #0]
    }
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4618      	mov	r0, r3
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	0802e9ec 	.word	0x0802e9ec

080029f4 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
    }
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f7ff ffe9 	bl	80029d4 <_ZN8touchgfx12FontProviderD1Ev>
 8002a02:	2104      	movs	r1, #4
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f029 fe02 	bl	802c60e <_ZdlPvj>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3708      	adds	r7, #8
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
 8002a20:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8002a22:	4a0b      	ldr	r2, [pc, #44]	; (8002a50 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	601a      	str	r2, [r3, #0]
        : presenterStorage(pres),
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	605a      	str	r2, [r3, #4]
          screenStorage(scr),
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	609a      	str	r2, [r3, #8]
          transitionStorage(tra),
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	60da      	str	r2, [r3, #12]
          frontendApplication(app)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	611a      	str	r2, [r3, #16]
    {
    }
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	4618      	mov	r0, r3
 8002a44:	3714      	adds	r7, #20
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	0802e9dc 	.word	0x0802e9dc

08002a54 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
    {
 8002a5c:	4a04      	ldr	r2, [pc, #16]	; (8002a70 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	601a      	str	r2, [r3, #0]
    }
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4618      	mov	r0, r3
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	0802e9dc 	.word	0x0802e9dc

08002a74 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
    }
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f7ff ffe9 	bl	8002a54 <_ZN8touchgfx7MVPHeapD1Ev>
 8002a82:	2114      	movs	r1, #20
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f029 fdc2 	bl	802c60e <_ZdlPvj>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3708      	adds	r7, #8
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8002a9e:	bf00      	nop
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8002aaa:	b480      	push	{r7}
 8002aac:	b083      	sub	sp, #12
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
 8002ab2:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8002ab4:	bf00      	nop
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 8002ad6:	b480      	push	{r7}
 8002ad8:	b083      	sub	sp, #12
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
 8002ade:	460b      	mov	r3, r1
 8002ae0:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 8002ae2:	bf00      	nop
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr

08002aee <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8002aee:	b480      	push	{r7}
 8002af0:	b083      	sub	sp, #12
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
    {
    }
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 8002b02:	b480      	push	{r7}
 8002b04:	b083      	sub	sp, #12
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
    {
    }
 8002b0a:	bf00      	nop
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
	...

08002b18 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
    {
 8002b20:	4a04      	ldr	r2, [pc, #16]	; (8002b34 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	601a      	str	r2, [r3, #0]
    }
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	0802e9b4 	.word	0x0802e9b4

08002b38 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
    }
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f7ff ffe9 	bl	8002b18 <_ZN8touchgfx15UIEventListenerD1Ev>
 8002b46:	2104      	movs	r1, #4
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f029 fd60 	bl	802c60e <_ZdlPvj>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4618      	mov	r0, r3
 8002b52:	3708      	adds	r7, #8
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
    {
 8002b60:	4a04      	ldr	r2, [pc, #16]	; (8002b74 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	601a      	str	r2, [r3, #0]
    }
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	0802fa24 	.word	0x0802fa24

08002b78 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
    }
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f7ff ffe9 	bl	8002b58 <_ZN8touchgfx3LCDD1Ev>
 8002b86:	2108      	movs	r1, #8
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f029 fd40 	bl	802c60e <_ZdlPvj>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4618      	mov	r0, r3
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
    {
    }
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8002bd6:	6810      	ldr	r0, [r2, #0]
 8002bd8:	6851      	ldr	r1, [r2, #4]
 8002bda:	c303      	stmia	r3!, {r0, r1}
    }
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
    {
 8002bf0:	4a04      	ldr	r2, [pc, #16]	; (8002c04 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	601a      	str	r2, [r3, #0]
    }
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr
 8002c04:	0802e99c 	.word	0x0802e99c

08002c08 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
    }
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f7ff ffe9 	bl	8002be8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8002c16:	2104      	movs	r1, #4
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f029 fcf8 	bl	802c60e <_ZdlPvj>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4618      	mov	r0, r3
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
            : startX(0),
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	801a      	strh	r2, [r3, #0]
              startY(0),
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	805a      	strh	r2, [r3, #2]
              downX(0),
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	809a      	strh	r2, [r3, #4]
              downY(0),
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	80da      	strh	r2, [r3, #6]
              tickCount(0),
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	811a      	strh	r2, [r3, #8]
              velocityX(0),
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	815a      	strh	r2, [r3, #10]
              velocityY(0),
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	819a      	strh	r2, [r3, #12]
              inProgress(false)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	739a      	strb	r2, [r3, #14]
        {
        }
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4618      	mov	r0, r3
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b082      	sub	sp, #8
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7ff ffd5 	bl	8002c28 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	611a      	str	r2, [r3, #16]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	829a      	strh	r2, [r3, #20]
    {
    }
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
 8002ca0:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 8002ca2:	4a55      	ldr	r2, [pc, #340]	; (8002df8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	601a      	str	r2, [r3, #0]
        : dma(dmaInterface),
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	68ba      	ldr	r2, [r7, #8]
 8002cac:	605a      	str	r2, [r3, #4]
          lcdRef(display),
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	609a      	str	r2, [r3, #8]
          touchController(touchCtrl),
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	60da      	str	r2, [r3, #12]
          mcuInstrumentation(0),
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	611a      	str	r2, [r3, #16]
          buttonController(0),
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	615a      	str	r2, [r3, #20]
          frameBufferAllocator(0),
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	619a      	str	r2, [r3, #24]
          gestures(),
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	331c      	adds	r3, #28
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff ffcc 	bl	8002c6e <_ZN8touchgfx8GesturesC1Ev>
          nativeDisplayOrientation(ORIENTATION_LANDSCAPE),
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          taskDelayFunc(0),
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	639a      	str	r2, [r3, #56]	; 0x38
          frameBuffer0(0),
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	63da      	str	r2, [r3, #60]	; 0x3c
          frameBuffer1(0),
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	641a      	str	r2, [r3, #64]	; 0x40
          frameBuffer2(0),
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	645a      	str	r2, [r3, #68]	; 0x44
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
          fingerSize(1),
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
          lockDMAToPorch(false),
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
          frameBufferUpdatedThisFrame(false),
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
          auxiliaryLCD(0),
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	64da      	str	r2, [r3, #76]	; 0x4c
          partialFrameBufferRect(),
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	3350      	adds	r3, #80	; 0x50
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff fe2f 	bl	8002984 <_ZN8touchgfx4RectC1Ev>
          useAuxiliaryLCD(false),
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
          listener(0),
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	65da      	str	r2, [r3, #92]	; 0x5c
          lastX(0),
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	661a      	str	r2, [r3, #96]	; 0x60
          lastY(0),
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	665a      	str	r2, [r3, #100]	; 0x64
          touchSampleRate(1),
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
          mcuLoadPct(0),
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
          vSyncCnt(0),
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
          vSyncForFrame(1),
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
          vSyncCompensationEnabled(false),
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
          clientDirty(false),
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
          swapRequested(false),
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
          lastTouched(false),
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
          updateMCULoad(0),
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          cc_begin(0),
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	675a      	str	r2, [r3, #116]	; 0x74
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
          displayOrientationChangeRequested(false),
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
          useDMAAcceleration(true),
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
          lastRenderMethod(HARDWARE)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
        instance = this;
 8002dae:	4a13      	ldr	r2, [pc, #76]	; (8002dfc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002db4:	4a12      	ldr	r2, [pc, #72]	; (8002e00 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8002db6:	8b3b      	ldrh	r3, [r7, #24]
 8002db8:	8013      	strh	r3, [r2, #0]
 8002dba:	4b11      	ldr	r3, [pc, #68]	; (8002e00 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8002dbc:	881a      	ldrh	r2, [r3, #0]
 8002dbe:	4b11      	ldr	r3, [pc, #68]	; (8002e04 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8002dc0:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002dc2:	4a11      	ldr	r2, [pc, #68]	; (8002e08 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8002dc4:	8bbb      	ldrh	r3, [r7, #28]
 8002dc6:	8013      	strh	r3, [r2, #0]
 8002dc8:	4b0f      	ldr	r3, [pc, #60]	; (8002e08 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8002dca:	881a      	ldrh	r2, [r3, #0]
 8002dcc:	4b0f      	ldr	r3, [pc, #60]	; (8002e0c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 8002dce:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8002dd0:	4b0f      	ldr	r3, [pc, #60]	; (8002e10 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002dd6:	8b3a      	ldrh	r2, [r7, #24]
 8002dd8:	8bbb      	ldrh	r3, [r7, #28]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	bf34      	ite	cc
 8002dde:	2301      	movcc	r3, #1
 8002de0:	2300      	movcs	r3, #0
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	461a      	mov	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	4618      	mov	r0, r3
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	0802f524 	.word	0x0802f524
 8002dfc:	2400baf0 	.word	0x2400baf0
 8002e00:	2400bae4 	.word	0x2400bae4
 8002e04:	2400baea 	.word	0x2400baea
 8002e08:	2400bae6 	.word	0x2400bae6
 8002e0c:	2400baec 	.word	0x2400baec
 8002e10:	2400bae8 	.word	0x2400bae8

08002e14 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	4a05      	ldr	r2, [pc, #20]	; (8002e34 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff fe77 	bl	8002b18 <_ZN8touchgfx15UIEventListenerD1Ev>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3708      	adds	r7, #8
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	0802fa7c 	.word	0x0802fa7c

08002e38 <_ZN8touchgfx11ApplicationD0Ev>:
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f7ff ffe7 	bl	8002e14 <_ZN8touchgfx11ApplicationD1Ev>
 8002e46:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f029 fbdf 	bl	802c60e <_ZdlPvj>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4618      	mov	r0, r3
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b082      	sub	sp, #8
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 f804 	bl	8002e70 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8002e68:	bf00      	nop
 8002e6a:	3708      	adds	r7, #8
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00f      	beq.n	8002ea2 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	330c      	adds	r3, #12
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4610      	mov	r0, r2
 8002e96:	4798      	blx	r3
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e000      	b.n	8002ea4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00e      	beq.n	8002ec6 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	3308      	adds	r3, #8
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4610      	mov	r0, r2
 8002ebc:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
        }
    }
 8002ec6:	bf00      	nop
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
	...

08002ed0 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	4a05      	ldr	r2, [pc, #20]	; (8002ef0 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	601a      	str	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7ff ff97 	bl	8002e14 <_ZN8touchgfx11ApplicationD1Ev>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3708      	adds	r7, #8
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	0802e948 	.word	0x0802e948

08002ef4 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f7ff ffe7 	bl	8002ed0 <_ZN8touchgfx14MVPApplicationD1Ev>
 8002f02:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f029 fb81 	bl	802c60e <_ZdlPvj>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
	...

08002f18 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	4a08      	ldr	r2, [pc, #32]	; (8002f44 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f000 fb13 	bl	8003558 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff ffcb 	bl	8002ed0 <_ZN8touchgfx14MVPApplicationD1Ev>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3708      	adds	r7, #8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	0802e8dc 	.word	0x0802e8dc

08002f48 <_ZN23FrontendApplicationBaseD0Ev>:
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f7ff ffe1 	bl	8002f18 <_ZN23FrontendApplicationBaseD1Ev>
 8002f56:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f029 fb57 	bl	802c60e <_ZdlPvj>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4618      	mov	r0, r3
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b082      	sub	sp, #8
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
    {
        gotoMainScreenNoTransition();
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f001 fb9a 	bl	80046ac <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
    }
 8002f78:	bf00      	nop
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	4a05      	ldr	r2, [pc, #20]	; (8002fa0 <_ZN19FrontendApplicationD1Ev+0x20>)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	601a      	str	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff ffc1 	bl	8002f18 <_ZN23FrontendApplicationBaseD1Ev>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3708      	adds	r7, #8
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	0802e888 	.word	0x0802e888

08002fa4 <_ZN19FrontendApplicationD0Ev>:
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f7ff ffe7 	bl	8002f80 <_ZN19FrontendApplicationD1Ev>
 8002fb2:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f029 fb29 	bl	802c60e <_ZdlPvj>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b082      	sub	sp, #8
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f007 ffd3 	bl	800af80 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f018 fd9d 	bl	801bb1c <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8002fe2:	bf00      	nop
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b082      	sub	sp, #8
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
 8002ff2:	6039      	str	r1, [r7, #0]
    {
        app.gotoMainScreenNoTransition();
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f001 fb58 	bl	80046ac <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
    }
 8002ffc:	bf00      	nop
 8002ffe:	3708      	adds	r7, #8
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8003004:	b580      	push	{r7, lr}
 8003006:	b086      	sub	sp, #24
 8003008:	af02      	add	r7, sp, #8
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
 8003010:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	9300      	str	r3, [sp, #0]
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	68b9      	ldr	r1, [r7, #8]
 800301e:	f7ff fcf9 	bl	8002a14 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8003022:	4a04      	ldr	r2, [pc, #16]	; (8003034 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	601a      	str	r2, [r3, #0]
    {

    }
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	4618      	mov	r0, r3
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	0802e874 	.word	0x0802e874

08003038 <__tcf_0>:
            > > CombinedTransitionTypes;
    typedef meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
 800303c:	4801      	ldr	r0, [pc, #4]	; (8003044 <__tcf_0+0xc>)
 800303e:	f000 f95d 	bl	80032fc <_ZN12FrontendHeapD1Ev>
 8003042:	bd80      	pop	{r7, pc}
 8003044:	240003d8 	.word	0x240003d8

08003048 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 800304c:	4b11      	ldr	r3, [pc, #68]	; (8003094 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f3bf 8f5b 	dmb	ish
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	2b00      	cmp	r3, #0
 800305a:	bf0c      	ite	eq
 800305c:	2301      	moveq	r3, #1
 800305e:	2300      	movne	r3, #0
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d013      	beq.n	800308e <_ZN12FrontendHeap11getInstanceEv+0x46>
 8003066:	480b      	ldr	r0, [pc, #44]	; (8003094 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8003068:	f029 fad3 	bl	802c612 <__cxa_guard_acquire>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	bf14      	ite	ne
 8003072:	2301      	movne	r3, #1
 8003074:	2300      	moveq	r3, #0
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2b00      	cmp	r3, #0
 800307a:	d008      	beq.n	800308e <_ZN12FrontendHeap11getInstanceEv+0x46>
 800307c:	4806      	ldr	r0, [pc, #24]	; (8003098 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 800307e:	f000 f867 	bl	8003150 <_ZN12FrontendHeapC1Ev>
 8003082:	4806      	ldr	r0, [pc, #24]	; (800309c <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8003084:	f029 fb10 	bl	802c6a8 <atexit>
 8003088:	4802      	ldr	r0, [pc, #8]	; (8003094 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 800308a:	f029 face 	bl	802c62a <__cxa_guard_release>
        return instance;
 800308e:	4b02      	ldr	r3, [pc, #8]	; (8003098 <_ZN12FrontendHeap11getInstanceEv+0x50>)
    }
 8003090:	4618      	mov	r0, r3
 8003092:	bd80      	pop	{r7, pc}
 8003094:	24001134 	.word	0x24001134
 8003098:	240003d8 	.word	0x240003d8
 800309c:	08003039 	.word	0x08003039

080030a0 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	4a05      	ldr	r2, [pc, #20]	; (80030c0 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	601a      	str	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff fccf 	bl	8002a54 <_ZN8touchgfx7MVPHeapD1Ev>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4618      	mov	r0, r3
 80030ba:	3708      	adds	r7, #8
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	0802e874 	.word	0x0802e874

080030c4 <_ZN16FrontendHeapBaseD0Ev>:
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f7ff ffe7 	bl	80030a0 <_ZN16FrontendHeapBaseD1Ev>
 80030d2:	2114      	movs	r1, #20
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f029 fa9a 	bl	802c60e <_ZdlPvj>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4618      	mov	r0, r3
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f014 faac 	bl	801764c <_ZN8touchgfx17AbstractPartitionC1Ev>
 80030f4:	4a03      	ldr	r2, [pc, #12]	; (8003104 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	601a      	str	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4618      	mov	r0, r3
 80030fe:	3708      	adds	r7, #8
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	0802e840 	.word	0x0802e840

08003108 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4618      	mov	r0, r3
 8003114:	f014 fa9a 	bl	801764c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003118:	4a03      	ldr	r2, [pc, #12]	; (8003128 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	601a      	str	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4618      	mov	r0, r3
 8003122:	3708      	adds	r7, #8
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	0802e80c 	.word	0x0802e80c

0800312c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4618      	mov	r0, r3
 8003138:	f014 fa88 	bl	801764c <_ZN8touchgfx17AbstractPartitionC1Ev>
 800313c:	4a03      	ldr	r2, [pc, #12]	; (800314c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	601a      	str	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4618      	mov	r0, r3
 8003146:	3708      	adds	r7, #8
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	0802e7d8 	.word	0x0802e7d8

08003150 <_ZN12FrontendHeapC1Ev>:
    Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8003150:	b590      	push	{r4, r7, lr}
 8003152:	b085      	sub	sp, #20
 8003154:	af02      	add	r7, sp, #8
 8003156:	6078      	str	r0, [r7, #4]
        app(model, *this)
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f103 0114 	add.w	r1, r3, #20
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f603 34bc 	addw	r4, r3, #3004	; 0xbbc
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f603 33fc 	addw	r3, r3, #3068	; 0xbfc
        app(model, *this)
 8003172:	9300      	str	r3, [sp, #0]
 8003174:	4623      	mov	r3, r4
 8003176:	f7ff ff45 	bl	8003004 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 800317a:	4a18      	ldr	r2, [pc, #96]	; (80031dc <_ZN12FrontendHeapC1Ev+0x8c>)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	601a      	str	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	3314      	adds	r3, #20
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff ffad 	bl	80030e4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	332c      	adds	r3, #44	; 0x2c
 800318e:	4618      	mov	r0, r3
 8003190:	f7ff ffba 	bl	8003108 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f603 33bc 	addw	r3, r3, #3004	; 0xbbc
 800319a:	4618      	mov	r0, r3
 800319c:	f7ff ffc6 	bl	800312c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f603 30fc 	addw	r0, r3, #3068	; 0xbfc
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f603 5358 	addw	r3, r3, #3416	; 0xd58
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	4619      	mov	r1, r3
 80031b0:	f007 fa3a 	bl	800a628 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f603 5358 	addw	r3, r3, #3416	; 0xd58
 80031ba:	4618      	mov	r0, r3
 80031bc:	f007 fed2 	bl	800af64 <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f603 33fc 	addw	r3, r3, #3068	; 0xbfc
 80031c8:	4619      	mov	r1, r3
 80031ca:	4610      	mov	r0, r2
 80031cc:	f7ff ff0d 	bl	8002fea <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4618      	mov	r0, r3
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd90      	pop	{r4, r7, pc}
 80031da:	bf00      	nop
 80031dc:	0802e7c4 	.word	0x0802e7c4

080031e0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af02      	add	r7, sp, #8
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
 80031ec:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	8bbb      	ldrh	r3, [r7, #28]
 80031f2:	9301      	str	r3, [sp, #4]
 80031f4:	8b3b      	ldrh	r3, [r7, #24]
 80031f6:	9300      	str	r3, [sp, #0]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	68b9      	ldr	r1, [r7, #8]
 80031fe:	f7ff fd49 	bl	8002c94 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8003202:	4a04      	ldr	r2, [pc, #16]	; (8003214 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	601a      	str	r2, [r3, #0]
    }
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	4618      	mov	r0, r3
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	0802ea00 	.word	0x0802ea00

08003218 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af02      	add	r7, sp, #8
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
 8003224:	603b      	str	r3, [r7, #0]
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	8bbb      	ldrh	r3, [r7, #28]
 800322a:	9301      	str	r3, [sp, #4]
 800322c:	8b3b      	ldrh	r3, [r7, #24]
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	68b9      	ldr	r1, [r7, #8]
 8003236:	f7ff ffd3 	bl	80031e0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800323a:	4a04      	ldr	r2, [pc, #16]	; (800324c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	601a      	str	r2, [r3, #0]
    }
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	4618      	mov	r0, r3
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	0802e678 	.word	0x0802e678

08003250 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	4a04      	ldr	r2, [pc, #16]	; (800326c <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4618      	mov	r0, r3
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	0802e660 	.word	0x0802e660

08003270 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff ffe8 	bl	8003250 <_ZN8touchgfx15TouchControllerC1Ev>
 8003280:	4a03      	ldr	r2, [pc, #12]	; (8003290 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4618      	mov	r0, r3
 800328a:	3708      	adds	r7, #8
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	0802e648 	.word	0x0802e648

08003294 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8003294:	b590      	push	{r4, r7, lr}
 8003296:	b085      	sub	sp, #20
 8003298:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 800329a:	f000 fd59 	bl	8003d50 <_ZN14BitmapDatabase11getInstanceEv>
 800329e:	4604      	mov	r4, r0
 80032a0:	f000 fd60 	bl	8003d64 <_ZN14BitmapDatabase15getInstanceSizeEv>
 80032a4:	4603      	mov	r3, r0
 80032a6:	4619      	mov	r1, r3
 80032a8:	2300      	movs	r3, #0
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	2300      	movs	r3, #0
 80032ae:	2200      	movs	r2, #0
 80032b0:	4620      	mov	r0, r4
 80032b2:	f01b fd51 	bl	801ed58 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 80032b6:	4809      	ldr	r0, [pc, #36]	; (80032dc <touchgfx_init+0x48>)
 80032b8:	f7ff fb7c 	bl	80029b4 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 80032bc:	2000      	movs	r0, #0
 80032be:	f007 f8fd 	bl	800a4bc <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 80032c2:	4807      	ldr	r0, [pc, #28]	; (80032e0 <touchgfx_init+0x4c>)
 80032c4:	f01b fcb0 	bl	801ec28 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 80032c8:	f7ff febe 	bl	8003048 <_ZN12FrontendHeap11getInstanceEv>
 80032cc:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 80032ce:	4805      	ldr	r0, [pc, #20]	; (80032e4 <touchgfx_init+0x50>)
 80032d0:	f7fe fda2 	bl	8001e18 <_ZN11TouchGFXHAL10initializeEv>
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd90      	pop	{r4, r7, pc}
 80032dc:	24001f60 	.word	0x24001f60
 80032e0:	24000008 	.word	0x24000008
 80032e4:	24001f64 	.word	0x24001f64

080032e8 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80032ec:	4802      	ldr	r0, [pc, #8]	; (80032f8 <touchgfx_taskEntry+0x10>)
 80032ee:	f015 f9d4 	bl	801869a <_ZN8touchgfx3HAL9taskEntryEv>
}
 80032f2:	bf00      	nop
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	24001f64 	.word	0x24001f64

080032fc <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	4a10      	ldr	r2, [pc, #64]	; (8003348 <_ZN12FrontendHeapD1Ev+0x4c>)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f603 33fc 	addw	r3, r3, #3068	; 0xbfc
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff fe35 	bl	8002f80 <_ZN19FrontendApplicationD1Ev>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f603 33bc 	addw	r3, r3, #3004	; 0xbbc
 800331c:	4618      	mov	r0, r3
 800331e:	f000 f827 	bl	8003370 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	332c      	adds	r3, #44	; 0x2c
 8003326:	4618      	mov	r0, r3
 8003328:	f000 f844 	bl	80033b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	3314      	adds	r3, #20
 8003330:	4618      	mov	r0, r3
 8003332:	f000 f863 	bl	80033fc <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff feb1 	bl	80030a0 <_ZN16FrontendHeapBaseD1Ev>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4618      	mov	r0, r3
 8003342:	3708      	adds	r7, #8
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	0802e7c4 	.word	0x0802e7c4

0800334c <_ZN12FrontendHeapD0Ev>:
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7ff ffd1 	bl	80032fc <_ZN12FrontendHeapD1Ev>
 800335a:	f640 515c 	movw	r1, #3420	; 0xd5c
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f029 f955 	bl	802c60e <_ZdlPvj>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4618      	mov	r0, r3
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
	...

08003370 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	4a05      	ldr	r2, [pc, #20]	; (8003390 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	601a      	str	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4618      	mov	r0, r3
 8003382:	f014 f962 	bl	801764a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4618      	mov	r0, r3
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	0802e7d8 	.word	0x0802e7d8

08003394 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f7ff ffe7 	bl	8003370 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 80033a2:	2140      	movs	r1, #64	; 0x40
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f029 f932 	bl	802c60e <_ZdlPvj>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4618      	mov	r0, r3
 80033ae:	3708      	adds	r7, #8
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	4a05      	ldr	r2, [pc, #20]	; (80033d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	601a      	str	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f014 f940 	bl	801764a <_ZN8touchgfx17AbstractPartitionD1Ev>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4618      	mov	r0, r3
 80033ce:	3708      	adds	r7, #8
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	0802e80c 	.word	0x0802e80c

080033d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f7ff ffe7 	bl	80033b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80033e6:	f44f 6139 	mov.w	r1, #2960	; 0xb90
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f029 f90f 	bl	802c60e <_ZdlPvj>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4618      	mov	r0, r3
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
	...

080033fc <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	4a05      	ldr	r2, [pc, #20]	; (800341c <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	601a      	str	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4618      	mov	r0, r3
 800340e:	f014 f91c 	bl	801764a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4618      	mov	r0, r3
 8003416:	3708      	adds	r7, #8
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	0802e840 	.word	0x0802e840

08003420 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f7ff ffe7 	bl	80033fc <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800342e:	2118      	movs	r1, #24
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f029 f8ec 	bl	802c60e <_ZdlPvj>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4618      	mov	r0, r3
 800343a:	3708      	adds	r7, #8
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 4;         // verdana_40_4bpp
    static const touchgfx::FontId TYPOGRAPHY_01 = 3; // verdana_20_4bpp
    static const uint16_t NUMBER_OF_FONTS = 5;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	4a05      	ldr	r2, [pc, #20]	; (8003460 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	601a      	str	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4618      	mov	r0, r3
 8003452:	f7ff fabf 	bl	80029d4 <_ZN8touchgfx12FontProviderD1Ev>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4618      	mov	r0, r3
 800345a:	3708      	adds	r7, #8
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	0802ead8 	.word	0x0802ead8

08003464 <_ZN23ApplicationFontProviderD0Ev>:
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f7ff ffe7 	bl	8003440 <_ZN23ApplicationFontProviderD1Ev>
 8003472:	2104      	movs	r1, #4
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f029 f8ca 	bl	802c60e <_ZdlPvj>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4618      	mov	r0, r3
 800347e:	3708      	adds	r7, #8
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	4a05      	ldr	r2, [pc, #20]	; (80034a4 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	601a      	str	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4618      	mov	r0, r3
 8003496:	f7ff fb5f 	bl	8002b58 <_ZN8touchgfx3LCDD1Ev>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4618      	mov	r0, r3
 800349e:	3708      	adds	r7, #8
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	0802fe8c 	.word	0x0802fe8c

080034a8 <_ZN8touchgfx8LCD16bppD0Ev>:
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f7ff ffe7 	bl	8003484 <_ZN8touchgfx8LCD16bppD1Ev>
 80034b6:	2184      	movs	r1, #132	; 0x84
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f029 f8a8 	bl	802c60e <_ZdlPvj>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4618      	mov	r0, r3
 80034c2:	3708      	adds	r7, #8
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <_Z41__static_initialization_and_destruction_0ii>:
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af02      	add	r7, sp, #8
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d119      	bne.n	800350c <_Z41__static_initialization_and_destruction_0ii+0x44>
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034de:	4293      	cmp	r3, r2
 80034e0:	d114      	bne.n	800350c <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 80034e2:	4818      	ldr	r0, [pc, #96]	; (8003544 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80034e4:	f7ff fec4 	bl	8003270 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 80034e8:	4817      	ldr	r0, [pc, #92]	; (8003548 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80034ea:	f7fe ff25 	bl	8002338 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 80034ee:	4817      	ldr	r0, [pc, #92]	; (800354c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80034f0:	f01f ff04 	bl	80232fc <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 80034f4:	f44f 7388 	mov.w	r3, #272	; 0x110
 80034f8:	9301      	str	r3, [sp, #4]
 80034fa:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	4b10      	ldr	r3, [pc, #64]	; (8003544 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003502:	4a12      	ldr	r2, [pc, #72]	; (800354c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003504:	4910      	ldr	r1, [pc, #64]	; (8003548 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003506:	4812      	ldr	r0, [pc, #72]	; (8003550 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8003508:	f7ff fe86 	bl	8003218 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d113      	bne.n	800353a <_Z41__static_initialization_and_destruction_0ii+0x72>
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003518:	4293      	cmp	r3, r2
 800351a:	d10e      	bne.n	800353a <_Z41__static_initialization_and_destruction_0ii+0x72>
 800351c:	480c      	ldr	r0, [pc, #48]	; (8003550 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800351e:	f7fe fcf3 	bl	8001f08 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8003522:	480c      	ldr	r0, [pc, #48]	; (8003554 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8003524:	f7ff ff8c 	bl	8003440 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 8003528:	4808      	ldr	r0, [pc, #32]	; (800354c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800352a:	f7ff ffab 	bl	8003484 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 800352e:	4806      	ldr	r0, [pc, #24]	; (8003548 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003530:	f7fe ff2c 	bl	800238c <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 8003534:	4803      	ldr	r0, [pc, #12]	; (8003544 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003536:	f7fe fa1b 	bl	8001970 <_ZN20STM32TouchControllerD1Ev>
}
 800353a:	bf00      	nop
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	24001138 	.word	0x24001138
 8003548:	2400113c 	.word	0x2400113c
 800354c:	24001edc 	.word	0x24001edc
 8003550:	24001f64 	.word	0x24001f64
 8003554:	24000008 	.word	0x24000008

08003558 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	4a05      	ldr	r2, [pc, #20]	; (8003578 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4618      	mov	r0, r3
 800356a:	f7ff fb3d 	bl	8002be8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4618      	mov	r0, r3
 8003572:	3708      	adds	r7, #8
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	0802e930 	.word	0x0802e930

0800357c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f7ff ffe7 	bl	8003558 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800358a:	2110      	movs	r1, #16
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f029 f83e 	bl	802c60e <_ZdlPvj>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4618      	mov	r0, r3
 8003596:	3708      	adds	r7, #8
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 80035a4:	2301      	movs	r3, #1
    }
 80035a6:	4618      	mov	r0, r3
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr

080035b2 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 80035b2:	b480      	push	{r7}
 80035b4:	b083      	sub	sp, #12
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 80035ba:	2338      	movs	r3, #56	; 0x38
    }
 80035bc:	4618      	mov	r0, r3
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	460b      	mov	r3, r1
 80035d2:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80035d4:	887a      	ldrh	r2, [r7, #2]
 80035d6:	4613      	mov	r3, r2
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	1a9b      	subs	r3, r3, r2
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	3308      	adds	r3, #8
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	4413      	add	r3, r2
    }
 80035e4:	4618      	mov	r0, r3
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	460b      	mov	r3, r1
 80035fa:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80035fc:	887a      	ldrh	r2, [r7, #2]
 80035fe:	4613      	mov	r3, r2
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	1a9b      	subs	r3, r3, r2
 8003604:	00db      	lsls	r3, r3, #3
 8003606:	3308      	adds	r3, #8
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	4413      	add	r3, r2
    }
 800360c:	4618      	mov	r0, r3
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8003620:	2301      	movs	r3, #1
    }
 8003622:	4618      	mov	r0, r3
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr

0800362e <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800362e:	b480      	push	{r7}
 8003630:	b083      	sub	sp, #12
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8003636:	f640 3388 	movw	r3, #2952	; 0xb88
    }
 800363a:	4618      	mov	r0, r3
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr

08003646 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8003646:	b480      	push	{r7}
 8003648:	b083      	sub	sp, #12
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
 800364e:	460b      	mov	r3, r1
 8003650:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003652:	887b      	ldrh	r3, [r7, #2]
 8003654:	f640 3288 	movw	r2, #2952	; 0xb88
 8003658:	fb02 f303 	mul.w	r3, r2, r3
 800365c:	3308      	adds	r3, #8
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	4413      	add	r3, r2
    }
 8003662:	4618      	mov	r0, r3
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 800366e:	b480      	push	{r7}
 8003670:	b083      	sub	sp, #12
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
 8003676:	460b      	mov	r3, r1
 8003678:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800367a:	887b      	ldrh	r3, [r7, #2]
 800367c:	f640 3288 	movw	r2, #2952	; 0xb88
 8003680:	fb02 f303 	mul.w	r3, r2, r3
 8003684:	3308      	adds	r3, #8
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	4413      	add	r3, r2
    }
 800368a:	4618      	mov	r0, r3
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr

08003696 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8003696:	b480      	push	{r7}
 8003698:	b083      	sub	sp, #12
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800369e:	2301      	movs	r3, #1
    }
 80036a0:	4618      	mov	r0, r3
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80036b4:	2310      	movs	r3, #16
    }
 80036b6:	4618      	mov	r0, r3
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr

080036c2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80036c2:	b480      	push	{r7}
 80036c4:	b083      	sub	sp, #12
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
 80036ca:	460b      	mov	r3, r1
 80036cc:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80036ce:	887b      	ldrh	r3, [r7, #2]
 80036d0:	011b      	lsls	r3, r3, #4
 80036d2:	3308      	adds	r3, #8
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	4413      	add	r3, r2
    }
 80036d8:	4618      	mov	r0, r3
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	460b      	mov	r3, r1
 80036ee:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80036f0:	887b      	ldrh	r3, [r7, #2]
 80036f2:	011b      	lsls	r3, r3, #4
 80036f4:	3308      	adds	r3, #8
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	4413      	add	r3, r2
    }
 80036fa:	4618      	mov	r0, r3
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr

08003706 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8003706:	b580      	push	{r7, lr}
 8003708:	b082      	sub	sp, #8
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	68d2      	ldr	r2, [r2, #12]
 8003716:	1052      	asrs	r2, r2, #1
 8003718:	1899      	adds	r1, r3, r2
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b00      	cmp	r3, #0
 8003724:	d102      	bne.n	800372c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	e00a      	b.n	8003742 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	68d2      	ldr	r2, [r2, #12]
 8003734:	1052      	asrs	r2, r2, #1
 8003736:	4413      	add	r3, r2
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	6892      	ldr	r2, [r2, #8]
 800373e:	4413      	add	r3, r2
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4608      	mov	r0, r1
 8003744:	4798      	blx	r3
    }
 8003746:	bf00      	nop
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800374e:	b480      	push	{r7}
 8003750:	b083      	sub	sp, #12
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d010      	beq.n	8003780 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d107      	bne.n	8003776 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8003772:	2301      	movs	r3, #1
 8003774:	e000      	b.n	8003778 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8003776:	2300      	movs	r3, #0
 8003778:	2b01      	cmp	r3, #1
 800377a:	d001      	beq.n	8003780 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800377c:	2301      	movs	r3, #1
 800377e:	e000      	b.n	8003782 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 8003780:	2300      	movs	r3, #0
    }
 8003782:	4618      	mov	r0, r3
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr

0800378e <_GLOBAL__sub_I_touchgfx_init>:
 800378e:	b580      	push	{r7, lr}
 8003790:	af00      	add	r7, sp, #0
 8003792:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003796:	2001      	movs	r0, #1
 8003798:	f7ff fe96 	bl	80034c8 <_Z41__static_initialization_and_destruction_0ii>
 800379c:	bd80      	pop	{r7, pc}

0800379e <_GLOBAL__sub_D_touchgfx_init>:
 800379e:	b580      	push	{r7, lr}
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80037a6:	2000      	movs	r0, #0
 80037a8:	f7ff fe8e 	bl	80034c8 <_Z41__static_initialization_and_destruction_0ii>
 80037ac:	bd80      	pop	{r7, pc}

080037ae <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b082      	sub	sp, #8
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	3320      	adds	r3, #32
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	4798      	blx	r3
    }
 80037c2:	bf00      	nop
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 80037ca:	b480      	push	{r7}
 80037cc:	b083      	sub	sp, #12
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 80037d8:	3301      	adds	r3, #1
 80037da:	b2da      	uxtb	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
    }
 80037e2:	bf00      	nop
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
	...

080037f0 <__NVIC_EnableIRQ>:
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	4603      	mov	r3, r0
 80037f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80037fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	db0b      	blt.n	800381a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003802:	88fb      	ldrh	r3, [r7, #6]
 8003804:	f003 021f 	and.w	r2, r3, #31
 8003808:	4907      	ldr	r1, [pc, #28]	; (8003828 <__NVIC_EnableIRQ+0x38>)
 800380a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800380e:	095b      	lsrs	r3, r3, #5
 8003810:	2001      	movs	r0, #1
 8003812:	fa00 f202 	lsl.w	r2, r0, r2
 8003816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800381a:	bf00      	nop
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	e000e100 	.word	0xe000e100

0800382c <__NVIC_DisableIRQ>:
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	4603      	mov	r3, r0
 8003834:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003836:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800383a:	2b00      	cmp	r3, #0
 800383c:	db12      	blt.n	8003864 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800383e:	88fb      	ldrh	r3, [r7, #6]
 8003840:	f003 021f 	and.w	r2, r3, #31
 8003844:	490a      	ldr	r1, [pc, #40]	; (8003870 <__NVIC_DisableIRQ+0x44>)
 8003846:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800384a:	095b      	lsrs	r3, r3, #5
 800384c:	2001      	movs	r0, #1
 800384e:	fa00 f202 	lsl.w	r2, r0, r2
 8003852:	3320      	adds	r3, #32
 8003854:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003858:	f3bf 8f4f 	dsb	sy
}
 800385c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800385e:	f3bf 8f6f 	isb	sy
}
 8003862:	bf00      	nop
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr
 8003870:	e000e100 	.word	0xe000e100

08003874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	4603      	mov	r3, r0
 800387c:	6039      	str	r1, [r7, #0]
 800387e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003880:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003884:	2b00      	cmp	r3, #0
 8003886:	db0a      	blt.n	800389e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	b2da      	uxtb	r2, r3
 800388c:	490c      	ldr	r1, [pc, #48]	; (80038c0 <__NVIC_SetPriority+0x4c>)
 800388e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003892:	0112      	lsls	r2, r2, #4
 8003894:	b2d2      	uxtb	r2, r2
 8003896:	440b      	add	r3, r1
 8003898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800389c:	e00a      	b.n	80038b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	b2da      	uxtb	r2, r3
 80038a2:	4908      	ldr	r1, [pc, #32]	; (80038c4 <__NVIC_SetPriority+0x50>)
 80038a4:	88fb      	ldrh	r3, [r7, #6]
 80038a6:	f003 030f 	and.w	r3, r3, #15
 80038aa:	3b04      	subs	r3, #4
 80038ac:	0112      	lsls	r2, r2, #4
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	440b      	add	r3, r1
 80038b2:	761a      	strb	r2, [r3, #24]
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr
 80038c0:	e000e100 	.word	0xe000e100
 80038c4:	e000ed00 	.word	0xe000ed00

080038c8 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 80038c8:	b5b0      	push	{r4, r5, r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f014 fecd 	bl	8018672 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80038d8:	687d      	ldr	r5, [r7, #4]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	3364      	adds	r3, #100	; 0x64
 80038e0:	681c      	ldr	r4, [r3, #0]
 80038e2:	f018 f857 	bl	801b994 <_ZN8touchgfx11Application11getInstanceEv>
 80038e6:	4603      	mov	r3, r0
 80038e8:	4619      	mov	r1, r3
 80038ea:	4628      	mov	r0, r5
 80038ec:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0xD0200000, (void*)0);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	3388      	adds	r3, #136	; 0x88
 80038f6:	681c      	ldr	r4, [r3, #0]
 80038f8:	2300      	movs	r3, #0
 80038fa:	4a04      	ldr	r2, [pc, #16]	; (800390c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 80038fc:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8003900:	47a0      	blx	r4
}
 8003902:	bf00      	nop
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bdb0      	pop	{r4, r5, r7, pc}
 800390a:	bf00      	nop
 800390c:	d0200000 	.word	0xd0200000

08003910 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8003918:	2109      	movs	r1, #9
 800391a:	205a      	movs	r0, #90	; 0x5a
 800391c:	f7ff ffaa 	bl	8003874 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8003920:	2109      	movs	r1, #9
 8003922:	2058      	movs	r0, #88	; 0x58
 8003924:	f7ff ffa6 	bl	8003874 <__NVIC_SetPriority>
}
 8003928:	bf00      	nop
 800392a:	3708      	adds	r7, #8
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8003938:	205a      	movs	r0, #90	; 0x5a
 800393a:	f7ff ff59 	bl	80037f0 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 800393e:	2058      	movs	r0, #88	; 0x58
 8003940:	f7ff ff56 	bl	80037f0 <__NVIC_EnableIRQ>
}
 8003944:	bf00      	nop
 8003946:	3708      	adds	r7, #8
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8003954:	205a      	movs	r0, #90	; 0x5a
 8003956:	f7ff ff69 	bl	800382c <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 800395a:	2058      	movs	r0, #88	; 0x58
 800395c:	f7ff ff66 	bl	800382c <__NVIC_DisableIRQ>
}
 8003960:	bf00      	nop
 8003962:	3708      	adds	r7, #8
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8003970:	4b11      	ldr	r3, [pc, #68]	; (80039b8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	b29b      	uxth	r3, r3
 8003976:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800397a:	b29b      	uxth	r3, r3
 800397c:	3b01      	subs	r3, #1
 800397e:	b29a      	uxth	r2, r3
 8003980:	4b0e      	ldr	r3, [pc, #56]	; (80039bc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8003982:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8003984:	4b0c      	ldr	r3, [pc, #48]	; (80039b8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	b29b      	uxth	r3, r3
 800398a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800398e:	b29b      	uxth	r3, r3
 8003990:	3b01      	subs	r3, #1
 8003992:	b29a      	uxth	r2, r3
 8003994:	4b0a      	ldr	r3, [pc, #40]	; (80039c0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8003996:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8003998:	4b08      	ldr	r3, [pc, #32]	; (80039bc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800399a:	881a      	ldrh	r2, [r3, #0]
 800399c:	4b06      	ldr	r3, [pc, #24]	; (80039b8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800399e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 80039a0:	4b05      	ldr	r3, [pc, #20]	; (80039b8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80039a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a4:	4a04      	ldr	r2, [pc, #16]	; (80039b8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80039a6:	f043 0301 	orr.w	r3, r3, #1
 80039aa:	6353      	str	r3, [r2, #52]	; 0x34
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	50001000 	.word	0x50001000
 80039bc:	24001fe0 	.word	0x24001fe0
 80039c0:	24001fe2 	.word	0x24001fe2

080039c4 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f014 fe36 	bl	8018640 <_ZN8touchgfx3HAL10beginFrameEv>
 80039d4:	4603      	mov	r3, r0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b082      	sub	sp, #8
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4618      	mov	r0, r3
 80039ea:	f014 fe35 	bl	8018658 <_ZN8touchgfx3HAL8endFrameEv>

}
 80039ee:	bf00      	nop
 80039f0:	3708      	adds	r7, #8
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
	...

080039f8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8003a00:	4b03      	ldr	r3, [pc, #12]	; (8003a10 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8003a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	50001084 	.word	0x50001084

08003a14 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8003a1e:	4a06      	ldr	r2, [pc, #24]	; (8003a38 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8003a24:	4b05      	ldr	r3, [pc, #20]	; (8003a3c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8003a26:	2201      	movs	r2, #1
 8003a28:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003a2a:	bf00      	nop
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	50001084 	.word	0x50001084
 8003a3c:	50001000 	.word	0x50001000

08003a40 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6839      	ldr	r1, [r7, #0]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f014 fdbf 	bl	80185d2 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003a54:	4b24      	ldr	r3, [pc, #144]	; (8003ae8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xa8>)
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	bf14      	ite	ne
 8003a60:	2301      	movne	r3, #1
 8003a62:	2300      	moveq	r3, #0
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d03a      	beq.n	8003ae0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xa0>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8003a6a:	4b1f      	ldr	r3, [pc, #124]	; (8003ae8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xa8>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003a72:	f3bf 8f4f 	dsb	sy
}
 8003a76:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8003a78:	4b1b      	ldr	r3, [pc, #108]	; (8003ae8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xa8>)
 8003a7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a7e:	617b      	str	r3, [r7, #20]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	0b5b      	lsrs	r3, r3, #13
 8003a84:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003a88:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	08db      	lsrs	r3, r3, #3
 8003a8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a92:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	015a      	lsls	r2, r3, #5
 8003a98:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8003a9c:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003aa2:	4911      	ldr	r1, [pc, #68]	; (8003ae8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xa8>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	1e5a      	subs	r2, r3, #1
 8003aae:	60fa      	str	r2, [r7, #12]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	bf14      	ite	ne
 8003ab4:	2301      	movne	r3, #1
 8003ab6:	2300      	moveq	r3, #0
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1ea      	bne.n	8003a94 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x54>
    } while(sets-- != 0U);
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	1e5a      	subs	r2, r3, #1
 8003ac2:	613a      	str	r2, [r7, #16]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	bf14      	ite	ne
 8003ac8:	2301      	movne	r3, #1
 8003aca:	2300      	moveq	r3, #0
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1db      	bne.n	8003a8a <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 8003ad2:	f3bf 8f4f 	dsb	sy
}
 8003ad6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003ad8:	f3bf 8f6f 	isb	sy
}
 8003adc:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8003ade:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003ae0:	bf00      	nop
 8003ae2:	3718      	adds	r7, #24
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	e000ed00 	.word	0xe000ed00

08003aec <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
 8003af8:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	68b9      	ldr	r1, [r7, #8]
 8003b02:	f014 fed8 	bl	80188b6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8003b06:	4603      	mov	r3, r0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 8003b10:	b480      	push	{r7}
 8003b12:	b087      	sub	sp, #28
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003b18:	4b25      	ldr	r3, [pc, #148]	; (8003bb0 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	bf14      	ite	ne
 8003b24:	2301      	movne	r3, #1
 8003b26:	2300      	moveq	r3, #0
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d03a      	beq.n	8003ba4 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x94>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8003b2e:	4b20      	ldr	r3, [pc, #128]	; (8003bb0 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003b36:	f3bf 8f4f 	dsb	sy
}
 8003b3a:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8003b3c:	4b1c      	ldr	r3, [pc, #112]	; (8003bb0 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8003b3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b42:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	0b5b      	lsrs	r3, r3, #13
 8003b48:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003b4c:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	08db      	lsrs	r3, r3, #3
 8003b52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b56:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	015a      	lsls	r2, r3, #5
 8003b5c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8003b60:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003b66:	4912      	ldr	r1, [pc, #72]	; (8003bb0 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	1e5a      	subs	r2, r3, #1
 8003b72:	60fa      	str	r2, [r7, #12]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	bf14      	ite	ne
 8003b78:	2301      	movne	r3, #1
 8003b7a:	2300      	moveq	r3, #0
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1ea      	bne.n	8003b58 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x48>
    } while(sets-- != 0U);
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1e5a      	subs	r2, r3, #1
 8003b86:	613a      	str	r2, [r7, #16]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	bf14      	ite	ne
 8003b8c:	2301      	movne	r3, #1
 8003b8e:	2300      	moveq	r3, #0
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1db      	bne.n	8003b4e <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 8003b96:	f3bf 8f4f 	dsb	sy
}
 8003b9a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003b9c:	f3bf 8f6f 	isb	sy
}
 8003ba0:	bf00      	nop
}
 8003ba2:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003ba4:	bf00      	nop
 8003ba6:	371c      	adds	r7, #28
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr
 8003bb0:	e000ed00 	.word	0xe000ed00

08003bb4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b087      	sub	sp, #28
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003bbc:	4b25      	ldr	r3, [pc, #148]	; (8003c54 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	bf14      	ite	ne
 8003bc8:	2301      	movne	r3, #1
 8003bca:	2300      	moveq	r3, #0
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d03a      	beq.n	8003c48 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x94>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8003bd2:	4b20      	ldr	r3, [pc, #128]	; (8003c54 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003bda:	f3bf 8f4f 	dsb	sy
}
 8003bde:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8003be0:	4b1c      	ldr	r3, [pc, #112]	; (8003c54 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 8003be2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003be6:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	0b5b      	lsrs	r3, r3, #13
 8003bec:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003bf0:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	08db      	lsrs	r3, r3, #3
 8003bf6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bfa:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	015a      	lsls	r2, r3, #5
 8003c00:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8003c04:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003c0a:	4912      	ldr	r1, [pc, #72]	; (8003c54 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	1e5a      	subs	r2, r3, #1
 8003c16:	60fa      	str	r2, [r7, #12]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	bf14      	ite	ne
 8003c1c:	2301      	movne	r3, #1
 8003c1e:	2300      	moveq	r3, #0
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1ea      	bne.n	8003bfc <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    } while(sets-- != 0U);
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	1e5a      	subs	r2, r3, #1
 8003c2a:	613a      	str	r2, [r7, #16]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	bf14      	ite	ne
 8003c30:	2301      	movne	r3, #1
 8003c32:	2300      	moveq	r3, #0
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1db      	bne.n	8003bf2 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 8003c3a:	f3bf 8f4f 	dsb	sy
}
 8003c3e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003c40:	f3bf 8f6f 	isb	sy
}
 8003c44:	bf00      	nop
}
 8003c46:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003c48:	bf00      	nop
 8003c4a:	371c      	adds	r7, #28
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr
 8003c54:	e000ed00 	.word	0xe000ed00

08003c58 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8003c60:	4b1a      	ldr	r3, [pc, #104]	; (8003ccc <HAL_LTDC_LineEventCallback+0x74>)
 8003c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c64:	4a1a      	ldr	r2, [pc, #104]	; (8003cd0 <HAL_LTDC_LineEventCallback+0x78>)
 8003c66:	8812      	ldrh	r2, [r2, #0]
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	bf0c      	ite	eq
 8003c6c:	2301      	moveq	r3, #1
 8003c6e:	2300      	movne	r3, #0
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d017      	beq.n	8003ca6 <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8003c76:	4b17      	ldr	r3, [pc, #92]	; (8003cd4 <HAL_LTDC_LineEventCallback+0x7c>)
 8003c78:	881b      	ldrh	r3, [r3, #0]
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f00f fa5d 	bl	801313c <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8003c82:	f7fe fb1f 	bl	80022c4 <_ZN8touchgfx3HAL11getInstanceEv>
 8003c86:	4603      	mov	r3, r0
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7ff fd9e 	bl	80037ca <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8003c8e:	f7fe fa13 	bl	80020b8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8003c92:	f7fe fb17 	bl	80022c4 <_ZN8touchgfx3HAL11getInstanceEv>
 8003c96:	4603      	mov	r3, r0
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f015 fa37 	bl	801910c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8003c9e:	2000      	movs	r0, #0
 8003ca0:	f7fd feae 	bl	8001a00 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8003ca4:	e00e      	b.n	8003cc4 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8003ca6:	4b0a      	ldr	r3, [pc, #40]	; (8003cd0 <HAL_LTDC_LineEventCallback+0x78>)
 8003ca8:	881b      	ldrh	r3, [r3, #0]
 8003caa:	4619      	mov	r1, r3
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f00f fa45 	bl	801313c <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8003cb2:	2000      	movs	r0, #0
 8003cb4:	f7fd fec0 	bl	8001a38 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8003cb8:	f7fe fb04 	bl	80022c4 <_ZN8touchgfx3HAL11getInstanceEv>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7ff fd75 	bl	80037ae <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8003cc4:	bf00      	nop
 8003cc6:	3708      	adds	r7, #8
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	50001000 	.word	0x50001000
 8003cd0:	24001fe0 	.word	0x24001fe0
 8003cd4:	24001fe2 	.word	0x24001fe2

08003cd8 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8003ce4:	887b      	ldrh	r3, [r7, #2]
 8003ce6:	2b05      	cmp	r3, #5
 8003ce8:	d82c      	bhi.n	8003d44 <_ZN23ApplicationFontProvider7getFontEt+0x6c>
 8003cea:	a201      	add	r2, pc, #4	; (adr r2, 8003cf0 <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 8003cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf0:	08003d09 	.word	0x08003d09
 8003cf4:	08003d13 	.word	0x08003d13
 8003cf8:	08003d1d 	.word	0x08003d1d
 8003cfc:	08003d27 	.word	0x08003d27
 8003d00:	08003d31 	.word	0x08003d31
 8003d04:	08003d3b 	.word	0x08003d3b
    {
    case Typography::SMALL:
        // verdanab_8_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8003d08:	f006 fc50 	bl	800a5ac <_ZN17TypedTextDatabase8getFontsEv>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	e019      	b.n	8003d46 <_ZN23ApplicationFontProvider7getFontEt+0x6e>
    case Typography::TYPOGRAPHY_00:
        // verdanab_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8003d12:	f006 fc4b 	bl	800a5ac <_ZN17TypedTextDatabase8getFontsEv>
 8003d16:	4603      	mov	r3, r0
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	e014      	b.n	8003d46 <_ZN23ApplicationFontProvider7getFontEt+0x6e>
    case Typography::TYPOGRAPHY_02:
        // verdanab_12_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8003d1c:	f006 fc46 	bl	800a5ac <_ZN17TypedTextDatabase8getFontsEv>
 8003d20:	4603      	mov	r3, r0
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	e00f      	b.n	8003d46 <_ZN23ApplicationFontProvider7getFontEt+0x6e>
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 8003d26:	f006 fc41 	bl	800a5ac <_ZN17TypedTextDatabase8getFontsEv>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	e00a      	b.n	8003d46 <_ZN23ApplicationFontProvider7getFontEt+0x6e>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 8003d30:	f006 fc3c 	bl	800a5ac <_ZN17TypedTextDatabase8getFontsEv>
 8003d34:	4603      	mov	r3, r0
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	e005      	b.n	8003d46 <_ZN23ApplicationFontProvider7getFontEt+0x6e>
    case Typography::TYPOGRAPHY_01:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 8003d3a:	f006 fc37 	bl	800a5ac <_ZN17TypedTextDatabase8getFontsEv>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	e000      	b.n	8003d46 <_ZN23ApplicationFontProvider7getFontEt+0x6e>
    default:
        return 0;
 8003d44:	2300      	movs	r3, #0
    }
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3708      	adds	r7, #8
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop

08003d50 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0
    return bitmap_database;
 8003d54:	4b02      	ldr	r3, [pc, #8]	; (8003d60 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr
 8003d60:	0802eae4 	.word	0x0802eae4

08003d64 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8003d68:	230e      	movs	r3, #14
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
    {
 8003d7c:	4a04      	ldr	r2, [pc, #16]	; (8003d90 <_ZN8touchgfx4FontD1Ev+0x1c>)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	601a      	str	r2, [r3, #0]
    }
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4618      	mov	r0, r3
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr
 8003d90:	0802efc8 	.word	0x0802efc8

08003d94 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
    }
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f7ff ffe9 	bl	8003d74 <_ZN8touchgfx4FontD1Ev>
 8003da2:	2114      	movs	r1, #20
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f028 fc32 	bl	802c60e <_ZdlPvj>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4618      	mov	r0, r3
 8003dae:	3708      	adds	r7, #8
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8003db4:	b590      	push	{r4, r7, lr}
 8003db6:	b087      	sub	sp, #28
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 8003dc0:	887b      	ldrh	r3, [r7, #2]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	e010      	b.n	8003dec <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	3308      	adds	r3, #8
 8003dd8:	681c      	ldr	r4, [r3, #0]
 8003dda:	f107 030f 	add.w	r3, r7, #15
 8003dde:	f107 0210 	add.w	r2, r7, #16
 8003de2:	8879      	ldrh	r1, [r7, #2]
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	47a0      	blx	r4
 8003de8:	6178      	str	r0, [r7, #20]
        return glyph;
 8003dea:	697b      	ldr	r3, [r7, #20]
    }
 8003dec:	4618      	mov	r0, r3
 8003dee:	371c      	adds	r7, #28
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd90      	pop	{r4, r7, pc}

08003df4 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	89db      	ldrh	r3, [r3, #14]
    }
 8003e00:	4618      	mov	r0, r3
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	8a1b      	ldrh	r3, [r3, #16]
    }
 8003e18:	4618      	mov	r0, r3
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The baseline position.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	88db      	ldrh	r3, [r3, #6]
    }
 8003e30:	4618      	mov	r0, r3
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	889b      	ldrh	r3, [r3, #4]
    }
 8003e48:	4618      	mov	r0, r3
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	7a9b      	ldrb	r3, [r3, #10]
 8003e60:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8003e64:	b2db      	uxtb	r3, r3
    }
 8003e66:	4618      	mov	r0, r3
 8003e68:	370c      	adds	r7, #12
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr

08003e72 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 8003e72:	b480      	push	{r7}
 8003e74:	b083      	sub	sp, #12
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	7a9b      	ldrb	r3, [r3, #10]
 8003e7e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003e82:	b2db      	uxtb	r3, r3
    }
 8003e84:	4618      	mov	r0, r3
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	4a05      	ldr	r2, [pc, #20]	; (8003eb0 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	601a      	str	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7ff ff67 	bl	8003d74 <_ZN8touchgfx4FontD1Ev>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3708      	adds	r7, #8
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	0802fb38 	.word	0x0802fb38

08003eb4 <_ZN8touchgfx9ConstFontD0Ev>:
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f7ff ffe7 	bl	8003e90 <_ZN8touchgfx9ConstFontD1Ev>
 8003ec2:	211c      	movs	r1, #28
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f028 fba2 	bl	802c60e <_ZdlPvj>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3708      	adds	r7, #8
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	4a05      	ldr	r2, [pc, #20]	; (8003ef4 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	601a      	str	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7ff ffd3 	bl	8003e90 <_ZN8touchgfx9ConstFontD1Ev>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4618      	mov	r0, r3
 8003eee:	3708      	adds	r7, #8
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	0802ed74 	.word	0x0802ed74

08003ef8 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f7ff ffe7 	bl	8003ed4 <_ZN8touchgfx13GeneratedFontD1Ev>
 8003f06:	212c      	movs	r1, #44	; 0x2c
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f028 fb80 	bl	802c60e <_ZdlPvj>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4618      	mov	r0, r3
 8003f12:	3708      	adds	r7, #8
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <_ZN8touchgfx9TypedTextD1Ev>:
    virtual ~TypedText()
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
    {
 8003f20:	4a04      	ldr	r2, [pc, #16]	; (8003f34 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	601a      	str	r2, [r3, #0]
    }
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr
 8003f34:	0802ec04 	.word	0x0802ec04

08003f38 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
    }
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f7ff ffe9 	bl	8003f18 <_ZN8touchgfx9TypedTextD1Ev>
 8003f46:	2108      	movs	r1, #8
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f028 fb60 	bl	802c60e <_ZdlPvj>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4618      	mov	r0, r3
 8003f52:	3708      	adds	r7, #8
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	4618      	mov	r0, r3
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <_ZN8touchgfx4RectC1Essss>:
     * @param  rectX      The x coordinate.
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
 8003f70:	b480      	push	{r7}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	4608      	mov	r0, r1
 8003f7a:	4611      	mov	r1, r2
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	4603      	mov	r3, r0
 8003f80:	817b      	strh	r3, [r7, #10]
 8003f82:	460b      	mov	r3, r1
 8003f84:	813b      	strh	r3, [r7, #8]
 8003f86:	4613      	mov	r3, r2
 8003f88:	80fb      	strh	r3, [r7, #6]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	897a      	ldrh	r2, [r7, #10]
 8003f8e:	801a      	strh	r2, [r3, #0]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	893a      	ldrh	r2, [r7, #8]
 8003f94:	805a      	strh	r2, [r3, #2]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	88fa      	ldrh	r2, [r7, #6]
 8003f9a:	809a      	strh	r2, [r3, #4]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8b3a      	ldrh	r2, [r7, #24]
 8003fa0:	80da      	strh	r2, [r3, #6]
    {
    }
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3714      	adds	r7, #20
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 8003fb8:	4a14      	ldr	r2, [pc, #80]	; (800400c <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	601a      	str	r2, [r3, #0]
        : rect(),
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	3304      	adds	r3, #4
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7fe fcde 	bl	8002984 <_ZN8touchgfx4RectC1Ev>
          cachedVisibleRect(),
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	330c      	adds	r3, #12
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7fe fcd9 	bl	8002984 <_ZN8touchgfx4RectC1Ev>
          parent(0),
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	615a      	str	r2, [r3, #20]
          nextSibling(0),
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	619a      	str	r2, [r3, #24]
          nextDrawChainElement(0),
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	61da      	str	r2, [r3, #28]
          cachedAbsX(0),
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	841a      	strh	r2, [r3, #32]
          cachedAbsY(0),
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	845a      	strh	r2, [r3, #34]	; 0x22
          touchable(false),
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          visible(true)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4618      	mov	r0, r3
 8004004:	3708      	adds	r7, #8
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	0802fad0 	.word	0x0802fad0

08004010 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
    {
 8004018:	4a04      	ldr	r2, [pc, #16]	; (800402c <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	601a      	str	r2, [r3, #0]
    }
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4618      	mov	r0, r3
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	0802fad0 	.word	0x0802fad0

08004030 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
    }
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f7ff ffe9 	bl	8004010 <_ZN8touchgfx8DrawableD1Ev>
 800403e:	2128      	movs	r1, #40	; 0x28
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f028 fae4 	bl	802c60e <_ZdlPvj>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4618      	mov	r0, r3
 800404a:	3708      	adds	r7, #8
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800405e:	2b00      	cmp	r3, #0
 8004060:	d005      	beq.n	800406e <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	3314      	adds	r3, #20
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	4798      	blx	r3
        }
    }
 800406e:	bf00      	nop
 8004070:	3708      	adds	r7, #8
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 8004076:	b480      	push	{r7}
 8004078:	b083      	sub	sp, #12
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800407e:	2300      	movs	r3, #0
    }
 8004080:	4618      	mov	r0, r3
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	4608      	mov	r0, r1
 8004096:	4611      	mov	r1, r2
 8004098:	461a      	mov	r2, r3
 800409a:	4603      	mov	r3, r0
 800409c:	817b      	strh	r3, [r7, #10]
 800409e:	460b      	mov	r3, r1
 80040a0:	813b      	strh	r3, [r7, #8]
 80040a2:	4613      	mov	r3, r2
 80040a4:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 80040a6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80040aa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80040ae:	4619      	mov	r1, r3
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f000 f844 	bl	800413e <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 80040b6:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80040ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040be:	4619      	mov	r1, r3
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f000 f898 	bl	80041f6 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 80040c6:	bf00      	nop
 80040c8:	3710      	adds	r7, #16
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <_ZNK8touchgfx8Drawable4getYEv>:
    /**
     * Gets the y coordinate of this Drawable, relative to its parent.
     *
     * @return The y value, relative to the parent.
     */
    int16_t getY() const
 80040ce:	b480      	push	{r7}
 80040d0:	b083      	sub	sp, #12
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
    {
        return rect.y;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    }
 80040dc:	4618      	mov	r0, r3
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <_ZNK8touchgfx8Drawable9getHeightEv>:
    /**
     * Gets the height of this Drawable.
     *
     * @return The height of this Drawable.
     */
    int16_t getHeight() const
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
    {
        return rect.height;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 80040f6:	4618      	mov	r0, r3
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 8004102:	b480      	push	{r7}
 8004104:	b083      	sub	sp, #12
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
 800410a:	460b      	mov	r3, r1
 800410c:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	887a      	ldrh	r2, [r7, #2]
 8004112:	809a      	strh	r2, [r3, #4]
    }
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	460b      	mov	r3, r1
 800412a:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	887a      	ldrh	r2, [r7, #2]
 8004130:	80da      	strh	r2, [r3, #6]
    }
 8004132:	bf00      	nop
 8004134:	370c      	adds	r7, #12
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr

0800413e <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 800413e:	b580      	push	{r7, lr}
 8004140:	b082      	sub	sp, #8
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
 8004146:	460b      	mov	r3, r1
 8004148:	807b      	strh	r3, [r7, #2]
 800414a:	4613      	mov	r3, r2
 800414c:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	3330      	adds	r3, #48	; 0x30
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800415a:	4611      	mov	r1, r2
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	4798      	blx	r3
        setY(y);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	3334      	adds	r3, #52	; 0x34
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f9b7 2000 	ldrsh.w	r2, [r7]
 800416c:	4611      	mov	r1, r2
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	4798      	blx	r3
    }
 8004172:	bf00      	nop
 8004174:	3708      	adds	r7, #8
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800417a:	b480      	push	{r7}
 800417c:	b083      	sub	sp, #12
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
 8004182:	460b      	mov	r3, r1
 8004184:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	887a      	ldrh	r2, [r7, #2]
 800418a:	811a      	strh	r2, [r3, #8]
    }
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	460b      	mov	r3, r1
 80041a2:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	887a      	ldrh	r2, [r7, #2]
 80041a8:	815a      	strh	r2, [r3, #10]
    }
 80041aa:	bf00      	nop
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 80041b6:	b480      	push	{r7}
 80041b8:	b083      	sub	sp, #12
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
    {
    }
 80041be:	bf00      	nop
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80041ca:	b480      	push	{r7}
 80041cc:	b083      	sub	sp, #12
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
 80041d2:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80041ea:	bf00      	nop
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b082      	sub	sp, #8
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
 80041fe:	460b      	mov	r3, r1
 8004200:	807b      	strh	r3, [r7, #2]
 8004202:	4613      	mov	r3, r2
 8004204:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	3338      	adds	r3, #56	; 0x38
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004212:	4611      	mov	r1, r2
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	4798      	blx	r3
        setHeight(height);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	333c      	adds	r3, #60	; 0x3c
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004224:	4611      	mov	r1, r2
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	4798      	blx	r3
    }
 800422a:	bf00      	nop
 800422c:	3708      	adds	r7, #8
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8004232:	b480      	push	{r7}
 8004234:	b083      	sub	sp, #12
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
 800423a:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
    {
    }
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800426a:	4618      	mov	r0, r3
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8004276:	b480      	push	{r7}
 8004278:	b083      	sub	sp, #12
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 8004284:	4618      	mov	r0, r3
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	460b      	mov	r3, r1
 800429a:	807b      	strh	r3, [r7, #2]
 800429c:	4613      	mov	r3, r2
 800429e:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	3354      	adds	r3, #84	; 0x54
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	8879      	ldrh	r1, [r7, #2]
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80042b0:	b292      	uxth	r2, r2
 80042b2:	1a8a      	subs	r2, r1, r2
 80042b4:	b292      	uxth	r2, r2
 80042b6:	b210      	sxth	r0, r2
 80042b8:	8839      	ldrh	r1, [r7, #0]
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80042c0:	b292      	uxth	r2, r2
 80042c2:	1a8a      	subs	r2, r1, r2
 80042c4:	b292      	uxth	r2, r2
 80042c6:	b212      	sxth	r2, r2
 80042c8:	4601      	mov	r1, r0
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	4798      	blx	r3
    }
 80042ce:	bf00      	nop
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 80042d6:	b480      	push	{r7}
 80042d8:	b083      	sub	sp, #12
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042e4:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042ec:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042f4:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 80042f6:	bf00      	nop
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8004302:	b580      	push	{r7, lr}
 8004304:	b084      	sub	sp, #16
 8004306:	af00      	add	r7, sp, #0
 8004308:	60f8      	str	r0, [r7, #12]
 800430a:	60b9      	str	r1, [r7, #8]
 800430c:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 800430e:	68f8      	ldr	r0, [r7, #12]
 8004310:	f7ff ffe1 	bl	80042d6 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	601a      	str	r2, [r3, #0]
    }
 8004322:	bf00      	nop
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
        timerWidgets.add(w);
    }

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
 800432a:	b580      	push	{r7, lr}
 800432c:	b082      	sub	sp, #8
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
    {
        timerWidgets.clear();
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	3304      	adds	r3, #4
 8004336:	4618      	mov	r0, r3
 8004338:	f017 fb92 	bl	801ba60 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    }
 800433c:	bf00      	nop
 800433e:	3708      	adds	r7, #8
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <_ZN8touchgfx3HAL3lcdEv>:
    static LCD& lcd()
 8004344:	b480      	push	{r7}
 8004346:	af00      	add	r7, sp, #0
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8004348:	4b0b      	ldr	r3, [pc, #44]	; (8004378 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004350:	2b00      	cmp	r3, #0
 8004352:	d008      	beq.n	8004366 <_ZN8touchgfx3HAL3lcdEv+0x22>
 8004354:	4b08      	ldr	r3, [pc, #32]	; (8004378 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800435a:	2b00      	cmp	r3, #0
 800435c:	d003      	beq.n	8004366 <_ZN8touchgfx3HAL3lcdEv+0x22>
            return *instance->auxiliaryLCD;
 800435e:	4b06      	ldr	r3, [pc, #24]	; (8004378 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004364:	e002      	b.n	800436c <_ZN8touchgfx3HAL3lcdEv+0x28>
        return instance->lcdRef;
 8004366:	4b04      	ldr	r3, [pc, #16]	; (8004378 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	689b      	ldr	r3, [r3, #8]
    }
 800436c:	4618      	mov	r0, r3
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	2400baf0 	.word	0x2400baf0

0800437c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	607b      	str	r3, [r7, #4]
 8004386:	460b      	mov	r3, r1
 8004388:	817b      	strh	r3, [r7, #10]
 800438a:	4613      	mov	r3, r2
 800438c:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	4618      	mov	r0, r3
 8004392:	f7ff ff63 	bl	800425c <_ZNK8touchgfx8Drawable9isVisibleEv>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d008      	beq.n	80043ae <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	4618      	mov	r0, r3
 80043a0:	f7ff ff69 	bl	8004276 <_ZNK8touchgfx8Drawable11isTouchableEv>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 80043aa:	2301      	movs	r3, #1
 80043ac:	e000      	b.n	80043b0 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 80043ae:	2300      	movs	r3, #0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d002      	beq.n	80043ba <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	601a      	str	r2, [r3, #0]
        }
    }
 80043ba:	bf00      	nop
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
	...

080043c4 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 80043cc:	4a07      	ldr	r2, [pc, #28]	; (80043ec <_ZN8touchgfx10TransitionC1Ev+0x28>)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	601a      	str	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	605a      	str	r2, [r3, #4]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	721a      	strb	r2, [r3, #8]
    {
    }
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4618      	mov	r0, r3
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	0802ec80 	.word	0x0802ec80

080043f0 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
    {
 80043f8:	4a04      	ldr	r2, [pc, #16]	; (800440c <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	601a      	str	r2, [r3, #0]
    }
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4618      	mov	r0, r3
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr
 800440c:	0802ec80 	.word	0x0802ec80

08004410 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
    }
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f7ff ffe9 	bl	80043f0 <_ZN8touchgfx10TransitionD1Ev>
 800441e:	210c      	movs	r1, #12
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f028 f8f4 	bl	802c60e <_ZdlPvj>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4618      	mov	r0, r3
 800442a:	3708      	adds	r7, #8
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
    {
    }
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
    {
    }
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
    {
    }
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 8004474:	f017 fa8e 	bl	801b994 <_ZN8touchgfx11Application11getInstanceEv>
 8004478:	4603      	mov	r3, r0
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	323c      	adds	r2, #60	; 0x3c
 800447e:	6812      	ldr	r2, [r2, #0]
 8004480:	4618      	mov	r0, r3
 8004482:	4790      	blx	r2
    }
 8004484:	bf00      	nop
 8004486:	3708      	adds	r7, #8
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	683a      	ldr	r2, [r7, #0]
 800449a:	605a      	str	r2, [r3, #4]
    }
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <_ZNK8touchgfx10Transition13FullSolidRect12getSolidRectEv>:
     * A Widget that reports solid and but does not draw anything.
     */
    class FullSolidRect : public Widget
    {
    public:
        virtual Rect getSolidRect() const
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af02      	add	r7, sp, #8
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
        {
            return Rect(0, 0, rect.width, rect.height);
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	4613      	mov	r3, r2
 80044c2:	2200      	movs	r2, #0
 80044c4:	2100      	movs	r1, #0
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f7ff fd52 	bl	8003f70 <_ZN8touchgfx4RectC1Essss>
        }
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	3708      	adds	r7, #8
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <_ZNK8touchgfx10Transition13FullSolidRect4drawERKNS_4RectE>:

        virtual void draw(const Rect& area) const
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
        {
        }
 80044de:	bf00      	nop
 80044e0:	370c      	adds	r7, #12
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
	...

080044ec <_ZN8touchgfx14MVPApplicationC1Ev>:
    MVPApplication()
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
          pendingScreenTransitionCallback(0)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f017 fb84 	bl	801bc04 <_ZN8touchgfx11ApplicationC1Ev>
 80044fc:	4a09      	ldr	r2, [pc, #36]	; (8004524 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	601a      	str	r2, [r3, #0]
        : currentPresenter(0),
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
          pendingScreenTransitionCallback(0)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
        instance = this;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a04      	ldr	r2, [pc, #16]	; (8004528 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8004516:	6013      	str	r3, [r2, #0]
    }
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4618      	mov	r0, r3
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	0802e948 	.word	0x0802e948
 8004528:	2400bb3c 	.word	0x2400bb3c

0800452c <_ZN5Model4bindEP13ModelListener>:

    /**
     * Sets the modelListener to point to the currently active presenter. Called automatically
     * when switching screen.
     */
    void bind(ModelListener* listener)
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	601a      	str	r2, [r3, #0]
    }
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	721a      	strb	r2, [r3, #8]
    }
 8004556:	bf00      	nop
 8004558:	370c      	adds	r7, #12
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr

08004562 <_ZN13ModelListener4bindEP5Model>:

    /**
     * Sets the model pointer to point to the Model object. Called automatically
     * when switching screen.
     */
    void bind(Model* m)
 8004562:	b480      	push	{r7}
 8004564:	b083      	sub	sp, #12
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
 800456a:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	683a      	ldr	r2, [r7, #0]
 8004570:	605a      	str	r2, [r3, #4]
    }
 8004572:	bf00      	nop
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
	...

08004580 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4618      	mov	r0, r3
 800458c:	f7ff fd10 	bl	8003fb0 <_ZN8touchgfx8DrawableC1Ev>
 8004590:	4a03      	ldr	r2, [pc, #12]	; (80045a0 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	601a      	str	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4618      	mov	r0, r3
 800459a:	3708      	adds	r7, #8
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	0802ed0c 	.word	0x0802ed0c

080045a4 <_ZN8touchgfx6WidgetD1Ev>:
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	4a05      	ldr	r2, [pc, #20]	; (80045c4 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	601a      	str	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7ff fd2b 	bl	8004010 <_ZN8touchgfx8DrawableD1Ev>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4618      	mov	r0, r3
 80045be:	3708      	adds	r7, #8
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	0802ed0c 	.word	0x0802ed0c

080045c8 <_ZN8touchgfx6WidgetD0Ev>:
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f7ff ffe7 	bl	80045a4 <_ZN8touchgfx6WidgetD1Ev>
 80045d6:	2128      	movs	r1, #40	; 0x28
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f028 f818 	bl	802c60e <_ZdlPvj>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4618      	mov	r0, r3
 80045e2:	3708      	adds	r7, #8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/localize_anomaly_screen/Localize_AnomalyView.hpp>
#include <gui/localize_anomaly_screen/Localize_AnomalyPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7ff ff78 	bl	80044ec <_ZN8touchgfx14MVPApplicationC1Ev>
 80045fc:	4a16      	ldr	r2, [pc, #88]	; (8004658 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x70>)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	601a      	str	r2, [r3, #0]
      transitionCallback(),
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004608:	4618      	mov	r0, r3
 800460a:	f000 f931 	bl	8004870 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
      frontendHeap(heap),
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
      model(m)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	68ba      	ldr	r2, [r7, #8]
 800461a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800461e:	f7fd fe51 	bl	80022c4 <_ZN8touchgfx3HAL11getInstanceEv>
 8004622:	4603      	mov	r3, r0
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	3208      	adds	r2, #8
 8004628:	6812      	ldr	r2, [r2, #0]
 800462a:	2100      	movs	r1, #0
 800462c:	4618      	mov	r0, r3
 800462e:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 8004630:	2000      	movs	r0, #0
 8004632:	f005 ff43 	bl	800a4bc <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8004636:	f7ff fe85 	bl	8004344 <_ZN8touchgfx3HAL3lcdEv>
 800463a:	4603      	mov	r3, r0
 800463c:	4618      	mov	r0, r3
 800463e:	f020 fc8c 	bl	8024f5a <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 8004642:	f7ff fe7f 	bl	8004344 <_ZN8touchgfx3HAL3lcdEv>
 8004646:	4603      	mov	r3, r0
 8004648:	4618      	mov	r0, r3
 800464a:	f020 fd01 	bl	8025050 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>
}
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	4618      	mov	r0, r3
 8004652:	3710      	adds	r7, #16
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	0802e8dc 	.word	0x0802e8dc

0800465c <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4618      	mov	r0, r3
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	683a      	ldr	r2, [r7, #0]
 8004682:	4611      	mov	r1, r2
 8004684:	4618      	mov	r0, r3
 8004686:	f7ff ffe9 	bl	800465c <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	605a      	str	r2, [r3, #4]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	683a      	ldr	r2, [r7, #0]
 8004696:	3308      	adds	r3, #8
 8004698:	3208      	adds	r2, #8
 800469a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800469e:	e883 0003 	stmia.w	r3, {r0, r1}
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4618      	mov	r0, r3
 80046a6:	3708      	adds	r7, #8
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>:
 */

// Main

void FrontendApplicationBase::gotoMainScreenNoTransition()
{
 80046ac:	b590      	push	{r4, r7, lr}
 80046ae:	b089      	sub	sp, #36	; 0x24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoMainScreenNoTransitionImpl);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 80046ba:	4b10      	ldr	r3, [pc, #64]	; (80046fc <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv+0x50>)
 80046bc:	61bb      	str	r3, [r7, #24]
 80046be:	2300      	movs	r3, #0
 80046c0:	61fb      	str	r3, [r7, #28]
 80046c2:	f107 0008 	add.w	r0, r7, #8
 80046c6:	f107 0318 	add.w	r3, r7, #24
 80046ca:	cb0c      	ldmia	r3, {r2, r3}
 80046cc:	6879      	ldr	r1, [r7, #4]
 80046ce:	f000 f8eb 	bl	80048a8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 80046d2:	f107 0308 	add.w	r3, r7, #8
 80046d6:	4619      	mov	r1, r3
 80046d8:	4620      	mov	r0, r4
 80046da:	f7ff ffcb 	bl	8004674 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 80046de:	f107 0308 	add.w	r3, r7, #8
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7fe ff38 	bl	8003558 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 80046f4:	bf00      	nop
 80046f6:	3724      	adds	r7, #36	; 0x24
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd90      	pop	{r4, r7, pc}
 80046fc:	08004701 	.word	0x08004701

08004700 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMainScreenNoTransitionImpl()
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af02      	add	r7, sp, #8
 8004706:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f503 719e 	add.w	r1, r3, #316	; 0x13c
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004714:	461a      	mov	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800471c:	9300      	str	r3, [sp, #0]
 800471e:	4b04      	ldr	r3, [pc, #16]	; (8004730 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x30>)
 8004720:	4804      	ldr	r0, [pc, #16]	; (8004734 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x34>)
 8004722:	f000 f8f3 	bl	800490c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8004726:	bf00      	nop
 8004728:	3708      	adds	r7, #8
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	2400bb30 	.word	0x2400bb30
 8004734:	2400bb2c 	.word	0x2400bb2c

08004738 <_ZN23FrontendApplicationBase33gotoMainScreenWipeTransitionSouthEv>:

void FrontendApplicationBase::gotoMainScreenWipeTransitionSouth()
{
 8004738:	b590      	push	{r4, r7, lr}
 800473a:	b089      	sub	sp, #36	; 0x24
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoMainScreenWipeTransitionSouthImpl);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 8004746:	4b10      	ldr	r3, [pc, #64]	; (8004788 <_ZN23FrontendApplicationBase33gotoMainScreenWipeTransitionSouthEv+0x50>)
 8004748:	61bb      	str	r3, [r7, #24]
 800474a:	2300      	movs	r3, #0
 800474c:	61fb      	str	r3, [r7, #28]
 800474e:	f107 0008 	add.w	r0, r7, #8
 8004752:	f107 0318 	add.w	r3, r7, #24
 8004756:	cb0c      	ldmia	r3, {r2, r3}
 8004758:	6879      	ldr	r1, [r7, #4]
 800475a:	f000 f8a5 	bl	80048a8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800475e:	f107 0308 	add.w	r3, r7, #8
 8004762:	4619      	mov	r1, r3
 8004764:	4620      	mov	r0, r4
 8004766:	f7ff ff85 	bl	8004674 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800476a:	f107 0308 	add.w	r3, r7, #8
 800476e:	4618      	mov	r0, r3
 8004770:	f7fe fef2 	bl	8003558 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 8004780:	bf00      	nop
 8004782:	3724      	adds	r7, #36	; 0x24
 8004784:	46bd      	mov	sp, r7
 8004786:	bd90      	pop	{r4, r7, pc}
 8004788:	0800478d 	.word	0x0800478d

0800478c <_ZN23FrontendApplicationBase37gotoMainScreenWipeTransitionSouthImplEv>:

void FrontendApplicationBase::gotoMainScreenWipeTransitionSouthImpl()
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af02      	add	r7, sp, #8
 8004792:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::WipeTransition<SOUTH>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f503 719e 	add.w	r1, r3, #316	; 0x13c
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80047a0:	461a      	mov	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80047a8:	9300      	str	r3, [sp, #0]
 80047aa:	4b04      	ldr	r3, [pc, #16]	; (80047bc <_ZN23FrontendApplicationBase37gotoMainScreenWipeTransitionSouthImplEv+0x30>)
 80047ac:	4804      	ldr	r0, [pc, #16]	; (80047c0 <_ZN23FrontendApplicationBase37gotoMainScreenWipeTransitionSouthImplEv+0x34>)
 80047ae:	f000 f9c7 	bl	8004b40 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 80047b2:	bf00      	nop
 80047b4:	3708      	adds	r7, #8
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	2400bb30 	.word	0x2400bb30
 80047c0:	2400bb2c 	.word	0x2400bb2c

080047c4 <_ZN23FrontendApplicationBase45gotoLocalize_AnomalyScreenWipeTransitionNorthEv>:

// Localize_Anomaly

void FrontendApplicationBase::gotoLocalize_AnomalyScreenWipeTransitionNorth()
{
 80047c4:	b590      	push	{r4, r7, lr}
 80047c6:	b089      	sub	sp, #36	; 0x24
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoLocalize_AnomalyScreenWipeTransitionNorthImpl);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 80047d2:	4b10      	ldr	r3, [pc, #64]	; (8004814 <_ZN23FrontendApplicationBase45gotoLocalize_AnomalyScreenWipeTransitionNorthEv+0x50>)
 80047d4:	61bb      	str	r3, [r7, #24]
 80047d6:	2300      	movs	r3, #0
 80047d8:	61fb      	str	r3, [r7, #28]
 80047da:	f107 0008 	add.w	r0, r7, #8
 80047de:	f107 0318 	add.w	r3, r7, #24
 80047e2:	cb0c      	ldmia	r3, {r2, r3}
 80047e4:	6879      	ldr	r1, [r7, #4]
 80047e6:	f000 f85f 	bl	80048a8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 80047ea:	f107 0308 	add.w	r3, r7, #8
 80047ee:	4619      	mov	r1, r3
 80047f0:	4620      	mov	r0, r4
 80047f2:	f7ff ff3f 	bl	8004674 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 80047f6:	f107 0308 	add.w	r3, r7, #8
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7fe feac 	bl	8003558 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 800480c:	bf00      	nop
 800480e:	3724      	adds	r7, #36	; 0x24
 8004810:	46bd      	mov	sp, r7
 8004812:	bd90      	pop	{r4, r7, pc}
 8004814:	08004819 	.word	0x08004819

08004818 <_ZN23FrontendApplicationBase49gotoLocalize_AnomalyScreenWipeTransitionNorthImplEv>:

void FrontendApplicationBase::gotoLocalize_AnomalyScreenWipeTransitionNorthImpl()
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af02      	add	r7, sp, #8
 800481e:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Localize_AnomalyView, Localize_AnomalyPresenter, touchgfx::WipeTransition<NORTH>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f503 719e 	add.w	r1, r3, #316	; 0x13c
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800482c:	461a      	mov	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8004834:	9300      	str	r3, [sp, #0]
 8004836:	4b04      	ldr	r3, [pc, #16]	; (8004848 <_ZN23FrontendApplicationBase49gotoLocalize_AnomalyScreenWipeTransitionNorthImplEv+0x30>)
 8004838:	4804      	ldr	r0, [pc, #16]	; (800484c <_ZN23FrontendApplicationBase49gotoLocalize_AnomalyScreenWipeTransitionNorthImplEv+0x34>)
 800483a:	f000 fa9d 	bl	8004d78 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800483e:	bf00      	nop
 8004840:	3708      	adds	r7, #8
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	2400bb30 	.word	0x2400bb30
 800484c:	2400bb2c 	.word	0x2400bb2c

08004850 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	4a04      	ldr	r2, [pc, #16]	; (800486c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	601a      	str	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4618      	mov	r0, r3
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr
 800486c:	0802e99c 	.word	0x0802e99c

08004870 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
    Callback()
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4618      	mov	r0, r3
 800487c:	f7ff ffe8 	bl	8004850 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8004880:	4a08      	ldr	r2, [pc, #32]	; (80048a4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	601a      	str	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	605a      	str	r2, [r3, #4]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	609a      	str	r2, [r3, #8]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	60da      	str	r2, [r3, #12]
    }
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4618      	mov	r0, r3
 800489c:	3708      	adds	r7, #8
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	0802e930 	.word	0x0802e930

080048a8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	4639      	mov	r1, r7
 80048b4:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7ff ffc8 	bl	8004850 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 80048c0:	4a08      	ldr	r2, [pc, #32]	; (80048e4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	601a      	str	r2, [r3, #0]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	68ba      	ldr	r2, [r7, #8]
 80048ca:	605a      	str	r2, [r3, #4]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	3308      	adds	r3, #8
 80048d0:	463a      	mov	r2, r7
 80048d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80048d6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	4618      	mov	r0, r3
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	0802e930 	.word	0x0802e930

080048e8 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7ff fd66 	bl	80043c4 <_ZN8touchgfx10TransitionC1Ev>
 80048f8:	4a03      	ldr	r2, [pc, #12]	; (8004908 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	601a      	str	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4618      	mov	r0, r3
 8004902:	3708      	adds	r7, #8
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	0802ec5c 	.word	0x0802ec5c

0800490c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800490c:	b590      	push	{r4, r7, lr}
 800490e:	b08f      	sub	sp, #60	; 0x3c
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
 8004918:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	689a      	ldr	r2, [r3, #8]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	3320      	adds	r3, #32
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4610      	mov	r0, r2
 800492a:	4798      	blx	r3
 800492c:	4603      	mov	r3, r0
 800492e:	f640 3287 	movw	r2, #2951	; 0xb87
 8004932:	4293      	cmp	r3, r2
 8004934:	d805      	bhi.n	8004942 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 8004936:	4b7d      	ldr	r3, [pc, #500]	; (8004b2c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 8004938:	4a7d      	ldr	r2, [pc, #500]	; (8004b30 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800493a:	21a3      	movs	r1, #163	; 0xa3
 800493c:	487d      	ldr	r0, [pc, #500]	; (8004b34 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800493e:	f027 fe95 	bl	802c66c <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685a      	ldr	r2, [r3, #4]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	3320      	adds	r3, #32
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4610      	mov	r0, r2
 8004952:	4798      	blx	r3
 8004954:	4603      	mov	r3, r0
 8004956:	2b0f      	cmp	r3, #15
 8004958:	d805      	bhi.n	8004966 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800495a:	4b77      	ldr	r3, [pc, #476]	; (8004b38 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800495c:	4a74      	ldr	r2, [pc, #464]	; (8004b30 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800495e:	21a4      	movs	r1, #164	; 0xa4
 8004960:	4874      	ldr	r0, [pc, #464]	; (8004b34 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004962:	f027 fe83 	bl	802c66c <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	68da      	ldr	r2, [r3, #12]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	3320      	adds	r3, #32
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4610      	mov	r0, r2
 8004976:	4798      	blx	r3
 8004978:	4603      	mov	r3, r0
 800497a:	2b0b      	cmp	r3, #11
 800497c:	d805      	bhi.n	800498a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 800497e:	4b6f      	ldr	r3, [pc, #444]	; (8004b3c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8004980:	4a6b      	ldr	r2, [pc, #428]	; (8004b30 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004982:	21a5      	movs	r1, #165	; 0xa5
 8004984:	486b      	ldr	r0, [pc, #428]	; (8004b34 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004986:	f027 fe71 	bl	802c66c <__assert_func>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	62bb      	str	r3, [r7, #40]	; 0x28
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	627b      	str	r3, [r7, #36]	; 0x24
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8004996:	f016 fffd 	bl	801b994 <_ZN8touchgfx11Application11getInstanceEv>
 800499a:	4603      	mov	r3, r0
 800499c:	4618      	mov	r0, r3
 800499e:	f7ff fcc4 	bl	800432a <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 80049a2:	6a3b      	ldr	r3, [r7, #32]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d008      	beq.n	80049bc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb0>
        (*currentTrans)->tearDown();
 80049aa:	6a3b      	ldr	r3, [r7, #32]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	6a3b      	ldr	r3, [r7, #32]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	330c      	adds	r3, #12
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4610      	mov	r0, r2
 80049ba:	4798      	blx	r3
    if (*currentTrans)
 80049bc:	6a3b      	ldr	r3, [r7, #32]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d007      	beq.n	80049d4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc8>
        (*currentTrans)->~Transition();
 80049c4:	6a3b      	ldr	r3, [r7, #32]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	6a3b      	ldr	r3, [r7, #32]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4610      	mov	r0, r2
 80049d2:	4798      	blx	r3
    if (*currentScreen)
 80049d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d008      	beq.n	80049ee <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
        (*currentScreen)->tearDownScreen();
 80049dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	3314      	adds	r3, #20
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4610      	mov	r0, r2
 80049ec:	4798      	blx	r3
    if (*currentPresenter)
 80049ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d008      	beq.n	8004a08 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfc>
        (*currentPresenter)->deactivate();
 80049f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	3304      	adds	r3, #4
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4610      	mov	r0, r2
 8004a06:	4798      	blx	r3
    if (*currentScreen)
 8004a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d007      	beq.n	8004a20 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x114>
        (*currentScreen)->~Screen();
 8004a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4610      	mov	r0, r2
 8004a1e:	4798      	blx	r3
    if (*currentPresenter)
 8004a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d008      	beq.n	8004a3a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
        (*currentPresenter)->~Presenter();
 8004a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	3308      	adds	r3, #8
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4610      	mov	r0, r2
 8004a38:	4798      	blx	r3
}
 8004a3a:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	2100      	movs	r1, #0
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 fab2 	bl	8004fac <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	200c      	movs	r0, #12
 8004a4e:	f7ff fa83 	bl	8003f58 <_ZnwjPv>
 8004a52:	4604      	mov	r4, r0
 8004a54:	4620      	mov	r0, r4
 8004a56:	f7ff ff47 	bl	80048e8 <_ZN8touchgfx12NoTransitionC1Ev>
 8004a5a:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	2100      	movs	r1, #0
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 fab5 	bl	8004fd2 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	f640 3088 	movw	r0, #2952	; 0xb88
 8004a70:	f7ff fa72 	bl	8003f58 <_ZnwjPv>
 8004a74:	4604      	mov	r4, r0
 8004a76:	4620      	mov	r0, r4
 8004a78:	f005 ffdc 	bl	800aa34 <_ZN8MainViewC1Ev>
 8004a7c:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	2100      	movs	r1, #0
 8004a84:	4618      	mov	r0, r3
 8004a86:	f000 fab7 	bl	8004ff8 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	2010      	movs	r0, #16
 8004a90:	f7ff fa62 	bl	8003f58 <_ZnwjPv>
 8004a94:	4604      	mov	r4, r0
 8004a96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a98:	4620      	mov	r0, r4
 8004a9a:	f005 ff3d 	bl	800a918 <_ZN13MainPresenterC1ER8MainView>
 8004a9e:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004aa4:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004aaa:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ab0:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8004ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d002      	beq.n	8004abe <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 8004ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aba:	3304      	adds	r3, #4
 8004abc:	e000      	b.n	8004ac0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 8004abe:	2300      	movs	r3, #0
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004ac4:	f7ff fd32 	bl	800452c <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8004ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aca:	3304      	adds	r3, #4
 8004acc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f7ff fd47 	bl	8004562 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8004ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f000 faa0 	bl	800501e <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>
 8004ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae0:	61fb      	str	r3, [r7, #28]
 8004ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae4:	61bb      	str	r3, [r7, #24]
 8004ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ae8:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	330c      	adds	r3, #12
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	69f8      	ldr	r0, [r7, #28]
 8004af4:	4798      	blx	r3
    newPresenter->activate();
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	69b8      	ldr	r0, [r7, #24]
 8004afe:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8004b00:	6979      	ldr	r1, [r7, #20]
 8004b02:	69f8      	ldr	r0, [r7, #28]
 8004b04:	f018 fd4a 	bl	801d59c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	3310      	adds	r3, #16
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	6978      	ldr	r0, [r7, #20]
 8004b12:	4798      	blx	r3
    newTransition->invalidate();
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	3314      	adds	r3, #20
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	6978      	ldr	r0, [r7, #20]
 8004b1e:	4798      	blx	r3
}
 8004b20:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 8004b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	373c      	adds	r7, #60	; 0x3c
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd90      	pop	{r4, r7, pc}
 8004b2c:	0802dbd0 	.word	0x0802dbd0
 8004b30:	0802dc60 	.word	0x0802dc60
 8004b34:	0802dd60 	.word	0x0802dd60
 8004b38:	0802dda8 	.word	0x0802dda8
 8004b3c:	0802de4c 	.word	0x0802de4c

08004b40 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8004b40:	b590      	push	{r4, r7, lr}
 8004b42:	b08f      	sub	sp, #60	; 0x3c
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
 8004b4c:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	689a      	ldr	r2, [r3, #8]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	3320      	adds	r3, #32
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4610      	mov	r0, r2
 8004b5e:	4798      	blx	r3
 8004b60:	4603      	mov	r3, r0
 8004b62:	f640 3287 	movw	r2, #2951	; 0xb87
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d805      	bhi.n	8004b76 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 8004b6a:	4b7e      	ldr	r3, [pc, #504]	; (8004d64 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004b6c:	4a7e      	ldr	r2, [pc, #504]	; (8004d68 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004b6e:	21a3      	movs	r1, #163	; 0xa3
 8004b70:	487e      	ldr	r0, [pc, #504]	; (8004d6c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004b72:	f027 fd7b 	bl	802c66c <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685a      	ldr	r2, [r3, #4]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	3320      	adds	r3, #32
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4610      	mov	r0, r2
 8004b86:	4798      	blx	r3
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b0f      	cmp	r3, #15
 8004b8c:	d805      	bhi.n	8004b9a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 8004b8e:	4b78      	ldr	r3, [pc, #480]	; (8004d70 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8004b90:	4a75      	ldr	r2, [pc, #468]	; (8004d68 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004b92:	21a4      	movs	r1, #164	; 0xa4
 8004b94:	4875      	ldr	r0, [pc, #468]	; (8004d6c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004b96:	f027 fd69 	bl	802c66c <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68da      	ldr	r2, [r3, #12]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	3320      	adds	r3, #32
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4610      	mov	r0, r2
 8004baa:	4798      	blx	r3
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b37      	cmp	r3, #55	; 0x37
 8004bb0:	d805      	bhi.n	8004bbe <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 8004bb2:	4b70      	ldr	r3, [pc, #448]	; (8004d74 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 8004bb4:	4a6c      	ldr	r2, [pc, #432]	; (8004d68 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004bb6:	21a5      	movs	r1, #165	; 0xa5
 8004bb8:	486c      	ldr	r0, [pc, #432]	; (8004d6c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004bba:	f027 fd57 	bl	802c66c <__assert_func>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8004bca:	f016 fee3 	bl	801b994 <_ZN8touchgfx11Application11getInstanceEv>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f7ff fbaa 	bl	800432a <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8004bd6:	6a3b      	ldr	r3, [r7, #32]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d008      	beq.n	8004bf0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb0>
        (*currentTrans)->tearDown();
 8004bde:	6a3b      	ldr	r3, [r7, #32]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	6a3b      	ldr	r3, [r7, #32]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	330c      	adds	r3, #12
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4610      	mov	r0, r2
 8004bee:	4798      	blx	r3
    if (*currentTrans)
 8004bf0:	6a3b      	ldr	r3, [r7, #32]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d007      	beq.n	8004c08 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc8>
        (*currentTrans)->~Transition();
 8004bf8:	6a3b      	ldr	r3, [r7, #32]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	6a3b      	ldr	r3, [r7, #32]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4610      	mov	r0, r2
 8004c06:	4798      	blx	r3
    if (*currentScreen)
 8004c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d008      	beq.n	8004c22 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
        (*currentScreen)->tearDownScreen();
 8004c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	3314      	adds	r3, #20
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4610      	mov	r0, r2
 8004c20:	4798      	blx	r3
    if (*currentPresenter)
 8004c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d008      	beq.n	8004c3c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfc>
        (*currentPresenter)->deactivate();
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	3304      	adds	r3, #4
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4610      	mov	r0, r2
 8004c3a:	4798      	blx	r3
    if (*currentScreen)
 8004c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d007      	beq.n	8004c54 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x114>
        (*currentScreen)->~Screen();
 8004c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4610      	mov	r0, r2
 8004c52:	4798      	blx	r3
    if (*currentPresenter)
 8004c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d008      	beq.n	8004c6e <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
        (*currentPresenter)->~Presenter();
 8004c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	3308      	adds	r3, #8
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4610      	mov	r0, r2
 8004c6c:	4798      	blx	r3
}
 8004c6e:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	2100      	movs	r1, #0
 8004c76:	4618      	mov	r0, r3
 8004c78:	f000 f9df 	bl	800503a <_ZN8touchgfx17AbstractPartition2atINS_14WipeTransitionILNS_9DirectionE1EEEEERT_t>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	4619      	mov	r1, r3
 8004c80:	2038      	movs	r0, #56	; 0x38
 8004c82:	f7ff f969 	bl	8003f58 <_ZnwjPv>
 8004c86:	4604      	mov	r4, r0
 8004c88:	2114      	movs	r1, #20
 8004c8a:	4620      	mov	r0, r4
 8004c8c:	f000 fa1c 	bl	80050c8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EEC1Eh>
 8004c90:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	2100      	movs	r1, #0
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f000 f99a 	bl	8004fd2 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	f640 3088 	movw	r0, #2952	; 0xb88
 8004ca6:	f7ff f957 	bl	8003f58 <_ZnwjPv>
 8004caa:	4604      	mov	r4, r0
 8004cac:	4620      	mov	r0, r4
 8004cae:	f005 fec1 	bl	800aa34 <_ZN8MainViewC1Ev>
 8004cb2:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	2100      	movs	r1, #0
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f000 f99c 	bl	8004ff8 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	2010      	movs	r0, #16
 8004cc6:	f7ff f947 	bl	8003f58 <_ZnwjPv>
 8004cca:	4604      	mov	r4, r0
 8004ccc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004cce:	4620      	mov	r0, r4
 8004cd0:	f005 fe22 	bl	800a918 <_ZN13MainPresenterC1ER8MainView>
 8004cd4:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cda:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ce0:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ce6:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8004ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d002      	beq.n	8004cf4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 8004cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf0:	3304      	adds	r3, #4
 8004cf2:	e000      	b.n	8004cf6 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004cfa:	f7ff fc17 	bl	800452c <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8004cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d00:	3304      	adds	r3, #4
 8004d02:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7ff fc2c 	bl	8004562 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8004d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f000 f985 	bl	800501e <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>
 8004d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d16:	61fb      	str	r3, [r7, #28]
 8004d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d1a:	61bb      	str	r3, [r7, #24]
 8004d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d1e:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	330c      	adds	r3, #12
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	69f8      	ldr	r0, [r7, #28]
 8004d2a:	4798      	blx	r3
    newPresenter->activate();
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	69b8      	ldr	r0, [r7, #24]
 8004d34:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8004d36:	6979      	ldr	r1, [r7, #20]
 8004d38:	69f8      	ldr	r0, [r7, #28]
 8004d3a:	f018 fc2f 	bl	801d59c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	3310      	adds	r3, #16
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	6978      	ldr	r0, [r7, #20]
 8004d48:	4798      	blx	r3
    newTransition->invalidate();
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	3314      	adds	r3, #20
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	6978      	ldr	r0, [r7, #20]
 8004d54:	4798      	blx	r3
}
 8004d56:	bf00      	nop
    return newPresenter;
 8004d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	373c      	adds	r7, #60	; 0x3c
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd90      	pop	{r4, r7, pc}
 8004d62:	bf00      	nop
 8004d64:	0802dbd0 	.word	0x0802dbd0
 8004d68:	0802def0 	.word	0x0802def0
 8004d6c:	0802dd60 	.word	0x0802dd60
 8004d70:	0802dda8 	.word	0x0802dda8
 8004d74:	0802de4c 	.word	0x0802de4c

08004d78 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8004d78:	b590      	push	{r4, r7, lr}
 8004d7a:	b08f      	sub	sp, #60	; 0x3c
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	607a      	str	r2, [r7, #4]
 8004d84:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	689a      	ldr	r2, [r3, #8]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	3320      	adds	r3, #32
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4610      	mov	r0, r2
 8004d96:	4798      	blx	r3
 8004d98:	4603      	mov	r3, r0
 8004d9a:	f5b3 7f77 	cmp.w	r3, #988	; 0x3dc
 8004d9e:	d205      	bcs.n	8004dac <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8004da0:	4b7d      	ldr	r3, [pc, #500]	; (8004f98 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 8004da2:	4a7e      	ldr	r2, [pc, #504]	; (8004f9c <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004da4:	21a3      	movs	r1, #163	; 0xa3
 8004da6:	487e      	ldr	r0, [pc, #504]	; (8004fa0 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004da8:	f027 fc60 	bl	802c66c <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685a      	ldr	r2, [r3, #4]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	3320      	adds	r3, #32
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4610      	mov	r0, r2
 8004dbc:	4798      	blx	r3
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b0f      	cmp	r3, #15
 8004dc2:	d805      	bhi.n	8004dd0 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 8004dc4:	4b77      	ldr	r3, [pc, #476]	; (8004fa4 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004dc6:	4a75      	ldr	r2, [pc, #468]	; (8004f9c <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004dc8:	21a4      	movs	r1, #164	; 0xa4
 8004dca:	4875      	ldr	r0, [pc, #468]	; (8004fa0 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004dcc:	f027 fc4e 	bl	802c66c <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	68da      	ldr	r2, [r3, #12]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	3320      	adds	r3, #32
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4610      	mov	r0, r2
 8004de0:	4798      	blx	r3
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b37      	cmp	r3, #55	; 0x37
 8004de6:	d805      	bhi.n	8004df4 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7c>
 8004de8:	4b6f      	ldr	r3, [pc, #444]	; (8004fa8 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8004dea:	4a6c      	ldr	r2, [pc, #432]	; (8004f9c <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004dec:	21a5      	movs	r1, #165	; 0xa5
 8004dee:	486c      	ldr	r0, [pc, #432]	; (8004fa0 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004df0:	f027 fc3c 	bl	802c66c <__assert_func>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	627b      	str	r3, [r7, #36]	; 0x24
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8004e00:	f016 fdc8 	bl	801b994 <_ZN8touchgfx11Application11getInstanceEv>
 8004e04:	4603      	mov	r3, r0
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7ff fa8f 	bl	800432a <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8004e0c:	6a3b      	ldr	r3, [r7, #32]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d008      	beq.n	8004e26 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xae>
        (*currentTrans)->tearDown();
 8004e14:	6a3b      	ldr	r3, [r7, #32]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	6a3b      	ldr	r3, [r7, #32]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	330c      	adds	r3, #12
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4610      	mov	r0, r2
 8004e24:	4798      	blx	r3
    if (*currentTrans)
 8004e26:	6a3b      	ldr	r3, [r7, #32]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d007      	beq.n	8004e3e <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc6>
        (*currentTrans)->~Transition();
 8004e2e:	6a3b      	ldr	r3, [r7, #32]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	6a3b      	ldr	r3, [r7, #32]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4610      	mov	r0, r2
 8004e3c:	4798      	blx	r3
    if (*currentScreen)
 8004e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d008      	beq.n	8004e58 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
        (*currentScreen)->tearDownScreen();
 8004e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	3314      	adds	r3, #20
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4610      	mov	r0, r2
 8004e56:	4798      	blx	r3
    if (*currentPresenter)
 8004e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d008      	beq.n	8004e72 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfa>
        (*currentPresenter)->deactivate();
 8004e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	3304      	adds	r3, #4
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4610      	mov	r0, r2
 8004e70:	4798      	blx	r3
    if (*currentScreen)
 8004e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d007      	beq.n	8004e8a <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x112>
        (*currentScreen)->~Screen();
 8004e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4610      	mov	r0, r2
 8004e88:	4798      	blx	r3
    if (*currentPresenter)
 8004e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d008      	beq.n	8004ea4 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
        (*currentPresenter)->~Presenter();
 8004e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	3308      	adds	r3, #8
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4610      	mov	r0, r2
 8004ea2:	4798      	blx	r3
}
 8004ea4:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	2100      	movs	r1, #0
 8004eac:	4618      	mov	r0, r3
 8004eae:	f000 f94d 	bl	800514c <_ZN8touchgfx17AbstractPartition2atINS_14WipeTransitionILNS_9DirectionE0EEEEERT_t>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	2038      	movs	r0, #56	; 0x38
 8004eb8:	f7ff f84e 	bl	8003f58 <_ZnwjPv>
 8004ebc:	4604      	mov	r4, r0
 8004ebe:	2114      	movs	r1, #20
 8004ec0:	4620      	mov	r0, r4
 8004ec2:	f000 f957 	bl	8005174 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EEC1Eh>
 8004ec6:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	2100      	movs	r1, #0
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f000 f992 	bl	80051f8 <_ZN8touchgfx17AbstractPartition2atI20Localize_AnomalyViewEERT_t>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	f44f 7077 	mov.w	r0, #988	; 0x3dc
 8004edc:	f7ff f83c 	bl	8003f58 <_ZnwjPv>
 8004ee0:	4604      	mov	r4, r0
 8004ee2:	4620      	mov	r0, r4
 8004ee4:	f005 fcba 	bl	800a85c <_ZN20Localize_AnomalyViewC1Ev>
 8004ee8:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	2100      	movs	r1, #0
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f000 f994 	bl	800521e <_ZN8touchgfx17AbstractPartition2atI25Localize_AnomalyPresenterEERT_t>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	4619      	mov	r1, r3
 8004efa:	2010      	movs	r0, #16
 8004efc:	f7ff f82c 	bl	8003f58 <_ZnwjPv>
 8004f00:	4604      	mov	r4, r0
 8004f02:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f04:	4620      	mov	r0, r4
 8004f06:	f005 fc51 	bl	800a7ac <_ZN25Localize_AnomalyPresenterC1ER20Localize_AnomalyView>
 8004f0a:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f10:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f16:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f1c:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8004f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d002      	beq.n	8004f2a <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 8004f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f26:	3304      	adds	r3, #4
 8004f28:	e000      	b.n	8004f2c <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004f30:	f7ff fafc 	bl	800452c <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8004f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f36:	3304      	adds	r3, #4
 8004f38:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7ff fb11 	bl	8004562 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8004f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f44:	4618      	mov	r0, r3
 8004f46:	f000 f97d 	bl	8005244 <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterE4bindERS1_>
 8004f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4c:	61fb      	str	r3, [r7, #28]
 8004f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f50:	61bb      	str	r3, [r7, #24]
 8004f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f54:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	330c      	adds	r3, #12
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	69f8      	ldr	r0, [r7, #28]
 8004f60:	4798      	blx	r3
    newPresenter->activate();
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	69b8      	ldr	r0, [r7, #24]
 8004f6a:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8004f6c:	6979      	ldr	r1, [r7, #20]
 8004f6e:	69f8      	ldr	r0, [r7, #28]
 8004f70:	f018 fb14 	bl	801d59c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	3310      	adds	r3, #16
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	6978      	ldr	r0, [r7, #20]
 8004f7e:	4798      	blx	r3
    newTransition->invalidate();
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	3314      	adds	r3, #20
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6978      	ldr	r0, [r7, #20]
 8004f8a:	4798      	blx	r3
}
 8004f8c:	bf00      	nop
    return newPresenter;
 8004f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	373c      	adds	r7, #60	; 0x3c
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd90      	pop	{r4, r7, pc}
 8004f98:	0802dbd0 	.word	0x0802dbd0
 8004f9c:	0802e004 	.word	0x0802e004
 8004fa0:	0802dd60 	.word	0x0802dd60
 8004fa4:	0802dda8 	.word	0x0802dda8
 8004fa8:	0802de4c 	.word	0x0802de4c

08004fac <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	3324      	adds	r3, #36	; 0x24
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	887a      	ldrh	r2, [r7, #2]
 8004fc2:	4611      	mov	r1, r2
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	4798      	blx	r3
 8004fc8:	4603      	mov	r3, r0
    }
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3708      	adds	r7, #8
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>:
    T& at(const uint16_t index)
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b082      	sub	sp, #8
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
 8004fda:	460b      	mov	r3, r1
 8004fdc:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	3324      	adds	r3, #36	; 0x24
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	887a      	ldrh	r2, [r7, #2]
 8004fe8:	4611      	mov	r1, r2
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	4798      	blx	r3
 8004fee:	4603      	mov	r3, r0
    }
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3708      	adds	r7, #8
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>:
    T& at(const uint16_t index)
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	460b      	mov	r3, r1
 8005002:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	3324      	adds	r3, #36	; 0x24
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	887a      	ldrh	r2, [r7, #2]
 800500e:	4611      	mov	r1, r2
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	4798      	blx	r3
 8005014:	4603      	mov	r3, r0
    }
 8005016:	4618      	mov	r0, r3
 8005018:	3708      	adds	r7, #8
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 800501e:	b480      	push	{r7}
 8005020:	b083      	sub	sp, #12
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
 8005026:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	683a      	ldr	r2, [r7, #0]
 800502c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800502e:	bf00      	nop
 8005030:	370c      	adds	r7, #12
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr

0800503a <_ZN8touchgfx17AbstractPartition2atINS_14WipeTransitionILNS_9DirectionE1EEEEERT_t>:
    T& at(const uint16_t index)
 800503a:	b580      	push	{r7, lr}
 800503c:	b082      	sub	sp, #8
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
 8005042:	460b      	mov	r3, r1
 8005044:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	3324      	adds	r3, #36	; 0x24
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	887a      	ldrh	r2, [r7, #2]
 8005050:	4611      	mov	r1, r2
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	4798      	blx	r3
 8005056:	4603      	mov	r3, r0
    }
 8005058:	4618      	mov	r0, r3
 800505a:	3708      	adds	r7, #8
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <_ZN8touchgfx10Transition13FullSolidRectC1Ev>:
    class FullSolidRect : public Widget
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4618      	mov	r0, r3
 800506c:	f7ff fa88 	bl	8004580 <_ZN8touchgfx6WidgetC1Ev>
 8005070:	4a03      	ldr	r2, [pc, #12]	; (8005080 <_ZN8touchgfx10Transition13FullSolidRectC1Ev+0x20>)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	601a      	str	r2, [r3, #0]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4618      	mov	r0, r3
 800507a:	3708      	adds	r7, #8
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	0802eca4 	.word	0x0802eca4

08005084 <_ZN8touchgfx10Transition13FullSolidRectD1Ev>:
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	4a05      	ldr	r2, [pc, #20]	; (80050a4 <_ZN8touchgfx10Transition13FullSolidRectD1Ev+0x20>)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	601a      	str	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4618      	mov	r0, r3
 8005096:	f7ff fa85 	bl	80045a4 <_ZN8touchgfx6WidgetD1Ev>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4618      	mov	r0, r3
 800509e:	3708      	adds	r7, #8
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	0802eca4 	.word	0x0802eca4

080050a8 <_ZN8touchgfx10Transition13FullSolidRectD0Ev>:
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f7ff ffe7 	bl	8005084 <_ZN8touchgfx10Transition13FullSolidRectD1Ev>
 80050b6:	2128      	movs	r1, #40	; 0x28
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f027 faa8 	bl	802c60e <_ZdlPvj>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4618      	mov	r0, r3
 80050c2:	3708      	adds	r7, #8
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EEC1Eh>:
    /**
     * Initializes a new instance of the WipeTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps in the transition animation.
     */
    WipeTransition(const uint8_t transitionSteps = 20)
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af02      	add	r7, sp, #8
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	460b      	mov	r3, r1
 80050d2:	70fb      	strb	r3, [r7, #3]
        : Transition(),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0),
          solid()
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7ff f974 	bl	80043c4 <_ZN8touchgfx10TransitionC1Ev>
 80050dc:	4a18      	ldr	r2, [pc, #96]	; (8005140 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EEC1Eh+0x78>)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	601a      	str	r2, [r3, #0]
          animationSteps(transitionSteps),
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	78fa      	ldrb	r2, [r7, #3]
 80050e6:	725a      	strb	r2, [r3, #9]
          animationCounter(0),
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	729a      	strb	r2, [r3, #10]
          calculatedValue(0),
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	81da      	strh	r2, [r3, #14]
          solid()
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	3310      	adds	r3, #16
 80050f8:	2228      	movs	r2, #40	; 0x28
 80050fa:	2100      	movs	r1, #0
 80050fc:	4618      	mov	r0, r3
 80050fe:	f027 fcba 	bl	802ca76 <memset>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	3310      	adds	r3, #16
 8005106:	4618      	mov	r0, r3
 8005108:	f7ff ffaa 	bl	8005060 <_ZN8touchgfx10Transition13FullSolidRectC1Ev>
        case WEST:
            targetValue = HAL::DISPLAY_WIDTH;
            break;
        case NORTH:
        case SOUTH:
            targetValue = HAL::DISPLAY_HEIGHT;
 800510c:	4b0d      	ldr	r3, [pc, #52]	; (8005144 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EEC1Eh+0x7c>)
 800510e:	881b      	ldrh	r3, [r3, #0]
 8005110:	b21a      	sxth	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	819a      	strh	r2, [r3, #12]
            break;
 8005116:	bf00      	nop
        }

        // Ensure that the solid area covers the entire screen
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f103 0010 	add.w	r0, r3, #16
 800511e:	4b0a      	ldr	r3, [pc, #40]	; (8005148 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EEC1Eh+0x80>)
 8005120:	881b      	ldrh	r3, [r3, #0]
 8005122:	b21a      	sxth	r2, r3
 8005124:	4b07      	ldr	r3, [pc, #28]	; (8005144 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EEC1Eh+0x7c>)
 8005126:	881b      	ldrh	r3, [r3, #0]
 8005128:	b21b      	sxth	r3, r3
 800512a:	9300      	str	r3, [sp, #0]
 800512c:	4613      	mov	r3, r2
 800512e:	2200      	movs	r2, #0
 8005130:	2100      	movs	r1, #0
 8005132:	f7fe ffab 	bl	800408c <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4618      	mov	r0, r3
 800513a:	3708      	adds	r7, #8
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	0802ec14 	.word	0x0802ec14
 8005144:	2400bae6 	.word	0x2400bae6
 8005148:	2400bae4 	.word	0x2400bae4

0800514c <_ZN8touchgfx17AbstractPartition2atINS_14WipeTransitionILNS_9DirectionE0EEEEERT_t>:
    T& at(const uint16_t index)
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	460b      	mov	r3, r1
 8005156:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	3324      	adds	r3, #36	; 0x24
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	887a      	ldrh	r2, [r7, #2]
 8005162:	4611      	mov	r1, r2
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	4798      	blx	r3
 8005168:	4603      	mov	r3, r0
    }
 800516a:	4618      	mov	r0, r3
 800516c:	3708      	adds	r7, #8
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
	...

08005174 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EEC1Eh>:
    WipeTransition(const uint8_t transitionSteps = 20)
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af02      	add	r7, sp, #8
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	460b      	mov	r3, r1
 800517e:	70fb      	strb	r3, [r7, #3]
          solid()
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4618      	mov	r0, r3
 8005184:	f7ff f91e 	bl	80043c4 <_ZN8touchgfx10TransitionC1Ev>
 8005188:	4a18      	ldr	r2, [pc, #96]	; (80051ec <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EEC1Eh+0x78>)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	601a      	str	r2, [r3, #0]
          animationSteps(transitionSteps),
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	78fa      	ldrb	r2, [r7, #3]
 8005192:	725a      	strb	r2, [r3, #9]
          animationCounter(0),
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	729a      	strb	r2, [r3, #10]
          calculatedValue(0),
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	81da      	strh	r2, [r3, #14]
          solid()
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	3310      	adds	r3, #16
 80051a4:	2228      	movs	r2, #40	; 0x28
 80051a6:	2100      	movs	r1, #0
 80051a8:	4618      	mov	r0, r3
 80051aa:	f027 fc64 	bl	802ca76 <memset>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	3310      	adds	r3, #16
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7ff ff54 	bl	8005060 <_ZN8touchgfx10Transition13FullSolidRectC1Ev>
            targetValue = HAL::DISPLAY_HEIGHT;
 80051b8:	4b0d      	ldr	r3, [pc, #52]	; (80051f0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EEC1Eh+0x7c>)
 80051ba:	881b      	ldrh	r3, [r3, #0]
 80051bc:	b21a      	sxth	r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	819a      	strh	r2, [r3, #12]
            break;
 80051c2:	bf00      	nop
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f103 0010 	add.w	r0, r3, #16
 80051ca:	4b0a      	ldr	r3, [pc, #40]	; (80051f4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EEC1Eh+0x80>)
 80051cc:	881b      	ldrh	r3, [r3, #0]
 80051ce:	b21a      	sxth	r2, r3
 80051d0:	4b07      	ldr	r3, [pc, #28]	; (80051f0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EEC1Eh+0x7c>)
 80051d2:	881b      	ldrh	r3, [r3, #0]
 80051d4:	b21b      	sxth	r3, r3
 80051d6:	9300      	str	r3, [sp, #0]
 80051d8:	4613      	mov	r3, r2
 80051da:	2200      	movs	r2, #0
 80051dc:	2100      	movs	r1, #0
 80051de:	f7fe ff55 	bl	800408c <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4618      	mov	r0, r3
 80051e6:	3708      	adds	r7, #8
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	0802ec38 	.word	0x0802ec38
 80051f0:	2400bae6 	.word	0x2400bae6
 80051f4:	2400bae4 	.word	0x2400bae4

080051f8 <_ZN8touchgfx17AbstractPartition2atI20Localize_AnomalyViewEERT_t>:
    T& at(const uint16_t index)
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	460b      	mov	r3, r1
 8005202:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	3324      	adds	r3, #36	; 0x24
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	887a      	ldrh	r2, [r7, #2]
 800520e:	4611      	mov	r1, r2
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	4798      	blx	r3
 8005214:	4603      	mov	r3, r0
    }
 8005216:	4618      	mov	r0, r3
 8005218:	3708      	adds	r7, #8
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <_ZN8touchgfx17AbstractPartition2atI25Localize_AnomalyPresenterEERT_t>:
    T& at(const uint16_t index)
 800521e:	b580      	push	{r7, lr}
 8005220:	b082      	sub	sp, #8
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
 8005226:	460b      	mov	r3, r1
 8005228:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	3324      	adds	r3, #36	; 0x24
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	887a      	ldrh	r2, [r7, #2]
 8005234:	4611      	mov	r1, r2
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	4798      	blx	r3
 800523a:	4603      	mov	r3, r0
    }
 800523c:	4618      	mov	r0, r3
 800523e:	3708      	adds	r7, #8
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterE4bindERS1_>:
    void bind(T& newPresenter)
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
        presenter = &newPresenter;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	683a      	ldr	r2, [r7, #0]
 8005252:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8005254:	bf00      	nop
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EED1Ev>:
class WipeTransition : public Transition
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	4a08      	ldr	r2, [pc, #32]	; (800528c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EED1Ev+0x2c>)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	601a      	str	r2, [r3, #0]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	3310      	adds	r3, #16
 8005272:	4618      	mov	r0, r3
 8005274:	f7ff ff06 	bl	8005084 <_ZN8touchgfx10Transition13FullSolidRectD1Ev>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4618      	mov	r0, r3
 800527c:	f7ff f8b8 	bl	80043f0 <_ZN8touchgfx10TransitionD1Ev>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4618      	mov	r0, r3
 8005284:	3708      	adds	r7, #8
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	0802ec14 	.word	0x0802ec14

08005290 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EED0Ev>:
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f7ff ffe1 	bl	8005260 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EED1Ev>
 800529e:	2138      	movs	r1, #56	; 0x38
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f027 f9b4 	bl	802c60e <_ZdlPvj>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4618      	mov	r0, r3
 80052aa:	3708      	adds	r7, #8
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EED1Ev>:
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	4a08      	ldr	r2, [pc, #32]	; (80052dc <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EED1Ev+0x2c>)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	601a      	str	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	3310      	adds	r3, #16
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7ff fede 	bl	8005084 <_ZN8touchgfx10Transition13FullSolidRectD1Ev>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7ff f890 	bl	80043f0 <_ZN8touchgfx10TransitionD1Ev>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4618      	mov	r0, r3
 80052d4:	3708      	adds	r7, #8
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	0802ec38 	.word	0x0802ec38

080052e0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EED0Ev>:
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f7ff ffe1 	bl	80052b0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EED1Ev>
 80052ee:	2138      	movs	r1, #56	; 0x38
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f027 f98c 	bl	802c60e <_ZdlPvj>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4618      	mov	r0, r3
 80052fa:	3708      	adds	r7, #8
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <_ZN8touchgfx12NoTransitionD1Ev>:
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	4a05      	ldr	r2, [pc, #20]	; (8005320 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	601a      	str	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4618      	mov	r0, r3
 8005312:	f7ff f86d 	bl	80043f0 <_ZN8touchgfx10TransitionD1Ev>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4618      	mov	r0, r3
 800531a:	3708      	adds	r7, #8
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	0802ec5c 	.word	0x0802ec5c

08005324 <_ZN8touchgfx12NoTransitionD0Ev>:
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f7ff ffe7 	bl	8005300 <_ZN8touchgfx12NoTransitionD1Ev>
 8005332:	210c      	movs	r1, #12
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f027 f96a 	bl	802c60e <_ZdlPvj>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4618      	mov	r0, r3
 800533e:	3708      	adds	r7, #8
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv>:

    /**
     * Handles the tick event when transitioning. It uncovers and
     * invalidates increasing parts of the new screen elements.
     */
    virtual void handleTickEvent()
 8005344:	b580      	push	{r7, lr}
 8005346:	b08e      	sub	sp, #56	; 0x38
 8005348:	af02      	add	r7, sp, #8
 800534a:	6078      	str	r0, [r7, #4]
    {
        Transition::handleTickEvent();
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4618      	mov	r0, r3
 8005350:	f7ff f86e 	bl	8004430 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	7a9b      	ldrb	r3, [r3, #10]
 8005358:	3301      	adds	r3, #1
 800535a:	b2da      	uxtb	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	729a      	strb	r2, [r3, #10]

        // Calculate new position or stop animation
        if (animationCounter > animationSteps)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	7a9a      	ldrb	r2, [r3, #10]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	7a5b      	ldrb	r3, [r3, #9]
 8005368:	429a      	cmp	r2, r3
 800536a:	d906      	bls.n	800537a <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x36>
        {
            // Final step: stop the animation
            done = true;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	729a      	strb	r2, [r3, #10]
            return;
 8005378:	e079      	b.n	800546e <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x12a>
        }

        // Calculate value in [0;targetValue]
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	7a9b      	ldrb	r3, [r3, #10]
 800537e:	b298      	uxth	r0, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	7a5b      	ldrb	r3, [r3, #9]
 800538a:	b29b      	uxth	r3, r3
 800538c:	2100      	movs	r1, #0
 800538e:	f018 f90b 	bl	801d5a8 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8005392:	4603      	mov	r3, r0
 8005394:	461a      	mov	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	81da      	strh	r2, [r3, #14]

        // Note: Result of "calculatedValue & 1" is compiler dependent for negative values of calculatedValue
        if ((calculatedValue % 2) != 0)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d011      	beq.n	80053d0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x8c>
        {
            // Optimization: calculatedValue is odd, add 1/-1 to move drawables modulo 32 bits in framebuffer
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 80053ba:	2a00      	cmp	r2, #0
 80053bc:	dd01      	ble.n	80053c2 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x7e>
 80053be:	2201      	movs	r2, #1
 80053c0:	e001      	b.n	80053c6 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x82>
 80053c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80053c6:	4413      	add	r3, r2
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	b21a      	sxth	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	81da      	strh	r2, [r3, #14]
                break;
            }
        case SOUTH:
            {
                // Cover must have height of remaining part
                const uint16_t prevSolidHeight = solid.getHeight();
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	3310      	adds	r3, #16
 80053d4:	4618      	mov	r0, r3
 80053d6:	f7fe fe87 	bl	80040e8 <_ZNK8touchgfx8Drawable9getHeightEv>
 80053da:	4603      	mov	r3, r0
 80053dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
                solid.setHeight(HAL::DISPLAY_HEIGHT - calculatedValue);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f103 0010 	add.w	r0, r3, #16
 80053e4:	4b23      	ldr	r3, [pc, #140]	; (8005474 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x130>)
 80053e6:	881a      	ldrh	r2, [r3, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	b21b      	sxth	r3, r3
 80053f6:	4619      	mov	r1, r3
 80053f8:	f7fe fece 	bl	8004198 <_ZN8touchgfx8Drawable9setHeightEs>

                // Invalidate the uncovered part
                const uint16_t delta = prevSolidHeight - solid.getHeight();
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	3310      	adds	r3, #16
 8005400:	4618      	mov	r0, r3
 8005402:	f7fe fe71 	bl	80040e8 <_ZNK8touchgfx8Drawable9getHeightEv>
 8005406:	4603      	mov	r3, r0
 8005408:	b29b      	uxth	r3, r3
 800540a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	85bb      	strh	r3, [r7, #44]	; 0x2c
                Rect r(0, solid.getHeight(), HAL::DISPLAY_WIDTH, delta);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	3310      	adds	r3, #16
 8005414:	4618      	mov	r0, r3
 8005416:	f7fe fe67 	bl	80040e8 <_ZNK8touchgfx8Drawable9getHeightEv>
 800541a:	4603      	mov	r3, r0
 800541c:	4619      	mov	r1, r3
 800541e:	4b16      	ldr	r3, [pc, #88]	; (8005478 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x134>)
 8005420:	881b      	ldrh	r3, [r3, #0]
 8005422:	b21a      	sxth	r2, r3
 8005424:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8005428:	f107 000c 	add.w	r0, r7, #12
 800542c:	9300      	str	r3, [sp, #0]
 800542e:	4613      	mov	r3, r2
 8005430:	460a      	mov	r2, r1
 8005432:	2100      	movs	r1, #0
 8005434:	f7fe fd9c 	bl	8003f70 <_ZN8touchgfx4RectC1Essss>
                screenContainer->invalidateRect(r);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	4618      	mov	r0, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	3310      	adds	r3, #16
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f107 020c 	add.w	r2, r7, #12
 800544c:	4611      	mov	r1, r2
 800544e:	4798      	blx	r3
                break;
 8005450:	bf00      	nop
        }

        // The WipeTransition only draws to parts of the non-TFT
        // framebuffer. To avoid glitches in Double buffering mode
        // both framebuffers must be made identical.
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	7a9b      	ldrb	r3, [r3, #10]
 8005456:	2b01      	cmp	r3, #1
 8005458:	d109      	bne.n	800546e <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x12a>
 800545a:	4b08      	ldr	r3, [pc, #32]	; (800547c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x138>)
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d005      	beq.n	800546e <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x12a>
        {
            // Synchronize framebuffers
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 8005462:	f016 fa97 	bl	801b994 <_ZN8touchgfx11Application11getInstanceEv>
 8005466:	4603      	mov	r3, r0
 8005468:	4618      	mov	r0, r3
 800546a:	f016 fa99 	bl	801b9a0 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>
        }
    }
 800546e:	3730      	adds	r7, #48	; 0x30
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	2400bae6 	.word	0x2400bae6
 8005478:	2400bae4 	.word	0x2400bae4
 800547c:	2400baee 	.word	0x2400baee

08005480 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE8tearDownEv>:

    virtual void tearDown()
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
    {
        screenContainer->remove(solid);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6858      	ldr	r0, [r3, #4]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	3364      	adds	r3, #100	; 0x64
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	3210      	adds	r2, #16
 800549a:	4611      	mov	r1, r2
 800549c:	4798      	blx	r3
    }
 800549e:	bf00      	nop
 80054a0:	3708      	adds	r7, #8
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}

080054a6 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE4initEv>:

    virtual void init()
 80054a6:	b580      	push	{r7, lr}
 80054a8:	b082      	sub	sp, #8
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
    {
        Transition::init();
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7fe ffd1 	bl	8004458 <_ZN8touchgfx10Transition4initEv>
        // Add the solid (and not-drawing-anything) widget on top to cover the other widgets
        screenContainer->add(solid);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6858      	ldr	r0, [r3, #4]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	3360      	adds	r3, #96	; 0x60
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	3210      	adds	r2, #16
 80054c8:	4611      	mov	r1, r2
 80054ca:	4798      	blx	r3
    }
 80054cc:	bf00      	nop
 80054ce:	3708      	adds	r7, #8
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE10invalidateEv>:

    /**
     * Wipe transition does not require an invalidation. Invalidation
     * is handled by the class. Do no invalidation initially.
     */
    virtual void invalidate()
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
    {
    }
 80054dc:	bf00      	nop
 80054de:	370c      	adds	r7, #12
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv>:
    virtual void handleTickEvent()
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b08e      	sub	sp, #56	; 0x38
 80054ec:	af02      	add	r7, sp, #8
 80054ee:	6078      	str	r0, [r7, #4]
        Transition::handleTickEvent();
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7fe ff9c 	bl	8004430 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	7a9b      	ldrb	r3, [r3, #10]
 80054fc:	3301      	adds	r3, #1
 80054fe:	b2da      	uxtb	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	729a      	strb	r2, [r3, #10]
        if (animationCounter > animationSteps)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	7a9a      	ldrb	r2, [r3, #10]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	7a5b      	ldrb	r3, [r3, #9]
 800550c:	429a      	cmp	r2, r3
 800550e:	d906      	bls.n	800551e <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x36>
            done = true;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	729a      	strb	r2, [r3, #10]
            return;
 800551c:	e07a      	b.n	8005614 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x12c>
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	7a9b      	ldrb	r3, [r3, #10]
 8005522:	b298      	uxth	r0, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	7a5b      	ldrb	r3, [r3, #9]
 800552e:	b29b      	uxth	r3, r3
 8005530:	2100      	movs	r1, #0
 8005532:	f018 f839 	bl	801d5a8 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8005536:	4603      	mov	r3, r0
 8005538:	461a      	mov	r2, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	81da      	strh	r2, [r3, #14]
        if ((calculatedValue % 2) != 0)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005544:	b29b      	uxth	r3, r3
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	b29b      	uxth	r3, r3
 800554c:	2b00      	cmp	r3, #0
 800554e:	d011      	beq.n	8005574 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x8c>
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005556:	b29b      	uxth	r3, r3
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 800555e:	2a00      	cmp	r2, #0
 8005560:	dd01      	ble.n	8005566 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x7e>
 8005562:	2201      	movs	r2, #1
 8005564:	e001      	b.n	800556a <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x82>
 8005566:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800556a:	4413      	add	r3, r2
 800556c:	b29b      	uxth	r3, r3
 800556e:	b21a      	sxth	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	81da      	strh	r2, [r3, #14]
                const uint16_t prevSolidPos = solid.getY();
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	3310      	adds	r3, #16
 8005578:	4618      	mov	r0, r3
 800557a:	f7fe fda8 	bl	80040ce <_ZNK8touchgfx8Drawable4getYEv>
 800557e:	4603      	mov	r3, r0
 8005580:	85fb      	strh	r3, [r7, #46]	; 0x2e
                solid.setHeight(HAL::DISPLAY_HEIGHT - calculatedValue);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f103 0010 	add.w	r0, r3, #16
 8005588:	4b24      	ldr	r3, [pc, #144]	; (800561c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x134>)
 800558a:	881a      	ldrh	r2, [r3, #0]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005592:	b29b      	uxth	r3, r3
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	b29b      	uxth	r3, r3
 8005598:	b21b      	sxth	r3, r3
 800559a:	4619      	mov	r1, r3
 800559c:	f7fe fdfc 	bl	8004198 <_ZN8touchgfx8Drawable9setHeightEs>
                solid.setY(calculatedValue);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f103 0210 	add.w	r2, r3, #16
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80055ac:	4619      	mov	r1, r3
 80055ae:	4610      	mov	r0, r2
 80055b0:	f7fe fdb6 	bl	8004120 <_ZN8touchgfx8Drawable4setYEs>
                const uint16_t delta = calculatedValue - prevSolidPos;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	85bb      	strh	r3, [r7, #44]	; 0x2c
                Rect r(0, prevSolidPos, HAL::DISPLAY_WIDTH, delta);
 80055c2:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 80055c6:	4b16      	ldr	r3, [pc, #88]	; (8005620 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x138>)
 80055c8:	881b      	ldrh	r3, [r3, #0]
 80055ca:	b219      	sxth	r1, r3
 80055cc:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80055d0:	f107 0014 	add.w	r0, r7, #20
 80055d4:	9300      	str	r3, [sp, #0]
 80055d6:	460b      	mov	r3, r1
 80055d8:	2100      	movs	r1, #0
 80055da:	f7fe fcc9 	bl	8003f70 <_ZN8touchgfx4RectC1Essss>
                screenContainer->invalidateRect(r);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	4618      	mov	r0, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	3310      	adds	r3, #16
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f107 0214 	add.w	r2, r7, #20
 80055f2:	4611      	mov	r1, r2
 80055f4:	4798      	blx	r3
                break;
 80055f6:	bf00      	nop
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	7a9b      	ldrb	r3, [r3, #10]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d109      	bne.n	8005614 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x12c>
 8005600:	4b08      	ldr	r3, [pc, #32]	; (8005624 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x13c>)
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d005      	beq.n	8005614 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x12c>
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 8005608:	f016 f9c4 	bl	801b994 <_ZN8touchgfx11Application11getInstanceEv>
 800560c:	4603      	mov	r3, r0
 800560e:	4618      	mov	r0, r3
 8005610:	f016 f9c6 	bl	801b9a0 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>
    }
 8005614:	3730      	adds	r7, #48	; 0x30
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	2400bae6 	.word	0x2400bae6
 8005620:	2400bae4 	.word	0x2400bae4
 8005624:	2400baee 	.word	0x2400baee

08005628 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE8tearDownEv>:
    virtual void tearDown()
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
        screenContainer->remove(solid);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6858      	ldr	r0, [r3, #4]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	3364      	adds	r3, #100	; 0x64
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	3210      	adds	r2, #16
 8005642:	4611      	mov	r1, r2
 8005644:	4798      	blx	r3
    }
 8005646:	bf00      	nop
 8005648:	3708      	adds	r7, #8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE4initEv>:
    virtual void init()
 800564e:	b580      	push	{r7, lr}
 8005650:	b082      	sub	sp, #8
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
        Transition::init();
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4618      	mov	r0, r3
 800565a:	f7fe fefd 	bl	8004458 <_ZN8touchgfx10Transition4initEv>
        screenContainer->add(solid);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6858      	ldr	r0, [r3, #4]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	3360      	adds	r3, #96	; 0x60
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	3210      	adds	r2, #16
 8005670:	4611      	mov	r1, r2
 8005672:	4798      	blx	r3
    }
 8005674:	bf00      	nop
 8005676:	3708      	adds	r7, #8
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE10invalidateEv>:
    virtual void invalidate()
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
    }
 8005684:	bf00      	nop
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 800569c:	4618      	mov	r0, r3
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 80056b4:	4618      	mov	r0, r3
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b08e      	sub	sp, #56	; 0x38
 80056c4:	af0a      	add	r7, sp, #40	; 0x28
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	4611      	mov	r1, r2
 80056cc:	461a      	mov	r2, r3
 80056ce:	460b      	mov	r3, r1
 80056d0:	80fb      	strh	r3, [r7, #6]
 80056d2:	4613      	mov	r3, r2
 80056d4:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 80056d6:	68f8      	ldr	r0, [r7, #12]
 80056d8:	88b9      	ldrh	r1, [r7, #4]
 80056da:	88fa      	ldrh	r2, [r7, #6]
 80056dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80056e0:	9308      	str	r3, [sp, #32]
 80056e2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80056e4:	9307      	str	r3, [sp, #28]
 80056e6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80056ea:	9306      	str	r3, [sp, #24]
 80056ec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80056f0:	9305      	str	r3, [sp, #20]
 80056f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80056f6:	9304      	str	r3, [sp, #16]
 80056f8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80056fc:	9303      	str	r3, [sp, #12]
 80056fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005702:	9302      	str	r3, [sp, #8]
 8005704:	7f3b      	ldrb	r3, [r7, #28]
 8005706:	9301      	str	r3, [sp, #4]
 8005708:	8b3b      	ldrh	r3, [r7, #24]
 800570a:	9300      	str	r3, [sp, #0]
 800570c:	460b      	mov	r3, r1
 800570e:	68b9      	ldr	r1, [r7, #8]
 8005710:	f017 fad8 	bl	801ccc4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8005714:	4a09      	ldr	r2, [pc, #36]	; (800573c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	601a      	str	r2, [r3, #0]
      glyphData(glyphDataInternalFlash),
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800571e:	61da      	str	r2, [r3, #28]
      kerningData(kerningList),
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005724:	621a      	str	r2, [r3, #32]
      gsubTable(gsubData),
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800572a:	625a      	str	r2, [r3, #36]	; 0x24
      arabicTable(formsTable)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005730:	629a      	str	r2, [r3, #40]	; 0x28
{
}
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	4618      	mov	r0, r3
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}
 800573c:	0802ed74 	.word	0x0802ed74

08005740 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	69db      	ldr	r3, [r3, #28]
 800574e:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	889b      	ldrh	r3, [r3, #4]
 8005754:	0adb      	lsrs	r3, r3, #11
 8005756:	b29b      	uxth	r3, r3
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	4413      	add	r3, r2
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4413      	add	r3, r2
}
 8005766:	4618      	mov	r0, r3
 8005768:	3714      	adds	r7, #20
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr

08005772 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8005772:	b480      	push	{r7}
 8005774:	b089      	sub	sp, #36	; 0x24
 8005776:	af00      	add	r7, sp, #0
 8005778:	60f8      	str	r0, [r7, #12]
 800577a:	460b      	mov	r3, r1
 800577c:	607a      	str	r2, [r7, #4]
 800577e:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d003      	beq.n	800578e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	7b1b      	ldrb	r3, [r3, #12]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d101      	bne.n	8005792 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800578e:	2300      	movs	r3, #0
 8005790:	e031      	b.n	80057f6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6a1a      	ldr	r2, [r3, #32]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	7b5b      	ldrb	r3, [r3, #13]
 800579e:	021b      	lsls	r3, r3, #8
 80057a0:	b21b      	sxth	r3, r3
 80057a2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80057a6:	b219      	sxth	r1, r3
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	7adb      	ldrb	r3, [r3, #11]
 80057ac:	b21b      	sxth	r3, r3
 80057ae:	430b      	orrs	r3, r1
 80057b0:	b21b      	sxth	r3, r3
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	4413      	add	r3, r2
 80057b8:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	7b1b      	ldrb	r3, [r3, #12]
 80057be:	837b      	strh	r3, [r7, #26]
 80057c0:	e013      	b.n	80057ea <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x78>
    {
        if (prevChar == kerndata->unicodePrevChar)
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	881b      	ldrh	r3, [r3, #0]
 80057c6:	897a      	ldrh	r2, [r7, #10]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d103      	bne.n	80057d4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x62>
        {
            return kerndata->distance;
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80057d2:	e010      	b.n	80057f6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
        }
        if (prevChar < kerndata->unicodePrevChar)
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	881b      	ldrh	r3, [r3, #0]
 80057d8:	897a      	ldrh	r2, [r7, #10]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d309      	bcc.n	80057f2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80057de:	8b7b      	ldrh	r3, [r7, #26]
 80057e0:	3b01      	subs	r3, #1
 80057e2:	837b      	strh	r3, [r7, #26]
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	3304      	adds	r3, #4
 80057e8:	61fb      	str	r3, [r7, #28]
 80057ea:	8b7b      	ldrh	r3, [r7, #26]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d1e8      	bne.n	80057c2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x50>
 80057f0:	e000      	b.n	80057f4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        {
            break;
 80057f2:	bf00      	nop
        }
    }
    return 0;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3724      	adds	r7, #36	; 0x24
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr

08005802 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 8005802:	b480      	push	{r7}
 8005804:	b083      	sub	sp, #12
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
 800580a:	6039      	str	r1, [r7, #0]
        : color(col)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	683a      	ldr	r2, [r7, #0]
 8005810:	601a      	str	r2, [r3, #0]
    }
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4618      	mov	r0, r3
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	460b      	mov	r3, r1
 800582a:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	887a      	ldrh	r2, [r7, #2]
 8005830:	801a      	strh	r2, [r3, #0]
    {
    }
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4618      	mov	r0, r3
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <_ZN8touchgfx8Drawable12setTouchableEb>:
    void setTouchable(bool touch)
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	460b      	mov	r3, r1
 800584a:	70fb      	strb	r3, [r7, #3]
        touchable = touch;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	78fa      	ldrb	r2, [r7, #3]
 8005850:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 8005854:	bf00      	nop
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <_ZN8touchgfx9ContainerC1Ev>:
 * @see Drawable
 */
class Container : public Drawable
{
public:
    Container()
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
        : Drawable(),
          firstChild(0)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4618      	mov	r0, r3
 800586c:	f7fe fba0 	bl	8003fb0 <_ZN8touchgfx8DrawableC1Ev>
 8005870:	4a05      	ldr	r2, [pc, #20]	; (8005888 <_ZN8touchgfx9ContainerC1Ev+0x28>)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	601a      	str	r2, [r3, #0]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	629a      	str	r2, [r3, #40]	; 0x28
    {
    }
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4618      	mov	r0, r3
 8005880:	3708      	adds	r7, #8
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	0802f3bc 	.word	0x0802f3bc

0800588c <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
    {
 8005894:	4a06      	ldr	r2, [pc, #24]	; (80058b0 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	601a      	str	r2, [r3, #0]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	3304      	adds	r3, #4
 800589e:	4618      	mov	r0, r3
 80058a0:	f001 f896 	bl	80069d0 <_ZN8touchgfx9ContainerD1Ev>
    }
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4618      	mov	r0, r3
 80058a8:	3708      	adds	r7, #8
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	0802fbd4 	.word	0x0802fbd4

080058b4 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b082      	sub	sp, #8
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
    }
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f7ff ffe5 	bl	800588c <_ZN8touchgfx6ScreenD1Ev>
 80058c2:	213c      	movs	r1, #60	; 0x3c
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f026 fea2 	bl	802c60e <_ZdlPvj>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4618      	mov	r0, r3
 80058ce:	3708      	adds	r7, #8
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
    {
    }
 80058dc:	bf00      	nop
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
    {
    }
 80058f0:	bf00      	nop
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
    {
    }
 8005904:	bf00      	nop
 8005906:	370c      	adds	r7, #12
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
    {
    }
 8005918:	bf00      	nop
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	460b      	mov	r3, r1
 800592e:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 8005930:	bf00      	nop
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	3304      	adds	r3, #4
 800594a:	6839      	ldr	r1, [r7, #0]
 800594c:	4618      	mov	r0, r3
 800594e:	f012 f91b 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8005952:	bf00      	nop
 8005954:	3708      	adds	r7, #8
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
	...

0800595c <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4618      	mov	r0, r3
 8005968:	2326      	movs	r3, #38	; 0x26
 800596a:	461a      	mov	r2, r3
 800596c:	2100      	movs	r1, #0
 800596e:	f027 f882 	bl	802ca76 <memset>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4618      	mov	r0, r3
 8005976:	f7fe fe03 	bl	8004580 <_ZN8touchgfx6WidgetC1Ev>
 800597a:	4a09      	ldr	r2, [pc, #36]	; (80059a0 <_ZN8touchgfx3BoxC1Ev+0x44>)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	601a      	str	r2, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	22ff      	movs	r2, #255	; 0xff
 8005984:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	3328      	adds	r3, #40	; 0x28
 800598c:	2100      	movs	r1, #0
 800598e:	4618      	mov	r0, r3
 8005990:	f7ff ff37 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4618      	mov	r0, r3
 8005998:	3708      	adds	r7, #8
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	0802f7e4 	.word	0x0802f7e4

080059a4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	683a      	ldr	r2, [r7, #0]
 80059b2:	629a      	str	r2, [r3, #40]	; 0x28
    }
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
        : Widget(), bitmap(bmp), alpha(255)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4618      	mov	r0, r3
 80059ce:	2326      	movs	r3, #38	; 0x26
 80059d0:	461a      	mov	r2, r3
 80059d2:	2100      	movs	r1, #0
 80059d4:	f027 f84f 	bl	802ca76 <memset>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4618      	mov	r0, r3
 80059dc:	f7fe fdd0 	bl	8004580 <_ZN8touchgfx6WidgetC1Ev>
 80059e0:	4a09      	ldr	r2, [pc, #36]	; (8005a08 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x48>)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	601a      	str	r2, [r3, #0]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	683a      	ldr	r2, [r7, #0]
 80059ea:	8812      	ldrh	r2, [r2, #0]
 80059ec:	84da      	strh	r2, [r3, #38]	; 0x26
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	22ff      	movs	r2, #255	; 0xff
 80059f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        Image::setBitmap(bmp);
 80059f6:	6839      	ldr	r1, [r7, #0]
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f014 fa8e 	bl	8019f1a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4618      	mov	r0, r3
 8005a02:	3708      	adds	r7, #8
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	0802f9b8 	.word	0x0802f9b8

08005a0c <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	4a05      	ldr	r2, [pc, #20]	; (8005a2c <_ZN8touchgfx3BoxD1Ev+0x20>)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	601a      	str	r2, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f7fe fdc1 	bl	80045a4 <_ZN8touchgfx6WidgetD1Ev>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4618      	mov	r0, r3
 8005a26:	3708      	adds	r7, #8
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	0802f7e4 	.word	0x0802f7e4

08005a30 <_ZN8touchgfx3BoxD0Ev>:
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f7ff ffe7 	bl	8005a0c <_ZN8touchgfx3BoxD1Ev>
 8005a3e:	212c      	movs	r1, #44	; 0x2c
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f026 fde4 	bl	802c60e <_ZdlPvj>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3708      	adds	r7, #8
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <_ZN8touchgfx13BoxWithBorderC1Ev>:
 * BoxWithBorder will function just like a Box.
 */
class BoxWithBorder : public Box
{
public:
    BoxWithBorder()
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
        : Box(), borderColor(0), borderSize(0)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7ff ff7e 	bl	800595c <_ZN8touchgfx3BoxC1Ev>
 8005a60:	4a08      	ldr	r2, [pc, #32]	; (8005a84 <_ZN8touchgfx13BoxWithBorderC1Ev+0x34>)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	601a      	str	r2, [r3, #0]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	332c      	adds	r3, #44	; 0x2c
 8005a6a:	2100      	movs	r1, #0
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f7ff fec8 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	861a      	strh	r2, [r3, #48]	; 0x30
    {
    }
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3708      	adds	r7, #8
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	0802f950 	.word	0x0802f950

08005a88 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>:
     *
     * @param  colorBorder The color of the border.
     *
     * @see setColor, getBorderColor, Color::getColorFromRGB
     */
    void setBorderColor(colortype colorBorder)
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
    {
        borderColor = colorBorder;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	683a      	ldr	r2, [r7, #0]
 8005a96:	62da      	str	r2, [r3, #44]	; 0x2c
    }
 8005a98:	bf00      	nop
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>:
     *
     * @param  size The width of the border.
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	460b      	mov	r3, r1
 8005aae:	807b      	strh	r3, [r7, #2]
    {
        borderSize = size;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	887a      	ldrh	r2, [r7, #2]
 8005ab4:	861a      	strh	r2, [r3, #48]	; 0x30
    }
 8005ab6:	bf00      	nop
 8005ab8:	370c      	adds	r7, #12
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
	...

08005ac4 <_ZN8touchgfx9TypedTextC1Et>:
    TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	460b      	mov	r3, r1
 8005ace:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 8005ad0:	4a06      	ldr	r2, [pc, #24]	; (8005aec <_ZN8touchgfx9TypedTextC1Et+0x28>)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	601a      	str	r2, [r3, #0]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	887a      	ldrh	r2, [r7, #2]
 8005ada:	809a      	strh	r2, [r3, #4]
    }
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4618      	mov	r0, r3
 8005ae0:	370c      	adds	r7, #12
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	0802ec04 	.word	0x0802ec04

08005af0 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b082      	sub	sp, #8
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4618      	mov	r0, r3
 8005afc:	2326      	movs	r3, #38	; 0x26
 8005afe:	461a      	mov	r2, r3
 8005b00:	2100      	movs	r1, #0
 8005b02:	f026 ffb8 	bl	802ca76 <memset>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f7fe fd39 	bl	8004580 <_ZN8touchgfx6WidgetC1Ev>
 8005b0e:	4a16      	ldr	r2, [pc, #88]	; (8005b68 <_ZN8touchgfx8TextAreaC1Ev+0x78>)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	601a      	str	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	3328      	adds	r3, #40	; 0x28
 8005b18:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f7ff ffd1 	bl	8005ac4 <_ZN8touchgfx9TypedTextC1Et>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	3330      	adds	r3, #48	; 0x30
 8005b26:	2100      	movs	r1, #0
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f7ff fe6a 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	869a      	strh	r2, [r3, #52]	; 0x34
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	22ff      	movs	r2, #255	; 0xff
 8005b38:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	333c      	adds	r3, #60	; 0x3c
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f000 f807 	bl	8005b6c <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    {
    }
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4618      	mov	r0, r3
 8005b62:	3708      	adds	r7, #8
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	0802f754 	.word	0x0802f754

08005b6c <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>:
        }

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af02      	add	r7, sp, #8
 8005b72:	6078      	str	r0, [r7, #4]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f04f 33ff 	mov.w	r3, #4294967295
 8005b7a:	9300      	str	r3, [sp, #0]
 8005b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b80:	2200      	movs	r2, #0
 8005b82:	2100      	movs	r1, #0
 8005b84:	f7fe f9f4 	bl	8003f70 <_ZN8touchgfx4RectC1Essss>
              text(0)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	609a      	str	r2, [r3, #8]
        {
        }
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4618      	mov	r0, r3
 8005b92:	3708      	adds	r7, #8
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <_ZN8touchgfx14AbstractButtonC1Ev>:
 */
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	2326      	movs	r3, #38	; 0x26
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	2100      	movs	r1, #0
 8005baa:	f026 ff64 	bl	802ca76 <memset>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f7fe fce5 	bl	8004580 <_ZN8touchgfx6WidgetC1Ev>
 8005bb6:	4a0a      	ldr	r2, [pc, #40]	; (8005be0 <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	601a      	str	r2, [r3, #0]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	629a      	str	r2, [r3, #40]	; 0x28
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
        setTouchable(true);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2101      	movs	r1, #1
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f7ff fe36 	bl	8005840 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3708      	adds	r7, #8
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	0802f670 	.word	0x0802f670

08005be4 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param  callback The callback to be executed. The callback will be executed with a
     *                  reference to the AbstractButton.
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	683a      	ldr	r2, [r7, #0]
 8005bf2:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8005bf4:	bf00      	nop
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	4a05      	ldr	r2, [pc, #20]	; (8005c20 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	601a      	str	r2, [r3, #0]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4618      	mov	r0, r3
 8005c12:	f7fe fcc7 	bl	80045a4 <_ZN8touchgfx6WidgetD1Ev>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3708      	adds	r7, #8
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	0802f670 	.word	0x0802f670

08005c24 <_ZN8touchgfx14AbstractButtonD0Ev>:
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f7ff ffe7 	bl	8005c00 <_ZN8touchgfx14AbstractButtonD1Ev>
 8005c32:	2130      	movs	r1, #48	; 0x30
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f026 fcea 	bl	802c60e <_ZdlPvj>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3708      	adds	r7, #8
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b082      	sub	sp, #8
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f7ff ffa2 	bl	8005b98 <_ZN8touchgfx14AbstractButtonC1Ev>
 8005c54:	4a0c      	ldr	r2, [pc, #48]	; (8005c88 <_ZN8touchgfx6ButtonC1Ev+0x44>)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	601a      	str	r2, [r3, #0]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	332e      	adds	r3, #46	; 0x2e
 8005c5e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005c62:	4618      	mov	r0, r3
 8005c64:	f7ff fddc 	bl	8005820 <_ZN8touchgfx6BitmapC1Et>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	3330      	adds	r3, #48	; 0x30
 8005c6c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005c70:	4618      	mov	r0, r3
 8005c72:	f7ff fdd5 	bl	8005820 <_ZN8touchgfx6BitmapC1Et>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	22ff      	movs	r2, #255	; 0xff
 8005c7a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    {
    }
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4618      	mov	r0, r3
 8005c82:	3708      	adds	r7, #8
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	0802f84c 	.word	0x0802f84c

08005c8c <_ZN24Localize_AnomalyViewBase9function1Ev>:
    virtual void handleTickEvent();

    /*
     * Virtual Action Handlers
     */
    virtual void function1()
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Localize_Anomaly
    }
 8005c94:	bf00      	nop
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <_ZN24Localize_AnomalyViewBase21draw_predicted_regionEv>:
    virtual void draw_predicted_region()
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Localize_Anomaly
    }
 8005ca8:	bf00      	nop
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <_ZN24Localize_AnomalyViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b082      	sub	sp, #8
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8005cbc:	f015 fe6a 	bl	801b994 <_ZN8touchgfx11Application11getInstanceEv>
 8005cc0:	4603      	mov	r3, r0
    }
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3708      	adds	r7, #8
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
	...

08005ccc <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterED1Ev>:
class View : public Screen
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	4a05      	ldr	r2, [pc, #20]	; (8005cec <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterED1Ev+0x20>)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	601a      	str	r2, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f7ff fdd5 	bl	800588c <_ZN8touchgfx6ScreenD1Ev>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3708      	adds	r7, #8
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	0802ee28 	.word	0x0802ee28

08005cf0 <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterED0Ev>:
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b082      	sub	sp, #8
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f7ff ffe7 	bl	8005ccc <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterED1Ev>
 8005cfe:	2140      	movs	r1, #64	; 0x40
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f026 fc84 	bl	802c60e <_ZdlPvj>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3708      	adds	r7, #8
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <_ZN24Localize_AnomalyViewBaseC1Ev>:
#include <gui_generated/localize_anomaly_screen/Localize_AnomalyViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Localize_AnomalyViewBase::Localize_AnomalyViewBase() :
 8005d10:	b590      	push	{r4, r7, lr}
 8005d12:	b0b9      	sub	sp, #228	; 0xe4
 8005d14:	af02      	add	r7, sp, #8
 8005d16:	6178      	str	r0, [r7, #20]
    buttonCallback(this, &Localize_AnomalyViewBase::buttonCallbackHandler),
    frameCountInteraction2Interval(0)
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f000 fdd0 	bl	80068c0 <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterEC1Ev>
 8005d20:	4ae2      	ldr	r2, [pc, #904]	; (80060ac <_ZN24Localize_AnomalyViewBaseC1Ev+0x39c>)
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	601a      	str	r2, [r3, #0]
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	3340      	adds	r3, #64	; 0x40
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f7ff fe16 	bl	800595c <_ZN8touchgfx3BoxC1Ev>
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8005d36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d3a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f7ff fd6e 	bl	8005820 <_ZN8touchgfx6BitmapC1Et>
 8005d44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d48:	4619      	mov	r1, r3
 8005d4a:	4620      	mov	r0, r4
 8005d4c:	f7ff fe38 	bl	80059c0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	3398      	adds	r3, #152	; 0x98
 8005d54:	4618      	mov	r0, r3
 8005d56:	f7ff fd83 	bl	8005860 <_ZN8touchgfx9ContainerC1Ev>
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	33c4      	adds	r3, #196	; 0xc4
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7ff fe76 	bl	8005a50 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	33f8      	adds	r3, #248	; 0xf8
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f7ff fd79 	bl	8005860 <_ZN8touchgfx9ContainerC1Ev>
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8005d74:	4618      	mov	r0, r3
 8005d76:	f7ff fe6b 	bl	8005a50 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005d80:	4618      	mov	r0, r3
 8005d82:	f7ff fd6d 	bl	8005860 <_ZN8touchgfx9ContainerC1Ev>
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f7ff fe5f 	bl	8005a50 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f7ff fea9 	bl	8005af0 <_ZN8touchgfx8TextAreaC1Ev>
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005da4:	4618      	mov	r0, r3
 8005da6:	f7ff ff4d 	bl	8005c44 <_ZN8touchgfx6ButtonC1Ev>
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8005db0:	4618      	mov	r0, r3
 8005db2:	f7ff fd55 	bl	8005860 <_ZN8touchgfx9ContainerC1Ev>
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f7ff fe47 	bl	8005a50 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7ff fd49 	bl	8005860 <_ZN8touchgfx9ContainerC1Ev>
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f7ff fe3b 	bl	8005a50 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	f503 743d 	add.w	r4, r3, #756	; 0x2f4
 8005de0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005de4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005de8:	4618      	mov	r0, r3
 8005dea:	f7ff fd19 	bl	8005820 <_ZN8touchgfx6BitmapC1Et>
 8005dee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005df2:	4619      	mov	r1, r3
 8005df4:	4620      	mov	r0, r4
 8005df6:	f7ff fde3 	bl	80059c0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8005e00:	4618      	mov	r0, r3
 8005e02:	f7ff fd2d 	bl	8005860 <_ZN8touchgfx9ContainerC1Ev>
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f7ff fe1f 	bl	8005a50 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f7ff fe69 	bl	8005af0 <_ZN8touchgfx8TextAreaC1Ev>
    buttonCallback(this, &Localize_AnomalyViewBase::buttonCallbackHandler),
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	f503 7072 	add.w	r0, r3, #968	; 0x3c8
 8005e24:	4ba2      	ldr	r3, [pc, #648]	; (80060b0 <_ZN24Localize_AnomalyViewBaseC1Ev+0x3a0>)
 8005e26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e28:	2300      	movs	r3, #0
 8005e2a:	633b      	str	r3, [r7, #48]	; 0x30
 8005e2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005e30:	cb0c      	ldmia	r3, {r2, r3}
 8005e32:	6979      	ldr	r1, [r7, #20]
 8005e34:	f000 fd6a 	bl	800690c <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
    frameCountInteraction2Interval(0)
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
{
    __background.setPosition(0, 0, 480, 272);
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8005e46:	f44f 7388 	mov.w	r3, #272	; 0x110
 8005e4a:	9300      	str	r3, [sp, #0]
 8005e4c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8005e50:	2200      	movs	r2, #0
 8005e52:	2100      	movs	r1, #0
 8005e54:	f7fe f91a 	bl	800408c <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8005e5e:	2300      	movs	r3, #0
 8005e60:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
 8005e64:	2300      	movs	r3, #0
 8005e66:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8005e70:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 8005e74:	041b      	lsls	r3, r3, #16
 8005e76:	461a      	mov	r2, r3
 8005e78:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8005e7c:	021b      	lsls	r3, r3, #8
 8005e7e:	431a      	orrs	r2, r3
 8005e80:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8005e84:	4313      	orrs	r3, r2
 8005e86:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005e8a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005e8e:	4611      	mov	r1, r2
 8005e90:	4618      	mov	r0, r3
 8005e92:	f7ff fcb6 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 8005e96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	4620      	mov	r0, r4
 8005e9e:	f7ff fd81 	bl	80059a4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 8005ea2:	697a      	ldr	r2, [r7, #20]
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	3340      	adds	r3, #64	; 0x40
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	4610      	mov	r0, r2
 8005eac:	f7ff fd46 	bl	800593c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    Main_Background.setXY(0, 0);
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	336c      	adds	r3, #108	; 0x6c
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	2100      	movs	r1, #0
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f7fe f940 	bl	800413e <_ZN8touchgfx8Drawable5setXYEss>
    Main_Background.setBitmap(touchgfx::Bitmap(BITMAP_BACKGROUND_1_ID));
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8005ec4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005ec8:	2100      	movs	r1, #0
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f7ff fca8 	bl	8005820 <_ZN8touchgfx6BitmapC1Et>
 8005ed0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	4620      	mov	r0, r4
 8005ed8:	f014 f81f 	bl	8019f1a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    add(Main_Background);
 8005edc:	697a      	ldr	r2, [r7, #20]
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	336c      	adds	r3, #108	; 0x6c
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	4610      	mov	r0, r2
 8005ee6:	f7ff fd29 	bl	800593c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    Button_Panel.setPosition(10, 187, 460, 77);
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	f103 0098 	add.w	r0, r3, #152	; 0x98
 8005ef0:	234d      	movs	r3, #77	; 0x4d
 8005ef2:	9300      	str	r3, [sp, #0]
 8005ef4:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
 8005ef8:	22bb      	movs	r2, #187	; 0xbb
 8005efa:	210a      	movs	r1, #10
 8005efc:	f7fe f8c6 	bl	800408c <_ZN8touchgfx8Drawable11setPositionEssss>
    Button_Panel_Background.setPosition(0, 0, 460, 77);
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
 8005f06:	234d      	movs	r3, #77	; 0x4d
 8005f08:	9300      	str	r3, [sp, #0]
 8005f0a:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
 8005f0e:	2200      	movs	r2, #0
 8005f10:	2100      	movs	r1, #0
 8005f12:	f7fe f8bb 	bl	800408c <_ZN8touchgfx8Drawable11setPositionEssss>
    Button_Panel_Background.setColor(touchgfx::Color::getColorFromRGB(78, 137, 174));
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	f103 04c4 	add.w	r4, r3, #196	; 0xc4
 8005f1c:	234e      	movs	r3, #78	; 0x4e
 8005f1e:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 8005f22:	2389      	movs	r3, #137	; 0x89
 8005f24:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
 8005f28:	23ae      	movs	r3, #174	; 0xae
 8005f2a:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 8005f2e:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8005f32:	041b      	lsls	r3, r3, #16
 8005f34:	461a      	mov	r2, r3
 8005f36:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8005f3a:	021b      	lsls	r3, r3, #8
 8005f3c:	431a      	orrs	r2, r3
 8005f3e:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8005f42:	4313      	orrs	r3, r2
 8005f44:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005f48:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005f4c:	4611      	mov	r1, r2
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7ff fc57 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 8005f54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f58:	4619      	mov	r1, r3
 8005f5a:	4620      	mov	r0, r4
 8005f5c:	f7ff fd22 	bl	80059a4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Button_Panel_Background.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	f103 04c4 	add.w	r4, r3, #196	; 0xc4
 8005f66:	23ed      	movs	r3, #237	; 0xed
 8005f68:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
 8005f6c:	2366      	movs	r3, #102	; 0x66
 8005f6e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8005f72:	2363      	movs	r3, #99	; 0x63
 8005f74:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8005f78:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8005f7c:	041b      	lsls	r3, r3, #16
 8005f7e:	461a      	mov	r2, r3
 8005f80:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8005f84:	021b      	lsls	r3, r3, #8
 8005f86:	431a      	orrs	r2, r3
 8005f88:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005f92:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005f96:	4611      	mov	r1, r2
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f7ff fc32 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 8005f9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	4620      	mov	r0, r4
 8005fa6:	f7ff fd6f 	bl	8005a88 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Button_Panel_Background.setBorderSize(5);
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	33c4      	adds	r3, #196	; 0xc4
 8005fae:	2105      	movs	r1, #5
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f7ff fd77 	bl	8005aa4 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Button_Panel.add(Button_Panel_Background);
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	33c4      	adds	r3, #196	; 0xc4
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	4610      	mov	r0, r2
 8005fc4:	f011 fde0 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Anomaly_Detection_Panel.setPosition(5, 4, 450, 73);
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	f103 00f8 	add.w	r0, r3, #248	; 0xf8
 8005fce:	2349      	movs	r3, #73	; 0x49
 8005fd0:	9300      	str	r3, [sp, #0]
 8005fd2:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 8005fd6:	2204      	movs	r2, #4
 8005fd8:	2105      	movs	r1, #5
 8005fda:	f7fe f857 	bl	800408c <_ZN8touchgfx8Drawable11setPositionEssss>
    Anomaly_Detection_Background.setPosition(0, 1, 450, 67);
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	f503 7092 	add.w	r0, r3, #292	; 0x124
 8005fe4:	2343      	movs	r3, #67	; 0x43
 8005fe6:	9300      	str	r3, [sp, #0]
 8005fe8:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 8005fec:	2201      	movs	r2, #1
 8005fee:	2100      	movs	r1, #0
 8005ff0:	f7fe f84c 	bl	800408c <_ZN8touchgfx8Drawable11setPositionEssss>
    Anomaly_Detection_Background.setColor(touchgfx::Color::getColorFromRGB(67, 101, 139));
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	f503 7492 	add.w	r4, r3, #292	; 0x124
 8005ffa:	2343      	movs	r3, #67	; 0x43
 8005ffc:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 8006000:	2365      	movs	r3, #101	; 0x65
 8006002:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
 8006006:	238b      	movs	r3, #139	; 0x8b
 8006008:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
 800600c:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8006010:	041b      	lsls	r3, r3, #16
 8006012:	461a      	mov	r2, r3
 8006014:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8006018:	021b      	lsls	r3, r3, #8
 800601a:	431a      	orrs	r2, r3
 800601c:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 8006020:	4313      	orrs	r3, r2
 8006022:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006026:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800602a:	4611      	mov	r1, r2
 800602c:	4618      	mov	r0, r3
 800602e:	f7ff fbe8 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 8006032:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006036:	4619      	mov	r1, r3
 8006038:	4620      	mov	r0, r4
 800603a:	f7ff fcb3 	bl	80059a4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Anomaly_Detection_Background.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	f503 7492 	add.w	r4, r3, #292	; 0x124
 8006044:	2300      	movs	r3, #0
 8006046:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 800604a:	2300      	movs	r3, #0
 800604c:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
 8006050:	2300      	movs	r3, #0
 8006052:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
 8006056:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 800605a:	041b      	lsls	r3, r3, #16
 800605c:	461a      	mov	r2, r3
 800605e:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 8006062:	021b      	lsls	r3, r3, #8
 8006064:	431a      	orrs	r2, r3
 8006066:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 800606a:	4313      	orrs	r3, r2
 800606c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006070:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006074:	4611      	mov	r1, r2
 8006076:	4618      	mov	r0, r3
 8006078:	f7ff fbc3 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 800607c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800607e:	4619      	mov	r1, r3
 8006080:	4620      	mov	r0, r4
 8006082:	f7ff fd01 	bl	8005a88 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Anomaly_Detection_Background.setBorderSize(2);
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800608c:	2102      	movs	r1, #2
 800608e:	4618      	mov	r0, r3
 8006090:	f7ff fd08 	bl	8005aa4 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Anomaly_Detection_Panel.add(Anomaly_Detection_Background);
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	f103 02f8 	add.w	r2, r3, #248	; 0xf8
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80060a0:	4619      	mov	r1, r3
 80060a2:	4610      	mov	r0, r2
 80060a4:	f011 fd70 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80060a8:	e004      	b.n	80060b4 <_ZN24Localize_AnomalyViewBaseC1Ev+0x3a4>
 80060aa:	bf00      	nop
 80060ac:	0802edd4 	.word	0x0802edd4
 80060b0:	08006833 	.word	0x08006833

    Button_Panel.add(Anomaly_Detection_Panel);
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	f103 0298 	add.w	r2, r3, #152	; 0x98
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	33f8      	adds	r3, #248	; 0xf8
 80060be:	4619      	mov	r1, r3
 80060c0:	4610      	mov	r0, r2
 80060c2:	f011 fd61 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Alarm_Mute_Indicator_Textbox_1_1_1.setPosition(142, 47, 177, 20);
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	f503 70ac 	add.w	r0, r3, #344	; 0x158
 80060cc:	2314      	movs	r3, #20
 80060ce:	9300      	str	r3, [sp, #0]
 80060d0:	23b1      	movs	r3, #177	; 0xb1
 80060d2:	222f      	movs	r2, #47	; 0x2f
 80060d4:	218e      	movs	r1, #142	; 0x8e
 80060d6:	f7fd ffd9 	bl	800408c <_ZN8touchgfx8Drawable11setPositionEssss>
    AnomalyDetection_Border_1_1_1_1.setPosition(0, 3, 177, 17);
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	f503 70c2 	add.w	r0, r3, #388	; 0x184
 80060e0:	2311      	movs	r3, #17
 80060e2:	9300      	str	r3, [sp, #0]
 80060e4:	23b1      	movs	r3, #177	; 0xb1
 80060e6:	2203      	movs	r2, #3
 80060e8:	2100      	movs	r1, #0
 80060ea:	f7fd ffcf 	bl	800408c <_ZN8touchgfx8Drawable11setPositionEssss>
    AnomalyDetection_Border_1_1_1_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	f503 74c2 	add.w	r4, r3, #388	; 0x184
 80060f4:	2300      	movs	r3, #0
 80060f6:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
 80060fa:	2300      	movs	r3, #0
 80060fc:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
 8006100:	2300      	movs	r3, #0
 8006102:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8006106:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 800610a:	041b      	lsls	r3, r3, #16
 800610c:	461a      	mov	r2, r3
 800610e:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 8006112:	021b      	lsls	r3, r3, #8
 8006114:	431a      	orrs	r2, r3
 8006116:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800611a:	4313      	orrs	r3, r2
 800611c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006120:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006124:	4611      	mov	r1, r2
 8006126:	4618      	mov	r0, r3
 8006128:	f7ff fb6b 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 800612c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800612e:	4619      	mov	r1, r3
 8006130:	4620      	mov	r0, r4
 8006132:	f7ff fc37 	bl	80059a4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    AnomalyDetection_Border_1_1_1_1.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	f503 74c2 	add.w	r4, r3, #388	; 0x184
 800613c:	23ed      	movs	r3, #237	; 0xed
 800613e:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
 8006142:	2366      	movs	r3, #102	; 0x66
 8006144:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
 8006148:	2363      	movs	r3, #99	; 0x63
 800614a:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
 800614e:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 8006152:	041b      	lsls	r3, r3, #16
 8006154:	461a      	mov	r2, r3
 8006156:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800615a:	021b      	lsls	r3, r3, #8
 800615c:	431a      	orrs	r2, r3
 800615e:	f897 30a2 	ldrb.w	r3, [r7, #162]	; 0xa2
 8006162:	4313      	orrs	r3, r2
 8006164:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006168:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800616c:	4611      	mov	r1, r2
 800616e:	4618      	mov	r0, r3
 8006170:	f7ff fb47 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 8006174:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006176:	4619      	mov	r1, r3
 8006178:	4620      	mov	r0, r4
 800617a:	f7ff fc85 	bl	8005a88 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    AnomalyDetection_Border_1_1_1_1.setBorderSize(3);
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8006184:	2103      	movs	r1, #3
 8006186:	4618      	mov	r0, r3
 8006188:	f7ff fc8c 	bl	8005aa4 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Alarm_Mute_Indicator_Textbox_1_1_1.add(AnomalyDetection_Border_1_1_1_1);
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	f503 72ac 	add.w	r2, r3, #344	; 0x158
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8006198:	4619      	mov	r1, r3
 800619a:	4610      	mov	r0, r2
 800619c:	f011 fcf4 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    AnomalyDetection_Text.setXY(7, 5);
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80061a6:	2205      	movs	r2, #5
 80061a8:	2107      	movs	r1, #7
 80061aa:	4618      	mov	r0, r3
 80061ac:	f7fd ffc7 	bl	800413e <_ZN8touchgfx8Drawable5setXYEss>
    AnomalyDetection_Text.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	f503 74dc 	add.w	r4, r3, #440	; 0x1b8
 80061b6:	23ff      	movs	r3, #255	; 0xff
 80061b8:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80061bc:	23ff      	movs	r3, #255	; 0xff
 80061be:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
 80061c2:	23ff      	movs	r3, #255	; 0xff
 80061c4:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
 80061c8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80061cc:	041b      	lsls	r3, r3, #16
 80061ce:	461a      	mov	r2, r3
 80061d0:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 80061d4:	021b      	lsls	r3, r3, #8
 80061d6:	431a      	orrs	r2, r3
 80061d8:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 80061dc:	4313      	orrs	r3, r2
 80061de:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80061e2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80061e6:	4611      	mov	r1, r2
 80061e8:	4618      	mov	r0, r3
 80061ea:	f7ff fb0a 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 80061ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061f0:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80061f4:	623b      	str	r3, [r7, #32]
        color = newColor;
 80061f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80061fa:	6a3a      	ldr	r2, [r7, #32]
 80061fc:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80061fe:	bf00      	nop
    AnomalyDetection_Text.setLinespacing(0);
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006206:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800620a:	2300      	movs	r3, #0
 800620c:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
        linespace = space;
 8006210:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006214:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 8006218:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 800621a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	3384      	adds	r3, #132	; 0x84
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8006228:	463a      	mov	r2, r7
 800622a:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800622e:	4610      	mov	r0, r2
 8006230:	4798      	blx	r3
 8006232:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8006236:	463a      	mov	r2, r7
 8006238:	ca07      	ldmia	r2, {r0, r1, r2}
 800623a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800623e:	bf00      	nop
    AnomalyDetection_Text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_6CIV));
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	f503 74dc 	add.w	r4, r3, #440	; 0x1b8
 8006246:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800624a:	2107      	movs	r1, #7
 800624c:	4618      	mov	r0, r3
 800624e:	f7ff fc39 	bl	8005ac4 <_ZN8touchgfx9TypedTextC1Et>
 8006252:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006256:	4619      	mov	r1, r3
 8006258:	4620      	mov	r0, r4
 800625a:	f013 fc69 	bl	8019b30 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800625e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006262:	4618      	mov	r0, r3
 8006264:	f7fd fe58 	bl	8003f18 <_ZN8touchgfx9TypedTextD1Ev>
    Alarm_Mute_Indicator_Textbox_1_1_1.add(AnomalyDetection_Text);
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	f503 72ac 	add.w	r2, r3, #344	; 0x158
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006274:	4619      	mov	r1, r3
 8006276:	4610      	mov	r0, r2
 8006278:	f011 fc86 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Button_Panel.add(Alarm_Mute_Indicator_Textbox_1_1_1);
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006288:	4619      	mov	r1, r3
 800628a:	4610      	mov	r0, r2
 800628c:	f011 fc7c 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Localize_Button.setXY(188, 15);
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006296:	220f      	movs	r2, #15
 8006298:	21bc      	movs	r1, #188	; 0xbc
 800629a:	4618      	mov	r0, r3
 800629c:	f7fd ff4f 	bl	800413e <_ZN8touchgfx8Drawable5setXYEss>
    Localize_Button.setBitmaps(touchgfx::Bitmap(BITMAP_RECT_BUTTON_UNPRESSED_ID), touchgfx::Bitmap(BITMAP_RECT_BUTTON_PRESSED_ID));
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	f503 7400 	add.w	r4, r3, #512	; 0x200
 80062a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80062aa:	2103      	movs	r1, #3
 80062ac:	4618      	mov	r0, r3
 80062ae:	f7ff fab7 	bl	8005820 <_ZN8touchgfx6BitmapC1Et>
 80062b2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80062b6:	2102      	movs	r1, #2
 80062b8:	4618      	mov	r0, r3
 80062ba:	f7ff fab1 	bl	8005820 <_ZN8touchgfx6BitmapC1Et>
 80062be:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80062c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80062c6:	4619      	mov	r1, r3
 80062c8:	4620      	mov	r0, r4
 80062ca:	f013 fc83 	bl	8019bd4 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    Localize_Button.setAction(buttonCallback);
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	f503 7200 	add.w	r2, r3, #512	; 0x200
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 80062da:	4619      	mov	r1, r3
 80062dc:	4610      	mov	r0, r2
 80062de:	f7ff fc81 	bl	8005be4 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>
    Button_Panel.add(Localize_Button);
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	f103 0298 	add.w	r2, r3, #152	; 0x98
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80062ee:	4619      	mov	r1, r3
 80062f0:	4610      	mov	r0, r2
 80062f2:	f011 fc49 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    add(Button_Panel);
 80062f6:	697a      	ldr	r2, [r7, #20]
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	3398      	adds	r3, #152	; 0x98
 80062fc:	4619      	mov	r1, r3
 80062fe:	4610      	mov	r0, r2
 8006300:	f7ff fb1c 	bl	800593c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    Message_panel.setPosition(10, 8, 460, 194);
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	f503 700d 	add.w	r0, r3, #564	; 0x234
 800630a:	23c2      	movs	r3, #194	; 0xc2
 800630c:	9300      	str	r3, [sp, #0]
 800630e:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
 8006312:	2208      	movs	r2, #8
 8006314:	210a      	movs	r1, #10
 8006316:	f7fd feb9 	bl	800408c <_ZN8touchgfx8Drawable11setPositionEssss>
    Button_Panel_Background_1.setPosition(0, 0, 460, 183);
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	f503 7018 	add.w	r0, r3, #608	; 0x260
 8006320:	23b7      	movs	r3, #183	; 0xb7
 8006322:	9300      	str	r3, [sp, #0]
 8006324:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
 8006328:	2200      	movs	r2, #0
 800632a:	2100      	movs	r1, #0
 800632c:	f7fd feae 	bl	800408c <_ZN8touchgfx8Drawable11setPositionEssss>
    Button_Panel_Background_1.setColor(touchgfx::Color::getColorFromRGB(78, 137, 174));
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	f503 7418 	add.w	r4, r3, #608	; 0x260
 8006336:	234e      	movs	r3, #78	; 0x4e
 8006338:	f887 30b9 	strb.w	r3, [r7, #185]	; 0xb9
 800633c:	2389      	movs	r3, #137	; 0x89
 800633e:	f887 30b8 	strb.w	r3, [r7, #184]	; 0xb8
 8006342:	23ae      	movs	r3, #174	; 0xae
 8006344:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 8006348:	f897 30b9 	ldrb.w	r3, [r7, #185]	; 0xb9
 800634c:	041b      	lsls	r3, r3, #16
 800634e:	461a      	mov	r2, r3
 8006350:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 8006354:	021b      	lsls	r3, r3, #8
 8006356:	431a      	orrs	r2, r3
 8006358:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800635c:	4313      	orrs	r3, r2
 800635e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006362:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006366:	4611      	mov	r1, r2
 8006368:	4618      	mov	r0, r3
 800636a:	f7ff fa4a 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 800636e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006370:	4619      	mov	r1, r3
 8006372:	4620      	mov	r0, r4
 8006374:	f7ff fb16 	bl	80059a4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Button_Panel_Background_1.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	f503 7418 	add.w	r4, r3, #608	; 0x260
 800637e:	23ed      	movs	r3, #237	; 0xed
 8006380:	f887 30bc 	strb.w	r3, [r7, #188]	; 0xbc
 8006384:	2366      	movs	r3, #102	; 0x66
 8006386:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
 800638a:	2363      	movs	r3, #99	; 0x63
 800638c:	f887 30ba 	strb.w	r3, [r7, #186]	; 0xba
 8006390:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 8006394:	041b      	lsls	r3, r3, #16
 8006396:	461a      	mov	r2, r3
 8006398:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 800639c:	021b      	lsls	r3, r3, #8
 800639e:	431a      	orrs	r2, r3
 80063a0:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 80063a4:	4313      	orrs	r3, r2
 80063a6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80063aa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80063ae:	4611      	mov	r1, r2
 80063b0:	4618      	mov	r0, r3
 80063b2:	f7ff fa26 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 80063b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063b8:	4619      	mov	r1, r3
 80063ba:	4620      	mov	r0, r4
 80063bc:	f7ff fb64 	bl	8005a88 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Button_Panel_Background_1.setBorderSize(5);
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80063c6:	2105      	movs	r1, #5
 80063c8:	4618      	mov	r0, r3
 80063ca:	f7ff fb6b 	bl	8005aa4 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Message_panel.add(Button_Panel_Background_1);
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	f503 720d 	add.w	r2, r3, #564	; 0x234
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80063da:	4619      	mov	r1, r3
 80063dc:	4610      	mov	r0, r2
 80063de:	f011 fbd3 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Message_Board_Panel_1.setPosition(5, 4, 450, 175);
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	f503 7025 	add.w	r0, r3, #660	; 0x294
 80063e8:	23af      	movs	r3, #175	; 0xaf
 80063ea:	9300      	str	r3, [sp, #0]
 80063ec:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 80063f0:	2204      	movs	r2, #4
 80063f2:	2105      	movs	r1, #5
 80063f4:	f7fd fe4a 	bl	800408c <_ZN8touchgfx8Drawable11setPositionEssss>
    MessageBoard_Background_1.setPosition(0, 0, 450, 175);
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	f503 7030 	add.w	r0, r3, #704	; 0x2c0
 80063fe:	23af      	movs	r3, #175	; 0xaf
 8006400:	9300      	str	r3, [sp, #0]
 8006402:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 8006406:	2200      	movs	r2, #0
 8006408:	2100      	movs	r1, #0
 800640a:	f7fd fe3f 	bl	800408c <_ZN8touchgfx8Drawable11setPositionEssss>
    MessageBoard_Background_1.setColor(touchgfx::Color::getColorFromRGB(67, 101, 139));
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	f503 7430 	add.w	r4, r3, #704	; 0x2c0
 8006414:	2343      	movs	r3, #67	; 0x43
 8006416:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
 800641a:	2365      	movs	r3, #101	; 0x65
 800641c:	f887 30be 	strb.w	r3, [r7, #190]	; 0xbe
 8006420:	238b      	movs	r3, #139	; 0x8b
 8006422:	f887 30bd 	strb.w	r3, [r7, #189]	; 0xbd
 8006426:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 800642a:	041b      	lsls	r3, r3, #16
 800642c:	461a      	mov	r2, r3
 800642e:	f897 30be 	ldrb.w	r3, [r7, #190]	; 0xbe
 8006432:	021b      	lsls	r3, r3, #8
 8006434:	431a      	orrs	r2, r3
 8006436:	f897 30bd 	ldrb.w	r3, [r7, #189]	; 0xbd
 800643a:	4313      	orrs	r3, r2
 800643c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006440:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006444:	4611      	mov	r1, r2
 8006446:	4618      	mov	r0, r3
 8006448:	f7ff f9db 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 800644c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800644e:	4619      	mov	r1, r3
 8006450:	4620      	mov	r0, r4
 8006452:	f7ff faa7 	bl	80059a4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    MessageBoard_Background_1.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	f503 7430 	add.w	r4, r3, #704	; 0x2c0
 800645c:	2300      	movs	r3, #0
 800645e:	f887 30c2 	strb.w	r3, [r7, #194]	; 0xc2
 8006462:	2300      	movs	r3, #0
 8006464:	f887 30c1 	strb.w	r3, [r7, #193]	; 0xc1
 8006468:	2300      	movs	r3, #0
 800646a:	f887 30c0 	strb.w	r3, [r7, #192]	; 0xc0
 800646e:	f897 30c2 	ldrb.w	r3, [r7, #194]	; 0xc2
 8006472:	041b      	lsls	r3, r3, #16
 8006474:	461a      	mov	r2, r3
 8006476:	f897 30c1 	ldrb.w	r3, [r7, #193]	; 0xc1
 800647a:	021b      	lsls	r3, r3, #8
 800647c:	431a      	orrs	r2, r3
 800647e:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 8006482:	4313      	orrs	r3, r2
 8006484:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006488:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800648c:	4611      	mov	r1, r2
 800648e:	4618      	mov	r0, r3
 8006490:	f7ff f9b7 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 8006494:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006496:	4619      	mov	r1, r3
 8006498:	4620      	mov	r0, r4
 800649a:	f7ff faf5 	bl	8005a88 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    MessageBoard_Background_1.setBorderSize(2);
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80064a4:	2102      	movs	r1, #2
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7ff fafc 	bl	8005aa4 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Message_Board_Panel_1.add(MessageBoard_Background_1);
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	f503 7225 	add.w	r2, r3, #660	; 0x294
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80064b8:	4619      	mov	r1, r3
 80064ba:	4610      	mov	r0, r2
 80064bc:	f011 fb64 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Directional_Vector.setXY(95, 9);
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 80064c6:	2209      	movs	r2, #9
 80064c8:	215f      	movs	r1, #95	; 0x5f
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7fd fe37 	bl	800413e <_ZN8touchgfx8Drawable5setXYEss>
    Directional_Vector.setBitmap(touchgfx::Bitmap(BITMAP_VECTOR_IMAGE_ID));
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	f503 743d 	add.w	r4, r3, #756	; 0x2f4
 80064d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80064da:	210c      	movs	r1, #12
 80064dc:	4618      	mov	r0, r3
 80064de:	f7ff f99f 	bl	8005820 <_ZN8touchgfx6BitmapC1Et>
 80064e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80064e6:	4619      	mov	r1, r3
 80064e8:	4620      	mov	r0, r4
 80064ea:	f013 fd16 	bl	8019f1a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    Message_Board_Panel_1.add(Directional_Vector);
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	f503 7225 	add.w	r2, r3, #660	; 0x294
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 80064fa:	4619      	mov	r1, r3
 80064fc:	4610      	mov	r0, r2
 80064fe:	f011 fb43 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Message_Board_Textbox_1.setPosition(167, 0, 117, 20);
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	f503 7048 	add.w	r0, r3, #800	; 0x320
 8006508:	2314      	movs	r3, #20
 800650a:	9300      	str	r3, [sp, #0]
 800650c:	2375      	movs	r3, #117	; 0x75
 800650e:	2200      	movs	r2, #0
 8006510:	21a7      	movs	r1, #167	; 0xa7
 8006512:	f7fd fdbb 	bl	800408c <_ZN8touchgfx8Drawable11setPositionEssss>
    MessageBoard_Border_1_1.setPosition(0, 3, 117, 17);
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	f503 7053 	add.w	r0, r3, #844	; 0x34c
 800651c:	2311      	movs	r3, #17
 800651e:	9300      	str	r3, [sp, #0]
 8006520:	2375      	movs	r3, #117	; 0x75
 8006522:	2203      	movs	r2, #3
 8006524:	2100      	movs	r1, #0
 8006526:	f7fd fdb1 	bl	800408c <_ZN8touchgfx8Drawable11setPositionEssss>
    MessageBoard_Border_1_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	f503 7453 	add.w	r4, r3, #844	; 0x34c
 8006530:	2300      	movs	r3, #0
 8006532:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
 8006536:	2300      	movs	r3, #0
 8006538:	f887 30c4 	strb.w	r3, [r7, #196]	; 0xc4
 800653c:	2300      	movs	r3, #0
 800653e:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
 8006542:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 8006546:	041b      	lsls	r3, r3, #16
 8006548:	461a      	mov	r2, r3
 800654a:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800654e:	021b      	lsls	r3, r3, #8
 8006550:	431a      	orrs	r2, r3
 8006552:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8006556:	4313      	orrs	r3, r2
 8006558:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800655c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006560:	4611      	mov	r1, r2
 8006562:	4618      	mov	r0, r3
 8006564:	f7ff f94d 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 8006568:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800656a:	4619      	mov	r1, r3
 800656c:	4620      	mov	r0, r4
 800656e:	f7ff fa19 	bl	80059a4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    MessageBoard_Border_1_1.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	f503 7453 	add.w	r4, r3, #844	; 0x34c
 8006578:	23ed      	movs	r3, #237	; 0xed
 800657a:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8
 800657e:	2366      	movs	r3, #102	; 0x66
 8006580:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 8006584:	2363      	movs	r3, #99	; 0x63
 8006586:	f887 30c6 	strb.w	r3, [r7, #198]	; 0xc6
 800658a:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 800658e:	041b      	lsls	r3, r3, #16
 8006590:	461a      	mov	r2, r3
 8006592:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006596:	021b      	lsls	r3, r3, #8
 8006598:	431a      	orrs	r2, r3
 800659a:	f897 30c6 	ldrb.w	r3, [r7, #198]	; 0xc6
 800659e:	4313      	orrs	r3, r2
 80065a0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80065a4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80065a8:	4611      	mov	r1, r2
 80065aa:	4618      	mov	r0, r3
 80065ac:	f7ff f929 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 80065b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80065b2:	4619      	mov	r1, r3
 80065b4:	4620      	mov	r0, r4
 80065b6:	f7ff fa67 	bl	8005a88 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    MessageBoard_Border_1_1.setBorderSize(3);
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80065c0:	2103      	movs	r1, #3
 80065c2:	4618      	mov	r0, r3
 80065c4:	f7ff fa6e 	bl	8005aa4 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Message_Board_Textbox_1.add(MessageBoard_Border_1_1);
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	f503 7248 	add.w	r2, r3, #800	; 0x320
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80065d4:	4619      	mov	r1, r3
 80065d6:	4610      	mov	r0, r2
 80065d8:	f011 fad6 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    MessageBoard_Text_1.setXY(4, 5);
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	f503 7360 	add.w	r3, r3, #896	; 0x380
 80065e2:	2205      	movs	r2, #5
 80065e4:	2104      	movs	r1, #4
 80065e6:	4618      	mov	r0, r3
 80065e8:	f7fd fda9 	bl	800413e <_ZN8touchgfx8Drawable5setXYEss>
    MessageBoard_Text_1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	f503 7460 	add.w	r4, r3, #896	; 0x380
 80065f2:	23ff      	movs	r3, #255	; 0xff
 80065f4:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
 80065f8:	23ff      	movs	r3, #255	; 0xff
 80065fa:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
 80065fe:	23ff      	movs	r3, #255	; 0xff
 8006600:	f887 30c9 	strb.w	r3, [r7, #201]	; 0xc9
 8006604:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8006608:	041b      	lsls	r3, r3, #16
 800660a:	461a      	mov	r2, r3
 800660c:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 8006610:	021b      	lsls	r3, r3, #8
 8006612:	431a      	orrs	r2, r3
 8006614:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
 8006618:	4313      	orrs	r3, r2
 800661a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800661e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006622:	4611      	mov	r1, r2
 8006624:	4618      	mov	r0, r3
 8006626:	f7ff f8ec 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 800662a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800662c:	f8c7 40cc 	str.w	r4, [r7, #204]	; 0xcc
 8006630:	61fb      	str	r3, [r7, #28]
        color = newColor;
 8006632:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006636:	69fa      	ldr	r2, [r7, #28]
 8006638:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800663a:	bf00      	nop
    MessageBoard_Text_1.setLinespacing(0);
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8006642:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006646:	2300      	movs	r3, #0
 8006648:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
        linespace = space;
 800664c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006650:	f8b7 20d2 	ldrh.w	r2, [r7, #210]	; 0xd2
 8006654:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8006656:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	3384      	adds	r3, #132	; 0x84
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 8006664:	463a      	mov	r2, r7
 8006666:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800666a:	4610      	mov	r0, r2
 800666c:	4798      	blx	r3
 800666e:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8006672:	463a      	mov	r2, r7
 8006674:	ca07      	ldmia	r2, {r0, r1, r2}
 8006676:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800667a:	bf00      	nop
    MessageBoard_Text_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_HV8G));
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	f503 7460 	add.w	r4, r3, #896	; 0x380
 8006682:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006686:	2108      	movs	r1, #8
 8006688:	4618      	mov	r0, r3
 800668a:	f7ff fa1b 	bl	8005ac4 <_ZN8touchgfx9TypedTextC1Et>
 800668e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006692:	4619      	mov	r1, r3
 8006694:	4620      	mov	r0, r4
 8006696:	f013 fa4b 	bl	8019b30 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800669a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800669e:	4618      	mov	r0, r3
 80066a0:	f7fd fc3a 	bl	8003f18 <_ZN8touchgfx9TypedTextD1Ev>
    Message_Board_Textbox_1.add(MessageBoard_Text_1);
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	f503 7248 	add.w	r2, r3, #800	; 0x320
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	f503 7360 	add.w	r3, r3, #896	; 0x380
 80066b0:	4619      	mov	r1, r3
 80066b2:	4610      	mov	r0, r2
 80066b4:	f011 fa68 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Message_Board_Panel_1.add(Message_Board_Textbox_1);
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	f503 7225 	add.w	r2, r3, #660	; 0x294
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	f503 7348 	add.w	r3, r3, #800	; 0x320
 80066c4:	4619      	mov	r1, r3
 80066c6:	4610      	mov	r0, r2
 80066c8:	f011 fa5e 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Message_panel.add(Message_Board_Panel_1);
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	f503 720d 	add.w	r2, r3, #564	; 0x234
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80066d8:	4619      	mov	r1, r3
 80066da:	4610      	mov	r0, r2
 80066dc:	f011 fa54 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    add(Message_panel);
 80066e0:	697a      	ldr	r2, [r7, #20]
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	f503 730d 	add.w	r3, r3, #564	; 0x234
 80066e8:	4619      	mov	r1, r3
 80066ea:	4610      	mov	r0, r2
 80066ec:	f7ff f926 	bl	800593c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	4618      	mov	r0, r3
 80066f4:	37dc      	adds	r7, #220	; 0xdc
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd90      	pop	{r4, r7, pc}
 80066fa:	bf00      	nop

080066fc <_ZN24Localize_AnomalyViewBaseD1Ev>:

Localize_AnomalyViewBase::~Localize_AnomalyViewBase()
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	4a3c      	ldr	r2, [pc, #240]	; (80067f8 <_ZN24Localize_AnomalyViewBaseD1Ev+0xfc>)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	601a      	str	r2, [r3, #0]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8006710:	4618      	mov	r0, r3
 8006712:	f000 f93b 	bl	800698c <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f503 7360 	add.w	r3, r3, #896	; 0x380
 800671c:	4618      	mov	r0, r3
 800671e:	f000 f9bd 	bl	8006a9c <_ZN8touchgfx8TextAreaD1Ev>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8006728:	4618      	mov	r0, r3
 800672a:	f000 f995 	bl	8006a58 <_ZN8touchgfx13BoxWithBorderD1Ev>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8006734:	4618      	mov	r0, r3
 8006736:	f000 f94b 	bl	80069d0 <_ZN8touchgfx9ContainerD1Ev>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8006740:	4618      	mov	r0, r3
 8006742:	f000 f967 	bl	8006a14 <_ZN8touchgfx5ImageD1Ev>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800674c:	4618      	mov	r0, r3
 800674e:	f000 f983 	bl	8006a58 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006758:	4618      	mov	r0, r3
 800675a:	f000 f939 	bl	80069d0 <_ZN8touchgfx9ContainerD1Ev>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8006764:	4618      	mov	r0, r3
 8006766:	f000 f977 	bl	8006a58 <_ZN8touchgfx13BoxWithBorderD1Ev>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8006770:	4618      	mov	r0, r3
 8006772:	f000 f92d 	bl	80069d0 <_ZN8touchgfx9ContainerD1Ev>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800677c:	4618      	mov	r0, r3
 800677e:	f000 f9b5 	bl	8006aec <_ZN8touchgfx6ButtonD1Ev>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006788:	4618      	mov	r0, r3
 800678a:	f000 f987 	bl	8006a9c <_ZN8touchgfx8TextAreaD1Ev>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8006794:	4618      	mov	r0, r3
 8006796:	f000 f95f 	bl	8006a58 <_ZN8touchgfx13BoxWithBorderD1Ev>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80067a0:	4618      	mov	r0, r3
 80067a2:	f000 f915 	bl	80069d0 <_ZN8touchgfx9ContainerD1Ev>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80067ac:	4618      	mov	r0, r3
 80067ae:	f000 f953 	bl	8006a58 <_ZN8touchgfx13BoxWithBorderD1Ev>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	33f8      	adds	r3, #248	; 0xf8
 80067b6:	4618      	mov	r0, r3
 80067b8:	f000 f90a 	bl	80069d0 <_ZN8touchgfx9ContainerD1Ev>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	33c4      	adds	r3, #196	; 0xc4
 80067c0:	4618      	mov	r0, r3
 80067c2:	f000 f949 	bl	8006a58 <_ZN8touchgfx13BoxWithBorderD1Ev>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	3398      	adds	r3, #152	; 0x98
 80067ca:	4618      	mov	r0, r3
 80067cc:	f000 f900 	bl	80069d0 <_ZN8touchgfx9ContainerD1Ev>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	336c      	adds	r3, #108	; 0x6c
 80067d4:	4618      	mov	r0, r3
 80067d6:	f000 f91d 	bl	8006a14 <_ZN8touchgfx5ImageD1Ev>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	3340      	adds	r3, #64	; 0x40
 80067de:	4618      	mov	r0, r3
 80067e0:	f7ff f914 	bl	8005a0c <_ZN8touchgfx3BoxD1Ev>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7ff fa70 	bl	8005ccc <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterED1Ev>
{

}
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4618      	mov	r0, r3
 80067f0:	3708      	adds	r7, #8
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	0802edd4 	.word	0x0802edd4

080067fc <_ZN24Localize_AnomalyViewBaseD0Ev>:
Localize_AnomalyViewBase::~Localize_AnomalyViewBase()
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
}
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f7ff ff79 	bl	80066fc <_ZN24Localize_AnomalyViewBaseD1Ev>
 800680a:	f44f 7177 	mov.w	r1, #988	; 0x3dc
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f025 fefd 	bl	802c60e <_ZdlPvj>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4618      	mov	r0, r3
 8006818:	3708      	adds	r7, #8
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}

0800681e <_ZN24Localize_AnomalyViewBase11setupScreenEv>:

void Localize_AnomalyViewBase::setupScreen()
{
 800681e:	b480      	push	{r7}
 8006820:	b083      	sub	sp, #12
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]

}
 8006826:	bf00      	nop
 8006828:	370c      	adds	r7, #12
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr

08006832 <_ZN24Localize_AnomalyViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Localize_AnomalyViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8006832:	b580      	push	{r7, lr}
 8006834:	b082      	sub	sp, #8
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
 800683a:	6039      	str	r1, [r7, #0]
    if (&src == &Localize_Button)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006842:	683a      	ldr	r2, [r7, #0]
 8006844:	429a      	cmp	r2, r3
 8006846:	d106      	bne.n	8006856 <_ZN24Localize_AnomalyViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x24>
    {
        //Switch_Main_Screen
        //When Localize_Button clicked change screen to Main
        //Go to Main with screen transition towards South
        application().gotoMainScreenWipeTransitionSouth();
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f7ff fa33 	bl	8005cb4 <_ZN24Localize_AnomalyViewBase11applicationEv>
 800684e:	4603      	mov	r3, r0
 8006850:	4618      	mov	r0, r3
 8006852:	f7fd ff71 	bl	8004738 <_ZN23FrontendApplicationBase33gotoMainScreenWipeTransitionSouthEv>
    }
}
 8006856:	bf00      	nop
 8006858:	3708      	adds	r7, #8
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}

0800685e <_ZN24Localize_AnomalyViewBase15afterTransitionEv>:

void Localize_AnomalyViewBase::afterTransition()
{
 800685e:	b580      	push	{r7, lr}
 8006860:	b082      	sub	sp, #8
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
    //Interaction1
    //When screen transition ends call virtual function
    //Call function1
    function1();
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	332c      	adds	r3, #44	; 0x2c
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	4798      	blx	r3
}
 8006872:	bf00      	nop
 8006874:	3708      	adds	r7, #8
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}

0800687a <_ZN24Localize_AnomalyViewBase15handleTickEventEv>:

void Localize_AnomalyViewBase::handleTickEvent()
{
 800687a:	b580      	push	{r7, lr}
 800687c:	b084      	sub	sp, #16
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
    frameCountInteraction2Interval++;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8006888:	1c5a      	adds	r2, r3, #1
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
    if(frameCountInteraction2Interval == TICK_INTERACTION2_INTERVAL)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8d3 33d8 	ldr.w	r3, [r3, #984]	; 0x3d8
 8006896:	2b0a      	cmp	r3, #10
 8006898:	d10e      	bne.n	80068b8 <_ZN24Localize_AnomalyViewBase15handleTickEventEv+0x3e>
    {
        //Interaction2
        //When every N tick call virtual function
        //Call draw_predicted_region
    	int i = 0;
 800689a:	2300      	movs	r3, #0
 800689c:	60fb      	str	r3, [r7, #12]
    	i++;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	3301      	adds	r3, #1
 80068a2:	60fb      	str	r3, [r7, #12]
        draw_predicted_region();
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	3330      	adds	r3, #48	; 0x30
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	4798      	blx	r3
        frameCountInteraction2Interval = 0;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
    }
}
 80068b8:	bf00      	nop
 80068ba:	3710      	adds	r7, #16
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterEC1Ev>:
    View()
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
        : presenter(0)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4618      	mov	r0, r3
 80068cc:	f016 fcba 	bl	801d244 <_ZN8touchgfx6ScreenC1Ev>
 80068d0:	4a05      	ldr	r2, [pc, #20]	; (80068e8 <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterEC1Ev+0x28>)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	601a      	str	r2, [r3, #0]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4618      	mov	r0, r3
 80068e0:	3708      	adds	r7, #8
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	0802ee28 	.word	0x0802ee28

080068ec <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	4a04      	ldr	r2, [pc, #16]	; (8006908 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	601a      	str	r2, [r3, #0]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4618      	mov	r0, r3
 80068fe:	370c      	adds	r7, #12
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr
 8006908:	0802ee5c 	.word	0x0802ee5c

0800690c <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	4639      	mov	r1, r7
 8006918:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	4618      	mov	r0, r3
 8006920:	f7ff ffe4 	bl	80068ec <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8006924:	4a08      	ldr	r2, [pc, #32]	; (8006948 <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	601a      	str	r2, [r3, #0]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	68ba      	ldr	r2, [r7, #8]
 800692e:	605a      	str	r2, [r3, #4]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	3308      	adds	r3, #8
 8006934:	463a      	mov	r2, r7
 8006936:	e892 0003 	ldmia.w	r2, {r0, r1}
 800693a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	4618      	mov	r0, r3
 8006942:	3710      	adds	r7, #16
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	0802ee10 	.word	0x0802ee10

0800694c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
    }
 8006954:	4a04      	ldr	r2, [pc, #16]	; (8006968 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	601a      	str	r2, [r3, #0]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4618      	mov	r0, r3
 800695e:	370c      	adds	r7, #12
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr
 8006968:	0802ee5c 	.word	0x0802ee5c

0800696c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 800696c:	b580      	push	{r7, lr}
 800696e:	b082      	sub	sp, #8
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
    }
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f7ff ffe9 	bl	800694c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800697a:	2104      	movs	r1, #4
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f025 fe46 	bl	802c60e <_ZdlPvj>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4618      	mov	r0, r3
 8006986:	3708      	adds	r7, #8
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	4a05      	ldr	r2, [pc, #20]	; (80069ac <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	601a      	str	r2, [r3, #0]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4618      	mov	r0, r3
 800699e:	f7ff ffd5 	bl	800694c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4618      	mov	r0, r3
 80069a6:	3708      	adds	r7, #8
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	0802ee10 	.word	0x0802ee10

080069b0 <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f7ff ffe7 	bl	800698c <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvED1Ev>
 80069be:	2110      	movs	r1, #16
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f025 fe24 	bl	802c60e <_ZdlPvj>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4618      	mov	r0, r3
 80069ca:	3708      	adds	r7, #8
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <_ZN8touchgfx9ContainerD1Ev>:
class Container : public Drawable
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	4a05      	ldr	r2, [pc, #20]	; (80069f0 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	601a      	str	r2, [r3, #0]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4618      	mov	r0, r3
 80069e2:	f7fd fb15 	bl	8004010 <_ZN8touchgfx8DrawableD1Ev>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4618      	mov	r0, r3
 80069ea:	3708      	adds	r7, #8
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	0802f3bc 	.word	0x0802f3bc

080069f4 <_ZN8touchgfx9ContainerD0Ev>:
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b082      	sub	sp, #8
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f7ff ffe7 	bl	80069d0 <_ZN8touchgfx9ContainerD1Ev>
 8006a02:	212c      	movs	r1, #44	; 0x2c
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f025 fe02 	bl	802c60e <_ZdlPvj>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3708      	adds	r7, #8
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	4a05      	ldr	r2, [pc, #20]	; (8006a34 <_ZN8touchgfx5ImageD1Ev+0x20>)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	601a      	str	r2, [r3, #0]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4618      	mov	r0, r3
 8006a26:	f7fd fdbd 	bl	80045a4 <_ZN8touchgfx6WidgetD1Ev>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3708      	adds	r7, #8
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	0802f9b8 	.word	0x0802f9b8

08006a38 <_ZN8touchgfx5ImageD0Ev>:
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b082      	sub	sp, #8
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f7ff ffe7 	bl	8006a14 <_ZN8touchgfx5ImageD1Ev>
 8006a46:	212c      	movs	r1, #44	; 0x2c
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f025 fde0 	bl	802c60e <_ZdlPvj>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4618      	mov	r0, r3
 8006a52:	3708      	adds	r7, #8
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <_ZN8touchgfx13BoxWithBorderD1Ev>:
class BoxWithBorder : public Box
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b082      	sub	sp, #8
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	4a05      	ldr	r2, [pc, #20]	; (8006a78 <_ZN8touchgfx13BoxWithBorderD1Ev+0x20>)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	601a      	str	r2, [r3, #0]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f7fe ffcf 	bl	8005a0c <_ZN8touchgfx3BoxD1Ev>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4618      	mov	r0, r3
 8006a72:	3708      	adds	r7, #8
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}
 8006a78:	0802f950 	.word	0x0802f950

08006a7c <_ZN8touchgfx13BoxWithBorderD0Ev>:
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f7ff ffe7 	bl	8006a58 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006a8a:	2134      	movs	r1, #52	; 0x34
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f025 fdbe 	bl	802c60e <_ZdlPvj>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4618      	mov	r0, r3
 8006a96:	3708      	adds	r7, #8
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	4a08      	ldr	r2, [pc, #32]	; (8006ac8 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	601a      	str	r2, [r3, #0]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	3328      	adds	r3, #40	; 0x28
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f7fd fa32 	bl	8003f18 <_ZN8touchgfx9TypedTextD1Ev>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f7fd fd74 	bl	80045a4 <_ZN8touchgfx6WidgetD1Ev>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3708      	adds	r7, #8
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	0802f754 	.word	0x0802f754

08006acc <_ZN8touchgfx8TextAreaD0Ev>:
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b082      	sub	sp, #8
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f7ff ffe1 	bl	8006a9c <_ZN8touchgfx8TextAreaD1Ev>
 8006ada:	2148      	movs	r1, #72	; 0x48
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f025 fd96 	bl	802c60e <_ZdlPvj>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3708      	adds	r7, #8
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <_ZN8touchgfx6ButtonD1Ev>:
class Button : public AbstractButton
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	4a05      	ldr	r2, [pc, #20]	; (8006b0c <_ZN8touchgfx6ButtonD1Ev+0x20>)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	601a      	str	r2, [r3, #0]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4618      	mov	r0, r3
 8006afe:	f7ff f87f 	bl	8005c00 <_ZN8touchgfx14AbstractButtonD1Ev>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4618      	mov	r0, r3
 8006b06:	3708      	adds	r7, #8
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	0802f84c 	.word	0x0802f84c

08006b10 <_ZN8touchgfx6ButtonD0Ev>:
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b082      	sub	sp, #8
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f7ff ffe7 	bl	8006aec <_ZN8touchgfx6ButtonD1Ev>
 8006b1e:	2134      	movs	r1, #52	; 0x34
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f025 fd74 	bl	802c60e <_ZdlPvj>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3708      	adds	r7, #8
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	68d2      	ldr	r2, [r2, #12]
 8006b42:	1052      	asrs	r2, r2, #1
 8006b44:	1898      	adds	r0, r3, r2
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	f003 0301 	and.w	r3, r3, #1
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d102      	bne.n	8006b58 <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	e00a      	b.n	8006b6e <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	68d2      	ldr	r2, [r2, #12]
 8006b60:	1052      	asrs	r2, r2, #1
 8006b62:	4413      	add	r3, r2
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	6892      	ldr	r2, [r2, #8]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	6839      	ldr	r1, [r7, #0]
 8006b70:	4798      	blx	r3
    }
 8006b72:	bf00      	nop
 8006b74:	3708      	adds	r7, #8
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}

08006b7a <_ZNK8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8006b7a:	b480      	push	{r7}
 8006b7c:	b083      	sub	sp, #12
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d010      	beq.n	8006bac <_ZNK8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d107      	bne.n	8006ba2 <_ZNK8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	f003 0301 	and.w	r3, r3, #1
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d101      	bne.n	8006ba2 <_ZNK8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e000      	b.n	8006ba4 <_ZNK8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d001      	beq.n	8006bac <_ZNK8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e000      	b.n	8006bae <_ZNK8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8006bac:	2300      	movs	r3, #0
    }
 8006bae:	4618      	mov	r0, r3
 8006bb0:	370c      	adds	r7, #12
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr

08006bba <_ZN8touchgfx8Drawable10setVisibleEb>:
    void setVisible(bool vis)
 8006bba:	b480      	push	{r7}
 8006bbc:	b083      	sub	sp, #12
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	70fb      	strb	r3, [r7, #3]
        visible = vis;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	78fa      	ldrb	r2, [r7, #3]
 8006bca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 8006bce:	bf00      	nop
 8006bd0:	370c      	adds	r7, #12
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr

08006bda <_ZN8touchgfx8TextArea8setWidthEs>:
    virtual void setWidth(int16_t width)
 8006bda:	b590      	push	{r4, r7, lr}
 8006bdc:	b087      	sub	sp, #28
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6178      	str	r0, [r7, #20]
 8006be2:	460b      	mov	r3, r1
 8006be4:	827b      	strh	r3, [r7, #18]
        Widget::setWidth(width);
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8006bec:	4611      	mov	r1, r2
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7fd fac3 	bl	800417a <_ZN8touchgfx8Drawable8setWidthEs>
        boundingArea = calculateBoundingArea();
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	3384      	adds	r3, #132	; 0x84
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	697c      	ldr	r4, [r7, #20]
 8006bfe:	463a      	mov	r2, r7
 8006c00:	6979      	ldr	r1, [r7, #20]
 8006c02:	4610      	mov	r0, r2
 8006c04:	4798      	blx	r3
 8006c06:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8006c0a:	463a      	mov	r2, r7
 8006c0c:	ca07      	ldmia	r2, {r0, r1, r2}
 8006c0e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8006c12:	bf00      	nop
 8006c14:	371c      	adds	r7, #28
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd90      	pop	{r4, r7, pc}

08006c1a <_ZN8touchgfx8TextArea9setHeightEs>:
    virtual void setHeight(int16_t height)
 8006c1a:	b590      	push	{r4, r7, lr}
 8006c1c:	b087      	sub	sp, #28
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6178      	str	r0, [r7, #20]
 8006c22:	460b      	mov	r3, r1
 8006c24:	827b      	strh	r3, [r7, #18]
        Widget::setHeight(height);
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8006c2c:	4611      	mov	r1, r2
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f7fd fab2 	bl	8004198 <_ZN8touchgfx8Drawable9setHeightEs>
        boundingArea = calculateBoundingArea();
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	3384      	adds	r3, #132	; 0x84
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	697c      	ldr	r4, [r7, #20]
 8006c3e:	463a      	mov	r2, r7
 8006c40:	6979      	ldr	r1, [r7, #20]
 8006c42:	4610      	mov	r0, r2
 8006c44:	4798      	blx	r3
 8006c46:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8006c4a:	463a      	mov	r2, r7
 8006c4c:	ca07      	ldmia	r2, {r0, r1, r2}
 8006c4e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8006c52:	bf00      	nop
 8006c54:	371c      	adds	r7, #28
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd90      	pop	{r4, r7, pc}

08006c5a <_ZNK8touchgfx8TextArea12getSolidRectEv>:
    virtual Rect getSolidRect() const
 8006c5a:	b580      	push	{r7, lr}
 8006c5c:	b082      	sub	sp, #8
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
 8006c62:	6039      	str	r1, [r7, #0]
        return Rect();
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f7fb fe8d 	bl	8002984 <_ZN8touchgfx4RectC1Ev>
    }
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	3708      	adds	r7, #8
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}

08006c72 <_ZN8touchgfx8TextArea8setAlphaEh>:
    virtual void setAlpha(uint8_t newAlpha)
 8006c72:	b480      	push	{r7}
 8006c74:	b083      	sub	sp, #12
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	70fb      	strb	r3, [r7, #3]
        alpha = newAlpha;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	78fa      	ldrb	r2, [r7, #3]
 8006c82:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    }
 8006c86:	bf00      	nop
 8006c88:	370c      	adds	r7, #12
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr
	...

08006c94 <_ZN8touchgfx8TextArea12setBaselineYEs>:
    virtual void setBaselineY(int16_t baselineY)
 8006c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c96:	b085      	sub	sp, #20
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	807b      	strh	r3, [r7, #2]
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8006ca0:	687e      	ldr	r6, [r7, #4]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	3334      	adds	r3, #52	; 0x34
 8006ca8:	681c      	ldr	r4, [r3, #0]
 8006caa:	887d      	ldrh	r5, [r7, #2]
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 f867 	bl	8006d80 <_ZNK8touchgfx8TextArea12getTypedTextEv>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	60fb      	str	r3, [r7, #12]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8006cb6:	4b1c      	ldr	r3, [pc, #112]	; (8006d28 <_ZN8touchgfx8TextArea12setBaselineYEs+0x94>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d105      	bne.n	8006cca <_ZN8touchgfx8TextArea12setBaselineYEs+0x36>
 8006cbe:	4b1b      	ldr	r3, [pc, #108]	; (8006d2c <_ZN8touchgfx8TextArea12setBaselineYEs+0x98>)
 8006cc0:	4a1b      	ldr	r2, [pc, #108]	; (8006d30 <_ZN8touchgfx8TextArea12setBaselineYEs+0x9c>)
 8006cc2:	216c      	movs	r1, #108	; 0x6c
 8006cc4:	481b      	ldr	r0, [pc, #108]	; (8006d34 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa0>)
 8006cc6:	f025 fcd1 	bl	802c66c <__assert_func>
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	60bb      	str	r3, [r7, #8]
        return typedTextId < numberOfTypedTexts;
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	889a      	ldrh	r2, [r3, #4]
 8006cd2:	4b19      	ldr	r3, [pc, #100]	; (8006d38 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa4>)
 8006cd4:	881b      	ldrh	r3, [r3, #0]
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	bf34      	ite	cc
 8006cda:	2301      	movcc	r3, #1
 8006cdc:	2300      	movcs	r3, #0
 8006cde:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d105      	bne.n	8006cf0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>
 8006ce4:	4b15      	ldr	r3, [pc, #84]	; (8006d3c <_ZN8touchgfx8TextArea12setBaselineYEs+0xa8>)
 8006ce6:	4a12      	ldr	r2, [pc, #72]	; (8006d30 <_ZN8touchgfx8TextArea12setBaselineYEs+0x9c>)
 8006ce8:	216d      	movs	r1, #109	; 0x6d
 8006cea:	4812      	ldr	r0, [pc, #72]	; (8006d34 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa0>)
 8006cec:	f025 fcbe 	bl	802c66c <__assert_func>
        return fonts[typedTexts[typedTextId].fontIdx];
 8006cf0:	4b13      	ldr	r3, [pc, #76]	; (8006d40 <_ZN8touchgfx8TextArea12setBaselineYEs+0xac>)
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	4b0c      	ldr	r3, [pc, #48]	; (8006d28 <_ZN8touchgfx8TextArea12setBaselineYEs+0x94>)
 8006cf6:	6819      	ldr	r1, [r3, #0]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	889b      	ldrh	r3, [r3, #4]
 8006cfc:	005b      	lsls	r3, r3, #1
 8006cfe:	440b      	add	r3, r1
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	4413      	add	r3, r2
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	3230      	adds	r2, #48	; 0x30
 8006d0c:	6812      	ldr	r2, [r2, #0]
 8006d0e:	4618      	mov	r0, r3
 8006d10:	4790      	blx	r2
 8006d12:	4603      	mov	r3, r0
 8006d14:	1aeb      	subs	r3, r5, r3
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	b21b      	sxth	r3, r3
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	4630      	mov	r0, r6
 8006d1e:	47a0      	blx	r4
    }
 8006d20:	bf00      	nop
 8006d22:	3714      	adds	r7, #20
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d28:	2400bb40 	.word	0x2400bb40
 8006d2c:	0802e130 	.word	0x0802e130
 8006d30:	0802e174 	.word	0x0802e174
 8006d34:	0802e1b0 	.word	0x0802e1b0
 8006d38:	2400bb44 	.word	0x2400bb44
 8006d3c:	0802e1f8 	.word	0x0802e1f8
 8006d40:	2400bb48 	.word	0x2400bb48

08006d44 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	807b      	strh	r3, [r7, #2]
 8006d50:	4613      	mov	r3, r2
 8006d52:	803b      	strh	r3, [r7, #0]
        setX(x);
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	3330      	adds	r3, #48	; 0x30
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8006d62:	4610      	mov	r0, r2
 8006d64:	4798      	blx	r3
        setBaselineY(baselineY);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	3364      	adds	r3, #100	; 0x64
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8006d72:	4611      	mov	r1, r2
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	4798      	blx	r3
    }
 8006d78:	bf00      	nop
 8006d7a:	3708      	adds	r7, #8
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <_ZNK8touchgfx8TextArea12getTypedTextEv>:
    const TypedText& getTypedText() const
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
        return typedText;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	3328      	adds	r3, #40	; 0x28
    }
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	370c      	adds	r7, #12
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
    virtual const Unicode::UnicodeChar* getWildcard2() const
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
        return 0;
 8006da0:	2300      	movs	r3, #0
    }
 8006da2:	4618      	mov	r0, r3
 8006da4:	370c      	adds	r7, #12
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr

08006dae <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
    {
    }

    virtual void draw(const Rect& area) const;

    virtual void invalidateContent() const
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b082      	sub	sp, #8
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
    {
        Widget::invalidateContent();
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4618      	mov	r0, r3
 8006dba:	f7fd f949 	bl	8004050 <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 8006dbe:	bf00      	nop
 8006dc0:	3708      	adds	r7, #8
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}

08006dc6 <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:

protected:
    virtual TextArea::BoundingArea calculateBoundingArea() const
 8006dc6:	b580      	push	{r7, lr}
 8006dc8:	b082      	sub	sp, #8
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
 8006dce:	6039      	str	r1, [r7, #0]
    {
        return TextArea::BoundingArea();
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f7fe fecb 	bl	8005b6c <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    }
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	3708      	adds	r7, #8
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
	...

08006de0 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	4a05      	ldr	r2, [pc, #20]	; (8006e00 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	601a      	str	r2, [r3, #0]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4618      	mov	r0, r3
 8006df2:	f7ff fe53 	bl	8006a9c <_ZN8touchgfx8TextAreaD1Ev>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3708      	adds	r7, #8
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	0802f8c0 	.word	0x0802f8c0

08006e04 <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b082      	sub	sp, #8
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f7ff ffe7 	bl	8006de0 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 8006e12:	2148      	movs	r1, #72	; 0x48
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f025 fbfa 	bl	802c60e <_ZdlPvj>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3708      	adds	r7, #8
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}

08006e24 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    void setWildcard1(const Unicode::UnicodeChar* value)
    {
        wc1 = value;
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
    {
        return wc1;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    }
 8006e30:	4618      	mov	r0, r3
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <_ZN8touchgfx6Slider19setNewValueCallbackERNS_15GenericCallbackIRKS0_ivEE>:
     * @param  callback The callback to be executed. The callback will be given a reference
     *                  to the Slider and the current value of the slider.
     *
     * @see GenericCallback
     */
    void setNewValueCallback(GenericCallback<const Slider&, int>& callback)
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
    {
        newValueCallback = &callback;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	683a      	ldr	r2, [r7, #0]
 8006e4a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    }
 8006e4e:	bf00      	nop
 8006e50:	370c      	adds	r7, #12
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr

08006e5a <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>:
 * when it is subsequently pressed, it will pop back out.
 */
class ToggleButton : public Button
{
public:
    virtual void setBitmaps(const Bitmap& bitmapReleased, const Bitmap& bitmapPressed)
 8006e5a:	b580      	push	{r7, lr}
 8006e5c:	b084      	sub	sp, #16
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	60f8      	str	r0, [r7, #12]
 8006e62:	60b9      	str	r1, [r7, #8]
 8006e64:	607a      	str	r2, [r7, #4]
    {
        originalPressed = bitmapPressed;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	8812      	ldrh	r2, [r2, #0]
 8006e6c:	869a      	strh	r2, [r3, #52]	; 0x34
        Button::setBitmaps(bitmapReleased, bitmapPressed);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	68b9      	ldr	r1, [r7, #8]
 8006e74:	4618      	mov	r0, r3
 8006e76:	f012 fead 	bl	8019bd4 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    }
 8006e7a:	bf00      	nop
 8006e7c:	3710      	adds	r7, #16
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <_ZN12MainViewBase17set_volume_sliderEi>:
    virtual void handleKeyEvent(uint8_t key);

    /*
     * Virtual Action Handlers
     */
    virtual void set_volume_slider(int value)
 8006e82:	b480      	push	{r7}
 8006e84:	b083      	sub	sp, #12
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
 8006e8a:	6039      	str	r1, [r7, #0]
    {
        // Override and implement this function in Main
    }
 8006e8c:	bf00      	nop
 8006e8e:	370c      	adds	r7, #12
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <_ZN12MainViewBase20update_anomaly_alertEv>:
    virtual void update_anomaly_alert()
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Main
    }
 8006ea0:	bf00      	nop
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <_ZN12MainViewBase12toggle_voiceEv>:
    virtual void toggle_voice()
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Main
    }
 8006eb4:	bf00      	nop
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <_ZN12MainViewBase18alert_mute_pressedEv>:
    virtual void alert_mute_pressed()
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Main
    }
 8006ec8:	bf00      	nop
 8006eca:	370c      	adds	r7, #12
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <_ZN12MainViewBase18set_volume_encoderEv>:
    virtual void set_volume_encoder()
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Main
    }
 8006edc:	bf00      	nop
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <_ZN12MainViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8006ef0:	f014 fd50 	bl	801b994 <_ZN8touchgfx11Application11getInstanceEv>
 8006ef4:	4603      	mov	r3, r0
    }
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3708      	adds	r7, #8
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
	...

08006f00 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>:
class View : public Screen
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b082      	sub	sp, #8
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	4a05      	ldr	r2, [pc, #20]	; (8006f20 <_ZN8touchgfx4ViewI13MainPresenterED1Ev+0x20>)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	601a      	str	r2, [r3, #0]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4618      	mov	r0, r3
 8006f12:	f7fe fcbb 	bl	800588c <_ZN8touchgfx6ScreenD1Ev>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3708      	adds	r7, #8
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}
 8006f20:	0802eeec 	.word	0x0802eeec

08006f24 <_ZN8touchgfx4ViewI13MainPresenterED0Ev>:
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f7ff ffe7 	bl	8006f00 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 8006f32:	2140      	movs	r1, #64	; 0x40
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f025 fb6a 	bl	802c60e <_ZdlPvj>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3708      	adds	r7, #8
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <_ZN8touchgfx12ToggleButtonC1Ev>:
class ToggleButton : public Button
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b082      	sub	sp, #8
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f7fe fe78 	bl	8005c44 <_ZN8touchgfx6ButtonC1Ev>
 8006f54:	4a07      	ldr	r2, [pc, #28]	; (8006f74 <_ZN8touchgfx12ToggleButtonC1Ev+0x30>)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	601a      	str	r2, [r3, #0]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	3334      	adds	r3, #52	; 0x34
 8006f5e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006f62:	4618      	mov	r0, r3
 8006f64:	f7fe fc5c 	bl	8005820 <_ZN8touchgfx6BitmapC1Et>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3708      	adds	r7, #8
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop
 8006f74:	0802f6e0 	.word	0x0802f6e0

08006f78 <_ZN12MainViewBaseC1Ev>:
#include <gui_generated/main_screen/MainViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

MainViewBase::MainViewBase() :
 8006f78:	b590      	push	{r4, r7, lr}
 8006f7a:	f5ad 7d21 	sub.w	sp, sp, #644	; 0x284
 8006f7e:	af02      	add	r7, sp, #8
 8006f80:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8006f84:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8006f88:	6018      	str	r0, [r3, #0]
    sliderValueChangedCallback(this, &MainViewBase::sliderValueChangedCallbackHandler),
    buttonCallback(this, &MainViewBase::buttonCallbackHandler)
 8006f8a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8006f8e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4618      	mov	r0, r3
 8006f96:	f002 fd6d 	bl	8009a74 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>
 8006f9a:	4ae7      	ldr	r2, [pc, #924]	; (8007338 <_ZN12MainViewBaseC1Ev+0x3c0>)
 8006f9c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8006fa0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	601a      	str	r2, [r3, #0]
 8006fa8:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8006fac:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	3340      	adds	r3, #64	; 0x40
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f7fe fcd1 	bl	800595c <_ZN8touchgfx3BoxC1Ev>
 8006fba:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8006fbe:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8006fc8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006fcc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f7fe fc25 	bl	8005820 <_ZN8touchgfx6BitmapC1Et>
 8006fd6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006fda:	4619      	mov	r1, r3
 8006fdc:	4620      	mov	r0, r4
 8006fde:	f7fe fcef 	bl	80059c0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8006fe2:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8006fe6:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	3398      	adds	r3, #152	; 0x98
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f7fe fc36 	bl	8005860 <_ZN8touchgfx9ContainerC1Ev>
 8006ff4:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8006ff8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	33c4      	adds	r3, #196	; 0xc4
 8007000:	4618      	mov	r0, r3
 8007002:	f7fe fd25 	bl	8005a50 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8007006:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800700a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	33f8      	adds	r3, #248	; 0xf8
 8007012:	4618      	mov	r0, r3
 8007014:	f7fe fc24 	bl	8005860 <_ZN8touchgfx9ContainerC1Ev>
 8007018:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800701c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8007026:	4618      	mov	r0, r3
 8007028:	f7fe fd12 	bl	8005a50 <_ZN8touchgfx13BoxWithBorderC1Ev>
 800702c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007030:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800703a:	4618      	mov	r0, r3
 800703c:	f7fe fc10 	bl	8005860 <_ZN8touchgfx9ContainerC1Ev>
 8007040:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007044:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800704e:	4618      	mov	r0, r3
 8007050:	f7fe fcfe 	bl	8005a50 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8007054:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007058:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007062:	4618      	mov	r0, r3
 8007064:	f7fe fd44 	bl	8005af0 <_ZN8touchgfx8TextAreaC1Ev>
 8007068:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800706c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007076:	4618      	mov	r0, r3
 8007078:	f7fe fbf2 	bl	8005860 <_ZN8touchgfx9ContainerC1Ev>
 800707c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007080:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 800708a:	4618      	mov	r0, r3
 800708c:	f7fe fce0 	bl	8005a50 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8007090:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007094:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800709e:	4618      	mov	r0, r3
 80070a0:	f010 fb7c 	bl	801779c <_ZN8touchgfx12TextProgressC1Ev>
 80070a4:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80070a8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f503 735d 	add.w	r3, r3, #884	; 0x374
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7fe fbd4 	bl	8005860 <_ZN8touchgfx9ContainerC1Ev>
 80070b8:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80070bc:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 80070c6:	4618      	mov	r0, r3
 80070c8:	f7fe fcc2 	bl	8005a50 <_ZN8touchgfx13BoxWithBorderC1Ev>
 80070cc:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80070d0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f503 7375 	add.w	r3, r3, #980	; 0x3d4
 80070da:	4618      	mov	r0, r3
 80070dc:	f7fe fd08 	bl	8005af0 <_ZN8touchgfx8TextAreaC1Ev>
 80070e0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80070e4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80070ee:	4618      	mov	r0, r3
 80070f0:	f011 f9ce 	bl	8018490 <_ZN8touchgfx6SliderC1Ev>
 80070f4:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80070f8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8007102:	4618      	mov	r0, r3
 8007104:	f7ff ff1e 	bl	8006f44 <_ZN8touchgfx12ToggleButtonC1Ev>
 8007108:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800710c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f503 63a9 	add.w	r3, r3, #1352	; 0x548
 8007116:	4618      	mov	r0, r3
 8007118:	f7fe fba2 	bl	8005860 <_ZN8touchgfx9ContainerC1Ev>
 800711c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007120:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f203 5374 	addw	r3, r3, #1396	; 0x574
 800712a:	4618      	mov	r0, r3
 800712c:	f7fe fc90 	bl	8005a50 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8007130:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007134:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f503 63b5 	add.w	r3, r3, #1448	; 0x5a8
 800713e:	4618      	mov	r0, r3
 8007140:	f7fe fb8e 	bl	8005860 <_ZN8touchgfx9ContainerC1Ev>
 8007144:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007148:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f203 53d4 	addw	r3, r3, #1492	; 0x5d4
 8007152:	4618      	mov	r0, r3
 8007154:	f7fe fc7c 	bl	8005a50 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8007158:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800715c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 8007166:	4618      	mov	r0, r3
 8007168:	f7fe fb7a 	bl	8005860 <_ZN8touchgfx9ContainerC1Ev>
 800716c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007170:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f203 6334 	addw	r3, r3, #1588	; 0x634
 800717a:	4618      	mov	r0, r3
 800717c:	f7fe fc68 	bl	8005a50 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8007180:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007184:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 800718e:	4618      	mov	r0, r3
 8007190:	f7fe fb66 	bl	8005860 <_ZN8touchgfx9ContainerC1Ev>
 8007194:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007198:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f203 6394 	addw	r3, r3, #1684	; 0x694
 80071a2:	4618      	mov	r0, r3
 80071a4:	f7fe fc54 	bl	8005a50 <_ZN8touchgfx13BoxWithBorderC1Ev>
 80071a8:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80071ac:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f503 63d9 	add.w	r3, r3, #1736	; 0x6c8
 80071b6:	4618      	mov	r0, r3
 80071b8:	f7fe fc9a 	bl	8005af0 <_ZN8touchgfx8TextAreaC1Ev>
 80071bc:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80071c0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f503 63e2 	add.w	r3, r3, #1808	; 0x710
 80071ca:	4618      	mov	r0, r3
 80071cc:	f7fe fb48 	bl	8005860 <_ZN8touchgfx9ContainerC1Ev>
 80071d0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80071d4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f203 733c 	addw	r3, r3, #1852	; 0x73c
 80071de:	4618      	mov	r0, r3
 80071e0:	f7fe fc36 	bl	8005a50 <_ZN8touchgfx13BoxWithBorderC1Ev>
 80071e4:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80071e8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f503 63ee 	add.w	r3, r3, #1904	; 0x770
 80071f2:	4618      	mov	r0, r3
 80071f4:	f7fe fc2c 	bl	8005a50 <_ZN8touchgfx13BoxWithBorderC1Ev>
 80071f8:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80071fc:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f203 73a4 	addw	r3, r3, #1956	; 0x7a4
 8007206:	4618      	mov	r0, r3
 8007208:	f7fe fc72 	bl	8005af0 <_ZN8touchgfx8TextAreaC1Ev>
 800720c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007210:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f203 73ec 	addw	r3, r3, #2028	; 0x7ec
 800721a:	4618      	mov	r0, r3
 800721c:	f7fe fc68 	bl	8005af0 <_ZN8touchgfx8TextAreaC1Ev>
 8007220:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007224:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f603 0334 	addw	r3, r3, #2100	; 0x834
 800722e:	4618      	mov	r0, r3
 8007230:	f7fe fb16 	bl	8005860 <_ZN8touchgfx9ContainerC1Ev>
 8007234:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007238:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f503 6306 	add.w	r3, r3, #2144	; 0x860
 8007242:	4618      	mov	r0, r3
 8007244:	f7fe fc04 	bl	8005a50 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8007248:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800724c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007256:	4618      	mov	r0, r3
 8007258:	f7fe fbfa 	bl	8005a50 <_ZN8touchgfx13BoxWithBorderC1Ev>
 800725c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007260:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f603 03c8 	addw	r3, r3, #2248	; 0x8c8
 800726a:	4618      	mov	r0, r3
 800726c:	f7fe fc40 	bl	8005af0 <_ZN8touchgfx8TextAreaC1Ev>
 8007270:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007274:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 800727e:	4618      	mov	r0, r3
 8007280:	f7fe fc36 	bl	8005af0 <_ZN8touchgfx8TextAreaC1Ev>
 8007284:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007288:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f603 1358 	addw	r3, r3, #2392	; 0x958
 8007292:	4618      	mov	r0, r3
 8007294:	f7fe fae4 	bl	8005860 <_ZN8touchgfx9ContainerC1Ev>
 8007298:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800729c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f603 1384 	addw	r3, r3, #2436	; 0x984
 80072a6:	4618      	mov	r0, r3
 80072a8:	f7fe fbd2 	bl	8005a50 <_ZN8touchgfx13BoxWithBorderC1Ev>
 80072ac:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80072b0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f603 13b8 	addw	r3, r3, #2488	; 0x9b8
 80072ba:	4618      	mov	r0, r3
 80072bc:	f7fe fc18 	bl	8005af0 <_ZN8touchgfx8TextAreaC1Ev>
 80072c0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80072c4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f503 6420 	add.w	r4, r3, #2560	; 0xa00
 80072ce:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80072d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80072d6:	4618      	mov	r0, r3
 80072d8:	f7fe faa2 	bl	8005820 <_ZN8touchgfx6BitmapC1Et>
 80072dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80072e0:	4619      	mov	r1, r3
 80072e2:	4620      	mov	r0, r4
 80072e4:	f7fe fb6c 	bl	80059c0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80072e8:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80072ec:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f603 242c 	addw	r4, r3, #2604	; 0xa2c
 80072f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80072fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80072fe:	4618      	mov	r0, r3
 8007300:	f7fe fa8e 	bl	8005820 <_ZN8touchgfx6BitmapC1Et>
 8007304:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007308:	4619      	mov	r1, r3
 800730a:	4620      	mov	r0, r4
 800730c:	f7fe fb58 	bl	80059c0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8007310:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007314:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f603 2358 	addw	r3, r3, #2648	; 0xa58
 800731e:	4618      	mov	r0, r3
 8007320:	f7fe fc90 	bl	8005c44 <_ZN8touchgfx6ButtonC1Ev>
 8007324:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007328:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 8007332:	4618      	mov	r0, r3
 8007334:	e002      	b.n	800733c <_ZN12MainViewBaseC1Ev+0x3c4>
 8007336:	bf00      	nop
 8007338:	0802ee74 	.word	0x0802ee74
 800733c:	f7fe fc82 	bl	8005c44 <_ZN8touchgfx6ButtonC1Ev>
 8007340:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007344:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 800734e:	4618      	mov	r0, r3
 8007350:	f7fe fa86 	bl	8005860 <_ZN8touchgfx9ContainerC1Ev>
 8007354:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007358:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f603 23ec 	addw	r3, r3, #2796	; 0xaec
 8007362:	4618      	mov	r0, r3
 8007364:	f7fe fb74 	bl	8005a50 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8007368:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800736c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f503 6332 	add.w	r3, r3, #2848	; 0xb20
 8007376:	4618      	mov	r0, r3
 8007378:	f7fe fbba 	bl	8005af0 <_ZN8touchgfx8TextAreaC1Ev>
    sliderValueChangedCallback(this, &MainViewBase::sliderValueChangedCallbackHandler),
 800737c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007380:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f603 3068 	addw	r0, r3, #2920	; 0xb68
 800738a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800738e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8007392:	4ae9      	ldr	r2, [pc, #932]	; (8007738 <_ZN12MainViewBaseC1Ev+0x7c0>)
 8007394:	601a      	str	r2, [r3, #0]
 8007396:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800739a:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800739e:	2200      	movs	r2, #0
 80073a0:	605a      	str	r2, [r3, #4]
 80073a2:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80073a6:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80073aa:	f507 721e 	add.w	r2, r7, #632	; 0x278
 80073ae:	f5a2 7119 	sub.w	r1, r2, #612	; 0x264
 80073b2:	cb0c      	ldmia	r3, {r2, r3}
 80073b4:	6809      	ldr	r1, [r1, #0]
 80073b6:	f002 fb83 	bl	8009ac0 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE>
    buttonCallback(this, &MainViewBase::buttonCallbackHandler)
 80073ba:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80073be:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f603 3078 	addw	r0, r3, #2936	; 0xb78
 80073c8:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80073cc:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 80073d0:	4ada      	ldr	r2, [pc, #872]	; (800773c <_ZN12MainViewBaseC1Ev+0x7c4>)
 80073d2:	601a      	str	r2, [r3, #0]
 80073d4:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80073d8:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 80073dc:	2200      	movs	r2, #0
 80073de:	605a      	str	r2, [r3, #4]
 80073e0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80073e4:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 80073e8:	f507 721e 	add.w	r2, r7, #632	; 0x278
 80073ec:	f5a2 7119 	sub.w	r1, r2, #612	; 0x264
 80073f0:	cb0c      	ldmia	r3, {r2, r3}
 80073f2:	6809      	ldr	r1, [r1, #0]
 80073f4:	f002 fb84 	bl	8009b00 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{
    __background.setPosition(0, 0, 480, 272);
 80073f8:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80073fc:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8007406:	f44f 7388 	mov.w	r3, #272	; 0x110
 800740a:	9300      	str	r3, [sp, #0]
 800740c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8007410:	2200      	movs	r2, #0
 8007412:	2100      	movs	r1, #0
 8007414:	f7fc fe3a 	bl	800408c <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8007418:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800741c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8007426:	2300      	movs	r3, #0
 8007428:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 800742c:	2300      	movs	r3, #0
 800742e:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 8007432:	2300      	movs	r3, #0
 8007434:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 8007438:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 800743c:	041b      	lsls	r3, r3, #16
 800743e:	461a      	mov	r2, r3
 8007440:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 8007444:	021b      	lsls	r3, r3, #8
 8007446:	431a      	orrs	r2, r3
 8007448:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 800744c:	4313      	orrs	r3, r2
 800744e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007452:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8007456:	4611      	mov	r1, r2
 8007458:	4618      	mov	r0, r3
 800745a:	f7fe f9d2 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 800745e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8007462:	4619      	mov	r1, r3
 8007464:	4620      	mov	r0, r4
 8007466:	f7fe fa9d 	bl	80059a4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 800746a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800746e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007478:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	3340      	adds	r3, #64	; 0x40
 8007480:	4619      	mov	r1, r3
 8007482:	4610      	mov	r0, r2
 8007484:	f7fe fa5a 	bl	800593c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    Main_Background.setXY(0, 0);
 8007488:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800748c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	336c      	adds	r3, #108	; 0x6c
 8007494:	2200      	movs	r2, #0
 8007496:	2100      	movs	r1, #0
 8007498:	4618      	mov	r0, r3
 800749a:	f7fc fe50 	bl	800413e <_ZN8touchgfx8Drawable5setXYEss>
    Main_Background.setBitmap(touchgfx::Bitmap(BITMAP_BACKGROUND_1_ID));
 800749e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80074a2:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 80074ac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80074b0:	2100      	movs	r1, #0
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7fe f9b4 	bl	8005820 <_ZN8touchgfx6BitmapC1Et>
 80074b8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80074bc:	4619      	mov	r1, r3
 80074be:	4620      	mov	r0, r4
 80074c0:	f012 fd2b 	bl	8019f1a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    add(Main_Background);
 80074c4:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80074c8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80074d2:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	336c      	adds	r3, #108	; 0x6c
 80074da:	4619      	mov	r1, r3
 80074dc:	4610      	mov	r0, r2
 80074de:	f7fe fa2d 	bl	800593c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    Button_Panel.setPosition(10, 94, 460, 170);
 80074e2:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80074e6:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f103 0098 	add.w	r0, r3, #152	; 0x98
 80074f0:	23aa      	movs	r3, #170	; 0xaa
 80074f2:	9300      	str	r3, [sp, #0]
 80074f4:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
 80074f8:	225e      	movs	r2, #94	; 0x5e
 80074fa:	210a      	movs	r1, #10
 80074fc:	f7fc fdc6 	bl	800408c <_ZN8touchgfx8Drawable11setPositionEssss>
    Button_Panel_Background.setPosition(0, 18, 460, 153);
 8007500:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007504:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
 800750e:	2399      	movs	r3, #153	; 0x99
 8007510:	9300      	str	r3, [sp, #0]
 8007512:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
 8007516:	2212      	movs	r2, #18
 8007518:	2100      	movs	r1, #0
 800751a:	f7fc fdb7 	bl	800408c <_ZN8touchgfx8Drawable11setPositionEssss>
    Button_Panel_Background.setColor(touchgfx::Color::getColorFromRGB(78, 137, 174));
 800751e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007522:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f103 04c4 	add.w	r4, r3, #196	; 0xc4
 800752c:	234e      	movs	r3, #78	; 0x4e
 800752e:	f887 3189 	strb.w	r3, [r7, #393]	; 0x189
 8007532:	2389      	movs	r3, #137	; 0x89
 8007534:	f887 3188 	strb.w	r3, [r7, #392]	; 0x188
 8007538:	23ae      	movs	r3, #174	; 0xae
 800753a:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 800753e:	f897 3189 	ldrb.w	r3, [r7, #393]	; 0x189
 8007542:	041b      	lsls	r3, r3, #16
 8007544:	461a      	mov	r2, r3
 8007546:	f897 3188 	ldrb.w	r3, [r7, #392]	; 0x188
 800754a:	021b      	lsls	r3, r3, #8
 800754c:	431a      	orrs	r2, r3
 800754e:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8007552:	4313      	orrs	r3, r2
 8007554:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007558:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800755c:	4611      	mov	r1, r2
 800755e:	4618      	mov	r0, r3
 8007560:	f7fe f94f 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 8007564:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8007568:	4619      	mov	r1, r3
 800756a:	4620      	mov	r0, r4
 800756c:	f7fe fa1a 	bl	80059a4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Button_Panel_Background.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8007570:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007574:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f103 04c4 	add.w	r4, r3, #196	; 0xc4
 800757e:	23ed      	movs	r3, #237	; 0xed
 8007580:	f887 318c 	strb.w	r3, [r7, #396]	; 0x18c
 8007584:	2366      	movs	r3, #102	; 0x66
 8007586:	f887 318b 	strb.w	r3, [r7, #395]	; 0x18b
 800758a:	2363      	movs	r3, #99	; 0x63
 800758c:	f887 318a 	strb.w	r3, [r7, #394]	; 0x18a
 8007590:	f897 318c 	ldrb.w	r3, [r7, #396]	; 0x18c
 8007594:	041b      	lsls	r3, r3, #16
 8007596:	461a      	mov	r2, r3
 8007598:	f897 318b 	ldrb.w	r3, [r7, #395]	; 0x18b
 800759c:	021b      	lsls	r3, r3, #8
 800759e:	431a      	orrs	r2, r3
 80075a0:	f897 318a 	ldrb.w	r3, [r7, #394]	; 0x18a
 80075a4:	4313      	orrs	r3, r2
 80075a6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80075aa:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80075ae:	4611      	mov	r1, r2
 80075b0:	4618      	mov	r0, r3
 80075b2:	f7fe f926 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 80075b6:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80075ba:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4619      	mov	r1, r3
 80075c2:	4620      	mov	r0, r4
 80075c4:	f7fe fa60 	bl	8005a88 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Button_Panel_Background.setBorderSize(5);
 80075c8:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80075cc:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	33c4      	adds	r3, #196	; 0xc4
 80075d4:	2105      	movs	r1, #5
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7fe fa64 	bl	8005aa4 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Button_Panel.add(Button_Panel_Background);
 80075dc:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80075e0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f103 0298 	add.w	r2, r3, #152	; 0x98
 80075ea:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80075ee:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	33c4      	adds	r3, #196	; 0xc4
 80075f6:	4619      	mov	r1, r3
 80075f8:	4610      	mov	r0, r2
 80075fa:	f010 fac5 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Voice_Comm_Panel.setPosition(5, 84, 450, 82);
 80075fe:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007602:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f103 00f8 	add.w	r0, r3, #248	; 0xf8
 800760c:	2352      	movs	r3, #82	; 0x52
 800760e:	9300      	str	r3, [sp, #0]
 8007610:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 8007614:	2254      	movs	r2, #84	; 0x54
 8007616:	2105      	movs	r1, #5
 8007618:	f7fc fd38 	bl	800408c <_ZN8touchgfx8Drawable11setPositionEssss>
    Voice_Comm_Background.setPosition(0, 0, 450, 82);
 800761c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007620:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f503 7092 	add.w	r0, r3, #292	; 0x124
 800762a:	2352      	movs	r3, #82	; 0x52
 800762c:	9300      	str	r3, [sp, #0]
 800762e:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 8007632:	2200      	movs	r2, #0
 8007634:	2100      	movs	r1, #0
 8007636:	f7fc fd29 	bl	800408c <_ZN8touchgfx8Drawable11setPositionEssss>
    Voice_Comm_Background.setColor(touchgfx::Color::getColorFromRGB(67, 101, 139));
 800763a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800763e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f503 7492 	add.w	r4, r3, #292	; 0x124
 8007648:	2343      	movs	r3, #67	; 0x43
 800764a:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
 800764e:	2365      	movs	r3, #101	; 0x65
 8007650:	f887 318e 	strb.w	r3, [r7, #398]	; 0x18e
 8007654:	238b      	movs	r3, #139	; 0x8b
 8007656:	f887 318d 	strb.w	r3, [r7, #397]	; 0x18d
 800765a:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 800765e:	041b      	lsls	r3, r3, #16
 8007660:	461a      	mov	r2, r3
 8007662:	f897 318e 	ldrb.w	r3, [r7, #398]	; 0x18e
 8007666:	021b      	lsls	r3, r3, #8
 8007668:	431a      	orrs	r2, r3
 800766a:	f897 318d 	ldrb.w	r3, [r7, #397]	; 0x18d
 800766e:	4313      	orrs	r3, r2
 8007670:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007674:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8007678:	4611      	mov	r1, r2
 800767a:	4618      	mov	r0, r3
 800767c:	f7fe f8c1 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 8007680:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007684:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4619      	mov	r1, r3
 800768c:	4620      	mov	r0, r4
 800768e:	f7fe f989 	bl	80059a4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Voice_Comm_Background.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8007692:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007696:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f503 7492 	add.w	r4, r3, #292	; 0x124
 80076a0:	2300      	movs	r3, #0
 80076a2:	f887 3192 	strb.w	r3, [r7, #402]	; 0x192
 80076a6:	2300      	movs	r3, #0
 80076a8:	f887 3191 	strb.w	r3, [r7, #401]	; 0x191
 80076ac:	2300      	movs	r3, #0
 80076ae:	f887 3190 	strb.w	r3, [r7, #400]	; 0x190
 80076b2:	f897 3192 	ldrb.w	r3, [r7, #402]	; 0x192
 80076b6:	041b      	lsls	r3, r3, #16
 80076b8:	461a      	mov	r2, r3
 80076ba:	f897 3191 	ldrb.w	r3, [r7, #401]	; 0x191
 80076be:	021b      	lsls	r3, r3, #8
 80076c0:	431a      	orrs	r2, r3
 80076c2:	f897 3190 	ldrb.w	r3, [r7, #400]	; 0x190
 80076c6:	4313      	orrs	r3, r2
 80076c8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80076cc:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80076d0:	4611      	mov	r1, r2
 80076d2:	4618      	mov	r0, r3
 80076d4:	f7fe f895 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 80076d8:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80076dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4619      	mov	r1, r3
 80076e4:	4620      	mov	r0, r4
 80076e6:	f7fe f9cf 	bl	8005a88 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Voice_Comm_Background.setBorderSize(2);
 80076ea:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80076ee:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80076f8:	2102      	movs	r1, #2
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7fe f9d2 	bl	8005aa4 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Voice_Comm_Panel.add(Voice_Comm_Background);
 8007700:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007704:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f103 02f8 	add.w	r2, r3, #248	; 0xf8
 800770e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007712:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800771c:	4619      	mov	r1, r3
 800771e:	4610      	mov	r0, r2
 8007720:	f010 fa32 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Voicecomm_Textbox.setPosition(157, 0, 137, 20);
 8007724:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007728:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f503 70ac 	add.w	r0, r3, #344	; 0x158
 8007732:	2314      	movs	r3, #20
 8007734:	e004      	b.n	8007740 <_ZN12MainViewBaseC1Ev+0x7c8>
 8007736:	bf00      	nop
 8007738:	0800998f 	.word	0x0800998f
 800773c:	080099bd 	.word	0x080099bd
 8007740:	9300      	str	r3, [sp, #0]
 8007742:	2389      	movs	r3, #137	; 0x89
 8007744:	2200      	movs	r2, #0
 8007746:	219d      	movs	r1, #157	; 0x9d
 8007748:	f7fc fca0 	bl	800408c <_ZN8touchgfx8Drawable11setPositionEssss>
    Voicecomm_Border.setPosition(-1, 3, 138, 17);
 800774c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007750:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f503 70c2 	add.w	r0, r3, #388	; 0x184
 800775a:	2311      	movs	r3, #17
 800775c:	9300      	str	r3, [sp, #0]
 800775e:	238a      	movs	r3, #138	; 0x8a
 8007760:	2203      	movs	r2, #3
 8007762:	f04f 31ff 	mov.w	r1, #4294967295
 8007766:	f7fc fc91 	bl	800408c <_ZN8touchgfx8Drawable11setPositionEssss>
    Voicecomm_Border.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800776a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800776e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f503 74c2 	add.w	r4, r3, #388	; 0x184
 8007778:	2300      	movs	r3, #0
 800777a:	f887 3195 	strb.w	r3, [r7, #405]	; 0x195
 800777e:	2300      	movs	r3, #0
 8007780:	f887 3194 	strb.w	r3, [r7, #404]	; 0x194
 8007784:	2300      	movs	r3, #0
 8007786:	f887 3193 	strb.w	r3, [r7, #403]	; 0x193
 800778a:	f897 3195 	ldrb.w	r3, [r7, #405]	; 0x195
 800778e:	041b      	lsls	r3, r3, #16
 8007790:	461a      	mov	r2, r3
 8007792:	f897 3194 	ldrb.w	r3, [r7, #404]	; 0x194
 8007796:	021b      	lsls	r3, r3, #8
 8007798:	431a      	orrs	r2, r3
 800779a:	f897 3193 	ldrb.w	r3, [r7, #403]	; 0x193
 800779e:	4313      	orrs	r3, r2
 80077a0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80077a4:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 80077a8:	4611      	mov	r1, r2
 80077aa:	4618      	mov	r0, r3
 80077ac:	f7fe f829 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 80077b0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80077b4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4619      	mov	r1, r3
 80077bc:	4620      	mov	r0, r4
 80077be:	f7fe f8f1 	bl	80059a4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Voicecomm_Border.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 80077c2:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80077c6:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f503 74c2 	add.w	r4, r3, #388	; 0x184
 80077d0:	23ed      	movs	r3, #237	; 0xed
 80077d2:	f887 3198 	strb.w	r3, [r7, #408]	; 0x198
 80077d6:	2366      	movs	r3, #102	; 0x66
 80077d8:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
 80077dc:	2363      	movs	r3, #99	; 0x63
 80077de:	f887 3196 	strb.w	r3, [r7, #406]	; 0x196
 80077e2:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 80077e6:	041b      	lsls	r3, r3, #16
 80077e8:	461a      	mov	r2, r3
 80077ea:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 80077ee:	021b      	lsls	r3, r3, #8
 80077f0:	431a      	orrs	r2, r3
 80077f2:	f897 3196 	ldrb.w	r3, [r7, #406]	; 0x196
 80077f6:	4313      	orrs	r3, r2
 80077f8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80077fc:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8007800:	4611      	mov	r1, r2
 8007802:	4618      	mov	r0, r3
 8007804:	f7fd fffd 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 8007808:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800780c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4619      	mov	r1, r3
 8007814:	4620      	mov	r0, r4
 8007816:	f7fe f937 	bl	8005a88 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Voicecomm_Border.setBorderSize(3);
 800781a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800781e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8007828:	2103      	movs	r1, #3
 800782a:	4618      	mov	r0, r3
 800782c:	f7fe f93a 	bl	8005aa4 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Voicecomm_Textbox.add(Voicecomm_Border);
 8007830:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007834:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f503 72ac 	add.w	r2, r3, #344	; 0x158
 800783e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007842:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800784c:	4619      	mov	r1, r3
 800784e:	4610      	mov	r0, r2
 8007850:	f010 f99a 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Voicecomm_Text.setXY(7, 5);
 8007854:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007858:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007862:	2205      	movs	r2, #5
 8007864:	2107      	movs	r1, #7
 8007866:	4618      	mov	r0, r3
 8007868:	f7fc fc69 	bl	800413e <_ZN8touchgfx8Drawable5setXYEss>
    Voicecomm_Text.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800786c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007870:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f503 74dc 	add.w	r4, r3, #440	; 0x1b8
 800787a:	23ff      	movs	r3, #255	; 0xff
 800787c:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
 8007880:	23ff      	movs	r3, #255	; 0xff
 8007882:	f887 319a 	strb.w	r3, [r7, #410]	; 0x19a
 8007886:	23ff      	movs	r3, #255	; 0xff
 8007888:	f887 3199 	strb.w	r3, [r7, #409]	; 0x199
 800788c:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 8007890:	041b      	lsls	r3, r3, #16
 8007892:	461a      	mov	r2, r3
 8007894:	f897 319a 	ldrb.w	r3, [r7, #410]	; 0x19a
 8007898:	021b      	lsls	r3, r3, #8
 800789a:	431a      	orrs	r2, r3
 800789c:	f897 3199 	ldrb.w	r3, [r7, #409]	; 0x199
 80078a0:	4313      	orrs	r3, r2
 80078a2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80078a6:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80078aa:	4611      	mov	r1, r2
 80078ac:	4618      	mov	r0, r3
 80078ae:	f7fd ffa8 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 80078b2:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80078b6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	461a      	mov	r2, r3
 80078be:	f8c7 419c 	str.w	r4, [r7, #412]	; 0x19c
 80078c2:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80078c6:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80078ca:	601a      	str	r2, [r3, #0]
        color = newColor;
 80078cc:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80078d0:	f507 721e 	add.w	r2, r7, #632	; 0x278
 80078d4:	f5a2 720f 	sub.w	r2, r2, #572	; 0x23c
 80078d8:	6812      	ldr	r2, [r2, #0]
 80078da:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80078dc:	bf00      	nop
    Voicecomm_Text.setLinespacing(0);
 80078de:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80078e2:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80078ec:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80078f0:	2300      	movs	r3, #0
 80078f2:	f8a7 31a2 	strh.w	r3, [r7, #418]	; 0x1a2
        linespace = space;
 80078f6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80078fa:	f8b7 21a2 	ldrh.w	r2, [r7, #418]	; 0x1a2
 80078fe:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8007900:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	3384      	adds	r3, #132	; 0x84
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f8d7 41a4 	ldr.w	r4, [r7, #420]	; 0x1a4
 800790e:	463a      	mov	r2, r7
 8007910:	f8d7 11a4 	ldr.w	r1, [r7, #420]	; 0x1a4
 8007914:	4610      	mov	r0, r2
 8007916:	4798      	blx	r3
 8007918:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800791c:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 8007920:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8007924:	ca07      	ldmia	r2, {r0, r1, r2}
 8007926:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800792a:	bf00      	nop
    Voicecomm_Text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_2Q8N));
 800792c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007930:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f503 74dc 	add.w	r4, r3, #440	; 0x1b8
 800793a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800793e:	2101      	movs	r1, #1
 8007940:	4618      	mov	r0, r3
 8007942:	f7fe f8bf 	bl	8005ac4 <_ZN8touchgfx9TypedTextC1Et>
 8007946:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800794a:	4619      	mov	r1, r3
 800794c:	4620      	mov	r0, r4
 800794e:	f012 f8ef 	bl	8019b30 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8007952:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007956:	4618      	mov	r0, r3
 8007958:	f7fc fade 	bl	8003f18 <_ZN8touchgfx9TypedTextD1Ev>
    Voicecomm_Textbox.add(Voicecomm_Text);
 800795c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007960:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f503 72ac 	add.w	r2, r3, #344	; 0x158
 800796a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800796e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007978:	4619      	mov	r1, r3
 800797a:	4610      	mov	r0, r2
 800797c:	f010 f904 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Voice_Comm_Panel.add(Voicecomm_Textbox);
 8007980:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007984:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f103 02f8 	add.w	r2, r3, #248	; 0xf8
 800798e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007992:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800799c:	4619      	mov	r1, r3
 800799e:	4610      	mov	r0, r2
 80079a0:	f010 f8f2 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Volume_Textbox.setPosition(143, 58, 70, 16);
 80079a4:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80079a8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f503 7000 	add.w	r0, r3, #512	; 0x200
 80079b2:	2310      	movs	r3, #16
 80079b4:	9300      	str	r3, [sp, #0]
 80079b6:	2346      	movs	r3, #70	; 0x46
 80079b8:	223a      	movs	r2, #58	; 0x3a
 80079ba:	218f      	movs	r1, #143	; 0x8f
 80079bc:	f7fc fb66 	bl	800408c <_ZN8touchgfx8Drawable11setPositionEssss>
    Volume_Text_Border.setPosition(0, 0, 70, 16);
 80079c0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80079c4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f503 700b 	add.w	r0, r3, #556	; 0x22c
 80079ce:	2310      	movs	r3, #16
 80079d0:	9300      	str	r3, [sp, #0]
 80079d2:	2346      	movs	r3, #70	; 0x46
 80079d4:	2200      	movs	r2, #0
 80079d6:	2100      	movs	r1, #0
 80079d8:	f7fc fb58 	bl	800408c <_ZN8touchgfx8Drawable11setPositionEssss>
    Volume_Text_Border.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80079dc:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80079e0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f503 740b 	add.w	r4, r3, #556	; 0x22c
 80079ea:	2300      	movs	r3, #0
 80079ec:	f887 31ac 	strb.w	r3, [r7, #428]	; 0x1ac
 80079f0:	2300      	movs	r3, #0
 80079f2:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab
 80079f6:	2300      	movs	r3, #0
 80079f8:	f887 31aa 	strb.w	r3, [r7, #426]	; 0x1aa
 80079fc:	f897 31ac 	ldrb.w	r3, [r7, #428]	; 0x1ac
 8007a00:	041b      	lsls	r3, r3, #16
 8007a02:	461a      	mov	r2, r3
 8007a04:	f897 31ab 	ldrb.w	r3, [r7, #427]	; 0x1ab
 8007a08:	021b      	lsls	r3, r3, #8
 8007a0a:	431a      	orrs	r2, r3
 8007a0c:	f897 31aa 	ldrb.w	r3, [r7, #426]	; 0x1aa
 8007a10:	4313      	orrs	r3, r2
 8007a12:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007a16:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8007a1a:	4611      	mov	r1, r2
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f7fd fef0 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 8007a22:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007a26:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	4620      	mov	r0, r4
 8007a30:	f7fd ffb8 	bl	80059a4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Volume_Text_Border.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8007a34:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007a38:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f503 740b 	add.w	r4, r3, #556	; 0x22c
 8007a42:	23ed      	movs	r3, #237	; 0xed
 8007a44:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
 8007a48:	2366      	movs	r3, #102	; 0x66
 8007a4a:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
 8007a4e:	2363      	movs	r3, #99	; 0x63
 8007a50:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 8007a54:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8007a58:	041b      	lsls	r3, r3, #16
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8007a60:	021b      	lsls	r3, r3, #8
 8007a62:	431a      	orrs	r2, r3
 8007a64:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007a6e:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8007a72:	4611      	mov	r1, r2
 8007a74:	4618      	mov	r0, r3
 8007a76:	f7fd fec4 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 8007a7a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007a7e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4619      	mov	r1, r3
 8007a86:	4620      	mov	r0, r4
 8007a88:	f7fd fffe 	bl	8005a88 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Volume_Text_Border.setBorderSize(3);
 8007a8c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007a90:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 8007a9a:	2103      	movs	r1, #3
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f7fe f801 	bl	8005aa4 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Volume_Textbox.add(Volume_Text_Border);
 8007aa2:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007aa6:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f503 7200 	add.w	r2, r3, #512	; 0x200
 8007ab0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007ab4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 8007abe:	4619      	mov	r1, r3
 8007ac0:	4610      	mov	r0, r2
 8007ac2:	f010 f861 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    textProgress1.setXY(3, 3);
 8007ac6:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007aca:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8007ad4:	2203      	movs	r2, #3
 8007ad6:	2103      	movs	r1, #3
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f7fc fb30 	bl	800413e <_ZN8touchgfx8Drawable5setXYEss>
    textProgress1.setProgressIndicatorPosition(0, 0, 64, 20);
 8007ade:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007ae2:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f503 7018 	add.w	r0, r3, #608	; 0x260
 8007aec:	2314      	movs	r3, #20
 8007aee:	9300      	str	r3, [sp, #0]
 8007af0:	2340      	movs	r3, #64	; 0x40
 8007af2:	2200      	movs	r2, #0
 8007af4:	2100      	movs	r1, #0
 8007af6:	f00f fe33 	bl	8017760 <_ZN8touchgfx12TextProgress28setProgressIndicatorPositionEssss>
    textProgress1.setRange(0, 100);
 8007afa:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007afe:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f503 7018 	add.w	r0, r3, #608	; 0x260
 8007b08:	2300      	movs	r3, #0
 8007b0a:	9300      	str	r3, [sp, #0]
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	2264      	movs	r2, #100	; 0x64
 8007b10:	2100      	movs	r1, #0
 8007b12:	f00f fea5 	bl	8017860 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    textProgress1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8007b16:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007b1a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f503 7418 	add.w	r4, r3, #608	; 0x260
 8007b24:	23ff      	movs	r3, #255	; 0xff
 8007b26:	f887 31b2 	strb.w	r3, [r7, #434]	; 0x1b2
 8007b2a:	23ff      	movs	r3, #255	; 0xff
 8007b2c:	f887 31b1 	strb.w	r3, [r7, #433]	; 0x1b1
 8007b30:	23ff      	movs	r3, #255	; 0xff
 8007b32:	f887 31b0 	strb.w	r3, [r7, #432]	; 0x1b0
 8007b36:	f897 31b2 	ldrb.w	r3, [r7, #434]	; 0x1b2
 8007b3a:	041b      	lsls	r3, r3, #16
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	f897 31b1 	ldrb.w	r3, [r7, #433]	; 0x1b1
 8007b42:	021b      	lsls	r3, r3, #8
 8007b44:	431a      	orrs	r2, r3
 8007b46:	f897 31b0 	ldrb.w	r3, [r7, #432]	; 0x1b0
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007b50:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8007b54:	4611      	mov	r1, r2
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7fd fe53 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 8007b5c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007b60:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4619      	mov	r1, r3
 8007b68:	4620      	mov	r0, r4
 8007b6a:	f00f fd86 	bl	801767a <_ZN8touchgfx12TextProgress8setColorENS_9colortypeE>
    textProgress1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_F9M9));
 8007b6e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007b72:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f503 7418 	add.w	r4, r3, #608	; 0x260
 8007b7c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007b80:	2109      	movs	r1, #9
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7fd ff9e 	bl	8005ac4 <_ZN8touchgfx9TypedTextC1Et>
 8007b88:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	4620      	mov	r0, r4
 8007b90:	f00f fd8f 	bl	80176b2 <_ZN8touchgfx12TextProgress12setTypedTextERKNS_9TypedTextE>
 8007b94:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f7fc f9bd 	bl	8003f18 <_ZN8touchgfx9TypedTextD1Ev>
    textProgress1.setBackground(touchgfx::Bitmap(BITMAP_VOLUME_BACKGROUND2_ID));
 8007b9e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007ba2:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f503 7418 	add.w	r4, r3, #608	; 0x260
 8007bac:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007bb0:	210d      	movs	r1, #13
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f7fd fe34 	bl	8005820 <_ZN8touchgfx6BitmapC1Et>
 8007bb8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	4620      	mov	r0, r4
 8007bc0:	f00f ff74 	bl	8017aac <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    textProgress1.setValue(50);
 8007bc4:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007bc8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8007bd2:	2132      	movs	r1, #50	; 0x32
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f00f fd77 	bl	80176c8 <_ZN8touchgfx12TextProgress8setValueEi>
    Volume_Textbox.add(textProgress1);
 8007bda:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007bde:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f503 7200 	add.w	r2, r3, #512	; 0x200
 8007be8:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007bec:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	4610      	mov	r0, r2
 8007bfa:	f00f ffc5 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Voice_Comm_Panel.add(Volume_Textbox);
 8007bfe:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007c02:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f103 02f8 	add.w	r2, r3, #248	; 0xf8
 8007c0c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007c10:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	4610      	mov	r0, r2
 8007c1e:	f00f ffb3 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Toggle_Textbox.setPosition(388, 58, 39, 17);
 8007c22:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007c26:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f503 705d 	add.w	r0, r3, #884	; 0x374
 8007c30:	2311      	movs	r3, #17
 8007c32:	9300      	str	r3, [sp, #0]
 8007c34:	2327      	movs	r3, #39	; 0x27
 8007c36:	223a      	movs	r2, #58	; 0x3a
 8007c38:	f44f 71c2 	mov.w	r1, #388	; 0x184
 8007c3c:	f7fc fa26 	bl	800408c <_ZN8touchgfx8Drawable11setPositionEssss>
    Toggle_Text_Border.setPosition(0, 0, 38, 16);
 8007c40:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007c44:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f503 7068 	add.w	r0, r3, #928	; 0x3a0
 8007c4e:	2310      	movs	r3, #16
 8007c50:	9300      	str	r3, [sp, #0]
 8007c52:	2326      	movs	r3, #38	; 0x26
 8007c54:	2200      	movs	r2, #0
 8007c56:	2100      	movs	r1, #0
 8007c58:	f7fc fa18 	bl	800408c <_ZN8touchgfx8Drawable11setPositionEssss>
    Toggle_Text_Border.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8007c5c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007c60:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f503 7468 	add.w	r4, r3, #928	; 0x3a0
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	f887 31b5 	strb.w	r3, [r7, #437]	; 0x1b5
 8007c70:	2300      	movs	r3, #0
 8007c72:	f887 31b4 	strb.w	r3, [r7, #436]	; 0x1b4
 8007c76:	2300      	movs	r3, #0
 8007c78:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3
 8007c7c:	f897 31b5 	ldrb.w	r3, [r7, #437]	; 0x1b5
 8007c80:	041b      	lsls	r3, r3, #16
 8007c82:	461a      	mov	r2, r3
 8007c84:	f897 31b4 	ldrb.w	r3, [r7, #436]	; 0x1b4
 8007c88:	021b      	lsls	r3, r3, #8
 8007c8a:	431a      	orrs	r2, r3
 8007c8c:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 8007c90:	4313      	orrs	r3, r2
 8007c92:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007c96:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8007c9a:	4611      	mov	r1, r2
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f7fd fdb0 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 8007ca2:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007ca6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4619      	mov	r1, r3
 8007cae:	4620      	mov	r0, r4
 8007cb0:	f7fd fe78 	bl	80059a4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Toggle_Text_Border.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8007cb4:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007cb8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f503 7468 	add.w	r4, r3, #928	; 0x3a0
 8007cc2:	23ed      	movs	r3, #237	; 0xed
 8007cc4:	f887 31b8 	strb.w	r3, [r7, #440]	; 0x1b8
 8007cc8:	2366      	movs	r3, #102	; 0x66
 8007cca:	f887 31b7 	strb.w	r3, [r7, #439]	; 0x1b7
 8007cce:	2363      	movs	r3, #99	; 0x63
 8007cd0:	f887 31b6 	strb.w	r3, [r7, #438]	; 0x1b6
 8007cd4:	f897 31b8 	ldrb.w	r3, [r7, #440]	; 0x1b8
 8007cd8:	041b      	lsls	r3, r3, #16
 8007cda:	461a      	mov	r2, r3
 8007cdc:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 8007ce0:	021b      	lsls	r3, r3, #8
 8007ce2:	431a      	orrs	r2, r3
 8007ce4:	f897 31b6 	ldrb.w	r3, [r7, #438]	; 0x1b6
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007cee:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8007cf2:	4611      	mov	r1, r2
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f7fd fd84 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 8007cfa:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007cfe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4619      	mov	r1, r3
 8007d06:	4620      	mov	r0, r4
 8007d08:	f7fd febe 	bl	8005a88 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Toggle_Text_Border.setBorderSize(3);
 8007d0c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007d10:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 8007d1a:	2103      	movs	r1, #3
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f7fd fec1 	bl	8005aa4 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Toggle_Textbox.add(Toggle_Text_Border);
 8007d22:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007d26:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f503 725d 	add.w	r2, r3, #884	; 0x374
 8007d30:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007d34:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 8007d3e:	4619      	mov	r1, r3
 8007d40:	4610      	mov	r0, r2
 8007d42:	f00f ff21 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Toggle_Text.setXY(4, 3);
 8007d46:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007d4a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f503 7375 	add.w	r3, r3, #980	; 0x3d4
 8007d54:	2203      	movs	r2, #3
 8007d56:	2104      	movs	r1, #4
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7fc f9f0 	bl	800413e <_ZN8touchgfx8Drawable5setXYEss>
    Toggle_Text.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8007d5e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007d62:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f503 7475 	add.w	r4, r3, #980	; 0x3d4
 8007d6c:	23ff      	movs	r3, #255	; 0xff
 8007d6e:	f887 31bb 	strb.w	r3, [r7, #443]	; 0x1bb
 8007d72:	23ff      	movs	r3, #255	; 0xff
 8007d74:	f887 31ba 	strb.w	r3, [r7, #442]	; 0x1ba
 8007d78:	23ff      	movs	r3, #255	; 0xff
 8007d7a:	f887 31b9 	strb.w	r3, [r7, #441]	; 0x1b9
 8007d7e:	f897 31bb 	ldrb.w	r3, [r7, #443]	; 0x1bb
 8007d82:	041b      	lsls	r3, r3, #16
 8007d84:	461a      	mov	r2, r3
 8007d86:	f897 31ba 	ldrb.w	r3, [r7, #442]	; 0x1ba
 8007d8a:	021b      	lsls	r3, r3, #8
 8007d8c:	431a      	orrs	r2, r3
 8007d8e:	f897 31b9 	ldrb.w	r3, [r7, #441]	; 0x1b9
 8007d92:	4313      	orrs	r3, r2
 8007d94:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007d98:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8007d9c:	4611      	mov	r1, r2
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f7fd fd2f 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 8007da4:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007da8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	461a      	mov	r2, r3
 8007db0:	f8c7 41bc 	str.w	r4, [r7, #444]	; 0x1bc
 8007db4:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007db8:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8007dbc:	601a      	str	r2, [r3, #0]
        color = newColor;
 8007dbe:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8007dc2:	f507 721e 	add.w	r2, r7, #632	; 0x278
 8007dc6:	f5a2 7210 	sub.w	r2, r2, #576	; 0x240
 8007dca:	6812      	ldr	r2, [r2, #0]
 8007dcc:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8007dce:	bf00      	nop
    Toggle_Text.setLinespacing(0);
 8007dd0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007dd4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f503 7375 	add.w	r3, r3, #980	; 0x3d4
 8007dde:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8007de2:	2300      	movs	r3, #0
 8007de4:	f8a7 31c2 	strh.w	r3, [r7, #450]	; 0x1c2
        linespace = space;
 8007de8:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8007dec:	f8b7 21c2 	ldrh.w	r2, [r7, #450]	; 0x1c2
 8007df0:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8007df2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	3384      	adds	r3, #132	; 0x84
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f8d7 41c4 	ldr.w	r4, [r7, #452]	; 0x1c4
 8007e00:	463a      	mov	r2, r7
 8007e02:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 8007e06:	4610      	mov	r0, r2
 8007e08:	4798      	blx	r3
 8007e0a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007e0e:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 8007e12:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8007e16:	ca07      	ldmia	r2, {r0, r1, r2}
 8007e18:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8007e1c:	bf00      	nop
    Toggle_Text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_P64J));
 8007e1e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007e22:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f503 7475 	add.w	r4, r3, #980	; 0x3d4
 8007e2c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007e30:	2100      	movs	r1, #0
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7fd fe46 	bl	8005ac4 <_ZN8touchgfx9TypedTextC1Et>
 8007e38:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007e3c:	4619      	mov	r1, r3
 8007e3e:	4620      	mov	r0, r4
 8007e40:	f011 fe76 	bl	8019b30 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8007e44:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f7fc f865 	bl	8003f18 <_ZN8touchgfx9TypedTextD1Ev>
    Toggle_Textbox.add(Toggle_Text);
 8007e4e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007e52:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f503 725d 	add.w	r2, r3, #884	; 0x374
 8007e5c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007e60:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f503 7375 	add.w	r3, r3, #980	; 0x3d4
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	4610      	mov	r0, r2
 8007e6e:	f00f fe8b 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Voice_Comm_Panel.add(Toggle_Textbox);
 8007e72:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007e76:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f103 02f8 	add.w	r2, r3, #248	; 0xf8
 8007e80:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007e84:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f503 735d 	add.w	r3, r3, #884	; 0x374
 8007e8e:	4619      	mov	r1, r3
 8007e90:	4610      	mov	r0, r2
 8007e92:	f00f fe79 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Volume_Slider.setXY(8, 25);
 8007e96:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007e9a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8007ea4:	2219      	movs	r2, #25
 8007ea6:	2108      	movs	r1, #8
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f7fc f948 	bl	800413e <_ZN8touchgfx8Drawable5setXYEss>
    Volume_Slider.setBitmaps(touchgfx::Bitmap(BITMAP_SLIDER_DARK_ID), touchgfx::Bitmap(BITMAP_SLIDER_LIGHT_ID), touchgfx::Bitmap(BITMAP_UNPRESSED_BUTTON_ID));
 8007eae:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007eb2:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f203 441c 	addw	r4, r3, #1052	; 0x41c
 8007ebc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007ec0:	2104      	movs	r1, #4
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7fd fcac 	bl	8005820 <_ZN8touchgfx6BitmapC1Et>
 8007ec8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007ecc:	2105      	movs	r1, #5
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7fd fca6 	bl	8005820 <_ZN8touchgfx6BitmapC1Et>
 8007ed4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8007ed8:	210b      	movs	r1, #11
 8007eda:	4618      	mov	r0, r3
 8007edc:	f7fd fca0 	bl	8005820 <_ZN8touchgfx6BitmapC1Et>
 8007ee0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8007ee4:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8007ee8:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8007eec:	4620      	mov	r0, r4
 8007eee:	f010 fb29 	bl	8018544 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>
    Volume_Slider.setupHorizontalSlider(2, 9, 0, 0, 310);
 8007ef2:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007ef6:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f203 401c 	addw	r0, r3, #1052	; 0x41c
 8007f00:	f44f 739b 	mov.w	r3, #310	; 0x136
 8007f04:	9301      	str	r3, [sp, #4]
 8007f06:	2300      	movs	r3, #0
 8007f08:	9300      	str	r3, [sp, #0]
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	2209      	movs	r2, #9
 8007f0e:	2102      	movs	r1, #2
 8007f10:	f010 fa39 	bl	8018386 <_ZN8touchgfx6Slider21setupHorizontalSliderEsssss>
    Volume_Slider.setValueRange(0, 100);
 8007f14:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007f18:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8007f22:	2264      	movs	r2, #100	; 0x64
 8007f24:	2100      	movs	r1, #0
 8007f26:	4618      	mov	r0, r3
 8007f28:	f010 f8f3 	bl	8018112 <_ZN8touchgfx6Slider13setValueRangeEss>
    Volume_Slider.setValue(50);
 8007f2c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007f30:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8007f3a:	2132      	movs	r1, #50	; 0x32
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f010 f8b0 	bl	80180a2 <_ZN8touchgfx6Slider8setValueEs>
    Volume_Slider.setNewValueCallback(sliderValueChangedCallback);
 8007f42:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007f46:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f203 421c 	addw	r2, r3, #1052	; 0x41c
 8007f50:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007f54:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f603 3368 	addw	r3, r3, #2920	; 0xb68
 8007f5e:	4619      	mov	r1, r3
 8007f60:	4610      	mov	r0, r2
 8007f62:	f7fe ff6b 	bl	8006e3c <_ZN8touchgfx6Slider19setNewValueCallbackERNS_15GenericCallbackIRKS0_ivEE>
    Voice_Comm_Panel.add(Volume_Slider);
 8007f66:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007f6a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f103 02f8 	add.w	r2, r3, #248	; 0xf8
 8007f74:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007f78:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8007f82:	4619      	mov	r1, r3
 8007f84:	4610      	mov	r0, r2
 8007f86:	f00f fdff 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Voice_Toggle_Button.setXY(372, 23);
 8007f8a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007f8e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8007f98:	2217      	movs	r2, #23
 8007f9a:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7fc f8cd 	bl	800413e <_ZN8touchgfx8Drawable5setXYEss>
    Voice_Toggle_Button.setBitmaps(touchgfx::Bitmap(BITMAP_TOGGLE_BUTTON_ON2_ID), touchgfx::Bitmap(BITMAP_TOGGLE_BUTTON_OFF2_ID));
 8007fa4:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007fa8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f503 64a2 	add.w	r4, r3, #1296	; 0x510
 8007fb2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007fb6:	210a      	movs	r1, #10
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f7fd fc31 	bl	8005820 <_ZN8touchgfx6BitmapC1Et>
 8007fbe:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007fc2:	2108      	movs	r1, #8
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f7fd fc2b 	bl	8005820 <_ZN8touchgfx6BitmapC1Et>
 8007fca:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8007fce:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	4620      	mov	r0, r4
 8007fd6:	f7fe ff40 	bl	8006e5a <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>
    Voice_Toggle_Button.setAction(buttonCallback);
 8007fda:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007fde:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 8007fe8:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8007fec:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f603 3378 	addw	r3, r3, #2936	; 0xb78
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	4610      	mov	r0, r2
 8007ffa:	f7fd fdf3 	bl	8005be4 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>
    Voice_Comm_Panel.add(Voice_Toggle_Button);
 8007ffe:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008002:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f103 02f8 	add.w	r2, r3, #248	; 0xf8
 800800c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008010:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 800801a:	4619      	mov	r1, r3
 800801c:	4610      	mov	r0, r2
 800801e:	f00f fdb3 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Button_Panel.add(Voice_Comm_Panel);
 8008022:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008026:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8008030:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008034:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	33f8      	adds	r3, #248	; 0xf8
 800803c:	4619      	mov	r1, r3
 800803e:	4610      	mov	r0, r2
 8008040:	f00f fda2 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Anomaly_Detection_Panel.setPosition(5, 23, 450, 67);
 8008044:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008048:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f503 60a9 	add.w	r0, r3, #1352	; 0x548
 8008052:	2343      	movs	r3, #67	; 0x43
 8008054:	9300      	str	r3, [sp, #0]
 8008056:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 800805a:	2217      	movs	r2, #23
 800805c:	2105      	movs	r1, #5
 800805e:	f7fc f815 	bl	800408c <_ZN8touchgfx8Drawable11setPositionEssss>
    Anomaly_Detection_Background.setPosition(0, 0, 450, 63);
 8008062:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008066:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f203 5074 	addw	r0, r3, #1396	; 0x574
 8008070:	233f      	movs	r3, #63	; 0x3f
 8008072:	9300      	str	r3, [sp, #0]
 8008074:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 8008078:	2200      	movs	r2, #0
 800807a:	2100      	movs	r1, #0
 800807c:	f7fc f806 	bl	800408c <_ZN8touchgfx8Drawable11setPositionEssss>
    Anomaly_Detection_Background.setColor(touchgfx::Color::getColorFromRGB(67, 101, 139));
 8008080:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008084:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f203 5474 	addw	r4, r3, #1396	; 0x574
 800808e:	2343      	movs	r3, #67	; 0x43
 8008090:	f887 31cb 	strb.w	r3, [r7, #459]	; 0x1cb
 8008094:	2365      	movs	r3, #101	; 0x65
 8008096:	f887 31ca 	strb.w	r3, [r7, #458]	; 0x1ca
 800809a:	238b      	movs	r3, #139	; 0x8b
 800809c:	f887 31c9 	strb.w	r3, [r7, #457]	; 0x1c9
 80080a0:	f897 31cb 	ldrb.w	r3, [r7, #459]	; 0x1cb
 80080a4:	041b      	lsls	r3, r3, #16
 80080a6:	461a      	mov	r2, r3
 80080a8:	f897 31ca 	ldrb.w	r3, [r7, #458]	; 0x1ca
 80080ac:	021b      	lsls	r3, r3, #8
 80080ae:	431a      	orrs	r2, r3
 80080b0:	f897 31c9 	ldrb.w	r3, [r7, #457]	; 0x1c9
 80080b4:	4313      	orrs	r3, r2
 80080b6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80080ba:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80080be:	4611      	mov	r1, r2
 80080c0:	4618      	mov	r0, r3
 80080c2:	f7fd fb9e 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 80080c6:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80080ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4619      	mov	r1, r3
 80080d2:	4620      	mov	r0, r4
 80080d4:	f7fd fc66 	bl	80059a4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Anomaly_Detection_Background.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80080d8:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80080dc:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f203 5474 	addw	r4, r3, #1396	; 0x574
 80080e6:	2300      	movs	r3, #0
 80080e8:	f887 31ce 	strb.w	r3, [r7, #462]	; 0x1ce
 80080ec:	2300      	movs	r3, #0
 80080ee:	f887 31cd 	strb.w	r3, [r7, #461]	; 0x1cd
 80080f2:	2300      	movs	r3, #0
 80080f4:	f887 31cc 	strb.w	r3, [r7, #460]	; 0x1cc
 80080f8:	f897 31ce 	ldrb.w	r3, [r7, #462]	; 0x1ce
 80080fc:	041b      	lsls	r3, r3, #16
 80080fe:	461a      	mov	r2, r3
 8008100:	f897 31cd 	ldrb.w	r3, [r7, #461]	; 0x1cd
 8008104:	021b      	lsls	r3, r3, #8
 8008106:	431a      	orrs	r2, r3
 8008108:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 800810c:	4313      	orrs	r3, r2
 800810e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008112:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8008116:	4611      	mov	r1, r2
 8008118:	4618      	mov	r0, r3
 800811a:	f7fd fb72 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 800811e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008122:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4619      	mov	r1, r3
 800812a:	4620      	mov	r0, r4
 800812c:	f7fd fcac 	bl	8005a88 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Anomaly_Detection_Background.setBorderSize(2);
 8008130:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008134:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f203 5374 	addw	r3, r3, #1396	; 0x574
 800813e:	2102      	movs	r1, #2
 8008140:	4618      	mov	r0, r3
 8008142:	f7fd fcaf 	bl	8005aa4 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Anomaly_Detection_Panel.add(Anomaly_Detection_Background);
 8008146:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800814a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f503 62a9 	add.w	r2, r3, #1352	; 0x548
 8008154:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008158:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f203 5374 	addw	r3, r3, #1396	; 0x574
 8008162:	4619      	mov	r1, r3
 8008164:	4610      	mov	r0, r2
 8008166:	f00f fd0f 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Button_Panel.add(Anomaly_Detection_Panel);
 800816a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800816e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8008178:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800817c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f503 63a9 	add.w	r3, r3, #1352	; 0x548
 8008186:	4619      	mov	r1, r3
 8008188:	4610      	mov	r0, r2
 800818a:	f00f fcfd 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    add(Button_Panel);
 800818e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008192:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800819c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	3398      	adds	r3, #152	; 0x98
 80081a4:	4619      	mov	r1, r3
 80081a6:	4610      	mov	r0, r2
 80081a8:	f7fd fbc8 	bl	800593c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    Message_panel.setPosition(10, 8, 460, 109);
 80081ac:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80081b0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f503 60b5 	add.w	r0, r3, #1448	; 0x5a8
 80081ba:	236d      	movs	r3, #109	; 0x6d
 80081bc:	9300      	str	r3, [sp, #0]
 80081be:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
 80081c2:	2208      	movs	r2, #8
 80081c4:	210a      	movs	r1, #10
 80081c6:	f7fb ff61 	bl	800408c <_ZN8touchgfx8Drawable11setPositionEssss>
    Button_Panel_Background_1.setPosition(0, 0, 460, 109);
 80081ca:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80081ce:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f203 50d4 	addw	r0, r3, #1492	; 0x5d4
 80081d8:	236d      	movs	r3, #109	; 0x6d
 80081da:	9300      	str	r3, [sp, #0]
 80081dc:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
 80081e0:	2200      	movs	r2, #0
 80081e2:	2100      	movs	r1, #0
 80081e4:	f7fb ff52 	bl	800408c <_ZN8touchgfx8Drawable11setPositionEssss>
    Button_Panel_Background_1.setColor(touchgfx::Color::getColorFromRGB(78, 137, 174));
 80081e8:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80081ec:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f203 54d4 	addw	r4, r3, #1492	; 0x5d4
 80081f6:	234e      	movs	r3, #78	; 0x4e
 80081f8:	f887 31d1 	strb.w	r3, [r7, #465]	; 0x1d1
 80081fc:	2389      	movs	r3, #137	; 0x89
 80081fe:	f887 31d0 	strb.w	r3, [r7, #464]	; 0x1d0
 8008202:	23ae      	movs	r3, #174	; 0xae
 8008204:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
 8008208:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 800820c:	041b      	lsls	r3, r3, #16
 800820e:	461a      	mov	r2, r3
 8008210:	f897 31d0 	ldrb.w	r3, [r7, #464]	; 0x1d0
 8008214:	021b      	lsls	r3, r3, #8
 8008216:	431a      	orrs	r2, r3
 8008218:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 800821c:	4313      	orrs	r3, r2
 800821e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008222:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008226:	4611      	mov	r1, r2
 8008228:	4618      	mov	r0, r3
 800822a:	f7fd faea 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 800822e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008232:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4619      	mov	r1, r3
 800823a:	4620      	mov	r0, r4
 800823c:	f7fd fbb2 	bl	80059a4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Button_Panel_Background_1.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8008240:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008244:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f203 54d4 	addw	r4, r3, #1492	; 0x5d4
 800824e:	23ed      	movs	r3, #237	; 0xed
 8008250:	f887 31d4 	strb.w	r3, [r7, #468]	; 0x1d4
 8008254:	2366      	movs	r3, #102	; 0x66
 8008256:	f887 31d3 	strb.w	r3, [r7, #467]	; 0x1d3
 800825a:	2363      	movs	r3, #99	; 0x63
 800825c:	f887 31d2 	strb.w	r3, [r7, #466]	; 0x1d2
 8008260:	f897 31d4 	ldrb.w	r3, [r7, #468]	; 0x1d4
 8008264:	041b      	lsls	r3, r3, #16
 8008266:	461a      	mov	r2, r3
 8008268:	f897 31d3 	ldrb.w	r3, [r7, #467]	; 0x1d3
 800826c:	021b      	lsls	r3, r3, #8
 800826e:	431a      	orrs	r2, r3
 8008270:	f897 31d2 	ldrb.w	r3, [r7, #466]	; 0x1d2
 8008274:	4313      	orrs	r3, r2
 8008276:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800827a:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800827e:	4611      	mov	r1, r2
 8008280:	4618      	mov	r0, r3
 8008282:	f7fd fabe 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 8008286:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800828a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4619      	mov	r1, r3
 8008292:	4620      	mov	r0, r4
 8008294:	f7fd fbf8 	bl	8005a88 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Button_Panel_Background_1.setBorderSize(5);
 8008298:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800829c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f203 53d4 	addw	r3, r3, #1492	; 0x5d4
 80082a6:	2105      	movs	r1, #5
 80082a8:	4618      	mov	r0, r3
 80082aa:	f7fd fbfb 	bl	8005aa4 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Message_panel.add(Button_Panel_Background_1);
 80082ae:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80082b2:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f503 62b5 	add.w	r2, r3, #1448	; 0x5a8
 80082bc:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80082c0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f203 53d4 	addw	r3, r3, #1492	; 0x5d4
 80082ca:	4619      	mov	r1, r3
 80082cc:	4610      	mov	r0, r2
 80082ce:	f00f fc5b 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Message_Board_Panel_1.setPosition(5, 4, 450, 100);
 80082d2:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80082d6:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f503 60c1 	add.w	r0, r3, #1544	; 0x608
 80082e0:	2364      	movs	r3, #100	; 0x64
 80082e2:	9300      	str	r3, [sp, #0]
 80082e4:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 80082e8:	2204      	movs	r2, #4
 80082ea:	2105      	movs	r1, #5
 80082ec:	f7fb fece 	bl	800408c <_ZN8touchgfx8Drawable11setPositionEssss>
    MessageBoard_Background_1.setPosition(0, 0, 450, 100);
 80082f0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80082f4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f203 6034 	addw	r0, r3, #1588	; 0x634
 80082fe:	2364      	movs	r3, #100	; 0x64
 8008300:	9300      	str	r3, [sp, #0]
 8008302:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 8008306:	2200      	movs	r2, #0
 8008308:	2100      	movs	r1, #0
 800830a:	f7fb febf 	bl	800408c <_ZN8touchgfx8Drawable11setPositionEssss>
    MessageBoard_Background_1.setColor(touchgfx::Color::getColorFromRGB(67, 101, 139));
 800830e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008312:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f203 6434 	addw	r4, r3, #1588	; 0x634
 800831c:	2343      	movs	r3, #67	; 0x43
 800831e:	f887 31d7 	strb.w	r3, [r7, #471]	; 0x1d7
 8008322:	2365      	movs	r3, #101	; 0x65
 8008324:	f887 31d6 	strb.w	r3, [r7, #470]	; 0x1d6
 8008328:	238b      	movs	r3, #139	; 0x8b
 800832a:	f887 31d5 	strb.w	r3, [r7, #469]	; 0x1d5
 800832e:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8008332:	041b      	lsls	r3, r3, #16
 8008334:	461a      	mov	r2, r3
 8008336:	f897 31d6 	ldrb.w	r3, [r7, #470]	; 0x1d6
 800833a:	021b      	lsls	r3, r3, #8
 800833c:	431a      	orrs	r2, r3
 800833e:	f897 31d5 	ldrb.w	r3, [r7, #469]	; 0x1d5
 8008342:	4313      	orrs	r3, r2
 8008344:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008348:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800834c:	4611      	mov	r1, r2
 800834e:	4618      	mov	r0, r3
 8008350:	f7fd fa57 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 8008354:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008358:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4619      	mov	r1, r3
 8008360:	4620      	mov	r0, r4
 8008362:	f7fd fb1f 	bl	80059a4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    MessageBoard_Background_1.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8008366:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800836a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f203 6434 	addw	r4, r3, #1588	; 0x634
 8008374:	2300      	movs	r3, #0
 8008376:	f887 31da 	strb.w	r3, [r7, #474]	; 0x1da
 800837a:	2300      	movs	r3, #0
 800837c:	f887 31d9 	strb.w	r3, [r7, #473]	; 0x1d9
 8008380:	2300      	movs	r3, #0
 8008382:	f887 31d8 	strb.w	r3, [r7, #472]	; 0x1d8
 8008386:	f897 31da 	ldrb.w	r3, [r7, #474]	; 0x1da
 800838a:	041b      	lsls	r3, r3, #16
 800838c:	461a      	mov	r2, r3
 800838e:	f897 31d9 	ldrb.w	r3, [r7, #473]	; 0x1d9
 8008392:	021b      	lsls	r3, r3, #8
 8008394:	431a      	orrs	r2, r3
 8008396:	f897 31d8 	ldrb.w	r3, [r7, #472]	; 0x1d8
 800839a:	4313      	orrs	r3, r2
 800839c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80083a0:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80083a4:	4611      	mov	r1, r2
 80083a6:	4618      	mov	r0, r3
 80083a8:	f7fd fa2b 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 80083ac:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80083b0:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4619      	mov	r1, r3
 80083b8:	4620      	mov	r0, r4
 80083ba:	f7fd fb65 	bl	8005a88 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    MessageBoard_Background_1.setBorderSize(2);
 80083be:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80083c2:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f203 6334 	addw	r3, r3, #1588	; 0x634
 80083cc:	2102      	movs	r1, #2
 80083ce:	4618      	mov	r0, r3
 80083d0:	f7fd fb68 	bl	8005aa4 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Message_Board_Panel_1.add(MessageBoard_Background_1);
 80083d4:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80083d8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f503 62c1 	add.w	r2, r3, #1544	; 0x608
 80083e2:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80083e6:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f203 6334 	addw	r3, r3, #1588	; 0x634
 80083f0:	4619      	mov	r1, r3
 80083f2:	4610      	mov	r0, r2
 80083f4:	f00f fbc8 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Message_Board_Textbox_1.setPosition(176, 0, 99, 20);
 80083f8:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80083fc:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f503 60cd 	add.w	r0, r3, #1640	; 0x668
 8008406:	2314      	movs	r3, #20
 8008408:	9300      	str	r3, [sp, #0]
 800840a:	2363      	movs	r3, #99	; 0x63
 800840c:	2200      	movs	r2, #0
 800840e:	21b0      	movs	r1, #176	; 0xb0
 8008410:	f7fb fe3c 	bl	800408c <_ZN8touchgfx8Drawable11setPositionEssss>
    MessageBoard_Border_1_1.setPosition(0, 3, 99, 17);
 8008414:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008418:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8008422:	2311      	movs	r3, #17
 8008424:	9300      	str	r3, [sp, #0]
 8008426:	2363      	movs	r3, #99	; 0x63
 8008428:	2203      	movs	r2, #3
 800842a:	2100      	movs	r1, #0
 800842c:	f7fb fe2e 	bl	800408c <_ZN8touchgfx8Drawable11setPositionEssss>
    MessageBoard_Border_1_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8008430:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008434:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f203 6494 	addw	r4, r3, #1684	; 0x694
 800843e:	2300      	movs	r3, #0
 8008440:	f887 31dd 	strb.w	r3, [r7, #477]	; 0x1dd
 8008444:	2300      	movs	r3, #0
 8008446:	f887 31dc 	strb.w	r3, [r7, #476]	; 0x1dc
 800844a:	2300      	movs	r3, #0
 800844c:	f887 31db 	strb.w	r3, [r7, #475]	; 0x1db
 8008450:	f897 31dd 	ldrb.w	r3, [r7, #477]	; 0x1dd
 8008454:	041b      	lsls	r3, r3, #16
 8008456:	461a      	mov	r2, r3
 8008458:	f897 31dc 	ldrb.w	r3, [r7, #476]	; 0x1dc
 800845c:	021b      	lsls	r3, r3, #8
 800845e:	431a      	orrs	r2, r3
 8008460:	f897 31db 	ldrb.w	r3, [r7, #475]	; 0x1db
 8008464:	4313      	orrs	r3, r2
 8008466:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800846a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800846e:	4611      	mov	r1, r2
 8008470:	4618      	mov	r0, r3
 8008472:	f7fd f9c6 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 8008476:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800847a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4619      	mov	r1, r3
 8008482:	4620      	mov	r0, r4
 8008484:	f7fd fa8e 	bl	80059a4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    MessageBoard_Border_1_1.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8008488:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800848c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8008496:	23ed      	movs	r3, #237	; 0xed
 8008498:	f887 31e0 	strb.w	r3, [r7, #480]	; 0x1e0
 800849c:	2366      	movs	r3, #102	; 0x66
 800849e:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
 80084a2:	2363      	movs	r3, #99	; 0x63
 80084a4:	f887 31de 	strb.w	r3, [r7, #478]	; 0x1de
 80084a8:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 80084ac:	041b      	lsls	r3, r3, #16
 80084ae:	461a      	mov	r2, r3
 80084b0:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 80084b4:	021b      	lsls	r3, r3, #8
 80084b6:	431a      	orrs	r2, r3
 80084b8:	f897 31de 	ldrb.w	r3, [r7, #478]	; 0x1de
 80084bc:	4313      	orrs	r3, r2
 80084be:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80084c2:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80084c6:	4611      	mov	r1, r2
 80084c8:	4618      	mov	r0, r3
 80084ca:	f7fd f99a 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 80084ce:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80084d2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4619      	mov	r1, r3
 80084da:	4620      	mov	r0, r4
 80084dc:	f7fd fad4 	bl	8005a88 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    MessageBoard_Border_1_1.setBorderSize(3);
 80084e0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80084e4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f203 6394 	addw	r3, r3, #1684	; 0x694
 80084ee:	2103      	movs	r1, #3
 80084f0:	4618      	mov	r0, r3
 80084f2:	f7fd fad7 	bl	8005aa4 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Message_Board_Textbox_1.add(MessageBoard_Border_1_1);
 80084f6:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80084fa:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f503 62cd 	add.w	r2, r3, #1640	; 0x668
 8008504:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008508:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f203 6394 	addw	r3, r3, #1684	; 0x694
 8008512:	4619      	mov	r1, r3
 8008514:	4610      	mov	r0, r2
 8008516:	f00f fb37 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    MessageBoard_Text_1.setXY(7, 5);
 800851a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800851e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f503 63d9 	add.w	r3, r3, #1736	; 0x6c8
 8008528:	2205      	movs	r2, #5
 800852a:	2107      	movs	r1, #7
 800852c:	4618      	mov	r0, r3
 800852e:	f7fb fe06 	bl	800413e <_ZN8touchgfx8Drawable5setXYEss>
    MessageBoard_Text_1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8008532:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008536:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f503 64d9 	add.w	r4, r3, #1736	; 0x6c8
 8008540:	23ff      	movs	r3, #255	; 0xff
 8008542:	f887 31e3 	strb.w	r3, [r7, #483]	; 0x1e3
 8008546:	23ff      	movs	r3, #255	; 0xff
 8008548:	f887 31e2 	strb.w	r3, [r7, #482]	; 0x1e2
 800854c:	23ff      	movs	r3, #255	; 0xff
 800854e:	f887 31e1 	strb.w	r3, [r7, #481]	; 0x1e1
 8008552:	f897 31e3 	ldrb.w	r3, [r7, #483]	; 0x1e3
 8008556:	041b      	lsls	r3, r3, #16
 8008558:	461a      	mov	r2, r3
 800855a:	f897 31e2 	ldrb.w	r3, [r7, #482]	; 0x1e2
 800855e:	021b      	lsls	r3, r3, #8
 8008560:	431a      	orrs	r2, r3
 8008562:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 8008566:	4313      	orrs	r3, r2
 8008568:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800856c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008570:	4611      	mov	r1, r2
 8008572:	4618      	mov	r0, r3
 8008574:	f7fd f945 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 8008578:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800857c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	461a      	mov	r2, r3
 8008584:	f8c7 41e4 	str.w	r4, [r7, #484]	; 0x1e4
 8008588:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800858c:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8008590:	601a      	str	r2, [r3, #0]
        color = newColor;
 8008592:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8008596:	f507 721e 	add.w	r2, r7, #632	; 0x278
 800859a:	f5a2 7211 	sub.w	r2, r2, #580	; 0x244
 800859e:	6812      	ldr	r2, [r2, #0]
 80085a0:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80085a2:	bf00      	nop
    MessageBoard_Text_1.setLinespacing(0);
 80085a4:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80085a8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f503 63d9 	add.w	r3, r3, #1736	; 0x6c8
 80085b2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 80085b6:	2300      	movs	r3, #0
 80085b8:	f8a7 31ea 	strh.w	r3, [r7, #490]	; 0x1ea
        linespace = space;
 80085bc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80085c0:	f8b7 21ea 	ldrh.w	r2, [r7, #490]	; 0x1ea
 80085c4:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 80085c6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	3384      	adds	r3, #132	; 0x84
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f8d7 41ec 	ldr.w	r4, [r7, #492]	; 0x1ec
 80085d4:	463a      	mov	r2, r7
 80085d6:	f8d7 11ec 	ldr.w	r1, [r7, #492]	; 0x1ec
 80085da:	4610      	mov	r0, r2
 80085dc:	4798      	blx	r3
 80085de:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80085e2:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 80085e6:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 80085ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80085ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 80085f0:	bf00      	nop
    MessageBoard_Text_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_0Y28));
 80085f2:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80085f6:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f503 64d9 	add.w	r4, r3, #1736	; 0x6c8
 8008600:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008604:	2102      	movs	r1, #2
 8008606:	4618      	mov	r0, r3
 8008608:	f7fd fa5c 	bl	8005ac4 <_ZN8touchgfx9TypedTextC1Et>
 800860c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008610:	4619      	mov	r1, r3
 8008612:	4620      	mov	r0, r4
 8008614:	f011 fa8c 	bl	8019b30 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8008618:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800861c:	4618      	mov	r0, r3
 800861e:	f7fb fc7b 	bl	8003f18 <_ZN8touchgfx9TypedTextD1Ev>
    Message_Board_Textbox_1.add(MessageBoard_Text_1);
 8008622:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008626:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f503 62cd 	add.w	r2, r3, #1640	; 0x668
 8008630:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008634:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f503 63d9 	add.w	r3, r3, #1736	; 0x6c8
 800863e:	4619      	mov	r1, r3
 8008640:	4610      	mov	r0, r2
 8008642:	f00f faa1 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Message_Board_Panel_1.add(Message_Board_Textbox_1);
 8008646:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800864a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f503 62c1 	add.w	r2, r3, #1544	; 0x608
 8008654:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008658:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 8008662:	4619      	mov	r1, r3
 8008664:	4610      	mov	r0, r2
 8008666:	f00f fa8f 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    VoiceComm_Textbox_1.setPosition(294, 0, 114, 98);
 800866a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800866e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f503 60e2 	add.w	r0, r3, #1808	; 0x710
 8008678:	2362      	movs	r3, #98	; 0x62
 800867a:	9300      	str	r3, [sp, #0]
 800867c:	2372      	movs	r3, #114	; 0x72
 800867e:	2200      	movs	r2, #0
 8008680:	f44f 7193 	mov.w	r1, #294	; 0x126
 8008684:	f7fb fd02 	bl	800408c <_ZN8touchgfx8Drawable11setPositionEssss>
    VoiceCommMess_Background.setPosition(2, 2, 112, 96);
 8008688:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800868c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f203 703c 	addw	r0, r3, #1852	; 0x73c
 8008696:	2360      	movs	r3, #96	; 0x60
 8008698:	9300      	str	r3, [sp, #0]
 800869a:	2370      	movs	r3, #112	; 0x70
 800869c:	2202      	movs	r2, #2
 800869e:	2102      	movs	r1, #2
 80086a0:	f7fb fcf4 	bl	800408c <_ZN8touchgfx8Drawable11setPositionEssss>
    VoiceCommMess_Background.setColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 80086a4:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80086a8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f203 743c 	addw	r4, r3, #1852	; 0x73c
 80086b2:	23ed      	movs	r3, #237	; 0xed
 80086b4:	f887 31f3 	strb.w	r3, [r7, #499]	; 0x1f3
 80086b8:	2366      	movs	r3, #102	; 0x66
 80086ba:	f887 31f2 	strb.w	r3, [r7, #498]	; 0x1f2
 80086be:	2363      	movs	r3, #99	; 0x63
 80086c0:	f887 31f1 	strb.w	r3, [r7, #497]	; 0x1f1
 80086c4:	f897 31f3 	ldrb.w	r3, [r7, #499]	; 0x1f3
 80086c8:	041b      	lsls	r3, r3, #16
 80086ca:	461a      	mov	r2, r3
 80086cc:	f897 31f2 	ldrb.w	r3, [r7, #498]	; 0x1f2
 80086d0:	021b      	lsls	r3, r3, #8
 80086d2:	431a      	orrs	r2, r3
 80086d4:	f897 31f1 	ldrb.w	r3, [r7, #497]	; 0x1f1
 80086d8:	4313      	orrs	r3, r2
 80086da:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80086de:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80086e2:	4611      	mov	r1, r2
 80086e4:	4618      	mov	r0, r3
 80086e6:	f7fd f88c 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 80086ea:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80086ee:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4619      	mov	r1, r3
 80086f6:	4620      	mov	r0, r4
 80086f8:	f7fd f954 	bl	80059a4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    VoiceCommMess_Background.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80086fc:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008700:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f203 743c 	addw	r4, r3, #1852	; 0x73c
 800870a:	2300      	movs	r3, #0
 800870c:	f887 31f6 	strb.w	r3, [r7, #502]	; 0x1f6
 8008710:	2300      	movs	r3, #0
 8008712:	f887 31f5 	strb.w	r3, [r7, #501]	; 0x1f5
 8008716:	2300      	movs	r3, #0
 8008718:	f887 31f4 	strb.w	r3, [r7, #500]	; 0x1f4
 800871c:	f897 31f6 	ldrb.w	r3, [r7, #502]	; 0x1f6
 8008720:	041b      	lsls	r3, r3, #16
 8008722:	461a      	mov	r2, r3
 8008724:	f897 31f5 	ldrb.w	r3, [r7, #501]	; 0x1f5
 8008728:	021b      	lsls	r3, r3, #8
 800872a:	431a      	orrs	r2, r3
 800872c:	f897 31f4 	ldrb.w	r3, [r7, #500]	; 0x1f4
 8008730:	4313      	orrs	r3, r2
 8008732:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008736:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800873a:	4611      	mov	r1, r2
 800873c:	4618      	mov	r0, r3
 800873e:	f7fd f860 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 8008742:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008746:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4619      	mov	r1, r3
 800874e:	4620      	mov	r0, r4
 8008750:	f7fd f99a 	bl	8005a88 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    VoiceCommMess_Background.setBorderSize(3);
 8008754:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008758:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f203 733c 	addw	r3, r3, #1852	; 0x73c
 8008762:	2103      	movs	r1, #3
 8008764:	4618      	mov	r0, r3
 8008766:	f7fd f99d 	bl	8005aa4 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    VoiceComm_Textbox_1.add(VoiceCommMess_Background);
 800876a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800876e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f503 62e2 	add.w	r2, r3, #1808	; 0x710
 8008778:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800877c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f203 733c 	addw	r3, r3, #1852	; 0x73c
 8008786:	4619      	mov	r1, r3
 8008788:	4610      	mov	r0, r2
 800878a:	f00f f9fd 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    VoiceCommMess_Background2.setPosition(16, 10, 84, 80);
 800878e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008792:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f503 60ee 	add.w	r0, r3, #1904	; 0x770
 800879c:	2350      	movs	r3, #80	; 0x50
 800879e:	9300      	str	r3, [sp, #0]
 80087a0:	2354      	movs	r3, #84	; 0x54
 80087a2:	220a      	movs	r2, #10
 80087a4:	2110      	movs	r1, #16
 80087a6:	f7fb fc71 	bl	800408c <_ZN8touchgfx8Drawable11setPositionEssss>
    VoiceCommMess_Background2.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80087aa:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80087ae:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f503 64ee 	add.w	r4, r3, #1904	; 0x770
 80087b8:	2300      	movs	r3, #0
 80087ba:	f887 31f9 	strb.w	r3, [r7, #505]	; 0x1f9
 80087be:	2300      	movs	r3, #0
 80087c0:	f887 31f8 	strb.w	r3, [r7, #504]	; 0x1f8
 80087c4:	2300      	movs	r3, #0
 80087c6:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
 80087ca:	f897 31f9 	ldrb.w	r3, [r7, #505]	; 0x1f9
 80087ce:	041b      	lsls	r3, r3, #16
 80087d0:	461a      	mov	r2, r3
 80087d2:	f897 31f8 	ldrb.w	r3, [r7, #504]	; 0x1f8
 80087d6:	021b      	lsls	r3, r3, #8
 80087d8:	431a      	orrs	r2, r3
 80087da:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 80087de:	4313      	orrs	r3, r2
 80087e0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80087e4:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80087e8:	4611      	mov	r1, r2
 80087ea:	4618      	mov	r0, r3
 80087ec:	f7fd f809 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 80087f0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80087f4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4619      	mov	r1, r3
 80087fc:	4620      	mov	r0, r4
 80087fe:	f7fd f8d1 	bl	80059a4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    VoiceCommMess_Background2.setBorderColor(touchgfx::Color::getColorFromRGB(67, 101, 139));
 8008802:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008806:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f503 64ee 	add.w	r4, r3, #1904	; 0x770
 8008810:	2343      	movs	r3, #67	; 0x43
 8008812:	f887 31fc 	strb.w	r3, [r7, #508]	; 0x1fc
 8008816:	2365      	movs	r3, #101	; 0x65
 8008818:	f887 31fb 	strb.w	r3, [r7, #507]	; 0x1fb
 800881c:	238b      	movs	r3, #139	; 0x8b
 800881e:	f887 31fa 	strb.w	r3, [r7, #506]	; 0x1fa
 8008822:	f897 31fc 	ldrb.w	r3, [r7, #508]	; 0x1fc
 8008826:	041b      	lsls	r3, r3, #16
 8008828:	461a      	mov	r2, r3
 800882a:	f897 31fb 	ldrb.w	r3, [r7, #507]	; 0x1fb
 800882e:	021b      	lsls	r3, r3, #8
 8008830:	431a      	orrs	r2, r3
 8008832:	f897 31fa 	ldrb.w	r3, [r7, #506]	; 0x1fa
 8008836:	4313      	orrs	r3, r2
 8008838:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800883c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008840:	4611      	mov	r1, r2
 8008842:	4618      	mov	r0, r3
 8008844:	f7fc ffdd 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 8008848:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800884c:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4619      	mov	r1, r3
 8008854:	4620      	mov	r0, r4
 8008856:	f7fd f917 	bl	8005a88 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    VoiceCommMess_Background2.setBorderSize(3);
 800885a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800885e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f503 63ee 	add.w	r3, r3, #1904	; 0x770
 8008868:	2103      	movs	r1, #3
 800886a:	4618      	mov	r0, r3
 800886c:	f7fd f91a 	bl	8005aa4 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    VoiceComm_Textbox_1.add(VoiceCommMess_Background2);
 8008870:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008874:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f503 62e2 	add.w	r2, r3, #1808	; 0x710
 800887e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008882:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f503 63ee 	add.w	r3, r3, #1904	; 0x770
 800888c:	4619      	mov	r1, r3
 800888e:	4610      	mov	r0, r2
 8008890:	f00f f97a 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    VoiceCommMess_Text_On.setXY(36, 13);
 8008894:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008898:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f203 73a4 	addw	r3, r3, #1956	; 0x7a4
 80088a2:	220d      	movs	r2, #13
 80088a4:	2124      	movs	r1, #36	; 0x24
 80088a6:	4618      	mov	r0, r3
 80088a8:	f7fb fc49 	bl	800413e <_ZN8touchgfx8Drawable5setXYEss>
    VoiceCommMess_Text_On.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80088ac:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80088b0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f203 74a4 	addw	r4, r3, #1956	; 0x7a4
 80088ba:	23ff      	movs	r3, #255	; 0xff
 80088bc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
 80088c0:	23ff      	movs	r3, #255	; 0xff
 80088c2:	f887 31fe 	strb.w	r3, [r7, #510]	; 0x1fe
 80088c6:	23ff      	movs	r3, #255	; 0xff
 80088c8:	f887 31fd 	strb.w	r3, [r7, #509]	; 0x1fd
 80088cc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80088d0:	041b      	lsls	r3, r3, #16
 80088d2:	461a      	mov	r2, r3
 80088d4:	f897 31fe 	ldrb.w	r3, [r7, #510]	; 0x1fe
 80088d8:	021b      	lsls	r3, r3, #8
 80088da:	431a      	orrs	r2, r3
 80088dc:	f897 31fd 	ldrb.w	r3, [r7, #509]	; 0x1fd
 80088e0:	4313      	orrs	r3, r2
 80088e2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80088e6:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80088ea:	4611      	mov	r1, r2
 80088ec:	4618      	mov	r0, r3
 80088ee:	f7fc ff88 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 80088f2:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80088f6:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	461a      	mov	r2, r3
 80088fe:	f8c7 4200 	str.w	r4, [r7, #512]	; 0x200
 8008902:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008906:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800890a:	601a      	str	r2, [r3, #0]
        color = newColor;
 800890c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008910:	f507 721e 	add.w	r2, r7, #632	; 0x278
 8008914:	f5a2 7212 	sub.w	r2, r2, #584	; 0x248
 8008918:	6812      	ldr	r2, [r2, #0]
 800891a:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800891c:	bf00      	nop
    VoiceCommMess_Text_On.setLinespacing(0);
 800891e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008922:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f203 73a4 	addw	r3, r3, #1956	; 0x7a4
 800892c:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 8008930:	2300      	movs	r3, #0
 8008932:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
        linespace = space;
 8008936:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800893a:	f8b7 2206 	ldrh.w	r2, [r7, #518]	; 0x206
 800893e:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8008940:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	3384      	adds	r3, #132	; 0x84
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f8d7 4208 	ldr.w	r4, [r7, #520]	; 0x208
 800894e:	463a      	mov	r2, r7
 8008950:	f8d7 1208 	ldr.w	r1, [r7, #520]	; 0x208
 8008954:	4610      	mov	r0, r2
 8008956:	4798      	blx	r3
 8008958:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800895c:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 8008960:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8008964:	ca07      	ldmia	r2, {r0, r1, r2}
 8008966:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800896a:	bf00      	nop
    VoiceCommMess_Text_On.setTypedText(touchgfx::TypedText(T___SINGLEUSE_LNSV));
 800896c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008970:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f203 74a4 	addw	r4, r3, #1956	; 0x7a4
 800897a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800897e:	2105      	movs	r1, #5
 8008980:	4618      	mov	r0, r3
 8008982:	f7fd f89f 	bl	8005ac4 <_ZN8touchgfx9TypedTextC1Et>
 8008986:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800898a:	4619      	mov	r1, r3
 800898c:	4620      	mov	r0, r4
 800898e:	f011 f8cf 	bl	8019b30 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8008992:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008996:	4618      	mov	r0, r3
 8008998:	f7fb fabe 	bl	8003f18 <_ZN8touchgfx9TypedTextD1Ev>
    VoiceComm_Textbox_1.add(VoiceCommMess_Text_On);
 800899c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80089a0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f503 62e2 	add.w	r2, r3, #1808	; 0x710
 80089aa:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80089ae:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f203 73a4 	addw	r3, r3, #1956	; 0x7a4
 80089b8:	4619      	mov	r1, r3
 80089ba:	4610      	mov	r0, r2
 80089bc:	f00f f8e4 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    VoiceCommMess_Text_Off.setXY(36, 13);
 80089c0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80089c4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f203 73ec 	addw	r3, r3, #2028	; 0x7ec
 80089ce:	220d      	movs	r2, #13
 80089d0:	2124      	movs	r1, #36	; 0x24
 80089d2:	4618      	mov	r0, r3
 80089d4:	f7fb fbb3 	bl	800413e <_ZN8touchgfx8Drawable5setXYEss>
    VoiceCommMess_Text_Off.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80089d8:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80089dc:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f203 74ec 	addw	r4, r3, #2028	; 0x7ec
 80089e6:	23ff      	movs	r3, #255	; 0xff
 80089e8:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 80089ec:	23ff      	movs	r3, #255	; 0xff
 80089ee:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 80089f2:	23ff      	movs	r3, #255	; 0xff
 80089f4:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 80089f8:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80089fc:	041b      	lsls	r3, r3, #16
 80089fe:	461a      	mov	r2, r3
 8008a00:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8008a04:	021b      	lsls	r3, r3, #8
 8008a06:	431a      	orrs	r2, r3
 8008a08:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008a12:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008a16:	4611      	mov	r1, r2
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f7fc fef2 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 8008a1e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008a22:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	461a      	mov	r2, r3
 8008a2a:	f8c7 4210 	str.w	r4, [r7, #528]	; 0x210
 8008a2e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008a32:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a36:	601a      	str	r2, [r3, #0]
        color = newColor;
 8008a38:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008a3c:	f507 721e 	add.w	r2, r7, #632	; 0x278
 8008a40:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8008a44:	6812      	ldr	r2, [r2, #0]
 8008a46:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8008a48:	bf00      	nop
    VoiceCommMess_Text_Off.setLinespacing(0);
 8008a4a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008a4e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f203 73ec 	addw	r3, r3, #2028	; 0x7ec
 8008a58:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
        linespace = space;
 8008a62:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8008a66:	f8b7 2216 	ldrh.w	r2, [r7, #534]	; 0x216
 8008a6a:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8008a6c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	3384      	adds	r3, #132	; 0x84
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f8d7 4218 	ldr.w	r4, [r7, #536]	; 0x218
 8008a7a:	463a      	mov	r2, r7
 8008a7c:	f8d7 1218 	ldr.w	r1, [r7, #536]	; 0x218
 8008a80:	4610      	mov	r0, r2
 8008a82:	4798      	blx	r3
 8008a84:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008a88:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 8008a8c:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8008a90:	ca07      	ldmia	r2, {r0, r1, r2}
 8008a92:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8008a96:	bf00      	nop
    VoiceCommMess_Text_Off.setTypedText(touchgfx::TypedText(T___SINGLEUSE_GO11));
 8008a98:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008a9c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f203 74ec 	addw	r4, r3, #2028	; 0x7ec
 8008aa6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008aaa:	210a      	movs	r1, #10
 8008aac:	4618      	mov	r0, r3
 8008aae:	f7fd f809 	bl	8005ac4 <_ZN8touchgfx9TypedTextC1Et>
 8008ab2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	4620      	mov	r0, r4
 8008aba:	f011 f839 	bl	8019b30 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8008abe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f7fb fa28 	bl	8003f18 <_ZN8touchgfx9TypedTextD1Ev>
    VoiceCommMess_Text_Off.setVisible(false);
 8008ac8:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008acc:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f203 73ec 	addw	r3, r3, #2028	; 0x7ec
 8008ad6:	2100      	movs	r1, #0
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f7fe f86e 	bl	8006bba <_ZN8touchgfx8Drawable10setVisibleEb>
    VoiceComm_Textbox_1.add(VoiceCommMess_Text_Off);
 8008ade:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008ae2:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f503 62e2 	add.w	r2, r3, #1808	; 0x710
 8008aec:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008af0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f203 73ec 	addw	r3, r3, #2028	; 0x7ec
 8008afa:	4619      	mov	r1, r3
 8008afc:	4610      	mov	r0, r2
 8008afe:	f00f f843 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Message_Board_Panel_1.add(VoiceComm_Textbox_1);
 8008b02:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008b06:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f503 62c1 	add.w	r2, r3, #1544	; 0x608
 8008b10:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008b14:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f503 63e2 	add.w	r3, r3, #1808	; 0x710
 8008b1e:	4619      	mov	r1, r3
 8008b20:	4610      	mov	r0, r2
 8008b22:	f00f f831 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    AnomalyWarning_Textbox_1_1.setPosition(42, 0, 117, 98);
 8008b26:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008b2a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f603 0034 	addw	r0, r3, #2100	; 0x834
 8008b34:	2362      	movs	r3, #98	; 0x62
 8008b36:	9300      	str	r3, [sp, #0]
 8008b38:	2375      	movs	r3, #117	; 0x75
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	212a      	movs	r1, #42	; 0x2a
 8008b3e:	f7fb faa5 	bl	800408c <_ZN8touchgfx8Drawable11setPositionEssss>
    MessageBoard_Border_1_1_1_2.setPosition(2, 2, 115, 96);
 8008b42:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008b46:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f503 6006 	add.w	r0, r3, #2144	; 0x860
 8008b50:	2360      	movs	r3, #96	; 0x60
 8008b52:	9300      	str	r3, [sp, #0]
 8008b54:	2373      	movs	r3, #115	; 0x73
 8008b56:	2202      	movs	r2, #2
 8008b58:	2102      	movs	r1, #2
 8008b5a:	f7fb fa97 	bl	800408c <_ZN8touchgfx8Drawable11setPositionEssss>
    MessageBoard_Border_1_1_1_2.setColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8008b5e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008b62:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f503 6406 	add.w	r4, r3, #2144	; 0x860
 8008b6c:	23ed      	movs	r3, #237	; 0xed
 8008b6e:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
 8008b72:	2366      	movs	r3, #102	; 0x66
 8008b74:	f887 321e 	strb.w	r3, [r7, #542]	; 0x21e
 8008b78:	2363      	movs	r3, #99	; 0x63
 8008b7a:	f887 321d 	strb.w	r3, [r7, #541]	; 0x21d
 8008b7e:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8008b82:	041b      	lsls	r3, r3, #16
 8008b84:	461a      	mov	r2, r3
 8008b86:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8008b8a:	021b      	lsls	r3, r3, #8
 8008b8c:	431a      	orrs	r2, r3
 8008b8e:	f897 321d 	ldrb.w	r3, [r7, #541]	; 0x21d
 8008b92:	4313      	orrs	r3, r2
 8008b94:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008b98:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8008b9c:	4611      	mov	r1, r2
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f7fc fe2f 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 8008ba4:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008ba8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4619      	mov	r1, r3
 8008bb0:	4620      	mov	r0, r4
 8008bb2:	f7fc fef7 	bl	80059a4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    MessageBoard_Border_1_1_1_2.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8008bb6:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008bba:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f503 6406 	add.w	r4, r3, #2144	; 0x860
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	f887 3222 	strb.w	r3, [r7, #546]	; 0x222
 8008bca:	2300      	movs	r3, #0
 8008bcc:	f887 3221 	strb.w	r3, [r7, #545]	; 0x221
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	f887 3220 	strb.w	r3, [r7, #544]	; 0x220
 8008bd6:	f897 3222 	ldrb.w	r3, [r7, #546]	; 0x222
 8008bda:	041b      	lsls	r3, r3, #16
 8008bdc:	461a      	mov	r2, r3
 8008bde:	f897 3221 	ldrb.w	r3, [r7, #545]	; 0x221
 8008be2:	021b      	lsls	r3, r3, #8
 8008be4:	431a      	orrs	r2, r3
 8008be6:	f897 3220 	ldrb.w	r3, [r7, #544]	; 0x220
 8008bea:	4313      	orrs	r3, r2
 8008bec:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008bf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bf4:	4611      	mov	r1, r2
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f7fc fe03 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 8008bfc:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008c00:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4619      	mov	r1, r3
 8008c08:	4620      	mov	r0, r4
 8008c0a:	f7fc ff3d 	bl	8005a88 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    MessageBoard_Border_1_1_1_2.setBorderSize(3);
 8008c0e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008c12:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f503 6306 	add.w	r3, r3, #2144	; 0x860
 8008c1c:	2103      	movs	r1, #3
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f7fc ff40 	bl	8005aa4 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    AnomalyWarning_Textbox_1_1.add(MessageBoard_Border_1_1_1_2);
 8008c24:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008c28:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f603 0234 	addw	r2, r3, #2100	; 0x834
 8008c32:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008c36:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f503 6306 	add.w	r3, r3, #2144	; 0x860
 8008c40:	4619      	mov	r1, r3
 8008c42:	4610      	mov	r0, r2
 8008c44:	f00e ffa0 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    MessageBoard_Border_1_1_1_1_1.setPosition(16, 10, 89, 80);
 8008c48:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008c4c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f603 0094 	addw	r0, r3, #2196	; 0x894
 8008c56:	2350      	movs	r3, #80	; 0x50
 8008c58:	9300      	str	r3, [sp, #0]
 8008c5a:	2359      	movs	r3, #89	; 0x59
 8008c5c:	220a      	movs	r2, #10
 8008c5e:	2110      	movs	r1, #16
 8008c60:	f7fb fa14 	bl	800408c <_ZN8touchgfx8Drawable11setPositionEssss>
    MessageBoard_Border_1_1_1_1_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8008c64:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008c68:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f603 0494 	addw	r4, r3, #2196	; 0x894
 8008c72:	2300      	movs	r3, #0
 8008c74:	f887 3225 	strb.w	r3, [r7, #549]	; 0x225
 8008c78:	2300      	movs	r3, #0
 8008c7a:	f887 3224 	strb.w	r3, [r7, #548]	; 0x224
 8008c7e:	2300      	movs	r3, #0
 8008c80:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223
 8008c84:	f897 3225 	ldrb.w	r3, [r7, #549]	; 0x225
 8008c88:	041b      	lsls	r3, r3, #16
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	f897 3224 	ldrb.w	r3, [r7, #548]	; 0x224
 8008c90:	021b      	lsls	r3, r3, #8
 8008c92:	431a      	orrs	r2, r3
 8008c94:	f897 3223 	ldrb.w	r3, [r7, #547]	; 0x223
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008c9e:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8008ca2:	4611      	mov	r1, r2
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f7fc fdac 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 8008caa:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008cae:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	4620      	mov	r0, r4
 8008cb8:	f7fc fe74 	bl	80059a4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    MessageBoard_Border_1_1_1_1_1.setBorderColor(touchgfx::Color::getColorFromRGB(67, 101, 139));
 8008cbc:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008cc0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f603 0494 	addw	r4, r3, #2196	; 0x894
 8008cca:	2343      	movs	r3, #67	; 0x43
 8008ccc:	f887 3228 	strb.w	r3, [r7, #552]	; 0x228
 8008cd0:	2365      	movs	r3, #101	; 0x65
 8008cd2:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
 8008cd6:	238b      	movs	r3, #139	; 0x8b
 8008cd8:	f887 3226 	strb.w	r3, [r7, #550]	; 0x226
 8008cdc:	f897 3228 	ldrb.w	r3, [r7, #552]	; 0x228
 8008ce0:	041b      	lsls	r3, r3, #16
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8008ce8:	021b      	lsls	r3, r3, #8
 8008cea:	431a      	orrs	r2, r3
 8008cec:	f897 3226 	ldrb.w	r3, [r7, #550]	; 0x226
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008cf6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8008cfa:	4611      	mov	r1, r2
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f7fc fd80 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 8008d02:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008d06:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4619      	mov	r1, r3
 8008d0e:	4620      	mov	r0, r4
 8008d10:	f7fc feba 	bl	8005a88 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    MessageBoard_Border_1_1_1_1_1.setBorderSize(3);
 8008d14:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008d18:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8008d22:	2103      	movs	r1, #3
 8008d24:	4618      	mov	r0, r3
 8008d26:	f7fc febd 	bl	8005aa4 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    AnomalyWarning_Textbox_1_1.add(MessageBoard_Border_1_1_1_1_1);
 8008d2a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008d2e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f603 0234 	addw	r2, r3, #2100	; 0x834
 8008d38:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008d3c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8008d46:	4619      	mov	r1, r3
 8008d48:	4610      	mov	r0, r2
 8008d4a:	f00e ff1d 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    MessageBoard_Message_1.setXY(29, 13);
 8008d4e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008d52:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f603 03c8 	addw	r3, r3, #2248	; 0x8c8
 8008d5c:	220d      	movs	r2, #13
 8008d5e:	211d      	movs	r1, #29
 8008d60:	4618      	mov	r0, r3
 8008d62:	f7fb f9ec 	bl	800413e <_ZN8touchgfx8Drawable5setXYEss>
    MessageBoard_Message_1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8008d66:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008d6a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f603 04c8 	addw	r4, r3, #2248	; 0x8c8
 8008d74:	23ff      	movs	r3, #255	; 0xff
 8008d76:	f887 322b 	strb.w	r3, [r7, #555]	; 0x22b
 8008d7a:	23ff      	movs	r3, #255	; 0xff
 8008d7c:	f887 322a 	strb.w	r3, [r7, #554]	; 0x22a
 8008d80:	23ff      	movs	r3, #255	; 0xff
 8008d82:	f887 3229 	strb.w	r3, [r7, #553]	; 0x229
 8008d86:	f897 322b 	ldrb.w	r3, [r7, #555]	; 0x22b
 8008d8a:	041b      	lsls	r3, r3, #16
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	f897 322a 	ldrb.w	r3, [r7, #554]	; 0x22a
 8008d92:	021b      	lsls	r3, r3, #8
 8008d94:	431a      	orrs	r2, r3
 8008d96:	f897 3229 	ldrb.w	r3, [r7, #553]	; 0x229
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008da0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8008da4:	4611      	mov	r1, r2
 8008da6:	4618      	mov	r0, r3
 8008da8:	f7fc fd2b 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 8008dac:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008db0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	461a      	mov	r2, r3
 8008db8:	f8c7 422c 	str.w	r4, [r7, #556]	; 0x22c
 8008dbc:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008dc0:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8008dc4:	601a      	str	r2, [r3, #0]
        color = newColor;
 8008dc6:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8008dca:	f507 721e 	add.w	r2, r7, #632	; 0x278
 8008dce:	f5a2 7214 	sub.w	r2, r2, #592	; 0x250
 8008dd2:	6812      	ldr	r2, [r2, #0]
 8008dd4:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8008dd6:	bf00      	nop
    MessageBoard_Message_1.setLinespacing(0);
 8008dd8:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008ddc:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f603 03c8 	addw	r3, r3, #2248	; 0x8c8
 8008de6:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 8008dea:	2300      	movs	r3, #0
 8008dec:	f8a7 3232 	strh.w	r3, [r7, #562]	; 0x232
        linespace = space;
 8008df0:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8008df4:	f8b7 2232 	ldrh.w	r2, [r7, #562]	; 0x232
 8008df8:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8008dfa:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	3384      	adds	r3, #132	; 0x84
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f8d7 4234 	ldr.w	r4, [r7, #564]	; 0x234
 8008e08:	463a      	mov	r2, r7
 8008e0a:	f8d7 1234 	ldr.w	r1, [r7, #564]	; 0x234
 8008e0e:	4610      	mov	r0, r2
 8008e10:	4798      	blx	r3
 8008e12:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008e16:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 8008e1a:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8008e1e:	ca07      	ldmia	r2, {r0, r1, r2}
 8008e20:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8008e24:	bf00      	nop
    MessageBoard_Message_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_RLM0));
 8008e26:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008e2a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f603 04c8 	addw	r4, r3, #2248	; 0x8c8
 8008e34:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8008e38:	2106      	movs	r1, #6
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f7fc fe42 	bl	8005ac4 <_ZN8touchgfx9TypedTextC1Et>
 8008e40:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8008e44:	4619      	mov	r1, r3
 8008e46:	4620      	mov	r0, r4
 8008e48:	f010 fe72 	bl	8019b30 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8008e4c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8008e50:	4618      	mov	r0, r3
 8008e52:	f7fb f861 	bl	8003f18 <_ZN8touchgfx9TypedTextD1Ev>
    AnomalyWarning_Textbox_1_1.add(MessageBoard_Message_1);
 8008e56:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008e5a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f603 0234 	addw	r2, r3, #2100	; 0x834
 8008e64:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008e68:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f603 03c8 	addw	r3, r3, #2248	; 0x8c8
 8008e72:	4619      	mov	r1, r3
 8008e74:	4610      	mov	r0, r2
 8008e76:	f00e fe87 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    MessageBoard_Message_Muted.setXY(30, 13);
 8008e7a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008e7e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 8008e88:	220d      	movs	r2, #13
 8008e8a:	211e      	movs	r1, #30
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f7fb f956 	bl	800413e <_ZN8touchgfx8Drawable5setXYEss>
    MessageBoard_Message_Muted.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8008e92:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008e96:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f503 6411 	add.w	r4, r3, #2320	; 0x910
 8008ea0:	23ff      	movs	r3, #255	; 0xff
 8008ea2:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
 8008ea6:	23ff      	movs	r3, #255	; 0xff
 8008ea8:	f887 323a 	strb.w	r3, [r7, #570]	; 0x23a
 8008eac:	23ff      	movs	r3, #255	; 0xff
 8008eae:	f887 3239 	strb.w	r3, [r7, #569]	; 0x239
 8008eb2:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
 8008eb6:	041b      	lsls	r3, r3, #16
 8008eb8:	461a      	mov	r2, r3
 8008eba:	f897 323a 	ldrb.w	r3, [r7, #570]	; 0x23a
 8008ebe:	021b      	lsls	r3, r3, #8
 8008ec0:	431a      	orrs	r2, r3
 8008ec2:	f897 3239 	ldrb.w	r3, [r7, #569]	; 0x239
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008ecc:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8008ed0:	4611      	mov	r1, r2
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7fc fc95 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 8008ed8:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008edc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	f8c7 423c 	str.w	r4, [r7, #572]	; 0x23c
 8008ee8:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008eec:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8008ef0:	601a      	str	r2, [r3, #0]
        color = newColor;
 8008ef2:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8008ef6:	f507 721e 	add.w	r2, r7, #632	; 0x278
 8008efa:	f5a2 7215 	sub.w	r2, r2, #596	; 0x254
 8008efe:	6812      	ldr	r2, [r2, #0]
 8008f00:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8008f02:	bf00      	nop
    MessageBoard_Message_Muted.setLinespacing(0);
 8008f04:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008f08:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 8008f12:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8008f16:	2300      	movs	r3, #0
 8008f18:	f8a7 3242 	strh.w	r3, [r7, #578]	; 0x242
        linespace = space;
 8008f1c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008f20:	f8b7 2242 	ldrh.w	r2, [r7, #578]	; 0x242
 8008f24:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8008f26:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	3384      	adds	r3, #132	; 0x84
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f8d7 4244 	ldr.w	r4, [r7, #580]	; 0x244
 8008f34:	463a      	mov	r2, r7
 8008f36:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8008f3a:	4610      	mov	r0, r2
 8008f3c:	4798      	blx	r3
 8008f3e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008f42:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 8008f46:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8008f4a:	ca07      	ldmia	r2, {r0, r1, r2}
 8008f4c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8008f50:	bf00      	nop
    MessageBoard_Message_Muted.setTypedText(touchgfx::TypedText(T___SINGLEUSE_RFKN));
 8008f52:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008f56:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f503 6411 	add.w	r4, r3, #2320	; 0x910
 8008f60:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8008f64:	210b      	movs	r1, #11
 8008f66:	4618      	mov	r0, r3
 8008f68:	f7fc fdac 	bl	8005ac4 <_ZN8touchgfx9TypedTextC1Et>
 8008f6c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8008f70:	4619      	mov	r1, r3
 8008f72:	4620      	mov	r0, r4
 8008f74:	f010 fddc 	bl	8019b30 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8008f78:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f7fa ffcb 	bl	8003f18 <_ZN8touchgfx9TypedTextD1Ev>
    MessageBoard_Message_Muted.setVisible(false);
 8008f82:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008f86:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 8008f90:	2100      	movs	r1, #0
 8008f92:	4618      	mov	r0, r3
 8008f94:	f7fd fe11 	bl	8006bba <_ZN8touchgfx8Drawable10setVisibleEb>
    AnomalyWarning_Textbox_1_1.add(MessageBoard_Message_Muted);
 8008f98:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008f9c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f603 0234 	addw	r2, r3, #2100	; 0x834
 8008fa6:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008faa:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	4610      	mov	r0, r2
 8008fb8:	f00e fde6 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Message_Board_Panel_1.add(AnomalyWarning_Textbox_1_1);
 8008fbc:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008fc0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f503 62c1 	add.w	r2, r3, #1544	; 0x608
 8008fca:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008fce:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f603 0334 	addw	r3, r3, #2100	; 0x834
 8008fd8:	4619      	mov	r1, r3
 8008fda:	4610      	mov	r0, r2
 8008fdc:	f00e fdd4 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Message_panel.add(Message_Board_Panel_1);
 8008fe0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008fe4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f503 62b5 	add.w	r2, r3, #1448	; 0x5a8
 8008fee:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8008ff2:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 8008ffc:	4619      	mov	r1, r3
 8008ffe:	4610      	mov	r0, r2
 8009000:	f00e fdc2 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    add(Message_panel);
 8009004:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8009008:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8009012:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f503 63b5 	add.w	r3, r3, #1448	; 0x5a8
 800901c:	4619      	mov	r1, r3
 800901e:	4610      	mov	r0, r2
 8009020:	f7fc fc8c 	bl	800593c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    Alarm_Mute_Indicator_Textbox_1_1.setPosition(64, 117, 129, 20);
 8009024:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8009028:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f603 1058 	addw	r0, r3, #2392	; 0x958
 8009032:	2314      	movs	r3, #20
 8009034:	9300      	str	r3, [sp, #0]
 8009036:	2381      	movs	r3, #129	; 0x81
 8009038:	2275      	movs	r2, #117	; 0x75
 800903a:	2140      	movs	r1, #64	; 0x40
 800903c:	f7fb f826 	bl	800408c <_ZN8touchgfx8Drawable11setPositionEssss>
    AnomalyDetection_Border_1_1_1.setPosition(0, 3, 129, 17);
 8009040:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8009044:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f603 1084 	addw	r0, r3, #2436	; 0x984
 800904e:	2311      	movs	r3, #17
 8009050:	9300      	str	r3, [sp, #0]
 8009052:	2381      	movs	r3, #129	; 0x81
 8009054:	2203      	movs	r2, #3
 8009056:	2100      	movs	r1, #0
 8009058:	f7fb f818 	bl	800408c <_ZN8touchgfx8Drawable11setPositionEssss>
    AnomalyDetection_Border_1_1_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800905c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8009060:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f603 1484 	addw	r4, r3, #2436	; 0x984
 800906a:	2300      	movs	r3, #0
 800906c:	f887 324d 	strb.w	r3, [r7, #589]	; 0x24d
 8009070:	2300      	movs	r3, #0
 8009072:	f887 324c 	strb.w	r3, [r7, #588]	; 0x24c
 8009076:	2300      	movs	r3, #0
 8009078:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b
 800907c:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 8009080:	041b      	lsls	r3, r3, #16
 8009082:	461a      	mov	r2, r3
 8009084:	f897 324c 	ldrb.w	r3, [r7, #588]	; 0x24c
 8009088:	021b      	lsls	r3, r3, #8
 800908a:	431a      	orrs	r2, r3
 800908c:	f897 324b 	ldrb.w	r3, [r7, #587]	; 0x24b
 8009090:	4313      	orrs	r3, r2
 8009092:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009096:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800909a:	4611      	mov	r1, r2
 800909c:	4618      	mov	r0, r3
 800909e:	f7fc fbb0 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 80090a2:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80090a6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4619      	mov	r1, r3
 80090ae:	4620      	mov	r0, r4
 80090b0:	f7fc fc78 	bl	80059a4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    AnomalyDetection_Border_1_1_1.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 80090b4:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80090b8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f603 1484 	addw	r4, r3, #2436	; 0x984
 80090c2:	23ed      	movs	r3, #237	; 0xed
 80090c4:	f887 3250 	strb.w	r3, [r7, #592]	; 0x250
 80090c8:	2366      	movs	r3, #102	; 0x66
 80090ca:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80090ce:	2363      	movs	r3, #99	; 0x63
 80090d0:	f887 324e 	strb.w	r3, [r7, #590]	; 0x24e
 80090d4:	f897 3250 	ldrb.w	r3, [r7, #592]	; 0x250
 80090d8:	041b      	lsls	r3, r3, #16
 80090da:	461a      	mov	r2, r3
 80090dc:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80090e0:	021b      	lsls	r3, r3, #8
 80090e2:	431a      	orrs	r2, r3
 80090e4:	f897 324e 	ldrb.w	r3, [r7, #590]	; 0x24e
 80090e8:	4313      	orrs	r3, r2
 80090ea:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80090ee:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80090f2:	4611      	mov	r1, r2
 80090f4:	4618      	mov	r0, r3
 80090f6:	f7fc fb84 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 80090fa:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80090fe:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4619      	mov	r1, r3
 8009106:	4620      	mov	r0, r4
 8009108:	f7fc fcbe 	bl	8005a88 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    AnomalyDetection_Border_1_1_1.setBorderSize(3);
 800910c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8009110:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f603 1384 	addw	r3, r3, #2436	; 0x984
 800911a:	2103      	movs	r1, #3
 800911c:	4618      	mov	r0, r3
 800911e:	f7fc fcc1 	bl	8005aa4 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Alarm_Mute_Indicator_Textbox_1_1.add(AnomalyDetection_Border_1_1_1);
 8009122:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8009126:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f603 1258 	addw	r2, r3, #2392	; 0x958
 8009130:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8009134:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f603 1384 	addw	r3, r3, #2436	; 0x984
 800913e:	4619      	mov	r1, r3
 8009140:	4610      	mov	r0, r2
 8009142:	f00e fd21 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    AnomalyDetection_Text_1_1.setXY(9, 5);
 8009146:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800914a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f603 13b8 	addw	r3, r3, #2488	; 0x9b8
 8009154:	2205      	movs	r2, #5
 8009156:	2109      	movs	r1, #9
 8009158:	4618      	mov	r0, r3
 800915a:	f7fa fff0 	bl	800413e <_ZN8touchgfx8Drawable5setXYEss>
    AnomalyDetection_Text_1_1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800915e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8009162:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f603 14b8 	addw	r4, r3, #2488	; 0x9b8
 800916c:	23ff      	movs	r3, #255	; 0xff
 800916e:	f887 3253 	strb.w	r3, [r7, #595]	; 0x253
 8009172:	23ff      	movs	r3, #255	; 0xff
 8009174:	f887 3252 	strb.w	r3, [r7, #594]	; 0x252
 8009178:	23ff      	movs	r3, #255	; 0xff
 800917a:	f887 3251 	strb.w	r3, [r7, #593]	; 0x251
 800917e:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 8009182:	041b      	lsls	r3, r3, #16
 8009184:	461a      	mov	r2, r3
 8009186:	f897 3252 	ldrb.w	r3, [r7, #594]	; 0x252
 800918a:	021b      	lsls	r3, r3, #8
 800918c:	431a      	orrs	r2, r3
 800918e:	f897 3251 	ldrb.w	r3, [r7, #593]	; 0x251
 8009192:	4313      	orrs	r3, r2
 8009194:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009198:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800919c:	4611      	mov	r1, r2
 800919e:	4618      	mov	r0, r3
 80091a0:	f7fc fb2f 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 80091a4:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80091a8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	461a      	mov	r2, r3
 80091b0:	f8c7 4254 	str.w	r4, [r7, #596]	; 0x254
 80091b4:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80091b8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80091bc:	601a      	str	r2, [r3, #0]
        color = newColor;
 80091be:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80091c2:	f507 721e 	add.w	r2, r7, #632	; 0x278
 80091c6:	f5a2 7216 	sub.w	r2, r2, #600	; 0x258
 80091ca:	6812      	ldr	r2, [r2, #0]
 80091cc:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80091ce:	bf00      	nop
    AnomalyDetection_Text_1_1.setLinespacing(0);
 80091d0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80091d4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f603 13b8 	addw	r3, r3, #2488	; 0x9b8
 80091de:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 80091e2:	2300      	movs	r3, #0
 80091e4:	f8a7 325a 	strh.w	r3, [r7, #602]	; 0x25a
        linespace = space;
 80091e8:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80091ec:	f8b7 225a 	ldrh.w	r2, [r7, #602]	; 0x25a
 80091f0:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 80091f2:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	3384      	adds	r3, #132	; 0x84
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f8d7 425c 	ldr.w	r4, [r7, #604]	; 0x25c
 8009200:	463a      	mov	r2, r7
 8009202:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 8009206:	4610      	mov	r0, r2
 8009208:	4798      	blx	r3
 800920a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800920e:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 8009212:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8009216:	ca07      	ldmia	r2, {r0, r1, r2}
 8009218:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800921c:	bf00      	nop
    AnomalyDetection_Text_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_BBOL));
 800921e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8009222:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f603 14b8 	addw	r4, r3, #2488	; 0x9b8
 800922c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8009230:	2103      	movs	r1, #3
 8009232:	4618      	mov	r0, r3
 8009234:	f7fc fc46 	bl	8005ac4 <_ZN8touchgfx9TypedTextC1Et>
 8009238:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800923c:	4619      	mov	r1, r3
 800923e:	4620      	mov	r0, r4
 8009240:	f010 fc76 	bl	8019b30 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8009244:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8009248:	4618      	mov	r0, r3
 800924a:	f7fa fe65 	bl	8003f18 <_ZN8touchgfx9TypedTextD1Ev>
    Alarm_Mute_Indicator_Textbox_1_1.add(AnomalyDetection_Text_1_1);
 800924e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8009252:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f603 1258 	addw	r2, r3, #2392	; 0x958
 800925c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8009260:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f603 13b8 	addw	r3, r3, #2488	; 0x9b8
 800926a:	4619      	mov	r1, r3
 800926c:	4610      	mov	r0, r2
 800926e:	f00e fc8b 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    add(Alarm_Mute_Indicator_Textbox_1_1);
 8009272:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8009276:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800927a:	681a      	ldr	r2, [r3, #0]
 800927c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8009280:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f603 1358 	addw	r3, r3, #2392	; 0x958
 800928a:	4619      	mov	r1, r3
 800928c:	4610      	mov	r0, r2
 800928e:	f7fc fb55 	bl	800593c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    Disabled_Button2.setXY(92, 140);
 8009292:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8009296:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f503 6320 	add.w	r3, r3, #2560	; 0xa00
 80092a0:	228c      	movs	r2, #140	; 0x8c
 80092a2:	215c      	movs	r1, #92	; 0x5c
 80092a4:	4618      	mov	r0, r3
 80092a6:	f7fa ff4a 	bl	800413e <_ZN8touchgfx8Drawable5setXYEss>
    Disabled_Button2.setBitmap(touchgfx::Bitmap(BITMAP_RECT_BUTTON_PRESSED_ID));
 80092aa:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80092ae:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f503 6420 	add.w	r4, r3, #2560	; 0xa00
 80092b8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80092bc:	2102      	movs	r1, #2
 80092be:	4618      	mov	r0, r3
 80092c0:	f7fc faae 	bl	8005820 <_ZN8touchgfx6BitmapC1Et>
 80092c4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80092c8:	4619      	mov	r1, r3
 80092ca:	4620      	mov	r0, r4
 80092cc:	f010 fe25 	bl	8019f1a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    add(Disabled_Button2);
 80092d0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80092d4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80092de:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f503 6320 	add.w	r3, r3, #2560	; 0xa00
 80092e8:	4619      	mov	r1, r3
 80092ea:	4610      	mov	r0, r2
 80092ec:	f7fc fb26 	bl	800593c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    Disabled_Button1.setXY(309, 141);
 80092f0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80092f4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f603 232c 	addw	r3, r3, #2604	; 0xa2c
 80092fe:	228d      	movs	r2, #141	; 0x8d
 8009300:	f240 1135 	movw	r1, #309	; 0x135
 8009304:	4618      	mov	r0, r3
 8009306:	f7fa ff1a 	bl	800413e <_ZN8touchgfx8Drawable5setXYEss>
    Disabled_Button1.setBitmap(touchgfx::Bitmap(BITMAP_RECT_BUTTON_PRESSED_ID));
 800930a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800930e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f603 242c 	addw	r4, r3, #2604	; 0xa2c
 8009318:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800931c:	2102      	movs	r1, #2
 800931e:	4618      	mov	r0, r3
 8009320:	f7fc fa7e 	bl	8005820 <_ZN8touchgfx6BitmapC1Et>
 8009324:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8009328:	4619      	mov	r1, r3
 800932a:	4620      	mov	r0, r4
 800932c:	f010 fdf5 	bl	8019f1a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    add(Disabled_Button1);
 8009330:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8009334:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8009338:	681a      	ldr	r2, [r3, #0]
 800933a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800933e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f603 232c 	addw	r3, r3, #2604	; 0xa2c
 8009348:	4619      	mov	r1, r3
 800934a:	4610      	mov	r0, r2
 800934c:	f7fc faf6 	bl	800593c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    Alert_Mute_Button.setXY(92, 140);
 8009350:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8009354:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f603 2358 	addw	r3, r3, #2648	; 0xa58
 800935e:	228c      	movs	r2, #140	; 0x8c
 8009360:	215c      	movs	r1, #92	; 0x5c
 8009362:	4618      	mov	r0, r3
 8009364:	f7fa feeb 	bl	800413e <_ZN8touchgfx8Drawable5setXYEss>
    Alert_Mute_Button.setBitmaps(touchgfx::Bitmap(BITMAP_RECT_BUTTON_UNPRESSED_ID), touchgfx::Bitmap(BITMAP_RECT_BUTTON_PRESSED_ID));
 8009368:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800936c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f603 2458 	addw	r4, r3, #2648	; 0xa58
 8009376:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800937a:	2103      	movs	r1, #3
 800937c:	4618      	mov	r0, r3
 800937e:	f7fc fa4f 	bl	8005820 <_ZN8touchgfx6BitmapC1Et>
 8009382:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8009386:	2102      	movs	r1, #2
 8009388:	4618      	mov	r0, r3
 800938a:	f7fc fa49 	bl	8005820 <_ZN8touchgfx6BitmapC1Et>
 800938e:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8009392:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8009396:	4619      	mov	r1, r3
 8009398:	4620      	mov	r0, r4
 800939a:	f010 fc1b 	bl	8019bd4 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    Alert_Mute_Button.setAction(buttonCallback);
 800939e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80093a2:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f603 2258 	addw	r2, r3, #2648	; 0xa58
 80093ac:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80093b0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f603 3378 	addw	r3, r3, #2936	; 0xb78
 80093ba:	4619      	mov	r1, r3
 80093bc:	4610      	mov	r0, r2
 80093be:	f7fc fc11 	bl	8005be4 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>
    add(Alert_Mute_Button);
 80093c2:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80093c6:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80093ca:	681a      	ldr	r2, [r3, #0]
 80093cc:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80093d0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f603 2358 	addw	r3, r3, #2648	; 0xa58
 80093da:	4619      	mov	r1, r3
 80093dc:	4610      	mov	r0, r2
 80093de:	f7fc faad 	bl	800593c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    Localize_Button.setXY(309, 140);
 80093e2:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80093e6:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 80093f0:	228c      	movs	r2, #140	; 0x8c
 80093f2:	f240 1135 	movw	r1, #309	; 0x135
 80093f6:	4618      	mov	r0, r3
 80093f8:	f7fa fea1 	bl	800413e <_ZN8touchgfx8Drawable5setXYEss>
    Localize_Button.setBitmaps(touchgfx::Bitmap(BITMAP_RECT_BUTTON_UNPRESSED_ID), touchgfx::Bitmap(BITMAP_RECT_BUTTON_PRESSED_ID));
 80093fc:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8009400:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f603 248c 	addw	r4, r3, #2700	; 0xa8c
 800940a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800940e:	2103      	movs	r1, #3
 8009410:	4618      	mov	r0, r3
 8009412:	f7fc fa05 	bl	8005820 <_ZN8touchgfx6BitmapC1Et>
 8009416:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800941a:	2102      	movs	r1, #2
 800941c:	4618      	mov	r0, r3
 800941e:	f7fc f9ff 	bl	8005820 <_ZN8touchgfx6BitmapC1Et>
 8009422:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8009426:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800942a:	4619      	mov	r1, r3
 800942c:	4620      	mov	r0, r4
 800942e:	f010 fbd1 	bl	8019bd4 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    Localize_Button.setAction(buttonCallback);
 8009432:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8009436:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f603 228c 	addw	r2, r3, #2700	; 0xa8c
 8009440:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8009444:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f603 3378 	addw	r3, r3, #2936	; 0xb78
 800944e:	4619      	mov	r1, r3
 8009450:	4610      	mov	r0, r2
 8009452:	f7fc fbc7 	bl	8005be4 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>
    add(Localize_Button);
 8009456:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800945a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800945e:	681a      	ldr	r2, [r3, #0]
 8009460:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8009464:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 800946e:	4619      	mov	r1, r3
 8009470:	4610      	mov	r0, r2
 8009472:	f7fc fa63 	bl	800593c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    Alarm_Mute_Indicator_Textbox_1_1_1.setPosition(283, 117, 129, 20);
 8009476:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800947a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f503 602c 	add.w	r0, r3, #2752	; 0xac0
 8009484:	2314      	movs	r3, #20
 8009486:	9300      	str	r3, [sp, #0]
 8009488:	2381      	movs	r3, #129	; 0x81
 800948a:	2275      	movs	r2, #117	; 0x75
 800948c:	f240 111b 	movw	r1, #283	; 0x11b
 8009490:	f7fa fdfc 	bl	800408c <_ZN8touchgfx8Drawable11setPositionEssss>
    AnomalyDetection_Border_1_1_1_1.setPosition(0, 3, 129, 17);
 8009494:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8009498:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f603 20ec 	addw	r0, r3, #2796	; 0xaec
 80094a2:	2311      	movs	r3, #17
 80094a4:	9300      	str	r3, [sp, #0]
 80094a6:	2381      	movs	r3, #129	; 0x81
 80094a8:	2203      	movs	r2, #3
 80094aa:	2100      	movs	r1, #0
 80094ac:	f7fa fdee 	bl	800408c <_ZN8touchgfx8Drawable11setPositionEssss>
    AnomalyDetection_Border_1_1_1_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80094b0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80094b4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f603 24ec 	addw	r4, r3, #2796	; 0xaec
 80094be:	2300      	movs	r3, #0
 80094c0:	f887 3265 	strb.w	r3, [r7, #613]	; 0x265
 80094c4:	2300      	movs	r3, #0
 80094c6:	f887 3264 	strb.w	r3, [r7, #612]	; 0x264
 80094ca:	2300      	movs	r3, #0
 80094cc:	f887 3263 	strb.w	r3, [r7, #611]	; 0x263
 80094d0:	f897 3265 	ldrb.w	r3, [r7, #613]	; 0x265
 80094d4:	041b      	lsls	r3, r3, #16
 80094d6:	461a      	mov	r2, r3
 80094d8:	f897 3264 	ldrb.w	r3, [r7, #612]	; 0x264
 80094dc:	021b      	lsls	r3, r3, #8
 80094de:	431a      	orrs	r2, r3
 80094e0:	f897 3263 	ldrb.w	r3, [r7, #611]	; 0x263
 80094e4:	4313      	orrs	r3, r2
 80094e6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80094ea:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80094ee:	4611      	mov	r1, r2
 80094f0:	4618      	mov	r0, r3
 80094f2:	f7fc f986 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 80094f6:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80094fa:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	4619      	mov	r1, r3
 8009502:	4620      	mov	r0, r4
 8009504:	f7fc fa4e 	bl	80059a4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    AnomalyDetection_Border_1_1_1_1.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8009508:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800950c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f603 24ec 	addw	r4, r3, #2796	; 0xaec
 8009516:	23ed      	movs	r3, #237	; 0xed
 8009518:	f887 3268 	strb.w	r3, [r7, #616]	; 0x268
 800951c:	2366      	movs	r3, #102	; 0x66
 800951e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8009522:	2363      	movs	r3, #99	; 0x63
 8009524:	f887 3266 	strb.w	r3, [r7, #614]	; 0x266
 8009528:	f897 3268 	ldrb.w	r3, [r7, #616]	; 0x268
 800952c:	041b      	lsls	r3, r3, #16
 800952e:	461a      	mov	r2, r3
 8009530:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8009534:	021b      	lsls	r3, r3, #8
 8009536:	431a      	orrs	r2, r3
 8009538:	f897 3266 	ldrb.w	r3, [r7, #614]	; 0x266
 800953c:	4313      	orrs	r3, r2
 800953e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009542:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8009546:	4611      	mov	r1, r2
 8009548:	4618      	mov	r0, r3
 800954a:	f7fc f95a 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 800954e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8009552:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4619      	mov	r1, r3
 800955a:	4620      	mov	r0, r4
 800955c:	f7fc fa94 	bl	8005a88 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    AnomalyDetection_Border_1_1_1_1.setBorderSize(3);
 8009560:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8009564:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f603 23ec 	addw	r3, r3, #2796	; 0xaec
 800956e:	2103      	movs	r1, #3
 8009570:	4618      	mov	r0, r3
 8009572:	f7fc fa97 	bl	8005aa4 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Alarm_Mute_Indicator_Textbox_1_1_1.add(AnomalyDetection_Border_1_1_1_1);
 8009576:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800957a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f503 622c 	add.w	r2, r3, #2752	; 0xac0
 8009584:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8009588:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f603 23ec 	addw	r3, r3, #2796	; 0xaec
 8009592:	4619      	mov	r1, r3
 8009594:	4610      	mov	r0, r2
 8009596:	f00e faf7 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    AnomalyDetection_Text_1_1_1.setXY(15, 5);
 800959a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800959e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f503 6332 	add.w	r3, r3, #2848	; 0xb20
 80095a8:	2205      	movs	r2, #5
 80095aa:	210f      	movs	r1, #15
 80095ac:	4618      	mov	r0, r3
 80095ae:	f7fa fdc6 	bl	800413e <_ZN8touchgfx8Drawable5setXYEss>
    AnomalyDetection_Text_1_1_1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80095b2:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80095b6:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f503 6432 	add.w	r4, r3, #2848	; 0xb20
 80095c0:	23ff      	movs	r3, #255	; 0xff
 80095c2:	f887 326b 	strb.w	r3, [r7, #619]	; 0x26b
 80095c6:	23ff      	movs	r3, #255	; 0xff
 80095c8:	f887 326a 	strb.w	r3, [r7, #618]	; 0x26a
 80095cc:	23ff      	movs	r3, #255	; 0xff
 80095ce:	f887 3269 	strb.w	r3, [r7, #617]	; 0x269
 80095d2:	f897 326b 	ldrb.w	r3, [r7, #619]	; 0x26b
 80095d6:	041b      	lsls	r3, r3, #16
 80095d8:	461a      	mov	r2, r3
 80095da:	f897 326a 	ldrb.w	r3, [r7, #618]	; 0x26a
 80095de:	021b      	lsls	r3, r3, #8
 80095e0:	431a      	orrs	r2, r3
 80095e2:	f897 3269 	ldrb.w	r3, [r7, #617]	; 0x269
 80095e6:	4313      	orrs	r3, r2
 80095e8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80095ec:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80095f0:	4611      	mov	r1, r2
 80095f2:	4618      	mov	r0, r3
 80095f4:	f7fc f905 	bl	8005802 <_ZN8touchgfx9colortypeC1Em>
 80095f8:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80095fc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	461a      	mov	r2, r3
 8009604:	f8c7 426c 	str.w	r4, [r7, #620]	; 0x26c
 8009608:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800960c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8009610:	601a      	str	r2, [r3, #0]
        color = newColor;
 8009612:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8009616:	f507 721e 	add.w	r2, r7, #632	; 0x278
 800961a:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 800961e:	6812      	ldr	r2, [r2, #0]
 8009620:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8009622:	bf00      	nop
    AnomalyDetection_Text_1_1_1.setLinespacing(0);
 8009624:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8009628:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f503 6332 	add.w	r3, r3, #2848	; 0xb20
 8009632:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 8009636:	2300      	movs	r3, #0
 8009638:	f8a7 3272 	strh.w	r3, [r7, #626]	; 0x272
        linespace = space;
 800963c:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8009640:	f8b7 2272 	ldrh.w	r2, [r7, #626]	; 0x272
 8009644:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8009646:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	3384      	adds	r3, #132	; 0x84
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f8d7 4274 	ldr.w	r4, [r7, #628]	; 0x274
 8009654:	463a      	mov	r2, r7
 8009656:	f8d7 1274 	ldr.w	r1, [r7, #628]	; 0x274
 800965a:	4610      	mov	r0, r2
 800965c:	4798      	blx	r3
 800965e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8009662:	f5a3 721e 	sub.w	r2, r3, #632	; 0x278
 8009666:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800966a:	ca07      	ldmia	r2, {r0, r1, r2}
 800966c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8009670:	bf00      	nop
    AnomalyDetection_Text_1_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_V6ST));
 8009672:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8009676:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f503 6432 	add.w	r4, r3, #2848	; 0xb20
 8009680:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8009684:	2104      	movs	r1, #4
 8009686:	4618      	mov	r0, r3
 8009688:	f7fc fa1c 	bl	8005ac4 <_ZN8touchgfx9TypedTextC1Et>
 800968c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8009690:	4619      	mov	r1, r3
 8009692:	4620      	mov	r0, r4
 8009694:	f010 fa4c 	bl	8019b30 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8009698:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800969c:	4618      	mov	r0, r3
 800969e:	f7fa fc3b 	bl	8003f18 <_ZN8touchgfx9TypedTextD1Ev>
    Alarm_Mute_Indicator_Textbox_1_1_1.add(AnomalyDetection_Text_1_1_1);
 80096a2:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80096a6:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f503 622c 	add.w	r2, r3, #2752	; 0xac0
 80096b0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80096b4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f503 6332 	add.w	r3, r3, #2848	; 0xb20
 80096be:	4619      	mov	r1, r3
 80096c0:	4610      	mov	r0, r2
 80096c2:	f00e fa61 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    add(Alarm_Mute_Indicator_Textbox_1_1_1);
 80096c6:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80096ca:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80096ce:	681a      	ldr	r2, [r3, #0]
 80096d0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80096d4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 80096de:	4619      	mov	r1, r3
 80096e0:	4610      	mov	r0, r2
 80096e2:	f7fc f92b 	bl	800593c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80096e6:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80096ea:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4618      	mov	r0, r3
 80096f2:	f507 771f 	add.w	r7, r7, #636	; 0x27c
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd90      	pop	{r4, r7, pc}
 80096fa:	bf00      	nop

080096fc <_ZN12MainViewBaseD1Ev>:

MainViewBase::~MainViewBase()
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b082      	sub	sp, #8
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
 8009704:	4a93      	ldr	r2, [pc, #588]	; (8009954 <_ZN12MainViewBaseD1Ev+0x258>)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	601a      	str	r2, [r3, #0]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f603 3378 	addw	r3, r3, #2936	; 0xb78
 8009710:	4618      	mov	r0, r3
 8009712:	f000 fa35 	bl	8009b80 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f603 3368 	addw	r3, r3, #2920	; 0xb68
 800971c:	4618      	mov	r0, r3
 800971e:	f000 fa51 	bl	8009bc4 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivED1Ev>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f503 6332 	add.w	r3, r3, #2848	; 0xb20
 8009728:	4618      	mov	r0, r3
 800972a:	f7fd f9b7 	bl	8006a9c <_ZN8touchgfx8TextAreaD1Ev>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f603 23ec 	addw	r3, r3, #2796	; 0xaec
 8009734:	4618      	mov	r0, r3
 8009736:	f7fd f98f 	bl	8006a58 <_ZN8touchgfx13BoxWithBorderD1Ev>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 8009740:	4618      	mov	r0, r3
 8009742:	f7fd f945 	bl	80069d0 <_ZN8touchgfx9ContainerD1Ev>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 800974c:	4618      	mov	r0, r3
 800974e:	f7fd f9cd 	bl	8006aec <_ZN8touchgfx6ButtonD1Ev>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f603 2358 	addw	r3, r3, #2648	; 0xa58
 8009758:	4618      	mov	r0, r3
 800975a:	f7fd f9c7 	bl	8006aec <_ZN8touchgfx6ButtonD1Ev>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f603 232c 	addw	r3, r3, #2604	; 0xa2c
 8009764:	4618      	mov	r0, r3
 8009766:	f7fd f955 	bl	8006a14 <_ZN8touchgfx5ImageD1Ev>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f503 6320 	add.w	r3, r3, #2560	; 0xa00
 8009770:	4618      	mov	r0, r3
 8009772:	f7fd f94f 	bl	8006a14 <_ZN8touchgfx5ImageD1Ev>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f603 13b8 	addw	r3, r3, #2488	; 0x9b8
 800977c:	4618      	mov	r0, r3
 800977e:	f7fd f98d 	bl	8006a9c <_ZN8touchgfx8TextAreaD1Ev>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f603 1384 	addw	r3, r3, #2436	; 0x984
 8009788:	4618      	mov	r0, r3
 800978a:	f7fd f965 	bl	8006a58 <_ZN8touchgfx13BoxWithBorderD1Ev>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f603 1358 	addw	r3, r3, #2392	; 0x958
 8009794:	4618      	mov	r0, r3
 8009796:	f7fd f91b 	bl	80069d0 <_ZN8touchgfx9ContainerD1Ev>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 80097a0:	4618      	mov	r0, r3
 80097a2:	f7fd f97b 	bl	8006a9c <_ZN8touchgfx8TextAreaD1Ev>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f603 03c8 	addw	r3, r3, #2248	; 0x8c8
 80097ac:	4618      	mov	r0, r3
 80097ae:	f7fd f975 	bl	8006a9c <_ZN8touchgfx8TextAreaD1Ev>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80097b8:	4618      	mov	r0, r3
 80097ba:	f7fd f94d 	bl	8006a58 <_ZN8touchgfx13BoxWithBorderD1Ev>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f503 6306 	add.w	r3, r3, #2144	; 0x860
 80097c4:	4618      	mov	r0, r3
 80097c6:	f7fd f947 	bl	8006a58 <_ZN8touchgfx13BoxWithBorderD1Ev>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f603 0334 	addw	r3, r3, #2100	; 0x834
 80097d0:	4618      	mov	r0, r3
 80097d2:	f7fd f8fd 	bl	80069d0 <_ZN8touchgfx9ContainerD1Ev>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f203 73ec 	addw	r3, r3, #2028	; 0x7ec
 80097dc:	4618      	mov	r0, r3
 80097de:	f7fd f95d 	bl	8006a9c <_ZN8touchgfx8TextAreaD1Ev>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f203 73a4 	addw	r3, r3, #1956	; 0x7a4
 80097e8:	4618      	mov	r0, r3
 80097ea:	f7fd f957 	bl	8006a9c <_ZN8touchgfx8TextAreaD1Ev>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f503 63ee 	add.w	r3, r3, #1904	; 0x770
 80097f4:	4618      	mov	r0, r3
 80097f6:	f7fd f92f 	bl	8006a58 <_ZN8touchgfx13BoxWithBorderD1Ev>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f203 733c 	addw	r3, r3, #1852	; 0x73c
 8009800:	4618      	mov	r0, r3
 8009802:	f7fd f929 	bl	8006a58 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f503 63e2 	add.w	r3, r3, #1808	; 0x710
 800980c:	4618      	mov	r0, r3
 800980e:	f7fd f8df 	bl	80069d0 <_ZN8touchgfx9ContainerD1Ev>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f503 63d9 	add.w	r3, r3, #1736	; 0x6c8
 8009818:	4618      	mov	r0, r3
 800981a:	f7fd f93f 	bl	8006a9c <_ZN8touchgfx8TextAreaD1Ev>
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f203 6394 	addw	r3, r3, #1684	; 0x694
 8009824:	4618      	mov	r0, r3
 8009826:	f7fd f917 	bl	8006a58 <_ZN8touchgfx13BoxWithBorderD1Ev>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 8009830:	4618      	mov	r0, r3
 8009832:	f7fd f8cd 	bl	80069d0 <_ZN8touchgfx9ContainerD1Ev>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f203 6334 	addw	r3, r3, #1588	; 0x634
 800983c:	4618      	mov	r0, r3
 800983e:	f7fd f90b 	bl	8006a58 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 8009848:	4618      	mov	r0, r3
 800984a:	f7fd f8c1 	bl	80069d0 <_ZN8touchgfx9ContainerD1Ev>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f203 53d4 	addw	r3, r3, #1492	; 0x5d4
 8009854:	4618      	mov	r0, r3
 8009856:	f7fd f8ff 	bl	8006a58 <_ZN8touchgfx13BoxWithBorderD1Ev>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f503 63b5 	add.w	r3, r3, #1448	; 0x5a8
 8009860:	4618      	mov	r0, r3
 8009862:	f7fd f8b5 	bl	80069d0 <_ZN8touchgfx9ContainerD1Ev>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f203 5374 	addw	r3, r3, #1396	; 0x574
 800986c:	4618      	mov	r0, r3
 800986e:	f7fd f8f3 	bl	8006a58 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f503 63a9 	add.w	r3, r3, #1352	; 0x548
 8009878:	4618      	mov	r0, r3
 800987a:	f7fd f8a9 	bl	80069d0 <_ZN8touchgfx9ContainerD1Ev>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8009884:	4618      	mov	r0, r3
 8009886:	f000 fa6d 	bl	8009d64 <_ZN8touchgfx12ToggleButtonD1Ev>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8009890:	4618      	mov	r0, r3
 8009892:	f000 fa31 	bl	8009cf8 <_ZN8touchgfx6SliderD1Ev>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f503 7375 	add.w	r3, r3, #980	; 0x3d4
 800989c:	4618      	mov	r0, r3
 800989e:	f7fd f8fd 	bl	8006a9c <_ZN8touchgfx8TextAreaD1Ev>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 80098a8:	4618      	mov	r0, r3
 80098aa:	f7fd f8d5 	bl	8006a58 <_ZN8touchgfx13BoxWithBorderD1Ev>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f503 735d 	add.w	r3, r3, #884	; 0x374
 80098b4:	4618      	mov	r0, r3
 80098b6:	f7fd f88b 	bl	80069d0 <_ZN8touchgfx9ContainerD1Ev>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80098c0:	4618      	mov	r0, r3
 80098c2:	f000 f9ef 	bl	8009ca4 <_ZN8touchgfx12TextProgressD1Ev>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 80098cc:	4618      	mov	r0, r3
 80098ce:	f7fd f8c3 	bl	8006a58 <_ZN8touchgfx13BoxWithBorderD1Ev>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80098d8:	4618      	mov	r0, r3
 80098da:	f7fd f879 	bl	80069d0 <_ZN8touchgfx9ContainerD1Ev>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80098e4:	4618      	mov	r0, r3
 80098e6:	f7fd f8d9 	bl	8006a9c <_ZN8touchgfx8TextAreaD1Ev>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80098f0:	4618      	mov	r0, r3
 80098f2:	f7fd f8b1 	bl	8006a58 <_ZN8touchgfx13BoxWithBorderD1Ev>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80098fc:	4618      	mov	r0, r3
 80098fe:	f7fd f867 	bl	80069d0 <_ZN8touchgfx9ContainerD1Ev>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8009908:	4618      	mov	r0, r3
 800990a:	f7fd f8a5 	bl	8006a58 <_ZN8touchgfx13BoxWithBorderD1Ev>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	33f8      	adds	r3, #248	; 0xf8
 8009912:	4618      	mov	r0, r3
 8009914:	f7fd f85c 	bl	80069d0 <_ZN8touchgfx9ContainerD1Ev>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	33c4      	adds	r3, #196	; 0xc4
 800991c:	4618      	mov	r0, r3
 800991e:	f7fd f89b 	bl	8006a58 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	3398      	adds	r3, #152	; 0x98
 8009926:	4618      	mov	r0, r3
 8009928:	f7fd f852 	bl	80069d0 <_ZN8touchgfx9ContainerD1Ev>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	336c      	adds	r3, #108	; 0x6c
 8009930:	4618      	mov	r0, r3
 8009932:	f7fd f86f 	bl	8006a14 <_ZN8touchgfx5ImageD1Ev>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	3340      	adds	r3, #64	; 0x40
 800993a:	4618      	mov	r0, r3
 800993c:	f7fc f866 	bl	8005a0c <_ZN8touchgfx3BoxD1Ev>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	4618      	mov	r0, r3
 8009944:	f7fd fadc 	bl	8006f00 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
{

}
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	4618      	mov	r0, r3
 800994c:	3708      	adds	r7, #8
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}
 8009952:	bf00      	nop
 8009954:	0802ee74 	.word	0x0802ee74

08009958 <_ZN12MainViewBaseD0Ev>:
MainViewBase::~MainViewBase()
 8009958:	b580      	push	{r7, lr}
 800995a:	b082      	sub	sp, #8
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
}
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f7ff fecb 	bl	80096fc <_ZN12MainViewBaseD1Ev>
 8009966:	f640 3188 	movw	r1, #2952	; 0xb88
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f022 fe4f 	bl	802c60e <_ZdlPvj>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	4618      	mov	r0, r3
 8009974:	3708      	adds	r7, #8
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}

0800997a <_ZN12MainViewBase11setupScreenEv>:

void MainViewBase::setupScreen()
{
 800997a:	b480      	push	{r7}
 800997c:	b083      	sub	sp, #12
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]

}
 8009982:	bf00      	nop
 8009984:	370c      	adds	r7, #12
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr

0800998e <_ZN12MainViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi>:

void MainViewBase::sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value)
{
 800998e:	b580      	push	{r7, lr}
 8009990:	b084      	sub	sp, #16
 8009992:	af00      	add	r7, sp, #0
 8009994:	60f8      	str	r0, [r7, #12]
 8009996:	60b9      	str	r1, [r7, #8]
 8009998:	607a      	str	r2, [r7, #4]
    if (&src == &Volume_Slider)
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80099a0:	68ba      	ldr	r2, [r7, #8]
 80099a2:	429a      	cmp	r2, r3
 80099a4:	d106      	bne.n	80099b4 <_ZN12MainViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi+0x26>
    {
        //Set_Volume_Slider
        //When Volume_Slider value changed call virtual function
        //Call set_volume_slider
        set_volume_slider(value);
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	332c      	adds	r3, #44	; 0x2c
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	6879      	ldr	r1, [r7, #4]
 80099b0:	68f8      	ldr	r0, [r7, #12]
 80099b2:	4798      	blx	r3
    }
}
 80099b4:	bf00      	nop
 80099b6:	3710      	adds	r7, #16
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}

080099bc <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void MainViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b082      	sub	sp, #8
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	6039      	str	r1, [r7, #0]
    if (&src == &Localize_Button)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 80099cc:	683a      	ldr	r2, [r7, #0]
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d106      	bne.n	80099e0 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x24>
    {
        //Switch_To_Anomaly_Screen
        //When Localize_Button clicked change screen to Localize_Anomaly
        //Go to Localize_Anomaly with screen transition towards North
        application().gotoLocalize_AnomalyScreenWipeTransitionNorth();
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f7fd fa88 	bl	8006ee8 <_ZN12MainViewBase11applicationEv>
 80099d8:	4603      	mov	r3, r0
 80099da:	4618      	mov	r0, r3
 80099dc:	f7fa fef2 	bl	80047c4 <_ZN23FrontendApplicationBase45gotoLocalize_AnomalyScreenWipeTransitionNorthEv>
    }
    if (&src == &Voice_Toggle_Button)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80099e6:	683a      	ldr	r2, [r7, #0]
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d105      	bne.n	80099f8 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3c>
    {
        //Toggle_Voice
        //When Voice_Toggle_Button clicked call virtual function
        //Call toggle_voice
        toggle_voice();
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	3334      	adds	r3, #52	; 0x34
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	4798      	blx	r3
    }
    if (&src == &Alert_Mute_Button)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f603 2358 	addw	r3, r3, #2648	; 0xa58
 80099fe:	683a      	ldr	r2, [r7, #0]
 8009a00:	429a      	cmp	r2, r3
 8009a02:	d105      	bne.n	8009a10 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x54>
    {
        //Alert_Mute_Pressed
        //When Alert_Mute_Button clicked call virtual function
        //Call alert_mute_pressed
        alert_mute_pressed();
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	3338      	adds	r3, #56	; 0x38
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	4798      	blx	r3
    }
}
 8009a10:	bf00      	nop
 8009a12:	3708      	adds	r7, #8
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <_ZN12MainViewBase14handleKeyEventEh>:

void MainViewBase::handleKeyEvent(uint8_t key)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b082      	sub	sp, #8
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
 8009a20:	460b      	mov	r3, r1
 8009a22:	70fb      	strb	r3, [r7, #3]
    if(87 == key)
 8009a24:	78fb      	ldrb	r3, [r7, #3]
 8009a26:	2b57      	cmp	r3, #87	; 0x57
 8009a28:	d105      	bne.n	8009a36 <_ZN12MainViewBase14handleKeyEventEh+0x1e>
    {
        //Anomaly_Alert_Handler
        //When hardware button 87 clicked call virtual function
        //Call update_anomaly_alert
        update_anomaly_alert();
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	3330      	adds	r3, #48	; 0x30
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	4798      	blx	r3
    
    }

    if(88 == key)
 8009a36:	78fb      	ldrb	r3, [r7, #3]
 8009a38:	2b58      	cmp	r3, #88	; 0x58
 8009a3a:	d105      	bne.n	8009a48 <_ZN12MainViewBase14handleKeyEventEh+0x30>
    {
        //Set_Volume_Rotary_Encoder
        //When hardware button 88 clicked call virtual function
        //Call set_volume_encoder
        set_volume_encoder();
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	333c      	adds	r3, #60	; 0x3c
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	4798      	blx	r3
    
    }

    if(89 == key)
 8009a48:	78fb      	ldrb	r3, [r7, #3]
 8009a4a:	2b59      	cmp	r3, #89	; 0x59
 8009a4c:	d105      	bne.n	8009a5a <_ZN12MainViewBase14handleKeyEventEh+0x42>
    {
        //Toggle_Voice_SW
        //When hardware button 89 clicked call virtual function
        //Call toggle_voice
        toggle_voice();
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	3334      	adds	r3, #52	; 0x34
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	4798      	blx	r3
    
    }

    if(90 == key)
 8009a5a:	78fb      	ldrb	r3, [r7, #3]
 8009a5c:	2b5a      	cmp	r3, #90	; 0x5a
 8009a5e:	d105      	bne.n	8009a6c <_ZN12MainViewBase14handleKeyEventEh+0x54>
    {
        //Alert_Mute_Pressed_Button
        //When hardware button 90 clicked call virtual function
        //Call alert_mute_pressed
        alert_mute_pressed();
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	3338      	adds	r3, #56	; 0x38
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	4798      	blx	r3
    
    }
}
 8009a6c:	bf00      	nop
 8009a6e:	3708      	adds	r7, #8
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>:
    View()
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b082      	sub	sp, #8
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f013 fbe0 	bl	801d244 <_ZN8touchgfx6ScreenC1Ev>
 8009a84:	4a05      	ldr	r2, [pc, #20]	; (8009a9c <_ZN8touchgfx4ViewI13MainPresenterEC1Ev+0x28>)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	601a      	str	r2, [r3, #0]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	4618      	mov	r0, r3
 8009a94:	3708      	adds	r7, #8
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}
 8009a9a:	bf00      	nop
 8009a9c:	0802eeec 	.word	0x0802eeec

08009aa0 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev>:
class GenericCallback<T1, T2, void>
 8009aa0:	b480      	push	{r7}
 8009aa2:	b083      	sub	sp, #12
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	4a04      	ldr	r2, [pc, #16]	; (8009abc <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev+0x1c>)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	601a      	str	r2, [r3, #0]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	370c      	adds	r7, #12
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr
 8009abc:	0802ef20 	.word	0x0802ef20

08009ac0 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_2)(T1, T2))
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b084      	sub	sp, #16
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	60f8      	str	r0, [r7, #12]
 8009ac8:	60b9      	str	r1, [r7, #8]
 8009aca:	4639      	mov	r1, r7
 8009acc:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_2)
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f7ff ffe4 	bl	8009aa0 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev>
 8009ad8:	4a08      	ldr	r2, [pc, #32]	; (8009afc <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE+0x3c>)
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	601a      	str	r2, [r3, #0]
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	68ba      	ldr	r2, [r7, #8]
 8009ae2:	605a      	str	r2, [r3, #4]
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	3308      	adds	r3, #8
 8009ae8:	463a      	mov	r2, r7
 8009aea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009aee:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	4618      	mov	r0, r3
 8009af6:	3710      	adds	r7, #16
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}
 8009afc:	0802eed4 	.word	0x0802eed4

08009b00 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b084      	sub	sp, #16
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	60f8      	str	r0, [r7, #12]
 8009b08:	60b9      	str	r1, [r7, #8]
 8009b0a:	4639      	mov	r1, r7
 8009b0c:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	4618      	mov	r0, r3
 8009b14:	f7fc feea 	bl	80068ec <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8009b18:	4a08      	ldr	r2, [pc, #32]	; (8009b3c <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	601a      	str	r2, [r3, #0]
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	68ba      	ldr	r2, [r7, #8]
 8009b22:	605a      	str	r2, [r3, #4]
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	3308      	adds	r3, #8
 8009b28:	463a      	mov	r2, r7
 8009b2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009b2e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	4618      	mov	r0, r3
 8009b36:	3710      	adds	r7, #16
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}
 8009b3c:	0802eebc 	.word	0x0802eebc

08009b40 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>:
    virtual ~GenericCallback()
 8009b40:	b480      	push	{r7}
 8009b42:	b083      	sub	sp, #12
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
    }
 8009b48:	4a04      	ldr	r2, [pc, #16]	; (8009b5c <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev+0x1c>)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	601a      	str	r2, [r3, #0]
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	4618      	mov	r0, r3
 8009b52:	370c      	adds	r7, #12
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr
 8009b5c:	0802ef20 	.word	0x0802ef20

08009b60 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED0Ev>:
    virtual ~GenericCallback()
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b082      	sub	sp, #8
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
    }
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f7ff ffe9 	bl	8009b40 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>
 8009b6e:	2104      	movs	r1, #4
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f022 fd4c 	bl	802c60e <_ZdlPvj>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	4618      	mov	r0, r3
 8009b7a:	3708      	adds	r7, #8
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}

08009b80 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b082      	sub	sp, #8
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
 8009b88:	4a05      	ldr	r2, [pc, #20]	; (8009ba0 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	601a      	str	r2, [r3, #0]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	4618      	mov	r0, r3
 8009b92:	f7fc fedb 	bl	800694c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3708      	adds	r7, #8
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}
 8009ba0:	0802eebc 	.word	0x0802eebc

08009ba4 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b082      	sub	sp, #8
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f7ff ffe7 	bl	8009b80 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8009bb2:	2110      	movs	r1, #16
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f022 fd2a 	bl	802c60e <_ZdlPvj>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3708      	adds	r7, #8
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}

08009bc4 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivED1Ev>:
struct Callback<dest_type, T1, T2, void> : public GenericCallback<T1, T2>
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b082      	sub	sp, #8
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	4a05      	ldr	r2, [pc, #20]	; (8009be4 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivED1Ev+0x20>)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	601a      	str	r2, [r3, #0]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	f7ff ffb3 	bl	8009b40 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3708      	adds	r7, #8
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}
 8009be4:	0802eed4 	.word	0x0802eed4

08009be8 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivED0Ev>:
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b082      	sub	sp, #8
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f7ff ffe7 	bl	8009bc4 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivED1Ev>
 8009bf6:	2110      	movs	r1, #16
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f022 fd08 	bl	802c60e <_ZdlPvj>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	4618      	mov	r0, r3
 8009c02:	3708      	adds	r7, #8
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}

08009c08 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b082      	sub	sp, #8
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
 8009c10:	4a05      	ldr	r2, [pc, #20]	; (8009c28 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	601a      	str	r2, [r3, #0]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f7fd f8e1 	bl	8006de0 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	4618      	mov	r0, r3
 8009c22:	3708      	adds	r7, #8
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}
 8009c28:	0802ef38 	.word	0x0802ef38

08009c2c <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b082      	sub	sp, #8
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f7ff ffe7 	bl	8009c08 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8009c3a:	214c      	movs	r1, #76	; 0x4c
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f022 fce6 	bl	802c60e <_ZdlPvj>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	4618      	mov	r0, r3
 8009c46:	3708      	adds	r7, #8
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}

08009c4c <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 * to implement a progress indicator. For more specific implementations see classes that
 * inherit from AbstractProgressIndicator.
 *
 * @see BoxProgress, CircleProgress, ImageProgress, LineProgress, TextProgress
 */
class AbstractProgressIndicator : public Container
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b082      	sub	sp, #8
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	4a0a      	ldr	r2, [pc, #40]	; (8009c80 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev+0x34>)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	601a      	str	r2, [r3, #0]
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	3358      	adds	r3, #88	; 0x58
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f7fc feb6 	bl	80069d0 <_ZN8touchgfx9ContainerD1Ev>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	332c      	adds	r3, #44	; 0x2c
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f7fc fed3 	bl	8006a14 <_ZN8touchgfx5ImageD1Ev>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	4618      	mov	r0, r3
 8009c72:	f7fc fead 	bl	80069d0 <_ZN8touchgfx9ContainerD1Ev>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3708      	adds	r7, #8
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}
 8009c80:	0802f2e8 	.word	0x0802f2e8

08009c84 <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b082      	sub	sp, #8
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f7ff ffdd 	bl	8009c4c <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 8009c92:	21b4      	movs	r1, #180	; 0xb4
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f022 fcba 	bl	802c60e <_ZdlPvj>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3708      	adds	r7, #8
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}

08009ca4 <_ZN8touchgfx12TextProgressD1Ev>:
/**
 * A text progress will display progress as a number with a given number of decimals.
 *
 * @note The implementation does not use floating point variables to calculate the progress.
 */
class TextProgress : public AbstractProgressIndicator
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b082      	sub	sp, #8
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	4a08      	ldr	r2, [pc, #32]	; (8009cd0 <_ZN8touchgfx12TextProgressD1Ev+0x2c>)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	601a      	str	r2, [r3, #0]
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	33b4      	adds	r3, #180	; 0xb4
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f7ff ffa6 	bl	8009c08 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f7ff ffc4 	bl	8009c4c <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3708      	adds	r7, #8
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	bf00      	nop
 8009cd0:	0802f1fc 	.word	0x0802f1fc

08009cd4 <_ZN8touchgfx12TextProgressD0Ev>:
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b082      	sub	sp, #8
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f7ff ffe1 	bl	8009ca4 <_ZN8touchgfx12TextProgressD1Ev>
 8009ce2:	f44f 718a 	mov.w	r1, #276	; 0x114
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f022 fc91 	bl	802c60e <_ZdlPvj>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3708      	adds	r7, #8
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
	...

08009cf8 <_ZN8touchgfx6SliderD1Ev>:
class Slider : public Container
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b082      	sub	sp, #8
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
 8009d00:	4a0f      	ldr	r2, [pc, #60]	; (8009d40 <_ZN8touchgfx6SliderD1Ev+0x48>)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	601a      	str	r2, [r3, #0]
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	33b8      	adds	r3, #184	; 0xb8
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f7fc fe60 	bl	80069d0 <_ZN8touchgfx9ContainerD1Ev>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	338c      	adds	r3, #140	; 0x8c
 8009d14:	4618      	mov	r0, r3
 8009d16:	f7fc fe7d 	bl	8006a14 <_ZN8touchgfx5ImageD1Ev>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	3360      	adds	r3, #96	; 0x60
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f7fc fe78 	bl	8006a14 <_ZN8touchgfx5ImageD1Ev>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	3334      	adds	r3, #52	; 0x34
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f7fc fe73 	bl	8006a14 <_ZN8touchgfx5ImageD1Ev>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	4618      	mov	r0, r3
 8009d32:	f7fc fe4d 	bl	80069d0 <_ZN8touchgfx9ContainerD1Ev>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3708      	adds	r7, #8
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}
 8009d40:	0802f44c 	.word	0x0802f44c

08009d44 <_ZN8touchgfx6SliderD0Ev>:
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b082      	sub	sp, #8
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f7ff ffd3 	bl	8009cf8 <_ZN8touchgfx6SliderD1Ev>
 8009d52:	21f4      	movs	r1, #244	; 0xf4
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f022 fc5a 	bl	802c60e <_ZdlPvj>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3708      	adds	r7, #8
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <_ZN8touchgfx12ToggleButtonD1Ev>:
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b082      	sub	sp, #8
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	4a05      	ldr	r2, [pc, #20]	; (8009d84 <_ZN8touchgfx12ToggleButtonD1Ev+0x20>)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	601a      	str	r2, [r3, #0]
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	4618      	mov	r0, r3
 8009d76:	f7fc feb9 	bl	8006aec <_ZN8touchgfx6ButtonD1Ev>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3708      	adds	r7, #8
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}
 8009d84:	0802f6e0 	.word	0x0802f6e0

08009d88 <_ZN8touchgfx12ToggleButtonD0Ev>:
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b082      	sub	sp, #8
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f7ff ffe7 	bl	8009d64 <_ZN8touchgfx12ToggleButtonD1Ev>
 8009d96:	2138      	movs	r1, #56	; 0x38
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f022 fc38 	bl	802c60e <_ZdlPvj>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	4618      	mov	r0, r3
 8009da2:	3708      	adds	r7, #8
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}

08009da8 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b082      	sub	sp, #8
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
 8009db0:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	685b      	ldr	r3, [r3, #4]
 8009db6:	687a      	ldr	r2, [r7, #4]
 8009db8:	68d2      	ldr	r2, [r2, #12]
 8009dba:	1052      	asrs	r2, r2, #1
 8009dbc:	1898      	adds	r0, r3, r2
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	68db      	ldr	r3, [r3, #12]
 8009dc2:	f003 0301 	and.w	r3, r3, #1
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d102      	bne.n	8009dd0 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	689b      	ldr	r3, [r3, #8]
 8009dce:	e00a      	b.n	8009de6 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	685b      	ldr	r3, [r3, #4]
 8009dd4:	687a      	ldr	r2, [r7, #4]
 8009dd6:	68d2      	ldr	r2, [r2, #12]
 8009dd8:	1052      	asrs	r2, r2, #1
 8009dda:	4413      	add	r3, r2
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	687a      	ldr	r2, [r7, #4]
 8009de0:	6892      	ldr	r2, [r2, #8]
 8009de2:	4413      	add	r3, r2
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	6839      	ldr	r1, [r7, #0]
 8009de8:	4798      	blx	r3
    }
 8009dea:	bf00      	nop
 8009dec:	3708      	adds	r7, #8
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}

08009df2 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8009df2:	b480      	push	{r7}
 8009df4:	b083      	sub	sp, #12
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d010      	beq.n	8009e24 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	689b      	ldr	r3, [r3, #8]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d107      	bne.n	8009e1a <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	68db      	ldr	r3, [r3, #12]
 8009e0e:	f003 0301 	and.w	r3, r3, #1
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d101      	bne.n	8009e1a <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8009e16:	2301      	movs	r3, #1
 8009e18:	e000      	b.n	8009e1c <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	2b01      	cmp	r3, #1
 8009e1e:	d001      	beq.n	8009e24 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8009e20:	2301      	movs	r3, #1
 8009e22:	e000      	b.n	8009e26 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8009e24:	2300      	movs	r3, #0
    }
 8009e26:	4618      	mov	r0, r3
 8009e28:	370c      	adds	r7, #12
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e30:	4770      	bx	lr

08009e32 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7executeES4_i>:
    virtual void execute(T1 t1, T2 t2)
 8009e32:	b580      	push	{r7, lr}
 8009e34:	b084      	sub	sp, #16
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	60f8      	str	r0, [r7, #12]
 8009e3a:	60b9      	str	r1, [r7, #8]
 8009e3c:	607a      	str	r2, [r7, #4]
        (pobject->*pmemfun)(t1, t2);
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	685b      	ldr	r3, [r3, #4]
 8009e42:	68fa      	ldr	r2, [r7, #12]
 8009e44:	68d2      	ldr	r2, [r2, #12]
 8009e46:	1052      	asrs	r2, r2, #1
 8009e48:	1898      	adds	r0, r3, r2
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	68db      	ldr	r3, [r3, #12]
 8009e4e:	f003 0301 	and.w	r3, r3, #1
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d102      	bne.n	8009e5c <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7executeES4_i+0x2a>
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	689b      	ldr	r3, [r3, #8]
 8009e5a:	e00a      	b.n	8009e72 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7executeES4_i+0x40>
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	685b      	ldr	r3, [r3, #4]
 8009e60:	68fa      	ldr	r2, [r7, #12]
 8009e62:	68d2      	ldr	r2, [r2, #12]
 8009e64:	1052      	asrs	r2, r2, #1
 8009e66:	4413      	add	r3, r2
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	68fa      	ldr	r2, [r7, #12]
 8009e6c:	6892      	ldr	r2, [r2, #8]
 8009e6e:	4413      	add	r3, r2
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	687a      	ldr	r2, [r7, #4]
 8009e74:	68b9      	ldr	r1, [r7, #8]
 8009e76:	4798      	blx	r3
    }
 8009e78:	bf00      	nop
 8009e7a:	3710      	adds	r7, #16
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}

08009e80 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7isValidEv>:
    virtual bool isValid() const
 8009e80:	b480      	push	{r7}
 8009e82:	b083      	sub	sp, #12
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	685b      	ldr	r3, [r3, #4]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d010      	beq.n	8009eb2 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7isValidEv+0x32>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	689b      	ldr	r3, [r3, #8]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d107      	bne.n	8009ea8 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7isValidEv+0x28>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	68db      	ldr	r3, [r3, #12]
 8009e9c:	f003 0301 	and.w	r3, r3, #1
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d101      	bne.n	8009ea8 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7isValidEv+0x28>
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	e000      	b.n	8009eaa <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7isValidEv+0x2a>
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	d001      	beq.n	8009eb2 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7isValidEv+0x32>
 8009eae:	2301      	movs	r3, #1
 8009eb0:	e000      	b.n	8009eb4 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7isValidEv+0x34>
 8009eb2:	2300      	movs	r3, #0
    }
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	370c      	adds	r7, #12
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebe:	4770      	bx	lr

08009ec0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	4801      	ldr	r0, [pc, #4]	; (8009ecc <__tcf_0+0xc>)
 8009ec6:	f7fa f805 	bl	8003ed4 <_ZN8touchgfx13GeneratedFontD1Ev>
 8009eca:	bd80      	pop	{r7, pc}
 8009ecc:	24001fe4 	.word	0x24001fe4

08009ed0 <_Z23getFont_verdana_20_4bppv>:
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b08e      	sub	sp, #56	; 0x38
 8009ed4:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8009ed6:	4b21      	ldr	r3, [pc, #132]	; (8009f5c <_Z23getFont_verdana_20_4bppv+0x8c>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f3bf 8f5b 	dmb	ish
 8009ede:	f003 0301 	and.w	r3, r3, #1
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	bf0c      	ite	eq
 8009ee6:	2301      	moveq	r3, #1
 8009ee8:	2300      	movne	r3, #0
 8009eea:	b2db      	uxtb	r3, r3
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d030      	beq.n	8009f52 <_Z23getFont_verdana_20_4bppv+0x82>
 8009ef0:	481a      	ldr	r0, [pc, #104]	; (8009f5c <_Z23getFont_verdana_20_4bppv+0x8c>)
 8009ef2:	f022 fb8e 	bl	802c612 <__cxa_guard_acquire>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	bf14      	ite	ne
 8009efc:	2301      	movne	r3, #1
 8009efe:	2300      	moveq	r3, #0
 8009f00:	b2db      	uxtb	r3, r3
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d025      	beq.n	8009f52 <_Z23getFont_verdana_20_4bppv+0x82>
 8009f06:	2300      	movs	r3, #0
 8009f08:	930c      	str	r3, [sp, #48]	; 0x30
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f0e:	2300      	movs	r3, #0
 8009f10:	930a      	str	r3, [sp, #40]	; 0x28
 8009f12:	233f      	movs	r3, #63	; 0x3f
 8009f14:	9309      	str	r3, [sp, #36]	; 0x24
 8009f16:	4b12      	ldr	r3, [pc, #72]	; (8009f60 <_Z23getFont_verdana_20_4bppv+0x90>)
 8009f18:	9308      	str	r3, [sp, #32]
 8009f1a:	4b12      	ldr	r3, [pc, #72]	; (8009f64 <_Z23getFont_verdana_20_4bppv+0x94>)
 8009f1c:	9307      	str	r3, [sp, #28]
 8009f1e:	2300      	movs	r3, #0
 8009f20:	9306      	str	r3, [sp, #24]
 8009f22:	2300      	movs	r3, #0
 8009f24:	9305      	str	r3, [sp, #20]
 8009f26:	2301      	movs	r3, #1
 8009f28:	9304      	str	r3, [sp, #16]
 8009f2a:	2304      	movs	r3, #4
 8009f2c:	9303      	str	r3, [sp, #12]
 8009f2e:	2300      	movs	r3, #0
 8009f30:	9302      	str	r3, [sp, #8]
 8009f32:	2300      	movs	r3, #0
 8009f34:	9301      	str	r3, [sp, #4]
 8009f36:	2314      	movs	r3, #20
 8009f38:	9300      	str	r3, [sp, #0]
 8009f3a:	2314      	movs	r3, #20
 8009f3c:	2201      	movs	r2, #1
 8009f3e:	490a      	ldr	r1, [pc, #40]	; (8009f68 <_Z23getFont_verdana_20_4bppv+0x98>)
 8009f40:	480a      	ldr	r0, [pc, #40]	; (8009f6c <_Z23getFont_verdana_20_4bppv+0x9c>)
 8009f42:	f7fb fbbd 	bl	80056c0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8009f46:	480a      	ldr	r0, [pc, #40]	; (8009f70 <_Z23getFont_verdana_20_4bppv+0xa0>)
 8009f48:	f022 fbae 	bl	802c6a8 <atexit>
 8009f4c:	4803      	ldr	r0, [pc, #12]	; (8009f5c <_Z23getFont_verdana_20_4bppv+0x8c>)
 8009f4e:	f022 fb6c 	bl	802c62a <__cxa_guard_release>
    return verdana_20_4bpp;
 8009f52:	4b06      	ldr	r3, [pc, #24]	; (8009f6c <_Z23getFont_verdana_20_4bppv+0x9c>)
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}
 8009f5a:	bf00      	nop
 8009f5c:	24002010 	.word	0x24002010
 8009f60:	0802ff50 	.word	0x0802ff50
 8009f64:	0802ff64 	.word	0x0802ff64
 8009f68:	900007ec 	.word	0x900007ec
 8009f6c:	24001fe4 	.word	0x24001fe4
 8009f70:	08009ec1 	.word	0x08009ec1

08009f74 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8009f74:	b580      	push	{r7, lr}
 8009f76:	af00      	add	r7, sp, #0
 8009f78:	4801      	ldr	r0, [pc, #4]	; (8009f80 <__tcf_0+0xc>)
 8009f7a:	f7f9 ffab 	bl	8003ed4 <_ZN8touchgfx13GeneratedFontD1Ev>
 8009f7e:	bd80      	pop	{r7, pc}
 8009f80:	24002014 	.word	0x24002014

08009f84 <_Z23getFont_verdana_40_4bppv>:
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b08e      	sub	sp, #56	; 0x38
 8009f88:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8009f8a:	4b21      	ldr	r3, [pc, #132]	; (800a010 <_Z23getFont_verdana_40_4bppv+0x8c>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f3bf 8f5b 	dmb	ish
 8009f92:	f003 0301 	and.w	r3, r3, #1
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	bf0c      	ite	eq
 8009f9a:	2301      	moveq	r3, #1
 8009f9c:	2300      	movne	r3, #0
 8009f9e:	b2db      	uxtb	r3, r3
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d030      	beq.n	800a006 <_Z23getFont_verdana_40_4bppv+0x82>
 8009fa4:	481a      	ldr	r0, [pc, #104]	; (800a010 <_Z23getFont_verdana_40_4bppv+0x8c>)
 8009fa6:	f022 fb34 	bl	802c612 <__cxa_guard_acquire>
 8009faa:	4603      	mov	r3, r0
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	bf14      	ite	ne
 8009fb0:	2301      	movne	r3, #1
 8009fb2:	2300      	moveq	r3, #0
 8009fb4:	b2db      	uxtb	r3, r3
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d025      	beq.n	800a006 <_Z23getFont_verdana_40_4bppv+0x82>
 8009fba:	2300      	movs	r3, #0
 8009fbc:	930c      	str	r3, [sp, #48]	; 0x30
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	930b      	str	r3, [sp, #44]	; 0x2c
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	930a      	str	r3, [sp, #40]	; 0x28
 8009fc6:	233f      	movs	r3, #63	; 0x3f
 8009fc8:	9309      	str	r3, [sp, #36]	; 0x24
 8009fca:	4b12      	ldr	r3, [pc, #72]	; (800a014 <_Z23getFont_verdana_40_4bppv+0x90>)
 8009fcc:	9308      	str	r3, [sp, #32]
 8009fce:	4b12      	ldr	r3, [pc, #72]	; (800a018 <_Z23getFont_verdana_40_4bppv+0x94>)
 8009fd0:	9307      	str	r3, [sp, #28]
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	9306      	str	r3, [sp, #24]
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	9305      	str	r3, [sp, #20]
 8009fda:	2301      	movs	r3, #1
 8009fdc:	9304      	str	r3, [sp, #16]
 8009fde:	2304      	movs	r3, #4
 8009fe0:	9303      	str	r3, [sp, #12]
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	9302      	str	r3, [sp, #8]
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	9301      	str	r3, [sp, #4]
 8009fea:	2328      	movs	r3, #40	; 0x28
 8009fec:	9300      	str	r3, [sp, #0]
 8009fee:	2328      	movs	r3, #40	; 0x28
 8009ff0:	2201      	movs	r2, #1
 8009ff2:	490a      	ldr	r1, [pc, #40]	; (800a01c <_Z23getFont_verdana_40_4bppv+0x98>)
 8009ff4:	480a      	ldr	r0, [pc, #40]	; (800a020 <_Z23getFont_verdana_40_4bppv+0x9c>)
 8009ff6:	f7fb fb63 	bl	80056c0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8009ffa:	480a      	ldr	r0, [pc, #40]	; (800a024 <_Z23getFont_verdana_40_4bppv+0xa0>)
 8009ffc:	f022 fb54 	bl	802c6a8 <atexit>
 800a000:	4803      	ldr	r0, [pc, #12]	; (800a010 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800a002:	f022 fb12 	bl	802c62a <__cxa_guard_release>
    return verdana_40_4bpp;
 800a006:	4b06      	ldr	r3, [pc, #24]	; (800a020 <_Z23getFont_verdana_40_4bppv+0x9c>)
}
 800a008:	4618      	mov	r0, r3
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}
 800a00e:	bf00      	nop
 800a010:	24002040 	.word	0x24002040
 800a014:	0802ff54 	.word	0x0802ff54
 800a018:	0802ff68 	.word	0x0802ff68
 800a01c:	900007fc 	.word	0x900007fc
 800a020:	24002014 	.word	0x24002014
 800a024:	08009f75 	.word	0x08009f75

0800a028 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdanab_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdanab_10_4bpp();

touchgfx::GeneratedFont& getFont_verdanab_10_4bpp()
{
    static touchgfx::GeneratedFont verdanab_10_4bpp(glyphs_verdanab_10_4bpp, 26, 12, 10, 0, 0, 4, 1, 0, 1, unicodes_verdanab_10_4bpp, kerning_verdanab_10_4bpp, 63, 0, 0, 0);
 800a028:	b580      	push	{r7, lr}
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	4801      	ldr	r0, [pc, #4]	; (800a034 <__tcf_0+0xc>)
 800a02e:	f7f9 ff51 	bl	8003ed4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800a032:	bd80      	pop	{r7, pc}
 800a034:	24002044 	.word	0x24002044

0800a038 <_Z24getFont_verdanab_10_4bppv>:
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b08e      	sub	sp, #56	; 0x38
 800a03c:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdanab_10_4bpp(glyphs_verdanab_10_4bpp, 26, 12, 10, 0, 0, 4, 1, 0, 1, unicodes_verdanab_10_4bpp, kerning_verdanab_10_4bpp, 63, 0, 0, 0);
 800a03e:	4b21      	ldr	r3, [pc, #132]	; (800a0c4 <_Z24getFont_verdanab_10_4bppv+0x8c>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f3bf 8f5b 	dmb	ish
 800a046:	f003 0301 	and.w	r3, r3, #1
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	bf0c      	ite	eq
 800a04e:	2301      	moveq	r3, #1
 800a050:	2300      	movne	r3, #0
 800a052:	b2db      	uxtb	r3, r3
 800a054:	2b00      	cmp	r3, #0
 800a056:	d030      	beq.n	800a0ba <_Z24getFont_verdanab_10_4bppv+0x82>
 800a058:	481a      	ldr	r0, [pc, #104]	; (800a0c4 <_Z24getFont_verdanab_10_4bppv+0x8c>)
 800a05a:	f022 fada 	bl	802c612 <__cxa_guard_acquire>
 800a05e:	4603      	mov	r3, r0
 800a060:	2b00      	cmp	r3, #0
 800a062:	bf14      	ite	ne
 800a064:	2301      	movne	r3, #1
 800a066:	2300      	moveq	r3, #0
 800a068:	b2db      	uxtb	r3, r3
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d025      	beq.n	800a0ba <_Z24getFont_verdanab_10_4bppv+0x82>
 800a06e:	2300      	movs	r3, #0
 800a070:	930c      	str	r3, [sp, #48]	; 0x30
 800a072:	2300      	movs	r3, #0
 800a074:	930b      	str	r3, [sp, #44]	; 0x2c
 800a076:	2300      	movs	r3, #0
 800a078:	930a      	str	r3, [sp, #40]	; 0x28
 800a07a:	233f      	movs	r3, #63	; 0x3f
 800a07c:	9309      	str	r3, [sp, #36]	; 0x24
 800a07e:	4b12      	ldr	r3, [pc, #72]	; (800a0c8 <_Z24getFont_verdanab_10_4bppv+0x90>)
 800a080:	9308      	str	r3, [sp, #32]
 800a082:	4b12      	ldr	r3, [pc, #72]	; (800a0cc <_Z24getFont_verdanab_10_4bppv+0x94>)
 800a084:	9307      	str	r3, [sp, #28]
 800a086:	2301      	movs	r3, #1
 800a088:	9306      	str	r3, [sp, #24]
 800a08a:	2300      	movs	r3, #0
 800a08c:	9305      	str	r3, [sp, #20]
 800a08e:	2301      	movs	r3, #1
 800a090:	9304      	str	r3, [sp, #16]
 800a092:	2304      	movs	r3, #4
 800a094:	9303      	str	r3, [sp, #12]
 800a096:	2300      	movs	r3, #0
 800a098:	9302      	str	r3, [sp, #8]
 800a09a:	2300      	movs	r3, #0
 800a09c:	9301      	str	r3, [sp, #4]
 800a09e:	230a      	movs	r3, #10
 800a0a0:	9300      	str	r3, [sp, #0]
 800a0a2:	230c      	movs	r3, #12
 800a0a4:	221a      	movs	r2, #26
 800a0a6:	490a      	ldr	r1, [pc, #40]	; (800a0d0 <_Z24getFont_verdanab_10_4bppv+0x98>)
 800a0a8:	480a      	ldr	r0, [pc, #40]	; (800a0d4 <_Z24getFont_verdanab_10_4bppv+0x9c>)
 800a0aa:	f7fb fb09 	bl	80056c0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800a0ae:	480a      	ldr	r0, [pc, #40]	; (800a0d8 <_Z24getFont_verdanab_10_4bppv+0xa0>)
 800a0b0:	f022 fafa 	bl	802c6a8 <atexit>
 800a0b4:	4803      	ldr	r0, [pc, #12]	; (800a0c4 <_Z24getFont_verdanab_10_4bppv+0x8c>)
 800a0b6:	f022 fab8 	bl	802c62a <__cxa_guard_release>
    return verdanab_10_4bpp;
 800a0ba:	4b06      	ldr	r3, [pc, #24]	; (800a0d4 <_Z24getFont_verdanab_10_4bppv+0x9c>)
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}
 800a0c2:	bf00      	nop
 800a0c4:	24002070 	.word	0x24002070
 800a0c8:	0802ff58 	.word	0x0802ff58
 800a0cc:	0802ff6c 	.word	0x0802ff6c
 800a0d0:	9000080c 	.word	0x9000080c
 800a0d4:	24002044 	.word	0x24002044
 800a0d8:	0800a029 	.word	0x0800a029

0800a0dc <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdanab_12_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdanab_12_4bpp();

touchgfx::GeneratedFont& getFont_verdanab_12_4bpp()
{
    static touchgfx::GeneratedFont verdanab_12_4bpp(glyphs_verdanab_12_4bpp, 21, 14, 12, 0, 0, 4, 1, 0, 1, unicodes_verdanab_12_4bpp, kerning_verdanab_12_4bpp, 63, 0, 0, 0);
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	4801      	ldr	r0, [pc, #4]	; (800a0e8 <__tcf_0+0xc>)
 800a0e2:	f7f9 fef7 	bl	8003ed4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800a0e6:	bd80      	pop	{r7, pc}
 800a0e8:	24002074 	.word	0x24002074

0800a0ec <_Z24getFont_verdanab_12_4bppv>:
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b08e      	sub	sp, #56	; 0x38
 800a0f0:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdanab_12_4bpp(glyphs_verdanab_12_4bpp, 21, 14, 12, 0, 0, 4, 1, 0, 1, unicodes_verdanab_12_4bpp, kerning_verdanab_12_4bpp, 63, 0, 0, 0);
 800a0f2:	4b21      	ldr	r3, [pc, #132]	; (800a178 <_Z24getFont_verdanab_12_4bppv+0x8c>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f3bf 8f5b 	dmb	ish
 800a0fa:	f003 0301 	and.w	r3, r3, #1
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	bf0c      	ite	eq
 800a102:	2301      	moveq	r3, #1
 800a104:	2300      	movne	r3, #0
 800a106:	b2db      	uxtb	r3, r3
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d030      	beq.n	800a16e <_Z24getFont_verdanab_12_4bppv+0x82>
 800a10c:	481a      	ldr	r0, [pc, #104]	; (800a178 <_Z24getFont_verdanab_12_4bppv+0x8c>)
 800a10e:	f022 fa80 	bl	802c612 <__cxa_guard_acquire>
 800a112:	4603      	mov	r3, r0
 800a114:	2b00      	cmp	r3, #0
 800a116:	bf14      	ite	ne
 800a118:	2301      	movne	r3, #1
 800a11a:	2300      	moveq	r3, #0
 800a11c:	b2db      	uxtb	r3, r3
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d025      	beq.n	800a16e <_Z24getFont_verdanab_12_4bppv+0x82>
 800a122:	2300      	movs	r3, #0
 800a124:	930c      	str	r3, [sp, #48]	; 0x30
 800a126:	2300      	movs	r3, #0
 800a128:	930b      	str	r3, [sp, #44]	; 0x2c
 800a12a:	2300      	movs	r3, #0
 800a12c:	930a      	str	r3, [sp, #40]	; 0x28
 800a12e:	233f      	movs	r3, #63	; 0x3f
 800a130:	9309      	str	r3, [sp, #36]	; 0x24
 800a132:	4b12      	ldr	r3, [pc, #72]	; (800a17c <_Z24getFont_verdanab_12_4bppv+0x90>)
 800a134:	9308      	str	r3, [sp, #32]
 800a136:	4b12      	ldr	r3, [pc, #72]	; (800a180 <_Z24getFont_verdanab_12_4bppv+0x94>)
 800a138:	9307      	str	r3, [sp, #28]
 800a13a:	2301      	movs	r3, #1
 800a13c:	9306      	str	r3, [sp, #24]
 800a13e:	2300      	movs	r3, #0
 800a140:	9305      	str	r3, [sp, #20]
 800a142:	2301      	movs	r3, #1
 800a144:	9304      	str	r3, [sp, #16]
 800a146:	2304      	movs	r3, #4
 800a148:	9303      	str	r3, [sp, #12]
 800a14a:	2300      	movs	r3, #0
 800a14c:	9302      	str	r3, [sp, #8]
 800a14e:	2300      	movs	r3, #0
 800a150:	9301      	str	r3, [sp, #4]
 800a152:	230c      	movs	r3, #12
 800a154:	9300      	str	r3, [sp, #0]
 800a156:	230e      	movs	r3, #14
 800a158:	2215      	movs	r2, #21
 800a15a:	490a      	ldr	r1, [pc, #40]	; (800a184 <_Z24getFont_verdanab_12_4bppv+0x98>)
 800a15c:	480a      	ldr	r0, [pc, #40]	; (800a188 <_Z24getFont_verdanab_12_4bppv+0x9c>)
 800a15e:	f7fb faaf 	bl	80056c0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800a162:	480a      	ldr	r0, [pc, #40]	; (800a18c <_Z24getFont_verdanab_12_4bppv+0xa0>)
 800a164:	f022 faa0 	bl	802c6a8 <atexit>
 800a168:	4803      	ldr	r0, [pc, #12]	; (800a178 <_Z24getFont_verdanab_12_4bppv+0x8c>)
 800a16a:	f022 fa5e 	bl	802c62a <__cxa_guard_release>
    return verdanab_12_4bpp;
 800a16e:	4b06      	ldr	r3, [pc, #24]	; (800a188 <_Z24getFont_verdanab_12_4bppv+0x9c>)
}
 800a170:	4618      	mov	r0, r3
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}
 800a176:	bf00      	nop
 800a178:	240020a0 	.word	0x240020a0
 800a17c:	0802ff5c 	.word	0x0802ff5c
 800a180:	0802ff70 	.word	0x0802ff70
 800a184:	90000978 	.word	0x90000978
 800a188:	24002074 	.word	0x24002074
 800a18c:	0800a0dd 	.word	0x0800a0dd

0800a190 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdanab_8_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdanab_8_4bpp();

touchgfx::GeneratedFont& getFont_verdanab_8_4bpp()
{
    static touchgfx::GeneratedFont verdanab_8_4bpp(glyphs_verdanab_8_4bpp, 22, 10, 8, 0, 0, 4, 1, 0, 1, unicodes_verdanab_8_4bpp, kerning_verdanab_8_4bpp, 63, 0, 0, 0);
 800a190:	b580      	push	{r7, lr}
 800a192:	af00      	add	r7, sp, #0
 800a194:	4801      	ldr	r0, [pc, #4]	; (800a19c <__tcf_0+0xc>)
 800a196:	f7f9 fe9d 	bl	8003ed4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800a19a:	bd80      	pop	{r7, pc}
 800a19c:	240020a4 	.word	0x240020a4

0800a1a0 <_Z23getFont_verdanab_8_4bppv>:
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b08e      	sub	sp, #56	; 0x38
 800a1a4:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdanab_8_4bpp(glyphs_verdanab_8_4bpp, 22, 10, 8, 0, 0, 4, 1, 0, 1, unicodes_verdanab_8_4bpp, kerning_verdanab_8_4bpp, 63, 0, 0, 0);
 800a1a6:	4b21      	ldr	r3, [pc, #132]	; (800a22c <_Z23getFont_verdanab_8_4bppv+0x8c>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f3bf 8f5b 	dmb	ish
 800a1ae:	f003 0301 	and.w	r3, r3, #1
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	bf0c      	ite	eq
 800a1b6:	2301      	moveq	r3, #1
 800a1b8:	2300      	movne	r3, #0
 800a1ba:	b2db      	uxtb	r3, r3
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d030      	beq.n	800a222 <_Z23getFont_verdanab_8_4bppv+0x82>
 800a1c0:	481a      	ldr	r0, [pc, #104]	; (800a22c <_Z23getFont_verdanab_8_4bppv+0x8c>)
 800a1c2:	f022 fa26 	bl	802c612 <__cxa_guard_acquire>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	bf14      	ite	ne
 800a1cc:	2301      	movne	r3, #1
 800a1ce:	2300      	moveq	r3, #0
 800a1d0:	b2db      	uxtb	r3, r3
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d025      	beq.n	800a222 <_Z23getFont_verdanab_8_4bppv+0x82>
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	930c      	str	r3, [sp, #48]	; 0x30
 800a1da:	2300      	movs	r3, #0
 800a1dc:	930b      	str	r3, [sp, #44]	; 0x2c
 800a1de:	2300      	movs	r3, #0
 800a1e0:	930a      	str	r3, [sp, #40]	; 0x28
 800a1e2:	233f      	movs	r3, #63	; 0x3f
 800a1e4:	9309      	str	r3, [sp, #36]	; 0x24
 800a1e6:	4b12      	ldr	r3, [pc, #72]	; (800a230 <_Z23getFont_verdanab_8_4bppv+0x90>)
 800a1e8:	9308      	str	r3, [sp, #32]
 800a1ea:	4b12      	ldr	r3, [pc, #72]	; (800a234 <_Z23getFont_verdanab_8_4bppv+0x94>)
 800a1ec:	9307      	str	r3, [sp, #28]
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	9306      	str	r3, [sp, #24]
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	9305      	str	r3, [sp, #20]
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	9304      	str	r3, [sp, #16]
 800a1fa:	2304      	movs	r3, #4
 800a1fc:	9303      	str	r3, [sp, #12]
 800a1fe:	2300      	movs	r3, #0
 800a200:	9302      	str	r3, [sp, #8]
 800a202:	2300      	movs	r3, #0
 800a204:	9301      	str	r3, [sp, #4]
 800a206:	2308      	movs	r3, #8
 800a208:	9300      	str	r3, [sp, #0]
 800a20a:	230a      	movs	r3, #10
 800a20c:	2216      	movs	r2, #22
 800a20e:	490a      	ldr	r1, [pc, #40]	; (800a238 <_Z23getFont_verdanab_8_4bppv+0x98>)
 800a210:	480a      	ldr	r0, [pc, #40]	; (800a23c <_Z23getFont_verdanab_8_4bppv+0x9c>)
 800a212:	f7fb fa55 	bl	80056c0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800a216:	480a      	ldr	r0, [pc, #40]	; (800a240 <_Z23getFont_verdanab_8_4bppv+0xa0>)
 800a218:	f022 fa46 	bl	802c6a8 <atexit>
 800a21c:	4803      	ldr	r0, [pc, #12]	; (800a22c <_Z23getFont_verdanab_8_4bppv+0x8c>)
 800a21e:	f022 fa04 	bl	802c62a <__cxa_guard_release>
    return verdanab_8_4bpp;
 800a222:	4b06      	ldr	r3, [pc, #24]	; (800a23c <_Z23getFont_verdanab_8_4bppv+0x9c>)
}
 800a224:	4618      	mov	r0, r3
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}
 800a22a:	bf00      	nop
 800a22c:	240020d0 	.word	0x240020d0
 800a230:	0802ff60 	.word	0x0802ff60
 800a234:	0802ff74 	.word	0x0802ff74
 800a238:	90000aa0 	.word	0x90000aa0
 800a23c:	240020a4 	.word	0x240020a4
 800a240:	0800a191 	.word	0x0800a191

0800a244 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 800a244:	b480      	push	{r7}
 800a246:	b085      	sub	sp, #20
 800a248:	af00      	add	r7, sp, #0
 800a24a:	60f8      	str	r0, [r7, #12]
 800a24c:	460b      	mov	r3, r1
 800a24e:	607a      	str	r2, [r7, #4]
 800a250:	817b      	strh	r3, [r7, #10]
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
 800a252:	2300      	movs	r3, #0
    }
 800a254:	4618      	mov	r0, r3
 800a256:	3714      	adds	r7, #20
 800a258:	46bd      	mov	sp, r7
 800a25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25e:	4770      	bx	lr

0800a260 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 800a260:	b480      	push	{r7}
 800a262:	b083      	sub	sp, #12
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800a268:	2300      	movs	r3, #0
    }
 800a26a:	4618      	mov	r0, r3
 800a26c:	370c      	adds	r7, #12
 800a26e:	46bd      	mov	sp, r7
 800a270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a274:	4770      	bx	lr

0800a276 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800a276:	b480      	push	{r7}
 800a278:	b083      	sub	sp, #12
 800a27a:	af00      	add	r7, sp, #0
 800a27c:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800a27e:	2300      	movs	r3, #0
    }
 800a280:	4618      	mov	r0, r3
 800a282:	370c      	adds	r7, #12
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr

0800a28c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 800a28c:	b480      	push	{r7}
 800a28e:	b085      	sub	sp, #20
 800a290:	af00      	add	r7, sp, #0
 800a292:	60f8      	str	r0, [r7, #12]
 800a294:	60b9      	str	r1, [r7, #8]
 800a296:	4613      	mov	r3, r2
 800a298:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 800a29a:	4a07      	ldr	r2, [pc, #28]	; (800a2b8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	6013      	str	r3, [r2, #0]
        fonts = f;
 800a2a0:	4a06      	ldr	r2, [pc, #24]	; (800a2bc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 800a2a6:	4a06      	ldr	r2, [pc, #24]	; (800a2c0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 800a2a8:	88fb      	ldrh	r3, [r7, #6]
 800a2aa:	8013      	strh	r3, [r2, #0]
    }
 800a2ac:	bf00      	nop
 800a2ae:	3714      	adds	r7, #20
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr
 800a2b8:	2400bb40 	.word	0x2400bb40
 800a2bc:	2400bb48 	.word	0x2400bb48
 800a2c0:	2400bb44 	.word	0x2400bb44

0800a2c4 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800a2c4:	b40e      	push	{r1, r2, r3}
 800a2c6:	b580      	push	{r7, lr}
 800a2c8:	b085      	sub	sp, #20
 800a2ca:	af00      	add	r7, sp, #0
 800a2cc:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 800a2ce:	f107 0320 	add.w	r3, r7, #32
 800a2d2:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	69fa      	ldr	r2, [r7, #28]
 800a2d8:	2100      	movs	r1, #0
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f012 fb1a 	bl	801c914 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800a2e4:	89fb      	ldrh	r3, [r7, #14]
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3714      	adds	r7, #20
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a2f0:	b003      	add	sp, #12
 800a2f2:	4770      	bx	lr

0800a2f4 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800a2f4:	b40c      	push	{r2, r3}
 800a2f6:	b580      	push	{r7, lr}
 800a2f8:	b084      	sub	sp, #16
 800a2fa:	af00      	add	r7, sp, #0
 800a2fc:	6078      	str	r0, [r7, #4]
 800a2fe:	460b      	mov	r3, r1
 800a300:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 800a302:	f107 031c 	add.w	r3, r7, #28
 800a306:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 800a308:	78f9      	ldrb	r1, [r7, #3]
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	69ba      	ldr	r2, [r7, #24]
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f012 fb00 	bl	801c914 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800a314:	4603      	mov	r3, r0
 800a316:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800a318:	89fb      	ldrh	r3, [r7, #14]
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3710      	adds	r7, #16
 800a31e:	46bd      	mov	sp, r7
 800a320:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a324:	b002      	add	sp, #8
 800a326:	4770      	bx	lr

0800a328 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b08a      	sub	sp, #40	; 0x28
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
 800a330:	460b      	mov	r3, r1
 800a332:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d016      	beq.n	800a36a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	3322      	adds	r3, #34	; 0x22
 800a340:	627b      	str	r3, [r7, #36]	; 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800a342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a344:	8adb      	ldrh	r3, [r3, #22]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d105      	bne.n	800a356 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 800a34a:	4b43      	ldr	r3, [pc, #268]	; (800a458 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800a34c:	4a43      	ldr	r2, [pc, #268]	; (800a45c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800a34e:	21c5      	movs	r1, #197	; 0xc5
 800a350:	4843      	ldr	r0, [pc, #268]	; (800a460 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800a352:	f022 f98b 	bl	802c66c <__assert_func>
            return buffer[pos];
 800a356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a358:	8a9b      	ldrh	r3, [r3, #20]
 800a35a:	461a      	mov	r2, r3
 800a35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a35e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d001      	beq.n	800a36a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800a366:	2301      	movs	r3, #1
 800a368:	e000      	b.n	800a36c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 800a36a:	2300      	movs	r3, #0
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d06a      	beq.n	800a446 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f013 fea3 	bl	801e0bc <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	3322      	adds	r3, #34	; 0x22
 800a37a:	623b      	str	r3, [r7, #32]
 800a37c:	2301      	movs	r3, #1
 800a37e:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800a380:	6a3b      	ldr	r3, [r7, #32]
 800a382:	8adb      	ldrh	r3, [r3, #22]
 800a384:	8bfa      	ldrh	r2, [r7, #30]
 800a386:	429a      	cmp	r2, r3
 800a388:	d305      	bcc.n	800a396 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 800a38a:	4b36      	ldr	r3, [pc, #216]	; (800a464 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 800a38c:	4a36      	ldr	r2, [pc, #216]	; (800a468 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 800a38e:	21cb      	movs	r1, #203	; 0xcb
 800a390:	4833      	ldr	r0, [pc, #204]	; (800a460 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800a392:	f022 f96b 	bl	802c66c <__assert_func>
            const uint16_t index = pos + offset;
 800a396:	6a3b      	ldr	r3, [r7, #32]
 800a398:	8a9a      	ldrh	r2, [r3, #20]
 800a39a:	8bfb      	ldrh	r3, [r7, #30]
 800a39c:	4413      	add	r3, r2
 800a39e:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 800a3a0:	8bbb      	ldrh	r3, [r7, #28]
 800a3a2:	2b09      	cmp	r3, #9
 800a3a4:	d801      	bhi.n	800a3aa <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 800a3a6:	8bbb      	ldrh	r3, [r7, #28]
 800a3a8:	e001      	b.n	800a3ae <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 800a3aa:	8bbb      	ldrh	r3, [r7, #28]
 800a3ac:	3b0a      	subs	r3, #10
 800a3ae:	6a3a      	ldr	r2, [r7, #32]
 800a3b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3b4:	f640 123f 	movw	r2, #2367	; 0x93f
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	bf0c      	ite	eq
 800a3bc:	2301      	moveq	r3, #1
 800a3be:	2300      	movne	r3, #0
 800a3c0:	b2db      	uxtb	r3, r3
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d03f      	beq.n	800a446 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	3322      	adds	r3, #34	; 0x22
 800a3ca:	687a      	ldr	r2, [r7, #4]
 800a3cc:	3222      	adds	r2, #34	; 0x22
 800a3ce:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 800a3d0:	68ba      	ldr	r2, [r7, #8]
 800a3d2:	8ad2      	ldrh	r2, [r2, #22]
 800a3d4:	2a00      	cmp	r2, #0
 800a3d6:	d105      	bne.n	800a3e4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 800a3d8:	4b1f      	ldr	r3, [pc, #124]	; (800a458 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800a3da:	4a20      	ldr	r2, [pc, #128]	; (800a45c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800a3dc:	21c5      	movs	r1, #197	; 0xc5
 800a3de:	4820      	ldr	r0, [pc, #128]	; (800a460 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800a3e0:	f022 f944 	bl	802c66c <__assert_func>
            return buffer[pos];
 800a3e4:	68ba      	ldr	r2, [r7, #8]
 800a3e6:	8a92      	ldrh	r2, [r2, #20]
 800a3e8:	4611      	mov	r1, r2
 800a3ea:	68ba      	ldr	r2, [r7, #8]
 800a3ec:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800a3f0:	613b      	str	r3, [r7, #16]
 800a3f2:	4613      	mov	r3, r2
 800a3f4:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	8adb      	ldrh	r3, [r3, #22]
 800a3fa:	2b01      	cmp	r3, #1
 800a3fc:	d806      	bhi.n	800a40c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 800a3fe:	4b1b      	ldr	r3, [pc, #108]	; (800a46c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 800a400:	4a1b      	ldr	r2, [pc, #108]	; (800a470 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 800a402:	f44f 718e 	mov.w	r1, #284	; 0x11c
 800a406:	4816      	ldr	r0, [pc, #88]	; (800a460 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800a408:	f022 f930 	bl	802c66c <__assert_func>
            const uint16_t index = pos + 1;
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	8a9b      	ldrh	r3, [r3, #20]
 800a410:	3301      	adds	r3, #1
 800a412:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 800a414:	89bb      	ldrh	r3, [r7, #12]
 800a416:	2b09      	cmp	r3, #9
 800a418:	d801      	bhi.n	800a41e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 800a41a:	89bb      	ldrh	r3, [r7, #12]
 800a41c:	e000      	b.n	800a420 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 800a41e:	2300      	movs	r3, #0
 800a420:	693a      	ldr	r2, [r7, #16]
 800a422:	89f9      	ldrh	r1, [r7, #14]
 800a424:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 800a428:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	3322      	adds	r3, #34	; 0x22
 800a42e:	61bb      	str	r3, [r7, #24]
 800a430:	f640 133f 	movw	r3, #2367	; 0x93f
 800a434:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 800a436:	69bb      	ldr	r3, [r7, #24]
 800a438:	8a9b      	ldrh	r3, [r3, #20]
 800a43a:	4619      	mov	r1, r3
 800a43c:	69bb      	ldr	r3, [r7, #24]
 800a43e:	8afa      	ldrh	r2, [r7, #22]
 800a440:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 800a444:	bf00      	nop
        }
    }
    return getNextChar();
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f013 fd3a 	bl	801dec0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800a44c:	4603      	mov	r3, r0
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3728      	adds	r7, #40	; 0x28
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}
 800a456:	bf00      	nop
 800a458:	0802e238 	.word	0x0802e238
 800a45c:	0802e244 	.word	0x0802e244
 800a460:	0802e2f0 	.word	0x0802e2f0
 800a464:	0802e33c 	.word	0x0802e33c
 800a468:	0802e34c 	.word	0x0802e34c
 800a46c:	0802e420 	.word	0x0802e420
 800a470:	0802e42c 	.word	0x0802e42c

0800a474 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b082      	sub	sp, #8
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f013 fce8 	bl	801de52 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 800a482:	bf00      	nop
 800a484:	3708      	adds	r7, #8
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}

0800a48a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 800a48a:	b580      	push	{r7, lr}
 800a48c:	b088      	sub	sp, #32
 800a48e:	af02      	add	r7, sp, #8
 800a490:	60f8      	str	r0, [r7, #12]
 800a492:	1d38      	adds	r0, r7, #4
 800a494:	e880 0006 	stmia.w	r0, {r1, r2}
 800a498:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 800a49a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a49e:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 800a4a0:	1d39      	adds	r1, r7, #4
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	9301      	str	r3, [sp, #4]
 800a4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a8:	9300      	str	r3, [sp, #0]
 800a4aa:	6a3b      	ldr	r3, [r7, #32]
 800a4ac:	683a      	ldr	r2, [r7, #0]
 800a4ae:	68f8      	ldr	r0, [r7, #12]
 800a4b0:	f010 fe18 	bl	801b0e4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 800a4b4:	bf00      	nop
 800a4b6:	3718      	adds	r7, #24
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}

0800a4bc <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 800a4bc:	b590      	push	{r4, r7, lr}
 800a4be:	b085      	sub	sp, #20
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 800a4ca:	88fb      	ldrh	r3, [r7, #6]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d127      	bne.n	800a520 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 800a4d0:	88fb      	ldrh	r3, [r7, #6]
 800a4d2:	4a1e      	ldr	r2, [pc, #120]	; (800a54c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800a4d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d016      	beq.n	800a50a <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 800a4dc:	88fb      	ldrh	r3, [r7, #6]
 800a4de:	4a1b      	ldr	r2, [pc, #108]	; (800a54c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800a4e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4e4:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	68ba      	ldr	r2, [r7, #8]
 800a4ec:	4413      	add	r3, r2
 800a4ee:	4a18      	ldr	r2, [pc, #96]	; (800a550 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800a4f0:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	68ba      	ldr	r2, [r7, #8]
 800a4f8:	4413      	add	r3, r2
 800a4fa:	4a16      	ldr	r2, [pc, #88]	; (800a554 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800a4fc:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	689b      	ldr	r3, [r3, #8]
 800a502:	68ba      	ldr	r2, [r7, #8]
 800a504:	4413      	add	r3, r2
 800a506:	60fb      	str	r3, [r7, #12]
 800a508:	e00a      	b.n	800a520 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 800a50a:	4b11      	ldr	r3, [pc, #68]	; (800a550 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800a50c:	4a12      	ldr	r2, [pc, #72]	; (800a558 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 800a50e:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800a510:	4a12      	ldr	r2, [pc, #72]	; (800a55c <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 800a512:	4b10      	ldr	r3, [pc, #64]	; (800a554 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800a514:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800a516:	88fb      	ldrh	r3, [r7, #6]
 800a518:	4a11      	ldr	r2, [pc, #68]	; (800a560 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 800a51a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a51e:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d00d      	beq.n	800a542 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 800a526:	4a0f      	ldr	r2, [pc, #60]	; (800a564 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 800a528:	88fb      	ldrh	r3, [r7, #6]
 800a52a:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800a52c:	f000 f83e 	bl	800a5ac <_ZN17TypedTextDatabase8getFontsEv>
 800a530:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800a532:	f000 f833 	bl	800a59c <_ZN17TypedTextDatabase15getInstanceSizeEv>
 800a536:	4603      	mov	r3, r0
 800a538:	461a      	mov	r2, r3
 800a53a:	4621      	mov	r1, r4
 800a53c:	68f8      	ldr	r0, [r7, #12]
 800a53e:	f7ff fea5 	bl	800a28c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 800a542:	bf00      	nop
 800a544:	3714      	adds	r7, #20
 800a546:	46bd      	mov	sp, r7
 800a548:	bd90      	pop	{r4, r7, pc}
 800a54a:	bf00      	nop
 800a54c:	240020d4 	.word	0x240020d4
 800a550:	240020dc 	.word	0x240020dc
 800a554:	240020e0 	.word	0x240020e0
 800a558:	90000c04 	.word	0x90000c04
 800a55c:	90000bd4 	.word	0x90000bd4
 800a560:	90000dec 	.word	0x90000dec
 800a564:	240020d8 	.word	0x240020d8

0800a568 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 800a568:	b480      	push	{r7}
 800a56a:	b083      	sub	sp, #12
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
 800a570:	460b      	mov	r3, r1
 800a572:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 800a574:	4b07      	ldr	r3, [pc, #28]	; (800a594 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 800a576:	681a      	ldr	r2, [r3, #0]
 800a578:	4b07      	ldr	r3, [pc, #28]	; (800a598 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 800a57a:	6819      	ldr	r1, [r3, #0]
 800a57c:	887b      	ldrh	r3, [r7, #2]
 800a57e:	009b      	lsls	r3, r3, #2
 800a580:	440b      	add	r3, r1
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	005b      	lsls	r3, r3, #1
 800a586:	4413      	add	r3, r2
}
 800a588:	4618      	mov	r0, r3
 800a58a:	370c      	adds	r7, #12
 800a58c:	46bd      	mov	sp, r7
 800a58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a592:	4770      	bx	lr
 800a594:	240020dc 	.word	0x240020dc
 800a598:	240020e0 	.word	0x240020e0

0800a59c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 800a59c:	b480      	push	{r7}
 800a59e:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 800a5a0:	230c      	movs	r3, #12
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5aa:	4770      	bx	lr

0800a5ac <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 800a5b0:	4b02      	ldr	r3, [pc, #8]	; (800a5bc <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ba:	4770      	bx	lr
 800a5bc:	240020e4 	.word	0x240020e4

0800a5c0 <_Z41__static_initialization_and_destruction_0ii>:
    case 4:
        touchgfx_fonts[4] = &(getFont_verdana_40_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b082      	sub	sp, #8
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
 800a5c8:	6039      	str	r1, [r7, #0]
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2b01      	cmp	r3, #1
 800a5ce:	d11d      	bne.n	800a60c <_Z41__static_initialization_and_destruction_0ii+0x4c>
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	d118      	bne.n	800a60c <_Z41__static_initialization_and_destruction_0ii+0x4c>
    &(getFont_verdanab_8_4bpp()),
 800a5da:	f7ff fde1 	bl	800a1a0 <_Z23getFont_verdanab_8_4bppv>
 800a5de:	4603      	mov	r3, r0
};
 800a5e0:	4a0c      	ldr	r2, [pc, #48]	; (800a614 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800a5e2:	6013      	str	r3, [r2, #0]
    &(getFont_verdanab_10_4bpp()),
 800a5e4:	f7ff fd28 	bl	800a038 <_Z24getFont_verdanab_10_4bppv>
 800a5e8:	4603      	mov	r3, r0
};
 800a5ea:	4a0a      	ldr	r2, [pc, #40]	; (800a614 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800a5ec:	6053      	str	r3, [r2, #4]
    &(getFont_verdanab_12_4bpp()),
 800a5ee:	f7ff fd7d 	bl	800a0ec <_Z24getFont_verdanab_12_4bppv>
 800a5f2:	4603      	mov	r3, r0
};
 800a5f4:	4a07      	ldr	r2, [pc, #28]	; (800a614 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800a5f6:	6093      	str	r3, [r2, #8]
    &(getFont_verdana_20_4bpp()),
 800a5f8:	f7ff fc6a 	bl	8009ed0 <_Z23getFont_verdana_20_4bppv>
 800a5fc:	4603      	mov	r3, r0
};
 800a5fe:	4a05      	ldr	r2, [pc, #20]	; (800a614 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800a600:	60d3      	str	r3, [r2, #12]
    &(getFont_verdana_40_4bpp())
 800a602:	f7ff fcbf 	bl	8009f84 <_Z23getFont_verdana_40_4bppv>
 800a606:	4603      	mov	r3, r0
};
 800a608:	4a02      	ldr	r2, [pc, #8]	; (800a614 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800a60a:	6113      	str	r3, [r2, #16]
} // namespace TypedTextDatabase
 800a60c:	bf00      	nop
 800a60e:	3708      	adds	r7, #8
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}
 800a614:	240020e4 	.word	0x240020e4

0800a618 <_GLOBAL__sub_I_touchgfx_fonts>:
 800a618:	b580      	push	{r7, lr}
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a620:	2001      	movs	r0, #1
 800a622:	f7ff ffcd 	bl	800a5c0 <_Z41__static_initialization_and_destruction_0ii>
 800a626:	bd80      	pop	{r7, pc}

0800a628 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800a628:	b580      	push	{r7, lr}
 800a62a:	b084      	sub	sp, #16
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	60f8      	str	r0, [r7, #12]
 800a630:	60b9      	str	r1, [r7, #8]
 800a632:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	687a      	ldr	r2, [r7, #4]
 800a638:	68b9      	ldr	r1, [r7, #8]
 800a63a:	4618      	mov	r0, r3
 800a63c:	f7f9 ffd4 	bl	80045e8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800a640:	4a03      	ldr	r2, [pc, #12]	; (800a650 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	601a      	str	r2, [r3, #0]
{
}
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	4618      	mov	r0, r3
 800a64a:	3710      	adds	r7, #16
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}
 800a650:	0802e888 	.word	0x0802e888

0800a654 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 800a654:	b480      	push	{r7}
 800a656:	b083      	sub	sp, #12
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
    {
    }
 800a65c:	bf00      	nop
 800a65e:	370c      	adds	r7, #12
 800a660:	46bd      	mov	sp, r7
 800a662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a666:	4770      	bx	lr

0800a668 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 800a668:	b480      	push	{r7}
 800a66a:	b083      	sub	sp, #12
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
    {
    }
 800a670:	bf00      	nop
 800a672:	370c      	adds	r7, #12
 800a674:	46bd      	mov	sp, r7
 800a676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67a:	4770      	bx	lr

0800a67c <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 800a67c:	b480      	push	{r7}
 800a67e:	b083      	sub	sp, #12
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
    {
 800a684:	4a04      	ldr	r2, [pc, #16]	; (800a698 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	601a      	str	r2, [r3, #0]
    }
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	4618      	mov	r0, r3
 800a68e:	370c      	adds	r7, #12
 800a690:	46bd      	mov	sp, r7
 800a692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a696:	4770      	bx	lr
 800a698:	0802f05c 	.word	0x0802f05c

0800a69c <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b082      	sub	sp, #8
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
    }
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f7ff ffe9 	bl	800a67c <_ZN8touchgfx9PresenterD1Ev>
 800a6aa:	2104      	movs	r1, #4
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f021 ffae 	bl	802c60e <_ZdlPvj>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3708      	adds	r7, #8
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}

0800a6bc <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 800a6bc:	b480      	push	{r7}
 800a6be:	b083      	sub	sp, #12
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
    {
 800a6c4:	4a04      	ldr	r2, [pc, #16]	; (800a6d8 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	601a      	str	r2, [r3, #0]
    }
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	370c      	adds	r7, #12
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d6:	4770      	bx	lr
 800a6d8:	0802f05c 	.word	0x0802f05c

0800a6dc <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 800a6dc:	b480      	push	{r7}
 800a6de:	b083      	sub	sp, #12
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
 800a6e4:	4a06      	ldr	r2, [pc, #24]	; (800a700 <_ZN13ModelListenerC1Ev+0x24>)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	601a      	str	r2, [r3, #0]
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	605a      	str	r2, [r3, #4]
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	370c      	adds	r7, #12
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fc:	4770      	bx	lr
 800a6fe:	bf00      	nop
 800a700:	0802f04c 	.word	0x0802f04c

0800a704 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 800a704:	b480      	push	{r7}
 800a706:	b083      	sub	sp, #12
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
 800a70c:	4a04      	ldr	r2, [pc, #16]	; (800a720 <_ZN13ModelListenerD1Ev+0x1c>)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	601a      	str	r2, [r3, #0]
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	4618      	mov	r0, r3
 800a716:	370c      	adds	r7, #12
 800a718:	46bd      	mov	sp, r7
 800a71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71e:	4770      	bx	lr
 800a720:	0802f04c 	.word	0x0802f04c

0800a724 <_ZN13ModelListenerD0Ev>:
 800a724:	b580      	push	{r7, lr}
 800a726:	b082      	sub	sp, #8
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f7ff ffe9 	bl	800a704 <_ZN13ModelListenerD1Ev>
 800a732:	2108      	movs	r1, #8
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f021 ff6a 	bl	802c60e <_ZdlPvj>
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	4618      	mov	r0, r3
 800a73e:	3708      	adds	r7, #8
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}

0800a744 <_ZN25Localize_AnomalyPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Localize_AnomalyPresenter() {};
 800a744:	b580      	push	{r7, lr}
 800a746:	b082      	sub	sp, #8
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
 800a74c:	4a09      	ldr	r2, [pc, #36]	; (800a774 <_ZN25Localize_AnomalyPresenterD1Ev+0x30>)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	601a      	str	r2, [r3, #0]
 800a752:	4a09      	ldr	r2, [pc, #36]	; (800a778 <_ZN25Localize_AnomalyPresenterD1Ev+0x34>)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	605a      	str	r2, [r3, #4]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	3304      	adds	r3, #4
 800a75c:	4618      	mov	r0, r3
 800a75e:	f7ff ffd1 	bl	800a704 <_ZN13ModelListenerD1Ev>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	4618      	mov	r0, r3
 800a766:	f7ff ff89 	bl	800a67c <_ZN8touchgfx9PresenterD1Ev>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	4618      	mov	r0, r3
 800a76e:	3708      	adds	r7, #8
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}
 800a774:	0802f024 	.word	0x0802f024
 800a778:	0802f03c 	.word	0x0802f03c

0800a77c <_ZThn4_N25Localize_AnomalyPresenterD1Ev>:
 800a77c:	f1a0 0004 	sub.w	r0, r0, #4
 800a780:	e7e0      	b.n	800a744 <_ZN25Localize_AnomalyPresenterD1Ev>
 800a782:	bf00      	nop

0800a784 <_ZN25Localize_AnomalyPresenterD0Ev>:
 800a784:	b580      	push	{r7, lr}
 800a786:	b082      	sub	sp, #8
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f7ff ffd9 	bl	800a744 <_ZN25Localize_AnomalyPresenterD1Ev>
 800a792:	2110      	movs	r1, #16
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f021 ff3a 	bl	802c60e <_ZdlPvj>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	4618      	mov	r0, r3
 800a79e:	3708      	adds	r7, #8
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}

0800a7a4 <_ZThn4_N25Localize_AnomalyPresenterD0Ev>:
 800a7a4:	f1a0 0004 	sub.w	r0, r0, #4
 800a7a8:	e7ec      	b.n	800a784 <_ZN25Localize_AnomalyPresenterD0Ev>
	...

0800a7ac <_ZN25Localize_AnomalyPresenterC1ER20Localize_AnomalyView>:
#include <gui/localize_anomaly_screen/Localize_AnomalyView.hpp>
#include <gui/localize_anomaly_screen/Localize_AnomalyPresenter.hpp>

Localize_AnomalyPresenter::Localize_AnomalyPresenter(Localize_AnomalyView& v)
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b082      	sub	sp, #8
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
 800a7b4:	6039      	str	r1, [r7, #0]
    : view(v)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f7ff ff7f 	bl	800a6bc <_ZN8touchgfx9PresenterC1Ev>
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	3304      	adds	r3, #4
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f7ff ff8a 	bl	800a6dc <_ZN13ModelListenerC1Ev>
 800a7c8:	4a06      	ldr	r2, [pc, #24]	; (800a7e4 <_ZN25Localize_AnomalyPresenterC1ER20Localize_AnomalyView+0x38>)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	601a      	str	r2, [r3, #0]
 800a7ce:	4a06      	ldr	r2, [pc, #24]	; (800a7e8 <_ZN25Localize_AnomalyPresenterC1ER20Localize_AnomalyView+0x3c>)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	605a      	str	r2, [r3, #4]
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	683a      	ldr	r2, [r7, #0]
 800a7d8:	60da      	str	r2, [r3, #12]
{

}
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	4618      	mov	r0, r3
 800a7de:	3708      	adds	r7, #8
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}
 800a7e4:	0802f024 	.word	0x0802f024
 800a7e8:	0802f03c 	.word	0x0802f03c

0800a7ec <_ZN25Localize_AnomalyPresenter8activateEv>:

void Localize_AnomalyPresenter::activate()
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b083      	sub	sp, #12
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]

}
 800a7f4:	bf00      	nop
 800a7f6:	370c      	adds	r7, #12
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fe:	4770      	bx	lr

0800a800 <_ZN25Localize_AnomalyPresenter10deactivateEv>:

void Localize_AnomalyPresenter::deactivate()
{
 800a800:	b480      	push	{r7}
 800a802:	b083      	sub	sp, #12
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]

}
 800a808:	bf00      	nop
 800a80a:	370c      	adds	r7, #12
 800a80c:	46bd      	mov	sp, r7
 800a80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a812:	4770      	bx	lr

0800a814 <_ZN20Localize_AnomalyViewD1Ev>:

class Localize_AnomalyView : public Localize_AnomalyViewBase
{
public:
    Localize_AnomalyView();
    virtual ~Localize_AnomalyView() {}
 800a814:	b580      	push	{r7, lr}
 800a816:	b082      	sub	sp, #8
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
 800a81c:	4a05      	ldr	r2, [pc, #20]	; (800a834 <_ZN20Localize_AnomalyViewD1Ev+0x20>)
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	601a      	str	r2, [r3, #0]
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	4618      	mov	r0, r3
 800a826:	f7fb ff69 	bl	80066fc <_ZN24Localize_AnomalyViewBaseD1Ev>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	4618      	mov	r0, r3
 800a82e:	3708      	adds	r7, #8
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}
 800a834:	0802f074 	.word	0x0802f074

0800a838 <_ZN20Localize_AnomalyViewD0Ev>:
 800a838:	b580      	push	{r7, lr}
 800a83a:	b082      	sub	sp, #8
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f7ff ffe7 	bl	800a814 <_ZN20Localize_AnomalyViewD1Ev>
 800a846:	f44f 7177 	mov.w	r1, #988	; 0x3dc
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f021 fedf 	bl	802c60e <_ZdlPvj>
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	4618      	mov	r0, r3
 800a854:	3708      	adds	r7, #8
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}
	...

0800a85c <_ZN20Localize_AnomalyViewC1Ev>:
#include <gui/localize_anomaly_screen/Localize_AnomalyView.hpp>

Localize_AnomalyView::Localize_AnomalyView()
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b082      	sub	sp, #8
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	4618      	mov	r0, r3
 800a868:	f7fb fa52 	bl	8005d10 <_ZN24Localize_AnomalyViewBaseC1Ev>
 800a86c:	4a03      	ldr	r2, [pc, #12]	; (800a87c <_ZN20Localize_AnomalyViewC1Ev+0x20>)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	601a      	str	r2, [r3, #0]
{

}
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	4618      	mov	r0, r3
 800a876:	3708      	adds	r7, #8
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}
 800a87c:	0802f074 	.word	0x0802f074

0800a880 <_ZN20Localize_AnomalyView11setupScreenEv>:

void Localize_AnomalyView::setupScreen()
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b082      	sub	sp, #8
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
    Localize_AnomalyViewBase::setupScreen();
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	4618      	mov	r0, r3
 800a88c:	f7fb ffc7 	bl	800681e <_ZN24Localize_AnomalyViewBase11setupScreenEv>
}
 800a890:	bf00      	nop
 800a892:	3708      	adds	r7, #8
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}

0800a898 <_ZN20Localize_AnomalyView14tearDownScreenEv>:

void Localize_AnomalyView::tearDownScreen()
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b082      	sub	sp, #8
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
    Localize_AnomalyViewBase::tearDownScreen();
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f7fb f82a 	bl	80058fc <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800a8a8:	bf00      	nop
 800a8aa:	3708      	adds	r7, #8
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}

0800a8b0 <_ZN13MainPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MainPresenter() {};
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b082      	sub	sp, #8
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
 800a8b8:	4a09      	ldr	r2, [pc, #36]	; (800a8e0 <_ZN13MainPresenterD1Ev+0x30>)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	601a      	str	r2, [r3, #0]
 800a8be:	4a09      	ldr	r2, [pc, #36]	; (800a8e4 <_ZN13MainPresenterD1Ev+0x34>)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	605a      	str	r2, [r3, #4]
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	3304      	adds	r3, #4
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f7ff ff1b 	bl	800a704 <_ZN13ModelListenerD1Ev>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f7ff fed3 	bl	800a67c <_ZN8touchgfx9PresenterD1Ev>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	4618      	mov	r0, r3
 800a8da:	3708      	adds	r7, #8
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}
 800a8e0:	0802f0b0 	.word	0x0802f0b0
 800a8e4:	0802f0c8 	.word	0x0802f0c8

0800a8e8 <_ZThn4_N13MainPresenterD1Ev>:
 800a8e8:	f1a0 0004 	sub.w	r0, r0, #4
 800a8ec:	e7e0      	b.n	800a8b0 <_ZN13MainPresenterD1Ev>
 800a8ee:	bf00      	nop

0800a8f0 <_ZN13MainPresenterD0Ev>:
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b082      	sub	sp, #8
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f7ff ffd9 	bl	800a8b0 <_ZN13MainPresenterD1Ev>
 800a8fe:	2110      	movs	r1, #16
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f021 fe84 	bl	802c60e <_ZdlPvj>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	4618      	mov	r0, r3
 800a90a:	3708      	adds	r7, #8
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <_ZThn4_N13MainPresenterD0Ev>:
 800a910:	f1a0 0004 	sub.w	r0, r0, #4
 800a914:	e7ec      	b.n	800a8f0 <_ZN13MainPresenterD0Ev>
	...

0800a918 <_ZN13MainPresenterC1ER8MainView>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

MainPresenter::MainPresenter(MainView& v)
 800a918:	b580      	push	{r7, lr}
 800a91a:	b082      	sub	sp, #8
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
 800a920:	6039      	str	r1, [r7, #0]
    : view(v)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	4618      	mov	r0, r3
 800a926:	f7ff fec9 	bl	800a6bc <_ZN8touchgfx9PresenterC1Ev>
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	3304      	adds	r3, #4
 800a92e:	4618      	mov	r0, r3
 800a930:	f7ff fed4 	bl	800a6dc <_ZN13ModelListenerC1Ev>
 800a934:	4a06      	ldr	r2, [pc, #24]	; (800a950 <_ZN13MainPresenterC1ER8MainView+0x38>)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	601a      	str	r2, [r3, #0]
 800a93a:	4a06      	ldr	r2, [pc, #24]	; (800a954 <_ZN13MainPresenterC1ER8MainView+0x3c>)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	605a      	str	r2, [r3, #4]
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	683a      	ldr	r2, [r7, #0]
 800a944:	60da      	str	r2, [r3, #12]
{
}
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	4618      	mov	r0, r3
 800a94a:	3708      	adds	r7, #8
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}
 800a950:	0802f0b0 	.word	0x0802f0b0
 800a954:	0802f0c8 	.word	0x0802f0c8

0800a958 <_ZN13MainPresenter8activateEv>:

void MainPresenter::activate()
{
 800a958:	b480      	push	{r7}
 800a95a:	b083      	sub	sp, #12
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
}
 800a960:	bf00      	nop
 800a962:	370c      	adds	r7, #12
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr

0800a96c <_ZN13MainPresenter10deactivateEv>:

void MainPresenter::deactivate()
{
 800a96c:	b480      	push	{r7}
 800a96e:	b083      	sub	sp, #12
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
}
 800a974:	bf00      	nop
 800a976:	370c      	adds	r7, #12
 800a978:	46bd      	mov	sp, r7
 800a97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97e:	4770      	bx	lr

0800a980 <_ZNK8touchgfx6Bitmap5getIdEv>:
    /**
     * Gets the id of this Bitmap.
     *
     * @return The id of this Bitmap.
     */
    BitmapId getId() const
 800a980:	b580      	push	{r7, lr}
 800a982:	b082      	sub	sp, #8
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
    {
        assert(bitmaps != 0 && "Bitmap database has not been initialized.");
 800a988:	4b07      	ldr	r3, [pc, #28]	; (800a9a8 <_ZNK8touchgfx6Bitmap5getIdEv+0x28>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d105      	bne.n	800a99c <_ZNK8touchgfx6Bitmap5getIdEv+0x1c>
 800a990:	4b06      	ldr	r3, [pc, #24]	; (800a9ac <_ZNK8touchgfx6Bitmap5getIdEv+0x2c>)
 800a992:	4a07      	ldr	r2, [pc, #28]	; (800a9b0 <_ZNK8touchgfx6Bitmap5getIdEv+0x30>)
 800a994:	2190      	movs	r1, #144	; 0x90
 800a996:	4807      	ldr	r0, [pc, #28]	; (800a9b4 <_ZNK8touchgfx6Bitmap5getIdEv+0x34>)
 800a998:	f021 fe68 	bl	802c66c <__assert_func>
        return bitmapId;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	881b      	ldrh	r3, [r3, #0]
    }
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3708      	adds	r7, #8
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}
 800a9a8:	2400bb78 	.word	0x2400bb78
 800a9ac:	0802e4e0 	.word	0x0802e4e0
 800a9b0:	0802e51c 	.word	0x0802e51c
 800a9b4:	0802e550 	.word	0x0802e550

0800a9b8 <_ZNK8touchgfx12ToggleButton8getStateEv>:
     * Gets the state of the ToggleButton as set with forceState.
     *
     * @return True if the button has been toggled, i.e. the pressed state is shown when the
     *         button is not pressed.
     */
    bool getState() const
 800a9b8:	b590      	push	{r4, r7, lr}
 800a9ba:	b083      	sub	sp, #12
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
    {
        return up.getId() == originalPressed.getId();
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	332e      	adds	r3, #46	; 0x2e
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f7ff ffdb 	bl	800a980 <_ZNK8touchgfx6Bitmap5getIdEv>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	461c      	mov	r4, r3
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	3334      	adds	r3, #52	; 0x34
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f7ff ffd4 	bl	800a980 <_ZNK8touchgfx6Bitmap5getIdEv>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	429c      	cmp	r4, r3
 800a9dc:	bf0c      	ite	eq
 800a9de:	2301      	moveq	r3, #1
 800a9e0:	2300      	movne	r3, #0
 800a9e2:	b2db      	uxtb	r3, r3
    }
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	370c      	adds	r7, #12
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd90      	pop	{r4, r7, pc}

0800a9ec <_ZN8MainViewD1Ev>:

class MainView : public MainViewBase
{
public:
    MainView();
    virtual ~MainView() {}
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b082      	sub	sp, #8
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
 800a9f4:	4a05      	ldr	r2, [pc, #20]	; (800aa0c <_ZN8MainViewD1Ev+0x20>)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	601a      	str	r2, [r3, #0]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f7fe fe7d 	bl	80096fc <_ZN12MainViewBaseD1Ev>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	4618      	mov	r0, r3
 800aa06:	3708      	adds	r7, #8
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}
 800aa0c:	0802f0d8 	.word	0x0802f0d8

0800aa10 <_ZN8MainViewD0Ev>:
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b082      	sub	sp, #8
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f7ff ffe7 	bl	800a9ec <_ZN8MainViewD1Ev>
 800aa1e:	f640 3188 	movw	r1, #2952	; 0xb88
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f021 fdf3 	bl	802c60e <_ZdlPvj>
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3708      	adds	r7, #8
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}
	...

0800aa34 <_ZN8MainViewC1Ev>:
#include "ipc_interface.h"

systemState state;
int currentDelta = 0;

MainView::MainView()
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b082      	sub	sp, #8
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f7fc fa9a 	bl	8006f78 <_ZN12MainViewBaseC1Ev>
 800aa44:	4a03      	ldr	r2, [pc, #12]	; (800aa54 <_ZN8MainViewC1Ev+0x20>)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	601a      	str	r2, [r3, #0]
{
}
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3708      	adds	r7, #8
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}
 800aa54:	0802f0d8 	.word	0x0802f0d8

0800aa58 <_ZN8MainView11setupScreenEv>:

void MainView::setupScreen()
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b082      	sub	sp, #8
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
	//setup voiceToggle
	if(!state.voiceToggle) {
 800aa60:	4b60      	ldr	r3, [pc, #384]	; (800abe4 <_ZN8MainView11setupScreenEv+0x18c>)
 800aa62:	791b      	ldrb	r3, [r3, #4]
 800aa64:	f083 0301 	eor.w	r3, r3, #1
 800aa68:	b2db      	uxtb	r3, r3
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d026      	beq.n	800aabc <_ZN8MainView11setupScreenEv+0x64>
		VoiceCommMess_Text_On.setVisible(false);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f203 73a4 	addw	r3, r3, #1956	; 0x7a4
 800aa74:	2100      	movs	r1, #0
 800aa76:	4618      	mov	r0, r3
 800aa78:	f7fc f89f 	bl	8006bba <_ZN8touchgfx8Drawable10setVisibleEb>
		VoiceCommMess_Text_Off.setVisible(true);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f203 73ec 	addw	r3, r3, #2028	; 0x7ec
 800aa82:	2101      	movs	r1, #1
 800aa84:	4618      	mov	r0, r3
 800aa86:	f7fc f898 	bl	8006bba <_ZN8touchgfx8Drawable10setVisibleEb>

		VoiceCommMess_Text_On.invalidate();
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f203 73a4 	addw	r3, r3, #1956	; 0x7a4
 800aa90:	4618      	mov	r0, r3
 800aa92:	f012 f86a 	bl	801cb6a <_ZNK8touchgfx8Drawable10invalidateEv>
		VoiceCommMess_Text_Off.invalidate();
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f203 73ec 	addw	r3, r3, #2028	; 0x7ec
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f012 f864 	bl	801cb6a <_ZNK8touchgfx8Drawable10invalidateEv>

		Voice_Toggle_Button.forceState(true);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 800aaa8:	2101      	movs	r1, #1
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f00e fcc0 	bl	8019430 <_ZN8touchgfx12ToggleButton10forceStateEb>
		Voice_Toggle_Button.invalidate();
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 800aab6:	4618      	mov	r0, r3
 800aab8:	f012 f857 	bl	801cb6a <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	//setup volume
	textProgress1.setValue(state.volume);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800aac2:	4a48      	ldr	r2, [pc, #288]	; (800abe4 <_ZN8MainView11setupScreenEv+0x18c>)
 800aac4:	6812      	ldr	r2, [r2, #0]
 800aac6:	4611      	mov	r1, r2
 800aac8:	4618      	mov	r0, r3
 800aaca:	f00c fdfd 	bl	80176c8 <_ZN8touchgfx12TextProgress8setValueEi>
	Volume_Slider.setValue(state.volume);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800aad4:	4a43      	ldr	r2, [pc, #268]	; (800abe4 <_ZN8MainView11setupScreenEv+0x18c>)
 800aad6:	6812      	ldr	r2, [r2, #0]
 800aad8:	b212      	sxth	r2, r2
 800aada:	4611      	mov	r1, r2
 800aadc:	4618      	mov	r0, r3
 800aade:	f00d fae0 	bl	80180a2 <_ZN8touchgfx6Slider8setValueEs>
	Volume_Slider.invalidate();
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800aae8:	4618      	mov	r0, r3
 800aaea:	f012 f83e 	bl	801cb6a <_ZNK8touchgfx8Drawable10invalidateEv>

	//setup anomaly message
	AnomalyWarning_Textbox_1_1.setVisible(state.anomalyDetected);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f603 0334 	addw	r3, r3, #2100	; 0x834
 800aaf4:	4a3b      	ldr	r2, [pc, #236]	; (800abe4 <_ZN8MainView11setupScreenEv+0x18c>)
 800aaf6:	7952      	ldrb	r2, [r2, #5]
 800aaf8:	b2d2      	uxtb	r2, r2
 800aafa:	4611      	mov	r1, r2
 800aafc:	4618      	mov	r0, r3
 800aafe:	f7fc f85c 	bl	8006bba <_ZN8touchgfx8Drawable10setVisibleEb>
	AnomalyWarning_Textbox_1_1.invalidate();
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f603 0334 	addw	r3, r3, #2100	; 0x834
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f012 f82e 	bl	801cb6a <_ZNK8touchgfx8Drawable10invalidateEv>

	MessageBoard_Message_1.setVisible(state.alert);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f603 03c8 	addw	r3, r3, #2248	; 0x8c8
 800ab14:	4a33      	ldr	r2, [pc, #204]	; (800abe4 <_ZN8MainView11setupScreenEv+0x18c>)
 800ab16:	7992      	ldrb	r2, [r2, #6]
 800ab18:	4611      	mov	r1, r2
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f7fc f84d 	bl	8006bba <_ZN8touchgfx8Drawable10setVisibleEb>
	MessageBoard_Message_1.invalidate();
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f603 03c8 	addw	r3, r3, #2248	; 0x8c8
 800ab26:	4618      	mov	r0, r3
 800ab28:	f012 f81f 	bl	801cb6a <_ZNK8touchgfx8Drawable10invalidateEv>
	MessageBoard_Message_Muted.setVisible(!state.alert);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f503 6211 	add.w	r2, r3, #2320	; 0x910
 800ab32:	4b2c      	ldr	r3, [pc, #176]	; (800abe4 <_ZN8MainView11setupScreenEv+0x18c>)
 800ab34:	799b      	ldrb	r3, [r3, #6]
 800ab36:	f083 0301 	eor.w	r3, r3, #1
 800ab3a:	b2db      	uxtb	r3, r3
 800ab3c:	4619      	mov	r1, r3
 800ab3e:	4610      	mov	r0, r2
 800ab40:	f7fc f83b 	bl	8006bba <_ZN8touchgfx8Drawable10setVisibleEb>
	MessageBoard_Message_Muted.invalidate();
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f012 f80d 	bl	801cb6a <_ZNK8touchgfx8Drawable10invalidateEv>

	//Set buttons
	Localize_Button.setVisible(state.anomalyDetected);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 800ab56:	4a23      	ldr	r2, [pc, #140]	; (800abe4 <_ZN8MainView11setupScreenEv+0x18c>)
 800ab58:	7952      	ldrb	r2, [r2, #5]
 800ab5a:	b2d2      	uxtb	r2, r2
 800ab5c:	4611      	mov	r1, r2
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f7fc f82b 	bl	8006bba <_ZN8touchgfx8Drawable10setVisibleEb>
	Localize_Button.invalidate();
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f011 fffd 	bl	801cb6a <_ZNK8touchgfx8Drawable10invalidateEv>
	Alert_Mute_Button.setVisible(state.anomalyDetected);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f603 2358 	addw	r3, r3, #2648	; 0xa58
 800ab76:	4a1b      	ldr	r2, [pc, #108]	; (800abe4 <_ZN8MainView11setupScreenEv+0x18c>)
 800ab78:	7952      	ldrb	r2, [r2, #5]
 800ab7a:	b2d2      	uxtb	r2, r2
 800ab7c:	4611      	mov	r1, r2
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f7fc f81b 	bl	8006bba <_ZN8touchgfx8Drawable10setVisibleEb>
	Alert_Mute_Button.invalidate();
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f603 2358 	addw	r3, r3, #2648	; 0xa58
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f011 ffed 	bl	801cb6a <_ZNK8touchgfx8Drawable10invalidateEv>

	//Set disabled button images
	Disabled_Button1.setVisible(!state.anomalyDetected);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f603 222c 	addw	r2, r3, #2604	; 0xa2c
 800ab96:	4b13      	ldr	r3, [pc, #76]	; (800abe4 <_ZN8MainView11setupScreenEv+0x18c>)
 800ab98:	795b      	ldrb	r3, [r3, #5]
 800ab9a:	b2db      	uxtb	r3, r3
 800ab9c:	f083 0301 	eor.w	r3, r3, #1
 800aba0:	b2db      	uxtb	r3, r3
 800aba2:	4619      	mov	r1, r3
 800aba4:	4610      	mov	r0, r2
 800aba6:	f7fc f808 	bl	8006bba <_ZN8touchgfx8Drawable10setVisibleEb>
	Disabled_Button1.invalidate();
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	f603 232c 	addw	r3, r3, #2604	; 0xa2c
 800abb0:	4618      	mov	r0, r3
 800abb2:	f011 ffda 	bl	801cb6a <_ZNK8touchgfx8Drawable10invalidateEv>
	Disabled_Button2.setVisible(!state.anomalyDetected);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f503 6220 	add.w	r2, r3, #2560	; 0xa00
 800abbc:	4b09      	ldr	r3, [pc, #36]	; (800abe4 <_ZN8MainView11setupScreenEv+0x18c>)
 800abbe:	795b      	ldrb	r3, [r3, #5]
 800abc0:	b2db      	uxtb	r3, r3
 800abc2:	f083 0301 	eor.w	r3, r3, #1
 800abc6:	b2db      	uxtb	r3, r3
 800abc8:	4619      	mov	r1, r3
 800abca:	4610      	mov	r0, r2
 800abcc:	f7fb fff5 	bl	8006bba <_ZN8touchgfx8Drawable10setVisibleEb>
	Disabled_Button2.invalidate();
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f503 6320 	add.w	r3, r3, #2560	; 0xa00
 800abd6:	4618      	mov	r0, r3
 800abd8:	f011 ffc7 	bl	801cb6a <_ZNK8touchgfx8Drawable10invalidateEv>
}
 800abdc:	bf00      	nop
 800abde:	3708      	adds	r7, #8
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}
 800abe4:	2400000c 	.word	0x2400000c

0800abe8 <_ZN8MainView14tearDownScreenEv>:

void MainView::tearDownScreen()
{
 800abe8:	b480      	push	{r7}
 800abea:	b083      	sub	sp, #12
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
}
 800abf0:	bf00      	nop
 800abf2:	370c      	adds	r7, #12
 800abf4:	46bd      	mov	sp, r7
 800abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfa:	4770      	bx	lr

0800abfc <_ZN8MainView17set_volume_sliderEi>:

void MainView::set_volume_slider(int value) {
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b082      	sub	sp, #8
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
 800ac04:	6039      	str	r1, [r7, #0]
	state.volume = value;
 800ac06:	4a0e      	ldr	r2, [pc, #56]	; (800ac40 <_ZN8MainView17set_volume_sliderEi+0x44>)
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	6013      	str	r3, [r2, #0]
	textProgress1.setValue(value);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800ac12:	6839      	ldr	r1, [r7, #0]
 800ac14:	4618      	mov	r0, r3
 800ac16:	f00c fd57 	bl	80176c8 <_ZN8touchgfx12TextProgress8setValueEi>

  // update IPC voice volume, normalized 0.0f to 1.0f
  IPCSetVoiceVolumeNormalized( (float)state.volume/100.0f );
 800ac1a:	4b09      	ldr	r3, [pc, #36]	; (800ac40 <_ZN8MainView17set_volume_sliderEi+0x44>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	ee07 3a90 	vmov	s15, r3
 800ac22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac26:	eddf 6a07 	vldr	s13, [pc, #28]	; 800ac44 <_ZN8MainView17set_volume_sliderEi+0x48>
 800ac2a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800ac2e:	eeb0 0a47 	vmov.f32	s0, s14
 800ac32:	f7f5 fba5 	bl	8000380 <IPCSetVoiceVolumeNormalized>
}
 800ac36:	bf00      	nop
 800ac38:	3708      	adds	r7, #8
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}
 800ac3e:	bf00      	nop
 800ac40:	2400000c 	.word	0x2400000c
 800ac44:	42c80000 	.word	0x42c80000

0800ac48 <_ZN8MainView18set_volume_encoderEv>:

void MainView::set_volume_encoder() {
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b084      	sub	sp, #16
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
	int tempVolume = state.volume + currentDelta;
 800ac50:	4b1f      	ldr	r3, [pc, #124]	; (800acd0 <_ZN8MainView18set_volume_encoderEv+0x88>)
 800ac52:	681a      	ldr	r2, [r3, #0]
 800ac54:	4b1f      	ldr	r3, [pc, #124]	; (800acd4 <_ZN8MainView18set_volume_encoderEv+0x8c>)
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	4413      	add	r3, r2
 800ac5a:	60fb      	str	r3, [r7, #12]
	if(tempVolume > 100) {
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	2b64      	cmp	r3, #100	; 0x64
 800ac60:	dd02      	ble.n	800ac68 <_ZN8MainView18set_volume_encoderEv+0x20>
		tempVolume = 100;
 800ac62:	2364      	movs	r3, #100	; 0x64
 800ac64:	60fb      	str	r3, [r7, #12]
 800ac66:	e004      	b.n	800ac72 <_ZN8MainView18set_volume_encoderEv+0x2a>
	}
	else if(tempVolume < 0) {
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	da01      	bge.n	800ac72 <_ZN8MainView18set_volume_encoderEv+0x2a>
		tempVolume = 0;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	60fb      	str	r3, [r7, #12]
	}
	state.volume = tempVolume;
 800ac72:	4a17      	ldr	r2, [pc, #92]	; (800acd0 <_ZN8MainView18set_volume_encoderEv+0x88>)
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	6013      	str	r3, [r2, #0]

	// update IPC voice volume, normalized 0.0f to 1.0f
	IPCSetVoiceVolumeNormalized( (float)state.volume/100.0f );
 800ac78:	4b15      	ldr	r3, [pc, #84]	; (800acd0 <_ZN8MainView18set_volume_encoderEv+0x88>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	ee07 3a90 	vmov	s15, r3
 800ac80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac84:	eddf 6a14 	vldr	s13, [pc, #80]	; 800acd8 <_ZN8MainView18set_volume_encoderEv+0x90>
 800ac88:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800ac8c:	eeb0 0a47 	vmov.f32	s0, s14
 800ac90:	f7f5 fb76 	bl	8000380 <IPCSetVoiceVolumeNormalized>

	//setup volume
	textProgress1.setValue(state.volume);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800ac9a:	4a0d      	ldr	r2, [pc, #52]	; (800acd0 <_ZN8MainView18set_volume_encoderEv+0x88>)
 800ac9c:	6812      	ldr	r2, [r2, #0]
 800ac9e:	4611      	mov	r1, r2
 800aca0:	4618      	mov	r0, r3
 800aca2:	f00c fd11 	bl	80176c8 <_ZN8touchgfx12TextProgress8setValueEi>
	Volume_Slider.setValue(state.volume);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800acac:	4a08      	ldr	r2, [pc, #32]	; (800acd0 <_ZN8MainView18set_volume_encoderEv+0x88>)
 800acae:	6812      	ldr	r2, [r2, #0]
 800acb0:	b212      	sxth	r2, r2
 800acb2:	4611      	mov	r1, r2
 800acb4:	4618      	mov	r0, r3
 800acb6:	f00d f9f4 	bl	80180a2 <_ZN8touchgfx6Slider8setValueEs>
	Volume_Slider.invalidate();
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800acc0:	4618      	mov	r0, r3
 800acc2:	f011 ff52 	bl	801cb6a <_ZNK8touchgfx8Drawable10invalidateEv>

}
 800acc6:	bf00      	nop
 800acc8:	3710      	adds	r7, #16
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}
 800acce:	bf00      	nop
 800acd0:	2400000c 	.word	0x2400000c
 800acd4:	240020f8 	.word	0x240020f8
 800acd8:	42c80000 	.word	0x42c80000

0800acdc <_ZN8MainView12toggle_voiceEv>:

/*
 * Virtual function called when either toggle button is pressed
 */
void MainView::toggle_voice() {
 800acdc:	b580      	push	{r7, lr}
 800acde:	b082      	sub	sp, #8
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
	//Toggle voiceToggle variable
	state.voiceToggle = !state.voiceToggle;
 800ace4:	4b37      	ldr	r3, [pc, #220]	; (800adc4 <_ZN8MainView12toggle_voiceEv+0xe8>)
 800ace6:	791b      	ldrb	r3, [r3, #4]
 800ace8:	f083 0301 	eor.w	r3, r3, #1
 800acec:	b2da      	uxtb	r2, r3
 800acee:	4b35      	ldr	r3, [pc, #212]	; (800adc4 <_ZN8MainView12toggle_voiceEv+0xe8>)
 800acf0:	711a      	strb	r2, [r3, #4]

	// update IPC, mute state is !voiceToggle
	IPCSetVoiceMuteState( (boolean_t)!state.voiceToggle );
 800acf2:	4b34      	ldr	r3, [pc, #208]	; (800adc4 <_ZN8MainView12toggle_voiceEv+0xe8>)
 800acf4:	791b      	ldrb	r3, [r3, #4]
 800acf6:	f083 0301 	eor.w	r3, r3, #1
 800acfa:	b2db      	uxtb	r3, r3
 800acfc:	4618      	mov	r0, r3
 800acfe:	f7f5 fb4f 	bl	80003a0 <IPCSetVoiceMuteState>

	//Update GUI accordingly
	if(state.voiceToggle) {
 800ad02:	4b30      	ldr	r3, [pc, #192]	; (800adc4 <_ZN8MainView12toggle_voiceEv+0xe8>)
 800ad04:	791b      	ldrb	r3, [r3, #4]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d01a      	beq.n	800ad40 <_ZN8MainView12toggle_voiceEv+0x64>
		VoiceCommMess_Text_On.setVisible(true);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	f203 73a4 	addw	r3, r3, #1956	; 0x7a4
 800ad10:	2101      	movs	r1, #1
 800ad12:	4618      	mov	r0, r3
 800ad14:	f7fb ff51 	bl	8006bba <_ZN8touchgfx8Drawable10setVisibleEb>
		VoiceCommMess_Text_Off.setVisible(false);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f203 73ec 	addw	r3, r3, #2028	; 0x7ec
 800ad1e:	2100      	movs	r1, #0
 800ad20:	4618      	mov	r0, r3
 800ad22:	f7fb ff4a 	bl	8006bba <_ZN8touchgfx8Drawable10setVisibleEb>

		VoiceCommMess_Text_On.invalidate();
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f203 73a4 	addw	r3, r3, #1956	; 0x7a4
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	f011 ff1c 	bl	801cb6a <_ZNK8touchgfx8Drawable10invalidateEv>
		VoiceCommMess_Text_Off.invalidate();
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f203 73ec 	addw	r3, r3, #2028	; 0x7ec
 800ad38:	4618      	mov	r0, r3
 800ad3a:	f011 ff16 	bl	801cb6a <_ZNK8touchgfx8Drawable10invalidateEv>
 800ad3e:	e019      	b.n	800ad74 <_ZN8MainView12toggle_voiceEv+0x98>

	} else {
		VoiceCommMess_Text_On.setVisible(false);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f203 73a4 	addw	r3, r3, #1956	; 0x7a4
 800ad46:	2100      	movs	r1, #0
 800ad48:	4618      	mov	r0, r3
 800ad4a:	f7fb ff36 	bl	8006bba <_ZN8touchgfx8Drawable10setVisibleEb>
		VoiceCommMess_Text_Off.setVisible(true);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f203 73ec 	addw	r3, r3, #2028	; 0x7ec
 800ad54:	2101      	movs	r1, #1
 800ad56:	4618      	mov	r0, r3
 800ad58:	f7fb ff2f 	bl	8006bba <_ZN8touchgfx8Drawable10setVisibleEb>

		VoiceCommMess_Text_On.invalidate();
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f203 73a4 	addw	r3, r3, #1956	; 0x7a4
 800ad62:	4618      	mov	r0, r3
 800ad64:	f011 ff01 	bl	801cb6a <_ZNK8touchgfx8Drawable10invalidateEv>
		VoiceCommMess_Text_Off.invalidate();
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f203 73ec 	addw	r3, r3, #2028	; 0x7ec
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f011 fefb 	bl	801cb6a <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(Voice_Toggle_Button.getState() == state.voiceToggle) {
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f7ff fe1c 	bl	800a9b8 <_ZNK8touchgfx12ToggleButton8getStateEv>
 800ad80:	4603      	mov	r3, r0
 800ad82:	461a      	mov	r2, r3
 800ad84:	4b0f      	ldr	r3, [pc, #60]	; (800adc4 <_ZN8MainView12toggle_voiceEv+0xe8>)
 800ad86:	791b      	ldrb	r3, [r3, #4]
 800ad88:	429a      	cmp	r2, r3
 800ad8a:	bf0c      	ite	eq
 800ad8c:	2301      	moveq	r3, #1
 800ad8e:	2300      	movne	r3, #0
 800ad90:	b2db      	uxtb	r3, r3
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d011      	beq.n	800adba <_ZN8MainView12toggle_voiceEv+0xde>
		Voice_Toggle_Button.forceState(!state.voiceToggle);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 800ad9c:	4b09      	ldr	r3, [pc, #36]	; (800adc4 <_ZN8MainView12toggle_voiceEv+0xe8>)
 800ad9e:	791b      	ldrb	r3, [r3, #4]
 800ada0:	f083 0301 	eor.w	r3, r3, #1
 800ada4:	b2db      	uxtb	r3, r3
 800ada6:	4619      	mov	r1, r3
 800ada8:	4610      	mov	r0, r2
 800adaa:	f00e fb41 	bl	8019430 <_ZN8touchgfx12ToggleButton10forceStateEb>
		Voice_Toggle_Button.invalidate();
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 800adb4:	4618      	mov	r0, r3
 800adb6:	f011 fed8 	bl	801cb6a <_ZNK8touchgfx8Drawable10invalidateEv>
	}
}
 800adba:	bf00      	nop
 800adbc:	3708      	adds	r7, #8
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}
 800adc2:	bf00      	nop
 800adc4:	2400000c 	.word	0x2400000c

0800adc8 <_ZN8MainView20update_anomaly_alertEv>:

void MainView::update_anomaly_alert() {
 800adc8:	b580      	push	{r7, lr}
 800adca:	b082      	sub	sp, #8
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
  // a direct cast to bool doesnt work here, need a conditional
	state.anomalyDetected = (IPCGetAnomalyDetectState( ) != 0 ? true : false);
 800add0:	f7f5 faf6 	bl	80003c0 <IPCGetAnomalyDetectState>
 800add4:	4603      	mov	r3, r0
 800add6:	2b00      	cmp	r3, #0
 800add8:	bf14      	ite	ne
 800adda:	2301      	movne	r3, #1
 800addc:	2300      	moveq	r3, #0
 800adde:	b2da      	uxtb	r2, r3
 800ade0:	4b40      	ldr	r3, [pc, #256]	; (800aee4 <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800ade2:	715a      	strb	r2, [r3, #5]
	state.alert = state.anomalyDetected;
 800ade4:	4b3f      	ldr	r3, [pc, #252]	; (800aee4 <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800ade6:	795b      	ldrb	r3, [r3, #5]
 800ade8:	b2da      	uxtb	r2, r3
 800adea:	4b3e      	ldr	r3, [pc, #248]	; (800aee4 <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800adec:	719a      	strb	r2, [r3, #6]

	//Set alert message
	AnomalyWarning_Textbox_1_1.setVisible(state.anomalyDetected);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	f603 0334 	addw	r3, r3, #2100	; 0x834
 800adf4:	4a3b      	ldr	r2, [pc, #236]	; (800aee4 <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800adf6:	7952      	ldrb	r2, [r2, #5]
 800adf8:	b2d2      	uxtb	r2, r2
 800adfa:	4611      	mov	r1, r2
 800adfc:	4618      	mov	r0, r3
 800adfe:	f7fb fedc 	bl	8006bba <_ZN8touchgfx8Drawable10setVisibleEb>
	AnomalyWarning_Textbox_1_1.invalidate();
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f603 0334 	addw	r3, r3, #2100	; 0x834
 800ae08:	4618      	mov	r0, r3
 800ae0a:	f011 feae 	bl	801cb6a <_ZNK8touchgfx8Drawable10invalidateEv>

	//Set text of alert message
	MessageBoard_Message_1.setVisible(state.alert);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f603 03c8 	addw	r3, r3, #2248	; 0x8c8
 800ae14:	4a33      	ldr	r2, [pc, #204]	; (800aee4 <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800ae16:	7992      	ldrb	r2, [r2, #6]
 800ae18:	4611      	mov	r1, r2
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f7fb fecd 	bl	8006bba <_ZN8touchgfx8Drawable10setVisibleEb>
	MessageBoard_Message_1.invalidate();
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f603 03c8 	addw	r3, r3, #2248	; 0x8c8
 800ae26:	4618      	mov	r0, r3
 800ae28:	f011 fe9f 	bl	801cb6a <_ZNK8touchgfx8Drawable10invalidateEv>
	MessageBoard_Message_Muted.setVisible(!state.alert);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f503 6211 	add.w	r2, r3, #2320	; 0x910
 800ae32:	4b2c      	ldr	r3, [pc, #176]	; (800aee4 <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800ae34:	799b      	ldrb	r3, [r3, #6]
 800ae36:	f083 0301 	eor.w	r3, r3, #1
 800ae3a:	b2db      	uxtb	r3, r3
 800ae3c:	4619      	mov	r1, r3
 800ae3e:	4610      	mov	r0, r2
 800ae40:	f7fb febb 	bl	8006bba <_ZN8touchgfx8Drawable10setVisibleEb>
	MessageBoard_Message_Muted.invalidate();
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f011 fe8d 	bl	801cb6a <_ZNK8touchgfx8Drawable10invalidateEv>

	//Set buttons
	Localize_Button.setVisible(state.anomalyDetected);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 800ae56:	4a23      	ldr	r2, [pc, #140]	; (800aee4 <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800ae58:	7952      	ldrb	r2, [r2, #5]
 800ae5a:	b2d2      	uxtb	r2, r2
 800ae5c:	4611      	mov	r1, r2
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f7fb feab 	bl	8006bba <_ZN8touchgfx8Drawable10setVisibleEb>
	Localize_Button.invalidate();
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f011 fe7d 	bl	801cb6a <_ZNK8touchgfx8Drawable10invalidateEv>
	Alert_Mute_Button.setVisible(state.anomalyDetected);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f603 2358 	addw	r3, r3, #2648	; 0xa58
 800ae76:	4a1b      	ldr	r2, [pc, #108]	; (800aee4 <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800ae78:	7952      	ldrb	r2, [r2, #5]
 800ae7a:	b2d2      	uxtb	r2, r2
 800ae7c:	4611      	mov	r1, r2
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f7fb fe9b 	bl	8006bba <_ZN8touchgfx8Drawable10setVisibleEb>
	Alert_Mute_Button.invalidate();
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f603 2358 	addw	r3, r3, #2648	; 0xa58
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f011 fe6d 	bl	801cb6a <_ZNK8touchgfx8Drawable10invalidateEv>

	//Set disabled button images
	Disabled_Button1.setVisible(!state.anomalyDetected);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f603 222c 	addw	r2, r3, #2604	; 0xa2c
 800ae96:	4b13      	ldr	r3, [pc, #76]	; (800aee4 <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800ae98:	795b      	ldrb	r3, [r3, #5]
 800ae9a:	b2db      	uxtb	r3, r3
 800ae9c:	f083 0301 	eor.w	r3, r3, #1
 800aea0:	b2db      	uxtb	r3, r3
 800aea2:	4619      	mov	r1, r3
 800aea4:	4610      	mov	r0, r2
 800aea6:	f7fb fe88 	bl	8006bba <_ZN8touchgfx8Drawable10setVisibleEb>
	Disabled_Button1.invalidate();
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f603 232c 	addw	r3, r3, #2604	; 0xa2c
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f011 fe5a 	bl	801cb6a <_ZNK8touchgfx8Drawable10invalidateEv>
	Disabled_Button2.setVisible(!state.anomalyDetected);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f503 6220 	add.w	r2, r3, #2560	; 0xa00
 800aebc:	4b09      	ldr	r3, [pc, #36]	; (800aee4 <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800aebe:	795b      	ldrb	r3, [r3, #5]
 800aec0:	b2db      	uxtb	r3, r3
 800aec2:	f083 0301 	eor.w	r3, r3, #1
 800aec6:	b2db      	uxtb	r3, r3
 800aec8:	4619      	mov	r1, r3
 800aeca:	4610      	mov	r0, r2
 800aecc:	f7fb fe75 	bl	8006bba <_ZN8touchgfx8Drawable10setVisibleEb>
	Disabled_Button2.invalidate();
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f503 6320 	add.w	r3, r3, #2560	; 0xa00
 800aed6:	4618      	mov	r0, r3
 800aed8:	f011 fe47 	bl	801cb6a <_ZNK8touchgfx8Drawable10invalidateEv>
}
 800aedc:	bf00      	nop
 800aede:	3708      	adds	r7, #8
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}
 800aee4:	2400000c 	.word	0x2400000c

0800aee8 <_ZN8MainView18alert_mute_pressedEv>:

void MainView::alert_mute_pressed() {
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b082      	sub	sp, #8
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
  // toggle IPC mute, doesnt matter if alarm is not active, output audio sets it active on new event
  IPCSetAlarmMuteState( (boolean_t)!IPCGetAlarmMuteState( ) );
 800aef0:	f7f5 fa72 	bl	80003d8 <IPCGetAlarmMuteState>
 800aef4:	4603      	mov	r3, r0
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	bf0c      	ite	eq
 800aefa:	2301      	moveq	r3, #1
 800aefc:	2300      	movne	r3, #0
 800aefe:	b2db      	uxtb	r3, r3
 800af00:	4618      	mov	r0, r3
 800af02:	f7f5 fa75 	bl	80003f0 <IPCSetAlarmMuteState>

	if(state.alert) {
 800af06:	4b16      	ldr	r3, [pc, #88]	; (800af60 <_ZN8MainView18alert_mute_pressedEv+0x78>)
 800af08:	799b      	ldrb	r3, [r3, #6]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d023      	beq.n	800af56 <_ZN8MainView18alert_mute_pressedEv+0x6e>
		state.alert = false;
 800af0e:	4b14      	ldr	r3, [pc, #80]	; (800af60 <_ZN8MainView18alert_mute_pressedEv+0x78>)
 800af10:	2200      	movs	r2, #0
 800af12:	719a      	strb	r2, [r3, #6]

		MessageBoard_Message_1.setVisible(state.alert);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f603 03c8 	addw	r3, r3, #2248	; 0x8c8
 800af1a:	4a11      	ldr	r2, [pc, #68]	; (800af60 <_ZN8MainView18alert_mute_pressedEv+0x78>)
 800af1c:	7992      	ldrb	r2, [r2, #6]
 800af1e:	4611      	mov	r1, r2
 800af20:	4618      	mov	r0, r3
 800af22:	f7fb fe4a 	bl	8006bba <_ZN8touchgfx8Drawable10setVisibleEb>
		MessageBoard_Message_1.invalidate();
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f603 03c8 	addw	r3, r3, #2248	; 0x8c8
 800af2c:	4618      	mov	r0, r3
 800af2e:	f011 fe1c 	bl	801cb6a <_ZNK8touchgfx8Drawable10invalidateEv>
		MessageBoard_Message_Muted.setVisible(!state.alert);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f503 6211 	add.w	r2, r3, #2320	; 0x910
 800af38:	4b09      	ldr	r3, [pc, #36]	; (800af60 <_ZN8MainView18alert_mute_pressedEv+0x78>)
 800af3a:	799b      	ldrb	r3, [r3, #6]
 800af3c:	f083 0301 	eor.w	r3, r3, #1
 800af40:	b2db      	uxtb	r3, r3
 800af42:	4619      	mov	r1, r3
 800af44:	4610      	mov	r0, r2
 800af46:	f7fb fe38 	bl	8006bba <_ZN8touchgfx8Drawable10setVisibleEb>
		MessageBoard_Message_Muted.invalidate();
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f503 6311 	add.w	r3, r3, #2320	; 0x910
 800af50:	4618      	mov	r0, r3
 800af52:	f011 fe0a 	bl	801cb6a <_ZNK8touchgfx8Drawable10invalidateEv>
	}
}
 800af56:	bf00      	nop
 800af58:	3708      	adds	r7, #8
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}
 800af5e:	bf00      	nop
 800af60:	2400000c 	.word	0x2400000c

0800af64 <_ZN5ModelC1Ev>:
#include "ipc_interface.h"

//#include "main.h"
boolean_t led1 = TRUE;
extern int currentDelta;
Model::Model() : modelListener(0)
 800af64:	b480      	push	{r7}
 800af66:	b083      	sub	sp, #12
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2200      	movs	r2, #0
 800af70:	601a      	str	r2, [r3, #0]
{

}
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	4618      	mov	r0, r3
 800af76:	370c      	adds	r7, #12
 800af78:	46bd      	mov	sp, r7
 800af7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7e:	4770      	bx	lr

0800af80 <_ZN5Model4tickEv>:
bool anomaly_detect_state_previous;
bool anomaly_detect_state_current = false;

uint16_t encoderCount = 0;
void Model::tick()
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b084      	sub	sp, #16
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
  // update anomaly detect state from IPC
  anomaly_detect_state_previous = anomaly_detect_state_current;
 800af88:	4b67      	ldr	r3, [pc, #412]	; (800b128 <_ZN5Model4tickEv+0x1a8>)
 800af8a:	781a      	ldrb	r2, [r3, #0]
 800af8c:	4b67      	ldr	r3, [pc, #412]	; (800b12c <_ZN5Model4tickEv+0x1ac>)
 800af8e:	701a      	strb	r2, [r3, #0]
  // a direct cast to bool doesnt work here, need a conditional
  anomaly_detect_state_current = ((int)IPCGetAnomalyDetectState( ) != 0 ? true : false);
 800af90:	f7f5 fa16 	bl	80003c0 <IPCGetAnomalyDetectState>
 800af94:	4603      	mov	r3, r0
 800af96:	2b00      	cmp	r3, #0
 800af98:	bf14      	ite	ne
 800af9a:	2301      	movne	r3, #1
 800af9c:	2300      	moveq	r3, #0
 800af9e:	b2da      	uxtb	r2, r3
 800afa0:	4b61      	ldr	r3, [pc, #388]	; (800b128 <_ZN5Model4tickEv+0x1a8>)
 800afa2:	701a      	strb	r2, [r3, #0]

  // only update GUI on change of state
  if ( anomaly_detect_state_current != anomaly_detect_state_previous )
 800afa4:	4b60      	ldr	r3, [pc, #384]	; (800b128 <_ZN5Model4tickEv+0x1a8>)
 800afa6:	781a      	ldrb	r2, [r3, #0]
 800afa8:	4b60      	ldr	r3, [pc, #384]	; (800b12c <_ZN5Model4tickEv+0x1ac>)
 800afaa:	781b      	ldrb	r3, [r3, #0]
 800afac:	429a      	cmp	r2, r3
 800afae:	d009      	beq.n	800afc4 <_ZN5Model4tickEv+0x44>
  {
    static_cast<FrontendApplication*>(Application::getInstance())->handleKeyEvent(87);
 800afb0:	f010 fcf0 	bl	801b994 <_ZN8touchgfx11Application11getInstanceEv>
 800afb4:	4603      	mov	r3, r0
 800afb6:	461a      	mov	r2, r3
 800afb8:	6813      	ldr	r3, [r2, #0]
 800afba:	330c      	adds	r3, #12
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	2157      	movs	r1, #87	; 0x57
 800afc0:	4610      	mov	r0, r2
 800afc2:	4798      	blx	r3
  // Actuate and toggle alarm LEDS
  // * Originally went for series LEDs with center tap by driving output, but they remain lit even without output active,
  //     so added another output to conditionally provide 3v3 to the series
  // TODO - Might as well use one output for each LED, instead of the current kind of fixed arrangement
  // TODO - This level of hardware access should NOT be here, but it's 2 days to FDR and I'm long out of patience
  if ( anomaly_detect_state_current )
 800afc4:	4b58      	ldr	r3, [pc, #352]	; (800b128 <_ZN5Model4tickEv+0x1a8>)
 800afc6:	781b      	ldrb	r3, [r3, #0]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d028      	beq.n	800b01e <_ZN5Model4tickEv+0x9e>
  {
    // enable the driving output
    GPIOH->BSRR |= 1 << 15;
 800afcc:	4b58      	ldr	r3, [pc, #352]	; (800b130 <_ZN5Model4tickEv+0x1b0>)
 800afce:	699b      	ldr	r3, [r3, #24]
 800afd0:	4a57      	ldr	r2, [pc, #348]	; (800b130 <_ZN5Model4tickEv+0x1b0>)
 800afd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800afd6:	6193      	str	r3, [r2, #24]

    // half second on, half second off for each
    // wiring so that one or the other is on
    if ( HAL_GetTick( ) % 1000 < 500 )
 800afd8:	f006 f972 	bl	80112c0 <HAL_GetTick>
 800afdc:	4602      	mov	r2, r0
 800afde:	4b55      	ldr	r3, [pc, #340]	; (800b134 <_ZN5Model4tickEv+0x1b4>)
 800afe0:	fba3 1302 	umull	r1, r3, r3, r2
 800afe4:	099b      	lsrs	r3, r3, #6
 800afe6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800afea:	fb01 f303 	mul.w	r3, r1, r3
 800afee:	1ad3      	subs	r3, r2, r3
 800aff0:	f240 12f3 	movw	r2, #499	; 0x1f3
 800aff4:	4293      	cmp	r3, r2
 800aff6:	bf94      	ite	ls
 800aff8:	2301      	movls	r3, #1
 800affa:	2300      	movhi	r3, #0
 800affc:	b2db      	uxtb	r3, r3
 800affe:	2b00      	cmp	r3, #0
 800b000:	d006      	beq.n	800b010 <_ZN5Model4tickEv+0x90>
    {
      GPIOE->BSRR |= 1 << 3;
 800b002:	4b4d      	ldr	r3, [pc, #308]	; (800b138 <_ZN5Model4tickEv+0x1b8>)
 800b004:	699b      	ldr	r3, [r3, #24]
 800b006:	4a4c      	ldr	r2, [pc, #304]	; (800b138 <_ZN5Model4tickEv+0x1b8>)
 800b008:	f043 0308 	orr.w	r3, r3, #8
 800b00c:	6193      	str	r3, [r2, #24]
 800b00e:	e012      	b.n	800b036 <_ZN5Model4tickEv+0xb6>
    }
    else
    {
      GPIOE->BSRR |= 1 << (3 + 16);
 800b010:	4b49      	ldr	r3, [pc, #292]	; (800b138 <_ZN5Model4tickEv+0x1b8>)
 800b012:	699b      	ldr	r3, [r3, #24]
 800b014:	4a48      	ldr	r2, [pc, #288]	; (800b138 <_ZN5Model4tickEv+0x1b8>)
 800b016:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b01a:	6193      	str	r3, [r2, #24]
 800b01c:	e00b      	b.n	800b036 <_ZN5Model4tickEv+0xb6>
    }
  }
  else
  {
    // disable outputs driving LEDs
    GPIOH->BSRR |= 1 << (15 + 16);
 800b01e:	4b44      	ldr	r3, [pc, #272]	; (800b130 <_ZN5Model4tickEv+0x1b0>)
 800b020:	699b      	ldr	r3, [r3, #24]
 800b022:	4a43      	ldr	r2, [pc, #268]	; (800b130 <_ZN5Model4tickEv+0x1b0>)
 800b024:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b028:	6193      	str	r3, [r2, #24]
    GPIOE->BSRR |= 1 << (3 + 16);
 800b02a:	4b43      	ldr	r3, [pc, #268]	; (800b138 <_ZN5Model4tickEv+0x1b8>)
 800b02c:	699b      	ldr	r3, [r3, #24]
 800b02e:	4a42      	ldr	r2, [pc, #264]	; (800b138 <_ZN5Model4tickEv+0x1b8>)
 800b030:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b034:	6193      	str	r3, [r2, #24]
  }

  // voice mute
	bool currentSWStatus = HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_3);
 800b036:	2108      	movs	r1, #8
 800b038:	4840      	ldr	r0, [pc, #256]	; (800b13c <_ZN5Model4tickEv+0x1bc>)
 800b03a:	f006 ffff 	bl	801203c <HAL_GPIO_ReadPin>
 800b03e:	4603      	mov	r3, r0
 800b040:	2b00      	cmp	r3, #0
 800b042:	bf14      	ite	ne
 800b044:	2301      	movne	r3, #1
 800b046:	2300      	moveq	r3, #0
 800b048:	73fb      	strb	r3, [r7, #15]
    if(currentSWStatus != swStatus){
 800b04a:	4b3d      	ldr	r3, [pc, #244]	; (800b140 <_ZN5Model4tickEv+0x1c0>)
 800b04c:	781b      	ldrb	r3, [r3, #0]
 800b04e:	7bfa      	ldrb	r2, [r7, #15]
 800b050:	429a      	cmp	r2, r3
 800b052:	d017      	beq.n	800b084 <_ZN5Model4tickEv+0x104>
	   swStatus = currentSWStatus;
 800b054:	4a3a      	ldr	r2, [pc, #232]	; (800b140 <_ZN5Model4tickEv+0x1c0>)
 800b056:	7bfb      	ldrb	r3, [r7, #15]
 800b058:	7013      	strb	r3, [r2, #0]
	   if(swFilter) {
 800b05a:	4b3a      	ldr	r3, [pc, #232]	; (800b144 <_ZN5Model4tickEv+0x1c4>)
 800b05c:	781b      	ldrb	r3, [r3, #0]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d009      	beq.n	800b076 <_ZN5Model4tickEv+0xf6>
		   static_cast<FrontendApplication*>(Application::getInstance())->handleKeyEvent(89);
 800b062:	f010 fc97 	bl	801b994 <_ZN8touchgfx11Application11getInstanceEv>
 800b066:	4603      	mov	r3, r0
 800b068:	461a      	mov	r2, r3
 800b06a:	6813      	ldr	r3, [r2, #0]
 800b06c:	330c      	adds	r3, #12
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	2159      	movs	r1, #89	; 0x59
 800b072:	4610      	mov	r0, r2
 800b074:	4798      	blx	r3
	   }
	   swFilter = !swFilter;
 800b076:	4b33      	ldr	r3, [pc, #204]	; (800b144 <_ZN5Model4tickEv+0x1c4>)
 800b078:	781b      	ldrb	r3, [r3, #0]
 800b07a:	f083 0301 	eor.w	r3, r3, #1
 800b07e:	b2da      	uxtb	r2, r3
 800b080:	4b30      	ldr	r3, [pc, #192]	; (800b144 <_ZN5Model4tickEv+0x1c4>)
 800b082:	701a      	strb	r2, [r3, #0]
	}

  // alarm mute button
	bool currentMuteStatus = HAL_GPIO_ReadPin(GPIOK, GPIO_PIN_1);
 800b084:	2102      	movs	r1, #2
 800b086:	4830      	ldr	r0, [pc, #192]	; (800b148 <_ZN5Model4tickEv+0x1c8>)
 800b088:	f006 ffd8 	bl	801203c <HAL_GPIO_ReadPin>
 800b08c:	4603      	mov	r3, r0
 800b08e:	2b00      	cmp	r3, #0
 800b090:	bf14      	ite	ne
 800b092:	2301      	movne	r3, #1
 800b094:	2300      	moveq	r3, #0
 800b096:	73bb      	strb	r3, [r7, #14]
    if(currentMuteStatus != muteStatus){
 800b098:	4b2c      	ldr	r3, [pc, #176]	; (800b14c <_ZN5Model4tickEv+0x1cc>)
 800b09a:	781b      	ldrb	r3, [r3, #0]
 800b09c:	7bba      	ldrb	r2, [r7, #14]
 800b09e:	429a      	cmp	r2, r3
 800b0a0:	d017      	beq.n	800b0d2 <_ZN5Model4tickEv+0x152>
	   muteStatus = currentMuteStatus;
 800b0a2:	4a2a      	ldr	r2, [pc, #168]	; (800b14c <_ZN5Model4tickEv+0x1cc>)
 800b0a4:	7bbb      	ldrb	r3, [r7, #14]
 800b0a6:	7013      	strb	r3, [r2, #0]
	   if(muteFilter) {
 800b0a8:	4b29      	ldr	r3, [pc, #164]	; (800b150 <_ZN5Model4tickEv+0x1d0>)
 800b0aa:	781b      	ldrb	r3, [r3, #0]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d009      	beq.n	800b0c4 <_ZN5Model4tickEv+0x144>
		   static_cast<FrontendApplication*>(Application::getInstance())->handleKeyEvent(90);
 800b0b0:	f010 fc70 	bl	801b994 <_ZN8touchgfx11Application11getInstanceEv>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	461a      	mov	r2, r3
 800b0b8:	6813      	ldr	r3, [r2, #0]
 800b0ba:	330c      	adds	r3, #12
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	215a      	movs	r1, #90	; 0x5a
 800b0c0:	4610      	mov	r0, r2
 800b0c2:	4798      	blx	r3
	   }
	   muteFilter = !muteFilter;
 800b0c4:	4b22      	ldr	r3, [pc, #136]	; (800b150 <_ZN5Model4tickEv+0x1d0>)
 800b0c6:	781b      	ldrb	r3, [r3, #0]
 800b0c8:	f083 0301 	eor.w	r3, r3, #1
 800b0cc:	b2da      	uxtb	r2, r3
 800b0ce:	4b20      	ldr	r3, [pc, #128]	; (800b150 <_ZN5Model4tickEv+0x1d0>)
 800b0d0:	701a      	strb	r2, [r3, #0]
	}

  // TIM4 serves as the encoder counter
  if (TIM4->CNT != encoderCount)
 800b0d2:	4b20      	ldr	r3, [pc, #128]	; (800b154 <_ZN5Model4tickEv+0x1d4>)
 800b0d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0d6:	4a20      	ldr	r2, [pc, #128]	; (800b158 <_ZN5Model4tickEv+0x1d8>)
 800b0d8:	8812      	ldrh	r2, [r2, #0]
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	bf14      	ite	ne
 800b0de:	2301      	movne	r3, #1
 800b0e0:	2300      	moveq	r3, #0
 800b0e2:	b2db      	uxtb	r3, r3
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d01b      	beq.n	800b120 <_ZN5Model4tickEv+0x1a0>
  {
    int16_t encoderDelta = TIM4->CNT - encoderCount;
 800b0e8:	4b1a      	ldr	r3, [pc, #104]	; (800b154 <_ZN5Model4tickEv+0x1d4>)
 800b0ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ec:	b29a      	uxth	r2, r3
 800b0ee:	4b1a      	ldr	r3, [pc, #104]	; (800b158 <_ZN5Model4tickEv+0x1d8>)
 800b0f0:	881b      	ldrh	r3, [r3, #0]
 800b0f2:	1ad3      	subs	r3, r2, r3
 800b0f4:	b29b      	uxth	r3, r3
 800b0f6:	81bb      	strh	r3, [r7, #12]
    encoderCount = TIM4->CNT;
 800b0f8:	4b16      	ldr	r3, [pc, #88]	; (800b154 <_ZN5Model4tickEv+0x1d4>)
 800b0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0fc:	b29a      	uxth	r2, r3
 800b0fe:	4b16      	ldr	r3, [pc, #88]	; (800b158 <_ZN5Model4tickEv+0x1d8>)
 800b100:	801a      	strh	r2, [r3, #0]
    currentDelta = encoderDelta * 2;
 800b102:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b106:	005b      	lsls	r3, r3, #1
 800b108:	4a14      	ldr	r2, [pc, #80]	; (800b15c <_ZN5Model4tickEv+0x1dc>)
 800b10a:	6013      	str	r3, [r2, #0]

    static_cast<FrontendApplication*>(Application::getInstance())->handleKeyEvent(88);
 800b10c:	f010 fc42 	bl	801b994 <_ZN8touchgfx11Application11getInstanceEv>
 800b110:	4603      	mov	r3, r0
 800b112:	461a      	mov	r2, r3
 800b114:	6813      	ldr	r3, [r2, #0]
 800b116:	330c      	adds	r3, #12
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	2158      	movs	r1, #88	; 0x58
 800b11c:	4610      	mov	r0, r2
 800b11e:	4798      	blx	r3
  }
}
 800b120:	bf00      	nop
 800b122:	3710      	adds	r7, #16
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}
 800b128:	24002101 	.word	0x24002101
 800b12c:	24002100 	.word	0x24002100
 800b130:	58021c00 	.word	0x58021c00
 800b134:	10624dd3 	.word	0x10624dd3
 800b138:	58021000 	.word	0x58021000
 800b13c:	58021800 	.word	0x58021800
 800b140:	240020fc 	.word	0x240020fc
 800b144:	240020fd 	.word	0x240020fd
 800b148:	58022800 	.word	0x58022800
 800b14c:	240020fe 	.word	0x240020fe
 800b150:	240020ff 	.word	0x240020ff
 800b154:	40000800 	.word	0x40000800
 800b158:	24002102 	.word	0x24002102
 800b15c:	240020f8 	.word	0x240020f8

0800b160 <__NVIC_SetPriority>:
{
 800b160:	b480      	push	{r7}
 800b162:	b083      	sub	sp, #12
 800b164:	af00      	add	r7, sp, #0
 800b166:	4603      	mov	r3, r0
 800b168:	6039      	str	r1, [r7, #0]
 800b16a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b16c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b170:	2b00      	cmp	r3, #0
 800b172:	db0a      	blt.n	800b18a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	b2da      	uxtb	r2, r3
 800b178:	490c      	ldr	r1, [pc, #48]	; (800b1ac <__NVIC_SetPriority+0x4c>)
 800b17a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b17e:	0112      	lsls	r2, r2, #4
 800b180:	b2d2      	uxtb	r2, r2
 800b182:	440b      	add	r3, r1
 800b184:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b188:	e00a      	b.n	800b1a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	b2da      	uxtb	r2, r3
 800b18e:	4908      	ldr	r1, [pc, #32]	; (800b1b0 <__NVIC_SetPriority+0x50>)
 800b190:	88fb      	ldrh	r3, [r7, #6]
 800b192:	f003 030f 	and.w	r3, r3, #15
 800b196:	3b04      	subs	r3, #4
 800b198:	0112      	lsls	r2, r2, #4
 800b19a:	b2d2      	uxtb	r2, r2
 800b19c:	440b      	add	r3, r1
 800b19e:	761a      	strb	r2, [r3, #24]
}
 800b1a0:	bf00      	nop
 800b1a2:	370c      	adds	r7, #12
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1aa:	4770      	bx	lr
 800b1ac:	e000e100 	.word	0xe000e100
 800b1b0:	e000ed00 	.word	0xe000ed00

0800b1b4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b1b8:	4b05      	ldr	r3, [pc, #20]	; (800b1d0 <SysTick_Handler+0x1c>)
 800b1ba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b1bc:	f002 fed2 	bl	800df64 <xTaskGetSchedulerState>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	2b01      	cmp	r3, #1
 800b1c4:	d001      	beq.n	800b1ca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b1c6:	f000 ffe7 	bl	800c198 <xPortSysTickHandler>
  }
}
 800b1ca:	bf00      	nop
 800b1cc:	bd80      	pop	{r7, pc}
 800b1ce:	bf00      	nop
 800b1d0:	e000e010 	.word	0xe000e010

0800b1d4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b1d8:	2100      	movs	r1, #0
 800b1da:	f06f 0004 	mvn.w	r0, #4
 800b1de:	f7ff ffbf 	bl	800b160 <__NVIC_SetPriority>
#endif
}
 800b1e2:	bf00      	nop
 800b1e4:	bd80      	pop	{r7, pc}
	...

0800b1e8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b1e8:	b480      	push	{r7}
 800b1ea:	b083      	sub	sp, #12
 800b1ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b1ee:	f3ef 8305 	mrs	r3, IPSR
 800b1f2:	603b      	str	r3, [r7, #0]
  return(result);
 800b1f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d003      	beq.n	800b202 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b1fa:	f06f 0305 	mvn.w	r3, #5
 800b1fe:	607b      	str	r3, [r7, #4]
 800b200:	e00c      	b.n	800b21c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b202:	4b0a      	ldr	r3, [pc, #40]	; (800b22c <osKernelInitialize+0x44>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d105      	bne.n	800b216 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b20a:	4b08      	ldr	r3, [pc, #32]	; (800b22c <osKernelInitialize+0x44>)
 800b20c:	2201      	movs	r2, #1
 800b20e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b210:	2300      	movs	r3, #0
 800b212:	607b      	str	r3, [r7, #4]
 800b214:	e002      	b.n	800b21c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b216:	f04f 33ff 	mov.w	r3, #4294967295
 800b21a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b21c:	687b      	ldr	r3, [r7, #4]
}
 800b21e:	4618      	mov	r0, r3
 800b220:	370c      	adds	r7, #12
 800b222:	46bd      	mov	sp, r7
 800b224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b228:	4770      	bx	lr
 800b22a:	bf00      	nop
 800b22c:	24002104 	.word	0x24002104

0800b230 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b230:	b580      	push	{r7, lr}
 800b232:	b082      	sub	sp, #8
 800b234:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b236:	f3ef 8305 	mrs	r3, IPSR
 800b23a:	603b      	str	r3, [r7, #0]
  return(result);
 800b23c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d003      	beq.n	800b24a <osKernelStart+0x1a>
    stat = osErrorISR;
 800b242:	f06f 0305 	mvn.w	r3, #5
 800b246:	607b      	str	r3, [r7, #4]
 800b248:	e010      	b.n	800b26c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b24a:	4b0b      	ldr	r3, [pc, #44]	; (800b278 <osKernelStart+0x48>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	2b01      	cmp	r3, #1
 800b250:	d109      	bne.n	800b266 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b252:	f7ff ffbf 	bl	800b1d4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b256:	4b08      	ldr	r3, [pc, #32]	; (800b278 <osKernelStart+0x48>)
 800b258:	2202      	movs	r2, #2
 800b25a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b25c:	f002 fa26 	bl	800d6ac <vTaskStartScheduler>
      stat = osOK;
 800b260:	2300      	movs	r3, #0
 800b262:	607b      	str	r3, [r7, #4]
 800b264:	e002      	b.n	800b26c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b266:	f04f 33ff 	mov.w	r3, #4294967295
 800b26a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b26c:	687b      	ldr	r3, [r7, #4]
}
 800b26e:	4618      	mov	r0, r3
 800b270:	3708      	adds	r7, #8
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}
 800b276:	bf00      	nop
 800b278:	24002104 	.word	0x24002104

0800b27c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b08e      	sub	sp, #56	; 0x38
 800b280:	af04      	add	r7, sp, #16
 800b282:	60f8      	str	r0, [r7, #12]
 800b284:	60b9      	str	r1, [r7, #8]
 800b286:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b288:	2300      	movs	r3, #0
 800b28a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b28c:	f3ef 8305 	mrs	r3, IPSR
 800b290:	617b      	str	r3, [r7, #20]
  return(result);
 800b292:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b294:	2b00      	cmp	r3, #0
 800b296:	d17e      	bne.n	800b396 <osThreadNew+0x11a>
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d07b      	beq.n	800b396 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b29e:	2380      	movs	r3, #128	; 0x80
 800b2a0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b2a2:	2318      	movs	r3, #24
 800b2a4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b2aa:	f04f 33ff 	mov.w	r3, #4294967295
 800b2ae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d045      	beq.n	800b342 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d002      	beq.n	800b2c4 <osThreadNew+0x48>
        name = attr->name;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	699b      	ldr	r3, [r3, #24]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d002      	beq.n	800b2d2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	699b      	ldr	r3, [r3, #24]
 800b2d0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b2d2:	69fb      	ldr	r3, [r7, #28]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d008      	beq.n	800b2ea <osThreadNew+0x6e>
 800b2d8:	69fb      	ldr	r3, [r7, #28]
 800b2da:	2b38      	cmp	r3, #56	; 0x38
 800b2dc:	d805      	bhi.n	800b2ea <osThreadNew+0x6e>
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	685b      	ldr	r3, [r3, #4]
 800b2e2:	f003 0301 	and.w	r3, r3, #1
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d001      	beq.n	800b2ee <osThreadNew+0x72>
        return (NULL);
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	e054      	b.n	800b398 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	695b      	ldr	r3, [r3, #20]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d003      	beq.n	800b2fe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	695b      	ldr	r3, [r3, #20]
 800b2fa:	089b      	lsrs	r3, r3, #2
 800b2fc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	689b      	ldr	r3, [r3, #8]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d00e      	beq.n	800b324 <osThreadNew+0xa8>
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	68db      	ldr	r3, [r3, #12]
 800b30a:	2ba7      	cmp	r3, #167	; 0xa7
 800b30c:	d90a      	bls.n	800b324 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b312:	2b00      	cmp	r3, #0
 800b314:	d006      	beq.n	800b324 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	695b      	ldr	r3, [r3, #20]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d002      	beq.n	800b324 <osThreadNew+0xa8>
        mem = 1;
 800b31e:	2301      	movs	r3, #1
 800b320:	61bb      	str	r3, [r7, #24]
 800b322:	e010      	b.n	800b346 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	689b      	ldr	r3, [r3, #8]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d10c      	bne.n	800b346 <osThreadNew+0xca>
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	68db      	ldr	r3, [r3, #12]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d108      	bne.n	800b346 <osThreadNew+0xca>
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	691b      	ldr	r3, [r3, #16]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d104      	bne.n	800b346 <osThreadNew+0xca>
          mem = 0;
 800b33c:	2300      	movs	r3, #0
 800b33e:	61bb      	str	r3, [r7, #24]
 800b340:	e001      	b.n	800b346 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b342:	2300      	movs	r3, #0
 800b344:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b346:	69bb      	ldr	r3, [r7, #24]
 800b348:	2b01      	cmp	r3, #1
 800b34a:	d110      	bne.n	800b36e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b350:	687a      	ldr	r2, [r7, #4]
 800b352:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b354:	9202      	str	r2, [sp, #8]
 800b356:	9301      	str	r3, [sp, #4]
 800b358:	69fb      	ldr	r3, [r7, #28]
 800b35a:	9300      	str	r3, [sp, #0]
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	6a3a      	ldr	r2, [r7, #32]
 800b360:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b362:	68f8      	ldr	r0, [r7, #12]
 800b364:	f001 ffb6 	bl	800d2d4 <xTaskCreateStatic>
 800b368:	4603      	mov	r3, r0
 800b36a:	613b      	str	r3, [r7, #16]
 800b36c:	e013      	b.n	800b396 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b36e:	69bb      	ldr	r3, [r7, #24]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d110      	bne.n	800b396 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b374:	6a3b      	ldr	r3, [r7, #32]
 800b376:	b29a      	uxth	r2, r3
 800b378:	f107 0310 	add.w	r3, r7, #16
 800b37c:	9301      	str	r3, [sp, #4]
 800b37e:	69fb      	ldr	r3, [r7, #28]
 800b380:	9300      	str	r3, [sp, #0]
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b386:	68f8      	ldr	r0, [r7, #12]
 800b388:	f002 f801 	bl	800d38e <xTaskCreate>
 800b38c:	4603      	mov	r3, r0
 800b38e:	2b01      	cmp	r3, #1
 800b390:	d001      	beq.n	800b396 <osThreadNew+0x11a>
            hTask = NULL;
 800b392:	2300      	movs	r3, #0
 800b394:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b396:	693b      	ldr	r3, [r7, #16]
}
 800b398:	4618      	mov	r0, r3
 800b39a:	3728      	adds	r7, #40	; 0x28
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}

0800b3a0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b084      	sub	sp, #16
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b3a8:	f3ef 8305 	mrs	r3, IPSR
 800b3ac:	60bb      	str	r3, [r7, #8]
  return(result);
 800b3ae:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d003      	beq.n	800b3bc <osDelay+0x1c>
    stat = osErrorISR;
 800b3b4:	f06f 0305 	mvn.w	r3, #5
 800b3b8:	60fb      	str	r3, [r7, #12]
 800b3ba:	e007      	b.n	800b3cc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d002      	beq.n	800b3cc <osDelay+0x2c>
      vTaskDelay(ticks);
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f002 f93c 	bl	800d644 <vTaskDelay>
    }
  }

  return (stat);
 800b3cc:	68fb      	ldr	r3, [r7, #12]
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	3710      	adds	r7, #16
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}

0800b3d6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b3d6:	b580      	push	{r7, lr}
 800b3d8:	b08a      	sub	sp, #40	; 0x28
 800b3da:	af02      	add	r7, sp, #8
 800b3dc:	60f8      	str	r0, [r7, #12]
 800b3de:	60b9      	str	r1, [r7, #8]
 800b3e0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b3e6:	f3ef 8305 	mrs	r3, IPSR
 800b3ea:	613b      	str	r3, [r7, #16]
  return(result);
 800b3ec:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d175      	bne.n	800b4de <osSemaphoreNew+0x108>
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d072      	beq.n	800b4de <osSemaphoreNew+0x108>
 800b3f8:	68ba      	ldr	r2, [r7, #8]
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	429a      	cmp	r2, r3
 800b3fe:	d86e      	bhi.n	800b4de <osSemaphoreNew+0x108>
    mem = -1;
 800b400:	f04f 33ff 	mov.w	r3, #4294967295
 800b404:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d015      	beq.n	800b438 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	689b      	ldr	r3, [r3, #8]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d006      	beq.n	800b422 <osSemaphoreNew+0x4c>
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	68db      	ldr	r3, [r3, #12]
 800b418:	2b4f      	cmp	r3, #79	; 0x4f
 800b41a:	d902      	bls.n	800b422 <osSemaphoreNew+0x4c>
        mem = 1;
 800b41c:	2301      	movs	r3, #1
 800b41e:	61bb      	str	r3, [r7, #24]
 800b420:	e00c      	b.n	800b43c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	689b      	ldr	r3, [r3, #8]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d108      	bne.n	800b43c <osSemaphoreNew+0x66>
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	68db      	ldr	r3, [r3, #12]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d104      	bne.n	800b43c <osSemaphoreNew+0x66>
          mem = 0;
 800b432:	2300      	movs	r3, #0
 800b434:	61bb      	str	r3, [r7, #24]
 800b436:	e001      	b.n	800b43c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800b438:	2300      	movs	r3, #0
 800b43a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800b43c:	69bb      	ldr	r3, [r7, #24]
 800b43e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b442:	d04c      	beq.n	800b4de <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	2b01      	cmp	r3, #1
 800b448:	d128      	bne.n	800b49c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800b44a:	69bb      	ldr	r3, [r7, #24]
 800b44c:	2b01      	cmp	r3, #1
 800b44e:	d10a      	bne.n	800b466 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	689b      	ldr	r3, [r3, #8]
 800b454:	2203      	movs	r2, #3
 800b456:	9200      	str	r2, [sp, #0]
 800b458:	2200      	movs	r2, #0
 800b45a:	2100      	movs	r1, #0
 800b45c:	2001      	movs	r0, #1
 800b45e:	f000 ff93 	bl	800c388 <xQueueGenericCreateStatic>
 800b462:	61f8      	str	r0, [r7, #28]
 800b464:	e005      	b.n	800b472 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800b466:	2203      	movs	r2, #3
 800b468:	2100      	movs	r1, #0
 800b46a:	2001      	movs	r0, #1
 800b46c:	f001 f804 	bl	800c478 <xQueueGenericCreate>
 800b470:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b472:	69fb      	ldr	r3, [r7, #28]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d022      	beq.n	800b4be <osSemaphoreNew+0xe8>
 800b478:	68bb      	ldr	r3, [r7, #8]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d01f      	beq.n	800b4be <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b47e:	2300      	movs	r3, #0
 800b480:	2200      	movs	r2, #0
 800b482:	2100      	movs	r1, #0
 800b484:	69f8      	ldr	r0, [r7, #28]
 800b486:	f001 f8bf 	bl	800c608 <xQueueGenericSend>
 800b48a:	4603      	mov	r3, r0
 800b48c:	2b01      	cmp	r3, #1
 800b48e:	d016      	beq.n	800b4be <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800b490:	69f8      	ldr	r0, [r7, #28]
 800b492:	f001 fd4b 	bl	800cf2c <vQueueDelete>
            hSemaphore = NULL;
 800b496:	2300      	movs	r3, #0
 800b498:	61fb      	str	r3, [r7, #28]
 800b49a:	e010      	b.n	800b4be <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800b49c:	69bb      	ldr	r3, [r7, #24]
 800b49e:	2b01      	cmp	r3, #1
 800b4a0:	d108      	bne.n	800b4b4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	689b      	ldr	r3, [r3, #8]
 800b4a6:	461a      	mov	r2, r3
 800b4a8:	68b9      	ldr	r1, [r7, #8]
 800b4aa:	68f8      	ldr	r0, [r7, #12]
 800b4ac:	f001 f841 	bl	800c532 <xQueueCreateCountingSemaphoreStatic>
 800b4b0:	61f8      	str	r0, [r7, #28]
 800b4b2:	e004      	b.n	800b4be <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b4b4:	68b9      	ldr	r1, [r7, #8]
 800b4b6:	68f8      	ldr	r0, [r7, #12]
 800b4b8:	f001 f872 	bl	800c5a0 <xQueueCreateCountingSemaphore>
 800b4bc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800b4be:	69fb      	ldr	r3, [r7, #28]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d00c      	beq.n	800b4de <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d003      	beq.n	800b4d2 <osSemaphoreNew+0xfc>
          name = attr->name;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	617b      	str	r3, [r7, #20]
 800b4d0:	e001      	b.n	800b4d6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800b4d6:	6979      	ldr	r1, [r7, #20]
 800b4d8:	69f8      	ldr	r0, [r7, #28]
 800b4da:	f001 fe73 	bl	800d1c4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800b4de:	69fb      	ldr	r3, [r7, #28]
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	3720      	adds	r7, #32
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}

0800b4e8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b086      	sub	sp, #24
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
 800b4f0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b4fa:	693b      	ldr	r3, [r7, #16]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d103      	bne.n	800b508 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800b500:	f06f 0303 	mvn.w	r3, #3
 800b504:	617b      	str	r3, [r7, #20]
 800b506:	e039      	b.n	800b57c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b508:	f3ef 8305 	mrs	r3, IPSR
 800b50c:	60fb      	str	r3, [r7, #12]
  return(result);
 800b50e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b510:	2b00      	cmp	r3, #0
 800b512:	d022      	beq.n	800b55a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d003      	beq.n	800b522 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800b51a:	f06f 0303 	mvn.w	r3, #3
 800b51e:	617b      	str	r3, [r7, #20]
 800b520:	e02c      	b.n	800b57c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800b522:	2300      	movs	r3, #0
 800b524:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b526:	f107 0308 	add.w	r3, r7, #8
 800b52a:	461a      	mov	r2, r3
 800b52c:	2100      	movs	r1, #0
 800b52e:	6938      	ldr	r0, [r7, #16]
 800b530:	f001 fc7c 	bl	800ce2c <xQueueReceiveFromISR>
 800b534:	4603      	mov	r3, r0
 800b536:	2b01      	cmp	r3, #1
 800b538:	d003      	beq.n	800b542 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800b53a:	f06f 0302 	mvn.w	r3, #2
 800b53e:	617b      	str	r3, [r7, #20]
 800b540:	e01c      	b.n	800b57c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800b542:	68bb      	ldr	r3, [r7, #8]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d019      	beq.n	800b57c <osSemaphoreAcquire+0x94>
 800b548:	4b0f      	ldr	r3, [pc, #60]	; (800b588 <osSemaphoreAcquire+0xa0>)
 800b54a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b54e:	601a      	str	r2, [r3, #0]
 800b550:	f3bf 8f4f 	dsb	sy
 800b554:	f3bf 8f6f 	isb	sy
 800b558:	e010      	b.n	800b57c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b55a:	6839      	ldr	r1, [r7, #0]
 800b55c:	6938      	ldr	r0, [r7, #16]
 800b55e:	f001 fb59 	bl	800cc14 <xQueueSemaphoreTake>
 800b562:	4603      	mov	r3, r0
 800b564:	2b01      	cmp	r3, #1
 800b566:	d009      	beq.n	800b57c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d003      	beq.n	800b576 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800b56e:	f06f 0301 	mvn.w	r3, #1
 800b572:	617b      	str	r3, [r7, #20]
 800b574:	e002      	b.n	800b57c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800b576:	f06f 0302 	mvn.w	r3, #2
 800b57a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b57c:	697b      	ldr	r3, [r7, #20]
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3718      	adds	r7, #24
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}
 800b586:	bf00      	nop
 800b588:	e000ed04 	.word	0xe000ed04

0800b58c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b086      	sub	sp, #24
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b598:	2300      	movs	r3, #0
 800b59a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b59c:	693b      	ldr	r3, [r7, #16]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d103      	bne.n	800b5aa <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800b5a2:	f06f 0303 	mvn.w	r3, #3
 800b5a6:	617b      	str	r3, [r7, #20]
 800b5a8:	e02c      	b.n	800b604 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b5aa:	f3ef 8305 	mrs	r3, IPSR
 800b5ae:	60fb      	str	r3, [r7, #12]
  return(result);
 800b5b0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d01a      	beq.n	800b5ec <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b5ba:	f107 0308 	add.w	r3, r7, #8
 800b5be:	4619      	mov	r1, r3
 800b5c0:	6938      	ldr	r0, [r7, #16]
 800b5c2:	f001 f9ba 	bl	800c93a <xQueueGiveFromISR>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	2b01      	cmp	r3, #1
 800b5ca:	d003      	beq.n	800b5d4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800b5cc:	f06f 0302 	mvn.w	r3, #2
 800b5d0:	617b      	str	r3, [r7, #20]
 800b5d2:	e017      	b.n	800b604 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d014      	beq.n	800b604 <osSemaphoreRelease+0x78>
 800b5da:	4b0d      	ldr	r3, [pc, #52]	; (800b610 <osSemaphoreRelease+0x84>)
 800b5dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5e0:	601a      	str	r2, [r3, #0]
 800b5e2:	f3bf 8f4f 	dsb	sy
 800b5e6:	f3bf 8f6f 	isb	sy
 800b5ea:	e00b      	b.n	800b604 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	2100      	movs	r1, #0
 800b5f2:	6938      	ldr	r0, [r7, #16]
 800b5f4:	f001 f808 	bl	800c608 <xQueueGenericSend>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	2b01      	cmp	r3, #1
 800b5fc:	d002      	beq.n	800b604 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800b5fe:	f06f 0302 	mvn.w	r3, #2
 800b602:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800b604:	697b      	ldr	r3, [r7, #20]
}
 800b606:	4618      	mov	r0, r3
 800b608:	3718      	adds	r7, #24
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}
 800b60e:	bf00      	nop
 800b610:	e000ed04 	.word	0xe000ed04

0800b614 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b614:	b580      	push	{r7, lr}
 800b616:	b08a      	sub	sp, #40	; 0x28
 800b618:	af02      	add	r7, sp, #8
 800b61a:	60f8      	str	r0, [r7, #12]
 800b61c:	60b9      	str	r1, [r7, #8]
 800b61e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b620:	2300      	movs	r3, #0
 800b622:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b624:	f3ef 8305 	mrs	r3, IPSR
 800b628:	613b      	str	r3, [r7, #16]
  return(result);
 800b62a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d15f      	bne.n	800b6f0 <osMessageQueueNew+0xdc>
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d05c      	beq.n	800b6f0 <osMessageQueueNew+0xdc>
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d059      	beq.n	800b6f0 <osMessageQueueNew+0xdc>
    mem = -1;
 800b63c:	f04f 33ff 	mov.w	r3, #4294967295
 800b640:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d029      	beq.n	800b69c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	689b      	ldr	r3, [r3, #8]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d012      	beq.n	800b676 <osMessageQueueNew+0x62>
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	68db      	ldr	r3, [r3, #12]
 800b654:	2b4f      	cmp	r3, #79	; 0x4f
 800b656:	d90e      	bls.n	800b676 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d00a      	beq.n	800b676 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	695a      	ldr	r2, [r3, #20]
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	68b9      	ldr	r1, [r7, #8]
 800b668:	fb01 f303 	mul.w	r3, r1, r3
 800b66c:	429a      	cmp	r2, r3
 800b66e:	d302      	bcc.n	800b676 <osMessageQueueNew+0x62>
        mem = 1;
 800b670:	2301      	movs	r3, #1
 800b672:	61bb      	str	r3, [r7, #24]
 800b674:	e014      	b.n	800b6a0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	689b      	ldr	r3, [r3, #8]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d110      	bne.n	800b6a0 <osMessageQueueNew+0x8c>
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	68db      	ldr	r3, [r3, #12]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d10c      	bne.n	800b6a0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d108      	bne.n	800b6a0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	695b      	ldr	r3, [r3, #20]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d104      	bne.n	800b6a0 <osMessageQueueNew+0x8c>
          mem = 0;
 800b696:	2300      	movs	r3, #0
 800b698:	61bb      	str	r3, [r7, #24]
 800b69a:	e001      	b.n	800b6a0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b69c:	2300      	movs	r3, #0
 800b69e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b6a0:	69bb      	ldr	r3, [r7, #24]
 800b6a2:	2b01      	cmp	r3, #1
 800b6a4:	d10b      	bne.n	800b6be <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	691a      	ldr	r2, [r3, #16]
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	689b      	ldr	r3, [r3, #8]
 800b6ae:	2100      	movs	r1, #0
 800b6b0:	9100      	str	r1, [sp, #0]
 800b6b2:	68b9      	ldr	r1, [r7, #8]
 800b6b4:	68f8      	ldr	r0, [r7, #12]
 800b6b6:	f000 fe67 	bl	800c388 <xQueueGenericCreateStatic>
 800b6ba:	61f8      	str	r0, [r7, #28]
 800b6bc:	e008      	b.n	800b6d0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b6be:	69bb      	ldr	r3, [r7, #24]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d105      	bne.n	800b6d0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	68b9      	ldr	r1, [r7, #8]
 800b6c8:	68f8      	ldr	r0, [r7, #12]
 800b6ca:	f000 fed5 	bl	800c478 <xQueueGenericCreate>
 800b6ce:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b6d0:	69fb      	ldr	r3, [r7, #28]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d00c      	beq.n	800b6f0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d003      	beq.n	800b6e4 <osMessageQueueNew+0xd0>
        name = attr->name;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	617b      	str	r3, [r7, #20]
 800b6e2:	e001      	b.n	800b6e8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b6e8:	6979      	ldr	r1, [r7, #20]
 800b6ea:	69f8      	ldr	r0, [r7, #28]
 800b6ec:	f001 fd6a 	bl	800d1c4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b6f0:	69fb      	ldr	r3, [r7, #28]
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	3720      	adds	r7, #32
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}
	...

0800b6fc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b088      	sub	sp, #32
 800b700:	af00      	add	r7, sp, #0
 800b702:	60f8      	str	r0, [r7, #12]
 800b704:	60b9      	str	r1, [r7, #8]
 800b706:	603b      	str	r3, [r7, #0]
 800b708:	4613      	mov	r3, r2
 800b70a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b710:	2300      	movs	r3, #0
 800b712:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b714:	f3ef 8305 	mrs	r3, IPSR
 800b718:	617b      	str	r3, [r7, #20]
  return(result);
 800b71a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d028      	beq.n	800b772 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b720:	69bb      	ldr	r3, [r7, #24]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d005      	beq.n	800b732 <osMessageQueuePut+0x36>
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d002      	beq.n	800b732 <osMessageQueuePut+0x36>
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d003      	beq.n	800b73a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800b732:	f06f 0303 	mvn.w	r3, #3
 800b736:	61fb      	str	r3, [r7, #28]
 800b738:	e038      	b.n	800b7ac <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800b73a:	2300      	movs	r3, #0
 800b73c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b73e:	f107 0210 	add.w	r2, r7, #16
 800b742:	2300      	movs	r3, #0
 800b744:	68b9      	ldr	r1, [r7, #8]
 800b746:	69b8      	ldr	r0, [r7, #24]
 800b748:	f001 f85c 	bl	800c804 <xQueueGenericSendFromISR>
 800b74c:	4603      	mov	r3, r0
 800b74e:	2b01      	cmp	r3, #1
 800b750:	d003      	beq.n	800b75a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800b752:	f06f 0302 	mvn.w	r3, #2
 800b756:	61fb      	str	r3, [r7, #28]
 800b758:	e028      	b.n	800b7ac <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800b75a:	693b      	ldr	r3, [r7, #16]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d025      	beq.n	800b7ac <osMessageQueuePut+0xb0>
 800b760:	4b15      	ldr	r3, [pc, #84]	; (800b7b8 <osMessageQueuePut+0xbc>)
 800b762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b766:	601a      	str	r2, [r3, #0]
 800b768:	f3bf 8f4f 	dsb	sy
 800b76c:	f3bf 8f6f 	isb	sy
 800b770:	e01c      	b.n	800b7ac <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b772:	69bb      	ldr	r3, [r7, #24]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d002      	beq.n	800b77e <osMessageQueuePut+0x82>
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d103      	bne.n	800b786 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800b77e:	f06f 0303 	mvn.w	r3, #3
 800b782:	61fb      	str	r3, [r7, #28]
 800b784:	e012      	b.n	800b7ac <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b786:	2300      	movs	r3, #0
 800b788:	683a      	ldr	r2, [r7, #0]
 800b78a:	68b9      	ldr	r1, [r7, #8]
 800b78c:	69b8      	ldr	r0, [r7, #24]
 800b78e:	f000 ff3b 	bl	800c608 <xQueueGenericSend>
 800b792:	4603      	mov	r3, r0
 800b794:	2b01      	cmp	r3, #1
 800b796:	d009      	beq.n	800b7ac <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d003      	beq.n	800b7a6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800b79e:	f06f 0301 	mvn.w	r3, #1
 800b7a2:	61fb      	str	r3, [r7, #28]
 800b7a4:	e002      	b.n	800b7ac <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800b7a6:	f06f 0302 	mvn.w	r3, #2
 800b7aa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b7ac:	69fb      	ldr	r3, [r7, #28]
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	3720      	adds	r7, #32
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}
 800b7b6:	bf00      	nop
 800b7b8:	e000ed04 	.word	0xe000ed04

0800b7bc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b088      	sub	sp, #32
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	60f8      	str	r0, [r7, #12]
 800b7c4:	60b9      	str	r1, [r7, #8]
 800b7c6:	607a      	str	r2, [r7, #4]
 800b7c8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b7d2:	f3ef 8305 	mrs	r3, IPSR
 800b7d6:	617b      	str	r3, [r7, #20]
  return(result);
 800b7d8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d028      	beq.n	800b830 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b7de:	69bb      	ldr	r3, [r7, #24]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d005      	beq.n	800b7f0 <osMessageQueueGet+0x34>
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d002      	beq.n	800b7f0 <osMessageQueueGet+0x34>
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d003      	beq.n	800b7f8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800b7f0:	f06f 0303 	mvn.w	r3, #3
 800b7f4:	61fb      	str	r3, [r7, #28]
 800b7f6:	e037      	b.n	800b868 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b7fc:	f107 0310 	add.w	r3, r7, #16
 800b800:	461a      	mov	r2, r3
 800b802:	68b9      	ldr	r1, [r7, #8]
 800b804:	69b8      	ldr	r0, [r7, #24]
 800b806:	f001 fb11 	bl	800ce2c <xQueueReceiveFromISR>
 800b80a:	4603      	mov	r3, r0
 800b80c:	2b01      	cmp	r3, #1
 800b80e:	d003      	beq.n	800b818 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800b810:	f06f 0302 	mvn.w	r3, #2
 800b814:	61fb      	str	r3, [r7, #28]
 800b816:	e027      	b.n	800b868 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800b818:	693b      	ldr	r3, [r7, #16]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d024      	beq.n	800b868 <osMessageQueueGet+0xac>
 800b81e:	4b15      	ldr	r3, [pc, #84]	; (800b874 <osMessageQueueGet+0xb8>)
 800b820:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b824:	601a      	str	r2, [r3, #0]
 800b826:	f3bf 8f4f 	dsb	sy
 800b82a:	f3bf 8f6f 	isb	sy
 800b82e:	e01b      	b.n	800b868 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b830:	69bb      	ldr	r3, [r7, #24]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d002      	beq.n	800b83c <osMessageQueueGet+0x80>
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d103      	bne.n	800b844 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800b83c:	f06f 0303 	mvn.w	r3, #3
 800b840:	61fb      	str	r3, [r7, #28]
 800b842:	e011      	b.n	800b868 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b844:	683a      	ldr	r2, [r7, #0]
 800b846:	68b9      	ldr	r1, [r7, #8]
 800b848:	69b8      	ldr	r0, [r7, #24]
 800b84a:	f001 f903 	bl	800ca54 <xQueueReceive>
 800b84e:	4603      	mov	r3, r0
 800b850:	2b01      	cmp	r3, #1
 800b852:	d009      	beq.n	800b868 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d003      	beq.n	800b862 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800b85a:	f06f 0301 	mvn.w	r3, #1
 800b85e:	61fb      	str	r3, [r7, #28]
 800b860:	e002      	b.n	800b868 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800b862:	f06f 0302 	mvn.w	r3, #2
 800b866:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b868:	69fb      	ldr	r3, [r7, #28]
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	3720      	adds	r7, #32
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}
 800b872:	bf00      	nop
 800b874:	e000ed04 	.word	0xe000ed04

0800b878 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b878:	b480      	push	{r7}
 800b87a:	b085      	sub	sp, #20
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	60f8      	str	r0, [r7, #12]
 800b880:	60b9      	str	r1, [r7, #8]
 800b882:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	4a07      	ldr	r2, [pc, #28]	; (800b8a4 <vApplicationGetIdleTaskMemory+0x2c>)
 800b888:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	4a06      	ldr	r2, [pc, #24]	; (800b8a8 <vApplicationGetIdleTaskMemory+0x30>)
 800b88e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2280      	movs	r2, #128	; 0x80
 800b894:	601a      	str	r2, [r3, #0]
}
 800b896:	bf00      	nop
 800b898:	3714      	adds	r7, #20
 800b89a:	46bd      	mov	sp, r7
 800b89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a0:	4770      	bx	lr
 800b8a2:	bf00      	nop
 800b8a4:	24002108 	.word	0x24002108
 800b8a8:	240021b0 	.word	0x240021b0

0800b8ac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b8ac:	b480      	push	{r7}
 800b8ae:	b085      	sub	sp, #20
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	60f8      	str	r0, [r7, #12]
 800b8b4:	60b9      	str	r1, [r7, #8]
 800b8b6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	4a07      	ldr	r2, [pc, #28]	; (800b8d8 <vApplicationGetTimerTaskMemory+0x2c>)
 800b8bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	4a06      	ldr	r2, [pc, #24]	; (800b8dc <vApplicationGetTimerTaskMemory+0x30>)
 800b8c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b8ca:	601a      	str	r2, [r3, #0]
}
 800b8cc:	bf00      	nop
 800b8ce:	3714      	adds	r7, #20
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d6:	4770      	bx	lr
 800b8d8:	240023b0 	.word	0x240023b0
 800b8dc:	24002458 	.word	0x24002458

0800b8e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b08a      	sub	sp, #40	; 0x28
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b8ec:	f001 ff4e 	bl	800d78c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b8f0:	4b5b      	ldr	r3, [pc, #364]	; (800ba60 <pvPortMalloc+0x180>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d101      	bne.n	800b8fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b8f8:	f000 f920 	bl	800bb3c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b8fc:	4b59      	ldr	r3, [pc, #356]	; (800ba64 <pvPortMalloc+0x184>)
 800b8fe:	681a      	ldr	r2, [r3, #0]
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	4013      	ands	r3, r2
 800b904:	2b00      	cmp	r3, #0
 800b906:	f040 8093 	bne.w	800ba30 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d01d      	beq.n	800b94c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b910:	2208      	movs	r2, #8
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	4413      	add	r3, r2
 800b916:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f003 0307 	and.w	r3, r3, #7
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d014      	beq.n	800b94c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	f023 0307 	bic.w	r3, r3, #7
 800b928:	3308      	adds	r3, #8
 800b92a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f003 0307 	and.w	r3, r3, #7
 800b932:	2b00      	cmp	r3, #0
 800b934:	d00a      	beq.n	800b94c <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b93a:	f383 8811 	msr	BASEPRI, r3
 800b93e:	f3bf 8f6f 	isb	sy
 800b942:	f3bf 8f4f 	dsb	sy
 800b946:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b948:	bf00      	nop
 800b94a:	e7fe      	b.n	800b94a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d06e      	beq.n	800ba30 <pvPortMalloc+0x150>
 800b952:	4b45      	ldr	r3, [pc, #276]	; (800ba68 <pvPortMalloc+0x188>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	687a      	ldr	r2, [r7, #4]
 800b958:	429a      	cmp	r2, r3
 800b95a:	d869      	bhi.n	800ba30 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b95c:	4b43      	ldr	r3, [pc, #268]	; (800ba6c <pvPortMalloc+0x18c>)
 800b95e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b960:	4b42      	ldr	r3, [pc, #264]	; (800ba6c <pvPortMalloc+0x18c>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b966:	e004      	b.n	800b972 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b96a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b974:	685b      	ldr	r3, [r3, #4]
 800b976:	687a      	ldr	r2, [r7, #4]
 800b978:	429a      	cmp	r2, r3
 800b97a:	d903      	bls.n	800b984 <pvPortMalloc+0xa4>
 800b97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d1f1      	bne.n	800b968 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b984:	4b36      	ldr	r3, [pc, #216]	; (800ba60 <pvPortMalloc+0x180>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b98a:	429a      	cmp	r2, r3
 800b98c:	d050      	beq.n	800ba30 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b98e:	6a3b      	ldr	r3, [r7, #32]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	2208      	movs	r2, #8
 800b994:	4413      	add	r3, r2
 800b996:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b99a:	681a      	ldr	r2, [r3, #0]
 800b99c:	6a3b      	ldr	r3, [r7, #32]
 800b99e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a2:	685a      	ldr	r2, [r3, #4]
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	1ad2      	subs	r2, r2, r3
 800b9a8:	2308      	movs	r3, #8
 800b9aa:	005b      	lsls	r3, r3, #1
 800b9ac:	429a      	cmp	r2, r3
 800b9ae:	d91f      	bls.n	800b9f0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b9b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	4413      	add	r3, r2
 800b9b6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b9b8:	69bb      	ldr	r3, [r7, #24]
 800b9ba:	f003 0307 	and.w	r3, r3, #7
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d00a      	beq.n	800b9d8 <pvPortMalloc+0xf8>
	__asm volatile
 800b9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c6:	f383 8811 	msr	BASEPRI, r3
 800b9ca:	f3bf 8f6f 	isb	sy
 800b9ce:	f3bf 8f4f 	dsb	sy
 800b9d2:	613b      	str	r3, [r7, #16]
}
 800b9d4:	bf00      	nop
 800b9d6:	e7fe      	b.n	800b9d6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9da:	685a      	ldr	r2, [r3, #4]
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	1ad2      	subs	r2, r2, r3
 800b9e0:	69bb      	ldr	r3, [r7, #24]
 800b9e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9e6:	687a      	ldr	r2, [r7, #4]
 800b9e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b9ea:	69b8      	ldr	r0, [r7, #24]
 800b9ec:	f000 f908 	bl	800bc00 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b9f0:	4b1d      	ldr	r3, [pc, #116]	; (800ba68 <pvPortMalloc+0x188>)
 800b9f2:	681a      	ldr	r2, [r3, #0]
 800b9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9f6:	685b      	ldr	r3, [r3, #4]
 800b9f8:	1ad3      	subs	r3, r2, r3
 800b9fa:	4a1b      	ldr	r2, [pc, #108]	; (800ba68 <pvPortMalloc+0x188>)
 800b9fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b9fe:	4b1a      	ldr	r3, [pc, #104]	; (800ba68 <pvPortMalloc+0x188>)
 800ba00:	681a      	ldr	r2, [r3, #0]
 800ba02:	4b1b      	ldr	r3, [pc, #108]	; (800ba70 <pvPortMalloc+0x190>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	429a      	cmp	r2, r3
 800ba08:	d203      	bcs.n	800ba12 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ba0a:	4b17      	ldr	r3, [pc, #92]	; (800ba68 <pvPortMalloc+0x188>)
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	4a18      	ldr	r2, [pc, #96]	; (800ba70 <pvPortMalloc+0x190>)
 800ba10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ba12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba14:	685a      	ldr	r2, [r3, #4]
 800ba16:	4b13      	ldr	r3, [pc, #76]	; (800ba64 <pvPortMalloc+0x184>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	431a      	orrs	r2, r3
 800ba1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ba20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba22:	2200      	movs	r2, #0
 800ba24:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ba26:	4b13      	ldr	r3, [pc, #76]	; (800ba74 <pvPortMalloc+0x194>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	3301      	adds	r3, #1
 800ba2c:	4a11      	ldr	r2, [pc, #68]	; (800ba74 <pvPortMalloc+0x194>)
 800ba2e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ba30:	f001 feba 	bl	800d7a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba34:	69fb      	ldr	r3, [r7, #28]
 800ba36:	f003 0307 	and.w	r3, r3, #7
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d00a      	beq.n	800ba54 <pvPortMalloc+0x174>
	__asm volatile
 800ba3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba42:	f383 8811 	msr	BASEPRI, r3
 800ba46:	f3bf 8f6f 	isb	sy
 800ba4a:	f3bf 8f4f 	dsb	sy
 800ba4e:	60fb      	str	r3, [r7, #12]
}
 800ba50:	bf00      	nop
 800ba52:	e7fe      	b.n	800ba52 <pvPortMalloc+0x172>
	return pvReturn;
 800ba54:	69fb      	ldr	r3, [r7, #28]
}
 800ba56:	4618      	mov	r0, r3
 800ba58:	3728      	adds	r7, #40	; 0x28
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bd80      	pop	{r7, pc}
 800ba5e:	bf00      	nop
 800ba60:	2400a860 	.word	0x2400a860
 800ba64:	2400a874 	.word	0x2400a874
 800ba68:	2400a864 	.word	0x2400a864
 800ba6c:	2400a858 	.word	0x2400a858
 800ba70:	2400a868 	.word	0x2400a868
 800ba74:	2400a86c 	.word	0x2400a86c

0800ba78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b086      	sub	sp, #24
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d04d      	beq.n	800bb26 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ba8a:	2308      	movs	r3, #8
 800ba8c:	425b      	negs	r3, r3
 800ba8e:	697a      	ldr	r2, [r7, #20]
 800ba90:	4413      	add	r3, r2
 800ba92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ba94:	697b      	ldr	r3, [r7, #20]
 800ba96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ba98:	693b      	ldr	r3, [r7, #16]
 800ba9a:	685a      	ldr	r2, [r3, #4]
 800ba9c:	4b24      	ldr	r3, [pc, #144]	; (800bb30 <vPortFree+0xb8>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	4013      	ands	r3, r2
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d10a      	bne.n	800babc <vPortFree+0x44>
	__asm volatile
 800baa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baaa:	f383 8811 	msr	BASEPRI, r3
 800baae:	f3bf 8f6f 	isb	sy
 800bab2:	f3bf 8f4f 	dsb	sy
 800bab6:	60fb      	str	r3, [r7, #12]
}
 800bab8:	bf00      	nop
 800baba:	e7fe      	b.n	800baba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800babc:	693b      	ldr	r3, [r7, #16]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d00a      	beq.n	800bada <vPortFree+0x62>
	__asm volatile
 800bac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bac8:	f383 8811 	msr	BASEPRI, r3
 800bacc:	f3bf 8f6f 	isb	sy
 800bad0:	f3bf 8f4f 	dsb	sy
 800bad4:	60bb      	str	r3, [r7, #8]
}
 800bad6:	bf00      	nop
 800bad8:	e7fe      	b.n	800bad8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bada:	693b      	ldr	r3, [r7, #16]
 800badc:	685a      	ldr	r2, [r3, #4]
 800bade:	4b14      	ldr	r3, [pc, #80]	; (800bb30 <vPortFree+0xb8>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	4013      	ands	r3, r2
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d01e      	beq.n	800bb26 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bae8:	693b      	ldr	r3, [r7, #16]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d11a      	bne.n	800bb26 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800baf0:	693b      	ldr	r3, [r7, #16]
 800baf2:	685a      	ldr	r2, [r3, #4]
 800baf4:	4b0e      	ldr	r3, [pc, #56]	; (800bb30 <vPortFree+0xb8>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	43db      	mvns	r3, r3
 800bafa:	401a      	ands	r2, r3
 800bafc:	693b      	ldr	r3, [r7, #16]
 800bafe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bb00:	f001 fe44 	bl	800d78c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bb04:	693b      	ldr	r3, [r7, #16]
 800bb06:	685a      	ldr	r2, [r3, #4]
 800bb08:	4b0a      	ldr	r3, [pc, #40]	; (800bb34 <vPortFree+0xbc>)
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	4413      	add	r3, r2
 800bb0e:	4a09      	ldr	r2, [pc, #36]	; (800bb34 <vPortFree+0xbc>)
 800bb10:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bb12:	6938      	ldr	r0, [r7, #16]
 800bb14:	f000 f874 	bl	800bc00 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bb18:	4b07      	ldr	r3, [pc, #28]	; (800bb38 <vPortFree+0xc0>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	3301      	adds	r3, #1
 800bb1e:	4a06      	ldr	r2, [pc, #24]	; (800bb38 <vPortFree+0xc0>)
 800bb20:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bb22:	f001 fe41 	bl	800d7a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bb26:	bf00      	nop
 800bb28:	3718      	adds	r7, #24
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	bd80      	pop	{r7, pc}
 800bb2e:	bf00      	nop
 800bb30:	2400a874 	.word	0x2400a874
 800bb34:	2400a864 	.word	0x2400a864
 800bb38:	2400a870 	.word	0x2400a870

0800bb3c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bb3c:	b480      	push	{r7}
 800bb3e:	b085      	sub	sp, #20
 800bb40:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bb42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bb46:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bb48:	4b27      	ldr	r3, [pc, #156]	; (800bbe8 <prvHeapInit+0xac>)
 800bb4a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	f003 0307 	and.w	r3, r3, #7
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d00c      	beq.n	800bb70 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	3307      	adds	r3, #7
 800bb5a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	f023 0307 	bic.w	r3, r3, #7
 800bb62:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bb64:	68ba      	ldr	r2, [r7, #8]
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	1ad3      	subs	r3, r2, r3
 800bb6a:	4a1f      	ldr	r2, [pc, #124]	; (800bbe8 <prvHeapInit+0xac>)
 800bb6c:	4413      	add	r3, r2
 800bb6e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bb74:	4a1d      	ldr	r2, [pc, #116]	; (800bbec <prvHeapInit+0xb0>)
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bb7a:	4b1c      	ldr	r3, [pc, #112]	; (800bbec <prvHeapInit+0xb0>)
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	68ba      	ldr	r2, [r7, #8]
 800bb84:	4413      	add	r3, r2
 800bb86:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bb88:	2208      	movs	r2, #8
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	1a9b      	subs	r3, r3, r2
 800bb8e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	f023 0307 	bic.w	r3, r3, #7
 800bb96:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	4a15      	ldr	r2, [pc, #84]	; (800bbf0 <prvHeapInit+0xb4>)
 800bb9c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bb9e:	4b14      	ldr	r3, [pc, #80]	; (800bbf0 <prvHeapInit+0xb4>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	2200      	movs	r2, #0
 800bba4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bba6:	4b12      	ldr	r3, [pc, #72]	; (800bbf0 <prvHeapInit+0xb4>)
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	2200      	movs	r2, #0
 800bbac:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	68fa      	ldr	r2, [r7, #12]
 800bbb6:	1ad2      	subs	r2, r2, r3
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bbbc:	4b0c      	ldr	r3, [pc, #48]	; (800bbf0 <prvHeapInit+0xb4>)
 800bbbe:	681a      	ldr	r2, [r3, #0]
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	685b      	ldr	r3, [r3, #4]
 800bbc8:	4a0a      	ldr	r2, [pc, #40]	; (800bbf4 <prvHeapInit+0xb8>)
 800bbca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	685b      	ldr	r3, [r3, #4]
 800bbd0:	4a09      	ldr	r2, [pc, #36]	; (800bbf8 <prvHeapInit+0xbc>)
 800bbd2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bbd4:	4b09      	ldr	r3, [pc, #36]	; (800bbfc <prvHeapInit+0xc0>)
 800bbd6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bbda:	601a      	str	r2, [r3, #0]
}
 800bbdc:	bf00      	nop
 800bbde:	3714      	adds	r7, #20
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe6:	4770      	bx	lr
 800bbe8:	24002858 	.word	0x24002858
 800bbec:	2400a858 	.word	0x2400a858
 800bbf0:	2400a860 	.word	0x2400a860
 800bbf4:	2400a868 	.word	0x2400a868
 800bbf8:	2400a864 	.word	0x2400a864
 800bbfc:	2400a874 	.word	0x2400a874

0800bc00 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bc00:	b480      	push	{r7}
 800bc02:	b085      	sub	sp, #20
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bc08:	4b28      	ldr	r3, [pc, #160]	; (800bcac <prvInsertBlockIntoFreeList+0xac>)
 800bc0a:	60fb      	str	r3, [r7, #12]
 800bc0c:	e002      	b.n	800bc14 <prvInsertBlockIntoFreeList+0x14>
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	60fb      	str	r3, [r7, #12]
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	687a      	ldr	r2, [r7, #4]
 800bc1a:	429a      	cmp	r2, r3
 800bc1c:	d8f7      	bhi.n	800bc0e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	685b      	ldr	r3, [r3, #4]
 800bc26:	68ba      	ldr	r2, [r7, #8]
 800bc28:	4413      	add	r3, r2
 800bc2a:	687a      	ldr	r2, [r7, #4]
 800bc2c:	429a      	cmp	r2, r3
 800bc2e:	d108      	bne.n	800bc42 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	685a      	ldr	r2, [r3, #4]
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	685b      	ldr	r3, [r3, #4]
 800bc38:	441a      	add	r2, r3
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	685b      	ldr	r3, [r3, #4]
 800bc4a:	68ba      	ldr	r2, [r7, #8]
 800bc4c:	441a      	add	r2, r3
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	429a      	cmp	r2, r3
 800bc54:	d118      	bne.n	800bc88 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	681a      	ldr	r2, [r3, #0]
 800bc5a:	4b15      	ldr	r3, [pc, #84]	; (800bcb0 <prvInsertBlockIntoFreeList+0xb0>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	429a      	cmp	r2, r3
 800bc60:	d00d      	beq.n	800bc7e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	685a      	ldr	r2, [r3, #4]
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	685b      	ldr	r3, [r3, #4]
 800bc6c:	441a      	add	r2, r3
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	681a      	ldr	r2, [r3, #0]
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	601a      	str	r2, [r3, #0]
 800bc7c:	e008      	b.n	800bc90 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bc7e:	4b0c      	ldr	r3, [pc, #48]	; (800bcb0 <prvInsertBlockIntoFreeList+0xb0>)
 800bc80:	681a      	ldr	r2, [r3, #0]
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	601a      	str	r2, [r3, #0]
 800bc86:	e003      	b.n	800bc90 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	681a      	ldr	r2, [r3, #0]
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bc90:	68fa      	ldr	r2, [r7, #12]
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	429a      	cmp	r2, r3
 800bc96:	d002      	beq.n	800bc9e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	687a      	ldr	r2, [r7, #4]
 800bc9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bc9e:	bf00      	nop
 800bca0:	3714      	adds	r7, #20
 800bca2:	46bd      	mov	sp, r7
 800bca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca8:	4770      	bx	lr
 800bcaa:	bf00      	nop
 800bcac:	2400a858 	.word	0x2400a858
 800bcb0:	2400a860 	.word	0x2400a860

0800bcb4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b083      	sub	sp, #12
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f103 0208 	add.w	r2, r3, #8
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	f04f 32ff 	mov.w	r2, #4294967295
 800bccc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	f103 0208 	add.w	r2, r3, #8
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f103 0208 	add.w	r2, r3, #8
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2200      	movs	r2, #0
 800bce6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bce8:	bf00      	nop
 800bcea:	370c      	adds	r7, #12
 800bcec:	46bd      	mov	sp, r7
 800bcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf2:	4770      	bx	lr

0800bcf4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b083      	sub	sp, #12
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2200      	movs	r2, #0
 800bd00:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bd02:	bf00      	nop
 800bd04:	370c      	adds	r7, #12
 800bd06:	46bd      	mov	sp, r7
 800bd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0c:	4770      	bx	lr

0800bd0e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bd0e:	b480      	push	{r7}
 800bd10:	b085      	sub	sp, #20
 800bd12:	af00      	add	r7, sp, #0
 800bd14:	6078      	str	r0, [r7, #4]
 800bd16:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	685b      	ldr	r3, [r3, #4]
 800bd1c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bd1e:	683b      	ldr	r3, [r7, #0]
 800bd20:	68fa      	ldr	r2, [r7, #12]
 800bd22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	689a      	ldr	r2, [r3, #8]
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	689b      	ldr	r3, [r3, #8]
 800bd30:	683a      	ldr	r2, [r7, #0]
 800bd32:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	683a      	ldr	r2, [r7, #0]
 800bd38:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	687a      	ldr	r2, [r7, #4]
 800bd3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	1c5a      	adds	r2, r3, #1
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	601a      	str	r2, [r3, #0]
}
 800bd4a:	bf00      	nop
 800bd4c:	3714      	adds	r7, #20
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd54:	4770      	bx	lr

0800bd56 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bd56:	b480      	push	{r7}
 800bd58:	b085      	sub	sp, #20
 800bd5a:	af00      	add	r7, sp, #0
 800bd5c:	6078      	str	r0, [r7, #4]
 800bd5e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd6c:	d103      	bne.n	800bd76 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	691b      	ldr	r3, [r3, #16]
 800bd72:	60fb      	str	r3, [r7, #12]
 800bd74:	e00c      	b.n	800bd90 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	3308      	adds	r3, #8
 800bd7a:	60fb      	str	r3, [r7, #12]
 800bd7c:	e002      	b.n	800bd84 <vListInsert+0x2e>
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	685b      	ldr	r3, [r3, #4]
 800bd82:	60fb      	str	r3, [r7, #12]
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	685b      	ldr	r3, [r3, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	68ba      	ldr	r2, [r7, #8]
 800bd8c:	429a      	cmp	r2, r3
 800bd8e:	d2f6      	bcs.n	800bd7e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	685a      	ldr	r2, [r3, #4]
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	685b      	ldr	r3, [r3, #4]
 800bd9c:	683a      	ldr	r2, [r7, #0]
 800bd9e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	68fa      	ldr	r2, [r7, #12]
 800bda4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	683a      	ldr	r2, [r7, #0]
 800bdaa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	687a      	ldr	r2, [r7, #4]
 800bdb0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	1c5a      	adds	r2, r3, #1
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	601a      	str	r2, [r3, #0]
}
 800bdbc:	bf00      	nop
 800bdbe:	3714      	adds	r7, #20
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc6:	4770      	bx	lr

0800bdc8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bdc8:	b480      	push	{r7}
 800bdca:	b085      	sub	sp, #20
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	691b      	ldr	r3, [r3, #16]
 800bdd4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	685b      	ldr	r3, [r3, #4]
 800bdda:	687a      	ldr	r2, [r7, #4]
 800bddc:	6892      	ldr	r2, [r2, #8]
 800bdde:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	689b      	ldr	r3, [r3, #8]
 800bde4:	687a      	ldr	r2, [r7, #4]
 800bde6:	6852      	ldr	r2, [r2, #4]
 800bde8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	685b      	ldr	r3, [r3, #4]
 800bdee:	687a      	ldr	r2, [r7, #4]
 800bdf0:	429a      	cmp	r2, r3
 800bdf2:	d103      	bne.n	800bdfc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	689a      	ldr	r2, [r3, #8]
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2200      	movs	r2, #0
 800be00:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	1e5a      	subs	r2, r3, #1
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	681b      	ldr	r3, [r3, #0]
}
 800be10:	4618      	mov	r0, r3
 800be12:	3714      	adds	r7, #20
 800be14:	46bd      	mov	sp, r7
 800be16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1a:	4770      	bx	lr

0800be1c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800be1c:	b480      	push	{r7}
 800be1e:	b085      	sub	sp, #20
 800be20:	af00      	add	r7, sp, #0
 800be22:	60f8      	str	r0, [r7, #12]
 800be24:	60b9      	str	r1, [r7, #8]
 800be26:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	3b04      	subs	r3, #4
 800be2c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800be34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	3b04      	subs	r3, #4
 800be3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800be3c:	68bb      	ldr	r3, [r7, #8]
 800be3e:	f023 0201 	bic.w	r2, r3, #1
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	3b04      	subs	r3, #4
 800be4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800be4c:	4a0c      	ldr	r2, [pc, #48]	; (800be80 <pxPortInitialiseStack+0x64>)
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	3b14      	subs	r3, #20
 800be56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800be58:	687a      	ldr	r2, [r7, #4]
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	3b04      	subs	r3, #4
 800be62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	f06f 0202 	mvn.w	r2, #2
 800be6a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	3b20      	subs	r3, #32
 800be70:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800be72:	68fb      	ldr	r3, [r7, #12]
}
 800be74:	4618      	mov	r0, r3
 800be76:	3714      	adds	r7, #20
 800be78:	46bd      	mov	sp, r7
 800be7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7e:	4770      	bx	lr
 800be80:	0800be85 	.word	0x0800be85

0800be84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800be84:	b480      	push	{r7}
 800be86:	b085      	sub	sp, #20
 800be88:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800be8a:	2300      	movs	r3, #0
 800be8c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800be8e:	4b12      	ldr	r3, [pc, #72]	; (800bed8 <prvTaskExitError+0x54>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be96:	d00a      	beq.n	800beae <prvTaskExitError+0x2a>
	__asm volatile
 800be98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be9c:	f383 8811 	msr	BASEPRI, r3
 800bea0:	f3bf 8f6f 	isb	sy
 800bea4:	f3bf 8f4f 	dsb	sy
 800bea8:	60fb      	str	r3, [r7, #12]
}
 800beaa:	bf00      	nop
 800beac:	e7fe      	b.n	800beac <prvTaskExitError+0x28>
	__asm volatile
 800beae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beb2:	f383 8811 	msr	BASEPRI, r3
 800beb6:	f3bf 8f6f 	isb	sy
 800beba:	f3bf 8f4f 	dsb	sy
 800bebe:	60bb      	str	r3, [r7, #8]
}
 800bec0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bec2:	bf00      	nop
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d0fc      	beq.n	800bec4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800beca:	bf00      	nop
 800becc:	bf00      	nop
 800bece:	3714      	adds	r7, #20
 800bed0:	46bd      	mov	sp, r7
 800bed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed6:	4770      	bx	lr
 800bed8:	24000014 	.word	0x24000014
 800bedc:	00000000 	.word	0x00000000

0800bee0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bee0:	4b07      	ldr	r3, [pc, #28]	; (800bf00 <pxCurrentTCBConst2>)
 800bee2:	6819      	ldr	r1, [r3, #0]
 800bee4:	6808      	ldr	r0, [r1, #0]
 800bee6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beea:	f380 8809 	msr	PSP, r0
 800beee:	f3bf 8f6f 	isb	sy
 800bef2:	f04f 0000 	mov.w	r0, #0
 800bef6:	f380 8811 	msr	BASEPRI, r0
 800befa:	4770      	bx	lr
 800befc:	f3af 8000 	nop.w

0800bf00 <pxCurrentTCBConst2>:
 800bf00:	2400a8c0 	.word	0x2400a8c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bf04:	bf00      	nop
 800bf06:	bf00      	nop

0800bf08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bf08:	4808      	ldr	r0, [pc, #32]	; (800bf2c <prvPortStartFirstTask+0x24>)
 800bf0a:	6800      	ldr	r0, [r0, #0]
 800bf0c:	6800      	ldr	r0, [r0, #0]
 800bf0e:	f380 8808 	msr	MSP, r0
 800bf12:	f04f 0000 	mov.w	r0, #0
 800bf16:	f380 8814 	msr	CONTROL, r0
 800bf1a:	b662      	cpsie	i
 800bf1c:	b661      	cpsie	f
 800bf1e:	f3bf 8f4f 	dsb	sy
 800bf22:	f3bf 8f6f 	isb	sy
 800bf26:	df00      	svc	0
 800bf28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bf2a:	bf00      	nop
 800bf2c:	e000ed08 	.word	0xe000ed08

0800bf30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b086      	sub	sp, #24
 800bf34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bf36:	4b46      	ldr	r3, [pc, #280]	; (800c050 <xPortStartScheduler+0x120>)
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	4a46      	ldr	r2, [pc, #280]	; (800c054 <xPortStartScheduler+0x124>)
 800bf3c:	4293      	cmp	r3, r2
 800bf3e:	d10a      	bne.n	800bf56 <xPortStartScheduler+0x26>
	__asm volatile
 800bf40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf44:	f383 8811 	msr	BASEPRI, r3
 800bf48:	f3bf 8f6f 	isb	sy
 800bf4c:	f3bf 8f4f 	dsb	sy
 800bf50:	613b      	str	r3, [r7, #16]
}
 800bf52:	bf00      	nop
 800bf54:	e7fe      	b.n	800bf54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bf56:	4b3e      	ldr	r3, [pc, #248]	; (800c050 <xPortStartScheduler+0x120>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	4a3f      	ldr	r2, [pc, #252]	; (800c058 <xPortStartScheduler+0x128>)
 800bf5c:	4293      	cmp	r3, r2
 800bf5e:	d10a      	bne.n	800bf76 <xPortStartScheduler+0x46>
	__asm volatile
 800bf60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf64:	f383 8811 	msr	BASEPRI, r3
 800bf68:	f3bf 8f6f 	isb	sy
 800bf6c:	f3bf 8f4f 	dsb	sy
 800bf70:	60fb      	str	r3, [r7, #12]
}
 800bf72:	bf00      	nop
 800bf74:	e7fe      	b.n	800bf74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bf76:	4b39      	ldr	r3, [pc, #228]	; (800c05c <xPortStartScheduler+0x12c>)
 800bf78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	781b      	ldrb	r3, [r3, #0]
 800bf7e:	b2db      	uxtb	r3, r3
 800bf80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bf82:	697b      	ldr	r3, [r7, #20]
 800bf84:	22ff      	movs	r2, #255	; 0xff
 800bf86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bf88:	697b      	ldr	r3, [r7, #20]
 800bf8a:	781b      	ldrb	r3, [r3, #0]
 800bf8c:	b2db      	uxtb	r3, r3
 800bf8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bf90:	78fb      	ldrb	r3, [r7, #3]
 800bf92:	b2db      	uxtb	r3, r3
 800bf94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bf98:	b2da      	uxtb	r2, r3
 800bf9a:	4b31      	ldr	r3, [pc, #196]	; (800c060 <xPortStartScheduler+0x130>)
 800bf9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bf9e:	4b31      	ldr	r3, [pc, #196]	; (800c064 <xPortStartScheduler+0x134>)
 800bfa0:	2207      	movs	r2, #7
 800bfa2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bfa4:	e009      	b.n	800bfba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bfa6:	4b2f      	ldr	r3, [pc, #188]	; (800c064 <xPortStartScheduler+0x134>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	3b01      	subs	r3, #1
 800bfac:	4a2d      	ldr	r2, [pc, #180]	; (800c064 <xPortStartScheduler+0x134>)
 800bfae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bfb0:	78fb      	ldrb	r3, [r7, #3]
 800bfb2:	b2db      	uxtb	r3, r3
 800bfb4:	005b      	lsls	r3, r3, #1
 800bfb6:	b2db      	uxtb	r3, r3
 800bfb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bfba:	78fb      	ldrb	r3, [r7, #3]
 800bfbc:	b2db      	uxtb	r3, r3
 800bfbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfc2:	2b80      	cmp	r3, #128	; 0x80
 800bfc4:	d0ef      	beq.n	800bfa6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bfc6:	4b27      	ldr	r3, [pc, #156]	; (800c064 <xPortStartScheduler+0x134>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	f1c3 0307 	rsb	r3, r3, #7
 800bfce:	2b04      	cmp	r3, #4
 800bfd0:	d00a      	beq.n	800bfe8 <xPortStartScheduler+0xb8>
	__asm volatile
 800bfd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfd6:	f383 8811 	msr	BASEPRI, r3
 800bfda:	f3bf 8f6f 	isb	sy
 800bfde:	f3bf 8f4f 	dsb	sy
 800bfe2:	60bb      	str	r3, [r7, #8]
}
 800bfe4:	bf00      	nop
 800bfe6:	e7fe      	b.n	800bfe6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bfe8:	4b1e      	ldr	r3, [pc, #120]	; (800c064 <xPortStartScheduler+0x134>)
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	021b      	lsls	r3, r3, #8
 800bfee:	4a1d      	ldr	r2, [pc, #116]	; (800c064 <xPortStartScheduler+0x134>)
 800bff0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bff2:	4b1c      	ldr	r3, [pc, #112]	; (800c064 <xPortStartScheduler+0x134>)
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bffa:	4a1a      	ldr	r2, [pc, #104]	; (800c064 <xPortStartScheduler+0x134>)
 800bffc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	b2da      	uxtb	r2, r3
 800c002:	697b      	ldr	r3, [r7, #20]
 800c004:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c006:	4b18      	ldr	r3, [pc, #96]	; (800c068 <xPortStartScheduler+0x138>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	4a17      	ldr	r2, [pc, #92]	; (800c068 <xPortStartScheduler+0x138>)
 800c00c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c010:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c012:	4b15      	ldr	r3, [pc, #84]	; (800c068 <xPortStartScheduler+0x138>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	4a14      	ldr	r2, [pc, #80]	; (800c068 <xPortStartScheduler+0x138>)
 800c018:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c01c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c01e:	f000 f8dd 	bl	800c1dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c022:	4b12      	ldr	r3, [pc, #72]	; (800c06c <xPortStartScheduler+0x13c>)
 800c024:	2200      	movs	r2, #0
 800c026:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c028:	f000 f8fc 	bl	800c224 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c02c:	4b10      	ldr	r3, [pc, #64]	; (800c070 <xPortStartScheduler+0x140>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	4a0f      	ldr	r2, [pc, #60]	; (800c070 <xPortStartScheduler+0x140>)
 800c032:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c036:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c038:	f7ff ff66 	bl	800bf08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c03c:	f001 fd1c 	bl	800da78 <vTaskSwitchContext>
	prvTaskExitError();
 800c040:	f7ff ff20 	bl	800be84 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c044:	2300      	movs	r3, #0
}
 800c046:	4618      	mov	r0, r3
 800c048:	3718      	adds	r7, #24
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}
 800c04e:	bf00      	nop
 800c050:	e000ed00 	.word	0xe000ed00
 800c054:	410fc271 	.word	0x410fc271
 800c058:	410fc270 	.word	0x410fc270
 800c05c:	e000e400 	.word	0xe000e400
 800c060:	2400a878 	.word	0x2400a878
 800c064:	2400a87c 	.word	0x2400a87c
 800c068:	e000ed20 	.word	0xe000ed20
 800c06c:	24000014 	.word	0x24000014
 800c070:	e000ef34 	.word	0xe000ef34

0800c074 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c074:	b480      	push	{r7}
 800c076:	b083      	sub	sp, #12
 800c078:	af00      	add	r7, sp, #0
	__asm volatile
 800c07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c07e:	f383 8811 	msr	BASEPRI, r3
 800c082:	f3bf 8f6f 	isb	sy
 800c086:	f3bf 8f4f 	dsb	sy
 800c08a:	607b      	str	r3, [r7, #4]
}
 800c08c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c08e:	4b0f      	ldr	r3, [pc, #60]	; (800c0cc <vPortEnterCritical+0x58>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	3301      	adds	r3, #1
 800c094:	4a0d      	ldr	r2, [pc, #52]	; (800c0cc <vPortEnterCritical+0x58>)
 800c096:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c098:	4b0c      	ldr	r3, [pc, #48]	; (800c0cc <vPortEnterCritical+0x58>)
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	2b01      	cmp	r3, #1
 800c09e:	d10f      	bne.n	800c0c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c0a0:	4b0b      	ldr	r3, [pc, #44]	; (800c0d0 <vPortEnterCritical+0x5c>)
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	b2db      	uxtb	r3, r3
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d00a      	beq.n	800c0c0 <vPortEnterCritical+0x4c>
	__asm volatile
 800c0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ae:	f383 8811 	msr	BASEPRI, r3
 800c0b2:	f3bf 8f6f 	isb	sy
 800c0b6:	f3bf 8f4f 	dsb	sy
 800c0ba:	603b      	str	r3, [r7, #0]
}
 800c0bc:	bf00      	nop
 800c0be:	e7fe      	b.n	800c0be <vPortEnterCritical+0x4a>
	}
}
 800c0c0:	bf00      	nop
 800c0c2:	370c      	adds	r7, #12
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ca:	4770      	bx	lr
 800c0cc:	24000014 	.word	0x24000014
 800c0d0:	e000ed04 	.word	0xe000ed04

0800c0d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c0d4:	b480      	push	{r7}
 800c0d6:	b083      	sub	sp, #12
 800c0d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c0da:	4b12      	ldr	r3, [pc, #72]	; (800c124 <vPortExitCritical+0x50>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d10a      	bne.n	800c0f8 <vPortExitCritical+0x24>
	__asm volatile
 800c0e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0e6:	f383 8811 	msr	BASEPRI, r3
 800c0ea:	f3bf 8f6f 	isb	sy
 800c0ee:	f3bf 8f4f 	dsb	sy
 800c0f2:	607b      	str	r3, [r7, #4]
}
 800c0f4:	bf00      	nop
 800c0f6:	e7fe      	b.n	800c0f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c0f8:	4b0a      	ldr	r3, [pc, #40]	; (800c124 <vPortExitCritical+0x50>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	3b01      	subs	r3, #1
 800c0fe:	4a09      	ldr	r2, [pc, #36]	; (800c124 <vPortExitCritical+0x50>)
 800c100:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c102:	4b08      	ldr	r3, [pc, #32]	; (800c124 <vPortExitCritical+0x50>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d105      	bne.n	800c116 <vPortExitCritical+0x42>
 800c10a:	2300      	movs	r3, #0
 800c10c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c114:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c116:	bf00      	nop
 800c118:	370c      	adds	r7, #12
 800c11a:	46bd      	mov	sp, r7
 800c11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c120:	4770      	bx	lr
 800c122:	bf00      	nop
 800c124:	24000014 	.word	0x24000014
	...

0800c130 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c130:	f3ef 8009 	mrs	r0, PSP
 800c134:	f3bf 8f6f 	isb	sy
 800c138:	4b15      	ldr	r3, [pc, #84]	; (800c190 <pxCurrentTCBConst>)
 800c13a:	681a      	ldr	r2, [r3, #0]
 800c13c:	f01e 0f10 	tst.w	lr, #16
 800c140:	bf08      	it	eq
 800c142:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c146:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c14a:	6010      	str	r0, [r2, #0]
 800c14c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c150:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c154:	f380 8811 	msr	BASEPRI, r0
 800c158:	f3bf 8f4f 	dsb	sy
 800c15c:	f3bf 8f6f 	isb	sy
 800c160:	f001 fc8a 	bl	800da78 <vTaskSwitchContext>
 800c164:	f04f 0000 	mov.w	r0, #0
 800c168:	f380 8811 	msr	BASEPRI, r0
 800c16c:	bc09      	pop	{r0, r3}
 800c16e:	6819      	ldr	r1, [r3, #0]
 800c170:	6808      	ldr	r0, [r1, #0]
 800c172:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c176:	f01e 0f10 	tst.w	lr, #16
 800c17a:	bf08      	it	eq
 800c17c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c180:	f380 8809 	msr	PSP, r0
 800c184:	f3bf 8f6f 	isb	sy
 800c188:	4770      	bx	lr
 800c18a:	bf00      	nop
 800c18c:	f3af 8000 	nop.w

0800c190 <pxCurrentTCBConst>:
 800c190:	2400a8c0 	.word	0x2400a8c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c194:	bf00      	nop
 800c196:	bf00      	nop

0800c198 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b082      	sub	sp, #8
 800c19c:	af00      	add	r7, sp, #0
	__asm volatile
 800c19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1a2:	f383 8811 	msr	BASEPRI, r3
 800c1a6:	f3bf 8f6f 	isb	sy
 800c1aa:	f3bf 8f4f 	dsb	sy
 800c1ae:	607b      	str	r3, [r7, #4]
}
 800c1b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c1b2:	f001 fba7 	bl	800d904 <xTaskIncrementTick>
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d003      	beq.n	800c1c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c1bc:	4b06      	ldr	r3, [pc, #24]	; (800c1d8 <xPortSysTickHandler+0x40>)
 800c1be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1c2:	601a      	str	r2, [r3, #0]
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	f383 8811 	msr	BASEPRI, r3
}
 800c1ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c1d0:	bf00      	nop
 800c1d2:	3708      	adds	r7, #8
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}
 800c1d8:	e000ed04 	.word	0xe000ed04

0800c1dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c1dc:	b480      	push	{r7}
 800c1de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c1e0:	4b0b      	ldr	r3, [pc, #44]	; (800c210 <vPortSetupTimerInterrupt+0x34>)
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c1e6:	4b0b      	ldr	r3, [pc, #44]	; (800c214 <vPortSetupTimerInterrupt+0x38>)
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c1ec:	4b0a      	ldr	r3, [pc, #40]	; (800c218 <vPortSetupTimerInterrupt+0x3c>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	4a0a      	ldr	r2, [pc, #40]	; (800c21c <vPortSetupTimerInterrupt+0x40>)
 800c1f2:	fba2 2303 	umull	r2, r3, r2, r3
 800c1f6:	099b      	lsrs	r3, r3, #6
 800c1f8:	4a09      	ldr	r2, [pc, #36]	; (800c220 <vPortSetupTimerInterrupt+0x44>)
 800c1fa:	3b01      	subs	r3, #1
 800c1fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c1fe:	4b04      	ldr	r3, [pc, #16]	; (800c210 <vPortSetupTimerInterrupt+0x34>)
 800c200:	2207      	movs	r2, #7
 800c202:	601a      	str	r2, [r3, #0]
}
 800c204:	bf00      	nop
 800c206:	46bd      	mov	sp, r7
 800c208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20c:	4770      	bx	lr
 800c20e:	bf00      	nop
 800c210:	e000e010 	.word	0xe000e010
 800c214:	e000e018 	.word	0xe000e018
 800c218:	24000018 	.word	0x24000018
 800c21c:	10624dd3 	.word	0x10624dd3
 800c220:	e000e014 	.word	0xe000e014

0800c224 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c224:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c234 <vPortEnableVFP+0x10>
 800c228:	6801      	ldr	r1, [r0, #0]
 800c22a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c22e:	6001      	str	r1, [r0, #0]
 800c230:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c232:	bf00      	nop
 800c234:	e000ed88 	.word	0xe000ed88

0800c238 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c238:	b480      	push	{r7}
 800c23a:	b085      	sub	sp, #20
 800c23c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c23e:	f3ef 8305 	mrs	r3, IPSR
 800c242:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	2b0f      	cmp	r3, #15
 800c248:	d914      	bls.n	800c274 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c24a:	4a17      	ldr	r2, [pc, #92]	; (800c2a8 <vPortValidateInterruptPriority+0x70>)
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	4413      	add	r3, r2
 800c250:	781b      	ldrb	r3, [r3, #0]
 800c252:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c254:	4b15      	ldr	r3, [pc, #84]	; (800c2ac <vPortValidateInterruptPriority+0x74>)
 800c256:	781b      	ldrb	r3, [r3, #0]
 800c258:	7afa      	ldrb	r2, [r7, #11]
 800c25a:	429a      	cmp	r2, r3
 800c25c:	d20a      	bcs.n	800c274 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c262:	f383 8811 	msr	BASEPRI, r3
 800c266:	f3bf 8f6f 	isb	sy
 800c26a:	f3bf 8f4f 	dsb	sy
 800c26e:	607b      	str	r3, [r7, #4]
}
 800c270:	bf00      	nop
 800c272:	e7fe      	b.n	800c272 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c274:	4b0e      	ldr	r3, [pc, #56]	; (800c2b0 <vPortValidateInterruptPriority+0x78>)
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c27c:	4b0d      	ldr	r3, [pc, #52]	; (800c2b4 <vPortValidateInterruptPriority+0x7c>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	429a      	cmp	r2, r3
 800c282:	d90a      	bls.n	800c29a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c288:	f383 8811 	msr	BASEPRI, r3
 800c28c:	f3bf 8f6f 	isb	sy
 800c290:	f3bf 8f4f 	dsb	sy
 800c294:	603b      	str	r3, [r7, #0]
}
 800c296:	bf00      	nop
 800c298:	e7fe      	b.n	800c298 <vPortValidateInterruptPriority+0x60>
	}
 800c29a:	bf00      	nop
 800c29c:	3714      	adds	r7, #20
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a4:	4770      	bx	lr
 800c2a6:	bf00      	nop
 800c2a8:	e000e3f0 	.word	0xe000e3f0
 800c2ac:	2400a878 	.word	0x2400a878
 800c2b0:	e000ed0c 	.word	0xe000ed0c
 800c2b4:	2400a87c 	.word	0x2400a87c

0800c2b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b084      	sub	sp, #16
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
 800c2c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d10a      	bne.n	800c2e2 <xQueueGenericReset+0x2a>
	__asm volatile
 800c2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2d0:	f383 8811 	msr	BASEPRI, r3
 800c2d4:	f3bf 8f6f 	isb	sy
 800c2d8:	f3bf 8f4f 	dsb	sy
 800c2dc:	60bb      	str	r3, [r7, #8]
}
 800c2de:	bf00      	nop
 800c2e0:	e7fe      	b.n	800c2e0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c2e2:	f7ff fec7 	bl	800c074 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	681a      	ldr	r2, [r3, #0]
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2ee:	68f9      	ldr	r1, [r7, #12]
 800c2f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c2f2:	fb01 f303 	mul.w	r3, r1, r3
 800c2f6:	441a      	add	r2, r3
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	2200      	movs	r2, #0
 800c300:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	681a      	ldr	r2, [r3, #0]
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	681a      	ldr	r2, [r3, #0]
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c312:	3b01      	subs	r3, #1
 800c314:	68f9      	ldr	r1, [r7, #12]
 800c316:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c318:	fb01 f303 	mul.w	r3, r1, r3
 800c31c:	441a      	add	r2, r3
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	22ff      	movs	r2, #255	; 0xff
 800c326:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	22ff      	movs	r2, #255	; 0xff
 800c32e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d114      	bne.n	800c362 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	691b      	ldr	r3, [r3, #16]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d01a      	beq.n	800c376 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	3310      	adds	r3, #16
 800c344:	4618      	mov	r0, r3
 800c346:	f001 fc4b 	bl	800dbe0 <xTaskRemoveFromEventList>
 800c34a:	4603      	mov	r3, r0
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d012      	beq.n	800c376 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c350:	4b0c      	ldr	r3, [pc, #48]	; (800c384 <xQueueGenericReset+0xcc>)
 800c352:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c356:	601a      	str	r2, [r3, #0]
 800c358:	f3bf 8f4f 	dsb	sy
 800c35c:	f3bf 8f6f 	isb	sy
 800c360:	e009      	b.n	800c376 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	3310      	adds	r3, #16
 800c366:	4618      	mov	r0, r3
 800c368:	f7ff fca4 	bl	800bcb4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	3324      	adds	r3, #36	; 0x24
 800c370:	4618      	mov	r0, r3
 800c372:	f7ff fc9f 	bl	800bcb4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c376:	f7ff fead 	bl	800c0d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c37a:	2301      	movs	r3, #1
}
 800c37c:	4618      	mov	r0, r3
 800c37e:	3710      	adds	r7, #16
 800c380:	46bd      	mov	sp, r7
 800c382:	bd80      	pop	{r7, pc}
 800c384:	e000ed04 	.word	0xe000ed04

0800c388 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b08e      	sub	sp, #56	; 0x38
 800c38c:	af02      	add	r7, sp, #8
 800c38e:	60f8      	str	r0, [r7, #12]
 800c390:	60b9      	str	r1, [r7, #8]
 800c392:	607a      	str	r2, [r7, #4]
 800c394:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d10a      	bne.n	800c3b2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c39c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a0:	f383 8811 	msr	BASEPRI, r3
 800c3a4:	f3bf 8f6f 	isb	sy
 800c3a8:	f3bf 8f4f 	dsb	sy
 800c3ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c3ae:	bf00      	nop
 800c3b0:	e7fe      	b.n	800c3b0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d10a      	bne.n	800c3ce <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c3b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3bc:	f383 8811 	msr	BASEPRI, r3
 800c3c0:	f3bf 8f6f 	isb	sy
 800c3c4:	f3bf 8f4f 	dsb	sy
 800c3c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c3ca:	bf00      	nop
 800c3cc:	e7fe      	b.n	800c3cc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d002      	beq.n	800c3da <xQueueGenericCreateStatic+0x52>
 800c3d4:	68bb      	ldr	r3, [r7, #8]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d001      	beq.n	800c3de <xQueueGenericCreateStatic+0x56>
 800c3da:	2301      	movs	r3, #1
 800c3dc:	e000      	b.n	800c3e0 <xQueueGenericCreateStatic+0x58>
 800c3de:	2300      	movs	r3, #0
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d10a      	bne.n	800c3fa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c3e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3e8:	f383 8811 	msr	BASEPRI, r3
 800c3ec:	f3bf 8f6f 	isb	sy
 800c3f0:	f3bf 8f4f 	dsb	sy
 800c3f4:	623b      	str	r3, [r7, #32]
}
 800c3f6:	bf00      	nop
 800c3f8:	e7fe      	b.n	800c3f8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d102      	bne.n	800c406 <xQueueGenericCreateStatic+0x7e>
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d101      	bne.n	800c40a <xQueueGenericCreateStatic+0x82>
 800c406:	2301      	movs	r3, #1
 800c408:	e000      	b.n	800c40c <xQueueGenericCreateStatic+0x84>
 800c40a:	2300      	movs	r3, #0
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d10a      	bne.n	800c426 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c414:	f383 8811 	msr	BASEPRI, r3
 800c418:	f3bf 8f6f 	isb	sy
 800c41c:	f3bf 8f4f 	dsb	sy
 800c420:	61fb      	str	r3, [r7, #28]
}
 800c422:	bf00      	nop
 800c424:	e7fe      	b.n	800c424 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c426:	2350      	movs	r3, #80	; 0x50
 800c428:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c42a:	697b      	ldr	r3, [r7, #20]
 800c42c:	2b50      	cmp	r3, #80	; 0x50
 800c42e:	d00a      	beq.n	800c446 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c434:	f383 8811 	msr	BASEPRI, r3
 800c438:	f3bf 8f6f 	isb	sy
 800c43c:	f3bf 8f4f 	dsb	sy
 800c440:	61bb      	str	r3, [r7, #24]
}
 800c442:	bf00      	nop
 800c444:	e7fe      	b.n	800c444 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c446:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d00d      	beq.n	800c46e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c454:	2201      	movs	r2, #1
 800c456:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c45a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c45e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c460:	9300      	str	r3, [sp, #0]
 800c462:	4613      	mov	r3, r2
 800c464:	687a      	ldr	r2, [r7, #4]
 800c466:	68b9      	ldr	r1, [r7, #8]
 800c468:	68f8      	ldr	r0, [r7, #12]
 800c46a:	f000 f83f 	bl	800c4ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c470:	4618      	mov	r0, r3
 800c472:	3730      	adds	r7, #48	; 0x30
 800c474:	46bd      	mov	sp, r7
 800c476:	bd80      	pop	{r7, pc}

0800c478 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b08a      	sub	sp, #40	; 0x28
 800c47c:	af02      	add	r7, sp, #8
 800c47e:	60f8      	str	r0, [r7, #12]
 800c480:	60b9      	str	r1, [r7, #8]
 800c482:	4613      	mov	r3, r2
 800c484:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d10a      	bne.n	800c4a2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800c48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c490:	f383 8811 	msr	BASEPRI, r3
 800c494:	f3bf 8f6f 	isb	sy
 800c498:	f3bf 8f4f 	dsb	sy
 800c49c:	613b      	str	r3, [r7, #16]
}
 800c49e:	bf00      	nop
 800c4a0:	e7fe      	b.n	800c4a0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	68ba      	ldr	r2, [r7, #8]
 800c4a6:	fb02 f303 	mul.w	r3, r2, r3
 800c4aa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c4ac:	69fb      	ldr	r3, [r7, #28]
 800c4ae:	3350      	adds	r3, #80	; 0x50
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f7ff fa15 	bl	800b8e0 <pvPortMalloc>
 800c4b6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c4b8:	69bb      	ldr	r3, [r7, #24]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d011      	beq.n	800c4e2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c4be:	69bb      	ldr	r3, [r7, #24]
 800c4c0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c4c2:	697b      	ldr	r3, [r7, #20]
 800c4c4:	3350      	adds	r3, #80	; 0x50
 800c4c6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c4c8:	69bb      	ldr	r3, [r7, #24]
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c4d0:	79fa      	ldrb	r2, [r7, #7]
 800c4d2:	69bb      	ldr	r3, [r7, #24]
 800c4d4:	9300      	str	r3, [sp, #0]
 800c4d6:	4613      	mov	r3, r2
 800c4d8:	697a      	ldr	r2, [r7, #20]
 800c4da:	68b9      	ldr	r1, [r7, #8]
 800c4dc:	68f8      	ldr	r0, [r7, #12]
 800c4de:	f000 f805 	bl	800c4ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c4e2:	69bb      	ldr	r3, [r7, #24]
	}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	3720      	adds	r7, #32
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bd80      	pop	{r7, pc}

0800c4ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b084      	sub	sp, #16
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	60f8      	str	r0, [r7, #12]
 800c4f4:	60b9      	str	r1, [r7, #8]
 800c4f6:	607a      	str	r2, [r7, #4]
 800c4f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d103      	bne.n	800c508 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c500:	69bb      	ldr	r3, [r7, #24]
 800c502:	69ba      	ldr	r2, [r7, #24]
 800c504:	601a      	str	r2, [r3, #0]
 800c506:	e002      	b.n	800c50e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c508:	69bb      	ldr	r3, [r7, #24]
 800c50a:	687a      	ldr	r2, [r7, #4]
 800c50c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c50e:	69bb      	ldr	r3, [r7, #24]
 800c510:	68fa      	ldr	r2, [r7, #12]
 800c512:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c514:	69bb      	ldr	r3, [r7, #24]
 800c516:	68ba      	ldr	r2, [r7, #8]
 800c518:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c51a:	2101      	movs	r1, #1
 800c51c:	69b8      	ldr	r0, [r7, #24]
 800c51e:	f7ff fecb 	bl	800c2b8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c522:	69bb      	ldr	r3, [r7, #24]
 800c524:	78fa      	ldrb	r2, [r7, #3]
 800c526:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c52a:	bf00      	nop
 800c52c:	3710      	adds	r7, #16
 800c52e:	46bd      	mov	sp, r7
 800c530:	bd80      	pop	{r7, pc}

0800c532 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800c532:	b580      	push	{r7, lr}
 800c534:	b08a      	sub	sp, #40	; 0x28
 800c536:	af02      	add	r7, sp, #8
 800c538:	60f8      	str	r0, [r7, #12]
 800c53a:	60b9      	str	r1, [r7, #8]
 800c53c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d10a      	bne.n	800c55a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800c544:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c548:	f383 8811 	msr	BASEPRI, r3
 800c54c:	f3bf 8f6f 	isb	sy
 800c550:	f3bf 8f4f 	dsb	sy
 800c554:	61bb      	str	r3, [r7, #24]
}
 800c556:	bf00      	nop
 800c558:	e7fe      	b.n	800c558 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c55a:	68ba      	ldr	r2, [r7, #8]
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	429a      	cmp	r2, r3
 800c560:	d90a      	bls.n	800c578 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800c562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c566:	f383 8811 	msr	BASEPRI, r3
 800c56a:	f3bf 8f6f 	isb	sy
 800c56e:	f3bf 8f4f 	dsb	sy
 800c572:	617b      	str	r3, [r7, #20]
}
 800c574:	bf00      	nop
 800c576:	e7fe      	b.n	800c576 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c578:	2302      	movs	r3, #2
 800c57a:	9300      	str	r3, [sp, #0]
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2200      	movs	r2, #0
 800c580:	2100      	movs	r1, #0
 800c582:	68f8      	ldr	r0, [r7, #12]
 800c584:	f7ff ff00 	bl	800c388 <xQueueGenericCreateStatic>
 800c588:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800c58a:	69fb      	ldr	r3, [r7, #28]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d002      	beq.n	800c596 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c590:	69fb      	ldr	r3, [r7, #28]
 800c592:	68ba      	ldr	r2, [r7, #8]
 800c594:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c596:	69fb      	ldr	r3, [r7, #28]
	}
 800c598:	4618      	mov	r0, r3
 800c59a:	3720      	adds	r7, #32
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bd80      	pop	{r7, pc}

0800c5a0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b086      	sub	sp, #24
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
 800c5a8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d10a      	bne.n	800c5c6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800c5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5b4:	f383 8811 	msr	BASEPRI, r3
 800c5b8:	f3bf 8f6f 	isb	sy
 800c5bc:	f3bf 8f4f 	dsb	sy
 800c5c0:	613b      	str	r3, [r7, #16]
}
 800c5c2:	bf00      	nop
 800c5c4:	e7fe      	b.n	800c5c4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c5c6:	683a      	ldr	r2, [r7, #0]
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	429a      	cmp	r2, r3
 800c5cc:	d90a      	bls.n	800c5e4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800c5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5d2:	f383 8811 	msr	BASEPRI, r3
 800c5d6:	f3bf 8f6f 	isb	sy
 800c5da:	f3bf 8f4f 	dsb	sy
 800c5de:	60fb      	str	r3, [r7, #12]
}
 800c5e0:	bf00      	nop
 800c5e2:	e7fe      	b.n	800c5e2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c5e4:	2202      	movs	r2, #2
 800c5e6:	2100      	movs	r1, #0
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	f7ff ff45 	bl	800c478 <xQueueGenericCreate>
 800c5ee:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800c5f0:	697b      	ldr	r3, [r7, #20]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d002      	beq.n	800c5fc <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c5f6:	697b      	ldr	r3, [r7, #20]
 800c5f8:	683a      	ldr	r2, [r7, #0]
 800c5fa:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c5fc:	697b      	ldr	r3, [r7, #20]
	}
 800c5fe:	4618      	mov	r0, r3
 800c600:	3718      	adds	r7, #24
 800c602:	46bd      	mov	sp, r7
 800c604:	bd80      	pop	{r7, pc}
	...

0800c608 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b08e      	sub	sp, #56	; 0x38
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	60f8      	str	r0, [r7, #12]
 800c610:	60b9      	str	r1, [r7, #8]
 800c612:	607a      	str	r2, [r7, #4]
 800c614:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c616:	2300      	movs	r3, #0
 800c618:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c620:	2b00      	cmp	r3, #0
 800c622:	d10a      	bne.n	800c63a <xQueueGenericSend+0x32>
	__asm volatile
 800c624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c628:	f383 8811 	msr	BASEPRI, r3
 800c62c:	f3bf 8f6f 	isb	sy
 800c630:	f3bf 8f4f 	dsb	sy
 800c634:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c636:	bf00      	nop
 800c638:	e7fe      	b.n	800c638 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d103      	bne.n	800c648 <xQueueGenericSend+0x40>
 800c640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c644:	2b00      	cmp	r3, #0
 800c646:	d101      	bne.n	800c64c <xQueueGenericSend+0x44>
 800c648:	2301      	movs	r3, #1
 800c64a:	e000      	b.n	800c64e <xQueueGenericSend+0x46>
 800c64c:	2300      	movs	r3, #0
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d10a      	bne.n	800c668 <xQueueGenericSend+0x60>
	__asm volatile
 800c652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c656:	f383 8811 	msr	BASEPRI, r3
 800c65a:	f3bf 8f6f 	isb	sy
 800c65e:	f3bf 8f4f 	dsb	sy
 800c662:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c664:	bf00      	nop
 800c666:	e7fe      	b.n	800c666 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	2b02      	cmp	r3, #2
 800c66c:	d103      	bne.n	800c676 <xQueueGenericSend+0x6e>
 800c66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c672:	2b01      	cmp	r3, #1
 800c674:	d101      	bne.n	800c67a <xQueueGenericSend+0x72>
 800c676:	2301      	movs	r3, #1
 800c678:	e000      	b.n	800c67c <xQueueGenericSend+0x74>
 800c67a:	2300      	movs	r3, #0
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d10a      	bne.n	800c696 <xQueueGenericSend+0x8e>
	__asm volatile
 800c680:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c684:	f383 8811 	msr	BASEPRI, r3
 800c688:	f3bf 8f6f 	isb	sy
 800c68c:	f3bf 8f4f 	dsb	sy
 800c690:	623b      	str	r3, [r7, #32]
}
 800c692:	bf00      	nop
 800c694:	e7fe      	b.n	800c694 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c696:	f001 fc65 	bl	800df64 <xTaskGetSchedulerState>
 800c69a:	4603      	mov	r3, r0
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d102      	bne.n	800c6a6 <xQueueGenericSend+0x9e>
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d101      	bne.n	800c6aa <xQueueGenericSend+0xa2>
 800c6a6:	2301      	movs	r3, #1
 800c6a8:	e000      	b.n	800c6ac <xQueueGenericSend+0xa4>
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d10a      	bne.n	800c6c6 <xQueueGenericSend+0xbe>
	__asm volatile
 800c6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6b4:	f383 8811 	msr	BASEPRI, r3
 800c6b8:	f3bf 8f6f 	isb	sy
 800c6bc:	f3bf 8f4f 	dsb	sy
 800c6c0:	61fb      	str	r3, [r7, #28]
}
 800c6c2:	bf00      	nop
 800c6c4:	e7fe      	b.n	800c6c4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c6c6:	f7ff fcd5 	bl	800c074 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c6ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6d2:	429a      	cmp	r2, r3
 800c6d4:	d302      	bcc.n	800c6dc <xQueueGenericSend+0xd4>
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	2b02      	cmp	r3, #2
 800c6da:	d129      	bne.n	800c730 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c6dc:	683a      	ldr	r2, [r7, #0]
 800c6de:	68b9      	ldr	r1, [r7, #8]
 800c6e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c6e2:	f000 fc5e 	bl	800cfa2 <prvCopyDataToQueue>
 800c6e6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c6e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d010      	beq.n	800c712 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c6f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6f2:	3324      	adds	r3, #36	; 0x24
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	f001 fa73 	bl	800dbe0 <xTaskRemoveFromEventList>
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d013      	beq.n	800c728 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c700:	4b3f      	ldr	r3, [pc, #252]	; (800c800 <xQueueGenericSend+0x1f8>)
 800c702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c706:	601a      	str	r2, [r3, #0]
 800c708:	f3bf 8f4f 	dsb	sy
 800c70c:	f3bf 8f6f 	isb	sy
 800c710:	e00a      	b.n	800c728 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c714:	2b00      	cmp	r3, #0
 800c716:	d007      	beq.n	800c728 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c718:	4b39      	ldr	r3, [pc, #228]	; (800c800 <xQueueGenericSend+0x1f8>)
 800c71a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c71e:	601a      	str	r2, [r3, #0]
 800c720:	f3bf 8f4f 	dsb	sy
 800c724:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c728:	f7ff fcd4 	bl	800c0d4 <vPortExitCritical>
				return pdPASS;
 800c72c:	2301      	movs	r3, #1
 800c72e:	e063      	b.n	800c7f8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d103      	bne.n	800c73e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c736:	f7ff fccd 	bl	800c0d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c73a:	2300      	movs	r3, #0
 800c73c:	e05c      	b.n	800c7f8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c73e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c740:	2b00      	cmp	r3, #0
 800c742:	d106      	bne.n	800c752 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c744:	f107 0314 	add.w	r3, r7, #20
 800c748:	4618      	mov	r0, r3
 800c74a:	f001 faad 	bl	800dca8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c74e:	2301      	movs	r3, #1
 800c750:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c752:	f7ff fcbf 	bl	800c0d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c756:	f001 f819 	bl	800d78c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c75a:	f7ff fc8b 	bl	800c074 <vPortEnterCritical>
 800c75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c760:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c764:	b25b      	sxtb	r3, r3
 800c766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c76a:	d103      	bne.n	800c774 <xQueueGenericSend+0x16c>
 800c76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c76e:	2200      	movs	r2, #0
 800c770:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c776:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c77a:	b25b      	sxtb	r3, r3
 800c77c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c780:	d103      	bne.n	800c78a <xQueueGenericSend+0x182>
 800c782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c784:	2200      	movs	r2, #0
 800c786:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c78a:	f7ff fca3 	bl	800c0d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c78e:	1d3a      	adds	r2, r7, #4
 800c790:	f107 0314 	add.w	r3, r7, #20
 800c794:	4611      	mov	r1, r2
 800c796:	4618      	mov	r0, r3
 800c798:	f001 fa9c 	bl	800dcd4 <xTaskCheckForTimeOut>
 800c79c:	4603      	mov	r3, r0
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d124      	bne.n	800c7ec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c7a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c7a4:	f000 fcf5 	bl	800d192 <prvIsQueueFull>
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d018      	beq.n	800c7e0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b0:	3310      	adds	r3, #16
 800c7b2:	687a      	ldr	r2, [r7, #4]
 800c7b4:	4611      	mov	r1, r2
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	f001 f9c2 	bl	800db40 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c7bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c7be:	f000 fc80 	bl	800d0c2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c7c2:	f000 fff1 	bl	800d7a8 <xTaskResumeAll>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	f47f af7c 	bne.w	800c6c6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c7ce:	4b0c      	ldr	r3, [pc, #48]	; (800c800 <xQueueGenericSend+0x1f8>)
 800c7d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7d4:	601a      	str	r2, [r3, #0]
 800c7d6:	f3bf 8f4f 	dsb	sy
 800c7da:	f3bf 8f6f 	isb	sy
 800c7de:	e772      	b.n	800c6c6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c7e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c7e2:	f000 fc6e 	bl	800d0c2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c7e6:	f000 ffdf 	bl	800d7a8 <xTaskResumeAll>
 800c7ea:	e76c      	b.n	800c6c6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c7ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c7ee:	f000 fc68 	bl	800d0c2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c7f2:	f000 ffd9 	bl	800d7a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c7f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	3738      	adds	r7, #56	; 0x38
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}
 800c800:	e000ed04 	.word	0xe000ed04

0800c804 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b090      	sub	sp, #64	; 0x40
 800c808:	af00      	add	r7, sp, #0
 800c80a:	60f8      	str	r0, [r7, #12]
 800c80c:	60b9      	str	r1, [r7, #8]
 800c80e:	607a      	str	r2, [r7, #4]
 800c810:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d10a      	bne.n	800c832 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c81c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c820:	f383 8811 	msr	BASEPRI, r3
 800c824:	f3bf 8f6f 	isb	sy
 800c828:	f3bf 8f4f 	dsb	sy
 800c82c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c82e:	bf00      	nop
 800c830:	e7fe      	b.n	800c830 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c832:	68bb      	ldr	r3, [r7, #8]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d103      	bne.n	800c840 <xQueueGenericSendFromISR+0x3c>
 800c838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c83a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d101      	bne.n	800c844 <xQueueGenericSendFromISR+0x40>
 800c840:	2301      	movs	r3, #1
 800c842:	e000      	b.n	800c846 <xQueueGenericSendFromISR+0x42>
 800c844:	2300      	movs	r3, #0
 800c846:	2b00      	cmp	r3, #0
 800c848:	d10a      	bne.n	800c860 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c84a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c84e:	f383 8811 	msr	BASEPRI, r3
 800c852:	f3bf 8f6f 	isb	sy
 800c856:	f3bf 8f4f 	dsb	sy
 800c85a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c85c:	bf00      	nop
 800c85e:	e7fe      	b.n	800c85e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	2b02      	cmp	r3, #2
 800c864:	d103      	bne.n	800c86e <xQueueGenericSendFromISR+0x6a>
 800c866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c86a:	2b01      	cmp	r3, #1
 800c86c:	d101      	bne.n	800c872 <xQueueGenericSendFromISR+0x6e>
 800c86e:	2301      	movs	r3, #1
 800c870:	e000      	b.n	800c874 <xQueueGenericSendFromISR+0x70>
 800c872:	2300      	movs	r3, #0
 800c874:	2b00      	cmp	r3, #0
 800c876:	d10a      	bne.n	800c88e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c87c:	f383 8811 	msr	BASEPRI, r3
 800c880:	f3bf 8f6f 	isb	sy
 800c884:	f3bf 8f4f 	dsb	sy
 800c888:	623b      	str	r3, [r7, #32]
}
 800c88a:	bf00      	nop
 800c88c:	e7fe      	b.n	800c88c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c88e:	f7ff fcd3 	bl	800c238 <vPortValidateInterruptPriority>
	__asm volatile
 800c892:	f3ef 8211 	mrs	r2, BASEPRI
 800c896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c89a:	f383 8811 	msr	BASEPRI, r3
 800c89e:	f3bf 8f6f 	isb	sy
 800c8a2:	f3bf 8f4f 	dsb	sy
 800c8a6:	61fa      	str	r2, [r7, #28]
 800c8a8:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800c8aa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c8ac:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c8ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c8b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8b6:	429a      	cmp	r2, r3
 800c8b8:	d302      	bcc.n	800c8c0 <xQueueGenericSendFromISR+0xbc>
 800c8ba:	683b      	ldr	r3, [r7, #0]
 800c8bc:	2b02      	cmp	r3, #2
 800c8be:	d12f      	bne.n	800c920 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c8c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8ce:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c8d0:	683a      	ldr	r2, [r7, #0]
 800c8d2:	68b9      	ldr	r1, [r7, #8]
 800c8d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c8d6:	f000 fb64 	bl	800cfa2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c8da:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c8de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8e2:	d112      	bne.n	800c90a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c8e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d016      	beq.n	800c91a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c8ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ee:	3324      	adds	r3, #36	; 0x24
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	f001 f975 	bl	800dbe0 <xTaskRemoveFromEventList>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d00e      	beq.n	800c91a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d00b      	beq.n	800c91a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	2201      	movs	r2, #1
 800c906:	601a      	str	r2, [r3, #0]
 800c908:	e007      	b.n	800c91a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c90a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c90e:	3301      	adds	r3, #1
 800c910:	b2db      	uxtb	r3, r3
 800c912:	b25a      	sxtb	r2, r3
 800c914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c916:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c91a:	2301      	movs	r3, #1
 800c91c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c91e:	e001      	b.n	800c924 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c920:	2300      	movs	r3, #0
 800c922:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c926:	617b      	str	r3, [r7, #20]
	__asm volatile
 800c928:	697b      	ldr	r3, [r7, #20]
 800c92a:	f383 8811 	msr	BASEPRI, r3
}
 800c92e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c932:	4618      	mov	r0, r3
 800c934:	3740      	adds	r7, #64	; 0x40
 800c936:	46bd      	mov	sp, r7
 800c938:	bd80      	pop	{r7, pc}

0800c93a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c93a:	b580      	push	{r7, lr}
 800c93c:	b08e      	sub	sp, #56	; 0x38
 800c93e:	af00      	add	r7, sp, #0
 800c940:	6078      	str	r0, [r7, #4]
 800c942:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d10a      	bne.n	800c964 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800c94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c952:	f383 8811 	msr	BASEPRI, r3
 800c956:	f3bf 8f6f 	isb	sy
 800c95a:	f3bf 8f4f 	dsb	sy
 800c95e:	623b      	str	r3, [r7, #32]
}
 800c960:	bf00      	nop
 800c962:	e7fe      	b.n	800c962 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d00a      	beq.n	800c982 <xQueueGiveFromISR+0x48>
	__asm volatile
 800c96c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c970:	f383 8811 	msr	BASEPRI, r3
 800c974:	f3bf 8f6f 	isb	sy
 800c978:	f3bf 8f4f 	dsb	sy
 800c97c:	61fb      	str	r3, [r7, #28]
}
 800c97e:	bf00      	nop
 800c980:	e7fe      	b.n	800c980 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d103      	bne.n	800c992 <xQueueGiveFromISR+0x58>
 800c98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c98c:	689b      	ldr	r3, [r3, #8]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d101      	bne.n	800c996 <xQueueGiveFromISR+0x5c>
 800c992:	2301      	movs	r3, #1
 800c994:	e000      	b.n	800c998 <xQueueGiveFromISR+0x5e>
 800c996:	2300      	movs	r3, #0
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d10a      	bne.n	800c9b2 <xQueueGiveFromISR+0x78>
	__asm volatile
 800c99c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9a0:	f383 8811 	msr	BASEPRI, r3
 800c9a4:	f3bf 8f6f 	isb	sy
 800c9a8:	f3bf 8f4f 	dsb	sy
 800c9ac:	61bb      	str	r3, [r7, #24]
}
 800c9ae:	bf00      	nop
 800c9b0:	e7fe      	b.n	800c9b0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c9b2:	f7ff fc41 	bl	800c238 <vPortValidateInterruptPriority>
	__asm volatile
 800c9b6:	f3ef 8211 	mrs	r2, BASEPRI
 800c9ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9be:	f383 8811 	msr	BASEPRI, r3
 800c9c2:	f3bf 8f6f 	isb	sy
 800c9c6:	f3bf 8f4f 	dsb	sy
 800c9ca:	617a      	str	r2, [r7, #20]
 800c9cc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c9ce:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c9d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c9d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9d6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c9d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c9de:	429a      	cmp	r2, r3
 800c9e0:	d22b      	bcs.n	800ca3a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c9e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c9e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c9ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ee:	1c5a      	adds	r2, r3, #1
 800c9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9f2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c9f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c9f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9fc:	d112      	bne.n	800ca24 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d016      	beq.n	800ca34 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ca06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca08:	3324      	adds	r3, #36	; 0x24
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	f001 f8e8 	bl	800dbe0 <xTaskRemoveFromEventList>
 800ca10:	4603      	mov	r3, r0
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d00e      	beq.n	800ca34 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d00b      	beq.n	800ca34 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	2201      	movs	r2, #1
 800ca20:	601a      	str	r2, [r3, #0]
 800ca22:	e007      	b.n	800ca34 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ca24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca28:	3301      	adds	r3, #1
 800ca2a:	b2db      	uxtb	r3, r3
 800ca2c:	b25a      	sxtb	r2, r3
 800ca2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ca34:	2301      	movs	r3, #1
 800ca36:	637b      	str	r3, [r7, #52]	; 0x34
 800ca38:	e001      	b.n	800ca3e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	637b      	str	r3, [r7, #52]	; 0x34
 800ca3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca40:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	f383 8811 	msr	BASEPRI, r3
}
 800ca48:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ca4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	3738      	adds	r7, #56	; 0x38
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}

0800ca54 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b08c      	sub	sp, #48	; 0x30
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	60f8      	str	r0, [r7, #12]
 800ca5c:	60b9      	str	r1, [r7, #8]
 800ca5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ca60:	2300      	movs	r3, #0
 800ca62:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ca68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d10a      	bne.n	800ca84 <xQueueReceive+0x30>
	__asm volatile
 800ca6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca72:	f383 8811 	msr	BASEPRI, r3
 800ca76:	f3bf 8f6f 	isb	sy
 800ca7a:	f3bf 8f4f 	dsb	sy
 800ca7e:	623b      	str	r3, [r7, #32]
}
 800ca80:	bf00      	nop
 800ca82:	e7fe      	b.n	800ca82 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ca84:	68bb      	ldr	r3, [r7, #8]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d103      	bne.n	800ca92 <xQueueReceive+0x3e>
 800ca8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d101      	bne.n	800ca96 <xQueueReceive+0x42>
 800ca92:	2301      	movs	r3, #1
 800ca94:	e000      	b.n	800ca98 <xQueueReceive+0x44>
 800ca96:	2300      	movs	r3, #0
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d10a      	bne.n	800cab2 <xQueueReceive+0x5e>
	__asm volatile
 800ca9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caa0:	f383 8811 	msr	BASEPRI, r3
 800caa4:	f3bf 8f6f 	isb	sy
 800caa8:	f3bf 8f4f 	dsb	sy
 800caac:	61fb      	str	r3, [r7, #28]
}
 800caae:	bf00      	nop
 800cab0:	e7fe      	b.n	800cab0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cab2:	f001 fa57 	bl	800df64 <xTaskGetSchedulerState>
 800cab6:	4603      	mov	r3, r0
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d102      	bne.n	800cac2 <xQueueReceive+0x6e>
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d101      	bne.n	800cac6 <xQueueReceive+0x72>
 800cac2:	2301      	movs	r3, #1
 800cac4:	e000      	b.n	800cac8 <xQueueReceive+0x74>
 800cac6:	2300      	movs	r3, #0
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d10a      	bne.n	800cae2 <xQueueReceive+0x8e>
	__asm volatile
 800cacc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cad0:	f383 8811 	msr	BASEPRI, r3
 800cad4:	f3bf 8f6f 	isb	sy
 800cad8:	f3bf 8f4f 	dsb	sy
 800cadc:	61bb      	str	r3, [r7, #24]
}
 800cade:	bf00      	nop
 800cae0:	e7fe      	b.n	800cae0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cae2:	f7ff fac7 	bl	800c074 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800caec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d01f      	beq.n	800cb32 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800caf2:	68b9      	ldr	r1, [r7, #8]
 800caf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800caf6:	f000 fabe 	bl	800d076 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cafc:	1e5a      	subs	r2, r3, #1
 800cafe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb00:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb04:	691b      	ldr	r3, [r3, #16]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d00f      	beq.n	800cb2a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb0c:	3310      	adds	r3, #16
 800cb0e:	4618      	mov	r0, r3
 800cb10:	f001 f866 	bl	800dbe0 <xTaskRemoveFromEventList>
 800cb14:	4603      	mov	r3, r0
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d007      	beq.n	800cb2a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cb1a:	4b3d      	ldr	r3, [pc, #244]	; (800cc10 <xQueueReceive+0x1bc>)
 800cb1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb20:	601a      	str	r2, [r3, #0]
 800cb22:	f3bf 8f4f 	dsb	sy
 800cb26:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cb2a:	f7ff fad3 	bl	800c0d4 <vPortExitCritical>
				return pdPASS;
 800cb2e:	2301      	movs	r3, #1
 800cb30:	e069      	b.n	800cc06 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d103      	bne.n	800cb40 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cb38:	f7ff facc 	bl	800c0d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	e062      	b.n	800cc06 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cb40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d106      	bne.n	800cb54 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cb46:	f107 0310 	add.w	r3, r7, #16
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	f001 f8ac 	bl	800dca8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cb50:	2301      	movs	r3, #1
 800cb52:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cb54:	f7ff fabe 	bl	800c0d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cb58:	f000 fe18 	bl	800d78c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cb5c:	f7ff fa8a 	bl	800c074 <vPortEnterCritical>
 800cb60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cb66:	b25b      	sxtb	r3, r3
 800cb68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb6c:	d103      	bne.n	800cb76 <xQueueReceive+0x122>
 800cb6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb70:	2200      	movs	r2, #0
 800cb72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cb76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cb7c:	b25b      	sxtb	r3, r3
 800cb7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb82:	d103      	bne.n	800cb8c <xQueueReceive+0x138>
 800cb84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb86:	2200      	movs	r2, #0
 800cb88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cb8c:	f7ff faa2 	bl	800c0d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cb90:	1d3a      	adds	r2, r7, #4
 800cb92:	f107 0310 	add.w	r3, r7, #16
 800cb96:	4611      	mov	r1, r2
 800cb98:	4618      	mov	r0, r3
 800cb9a:	f001 f89b 	bl	800dcd4 <xTaskCheckForTimeOut>
 800cb9e:	4603      	mov	r3, r0
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d123      	bne.n	800cbec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cba4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cba6:	f000 fade 	bl	800d166 <prvIsQueueEmpty>
 800cbaa:	4603      	mov	r3, r0
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d017      	beq.n	800cbe0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cbb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbb2:	3324      	adds	r3, #36	; 0x24
 800cbb4:	687a      	ldr	r2, [r7, #4]
 800cbb6:	4611      	mov	r1, r2
 800cbb8:	4618      	mov	r0, r3
 800cbba:	f000 ffc1 	bl	800db40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cbbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cbc0:	f000 fa7f 	bl	800d0c2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cbc4:	f000 fdf0 	bl	800d7a8 <xTaskResumeAll>
 800cbc8:	4603      	mov	r3, r0
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d189      	bne.n	800cae2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800cbce:	4b10      	ldr	r3, [pc, #64]	; (800cc10 <xQueueReceive+0x1bc>)
 800cbd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbd4:	601a      	str	r2, [r3, #0]
 800cbd6:	f3bf 8f4f 	dsb	sy
 800cbda:	f3bf 8f6f 	isb	sy
 800cbde:	e780      	b.n	800cae2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cbe0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cbe2:	f000 fa6e 	bl	800d0c2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cbe6:	f000 fddf 	bl	800d7a8 <xTaskResumeAll>
 800cbea:	e77a      	b.n	800cae2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cbec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cbee:	f000 fa68 	bl	800d0c2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cbf2:	f000 fdd9 	bl	800d7a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cbf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cbf8:	f000 fab5 	bl	800d166 <prvIsQueueEmpty>
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	f43f af6f 	beq.w	800cae2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cc04:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cc06:	4618      	mov	r0, r3
 800cc08:	3730      	adds	r7, #48	; 0x30
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	bd80      	pop	{r7, pc}
 800cc0e:	bf00      	nop
 800cc10:	e000ed04 	.word	0xe000ed04

0800cc14 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b08e      	sub	sp, #56	; 0x38
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
 800cc1c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800cc1e:	2300      	movs	r3, #0
 800cc20:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800cc26:	2300      	movs	r3, #0
 800cc28:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cc2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d10a      	bne.n	800cc46 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800cc30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc34:	f383 8811 	msr	BASEPRI, r3
 800cc38:	f3bf 8f6f 	isb	sy
 800cc3c:	f3bf 8f4f 	dsb	sy
 800cc40:	623b      	str	r3, [r7, #32]
}
 800cc42:	bf00      	nop
 800cc44:	e7fe      	b.n	800cc44 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cc46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d00a      	beq.n	800cc64 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800cc4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc52:	f383 8811 	msr	BASEPRI, r3
 800cc56:	f3bf 8f6f 	isb	sy
 800cc5a:	f3bf 8f4f 	dsb	sy
 800cc5e:	61fb      	str	r3, [r7, #28]
}
 800cc60:	bf00      	nop
 800cc62:	e7fe      	b.n	800cc62 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cc64:	f001 f97e 	bl	800df64 <xTaskGetSchedulerState>
 800cc68:	4603      	mov	r3, r0
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d102      	bne.n	800cc74 <xQueueSemaphoreTake+0x60>
 800cc6e:	683b      	ldr	r3, [r7, #0]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d101      	bne.n	800cc78 <xQueueSemaphoreTake+0x64>
 800cc74:	2301      	movs	r3, #1
 800cc76:	e000      	b.n	800cc7a <xQueueSemaphoreTake+0x66>
 800cc78:	2300      	movs	r3, #0
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d10a      	bne.n	800cc94 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800cc7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc82:	f383 8811 	msr	BASEPRI, r3
 800cc86:	f3bf 8f6f 	isb	sy
 800cc8a:	f3bf 8f4f 	dsb	sy
 800cc8e:	61bb      	str	r3, [r7, #24]
}
 800cc90:	bf00      	nop
 800cc92:	e7fe      	b.n	800cc92 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cc94:	f7ff f9ee 	bl	800c074 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cc98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc9c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cc9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d024      	beq.n	800ccee <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800cca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cca6:	1e5a      	subs	r2, r3, #1
 800cca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccaa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ccac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d104      	bne.n	800ccbe <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ccb4:	f001 facc 	bl	800e250 <pvTaskIncrementMutexHeldCount>
 800ccb8:	4602      	mov	r2, r0
 800ccba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccbc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ccbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccc0:	691b      	ldr	r3, [r3, #16]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d00f      	beq.n	800cce6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ccc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccc8:	3310      	adds	r3, #16
 800ccca:	4618      	mov	r0, r3
 800cccc:	f000 ff88 	bl	800dbe0 <xTaskRemoveFromEventList>
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d007      	beq.n	800cce6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ccd6:	4b54      	ldr	r3, [pc, #336]	; (800ce28 <xQueueSemaphoreTake+0x214>)
 800ccd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccdc:	601a      	str	r2, [r3, #0]
 800ccde:	f3bf 8f4f 	dsb	sy
 800cce2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cce6:	f7ff f9f5 	bl	800c0d4 <vPortExitCritical>
				return pdPASS;
 800ccea:	2301      	movs	r3, #1
 800ccec:	e097      	b.n	800ce1e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d111      	bne.n	800cd18 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ccf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d00a      	beq.n	800cd10 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800ccfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccfe:	f383 8811 	msr	BASEPRI, r3
 800cd02:	f3bf 8f6f 	isb	sy
 800cd06:	f3bf 8f4f 	dsb	sy
 800cd0a:	617b      	str	r3, [r7, #20]
}
 800cd0c:	bf00      	nop
 800cd0e:	e7fe      	b.n	800cd0e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800cd10:	f7ff f9e0 	bl	800c0d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cd14:	2300      	movs	r3, #0
 800cd16:	e082      	b.n	800ce1e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cd18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d106      	bne.n	800cd2c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cd1e:	f107 030c 	add.w	r3, r7, #12
 800cd22:	4618      	mov	r0, r3
 800cd24:	f000 ffc0 	bl	800dca8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cd28:	2301      	movs	r3, #1
 800cd2a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cd2c:	f7ff f9d2 	bl	800c0d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cd30:	f000 fd2c 	bl	800d78c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cd34:	f7ff f99e 	bl	800c074 <vPortEnterCritical>
 800cd38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cd3e:	b25b      	sxtb	r3, r3
 800cd40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd44:	d103      	bne.n	800cd4e <xQueueSemaphoreTake+0x13a>
 800cd46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd48:	2200      	movs	r2, #0
 800cd4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cd4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cd54:	b25b      	sxtb	r3, r3
 800cd56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd5a:	d103      	bne.n	800cd64 <xQueueSemaphoreTake+0x150>
 800cd5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd5e:	2200      	movs	r2, #0
 800cd60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cd64:	f7ff f9b6 	bl	800c0d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cd68:	463a      	mov	r2, r7
 800cd6a:	f107 030c 	add.w	r3, r7, #12
 800cd6e:	4611      	mov	r1, r2
 800cd70:	4618      	mov	r0, r3
 800cd72:	f000 ffaf 	bl	800dcd4 <xTaskCheckForTimeOut>
 800cd76:	4603      	mov	r3, r0
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d132      	bne.n	800cde2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cd7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd7e:	f000 f9f2 	bl	800d166 <prvIsQueueEmpty>
 800cd82:	4603      	mov	r3, r0
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d026      	beq.n	800cdd6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cd88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d109      	bne.n	800cda4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800cd90:	f7ff f970 	bl	800c074 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cd94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd96:	689b      	ldr	r3, [r3, #8]
 800cd98:	4618      	mov	r0, r3
 800cd9a:	f001 f901 	bl	800dfa0 <xTaskPriorityInherit>
 800cd9e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800cda0:	f7ff f998 	bl	800c0d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cda4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cda6:	3324      	adds	r3, #36	; 0x24
 800cda8:	683a      	ldr	r2, [r7, #0]
 800cdaa:	4611      	mov	r1, r2
 800cdac:	4618      	mov	r0, r3
 800cdae:	f000 fec7 	bl	800db40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cdb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cdb4:	f000 f985 	bl	800d0c2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cdb8:	f000 fcf6 	bl	800d7a8 <xTaskResumeAll>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	f47f af68 	bne.w	800cc94 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800cdc4:	4b18      	ldr	r3, [pc, #96]	; (800ce28 <xQueueSemaphoreTake+0x214>)
 800cdc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdca:	601a      	str	r2, [r3, #0]
 800cdcc:	f3bf 8f4f 	dsb	sy
 800cdd0:	f3bf 8f6f 	isb	sy
 800cdd4:	e75e      	b.n	800cc94 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800cdd6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cdd8:	f000 f973 	bl	800d0c2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cddc:	f000 fce4 	bl	800d7a8 <xTaskResumeAll>
 800cde0:	e758      	b.n	800cc94 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800cde2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cde4:	f000 f96d 	bl	800d0c2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cde8:	f000 fcde 	bl	800d7a8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cdec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cdee:	f000 f9ba 	bl	800d166 <prvIsQueueEmpty>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	f43f af4d 	beq.w	800cc94 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800cdfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d00d      	beq.n	800ce1c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800ce00:	f7ff f938 	bl	800c074 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ce04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ce06:	f000 f8b4 	bl	800cf72 <prvGetDisinheritPriorityAfterTimeout>
 800ce0a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ce0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce0e:	689b      	ldr	r3, [r3, #8]
 800ce10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ce12:	4618      	mov	r0, r3
 800ce14:	f001 f99a 	bl	800e14c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ce18:	f7ff f95c 	bl	800c0d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ce1c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ce1e:	4618      	mov	r0, r3
 800ce20:	3738      	adds	r7, #56	; 0x38
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}
 800ce26:	bf00      	nop
 800ce28:	e000ed04 	.word	0xe000ed04

0800ce2c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b08e      	sub	sp, #56	; 0x38
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	60f8      	str	r0, [r7, #12]
 800ce34:	60b9      	str	r1, [r7, #8]
 800ce36:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ce3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d10a      	bne.n	800ce58 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800ce42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce46:	f383 8811 	msr	BASEPRI, r3
 800ce4a:	f3bf 8f6f 	isb	sy
 800ce4e:	f3bf 8f4f 	dsb	sy
 800ce52:	623b      	str	r3, [r7, #32]
}
 800ce54:	bf00      	nop
 800ce56:	e7fe      	b.n	800ce56 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d103      	bne.n	800ce66 <xQueueReceiveFromISR+0x3a>
 800ce5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d101      	bne.n	800ce6a <xQueueReceiveFromISR+0x3e>
 800ce66:	2301      	movs	r3, #1
 800ce68:	e000      	b.n	800ce6c <xQueueReceiveFromISR+0x40>
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d10a      	bne.n	800ce86 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800ce70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce74:	f383 8811 	msr	BASEPRI, r3
 800ce78:	f3bf 8f6f 	isb	sy
 800ce7c:	f3bf 8f4f 	dsb	sy
 800ce80:	61fb      	str	r3, [r7, #28]
}
 800ce82:	bf00      	nop
 800ce84:	e7fe      	b.n	800ce84 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ce86:	f7ff f9d7 	bl	800c238 <vPortValidateInterruptPriority>
	__asm volatile
 800ce8a:	f3ef 8211 	mrs	r2, BASEPRI
 800ce8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce92:	f383 8811 	msr	BASEPRI, r3
 800ce96:	f3bf 8f6f 	isb	sy
 800ce9a:	f3bf 8f4f 	dsb	sy
 800ce9e:	61ba      	str	r2, [r7, #24]
 800cea0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800cea2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cea4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ceaa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ceac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d02f      	beq.n	800cf12 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ceb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ceb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cebc:	68b9      	ldr	r1, [r7, #8]
 800cebe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cec0:	f000 f8d9 	bl	800d076 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cec6:	1e5a      	subs	r2, r3, #1
 800cec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceca:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800cecc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ced0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ced4:	d112      	bne.n	800cefc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ced6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ced8:	691b      	ldr	r3, [r3, #16]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d016      	beq.n	800cf0c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cee0:	3310      	adds	r3, #16
 800cee2:	4618      	mov	r0, r3
 800cee4:	f000 fe7c 	bl	800dbe0 <xTaskRemoveFromEventList>
 800cee8:	4603      	mov	r3, r0
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d00e      	beq.n	800cf0c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d00b      	beq.n	800cf0c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	2201      	movs	r2, #1
 800cef8:	601a      	str	r2, [r3, #0]
 800cefa:	e007      	b.n	800cf0c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800cefc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf00:	3301      	adds	r3, #1
 800cf02:	b2db      	uxtb	r3, r3
 800cf04:	b25a      	sxtb	r2, r3
 800cf06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800cf0c:	2301      	movs	r3, #1
 800cf0e:	637b      	str	r3, [r7, #52]	; 0x34
 800cf10:	e001      	b.n	800cf16 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800cf12:	2300      	movs	r3, #0
 800cf14:	637b      	str	r3, [r7, #52]	; 0x34
 800cf16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf18:	613b      	str	r3, [r7, #16]
	__asm volatile
 800cf1a:	693b      	ldr	r3, [r7, #16]
 800cf1c:	f383 8811 	msr	BASEPRI, r3
}
 800cf20:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cf22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cf24:	4618      	mov	r0, r3
 800cf26:	3738      	adds	r7, #56	; 0x38
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	bd80      	pop	{r7, pc}

0800cf2c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b084      	sub	sp, #16
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d10a      	bne.n	800cf54 <vQueueDelete+0x28>
	__asm volatile
 800cf3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf42:	f383 8811 	msr	BASEPRI, r3
 800cf46:	f3bf 8f6f 	isb	sy
 800cf4a:	f3bf 8f4f 	dsb	sy
 800cf4e:	60bb      	str	r3, [r7, #8]
}
 800cf50:	bf00      	nop
 800cf52:	e7fe      	b.n	800cf52 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800cf54:	68f8      	ldr	r0, [r7, #12]
 800cf56:	f000 f95f 	bl	800d218 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d102      	bne.n	800cf6a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800cf64:	68f8      	ldr	r0, [r7, #12]
 800cf66:	f7fe fd87 	bl	800ba78 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800cf6a:	bf00      	nop
 800cf6c:	3710      	adds	r7, #16
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	bd80      	pop	{r7, pc}

0800cf72 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800cf72:	b480      	push	{r7}
 800cf74:	b085      	sub	sp, #20
 800cf76:	af00      	add	r7, sp, #0
 800cf78:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d006      	beq.n	800cf90 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800cf8c:	60fb      	str	r3, [r7, #12]
 800cf8e:	e001      	b.n	800cf94 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800cf90:	2300      	movs	r3, #0
 800cf92:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800cf94:	68fb      	ldr	r3, [r7, #12]
	}
 800cf96:	4618      	mov	r0, r3
 800cf98:	3714      	adds	r7, #20
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa0:	4770      	bx	lr

0800cfa2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cfa2:	b580      	push	{r7, lr}
 800cfa4:	b086      	sub	sp, #24
 800cfa6:	af00      	add	r7, sp, #0
 800cfa8:	60f8      	str	r0, [r7, #12]
 800cfaa:	60b9      	str	r1, [r7, #8]
 800cfac:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cfae:	2300      	movs	r3, #0
 800cfb0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfb6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d10d      	bne.n	800cfdc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d14d      	bne.n	800d064 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	689b      	ldr	r3, [r3, #8]
 800cfcc:	4618      	mov	r0, r3
 800cfce:	f001 f84f 	bl	800e070 <xTaskPriorityDisinherit>
 800cfd2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	609a      	str	r2, [r3, #8]
 800cfda:	e043      	b.n	800d064 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d119      	bne.n	800d016 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	6858      	ldr	r0, [r3, #4]
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfea:	461a      	mov	r2, r3
 800cfec:	68b9      	ldr	r1, [r7, #8]
 800cfee:	f01f fe68 	bl	802ccc2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	685a      	ldr	r2, [r3, #4]
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cffa:	441a      	add	r2, r3
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	685a      	ldr	r2, [r3, #4]
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	689b      	ldr	r3, [r3, #8]
 800d008:	429a      	cmp	r2, r3
 800d00a:	d32b      	bcc.n	800d064 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	681a      	ldr	r2, [r3, #0]
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	605a      	str	r2, [r3, #4]
 800d014:	e026      	b.n	800d064 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	68d8      	ldr	r0, [r3, #12]
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d01e:	461a      	mov	r2, r3
 800d020:	68b9      	ldr	r1, [r7, #8]
 800d022:	f01f fe4e 	bl	802ccc2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	68da      	ldr	r2, [r3, #12]
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d02e:	425b      	negs	r3, r3
 800d030:	441a      	add	r2, r3
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	68da      	ldr	r2, [r3, #12]
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	429a      	cmp	r2, r3
 800d040:	d207      	bcs.n	800d052 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	689a      	ldr	r2, [r3, #8]
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d04a:	425b      	negs	r3, r3
 800d04c:	441a      	add	r2, r3
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2b02      	cmp	r3, #2
 800d056:	d105      	bne.n	800d064 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d058:	693b      	ldr	r3, [r7, #16]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d002      	beq.n	800d064 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d05e:	693b      	ldr	r3, [r7, #16]
 800d060:	3b01      	subs	r3, #1
 800d062:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d064:	693b      	ldr	r3, [r7, #16]
 800d066:	1c5a      	adds	r2, r3, #1
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d06c:	697b      	ldr	r3, [r7, #20]
}
 800d06e:	4618      	mov	r0, r3
 800d070:	3718      	adds	r7, #24
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}

0800d076 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d076:	b580      	push	{r7, lr}
 800d078:	b082      	sub	sp, #8
 800d07a:	af00      	add	r7, sp, #0
 800d07c:	6078      	str	r0, [r7, #4]
 800d07e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d084:	2b00      	cmp	r3, #0
 800d086:	d018      	beq.n	800d0ba <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	68da      	ldr	r2, [r3, #12]
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d090:	441a      	add	r2, r3
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	68da      	ldr	r2, [r3, #12]
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	689b      	ldr	r3, [r3, #8]
 800d09e:	429a      	cmp	r2, r3
 800d0a0:	d303      	bcc.n	800d0aa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681a      	ldr	r2, [r3, #0]
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	68d9      	ldr	r1, [r3, #12]
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0b2:	461a      	mov	r2, r3
 800d0b4:	6838      	ldr	r0, [r7, #0]
 800d0b6:	f01f fe04 	bl	802ccc2 <memcpy>
	}
}
 800d0ba:	bf00      	nop
 800d0bc:	3708      	adds	r7, #8
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bd80      	pop	{r7, pc}

0800d0c2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d0c2:	b580      	push	{r7, lr}
 800d0c4:	b084      	sub	sp, #16
 800d0c6:	af00      	add	r7, sp, #0
 800d0c8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d0ca:	f7fe ffd3 	bl	800c074 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d0d4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d0d6:	e011      	b.n	800d0fc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d012      	beq.n	800d106 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	3324      	adds	r3, #36	; 0x24
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	f000 fd7b 	bl	800dbe0 <xTaskRemoveFromEventList>
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d001      	beq.n	800d0f4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d0f0:	f000 fe52 	bl	800dd98 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d0f4:	7bfb      	ldrb	r3, [r7, #15]
 800d0f6:	3b01      	subs	r3, #1
 800d0f8:	b2db      	uxtb	r3, r3
 800d0fa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d0fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d100:	2b00      	cmp	r3, #0
 800d102:	dce9      	bgt.n	800d0d8 <prvUnlockQueue+0x16>
 800d104:	e000      	b.n	800d108 <prvUnlockQueue+0x46>
					break;
 800d106:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	22ff      	movs	r2, #255	; 0xff
 800d10c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d110:	f7fe ffe0 	bl	800c0d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d114:	f7fe ffae 	bl	800c074 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d11e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d120:	e011      	b.n	800d146 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	691b      	ldr	r3, [r3, #16]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d012      	beq.n	800d150 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	3310      	adds	r3, #16
 800d12e:	4618      	mov	r0, r3
 800d130:	f000 fd56 	bl	800dbe0 <xTaskRemoveFromEventList>
 800d134:	4603      	mov	r3, r0
 800d136:	2b00      	cmp	r3, #0
 800d138:	d001      	beq.n	800d13e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d13a:	f000 fe2d 	bl	800dd98 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d13e:	7bbb      	ldrb	r3, [r7, #14]
 800d140:	3b01      	subs	r3, #1
 800d142:	b2db      	uxtb	r3, r3
 800d144:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d146:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	dce9      	bgt.n	800d122 <prvUnlockQueue+0x60>
 800d14e:	e000      	b.n	800d152 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d150:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	22ff      	movs	r2, #255	; 0xff
 800d156:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d15a:	f7fe ffbb 	bl	800c0d4 <vPortExitCritical>
}
 800d15e:	bf00      	nop
 800d160:	3710      	adds	r7, #16
 800d162:	46bd      	mov	sp, r7
 800d164:	bd80      	pop	{r7, pc}

0800d166 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d166:	b580      	push	{r7, lr}
 800d168:	b084      	sub	sp, #16
 800d16a:	af00      	add	r7, sp, #0
 800d16c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d16e:	f7fe ff81 	bl	800c074 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d176:	2b00      	cmp	r3, #0
 800d178:	d102      	bne.n	800d180 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d17a:	2301      	movs	r3, #1
 800d17c:	60fb      	str	r3, [r7, #12]
 800d17e:	e001      	b.n	800d184 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d180:	2300      	movs	r3, #0
 800d182:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d184:	f7fe ffa6 	bl	800c0d4 <vPortExitCritical>

	return xReturn;
 800d188:	68fb      	ldr	r3, [r7, #12]
}
 800d18a:	4618      	mov	r0, r3
 800d18c:	3710      	adds	r7, #16
 800d18e:	46bd      	mov	sp, r7
 800d190:	bd80      	pop	{r7, pc}

0800d192 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d192:	b580      	push	{r7, lr}
 800d194:	b084      	sub	sp, #16
 800d196:	af00      	add	r7, sp, #0
 800d198:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d19a:	f7fe ff6b 	bl	800c074 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1a6:	429a      	cmp	r2, r3
 800d1a8:	d102      	bne.n	800d1b0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d1aa:	2301      	movs	r3, #1
 800d1ac:	60fb      	str	r3, [r7, #12]
 800d1ae:	e001      	b.n	800d1b4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d1b4:	f7fe ff8e 	bl	800c0d4 <vPortExitCritical>

	return xReturn;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
}
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	3710      	adds	r7, #16
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}
	...

0800d1c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d1c4:	b480      	push	{r7}
 800d1c6:	b085      	sub	sp, #20
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
 800d1cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	60fb      	str	r3, [r7, #12]
 800d1d2:	e014      	b.n	800d1fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d1d4:	4a0f      	ldr	r2, [pc, #60]	; (800d214 <vQueueAddToRegistry+0x50>)
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d10b      	bne.n	800d1f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d1e0:	490c      	ldr	r1, [pc, #48]	; (800d214 <vQueueAddToRegistry+0x50>)
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	683a      	ldr	r2, [r7, #0]
 800d1e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d1ea:	4a0a      	ldr	r2, [pc, #40]	; (800d214 <vQueueAddToRegistry+0x50>)
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	00db      	lsls	r3, r3, #3
 800d1f0:	4413      	add	r3, r2
 800d1f2:	687a      	ldr	r2, [r7, #4]
 800d1f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d1f6:	e006      	b.n	800d206 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	3301      	adds	r3, #1
 800d1fc:	60fb      	str	r3, [r7, #12]
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	2b07      	cmp	r3, #7
 800d202:	d9e7      	bls.n	800d1d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d204:	bf00      	nop
 800d206:	bf00      	nop
 800d208:	3714      	adds	r7, #20
 800d20a:	46bd      	mov	sp, r7
 800d20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d210:	4770      	bx	lr
 800d212:	bf00      	nop
 800d214:	2400a880 	.word	0x2400a880

0800d218 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d218:	b480      	push	{r7}
 800d21a:	b085      	sub	sp, #20
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d220:	2300      	movs	r3, #0
 800d222:	60fb      	str	r3, [r7, #12]
 800d224:	e016      	b.n	800d254 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d226:	4a10      	ldr	r2, [pc, #64]	; (800d268 <vQueueUnregisterQueue+0x50>)
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	00db      	lsls	r3, r3, #3
 800d22c:	4413      	add	r3, r2
 800d22e:	685b      	ldr	r3, [r3, #4]
 800d230:	687a      	ldr	r2, [r7, #4]
 800d232:	429a      	cmp	r2, r3
 800d234:	d10b      	bne.n	800d24e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d236:	4a0c      	ldr	r2, [pc, #48]	; (800d268 <vQueueUnregisterQueue+0x50>)
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	2100      	movs	r1, #0
 800d23c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d240:	4a09      	ldr	r2, [pc, #36]	; (800d268 <vQueueUnregisterQueue+0x50>)
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	00db      	lsls	r3, r3, #3
 800d246:	4413      	add	r3, r2
 800d248:	2200      	movs	r2, #0
 800d24a:	605a      	str	r2, [r3, #4]
				break;
 800d24c:	e006      	b.n	800d25c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	3301      	adds	r3, #1
 800d252:	60fb      	str	r3, [r7, #12]
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	2b07      	cmp	r3, #7
 800d258:	d9e5      	bls.n	800d226 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d25a:	bf00      	nop
 800d25c:	bf00      	nop
 800d25e:	3714      	adds	r7, #20
 800d260:	46bd      	mov	sp, r7
 800d262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d266:	4770      	bx	lr
 800d268:	2400a880 	.word	0x2400a880

0800d26c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b086      	sub	sp, #24
 800d270:	af00      	add	r7, sp, #0
 800d272:	60f8      	str	r0, [r7, #12]
 800d274:	60b9      	str	r1, [r7, #8]
 800d276:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d27c:	f7fe fefa 	bl	800c074 <vPortEnterCritical>
 800d280:	697b      	ldr	r3, [r7, #20]
 800d282:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d286:	b25b      	sxtb	r3, r3
 800d288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d28c:	d103      	bne.n	800d296 <vQueueWaitForMessageRestricted+0x2a>
 800d28e:	697b      	ldr	r3, [r7, #20]
 800d290:	2200      	movs	r2, #0
 800d292:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d296:	697b      	ldr	r3, [r7, #20]
 800d298:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d29c:	b25b      	sxtb	r3, r3
 800d29e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2a2:	d103      	bne.n	800d2ac <vQueueWaitForMessageRestricted+0x40>
 800d2a4:	697b      	ldr	r3, [r7, #20]
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d2ac:	f7fe ff12 	bl	800c0d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d2b0:	697b      	ldr	r3, [r7, #20]
 800d2b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d106      	bne.n	800d2c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d2b8:	697b      	ldr	r3, [r7, #20]
 800d2ba:	3324      	adds	r3, #36	; 0x24
 800d2bc:	687a      	ldr	r2, [r7, #4]
 800d2be:	68b9      	ldr	r1, [r7, #8]
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	f000 fc61 	bl	800db88 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d2c6:	6978      	ldr	r0, [r7, #20]
 800d2c8:	f7ff fefb 	bl	800d0c2 <prvUnlockQueue>
	}
 800d2cc:	bf00      	nop
 800d2ce:	3718      	adds	r7, #24
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	bd80      	pop	{r7, pc}

0800d2d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b08e      	sub	sp, #56	; 0x38
 800d2d8:	af04      	add	r7, sp, #16
 800d2da:	60f8      	str	r0, [r7, #12]
 800d2dc:	60b9      	str	r1, [r7, #8]
 800d2de:	607a      	str	r2, [r7, #4]
 800d2e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d2e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d10a      	bne.n	800d2fe <xTaskCreateStatic+0x2a>
	__asm volatile
 800d2e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ec:	f383 8811 	msr	BASEPRI, r3
 800d2f0:	f3bf 8f6f 	isb	sy
 800d2f4:	f3bf 8f4f 	dsb	sy
 800d2f8:	623b      	str	r3, [r7, #32]
}
 800d2fa:	bf00      	nop
 800d2fc:	e7fe      	b.n	800d2fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d2fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d300:	2b00      	cmp	r3, #0
 800d302:	d10a      	bne.n	800d31a <xTaskCreateStatic+0x46>
	__asm volatile
 800d304:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d308:	f383 8811 	msr	BASEPRI, r3
 800d30c:	f3bf 8f6f 	isb	sy
 800d310:	f3bf 8f4f 	dsb	sy
 800d314:	61fb      	str	r3, [r7, #28]
}
 800d316:	bf00      	nop
 800d318:	e7fe      	b.n	800d318 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d31a:	23a8      	movs	r3, #168	; 0xa8
 800d31c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d31e:	693b      	ldr	r3, [r7, #16]
 800d320:	2ba8      	cmp	r3, #168	; 0xa8
 800d322:	d00a      	beq.n	800d33a <xTaskCreateStatic+0x66>
	__asm volatile
 800d324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d328:	f383 8811 	msr	BASEPRI, r3
 800d32c:	f3bf 8f6f 	isb	sy
 800d330:	f3bf 8f4f 	dsb	sy
 800d334:	61bb      	str	r3, [r7, #24]
}
 800d336:	bf00      	nop
 800d338:	e7fe      	b.n	800d338 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d33a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d33c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d01e      	beq.n	800d380 <xTaskCreateStatic+0xac>
 800d342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d344:	2b00      	cmp	r3, #0
 800d346:	d01b      	beq.n	800d380 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d34a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d34e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d350:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d354:	2202      	movs	r2, #2
 800d356:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d35a:	2300      	movs	r3, #0
 800d35c:	9303      	str	r3, [sp, #12]
 800d35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d360:	9302      	str	r3, [sp, #8]
 800d362:	f107 0314 	add.w	r3, r7, #20
 800d366:	9301      	str	r3, [sp, #4]
 800d368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d36a:	9300      	str	r3, [sp, #0]
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	687a      	ldr	r2, [r7, #4]
 800d370:	68b9      	ldr	r1, [r7, #8]
 800d372:	68f8      	ldr	r0, [r7, #12]
 800d374:	f000 f850 	bl	800d418 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d378:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d37a:	f000 f8f3 	bl	800d564 <prvAddNewTaskToReadyList>
 800d37e:	e001      	b.n	800d384 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d380:	2300      	movs	r3, #0
 800d382:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d384:	697b      	ldr	r3, [r7, #20]
	}
 800d386:	4618      	mov	r0, r3
 800d388:	3728      	adds	r7, #40	; 0x28
 800d38a:	46bd      	mov	sp, r7
 800d38c:	bd80      	pop	{r7, pc}

0800d38e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d38e:	b580      	push	{r7, lr}
 800d390:	b08c      	sub	sp, #48	; 0x30
 800d392:	af04      	add	r7, sp, #16
 800d394:	60f8      	str	r0, [r7, #12]
 800d396:	60b9      	str	r1, [r7, #8]
 800d398:	603b      	str	r3, [r7, #0]
 800d39a:	4613      	mov	r3, r2
 800d39c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d39e:	88fb      	ldrh	r3, [r7, #6]
 800d3a0:	009b      	lsls	r3, r3, #2
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	f7fe fa9c 	bl	800b8e0 <pvPortMalloc>
 800d3a8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d3aa:	697b      	ldr	r3, [r7, #20]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d00e      	beq.n	800d3ce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d3b0:	20a8      	movs	r0, #168	; 0xa8
 800d3b2:	f7fe fa95 	bl	800b8e0 <pvPortMalloc>
 800d3b6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d3b8:	69fb      	ldr	r3, [r7, #28]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d003      	beq.n	800d3c6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d3be:	69fb      	ldr	r3, [r7, #28]
 800d3c0:	697a      	ldr	r2, [r7, #20]
 800d3c2:	631a      	str	r2, [r3, #48]	; 0x30
 800d3c4:	e005      	b.n	800d3d2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d3c6:	6978      	ldr	r0, [r7, #20]
 800d3c8:	f7fe fb56 	bl	800ba78 <vPortFree>
 800d3cc:	e001      	b.n	800d3d2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d3d2:	69fb      	ldr	r3, [r7, #28]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d017      	beq.n	800d408 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d3d8:	69fb      	ldr	r3, [r7, #28]
 800d3da:	2200      	movs	r2, #0
 800d3dc:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d3e0:	88fa      	ldrh	r2, [r7, #6]
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	9303      	str	r3, [sp, #12]
 800d3e6:	69fb      	ldr	r3, [r7, #28]
 800d3e8:	9302      	str	r3, [sp, #8]
 800d3ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ec:	9301      	str	r3, [sp, #4]
 800d3ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3f0:	9300      	str	r3, [sp, #0]
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	68b9      	ldr	r1, [r7, #8]
 800d3f6:	68f8      	ldr	r0, [r7, #12]
 800d3f8:	f000 f80e 	bl	800d418 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d3fc:	69f8      	ldr	r0, [r7, #28]
 800d3fe:	f000 f8b1 	bl	800d564 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d402:	2301      	movs	r3, #1
 800d404:	61bb      	str	r3, [r7, #24]
 800d406:	e002      	b.n	800d40e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d408:	f04f 33ff 	mov.w	r3, #4294967295
 800d40c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d40e:	69bb      	ldr	r3, [r7, #24]
	}
 800d410:	4618      	mov	r0, r3
 800d412:	3720      	adds	r7, #32
 800d414:	46bd      	mov	sp, r7
 800d416:	bd80      	pop	{r7, pc}

0800d418 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b088      	sub	sp, #32
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	60f8      	str	r0, [r7, #12]
 800d420:	60b9      	str	r1, [r7, #8]
 800d422:	607a      	str	r2, [r7, #4]
 800d424:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d428:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	009b      	lsls	r3, r3, #2
 800d42e:	461a      	mov	r2, r3
 800d430:	21a5      	movs	r1, #165	; 0xa5
 800d432:	f01f fb20 	bl	802ca76 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d438:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d43a:	6879      	ldr	r1, [r7, #4]
 800d43c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800d440:	440b      	add	r3, r1
 800d442:	009b      	lsls	r3, r3, #2
 800d444:	4413      	add	r3, r2
 800d446:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d448:	69bb      	ldr	r3, [r7, #24]
 800d44a:	f023 0307 	bic.w	r3, r3, #7
 800d44e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d450:	69bb      	ldr	r3, [r7, #24]
 800d452:	f003 0307 	and.w	r3, r3, #7
 800d456:	2b00      	cmp	r3, #0
 800d458:	d00a      	beq.n	800d470 <prvInitialiseNewTask+0x58>
	__asm volatile
 800d45a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d45e:	f383 8811 	msr	BASEPRI, r3
 800d462:	f3bf 8f6f 	isb	sy
 800d466:	f3bf 8f4f 	dsb	sy
 800d46a:	617b      	str	r3, [r7, #20]
}
 800d46c:	bf00      	nop
 800d46e:	e7fe      	b.n	800d46e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d470:	68bb      	ldr	r3, [r7, #8]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d01f      	beq.n	800d4b6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d476:	2300      	movs	r3, #0
 800d478:	61fb      	str	r3, [r7, #28]
 800d47a:	e012      	b.n	800d4a2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d47c:	68ba      	ldr	r2, [r7, #8]
 800d47e:	69fb      	ldr	r3, [r7, #28]
 800d480:	4413      	add	r3, r2
 800d482:	7819      	ldrb	r1, [r3, #0]
 800d484:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d486:	69fb      	ldr	r3, [r7, #28]
 800d488:	4413      	add	r3, r2
 800d48a:	3334      	adds	r3, #52	; 0x34
 800d48c:	460a      	mov	r2, r1
 800d48e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d490:	68ba      	ldr	r2, [r7, #8]
 800d492:	69fb      	ldr	r3, [r7, #28]
 800d494:	4413      	add	r3, r2
 800d496:	781b      	ldrb	r3, [r3, #0]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d006      	beq.n	800d4aa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d49c:	69fb      	ldr	r3, [r7, #28]
 800d49e:	3301      	adds	r3, #1
 800d4a0:	61fb      	str	r3, [r7, #28]
 800d4a2:	69fb      	ldr	r3, [r7, #28]
 800d4a4:	2b0f      	cmp	r3, #15
 800d4a6:	d9e9      	bls.n	800d47c <prvInitialiseNewTask+0x64>
 800d4a8:	e000      	b.n	800d4ac <prvInitialiseNewTask+0x94>
			{
				break;
 800d4aa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d4ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d4b4:	e003      	b.n	800d4be <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4c0:	2b37      	cmp	r3, #55	; 0x37
 800d4c2:	d901      	bls.n	800d4c8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d4c4:	2337      	movs	r3, #55	; 0x37
 800d4c6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d4c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d4cc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d4d2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d4d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4dc:	3304      	adds	r3, #4
 800d4de:	4618      	mov	r0, r3
 800d4e0:	f7fe fc08 	bl	800bcf4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d4e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4e6:	3318      	adds	r3, #24
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	f7fe fc03 	bl	800bcf4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d4f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d4fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d502:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d506:	2200      	movs	r2, #0
 800d508:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d50c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d50e:	2200      	movs	r2, #0
 800d510:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d516:	3354      	adds	r3, #84	; 0x54
 800d518:	224c      	movs	r2, #76	; 0x4c
 800d51a:	2100      	movs	r1, #0
 800d51c:	4618      	mov	r0, r3
 800d51e:	f01f faaa 	bl	802ca76 <memset>
 800d522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d524:	4a0c      	ldr	r2, [pc, #48]	; (800d558 <prvInitialiseNewTask+0x140>)
 800d526:	659a      	str	r2, [r3, #88]	; 0x58
 800d528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d52a:	4a0c      	ldr	r2, [pc, #48]	; (800d55c <prvInitialiseNewTask+0x144>)
 800d52c:	65da      	str	r2, [r3, #92]	; 0x5c
 800d52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d530:	4a0b      	ldr	r2, [pc, #44]	; (800d560 <prvInitialiseNewTask+0x148>)
 800d532:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d534:	683a      	ldr	r2, [r7, #0]
 800d536:	68f9      	ldr	r1, [r7, #12]
 800d538:	69b8      	ldr	r0, [r7, #24]
 800d53a:	f7fe fc6f 	bl	800be1c <pxPortInitialiseStack>
 800d53e:	4602      	mov	r2, r0
 800d540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d542:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d546:	2b00      	cmp	r3, #0
 800d548:	d002      	beq.n	800d550 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d54a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d54c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d54e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d550:	bf00      	nop
 800d552:	3720      	adds	r7, #32
 800d554:	46bd      	mov	sp, r7
 800d556:	bd80      	pop	{r7, pc}
 800d558:	2400c444 	.word	0x2400c444
 800d55c:	2400c4ac 	.word	0x2400c4ac
 800d560:	2400c514 	.word	0x2400c514

0800d564 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b082      	sub	sp, #8
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d56c:	f7fe fd82 	bl	800c074 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d570:	4b2d      	ldr	r3, [pc, #180]	; (800d628 <prvAddNewTaskToReadyList+0xc4>)
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	3301      	adds	r3, #1
 800d576:	4a2c      	ldr	r2, [pc, #176]	; (800d628 <prvAddNewTaskToReadyList+0xc4>)
 800d578:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d57a:	4b2c      	ldr	r3, [pc, #176]	; (800d62c <prvAddNewTaskToReadyList+0xc8>)
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d109      	bne.n	800d596 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d582:	4a2a      	ldr	r2, [pc, #168]	; (800d62c <prvAddNewTaskToReadyList+0xc8>)
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d588:	4b27      	ldr	r3, [pc, #156]	; (800d628 <prvAddNewTaskToReadyList+0xc4>)
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	2b01      	cmp	r3, #1
 800d58e:	d110      	bne.n	800d5b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d590:	f000 fc26 	bl	800dde0 <prvInitialiseTaskLists>
 800d594:	e00d      	b.n	800d5b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d596:	4b26      	ldr	r3, [pc, #152]	; (800d630 <prvAddNewTaskToReadyList+0xcc>)
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d109      	bne.n	800d5b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d59e:	4b23      	ldr	r3, [pc, #140]	; (800d62c <prvAddNewTaskToReadyList+0xc8>)
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5a8:	429a      	cmp	r2, r3
 800d5aa:	d802      	bhi.n	800d5b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d5ac:	4a1f      	ldr	r2, [pc, #124]	; (800d62c <prvAddNewTaskToReadyList+0xc8>)
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d5b2:	4b20      	ldr	r3, [pc, #128]	; (800d634 <prvAddNewTaskToReadyList+0xd0>)
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	3301      	adds	r3, #1
 800d5b8:	4a1e      	ldr	r2, [pc, #120]	; (800d634 <prvAddNewTaskToReadyList+0xd0>)
 800d5ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d5bc:	4b1d      	ldr	r3, [pc, #116]	; (800d634 <prvAddNewTaskToReadyList+0xd0>)
 800d5be:	681a      	ldr	r2, [r3, #0]
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5c8:	4b1b      	ldr	r3, [pc, #108]	; (800d638 <prvAddNewTaskToReadyList+0xd4>)
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	429a      	cmp	r2, r3
 800d5ce:	d903      	bls.n	800d5d8 <prvAddNewTaskToReadyList+0x74>
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5d4:	4a18      	ldr	r2, [pc, #96]	; (800d638 <prvAddNewTaskToReadyList+0xd4>)
 800d5d6:	6013      	str	r3, [r2, #0]
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5dc:	4613      	mov	r3, r2
 800d5de:	009b      	lsls	r3, r3, #2
 800d5e0:	4413      	add	r3, r2
 800d5e2:	009b      	lsls	r3, r3, #2
 800d5e4:	4a15      	ldr	r2, [pc, #84]	; (800d63c <prvAddNewTaskToReadyList+0xd8>)
 800d5e6:	441a      	add	r2, r3
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	3304      	adds	r3, #4
 800d5ec:	4619      	mov	r1, r3
 800d5ee:	4610      	mov	r0, r2
 800d5f0:	f7fe fb8d 	bl	800bd0e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d5f4:	f7fe fd6e 	bl	800c0d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d5f8:	4b0d      	ldr	r3, [pc, #52]	; (800d630 <prvAddNewTaskToReadyList+0xcc>)
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d00e      	beq.n	800d61e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d600:	4b0a      	ldr	r3, [pc, #40]	; (800d62c <prvAddNewTaskToReadyList+0xc8>)
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d60a:	429a      	cmp	r2, r3
 800d60c:	d207      	bcs.n	800d61e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d60e:	4b0c      	ldr	r3, [pc, #48]	; (800d640 <prvAddNewTaskToReadyList+0xdc>)
 800d610:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d614:	601a      	str	r2, [r3, #0]
 800d616:	f3bf 8f4f 	dsb	sy
 800d61a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d61e:	bf00      	nop
 800d620:	3708      	adds	r7, #8
 800d622:	46bd      	mov	sp, r7
 800d624:	bd80      	pop	{r7, pc}
 800d626:	bf00      	nop
 800d628:	2400ad94 	.word	0x2400ad94
 800d62c:	2400a8c0 	.word	0x2400a8c0
 800d630:	2400ada0 	.word	0x2400ada0
 800d634:	2400adb0 	.word	0x2400adb0
 800d638:	2400ad9c 	.word	0x2400ad9c
 800d63c:	2400a8c4 	.word	0x2400a8c4
 800d640:	e000ed04 	.word	0xe000ed04

0800d644 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d644:	b580      	push	{r7, lr}
 800d646:	b084      	sub	sp, #16
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d64c:	2300      	movs	r3, #0
 800d64e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d017      	beq.n	800d686 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d656:	4b13      	ldr	r3, [pc, #76]	; (800d6a4 <vTaskDelay+0x60>)
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d00a      	beq.n	800d674 <vTaskDelay+0x30>
	__asm volatile
 800d65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d662:	f383 8811 	msr	BASEPRI, r3
 800d666:	f3bf 8f6f 	isb	sy
 800d66a:	f3bf 8f4f 	dsb	sy
 800d66e:	60bb      	str	r3, [r7, #8]
}
 800d670:	bf00      	nop
 800d672:	e7fe      	b.n	800d672 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d674:	f000 f88a 	bl	800d78c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d678:	2100      	movs	r1, #0
 800d67a:	6878      	ldr	r0, [r7, #4]
 800d67c:	f000 fdfc 	bl	800e278 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d680:	f000 f892 	bl	800d7a8 <xTaskResumeAll>
 800d684:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d107      	bne.n	800d69c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d68c:	4b06      	ldr	r3, [pc, #24]	; (800d6a8 <vTaskDelay+0x64>)
 800d68e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d692:	601a      	str	r2, [r3, #0]
 800d694:	f3bf 8f4f 	dsb	sy
 800d698:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d69c:	bf00      	nop
 800d69e:	3710      	adds	r7, #16
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	bd80      	pop	{r7, pc}
 800d6a4:	2400adbc 	.word	0x2400adbc
 800d6a8:	e000ed04 	.word	0xe000ed04

0800d6ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b08a      	sub	sp, #40	; 0x28
 800d6b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d6ba:	463a      	mov	r2, r7
 800d6bc:	1d39      	adds	r1, r7, #4
 800d6be:	f107 0308 	add.w	r3, r7, #8
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	f7fe f8d8 	bl	800b878 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d6c8:	6839      	ldr	r1, [r7, #0]
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	68ba      	ldr	r2, [r7, #8]
 800d6ce:	9202      	str	r2, [sp, #8]
 800d6d0:	9301      	str	r3, [sp, #4]
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	9300      	str	r3, [sp, #0]
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	460a      	mov	r2, r1
 800d6da:	4924      	ldr	r1, [pc, #144]	; (800d76c <vTaskStartScheduler+0xc0>)
 800d6dc:	4824      	ldr	r0, [pc, #144]	; (800d770 <vTaskStartScheduler+0xc4>)
 800d6de:	f7ff fdf9 	bl	800d2d4 <xTaskCreateStatic>
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	4a23      	ldr	r2, [pc, #140]	; (800d774 <vTaskStartScheduler+0xc8>)
 800d6e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d6e8:	4b22      	ldr	r3, [pc, #136]	; (800d774 <vTaskStartScheduler+0xc8>)
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d002      	beq.n	800d6f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d6f0:	2301      	movs	r3, #1
 800d6f2:	617b      	str	r3, [r7, #20]
 800d6f4:	e001      	b.n	800d6fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d6fa:	697b      	ldr	r3, [r7, #20]
 800d6fc:	2b01      	cmp	r3, #1
 800d6fe:	d102      	bne.n	800d706 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d700:	f000 fe0e 	bl	800e320 <xTimerCreateTimerTask>
 800d704:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d706:	697b      	ldr	r3, [r7, #20]
 800d708:	2b01      	cmp	r3, #1
 800d70a:	d11b      	bne.n	800d744 <vTaskStartScheduler+0x98>
	__asm volatile
 800d70c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d710:	f383 8811 	msr	BASEPRI, r3
 800d714:	f3bf 8f6f 	isb	sy
 800d718:	f3bf 8f4f 	dsb	sy
 800d71c:	613b      	str	r3, [r7, #16]
}
 800d71e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d720:	4b15      	ldr	r3, [pc, #84]	; (800d778 <vTaskStartScheduler+0xcc>)
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	3354      	adds	r3, #84	; 0x54
 800d726:	4a15      	ldr	r2, [pc, #84]	; (800d77c <vTaskStartScheduler+0xd0>)
 800d728:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d72a:	4b15      	ldr	r3, [pc, #84]	; (800d780 <vTaskStartScheduler+0xd4>)
 800d72c:	f04f 32ff 	mov.w	r2, #4294967295
 800d730:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d732:	4b14      	ldr	r3, [pc, #80]	; (800d784 <vTaskStartScheduler+0xd8>)
 800d734:	2201      	movs	r2, #1
 800d736:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d738:	4b13      	ldr	r3, [pc, #76]	; (800d788 <vTaskStartScheduler+0xdc>)
 800d73a:	2200      	movs	r2, #0
 800d73c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d73e:	f7fe fbf7 	bl	800bf30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d742:	e00e      	b.n	800d762 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d744:	697b      	ldr	r3, [r7, #20]
 800d746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d74a:	d10a      	bne.n	800d762 <vTaskStartScheduler+0xb6>
	__asm volatile
 800d74c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d750:	f383 8811 	msr	BASEPRI, r3
 800d754:	f3bf 8f6f 	isb	sy
 800d758:	f3bf 8f4f 	dsb	sy
 800d75c:	60fb      	str	r3, [r7, #12]
}
 800d75e:	bf00      	nop
 800d760:	e7fe      	b.n	800d760 <vTaskStartScheduler+0xb4>
}
 800d762:	bf00      	nop
 800d764:	3718      	adds	r7, #24
 800d766:	46bd      	mov	sp, r7
 800d768:	bd80      	pop	{r7, pc}
 800d76a:	bf00      	nop
 800d76c:	0802e594 	.word	0x0802e594
 800d770:	0800ddb1 	.word	0x0800ddb1
 800d774:	2400adb8 	.word	0x2400adb8
 800d778:	2400a8c0 	.word	0x2400a8c0
 800d77c:	2400012c 	.word	0x2400012c
 800d780:	2400adb4 	.word	0x2400adb4
 800d784:	2400ada0 	.word	0x2400ada0
 800d788:	2400ad98 	.word	0x2400ad98

0800d78c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d78c:	b480      	push	{r7}
 800d78e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d790:	4b04      	ldr	r3, [pc, #16]	; (800d7a4 <vTaskSuspendAll+0x18>)
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	3301      	adds	r3, #1
 800d796:	4a03      	ldr	r2, [pc, #12]	; (800d7a4 <vTaskSuspendAll+0x18>)
 800d798:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d79a:	bf00      	nop
 800d79c:	46bd      	mov	sp, r7
 800d79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a2:	4770      	bx	lr
 800d7a4:	2400adbc 	.word	0x2400adbc

0800d7a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b084      	sub	sp, #16
 800d7ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d7b6:	4b42      	ldr	r3, [pc, #264]	; (800d8c0 <xTaskResumeAll+0x118>)
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d10a      	bne.n	800d7d4 <xTaskResumeAll+0x2c>
	__asm volatile
 800d7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7c2:	f383 8811 	msr	BASEPRI, r3
 800d7c6:	f3bf 8f6f 	isb	sy
 800d7ca:	f3bf 8f4f 	dsb	sy
 800d7ce:	603b      	str	r3, [r7, #0]
}
 800d7d0:	bf00      	nop
 800d7d2:	e7fe      	b.n	800d7d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d7d4:	f7fe fc4e 	bl	800c074 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d7d8:	4b39      	ldr	r3, [pc, #228]	; (800d8c0 <xTaskResumeAll+0x118>)
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	3b01      	subs	r3, #1
 800d7de:	4a38      	ldr	r2, [pc, #224]	; (800d8c0 <xTaskResumeAll+0x118>)
 800d7e0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d7e2:	4b37      	ldr	r3, [pc, #220]	; (800d8c0 <xTaskResumeAll+0x118>)
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d162      	bne.n	800d8b0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d7ea:	4b36      	ldr	r3, [pc, #216]	; (800d8c4 <xTaskResumeAll+0x11c>)
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d05e      	beq.n	800d8b0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d7f2:	e02f      	b.n	800d854 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7f4:	4b34      	ldr	r3, [pc, #208]	; (800d8c8 <xTaskResumeAll+0x120>)
 800d7f6:	68db      	ldr	r3, [r3, #12]
 800d7f8:	68db      	ldr	r3, [r3, #12]
 800d7fa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	3318      	adds	r3, #24
 800d800:	4618      	mov	r0, r3
 800d802:	f7fe fae1 	bl	800bdc8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	3304      	adds	r3, #4
 800d80a:	4618      	mov	r0, r3
 800d80c:	f7fe fadc 	bl	800bdc8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d814:	4b2d      	ldr	r3, [pc, #180]	; (800d8cc <xTaskResumeAll+0x124>)
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	429a      	cmp	r2, r3
 800d81a:	d903      	bls.n	800d824 <xTaskResumeAll+0x7c>
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d820:	4a2a      	ldr	r2, [pc, #168]	; (800d8cc <xTaskResumeAll+0x124>)
 800d822:	6013      	str	r3, [r2, #0]
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d828:	4613      	mov	r3, r2
 800d82a:	009b      	lsls	r3, r3, #2
 800d82c:	4413      	add	r3, r2
 800d82e:	009b      	lsls	r3, r3, #2
 800d830:	4a27      	ldr	r2, [pc, #156]	; (800d8d0 <xTaskResumeAll+0x128>)
 800d832:	441a      	add	r2, r3
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	3304      	adds	r3, #4
 800d838:	4619      	mov	r1, r3
 800d83a:	4610      	mov	r0, r2
 800d83c:	f7fe fa67 	bl	800bd0e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d844:	4b23      	ldr	r3, [pc, #140]	; (800d8d4 <xTaskResumeAll+0x12c>)
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d84a:	429a      	cmp	r2, r3
 800d84c:	d302      	bcc.n	800d854 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d84e:	4b22      	ldr	r3, [pc, #136]	; (800d8d8 <xTaskResumeAll+0x130>)
 800d850:	2201      	movs	r2, #1
 800d852:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d854:	4b1c      	ldr	r3, [pc, #112]	; (800d8c8 <xTaskResumeAll+0x120>)
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d1cb      	bne.n	800d7f4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d001      	beq.n	800d866 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d862:	f000 fb5f 	bl	800df24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d866:	4b1d      	ldr	r3, [pc, #116]	; (800d8dc <xTaskResumeAll+0x134>)
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d010      	beq.n	800d894 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d872:	f000 f847 	bl	800d904 <xTaskIncrementTick>
 800d876:	4603      	mov	r3, r0
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d002      	beq.n	800d882 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d87c:	4b16      	ldr	r3, [pc, #88]	; (800d8d8 <xTaskResumeAll+0x130>)
 800d87e:	2201      	movs	r2, #1
 800d880:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	3b01      	subs	r3, #1
 800d886:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d1f1      	bne.n	800d872 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d88e:	4b13      	ldr	r3, [pc, #76]	; (800d8dc <xTaskResumeAll+0x134>)
 800d890:	2200      	movs	r2, #0
 800d892:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d894:	4b10      	ldr	r3, [pc, #64]	; (800d8d8 <xTaskResumeAll+0x130>)
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d009      	beq.n	800d8b0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d89c:	2301      	movs	r3, #1
 800d89e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d8a0:	4b0f      	ldr	r3, [pc, #60]	; (800d8e0 <xTaskResumeAll+0x138>)
 800d8a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8a6:	601a      	str	r2, [r3, #0]
 800d8a8:	f3bf 8f4f 	dsb	sy
 800d8ac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d8b0:	f7fe fc10 	bl	800c0d4 <vPortExitCritical>

	return xAlreadyYielded;
 800d8b4:	68bb      	ldr	r3, [r7, #8]
}
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	3710      	adds	r7, #16
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	bd80      	pop	{r7, pc}
 800d8be:	bf00      	nop
 800d8c0:	2400adbc 	.word	0x2400adbc
 800d8c4:	2400ad94 	.word	0x2400ad94
 800d8c8:	2400ad54 	.word	0x2400ad54
 800d8cc:	2400ad9c 	.word	0x2400ad9c
 800d8d0:	2400a8c4 	.word	0x2400a8c4
 800d8d4:	2400a8c0 	.word	0x2400a8c0
 800d8d8:	2400ada8 	.word	0x2400ada8
 800d8dc:	2400ada4 	.word	0x2400ada4
 800d8e0:	e000ed04 	.word	0xe000ed04

0800d8e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d8e4:	b480      	push	{r7}
 800d8e6:	b083      	sub	sp, #12
 800d8e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d8ea:	4b05      	ldr	r3, [pc, #20]	; (800d900 <xTaskGetTickCount+0x1c>)
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d8f0:	687b      	ldr	r3, [r7, #4]
}
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	370c      	adds	r7, #12
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fc:	4770      	bx	lr
 800d8fe:	bf00      	nop
 800d900:	2400ad98 	.word	0x2400ad98

0800d904 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b086      	sub	sp, #24
 800d908:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d90a:	2300      	movs	r3, #0
 800d90c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d90e:	4b4f      	ldr	r3, [pc, #316]	; (800da4c <xTaskIncrementTick+0x148>)
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	2b00      	cmp	r3, #0
 800d914:	f040 808f 	bne.w	800da36 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d918:	4b4d      	ldr	r3, [pc, #308]	; (800da50 <xTaskIncrementTick+0x14c>)
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	3301      	adds	r3, #1
 800d91e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d920:	4a4b      	ldr	r2, [pc, #300]	; (800da50 <xTaskIncrementTick+0x14c>)
 800d922:	693b      	ldr	r3, [r7, #16]
 800d924:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d926:	693b      	ldr	r3, [r7, #16]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d120      	bne.n	800d96e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d92c:	4b49      	ldr	r3, [pc, #292]	; (800da54 <xTaskIncrementTick+0x150>)
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d00a      	beq.n	800d94c <xTaskIncrementTick+0x48>
	__asm volatile
 800d936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d93a:	f383 8811 	msr	BASEPRI, r3
 800d93e:	f3bf 8f6f 	isb	sy
 800d942:	f3bf 8f4f 	dsb	sy
 800d946:	603b      	str	r3, [r7, #0]
}
 800d948:	bf00      	nop
 800d94a:	e7fe      	b.n	800d94a <xTaskIncrementTick+0x46>
 800d94c:	4b41      	ldr	r3, [pc, #260]	; (800da54 <xTaskIncrementTick+0x150>)
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	60fb      	str	r3, [r7, #12]
 800d952:	4b41      	ldr	r3, [pc, #260]	; (800da58 <xTaskIncrementTick+0x154>)
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	4a3f      	ldr	r2, [pc, #252]	; (800da54 <xTaskIncrementTick+0x150>)
 800d958:	6013      	str	r3, [r2, #0]
 800d95a:	4a3f      	ldr	r2, [pc, #252]	; (800da58 <xTaskIncrementTick+0x154>)
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	6013      	str	r3, [r2, #0]
 800d960:	4b3e      	ldr	r3, [pc, #248]	; (800da5c <xTaskIncrementTick+0x158>)
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	3301      	adds	r3, #1
 800d966:	4a3d      	ldr	r2, [pc, #244]	; (800da5c <xTaskIncrementTick+0x158>)
 800d968:	6013      	str	r3, [r2, #0]
 800d96a:	f000 fadb 	bl	800df24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d96e:	4b3c      	ldr	r3, [pc, #240]	; (800da60 <xTaskIncrementTick+0x15c>)
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	693a      	ldr	r2, [r7, #16]
 800d974:	429a      	cmp	r2, r3
 800d976:	d349      	bcc.n	800da0c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d978:	4b36      	ldr	r3, [pc, #216]	; (800da54 <xTaskIncrementTick+0x150>)
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d104      	bne.n	800d98c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d982:	4b37      	ldr	r3, [pc, #220]	; (800da60 <xTaskIncrementTick+0x15c>)
 800d984:	f04f 32ff 	mov.w	r2, #4294967295
 800d988:	601a      	str	r2, [r3, #0]
					break;
 800d98a:	e03f      	b.n	800da0c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d98c:	4b31      	ldr	r3, [pc, #196]	; (800da54 <xTaskIncrementTick+0x150>)
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	68db      	ldr	r3, [r3, #12]
 800d992:	68db      	ldr	r3, [r3, #12]
 800d994:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d996:	68bb      	ldr	r3, [r7, #8]
 800d998:	685b      	ldr	r3, [r3, #4]
 800d99a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d99c:	693a      	ldr	r2, [r7, #16]
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	429a      	cmp	r2, r3
 800d9a2:	d203      	bcs.n	800d9ac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d9a4:	4a2e      	ldr	r2, [pc, #184]	; (800da60 <xTaskIncrementTick+0x15c>)
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d9aa:	e02f      	b.n	800da0c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d9ac:	68bb      	ldr	r3, [r7, #8]
 800d9ae:	3304      	adds	r3, #4
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	f7fe fa09 	bl	800bdc8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d9b6:	68bb      	ldr	r3, [r7, #8]
 800d9b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d004      	beq.n	800d9c8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d9be:	68bb      	ldr	r3, [r7, #8]
 800d9c0:	3318      	adds	r3, #24
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f7fe fa00 	bl	800bdc8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d9c8:	68bb      	ldr	r3, [r7, #8]
 800d9ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9cc:	4b25      	ldr	r3, [pc, #148]	; (800da64 <xTaskIncrementTick+0x160>)
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	429a      	cmp	r2, r3
 800d9d2:	d903      	bls.n	800d9dc <xTaskIncrementTick+0xd8>
 800d9d4:	68bb      	ldr	r3, [r7, #8]
 800d9d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9d8:	4a22      	ldr	r2, [pc, #136]	; (800da64 <xTaskIncrementTick+0x160>)
 800d9da:	6013      	str	r3, [r2, #0]
 800d9dc:	68bb      	ldr	r3, [r7, #8]
 800d9de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9e0:	4613      	mov	r3, r2
 800d9e2:	009b      	lsls	r3, r3, #2
 800d9e4:	4413      	add	r3, r2
 800d9e6:	009b      	lsls	r3, r3, #2
 800d9e8:	4a1f      	ldr	r2, [pc, #124]	; (800da68 <xTaskIncrementTick+0x164>)
 800d9ea:	441a      	add	r2, r3
 800d9ec:	68bb      	ldr	r3, [r7, #8]
 800d9ee:	3304      	adds	r3, #4
 800d9f0:	4619      	mov	r1, r3
 800d9f2:	4610      	mov	r0, r2
 800d9f4:	f7fe f98b 	bl	800bd0e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d9f8:	68bb      	ldr	r3, [r7, #8]
 800d9fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9fc:	4b1b      	ldr	r3, [pc, #108]	; (800da6c <xTaskIncrementTick+0x168>)
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da02:	429a      	cmp	r2, r3
 800da04:	d3b8      	bcc.n	800d978 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800da06:	2301      	movs	r3, #1
 800da08:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800da0a:	e7b5      	b.n	800d978 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800da0c:	4b17      	ldr	r3, [pc, #92]	; (800da6c <xTaskIncrementTick+0x168>)
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da12:	4915      	ldr	r1, [pc, #84]	; (800da68 <xTaskIncrementTick+0x164>)
 800da14:	4613      	mov	r3, r2
 800da16:	009b      	lsls	r3, r3, #2
 800da18:	4413      	add	r3, r2
 800da1a:	009b      	lsls	r3, r3, #2
 800da1c:	440b      	add	r3, r1
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	2b01      	cmp	r3, #1
 800da22:	d901      	bls.n	800da28 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800da24:	2301      	movs	r3, #1
 800da26:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800da28:	4b11      	ldr	r3, [pc, #68]	; (800da70 <xTaskIncrementTick+0x16c>)
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d007      	beq.n	800da40 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800da30:	2301      	movs	r3, #1
 800da32:	617b      	str	r3, [r7, #20]
 800da34:	e004      	b.n	800da40 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800da36:	4b0f      	ldr	r3, [pc, #60]	; (800da74 <xTaskIncrementTick+0x170>)
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	3301      	adds	r3, #1
 800da3c:	4a0d      	ldr	r2, [pc, #52]	; (800da74 <xTaskIncrementTick+0x170>)
 800da3e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800da40:	697b      	ldr	r3, [r7, #20]
}
 800da42:	4618      	mov	r0, r3
 800da44:	3718      	adds	r7, #24
 800da46:	46bd      	mov	sp, r7
 800da48:	bd80      	pop	{r7, pc}
 800da4a:	bf00      	nop
 800da4c:	2400adbc 	.word	0x2400adbc
 800da50:	2400ad98 	.word	0x2400ad98
 800da54:	2400ad4c 	.word	0x2400ad4c
 800da58:	2400ad50 	.word	0x2400ad50
 800da5c:	2400adac 	.word	0x2400adac
 800da60:	2400adb4 	.word	0x2400adb4
 800da64:	2400ad9c 	.word	0x2400ad9c
 800da68:	2400a8c4 	.word	0x2400a8c4
 800da6c:	2400a8c0 	.word	0x2400a8c0
 800da70:	2400ada8 	.word	0x2400ada8
 800da74:	2400ada4 	.word	0x2400ada4

0800da78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800da78:	b480      	push	{r7}
 800da7a:	b085      	sub	sp, #20
 800da7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800da7e:	4b2a      	ldr	r3, [pc, #168]	; (800db28 <vTaskSwitchContext+0xb0>)
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d003      	beq.n	800da8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800da86:	4b29      	ldr	r3, [pc, #164]	; (800db2c <vTaskSwitchContext+0xb4>)
 800da88:	2201      	movs	r2, #1
 800da8a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800da8c:	e046      	b.n	800db1c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800da8e:	4b27      	ldr	r3, [pc, #156]	; (800db2c <vTaskSwitchContext+0xb4>)
 800da90:	2200      	movs	r2, #0
 800da92:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da94:	4b26      	ldr	r3, [pc, #152]	; (800db30 <vTaskSwitchContext+0xb8>)
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	60fb      	str	r3, [r7, #12]
 800da9a:	e010      	b.n	800dabe <vTaskSwitchContext+0x46>
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d10a      	bne.n	800dab8 <vTaskSwitchContext+0x40>
	__asm volatile
 800daa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daa6:	f383 8811 	msr	BASEPRI, r3
 800daaa:	f3bf 8f6f 	isb	sy
 800daae:	f3bf 8f4f 	dsb	sy
 800dab2:	607b      	str	r3, [r7, #4]
}
 800dab4:	bf00      	nop
 800dab6:	e7fe      	b.n	800dab6 <vTaskSwitchContext+0x3e>
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	3b01      	subs	r3, #1
 800dabc:	60fb      	str	r3, [r7, #12]
 800dabe:	491d      	ldr	r1, [pc, #116]	; (800db34 <vTaskSwitchContext+0xbc>)
 800dac0:	68fa      	ldr	r2, [r7, #12]
 800dac2:	4613      	mov	r3, r2
 800dac4:	009b      	lsls	r3, r3, #2
 800dac6:	4413      	add	r3, r2
 800dac8:	009b      	lsls	r3, r3, #2
 800daca:	440b      	add	r3, r1
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d0e4      	beq.n	800da9c <vTaskSwitchContext+0x24>
 800dad2:	68fa      	ldr	r2, [r7, #12]
 800dad4:	4613      	mov	r3, r2
 800dad6:	009b      	lsls	r3, r3, #2
 800dad8:	4413      	add	r3, r2
 800dada:	009b      	lsls	r3, r3, #2
 800dadc:	4a15      	ldr	r2, [pc, #84]	; (800db34 <vTaskSwitchContext+0xbc>)
 800dade:	4413      	add	r3, r2
 800dae0:	60bb      	str	r3, [r7, #8]
 800dae2:	68bb      	ldr	r3, [r7, #8]
 800dae4:	685b      	ldr	r3, [r3, #4]
 800dae6:	685a      	ldr	r2, [r3, #4]
 800dae8:	68bb      	ldr	r3, [r7, #8]
 800daea:	605a      	str	r2, [r3, #4]
 800daec:	68bb      	ldr	r3, [r7, #8]
 800daee:	685a      	ldr	r2, [r3, #4]
 800daf0:	68bb      	ldr	r3, [r7, #8]
 800daf2:	3308      	adds	r3, #8
 800daf4:	429a      	cmp	r2, r3
 800daf6:	d104      	bne.n	800db02 <vTaskSwitchContext+0x8a>
 800daf8:	68bb      	ldr	r3, [r7, #8]
 800dafa:	685b      	ldr	r3, [r3, #4]
 800dafc:	685a      	ldr	r2, [r3, #4]
 800dafe:	68bb      	ldr	r3, [r7, #8]
 800db00:	605a      	str	r2, [r3, #4]
 800db02:	68bb      	ldr	r3, [r7, #8]
 800db04:	685b      	ldr	r3, [r3, #4]
 800db06:	68db      	ldr	r3, [r3, #12]
 800db08:	4a0b      	ldr	r2, [pc, #44]	; (800db38 <vTaskSwitchContext+0xc0>)
 800db0a:	6013      	str	r3, [r2, #0]
 800db0c:	4a08      	ldr	r2, [pc, #32]	; (800db30 <vTaskSwitchContext+0xb8>)
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800db12:	4b09      	ldr	r3, [pc, #36]	; (800db38 <vTaskSwitchContext+0xc0>)
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	3354      	adds	r3, #84	; 0x54
 800db18:	4a08      	ldr	r2, [pc, #32]	; (800db3c <vTaskSwitchContext+0xc4>)
 800db1a:	6013      	str	r3, [r2, #0]
}
 800db1c:	bf00      	nop
 800db1e:	3714      	adds	r7, #20
 800db20:	46bd      	mov	sp, r7
 800db22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db26:	4770      	bx	lr
 800db28:	2400adbc 	.word	0x2400adbc
 800db2c:	2400ada8 	.word	0x2400ada8
 800db30:	2400ad9c 	.word	0x2400ad9c
 800db34:	2400a8c4 	.word	0x2400a8c4
 800db38:	2400a8c0 	.word	0x2400a8c0
 800db3c:	2400012c 	.word	0x2400012c

0800db40 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b084      	sub	sp, #16
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
 800db48:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d10a      	bne.n	800db66 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800db50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db54:	f383 8811 	msr	BASEPRI, r3
 800db58:	f3bf 8f6f 	isb	sy
 800db5c:	f3bf 8f4f 	dsb	sy
 800db60:	60fb      	str	r3, [r7, #12]
}
 800db62:	bf00      	nop
 800db64:	e7fe      	b.n	800db64 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800db66:	4b07      	ldr	r3, [pc, #28]	; (800db84 <vTaskPlaceOnEventList+0x44>)
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	3318      	adds	r3, #24
 800db6c:	4619      	mov	r1, r3
 800db6e:	6878      	ldr	r0, [r7, #4]
 800db70:	f7fe f8f1 	bl	800bd56 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800db74:	2101      	movs	r1, #1
 800db76:	6838      	ldr	r0, [r7, #0]
 800db78:	f000 fb7e 	bl	800e278 <prvAddCurrentTaskToDelayedList>
}
 800db7c:	bf00      	nop
 800db7e:	3710      	adds	r7, #16
 800db80:	46bd      	mov	sp, r7
 800db82:	bd80      	pop	{r7, pc}
 800db84:	2400a8c0 	.word	0x2400a8c0

0800db88 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b086      	sub	sp, #24
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	60f8      	str	r0, [r7, #12]
 800db90:	60b9      	str	r1, [r7, #8]
 800db92:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d10a      	bne.n	800dbb0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800db9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db9e:	f383 8811 	msr	BASEPRI, r3
 800dba2:	f3bf 8f6f 	isb	sy
 800dba6:	f3bf 8f4f 	dsb	sy
 800dbaa:	617b      	str	r3, [r7, #20]
}
 800dbac:	bf00      	nop
 800dbae:	e7fe      	b.n	800dbae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dbb0:	4b0a      	ldr	r3, [pc, #40]	; (800dbdc <vTaskPlaceOnEventListRestricted+0x54>)
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	3318      	adds	r3, #24
 800dbb6:	4619      	mov	r1, r3
 800dbb8:	68f8      	ldr	r0, [r7, #12]
 800dbba:	f7fe f8a8 	bl	800bd0e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d002      	beq.n	800dbca <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800dbc4:	f04f 33ff 	mov.w	r3, #4294967295
 800dbc8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800dbca:	6879      	ldr	r1, [r7, #4]
 800dbcc:	68b8      	ldr	r0, [r7, #8]
 800dbce:	f000 fb53 	bl	800e278 <prvAddCurrentTaskToDelayedList>
	}
 800dbd2:	bf00      	nop
 800dbd4:	3718      	adds	r7, #24
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	bd80      	pop	{r7, pc}
 800dbda:	bf00      	nop
 800dbdc:	2400a8c0 	.word	0x2400a8c0

0800dbe0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b086      	sub	sp, #24
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	68db      	ldr	r3, [r3, #12]
 800dbec:	68db      	ldr	r3, [r3, #12]
 800dbee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800dbf0:	693b      	ldr	r3, [r7, #16]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d10a      	bne.n	800dc0c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800dbf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbfa:	f383 8811 	msr	BASEPRI, r3
 800dbfe:	f3bf 8f6f 	isb	sy
 800dc02:	f3bf 8f4f 	dsb	sy
 800dc06:	60fb      	str	r3, [r7, #12]
}
 800dc08:	bf00      	nop
 800dc0a:	e7fe      	b.n	800dc0a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dc0c:	693b      	ldr	r3, [r7, #16]
 800dc0e:	3318      	adds	r3, #24
 800dc10:	4618      	mov	r0, r3
 800dc12:	f7fe f8d9 	bl	800bdc8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dc16:	4b1e      	ldr	r3, [pc, #120]	; (800dc90 <xTaskRemoveFromEventList+0xb0>)
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d11d      	bne.n	800dc5a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dc1e:	693b      	ldr	r3, [r7, #16]
 800dc20:	3304      	adds	r3, #4
 800dc22:	4618      	mov	r0, r3
 800dc24:	f7fe f8d0 	bl	800bdc8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dc28:	693b      	ldr	r3, [r7, #16]
 800dc2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc2c:	4b19      	ldr	r3, [pc, #100]	; (800dc94 <xTaskRemoveFromEventList+0xb4>)
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	429a      	cmp	r2, r3
 800dc32:	d903      	bls.n	800dc3c <xTaskRemoveFromEventList+0x5c>
 800dc34:	693b      	ldr	r3, [r7, #16]
 800dc36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc38:	4a16      	ldr	r2, [pc, #88]	; (800dc94 <xTaskRemoveFromEventList+0xb4>)
 800dc3a:	6013      	str	r3, [r2, #0]
 800dc3c:	693b      	ldr	r3, [r7, #16]
 800dc3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc40:	4613      	mov	r3, r2
 800dc42:	009b      	lsls	r3, r3, #2
 800dc44:	4413      	add	r3, r2
 800dc46:	009b      	lsls	r3, r3, #2
 800dc48:	4a13      	ldr	r2, [pc, #76]	; (800dc98 <xTaskRemoveFromEventList+0xb8>)
 800dc4a:	441a      	add	r2, r3
 800dc4c:	693b      	ldr	r3, [r7, #16]
 800dc4e:	3304      	adds	r3, #4
 800dc50:	4619      	mov	r1, r3
 800dc52:	4610      	mov	r0, r2
 800dc54:	f7fe f85b 	bl	800bd0e <vListInsertEnd>
 800dc58:	e005      	b.n	800dc66 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dc5a:	693b      	ldr	r3, [r7, #16]
 800dc5c:	3318      	adds	r3, #24
 800dc5e:	4619      	mov	r1, r3
 800dc60:	480e      	ldr	r0, [pc, #56]	; (800dc9c <xTaskRemoveFromEventList+0xbc>)
 800dc62:	f7fe f854 	bl	800bd0e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dc66:	693b      	ldr	r3, [r7, #16]
 800dc68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc6a:	4b0d      	ldr	r3, [pc, #52]	; (800dca0 <xTaskRemoveFromEventList+0xc0>)
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc70:	429a      	cmp	r2, r3
 800dc72:	d905      	bls.n	800dc80 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800dc74:	2301      	movs	r3, #1
 800dc76:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800dc78:	4b0a      	ldr	r3, [pc, #40]	; (800dca4 <xTaskRemoveFromEventList+0xc4>)
 800dc7a:	2201      	movs	r2, #1
 800dc7c:	601a      	str	r2, [r3, #0]
 800dc7e:	e001      	b.n	800dc84 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800dc80:	2300      	movs	r3, #0
 800dc82:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800dc84:	697b      	ldr	r3, [r7, #20]
}
 800dc86:	4618      	mov	r0, r3
 800dc88:	3718      	adds	r7, #24
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	bd80      	pop	{r7, pc}
 800dc8e:	bf00      	nop
 800dc90:	2400adbc 	.word	0x2400adbc
 800dc94:	2400ad9c 	.word	0x2400ad9c
 800dc98:	2400a8c4 	.word	0x2400a8c4
 800dc9c:	2400ad54 	.word	0x2400ad54
 800dca0:	2400a8c0 	.word	0x2400a8c0
 800dca4:	2400ada8 	.word	0x2400ada8

0800dca8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800dca8:	b480      	push	{r7}
 800dcaa:	b083      	sub	sp, #12
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dcb0:	4b06      	ldr	r3, [pc, #24]	; (800dccc <vTaskInternalSetTimeOutState+0x24>)
 800dcb2:	681a      	ldr	r2, [r3, #0]
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dcb8:	4b05      	ldr	r3, [pc, #20]	; (800dcd0 <vTaskInternalSetTimeOutState+0x28>)
 800dcba:	681a      	ldr	r2, [r3, #0]
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	605a      	str	r2, [r3, #4]
}
 800dcc0:	bf00      	nop
 800dcc2:	370c      	adds	r7, #12
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcca:	4770      	bx	lr
 800dccc:	2400adac 	.word	0x2400adac
 800dcd0:	2400ad98 	.word	0x2400ad98

0800dcd4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b088      	sub	sp, #32
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
 800dcdc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d10a      	bne.n	800dcfa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800dce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dce8:	f383 8811 	msr	BASEPRI, r3
 800dcec:	f3bf 8f6f 	isb	sy
 800dcf0:	f3bf 8f4f 	dsb	sy
 800dcf4:	613b      	str	r3, [r7, #16]
}
 800dcf6:	bf00      	nop
 800dcf8:	e7fe      	b.n	800dcf8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800dcfa:	683b      	ldr	r3, [r7, #0]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d10a      	bne.n	800dd16 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800dd00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd04:	f383 8811 	msr	BASEPRI, r3
 800dd08:	f3bf 8f6f 	isb	sy
 800dd0c:	f3bf 8f4f 	dsb	sy
 800dd10:	60fb      	str	r3, [r7, #12]
}
 800dd12:	bf00      	nop
 800dd14:	e7fe      	b.n	800dd14 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800dd16:	f7fe f9ad 	bl	800c074 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800dd1a:	4b1d      	ldr	r3, [pc, #116]	; (800dd90 <xTaskCheckForTimeOut+0xbc>)
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	685b      	ldr	r3, [r3, #4]
 800dd24:	69ba      	ldr	r2, [r7, #24]
 800dd26:	1ad3      	subs	r3, r2, r3
 800dd28:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800dd2a:	683b      	ldr	r3, [r7, #0]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd32:	d102      	bne.n	800dd3a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800dd34:	2300      	movs	r3, #0
 800dd36:	61fb      	str	r3, [r7, #28]
 800dd38:	e023      	b.n	800dd82 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681a      	ldr	r2, [r3, #0]
 800dd3e:	4b15      	ldr	r3, [pc, #84]	; (800dd94 <xTaskCheckForTimeOut+0xc0>)
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	429a      	cmp	r2, r3
 800dd44:	d007      	beq.n	800dd56 <xTaskCheckForTimeOut+0x82>
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	685b      	ldr	r3, [r3, #4]
 800dd4a:	69ba      	ldr	r2, [r7, #24]
 800dd4c:	429a      	cmp	r2, r3
 800dd4e:	d302      	bcc.n	800dd56 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800dd50:	2301      	movs	r3, #1
 800dd52:	61fb      	str	r3, [r7, #28]
 800dd54:	e015      	b.n	800dd82 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dd56:	683b      	ldr	r3, [r7, #0]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	697a      	ldr	r2, [r7, #20]
 800dd5c:	429a      	cmp	r2, r3
 800dd5e:	d20b      	bcs.n	800dd78 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800dd60:	683b      	ldr	r3, [r7, #0]
 800dd62:	681a      	ldr	r2, [r3, #0]
 800dd64:	697b      	ldr	r3, [r7, #20]
 800dd66:	1ad2      	subs	r2, r2, r3
 800dd68:	683b      	ldr	r3, [r7, #0]
 800dd6a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800dd6c:	6878      	ldr	r0, [r7, #4]
 800dd6e:	f7ff ff9b 	bl	800dca8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800dd72:	2300      	movs	r3, #0
 800dd74:	61fb      	str	r3, [r7, #28]
 800dd76:	e004      	b.n	800dd82 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800dd7e:	2301      	movs	r3, #1
 800dd80:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800dd82:	f7fe f9a7 	bl	800c0d4 <vPortExitCritical>

	return xReturn;
 800dd86:	69fb      	ldr	r3, [r7, #28]
}
 800dd88:	4618      	mov	r0, r3
 800dd8a:	3720      	adds	r7, #32
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	bd80      	pop	{r7, pc}
 800dd90:	2400ad98 	.word	0x2400ad98
 800dd94:	2400adac 	.word	0x2400adac

0800dd98 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800dd98:	b480      	push	{r7}
 800dd9a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800dd9c:	4b03      	ldr	r3, [pc, #12]	; (800ddac <vTaskMissedYield+0x14>)
 800dd9e:	2201      	movs	r2, #1
 800dda0:	601a      	str	r2, [r3, #0]
}
 800dda2:	bf00      	nop
 800dda4:	46bd      	mov	sp, r7
 800dda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddaa:	4770      	bx	lr
 800ddac:	2400ada8 	.word	0x2400ada8

0800ddb0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b082      	sub	sp, #8
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ddb8:	f000 f852 	bl	800de60 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ddbc:	4b06      	ldr	r3, [pc, #24]	; (800ddd8 <prvIdleTask+0x28>)
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	2b01      	cmp	r3, #1
 800ddc2:	d9f9      	bls.n	800ddb8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ddc4:	4b05      	ldr	r3, [pc, #20]	; (800dddc <prvIdleTask+0x2c>)
 800ddc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddca:	601a      	str	r2, [r3, #0]
 800ddcc:	f3bf 8f4f 	dsb	sy
 800ddd0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ddd4:	e7f0      	b.n	800ddb8 <prvIdleTask+0x8>
 800ddd6:	bf00      	nop
 800ddd8:	2400a8c4 	.word	0x2400a8c4
 800dddc:	e000ed04 	.word	0xe000ed04

0800dde0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b082      	sub	sp, #8
 800dde4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dde6:	2300      	movs	r3, #0
 800dde8:	607b      	str	r3, [r7, #4]
 800ddea:	e00c      	b.n	800de06 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ddec:	687a      	ldr	r2, [r7, #4]
 800ddee:	4613      	mov	r3, r2
 800ddf0:	009b      	lsls	r3, r3, #2
 800ddf2:	4413      	add	r3, r2
 800ddf4:	009b      	lsls	r3, r3, #2
 800ddf6:	4a12      	ldr	r2, [pc, #72]	; (800de40 <prvInitialiseTaskLists+0x60>)
 800ddf8:	4413      	add	r3, r2
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	f7fd ff5a 	bl	800bcb4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	3301      	adds	r3, #1
 800de04:	607b      	str	r3, [r7, #4]
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	2b37      	cmp	r3, #55	; 0x37
 800de0a:	d9ef      	bls.n	800ddec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800de0c:	480d      	ldr	r0, [pc, #52]	; (800de44 <prvInitialiseTaskLists+0x64>)
 800de0e:	f7fd ff51 	bl	800bcb4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800de12:	480d      	ldr	r0, [pc, #52]	; (800de48 <prvInitialiseTaskLists+0x68>)
 800de14:	f7fd ff4e 	bl	800bcb4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800de18:	480c      	ldr	r0, [pc, #48]	; (800de4c <prvInitialiseTaskLists+0x6c>)
 800de1a:	f7fd ff4b 	bl	800bcb4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800de1e:	480c      	ldr	r0, [pc, #48]	; (800de50 <prvInitialiseTaskLists+0x70>)
 800de20:	f7fd ff48 	bl	800bcb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800de24:	480b      	ldr	r0, [pc, #44]	; (800de54 <prvInitialiseTaskLists+0x74>)
 800de26:	f7fd ff45 	bl	800bcb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800de2a:	4b0b      	ldr	r3, [pc, #44]	; (800de58 <prvInitialiseTaskLists+0x78>)
 800de2c:	4a05      	ldr	r2, [pc, #20]	; (800de44 <prvInitialiseTaskLists+0x64>)
 800de2e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800de30:	4b0a      	ldr	r3, [pc, #40]	; (800de5c <prvInitialiseTaskLists+0x7c>)
 800de32:	4a05      	ldr	r2, [pc, #20]	; (800de48 <prvInitialiseTaskLists+0x68>)
 800de34:	601a      	str	r2, [r3, #0]
}
 800de36:	bf00      	nop
 800de38:	3708      	adds	r7, #8
 800de3a:	46bd      	mov	sp, r7
 800de3c:	bd80      	pop	{r7, pc}
 800de3e:	bf00      	nop
 800de40:	2400a8c4 	.word	0x2400a8c4
 800de44:	2400ad24 	.word	0x2400ad24
 800de48:	2400ad38 	.word	0x2400ad38
 800de4c:	2400ad54 	.word	0x2400ad54
 800de50:	2400ad68 	.word	0x2400ad68
 800de54:	2400ad80 	.word	0x2400ad80
 800de58:	2400ad4c 	.word	0x2400ad4c
 800de5c:	2400ad50 	.word	0x2400ad50

0800de60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b082      	sub	sp, #8
 800de64:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800de66:	e019      	b.n	800de9c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800de68:	f7fe f904 	bl	800c074 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de6c:	4b10      	ldr	r3, [pc, #64]	; (800deb0 <prvCheckTasksWaitingTermination+0x50>)
 800de6e:	68db      	ldr	r3, [r3, #12]
 800de70:	68db      	ldr	r3, [r3, #12]
 800de72:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	3304      	adds	r3, #4
 800de78:	4618      	mov	r0, r3
 800de7a:	f7fd ffa5 	bl	800bdc8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800de7e:	4b0d      	ldr	r3, [pc, #52]	; (800deb4 <prvCheckTasksWaitingTermination+0x54>)
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	3b01      	subs	r3, #1
 800de84:	4a0b      	ldr	r2, [pc, #44]	; (800deb4 <prvCheckTasksWaitingTermination+0x54>)
 800de86:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800de88:	4b0b      	ldr	r3, [pc, #44]	; (800deb8 <prvCheckTasksWaitingTermination+0x58>)
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	3b01      	subs	r3, #1
 800de8e:	4a0a      	ldr	r2, [pc, #40]	; (800deb8 <prvCheckTasksWaitingTermination+0x58>)
 800de90:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800de92:	f7fe f91f 	bl	800c0d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800de96:	6878      	ldr	r0, [r7, #4]
 800de98:	f000 f810 	bl	800debc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800de9c:	4b06      	ldr	r3, [pc, #24]	; (800deb8 <prvCheckTasksWaitingTermination+0x58>)
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d1e1      	bne.n	800de68 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800dea4:	bf00      	nop
 800dea6:	bf00      	nop
 800dea8:	3708      	adds	r7, #8
 800deaa:	46bd      	mov	sp, r7
 800deac:	bd80      	pop	{r7, pc}
 800deae:	bf00      	nop
 800deb0:	2400ad68 	.word	0x2400ad68
 800deb4:	2400ad94 	.word	0x2400ad94
 800deb8:	2400ad7c 	.word	0x2400ad7c

0800debc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800debc:	b580      	push	{r7, lr}
 800debe:	b084      	sub	sp, #16
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	3354      	adds	r3, #84	; 0x54
 800dec8:	4618      	mov	r0, r3
 800deca:	f01e fe1d 	bl	802cb08 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d108      	bne.n	800deea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dedc:	4618      	mov	r0, r3
 800dede:	f7fd fdcb 	bl	800ba78 <vPortFree>
				vPortFree( pxTCB );
 800dee2:	6878      	ldr	r0, [r7, #4]
 800dee4:	f7fd fdc8 	bl	800ba78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800dee8:	e018      	b.n	800df1c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800def0:	2b01      	cmp	r3, #1
 800def2:	d103      	bne.n	800defc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800def4:	6878      	ldr	r0, [r7, #4]
 800def6:	f7fd fdbf 	bl	800ba78 <vPortFree>
	}
 800defa:	e00f      	b.n	800df1c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800df02:	2b02      	cmp	r3, #2
 800df04:	d00a      	beq.n	800df1c <prvDeleteTCB+0x60>
	__asm volatile
 800df06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df0a:	f383 8811 	msr	BASEPRI, r3
 800df0e:	f3bf 8f6f 	isb	sy
 800df12:	f3bf 8f4f 	dsb	sy
 800df16:	60fb      	str	r3, [r7, #12]
}
 800df18:	bf00      	nop
 800df1a:	e7fe      	b.n	800df1a <prvDeleteTCB+0x5e>
	}
 800df1c:	bf00      	nop
 800df1e:	3710      	adds	r7, #16
 800df20:	46bd      	mov	sp, r7
 800df22:	bd80      	pop	{r7, pc}

0800df24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800df24:	b480      	push	{r7}
 800df26:	b083      	sub	sp, #12
 800df28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800df2a:	4b0c      	ldr	r3, [pc, #48]	; (800df5c <prvResetNextTaskUnblockTime+0x38>)
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d104      	bne.n	800df3e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800df34:	4b0a      	ldr	r3, [pc, #40]	; (800df60 <prvResetNextTaskUnblockTime+0x3c>)
 800df36:	f04f 32ff 	mov.w	r2, #4294967295
 800df3a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800df3c:	e008      	b.n	800df50 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df3e:	4b07      	ldr	r3, [pc, #28]	; (800df5c <prvResetNextTaskUnblockTime+0x38>)
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	68db      	ldr	r3, [r3, #12]
 800df44:	68db      	ldr	r3, [r3, #12]
 800df46:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	685b      	ldr	r3, [r3, #4]
 800df4c:	4a04      	ldr	r2, [pc, #16]	; (800df60 <prvResetNextTaskUnblockTime+0x3c>)
 800df4e:	6013      	str	r3, [r2, #0]
}
 800df50:	bf00      	nop
 800df52:	370c      	adds	r7, #12
 800df54:	46bd      	mov	sp, r7
 800df56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5a:	4770      	bx	lr
 800df5c:	2400ad4c 	.word	0x2400ad4c
 800df60:	2400adb4 	.word	0x2400adb4

0800df64 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800df64:	b480      	push	{r7}
 800df66:	b083      	sub	sp, #12
 800df68:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800df6a:	4b0b      	ldr	r3, [pc, #44]	; (800df98 <xTaskGetSchedulerState+0x34>)
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d102      	bne.n	800df78 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800df72:	2301      	movs	r3, #1
 800df74:	607b      	str	r3, [r7, #4]
 800df76:	e008      	b.n	800df8a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800df78:	4b08      	ldr	r3, [pc, #32]	; (800df9c <xTaskGetSchedulerState+0x38>)
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d102      	bne.n	800df86 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800df80:	2302      	movs	r3, #2
 800df82:	607b      	str	r3, [r7, #4]
 800df84:	e001      	b.n	800df8a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800df86:	2300      	movs	r3, #0
 800df88:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800df8a:	687b      	ldr	r3, [r7, #4]
	}
 800df8c:	4618      	mov	r0, r3
 800df8e:	370c      	adds	r7, #12
 800df90:	46bd      	mov	sp, r7
 800df92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df96:	4770      	bx	lr
 800df98:	2400ada0 	.word	0x2400ada0
 800df9c:	2400adbc 	.word	0x2400adbc

0800dfa0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b084      	sub	sp, #16
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800dfac:	2300      	movs	r3, #0
 800dfae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d051      	beq.n	800e05a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800dfb6:	68bb      	ldr	r3, [r7, #8]
 800dfb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfba:	4b2a      	ldr	r3, [pc, #168]	; (800e064 <xTaskPriorityInherit+0xc4>)
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfc0:	429a      	cmp	r2, r3
 800dfc2:	d241      	bcs.n	800e048 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dfc4:	68bb      	ldr	r3, [r7, #8]
 800dfc6:	699b      	ldr	r3, [r3, #24]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	db06      	blt.n	800dfda <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dfcc:	4b25      	ldr	r3, [pc, #148]	; (800e064 <xTaskPriorityInherit+0xc4>)
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfd2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dfd6:	68bb      	ldr	r3, [r7, #8]
 800dfd8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800dfda:	68bb      	ldr	r3, [r7, #8]
 800dfdc:	6959      	ldr	r1, [r3, #20]
 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfe2:	4613      	mov	r3, r2
 800dfe4:	009b      	lsls	r3, r3, #2
 800dfe6:	4413      	add	r3, r2
 800dfe8:	009b      	lsls	r3, r3, #2
 800dfea:	4a1f      	ldr	r2, [pc, #124]	; (800e068 <xTaskPriorityInherit+0xc8>)
 800dfec:	4413      	add	r3, r2
 800dfee:	4299      	cmp	r1, r3
 800dff0:	d122      	bne.n	800e038 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dff2:	68bb      	ldr	r3, [r7, #8]
 800dff4:	3304      	adds	r3, #4
 800dff6:	4618      	mov	r0, r3
 800dff8:	f7fd fee6 	bl	800bdc8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dffc:	4b19      	ldr	r3, [pc, #100]	; (800e064 <xTaskPriorityInherit+0xc4>)
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e002:	68bb      	ldr	r3, [r7, #8]
 800e004:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e006:	68bb      	ldr	r3, [r7, #8]
 800e008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e00a:	4b18      	ldr	r3, [pc, #96]	; (800e06c <xTaskPriorityInherit+0xcc>)
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	429a      	cmp	r2, r3
 800e010:	d903      	bls.n	800e01a <xTaskPriorityInherit+0x7a>
 800e012:	68bb      	ldr	r3, [r7, #8]
 800e014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e016:	4a15      	ldr	r2, [pc, #84]	; (800e06c <xTaskPriorityInherit+0xcc>)
 800e018:	6013      	str	r3, [r2, #0]
 800e01a:	68bb      	ldr	r3, [r7, #8]
 800e01c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e01e:	4613      	mov	r3, r2
 800e020:	009b      	lsls	r3, r3, #2
 800e022:	4413      	add	r3, r2
 800e024:	009b      	lsls	r3, r3, #2
 800e026:	4a10      	ldr	r2, [pc, #64]	; (800e068 <xTaskPriorityInherit+0xc8>)
 800e028:	441a      	add	r2, r3
 800e02a:	68bb      	ldr	r3, [r7, #8]
 800e02c:	3304      	adds	r3, #4
 800e02e:	4619      	mov	r1, r3
 800e030:	4610      	mov	r0, r2
 800e032:	f7fd fe6c 	bl	800bd0e <vListInsertEnd>
 800e036:	e004      	b.n	800e042 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e038:	4b0a      	ldr	r3, [pc, #40]	; (800e064 <xTaskPriorityInherit+0xc4>)
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e03e:	68bb      	ldr	r3, [r7, #8]
 800e040:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e042:	2301      	movs	r3, #1
 800e044:	60fb      	str	r3, [r7, #12]
 800e046:	e008      	b.n	800e05a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e048:	68bb      	ldr	r3, [r7, #8]
 800e04a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e04c:	4b05      	ldr	r3, [pc, #20]	; (800e064 <xTaskPriorityInherit+0xc4>)
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e052:	429a      	cmp	r2, r3
 800e054:	d201      	bcs.n	800e05a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e056:	2301      	movs	r3, #1
 800e058:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e05a:	68fb      	ldr	r3, [r7, #12]
	}
 800e05c:	4618      	mov	r0, r3
 800e05e:	3710      	adds	r7, #16
 800e060:	46bd      	mov	sp, r7
 800e062:	bd80      	pop	{r7, pc}
 800e064:	2400a8c0 	.word	0x2400a8c0
 800e068:	2400a8c4 	.word	0x2400a8c4
 800e06c:	2400ad9c 	.word	0x2400ad9c

0800e070 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e070:	b580      	push	{r7, lr}
 800e072:	b086      	sub	sp, #24
 800e074:	af00      	add	r7, sp, #0
 800e076:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e07c:	2300      	movs	r3, #0
 800e07e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d056      	beq.n	800e134 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e086:	4b2e      	ldr	r3, [pc, #184]	; (800e140 <xTaskPriorityDisinherit+0xd0>)
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	693a      	ldr	r2, [r7, #16]
 800e08c:	429a      	cmp	r2, r3
 800e08e:	d00a      	beq.n	800e0a6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e094:	f383 8811 	msr	BASEPRI, r3
 800e098:	f3bf 8f6f 	isb	sy
 800e09c:	f3bf 8f4f 	dsb	sy
 800e0a0:	60fb      	str	r3, [r7, #12]
}
 800e0a2:	bf00      	nop
 800e0a4:	e7fe      	b.n	800e0a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e0a6:	693b      	ldr	r3, [r7, #16]
 800e0a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d10a      	bne.n	800e0c4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0b2:	f383 8811 	msr	BASEPRI, r3
 800e0b6:	f3bf 8f6f 	isb	sy
 800e0ba:	f3bf 8f4f 	dsb	sy
 800e0be:	60bb      	str	r3, [r7, #8]
}
 800e0c0:	bf00      	nop
 800e0c2:	e7fe      	b.n	800e0c2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e0c4:	693b      	ldr	r3, [r7, #16]
 800e0c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0c8:	1e5a      	subs	r2, r3, #1
 800e0ca:	693b      	ldr	r3, [r7, #16]
 800e0cc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e0ce:	693b      	ldr	r3, [r7, #16]
 800e0d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0d2:	693b      	ldr	r3, [r7, #16]
 800e0d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e0d6:	429a      	cmp	r2, r3
 800e0d8:	d02c      	beq.n	800e134 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e0da:	693b      	ldr	r3, [r7, #16]
 800e0dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d128      	bne.n	800e134 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e0e2:	693b      	ldr	r3, [r7, #16]
 800e0e4:	3304      	adds	r3, #4
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	f7fd fe6e 	bl	800bdc8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e0ec:	693b      	ldr	r3, [r7, #16]
 800e0ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e0f0:	693b      	ldr	r3, [r7, #16]
 800e0f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0f4:	693b      	ldr	r3, [r7, #16]
 800e0f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0f8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e0fc:	693b      	ldr	r3, [r7, #16]
 800e0fe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e100:	693b      	ldr	r3, [r7, #16]
 800e102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e104:	4b0f      	ldr	r3, [pc, #60]	; (800e144 <xTaskPriorityDisinherit+0xd4>)
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	429a      	cmp	r2, r3
 800e10a:	d903      	bls.n	800e114 <xTaskPriorityDisinherit+0xa4>
 800e10c:	693b      	ldr	r3, [r7, #16]
 800e10e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e110:	4a0c      	ldr	r2, [pc, #48]	; (800e144 <xTaskPriorityDisinherit+0xd4>)
 800e112:	6013      	str	r3, [r2, #0]
 800e114:	693b      	ldr	r3, [r7, #16]
 800e116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e118:	4613      	mov	r3, r2
 800e11a:	009b      	lsls	r3, r3, #2
 800e11c:	4413      	add	r3, r2
 800e11e:	009b      	lsls	r3, r3, #2
 800e120:	4a09      	ldr	r2, [pc, #36]	; (800e148 <xTaskPriorityDisinherit+0xd8>)
 800e122:	441a      	add	r2, r3
 800e124:	693b      	ldr	r3, [r7, #16]
 800e126:	3304      	adds	r3, #4
 800e128:	4619      	mov	r1, r3
 800e12a:	4610      	mov	r0, r2
 800e12c:	f7fd fdef 	bl	800bd0e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e130:	2301      	movs	r3, #1
 800e132:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e134:	697b      	ldr	r3, [r7, #20]
	}
 800e136:	4618      	mov	r0, r3
 800e138:	3718      	adds	r7, #24
 800e13a:	46bd      	mov	sp, r7
 800e13c:	bd80      	pop	{r7, pc}
 800e13e:	bf00      	nop
 800e140:	2400a8c0 	.word	0x2400a8c0
 800e144:	2400ad9c 	.word	0x2400ad9c
 800e148:	2400a8c4 	.word	0x2400a8c4

0800e14c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b088      	sub	sp, #32
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
 800e154:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e15a:	2301      	movs	r3, #1
 800e15c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d06a      	beq.n	800e23a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e164:	69bb      	ldr	r3, [r7, #24]
 800e166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d10a      	bne.n	800e182 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800e16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e170:	f383 8811 	msr	BASEPRI, r3
 800e174:	f3bf 8f6f 	isb	sy
 800e178:	f3bf 8f4f 	dsb	sy
 800e17c:	60fb      	str	r3, [r7, #12]
}
 800e17e:	bf00      	nop
 800e180:	e7fe      	b.n	800e180 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e182:	69bb      	ldr	r3, [r7, #24]
 800e184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e186:	683a      	ldr	r2, [r7, #0]
 800e188:	429a      	cmp	r2, r3
 800e18a:	d902      	bls.n	800e192 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e18c:	683b      	ldr	r3, [r7, #0]
 800e18e:	61fb      	str	r3, [r7, #28]
 800e190:	e002      	b.n	800e198 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e192:	69bb      	ldr	r3, [r7, #24]
 800e194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e196:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e198:	69bb      	ldr	r3, [r7, #24]
 800e19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e19c:	69fa      	ldr	r2, [r7, #28]
 800e19e:	429a      	cmp	r2, r3
 800e1a0:	d04b      	beq.n	800e23a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e1a2:	69bb      	ldr	r3, [r7, #24]
 800e1a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1a6:	697a      	ldr	r2, [r7, #20]
 800e1a8:	429a      	cmp	r2, r3
 800e1aa:	d146      	bne.n	800e23a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e1ac:	4b25      	ldr	r3, [pc, #148]	; (800e244 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	69ba      	ldr	r2, [r7, #24]
 800e1b2:	429a      	cmp	r2, r3
 800e1b4:	d10a      	bne.n	800e1cc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800e1b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1ba:	f383 8811 	msr	BASEPRI, r3
 800e1be:	f3bf 8f6f 	isb	sy
 800e1c2:	f3bf 8f4f 	dsb	sy
 800e1c6:	60bb      	str	r3, [r7, #8]
}
 800e1c8:	bf00      	nop
 800e1ca:	e7fe      	b.n	800e1ca <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e1cc:	69bb      	ldr	r3, [r7, #24]
 800e1ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1d0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e1d2:	69bb      	ldr	r3, [r7, #24]
 800e1d4:	69fa      	ldr	r2, [r7, #28]
 800e1d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e1d8:	69bb      	ldr	r3, [r7, #24]
 800e1da:	699b      	ldr	r3, [r3, #24]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	db04      	blt.n	800e1ea <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1e0:	69fb      	ldr	r3, [r7, #28]
 800e1e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e1e6:	69bb      	ldr	r3, [r7, #24]
 800e1e8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e1ea:	69bb      	ldr	r3, [r7, #24]
 800e1ec:	6959      	ldr	r1, [r3, #20]
 800e1ee:	693a      	ldr	r2, [r7, #16]
 800e1f0:	4613      	mov	r3, r2
 800e1f2:	009b      	lsls	r3, r3, #2
 800e1f4:	4413      	add	r3, r2
 800e1f6:	009b      	lsls	r3, r3, #2
 800e1f8:	4a13      	ldr	r2, [pc, #76]	; (800e248 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e1fa:	4413      	add	r3, r2
 800e1fc:	4299      	cmp	r1, r3
 800e1fe:	d11c      	bne.n	800e23a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e200:	69bb      	ldr	r3, [r7, #24]
 800e202:	3304      	adds	r3, #4
 800e204:	4618      	mov	r0, r3
 800e206:	f7fd fddf 	bl	800bdc8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e20a:	69bb      	ldr	r3, [r7, #24]
 800e20c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e20e:	4b0f      	ldr	r3, [pc, #60]	; (800e24c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	429a      	cmp	r2, r3
 800e214:	d903      	bls.n	800e21e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800e216:	69bb      	ldr	r3, [r7, #24]
 800e218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e21a:	4a0c      	ldr	r2, [pc, #48]	; (800e24c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e21c:	6013      	str	r3, [r2, #0]
 800e21e:	69bb      	ldr	r3, [r7, #24]
 800e220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e222:	4613      	mov	r3, r2
 800e224:	009b      	lsls	r3, r3, #2
 800e226:	4413      	add	r3, r2
 800e228:	009b      	lsls	r3, r3, #2
 800e22a:	4a07      	ldr	r2, [pc, #28]	; (800e248 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e22c:	441a      	add	r2, r3
 800e22e:	69bb      	ldr	r3, [r7, #24]
 800e230:	3304      	adds	r3, #4
 800e232:	4619      	mov	r1, r3
 800e234:	4610      	mov	r0, r2
 800e236:	f7fd fd6a 	bl	800bd0e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e23a:	bf00      	nop
 800e23c:	3720      	adds	r7, #32
 800e23e:	46bd      	mov	sp, r7
 800e240:	bd80      	pop	{r7, pc}
 800e242:	bf00      	nop
 800e244:	2400a8c0 	.word	0x2400a8c0
 800e248:	2400a8c4 	.word	0x2400a8c4
 800e24c:	2400ad9c 	.word	0x2400ad9c

0800e250 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e250:	b480      	push	{r7}
 800e252:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e254:	4b07      	ldr	r3, [pc, #28]	; (800e274 <pvTaskIncrementMutexHeldCount+0x24>)
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d004      	beq.n	800e266 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e25c:	4b05      	ldr	r3, [pc, #20]	; (800e274 <pvTaskIncrementMutexHeldCount+0x24>)
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e262:	3201      	adds	r2, #1
 800e264:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800e266:	4b03      	ldr	r3, [pc, #12]	; (800e274 <pvTaskIncrementMutexHeldCount+0x24>)
 800e268:	681b      	ldr	r3, [r3, #0]
	}
 800e26a:	4618      	mov	r0, r3
 800e26c:	46bd      	mov	sp, r7
 800e26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e272:	4770      	bx	lr
 800e274:	2400a8c0 	.word	0x2400a8c0

0800e278 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b084      	sub	sp, #16
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
 800e280:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e282:	4b21      	ldr	r3, [pc, #132]	; (800e308 <prvAddCurrentTaskToDelayedList+0x90>)
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e288:	4b20      	ldr	r3, [pc, #128]	; (800e30c <prvAddCurrentTaskToDelayedList+0x94>)
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	3304      	adds	r3, #4
 800e28e:	4618      	mov	r0, r3
 800e290:	f7fd fd9a 	bl	800bdc8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e29a:	d10a      	bne.n	800e2b2 <prvAddCurrentTaskToDelayedList+0x3a>
 800e29c:	683b      	ldr	r3, [r7, #0]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d007      	beq.n	800e2b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e2a2:	4b1a      	ldr	r3, [pc, #104]	; (800e30c <prvAddCurrentTaskToDelayedList+0x94>)
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	3304      	adds	r3, #4
 800e2a8:	4619      	mov	r1, r3
 800e2aa:	4819      	ldr	r0, [pc, #100]	; (800e310 <prvAddCurrentTaskToDelayedList+0x98>)
 800e2ac:	f7fd fd2f 	bl	800bd0e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e2b0:	e026      	b.n	800e300 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e2b2:	68fa      	ldr	r2, [r7, #12]
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	4413      	add	r3, r2
 800e2b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e2ba:	4b14      	ldr	r3, [pc, #80]	; (800e30c <prvAddCurrentTaskToDelayedList+0x94>)
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	68ba      	ldr	r2, [r7, #8]
 800e2c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e2c2:	68ba      	ldr	r2, [r7, #8]
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	429a      	cmp	r2, r3
 800e2c8:	d209      	bcs.n	800e2de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e2ca:	4b12      	ldr	r3, [pc, #72]	; (800e314 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e2cc:	681a      	ldr	r2, [r3, #0]
 800e2ce:	4b0f      	ldr	r3, [pc, #60]	; (800e30c <prvAddCurrentTaskToDelayedList+0x94>)
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	3304      	adds	r3, #4
 800e2d4:	4619      	mov	r1, r3
 800e2d6:	4610      	mov	r0, r2
 800e2d8:	f7fd fd3d 	bl	800bd56 <vListInsert>
}
 800e2dc:	e010      	b.n	800e300 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e2de:	4b0e      	ldr	r3, [pc, #56]	; (800e318 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e2e0:	681a      	ldr	r2, [r3, #0]
 800e2e2:	4b0a      	ldr	r3, [pc, #40]	; (800e30c <prvAddCurrentTaskToDelayedList+0x94>)
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	3304      	adds	r3, #4
 800e2e8:	4619      	mov	r1, r3
 800e2ea:	4610      	mov	r0, r2
 800e2ec:	f7fd fd33 	bl	800bd56 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e2f0:	4b0a      	ldr	r3, [pc, #40]	; (800e31c <prvAddCurrentTaskToDelayedList+0xa4>)
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	68ba      	ldr	r2, [r7, #8]
 800e2f6:	429a      	cmp	r2, r3
 800e2f8:	d202      	bcs.n	800e300 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e2fa:	4a08      	ldr	r2, [pc, #32]	; (800e31c <prvAddCurrentTaskToDelayedList+0xa4>)
 800e2fc:	68bb      	ldr	r3, [r7, #8]
 800e2fe:	6013      	str	r3, [r2, #0]
}
 800e300:	bf00      	nop
 800e302:	3710      	adds	r7, #16
 800e304:	46bd      	mov	sp, r7
 800e306:	bd80      	pop	{r7, pc}
 800e308:	2400ad98 	.word	0x2400ad98
 800e30c:	2400a8c0 	.word	0x2400a8c0
 800e310:	2400ad80 	.word	0x2400ad80
 800e314:	2400ad50 	.word	0x2400ad50
 800e318:	2400ad4c 	.word	0x2400ad4c
 800e31c:	2400adb4 	.word	0x2400adb4

0800e320 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b08a      	sub	sp, #40	; 0x28
 800e324:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e326:	2300      	movs	r3, #0
 800e328:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e32a:	f000 fb07 	bl	800e93c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e32e:	4b1c      	ldr	r3, [pc, #112]	; (800e3a0 <xTimerCreateTimerTask+0x80>)
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d021      	beq.n	800e37a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e336:	2300      	movs	r3, #0
 800e338:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e33a:	2300      	movs	r3, #0
 800e33c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e33e:	1d3a      	adds	r2, r7, #4
 800e340:	f107 0108 	add.w	r1, r7, #8
 800e344:	f107 030c 	add.w	r3, r7, #12
 800e348:	4618      	mov	r0, r3
 800e34a:	f7fd faaf 	bl	800b8ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e34e:	6879      	ldr	r1, [r7, #4]
 800e350:	68bb      	ldr	r3, [r7, #8]
 800e352:	68fa      	ldr	r2, [r7, #12]
 800e354:	9202      	str	r2, [sp, #8]
 800e356:	9301      	str	r3, [sp, #4]
 800e358:	2302      	movs	r3, #2
 800e35a:	9300      	str	r3, [sp, #0]
 800e35c:	2300      	movs	r3, #0
 800e35e:	460a      	mov	r2, r1
 800e360:	4910      	ldr	r1, [pc, #64]	; (800e3a4 <xTimerCreateTimerTask+0x84>)
 800e362:	4811      	ldr	r0, [pc, #68]	; (800e3a8 <xTimerCreateTimerTask+0x88>)
 800e364:	f7fe ffb6 	bl	800d2d4 <xTaskCreateStatic>
 800e368:	4603      	mov	r3, r0
 800e36a:	4a10      	ldr	r2, [pc, #64]	; (800e3ac <xTimerCreateTimerTask+0x8c>)
 800e36c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e36e:	4b0f      	ldr	r3, [pc, #60]	; (800e3ac <xTimerCreateTimerTask+0x8c>)
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d001      	beq.n	800e37a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e376:	2301      	movs	r3, #1
 800e378:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e37a:	697b      	ldr	r3, [r7, #20]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d10a      	bne.n	800e396 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e384:	f383 8811 	msr	BASEPRI, r3
 800e388:	f3bf 8f6f 	isb	sy
 800e38c:	f3bf 8f4f 	dsb	sy
 800e390:	613b      	str	r3, [r7, #16]
}
 800e392:	bf00      	nop
 800e394:	e7fe      	b.n	800e394 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e396:	697b      	ldr	r3, [r7, #20]
}
 800e398:	4618      	mov	r0, r3
 800e39a:	3718      	adds	r7, #24
 800e39c:	46bd      	mov	sp, r7
 800e39e:	bd80      	pop	{r7, pc}
 800e3a0:	2400adf0 	.word	0x2400adf0
 800e3a4:	0802e59c 	.word	0x0802e59c
 800e3a8:	0800e4e5 	.word	0x0800e4e5
 800e3ac:	2400adf4 	.word	0x2400adf4

0800e3b0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b08a      	sub	sp, #40	; 0x28
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	60f8      	str	r0, [r7, #12]
 800e3b8:	60b9      	str	r1, [r7, #8]
 800e3ba:	607a      	str	r2, [r7, #4]
 800e3bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e3be:	2300      	movs	r3, #0
 800e3c0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d10a      	bne.n	800e3de <xTimerGenericCommand+0x2e>
	__asm volatile
 800e3c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3cc:	f383 8811 	msr	BASEPRI, r3
 800e3d0:	f3bf 8f6f 	isb	sy
 800e3d4:	f3bf 8f4f 	dsb	sy
 800e3d8:	623b      	str	r3, [r7, #32]
}
 800e3da:	bf00      	nop
 800e3dc:	e7fe      	b.n	800e3dc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e3de:	4b1a      	ldr	r3, [pc, #104]	; (800e448 <xTimerGenericCommand+0x98>)
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d02a      	beq.n	800e43c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e3e6:	68bb      	ldr	r3, [r7, #8]
 800e3e8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e3f2:	68bb      	ldr	r3, [r7, #8]
 800e3f4:	2b05      	cmp	r3, #5
 800e3f6:	dc18      	bgt.n	800e42a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e3f8:	f7ff fdb4 	bl	800df64 <xTaskGetSchedulerState>
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	2b02      	cmp	r3, #2
 800e400:	d109      	bne.n	800e416 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e402:	4b11      	ldr	r3, [pc, #68]	; (800e448 <xTimerGenericCommand+0x98>)
 800e404:	6818      	ldr	r0, [r3, #0]
 800e406:	f107 0110 	add.w	r1, r7, #16
 800e40a:	2300      	movs	r3, #0
 800e40c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e40e:	f7fe f8fb 	bl	800c608 <xQueueGenericSend>
 800e412:	6278      	str	r0, [r7, #36]	; 0x24
 800e414:	e012      	b.n	800e43c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e416:	4b0c      	ldr	r3, [pc, #48]	; (800e448 <xTimerGenericCommand+0x98>)
 800e418:	6818      	ldr	r0, [r3, #0]
 800e41a:	f107 0110 	add.w	r1, r7, #16
 800e41e:	2300      	movs	r3, #0
 800e420:	2200      	movs	r2, #0
 800e422:	f7fe f8f1 	bl	800c608 <xQueueGenericSend>
 800e426:	6278      	str	r0, [r7, #36]	; 0x24
 800e428:	e008      	b.n	800e43c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e42a:	4b07      	ldr	r3, [pc, #28]	; (800e448 <xTimerGenericCommand+0x98>)
 800e42c:	6818      	ldr	r0, [r3, #0]
 800e42e:	f107 0110 	add.w	r1, r7, #16
 800e432:	2300      	movs	r3, #0
 800e434:	683a      	ldr	r2, [r7, #0]
 800e436:	f7fe f9e5 	bl	800c804 <xQueueGenericSendFromISR>
 800e43a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e43e:	4618      	mov	r0, r3
 800e440:	3728      	adds	r7, #40	; 0x28
 800e442:	46bd      	mov	sp, r7
 800e444:	bd80      	pop	{r7, pc}
 800e446:	bf00      	nop
 800e448:	2400adf0 	.word	0x2400adf0

0800e44c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b088      	sub	sp, #32
 800e450:	af02      	add	r7, sp, #8
 800e452:	6078      	str	r0, [r7, #4]
 800e454:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e456:	4b22      	ldr	r3, [pc, #136]	; (800e4e0 <prvProcessExpiredTimer+0x94>)
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	68db      	ldr	r3, [r3, #12]
 800e45c:	68db      	ldr	r3, [r3, #12]
 800e45e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e460:	697b      	ldr	r3, [r7, #20]
 800e462:	3304      	adds	r3, #4
 800e464:	4618      	mov	r0, r3
 800e466:	f7fd fcaf 	bl	800bdc8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e46a:	697b      	ldr	r3, [r7, #20]
 800e46c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e470:	f003 0304 	and.w	r3, r3, #4
 800e474:	2b00      	cmp	r3, #0
 800e476:	d022      	beq.n	800e4be <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e478:	697b      	ldr	r3, [r7, #20]
 800e47a:	699a      	ldr	r2, [r3, #24]
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	18d1      	adds	r1, r2, r3
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	683a      	ldr	r2, [r7, #0]
 800e484:	6978      	ldr	r0, [r7, #20]
 800e486:	f000 f8d1 	bl	800e62c <prvInsertTimerInActiveList>
 800e48a:	4603      	mov	r3, r0
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d01f      	beq.n	800e4d0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e490:	2300      	movs	r3, #0
 800e492:	9300      	str	r3, [sp, #0]
 800e494:	2300      	movs	r3, #0
 800e496:	687a      	ldr	r2, [r7, #4]
 800e498:	2100      	movs	r1, #0
 800e49a:	6978      	ldr	r0, [r7, #20]
 800e49c:	f7ff ff88 	bl	800e3b0 <xTimerGenericCommand>
 800e4a0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e4a2:	693b      	ldr	r3, [r7, #16]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d113      	bne.n	800e4d0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e4a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4ac:	f383 8811 	msr	BASEPRI, r3
 800e4b0:	f3bf 8f6f 	isb	sy
 800e4b4:	f3bf 8f4f 	dsb	sy
 800e4b8:	60fb      	str	r3, [r7, #12]
}
 800e4ba:	bf00      	nop
 800e4bc:	e7fe      	b.n	800e4bc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e4be:	697b      	ldr	r3, [r7, #20]
 800e4c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e4c4:	f023 0301 	bic.w	r3, r3, #1
 800e4c8:	b2da      	uxtb	r2, r3
 800e4ca:	697b      	ldr	r3, [r7, #20]
 800e4cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e4d0:	697b      	ldr	r3, [r7, #20]
 800e4d2:	6a1b      	ldr	r3, [r3, #32]
 800e4d4:	6978      	ldr	r0, [r7, #20]
 800e4d6:	4798      	blx	r3
}
 800e4d8:	bf00      	nop
 800e4da:	3718      	adds	r7, #24
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	bd80      	pop	{r7, pc}
 800e4e0:	2400ade8 	.word	0x2400ade8

0800e4e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b084      	sub	sp, #16
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e4ec:	f107 0308 	add.w	r3, r7, #8
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	f000 f857 	bl	800e5a4 <prvGetNextExpireTime>
 800e4f6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e4f8:	68bb      	ldr	r3, [r7, #8]
 800e4fa:	4619      	mov	r1, r3
 800e4fc:	68f8      	ldr	r0, [r7, #12]
 800e4fe:	f000 f803 	bl	800e508 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e502:	f000 f8d5 	bl	800e6b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e506:	e7f1      	b.n	800e4ec <prvTimerTask+0x8>

0800e508 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e508:	b580      	push	{r7, lr}
 800e50a:	b084      	sub	sp, #16
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
 800e510:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e512:	f7ff f93b 	bl	800d78c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e516:	f107 0308 	add.w	r3, r7, #8
 800e51a:	4618      	mov	r0, r3
 800e51c:	f000 f866 	bl	800e5ec <prvSampleTimeNow>
 800e520:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e522:	68bb      	ldr	r3, [r7, #8]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d130      	bne.n	800e58a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e528:	683b      	ldr	r3, [r7, #0]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d10a      	bne.n	800e544 <prvProcessTimerOrBlockTask+0x3c>
 800e52e:	687a      	ldr	r2, [r7, #4]
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	429a      	cmp	r2, r3
 800e534:	d806      	bhi.n	800e544 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e536:	f7ff f937 	bl	800d7a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e53a:	68f9      	ldr	r1, [r7, #12]
 800e53c:	6878      	ldr	r0, [r7, #4]
 800e53e:	f7ff ff85 	bl	800e44c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e542:	e024      	b.n	800e58e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e544:	683b      	ldr	r3, [r7, #0]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d008      	beq.n	800e55c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e54a:	4b13      	ldr	r3, [pc, #76]	; (800e598 <prvProcessTimerOrBlockTask+0x90>)
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d101      	bne.n	800e558 <prvProcessTimerOrBlockTask+0x50>
 800e554:	2301      	movs	r3, #1
 800e556:	e000      	b.n	800e55a <prvProcessTimerOrBlockTask+0x52>
 800e558:	2300      	movs	r3, #0
 800e55a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e55c:	4b0f      	ldr	r3, [pc, #60]	; (800e59c <prvProcessTimerOrBlockTask+0x94>)
 800e55e:	6818      	ldr	r0, [r3, #0]
 800e560:	687a      	ldr	r2, [r7, #4]
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	1ad3      	subs	r3, r2, r3
 800e566:	683a      	ldr	r2, [r7, #0]
 800e568:	4619      	mov	r1, r3
 800e56a:	f7fe fe7f 	bl	800d26c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e56e:	f7ff f91b 	bl	800d7a8 <xTaskResumeAll>
 800e572:	4603      	mov	r3, r0
 800e574:	2b00      	cmp	r3, #0
 800e576:	d10a      	bne.n	800e58e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e578:	4b09      	ldr	r3, [pc, #36]	; (800e5a0 <prvProcessTimerOrBlockTask+0x98>)
 800e57a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e57e:	601a      	str	r2, [r3, #0]
 800e580:	f3bf 8f4f 	dsb	sy
 800e584:	f3bf 8f6f 	isb	sy
}
 800e588:	e001      	b.n	800e58e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e58a:	f7ff f90d 	bl	800d7a8 <xTaskResumeAll>
}
 800e58e:	bf00      	nop
 800e590:	3710      	adds	r7, #16
 800e592:	46bd      	mov	sp, r7
 800e594:	bd80      	pop	{r7, pc}
 800e596:	bf00      	nop
 800e598:	2400adec 	.word	0x2400adec
 800e59c:	2400adf0 	.word	0x2400adf0
 800e5a0:	e000ed04 	.word	0xe000ed04

0800e5a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e5a4:	b480      	push	{r7}
 800e5a6:	b085      	sub	sp, #20
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e5ac:	4b0e      	ldr	r3, [pc, #56]	; (800e5e8 <prvGetNextExpireTime+0x44>)
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d101      	bne.n	800e5ba <prvGetNextExpireTime+0x16>
 800e5b6:	2201      	movs	r2, #1
 800e5b8:	e000      	b.n	800e5bc <prvGetNextExpireTime+0x18>
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d105      	bne.n	800e5d4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e5c8:	4b07      	ldr	r3, [pc, #28]	; (800e5e8 <prvGetNextExpireTime+0x44>)
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	68db      	ldr	r3, [r3, #12]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	60fb      	str	r3, [r7, #12]
 800e5d2:	e001      	b.n	800e5d8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e5d8:	68fb      	ldr	r3, [r7, #12]
}
 800e5da:	4618      	mov	r0, r3
 800e5dc:	3714      	adds	r7, #20
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e4:	4770      	bx	lr
 800e5e6:	bf00      	nop
 800e5e8:	2400ade8 	.word	0x2400ade8

0800e5ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b084      	sub	sp, #16
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e5f4:	f7ff f976 	bl	800d8e4 <xTaskGetTickCount>
 800e5f8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e5fa:	4b0b      	ldr	r3, [pc, #44]	; (800e628 <prvSampleTimeNow+0x3c>)
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	68fa      	ldr	r2, [r7, #12]
 800e600:	429a      	cmp	r2, r3
 800e602:	d205      	bcs.n	800e610 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e604:	f000 f936 	bl	800e874 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	2201      	movs	r2, #1
 800e60c:	601a      	str	r2, [r3, #0]
 800e60e:	e002      	b.n	800e616 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	2200      	movs	r2, #0
 800e614:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e616:	4a04      	ldr	r2, [pc, #16]	; (800e628 <prvSampleTimeNow+0x3c>)
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e61c:	68fb      	ldr	r3, [r7, #12]
}
 800e61e:	4618      	mov	r0, r3
 800e620:	3710      	adds	r7, #16
 800e622:	46bd      	mov	sp, r7
 800e624:	bd80      	pop	{r7, pc}
 800e626:	bf00      	nop
 800e628:	2400adf8 	.word	0x2400adf8

0800e62c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b086      	sub	sp, #24
 800e630:	af00      	add	r7, sp, #0
 800e632:	60f8      	str	r0, [r7, #12]
 800e634:	60b9      	str	r1, [r7, #8]
 800e636:	607a      	str	r2, [r7, #4]
 800e638:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e63a:	2300      	movs	r3, #0
 800e63c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	68ba      	ldr	r2, [r7, #8]
 800e642:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	68fa      	ldr	r2, [r7, #12]
 800e648:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e64a:	68ba      	ldr	r2, [r7, #8]
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	429a      	cmp	r2, r3
 800e650:	d812      	bhi.n	800e678 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e652:	687a      	ldr	r2, [r7, #4]
 800e654:	683b      	ldr	r3, [r7, #0]
 800e656:	1ad2      	subs	r2, r2, r3
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	699b      	ldr	r3, [r3, #24]
 800e65c:	429a      	cmp	r2, r3
 800e65e:	d302      	bcc.n	800e666 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e660:	2301      	movs	r3, #1
 800e662:	617b      	str	r3, [r7, #20]
 800e664:	e01b      	b.n	800e69e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e666:	4b10      	ldr	r3, [pc, #64]	; (800e6a8 <prvInsertTimerInActiveList+0x7c>)
 800e668:	681a      	ldr	r2, [r3, #0]
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	3304      	adds	r3, #4
 800e66e:	4619      	mov	r1, r3
 800e670:	4610      	mov	r0, r2
 800e672:	f7fd fb70 	bl	800bd56 <vListInsert>
 800e676:	e012      	b.n	800e69e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e678:	687a      	ldr	r2, [r7, #4]
 800e67a:	683b      	ldr	r3, [r7, #0]
 800e67c:	429a      	cmp	r2, r3
 800e67e:	d206      	bcs.n	800e68e <prvInsertTimerInActiveList+0x62>
 800e680:	68ba      	ldr	r2, [r7, #8]
 800e682:	683b      	ldr	r3, [r7, #0]
 800e684:	429a      	cmp	r2, r3
 800e686:	d302      	bcc.n	800e68e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e688:	2301      	movs	r3, #1
 800e68a:	617b      	str	r3, [r7, #20]
 800e68c:	e007      	b.n	800e69e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e68e:	4b07      	ldr	r3, [pc, #28]	; (800e6ac <prvInsertTimerInActiveList+0x80>)
 800e690:	681a      	ldr	r2, [r3, #0]
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	3304      	adds	r3, #4
 800e696:	4619      	mov	r1, r3
 800e698:	4610      	mov	r0, r2
 800e69a:	f7fd fb5c 	bl	800bd56 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e69e:	697b      	ldr	r3, [r7, #20]
}
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	3718      	adds	r7, #24
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	bd80      	pop	{r7, pc}
 800e6a8:	2400adec 	.word	0x2400adec
 800e6ac:	2400ade8 	.word	0x2400ade8

0800e6b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	b08e      	sub	sp, #56	; 0x38
 800e6b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e6b6:	e0ca      	b.n	800e84e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	da18      	bge.n	800e6f0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e6be:	1d3b      	adds	r3, r7, #4
 800e6c0:	3304      	adds	r3, #4
 800e6c2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e6c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d10a      	bne.n	800e6e0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e6ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6ce:	f383 8811 	msr	BASEPRI, r3
 800e6d2:	f3bf 8f6f 	isb	sy
 800e6d6:	f3bf 8f4f 	dsb	sy
 800e6da:	61fb      	str	r3, [r7, #28]
}
 800e6dc:	bf00      	nop
 800e6de:	e7fe      	b.n	800e6de <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6e6:	6850      	ldr	r0, [r2, #4]
 800e6e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6ea:	6892      	ldr	r2, [r2, #8]
 800e6ec:	4611      	mov	r1, r2
 800e6ee:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	f2c0 80ab 	blt.w	800e84e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6fe:	695b      	ldr	r3, [r3, #20]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d004      	beq.n	800e70e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e706:	3304      	adds	r3, #4
 800e708:	4618      	mov	r0, r3
 800e70a:	f7fd fb5d 	bl	800bdc8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e70e:	463b      	mov	r3, r7
 800e710:	4618      	mov	r0, r3
 800e712:	f7ff ff6b 	bl	800e5ec <prvSampleTimeNow>
 800e716:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	2b09      	cmp	r3, #9
 800e71c:	f200 8096 	bhi.w	800e84c <prvProcessReceivedCommands+0x19c>
 800e720:	a201      	add	r2, pc, #4	; (adr r2, 800e728 <prvProcessReceivedCommands+0x78>)
 800e722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e726:	bf00      	nop
 800e728:	0800e751 	.word	0x0800e751
 800e72c:	0800e751 	.word	0x0800e751
 800e730:	0800e751 	.word	0x0800e751
 800e734:	0800e7c5 	.word	0x0800e7c5
 800e738:	0800e7d9 	.word	0x0800e7d9
 800e73c:	0800e823 	.word	0x0800e823
 800e740:	0800e751 	.word	0x0800e751
 800e744:	0800e751 	.word	0x0800e751
 800e748:	0800e7c5 	.word	0x0800e7c5
 800e74c:	0800e7d9 	.word	0x0800e7d9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e752:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e756:	f043 0301 	orr.w	r3, r3, #1
 800e75a:	b2da      	uxtb	r2, r3
 800e75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e75e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e762:	68ba      	ldr	r2, [r7, #8]
 800e764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e766:	699b      	ldr	r3, [r3, #24]
 800e768:	18d1      	adds	r1, r2, r3
 800e76a:	68bb      	ldr	r3, [r7, #8]
 800e76c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e76e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e770:	f7ff ff5c 	bl	800e62c <prvInsertTimerInActiveList>
 800e774:	4603      	mov	r3, r0
 800e776:	2b00      	cmp	r3, #0
 800e778:	d069      	beq.n	800e84e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e77c:	6a1b      	ldr	r3, [r3, #32]
 800e77e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e780:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e784:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e788:	f003 0304 	and.w	r3, r3, #4
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d05e      	beq.n	800e84e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e790:	68ba      	ldr	r2, [r7, #8]
 800e792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e794:	699b      	ldr	r3, [r3, #24]
 800e796:	441a      	add	r2, r3
 800e798:	2300      	movs	r3, #0
 800e79a:	9300      	str	r3, [sp, #0]
 800e79c:	2300      	movs	r3, #0
 800e79e:	2100      	movs	r1, #0
 800e7a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e7a2:	f7ff fe05 	bl	800e3b0 <xTimerGenericCommand>
 800e7a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e7a8:	6a3b      	ldr	r3, [r7, #32]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d14f      	bne.n	800e84e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7b2:	f383 8811 	msr	BASEPRI, r3
 800e7b6:	f3bf 8f6f 	isb	sy
 800e7ba:	f3bf 8f4f 	dsb	sy
 800e7be:	61bb      	str	r3, [r7, #24]
}
 800e7c0:	bf00      	nop
 800e7c2:	e7fe      	b.n	800e7c2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e7ca:	f023 0301 	bic.w	r3, r3, #1
 800e7ce:	b2da      	uxtb	r2, r3
 800e7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e7d6:	e03a      	b.n	800e84e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e7de:	f043 0301 	orr.w	r3, r3, #1
 800e7e2:	b2da      	uxtb	r2, r3
 800e7e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e7ea:	68ba      	ldr	r2, [r7, #8]
 800e7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7ee:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7f2:	699b      	ldr	r3, [r3, #24]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d10a      	bne.n	800e80e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e7f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7fc:	f383 8811 	msr	BASEPRI, r3
 800e800:	f3bf 8f6f 	isb	sy
 800e804:	f3bf 8f4f 	dsb	sy
 800e808:	617b      	str	r3, [r7, #20]
}
 800e80a:	bf00      	nop
 800e80c:	e7fe      	b.n	800e80c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e810:	699a      	ldr	r2, [r3, #24]
 800e812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e814:	18d1      	adds	r1, r2, r3
 800e816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e81a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e81c:	f7ff ff06 	bl	800e62c <prvInsertTimerInActiveList>
					break;
 800e820:	e015      	b.n	800e84e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e824:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e828:	f003 0302 	and.w	r3, r3, #2
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d103      	bne.n	800e838 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e830:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e832:	f7fd f921 	bl	800ba78 <vPortFree>
 800e836:	e00a      	b.n	800e84e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e83a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e83e:	f023 0301 	bic.w	r3, r3, #1
 800e842:	b2da      	uxtb	r2, r3
 800e844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e846:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e84a:	e000      	b.n	800e84e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800e84c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e84e:	4b08      	ldr	r3, [pc, #32]	; (800e870 <prvProcessReceivedCommands+0x1c0>)
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	1d39      	adds	r1, r7, #4
 800e854:	2200      	movs	r2, #0
 800e856:	4618      	mov	r0, r3
 800e858:	f7fe f8fc 	bl	800ca54 <xQueueReceive>
 800e85c:	4603      	mov	r3, r0
 800e85e:	2b00      	cmp	r3, #0
 800e860:	f47f af2a 	bne.w	800e6b8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e864:	bf00      	nop
 800e866:	bf00      	nop
 800e868:	3730      	adds	r7, #48	; 0x30
 800e86a:	46bd      	mov	sp, r7
 800e86c:	bd80      	pop	{r7, pc}
 800e86e:	bf00      	nop
 800e870:	2400adf0 	.word	0x2400adf0

0800e874 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e874:	b580      	push	{r7, lr}
 800e876:	b088      	sub	sp, #32
 800e878:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e87a:	e048      	b.n	800e90e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e87c:	4b2d      	ldr	r3, [pc, #180]	; (800e934 <prvSwitchTimerLists+0xc0>)
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	68db      	ldr	r3, [r3, #12]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e886:	4b2b      	ldr	r3, [pc, #172]	; (800e934 <prvSwitchTimerLists+0xc0>)
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	68db      	ldr	r3, [r3, #12]
 800e88c:	68db      	ldr	r3, [r3, #12]
 800e88e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	3304      	adds	r3, #4
 800e894:	4618      	mov	r0, r3
 800e896:	f7fd fa97 	bl	800bdc8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	6a1b      	ldr	r3, [r3, #32]
 800e89e:	68f8      	ldr	r0, [r7, #12]
 800e8a0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e8a8:	f003 0304 	and.w	r3, r3, #4
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d02e      	beq.n	800e90e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	699b      	ldr	r3, [r3, #24]
 800e8b4:	693a      	ldr	r2, [r7, #16]
 800e8b6:	4413      	add	r3, r2
 800e8b8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e8ba:	68ba      	ldr	r2, [r7, #8]
 800e8bc:	693b      	ldr	r3, [r7, #16]
 800e8be:	429a      	cmp	r2, r3
 800e8c0:	d90e      	bls.n	800e8e0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	68ba      	ldr	r2, [r7, #8]
 800e8c6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	68fa      	ldr	r2, [r7, #12]
 800e8cc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e8ce:	4b19      	ldr	r3, [pc, #100]	; (800e934 <prvSwitchTimerLists+0xc0>)
 800e8d0:	681a      	ldr	r2, [r3, #0]
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	3304      	adds	r3, #4
 800e8d6:	4619      	mov	r1, r3
 800e8d8:	4610      	mov	r0, r2
 800e8da:	f7fd fa3c 	bl	800bd56 <vListInsert>
 800e8de:	e016      	b.n	800e90e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	9300      	str	r3, [sp, #0]
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	693a      	ldr	r2, [r7, #16]
 800e8e8:	2100      	movs	r1, #0
 800e8ea:	68f8      	ldr	r0, [r7, #12]
 800e8ec:	f7ff fd60 	bl	800e3b0 <xTimerGenericCommand>
 800e8f0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d10a      	bne.n	800e90e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e8f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8fc:	f383 8811 	msr	BASEPRI, r3
 800e900:	f3bf 8f6f 	isb	sy
 800e904:	f3bf 8f4f 	dsb	sy
 800e908:	603b      	str	r3, [r7, #0]
}
 800e90a:	bf00      	nop
 800e90c:	e7fe      	b.n	800e90c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e90e:	4b09      	ldr	r3, [pc, #36]	; (800e934 <prvSwitchTimerLists+0xc0>)
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d1b1      	bne.n	800e87c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e918:	4b06      	ldr	r3, [pc, #24]	; (800e934 <prvSwitchTimerLists+0xc0>)
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e91e:	4b06      	ldr	r3, [pc, #24]	; (800e938 <prvSwitchTimerLists+0xc4>)
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	4a04      	ldr	r2, [pc, #16]	; (800e934 <prvSwitchTimerLists+0xc0>)
 800e924:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e926:	4a04      	ldr	r2, [pc, #16]	; (800e938 <prvSwitchTimerLists+0xc4>)
 800e928:	697b      	ldr	r3, [r7, #20]
 800e92a:	6013      	str	r3, [r2, #0]
}
 800e92c:	bf00      	nop
 800e92e:	3718      	adds	r7, #24
 800e930:	46bd      	mov	sp, r7
 800e932:	bd80      	pop	{r7, pc}
 800e934:	2400ade8 	.word	0x2400ade8
 800e938:	2400adec 	.word	0x2400adec

0800e93c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b082      	sub	sp, #8
 800e940:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e942:	f7fd fb97 	bl	800c074 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e946:	4b15      	ldr	r3, [pc, #84]	; (800e99c <prvCheckForValidListAndQueue+0x60>)
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d120      	bne.n	800e990 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e94e:	4814      	ldr	r0, [pc, #80]	; (800e9a0 <prvCheckForValidListAndQueue+0x64>)
 800e950:	f7fd f9b0 	bl	800bcb4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e954:	4813      	ldr	r0, [pc, #76]	; (800e9a4 <prvCheckForValidListAndQueue+0x68>)
 800e956:	f7fd f9ad 	bl	800bcb4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e95a:	4b13      	ldr	r3, [pc, #76]	; (800e9a8 <prvCheckForValidListAndQueue+0x6c>)
 800e95c:	4a10      	ldr	r2, [pc, #64]	; (800e9a0 <prvCheckForValidListAndQueue+0x64>)
 800e95e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e960:	4b12      	ldr	r3, [pc, #72]	; (800e9ac <prvCheckForValidListAndQueue+0x70>)
 800e962:	4a10      	ldr	r2, [pc, #64]	; (800e9a4 <prvCheckForValidListAndQueue+0x68>)
 800e964:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e966:	2300      	movs	r3, #0
 800e968:	9300      	str	r3, [sp, #0]
 800e96a:	4b11      	ldr	r3, [pc, #68]	; (800e9b0 <prvCheckForValidListAndQueue+0x74>)
 800e96c:	4a11      	ldr	r2, [pc, #68]	; (800e9b4 <prvCheckForValidListAndQueue+0x78>)
 800e96e:	2110      	movs	r1, #16
 800e970:	200a      	movs	r0, #10
 800e972:	f7fd fd09 	bl	800c388 <xQueueGenericCreateStatic>
 800e976:	4603      	mov	r3, r0
 800e978:	4a08      	ldr	r2, [pc, #32]	; (800e99c <prvCheckForValidListAndQueue+0x60>)
 800e97a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e97c:	4b07      	ldr	r3, [pc, #28]	; (800e99c <prvCheckForValidListAndQueue+0x60>)
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d005      	beq.n	800e990 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e984:	4b05      	ldr	r3, [pc, #20]	; (800e99c <prvCheckForValidListAndQueue+0x60>)
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	490b      	ldr	r1, [pc, #44]	; (800e9b8 <prvCheckForValidListAndQueue+0x7c>)
 800e98a:	4618      	mov	r0, r3
 800e98c:	f7fe fc1a 	bl	800d1c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e990:	f7fd fba0 	bl	800c0d4 <vPortExitCritical>
}
 800e994:	bf00      	nop
 800e996:	46bd      	mov	sp, r7
 800e998:	bd80      	pop	{r7, pc}
 800e99a:	bf00      	nop
 800e99c:	2400adf0 	.word	0x2400adf0
 800e9a0:	2400adc0 	.word	0x2400adc0
 800e9a4:	2400add4 	.word	0x2400add4
 800e9a8:	2400ade8 	.word	0x2400ade8
 800e9ac:	2400adec 	.word	0x2400adec
 800e9b0:	2400ae9c 	.word	0x2400ae9c
 800e9b4:	2400adfc 	.word	0x2400adfc
 800e9b8:	0802e5a4 	.word	0x0802e5a4

0800e9bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800e9bc:	b480      	push	{r7}
 800e9be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800e9c0:	4b3f      	ldr	r3, [pc, #252]	; (800eac0 <SystemInit+0x104>)
 800e9c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e9c6:	4a3e      	ldr	r2, [pc, #248]	; (800eac0 <SystemInit+0x104>)
 800e9c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e9cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800e9d0:	4b3b      	ldr	r3, [pc, #236]	; (800eac0 <SystemInit+0x104>)
 800e9d2:	691b      	ldr	r3, [r3, #16]
 800e9d4:	4a3a      	ldr	r2, [pc, #232]	; (800eac0 <SystemInit+0x104>)
 800e9d6:	f043 0310 	orr.w	r3, r3, #16
 800e9da:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800e9dc:	4b39      	ldr	r3, [pc, #228]	; (800eac4 <SystemInit+0x108>)
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	f003 030f 	and.w	r3, r3, #15
 800e9e4:	2b06      	cmp	r3, #6
 800e9e6:	d807      	bhi.n	800e9f8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800e9e8:	4b36      	ldr	r3, [pc, #216]	; (800eac4 <SystemInit+0x108>)
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	f023 030f 	bic.w	r3, r3, #15
 800e9f0:	4a34      	ldr	r2, [pc, #208]	; (800eac4 <SystemInit+0x108>)
 800e9f2:	f043 0307 	orr.w	r3, r3, #7
 800e9f6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800e9f8:	4b33      	ldr	r3, [pc, #204]	; (800eac8 <SystemInit+0x10c>)
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	4a32      	ldr	r2, [pc, #200]	; (800eac8 <SystemInit+0x10c>)
 800e9fe:	f043 0301 	orr.w	r3, r3, #1
 800ea02:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800ea04:	4b30      	ldr	r3, [pc, #192]	; (800eac8 <SystemInit+0x10c>)
 800ea06:	2200      	movs	r2, #0
 800ea08:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800ea0a:	4b2f      	ldr	r3, [pc, #188]	; (800eac8 <SystemInit+0x10c>)
 800ea0c:	681a      	ldr	r2, [r3, #0]
 800ea0e:	492e      	ldr	r1, [pc, #184]	; (800eac8 <SystemInit+0x10c>)
 800ea10:	4b2e      	ldr	r3, [pc, #184]	; (800eacc <SystemInit+0x110>)
 800ea12:	4013      	ands	r3, r2
 800ea14:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800ea16:	4b2b      	ldr	r3, [pc, #172]	; (800eac4 <SystemInit+0x108>)
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	f003 0308 	and.w	r3, r3, #8
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d007      	beq.n	800ea32 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800ea22:	4b28      	ldr	r3, [pc, #160]	; (800eac4 <SystemInit+0x108>)
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	f023 030f 	bic.w	r3, r3, #15
 800ea2a:	4a26      	ldr	r2, [pc, #152]	; (800eac4 <SystemInit+0x108>)
 800ea2c:	f043 0307 	orr.w	r3, r3, #7
 800ea30:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800ea32:	4b25      	ldr	r3, [pc, #148]	; (800eac8 <SystemInit+0x10c>)
 800ea34:	2200      	movs	r2, #0
 800ea36:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800ea38:	4b23      	ldr	r3, [pc, #140]	; (800eac8 <SystemInit+0x10c>)
 800ea3a:	2200      	movs	r2, #0
 800ea3c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800ea3e:	4b22      	ldr	r3, [pc, #136]	; (800eac8 <SystemInit+0x10c>)
 800ea40:	2200      	movs	r2, #0
 800ea42:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800ea44:	4b20      	ldr	r3, [pc, #128]	; (800eac8 <SystemInit+0x10c>)
 800ea46:	4a22      	ldr	r2, [pc, #136]	; (800ead0 <SystemInit+0x114>)
 800ea48:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800ea4a:	4b1f      	ldr	r3, [pc, #124]	; (800eac8 <SystemInit+0x10c>)
 800ea4c:	4a21      	ldr	r2, [pc, #132]	; (800ead4 <SystemInit+0x118>)
 800ea4e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800ea50:	4b1d      	ldr	r3, [pc, #116]	; (800eac8 <SystemInit+0x10c>)
 800ea52:	4a21      	ldr	r2, [pc, #132]	; (800ead8 <SystemInit+0x11c>)
 800ea54:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800ea56:	4b1c      	ldr	r3, [pc, #112]	; (800eac8 <SystemInit+0x10c>)
 800ea58:	2200      	movs	r2, #0
 800ea5a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800ea5c:	4b1a      	ldr	r3, [pc, #104]	; (800eac8 <SystemInit+0x10c>)
 800ea5e:	4a1e      	ldr	r2, [pc, #120]	; (800ead8 <SystemInit+0x11c>)
 800ea60:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800ea62:	4b19      	ldr	r3, [pc, #100]	; (800eac8 <SystemInit+0x10c>)
 800ea64:	2200      	movs	r2, #0
 800ea66:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800ea68:	4b17      	ldr	r3, [pc, #92]	; (800eac8 <SystemInit+0x10c>)
 800ea6a:	4a1b      	ldr	r2, [pc, #108]	; (800ead8 <SystemInit+0x11c>)
 800ea6c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800ea6e:	4b16      	ldr	r3, [pc, #88]	; (800eac8 <SystemInit+0x10c>)
 800ea70:	2200      	movs	r2, #0
 800ea72:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800ea74:	4b14      	ldr	r3, [pc, #80]	; (800eac8 <SystemInit+0x10c>)
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	4a13      	ldr	r2, [pc, #76]	; (800eac8 <SystemInit+0x10c>)
 800ea7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ea7e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800ea80:	4b11      	ldr	r3, [pc, #68]	; (800eac8 <SystemInit+0x10c>)
 800ea82:	2200      	movs	r2, #0
 800ea84:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800ea86:	4b15      	ldr	r3, [pc, #84]	; (800eadc <SystemInit+0x120>)
 800ea88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea8a:	4a14      	ldr	r2, [pc, #80]	; (800eadc <SystemInit+0x120>)
 800ea8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ea90:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800ea92:	4b13      	ldr	r3, [pc, #76]	; (800eae0 <SystemInit+0x124>)
 800ea94:	681a      	ldr	r2, [r3, #0]
 800ea96:	4b13      	ldr	r3, [pc, #76]	; (800eae4 <SystemInit+0x128>)
 800ea98:	4013      	ands	r3, r2
 800ea9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ea9e:	d202      	bcs.n	800eaa6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800eaa0:	4b11      	ldr	r3, [pc, #68]	; (800eae8 <SystemInit+0x12c>)
 800eaa2:	2201      	movs	r2, #1
 800eaa4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800eaa6:	4b11      	ldr	r3, [pc, #68]	; (800eaec <SystemInit+0x130>)
 800eaa8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800eaac:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800eaae:	4b04      	ldr	r3, [pc, #16]	; (800eac0 <SystemInit+0x104>)
 800eab0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800eab4:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800eab6:	bf00      	nop
 800eab8:	46bd      	mov	sp, r7
 800eaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eabe:	4770      	bx	lr
 800eac0:	e000ed00 	.word	0xe000ed00
 800eac4:	52002000 	.word	0x52002000
 800eac8:	58024400 	.word	0x58024400
 800eacc:	eaf6ed7f 	.word	0xeaf6ed7f
 800ead0:	02020200 	.word	0x02020200
 800ead4:	01ff0000 	.word	0x01ff0000
 800ead8:	01010280 	.word	0x01010280
 800eadc:	580000c0 	.word	0x580000c0
 800eae0:	5c001000 	.word	0x5c001000
 800eae4:	ffff0000 	.word	0xffff0000
 800eae8:	51008108 	.word	0x51008108
 800eaec:	52004000 	.word	0x52004000

0800eaf0 <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b084      	sub	sp, #16
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
 800eaf8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d103      	bne.n	800eb08 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 800eb00:	f04f 33ff 	mov.w	r3, #4294967295
 800eb04:	60fb      	str	r3, [r7, #12]
 800eb06:	e02c      	b.n	800eb62 <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800eb08:	683b      	ldr	r3, [r7, #0]
 800eb0a:	681a      	ldr	r2, [r3, #0]
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800eb10:	683b      	ldr	r3, [r7, #0]
 800eb12:	685a      	ldr	r2, [r3, #4]
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 800eb18:	683b      	ldr	r3, [r7, #0]
 800eb1a:	891a      	ldrh	r2, [r3, #8]
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800eb20:	683b      	ldr	r3, [r7, #0]
 800eb22:	68da      	ldr	r2, [r3, #12]
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800eb28:	683b      	ldr	r3, [r7, #0]
 800eb2a:	691a      	ldr	r2, [r3, #16]
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 800eb30:	683b      	ldr	r3, [r7, #0]
 800eb32:	695a      	ldr	r2, [r3, #20]
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	4a0c      	ldr	r2, [pc, #48]	; (800eb6c <FT5336_RegisterBusIO+0x7c>)
 800eb3c:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	4a0b      	ldr	r2, [pc, #44]	; (800eb70 <FT5336_RegisterBusIO+0x80>)
 800eb42:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	687a      	ldr	r2, [r7, #4]
 800eb48:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d004      	beq.n	800eb5c <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	4798      	blx	r3
 800eb58:	60f8      	str	r0, [r7, #12]
 800eb5a:	e002      	b.n	800eb62 <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 800eb5c:	f04f 33ff 	mov.w	r3, #4294967295
 800eb60:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800eb62:	68fb      	ldr	r3, [r7, #12]
}
 800eb64:	4618      	mov	r0, r3
 800eb66:	3710      	adds	r7, #16
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	bd80      	pop	{r7, pc}
 800eb6c:	0800ef69 	.word	0x0800ef69
 800eb70:	0800ef9d 	.word	0x0800ef9d

0800eb74 <FT5336_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to FT5336 sensor capabilities
  * @retval Component status
  */
int32_t FT5336_GetCapabilities(FT5336_Object_t *pObj, FT5336_Capabilities_t *Capabilities)
{
 800eb74:	b480      	push	{r7}
 800eb76:	b083      	sub	sp, #12
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
 800eb7c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 800eb7e:	683b      	ldr	r3, [r7, #0]
 800eb80:	2201      	movs	r2, #1
 800eb82:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 1;
 800eb84:	683b      	ldr	r3, [r7, #0]
 800eb86:	2201      	movs	r2, #1
 800eb88:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 800eb8a:	683b      	ldr	r3, [r7, #0]
 800eb8c:	2205      	movs	r2, #5
 800eb8e:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 800eb90:	683b      	ldr	r3, [r7, #0]
 800eb92:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800eb96:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 800eb98:	683b      	ldr	r3, [r7, #0]
 800eb9a:	f44f 7288 	mov.w	r2, #272	; 0x110
 800eb9e:	609a      	str	r2, [r3, #8]

  return FT5336_OK;
 800eba0:	2300      	movs	r3, #0
}
 800eba2:	4618      	mov	r0, r3
 800eba4:	370c      	adds	r7, #12
 800eba6:	46bd      	mov	sp, r7
 800eba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebac:	4770      	bx	lr

0800ebae <FT5336_Init>:
  * @param  pObj Component object pointer
  * @param  GestureInit: Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_Init(FT5336_Object_t *pObj)
{
 800ebae:	b580      	push	{r7, lr}
 800ebb0:	b084      	sub	sp, #16
 800ebb2:	af00      	add	r7, sp, #0
 800ebb4:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 0U)
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d10d      	bne.n	800ebe0 <FT5336_Init+0x32>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	4798      	blx	r3
    /* This is called internal calibration of the touch screen                 */
    ret += FT5336_TS_Calibration(pObj);
#endif /* (FT5336_AUTO_CALIBRATION_ENABLED == 1) */
    /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
    /* Note TS_INT is active low                                                                      */
    ret += FT5336_DisableIT(pObj);
 800ebca:	6878      	ldr	r0, [r7, #4]
 800ebcc:	f000 f987 	bl	800eede <FT5336_DisableIT>
 800ebd0:	4602      	mov	r2, r0
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	4413      	add	r3, r2
 800ebd6:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 1;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	2201      	movs	r2, #1
 800ebdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  if(ret != FT5336_OK)
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d002      	beq.n	800ebec <FT5336_Init+0x3e>
  {
    ret = FT5336_ERROR;
 800ebe6:	f04f 33ff 	mov.w	r3, #4294967295
 800ebea:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800ebec:	68fb      	ldr	r3, [r7, #12]
}
 800ebee:	4618      	mov	r0, r3
 800ebf0:	3710      	adds	r7, #16
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	bd80      	pop	{r7, pc}

0800ebf6 <FT5336_DeInit>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval FT5336_OK
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
 800ebf6:	b480      	push	{r7}
 800ebf8:	b085      	sub	sp, #20
 800ebfa:	af00      	add	r7, sp, #0
 800ebfc:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 800ebfe:	2300      	movs	r3, #0
 800ec00:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 1U)
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ec08:	2b01      	cmp	r3, #1
 800ec0a:	d103      	bne.n	800ec14 <FT5336_DeInit+0x1e>
  {
    pObj->IsInitialized = 0;
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	2200      	movs	r2, #0
 800ec10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return ret;
 800ec14:	68fb      	ldr	r3, [r7, #12]
}
 800ec16:	4618      	mov	r0, r3
 800ec18:	3714      	adds	r7, #20
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec20:	4770      	bx	lr

0800ec22 <FT5336_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_GestureConfig(FT5336_Object_t *pObj, FT5336_Gesture_Init_t *GestureInit)
{
 800ec22:	b580      	push	{r7, lr}
 800ec24:	b084      	sub	sp, #16
 800ec26:	af00      	add	r7, sp, #0
 800ec28:	6078      	str	r0, [r7, #4]
 800ec2a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	f103 0218 	add.w	r2, r3, #24
 800ec32:	683b      	ldr	r3, [r7, #0]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	b2db      	uxtb	r3, r3
 800ec38:	4619      	mov	r1, r3
 800ec3a:	4610      	mov	r0, r2
 800ec3c:	f000 fa25 	bl	800f08a <ft5336_radian_value>
 800ec40:	60f8      	str	r0, [r7, #12]
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	f103 0218 	add.w	r2, r3, #24
 800ec48:	683b      	ldr	r3, [r7, #0]
 800ec4a:	685b      	ldr	r3, [r3, #4]
 800ec4c:	b2db      	uxtb	r3, r3
 800ec4e:	4619      	mov	r1, r3
 800ec50:	4610      	mov	r0, r2
 800ec52:	f000 fa2b 	bl	800f0ac <ft5336_offset_left_right>
 800ec56:	4602      	mov	r2, r0
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	4413      	add	r3, r2
 800ec5c:	60fb      	str	r3, [r7, #12]
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	f103 0218 	add.w	r2, r3, #24
 800ec64:	683b      	ldr	r3, [r7, #0]
 800ec66:	689b      	ldr	r3, [r3, #8]
 800ec68:	b2db      	uxtb	r3, r3
 800ec6a:	4619      	mov	r1, r3
 800ec6c:	4610      	mov	r0, r2
 800ec6e:	f000 fa2e 	bl	800f0ce <ft5336_offset_up_down>
 800ec72:	4602      	mov	r2, r0
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	4413      	add	r3, r2
 800ec78:	60fb      	str	r3, [r7, #12]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	f103 0218 	add.w	r2, r3, #24
 800ec80:	683b      	ldr	r3, [r7, #0]
 800ec82:	68db      	ldr	r3, [r3, #12]
 800ec84:	b2db      	uxtb	r3, r3
 800ec86:	4619      	mov	r1, r3
 800ec88:	4610      	mov	r0, r2
 800ec8a:	f000 fa31 	bl	800f0f0 <ft5336_disatnce_left_right>
 800ec8e:	4602      	mov	r2, r0
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	4413      	add	r3, r2
 800ec94:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	f103 0218 	add.w	r2, r3, #24
 800ec9c:	683b      	ldr	r3, [r7, #0]
 800ec9e:	691b      	ldr	r3, [r3, #16]
 800eca0:	b2db      	uxtb	r3, r3
 800eca2:	4619      	mov	r1, r3
 800eca4:	4610      	mov	r0, r2
 800eca6:	f000 fa34 	bl	800f112 <ft5336_distance_up_down>
 800ecaa:	4602      	mov	r2, r0
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	4413      	add	r3, r2
 800ecb0:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	f103 0218 	add.w	r2, r3, #24
 800ecb8:	683b      	ldr	r3, [r7, #0]
 800ecba:	695b      	ldr	r3, [r3, #20]
 800ecbc:	b2db      	uxtb	r3, r3
 800ecbe:	4619      	mov	r1, r3
 800ecc0:	4610      	mov	r0, r2
 800ecc2:	f000 fa37 	bl	800f134 <ft5336_distance_zoom>
 800ecc6:	4602      	mov	r2, r0
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	4413      	add	r3, r2
 800eccc:	60fb      	str	r3, [r7, #12]

  if(ret != FT5336_OK)
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d002      	beq.n	800ecda <FT5336_GestureConfig+0xb8>
  {
    ret = FT5336_ERROR;
 800ecd4:	f04f 33ff 	mov.w	r3, #4294967295
 800ecd8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800ecda:	68fb      	ldr	r3, [r7, #12]
}
 800ecdc:	4618      	mov	r0, r3
 800ecde:	3710      	adds	r7, #16
 800ece0:	46bd      	mov	sp, r7
 800ece2:	bd80      	pop	{r7, pc}

0800ece4 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b082      	sub	sp, #8
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
 800ecec:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	3318      	adds	r3, #24
 800ecf2:	6839      	ldr	r1, [r7, #0]
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	f000 fa3f 	bl	800f178 <ft5336_chip_id>
 800ecfa:	4603      	mov	r3, r0
}
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	3708      	adds	r7, #8
 800ed00:	46bd      	mov	sp, r7
 800ed02:	bd80      	pop	{r7, pc}

0800ed04 <FT5336_GetState>:
  * @param  pObj Component object pointer
  * @param  State: Single Touch stucture pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetState(FT5336_Object_t *pObj, FT5336_State_t *State)
{
 800ed04:	b580      	push	{r7, lr}
 800ed06:	b084      	sub	sp, #16
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]
 800ed0c:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 800ed0e:	2300      	movs	r3, #0
 800ed10:	60fb      	str	r3, [r7, #12]
  uint8_t  data[4];

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 800ed12:	6878      	ldr	r0, [r7, #4]
 800ed14:	f000 f908 	bl	800ef28 <FT5336_DetectTouch>
 800ed18:	4603      	mov	r3, r0
 800ed1a:	461a      	mov	r2, r3
 800ed1c:	683b      	ldr	r3, [r7, #0]
 800ed1e:	601a      	str	r2, [r3, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	f103 0018 	add.w	r0, r3, #24
 800ed26:	f107 0208 	add.w	r2, r7, #8
 800ed2a:	2304      	movs	r3, #4
 800ed2c:	2103      	movs	r1, #3
 800ed2e:	f000 f94f 	bl	800efd0 <ft5336_read_reg>
 800ed32:	4603      	mov	r3, r0
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d003      	beq.n	800ed40 <FT5336_GetState+0x3c>
  {
    ret = FT5336_ERROR;
 800ed38:	f04f 33ff 	mov.w	r3, #4294967295
 800ed3c:	60fb      	str	r3, [r7, #12]
 800ed3e:	e00f      	b.n	800ed60 <FT5336_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 800ed40:	7a3b      	ldrb	r3, [r7, #8]
 800ed42:	021b      	lsls	r3, r3, #8
 800ed44:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800ed48:	7a7a      	ldrb	r2, [r7, #9]
 800ed4a:	431a      	orrs	r2, r3
 800ed4c:	683b      	ldr	r3, [r7, #0]
 800ed4e:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 800ed50:	7abb      	ldrb	r3, [r7, #10]
 800ed52:	021b      	lsls	r3, r3, #8
 800ed54:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800ed58:	7afa      	ldrb	r2, [r7, #11]
 800ed5a:	431a      	orrs	r2, r3
 800ed5c:	683b      	ldr	r3, [r7, #0]
 800ed5e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ed60:	68fb      	ldr	r3, [r7, #12]
}
 800ed62:	4618      	mov	r0, r3
 800ed64:	3710      	adds	r7, #16
 800ed66:	46bd      	mov	sp, r7
 800ed68:	bd80      	pop	{r7, pc}

0800ed6a <FT5336_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetMultiTouchState(FT5336_Object_t *pObj, FT5336_MultiTouch_State_t *State)
{
 800ed6a:	b580      	push	{r7, lr}
 800ed6c:	b08c      	sub	sp, #48	; 0x30
 800ed6e:	af00      	add	r7, sp, #0
 800ed70:	6078      	str	r0, [r7, #4]
 800ed72:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 800ed74:	2300      	movs	r3, #0
 800ed76:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t  data[30];
  uint32_t i;

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 800ed78:	6878      	ldr	r0, [r7, #4]
 800ed7a:	f000 f8d5 	bl	800ef28 <FT5336_DetectTouch>
 800ed7e:	4603      	mov	r3, r0
 800ed80:	461a      	mov	r2, r3
 800ed82:	683b      	ldr	r3, [r7, #0]
 800ed84:	601a      	str	r2, [r3, #0]

  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	f103 0018 	add.w	r0, r3, #24
 800ed8c:	f107 0208 	add.w	r2, r7, #8
 800ed90:	231e      	movs	r3, #30
 800ed92:	2103      	movs	r1, #3
 800ed94:	f000 f91c 	bl	800efd0 <ft5336_read_reg>
 800ed98:	4603      	mov	r3, r0
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d003      	beq.n	800eda6 <FT5336_GetMultiTouchState+0x3c>
  {
    ret = FT5336_ERROR;
 800ed9e:	f04f 33ff 	mov.w	r3, #4294967295
 800eda2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eda4:	e077      	b.n	800ee96 <FT5336_GetMultiTouchState+0x12c>
  }
  else
  {
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 800eda6:	2300      	movs	r3, #0
 800eda8:	62bb      	str	r3, [r7, #40]	; 0x28
 800edaa:	e071      	b.n	800ee90 <FT5336_GetMultiTouchState+0x126>
    {
    /* Send back first ready X position to caller */
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 800edac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800edae:	4613      	mov	r3, r2
 800edb0:	005b      	lsls	r3, r3, #1
 800edb2:	4413      	add	r3, r2
 800edb4:	005b      	lsls	r3, r3, #1
 800edb6:	3330      	adds	r3, #48	; 0x30
 800edb8:	443b      	add	r3, r7
 800edba:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800edbe:	021b      	lsls	r3, r3, #8
 800edc0:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 800edc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800edc6:	4613      	mov	r3, r2
 800edc8:	005b      	lsls	r3, r3, #1
 800edca:	4413      	add	r3, r2
 800edcc:	005b      	lsls	r3, r3, #1
 800edce:	3301      	adds	r3, #1
 800edd0:	3330      	adds	r3, #48	; 0x30
 800edd2:	443b      	add	r3, r7
 800edd4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800edd8:	ea41 0203 	orr.w	r2, r1, r3
 800eddc:	6839      	ldr	r1, [r7, #0]
 800edde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ede0:	009b      	lsls	r3, r3, #2
 800ede2:	440b      	add	r3, r1
 800ede4:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 800ede6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ede8:	4613      	mov	r3, r2
 800edea:	005b      	lsls	r3, r3, #1
 800edec:	4413      	add	r3, r2
 800edee:	005b      	lsls	r3, r3, #1
 800edf0:	3302      	adds	r3, #2
 800edf2:	3330      	adds	r3, #48	; 0x30
 800edf4:	443b      	add	r3, r7
 800edf6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800edfa:	021b      	lsls	r3, r3, #8
 800edfc:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 800ee00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee02:	4613      	mov	r3, r2
 800ee04:	005b      	lsls	r3, r3, #1
 800ee06:	4413      	add	r3, r2
 800ee08:	005b      	lsls	r3, r3, #1
 800ee0a:	3303      	adds	r3, #3
 800ee0c:	3330      	adds	r3, #48	; 0x30
 800ee0e:	443b      	add	r3, r7
 800ee10:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800ee14:	4319      	orrs	r1, r3
 800ee16:	683b      	ldr	r3, [r7, #0]
 800ee18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee1a:	3206      	adds	r2, #6
 800ee1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Event to caller */
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 800ee20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee22:	4613      	mov	r3, r2
 800ee24:	005b      	lsls	r3, r3, #1
 800ee26:	4413      	add	r3, r2
 800ee28:	005b      	lsls	r3, r3, #1
 800ee2a:	3330      	adds	r3, #48	; 0x30
 800ee2c:	443b      	add	r3, r7
 800ee2e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800ee32:	099b      	lsrs	r3, r3, #6
 800ee34:	b2db      	uxtb	r3, r3
 800ee36:	4619      	mov	r1, r3
 800ee38:	683b      	ldr	r3, [r7, #0]
 800ee3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee3c:	3210      	adds	r2, #16
 800ee3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Weight to caller */
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 800ee42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee44:	4613      	mov	r3, r2
 800ee46:	005b      	lsls	r3, r3, #1
 800ee48:	4413      	add	r3, r2
 800ee4a:	005b      	lsls	r3, r3, #1
 800ee4c:	3304      	adds	r3, #4
 800ee4e:	3330      	adds	r3, #48	; 0x30
 800ee50:	443b      	add	r3, r7
 800ee52:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800ee56:	4619      	mov	r1, r3
 800ee58:	683a      	ldr	r2, [r7, #0]
 800ee5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee5c:	330a      	adds	r3, #10
 800ee5e:	009b      	lsls	r3, r3, #2
 800ee60:	4413      	add	r3, r2
 800ee62:	6059      	str	r1, [r3, #4]
    /* Send back first ready Area to caller */
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 800ee64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee66:	4613      	mov	r3, r2
 800ee68:	005b      	lsls	r3, r3, #1
 800ee6a:	4413      	add	r3, r2
 800ee6c:	005b      	lsls	r3, r3, #1
 800ee6e:	3305      	adds	r3, #5
 800ee70:	3330      	adds	r3, #48	; 0x30
 800ee72:	443b      	add	r3, r7
 800ee74:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800ee78:	091b      	lsrs	r3, r3, #4
 800ee7a:	b2db      	uxtb	r3, r3
 800ee7c:	4619      	mov	r1, r3
 800ee7e:	683a      	ldr	r2, [r7, #0]
 800ee80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee82:	3314      	adds	r3, #20
 800ee84:	009b      	lsls	r3, r3, #2
 800ee86:	4413      	add	r3, r2
 800ee88:	6059      	str	r1, [r3, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 800ee8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee8c:	3301      	adds	r3, #1
 800ee8e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ee90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee92:	2b04      	cmp	r3, #4
 800ee94:	d98a      	bls.n	800edac <FT5336_GetMultiTouchState+0x42>
    }
  }

  return ret;
 800ee96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800ee98:	4618      	mov	r0, r3
 800ee9a:	3730      	adds	r7, #48	; 0x30
 800ee9c:	46bd      	mov	sp, r7
 800ee9e:	bd80      	pop	{r7, pc}

0800eea0 <FT5336_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId: gesture ID
  * @retval Gesture ID.
  */
int32_t FT5336_GetGesture(FT5336_Object_t *pObj, uint8_t *GestureId)
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b082      	sub	sp, #8
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
 800eea8:	6039      	str	r1, [r7, #0]
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	3318      	adds	r3, #24
 800eeae:	6839      	ldr	r1, [r7, #0]
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	f000 f8bb 	bl	800f02c <ft5336_gest_id>
 800eeb6:	4603      	mov	r3, r0
}
 800eeb8:	4618      	mov	r0, r3
 800eeba:	3708      	adds	r7, #8
 800eebc:	46bd      	mov	sp, r7
 800eebe:	bd80      	pop	{r7, pc}

0800eec0 <FT5336_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_EnableIT(FT5336_Object_t *pObj)
{
 800eec0:	b580      	push	{r7, lr}
 800eec2:	b082      	sub	sp, #8
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	3318      	adds	r3, #24
 800eecc:	2101      	movs	r1, #1
 800eece:	4618      	mov	r0, r3
 800eed0:	f000 f941 	bl	800f156 <ft5336_g_mode>
 800eed4:	4603      	mov	r3, r0
}
 800eed6:	4618      	mov	r0, r3
 800eed8:	3708      	adds	r7, #8
 800eeda:	46bd      	mov	sp, r7
 800eedc:	bd80      	pop	{r7, pc}

0800eede <FT5336_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_DisableIT(FT5336_Object_t *pObj)
{
 800eede:	b580      	push	{r7, lr}
 800eee0:	b082      	sub	sp, #8
 800eee2:	af00      	add	r7, sp, #0
 800eee4:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	3318      	adds	r3, #24
 800eeea:	2100      	movs	r1, #0
 800eeec:	4618      	mov	r0, r3
 800eeee:	f000 f932 	bl	800f156 <ft5336_g_mode>
 800eef2:	4603      	mov	r3, r0
}
 800eef4:	4618      	mov	r0, r3
 800eef6:	3708      	adds	r7, #8
 800eef8:	46bd      	mov	sp, r7
 800eefa:	bd80      	pop	{r7, pc}

0800eefc <FT5336_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval TS interrupts status : always return 0 here
  */
int32_t FT5336_ITStatus(FT5336_Object_t *pObj)
{
 800eefc:	b480      	push	{r7}
 800eefe:	b083      	sub	sp, #12
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 800ef04:	2300      	movs	r3, #0
}
 800ef06:	4618      	mov	r0, r3
 800ef08:	370c      	adds	r7, #12
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef10:	4770      	bx	lr

0800ef12 <FT5336_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
{
 800ef12:	b480      	push	{r7}
 800ef14:	b083      	sub	sp, #12
 800ef16:	af00      	add	r7, sp, #0
 800ef18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 800ef1a:	2300      	movs	r3, #0
}
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	370c      	adds	r7, #12
 800ef20:	46bd      	mov	sp, r7
 800ef22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef26:	4770      	bx	lr

0800ef28 <FT5336_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0, 1 or 2) or FT5336_ERROR
  *         in case of error
  */
static int32_t FT5336_DetectTouch(FT5336_Object_t *pObj)
{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b084      	sub	sp, #16
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch;

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	3318      	adds	r3, #24
 800ef34:	f107 020b 	add.w	r2, r7, #11
 800ef38:	4611      	mov	r1, r2
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	f000 f886 	bl	800f04c <ft5336_td_status>
 800ef40:	4603      	mov	r3, r0
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d003      	beq.n	800ef4e <FT5336_DetectTouch+0x26>
  {
    ret = FT5336_ERROR;
 800ef46:	f04f 33ff 	mov.w	r3, #4294967295
 800ef4a:	60fb      	str	r3, [r7, #12]
 800ef4c:	e007      	b.n	800ef5e <FT5336_DetectTouch+0x36>
  }
  else
  {
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 800ef4e:	7afb      	ldrb	r3, [r7, #11]
 800ef50:	2b05      	cmp	r3, #5
 800ef52:	d902      	bls.n	800ef5a <FT5336_DetectTouch+0x32>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
 800ef54:	2300      	movs	r3, #0
 800ef56:	60fb      	str	r3, [r7, #12]
 800ef58:	e001      	b.n	800ef5e <FT5336_DetectTouch+0x36>
    }
    else
    {
      ret = (int32_t)nb_touch;
 800ef5a:	7afb      	ldrb	r3, [r7, #11]
 800ef5c:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 800ef5e:	68fb      	ldr	r3, [r7, #12]
}
 800ef60:	4618      	mov	r0, r3
 800ef62:	3710      	adds	r7, #16
 800ef64:	46bd      	mov	sp, r7
 800ef66:	bd80      	pop	{r7, pc}

0800ef68 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800ef68:	b590      	push	{r4, r7, lr}
 800ef6a:	b087      	sub	sp, #28
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	60f8      	str	r0, [r7, #12]
 800ef70:	607a      	str	r2, [r7, #4]
 800ef72:	461a      	mov	r2, r3
 800ef74:	460b      	mov	r3, r1
 800ef76:	72fb      	strb	r3, [r7, #11]
 800ef78:	4613      	mov	r3, r2
 800ef7a:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800ef80:	697b      	ldr	r3, [r7, #20]
 800ef82:	691c      	ldr	r4, [r3, #16]
 800ef84:	697b      	ldr	r3, [r7, #20]
 800ef86:	8918      	ldrh	r0, [r3, #8]
 800ef88:	7afb      	ldrb	r3, [r7, #11]
 800ef8a:	b299      	uxth	r1, r3
 800ef8c:	893b      	ldrh	r3, [r7, #8]
 800ef8e:	687a      	ldr	r2, [r7, #4]
 800ef90:	47a0      	blx	r4
 800ef92:	4603      	mov	r3, r0
}
 800ef94:	4618      	mov	r0, r3
 800ef96:	371c      	adds	r7, #28
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	bd90      	pop	{r4, r7, pc}

0800ef9c <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800ef9c:	b590      	push	{r4, r7, lr}
 800ef9e:	b087      	sub	sp, #28
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	60f8      	str	r0, [r7, #12]
 800efa4:	607a      	str	r2, [r7, #4]
 800efa6:	461a      	mov	r2, r3
 800efa8:	460b      	mov	r3, r1
 800efaa:	72fb      	strb	r3, [r7, #11]
 800efac:	4613      	mov	r3, r2
 800efae:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800efb4:	697b      	ldr	r3, [r7, #20]
 800efb6:	68dc      	ldr	r4, [r3, #12]
 800efb8:	697b      	ldr	r3, [r7, #20]
 800efba:	8918      	ldrh	r0, [r3, #8]
 800efbc:	7afb      	ldrb	r3, [r7, #11]
 800efbe:	b299      	uxth	r1, r3
 800efc0:	893b      	ldrh	r3, [r7, #8]
 800efc2:	687a      	ldr	r2, [r7, #4]
 800efc4:	47a0      	blx	r4
 800efc6:	4603      	mov	r3, r0
}
 800efc8:	4618      	mov	r0, r3
 800efca:	371c      	adds	r7, #28
 800efcc:	46bd      	mov	sp, r7
 800efce:	bd90      	pop	{r4, r7, pc}

0800efd0 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 800efd0:	b590      	push	{r4, r7, lr}
 800efd2:	b085      	sub	sp, #20
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	60f8      	str	r0, [r7, #12]
 800efd8:	607a      	str	r2, [r7, #4]
 800efda:	461a      	mov	r2, r3
 800efdc:	460b      	mov	r3, r1
 800efde:	72fb      	strb	r3, [r7, #11]
 800efe0:	4613      	mov	r3, r2
 800efe2:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	685c      	ldr	r4, [r3, #4]
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	6898      	ldr	r0, [r3, #8]
 800efec:	893b      	ldrh	r3, [r7, #8]
 800efee:	7af9      	ldrb	r1, [r7, #11]
 800eff0:	687a      	ldr	r2, [r7, #4]
 800eff2:	47a0      	blx	r4
 800eff4:	4603      	mov	r3, r0
}
 800eff6:	4618      	mov	r0, r3
 800eff8:	3714      	adds	r7, #20
 800effa:	46bd      	mov	sp, r7
 800effc:	bd90      	pop	{r4, r7, pc}

0800effe <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 800effe:	b590      	push	{r4, r7, lr}
 800f000:	b085      	sub	sp, #20
 800f002:	af00      	add	r7, sp, #0
 800f004:	60f8      	str	r0, [r7, #12]
 800f006:	607a      	str	r2, [r7, #4]
 800f008:	461a      	mov	r2, r3
 800f00a:	460b      	mov	r3, r1
 800f00c:	72fb      	strb	r3, [r7, #11]
 800f00e:	4613      	mov	r3, r2
 800f010:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	681c      	ldr	r4, [r3, #0]
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	6898      	ldr	r0, [r3, #8]
 800f01a:	893b      	ldrh	r3, [r7, #8]
 800f01c:	7af9      	ldrb	r1, [r7, #11]
 800f01e:	687a      	ldr	r2, [r7, #4]
 800f020:	47a0      	blx	r4
 800f022:	4603      	mov	r3, r0
}
 800f024:	4618      	mov	r0, r3
 800f026:	3714      	adds	r7, #20
 800f028:	46bd      	mov	sp, r7
 800f02a:	bd90      	pop	{r4, r7, pc}

0800f02c <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b082      	sub	sp, #8
 800f030:	af00      	add	r7, sp, #0
 800f032:	6078      	str	r0, [r7, #4]
 800f034:	6039      	str	r1, [r7, #0]
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 800f036:	2301      	movs	r3, #1
 800f038:	683a      	ldr	r2, [r7, #0]
 800f03a:	2101      	movs	r1, #1
 800f03c:	6878      	ldr	r0, [r7, #4]
 800f03e:	f7ff ffc7 	bl	800efd0 <ft5336_read_reg>
 800f042:	4603      	mov	r3, r0
}
 800f044:	4618      	mov	r0, r3
 800f046:	3708      	adds	r7, #8
 800f048:	46bd      	mov	sp, r7
 800f04a:	bd80      	pop	{r7, pc}

0800f04c <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 800f04c:	b580      	push	{r7, lr}
 800f04e:	b084      	sub	sp, #16
 800f050:	af00      	add	r7, sp, #0
 800f052:	6078      	str	r0, [r7, #4]
 800f054:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 800f056:	2301      	movs	r3, #1
 800f058:	683a      	ldr	r2, [r7, #0]
 800f05a:	2102      	movs	r1, #2
 800f05c:	6878      	ldr	r0, [r7, #4]
 800f05e:	f7ff ffb7 	bl	800efd0 <ft5336_read_reg>
 800f062:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	2b00      	cmp	r3, #0
 800f068:	d10a      	bne.n	800f080 <ft5336_td_status+0x34>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 800f06a:	683b      	ldr	r3, [r7, #0]
 800f06c:	781b      	ldrb	r3, [r3, #0]
 800f06e:	f003 030f 	and.w	r3, r3, #15
 800f072:	b2da      	uxtb	r2, r3
 800f074:	683b      	ldr	r3, [r7, #0]
 800f076:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
 800f078:	683b      	ldr	r3, [r7, #0]
 800f07a:	781a      	ldrb	r2, [r3, #0]
 800f07c:	683b      	ldr	r3, [r7, #0]
 800f07e:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 800f080:	68fb      	ldr	r3, [r7, #12]
}
 800f082:	4618      	mov	r0, r3
 800f084:	3710      	adds	r7, #16
 800f086:	46bd      	mov	sp, r7
 800f088:	bd80      	pop	{r7, pc}

0800f08a <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 800f08a:	b580      	push	{r7, lr}
 800f08c:	b082      	sub	sp, #8
 800f08e:	af00      	add	r7, sp, #0
 800f090:	6078      	str	r0, [r7, #4]
 800f092:	460b      	mov	r3, r1
 800f094:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 800f096:	1cfa      	adds	r2, r7, #3
 800f098:	2301      	movs	r3, #1
 800f09a:	2191      	movs	r1, #145	; 0x91
 800f09c:	6878      	ldr	r0, [r7, #4]
 800f09e:	f7ff ffae 	bl	800effe <ft5336_write_reg>
 800f0a2:	4603      	mov	r3, r0
}
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	3708      	adds	r7, #8
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	bd80      	pop	{r7, pc}

0800f0ac <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b082      	sub	sp, #8
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]
 800f0b4:	460b      	mov	r3, r1
 800f0b6:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 800f0b8:	1cfa      	adds	r2, r7, #3
 800f0ba:	2301      	movs	r3, #1
 800f0bc:	2192      	movs	r1, #146	; 0x92
 800f0be:	6878      	ldr	r0, [r7, #4]
 800f0c0:	f7ff ff9d 	bl	800effe <ft5336_write_reg>
 800f0c4:	4603      	mov	r3, r0
}
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	3708      	adds	r7, #8
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	bd80      	pop	{r7, pc}

0800f0ce <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 800f0ce:	b580      	push	{r7, lr}
 800f0d0:	b082      	sub	sp, #8
 800f0d2:	af00      	add	r7, sp, #0
 800f0d4:	6078      	str	r0, [r7, #4]
 800f0d6:	460b      	mov	r3, r1
 800f0d8:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 800f0da:	1cfa      	adds	r2, r7, #3
 800f0dc:	2301      	movs	r3, #1
 800f0de:	2193      	movs	r1, #147	; 0x93
 800f0e0:	6878      	ldr	r0, [r7, #4]
 800f0e2:	f7ff ff8c 	bl	800effe <ft5336_write_reg>
 800f0e6:	4603      	mov	r3, r0
}
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	3708      	adds	r7, #8
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	bd80      	pop	{r7, pc}

0800f0f0 <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	b082      	sub	sp, #8
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	6078      	str	r0, [r7, #4]
 800f0f8:	460b      	mov	r3, r1
 800f0fa:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 800f0fc:	1cfa      	adds	r2, r7, #3
 800f0fe:	2301      	movs	r3, #1
 800f100:	2194      	movs	r1, #148	; 0x94
 800f102:	6878      	ldr	r0, [r7, #4]
 800f104:	f7ff ff7b 	bl	800effe <ft5336_write_reg>
 800f108:	4603      	mov	r3, r0
}
 800f10a:	4618      	mov	r0, r3
 800f10c:	3708      	adds	r7, #8
 800f10e:	46bd      	mov	sp, r7
 800f110:	bd80      	pop	{r7, pc}

0800f112 <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 800f112:	b580      	push	{r7, lr}
 800f114:	b082      	sub	sp, #8
 800f116:	af00      	add	r7, sp, #0
 800f118:	6078      	str	r0, [r7, #4]
 800f11a:	460b      	mov	r3, r1
 800f11c:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 800f11e:	1cfa      	adds	r2, r7, #3
 800f120:	2301      	movs	r3, #1
 800f122:	2195      	movs	r1, #149	; 0x95
 800f124:	6878      	ldr	r0, [r7, #4]
 800f126:	f7ff ff6a 	bl	800effe <ft5336_write_reg>
 800f12a:	4603      	mov	r3, r0
}
 800f12c:	4618      	mov	r0, r3
 800f12e:	3708      	adds	r7, #8
 800f130:	46bd      	mov	sp, r7
 800f132:	bd80      	pop	{r7, pc}

0800f134 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 800f134:	b580      	push	{r7, lr}
 800f136:	b082      	sub	sp, #8
 800f138:	af00      	add	r7, sp, #0
 800f13a:	6078      	str	r0, [r7, #4]
 800f13c:	460b      	mov	r3, r1
 800f13e:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 800f140:	1cfa      	adds	r2, r7, #3
 800f142:	2301      	movs	r3, #1
 800f144:	2196      	movs	r1, #150	; 0x96
 800f146:	6878      	ldr	r0, [r7, #4]
 800f148:	f7ff ff59 	bl	800effe <ft5336_write_reg>
 800f14c:	4603      	mov	r3, r0
}
 800f14e:	4618      	mov	r0, r3
 800f150:	3708      	adds	r7, #8
 800f152:	46bd      	mov	sp, r7
 800f154:	bd80      	pop	{r7, pc}

0800f156 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 800f156:	b580      	push	{r7, lr}
 800f158:	b082      	sub	sp, #8
 800f15a:	af00      	add	r7, sp, #0
 800f15c:	6078      	str	r0, [r7, #4]
 800f15e:	460b      	mov	r3, r1
 800f160:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 800f162:	1cfa      	adds	r2, r7, #3
 800f164:	2301      	movs	r3, #1
 800f166:	21a4      	movs	r1, #164	; 0xa4
 800f168:	6878      	ldr	r0, [r7, #4]
 800f16a:	f7ff ff48 	bl	800effe <ft5336_write_reg>
 800f16e:	4603      	mov	r3, r0
}
 800f170:	4618      	mov	r0, r3
 800f172:	3708      	adds	r7, #8
 800f174:	46bd      	mov	sp, r7
 800f176:	bd80      	pop	{r7, pc}

0800f178 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 800f178:	b580      	push	{r7, lr}
 800f17a:	b084      	sub	sp, #16
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	6078      	str	r0, [r7, #4]
 800f180:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 800f182:	2301      	movs	r3, #1
 800f184:	683a      	ldr	r2, [r7, #0]
 800f186:	21a8      	movs	r1, #168	; 0xa8
 800f188:	6878      	ldr	r0, [r7, #4]
 800f18a:	f7ff ff21 	bl	800efd0 <ft5336_read_reg>
 800f18e:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	2b00      	cmp	r3, #0
 800f194:	d107      	bne.n	800f1a6 <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 800f196:	683b      	ldr	r3, [r7, #0]
 800f198:	781a      	ldrb	r2, [r3, #0]
 800f19a:	683b      	ldr	r3, [r7, #0]
 800f19c:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 800f19e:	683b      	ldr	r3, [r7, #0]
 800f1a0:	781a      	ldrb	r2, [r3, #0]
 800f1a2:	683b      	ldr	r3, [r7, #0]
 800f1a4:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 800f1a6:	68fb      	ldr	r3, [r7, #12]
}
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	3710      	adds	r7, #16
 800f1ac:	46bd      	mov	sp, r7
 800f1ae:	bd80      	pop	{r7, pc}

0800f1b0 <MT25TL01G_GetFlashInfo>:
  * @brief  Return the configuration of the QSPI memory.
  * @param  pInfo pointer on the configuration structure
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
 800f1b0:	b480      	push	{r7}
 800f1b2:	b083      	sub	sp, #12
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	6078      	str	r0, [r7, #4]
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800f1be:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f1c6:	605a      	str	r2, [r3, #4]
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f1ce:	60da      	str	r2, [r3, #12]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	685b      	ldr	r3, [r3, #4]
 800f1d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800f1d8:	fbb2 f2f3 	udiv	r2, r2, r3
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	609a      	str	r2, [r3, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	68db      	ldr	r3, [r3, #12]
 800f1e4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800f1e8:	fbb2 f2f3 	udiv	r2, r2, r3
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	611a      	str	r2, [r3, #16]
  return MT25TL01G_OK;
 800f1f0:	2300      	movs	r3, #0
}
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	370c      	adds	r7, #12
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1fc:	4770      	bx	lr

0800f1fe <MT25TL01G_Enter4BytesAddressMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_Enter4BytesAddressMode(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800f1fe:	b580      	push	{r7, lr}
 800f200:	b090      	sub	sp, #64	; 0x40
 800f202:	af00      	add	r7, sp, #0
 800f204:	6078      	str	r0, [r7, #4]
 800f206:	460b      	mov	r3, r1
 800f208:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800f20a:	78fb      	ldrb	r3, [r7, #3]
 800f20c:	2b03      	cmp	r3, #3
 800f20e:	d102      	bne.n	800f216 <MT25TL01G_Enter4BytesAddressMode+0x18>
 800f210:	f44f 7340 	mov.w	r3, #768	; 0x300
 800f214:	e001      	b.n	800f21a <MT25TL01G_Enter4BytesAddressMode+0x1c>
 800f216:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f21a:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 800f21c:	23b7      	movs	r3, #183	; 0xb7
 800f21e:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800f220:	2300      	movs	r3, #0
 800f222:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800f224:	2300      	movs	r3, #0
 800f226:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800f228:	2300      	movs	r3, #0
 800f22a:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800f22c:	2300      	movs	r3, #0
 800f22e:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800f230:	2300      	movs	r3, #0
 800f232:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800f234:	2300      	movs	r3, #0
 800f236:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800f238:	2300      	movs	r3, #0
 800f23a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /*write enable */
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 800f23c:	78fb      	ldrb	r3, [r7, #3]
 800f23e:	4619      	mov	r1, r3
 800f240:	6878      	ldr	r0, [r7, #4]
 800f242:	f000 f860 	bl	800f306 <MT25TL01G_WriteEnable>
 800f246:	4603      	mov	r3, r0
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d002      	beq.n	800f252 <MT25TL01G_Enter4BytesAddressMode+0x54>
  {
    return MT25TL01G_ERROR_COMMAND;
 800f24c:	f06f 0301 	mvn.w	r3, #1
 800f250:	e019      	b.n	800f286 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }
  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800f252:	f107 0308 	add.w	r3, r7, #8
 800f256:	f241 3288 	movw	r2, #5000	; 0x1388
 800f25a:	4619      	mov	r1, r3
 800f25c:	6878      	ldr	r0, [r7, #4]
 800f25e:	f004 fd2b 	bl	8013cb8 <HAL_QSPI_Command>
 800f262:	4603      	mov	r3, r0
 800f264:	2b00      	cmp	r3, #0
 800f266:	d002      	beq.n	800f26e <MT25TL01G_Enter4BytesAddressMode+0x70>
  {
    return MT25TL01G_ERROR_COMMAND;
 800f268:	f06f 0301 	mvn.w	r3, #1
 800f26c:	e00b      	b.n	800f286 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 800f26e:	78fb      	ldrb	r3, [r7, #3]
 800f270:	4619      	mov	r1, r3
 800f272:	6878      	ldr	r0, [r7, #4]
 800f274:	f000 f80b 	bl	800f28e <MT25TL01G_AutoPollingMemReady>
 800f278:	4603      	mov	r3, r0
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d002      	beq.n	800f284 <MT25TL01G_Enter4BytesAddressMode+0x86>
  {
    return MT25TL01G_ERROR_COMMAND;
 800f27e:	f06f 0301 	mvn.w	r3, #1
 800f282:	e000      	b.n	800f286 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }

  return MT25TL01G_OK;
 800f284:	2300      	movs	r3, #0
}
 800f286:	4618      	mov	r0, r3
 800f288:	3740      	adds	r7, #64	; 0x40
 800f28a:	46bd      	mov	sp, r7
 800f28c:	bd80      	pop	{r7, pc}

0800f28e <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800f28e:	b580      	push	{r7, lr}
 800f290:	b096      	sub	sp, #88	; 0x58
 800f292:	af00      	add	r7, sp, #0
 800f294:	6078      	str	r0, [r7, #4]
 800f296:	460b      	mov	r3, r1
 800f298:	70fb      	strb	r3, [r7, #3]

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800f29a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800f29e:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 800f2a0:	2305      	movs	r3, #5
 800f2a2:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800f2ac:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800f2b0:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 2;
 800f2b2:	2302      	movs	r3, #2
 800f2b4:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800f2be:	2300      	movs	r3, #0
 800f2c0:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	60bb      	str	r3, [r7, #8]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	61bb      	str	r3, [r7, #24]
  s_config.Interval        = 0x10;
 800f2ca:	2310      	movs	r3, #16
 800f2cc:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800f2ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f2d2:	61fb      	str	r3, [r7, #28]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 800f2d4:	f240 1301 	movw	r3, #257	; 0x101
 800f2d8:	60fb      	str	r3, [r7, #12]
  s_config.StatusBytesSize = 2;
 800f2da:	2302      	movs	r3, #2
 800f2dc:	617b      	str	r3, [r7, #20]

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800f2de:	f107 0208 	add.w	r2, r7, #8
 800f2e2:	f107 0120 	add.w	r1, r7, #32
 800f2e6:	f241 3388 	movw	r3, #5000	; 0x1388
 800f2ea:	6878      	ldr	r0, [r7, #4]
 800f2ec:	f004 fe71 	bl	8013fd2 <HAL_QSPI_AutoPolling>
 800f2f0:	4603      	mov	r3, r0
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d002      	beq.n	800f2fc <MT25TL01G_AutoPollingMemReady+0x6e>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 800f2f6:	f06f 0304 	mvn.w	r3, #4
 800f2fa:	e000      	b.n	800f2fe <MT25TL01G_AutoPollingMemReady+0x70>
  }

  return MT25TL01G_OK;
 800f2fc:	2300      	movs	r3, #0

}
 800f2fe:	4618      	mov	r0, r3
 800f300:	3758      	adds	r7, #88	; 0x58
 800f302:	46bd      	mov	sp, r7
 800f304:	bd80      	pop	{r7, pc}

0800f306 <MT25TL01G_WriteEnable>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_WriteEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800f306:	b580      	push	{r7, lr}
 800f308:	b096      	sub	sp, #88	; 0x58
 800f30a:	af00      	add	r7, sp, #0
 800f30c:	6078      	str	r0, [r7, #4]
 800f30e:	460b      	mov	r3, r1
 800f310:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800f312:	78fb      	ldrb	r3, [r7, #3]
 800f314:	2b03      	cmp	r3, #3
 800f316:	d102      	bne.n	800f31e <MT25TL01G_WriteEnable+0x18>
 800f318:	f44f 7340 	mov.w	r3, #768	; 0x300
 800f31c:	e001      	b.n	800f322 <MT25TL01G_WriteEnable+0x1c>
 800f31e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f322:	63bb      	str	r3, [r7, #56]	; 0x38

  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 800f324:	2306      	movs	r3, #6
 800f326:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800f328:	2300      	movs	r3, #0
 800f32a:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800f32c:	2300      	movs	r3, #0
 800f32e:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 800f330:	2300      	movs	r3, #0
 800f332:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 800f334:	2300      	movs	r3, #0
 800f336:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800f338:	2300      	movs	r3, #0
 800f33a:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800f33c:	2300      	movs	r3, #0
 800f33e:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800f340:	2300      	movs	r3, #0
 800f342:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800f344:	f107 0320 	add.w	r3, r7, #32
 800f348:	f241 3288 	movw	r2, #5000	; 0x1388
 800f34c:	4619      	mov	r1, r3
 800f34e:	6878      	ldr	r0, [r7, #4]
 800f350:	f004 fcb2 	bl	8013cb8 <HAL_QSPI_Command>
 800f354:	4603      	mov	r3, r0
 800f356:	2b00      	cmp	r3, #0
 800f358:	d002      	beq.n	800f360 <MT25TL01G_WriteEnable+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800f35a:	f06f 0301 	mvn.w	r3, #1
 800f35e:	e029      	b.n	800f3b4 <MT25TL01G_WriteEnable+0xae>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 800f360:	f240 2302 	movw	r3, #514	; 0x202
 800f364:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 800f366:	f240 2302 	movw	r3, #514	; 0x202
 800f36a:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800f36c:	2300      	movs	r3, #0
 800f36e:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 2;
 800f370:	2302      	movs	r3, #2
 800f372:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 800f374:	2310      	movs	r3, #16
 800f376:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800f378:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f37c:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 800f37e:	2305      	movs	r3, #5
 800f380:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 800f382:	78fb      	ldrb	r3, [r7, #3]
 800f384:	2b03      	cmp	r3, #3
 800f386:	d102      	bne.n	800f38e <MT25TL01G_WriteEnable+0x88>
 800f388:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800f38c:	e001      	b.n	800f392 <MT25TL01G_WriteEnable+0x8c>
 800f38e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f392:	647b      	str	r3, [r7, #68]	; 0x44


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800f394:	f107 0208 	add.w	r2, r7, #8
 800f398:	f107 0120 	add.w	r1, r7, #32
 800f39c:	f241 3388 	movw	r3, #5000	; 0x1388
 800f3a0:	6878      	ldr	r0, [r7, #4]
 800f3a2:	f004 fe16 	bl	8013fd2 <HAL_QSPI_AutoPolling>
 800f3a6:	4603      	mov	r3, r0
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d002      	beq.n	800f3b2 <MT25TL01G_WriteEnable+0xac>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 800f3ac:	f06f 0304 	mvn.w	r3, #4
 800f3b0:	e000      	b.n	800f3b4 <MT25TL01G_WriteEnable+0xae>
  }

  return MT25TL01G_OK;
 800f3b2:	2300      	movs	r3, #0
}
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	3758      	adds	r7, #88	; 0x58
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	bd80      	pop	{r7, pc}

0800f3bc <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 800f3bc:	b580      	push	{r7, lr}
 800f3be:	b090      	sub	sp, #64	; 0x40
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800f3c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f3c8:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 800f3ca:	2335      	movs	r3, #53	; 0x35
 800f3cc:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800f3ce:	2300      	movs	r3, #0
 800f3d0:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800f3d6:	2300      	movs	r3, #0
 800f3d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800f3da:	2300      	movs	r3, #0
 800f3dc:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800f3de:	2300      	movs	r3, #0
 800f3e0:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800f3ea:	f107 0308 	add.w	r3, r7, #8
 800f3ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800f3f2:	4619      	mov	r1, r3
 800f3f4:	6878      	ldr	r0, [r7, #4]
 800f3f6:	f004 fc5f 	bl	8013cb8 <HAL_QSPI_Command>
 800f3fa:	4603      	mov	r3, r0
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d002      	beq.n	800f406 <MT25TL01G_EnterQPIMode+0x4a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800f400:	f06f 0301 	mvn.w	r3, #1
 800f404:	e000      	b.n	800f408 <MT25TL01G_EnterQPIMode+0x4c>
  }

  return MT25TL01G_OK;
 800f406:	2300      	movs	r3, #0
}
 800f408:	4618      	mov	r0, r3
 800f40a:	3740      	adds	r7, #64	; 0x40
 800f40c:	46bd      	mov	sp, r7
 800f40e:	bd80      	pop	{r7, pc}

0800f410 <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 800f410:	b580      	push	{r7, lr}
 800f412:	b090      	sub	sp, #64	; 0x40
 800f414:	af00      	add	r7, sp, #0
 800f416:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800f418:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f41c:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 800f41e:	23f5      	movs	r3, #245	; 0xf5
 800f420:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800f422:	2300      	movs	r3, #0
 800f424:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800f426:	2300      	movs	r3, #0
 800f428:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800f42a:	2300      	movs	r3, #0
 800f42c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800f42e:	2300      	movs	r3, #0
 800f430:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800f432:	2300      	movs	r3, #0
 800f434:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800f436:	2300      	movs	r3, #0
 800f438:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800f43a:	2300      	movs	r3, #0
 800f43c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800f43e:	f107 0308 	add.w	r3, r7, #8
 800f442:	f241 3288 	movw	r2, #5000	; 0x1388
 800f446:	4619      	mov	r1, r3
 800f448:	6878      	ldr	r0, [r7, #4]
 800f44a:	f004 fc35 	bl	8013cb8 <HAL_QSPI_Command>
 800f44e:	4603      	mov	r3, r0
 800f450:	2b00      	cmp	r3, #0
 800f452:	d002      	beq.n	800f45a <MT25TL01G_ExitQPIMode+0x4a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800f454:	f06f 0301 	mvn.w	r3, #1
 800f458:	e000      	b.n	800f45c <MT25TL01G_ExitQPIMode+0x4c>
  }

  return MT25TL01G_OK;
 800f45a:	2300      	movs	r3, #0
}
 800f45c:	4618      	mov	r0, r3
 800f45e:	3740      	adds	r7, #64	; 0x40
 800f460:	46bd      	mov	sp, r7
 800f462:	bd80      	pop	{r7, pc}

0800f464 <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800f464:	b580      	push	{r7, lr}
 800f466:	b092      	sub	sp, #72	; 0x48
 800f468:	af00      	add	r7, sp, #0
 800f46a:	6078      	str	r0, [r7, #4]
 800f46c:	460b      	mov	r3, r1
 800f46e:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 800f470:	78fb      	ldrb	r3, [r7, #3]
 800f472:	2b03      	cmp	r3, #3
 800f474:	d83a      	bhi.n	800f4ec <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
 800f476:	a201      	add	r2, pc, #4	; (adr r2, 800f47c <MT25TL01G_EnableMemoryMappedModeDTR+0x18>)
 800f478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f47c:	0800f48d 	.word	0x0800f48d
 800f480:	0800f4a5 	.word	0x0800f4a5
 800f484:	0800f4bd 	.word	0x0800f4bd
 800f488:	0800f4d5 	.word	0x0800f4d5
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800f48c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f490:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 800f492:	230e      	movs	r3, #14
 800f494:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800f496:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f49a:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_1_LINE;
 800f49c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f4a0:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800f4a2:	e023      	b.n	800f4ec <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_SPI_2IO_MODE:           /* 1-1-2 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800f4a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f4a8:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 800f4aa:	233d      	movs	r3, #61	; 0x3d
 800f4ac:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800f4ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f4b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_2_LINES;
 800f4b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f4b8:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800f4ba:	e017      	b.n	800f4ec <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800f4bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f4c0:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 800f4c2:	23ee      	movs	r3, #238	; 0xee
 800f4c4:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800f4c6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800f4ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800f4cc:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800f4d0:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800f4d2:	e00b      	b.n	800f4ec <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800f4d4:	f44f 7340 	mov.w	r3, #768	; 0x300
 800f4d8:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 800f4da:	23ed      	movs	r3, #237	; 0xed
 800f4dc:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800f4de:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800f4e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800f4e4:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800f4e8:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800f4ea:	bf00      	nop
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800f4ec:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800f4f0:	61fb      	str	r3, [r7, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 800f4f6:	2308      	movs	r3, #8
 800f4f8:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
 800f4fa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f4fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 800f500:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f504:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800f506:	2300      	movs	r3, #0
 800f508:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 800f50a:	2300      	movs	r3, #0
 800f50c:	60fb      	str	r3, [r7, #12]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800f50e:	2300      	movs	r3, #0
 800f510:	60bb      	str	r3, [r7, #8]

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800f512:	f107 0208 	add.w	r2, r7, #8
 800f516:	f107 0310 	add.w	r3, r7, #16
 800f51a:	4619      	mov	r1, r3
 800f51c:	6878      	ldr	r0, [r7, #4]
 800f51e:	f004 fdcf 	bl	80140c0 <HAL_QSPI_MemoryMapped>
 800f522:	4603      	mov	r3, r0
 800f524:	2b00      	cmp	r3, #0
 800f526:	d002      	beq.n	800f52e <MT25TL01G_EnableMemoryMappedModeDTR+0xca>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 800f528:	f06f 0305 	mvn.w	r3, #5
 800f52c:	e000      	b.n	800f530 <MT25TL01G_EnableMemoryMappedModeDTR+0xcc>
  }

  return MT25TL01G_OK;
 800f52e:	2300      	movs	r3, #0
}
 800f530:	4618      	mov	r0, r3
 800f532:	3748      	adds	r7, #72	; 0x48
 800f534:	46bd      	mov	sp, r7
 800f536:	bd80      	pop	{r7, pc}

0800f538 <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800f538:	b580      	push	{r7, lr}
 800f53a:	b092      	sub	sp, #72	; 0x48
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	6078      	str	r0, [r7, #4]
 800f540:	460b      	mov	r3, r1
 800f542:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 800f544:	78fb      	ldrb	r3, [r7, #3]
 800f546:	2b03      	cmp	r3, #3
 800f548:	d83a      	bhi.n	800f5c0 <MT25TL01G_EnableMemoryMappedModeSTR+0x88>
 800f54a:	a201      	add	r2, pc, #4	; (adr r2, 800f550 <MT25TL01G_EnableMemoryMappedModeSTR+0x18>)
 800f54c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f550:	0800f561 	.word	0x0800f561
 800f554:	0800f579 	.word	0x0800f579
 800f558:	0800f591 	.word	0x0800f591
 800f55c:	0800f5a9 	.word	0x0800f5a9
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800f560:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f564:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 800f566:	230c      	movs	r3, #12
 800f568:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800f56a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f56e:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_1_LINE;
 800f570:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f574:	637b      	str	r3, [r7, #52]	; 0x34


    break;
 800f576:	e023      	b.n	800f5c0 <MT25TL01G_EnableMemoryMappedModeSTR+0x88>
  case MT25TL01G_SPI_2IO_MODE:           /* 1-2-2 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800f578:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f57c:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800f57e:	23bc      	movs	r3, #188	; 0xbc
 800f580:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 800f582:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f586:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_2_LINES;
 800f588:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f58c:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800f58e:	e017      	b.n	800f5c0 <MT25TL01G_EnableMemoryMappedModeSTR+0x88>

  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800f590:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f594:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800f596:	23ec      	movs	r3, #236	; 0xec
 800f598:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800f59a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800f59e:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800f5a0:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800f5a4:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800f5a6:	e00b      	b.n	800f5c0 <MT25TL01G_EnableMemoryMappedModeSTR+0x88>

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800f5a8:	f44f 7340 	mov.w	r3, #768	; 0x300
 800f5ac:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 800f5ae:	23eb      	movs	r3, #235	; 0xeb
 800f5b0:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800f5b2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800f5b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800f5b8:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800f5bc:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800f5be:	bf00      	nop

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 800f5c0:	2308      	movs	r3, #8
 800f5c2:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800f5c4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800f5c8:	61fb      	str	r3, [r7, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800f5d2:	2300      	movs	r3, #0
 800f5d4:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 800f5da:	2300      	movs	r3, #0
 800f5dc:	60fb      	str	r3, [r7, #12]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800f5de:	2300      	movs	r3, #0
 800f5e0:	60bb      	str	r3, [r7, #8]

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800f5e2:	f107 0208 	add.w	r2, r7, #8
 800f5e6:	f107 0310 	add.w	r3, r7, #16
 800f5ea:	4619      	mov	r1, r3
 800f5ec:	6878      	ldr	r0, [r7, #4]
 800f5ee:	f004 fd67 	bl	80140c0 <HAL_QSPI_MemoryMapped>
 800f5f2:	4603      	mov	r3, r0
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d002      	beq.n	800f5fe <MT25TL01G_EnableMemoryMappedModeSTR+0xc6>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 800f5f8:	f06f 0305 	mvn.w	r3, #5
 800f5fc:	e000      	b.n	800f600 <MT25TL01G_EnableMemoryMappedModeSTR+0xc8>
  }

  return MT25TL01G_OK;
 800f5fe:	2300      	movs	r3, #0
}
 800f600:	4618      	mov	r0, r3
 800f602:	3748      	adds	r7, #72	; 0x48
 800f604:	46bd      	mov	sp, r7
 800f606:	bd80      	pop	{r7, pc}

0800f608 <MT25TL01G_ResetEnable>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800f608:	b580      	push	{r7, lr}
 800f60a:	b090      	sub	sp, #64	; 0x40
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	6078      	str	r0, [r7, #4]
 800f610:	460b      	mov	r3, r1
 800f612:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800f614:	78fb      	ldrb	r3, [r7, #3]
 800f616:	2b03      	cmp	r3, #3
 800f618:	d102      	bne.n	800f620 <MT25TL01G_ResetEnable+0x18>
 800f61a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800f61e:	e001      	b.n	800f624 <MT25TL01G_ResetEnable+0x1c>
 800f620:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f624:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 800f626:	2366      	movs	r3, #102	; 0x66
 800f628:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800f62a:	2300      	movs	r3, #0
 800f62c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800f62e:	2300      	movs	r3, #0
 800f630:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800f632:	2300      	movs	r3, #0
 800f634:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800f636:	2300      	movs	r3, #0
 800f638:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800f63a:	2300      	movs	r3, #0
 800f63c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800f63e:	2300      	movs	r3, #0
 800f640:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800f642:	2300      	movs	r3, #0
 800f644:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800f646:	f107 0308 	add.w	r3, r7, #8
 800f64a:	f241 3288 	movw	r2, #5000	; 0x1388
 800f64e:	4619      	mov	r1, r3
 800f650:	6878      	ldr	r0, [r7, #4]
 800f652:	f004 fb31 	bl	8013cb8 <HAL_QSPI_Command>
 800f656:	4603      	mov	r3, r0
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d002      	beq.n	800f662 <MT25TL01G_ResetEnable+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800f65c:	f06f 0301 	mvn.w	r3, #1
 800f660:	e000      	b.n	800f664 <MT25TL01G_ResetEnable+0x5c>
  }

  return MT25TL01G_OK;
 800f662:	2300      	movs	r3, #0
}
 800f664:	4618      	mov	r0, r3
 800f666:	3740      	adds	r7, #64	; 0x40
 800f668:	46bd      	mov	sp, r7
 800f66a:	bd80      	pop	{r7, pc}

0800f66c <MT25TL01G_ResetMemory>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800f66c:	b580      	push	{r7, lr}
 800f66e:	b090      	sub	sp, #64	; 0x40
 800f670:	af00      	add	r7, sp, #0
 800f672:	6078      	str	r0, [r7, #4]
 800f674:	460b      	mov	r3, r1
 800f676:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800f678:	78fb      	ldrb	r3, [r7, #3]
 800f67a:	2b03      	cmp	r3, #3
 800f67c:	d102      	bne.n	800f684 <MT25TL01G_ResetMemory+0x18>
 800f67e:	f44f 7340 	mov.w	r3, #768	; 0x300
 800f682:	e001      	b.n	800f688 <MT25TL01G_ResetMemory+0x1c>
 800f684:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f688:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 800f68a:	2399      	movs	r3, #153	; 0x99
 800f68c:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800f68e:	2300      	movs	r3, #0
 800f690:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800f692:	2300      	movs	r3, #0
 800f694:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800f696:	2300      	movs	r3, #0
 800f698:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800f69a:	2300      	movs	r3, #0
 800f69c:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800f69e:	2300      	movs	r3, #0
 800f6a0:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800f6aa:	f107 0308 	add.w	r3, r7, #8
 800f6ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800f6b2:	4619      	mov	r1, r3
 800f6b4:	6878      	ldr	r0, [r7, #4]
 800f6b6:	f004 faff 	bl	8013cb8 <HAL_QSPI_Command>
 800f6ba:	4603      	mov	r3, r0
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d002      	beq.n	800f6c6 <MT25TL01G_ResetMemory+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800f6c0:	f06f 0301 	mvn.w	r3, #1
 800f6c4:	e000      	b.n	800f6c8 <MT25TL01G_ResetMemory+0x5c>
  }

  return MT25TL01G_OK;
 800f6c6:	2300      	movs	r3, #0
}
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	3740      	adds	r7, #64	; 0x40
 800f6cc:	46bd      	mov	sp, r7
 800f6ce:	bd80      	pop	{r7, pc}

0800f6d0 <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b084      	sub	sp, #16
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	6078      	str	r0, [r7, #4]
 800f6d8:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
 800f6da:	f04f 33ff 	mov.w	r3, #4294967295
 800f6de:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 800f6e0:	683b      	ldr	r3, [r7, #0]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	4619      	mov	r1, r3
 800f6e6:	6878      	ldr	r0, [r7, #4]
 800f6e8:	f000 f832 	bl	800f750 <MT48LC4M32B2_ClockEnable>
 800f6ec:	4603      	mov	r3, r0
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d128      	bne.n	800f744 <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
 800f6f2:	2001      	movs	r0, #1
 800f6f4:	f000 f8e2 	bl	800f8bc <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 800f6f8:	683b      	ldr	r3, [r7, #0]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	4619      	mov	r1, r3
 800f6fe:	6878      	ldr	r0, [r7, #4]
 800f700:	f000 f84a 	bl	800f798 <MT48LC4M32B2_Precharge>
 800f704:	4603      	mov	r3, r0
 800f706:	2b00      	cmp	r3, #0
 800f708:	d11c      	bne.n	800f744 <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
 800f70a:	683b      	ldr	r3, [r7, #0]
 800f70c:	6819      	ldr	r1, [r3, #0]
 800f70e:	683b      	ldr	r3, [r7, #0]
 800f710:	685b      	ldr	r3, [r3, #4]
 800f712:	461a      	mov	r2, r3
 800f714:	6878      	ldr	r0, [r7, #4]
 800f716:	f000 f897 	bl	800f848 <MT48LC4M32B2_RefreshMode>
 800f71a:	4603      	mov	r3, r0
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d111      	bne.n	800f744 <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
 800f720:	6839      	ldr	r1, [r7, #0]
 800f722:	6878      	ldr	r0, [r7, #4]
 800f724:	f000 f85c 	bl	800f7e0 <MT48LC4M32B2_ModeRegConfig>
 800f728:	4603      	mov	r3, r0
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d10a      	bne.n	800f744 <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
 800f72e:	683b      	ldr	r3, [r7, #0]
 800f730:	689b      	ldr	r3, [r3, #8]
 800f732:	4619      	mov	r1, r3
 800f734:	6878      	ldr	r0, [r7, #4]
 800f736:	f000 f8ad 	bl	800f894 <MT48LC4M32B2_RefreshRate>
 800f73a:	4603      	mov	r3, r0
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d101      	bne.n	800f744 <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
 800f740:	2300      	movs	r3, #0
 800f742:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 800f744:	68fb      	ldr	r3, [r7, #12]
}
 800f746:	4618      	mov	r0, r3
 800f748:	3710      	adds	r7, #16
 800f74a:	46bd      	mov	sp, r7
 800f74c:	bd80      	pop	{r7, pc}
	...

0800f750 <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 800f750:	b580      	push	{r7, lr}
 800f752:	b082      	sub	sp, #8
 800f754:	af00      	add	r7, sp, #0
 800f756:	6078      	str	r0, [r7, #4]
 800f758:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
 800f75a:	4b0e      	ldr	r3, [pc, #56]	; (800f794 <MT48LC4M32B2_ClockEnable+0x44>)
 800f75c:	2201      	movs	r2, #1
 800f75e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 800f760:	4a0c      	ldr	r2, [pc, #48]	; (800f794 <MT48LC4M32B2_ClockEnable+0x44>)
 800f762:	683b      	ldr	r3, [r7, #0]
 800f764:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800f766:	4b0b      	ldr	r3, [pc, #44]	; (800f794 <MT48LC4M32B2_ClockEnable+0x44>)
 800f768:	2201      	movs	r2, #1
 800f76a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800f76c:	4b09      	ldr	r3, [pc, #36]	; (800f794 <MT48LC4M32B2_ClockEnable+0x44>)
 800f76e:	2200      	movs	r2, #0
 800f770:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800f772:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f776:	4907      	ldr	r1, [pc, #28]	; (800f794 <MT48LC4M32B2_ClockEnable+0x44>)
 800f778:	6878      	ldr	r0, [r7, #4]
 800f77a:	f007 f8b9 	bl	80168f0 <HAL_SDRAM_SendCommand>
 800f77e:	4603      	mov	r3, r0
 800f780:	2b00      	cmp	r3, #0
 800f782:	d002      	beq.n	800f78a <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 800f784:	f04f 33ff 	mov.w	r3, #4294967295
 800f788:	e000      	b.n	800f78c <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800f78a:	2300      	movs	r3, #0
  }
}
 800f78c:	4618      	mov	r0, r3
 800f78e:	3708      	adds	r7, #8
 800f790:	46bd      	mov	sp, r7
 800f792:	bd80      	pop	{r7, pc}
 800f794:	2400aeec 	.word	0x2400aeec

0800f798 <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 800f798:	b580      	push	{r7, lr}
 800f79a:	b082      	sub	sp, #8
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	6078      	str	r0, [r7, #4]
 800f7a0:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
 800f7a2:	4b0e      	ldr	r3, [pc, #56]	; (800f7dc <MT48LC4M32B2_Precharge+0x44>)
 800f7a4:	2202      	movs	r2, #2
 800f7a6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 800f7a8:	4a0c      	ldr	r2, [pc, #48]	; (800f7dc <MT48LC4M32B2_Precharge+0x44>)
 800f7aa:	683b      	ldr	r3, [r7, #0]
 800f7ac:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800f7ae:	4b0b      	ldr	r3, [pc, #44]	; (800f7dc <MT48LC4M32B2_Precharge+0x44>)
 800f7b0:	2201      	movs	r2, #1
 800f7b2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800f7b4:	4b09      	ldr	r3, [pc, #36]	; (800f7dc <MT48LC4M32B2_Precharge+0x44>)
 800f7b6:	2200      	movs	r2, #0
 800f7b8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800f7ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f7be:	4907      	ldr	r1, [pc, #28]	; (800f7dc <MT48LC4M32B2_Precharge+0x44>)
 800f7c0:	6878      	ldr	r0, [r7, #4]
 800f7c2:	f007 f895 	bl	80168f0 <HAL_SDRAM_SendCommand>
 800f7c6:	4603      	mov	r3, r0
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d002      	beq.n	800f7d2 <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 800f7cc:	f04f 33ff 	mov.w	r3, #4294967295
 800f7d0:	e000      	b.n	800f7d4 <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800f7d2:	2300      	movs	r3, #0
  }
}
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	3708      	adds	r7, #8
 800f7d8:	46bd      	mov	sp, r7
 800f7da:	bd80      	pop	{r7, pc}
 800f7dc:	2400aeec 	.word	0x2400aeec

0800f7e0 <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 800f7e0:	b580      	push	{r7, lr}
 800f7e2:	b084      	sub	sp, #16
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	6078      	str	r0, [r7, #4]
 800f7e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800f7ea:	683b      	ldr	r3, [r7, #0]
 800f7ec:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 800f7ee:	683b      	ldr	r3, [r7, #0]
 800f7f0:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800f7f2:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 800f7f4:	683b      	ldr	r3, [r7, #0]
 800f7f6:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 800f7f8:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 800f7fa:	683b      	ldr	r3, [r7, #0]
 800f7fc:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 800f7fe:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 800f800:	683b      	ldr	r3, [r7, #0]
 800f802:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800f804:	4313      	orrs	r3, r2
 800f806:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
 800f808:	4b0e      	ldr	r3, [pc, #56]	; (800f844 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800f80a:	2204      	movs	r2, #4
 800f80c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 800f80e:	683b      	ldr	r3, [r7, #0]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	4a0c      	ldr	r2, [pc, #48]	; (800f844 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800f814:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800f816:	4b0b      	ldr	r3, [pc, #44]	; (800f844 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800f818:	2201      	movs	r2, #1
 800f81a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800f81c:	4a09      	ldr	r2, [pc, #36]	; (800f844 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800f822:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f826:	4907      	ldr	r1, [pc, #28]	; (800f844 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800f828:	6878      	ldr	r0, [r7, #4]
 800f82a:	f007 f861 	bl	80168f0 <HAL_SDRAM_SendCommand>
 800f82e:	4603      	mov	r3, r0
 800f830:	2b00      	cmp	r3, #0
 800f832:	d002      	beq.n	800f83a <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
 800f834:	f04f 33ff 	mov.w	r3, #4294967295
 800f838:	e000      	b.n	800f83c <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800f83a:	2300      	movs	r3, #0
  }
}
 800f83c:	4618      	mov	r0, r3
 800f83e:	3710      	adds	r7, #16
 800f840:	46bd      	mov	sp, r7
 800f842:	bd80      	pop	{r7, pc}
 800f844:	2400aeec 	.word	0x2400aeec

0800f848 <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 800f848:	b580      	push	{r7, lr}
 800f84a:	b084      	sub	sp, #16
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	60f8      	str	r0, [r7, #12]
 800f850:	60b9      	str	r1, [r7, #8]
 800f852:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 800f854:	4a0e      	ldr	r2, [pc, #56]	; (800f890 <MT48LC4M32B2_RefreshMode+0x48>)
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 800f85a:	4a0d      	ldr	r2, [pc, #52]	; (800f890 <MT48LC4M32B2_RefreshMode+0x48>)
 800f85c:	68bb      	ldr	r3, [r7, #8]
 800f85e:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 800f860:	4b0b      	ldr	r3, [pc, #44]	; (800f890 <MT48LC4M32B2_RefreshMode+0x48>)
 800f862:	2208      	movs	r2, #8
 800f864:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800f866:	4b0a      	ldr	r3, [pc, #40]	; (800f890 <MT48LC4M32B2_RefreshMode+0x48>)
 800f868:	2200      	movs	r2, #0
 800f86a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800f86c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f870:	4907      	ldr	r1, [pc, #28]	; (800f890 <MT48LC4M32B2_RefreshMode+0x48>)
 800f872:	68f8      	ldr	r0, [r7, #12]
 800f874:	f007 f83c 	bl	80168f0 <HAL_SDRAM_SendCommand>
 800f878:	4603      	mov	r3, r0
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d002      	beq.n	800f884 <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
 800f87e:	f04f 33ff 	mov.w	r3, #4294967295
 800f882:	e000      	b.n	800f886 <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800f884:	2300      	movs	r3, #0
  }
}
 800f886:	4618      	mov	r0, r3
 800f888:	3710      	adds	r7, #16
 800f88a:	46bd      	mov	sp, r7
 800f88c:	bd80      	pop	{r7, pc}
 800f88e:	bf00      	nop
 800f890:	2400aeec 	.word	0x2400aeec

0800f894 <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 800f894:	b580      	push	{r7, lr}
 800f896:	b082      	sub	sp, #8
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
 800f89c:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 800f89e:	6839      	ldr	r1, [r7, #0]
 800f8a0:	6878      	ldr	r0, [r7, #4]
 800f8a2:	f007 f85a 	bl	801695a <HAL_SDRAM_ProgramRefreshRate>
 800f8a6:	4603      	mov	r3, r0
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d002      	beq.n	800f8b2 <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
 800f8ac:	f04f 33ff 	mov.w	r3, #4294967295
 800f8b0:	e000      	b.n	800f8b4 <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800f8b2:	2300      	movs	r3, #0
  }
}
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	3708      	adds	r7, #8
 800f8b8:	46bd      	mov	sp, r7
 800f8ba:	bd80      	pop	{r7, pc}

0800f8bc <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
 800f8bc:	b580      	push	{r7, lr}
 800f8be:	b084      	sub	sp, #16
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 800f8c4:	f001 fcfc 	bl	80112c0 <HAL_GetTick>
 800f8c8:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 800f8ca:	bf00      	nop
 800f8cc:	f001 fcf8 	bl	80112c0 <HAL_GetTick>
 800f8d0:	4602      	mov	r2, r0
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	1ad3      	subs	r3, r2, r3
 800f8d6:	687a      	ldr	r2, [r7, #4]
 800f8d8:	429a      	cmp	r2, r3
 800f8da:	d8f7      	bhi.n	800f8cc <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
 800f8dc:	2300      	movs	r3, #0
}
 800f8de:	4618      	mov	r0, r3
 800f8e0:	3710      	adds	r7, #16
 800f8e2:	46bd      	mov	sp, r7
 800f8e4:	bd80      	pop	{r7, pc}
	...

0800f8e8 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b082      	sub	sp, #8
 800f8ec:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800f8ee:	2300      	movs	r3, #0
 800f8f0:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 800f8f2:	4b16      	ldr	r3, [pc, #88]	; (800f94c <BSP_I2C4_Init+0x64>)
 800f8f4:	4a16      	ldr	r2, [pc, #88]	; (800f950 <BSP_I2C4_Init+0x68>)
 800f8f6:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 800f8f8:	4b16      	ldr	r3, [pc, #88]	; (800f954 <BSP_I2C4_Init+0x6c>)
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d11f      	bne.n	800f940 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 800f900:	4b14      	ldr	r3, [pc, #80]	; (800f954 <BSP_I2C4_Init+0x6c>)
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	3301      	adds	r3, #1
 800f906:	4a13      	ldr	r2, [pc, #76]	; (800f954 <BSP_I2C4_Init+0x6c>)
 800f908:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800f90a:	4810      	ldr	r0, [pc, #64]	; (800f94c <BSP_I2C4_Init+0x64>)
 800f90c:	f002 fef8 	bl	8012700 <HAL_I2C_GetState>
 800f910:	4603      	mov	r3, r0
 800f912:	2b00      	cmp	r3, #0
 800f914:	d114      	bne.n	800f940 <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 800f916:	480d      	ldr	r0, [pc, #52]	; (800f94c <BSP_I2C4_Init+0x64>)
 800f918:	f000 fb60 	bl	800ffdc <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800f91c:	f005 fe8e 	bl	801563c <HAL_RCC_GetPCLK2Freq>
 800f920:	4603      	mov	r3, r0
 800f922:	490d      	ldr	r1, [pc, #52]	; (800f958 <BSP_I2C4_Init+0x70>)
 800f924:	4618      	mov	r0, r3
 800f926:	f000 f8e3 	bl	800faf0 <I2C_GetTiming>
 800f92a:	4603      	mov	r3, r0
 800f92c:	4619      	mov	r1, r3
 800f92e:	4807      	ldr	r0, [pc, #28]	; (800f94c <BSP_I2C4_Init+0x64>)
 800f930:	f000 f838 	bl	800f9a4 <MX_I2C4_Init>
 800f934:	4603      	mov	r3, r0
 800f936:	2b00      	cmp	r3, #0
 800f938:	d002      	beq.n	800f940 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800f93a:	f06f 0307 	mvn.w	r3, #7
 800f93e:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 800f940:	687b      	ldr	r3, [r7, #4]
}
 800f942:	4618      	mov	r0, r3
 800f944:	3708      	adds	r7, #8
 800f946:	46bd      	mov	sp, r7
 800f948:	bd80      	pop	{r7, pc}
 800f94a:	bf00      	nop
 800f94c:	2400b904 	.word	0x2400b904
 800f950:	58001c00 	.word	0x58001c00
 800f954:	2400aefc 	.word	0x2400aefc
 800f958:	000186a0 	.word	0x000186a0

0800f95c <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 800f95c:	b580      	push	{r7, lr}
 800f95e:	b082      	sub	sp, #8
 800f960:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 800f962:	2300      	movs	r3, #0
 800f964:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 800f966:	4b0d      	ldr	r3, [pc, #52]	; (800f99c <BSP_I2C4_DeInit+0x40>)
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	3b01      	subs	r3, #1
 800f96c:	4a0b      	ldr	r2, [pc, #44]	; (800f99c <BSP_I2C4_DeInit+0x40>)
 800f96e:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 800f970:	4b0a      	ldr	r3, [pc, #40]	; (800f99c <BSP_I2C4_DeInit+0x40>)
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	2b00      	cmp	r3, #0
 800f976:	d10b      	bne.n	800f990 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 800f978:	4809      	ldr	r0, [pc, #36]	; (800f9a0 <BSP_I2C4_DeInit+0x44>)
 800f97a:	f000 fb9b 	bl	80100b4 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800f97e:	4808      	ldr	r0, [pc, #32]	; (800f9a0 <BSP_I2C4_DeInit+0x44>)
 800f980:	f002 fc4c 	bl	801221c <HAL_I2C_DeInit>
 800f984:	4603      	mov	r3, r0
 800f986:	2b00      	cmp	r3, #0
 800f988:	d002      	beq.n	800f990 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 800f98a:	f06f 0307 	mvn.w	r3, #7
 800f98e:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 800f990:	687b      	ldr	r3, [r7, #4]
}
 800f992:	4618      	mov	r0, r3
 800f994:	3708      	adds	r7, #8
 800f996:	46bd      	mov	sp, r7
 800f998:	bd80      	pop	{r7, pc}
 800f99a:	bf00      	nop
 800f99c:	2400aefc 	.word	0x2400aefc
 800f9a0:	2400b904 	.word	0x2400b904

0800f9a4 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	b084      	sub	sp, #16
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	6078      	str	r0, [r7, #4]
 800f9ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f9ae:	2300      	movs	r3, #0
 800f9b0:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	683a      	ldr	r2, [r7, #0]
 800f9b6:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	2200      	movs	r2, #0
 800f9bc:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	2201      	movs	r2, #1
 800f9c2:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	2200      	movs	r2, #0
 800f9c8:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	2200      	movs	r2, #0
 800f9ce:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	2200      	movs	r2, #0
 800f9d4:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	2200      	movs	r2, #0
 800f9da:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	2200      	movs	r2, #0
 800f9e0:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800f9e2:	6878      	ldr	r0, [r7, #4]
 800f9e4:	f002 fb8a 	bl	80120fc <HAL_I2C_Init>
 800f9e8:	4603      	mov	r3, r0
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d002      	beq.n	800f9f4 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 800f9ee:	2301      	movs	r3, #1
 800f9f0:	73fb      	strb	r3, [r7, #15]
 800f9f2:	e014      	b.n	800fa1e <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 800f9f8:	68b9      	ldr	r1, [r7, #8]
 800f9fa:	6878      	ldr	r0, [r7, #4]
 800f9fc:	f003 f940 	bl	8012c80 <HAL_I2CEx_ConfigAnalogFilter>
 800fa00:	4603      	mov	r3, r0
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d002      	beq.n	800fa0c <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 800fa06:	2301      	movs	r3, #1
 800fa08:	73fb      	strb	r3, [r7, #15]
 800fa0a:	e008      	b.n	800fa1e <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 800fa0c:	2100      	movs	r1, #0
 800fa0e:	6878      	ldr	r0, [r7, #4]
 800fa10:	f003 f981 	bl	8012d16 <HAL_I2CEx_ConfigDigitalFilter>
 800fa14:	4603      	mov	r3, r0
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d001      	beq.n	800fa1e <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 800fa1a:	2301      	movs	r3, #1
 800fa1c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 800fa1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa20:	4618      	mov	r0, r3
 800fa22:	3710      	adds	r7, #16
 800fa24:	46bd      	mov	sp, r7
 800fa26:	bd80      	pop	{r7, pc}

0800fa28 <BSP_I2C4_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	b088      	sub	sp, #32
 800fa2c:	af02      	add	r7, sp, #8
 800fa2e:	60ba      	str	r2, [r7, #8]
 800fa30:	461a      	mov	r2, r3
 800fa32:	4603      	mov	r3, r0
 800fa34:	81fb      	strh	r3, [r7, #14]
 800fa36:	460b      	mov	r3, r1
 800fa38:	81bb      	strh	r3, [r7, #12]
 800fa3a:	4613      	mov	r3, r2
 800fa3c:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800fa3e:	89b9      	ldrh	r1, [r7, #12]
 800fa40:	89f8      	ldrh	r0, [r7, #14]
 800fa42:	88fb      	ldrh	r3, [r7, #6]
 800fa44:	9300      	str	r3, [sp, #0]
 800fa46:	68bb      	ldr	r3, [r7, #8]
 800fa48:	2201      	movs	r2, #1
 800fa4a:	f000 fb57 	bl	80100fc <I2C4_WriteReg>
 800fa4e:	4603      	mov	r3, r0
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d102      	bne.n	800fa5a <BSP_I2C4_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 800fa54:	2300      	movs	r3, #0
 800fa56:	617b      	str	r3, [r7, #20]
 800fa58:	e00c      	b.n	800fa74 <BSP_I2C4_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800fa5a:	4809      	ldr	r0, [pc, #36]	; (800fa80 <BSP_I2C4_WriteReg+0x58>)
 800fa5c:	f002 fe5e 	bl	801271c <HAL_I2C_GetError>
 800fa60:	4603      	mov	r3, r0
 800fa62:	2b04      	cmp	r3, #4
 800fa64:	d103      	bne.n	800fa6e <BSP_I2C4_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800fa66:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800fa6a:	617b      	str	r3, [r7, #20]
 800fa6c:	e002      	b.n	800fa74 <BSP_I2C4_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800fa6e:	f06f 0303 	mvn.w	r3, #3
 800fa72:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 800fa74:	697b      	ldr	r3, [r7, #20]
}
 800fa76:	4618      	mov	r0, r3
 800fa78:	3718      	adds	r7, #24
 800fa7a:	46bd      	mov	sp, r7
 800fa7c:	bd80      	pop	{r7, pc}
 800fa7e:	bf00      	nop
 800fa80:	2400b904 	.word	0x2400b904

0800fa84 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800fa84:	b580      	push	{r7, lr}
 800fa86:	b088      	sub	sp, #32
 800fa88:	af02      	add	r7, sp, #8
 800fa8a:	60ba      	str	r2, [r7, #8]
 800fa8c:	461a      	mov	r2, r3
 800fa8e:	4603      	mov	r3, r0
 800fa90:	81fb      	strh	r3, [r7, #14]
 800fa92:	460b      	mov	r3, r1
 800fa94:	81bb      	strh	r3, [r7, #12]
 800fa96:	4613      	mov	r3, r2
 800fa98:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800fa9a:	89b9      	ldrh	r1, [r7, #12]
 800fa9c:	89f8      	ldrh	r0, [r7, #14]
 800fa9e:	88fb      	ldrh	r3, [r7, #6]
 800faa0:	9300      	str	r3, [sp, #0]
 800faa2:	68bb      	ldr	r3, [r7, #8]
 800faa4:	2201      	movs	r2, #1
 800faa6:	f000 fb4f 	bl	8010148 <I2C4_ReadReg>
 800faaa:	4603      	mov	r3, r0
 800faac:	2b00      	cmp	r3, #0
 800faae:	d102      	bne.n	800fab6 <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 800fab0:	2300      	movs	r3, #0
 800fab2:	617b      	str	r3, [r7, #20]
 800fab4:	e00c      	b.n	800fad0 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800fab6:	4809      	ldr	r0, [pc, #36]	; (800fadc <BSP_I2C4_ReadReg+0x58>)
 800fab8:	f002 fe30 	bl	801271c <HAL_I2C_GetError>
 800fabc:	4603      	mov	r3, r0
 800fabe:	2b04      	cmp	r3, #4
 800fac0:	d103      	bne.n	800faca <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800fac2:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800fac6:	617b      	str	r3, [r7, #20]
 800fac8:	e002      	b.n	800fad0 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800faca:	f06f 0303 	mvn.w	r3, #3
 800face:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 800fad0:	697b      	ldr	r3, [r7, #20]
}
 800fad2:	4618      	mov	r0, r3
 800fad4:	3718      	adds	r7, #24
 800fad6:	46bd      	mov	sp, r7
 800fad8:	bd80      	pop	{r7, pc}
 800fada:	bf00      	nop
 800fadc:	2400b904 	.word	0x2400b904

0800fae0 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 800fae0:	b580      	push	{r7, lr}
 800fae2:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 800fae4:	f001 fbec 	bl	80112c0 <HAL_GetTick>
 800fae8:	4603      	mov	r3, r0
}
 800faea:	4618      	mov	r0, r3
 800faec:	bd80      	pop	{r7, pc}
	...

0800faf0 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 800faf0:	b580      	push	{r7, lr}
 800faf2:	b086      	sub	sp, #24
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	6078      	str	r0, [r7, #4]
 800faf8:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 800fafa:	2300      	movs	r3, #0
 800fafc:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d06b      	beq.n	800fbdc <I2C_GetTiming+0xec>
 800fb04:	683b      	ldr	r3, [r7, #0]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d068      	beq.n	800fbdc <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	613b      	str	r3, [r7, #16]
 800fb0e:	e060      	b.n	800fbd2 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800fb10:	4a35      	ldr	r2, [pc, #212]	; (800fbe8 <I2C_GetTiming+0xf8>)
 800fb12:	693b      	ldr	r3, [r7, #16]
 800fb14:	212c      	movs	r1, #44	; 0x2c
 800fb16:	fb01 f303 	mul.w	r3, r1, r3
 800fb1a:	4413      	add	r3, r2
 800fb1c:	3304      	adds	r3, #4
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	683a      	ldr	r2, [r7, #0]
 800fb22:	429a      	cmp	r2, r3
 800fb24:	d352      	bcc.n	800fbcc <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 800fb26:	4a30      	ldr	r2, [pc, #192]	; (800fbe8 <I2C_GetTiming+0xf8>)
 800fb28:	693b      	ldr	r3, [r7, #16]
 800fb2a:	212c      	movs	r1, #44	; 0x2c
 800fb2c:	fb01 f303 	mul.w	r3, r1, r3
 800fb30:	4413      	add	r3, r2
 800fb32:	3308      	adds	r3, #8
 800fb34:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800fb36:	683a      	ldr	r2, [r7, #0]
 800fb38:	429a      	cmp	r2, r3
 800fb3a:	d847      	bhi.n	800fbcc <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 800fb3c:	6939      	ldr	r1, [r7, #16]
 800fb3e:	6878      	ldr	r0, [r7, #4]
 800fb40:	f000 f856 	bl	800fbf0 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 800fb44:	6939      	ldr	r1, [r7, #16]
 800fb46:	6878      	ldr	r0, [r7, #4]
 800fb48:	f000 f940 	bl	800fdcc <I2C_Compute_SCLL_SCLH>
 800fb4c:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	2b7f      	cmp	r3, #127	; 0x7f
 800fb52:	d842      	bhi.n	800fbda <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800fb54:	4925      	ldr	r1, [pc, #148]	; (800fbec <I2C_GetTiming+0xfc>)
 800fb56:	68fa      	ldr	r2, [r7, #12]
 800fb58:	4613      	mov	r3, r2
 800fb5a:	009b      	lsls	r3, r3, #2
 800fb5c:	4413      	add	r3, r2
 800fb5e:	009b      	lsls	r3, r3, #2
 800fb60:	440b      	add	r3, r1
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800fb66:	4821      	ldr	r0, [pc, #132]	; (800fbec <I2C_GetTiming+0xfc>)
 800fb68:	68fa      	ldr	r2, [r7, #12]
 800fb6a:	4613      	mov	r3, r2
 800fb6c:	009b      	lsls	r3, r3, #2
 800fb6e:	4413      	add	r3, r2
 800fb70:	009b      	lsls	r3, r3, #2
 800fb72:	4403      	add	r3, r0
 800fb74:	3304      	adds	r3, #4
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	051b      	lsls	r3, r3, #20
 800fb7a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800fb7e:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800fb80:	481a      	ldr	r0, [pc, #104]	; (800fbec <I2C_GetTiming+0xfc>)
 800fb82:	68fa      	ldr	r2, [r7, #12]
 800fb84:	4613      	mov	r3, r2
 800fb86:	009b      	lsls	r3, r3, #2
 800fb88:	4413      	add	r3, r2
 800fb8a:	009b      	lsls	r3, r3, #2
 800fb8c:	4403      	add	r3, r0
 800fb8e:	3308      	adds	r3, #8
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	041b      	lsls	r3, r3, #16
 800fb94:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800fb98:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800fb9a:	4814      	ldr	r0, [pc, #80]	; (800fbec <I2C_GetTiming+0xfc>)
 800fb9c:	68fa      	ldr	r2, [r7, #12]
 800fb9e:	4613      	mov	r3, r2
 800fba0:	009b      	lsls	r3, r3, #2
 800fba2:	4413      	add	r3, r2
 800fba4:	009b      	lsls	r3, r3, #2
 800fba6:	4403      	add	r3, r0
 800fba8:	330c      	adds	r3, #12
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	021b      	lsls	r3, r3, #8
 800fbae:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800fbb0:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800fbb2:	480e      	ldr	r0, [pc, #56]	; (800fbec <I2C_GetTiming+0xfc>)
 800fbb4:	68fa      	ldr	r2, [r7, #12]
 800fbb6:	4613      	mov	r3, r2
 800fbb8:	009b      	lsls	r3, r3, #2
 800fbba:	4413      	add	r3, r2
 800fbbc:	009b      	lsls	r3, r3, #2
 800fbbe:	4403      	add	r3, r0
 800fbc0:	3310      	adds	r3, #16
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800fbc6:	430b      	orrs	r3, r1
 800fbc8:	617b      	str	r3, [r7, #20]
        }
        break;
 800fbca:	e006      	b.n	800fbda <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800fbcc:	693b      	ldr	r3, [r7, #16]
 800fbce:	3301      	adds	r3, #1
 800fbd0:	613b      	str	r3, [r7, #16]
 800fbd2:	693b      	ldr	r3, [r7, #16]
 800fbd4:	2b02      	cmp	r3, #2
 800fbd6:	d99b      	bls.n	800fb10 <I2C_GetTiming+0x20>
 800fbd8:	e000      	b.n	800fbdc <I2C_GetTiming+0xec>
        break;
 800fbda:	bf00      	nop
      }
    }
  }

  return ret;
 800fbdc:	697b      	ldr	r3, [r7, #20]
}
 800fbde:	4618      	mov	r0, r3
 800fbe0:	3718      	adds	r7, #24
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	bd80      	pop	{r7, pc}
 800fbe6:	bf00      	nop
 800fbe8:	0802f128 	.word	0x0802f128
 800fbec:	2400af00 	.word	0x2400af00

0800fbf0 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800fbf0:	b480      	push	{r7}
 800fbf2:	b08f      	sub	sp, #60	; 0x3c
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	6078      	str	r0, [r7, #4]
 800fbf8:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 800fbfa:	2310      	movs	r3, #16
 800fbfc:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	085a      	lsrs	r2, r3, #1
 800fc02:	4b6e      	ldr	r3, [pc, #440]	; (800fdbc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 800fc04:	4413      	add	r3, r2
 800fc06:	687a      	ldr	r2, [r7, #4]
 800fc08:	fbb3 f3f2 	udiv	r3, r3, r2
 800fc0c:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800fc0e:	2332      	movs	r3, #50	; 0x32
 800fc10:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 800fc12:	f44f 7382 	mov.w	r3, #260	; 0x104
 800fc16:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800fc18:	4a69      	ldr	r2, [pc, #420]	; (800fdc0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800fc1a:	683b      	ldr	r3, [r7, #0]
 800fc1c:	212c      	movs	r1, #44	; 0x2c
 800fc1e:	fb01 f303 	mul.w	r3, r1, r3
 800fc22:	4413      	add	r3, r2
 800fc24:	3324      	adds	r3, #36	; 0x24
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	4618      	mov	r0, r3
 800fc2a:	4a65      	ldr	r2, [pc, #404]	; (800fdc0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800fc2c:	683b      	ldr	r3, [r7, #0]
 800fc2e:	212c      	movs	r1, #44	; 0x2c
 800fc30:	fb01 f303 	mul.w	r3, r1, r3
 800fc34:	4413      	add	r3, r2
 800fc36:	330c      	adds	r3, #12
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800fc3c:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800fc3e:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800fc40:	495f      	ldr	r1, [pc, #380]	; (800fdc0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800fc42:	683b      	ldr	r3, [r7, #0]
 800fc44:	202c      	movs	r0, #44	; 0x2c
 800fc46:	fb00 f303 	mul.w	r3, r0, r3
 800fc4a:	440b      	add	r3, r1
 800fc4c:	3328      	adds	r3, #40	; 0x28
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	3303      	adds	r3, #3
 800fc52:	69f9      	ldr	r1, [r7, #28]
 800fc54:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800fc58:	1ad3      	subs	r3, r2, r3
 800fc5a:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800fc5c:	4a58      	ldr	r2, [pc, #352]	; (800fdc0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800fc5e:	683b      	ldr	r3, [r7, #0]
 800fc60:	212c      	movs	r1, #44	; 0x2c
 800fc62:	fb01 f303 	mul.w	r3, r1, r3
 800fc66:	4413      	add	r3, r2
 800fc68:	3310      	adds	r3, #16
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	4a54      	ldr	r2, [pc, #336]	; (800fdc0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800fc70:	683b      	ldr	r3, [r7, #0]
 800fc72:	212c      	movs	r1, #44	; 0x2c
 800fc74:	fb01 f303 	mul.w	r3, r1, r3
 800fc78:	4413      	add	r3, r2
 800fc7a:	3320      	adds	r3, #32
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800fc80:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800fc82:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800fc84:	494e      	ldr	r1, [pc, #312]	; (800fdc0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800fc86:	683b      	ldr	r3, [r7, #0]
 800fc88:	202c      	movs	r0, #44	; 0x2c
 800fc8a:	fb00 f303 	mul.w	r3, r0, r3
 800fc8e:	440b      	add	r3, r1
 800fc90:	3328      	adds	r3, #40	; 0x28
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	3304      	adds	r3, #4
 800fc96:	69f9      	ldr	r1, [r7, #28]
 800fc98:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800fc9c:	1ad3      	subs	r3, r2, r3
 800fc9e:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 800fca0:	4a47      	ldr	r2, [pc, #284]	; (800fdc0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800fca2:	683b      	ldr	r3, [r7, #0]
 800fca4:	212c      	movs	r1, #44	; 0x2c
 800fca6:	fb01 f303 	mul.w	r3, r1, r3
 800fcaa:	4413      	add	r3, r2
 800fcac:	3320      	adds	r3, #32
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	4a43      	ldr	r2, [pc, #268]	; (800fdc0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800fcb4:	683b      	ldr	r3, [r7, #0]
 800fcb6:	212c      	movs	r1, #44	; 0x2c
 800fcb8:	fb01 f303 	mul.w	r3, r1, r3
 800fcbc:	4413      	add	r3, r2
 800fcbe:	3314      	adds	r3, #20
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	4403      	add	r3, r0
 800fcc4:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 800fcc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	dc01      	bgt.n	800fcd0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 800fccc:	2300      	movs	r3, #0
 800fcce:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 800fcd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	dc01      	bgt.n	800fcda <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 800fcd6:	2300      	movs	r3, #0
 800fcd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800fcda:	2300      	movs	r3, #0
 800fcdc:	62bb      	str	r3, [r7, #40]	; 0x28
 800fcde:	e062      	b.n	800fda6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800fce0:	2300      	movs	r3, #0
 800fce2:	627b      	str	r3, [r7, #36]	; 0x24
 800fce4:	e059      	b.n	800fd9a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800fce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fce8:	3301      	adds	r3, #1
 800fcea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fcec:	3201      	adds	r2, #1
 800fcee:	fb03 f202 	mul.w	r2, r3, r2
 800fcf2:	69fb      	ldr	r3, [r7, #28]
 800fcf4:	fb02 f303 	mul.w	r3, r2, r3
 800fcf8:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 800fcfa:	693b      	ldr	r3, [r7, #16]
 800fcfc:	68fa      	ldr	r2, [r7, #12]
 800fcfe:	429a      	cmp	r2, r3
 800fd00:	d348      	bcc.n	800fd94 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800fd02:	2300      	movs	r3, #0
 800fd04:	623b      	str	r3, [r7, #32]
 800fd06:	e042      	b.n	800fd8e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 800fd08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd0a:	3301      	adds	r3, #1
 800fd0c:	6a3a      	ldr	r2, [r7, #32]
 800fd0e:	fb03 f202 	mul.w	r2, r3, r2
 800fd12:	69fb      	ldr	r3, [r7, #28]
 800fd14:	fb02 f303 	mul.w	r3, r2, r3
 800fd18:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800fd1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd1c:	68ba      	ldr	r2, [r7, #8]
 800fd1e:	429a      	cmp	r2, r3
 800fd20:	d332      	bcc.n	800fd88 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 800fd22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd24:	68ba      	ldr	r2, [r7, #8]
 800fd26:	429a      	cmp	r2, r3
 800fd28:	d82e      	bhi.n	800fd88 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 800fd2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd2e:	429a      	cmp	r2, r3
 800fd30:	d02a      	beq.n	800fd88 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800fd32:	4b24      	ldr	r3, [pc, #144]	; (800fdc4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800fd34:	681a      	ldr	r2, [r3, #0]
 800fd36:	4924      	ldr	r1, [pc, #144]	; (800fdc8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800fd38:	4613      	mov	r3, r2
 800fd3a:	009b      	lsls	r3, r3, #2
 800fd3c:	4413      	add	r3, r2
 800fd3e:	009b      	lsls	r3, r3, #2
 800fd40:	440b      	add	r3, r1
 800fd42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd44:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800fd46:	4b1f      	ldr	r3, [pc, #124]	; (800fdc4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800fd48:	681a      	ldr	r2, [r3, #0]
 800fd4a:	491f      	ldr	r1, [pc, #124]	; (800fdc8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800fd4c:	4613      	mov	r3, r2
 800fd4e:	009b      	lsls	r3, r3, #2
 800fd50:	4413      	add	r3, r2
 800fd52:	009b      	lsls	r3, r3, #2
 800fd54:	440b      	add	r3, r1
 800fd56:	3304      	adds	r3, #4
 800fd58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd5a:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800fd5c:	4b19      	ldr	r3, [pc, #100]	; (800fdc4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800fd5e:	681a      	ldr	r2, [r3, #0]
 800fd60:	4919      	ldr	r1, [pc, #100]	; (800fdc8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800fd62:	4613      	mov	r3, r2
 800fd64:	009b      	lsls	r3, r3, #2
 800fd66:	4413      	add	r3, r2
 800fd68:	009b      	lsls	r3, r3, #2
 800fd6a:	440b      	add	r3, r1
 800fd6c:	3308      	adds	r3, #8
 800fd6e:	6a3a      	ldr	r2, [r7, #32]
 800fd70:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 800fd72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd74:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 800fd76:	4b13      	ldr	r3, [pc, #76]	; (800fdc4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	3301      	adds	r3, #1
 800fd7c:	4a11      	ldr	r2, [pc, #68]	; (800fdc4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800fd7e:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800fd80:	4b10      	ldr	r3, [pc, #64]	; (800fdc4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	2b7f      	cmp	r3, #127	; 0x7f
 800fd86:	d812      	bhi.n	800fdae <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800fd88:	6a3b      	ldr	r3, [r7, #32]
 800fd8a:	3301      	adds	r3, #1
 800fd8c:	623b      	str	r3, [r7, #32]
 800fd8e:	6a3b      	ldr	r3, [r7, #32]
 800fd90:	2b0f      	cmp	r3, #15
 800fd92:	d9b9      	bls.n	800fd08 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800fd94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd96:	3301      	adds	r3, #1
 800fd98:	627b      	str	r3, [r7, #36]	; 0x24
 800fd9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd9c:	2b0f      	cmp	r3, #15
 800fd9e:	d9a2      	bls.n	800fce6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800fda0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fda2:	3301      	adds	r3, #1
 800fda4:	62bb      	str	r3, [r7, #40]	; 0x28
 800fda6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fda8:	2b0f      	cmp	r3, #15
 800fdaa:	d999      	bls.n	800fce0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 800fdac:	e000      	b.n	800fdb0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 800fdae:	bf00      	nop
          }
        }
      }
    }
  }
}
 800fdb0:	373c      	adds	r7, #60	; 0x3c
 800fdb2:	46bd      	mov	sp, r7
 800fdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb8:	4770      	bx	lr
 800fdba:	bf00      	nop
 800fdbc:	3b9aca00 	.word	0x3b9aca00
 800fdc0:	0802f128 	.word	0x0802f128
 800fdc4:	2400b900 	.word	0x2400b900
 800fdc8:	2400af00 	.word	0x2400af00

0800fdcc <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800fdcc:	b480      	push	{r7}
 800fdce:	b093      	sub	sp, #76	; 0x4c
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	6078      	str	r0, [r7, #4]
 800fdd4:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 800fdd6:	f04f 33ff 	mov.w	r3, #4294967295
 800fdda:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	085a      	lsrs	r2, r3, #1
 800fde0:	4b7a      	ldr	r3, [pc, #488]	; (800ffcc <I2C_Compute_SCLL_SCLH+0x200>)
 800fde2:	4413      	add	r3, r2
 800fde4:	687a      	ldr	r2, [r7, #4]
 800fde6:	fbb3 f3f2 	udiv	r3, r3, r2
 800fdea:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 800fdec:	4a78      	ldr	r2, [pc, #480]	; (800ffd0 <I2C_Compute_SCLL_SCLH+0x204>)
 800fdee:	683b      	ldr	r3, [r7, #0]
 800fdf0:	212c      	movs	r1, #44	; 0x2c
 800fdf2:	fb01 f303 	mul.w	r3, r1, r3
 800fdf6:	4413      	add	r3, r2
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	085a      	lsrs	r2, r3, #1
 800fdfc:	4b73      	ldr	r3, [pc, #460]	; (800ffcc <I2C_Compute_SCLL_SCLH+0x200>)
 800fdfe:	4413      	add	r3, r2
 800fe00:	4973      	ldr	r1, [pc, #460]	; (800ffd0 <I2C_Compute_SCLL_SCLH+0x204>)
 800fe02:	683a      	ldr	r2, [r7, #0]
 800fe04:	202c      	movs	r0, #44	; 0x2c
 800fe06:	fb00 f202 	mul.w	r2, r0, r2
 800fe0a:	440a      	add	r2, r1
 800fe0c:	6812      	ldr	r2, [r2, #0]
 800fe0e:	fbb3 f3f2 	udiv	r3, r3, r2
 800fe12:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800fe14:	2332      	movs	r3, #50	; 0x32
 800fe16:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 800fe18:	4a6d      	ldr	r2, [pc, #436]	; (800ffd0 <I2C_Compute_SCLL_SCLH+0x204>)
 800fe1a:	683b      	ldr	r3, [r7, #0]
 800fe1c:	212c      	movs	r1, #44	; 0x2c
 800fe1e:	fb01 f303 	mul.w	r3, r1, r3
 800fe22:	4413      	add	r3, r2
 800fe24:	3328      	adds	r3, #40	; 0x28
 800fe26:	681a      	ldr	r2, [r3, #0]
 800fe28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe2a:	fb02 f303 	mul.w	r3, r2, r3
 800fe2e:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 800fe30:	4a67      	ldr	r2, [pc, #412]	; (800ffd0 <I2C_Compute_SCLL_SCLH+0x204>)
 800fe32:	683b      	ldr	r3, [r7, #0]
 800fe34:	212c      	movs	r1, #44	; 0x2c
 800fe36:	fb01 f303 	mul.w	r3, r1, r3
 800fe3a:	4413      	add	r3, r2
 800fe3c:	3304      	adds	r3, #4
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	4a62      	ldr	r2, [pc, #392]	; (800ffcc <I2C_Compute_SCLL_SCLH+0x200>)
 800fe42:	fbb2 f3f3 	udiv	r3, r2, r3
 800fe46:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 800fe48:	4a61      	ldr	r2, [pc, #388]	; (800ffd0 <I2C_Compute_SCLL_SCLH+0x204>)
 800fe4a:	683b      	ldr	r3, [r7, #0]
 800fe4c:	212c      	movs	r1, #44	; 0x2c
 800fe4e:	fb01 f303 	mul.w	r3, r1, r3
 800fe52:	4413      	add	r3, r2
 800fe54:	3308      	adds	r3, #8
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	4a5c      	ldr	r2, [pc, #368]	; (800ffcc <I2C_Compute_SCLL_SCLH+0x200>)
 800fe5a:	fbb2 f3f3 	udiv	r3, r2, r3
 800fe5e:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 800fe60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe62:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800fe64:	2300      	movs	r3, #0
 800fe66:	637b      	str	r3, [r7, #52]	; 0x34
 800fe68:	e0a3      	b.n	800ffb2 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800fe6a:	495a      	ldr	r1, [pc, #360]	; (800ffd4 <I2C_Compute_SCLL_SCLH+0x208>)
 800fe6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe6e:	4613      	mov	r3, r2
 800fe70:	009b      	lsls	r3, r3, #2
 800fe72:	4413      	add	r3, r2
 800fe74:	009b      	lsls	r3, r3, #2
 800fe76:	440b      	add	r3, r1
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	1c5a      	adds	r2, r3, #1
 800fe7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe7e:	fb02 f303 	mul.w	r3, r2, r3
 800fe82:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800fe84:	2300      	movs	r3, #0
 800fe86:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fe88:	e08c      	b.n	800ffa4 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800fe8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe8c:	6a3b      	ldr	r3, [r7, #32]
 800fe8e:	441a      	add	r2, r3
 800fe90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe92:	3301      	adds	r3, #1
 800fe94:	6979      	ldr	r1, [r7, #20]
 800fe96:	fb03 f101 	mul.w	r1, r3, r1
 800fe9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe9c:	005b      	lsls	r3, r3, #1
 800fe9e:	440b      	add	r3, r1
 800fea0:	4413      	add	r3, r2
 800fea2:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800fea4:	4a4a      	ldr	r2, [pc, #296]	; (800ffd0 <I2C_Compute_SCLL_SCLH+0x204>)
 800fea6:	683b      	ldr	r3, [r7, #0]
 800fea8:	212c      	movs	r1, #44	; 0x2c
 800feaa:	fb01 f303 	mul.w	r3, r1, r3
 800feae:	4413      	add	r3, r2
 800feb0:	3318      	adds	r3, #24
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	693a      	ldr	r2, [r7, #16]
 800feb6:	429a      	cmp	r2, r3
 800feb8:	d971      	bls.n	800ff9e <I2C_Compute_SCLL_SCLH+0x1d2>
 800feba:	693a      	ldr	r2, [r7, #16]
 800febc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800febe:	1ad2      	subs	r2, r2, r3
 800fec0:	6a3b      	ldr	r3, [r7, #32]
 800fec2:	1ad3      	subs	r3, r2, r3
 800fec4:	089b      	lsrs	r3, r3, #2
 800fec6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fec8:	429a      	cmp	r2, r3
 800feca:	d268      	bcs.n	800ff9e <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800fecc:	2300      	movs	r3, #0
 800fece:	63bb      	str	r3, [r7, #56]	; 0x38
 800fed0:	e062      	b.n	800ff98 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800fed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fed4:	6a3b      	ldr	r3, [r7, #32]
 800fed6:	441a      	add	r2, r3
 800fed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feda:	3301      	adds	r3, #1
 800fedc:	6979      	ldr	r1, [r7, #20]
 800fede:	fb03 f101 	mul.w	r1, r3, r1
 800fee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fee4:	005b      	lsls	r3, r3, #1
 800fee6:	440b      	add	r3, r1
 800fee8:	4413      	add	r3, r2
 800feea:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 800feec:	693a      	ldr	r2, [r7, #16]
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	441a      	add	r2, r3
 800fef2:	4937      	ldr	r1, [pc, #220]	; (800ffd0 <I2C_Compute_SCLL_SCLH+0x204>)
 800fef4:	683b      	ldr	r3, [r7, #0]
 800fef6:	202c      	movs	r0, #44	; 0x2c
 800fef8:	fb00 f303 	mul.w	r3, r0, r3
 800fefc:	440b      	add	r3, r1
 800fefe:	3320      	adds	r3, #32
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	441a      	add	r2, r3
 800ff04:	4932      	ldr	r1, [pc, #200]	; (800ffd0 <I2C_Compute_SCLL_SCLH+0x204>)
 800ff06:	683b      	ldr	r3, [r7, #0]
 800ff08:	202c      	movs	r0, #44	; 0x2c
 800ff0a:	fb00 f303 	mul.w	r3, r0, r3
 800ff0e:	440b      	add	r3, r1
 800ff10:	3324      	adds	r3, #36	; 0x24
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	4413      	add	r3, r2
 800ff16:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800ff18:	68ba      	ldr	r2, [r7, #8]
 800ff1a:	69bb      	ldr	r3, [r7, #24]
 800ff1c:	429a      	cmp	r2, r3
 800ff1e:	d338      	bcc.n	800ff92 <I2C_Compute_SCLL_SCLH+0x1c6>
 800ff20:	68ba      	ldr	r2, [r7, #8]
 800ff22:	69fb      	ldr	r3, [r7, #28]
 800ff24:	429a      	cmp	r2, r3
 800ff26:	d834      	bhi.n	800ff92 <I2C_Compute_SCLL_SCLH+0x1c6>
 800ff28:	4a29      	ldr	r2, [pc, #164]	; (800ffd0 <I2C_Compute_SCLL_SCLH+0x204>)
 800ff2a:	683b      	ldr	r3, [r7, #0]
 800ff2c:	212c      	movs	r1, #44	; 0x2c
 800ff2e:	fb01 f303 	mul.w	r3, r1, r3
 800ff32:	4413      	add	r3, r2
 800ff34:	331c      	adds	r3, #28
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	68fa      	ldr	r2, [r7, #12]
 800ff3a:	429a      	cmp	r2, r3
 800ff3c:	d329      	bcc.n	800ff92 <I2C_Compute_SCLL_SCLH+0x1c6>
 800ff3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	429a      	cmp	r2, r3
 800ff44:	d225      	bcs.n	800ff92 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 800ff46:	68ba      	ldr	r2, [r7, #8]
 800ff48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff4a:	1ad3      	subs	r3, r2, r3
 800ff4c:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 800ff4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	da02      	bge.n	800ff5a <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 800ff54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff56:	425b      	negs	r3, r3
 800ff58:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 800ff5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ff5e:	429a      	cmp	r2, r3
 800ff60:	d917      	bls.n	800ff92 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 800ff62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff64:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 800ff66:	491b      	ldr	r1, [pc, #108]	; (800ffd4 <I2C_Compute_SCLL_SCLH+0x208>)
 800ff68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff6a:	4613      	mov	r3, r2
 800ff6c:	009b      	lsls	r3, r3, #2
 800ff6e:	4413      	add	r3, r2
 800ff70:	009b      	lsls	r3, r3, #2
 800ff72:	440b      	add	r3, r1
 800ff74:	3310      	adds	r3, #16
 800ff76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ff78:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 800ff7a:	4916      	ldr	r1, [pc, #88]	; (800ffd4 <I2C_Compute_SCLL_SCLH+0x208>)
 800ff7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff7e:	4613      	mov	r3, r2
 800ff80:	009b      	lsls	r3, r3, #2
 800ff82:	4413      	add	r3, r2
 800ff84:	009b      	lsls	r3, r3, #2
 800ff86:	440b      	add	r3, r1
 800ff88:	330c      	adds	r3, #12
 800ff8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ff8c:	601a      	str	r2, [r3, #0]
              ret = count;
 800ff8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff90:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800ff92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff94:	3301      	adds	r3, #1
 800ff96:	63bb      	str	r3, [r7, #56]	; 0x38
 800ff98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff9a:	2bff      	cmp	r3, #255	; 0xff
 800ff9c:	d999      	bls.n	800fed2 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800ff9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ffa0:	3301      	adds	r3, #1
 800ffa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ffa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ffa6:	2bff      	cmp	r3, #255	; 0xff
 800ffa8:	f67f af6f 	bls.w	800fe8a <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800ffac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffae:	3301      	adds	r3, #1
 800ffb0:	637b      	str	r3, [r7, #52]	; 0x34
 800ffb2:	4b09      	ldr	r3, [pc, #36]	; (800ffd8 <I2C_Compute_SCLL_SCLH+0x20c>)
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ffb8:	429a      	cmp	r2, r3
 800ffba:	f4ff af56 	bcc.w	800fe6a <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 800ffbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	374c      	adds	r7, #76	; 0x4c
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffca:	4770      	bx	lr
 800ffcc:	3b9aca00 	.word	0x3b9aca00
 800ffd0:	0802f128 	.word	0x0802f128
 800ffd4:	2400af00 	.word	0x2400af00
 800ffd8:	2400b900 	.word	0x2400b900

0800ffdc <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 800ffdc:	b580      	push	{r7, lr}
 800ffde:	b08a      	sub	sp, #40	; 0x28
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800ffe4:	4b31      	ldr	r3, [pc, #196]	; (80100ac <I2C4_MspInit+0xd0>)
 800ffe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ffea:	4a30      	ldr	r2, [pc, #192]	; (80100ac <I2C4_MspInit+0xd0>)
 800ffec:	f043 0308 	orr.w	r3, r3, #8
 800fff0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fff4:	4b2d      	ldr	r3, [pc, #180]	; (80100ac <I2C4_MspInit+0xd0>)
 800fff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fffa:	f003 0308 	and.w	r3, r3, #8
 800fffe:	613b      	str	r3, [r7, #16]
 8010000:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8010002:	4b2a      	ldr	r3, [pc, #168]	; (80100ac <I2C4_MspInit+0xd0>)
 8010004:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010008:	4a28      	ldr	r2, [pc, #160]	; (80100ac <I2C4_MspInit+0xd0>)
 801000a:	f043 0308 	orr.w	r3, r3, #8
 801000e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010012:	4b26      	ldr	r3, [pc, #152]	; (80100ac <I2C4_MspInit+0xd0>)
 8010014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010018:	f003 0308 	and.w	r3, r3, #8
 801001c:	60fb      	str	r3, [r7, #12]
 801001e:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8010020:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010024:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8010026:	2312      	movs	r3, #18
 8010028:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 801002a:	2300      	movs	r3, #0
 801002c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 801002e:	2302      	movs	r3, #2
 8010030:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8010032:	2304      	movs	r3, #4
 8010034:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8010036:	f107 0314 	add.w	r3, r7, #20
 801003a:	4619      	mov	r1, r3
 801003c:	481c      	ldr	r0, [pc, #112]	; (80100b0 <I2C4_MspInit+0xd4>)
 801003e:	f001 fd43 	bl	8011ac8 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8010042:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010046:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8010048:	2312      	movs	r3, #18
 801004a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 801004c:	2300      	movs	r3, #0
 801004e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8010050:	2302      	movs	r3, #2
 8010052:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8010054:	2304      	movs	r3, #4
 8010056:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8010058:	f107 0314 	add.w	r3, r7, #20
 801005c:	4619      	mov	r1, r3
 801005e:	4814      	ldr	r0, [pc, #80]	; (80100b0 <I2C4_MspInit+0xd4>)
 8010060:	f001 fd32 	bl	8011ac8 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 8010064:	4b11      	ldr	r3, [pc, #68]	; (80100ac <I2C4_MspInit+0xd0>)
 8010066:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 801006a:	4a10      	ldr	r2, [pc, #64]	; (80100ac <I2C4_MspInit+0xd0>)
 801006c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010070:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8010074:	4b0d      	ldr	r3, [pc, #52]	; (80100ac <I2C4_MspInit+0xd0>)
 8010076:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 801007a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801007e:	60bb      	str	r3, [r7, #8]
 8010080:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 8010082:	4b0a      	ldr	r3, [pc, #40]	; (80100ac <I2C4_MspInit+0xd0>)
 8010084:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8010088:	4a08      	ldr	r2, [pc, #32]	; (80100ac <I2C4_MspInit+0xd0>)
 801008a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801008e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 8010092:	4b06      	ldr	r3, [pc, #24]	; (80100ac <I2C4_MspInit+0xd0>)
 8010094:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8010098:	4a04      	ldr	r2, [pc, #16]	; (80100ac <I2C4_MspInit+0xd0>)
 801009a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801009e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 80100a2:	bf00      	nop
 80100a4:	3728      	adds	r7, #40	; 0x28
 80100a6:	46bd      	mov	sp, r7
 80100a8:	bd80      	pop	{r7, pc}
 80100aa:	bf00      	nop
 80100ac:	58024400 	.word	0x58024400
 80100b0:	58020c00 	.word	0x58020c00

080100b4 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 80100b4:	b580      	push	{r7, lr}
 80100b6:	b088      	sub	sp, #32
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 80100bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80100c0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	4619      	mov	r1, r3
 80100c6:	480b      	ldr	r0, [pc, #44]	; (80100f4 <I2C4_MspDeInit+0x40>)
 80100c8:	f001 feae 	bl	8011e28 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 80100cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80100d0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	4619      	mov	r1, r3
 80100d6:	4807      	ldr	r0, [pc, #28]	; (80100f4 <I2C4_MspDeInit+0x40>)
 80100d8:	f001 fea6 	bl	8011e28 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 80100dc:	4b06      	ldr	r3, [pc, #24]	; (80100f8 <I2C4_MspDeInit+0x44>)
 80100de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80100e2:	4a05      	ldr	r2, [pc, #20]	; (80100f8 <I2C4_MspDeInit+0x44>)
 80100e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80100e8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
}
 80100ec:	bf00      	nop
 80100ee:	3720      	adds	r7, #32
 80100f0:	46bd      	mov	sp, r7
 80100f2:	bd80      	pop	{r7, pc}
 80100f4:	58020c00 	.word	0x58020c00
 80100f8:	58024400 	.word	0x58024400

080100fc <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b088      	sub	sp, #32
 8010100:	af04      	add	r7, sp, #16
 8010102:	607b      	str	r3, [r7, #4]
 8010104:	4603      	mov	r3, r0
 8010106:	81fb      	strh	r3, [r7, #14]
 8010108:	460b      	mov	r3, r1
 801010a:	81bb      	strh	r3, [r7, #12]
 801010c:	4613      	mov	r3, r2
 801010e:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8010110:	8978      	ldrh	r0, [r7, #10]
 8010112:	89ba      	ldrh	r2, [r7, #12]
 8010114:	89f9      	ldrh	r1, [r7, #14]
 8010116:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801011a:	9302      	str	r3, [sp, #8]
 801011c:	8b3b      	ldrh	r3, [r7, #24]
 801011e:	9301      	str	r3, [sp, #4]
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	9300      	str	r3, [sp, #0]
 8010124:	4603      	mov	r3, r0
 8010126:	4807      	ldr	r0, [pc, #28]	; (8010144 <I2C4_WriteReg+0x48>)
 8010128:	f002 f8bc 	bl	80122a4 <HAL_I2C_Mem_Write>
 801012c:	4603      	mov	r3, r0
 801012e:	2b00      	cmp	r3, #0
 8010130:	d101      	bne.n	8010136 <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8010132:	2300      	movs	r3, #0
 8010134:	e001      	b.n	801013a <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8010136:	f06f 0307 	mvn.w	r3, #7
}
 801013a:	4618      	mov	r0, r3
 801013c:	3710      	adds	r7, #16
 801013e:	46bd      	mov	sp, r7
 8010140:	bd80      	pop	{r7, pc}
 8010142:	bf00      	nop
 8010144:	2400b904 	.word	0x2400b904

08010148 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8010148:	b580      	push	{r7, lr}
 801014a:	b088      	sub	sp, #32
 801014c:	af04      	add	r7, sp, #16
 801014e:	607b      	str	r3, [r7, #4]
 8010150:	4603      	mov	r3, r0
 8010152:	81fb      	strh	r3, [r7, #14]
 8010154:	460b      	mov	r3, r1
 8010156:	81bb      	strh	r3, [r7, #12]
 8010158:	4613      	mov	r3, r2
 801015a:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 801015c:	8978      	ldrh	r0, [r7, #10]
 801015e:	89ba      	ldrh	r2, [r7, #12]
 8010160:	89f9      	ldrh	r1, [r7, #14]
 8010162:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010166:	9302      	str	r3, [sp, #8]
 8010168:	8b3b      	ldrh	r3, [r7, #24]
 801016a:	9301      	str	r3, [sp, #4]
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	9300      	str	r3, [sp, #0]
 8010170:	4603      	mov	r3, r0
 8010172:	4807      	ldr	r0, [pc, #28]	; (8010190 <I2C4_ReadReg+0x48>)
 8010174:	f002 f9aa 	bl	80124cc <HAL_I2C_Mem_Read>
 8010178:	4603      	mov	r3, r0
 801017a:	2b00      	cmp	r3, #0
 801017c:	d101      	bne.n	8010182 <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 801017e:	2300      	movs	r3, #0
 8010180:	e001      	b.n	8010186 <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8010182:	f06f 0307 	mvn.w	r3, #7
}
 8010186:	4618      	mov	r0, r3
 8010188:	3710      	adds	r7, #16
 801018a:	46bd      	mov	sp, r7
 801018c:	bd80      	pop	{r7, pc}
 801018e:	bf00      	nop
 8010190:	2400b904 	.word	0x2400b904

08010194 <BSP_QSPI_Init>:
  * @param  Instance   QSPI Instance
  * @param  Init       QSPI Init structure
  * @retval BSP status
  */
int32_t BSP_QSPI_Init(uint32_t Instance, BSP_QSPI_Init_t *Init)
{
 8010194:	b580      	push	{r7, lr}
 8010196:	b090      	sub	sp, #64	; 0x40
 8010198:	af00      	add	r7, sp, #0
 801019a:	6078      	str	r0, [r7, #4]
 801019c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 801019e:	2300      	movs	r3, #0
 80101a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  3: For DTR mode to reach max 54Mhz
  */
  static const uint32_t PrescalerTab[2] = {1, 3};

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d003      	beq.n	80101b0 <BSP_QSPI_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80101a8:	f06f 0301 	mvn.w	r3, #1
 80101ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80101ae:	e090      	b.n	80102d2 <BSP_QSPI_Init+0x13e>
  }
  else
  {
    /* Check if instance is already initialized */
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 80101b0:	494a      	ldr	r1, [pc, #296]	; (80102dc <BSP_QSPI_Init+0x148>)
 80101b2:	687a      	ldr	r2, [r7, #4]
 80101b4:	4613      	mov	r3, r2
 80101b6:	005b      	lsls	r3, r3, #1
 80101b8:	4413      	add	r3, r2
 80101ba:	009b      	lsls	r3, r3, #2
 80101bc:	440b      	add	r3, r1
 80101be:	781b      	ldrb	r3, [r3, #0]
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	f040 8086 	bne.w	80102d2 <BSP_QSPI_Init+0x13e>
          ret = BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      /* Msp QSPI initialization */
      QSPI_MspInit(&hqspi);
 80101c6:	4846      	ldr	r0, [pc, #280]	; (80102e0 <BSP_QSPI_Init+0x14c>)
 80101c8:	f000 f99c 	bl	8010504 <QSPI_MspInit>
#endif /* USE_HAL_QSPI_REGISTER_CALLBACKS */

      if(ret == BSP_ERROR_NONE)
 80101cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d17f      	bne.n	80102d2 <BSP_QSPI_Init+0x13e>
      {
        /* STM32 QSPI interface initialization */
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 80101d2:	f107 031c 	add.w	r3, r7, #28
 80101d6:	4618      	mov	r0, r3
 80101d8:	f7fe ffea 	bl	800f1b0 <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 80101dc:	683b      	ldr	r3, [r7, #0]
 80101de:	785b      	ldrb	r3, [r3, #1]
 80101e0:	461a      	mov	r2, r3
 80101e2:	4b40      	ldr	r3, [pc, #256]	; (80102e4 <BSP_QSPI_Init+0x150>)
 80101e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101e8:	613b      	str	r3, [r7, #16]
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 80101ea:	2340      	movs	r3, #64	; 0x40
 80101ec:	61bb      	str	r3, [r7, #24]
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 80101ee:	69fb      	ldr	r3, [r7, #28]
 80101f0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80101f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101f4:	fa93 f3a3 	rbit	r3, r3
 80101f8:	633b      	str	r3, [r7, #48]	; 0x30
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80101fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101fc:	63bb      	str	r3, [r7, #56]	; 0x38
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80101fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010200:	2b00      	cmp	r3, #0
 8010202:	d101      	bne.n	8010208 <BSP_QSPI_Init+0x74>
  {
    return 32U;
 8010204:	2320      	movs	r3, #32
 8010206:	e003      	b.n	8010210 <BSP_QSPI_Init+0x7c>
  }
  return __builtin_clz(value);
 8010208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801020a:	fab3 f383 	clz	r3, r3
 801020e:	b2db      	uxtb	r3, r3
 8010210:	3b01      	subs	r3, #1
 8010212:	60fb      	str	r3, [r7, #12]
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8010214:	683b      	ldr	r3, [r7, #0]
 8010216:	785b      	ldrb	r3, [r3, #1]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d101      	bne.n	8010220 <BSP_QSPI_Init+0x8c>
 801021c:	2310      	movs	r3, #16
 801021e:	e000      	b.n	8010222 <BSP_QSPI_Init+0x8e>
 8010220:	2300      	movs	r3, #0
 8010222:	617b      	str	r3, [r7, #20]

        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 8010224:	f107 030c 	add.w	r3, r7, #12
 8010228:	4619      	mov	r1, r3
 801022a:	482d      	ldr	r0, [pc, #180]	; (80102e0 <BSP_QSPI_Init+0x14c>)
 801022c:	f000 f85c 	bl	80102e8 <MX_QSPI_Init>
 8010230:	4603      	mov	r3, r0
 8010232:	2b00      	cmp	r3, #0
 8010234:	d003      	beq.n	801023e <BSP_QSPI_Init+0xaa>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8010236:	f06f 0303 	mvn.w	r3, #3
 801023a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801023c:	e049      	b.n	80102d2 <BSP_QSPI_Init+0x13e>
        }/* QSPI memory reset */
        else if(QSPI_ResetMemory(Instance) != BSP_ERROR_NONE)
 801023e:	6878      	ldr	r0, [r7, #4]
 8010240:	f000 faa8 	bl	8010794 <QSPI_ResetMemory>
 8010244:	4603      	mov	r3, r0
 8010246:	2b00      	cmp	r3, #0
 8010248:	d003      	beq.n	8010252 <BSP_QSPI_Init+0xbe>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 801024a:	f06f 0304 	mvn.w	r3, #4
 801024e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010250:	e03f      	b.n	80102d2 <BSP_QSPI_Init+0x13e>
        }/* Force Flash enter 4 Byte address mode */
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8010252:	4922      	ldr	r1, [pc, #136]	; (80102dc <BSP_QSPI_Init+0x148>)
 8010254:	687a      	ldr	r2, [r7, #4]
 8010256:	4613      	mov	r3, r2
 8010258:	005b      	lsls	r3, r3, #1
 801025a:	4413      	add	r3, r2
 801025c:	009b      	lsls	r3, r3, #2
 801025e:	440b      	add	r3, r1
 8010260:	3301      	adds	r3, #1
 8010262:	781b      	ldrb	r3, [r3, #0]
 8010264:	4619      	mov	r1, r3
 8010266:	481e      	ldr	r0, [pc, #120]	; (80102e0 <BSP_QSPI_Init+0x14c>)
 8010268:	f7ff f811 	bl	800f28e <MT25TL01G_AutoPollingMemReady>
 801026c:	4603      	mov	r3, r0
 801026e:	2b00      	cmp	r3, #0
 8010270:	d003      	beq.n	801027a <BSP_QSPI_Init+0xe6>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8010272:	f06f 0304 	mvn.w	r3, #4
 8010276:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010278:	e02b      	b.n	80102d2 <BSP_QSPI_Init+0x13e>
        }
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 801027a:	4918      	ldr	r1, [pc, #96]	; (80102dc <BSP_QSPI_Init+0x148>)
 801027c:	687a      	ldr	r2, [r7, #4]
 801027e:	4613      	mov	r3, r2
 8010280:	005b      	lsls	r3, r3, #1
 8010282:	4413      	add	r3, r2
 8010284:	009b      	lsls	r3, r3, #2
 8010286:	440b      	add	r3, r1
 8010288:	3301      	adds	r3, #1
 801028a:	781b      	ldrb	r3, [r3, #0]
 801028c:	4619      	mov	r1, r3
 801028e:	4814      	ldr	r0, [pc, #80]	; (80102e0 <BSP_QSPI_Init+0x14c>)
 8010290:	f7fe ffb5 	bl	800f1fe <MT25TL01G_Enter4BytesAddressMode>
 8010294:	4603      	mov	r3, r0
 8010296:	2b00      	cmp	r3, #0
 8010298:	d003      	beq.n	80102a2 <BSP_QSPI_Init+0x10e>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 801029a:	f06f 0304 	mvn.w	r3, #4
 801029e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80102a0:	e017      	b.n	80102d2 <BSP_QSPI_Init+0x13e>
        }/* Configuration of the dummy cycles on QSPI memory side */
        else if(QSPI_DummyCyclesCfg(Instance) != BSP_ERROR_NONE)
 80102a2:	6878      	ldr	r0, [r7, #4]
 80102a4:	f000 fae2 	bl	801086c <QSPI_DummyCyclesCfg>
 80102a8:	4603      	mov	r3, r0
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d003      	beq.n	80102b6 <BSP_QSPI_Init+0x122>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 80102ae:	f06f 0304 	mvn.w	r3, #4
 80102b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80102b4:	e00d      	b.n	80102d2 <BSP_QSPI_Init+0x13e>
        }
        else
        {
          /* Configure Flash to desired mode */
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 80102b6:	683b      	ldr	r3, [r7, #0]
 80102b8:	7819      	ldrb	r1, [r3, #0]
 80102ba:	683b      	ldr	r3, [r7, #0]
 80102bc:	785b      	ldrb	r3, [r3, #1]
 80102be:	461a      	mov	r2, r3
 80102c0:	6878      	ldr	r0, [r7, #4]
 80102c2:	f000 f89d 	bl	8010400 <BSP_QSPI_ConfigFlash>
 80102c6:	4603      	mov	r3, r0
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d002      	beq.n	80102d2 <BSP_QSPI_Init+0x13e>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 80102cc:	f06f 0304 	mvn.w	r3, #4
 80102d0:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
  }

  /* Return BSP status */
  return ret;
 80102d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80102d4:	4618      	mov	r0, r3
 80102d6:	3740      	adds	r7, #64	; 0x40
 80102d8:	46bd      	mov	sp, r7
 80102da:	bd80      	pop	{r7, pc}
 80102dc:	2400b950 	.word	0x2400b950
 80102e0:	24000284 	.word	0x24000284
 80102e4:	0802f1ac 	.word	0x0802f1ac

080102e8 <MX_QSPI_Init>:
  * @param  hQspi       QSPI handle
  * @param  Config      QSPI configuration structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
 80102e8:	b580      	push	{r7, lr}
 80102ea:	b082      	sub	sp, #8
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
 80102f0:	6039      	str	r1, [r7, #0]
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	4a13      	ldr	r2, [pc, #76]	; (8010344 <MX_QSPI_Init+0x5c>)
 80102f6:	601a      	str	r2, [r3, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 80102f8:	683b      	ldr	r3, [r7, #0]
 80102fa:	685a      	ldr	r2, [r3, #4]
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	605a      	str	r2, [r3, #4]
  hQspi->Init.FifoThreshold      = 1;
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	2201      	movs	r2, #1
 8010304:	609a      	str	r2, [r3, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 8010306:	683b      	ldr	r3, [r7, #0]
 8010308:	689a      	ldr	r2, [r3, #8]
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	60da      	str	r2, [r3, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 801030e:	683b      	ldr	r3, [r7, #0]
 8010310:	681a      	ldr	r2, [r3, #0]
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	611a      	str	r2, [r3, #16]
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	f44f 7240 	mov.w	r2, #768	; 0x300
 801031c:	615a      	str	r2, [r3, #20]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	2200      	movs	r2, #0
 8010322:	619a      	str	r2, [r3, #24]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	2200      	movs	r2, #0
 8010328:	61da      	str	r2, [r3, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 801032a:	683b      	ldr	r3, [r7, #0]
 801032c:	68da      	ldr	r2, [r3, #12]
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	621a      	str	r2, [r3, #32]

  return HAL_QSPI_Init(hQspi);
 8010332:	6878      	ldr	r0, [r7, #4]
 8010334:	f003 fa92 	bl	801385c <HAL_QSPI_Init>
 8010338:	4603      	mov	r3, r0
}
 801033a:	4618      	mov	r0, r3
 801033c:	3708      	adds	r7, #8
 801033e:	46bd      	mov	sp, r7
 8010340:	bd80      	pop	{r7, pc}
 8010342:	bf00      	nop
 8010344:	52005000 	.word	0x52005000

08010348 <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 8010348:	b580      	push	{r7, lr}
 801034a:	b084      	sub	sp, #16
 801034c:	af00      	add	r7, sp, #0
 801034e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8010350:	2300      	movs	r3, #0
 8010352:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d003      	beq.n	8010362 <BSP_QSPI_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801035a:	f06f 0301 	mvn.w	r3, #1
 801035e:	60fb      	str	r3, [r7, #12]
 8010360:	e045      	b.n	80103ee <BSP_QSPI_EnableMemoryMappedMode+0xa6>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8010362:	4925      	ldr	r1, [pc, #148]	; (80103f8 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 8010364:	687a      	ldr	r2, [r7, #4]
 8010366:	4613      	mov	r3, r2
 8010368:	005b      	lsls	r3, r3, #1
 801036a:	4413      	add	r3, r2
 801036c:	009b      	lsls	r3, r3, #2
 801036e:	440b      	add	r3, r1
 8010370:	3302      	adds	r3, #2
 8010372:	781b      	ldrb	r3, [r3, #0]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d11d      	bne.n	80103b4 <BSP_QSPI_EnableMemoryMappedMode+0x6c>
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8010378:	491f      	ldr	r1, [pc, #124]	; (80103f8 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 801037a:	687a      	ldr	r2, [r7, #4]
 801037c:	4613      	mov	r3, r2
 801037e:	005b      	lsls	r3, r3, #1
 8010380:	4413      	add	r3, r2
 8010382:	009b      	lsls	r3, r3, #2
 8010384:	440b      	add	r3, r1
 8010386:	3301      	adds	r3, #1
 8010388:	781b      	ldrb	r3, [r3, #0]
 801038a:	4619      	mov	r1, r3
 801038c:	481b      	ldr	r0, [pc, #108]	; (80103fc <BSP_QSPI_EnableMemoryMappedMode+0xb4>)
 801038e:	f7ff f8d3 	bl	800f538 <MT25TL01G_EnableMemoryMappedModeSTR>
 8010392:	4603      	mov	r3, r0
 8010394:	2b00      	cmp	r3, #0
 8010396:	d003      	beq.n	80103a0 <BSP_QSPI_EnableMemoryMappedMode+0x58>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8010398:	f06f 0304 	mvn.w	r3, #4
 801039c:	60fb      	str	r3, [r7, #12]
 801039e:	e026      	b.n	80103ee <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
      else /* Update QSPI context if all operations are well done */
      {
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 80103a0:	4915      	ldr	r1, [pc, #84]	; (80103f8 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 80103a2:	687a      	ldr	r2, [r7, #4]
 80103a4:	4613      	mov	r3, r2
 80103a6:	005b      	lsls	r3, r3, #1
 80103a8:	4413      	add	r3, r2
 80103aa:	009b      	lsls	r3, r3, #2
 80103ac:	440b      	add	r3, r1
 80103ae:	2202      	movs	r2, #2
 80103b0:	701a      	strb	r2, [r3, #0]
 80103b2:	e01c      	b.n	80103ee <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
    }
    else
    {
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80103b4:	4910      	ldr	r1, [pc, #64]	; (80103f8 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 80103b6:	687a      	ldr	r2, [r7, #4]
 80103b8:	4613      	mov	r3, r2
 80103ba:	005b      	lsls	r3, r3, #1
 80103bc:	4413      	add	r3, r2
 80103be:	009b      	lsls	r3, r3, #2
 80103c0:	440b      	add	r3, r1
 80103c2:	3301      	adds	r3, #1
 80103c4:	781b      	ldrb	r3, [r3, #0]
 80103c6:	4619      	mov	r1, r3
 80103c8:	480c      	ldr	r0, [pc, #48]	; (80103fc <BSP_QSPI_EnableMemoryMappedMode+0xb4>)
 80103ca:	f7ff f84b 	bl	800f464 <MT25TL01G_EnableMemoryMappedModeDTR>
 80103ce:	4603      	mov	r3, r0
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d003      	beq.n	80103dc <BSP_QSPI_EnableMemoryMappedMode+0x94>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80103d4:	f06f 0304 	mvn.w	r3, #4
 80103d8:	60fb      	str	r3, [r7, #12]
 80103da:	e008      	b.n	80103ee <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
      else /* Update QSPI context if all operations are well done */
      {
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 80103dc:	4906      	ldr	r1, [pc, #24]	; (80103f8 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 80103de:	687a      	ldr	r2, [r7, #4]
 80103e0:	4613      	mov	r3, r2
 80103e2:	005b      	lsls	r3, r3, #1
 80103e4:	4413      	add	r3, r2
 80103e6:	009b      	lsls	r3, r3, #2
 80103e8:	440b      	add	r3, r1
 80103ea:	2202      	movs	r2, #2
 80103ec:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 80103ee:	68fb      	ldr	r3, [r7, #12]
}
 80103f0:	4618      	mov	r0, r3
 80103f2:	3710      	adds	r7, #16
 80103f4:	46bd      	mov	sp, r7
 80103f6:	bd80      	pop	{r7, pc}
 80103f8:	2400b950 	.word	0x2400b950
 80103fc:	24000284 	.word	0x24000284

08010400 <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 8010400:	b580      	push	{r7, lr}
 8010402:	b084      	sub	sp, #16
 8010404:	af00      	add	r7, sp, #0
 8010406:	6078      	str	r0, [r7, #4]
 8010408:	460b      	mov	r3, r1
 801040a:	70fb      	strb	r3, [r7, #3]
 801040c:	4613      	mov	r3, r2
 801040e:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 8010410:	2300      	movs	r3, #0
 8010412:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d003      	beq.n	8010422 <BSP_QSPI_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801041a:	f06f 0301 	mvn.w	r3, #1
 801041e:	60fb      	str	r3, [r7, #12]
 8010420:	e067      	b.n	80104f2 <BSP_QSPI_ConfigFlash+0xf2>
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 8010422:	4936      	ldr	r1, [pc, #216]	; (80104fc <BSP_QSPI_ConfigFlash+0xfc>)
 8010424:	687a      	ldr	r2, [r7, #4]
 8010426:	4613      	mov	r3, r2
 8010428:	005b      	lsls	r3, r3, #1
 801042a:	4413      	add	r3, r2
 801042c:	009b      	lsls	r3, r3, #2
 801042e:	440b      	add	r3, r1
 8010430:	781b      	ldrb	r3, [r3, #0]
 8010432:	2b02      	cmp	r3, #2
 8010434:	d103      	bne.n	801043e <BSP_QSPI_ConfigFlash+0x3e>
    {
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 8010436:	f06f 0319 	mvn.w	r3, #25
 801043a:	60fb      	str	r3, [r7, #12]
 801043c:	e059      	b.n	80104f2 <BSP_QSPI_ConfigFlash+0xf2>
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 801043e:	78bb      	ldrb	r3, [r7, #2]
 8010440:	2b00      	cmp	r3, #0
 8010442:	d101      	bne.n	8010448 <BSP_QSPI_ConfigFlash+0x48>
 8010444:	2310      	movs	r3, #16
 8010446:	e000      	b.n	801044a <BSP_QSPI_ConfigFlash+0x4a>
 8010448:	2300      	movs	r3, #0
 801044a:	4a2d      	ldr	r2, [pc, #180]	; (8010500 <BSP_QSPI_ConfigFlash+0x100>)
 801044c:	60d3      	str	r3, [r2, #12]

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 801044e:	482c      	ldr	r0, [pc, #176]	; (8010500 <BSP_QSPI_ConfigFlash+0x100>)
 8010450:	f003 fa04 	bl	801385c <HAL_QSPI_Init>
 8010454:	4603      	mov	r3, r0
 8010456:	2b00      	cmp	r3, #0
 8010458:	d003      	beq.n	8010462 <BSP_QSPI_ConfigFlash+0x62>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 801045a:	f06f 0303 	mvn.w	r3, #3
 801045e:	60fb      	str	r3, [r7, #12]
 8010460:	e047      	b.n	80104f2 <BSP_QSPI_ConfigFlash+0xf2>
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 8010462:	4926      	ldr	r1, [pc, #152]	; (80104fc <BSP_QSPI_ConfigFlash+0xfc>)
 8010464:	687a      	ldr	r2, [r7, #4]
 8010466:	4613      	mov	r3, r2
 8010468:	005b      	lsls	r3, r3, #1
 801046a:	4413      	add	r3, r2
 801046c:	009b      	lsls	r3, r3, #2
 801046e:	440b      	add	r3, r1
 8010470:	3301      	adds	r3, #1
 8010472:	781b      	ldrb	r3, [r3, #0]
 8010474:	2b03      	cmp	r3, #3
 8010476:	d10c      	bne.n	8010492 <BSP_QSPI_ConfigFlash+0x92>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 8010478:	78fb      	ldrb	r3, [r7, #3]
 801047a:	2b03      	cmp	r3, #3
 801047c:	d016      	beq.n	80104ac <BSP_QSPI_ConfigFlash+0xac>
          {
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 801047e:	4820      	ldr	r0, [pc, #128]	; (8010500 <BSP_QSPI_ConfigFlash+0x100>)
 8010480:	f7fe ffc6 	bl	800f410 <MT25TL01G_ExitQPIMode>
 8010484:	4603      	mov	r3, r0
 8010486:	2b00      	cmp	r3, #0
 8010488:	d010      	beq.n	80104ac <BSP_QSPI_ConfigFlash+0xac>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 801048a:	f06f 0304 	mvn.w	r3, #4
 801048e:	60fb      	str	r3, [r7, #12]
            }
          }
          break;
 8010490:	e00c      	b.n	80104ac <BSP_QSPI_ConfigFlash+0xac>

        case BSP_QSPI_SPI_MODE :               /* 1-1-1 commands, Power on H/W default setting */
        case BSP_QSPI_SPI_2IO_MODE :           /* 1-2-2 read commands */
        case BSP_QSPI_SPI_4IO_MODE :           /* 1-4-4 read commands */
        default :
          if(Mode == MT25TL01G_QPI_MODE)
 8010492:	78fb      	ldrb	r3, [r7, #3]
 8010494:	2b03      	cmp	r3, #3
 8010496:	d10b      	bne.n	80104b0 <BSP_QSPI_ConfigFlash+0xb0>
          {
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 8010498:	4819      	ldr	r0, [pc, #100]	; (8010500 <BSP_QSPI_ConfigFlash+0x100>)
 801049a:	f7fe ff8f 	bl	800f3bc <MT25TL01G_EnterQPIMode>
 801049e:	4603      	mov	r3, r0
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d005      	beq.n	80104b0 <BSP_QSPI_ConfigFlash+0xb0>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 80104a4:	f06f 0304 	mvn.w	r3, #4
 80104a8:	60fb      	str	r3, [r7, #12]
            }
          }
          break;
 80104aa:	e001      	b.n	80104b0 <BSP_QSPI_ConfigFlash+0xb0>
          break;
 80104ac:	bf00      	nop
 80104ae:	e000      	b.n	80104b2 <BSP_QSPI_ConfigFlash+0xb2>
          break;
 80104b0:	bf00      	nop
        }

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d11c      	bne.n	80104f2 <BSP_QSPI_ConfigFlash+0xf2>
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 80104b8:	4910      	ldr	r1, [pc, #64]	; (80104fc <BSP_QSPI_ConfigFlash+0xfc>)
 80104ba:	687a      	ldr	r2, [r7, #4]
 80104bc:	4613      	mov	r3, r2
 80104be:	005b      	lsls	r3, r3, #1
 80104c0:	4413      	add	r3, r2
 80104c2:	009b      	lsls	r3, r3, #2
 80104c4:	440b      	add	r3, r1
 80104c6:	2201      	movs	r2, #1
 80104c8:	701a      	strb	r2, [r3, #0]
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 80104ca:	490c      	ldr	r1, [pc, #48]	; (80104fc <BSP_QSPI_ConfigFlash+0xfc>)
 80104cc:	687a      	ldr	r2, [r7, #4]
 80104ce:	4613      	mov	r3, r2
 80104d0:	005b      	lsls	r3, r3, #1
 80104d2:	4413      	add	r3, r2
 80104d4:	009b      	lsls	r3, r3, #2
 80104d6:	440b      	add	r3, r1
 80104d8:	3301      	adds	r3, #1
 80104da:	78fa      	ldrb	r2, [r7, #3]
 80104dc:	701a      	strb	r2, [r3, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 80104de:	4907      	ldr	r1, [pc, #28]	; (80104fc <BSP_QSPI_ConfigFlash+0xfc>)
 80104e0:	687a      	ldr	r2, [r7, #4]
 80104e2:	4613      	mov	r3, r2
 80104e4:	005b      	lsls	r3, r3, #1
 80104e6:	4413      	add	r3, r2
 80104e8:	009b      	lsls	r3, r3, #2
 80104ea:	440b      	add	r3, r1
 80104ec:	3302      	adds	r3, #2
 80104ee:	78ba      	ldrb	r2, [r7, #2]
 80104f0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 80104f2:	68fb      	ldr	r3, [r7, #12]
}
 80104f4:	4618      	mov	r0, r3
 80104f6:	3710      	adds	r7, #16
 80104f8:	46bd      	mov	sp, r7
 80104fa:	bd80      	pop	{r7, pc}
 80104fc:	2400b950 	.word	0x2400b950
 8010500:	24000284 	.word	0x24000284

08010504 <QSPI_MspInit>:
  *           - Peripheral's GPIO Configuration
  *           - NVIC configuration for QSPI interrupt
  * @retval None
  */
static void QSPI_MspInit(QSPI_HandleTypeDef *hQspi)
{
 8010504:	b580      	push	{r7, lr}
 8010506:	b094      	sub	sp, #80	; 0x50
 8010508:	af00      	add	r7, sp, #0
 801050a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hQspi);

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 801050c:	4b9c      	ldr	r3, [pc, #624]	; (8010780 <QSPI_MspInit+0x27c>)
 801050e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8010512:	4a9b      	ldr	r2, [pc, #620]	; (8010780 <QSPI_MspInit+0x27c>)
 8010514:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010518:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 801051c:	4b98      	ldr	r3, [pc, #608]	; (8010780 <QSPI_MspInit+0x27c>)
 801051e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8010522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010526:	63bb      	str	r3, [r7, #56]	; 0x38
 8010528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  /* Reset the QuadSPI memory interface */
  QSPI_FORCE_RESET();
 801052a:	4b95      	ldr	r3, [pc, #596]	; (8010780 <QSPI_MspInit+0x27c>)
 801052c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801052e:	4a94      	ldr	r2, [pc, #592]	; (8010780 <QSPI_MspInit+0x27c>)
 8010530:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010534:	67d3      	str	r3, [r2, #124]	; 0x7c
  QSPI_RELEASE_RESET();
 8010536:	4b92      	ldr	r3, [pc, #584]	; (8010780 <QSPI_MspInit+0x27c>)
 8010538:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801053a:	4a91      	ldr	r2, [pc, #580]	; (8010780 <QSPI_MspInit+0x27c>)
 801053c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010540:	67d3      	str	r3, [r2, #124]	; 0x7c
  /* Enable GPIO clocks */
  QSPI_CLK_GPIO_CLK_ENABLE();
 8010542:	4b8f      	ldr	r3, [pc, #572]	; (8010780 <QSPI_MspInit+0x27c>)
 8010544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010548:	4a8d      	ldr	r2, [pc, #564]	; (8010780 <QSPI_MspInit+0x27c>)
 801054a:	f043 0320 	orr.w	r3, r3, #32
 801054e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010552:	4b8b      	ldr	r3, [pc, #556]	; (8010780 <QSPI_MspInit+0x27c>)
 8010554:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010558:	f003 0320 	and.w	r3, r3, #32
 801055c:	637b      	str	r3, [r7, #52]	; 0x34
 801055e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 8010560:	4b87      	ldr	r3, [pc, #540]	; (8010780 <QSPI_MspInit+0x27c>)
 8010562:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010566:	4a86      	ldr	r2, [pc, #536]	; (8010780 <QSPI_MspInit+0x27c>)
 8010568:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801056c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010570:	4b83      	ldr	r3, [pc, #524]	; (8010780 <QSPI_MspInit+0x27c>)
 8010572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801057a:	633b      	str	r3, [r7, #48]	; 0x30
 801057c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 801057e:	4b80      	ldr	r3, [pc, #512]	; (8010780 <QSPI_MspInit+0x27c>)
 8010580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010584:	4a7e      	ldr	r2, [pc, #504]	; (8010780 <QSPI_MspInit+0x27c>)
 8010586:	f043 0308 	orr.w	r3, r3, #8
 801058a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801058e:	4b7c      	ldr	r3, [pc, #496]	; (8010780 <QSPI_MspInit+0x27c>)
 8010590:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010594:	f003 0308 	and.w	r3, r3, #8
 8010598:	62fb      	str	r3, [r7, #44]	; 0x2c
 801059a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 801059c:	4b78      	ldr	r3, [pc, #480]	; (8010780 <QSPI_MspInit+0x27c>)
 801059e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80105a2:	4a77      	ldr	r2, [pc, #476]	; (8010780 <QSPI_MspInit+0x27c>)
 80105a4:	f043 0320 	orr.w	r3, r3, #32
 80105a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80105ac:	4b74      	ldr	r3, [pc, #464]	; (8010780 <QSPI_MspInit+0x27c>)
 80105ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80105b2:	f003 0320 	and.w	r3, r3, #32
 80105b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80105b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 80105ba:	4b71      	ldr	r3, [pc, #452]	; (8010780 <QSPI_MspInit+0x27c>)
 80105bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80105c0:	4a6f      	ldr	r2, [pc, #444]	; (8010780 <QSPI_MspInit+0x27c>)
 80105c2:	f043 0320 	orr.w	r3, r3, #32
 80105c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80105ca:	4b6d      	ldr	r3, [pc, #436]	; (8010780 <QSPI_MspInit+0x27c>)
 80105cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80105d0:	f003 0320 	and.w	r3, r3, #32
 80105d4:	627b      	str	r3, [r7, #36]	; 0x24
 80105d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 80105d8:	4b69      	ldr	r3, [pc, #420]	; (8010780 <QSPI_MspInit+0x27c>)
 80105da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80105de:	4a68      	ldr	r2, [pc, #416]	; (8010780 <QSPI_MspInit+0x27c>)
 80105e0:	f043 0320 	orr.w	r3, r3, #32
 80105e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80105e8:	4b65      	ldr	r3, [pc, #404]	; (8010780 <QSPI_MspInit+0x27c>)
 80105ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80105ee:	f003 0320 	and.w	r3, r3, #32
 80105f2:	623b      	str	r3, [r7, #32]
 80105f4:	6a3b      	ldr	r3, [r7, #32]

  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 80105f6:	4b62      	ldr	r3, [pc, #392]	; (8010780 <QSPI_MspInit+0x27c>)
 80105f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80105fc:	4a60      	ldr	r2, [pc, #384]	; (8010780 <QSPI_MspInit+0x27c>)
 80105fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010602:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010606:	4b5e      	ldr	r3, [pc, #376]	; (8010780 <QSPI_MspInit+0x27c>)
 8010608:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801060c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010610:	61fb      	str	r3, [r7, #28]
 8010612:	69fb      	ldr	r3, [r7, #28]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 8010614:	4b5a      	ldr	r3, [pc, #360]	; (8010780 <QSPI_MspInit+0x27c>)
 8010616:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801061a:	4a59      	ldr	r2, [pc, #356]	; (8010780 <QSPI_MspInit+0x27c>)
 801061c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010620:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010624:	4b56      	ldr	r3, [pc, #344]	; (8010780 <QSPI_MspInit+0x27c>)
 8010626:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801062a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801062e:	61bb      	str	r3, [r7, #24]
 8010630:	69bb      	ldr	r3, [r7, #24]
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 8010632:	4b53      	ldr	r3, [pc, #332]	; (8010780 <QSPI_MspInit+0x27c>)
 8010634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010638:	4a51      	ldr	r2, [pc, #324]	; (8010780 <QSPI_MspInit+0x27c>)
 801063a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801063e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010642:	4b4f      	ldr	r3, [pc, #316]	; (8010780 <QSPI_MspInit+0x27c>)
 8010644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801064c:	617b      	str	r3, [r7, #20]
 801064e:	697b      	ldr	r3, [r7, #20]
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 8010650:	4b4b      	ldr	r3, [pc, #300]	; (8010780 <QSPI_MspInit+0x27c>)
 8010652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010656:	4a4a      	ldr	r2, [pc, #296]	; (8010780 <QSPI_MspInit+0x27c>)
 8010658:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801065c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010660:	4b47      	ldr	r3, [pc, #284]	; (8010780 <QSPI_MspInit+0x27c>)
 8010662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801066a:	613b      	str	r3, [r7, #16]
 801066c:	693b      	ldr	r3, [r7, #16]
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 801066e:	4b44      	ldr	r3, [pc, #272]	; (8010780 <QSPI_MspInit+0x27c>)
 8010670:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010674:	4a42      	ldr	r2, [pc, #264]	; (8010780 <QSPI_MspInit+0x27c>)
 8010676:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801067a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801067e:	4b40      	ldr	r3, [pc, #256]	; (8010780 <QSPI_MspInit+0x27c>)
 8010680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010688:	60fb      	str	r3, [r7, #12]
 801068a:	68fb      	ldr	r3, [r7, #12]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 801068c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010690:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8010692:	2302      	movs	r3, #2
 8010694:	643b      	str	r3, [r7, #64]	; 0x40
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8010696:	2303      	movs	r3, #3
 8010698:	64bb      	str	r3, [r7, #72]	; 0x48
  gpio_init_structure.Pull      = GPIO_NOPULL;
 801069a:	2300      	movs	r3, #0
 801069c:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 801069e:	2309      	movs	r3, #9
 80106a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 80106a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80106a6:	4619      	mov	r1, r3
 80106a8:	4836      	ldr	r0, [pc, #216]	; (8010784 <QSPI_MspInit+0x280>)
 80106aa:	f001 fa0d 	bl	8011ac8 <HAL_GPIO_Init>

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 80106ae:	2340      	movs	r3, #64	; 0x40
 80106b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80106b2:	2301      	movs	r3, #1
 80106b4:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 80106b6:	230a      	movs	r3, #10
 80106b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 80106ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80106be:	4619      	mov	r1, r3
 80106c0:	4831      	ldr	r0, [pc, #196]	; (8010788 <QSPI_MspInit+0x284>)
 80106c2:	f001 fa01 	bl	8011ac8 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 80106c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80106ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80106cc:	2300      	movs	r3, #0
 80106ce:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80106d0:	2309      	movs	r3, #9
 80106d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 80106d4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80106d8:	4619      	mov	r1, r3
 80106da:	482c      	ldr	r0, [pc, #176]	; (801078c <QSPI_MspInit+0x288>)
 80106dc:	f001 f9f4 	bl	8011ac8 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 80106e0:	2304      	movs	r3, #4
 80106e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80106e4:	2309      	movs	r3, #9
 80106e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 80106e8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80106ec:	4619      	mov	r1, r3
 80106ee:	4828      	ldr	r0, [pc, #160]	; (8010790 <QSPI_MspInit+0x28c>)
 80106f0:	f001 f9ea 	bl	8011ac8 <HAL_GPIO_Init>

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 80106f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80106f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 80106fa:	230a      	movs	r3, #10
 80106fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 80106fe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010702:	4619      	mov	r1, r3
 8010704:	481f      	ldr	r0, [pc, #124]	; (8010784 <QSPI_MspInit+0x280>)
 8010706:	f001 f9df 	bl	8011ac8 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 801070a:	2308      	movs	r3, #8
 801070c:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 801070e:	2309      	movs	r3, #9
 8010710:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8010712:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010716:	4619      	mov	r1, r3
 8010718:	481d      	ldr	r0, [pc, #116]	; (8010790 <QSPI_MspInit+0x28c>)
 801071a:	f001 f9d5 	bl	8011ac8 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 801071e:	2380      	movs	r3, #128	; 0x80
 8010720:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8010722:	2309      	movs	r3, #9
 8010724:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 8010726:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801072a:	4619      	mov	r1, r3
 801072c:	4815      	ldr	r0, [pc, #84]	; (8010784 <QSPI_MspInit+0x280>)
 801072e:	f001 f9cb 	bl	8011ac8 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 8010732:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010736:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8010738:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801073c:	4619      	mov	r1, r3
 801073e:	4812      	ldr	r0, [pc, #72]	; (8010788 <QSPI_MspInit+0x284>)
 8010740:	f001 f9c2 	bl	8011ac8 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 8010744:	2340      	movs	r3, #64	; 0x40
 8010746:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 8010748:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801074c:	4619      	mov	r1, r3
 801074e:	480d      	ldr	r0, [pc, #52]	; (8010784 <QSPI_MspInit+0x280>)
 8010750:	f001 f9ba 	bl	8011ac8 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 8010754:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010758:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 801075a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801075e:	4619      	mov	r1, r3
 8010760:	4809      	ldr	r0, [pc, #36]	; (8010788 <QSPI_MspInit+0x284>)
 8010762:	f001 f9b1 	bl	8011ac8 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8010766:	2200      	movs	r2, #0
 8010768:	210f      	movs	r1, #15
 801076a:	205c      	movs	r0, #92	; 0x5c
 801076c:	f000 fe9c 	bl	80114a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8010770:	205c      	movs	r0, #92	; 0x5c
 8010772:	f000 feb3 	bl	80114dc <HAL_NVIC_EnableIRQ>
}
 8010776:	bf00      	nop
 8010778:	3750      	adds	r7, #80	; 0x50
 801077a:	46bd      	mov	sp, r7
 801077c:	bd80      	pop	{r7, pc}
 801077e:	bf00      	nop
 8010780:	58024400 	.word	0x58024400
 8010784:	58021400 	.word	0x58021400
 8010788:	58021800 	.word	0x58021800
 801078c:	58020c00 	.word	0x58020c00
 8010790:	58021c00 	.word	0x58021c00

08010794 <QSPI_ResetMemory>:
  *         Flash accept 1-1-1, 1-1-2, 1-2-2 commands after reset.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
 8010794:	b580      	push	{r7, lr}
 8010796:	b084      	sub	sp, #16
 8010798:	af00      	add	r7, sp, #0
 801079a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 801079c:	2300      	movs	r3, #0
 801079e:	60fb      	str	r3, [r7, #12]

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 80107a0:	2103      	movs	r1, #3
 80107a2:	4830      	ldr	r0, [pc, #192]	; (8010864 <QSPI_ResetMemory+0xd0>)
 80107a4:	f7fe ff30 	bl	800f608 <MT25TL01G_ResetEnable>
 80107a8:	4603      	mov	r3, r0
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d003      	beq.n	80107b6 <QSPI_ResetMemory+0x22>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
 80107ae:	f06f 0304 	mvn.w	r3, #4
 80107b2:	60fb      	str	r3, [r7, #12]
 80107b4:	e051      	b.n	801085a <QSPI_ResetMemory+0xc6>
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 80107b6:	2103      	movs	r1, #3
 80107b8:	482a      	ldr	r0, [pc, #168]	; (8010864 <QSPI_ResetMemory+0xd0>)
 80107ba:	f7fe ff57 	bl	800f66c <MT25TL01G_ResetMemory>
 80107be:	4603      	mov	r3, r0
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d003      	beq.n	80107cc <QSPI_ResetMemory+0x38>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80107c4:	f06f 0304 	mvn.w	r3, #4
 80107c8:	60fb      	str	r3, [r7, #12]
 80107ca:	e046      	b.n	801085a <QSPI_ResetMemory+0xc6>
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80107cc:	4926      	ldr	r1, [pc, #152]	; (8010868 <QSPI_ResetMemory+0xd4>)
 80107ce:	687a      	ldr	r2, [r7, #4]
 80107d0:	4613      	mov	r3, r2
 80107d2:	005b      	lsls	r3, r3, #1
 80107d4:	4413      	add	r3, r2
 80107d6:	009b      	lsls	r3, r3, #2
 80107d8:	440b      	add	r3, r1
 80107da:	3301      	adds	r3, #1
 80107dc:	781b      	ldrb	r3, [r3, #0]
 80107de:	4619      	mov	r1, r3
 80107e0:	4820      	ldr	r0, [pc, #128]	; (8010864 <QSPI_ResetMemory+0xd0>)
 80107e2:	f7fe fd54 	bl	800f28e <MT25TL01G_AutoPollingMemReady>
 80107e6:	4603      	mov	r3, r0
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d003      	beq.n	80107f4 <QSPI_ResetMemory+0x60>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80107ec:	f06f 0304 	mvn.w	r3, #4
 80107f0:	60fb      	str	r3, [r7, #12]
 80107f2:	e032      	b.n	801085a <QSPI_ResetMemory+0xc6>
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 80107f4:	2100      	movs	r1, #0
 80107f6:	481b      	ldr	r0, [pc, #108]	; (8010864 <QSPI_ResetMemory+0xd0>)
 80107f8:	f7fe ff06 	bl	800f608 <MT25TL01G_ResetEnable>
 80107fc:	4603      	mov	r3, r0
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d003      	beq.n	801080a <QSPI_ResetMemory+0x76>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8010802:	f06f 0304 	mvn.w	r3, #4
 8010806:	60fb      	str	r3, [r7, #12]
 8010808:	e027      	b.n	801085a <QSPI_ResetMemory+0xc6>
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 801080a:	2100      	movs	r1, #0
 801080c:	4815      	ldr	r0, [pc, #84]	; (8010864 <QSPI_ResetMemory+0xd0>)
 801080e:	f7fe ff2d 	bl	800f66c <MT25TL01G_ResetMemory>
 8010812:	4603      	mov	r3, r0
 8010814:	2b00      	cmp	r3, #0
 8010816:	d003      	beq.n	8010820 <QSPI_ResetMemory+0x8c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8010818:	f06f 0304 	mvn.w	r3, #4
 801081c:	60fb      	str	r3, [r7, #12]
 801081e:	e01c      	b.n	801085a <QSPI_ResetMemory+0xc6>
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8010820:	4911      	ldr	r1, [pc, #68]	; (8010868 <QSPI_ResetMemory+0xd4>)
 8010822:	687a      	ldr	r2, [r7, #4]
 8010824:	4613      	mov	r3, r2
 8010826:	005b      	lsls	r3, r3, #1
 8010828:	4413      	add	r3, r2
 801082a:	009b      	lsls	r3, r3, #2
 801082c:	440b      	add	r3, r1
 801082e:	2201      	movs	r2, #1
 8010830:	701a      	strb	r2, [r3, #0]
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
 8010832:	490d      	ldr	r1, [pc, #52]	; (8010868 <QSPI_ResetMemory+0xd4>)
 8010834:	687a      	ldr	r2, [r7, #4]
 8010836:	4613      	mov	r3, r2
 8010838:	005b      	lsls	r3, r3, #1
 801083a:	4413      	add	r3, r2
 801083c:	009b      	lsls	r3, r3, #2
 801083e:	440b      	add	r3, r1
 8010840:	3301      	adds	r3, #1
 8010842:	2200      	movs	r2, #0
 8010844:	701a      	strb	r2, [r3, #0]
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 8010846:	4908      	ldr	r1, [pc, #32]	; (8010868 <QSPI_ResetMemory+0xd4>)
 8010848:	687a      	ldr	r2, [r7, #4]
 801084a:	4613      	mov	r3, r2
 801084c:	005b      	lsls	r3, r3, #1
 801084e:	4413      	add	r3, r2
 8010850:	009b      	lsls	r3, r3, #2
 8010852:	440b      	add	r3, r1
 8010854:	3302      	adds	r3, #2
 8010856:	2200      	movs	r2, #0
 8010858:	701a      	strb	r2, [r3, #0]

  }

  /* Return BSP status */
  return ret;
 801085a:	68fb      	ldr	r3, [r7, #12]
}
 801085c:	4618      	mov	r0, r3
 801085e:	3710      	adds	r7, #16
 8010860:	46bd      	mov	sp, r7
 8010862:	bd80      	pop	{r7, pc}
 8010864:	24000284 	.word	0x24000284
 8010868:	2400b950 	.word	0x2400b950

0801086c <QSPI_DummyCyclesCfg>:
  *         Dummy cycle bit locate in Configuration Register[7:6]
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
static int32_t QSPI_DummyCyclesCfg(uint32_t Instance)
{
 801086c:	b580      	push	{r7, lr}
 801086e:	b092      	sub	sp, #72	; 0x48
 8010870:	af00      	add	r7, sp, #0
 8010872:	6078      	str	r0, [r7, #4]
    int32_t ret= BSP_ERROR_NONE;
 8010874:	2300      	movs	r3, #0
 8010876:	647b      	str	r3, [r7, #68]	; 0x44
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;
 8010878:	2300      	movs	r3, #0
 801087a:	817b      	strh	r3, [r7, #10]

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 801087c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010880:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 8010882:	2385      	movs	r3, #133	; 0x85
 8010884:	60fb      	str	r3, [r7, #12]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8010886:	2300      	movs	r3, #0
 8010888:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 801088a:	2300      	movs	r3, #0
 801088c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DataMode          = QSPI_DATA_4_LINES;
 801088e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8010892:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DummyCycles       = 0;
 8010894:	2300      	movs	r3, #0
 8010896:	623b      	str	r3, [r7, #32]
  s_command.NbData            = 2;
 8010898:	2302      	movs	r3, #2
 801089a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 801089c:	2300      	movs	r3, #0
 801089e:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80108a0:	2300      	movs	r3, #0
 80108a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80108a4:	2300      	movs	r3, #0
 80108a6:	643b      	str	r3, [r7, #64]	; 0x40

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80108a8:	f107 030c 	add.w	r3, r7, #12
 80108ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80108b0:	4619      	mov	r1, r3
 80108b2:	482b      	ldr	r0, [pc, #172]	; (8010960 <QSPI_DummyCyclesCfg+0xf4>)
 80108b4:	f003 fa00 	bl	8013cb8 <HAL_QSPI_Command>
 80108b8:	4603      	mov	r3, r0
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d002      	beq.n	80108c4 <QSPI_DummyCyclesCfg+0x58>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 80108be:	f06f 0304 	mvn.w	r3, #4
 80108c2:	e048      	b.n	8010956 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80108c4:	f107 030a 	add.w	r3, r7, #10
 80108c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80108cc:	4619      	mov	r1, r3
 80108ce:	4824      	ldr	r0, [pc, #144]	; (8010960 <QSPI_DummyCyclesCfg+0xf4>)
 80108d0:	f003 fae2 	bl	8013e98 <HAL_QSPI_Receive>
 80108d4:	4603      	mov	r3, r0
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d002      	beq.n	80108e0 <QSPI_DummyCyclesCfg+0x74>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 80108da:	f06f 0304 	mvn.w	r3, #4
 80108de:	e03a      	b.n	8010956 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80108e0:	4920      	ldr	r1, [pc, #128]	; (8010964 <QSPI_DummyCyclesCfg+0xf8>)
 80108e2:	687a      	ldr	r2, [r7, #4]
 80108e4:	4613      	mov	r3, r2
 80108e6:	005b      	lsls	r3, r3, #1
 80108e8:	4413      	add	r3, r2
 80108ea:	009b      	lsls	r3, r3, #2
 80108ec:	440b      	add	r3, r1
 80108ee:	3301      	adds	r3, #1
 80108f0:	781b      	ldrb	r3, [r3, #0]
 80108f2:	4619      	mov	r1, r3
 80108f4:	481a      	ldr	r0, [pc, #104]	; (8010960 <QSPI_DummyCyclesCfg+0xf4>)
 80108f6:	f7fe fd06 	bl	800f306 <MT25TL01G_WriteEnable>
 80108fa:	4603      	mov	r3, r0
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d002      	beq.n	8010906 <QSPI_DummyCyclesCfg+0x9a>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 8010900:	f06f 0304 	mvn.w	r3, #4
 8010904:	e027      	b.n	8010956 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 8010906:	2381      	movs	r3, #129	; 0x81
 8010908:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 801090a:	897a      	ldrh	r2, [r7, #10]
 801090c:	f640 730f 	movw	r3, #3855	; 0xf0f
 8010910:	4013      	ands	r3, r2
 8010912:	b29a      	uxth	r2, r3
 8010914:	4b14      	ldr	r3, [pc, #80]	; (8010968 <QSPI_DummyCyclesCfg+0xfc>)
 8010916:	4313      	orrs	r3, r2
 8010918:	b29b      	uxth	r3, r3
 801091a:	817b      	strh	r3, [r7, #10]
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 801091c:	f107 030c 	add.w	r3, r7, #12
 8010920:	f241 3288 	movw	r2, #5000	; 0x1388
 8010924:	4619      	mov	r1, r3
 8010926:	480e      	ldr	r0, [pc, #56]	; (8010960 <QSPI_DummyCyclesCfg+0xf4>)
 8010928:	f003 f9c6 	bl	8013cb8 <HAL_QSPI_Command>
 801092c:	4603      	mov	r3, r0
 801092e:	2b00      	cmp	r3, #0
 8010930:	d002      	beq.n	8010938 <QSPI_DummyCyclesCfg+0xcc>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 8010932:	f06f 0304 	mvn.w	r3, #4
 8010936:	e00e      	b.n	8010956 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8010938:	f107 030a 	add.w	r3, r7, #10
 801093c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010940:	4619      	mov	r1, r3
 8010942:	4807      	ldr	r0, [pc, #28]	; (8010960 <QSPI_DummyCyclesCfg+0xf4>)
 8010944:	f003 fa16 	bl	8013d74 <HAL_QSPI_Transmit>
 8010948:	4603      	mov	r3, r0
 801094a:	2b00      	cmp	r3, #0
 801094c:	d002      	beq.n	8010954 <QSPI_DummyCyclesCfg+0xe8>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 801094e:	f06f 0304 	mvn.w	r3, #4
 8010952:	e000      	b.n	8010956 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Return BSP status */
  return ret;
 8010954:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8010956:	4618      	mov	r0, r3
 8010958:	3748      	adds	r7, #72	; 0x48
 801095a:	46bd      	mov	sp, r7
 801095c:	bd80      	pop	{r7, pc}
 801095e:	bf00      	nop
 8010960:	24000284 	.word	0x24000284
 8010964:	2400b950 	.word	0x2400b950
 8010968:	ffff8080 	.word	0xffff8080

0801096c <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
 801096c:	b580      	push	{r7, lr}
 801096e:	b084      	sub	sp, #16
 8010970:	af00      	add	r7, sp, #0
 8010972:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8010974:	2300      	movs	r3, #0
 8010976:	60fb      	str	r3, [r7, #12]
  static MT48LC4M32B2_Context_t pRegMode;
  if(Instance >=SDRAM_INSTANCES_NBR)
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	2b00      	cmp	r3, #0
 801097c:	d003      	beq.n	8010986 <BSP_SDRAM_Init+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 801097e:	f06f 0301 	mvn.w	r3, #1
 8010982:	60fb      	str	r3, [r7, #12]
 8010984:	e044      	b.n	8010a10 <BSP_SDRAM_Init+0xa4>
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	2234      	movs	r2, #52	; 0x34
 801098a:	fb02 f303 	mul.w	r3, r2, r3
 801098e:	4a23      	ldr	r2, [pc, #140]	; (8010a1c <BSP_SDRAM_Init+0xb0>)
 8010990:	4413      	add	r3, r2
 8010992:	4618      	mov	r0, r3
 8010994:	f000 f8b8 	bl	8010b08 <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	2234      	movs	r2, #52	; 0x34
 801099c:	fb02 f303 	mul.w	r3, r2, r3
 80109a0:	4a1e      	ldr	r2, [pc, #120]	; (8010a1c <BSP_SDRAM_Init+0xb0>)
 80109a2:	4413      	add	r3, r2
 80109a4:	2210      	movs	r2, #16
 80109a6:	2104      	movs	r1, #4
 80109a8:	4618      	mov	r0, r3
 80109aa:	f000 f861 	bl	8010a70 <MX_SDRAM_BANK2_Init>
 80109ae:	4603      	mov	r3, r0
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d003      	beq.n	80109bc <BSP_SDRAM_Init+0x50>
    {
      ret = BSP_ERROR_NO_INIT;
 80109b4:	f04f 33ff 	mov.w	r3, #4294967295
 80109b8:	60fb      	str	r3, [r7, #12]
 80109ba:	e029      	b.n	8010a10 <BSP_SDRAM_Init+0xa4>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 80109bc:	4b18      	ldr	r3, [pc, #96]	; (8010a20 <BSP_SDRAM_Init+0xb4>)
 80109be:	2208      	movs	r2, #8
 80109c0:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
 80109c2:	4b17      	ldr	r3, [pc, #92]	; (8010a20 <BSP_SDRAM_Init+0xb4>)
 80109c4:	2203      	movs	r2, #3
 80109c6:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 80109c8:	4b15      	ldr	r3, [pc, #84]	; (8010a20 <BSP_SDRAM_Init+0xb4>)
 80109ca:	f240 6203 	movw	r2, #1539	; 0x603
 80109ce:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
 80109d0:	4b13      	ldr	r3, [pc, #76]	; (8010a20 <BSP_SDRAM_Init+0xb4>)
 80109d2:	2200      	movs	r2, #0
 80109d4:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
 80109d6:	4b12      	ldr	r3, [pc, #72]	; (8010a20 <BSP_SDRAM_Init+0xb4>)
 80109d8:	2200      	movs	r2, #0
 80109da:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
 80109dc:	4b10      	ldr	r3, [pc, #64]	; (8010a20 <BSP_SDRAM_Init+0xb4>)
 80109de:	2230      	movs	r2, #48	; 0x30
 80109e0:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
 80109e2:	4b0f      	ldr	r3, [pc, #60]	; (8010a20 <BSP_SDRAM_Init+0xb4>)
 80109e4:	2200      	movs	r2, #0
 80109e6:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
 80109e8:	4b0d      	ldr	r3, [pc, #52]	; (8010a20 <BSP_SDRAM_Init+0xb4>)
 80109ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80109ee:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	2234      	movs	r2, #52	; 0x34
 80109f4:	fb02 f303 	mul.w	r3, r2, r3
 80109f8:	4a08      	ldr	r2, [pc, #32]	; (8010a1c <BSP_SDRAM_Init+0xb0>)
 80109fa:	4413      	add	r3, r2
 80109fc:	4908      	ldr	r1, [pc, #32]	; (8010a20 <BSP_SDRAM_Init+0xb4>)
 80109fe:	4618      	mov	r0, r3
 8010a00:	f7fe fe66 	bl	800f6d0 <MT48LC4M32B2_Init>
 8010a04:	4603      	mov	r3, r0
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d002      	beq.n	8010a10 <BSP_SDRAM_Init+0xa4>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 8010a0a:	f06f 0304 	mvn.w	r3, #4
 8010a0e:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 8010a10:	68fb      	ldr	r3, [r7, #12]
}
 8010a12:	4618      	mov	r0, r3
 8010a14:	3710      	adds	r7, #16
 8010a16:	46bd      	mov	sp, r7
 8010a18:	bd80      	pop	{r7, pc}
 8010a1a:	bf00      	nop
 8010a1c:	2400b95c 	.word	0x2400b95c
 8010a20:	2400b990 	.word	0x2400b990

08010a24 <BSP_SDRAM_DeInit>:
  * @brief  DeInitializes the SDRAM device.
  * @param  Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
 8010a24:	b580      	push	{r7, lr}
 8010a26:	b084      	sub	sp, #16
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	60fb      	str	r3, [r7, #12]

  if(Instance >= SDRAM_INSTANCES_NBR)
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d003      	beq.n	8010a3e <BSP_SDRAM_DeInit+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 8010a36:	f06f 0301 	mvn.w	r3, #1
 8010a3a:	60fb      	str	r3, [r7, #12]
 8010a3c:	e011      	b.n	8010a62 <BSP_SDRAM_DeInit+0x3e>
  }
  else
  {
    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	2234      	movs	r2, #52	; 0x34
 8010a42:	fb02 f303 	mul.w	r3, r2, r3
 8010a46:	4a09      	ldr	r2, [pc, #36]	; (8010a6c <BSP_SDRAM_DeInit+0x48>)
 8010a48:	4413      	add	r3, r2
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	f005 ff34 	bl	80168b8 <HAL_SDRAM_DeInit>
#if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 0)
    /* SDRAM controller de-initialization */
    SDRAM_MspDeInit(&hsdram[Instance]);
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	2234      	movs	r2, #52	; 0x34
 8010a54:	fb02 f303 	mul.w	r3, r2, r3
 8010a58:	4a04      	ldr	r2, [pc, #16]	; (8010a6c <BSP_SDRAM_DeInit+0x48>)
 8010a5a:	4413      	add	r3, r2
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	f000 f951 	bl	8010d04 <SDRAM_MspDeInit>
#endif /* (USE_HAL_SDRAM_REGISTER_CALLBACKS == 0) */
  }

  return ret;
 8010a62:	68fb      	ldr	r3, [r7, #12]
}
 8010a64:	4618      	mov	r0, r3
 8010a66:	3710      	adds	r7, #16
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	bd80      	pop	{r7, pc}
 8010a6c:	2400b95c 	.word	0x2400b95c

08010a70 <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
 8010a70:	b580      	push	{r7, lr}
 8010a72:	b08c      	sub	sp, #48	; 0x30
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	60f8      	str	r0, [r7, #12]
 8010a78:	60b9      	str	r1, [r7, #8]
 8010a7a:	607a      	str	r2, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hsdram->Instance = FMC_SDRAM_DEVICE;
 8010a7c:	4b20      	ldr	r3, [pc, #128]	; (8010b00 <MX_SDRAM_BANK2_Init+0x90>)
 8010a7e:	4a21      	ldr	r2, [pc, #132]	; (8010b04 <MX_SDRAM_BANK2_Init+0x94>)
 8010a80:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	2201      	movs	r2, #1
 8010a86:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	2200      	movs	r2, #0
 8010a8c:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	68ba      	ldr	r2, [r7, #8]
 8010a92:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	687a      	ldr	r2, [r7, #4]
 8010a98:	611a      	str	r2, [r3, #16]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8010a9a:	4b19      	ldr	r3, [pc, #100]	; (8010b00 <MX_SDRAM_BANK2_Init+0x90>)
 8010a9c:	2240      	movs	r2, #64	; 0x40
 8010a9e:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8010aa6:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	2200      	movs	r2, #0
 8010aac:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010ab4:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010abc:	625a      	str	r2, [r3, #36]	; 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	2200      	movs	r2, #0
 8010ac2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
 8010ac4:	2302      	movs	r3, #2
 8010ac6:	617b      	str	r3, [r7, #20]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8010ac8:	2307      	movs	r3, #7
 8010aca:	61bb      	str	r3, [r7, #24]
  sdram_timing.SelfRefreshTime      = 4;
 8010acc:	2304      	movs	r3, #4
 8010ace:	61fb      	str	r3, [r7, #28]
  sdram_timing.RowCycleDelay        = 7;
 8010ad0:	2307      	movs	r3, #7
 8010ad2:	623b      	str	r3, [r7, #32]
  sdram_timing.WriteRecoveryTime    = 2;
 8010ad4:	2302      	movs	r3, #2
 8010ad6:	627b      	str	r3, [r7, #36]	; 0x24
  sdram_timing.RPDelay              = 2;
 8010ad8:	2302      	movs	r3, #2
 8010ada:	62bb      	str	r3, [r7, #40]	; 0x28
  sdram_timing.RCDDelay             = 2;
 8010adc:	2302      	movs	r3, #2
 8010ade:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8010ae0:	f107 0314 	add.w	r3, r7, #20
 8010ae4:	4619      	mov	r1, r3
 8010ae6:	68f8      	ldr	r0, [r7, #12]
 8010ae8:	f005 feaa 	bl	8016840 <HAL_SDRAM_Init>
 8010aec:	4603      	mov	r3, r0
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d001      	beq.n	8010af6 <MX_SDRAM_BANK2_Init+0x86>
  {
    return  HAL_ERROR;
 8010af2:	2301      	movs	r3, #1
 8010af4:	e000      	b.n	8010af8 <MX_SDRAM_BANK2_Init+0x88>
  }
  return HAL_OK;
 8010af6:	2300      	movs	r3, #0
}
 8010af8:	4618      	mov	r0, r3
 8010afa:	3730      	adds	r7, #48	; 0x30
 8010afc:	46bd      	mov	sp, r7
 8010afe:	bd80      	pop	{r7, pc}
 8010b00:	2400b95c 	.word	0x2400b95c
 8010b04:	52004140 	.word	0x52004140

08010b08 <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
 8010b08:	b580      	push	{r7, lr}
 8010b0a:	b08e      	sub	sp, #56	; 0x38
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8010b10:	4b73      	ldr	r3, [pc, #460]	; (8010ce0 <SDRAM_MspInit+0x1d8>)
 8010b12:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8010b16:	4a72      	ldr	r2, [pc, #456]	; (8010ce0 <SDRAM_MspInit+0x1d8>)
 8010b18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8010b1c:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8010b20:	4b6f      	ldr	r3, [pc, #444]	; (8010ce0 <SDRAM_MspInit+0x1d8>)
 8010b22:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8010b26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010b2a:	623b      	str	r3, [r7, #32]
 8010b2c:	6a3b      	ldr	r3, [r7, #32]

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
 8010b2e:	4b6c      	ldr	r3, [pc, #432]	; (8010ce0 <SDRAM_MspInit+0x1d8>)
 8010b30:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8010b34:	4a6a      	ldr	r2, [pc, #424]	; (8010ce0 <SDRAM_MspInit+0x1d8>)
 8010b36:	f043 0301 	orr.w	r3, r3, #1
 8010b3a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8010b3e:	4b68      	ldr	r3, [pc, #416]	; (8010ce0 <SDRAM_MspInit+0x1d8>)
 8010b40:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8010b44:	f003 0301 	and.w	r3, r3, #1
 8010b48:	61fb      	str	r3, [r7, #28]
 8010b4a:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8010b4c:	4b64      	ldr	r3, [pc, #400]	; (8010ce0 <SDRAM_MspInit+0x1d8>)
 8010b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010b52:	4a63      	ldr	r2, [pc, #396]	; (8010ce0 <SDRAM_MspInit+0x1d8>)
 8010b54:	f043 0308 	orr.w	r3, r3, #8
 8010b58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010b5c:	4b60      	ldr	r3, [pc, #384]	; (8010ce0 <SDRAM_MspInit+0x1d8>)
 8010b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010b62:	f003 0308 	and.w	r3, r3, #8
 8010b66:	61bb      	str	r3, [r7, #24]
 8010b68:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8010b6a:	4b5d      	ldr	r3, [pc, #372]	; (8010ce0 <SDRAM_MspInit+0x1d8>)
 8010b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010b70:	4a5b      	ldr	r2, [pc, #364]	; (8010ce0 <SDRAM_MspInit+0x1d8>)
 8010b72:	f043 0310 	orr.w	r3, r3, #16
 8010b76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010b7a:	4b59      	ldr	r3, [pc, #356]	; (8010ce0 <SDRAM_MspInit+0x1d8>)
 8010b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010b80:	f003 0310 	and.w	r3, r3, #16
 8010b84:	617b      	str	r3, [r7, #20]
 8010b86:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8010b88:	4b55      	ldr	r3, [pc, #340]	; (8010ce0 <SDRAM_MspInit+0x1d8>)
 8010b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010b8e:	4a54      	ldr	r2, [pc, #336]	; (8010ce0 <SDRAM_MspInit+0x1d8>)
 8010b90:	f043 0320 	orr.w	r3, r3, #32
 8010b94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010b98:	4b51      	ldr	r3, [pc, #324]	; (8010ce0 <SDRAM_MspInit+0x1d8>)
 8010b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010b9e:	f003 0320 	and.w	r3, r3, #32
 8010ba2:	613b      	str	r3, [r7, #16]
 8010ba4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8010ba6:	4b4e      	ldr	r3, [pc, #312]	; (8010ce0 <SDRAM_MspInit+0x1d8>)
 8010ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010bac:	4a4c      	ldr	r2, [pc, #304]	; (8010ce0 <SDRAM_MspInit+0x1d8>)
 8010bae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010bb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010bb6:	4b4a      	ldr	r3, [pc, #296]	; (8010ce0 <SDRAM_MspInit+0x1d8>)
 8010bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010bc0:	60fb      	str	r3, [r7, #12]
 8010bc2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8010bc4:	4b46      	ldr	r3, [pc, #280]	; (8010ce0 <SDRAM_MspInit+0x1d8>)
 8010bc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010bca:	4a45      	ldr	r2, [pc, #276]	; (8010ce0 <SDRAM_MspInit+0x1d8>)
 8010bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010bd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010bd4:	4b42      	ldr	r3, [pc, #264]	; (8010ce0 <SDRAM_MspInit+0x1d8>)
 8010bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010bde:	60bb      	str	r3, [r7, #8]
 8010be0:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8010be2:	2302      	movs	r3, #2
 8010be4:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8010be6:	2301      	movs	r3, #1
 8010be8:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8010bea:	2303      	movs	r3, #3
 8010bec:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8010bee:	230c      	movs	r3, #12
 8010bf0:	637b      	str	r3, [r7, #52]	; 0x34

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8010bf2:	f24c 7303 	movw	r3, #50947	; 0xc703
 8010bf6:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;


  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8010bf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010bfc:	4619      	mov	r1, r3
 8010bfe:	4839      	ldr	r0, [pc, #228]	; (8010ce4 <SDRAM_MspInit+0x1dc>)
 8010c00:	f000 ff62 	bl	8011ac8 <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8010c04:	f64f 7383 	movw	r3, #65411	; 0xff83
 8010c08:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8010c0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010c0e:	4619      	mov	r1, r3
 8010c10:	4835      	ldr	r0, [pc, #212]	; (8010ce8 <SDRAM_MspInit+0x1e0>)
 8010c12:	f000 ff59 	bl	8011ac8 <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8010c16:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8010c1a:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8010c1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010c20:	4619      	mov	r1, r3
 8010c22:	4832      	ldr	r0, [pc, #200]	; (8010cec <SDRAM_MspInit+0x1e4>)
 8010c24:	f000 ff50 	bl	8011ac8 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
 8010c28:	f248 1333 	movw	r3, #33075	; 0x8133
 8010c2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8010c2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010c32:	4619      	mov	r1, r3
 8010c34:	482e      	ldr	r0, [pc, #184]	; (8010cf0 <SDRAM_MspInit+0x1e8>)
 8010c36:	f000 ff47 	bl	8011ac8 <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
 8010c3a:	23e0      	movs	r3, #224	; 0xe0
 8010c3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8010c3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010c42:	4619      	mov	r1, r3
 8010c44:	482b      	ldr	r0, [pc, #172]	; (8010cf4 <SDRAM_MspInit+0x1ec>)
 8010c46:	f000 ff3f 	bl	8011ac8 <HAL_GPIO_Init>



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
 8010c4a:	4b2b      	ldr	r3, [pc, #172]	; (8010cf8 <SDRAM_MspInit+0x1f0>)
 8010c4c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8010c50:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8010c52:	4b29      	ldr	r3, [pc, #164]	; (8010cf8 <SDRAM_MspInit+0x1f0>)
 8010c54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c58:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
 8010c5a:	4b27      	ldr	r3, [pc, #156]	; (8010cf8 <SDRAM_MspInit+0x1f0>)
 8010c5c:	2280      	movs	r2, #128	; 0x80
 8010c5e:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8010c60:	4b25      	ldr	r3, [pc, #148]	; (8010cf8 <SDRAM_MspInit+0x1f0>)
 8010c62:	2200      	movs	r2, #0
 8010c64:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
 8010c66:	4b24      	ldr	r3, [pc, #144]	; (8010cf8 <SDRAM_MspInit+0x1f0>)
 8010c68:	f240 2202 	movw	r2, #514	; 0x202
 8010c6c:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
 8010c6e:	4b22      	ldr	r3, [pc, #136]	; (8010cf8 <SDRAM_MspInit+0x1f0>)
 8010c70:	f640 0208 	movw	r2, #2056	; 0x808
 8010c74:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8010c76:	4b20      	ldr	r3, [pc, #128]	; (8010cf8 <SDRAM_MspInit+0x1f0>)
 8010c78:	2220      	movs	r2, #32
 8010c7a:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 8010c7c:	4b1e      	ldr	r3, [pc, #120]	; (8010cf8 <SDRAM_MspInit+0x1f0>)
 8010c7e:	2280      	movs	r2, #128	; 0x80
 8010c80:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8010c82:	4b1d      	ldr	r3, [pc, #116]	; (8010cf8 <SDRAM_MspInit+0x1f0>)
 8010c84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8010c88:	625a      	str	r2, [r3, #36]	; 0x24
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8010c8a:	4b1b      	ldr	r3, [pc, #108]	; (8010cf8 <SDRAM_MspInit+0x1f0>)
 8010c8c:	2200      	movs	r2, #0
 8010c8e:	62da      	str	r2, [r3, #44]	; 0x2c
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8010c90:	4b19      	ldr	r3, [pc, #100]	; (8010cf8 <SDRAM_MspInit+0x1f0>)
 8010c92:	2200      	movs	r2, #0
 8010c94:	631a      	str	r2, [r3, #48]	; 0x30
  mdma_handle.Init.BufferTransferLength = 128;
 8010c96:	4b18      	ldr	r3, [pc, #96]	; (8010cf8 <SDRAM_MspInit+0x1f0>)
 8010c98:	2280      	movs	r2, #128	; 0x80
 8010c9a:	629a      	str	r2, [r3, #40]	; 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 8010c9c:	4b16      	ldr	r3, [pc, #88]	; (8010cf8 <SDRAM_MspInit+0x1f0>)
 8010c9e:	2200      	movs	r2, #0
 8010ca0:	635a      	str	r2, [r3, #52]	; 0x34
  mdma_handle.Init.DestBlockAddressOffset = 0;
 8010ca2:	4b15      	ldr	r3, [pc, #84]	; (8010cf8 <SDRAM_MspInit+0x1f0>)
 8010ca4:	2200      	movs	r2, #0
 8010ca6:	639a      	str	r2, [r3, #56]	; 0x38


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 8010ca8:	4b13      	ldr	r3, [pc, #76]	; (8010cf8 <SDRAM_MspInit+0x1f0>)
 8010caa:	4a14      	ldr	r2, [pc, #80]	; (8010cfc <SDRAM_MspInit+0x1f4>)
 8010cac:	601a      	str	r2, [r3, #0]

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8010cae:	4b14      	ldr	r3, [pc, #80]	; (8010d00 <SDRAM_MspInit+0x1f8>)
 8010cb0:	4a11      	ldr	r2, [pc, #68]	; (8010cf8 <SDRAM_MspInit+0x1f0>)
 8010cb2:	631a      	str	r2, [r3, #48]	; 0x30
 8010cb4:	4b10      	ldr	r3, [pc, #64]	; (8010cf8 <SDRAM_MspInit+0x1f0>)
 8010cb6:	4a12      	ldr	r2, [pc, #72]	; (8010d00 <SDRAM_MspInit+0x1f8>)
 8010cb8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
 8010cba:	480f      	ldr	r0, [pc, #60]	; (8010cf8 <SDRAM_MspInit+0x1f0>)
 8010cbc:	f002 fc5c 	bl	8013578 <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
 8010cc0:	480d      	ldr	r0, [pc, #52]	; (8010cf8 <SDRAM_MspInit+0x1f0>)
 8010cc2:	f002 fc0d 	bl	80134e0 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
 8010cc6:	2200      	movs	r2, #0
 8010cc8:	210f      	movs	r1, #15
 8010cca:	207a      	movs	r0, #122	; 0x7a
 8010ccc:	f000 fbec 	bl	80114a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8010cd0:	207a      	movs	r0, #122	; 0x7a
 8010cd2:	f000 fc03 	bl	80114dc <HAL_NVIC_EnableIRQ>
}
 8010cd6:	bf00      	nop
 8010cd8:	3738      	adds	r7, #56	; 0x38
 8010cda:	46bd      	mov	sp, r7
 8010cdc:	bd80      	pop	{r7, pc}
 8010cde:	bf00      	nop
 8010ce0:	58024400 	.word	0x58024400
 8010ce4:	58020c00 	.word	0x58020c00
 8010ce8:	58021000 	.word	0x58021000
 8010cec:	58021400 	.word	0x58021400
 8010cf0:	58021800 	.word	0x58021800
 8010cf4:	58021c00 	.word	0x58021c00
 8010cf8:	2400b9b0 	.word	0x2400b9b0
 8010cfc:	52000040 	.word	0x52000040
 8010d00:	2400b95c 	.word	0x2400b95c

08010d04 <SDRAM_MspDeInit>:
  * @brief  DeInitializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspDeInit(SDRAM_HandleTypeDef  *hSdram)
{
 8010d04:	b580      	push	{r7, lr}
 8010d06:	b082      	sub	sp, #8
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hSdram);

  /* Disable NVIC configuration for DMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
 8010d0c:	207a      	movs	r0, #122	; 0x7a
 8010d0e:	f000 fbf3 	bl	80114f8 <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 8010d12:	4b05      	ldr	r3, [pc, #20]	; (8010d28 <SDRAM_MspDeInit+0x24>)
 8010d14:	4a05      	ldr	r2, [pc, #20]	; (8010d2c <SDRAM_MspDeInit+0x28>)
 8010d16:	601a      	str	r2, [r3, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8010d18:	4803      	ldr	r0, [pc, #12]	; (8010d28 <SDRAM_MspDeInit+0x24>)
 8010d1a:	f002 fc2d 	bl	8013578 <HAL_MDMA_DeInit>
}
 8010d1e:	bf00      	nop
 8010d20:	3708      	adds	r7, #8
 8010d22:	46bd      	mov	sp, r7
 8010d24:	bd80      	pop	{r7, pc}
 8010d26:	bf00      	nop
 8010d28:	2400ba1c 	.word	0x2400ba1c
 8010d2c:	52000040 	.word	0x52000040

08010d30 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 8010d30:	b580      	push	{r7, lr}
 8010d32:	b088      	sub	sp, #32
 8010d34:	af00      	add	r7, sp, #0
 8010d36:	6078      	str	r0, [r7, #4]
 8010d38:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8010d3a:	2300      	movs	r3, #0
 8010d3c:	61fb      	str	r3, [r7, #28]

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d11c      	bne.n	8010d7e <BSP_TS_Init+0x4e>
 8010d44:	683b      	ldr	r3, [r7, #0]
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d018      	beq.n	8010d7e <BSP_TS_Init+0x4e>
 8010d4c:	683b      	ldr	r3, [r7, #0]
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8010d54:	d813      	bhi.n	8010d7e <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8010d56:	683b      	ldr	r3, [r7, #0]
 8010d58:	685b      	ldr	r3, [r3, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d00f      	beq.n	8010d7e <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8010d5e:	683b      	ldr	r3, [r7, #0]
 8010d60:	685b      	ldr	r3, [r3, #4]
 8010d62:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8010d66:	d80a      	bhi.n	8010d7e <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 8010d68:	683b      	ldr	r3, [r7, #0]
 8010d6a:	68da      	ldr	r2, [r3, #12]
 8010d6c:	683b      	ldr	r3, [r7, #0]
 8010d6e:	6819      	ldr	r1, [r3, #0]
 8010d70:	683b      	ldr	r3, [r7, #0]
 8010d72:	685b      	ldr	r3, [r3, #4]
 8010d74:	428b      	cmp	r3, r1
 8010d76:	bf28      	it	cs
 8010d78:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8010d7a:	429a      	cmp	r2, r3
 8010d7c:	d903      	bls.n	8010d86 <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8010d7e:	f06f 0301 	mvn.w	r3, #1
 8010d82:	61fb      	str	r3, [r7, #28]
 8010d84:	e085      	b.n	8010e92 <BSP_TS_Init+0x162>
  }
  else
  {
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 8010d86:	6878      	ldr	r0, [r7, #4]
 8010d88:	f000 f9e6 	bl	8011158 <FT5336_Probe>
 8010d8c:	4603      	mov	r3, r0
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d003      	beq.n	8010d9a <BSP_TS_Init+0x6a>
    {
      ret = BSP_ERROR_NO_INIT;
 8010d92:	f04f 33ff 	mov.w	r3, #4294967295
 8010d96:	61fb      	str	r3, [r7, #28]
 8010d98:	e07b      	b.n	8010e92 <BSP_TS_Init+0x162>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8010d9a:	683b      	ldr	r3, [r7, #0]
 8010d9c:	6819      	ldr	r1, [r3, #0]
 8010d9e:	483f      	ldr	r0, [pc, #252]	; (8010e9c <BSP_TS_Init+0x16c>)
 8010da0:	687a      	ldr	r2, [r7, #4]
 8010da2:	4613      	mov	r3, r2
 8010da4:	009b      	lsls	r3, r3, #2
 8010da6:	4413      	add	r3, r2
 8010da8:	00db      	lsls	r3, r3, #3
 8010daa:	4403      	add	r3, r0
 8010dac:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 8010dae:	683b      	ldr	r3, [r7, #0]
 8010db0:	6859      	ldr	r1, [r3, #4]
 8010db2:	483a      	ldr	r0, [pc, #232]	; (8010e9c <BSP_TS_Init+0x16c>)
 8010db4:	687a      	ldr	r2, [r7, #4]
 8010db6:	4613      	mov	r3, r2
 8010db8:	009b      	lsls	r3, r3, #2
 8010dba:	4413      	add	r3, r2
 8010dbc:	00db      	lsls	r3, r3, #3
 8010dbe:	4403      	add	r3, r0
 8010dc0:	3304      	adds	r3, #4
 8010dc2:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 8010dc4:	683b      	ldr	r3, [r7, #0]
 8010dc6:	6899      	ldr	r1, [r3, #8]
 8010dc8:	4834      	ldr	r0, [pc, #208]	; (8010e9c <BSP_TS_Init+0x16c>)
 8010dca:	687a      	ldr	r2, [r7, #4]
 8010dcc:	4613      	mov	r3, r2
 8010dce:	009b      	lsls	r3, r3, #2
 8010dd0:	4413      	add	r3, r2
 8010dd2:	00db      	lsls	r3, r3, #3
 8010dd4:	4403      	add	r3, r0
 8010dd6:	3308      	adds	r3, #8
 8010dd8:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 8010dda:	683b      	ldr	r3, [r7, #0]
 8010ddc:	68d9      	ldr	r1, [r3, #12]
 8010dde:	482f      	ldr	r0, [pc, #188]	; (8010e9c <BSP_TS_Init+0x16c>)
 8010de0:	687a      	ldr	r2, [r7, #4]
 8010de2:	4613      	mov	r3, r2
 8010de4:	009b      	lsls	r3, r3, #2
 8010de6:	4413      	add	r3, r2
 8010de8:	00db      	lsls	r3, r3, #3
 8010dea:	4403      	add	r3, r0
 8010dec:	330c      	adds	r3, #12
 8010dee:	6019      	str	r1, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8010df0:	4b2b      	ldr	r3, [pc, #172]	; (8010ea0 <BSP_TS_Init+0x170>)
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	69db      	ldr	r3, [r3, #28]
 8010df6:	492b      	ldr	r1, [pc, #172]	; (8010ea4 <BSP_TS_Init+0x174>)
 8010df8:	687a      	ldr	r2, [r7, #4]
 8010dfa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8010dfe:	f107 010c 	add.w	r1, r7, #12
 8010e02:	4610      	mov	r0, r2
 8010e04:	4798      	blx	r3
 8010e06:	4603      	mov	r3, r0
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	da03      	bge.n	8010e14 <BSP_TS_Init+0xe4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8010e0c:	f06f 0304 	mvn.w	r3, #4
 8010e10:	61fb      	str	r3, [r7, #28]
 8010e12:	e03e      	b.n	8010e92 <BSP_TS_Init+0x162>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8010e14:	6939      	ldr	r1, [r7, #16]
 8010e16:	4821      	ldr	r0, [pc, #132]	; (8010e9c <BSP_TS_Init+0x16c>)
 8010e18:	687a      	ldr	r2, [r7, #4]
 8010e1a:	4613      	mov	r3, r2
 8010e1c:	009b      	lsls	r3, r3, #2
 8010e1e:	4413      	add	r3, r2
 8010e20:	00db      	lsls	r3, r3, #3
 8010e22:	4403      	add	r3, r0
 8010e24:	3310      	adds	r3, #16
 8010e26:	6019      	str	r1, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8010e28:	6979      	ldr	r1, [r7, #20]
 8010e2a:	481c      	ldr	r0, [pc, #112]	; (8010e9c <BSP_TS_Init+0x16c>)
 8010e2c:	687a      	ldr	r2, [r7, #4]
 8010e2e:	4613      	mov	r3, r2
 8010e30:	009b      	lsls	r3, r3, #2
 8010e32:	4413      	add	r3, r2
 8010e34:	00db      	lsls	r3, r3, #3
 8010e36:	4403      	add	r3, r0
 8010e38:	3314      	adds	r3, #20
 8010e3a:	6019      	str	r1, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for(i = 0; i < TS_TOUCH_NBR; i++)
 8010e3c:	2300      	movs	r3, #0
 8010e3e:	61bb      	str	r3, [r7, #24]
 8010e40:	e024      	b.n	8010e8c <BSP_TS_Init+0x15c>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8010e42:	683b      	ldr	r3, [r7, #0]
 8010e44:	681a      	ldr	r2, [r3, #0]
 8010e46:	683b      	ldr	r3, [r7, #0]
 8010e48:	68db      	ldr	r3, [r3, #12]
 8010e4a:	4413      	add	r3, r2
 8010e4c:	1c59      	adds	r1, r3, #1
 8010e4e:	4813      	ldr	r0, [pc, #76]	; (8010e9c <BSP_TS_Init+0x16c>)
 8010e50:	687a      	ldr	r2, [r7, #4]
 8010e52:	4613      	mov	r3, r2
 8010e54:	009b      	lsls	r3, r3, #2
 8010e56:	4413      	add	r3, r2
 8010e58:	005b      	lsls	r3, r3, #1
 8010e5a:	69ba      	ldr	r2, [r7, #24]
 8010e5c:	4413      	add	r3, r2
 8010e5e:	3306      	adds	r3, #6
 8010e60:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8010e64:	683b      	ldr	r3, [r7, #0]
 8010e66:	685a      	ldr	r2, [r3, #4]
 8010e68:	683b      	ldr	r3, [r7, #0]
 8010e6a:	68db      	ldr	r3, [r3, #12]
 8010e6c:	4413      	add	r3, r2
 8010e6e:	1c59      	adds	r1, r3, #1
 8010e70:	480a      	ldr	r0, [pc, #40]	; (8010e9c <BSP_TS_Init+0x16c>)
 8010e72:	687a      	ldr	r2, [r7, #4]
 8010e74:	4613      	mov	r3, r2
 8010e76:	009b      	lsls	r3, r3, #2
 8010e78:	4413      	add	r3, r2
 8010e7a:	005b      	lsls	r3, r3, #1
 8010e7c:	69ba      	ldr	r2, [r7, #24]
 8010e7e:	4413      	add	r3, r2
 8010e80:	3308      	adds	r3, #8
 8010e82:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 8010e86:	69bb      	ldr	r3, [r7, #24]
 8010e88:	3301      	adds	r3, #1
 8010e8a:	61bb      	str	r3, [r7, #24]
 8010e8c:	69bb      	ldr	r3, [r7, #24]
 8010e8e:	2b01      	cmp	r3, #1
 8010e90:	d9d7      	bls.n	8010e42 <BSP_TS_Init+0x112>
        }
      }
    }
  }

  return ret;
 8010e92:	69fb      	ldr	r3, [r7, #28]
}
 8010e94:	4618      	mov	r0, r3
 8010e96:	3720      	adds	r7, #32
 8010e98:	46bd      	mov	sp, r7
 8010e9a:	bd80      	pop	{r7, pc}
 8010e9c:	2400ba90 	.word	0x2400ba90
 8010ea0:	2400ba88 	.word	0x2400ba88
 8010ea4:	2400ba8c 	.word	0x2400ba8c

08010ea8 <BSP_TS_GetState>:
  * @param  Instance  TS instance. Could be only 0.
  * @param  TS_State  Pointer to touch screen current state structure
  * @retval BSP status
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 8010ea8:	b580      	push	{r7, lr}
 8010eaa:	b08a      	sub	sp, #40	; 0x28
 8010eac:	af00      	add	r7, sp, #0
 8010eae:	6078      	str	r0, [r7, #4]
 8010eb0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t x_oriented, y_oriented;
  uint32_t x_diff, y_diff;

  if(Instance >= TS_INSTANCES_NBR)
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d003      	beq.n	8010ec4 <BSP_TS_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8010ebc:	f06f 0301 	mvn.w	r3, #1
 8010ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8010ec2:	e13e      	b.n	8011142 <BSP_TS_GetState+0x29a>
  else
  {
    FT5336_State_t state;

    /* Get each touch coordinates */
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 8010ec4:	4ba1      	ldr	r3, [pc, #644]	; (801114c <BSP_TS_GetState+0x2a4>)
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	691b      	ldr	r3, [r3, #16]
 8010eca:	49a1      	ldr	r1, [pc, #644]	; (8011150 <BSP_TS_GetState+0x2a8>)
 8010ecc:	687a      	ldr	r2, [r7, #4]
 8010ece:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8010ed2:	f107 0108 	add.w	r1, r7, #8
 8010ed6:	4610      	mov	r0, r2
 8010ed8:	4798      	blx	r3
 8010eda:	4603      	mov	r3, r0
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	da03      	bge.n	8010ee8 <BSP_TS_GetState+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8010ee0:	f06f 0304 	mvn.w	r3, #4
 8010ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8010ee6:	e12c      	b.n	8011142 <BSP_TS_GetState+0x29a>
    }/* Check and update the number of touches active detected */
    else if(state.TouchDetected != 0U)
 8010ee8:	68bb      	ldr	r3, [r7, #8]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	f000 8110 	beq.w	8011110 <BSP_TS_GetState+0x268>
    {
      x_oriented = state.TouchX;
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	623b      	str	r3, [r7, #32]
      y_oriented = state.TouchY;
 8010ef4:	693b      	ldr	r3, [r7, #16]
 8010ef6:	61fb      	str	r3, [r7, #28]

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8010ef8:	4996      	ldr	r1, [pc, #600]	; (8011154 <BSP_TS_GetState+0x2ac>)
 8010efa:	687a      	ldr	r2, [r7, #4]
 8010efc:	4613      	mov	r3, r2
 8010efe:	009b      	lsls	r3, r3, #2
 8010f00:	4413      	add	r3, r2
 8010f02:	00db      	lsls	r3, r3, #3
 8010f04:	440b      	add	r3, r1
 8010f06:	3308      	adds	r3, #8
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	f003 0308 	and.w	r3, r3, #8
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d003      	beq.n	8010f1a <BSP_TS_GetState+0x72>
      {
        x_oriented = state.TouchY;
 8010f12:	693b      	ldr	r3, [r7, #16]
 8010f14:	623b      	str	r3, [r7, #32]
        y_oriented = state.TouchX;
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	61fb      	str	r3, [r7, #28]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 8010f1a:	498e      	ldr	r1, [pc, #568]	; (8011154 <BSP_TS_GetState+0x2ac>)
 8010f1c:	687a      	ldr	r2, [r7, #4]
 8010f1e:	4613      	mov	r3, r2
 8010f20:	009b      	lsls	r3, r3, #2
 8010f22:	4413      	add	r3, r2
 8010f24:	00db      	lsls	r3, r3, #3
 8010f26:	440b      	add	r3, r1
 8010f28:	3308      	adds	r3, #8
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	f003 0302 	and.w	r3, r3, #2
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d00c      	beq.n	8010f4e <BSP_TS_GetState+0xa6>
      {
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 8010f34:	4987      	ldr	r1, [pc, #540]	; (8011154 <BSP_TS_GetState+0x2ac>)
 8010f36:	687a      	ldr	r2, [r7, #4]
 8010f38:	4613      	mov	r3, r2
 8010f3a:	009b      	lsls	r3, r3, #2
 8010f3c:	4413      	add	r3, r2
 8010f3e:	00db      	lsls	r3, r3, #3
 8010f40:	440b      	add	r3, r1
 8010f42:	3310      	adds	r3, #16
 8010f44:	681a      	ldr	r2, [r3, #0]
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	1ad3      	subs	r3, r2, r3
 8010f4a:	3b01      	subs	r3, #1
 8010f4c:	623b      	str	r3, [r7, #32]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 8010f4e:	4981      	ldr	r1, [pc, #516]	; (8011154 <BSP_TS_GetState+0x2ac>)
 8010f50:	687a      	ldr	r2, [r7, #4]
 8010f52:	4613      	mov	r3, r2
 8010f54:	009b      	lsls	r3, r3, #2
 8010f56:	4413      	add	r3, r2
 8010f58:	00db      	lsls	r3, r3, #3
 8010f5a:	440b      	add	r3, r1
 8010f5c:	3308      	adds	r3, #8
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	f003 0304 	and.w	r3, r3, #4
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d00b      	beq.n	8010f80 <BSP_TS_GetState+0xd8>
      {
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 8010f68:	497a      	ldr	r1, [pc, #488]	; (8011154 <BSP_TS_GetState+0x2ac>)
 8010f6a:	687a      	ldr	r2, [r7, #4]
 8010f6c:	4613      	mov	r3, r2
 8010f6e:	009b      	lsls	r3, r3, #2
 8010f70:	4413      	add	r3, r2
 8010f72:	00db      	lsls	r3, r3, #3
 8010f74:	440b      	add	r3, r1
 8010f76:	3314      	adds	r3, #20
 8010f78:	681a      	ldr	r2, [r3, #0]
 8010f7a:	693b      	ldr	r3, [r7, #16]
 8010f7c:	1ad3      	subs	r3, r2, r3
 8010f7e:	61fb      	str	r3, [r7, #28]
      }

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8010f80:	4974      	ldr	r1, [pc, #464]	; (8011154 <BSP_TS_GetState+0x2ac>)
 8010f82:	687a      	ldr	r2, [r7, #4]
 8010f84:	4613      	mov	r3, r2
 8010f86:	009b      	lsls	r3, r3, #2
 8010f88:	4413      	add	r3, r2
 8010f8a:	00db      	lsls	r3, r3, #3
 8010f8c:	440b      	add	r3, r1
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	6a3a      	ldr	r2, [r7, #32]
 8010f92:	fb02 f103 	mul.w	r1, r2, r3
 8010f96:	486f      	ldr	r0, [pc, #444]	; (8011154 <BSP_TS_GetState+0x2ac>)
 8010f98:	687a      	ldr	r2, [r7, #4]
 8010f9a:	4613      	mov	r3, r2
 8010f9c:	009b      	lsls	r3, r3, #2
 8010f9e:	4413      	add	r3, r2
 8010fa0:	00db      	lsls	r3, r3, #3
 8010fa2:	4403      	add	r3, r0
 8010fa4:	3310      	adds	r3, #16
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	fbb1 f2f3 	udiv	r2, r1, r3
 8010fac:	683b      	ldr	r3, [r7, #0]
 8010fae:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8010fb0:	4968      	ldr	r1, [pc, #416]	; (8011154 <BSP_TS_GetState+0x2ac>)
 8010fb2:	687a      	ldr	r2, [r7, #4]
 8010fb4:	4613      	mov	r3, r2
 8010fb6:	009b      	lsls	r3, r3, #2
 8010fb8:	4413      	add	r3, r2
 8010fba:	00db      	lsls	r3, r3, #3
 8010fbc:	440b      	add	r3, r1
 8010fbe:	3304      	adds	r3, #4
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	69fa      	ldr	r2, [r7, #28]
 8010fc4:	fb02 f103 	mul.w	r1, r2, r3
 8010fc8:	4862      	ldr	r0, [pc, #392]	; (8011154 <BSP_TS_GetState+0x2ac>)
 8010fca:	687a      	ldr	r2, [r7, #4]
 8010fcc:	4613      	mov	r3, r2
 8010fce:	009b      	lsls	r3, r3, #2
 8010fd0:	4413      	add	r3, r2
 8010fd2:	00db      	lsls	r3, r3, #3
 8010fd4:	4403      	add	r3, r0
 8010fd6:	3314      	adds	r3, #20
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	fbb1 f2f3 	udiv	r2, r1, r3
 8010fde:	683b      	ldr	r3, [r7, #0]
 8010fe0:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
 8010fe2:	68ba      	ldr	r2, [r7, #8]
 8010fe4:	683b      	ldr	r3, [r7, #0]
 8010fe6:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8010fe8:	683b      	ldr	r3, [r7, #0]
 8010fea:	6859      	ldr	r1, [r3, #4]
 8010fec:	4859      	ldr	r0, [pc, #356]	; (8011154 <BSP_TS_GetState+0x2ac>)
 8010fee:	687a      	ldr	r2, [r7, #4]
 8010ff0:	4613      	mov	r3, r2
 8010ff2:	009b      	lsls	r3, r3, #2
 8010ff4:	4413      	add	r3, r2
 8010ff6:	00db      	lsls	r3, r3, #3
 8010ff8:	4403      	add	r3, r0
 8010ffa:	3318      	adds	r3, #24
 8010ffc:	681b      	ldr	r3, [r3, #0]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8010ffe:	4299      	cmp	r1, r3
 8011000:	d90c      	bls.n	801101c <BSP_TS_GetState+0x174>
 8011002:	683b      	ldr	r3, [r7, #0]
 8011004:	6859      	ldr	r1, [r3, #4]
 8011006:	4853      	ldr	r0, [pc, #332]	; (8011154 <BSP_TS_GetState+0x2ac>)
 8011008:	687a      	ldr	r2, [r7, #4]
 801100a:	4613      	mov	r3, r2
 801100c:	009b      	lsls	r3, r3, #2
 801100e:	4413      	add	r3, r2
 8011010:	00db      	lsls	r3, r3, #3
 8011012:	4403      	add	r3, r0
 8011014:	3318      	adds	r3, #24
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	1acb      	subs	r3, r1, r3
 801101a:	e00b      	b.n	8011034 <BSP_TS_GetState+0x18c>
        (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
 801101c:	494d      	ldr	r1, [pc, #308]	; (8011154 <BSP_TS_GetState+0x2ac>)
 801101e:	687a      	ldr	r2, [r7, #4]
 8011020:	4613      	mov	r3, r2
 8011022:	009b      	lsls	r3, r3, #2
 8011024:	4413      	add	r3, r2
 8011026:	00db      	lsls	r3, r3, #3
 8011028:	440b      	add	r3, r1
 801102a:	3318      	adds	r3, #24
 801102c:	681a      	ldr	r2, [r3, #0]
 801102e:	683b      	ldr	r3, [r7, #0]
 8011030:	685b      	ldr	r3, [r3, #4]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8011032:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8011034:	61bb      	str	r3, [r7, #24]

        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8011036:	683b      	ldr	r3, [r7, #0]
 8011038:	6899      	ldr	r1, [r3, #8]
 801103a:	4846      	ldr	r0, [pc, #280]	; (8011154 <BSP_TS_GetState+0x2ac>)
 801103c:	687a      	ldr	r2, [r7, #4]
 801103e:	4613      	mov	r3, r2
 8011040:	009b      	lsls	r3, r3, #2
 8011042:	4413      	add	r3, r2
 8011044:	00db      	lsls	r3, r3, #3
 8011046:	4403      	add	r3, r0
 8011048:	3320      	adds	r3, #32
 801104a:	681b      	ldr	r3, [r3, #0]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 801104c:	4299      	cmp	r1, r3
 801104e:	d90c      	bls.n	801106a <BSP_TS_GetState+0x1c2>
 8011050:	683b      	ldr	r3, [r7, #0]
 8011052:	6899      	ldr	r1, [r3, #8]
 8011054:	483f      	ldr	r0, [pc, #252]	; (8011154 <BSP_TS_GetState+0x2ac>)
 8011056:	687a      	ldr	r2, [r7, #4]
 8011058:	4613      	mov	r3, r2
 801105a:	009b      	lsls	r3, r3, #2
 801105c:	4413      	add	r3, r2
 801105e:	00db      	lsls	r3, r3, #3
 8011060:	4403      	add	r3, r0
 8011062:	3320      	adds	r3, #32
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	1acb      	subs	r3, r1, r3
 8011068:	e00b      	b.n	8011082 <BSP_TS_GetState+0x1da>
          (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
 801106a:	493a      	ldr	r1, [pc, #232]	; (8011154 <BSP_TS_GetState+0x2ac>)
 801106c:	687a      	ldr	r2, [r7, #4]
 801106e:	4613      	mov	r3, r2
 8011070:	009b      	lsls	r3, r3, #2
 8011072:	4413      	add	r3, r2
 8011074:	00db      	lsls	r3, r3, #3
 8011076:	440b      	add	r3, r1
 8011078:	3320      	adds	r3, #32
 801107a:	681a      	ldr	r2, [r3, #0]
 801107c:	683b      	ldr	r3, [r7, #0]
 801107e:	689b      	ldr	r3, [r3, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8011080:	1ad3      	subs	r3, r2, r3
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8011082:	617b      	str	r3, [r7, #20]


          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8011084:	4933      	ldr	r1, [pc, #204]	; (8011154 <BSP_TS_GetState+0x2ac>)
 8011086:	687a      	ldr	r2, [r7, #4]
 8011088:	4613      	mov	r3, r2
 801108a:	009b      	lsls	r3, r3, #2
 801108c:	4413      	add	r3, r2
 801108e:	00db      	lsls	r3, r3, #3
 8011090:	440b      	add	r3, r1
 8011092:	330c      	adds	r3, #12
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	69ba      	ldr	r2, [r7, #24]
 8011098:	429a      	cmp	r2, r3
 801109a:	d80b      	bhi.n	80110b4 <BSP_TS_GetState+0x20c>
 801109c:	492d      	ldr	r1, [pc, #180]	; (8011154 <BSP_TS_GetState+0x2ac>)
 801109e:	687a      	ldr	r2, [r7, #4]
 80110a0:	4613      	mov	r3, r2
 80110a2:	009b      	lsls	r3, r3, #2
 80110a4:	4413      	add	r3, r2
 80110a6:	00db      	lsls	r3, r3, #3
 80110a8:	440b      	add	r3, r1
 80110aa:	330c      	adds	r3, #12
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	697a      	ldr	r2, [r7, #20]
 80110b0:	429a      	cmp	r2, r3
 80110b2:	d916      	bls.n	80110e2 <BSP_TS_GetState+0x23a>
          {
            /* New touch detected */
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 80110b4:	683b      	ldr	r3, [r7, #0]
 80110b6:	6859      	ldr	r1, [r3, #4]
 80110b8:	4826      	ldr	r0, [pc, #152]	; (8011154 <BSP_TS_GetState+0x2ac>)
 80110ba:	687a      	ldr	r2, [r7, #4]
 80110bc:	4613      	mov	r3, r2
 80110be:	009b      	lsls	r3, r3, #2
 80110c0:	4413      	add	r3, r2
 80110c2:	00db      	lsls	r3, r3, #3
 80110c4:	4403      	add	r3, r0
 80110c6:	3318      	adds	r3, #24
 80110c8:	6019      	str	r1, [r3, #0]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 80110ca:	683b      	ldr	r3, [r7, #0]
 80110cc:	6899      	ldr	r1, [r3, #8]
 80110ce:	4821      	ldr	r0, [pc, #132]	; (8011154 <BSP_TS_GetState+0x2ac>)
 80110d0:	687a      	ldr	r2, [r7, #4]
 80110d2:	4613      	mov	r3, r2
 80110d4:	009b      	lsls	r3, r3, #2
 80110d6:	4413      	add	r3, r2
 80110d8:	00db      	lsls	r3, r3, #3
 80110da:	4403      	add	r3, r0
 80110dc:	3320      	adds	r3, #32
 80110de:	6019      	str	r1, [r3, #0]
 80110e0:	e02f      	b.n	8011142 <BSP_TS_GetState+0x29a>
          }
          else
          {
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 80110e2:	491c      	ldr	r1, [pc, #112]	; (8011154 <BSP_TS_GetState+0x2ac>)
 80110e4:	687a      	ldr	r2, [r7, #4]
 80110e6:	4613      	mov	r3, r2
 80110e8:	009b      	lsls	r3, r3, #2
 80110ea:	4413      	add	r3, r2
 80110ec:	00db      	lsls	r3, r3, #3
 80110ee:	440b      	add	r3, r1
 80110f0:	3318      	adds	r3, #24
 80110f2:	681a      	ldr	r2, [r3, #0]
 80110f4:	683b      	ldr	r3, [r7, #0]
 80110f6:	605a      	str	r2, [r3, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 80110f8:	4916      	ldr	r1, [pc, #88]	; (8011154 <BSP_TS_GetState+0x2ac>)
 80110fa:	687a      	ldr	r2, [r7, #4]
 80110fc:	4613      	mov	r3, r2
 80110fe:	009b      	lsls	r3, r3, #2
 8011100:	4413      	add	r3, r2
 8011102:	00db      	lsls	r3, r3, #3
 8011104:	440b      	add	r3, r1
 8011106:	3320      	adds	r3, #32
 8011108:	681a      	ldr	r2, [r3, #0]
 801110a:	683b      	ldr	r3, [r7, #0]
 801110c:	609a      	str	r2, [r3, #8]
 801110e:	e018      	b.n	8011142 <BSP_TS_GetState+0x29a>
          }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 8011110:	683b      	ldr	r3, [r7, #0]
 8011112:	2200      	movs	r2, #0
 8011114:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8011116:	490f      	ldr	r1, [pc, #60]	; (8011154 <BSP_TS_GetState+0x2ac>)
 8011118:	687a      	ldr	r2, [r7, #4]
 801111a:	4613      	mov	r3, r2
 801111c:	009b      	lsls	r3, r3, #2
 801111e:	4413      	add	r3, r2
 8011120:	00db      	lsls	r3, r3, #3
 8011122:	440b      	add	r3, r1
 8011124:	3318      	adds	r3, #24
 8011126:	681a      	ldr	r2, [r3, #0]
 8011128:	683b      	ldr	r3, [r7, #0]
 801112a:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 801112c:	4909      	ldr	r1, [pc, #36]	; (8011154 <BSP_TS_GetState+0x2ac>)
 801112e:	687a      	ldr	r2, [r7, #4]
 8011130:	4613      	mov	r3, r2
 8011132:	009b      	lsls	r3, r3, #2
 8011134:	4413      	add	r3, r2
 8011136:	00db      	lsls	r3, r3, #3
 8011138:	440b      	add	r3, r1
 801113a:	3320      	adds	r3, #32
 801113c:	681a      	ldr	r2, [r3, #0]
 801113e:	683b      	ldr	r3, [r7, #0]
 8011140:	609a      	str	r2, [r3, #8]
    }
}

return ret;
 8011142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011144:	4618      	mov	r0, r3
 8011146:	3728      	adds	r7, #40	; 0x28
 8011148:	46bd      	mov	sp, r7
 801114a:	bd80      	pop	{r7, pc}
 801114c:	2400ba88 	.word	0x2400ba88
 8011150:	2400ba8c 	.word	0x2400ba8c
 8011154:	2400ba90 	.word	0x2400ba90

08011158 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 8011158:	b580      	push	{r7, lr}
 801115a:	b08a      	sub	sp, #40	; 0x28
 801115c:	af00      	add	r7, sp, #0
 801115e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8011160:	2300      	movs	r3, #0
 8011162:	627b      	str	r3, [r7, #36]	; 0x24
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 8011164:	2300      	movs	r3, #0
 8011166:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 8011168:	2370      	movs	r3, #112	; 0x70
 801116a:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 801116c:	4b23      	ldr	r3, [pc, #140]	; (80111fc <FT5336_Probe+0xa4>)
 801116e:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8011170:	4b23      	ldr	r3, [pc, #140]	; (8011200 <FT5336_Probe+0xa8>)
 8011172:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8011174:	4b23      	ldr	r3, [pc, #140]	; (8011204 <FT5336_Probe+0xac>)
 8011176:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8011178:	4b23      	ldr	r3, [pc, #140]	; (8011208 <FT5336_Probe+0xb0>)
 801117a:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 801117c:	4b23      	ldr	r3, [pc, #140]	; (801120c <FT5336_Probe+0xb4>)
 801117e:	623b      	str	r3, [r7, #32]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8011180:	f107 030c 	add.w	r3, r7, #12
 8011184:	4619      	mov	r1, r3
 8011186:	4822      	ldr	r0, [pc, #136]	; (8011210 <FT5336_Probe+0xb8>)
 8011188:	f7fd fcb2 	bl	800eaf0 <FT5336_RegisterBusIO>
 801118c:	4603      	mov	r3, r0
 801118e:	2b00      	cmp	r3, #0
 8011190:	d003      	beq.n	801119a <FT5336_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8011192:	f06f 0307 	mvn.w	r3, #7
 8011196:	627b      	str	r3, [r7, #36]	; 0x24
 8011198:	e02a      	b.n	80111f0 <FT5336_Probe+0x98>
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 801119a:	f107 0308 	add.w	r3, r7, #8
 801119e:	4619      	mov	r1, r3
 80111a0:	481b      	ldr	r0, [pc, #108]	; (8011210 <FT5336_Probe+0xb8>)
 80111a2:	f7fd fd9f 	bl	800ece4 <FT5336_ReadID>
 80111a6:	4603      	mov	r3, r0
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d003      	beq.n	80111b4 <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80111ac:	f06f 0304 	mvn.w	r3, #4
 80111b0:	627b      	str	r3, [r7, #36]	; 0x24
 80111b2:	e01d      	b.n	80111f0 <FT5336_Probe+0x98>
  }
  else if(ft5336_id != FT5336_ID)
 80111b4:	68bb      	ldr	r3, [r7, #8]
 80111b6:	2b51      	cmp	r3, #81	; 0x51
 80111b8:	d003      	beq.n	80111c2 <FT5336_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80111ba:	f06f 0306 	mvn.w	r3, #6
 80111be:	627b      	str	r3, [r7, #36]	; 0x24
 80111c0:	e016      	b.n	80111f0 <FT5336_Probe+0x98>
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 80111c2:	4a14      	ldr	r2, [pc, #80]	; (8011214 <FT5336_Probe+0xbc>)
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	4912      	ldr	r1, [pc, #72]	; (8011210 <FT5336_Probe+0xb8>)
 80111c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 80111cc:	4b12      	ldr	r3, [pc, #72]	; (8011218 <FT5336_Probe+0xc0>)
 80111ce:	4a13      	ldr	r2, [pc, #76]	; (801121c <FT5336_Probe+0xc4>)
 80111d0:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 80111d2:	4b11      	ldr	r3, [pc, #68]	; (8011218 <FT5336_Probe+0xc0>)
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	490e      	ldr	r1, [pc, #56]	; (8011214 <FT5336_Probe+0xbc>)
 80111da:	687a      	ldr	r2, [r7, #4]
 80111dc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80111e0:	4610      	mov	r0, r2
 80111e2:	4798      	blx	r3
 80111e4:	4603      	mov	r3, r0
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d002      	beq.n	80111f0 <FT5336_Probe+0x98>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80111ea:	f06f 0304 	mvn.w	r3, #4
 80111ee:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return ret;
 80111f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80111f2:	4618      	mov	r0, r3
 80111f4:	3728      	adds	r7, #40	; 0x28
 80111f6:	46bd      	mov	sp, r7
 80111f8:	bd80      	pop	{r7, pc}
 80111fa:	bf00      	nop
 80111fc:	0800f8e9 	.word	0x0800f8e9
 8011200:	0800f95d 	.word	0x0800f95d
 8011204:	0800fa85 	.word	0x0800fa85
 8011208:	0800fa29 	.word	0x0800fa29
 801120c:	0800fae1 	.word	0x0800fae1
 8011210:	2400bab8 	.word	0x2400bab8
 8011214:	2400ba8c 	.word	0x2400ba8c
 8011218:	2400ba88 	.word	0x2400ba88
 801121c:	24000020 	.word	0x24000020

08011220 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8011220:	b580      	push	{r7, lr}
 8011222:	b082      	sub	sp, #8
 8011224:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8011226:	2003      	movs	r0, #3
 8011228:	f000 f933 	bl	8011492 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801122c:	f004 f846 	bl	80152bc <HAL_RCC_GetSysClockFreq>
 8011230:	4602      	mov	r2, r0
 8011232:	4b15      	ldr	r3, [pc, #84]	; (8011288 <HAL_Init+0x68>)
 8011234:	699b      	ldr	r3, [r3, #24]
 8011236:	0a1b      	lsrs	r3, r3, #8
 8011238:	f003 030f 	and.w	r3, r3, #15
 801123c:	4913      	ldr	r1, [pc, #76]	; (801128c <HAL_Init+0x6c>)
 801123e:	5ccb      	ldrb	r3, [r1, r3]
 8011240:	f003 031f 	and.w	r3, r3, #31
 8011244:	fa22 f303 	lsr.w	r3, r2, r3
 8011248:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801124a:	4b0f      	ldr	r3, [pc, #60]	; (8011288 <HAL_Init+0x68>)
 801124c:	699b      	ldr	r3, [r3, #24]
 801124e:	f003 030f 	and.w	r3, r3, #15
 8011252:	4a0e      	ldr	r2, [pc, #56]	; (801128c <HAL_Init+0x6c>)
 8011254:	5cd3      	ldrb	r3, [r2, r3]
 8011256:	f003 031f 	and.w	r3, r3, #31
 801125a:	687a      	ldr	r2, [r7, #4]
 801125c:	fa22 f303 	lsr.w	r3, r2, r3
 8011260:	4a0b      	ldr	r2, [pc, #44]	; (8011290 <HAL_Init+0x70>)
 8011262:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8011264:	4a0b      	ldr	r2, [pc, #44]	; (8011294 <HAL_Init+0x74>)
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 801126a:	200f      	movs	r0, #15
 801126c:	f7f0 f99c 	bl	80015a8 <HAL_InitTick>
 8011270:	4603      	mov	r3, r0
 8011272:	2b00      	cmp	r3, #0
 8011274:	d001      	beq.n	801127a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8011276:	2301      	movs	r3, #1
 8011278:	e002      	b.n	8011280 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 801127a:	f7ef fddd 	bl	8000e38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801127e:	2300      	movs	r3, #0
}
 8011280:	4618      	mov	r0, r3
 8011282:	3708      	adds	r7, #8
 8011284:	46bd      	mov	sp, r7
 8011286:	bd80      	pop	{r7, pc}
 8011288:	58024400 	.word	0x58024400
 801128c:	0802f118 	.word	0x0802f118
 8011290:	2400001c 	.word	0x2400001c
 8011294:	24000018 	.word	0x24000018

08011298 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8011298:	b480      	push	{r7}
 801129a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 801129c:	4b06      	ldr	r3, [pc, #24]	; (80112b8 <HAL_IncTick+0x20>)
 801129e:	781b      	ldrb	r3, [r3, #0]
 80112a0:	461a      	mov	r2, r3
 80112a2:	4b06      	ldr	r3, [pc, #24]	; (80112bc <HAL_IncTick+0x24>)
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	4413      	add	r3, r2
 80112a8:	4a04      	ldr	r2, [pc, #16]	; (80112bc <HAL_IncTick+0x24>)
 80112aa:	6013      	str	r3, [r2, #0]
}
 80112ac:	bf00      	nop
 80112ae:	46bd      	mov	sp, r7
 80112b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b4:	4770      	bx	lr
 80112b6:	bf00      	nop
 80112b8:	24000054 	.word	0x24000054
 80112bc:	2400bae0 	.word	0x2400bae0

080112c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80112c0:	b480      	push	{r7}
 80112c2:	af00      	add	r7, sp, #0
  return uwTick;
 80112c4:	4b03      	ldr	r3, [pc, #12]	; (80112d4 <HAL_GetTick+0x14>)
 80112c6:	681b      	ldr	r3, [r3, #0]
}
 80112c8:	4618      	mov	r0, r3
 80112ca:	46bd      	mov	sp, r7
 80112cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d0:	4770      	bx	lr
 80112d2:	bf00      	nop
 80112d4:	2400bae0 	.word	0x2400bae0

080112d8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80112d8:	b480      	push	{r7}
 80112da:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80112dc:	4b03      	ldr	r3, [pc, #12]	; (80112ec <HAL_GetREVID+0x14>)
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	0c1b      	lsrs	r3, r3, #16
}
 80112e2:	4618      	mov	r0, r3
 80112e4:	46bd      	mov	sp, r7
 80112e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ea:	4770      	bx	lr
 80112ec:	5c001000 	.word	0x5c001000

080112f0 <__NVIC_SetPriorityGrouping>:
{
 80112f0:	b480      	push	{r7}
 80112f2:	b085      	sub	sp, #20
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	f003 0307 	and.w	r3, r3, #7
 80112fe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8011300:	4b0b      	ldr	r3, [pc, #44]	; (8011330 <__NVIC_SetPriorityGrouping+0x40>)
 8011302:	68db      	ldr	r3, [r3, #12]
 8011304:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8011306:	68ba      	ldr	r2, [r7, #8]
 8011308:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801130c:	4013      	ands	r3, r2
 801130e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8011314:	68bb      	ldr	r3, [r7, #8]
 8011316:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8011318:	4b06      	ldr	r3, [pc, #24]	; (8011334 <__NVIC_SetPriorityGrouping+0x44>)
 801131a:	4313      	orrs	r3, r2
 801131c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801131e:	4a04      	ldr	r2, [pc, #16]	; (8011330 <__NVIC_SetPriorityGrouping+0x40>)
 8011320:	68bb      	ldr	r3, [r7, #8]
 8011322:	60d3      	str	r3, [r2, #12]
}
 8011324:	bf00      	nop
 8011326:	3714      	adds	r7, #20
 8011328:	46bd      	mov	sp, r7
 801132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801132e:	4770      	bx	lr
 8011330:	e000ed00 	.word	0xe000ed00
 8011334:	05fa0000 	.word	0x05fa0000

08011338 <__NVIC_GetPriorityGrouping>:
{
 8011338:	b480      	push	{r7}
 801133a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801133c:	4b04      	ldr	r3, [pc, #16]	; (8011350 <__NVIC_GetPriorityGrouping+0x18>)
 801133e:	68db      	ldr	r3, [r3, #12]
 8011340:	0a1b      	lsrs	r3, r3, #8
 8011342:	f003 0307 	and.w	r3, r3, #7
}
 8011346:	4618      	mov	r0, r3
 8011348:	46bd      	mov	sp, r7
 801134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801134e:	4770      	bx	lr
 8011350:	e000ed00 	.word	0xe000ed00

08011354 <__NVIC_EnableIRQ>:
{
 8011354:	b480      	push	{r7}
 8011356:	b083      	sub	sp, #12
 8011358:	af00      	add	r7, sp, #0
 801135a:	4603      	mov	r3, r0
 801135c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801135e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011362:	2b00      	cmp	r3, #0
 8011364:	db0b      	blt.n	801137e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011366:	88fb      	ldrh	r3, [r7, #6]
 8011368:	f003 021f 	and.w	r2, r3, #31
 801136c:	4907      	ldr	r1, [pc, #28]	; (801138c <__NVIC_EnableIRQ+0x38>)
 801136e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011372:	095b      	lsrs	r3, r3, #5
 8011374:	2001      	movs	r0, #1
 8011376:	fa00 f202 	lsl.w	r2, r0, r2
 801137a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801137e:	bf00      	nop
 8011380:	370c      	adds	r7, #12
 8011382:	46bd      	mov	sp, r7
 8011384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011388:	4770      	bx	lr
 801138a:	bf00      	nop
 801138c:	e000e100 	.word	0xe000e100

08011390 <__NVIC_DisableIRQ>:
{
 8011390:	b480      	push	{r7}
 8011392:	b083      	sub	sp, #12
 8011394:	af00      	add	r7, sp, #0
 8011396:	4603      	mov	r3, r0
 8011398:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801139a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	db12      	blt.n	80113c8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80113a2:	88fb      	ldrh	r3, [r7, #6]
 80113a4:	f003 021f 	and.w	r2, r3, #31
 80113a8:	490a      	ldr	r1, [pc, #40]	; (80113d4 <__NVIC_DisableIRQ+0x44>)
 80113aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80113ae:	095b      	lsrs	r3, r3, #5
 80113b0:	2001      	movs	r0, #1
 80113b2:	fa00 f202 	lsl.w	r2, r0, r2
 80113b6:	3320      	adds	r3, #32
 80113b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80113bc:	f3bf 8f4f 	dsb	sy
}
 80113c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80113c2:	f3bf 8f6f 	isb	sy
}
 80113c6:	bf00      	nop
}
 80113c8:	bf00      	nop
 80113ca:	370c      	adds	r7, #12
 80113cc:	46bd      	mov	sp, r7
 80113ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d2:	4770      	bx	lr
 80113d4:	e000e100 	.word	0xe000e100

080113d8 <__NVIC_SetPriority>:
{
 80113d8:	b480      	push	{r7}
 80113da:	b083      	sub	sp, #12
 80113dc:	af00      	add	r7, sp, #0
 80113de:	4603      	mov	r3, r0
 80113e0:	6039      	str	r1, [r7, #0]
 80113e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80113e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	db0a      	blt.n	8011402 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80113ec:	683b      	ldr	r3, [r7, #0]
 80113ee:	b2da      	uxtb	r2, r3
 80113f0:	490c      	ldr	r1, [pc, #48]	; (8011424 <__NVIC_SetPriority+0x4c>)
 80113f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80113f6:	0112      	lsls	r2, r2, #4
 80113f8:	b2d2      	uxtb	r2, r2
 80113fa:	440b      	add	r3, r1
 80113fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8011400:	e00a      	b.n	8011418 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011402:	683b      	ldr	r3, [r7, #0]
 8011404:	b2da      	uxtb	r2, r3
 8011406:	4908      	ldr	r1, [pc, #32]	; (8011428 <__NVIC_SetPriority+0x50>)
 8011408:	88fb      	ldrh	r3, [r7, #6]
 801140a:	f003 030f 	and.w	r3, r3, #15
 801140e:	3b04      	subs	r3, #4
 8011410:	0112      	lsls	r2, r2, #4
 8011412:	b2d2      	uxtb	r2, r2
 8011414:	440b      	add	r3, r1
 8011416:	761a      	strb	r2, [r3, #24]
}
 8011418:	bf00      	nop
 801141a:	370c      	adds	r7, #12
 801141c:	46bd      	mov	sp, r7
 801141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011422:	4770      	bx	lr
 8011424:	e000e100 	.word	0xe000e100
 8011428:	e000ed00 	.word	0xe000ed00

0801142c <NVIC_EncodePriority>:
{
 801142c:	b480      	push	{r7}
 801142e:	b089      	sub	sp, #36	; 0x24
 8011430:	af00      	add	r7, sp, #0
 8011432:	60f8      	str	r0, [r7, #12]
 8011434:	60b9      	str	r1, [r7, #8]
 8011436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	f003 0307 	and.w	r3, r3, #7
 801143e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8011440:	69fb      	ldr	r3, [r7, #28]
 8011442:	f1c3 0307 	rsb	r3, r3, #7
 8011446:	2b04      	cmp	r3, #4
 8011448:	bf28      	it	cs
 801144a:	2304      	movcs	r3, #4
 801144c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801144e:	69fb      	ldr	r3, [r7, #28]
 8011450:	3304      	adds	r3, #4
 8011452:	2b06      	cmp	r3, #6
 8011454:	d902      	bls.n	801145c <NVIC_EncodePriority+0x30>
 8011456:	69fb      	ldr	r3, [r7, #28]
 8011458:	3b03      	subs	r3, #3
 801145a:	e000      	b.n	801145e <NVIC_EncodePriority+0x32>
 801145c:	2300      	movs	r3, #0
 801145e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011460:	f04f 32ff 	mov.w	r2, #4294967295
 8011464:	69bb      	ldr	r3, [r7, #24]
 8011466:	fa02 f303 	lsl.w	r3, r2, r3
 801146a:	43da      	mvns	r2, r3
 801146c:	68bb      	ldr	r3, [r7, #8]
 801146e:	401a      	ands	r2, r3
 8011470:	697b      	ldr	r3, [r7, #20]
 8011472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8011474:	f04f 31ff 	mov.w	r1, #4294967295
 8011478:	697b      	ldr	r3, [r7, #20]
 801147a:	fa01 f303 	lsl.w	r3, r1, r3
 801147e:	43d9      	mvns	r1, r3
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011484:	4313      	orrs	r3, r2
}
 8011486:	4618      	mov	r0, r3
 8011488:	3724      	adds	r7, #36	; 0x24
 801148a:	46bd      	mov	sp, r7
 801148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011490:	4770      	bx	lr

08011492 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8011492:	b580      	push	{r7, lr}
 8011494:	b082      	sub	sp, #8
 8011496:	af00      	add	r7, sp, #0
 8011498:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801149a:	6878      	ldr	r0, [r7, #4]
 801149c:	f7ff ff28 	bl	80112f0 <__NVIC_SetPriorityGrouping>
}
 80114a0:	bf00      	nop
 80114a2:	3708      	adds	r7, #8
 80114a4:	46bd      	mov	sp, r7
 80114a6:	bd80      	pop	{r7, pc}

080114a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80114a8:	b580      	push	{r7, lr}
 80114aa:	b086      	sub	sp, #24
 80114ac:	af00      	add	r7, sp, #0
 80114ae:	4603      	mov	r3, r0
 80114b0:	60b9      	str	r1, [r7, #8]
 80114b2:	607a      	str	r2, [r7, #4]
 80114b4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80114b6:	f7ff ff3f 	bl	8011338 <__NVIC_GetPriorityGrouping>
 80114ba:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80114bc:	687a      	ldr	r2, [r7, #4]
 80114be:	68b9      	ldr	r1, [r7, #8]
 80114c0:	6978      	ldr	r0, [r7, #20]
 80114c2:	f7ff ffb3 	bl	801142c <NVIC_EncodePriority>
 80114c6:	4602      	mov	r2, r0
 80114c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80114cc:	4611      	mov	r1, r2
 80114ce:	4618      	mov	r0, r3
 80114d0:	f7ff ff82 	bl	80113d8 <__NVIC_SetPriority>
}
 80114d4:	bf00      	nop
 80114d6:	3718      	adds	r7, #24
 80114d8:	46bd      	mov	sp, r7
 80114da:	bd80      	pop	{r7, pc}

080114dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80114dc:	b580      	push	{r7, lr}
 80114de:	b082      	sub	sp, #8
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	4603      	mov	r3, r0
 80114e4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80114e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80114ea:	4618      	mov	r0, r3
 80114ec:	f7ff ff32 	bl	8011354 <__NVIC_EnableIRQ>
}
 80114f0:	bf00      	nop
 80114f2:	3708      	adds	r7, #8
 80114f4:	46bd      	mov	sp, r7
 80114f6:	bd80      	pop	{r7, pc}

080114f8 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80114f8:	b580      	push	{r7, lr}
 80114fa:	b082      	sub	sp, #8
 80114fc:	af00      	add	r7, sp, #0
 80114fe:	4603      	mov	r3, r0
 8011500:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8011502:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011506:	4618      	mov	r0, r3
 8011508:	f7ff ff42 	bl	8011390 <__NVIC_DisableIRQ>
}
 801150c:	bf00      	nop
 801150e:	3708      	adds	r7, #8
 8011510:	46bd      	mov	sp, r7
 8011512:	bd80      	pop	{r7, pc}

08011514 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8011514:	b480      	push	{r7}
 8011516:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8011518:	f3bf 8f5f 	dmb	sy
}
 801151c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 801151e:	4b07      	ldr	r3, [pc, #28]	; (801153c <HAL_MPU_Disable+0x28>)
 8011520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011522:	4a06      	ldr	r2, [pc, #24]	; (801153c <HAL_MPU_Disable+0x28>)
 8011524:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011528:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 801152a:	4b05      	ldr	r3, [pc, #20]	; (8011540 <HAL_MPU_Disable+0x2c>)
 801152c:	2200      	movs	r2, #0
 801152e:	605a      	str	r2, [r3, #4]
}
 8011530:	bf00      	nop
 8011532:	46bd      	mov	sp, r7
 8011534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011538:	4770      	bx	lr
 801153a:	bf00      	nop
 801153c:	e000ed00 	.word	0xe000ed00
 8011540:	e000ed90 	.word	0xe000ed90

08011544 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8011544:	b480      	push	{r7}
 8011546:	b083      	sub	sp, #12
 8011548:	af00      	add	r7, sp, #0
 801154a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 801154c:	4a0b      	ldr	r2, [pc, #44]	; (801157c <HAL_MPU_Enable+0x38>)
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	f043 0301 	orr.w	r3, r3, #1
 8011554:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8011556:	4b0a      	ldr	r3, [pc, #40]	; (8011580 <HAL_MPU_Enable+0x3c>)
 8011558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801155a:	4a09      	ldr	r2, [pc, #36]	; (8011580 <HAL_MPU_Enable+0x3c>)
 801155c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011560:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8011562:	f3bf 8f4f 	dsb	sy
}
 8011566:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011568:	f3bf 8f6f 	isb	sy
}
 801156c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 801156e:	bf00      	nop
 8011570:	370c      	adds	r7, #12
 8011572:	46bd      	mov	sp, r7
 8011574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011578:	4770      	bx	lr
 801157a:	bf00      	nop
 801157c:	e000ed90 	.word	0xe000ed90
 8011580:	e000ed00 	.word	0xe000ed00

08011584 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8011584:	b480      	push	{r7}
 8011586:	b083      	sub	sp, #12
 8011588:	af00      	add	r7, sp, #0
 801158a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	785a      	ldrb	r2, [r3, #1]
 8011590:	4b1d      	ldr	r3, [pc, #116]	; (8011608 <HAL_MPU_ConfigRegion+0x84>)
 8011592:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	781b      	ldrb	r3, [r3, #0]
 8011598:	2b00      	cmp	r3, #0
 801159a:	d029      	beq.n	80115f0 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 801159c:	4a1a      	ldr	r2, [pc, #104]	; (8011608 <HAL_MPU_ConfigRegion+0x84>)
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	685b      	ldr	r3, [r3, #4]
 80115a2:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	7b1b      	ldrb	r3, [r3, #12]
 80115a8:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	7adb      	ldrb	r3, [r3, #11]
 80115ae:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80115b0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	7a9b      	ldrb	r3, [r3, #10]
 80115b6:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80115b8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	7b5b      	ldrb	r3, [r3, #13]
 80115be:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80115c0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	7b9b      	ldrb	r3, [r3, #14]
 80115c6:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80115c8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	7bdb      	ldrb	r3, [r3, #15]
 80115ce:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80115d0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	7a5b      	ldrb	r3, [r3, #9]
 80115d6:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80115d8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	7a1b      	ldrb	r3, [r3, #8]
 80115de:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80115e0:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80115e2:	687a      	ldr	r2, [r7, #4]
 80115e4:	7812      	ldrb	r2, [r2, #0]
 80115e6:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80115e8:	4a07      	ldr	r2, [pc, #28]	; (8011608 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80115ea:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80115ec:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80115ee:	e005      	b.n	80115fc <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80115f0:	4b05      	ldr	r3, [pc, #20]	; (8011608 <HAL_MPU_ConfigRegion+0x84>)
 80115f2:	2200      	movs	r2, #0
 80115f4:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80115f6:	4b04      	ldr	r3, [pc, #16]	; (8011608 <HAL_MPU_ConfigRegion+0x84>)
 80115f8:	2200      	movs	r2, #0
 80115fa:	611a      	str	r2, [r3, #16]
}
 80115fc:	bf00      	nop
 80115fe:	370c      	adds	r7, #12
 8011600:	46bd      	mov	sp, r7
 8011602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011606:	4770      	bx	lr
 8011608:	e000ed90 	.word	0xe000ed90

0801160c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 801160c:	b580      	push	{r7, lr}
 801160e:	b082      	sub	sp, #8
 8011610:	af00      	add	r7, sp, #0
 8011612:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	2b00      	cmp	r3, #0
 8011618:	d101      	bne.n	801161e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 801161a:	2301      	movs	r3, #1
 801161c:	e054      	b.n	80116c8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	7f5b      	ldrb	r3, [r3, #29]
 8011622:	b2db      	uxtb	r3, r3
 8011624:	2b00      	cmp	r3, #0
 8011626:	d105      	bne.n	8011634 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	2200      	movs	r2, #0
 801162c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 801162e:	6878      	ldr	r0, [r7, #4]
 8011630:	f7ef fc20 	bl	8000e74 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	2202      	movs	r2, #2
 8011638:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	791b      	ldrb	r3, [r3, #4]
 801163e:	2b00      	cmp	r3, #0
 8011640:	d10c      	bne.n	801165c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	4a22      	ldr	r2, [pc, #136]	; (80116d0 <HAL_CRC_Init+0xc4>)
 8011648:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	689a      	ldr	r2, [r3, #8]
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	f022 0218 	bic.w	r2, r2, #24
 8011658:	609a      	str	r2, [r3, #8]
 801165a:	e00c      	b.n	8011676 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	6899      	ldr	r1, [r3, #8]
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	68db      	ldr	r3, [r3, #12]
 8011664:	461a      	mov	r2, r3
 8011666:	6878      	ldr	r0, [r7, #4]
 8011668:	f000 f834 	bl	80116d4 <HAL_CRCEx_Polynomial_Set>
 801166c:	4603      	mov	r3, r0
 801166e:	2b00      	cmp	r3, #0
 8011670:	d001      	beq.n	8011676 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8011672:	2301      	movs	r3, #1
 8011674:	e028      	b.n	80116c8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	795b      	ldrb	r3, [r3, #5]
 801167a:	2b00      	cmp	r3, #0
 801167c:	d105      	bne.n	801168a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	f04f 32ff 	mov.w	r2, #4294967295
 8011686:	611a      	str	r2, [r3, #16]
 8011688:	e004      	b.n	8011694 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	687a      	ldr	r2, [r7, #4]
 8011690:	6912      	ldr	r2, [r2, #16]
 8011692:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	689b      	ldr	r3, [r3, #8]
 801169a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	695a      	ldr	r2, [r3, #20]
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	430a      	orrs	r2, r1
 80116a8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	689b      	ldr	r3, [r3, #8]
 80116b0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	699a      	ldr	r2, [r3, #24]
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	430a      	orrs	r2, r1
 80116be:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	2201      	movs	r2, #1
 80116c4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80116c6:	2300      	movs	r3, #0
}
 80116c8:	4618      	mov	r0, r3
 80116ca:	3708      	adds	r7, #8
 80116cc:	46bd      	mov	sp, r7
 80116ce:	bd80      	pop	{r7, pc}
 80116d0:	04c11db7 	.word	0x04c11db7

080116d4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80116d4:	b480      	push	{r7}
 80116d6:	b087      	sub	sp, #28
 80116d8:	af00      	add	r7, sp, #0
 80116da:	60f8      	str	r0, [r7, #12]
 80116dc:	60b9      	str	r1, [r7, #8]
 80116de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80116e0:	2300      	movs	r3, #0
 80116e2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80116e4:	231f      	movs	r3, #31
 80116e6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80116e8:	bf00      	nop
 80116ea:	693b      	ldr	r3, [r7, #16]
 80116ec:	1e5a      	subs	r2, r3, #1
 80116ee:	613a      	str	r2, [r7, #16]
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d009      	beq.n	8011708 <HAL_CRCEx_Polynomial_Set+0x34>
 80116f4:	693b      	ldr	r3, [r7, #16]
 80116f6:	f003 031f 	and.w	r3, r3, #31
 80116fa:	68ba      	ldr	r2, [r7, #8]
 80116fc:	fa22 f303 	lsr.w	r3, r2, r3
 8011700:	f003 0301 	and.w	r3, r3, #1
 8011704:	2b00      	cmp	r3, #0
 8011706:	d0f0      	beq.n	80116ea <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	2b18      	cmp	r3, #24
 801170c:	d846      	bhi.n	801179c <HAL_CRCEx_Polynomial_Set+0xc8>
 801170e:	a201      	add	r2, pc, #4	; (adr r2, 8011714 <HAL_CRCEx_Polynomial_Set+0x40>)
 8011710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011714:	080117a3 	.word	0x080117a3
 8011718:	0801179d 	.word	0x0801179d
 801171c:	0801179d 	.word	0x0801179d
 8011720:	0801179d 	.word	0x0801179d
 8011724:	0801179d 	.word	0x0801179d
 8011728:	0801179d 	.word	0x0801179d
 801172c:	0801179d 	.word	0x0801179d
 8011730:	0801179d 	.word	0x0801179d
 8011734:	08011791 	.word	0x08011791
 8011738:	0801179d 	.word	0x0801179d
 801173c:	0801179d 	.word	0x0801179d
 8011740:	0801179d 	.word	0x0801179d
 8011744:	0801179d 	.word	0x0801179d
 8011748:	0801179d 	.word	0x0801179d
 801174c:	0801179d 	.word	0x0801179d
 8011750:	0801179d 	.word	0x0801179d
 8011754:	08011785 	.word	0x08011785
 8011758:	0801179d 	.word	0x0801179d
 801175c:	0801179d 	.word	0x0801179d
 8011760:	0801179d 	.word	0x0801179d
 8011764:	0801179d 	.word	0x0801179d
 8011768:	0801179d 	.word	0x0801179d
 801176c:	0801179d 	.word	0x0801179d
 8011770:	0801179d 	.word	0x0801179d
 8011774:	08011779 	.word	0x08011779
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8011778:	693b      	ldr	r3, [r7, #16]
 801177a:	2b06      	cmp	r3, #6
 801177c:	d913      	bls.n	80117a6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 801177e:	2301      	movs	r3, #1
 8011780:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8011782:	e010      	b.n	80117a6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8011784:	693b      	ldr	r3, [r7, #16]
 8011786:	2b07      	cmp	r3, #7
 8011788:	d90f      	bls.n	80117aa <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 801178a:	2301      	movs	r3, #1
 801178c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 801178e:	e00c      	b.n	80117aa <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8011790:	693b      	ldr	r3, [r7, #16]
 8011792:	2b0f      	cmp	r3, #15
 8011794:	d90b      	bls.n	80117ae <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8011796:	2301      	movs	r3, #1
 8011798:	75fb      	strb	r3, [r7, #23]
      }
      break;
 801179a:	e008      	b.n	80117ae <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 801179c:	2301      	movs	r3, #1
 801179e:	75fb      	strb	r3, [r7, #23]
      break;
 80117a0:	e006      	b.n	80117b0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80117a2:	bf00      	nop
 80117a4:	e004      	b.n	80117b0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80117a6:	bf00      	nop
 80117a8:	e002      	b.n	80117b0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80117aa:	bf00      	nop
 80117ac:	e000      	b.n	80117b0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80117ae:	bf00      	nop
  }
  if (status == HAL_OK)
 80117b0:	7dfb      	ldrb	r3, [r7, #23]
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d10d      	bne.n	80117d2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	68ba      	ldr	r2, [r7, #8]
 80117bc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	689b      	ldr	r3, [r3, #8]
 80117c4:	f023 0118 	bic.w	r1, r3, #24
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	687a      	ldr	r2, [r7, #4]
 80117ce:	430a      	orrs	r2, r1
 80117d0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80117d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80117d4:	4618      	mov	r0, r3
 80117d6:	371c      	adds	r7, #28
 80117d8:	46bd      	mov	sp, r7
 80117da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117de:	4770      	bx	lr

080117e0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80117e0:	b580      	push	{r7, lr}
 80117e2:	b082      	sub	sp, #8
 80117e4:	af00      	add	r7, sp, #0
 80117e6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d101      	bne.n	80117f2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80117ee:	2301      	movs	r3, #1
 80117f0:	e04f      	b.n	8011892 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80117f8:	b2db      	uxtb	r3, r3
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d106      	bne.n	801180c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	2200      	movs	r2, #0
 8011802:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8011806:	6878      	ldr	r0, [r7, #4]
 8011808:	f7ef fb56 	bl	8000eb8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	2202      	movs	r2, #2
 8011810:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	681a      	ldr	r2, [r3, #0]
 801181a:	4b20      	ldr	r3, [pc, #128]	; (801189c <HAL_DMA2D_Init+0xbc>)
 801181c:	4013      	ands	r3, r2
 801181e:	687a      	ldr	r2, [r7, #4]
 8011820:	6851      	ldr	r1, [r2, #4]
 8011822:	687a      	ldr	r2, [r7, #4]
 8011824:	69d2      	ldr	r2, [r2, #28]
 8011826:	4311      	orrs	r1, r2
 8011828:	687a      	ldr	r2, [r7, #4]
 801182a:	6812      	ldr	r2, [r2, #0]
 801182c:	430b      	orrs	r3, r1
 801182e:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011836:	4b1a      	ldr	r3, [pc, #104]	; (80118a0 <HAL_DMA2D_Init+0xc0>)
 8011838:	4013      	ands	r3, r2
 801183a:	687a      	ldr	r2, [r7, #4]
 801183c:	6891      	ldr	r1, [r2, #8]
 801183e:	687a      	ldr	r2, [r7, #4]
 8011840:	6992      	ldr	r2, [r2, #24]
 8011842:	4311      	orrs	r1, r2
 8011844:	687a      	ldr	r2, [r7, #4]
 8011846:	6812      	ldr	r2, [r2, #0]
 8011848:	430b      	orrs	r3, r1
 801184a:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011852:	4b14      	ldr	r3, [pc, #80]	; (80118a4 <HAL_DMA2D_Init+0xc4>)
 8011854:	4013      	ands	r3, r2
 8011856:	687a      	ldr	r2, [r7, #4]
 8011858:	68d1      	ldr	r1, [r2, #12]
 801185a:	687a      	ldr	r2, [r7, #4]
 801185c:	6812      	ldr	r2, [r2, #0]
 801185e:	430b      	orrs	r3, r1
 8011860:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011868:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	691b      	ldr	r3, [r3, #16]
 8011870:	051a      	lsls	r2, r3, #20
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	695b      	ldr	r3, [r3, #20]
 8011876:	055b      	lsls	r3, r3, #21
 8011878:	431a      	orrs	r2, r3
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	430a      	orrs	r2, r1
 8011880:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	2200      	movs	r2, #0
 8011886:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	2201      	movs	r2, #1
 801188c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8011890:	2300      	movs	r3, #0
}
 8011892:	4618      	mov	r0, r3
 8011894:	3708      	adds	r7, #8
 8011896:	46bd      	mov	sp, r7
 8011898:	bd80      	pop	{r7, pc}
 801189a:	bf00      	nop
 801189c:	fff8ffbf 	.word	0xfff8ffbf
 80118a0:	fffffef8 	.word	0xfffffef8
 80118a4:	ffff0000 	.word	0xffff0000

080118a8 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80118a8:	b580      	push	{r7, lr}
 80118aa:	b084      	sub	sp, #16
 80118ac:	af00      	add	r7, sp, #0
 80118ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	685b      	ldr	r3, [r3, #4]
 80118b6:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	f003 0301 	and.w	r3, r3, #1
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d026      	beq.n	8011918 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80118ca:	68bb      	ldr	r3, [r7, #8]
 80118cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d021      	beq.n	8011918 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	681a      	ldr	r2, [r3, #0]
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80118e2:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80118e8:	f043 0201 	orr.w	r2, r3, #1
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	2201      	movs	r2, #1
 80118f6:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	2204      	movs	r2, #4
 80118fc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	2200      	movs	r2, #0
 8011904:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801190c:	2b00      	cmp	r3, #0
 801190e:	d003      	beq.n	8011918 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011914:	6878      	ldr	r0, [r7, #4]
 8011916:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	f003 0320 	and.w	r3, r3, #32
 801191e:	2b00      	cmp	r3, #0
 8011920:	d026      	beq.n	8011970 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8011922:	68bb      	ldr	r3, [r7, #8]
 8011924:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011928:	2b00      	cmp	r3, #0
 801192a:	d021      	beq.n	8011970 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	681a      	ldr	r2, [r3, #0]
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801193a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	2220      	movs	r2, #32
 8011942:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011948:	f043 0202 	orr.w	r2, r3, #2
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	2204      	movs	r2, #4
 8011954:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	2200      	movs	r2, #0
 801195c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011964:	2b00      	cmp	r3, #0
 8011966:	d003      	beq.n	8011970 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801196c:	6878      	ldr	r0, [r7, #4]
 801196e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	f003 0308 	and.w	r3, r3, #8
 8011976:	2b00      	cmp	r3, #0
 8011978:	d026      	beq.n	80119c8 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 801197a:	68bb      	ldr	r3, [r7, #8]
 801197c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011980:	2b00      	cmp	r3, #0
 8011982:	d021      	beq.n	80119c8 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	681a      	ldr	r2, [r3, #0]
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011992:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	2208      	movs	r2, #8
 801199a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80119a0:	f043 0204 	orr.w	r2, r3, #4
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	2204      	movs	r2, #4
 80119ac:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	2200      	movs	r2, #0
 80119b4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d003      	beq.n	80119c8 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119c4:	6878      	ldr	r0, [r7, #4]
 80119c6:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	f003 0304 	and.w	r3, r3, #4
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d013      	beq.n	80119fa <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80119d2:	68bb      	ldr	r3, [r7, #8]
 80119d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d00e      	beq.n	80119fa <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	681a      	ldr	r2, [r3, #0]
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80119ea:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	2204      	movs	r2, #4
 80119f2:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80119f4:	6878      	ldr	r0, [r7, #4]
 80119f6:	f000 f853 	bl	8011aa0 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	f003 0302 	and.w	r3, r3, #2
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d024      	beq.n	8011a4e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8011a04:	68bb      	ldr	r3, [r7, #8]
 8011a06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d01f      	beq.n	8011a4e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	681a      	ldr	r2, [r3, #0]
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8011a1c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	2202      	movs	r2, #2
 8011a24:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	2201      	movs	r2, #1
 8011a32:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	2200      	movs	r2, #0
 8011a3a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	6a1b      	ldr	r3, [r3, #32]
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d003      	beq.n	8011a4e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	6a1b      	ldr	r3, [r3, #32]
 8011a4a:	6878      	ldr	r0, [r7, #4]
 8011a4c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	f003 0310 	and.w	r3, r3, #16
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d01f      	beq.n	8011a98 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8011a58:	68bb      	ldr	r3, [r7, #8]
 8011a5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d01a      	beq.n	8011a98 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	681a      	ldr	r2, [r3, #0]
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8011a70:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	2210      	movs	r2, #16
 8011a78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	2201      	movs	r2, #1
 8011a86:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	2200      	movs	r2, #0
 8011a8e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8011a92:	6878      	ldr	r0, [r7, #4]
 8011a94:	f000 f80e 	bl	8011ab4 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8011a98:	bf00      	nop
 8011a9a:	3710      	adds	r7, #16
 8011a9c:	46bd      	mov	sp, r7
 8011a9e:	bd80      	pop	{r7, pc}

08011aa0 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8011aa0:	b480      	push	{r7}
 8011aa2:	b083      	sub	sp, #12
 8011aa4:	af00      	add	r7, sp, #0
 8011aa6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8011aa8:	bf00      	nop
 8011aaa:	370c      	adds	r7, #12
 8011aac:	46bd      	mov	sp, r7
 8011aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab2:	4770      	bx	lr

08011ab4 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8011ab4:	b480      	push	{r7}
 8011ab6:	b083      	sub	sp, #12
 8011ab8:	af00      	add	r7, sp, #0
 8011aba:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8011abc:	bf00      	nop
 8011abe:	370c      	adds	r7, #12
 8011ac0:	46bd      	mov	sp, r7
 8011ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac6:	4770      	bx	lr

08011ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8011ac8:	b480      	push	{r7}
 8011aca:	b089      	sub	sp, #36	; 0x24
 8011acc:	af00      	add	r7, sp, #0
 8011ace:	6078      	str	r0, [r7, #4]
 8011ad0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8011ad6:	4b89      	ldr	r3, [pc, #548]	; (8011cfc <HAL_GPIO_Init+0x234>)
 8011ad8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8011ada:	e194      	b.n	8011e06 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8011adc:	683b      	ldr	r3, [r7, #0]
 8011ade:	681a      	ldr	r2, [r3, #0]
 8011ae0:	2101      	movs	r1, #1
 8011ae2:	69fb      	ldr	r3, [r7, #28]
 8011ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8011ae8:	4013      	ands	r3, r2
 8011aea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8011aec:	693b      	ldr	r3, [r7, #16]
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	f000 8186 	beq.w	8011e00 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8011af4:	683b      	ldr	r3, [r7, #0]
 8011af6:	685b      	ldr	r3, [r3, #4]
 8011af8:	f003 0303 	and.w	r3, r3, #3
 8011afc:	2b01      	cmp	r3, #1
 8011afe:	d005      	beq.n	8011b0c <HAL_GPIO_Init+0x44>
 8011b00:	683b      	ldr	r3, [r7, #0]
 8011b02:	685b      	ldr	r3, [r3, #4]
 8011b04:	f003 0303 	and.w	r3, r3, #3
 8011b08:	2b02      	cmp	r3, #2
 8011b0a:	d130      	bne.n	8011b6e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	689b      	ldr	r3, [r3, #8]
 8011b10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8011b12:	69fb      	ldr	r3, [r7, #28]
 8011b14:	005b      	lsls	r3, r3, #1
 8011b16:	2203      	movs	r2, #3
 8011b18:	fa02 f303 	lsl.w	r3, r2, r3
 8011b1c:	43db      	mvns	r3, r3
 8011b1e:	69ba      	ldr	r2, [r7, #24]
 8011b20:	4013      	ands	r3, r2
 8011b22:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8011b24:	683b      	ldr	r3, [r7, #0]
 8011b26:	68da      	ldr	r2, [r3, #12]
 8011b28:	69fb      	ldr	r3, [r7, #28]
 8011b2a:	005b      	lsls	r3, r3, #1
 8011b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8011b30:	69ba      	ldr	r2, [r7, #24]
 8011b32:	4313      	orrs	r3, r2
 8011b34:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	69ba      	ldr	r2, [r7, #24]
 8011b3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	685b      	ldr	r3, [r3, #4]
 8011b40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8011b42:	2201      	movs	r2, #1
 8011b44:	69fb      	ldr	r3, [r7, #28]
 8011b46:	fa02 f303 	lsl.w	r3, r2, r3
 8011b4a:	43db      	mvns	r3, r3
 8011b4c:	69ba      	ldr	r2, [r7, #24]
 8011b4e:	4013      	ands	r3, r2
 8011b50:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8011b52:	683b      	ldr	r3, [r7, #0]
 8011b54:	685b      	ldr	r3, [r3, #4]
 8011b56:	091b      	lsrs	r3, r3, #4
 8011b58:	f003 0201 	and.w	r2, r3, #1
 8011b5c:	69fb      	ldr	r3, [r7, #28]
 8011b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8011b62:	69ba      	ldr	r2, [r7, #24]
 8011b64:	4313      	orrs	r3, r2
 8011b66:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	69ba      	ldr	r2, [r7, #24]
 8011b6c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8011b6e:	683b      	ldr	r3, [r7, #0]
 8011b70:	685b      	ldr	r3, [r3, #4]
 8011b72:	f003 0303 	and.w	r3, r3, #3
 8011b76:	2b03      	cmp	r3, #3
 8011b78:	d017      	beq.n	8011baa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	68db      	ldr	r3, [r3, #12]
 8011b7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8011b80:	69fb      	ldr	r3, [r7, #28]
 8011b82:	005b      	lsls	r3, r3, #1
 8011b84:	2203      	movs	r2, #3
 8011b86:	fa02 f303 	lsl.w	r3, r2, r3
 8011b8a:	43db      	mvns	r3, r3
 8011b8c:	69ba      	ldr	r2, [r7, #24]
 8011b8e:	4013      	ands	r3, r2
 8011b90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8011b92:	683b      	ldr	r3, [r7, #0]
 8011b94:	689a      	ldr	r2, [r3, #8]
 8011b96:	69fb      	ldr	r3, [r7, #28]
 8011b98:	005b      	lsls	r3, r3, #1
 8011b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8011b9e:	69ba      	ldr	r2, [r7, #24]
 8011ba0:	4313      	orrs	r3, r2
 8011ba2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	69ba      	ldr	r2, [r7, #24]
 8011ba8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8011baa:	683b      	ldr	r3, [r7, #0]
 8011bac:	685b      	ldr	r3, [r3, #4]
 8011bae:	f003 0303 	and.w	r3, r3, #3
 8011bb2:	2b02      	cmp	r3, #2
 8011bb4:	d123      	bne.n	8011bfe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8011bb6:	69fb      	ldr	r3, [r7, #28]
 8011bb8:	08da      	lsrs	r2, r3, #3
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	3208      	adds	r2, #8
 8011bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8011bc4:	69fb      	ldr	r3, [r7, #28]
 8011bc6:	f003 0307 	and.w	r3, r3, #7
 8011bca:	009b      	lsls	r3, r3, #2
 8011bcc:	220f      	movs	r2, #15
 8011bce:	fa02 f303 	lsl.w	r3, r2, r3
 8011bd2:	43db      	mvns	r3, r3
 8011bd4:	69ba      	ldr	r2, [r7, #24]
 8011bd6:	4013      	ands	r3, r2
 8011bd8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8011bda:	683b      	ldr	r3, [r7, #0]
 8011bdc:	691a      	ldr	r2, [r3, #16]
 8011bde:	69fb      	ldr	r3, [r7, #28]
 8011be0:	f003 0307 	and.w	r3, r3, #7
 8011be4:	009b      	lsls	r3, r3, #2
 8011be6:	fa02 f303 	lsl.w	r3, r2, r3
 8011bea:	69ba      	ldr	r2, [r7, #24]
 8011bec:	4313      	orrs	r3, r2
 8011bee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8011bf0:	69fb      	ldr	r3, [r7, #28]
 8011bf2:	08da      	lsrs	r2, r3, #3
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	3208      	adds	r2, #8
 8011bf8:	69b9      	ldr	r1, [r7, #24]
 8011bfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8011c04:	69fb      	ldr	r3, [r7, #28]
 8011c06:	005b      	lsls	r3, r3, #1
 8011c08:	2203      	movs	r2, #3
 8011c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8011c0e:	43db      	mvns	r3, r3
 8011c10:	69ba      	ldr	r2, [r7, #24]
 8011c12:	4013      	ands	r3, r2
 8011c14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8011c16:	683b      	ldr	r3, [r7, #0]
 8011c18:	685b      	ldr	r3, [r3, #4]
 8011c1a:	f003 0203 	and.w	r2, r3, #3
 8011c1e:	69fb      	ldr	r3, [r7, #28]
 8011c20:	005b      	lsls	r3, r3, #1
 8011c22:	fa02 f303 	lsl.w	r3, r2, r3
 8011c26:	69ba      	ldr	r2, [r7, #24]
 8011c28:	4313      	orrs	r3, r2
 8011c2a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	69ba      	ldr	r2, [r7, #24]
 8011c30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8011c32:	683b      	ldr	r3, [r7, #0]
 8011c34:	685b      	ldr	r3, [r3, #4]
 8011c36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	f000 80e0 	beq.w	8011e00 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011c40:	4b2f      	ldr	r3, [pc, #188]	; (8011d00 <HAL_GPIO_Init+0x238>)
 8011c42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8011c46:	4a2e      	ldr	r2, [pc, #184]	; (8011d00 <HAL_GPIO_Init+0x238>)
 8011c48:	f043 0302 	orr.w	r3, r3, #2
 8011c4c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8011c50:	4b2b      	ldr	r3, [pc, #172]	; (8011d00 <HAL_GPIO_Init+0x238>)
 8011c52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8011c56:	f003 0302 	and.w	r3, r3, #2
 8011c5a:	60fb      	str	r3, [r7, #12]
 8011c5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8011c5e:	4a29      	ldr	r2, [pc, #164]	; (8011d04 <HAL_GPIO_Init+0x23c>)
 8011c60:	69fb      	ldr	r3, [r7, #28]
 8011c62:	089b      	lsrs	r3, r3, #2
 8011c64:	3302      	adds	r3, #2
 8011c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8011c6c:	69fb      	ldr	r3, [r7, #28]
 8011c6e:	f003 0303 	and.w	r3, r3, #3
 8011c72:	009b      	lsls	r3, r3, #2
 8011c74:	220f      	movs	r2, #15
 8011c76:	fa02 f303 	lsl.w	r3, r2, r3
 8011c7a:	43db      	mvns	r3, r3
 8011c7c:	69ba      	ldr	r2, [r7, #24]
 8011c7e:	4013      	ands	r3, r2
 8011c80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	4a20      	ldr	r2, [pc, #128]	; (8011d08 <HAL_GPIO_Init+0x240>)
 8011c86:	4293      	cmp	r3, r2
 8011c88:	d052      	beq.n	8011d30 <HAL_GPIO_Init+0x268>
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	4a1f      	ldr	r2, [pc, #124]	; (8011d0c <HAL_GPIO_Init+0x244>)
 8011c8e:	4293      	cmp	r3, r2
 8011c90:	d031      	beq.n	8011cf6 <HAL_GPIO_Init+0x22e>
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	4a1e      	ldr	r2, [pc, #120]	; (8011d10 <HAL_GPIO_Init+0x248>)
 8011c96:	4293      	cmp	r3, r2
 8011c98:	d02b      	beq.n	8011cf2 <HAL_GPIO_Init+0x22a>
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	4a1d      	ldr	r2, [pc, #116]	; (8011d14 <HAL_GPIO_Init+0x24c>)
 8011c9e:	4293      	cmp	r3, r2
 8011ca0:	d025      	beq.n	8011cee <HAL_GPIO_Init+0x226>
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	4a1c      	ldr	r2, [pc, #112]	; (8011d18 <HAL_GPIO_Init+0x250>)
 8011ca6:	4293      	cmp	r3, r2
 8011ca8:	d01f      	beq.n	8011cea <HAL_GPIO_Init+0x222>
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	4a1b      	ldr	r2, [pc, #108]	; (8011d1c <HAL_GPIO_Init+0x254>)
 8011cae:	4293      	cmp	r3, r2
 8011cb0:	d019      	beq.n	8011ce6 <HAL_GPIO_Init+0x21e>
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	4a1a      	ldr	r2, [pc, #104]	; (8011d20 <HAL_GPIO_Init+0x258>)
 8011cb6:	4293      	cmp	r3, r2
 8011cb8:	d013      	beq.n	8011ce2 <HAL_GPIO_Init+0x21a>
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	4a19      	ldr	r2, [pc, #100]	; (8011d24 <HAL_GPIO_Init+0x25c>)
 8011cbe:	4293      	cmp	r3, r2
 8011cc0:	d00d      	beq.n	8011cde <HAL_GPIO_Init+0x216>
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	4a18      	ldr	r2, [pc, #96]	; (8011d28 <HAL_GPIO_Init+0x260>)
 8011cc6:	4293      	cmp	r3, r2
 8011cc8:	d007      	beq.n	8011cda <HAL_GPIO_Init+0x212>
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	4a17      	ldr	r2, [pc, #92]	; (8011d2c <HAL_GPIO_Init+0x264>)
 8011cce:	4293      	cmp	r3, r2
 8011cd0:	d101      	bne.n	8011cd6 <HAL_GPIO_Init+0x20e>
 8011cd2:	2309      	movs	r3, #9
 8011cd4:	e02d      	b.n	8011d32 <HAL_GPIO_Init+0x26a>
 8011cd6:	230a      	movs	r3, #10
 8011cd8:	e02b      	b.n	8011d32 <HAL_GPIO_Init+0x26a>
 8011cda:	2308      	movs	r3, #8
 8011cdc:	e029      	b.n	8011d32 <HAL_GPIO_Init+0x26a>
 8011cde:	2307      	movs	r3, #7
 8011ce0:	e027      	b.n	8011d32 <HAL_GPIO_Init+0x26a>
 8011ce2:	2306      	movs	r3, #6
 8011ce4:	e025      	b.n	8011d32 <HAL_GPIO_Init+0x26a>
 8011ce6:	2305      	movs	r3, #5
 8011ce8:	e023      	b.n	8011d32 <HAL_GPIO_Init+0x26a>
 8011cea:	2304      	movs	r3, #4
 8011cec:	e021      	b.n	8011d32 <HAL_GPIO_Init+0x26a>
 8011cee:	2303      	movs	r3, #3
 8011cf0:	e01f      	b.n	8011d32 <HAL_GPIO_Init+0x26a>
 8011cf2:	2302      	movs	r3, #2
 8011cf4:	e01d      	b.n	8011d32 <HAL_GPIO_Init+0x26a>
 8011cf6:	2301      	movs	r3, #1
 8011cf8:	e01b      	b.n	8011d32 <HAL_GPIO_Init+0x26a>
 8011cfa:	bf00      	nop
 8011cfc:	58000080 	.word	0x58000080
 8011d00:	58024400 	.word	0x58024400
 8011d04:	58000400 	.word	0x58000400
 8011d08:	58020000 	.word	0x58020000
 8011d0c:	58020400 	.word	0x58020400
 8011d10:	58020800 	.word	0x58020800
 8011d14:	58020c00 	.word	0x58020c00
 8011d18:	58021000 	.word	0x58021000
 8011d1c:	58021400 	.word	0x58021400
 8011d20:	58021800 	.word	0x58021800
 8011d24:	58021c00 	.word	0x58021c00
 8011d28:	58022000 	.word	0x58022000
 8011d2c:	58022400 	.word	0x58022400
 8011d30:	2300      	movs	r3, #0
 8011d32:	69fa      	ldr	r2, [r7, #28]
 8011d34:	f002 0203 	and.w	r2, r2, #3
 8011d38:	0092      	lsls	r2, r2, #2
 8011d3a:	4093      	lsls	r3, r2
 8011d3c:	69ba      	ldr	r2, [r7, #24]
 8011d3e:	4313      	orrs	r3, r2
 8011d40:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8011d42:	4938      	ldr	r1, [pc, #224]	; (8011e24 <HAL_GPIO_Init+0x35c>)
 8011d44:	69fb      	ldr	r3, [r7, #28]
 8011d46:	089b      	lsrs	r3, r3, #2
 8011d48:	3302      	adds	r3, #2
 8011d4a:	69ba      	ldr	r2, [r7, #24]
 8011d4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8011d50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8011d58:	693b      	ldr	r3, [r7, #16]
 8011d5a:	43db      	mvns	r3, r3
 8011d5c:	69ba      	ldr	r2, [r7, #24]
 8011d5e:	4013      	ands	r3, r2
 8011d60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8011d62:	683b      	ldr	r3, [r7, #0]
 8011d64:	685b      	ldr	r3, [r3, #4]
 8011d66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d003      	beq.n	8011d76 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8011d6e:	69ba      	ldr	r2, [r7, #24]
 8011d70:	693b      	ldr	r3, [r7, #16]
 8011d72:	4313      	orrs	r3, r2
 8011d74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8011d76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8011d7a:	69bb      	ldr	r3, [r7, #24]
 8011d7c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8011d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011d82:	685b      	ldr	r3, [r3, #4]
 8011d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8011d86:	693b      	ldr	r3, [r7, #16]
 8011d88:	43db      	mvns	r3, r3
 8011d8a:	69ba      	ldr	r2, [r7, #24]
 8011d8c:	4013      	ands	r3, r2
 8011d8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8011d90:	683b      	ldr	r3, [r7, #0]
 8011d92:	685b      	ldr	r3, [r3, #4]
 8011d94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d003      	beq.n	8011da4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8011d9c:	69ba      	ldr	r2, [r7, #24]
 8011d9e:	693b      	ldr	r3, [r7, #16]
 8011da0:	4313      	orrs	r3, r2
 8011da2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8011da4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8011da8:	69bb      	ldr	r3, [r7, #24]
 8011daa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8011dac:	697b      	ldr	r3, [r7, #20]
 8011dae:	685b      	ldr	r3, [r3, #4]
 8011db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8011db2:	693b      	ldr	r3, [r7, #16]
 8011db4:	43db      	mvns	r3, r3
 8011db6:	69ba      	ldr	r2, [r7, #24]
 8011db8:	4013      	ands	r3, r2
 8011dba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8011dbc:	683b      	ldr	r3, [r7, #0]
 8011dbe:	685b      	ldr	r3, [r3, #4]
 8011dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d003      	beq.n	8011dd0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8011dc8:	69ba      	ldr	r2, [r7, #24]
 8011dca:	693b      	ldr	r3, [r7, #16]
 8011dcc:	4313      	orrs	r3, r2
 8011dce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8011dd0:	697b      	ldr	r3, [r7, #20]
 8011dd2:	69ba      	ldr	r2, [r7, #24]
 8011dd4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8011dd6:	697b      	ldr	r3, [r7, #20]
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8011ddc:	693b      	ldr	r3, [r7, #16]
 8011dde:	43db      	mvns	r3, r3
 8011de0:	69ba      	ldr	r2, [r7, #24]
 8011de2:	4013      	ands	r3, r2
 8011de4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8011de6:	683b      	ldr	r3, [r7, #0]
 8011de8:	685b      	ldr	r3, [r3, #4]
 8011dea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d003      	beq.n	8011dfa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8011df2:	69ba      	ldr	r2, [r7, #24]
 8011df4:	693b      	ldr	r3, [r7, #16]
 8011df6:	4313      	orrs	r3, r2
 8011df8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8011dfa:	697b      	ldr	r3, [r7, #20]
 8011dfc:	69ba      	ldr	r2, [r7, #24]
 8011dfe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8011e00:	69fb      	ldr	r3, [r7, #28]
 8011e02:	3301      	adds	r3, #1
 8011e04:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8011e06:	683b      	ldr	r3, [r7, #0]
 8011e08:	681a      	ldr	r2, [r3, #0]
 8011e0a:	69fb      	ldr	r3, [r7, #28]
 8011e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	f47f ae63 	bne.w	8011adc <HAL_GPIO_Init+0x14>
  }
}
 8011e16:	bf00      	nop
 8011e18:	bf00      	nop
 8011e1a:	3724      	adds	r7, #36	; 0x24
 8011e1c:	46bd      	mov	sp, r7
 8011e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e22:	4770      	bx	lr
 8011e24:	58000400 	.word	0x58000400

08011e28 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8011e28:	b480      	push	{r7}
 8011e2a:	b087      	sub	sp, #28
 8011e2c:	af00      	add	r7, sp, #0
 8011e2e:	6078      	str	r0, [r7, #4]
 8011e30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8011e32:	2300      	movs	r3, #0
 8011e34:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8011e36:	4b75      	ldr	r3, [pc, #468]	; (801200c <HAL_GPIO_DeInit+0x1e4>)
 8011e38:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8011e3a:	e0d9      	b.n	8011ff0 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8011e3c:	2201      	movs	r2, #1
 8011e3e:	697b      	ldr	r3, [r7, #20]
 8011e40:	fa02 f303 	lsl.w	r3, r2, r3
 8011e44:	683a      	ldr	r2, [r7, #0]
 8011e46:	4013      	ands	r3, r2
 8011e48:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	f000 80cc 	beq.w	8011fea <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8011e52:	4a6f      	ldr	r2, [pc, #444]	; (8012010 <HAL_GPIO_DeInit+0x1e8>)
 8011e54:	697b      	ldr	r3, [r7, #20]
 8011e56:	089b      	lsrs	r3, r3, #2
 8011e58:	3302      	adds	r3, #2
 8011e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011e5e:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8011e60:	697b      	ldr	r3, [r7, #20]
 8011e62:	f003 0303 	and.w	r3, r3, #3
 8011e66:	009b      	lsls	r3, r3, #2
 8011e68:	220f      	movs	r2, #15
 8011e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8011e6e:	68ba      	ldr	r2, [r7, #8]
 8011e70:	4013      	ands	r3, r2
 8011e72:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	4a67      	ldr	r2, [pc, #412]	; (8012014 <HAL_GPIO_DeInit+0x1ec>)
 8011e78:	4293      	cmp	r3, r2
 8011e7a:	d037      	beq.n	8011eec <HAL_GPIO_DeInit+0xc4>
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	4a66      	ldr	r2, [pc, #408]	; (8012018 <HAL_GPIO_DeInit+0x1f0>)
 8011e80:	4293      	cmp	r3, r2
 8011e82:	d031      	beq.n	8011ee8 <HAL_GPIO_DeInit+0xc0>
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	4a65      	ldr	r2, [pc, #404]	; (801201c <HAL_GPIO_DeInit+0x1f4>)
 8011e88:	4293      	cmp	r3, r2
 8011e8a:	d02b      	beq.n	8011ee4 <HAL_GPIO_DeInit+0xbc>
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	4a64      	ldr	r2, [pc, #400]	; (8012020 <HAL_GPIO_DeInit+0x1f8>)
 8011e90:	4293      	cmp	r3, r2
 8011e92:	d025      	beq.n	8011ee0 <HAL_GPIO_DeInit+0xb8>
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	4a63      	ldr	r2, [pc, #396]	; (8012024 <HAL_GPIO_DeInit+0x1fc>)
 8011e98:	4293      	cmp	r3, r2
 8011e9a:	d01f      	beq.n	8011edc <HAL_GPIO_DeInit+0xb4>
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	4a62      	ldr	r2, [pc, #392]	; (8012028 <HAL_GPIO_DeInit+0x200>)
 8011ea0:	4293      	cmp	r3, r2
 8011ea2:	d019      	beq.n	8011ed8 <HAL_GPIO_DeInit+0xb0>
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	4a61      	ldr	r2, [pc, #388]	; (801202c <HAL_GPIO_DeInit+0x204>)
 8011ea8:	4293      	cmp	r3, r2
 8011eaa:	d013      	beq.n	8011ed4 <HAL_GPIO_DeInit+0xac>
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	4a60      	ldr	r2, [pc, #384]	; (8012030 <HAL_GPIO_DeInit+0x208>)
 8011eb0:	4293      	cmp	r3, r2
 8011eb2:	d00d      	beq.n	8011ed0 <HAL_GPIO_DeInit+0xa8>
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	4a5f      	ldr	r2, [pc, #380]	; (8012034 <HAL_GPIO_DeInit+0x20c>)
 8011eb8:	4293      	cmp	r3, r2
 8011eba:	d007      	beq.n	8011ecc <HAL_GPIO_DeInit+0xa4>
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	4a5e      	ldr	r2, [pc, #376]	; (8012038 <HAL_GPIO_DeInit+0x210>)
 8011ec0:	4293      	cmp	r3, r2
 8011ec2:	d101      	bne.n	8011ec8 <HAL_GPIO_DeInit+0xa0>
 8011ec4:	2309      	movs	r3, #9
 8011ec6:	e012      	b.n	8011eee <HAL_GPIO_DeInit+0xc6>
 8011ec8:	230a      	movs	r3, #10
 8011eca:	e010      	b.n	8011eee <HAL_GPIO_DeInit+0xc6>
 8011ecc:	2308      	movs	r3, #8
 8011ece:	e00e      	b.n	8011eee <HAL_GPIO_DeInit+0xc6>
 8011ed0:	2307      	movs	r3, #7
 8011ed2:	e00c      	b.n	8011eee <HAL_GPIO_DeInit+0xc6>
 8011ed4:	2306      	movs	r3, #6
 8011ed6:	e00a      	b.n	8011eee <HAL_GPIO_DeInit+0xc6>
 8011ed8:	2305      	movs	r3, #5
 8011eda:	e008      	b.n	8011eee <HAL_GPIO_DeInit+0xc6>
 8011edc:	2304      	movs	r3, #4
 8011ede:	e006      	b.n	8011eee <HAL_GPIO_DeInit+0xc6>
 8011ee0:	2303      	movs	r3, #3
 8011ee2:	e004      	b.n	8011eee <HAL_GPIO_DeInit+0xc6>
 8011ee4:	2302      	movs	r3, #2
 8011ee6:	e002      	b.n	8011eee <HAL_GPIO_DeInit+0xc6>
 8011ee8:	2301      	movs	r3, #1
 8011eea:	e000      	b.n	8011eee <HAL_GPIO_DeInit+0xc6>
 8011eec:	2300      	movs	r3, #0
 8011eee:	697a      	ldr	r2, [r7, #20]
 8011ef0:	f002 0203 	and.w	r2, r2, #3
 8011ef4:	0092      	lsls	r2, r2, #2
 8011ef6:	4093      	lsls	r3, r2
 8011ef8:	68ba      	ldr	r2, [r7, #8]
 8011efa:	429a      	cmp	r2, r3
 8011efc:	d136      	bne.n	8011f6c <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8011efe:	693b      	ldr	r3, [r7, #16]
 8011f00:	681a      	ldr	r2, [r3, #0]
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	43db      	mvns	r3, r3
 8011f06:	401a      	ands	r2, r3
 8011f08:	693b      	ldr	r3, [r7, #16]
 8011f0a:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8011f0c:	693b      	ldr	r3, [r7, #16]
 8011f0e:	685a      	ldr	r2, [r3, #4]
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	43db      	mvns	r3, r3
 8011f14:	401a      	ands	r2, r3
 8011f16:	693b      	ldr	r3, [r7, #16]
 8011f18:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8011f1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011f1e:	685a      	ldr	r2, [r3, #4]
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	43db      	mvns	r3, r3
 8011f24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8011f28:	4013      	ands	r3, r2
 8011f2a:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8011f2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011f30:	681a      	ldr	r2, [r3, #0]
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	43db      	mvns	r3, r3
 8011f36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8011f3a:	4013      	ands	r3, r2
 8011f3c:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8011f3e:	697b      	ldr	r3, [r7, #20]
 8011f40:	f003 0303 	and.w	r3, r3, #3
 8011f44:	009b      	lsls	r3, r3, #2
 8011f46:	220f      	movs	r2, #15
 8011f48:	fa02 f303 	lsl.w	r3, r2, r3
 8011f4c:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8011f4e:	4a30      	ldr	r2, [pc, #192]	; (8012010 <HAL_GPIO_DeInit+0x1e8>)
 8011f50:	697b      	ldr	r3, [r7, #20]
 8011f52:	089b      	lsrs	r3, r3, #2
 8011f54:	3302      	adds	r3, #2
 8011f56:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8011f5a:	68bb      	ldr	r3, [r7, #8]
 8011f5c:	43da      	mvns	r2, r3
 8011f5e:	482c      	ldr	r0, [pc, #176]	; (8012010 <HAL_GPIO_DeInit+0x1e8>)
 8011f60:	697b      	ldr	r3, [r7, #20]
 8011f62:	089b      	lsrs	r3, r3, #2
 8011f64:	400a      	ands	r2, r1
 8011f66:	3302      	adds	r3, #2
 8011f68:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	681a      	ldr	r2, [r3, #0]
 8011f70:	697b      	ldr	r3, [r7, #20]
 8011f72:	005b      	lsls	r3, r3, #1
 8011f74:	2103      	movs	r1, #3
 8011f76:	fa01 f303 	lsl.w	r3, r1, r3
 8011f7a:	431a      	orrs	r2, r3
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8011f80:	697b      	ldr	r3, [r7, #20]
 8011f82:	08da      	lsrs	r2, r3, #3
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	3208      	adds	r2, #8
 8011f88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011f8c:	697b      	ldr	r3, [r7, #20]
 8011f8e:	f003 0307 	and.w	r3, r3, #7
 8011f92:	009b      	lsls	r3, r3, #2
 8011f94:	220f      	movs	r2, #15
 8011f96:	fa02 f303 	lsl.w	r3, r2, r3
 8011f9a:	43db      	mvns	r3, r3
 8011f9c:	697a      	ldr	r2, [r7, #20]
 8011f9e:	08d2      	lsrs	r2, r2, #3
 8011fa0:	4019      	ands	r1, r3
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	3208      	adds	r2, #8
 8011fa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	68da      	ldr	r2, [r3, #12]
 8011fae:	697b      	ldr	r3, [r7, #20]
 8011fb0:	005b      	lsls	r3, r3, #1
 8011fb2:	2103      	movs	r1, #3
 8011fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8011fb8:	43db      	mvns	r3, r3
 8011fba:	401a      	ands	r2, r3
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	685a      	ldr	r2, [r3, #4]
 8011fc4:	2101      	movs	r1, #1
 8011fc6:	697b      	ldr	r3, [r7, #20]
 8011fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8011fcc:	43db      	mvns	r3, r3
 8011fce:	401a      	ands	r2, r3
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	689a      	ldr	r2, [r3, #8]
 8011fd8:	697b      	ldr	r3, [r7, #20]
 8011fda:	005b      	lsls	r3, r3, #1
 8011fdc:	2103      	movs	r1, #3
 8011fde:	fa01 f303 	lsl.w	r3, r1, r3
 8011fe2:	43db      	mvns	r3, r3
 8011fe4:	401a      	ands	r2, r3
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	609a      	str	r2, [r3, #8]
    }

    position++;
 8011fea:	697b      	ldr	r3, [r7, #20]
 8011fec:	3301      	adds	r3, #1
 8011fee:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8011ff0:	683a      	ldr	r2, [r7, #0]
 8011ff2:	697b      	ldr	r3, [r7, #20]
 8011ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	f47f af1f 	bne.w	8011e3c <HAL_GPIO_DeInit+0x14>
  }
}
 8011ffe:	bf00      	nop
 8012000:	bf00      	nop
 8012002:	371c      	adds	r7, #28
 8012004:	46bd      	mov	sp, r7
 8012006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801200a:	4770      	bx	lr
 801200c:	58000080 	.word	0x58000080
 8012010:	58000400 	.word	0x58000400
 8012014:	58020000 	.word	0x58020000
 8012018:	58020400 	.word	0x58020400
 801201c:	58020800 	.word	0x58020800
 8012020:	58020c00 	.word	0x58020c00
 8012024:	58021000 	.word	0x58021000
 8012028:	58021400 	.word	0x58021400
 801202c:	58021800 	.word	0x58021800
 8012030:	58021c00 	.word	0x58021c00
 8012034:	58022000 	.word	0x58022000
 8012038:	58022400 	.word	0x58022400

0801203c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 801203c:	b480      	push	{r7}
 801203e:	b085      	sub	sp, #20
 8012040:	af00      	add	r7, sp, #0
 8012042:	6078      	str	r0, [r7, #4]
 8012044:	460b      	mov	r3, r1
 8012046:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	691a      	ldr	r2, [r3, #16]
 801204c:	887b      	ldrh	r3, [r7, #2]
 801204e:	4013      	ands	r3, r2
 8012050:	2b00      	cmp	r3, #0
 8012052:	d002      	beq.n	801205a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8012054:	2301      	movs	r3, #1
 8012056:	73fb      	strb	r3, [r7, #15]
 8012058:	e001      	b.n	801205e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801205a:	2300      	movs	r3, #0
 801205c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801205e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012060:	4618      	mov	r0, r3
 8012062:	3714      	adds	r7, #20
 8012064:	46bd      	mov	sp, r7
 8012066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801206a:	4770      	bx	lr

0801206c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801206c:	b480      	push	{r7}
 801206e:	b083      	sub	sp, #12
 8012070:	af00      	add	r7, sp, #0
 8012072:	6078      	str	r0, [r7, #4]
 8012074:	460b      	mov	r3, r1
 8012076:	807b      	strh	r3, [r7, #2]
 8012078:	4613      	mov	r3, r2
 801207a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801207c:	787b      	ldrb	r3, [r7, #1]
 801207e:	2b00      	cmp	r3, #0
 8012080:	d003      	beq.n	801208a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8012082:	887a      	ldrh	r2, [r7, #2]
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8012088:	e003      	b.n	8012092 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 801208a:	887b      	ldrh	r3, [r7, #2]
 801208c:	041a      	lsls	r2, r3, #16
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	619a      	str	r2, [r3, #24]
}
 8012092:	bf00      	nop
 8012094:	370c      	adds	r7, #12
 8012096:	46bd      	mov	sp, r7
 8012098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801209c:	4770      	bx	lr
	...

080120a0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80120a0:	b480      	push	{r7}
 80120a2:	b083      	sub	sp, #12
 80120a4:	af00      	add	r7, sp, #0
 80120a6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80120a8:	4a08      	ldr	r2, [pc, #32]	; (80120cc <HAL_HSEM_FastTake+0x2c>)
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	3320      	adds	r3, #32
 80120ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80120b2:	4a07      	ldr	r2, [pc, #28]	; (80120d0 <HAL_HSEM_FastTake+0x30>)
 80120b4:	4293      	cmp	r3, r2
 80120b6:	d101      	bne.n	80120bc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80120b8:	2300      	movs	r3, #0
 80120ba:	e000      	b.n	80120be <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80120bc:	2301      	movs	r3, #1
}
 80120be:	4618      	mov	r0, r3
 80120c0:	370c      	adds	r7, #12
 80120c2:	46bd      	mov	sp, r7
 80120c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c8:	4770      	bx	lr
 80120ca:	bf00      	nop
 80120cc:	58026400 	.word	0x58026400
 80120d0:	80000300 	.word	0x80000300

080120d4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80120d4:	b480      	push	{r7}
 80120d6:	b083      	sub	sp, #12
 80120d8:	af00      	add	r7, sp, #0
 80120da:	6078      	str	r0, [r7, #4]
 80120dc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80120de:	4906      	ldr	r1, [pc, #24]	; (80120f8 <HAL_HSEM_Release+0x24>)
 80120e0:	683b      	ldr	r3, [r7, #0]
 80120e2:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80120ec:	bf00      	nop
 80120ee:	370c      	adds	r7, #12
 80120f0:	46bd      	mov	sp, r7
 80120f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120f6:	4770      	bx	lr
 80120f8:	58026400 	.word	0x58026400

080120fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80120fc:	b580      	push	{r7, lr}
 80120fe:	b082      	sub	sp, #8
 8012100:	af00      	add	r7, sp, #0
 8012102:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	2b00      	cmp	r3, #0
 8012108:	d101      	bne.n	801210e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801210a:	2301      	movs	r3, #1
 801210c:	e07f      	b.n	801220e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012114:	b2db      	uxtb	r3, r3
 8012116:	2b00      	cmp	r3, #0
 8012118:	d106      	bne.n	8012128 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	2200      	movs	r2, #0
 801211e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8012122:	6878      	ldr	r0, [r7, #4]
 8012124:	f000 f8a9 	bl	801227a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	2224      	movs	r2, #36	; 0x24
 801212c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	681a      	ldr	r2, [r3, #0]
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	f022 0201 	bic.w	r2, r2, #1
 801213e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	685a      	ldr	r2, [r3, #4]
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	681b      	ldr	r3, [r3, #0]
 8012148:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 801214c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	689a      	ldr	r2, [r3, #8]
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801215c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	68db      	ldr	r3, [r3, #12]
 8012162:	2b01      	cmp	r3, #1
 8012164:	d107      	bne.n	8012176 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	689a      	ldr	r2, [r3, #8]
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	681b      	ldr	r3, [r3, #0]
 801216e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8012172:	609a      	str	r2, [r3, #8]
 8012174:	e006      	b.n	8012184 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	689a      	ldr	r2, [r3, #8]
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8012182:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	68db      	ldr	r3, [r3, #12]
 8012188:	2b02      	cmp	r3, #2
 801218a:	d104      	bne.n	8012196 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012194:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	6859      	ldr	r1, [r3, #4]
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	681a      	ldr	r2, [r3, #0]
 80121a0:	4b1d      	ldr	r3, [pc, #116]	; (8012218 <HAL_I2C_Init+0x11c>)
 80121a2:	430b      	orrs	r3, r1
 80121a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	68da      	ldr	r2, [r3, #12]
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80121b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	691a      	ldr	r2, [r3, #16]
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	695b      	ldr	r3, [r3, #20]
 80121be:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	699b      	ldr	r3, [r3, #24]
 80121c6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	430a      	orrs	r2, r1
 80121ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	69d9      	ldr	r1, [r3, #28]
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	6a1a      	ldr	r2, [r3, #32]
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	430a      	orrs	r2, r1
 80121de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	681a      	ldr	r2, [r3, #0]
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	f042 0201 	orr.w	r2, r2, #1
 80121ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	2200      	movs	r2, #0
 80121f4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	2220      	movs	r2, #32
 80121fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	2200      	movs	r2, #0
 8012202:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	2200      	movs	r2, #0
 8012208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 801220c:	2300      	movs	r3, #0
}
 801220e:	4618      	mov	r0, r3
 8012210:	3708      	adds	r7, #8
 8012212:	46bd      	mov	sp, r7
 8012214:	bd80      	pop	{r7, pc}
 8012216:	bf00      	nop
 8012218:	02008000 	.word	0x02008000

0801221c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 801221c:	b580      	push	{r7, lr}
 801221e:	b082      	sub	sp, #8
 8012220:	af00      	add	r7, sp, #0
 8012222:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	2b00      	cmp	r3, #0
 8012228:	d101      	bne.n	801222e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 801222a:	2301      	movs	r3, #1
 801222c:	e021      	b.n	8012272 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	2224      	movs	r2, #36	; 0x24
 8012232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	681a      	ldr	r2, [r3, #0]
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	f022 0201 	bic.w	r2, r2, #1
 8012244:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8012246:	6878      	ldr	r0, [r7, #4]
 8012248:	f000 f821 	bl	801228e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	2200      	movs	r2, #0
 8012250:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	2200      	movs	r2, #0
 8012256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	2200      	movs	r2, #0
 801225e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	2200      	movs	r2, #0
 8012264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	2200      	movs	r2, #0
 801226c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8012270:	2300      	movs	r3, #0
}
 8012272:	4618      	mov	r0, r3
 8012274:	3708      	adds	r7, #8
 8012276:	46bd      	mov	sp, r7
 8012278:	bd80      	pop	{r7, pc}

0801227a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 801227a:	b480      	push	{r7}
 801227c:	b083      	sub	sp, #12
 801227e:	af00      	add	r7, sp, #0
 8012280:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8012282:	bf00      	nop
 8012284:	370c      	adds	r7, #12
 8012286:	46bd      	mov	sp, r7
 8012288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801228c:	4770      	bx	lr

0801228e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 801228e:	b480      	push	{r7}
 8012290:	b083      	sub	sp, #12
 8012292:	af00      	add	r7, sp, #0
 8012294:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8012296:	bf00      	nop
 8012298:	370c      	adds	r7, #12
 801229a:	46bd      	mov	sp, r7
 801229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122a0:	4770      	bx	lr
	...

080122a4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80122a4:	b580      	push	{r7, lr}
 80122a6:	b088      	sub	sp, #32
 80122a8:	af02      	add	r7, sp, #8
 80122aa:	60f8      	str	r0, [r7, #12]
 80122ac:	4608      	mov	r0, r1
 80122ae:	4611      	mov	r1, r2
 80122b0:	461a      	mov	r2, r3
 80122b2:	4603      	mov	r3, r0
 80122b4:	817b      	strh	r3, [r7, #10]
 80122b6:	460b      	mov	r3, r1
 80122b8:	813b      	strh	r3, [r7, #8]
 80122ba:	4613      	mov	r3, r2
 80122bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80122be:	68fb      	ldr	r3, [r7, #12]
 80122c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80122c4:	b2db      	uxtb	r3, r3
 80122c6:	2b20      	cmp	r3, #32
 80122c8:	f040 80f9 	bne.w	80124be <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80122cc:	6a3b      	ldr	r3, [r7, #32]
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d002      	beq.n	80122d8 <HAL_I2C_Mem_Write+0x34>
 80122d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d105      	bne.n	80122e4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80122de:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80122e0:	2301      	movs	r3, #1
 80122e2:	e0ed      	b.n	80124c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80122ea:	2b01      	cmp	r3, #1
 80122ec:	d101      	bne.n	80122f2 <HAL_I2C_Mem_Write+0x4e>
 80122ee:	2302      	movs	r3, #2
 80122f0:	e0e6      	b.n	80124c0 <HAL_I2C_Mem_Write+0x21c>
 80122f2:	68fb      	ldr	r3, [r7, #12]
 80122f4:	2201      	movs	r2, #1
 80122f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80122fa:	f7fe ffe1 	bl	80112c0 <HAL_GetTick>
 80122fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8012300:	697b      	ldr	r3, [r7, #20]
 8012302:	9300      	str	r3, [sp, #0]
 8012304:	2319      	movs	r3, #25
 8012306:	2201      	movs	r2, #1
 8012308:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801230c:	68f8      	ldr	r0, [r7, #12]
 801230e:	f000 fadd 	bl	80128cc <I2C_WaitOnFlagUntilTimeout>
 8012312:	4603      	mov	r3, r0
 8012314:	2b00      	cmp	r3, #0
 8012316:	d001      	beq.n	801231c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8012318:	2301      	movs	r3, #1
 801231a:	e0d1      	b.n	80124c0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	2221      	movs	r2, #33	; 0x21
 8012320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	2240      	movs	r2, #64	; 0x40
 8012328:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	2200      	movs	r2, #0
 8012330:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	6a3a      	ldr	r2, [r7, #32]
 8012336:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8012338:	68fb      	ldr	r3, [r7, #12]
 801233a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801233c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	2200      	movs	r2, #0
 8012342:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8012344:	88f8      	ldrh	r0, [r7, #6]
 8012346:	893a      	ldrh	r2, [r7, #8]
 8012348:	8979      	ldrh	r1, [r7, #10]
 801234a:	697b      	ldr	r3, [r7, #20]
 801234c:	9301      	str	r3, [sp, #4]
 801234e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012350:	9300      	str	r3, [sp, #0]
 8012352:	4603      	mov	r3, r0
 8012354:	68f8      	ldr	r0, [r7, #12]
 8012356:	f000 f9ed 	bl	8012734 <I2C_RequestMemoryWrite>
 801235a:	4603      	mov	r3, r0
 801235c:	2b00      	cmp	r3, #0
 801235e:	d005      	beq.n	801236c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	2200      	movs	r2, #0
 8012364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8012368:	2301      	movs	r3, #1
 801236a:	e0a9      	b.n	80124c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012370:	b29b      	uxth	r3, r3
 8012372:	2bff      	cmp	r3, #255	; 0xff
 8012374:	d90e      	bls.n	8012394 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	22ff      	movs	r2, #255	; 0xff
 801237a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012380:	b2da      	uxtb	r2, r3
 8012382:	8979      	ldrh	r1, [r7, #10]
 8012384:	2300      	movs	r3, #0
 8012386:	9300      	str	r3, [sp, #0]
 8012388:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801238c:	68f8      	ldr	r0, [r7, #12]
 801238e:	f000 fc45 	bl	8012c1c <I2C_TransferConfig>
 8012392:	e00f      	b.n	80123b4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8012394:	68fb      	ldr	r3, [r7, #12]
 8012396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012398:	b29a      	uxth	r2, r3
 801239a:	68fb      	ldr	r3, [r7, #12]
 801239c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80123a2:	b2da      	uxtb	r2, r3
 80123a4:	8979      	ldrh	r1, [r7, #10]
 80123a6:	2300      	movs	r3, #0
 80123a8:	9300      	str	r3, [sp, #0]
 80123aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80123ae:	68f8      	ldr	r0, [r7, #12]
 80123b0:	f000 fc34 	bl	8012c1c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80123b4:	697a      	ldr	r2, [r7, #20]
 80123b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80123b8:	68f8      	ldr	r0, [r7, #12]
 80123ba:	f000 fac7 	bl	801294c <I2C_WaitOnTXISFlagUntilTimeout>
 80123be:	4603      	mov	r3, r0
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d001      	beq.n	80123c8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80123c4:	2301      	movs	r3, #1
 80123c6:	e07b      	b.n	80124c0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123cc:	781a      	ldrb	r2, [r3, #0]
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80123d4:	68fb      	ldr	r3, [r7, #12]
 80123d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123d8:	1c5a      	adds	r2, r3, #1
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80123de:	68fb      	ldr	r3, [r7, #12]
 80123e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80123e2:	b29b      	uxth	r3, r3
 80123e4:	3b01      	subs	r3, #1
 80123e6:	b29a      	uxth	r2, r3
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80123f0:	3b01      	subs	r3, #1
 80123f2:	b29a      	uxth	r2, r3
 80123f4:	68fb      	ldr	r3, [r7, #12]
 80123f6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80123fc:	b29b      	uxth	r3, r3
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d034      	beq.n	801246c <HAL_I2C_Mem_Write+0x1c8>
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012406:	2b00      	cmp	r3, #0
 8012408:	d130      	bne.n	801246c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801240a:	697b      	ldr	r3, [r7, #20]
 801240c:	9300      	str	r3, [sp, #0]
 801240e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012410:	2200      	movs	r2, #0
 8012412:	2180      	movs	r1, #128	; 0x80
 8012414:	68f8      	ldr	r0, [r7, #12]
 8012416:	f000 fa59 	bl	80128cc <I2C_WaitOnFlagUntilTimeout>
 801241a:	4603      	mov	r3, r0
 801241c:	2b00      	cmp	r3, #0
 801241e:	d001      	beq.n	8012424 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8012420:	2301      	movs	r3, #1
 8012422:	e04d      	b.n	80124c0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012428:	b29b      	uxth	r3, r3
 801242a:	2bff      	cmp	r3, #255	; 0xff
 801242c:	d90e      	bls.n	801244c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	22ff      	movs	r2, #255	; 0xff
 8012432:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012438:	b2da      	uxtb	r2, r3
 801243a:	8979      	ldrh	r1, [r7, #10]
 801243c:	2300      	movs	r3, #0
 801243e:	9300      	str	r3, [sp, #0]
 8012440:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8012444:	68f8      	ldr	r0, [r7, #12]
 8012446:	f000 fbe9 	bl	8012c1c <I2C_TransferConfig>
 801244a:	e00f      	b.n	801246c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012450:	b29a      	uxth	r2, r3
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8012456:	68fb      	ldr	r3, [r7, #12]
 8012458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801245a:	b2da      	uxtb	r2, r3
 801245c:	8979      	ldrh	r1, [r7, #10]
 801245e:	2300      	movs	r3, #0
 8012460:	9300      	str	r3, [sp, #0]
 8012462:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012466:	68f8      	ldr	r0, [r7, #12]
 8012468:	f000 fbd8 	bl	8012c1c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012470:	b29b      	uxth	r3, r3
 8012472:	2b00      	cmp	r3, #0
 8012474:	d19e      	bne.n	80123b4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8012476:	697a      	ldr	r2, [r7, #20]
 8012478:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801247a:	68f8      	ldr	r0, [r7, #12]
 801247c:	f000 faa6 	bl	80129cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8012480:	4603      	mov	r3, r0
 8012482:	2b00      	cmp	r3, #0
 8012484:	d001      	beq.n	801248a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8012486:	2301      	movs	r3, #1
 8012488:	e01a      	b.n	80124c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	2220      	movs	r2, #32
 8012490:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	6859      	ldr	r1, [r3, #4]
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	681a      	ldr	r2, [r3, #0]
 801249c:	4b0a      	ldr	r3, [pc, #40]	; (80124c8 <HAL_I2C_Mem_Write+0x224>)
 801249e:	400b      	ands	r3, r1
 80124a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	2220      	movs	r2, #32
 80124a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	2200      	movs	r2, #0
 80124ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	2200      	movs	r2, #0
 80124b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80124ba:	2300      	movs	r3, #0
 80124bc:	e000      	b.n	80124c0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80124be:	2302      	movs	r3, #2
  }
}
 80124c0:	4618      	mov	r0, r3
 80124c2:	3718      	adds	r7, #24
 80124c4:	46bd      	mov	sp, r7
 80124c6:	bd80      	pop	{r7, pc}
 80124c8:	fe00e800 	.word	0xfe00e800

080124cc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80124cc:	b580      	push	{r7, lr}
 80124ce:	b088      	sub	sp, #32
 80124d0:	af02      	add	r7, sp, #8
 80124d2:	60f8      	str	r0, [r7, #12]
 80124d4:	4608      	mov	r0, r1
 80124d6:	4611      	mov	r1, r2
 80124d8:	461a      	mov	r2, r3
 80124da:	4603      	mov	r3, r0
 80124dc:	817b      	strh	r3, [r7, #10]
 80124de:	460b      	mov	r3, r1
 80124e0:	813b      	strh	r3, [r7, #8]
 80124e2:	4613      	mov	r3, r2
 80124e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80124ec:	b2db      	uxtb	r3, r3
 80124ee:	2b20      	cmp	r3, #32
 80124f0:	f040 80fd 	bne.w	80126ee <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80124f4:	6a3b      	ldr	r3, [r7, #32]
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d002      	beq.n	8012500 <HAL_I2C_Mem_Read+0x34>
 80124fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d105      	bne.n	801250c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012506:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8012508:	2301      	movs	r3, #1
 801250a:	e0f1      	b.n	80126f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012512:	2b01      	cmp	r3, #1
 8012514:	d101      	bne.n	801251a <HAL_I2C_Mem_Read+0x4e>
 8012516:	2302      	movs	r3, #2
 8012518:	e0ea      	b.n	80126f0 <HAL_I2C_Mem_Read+0x224>
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	2201      	movs	r2, #1
 801251e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8012522:	f7fe fecd 	bl	80112c0 <HAL_GetTick>
 8012526:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8012528:	697b      	ldr	r3, [r7, #20]
 801252a:	9300      	str	r3, [sp, #0]
 801252c:	2319      	movs	r3, #25
 801252e:	2201      	movs	r2, #1
 8012530:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8012534:	68f8      	ldr	r0, [r7, #12]
 8012536:	f000 f9c9 	bl	80128cc <I2C_WaitOnFlagUntilTimeout>
 801253a:	4603      	mov	r3, r0
 801253c:	2b00      	cmp	r3, #0
 801253e:	d001      	beq.n	8012544 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8012540:	2301      	movs	r3, #1
 8012542:	e0d5      	b.n	80126f0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	2222      	movs	r2, #34	; 0x22
 8012548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	2240      	movs	r2, #64	; 0x40
 8012550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	2200      	movs	r2, #0
 8012558:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	6a3a      	ldr	r2, [r7, #32]
 801255e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012564:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	2200      	movs	r2, #0
 801256a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 801256c:	88f8      	ldrh	r0, [r7, #6]
 801256e:	893a      	ldrh	r2, [r7, #8]
 8012570:	8979      	ldrh	r1, [r7, #10]
 8012572:	697b      	ldr	r3, [r7, #20]
 8012574:	9301      	str	r3, [sp, #4]
 8012576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012578:	9300      	str	r3, [sp, #0]
 801257a:	4603      	mov	r3, r0
 801257c:	68f8      	ldr	r0, [r7, #12]
 801257e:	f000 f92d 	bl	80127dc <I2C_RequestMemoryRead>
 8012582:	4603      	mov	r3, r0
 8012584:	2b00      	cmp	r3, #0
 8012586:	d005      	beq.n	8012594 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	2200      	movs	r2, #0
 801258c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8012590:	2301      	movs	r3, #1
 8012592:	e0ad      	b.n	80126f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012598:	b29b      	uxth	r3, r3
 801259a:	2bff      	cmp	r3, #255	; 0xff
 801259c:	d90e      	bls.n	80125bc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801259e:	68fb      	ldr	r3, [r7, #12]
 80125a0:	22ff      	movs	r2, #255	; 0xff
 80125a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80125a4:	68fb      	ldr	r3, [r7, #12]
 80125a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80125a8:	b2da      	uxtb	r2, r3
 80125aa:	8979      	ldrh	r1, [r7, #10]
 80125ac:	4b52      	ldr	r3, [pc, #328]	; (80126f8 <HAL_I2C_Mem_Read+0x22c>)
 80125ae:	9300      	str	r3, [sp, #0]
 80125b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80125b4:	68f8      	ldr	r0, [r7, #12]
 80125b6:	f000 fb31 	bl	8012c1c <I2C_TransferConfig>
 80125ba:	e00f      	b.n	80125dc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80125bc:	68fb      	ldr	r3, [r7, #12]
 80125be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80125c0:	b29a      	uxth	r2, r3
 80125c2:	68fb      	ldr	r3, [r7, #12]
 80125c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80125c6:	68fb      	ldr	r3, [r7, #12]
 80125c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80125ca:	b2da      	uxtb	r2, r3
 80125cc:	8979      	ldrh	r1, [r7, #10]
 80125ce:	4b4a      	ldr	r3, [pc, #296]	; (80126f8 <HAL_I2C_Mem_Read+0x22c>)
 80125d0:	9300      	str	r3, [sp, #0]
 80125d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80125d6:	68f8      	ldr	r0, [r7, #12]
 80125d8:	f000 fb20 	bl	8012c1c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80125dc:	697b      	ldr	r3, [r7, #20]
 80125de:	9300      	str	r3, [sp, #0]
 80125e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125e2:	2200      	movs	r2, #0
 80125e4:	2104      	movs	r1, #4
 80125e6:	68f8      	ldr	r0, [r7, #12]
 80125e8:	f000 f970 	bl	80128cc <I2C_WaitOnFlagUntilTimeout>
 80125ec:	4603      	mov	r3, r0
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d001      	beq.n	80125f6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80125f2:	2301      	movs	r3, #1
 80125f4:	e07c      	b.n	80126f0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80125f6:	68fb      	ldr	r3, [r7, #12]
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80125fc:	68fb      	ldr	r3, [r7, #12]
 80125fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012600:	b2d2      	uxtb	r2, r2
 8012602:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012608:	1c5a      	adds	r2, r3, #1
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 801260e:	68fb      	ldr	r3, [r7, #12]
 8012610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012612:	3b01      	subs	r3, #1
 8012614:	b29a      	uxth	r2, r3
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801261e:	b29b      	uxth	r3, r3
 8012620:	3b01      	subs	r3, #1
 8012622:	b29a      	uxth	r2, r3
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801262c:	b29b      	uxth	r3, r3
 801262e:	2b00      	cmp	r3, #0
 8012630:	d034      	beq.n	801269c <HAL_I2C_Mem_Read+0x1d0>
 8012632:	68fb      	ldr	r3, [r7, #12]
 8012634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012636:	2b00      	cmp	r3, #0
 8012638:	d130      	bne.n	801269c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801263a:	697b      	ldr	r3, [r7, #20]
 801263c:	9300      	str	r3, [sp, #0]
 801263e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012640:	2200      	movs	r2, #0
 8012642:	2180      	movs	r1, #128	; 0x80
 8012644:	68f8      	ldr	r0, [r7, #12]
 8012646:	f000 f941 	bl	80128cc <I2C_WaitOnFlagUntilTimeout>
 801264a:	4603      	mov	r3, r0
 801264c:	2b00      	cmp	r3, #0
 801264e:	d001      	beq.n	8012654 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8012650:	2301      	movs	r3, #1
 8012652:	e04d      	b.n	80126f0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012658:	b29b      	uxth	r3, r3
 801265a:	2bff      	cmp	r3, #255	; 0xff
 801265c:	d90e      	bls.n	801267c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801265e:	68fb      	ldr	r3, [r7, #12]
 8012660:	22ff      	movs	r2, #255	; 0xff
 8012662:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012668:	b2da      	uxtb	r2, r3
 801266a:	8979      	ldrh	r1, [r7, #10]
 801266c:	2300      	movs	r3, #0
 801266e:	9300      	str	r3, [sp, #0]
 8012670:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8012674:	68f8      	ldr	r0, [r7, #12]
 8012676:	f000 fad1 	bl	8012c1c <I2C_TransferConfig>
 801267a:	e00f      	b.n	801269c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012680:	b29a      	uxth	r2, r3
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801268a:	b2da      	uxtb	r2, r3
 801268c:	8979      	ldrh	r1, [r7, #10]
 801268e:	2300      	movs	r3, #0
 8012690:	9300      	str	r3, [sp, #0]
 8012692:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012696:	68f8      	ldr	r0, [r7, #12]
 8012698:	f000 fac0 	bl	8012c1c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80126a0:	b29b      	uxth	r3, r3
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d19a      	bne.n	80125dc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80126a6:	697a      	ldr	r2, [r7, #20]
 80126a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80126aa:	68f8      	ldr	r0, [r7, #12]
 80126ac:	f000 f98e 	bl	80129cc <I2C_WaitOnSTOPFlagUntilTimeout>
 80126b0:	4603      	mov	r3, r0
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d001      	beq.n	80126ba <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80126b6:	2301      	movs	r3, #1
 80126b8:	e01a      	b.n	80126f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	2220      	movs	r2, #32
 80126c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	6859      	ldr	r1, [r3, #4]
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	681a      	ldr	r2, [r3, #0]
 80126cc:	4b0b      	ldr	r3, [pc, #44]	; (80126fc <HAL_I2C_Mem_Read+0x230>)
 80126ce:	400b      	ands	r3, r1
 80126d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	2220      	movs	r2, #32
 80126d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	2200      	movs	r2, #0
 80126de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	2200      	movs	r2, #0
 80126e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80126ea:	2300      	movs	r3, #0
 80126ec:	e000      	b.n	80126f0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80126ee:	2302      	movs	r3, #2
  }
}
 80126f0:	4618      	mov	r0, r3
 80126f2:	3718      	adds	r7, #24
 80126f4:	46bd      	mov	sp, r7
 80126f6:	bd80      	pop	{r7, pc}
 80126f8:	80002400 	.word	0x80002400
 80126fc:	fe00e800 	.word	0xfe00e800

08012700 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8012700:	b480      	push	{r7}
 8012702:	b083      	sub	sp, #12
 8012704:	af00      	add	r7, sp, #0
 8012706:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801270e:	b2db      	uxtb	r3, r3
}
 8012710:	4618      	mov	r0, r3
 8012712:	370c      	adds	r7, #12
 8012714:	46bd      	mov	sp, r7
 8012716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801271a:	4770      	bx	lr

0801271c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 801271c:	b480      	push	{r7}
 801271e:	b083      	sub	sp, #12
 8012720:	af00      	add	r7, sp, #0
 8012722:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8012728:	4618      	mov	r0, r3
 801272a:	370c      	adds	r7, #12
 801272c:	46bd      	mov	sp, r7
 801272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012732:	4770      	bx	lr

08012734 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8012734:	b580      	push	{r7, lr}
 8012736:	b086      	sub	sp, #24
 8012738:	af02      	add	r7, sp, #8
 801273a:	60f8      	str	r0, [r7, #12]
 801273c:	4608      	mov	r0, r1
 801273e:	4611      	mov	r1, r2
 8012740:	461a      	mov	r2, r3
 8012742:	4603      	mov	r3, r0
 8012744:	817b      	strh	r3, [r7, #10]
 8012746:	460b      	mov	r3, r1
 8012748:	813b      	strh	r3, [r7, #8]
 801274a:	4613      	mov	r3, r2
 801274c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 801274e:	88fb      	ldrh	r3, [r7, #6]
 8012750:	b2da      	uxtb	r2, r3
 8012752:	8979      	ldrh	r1, [r7, #10]
 8012754:	4b20      	ldr	r3, [pc, #128]	; (80127d8 <I2C_RequestMemoryWrite+0xa4>)
 8012756:	9300      	str	r3, [sp, #0]
 8012758:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801275c:	68f8      	ldr	r0, [r7, #12]
 801275e:	f000 fa5d 	bl	8012c1c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8012762:	69fa      	ldr	r2, [r7, #28]
 8012764:	69b9      	ldr	r1, [r7, #24]
 8012766:	68f8      	ldr	r0, [r7, #12]
 8012768:	f000 f8f0 	bl	801294c <I2C_WaitOnTXISFlagUntilTimeout>
 801276c:	4603      	mov	r3, r0
 801276e:	2b00      	cmp	r3, #0
 8012770:	d001      	beq.n	8012776 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8012772:	2301      	movs	r3, #1
 8012774:	e02c      	b.n	80127d0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8012776:	88fb      	ldrh	r3, [r7, #6]
 8012778:	2b01      	cmp	r3, #1
 801277a:	d105      	bne.n	8012788 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801277c:	893b      	ldrh	r3, [r7, #8]
 801277e:	b2da      	uxtb	r2, r3
 8012780:	68fb      	ldr	r3, [r7, #12]
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	629a      	str	r2, [r3, #40]	; 0x28
 8012786:	e015      	b.n	80127b4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8012788:	893b      	ldrh	r3, [r7, #8]
 801278a:	0a1b      	lsrs	r3, r3, #8
 801278c:	b29b      	uxth	r3, r3
 801278e:	b2da      	uxtb	r2, r3
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8012796:	69fa      	ldr	r2, [r7, #28]
 8012798:	69b9      	ldr	r1, [r7, #24]
 801279a:	68f8      	ldr	r0, [r7, #12]
 801279c:	f000 f8d6 	bl	801294c <I2C_WaitOnTXISFlagUntilTimeout>
 80127a0:	4603      	mov	r3, r0
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d001      	beq.n	80127aa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80127a6:	2301      	movs	r3, #1
 80127a8:	e012      	b.n	80127d0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80127aa:	893b      	ldrh	r3, [r7, #8]
 80127ac:	b2da      	uxtb	r2, r3
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80127b4:	69fb      	ldr	r3, [r7, #28]
 80127b6:	9300      	str	r3, [sp, #0]
 80127b8:	69bb      	ldr	r3, [r7, #24]
 80127ba:	2200      	movs	r2, #0
 80127bc:	2180      	movs	r1, #128	; 0x80
 80127be:	68f8      	ldr	r0, [r7, #12]
 80127c0:	f000 f884 	bl	80128cc <I2C_WaitOnFlagUntilTimeout>
 80127c4:	4603      	mov	r3, r0
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d001      	beq.n	80127ce <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80127ca:	2301      	movs	r3, #1
 80127cc:	e000      	b.n	80127d0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80127ce:	2300      	movs	r3, #0
}
 80127d0:	4618      	mov	r0, r3
 80127d2:	3710      	adds	r7, #16
 80127d4:	46bd      	mov	sp, r7
 80127d6:	bd80      	pop	{r7, pc}
 80127d8:	80002000 	.word	0x80002000

080127dc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80127dc:	b580      	push	{r7, lr}
 80127de:	b086      	sub	sp, #24
 80127e0:	af02      	add	r7, sp, #8
 80127e2:	60f8      	str	r0, [r7, #12]
 80127e4:	4608      	mov	r0, r1
 80127e6:	4611      	mov	r1, r2
 80127e8:	461a      	mov	r2, r3
 80127ea:	4603      	mov	r3, r0
 80127ec:	817b      	strh	r3, [r7, #10]
 80127ee:	460b      	mov	r3, r1
 80127f0:	813b      	strh	r3, [r7, #8]
 80127f2:	4613      	mov	r3, r2
 80127f4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80127f6:	88fb      	ldrh	r3, [r7, #6]
 80127f8:	b2da      	uxtb	r2, r3
 80127fa:	8979      	ldrh	r1, [r7, #10]
 80127fc:	4b20      	ldr	r3, [pc, #128]	; (8012880 <I2C_RequestMemoryRead+0xa4>)
 80127fe:	9300      	str	r3, [sp, #0]
 8012800:	2300      	movs	r3, #0
 8012802:	68f8      	ldr	r0, [r7, #12]
 8012804:	f000 fa0a 	bl	8012c1c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8012808:	69fa      	ldr	r2, [r7, #28]
 801280a:	69b9      	ldr	r1, [r7, #24]
 801280c:	68f8      	ldr	r0, [r7, #12]
 801280e:	f000 f89d 	bl	801294c <I2C_WaitOnTXISFlagUntilTimeout>
 8012812:	4603      	mov	r3, r0
 8012814:	2b00      	cmp	r3, #0
 8012816:	d001      	beq.n	801281c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8012818:	2301      	movs	r3, #1
 801281a:	e02c      	b.n	8012876 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801281c:	88fb      	ldrh	r3, [r7, #6]
 801281e:	2b01      	cmp	r3, #1
 8012820:	d105      	bne.n	801282e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8012822:	893b      	ldrh	r3, [r7, #8]
 8012824:	b2da      	uxtb	r2, r3
 8012826:	68fb      	ldr	r3, [r7, #12]
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	629a      	str	r2, [r3, #40]	; 0x28
 801282c:	e015      	b.n	801285a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 801282e:	893b      	ldrh	r3, [r7, #8]
 8012830:	0a1b      	lsrs	r3, r3, #8
 8012832:	b29b      	uxth	r3, r3
 8012834:	b2da      	uxtb	r2, r3
 8012836:	68fb      	ldr	r3, [r7, #12]
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801283c:	69fa      	ldr	r2, [r7, #28]
 801283e:	69b9      	ldr	r1, [r7, #24]
 8012840:	68f8      	ldr	r0, [r7, #12]
 8012842:	f000 f883 	bl	801294c <I2C_WaitOnTXISFlagUntilTimeout>
 8012846:	4603      	mov	r3, r0
 8012848:	2b00      	cmp	r3, #0
 801284a:	d001      	beq.n	8012850 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 801284c:	2301      	movs	r3, #1
 801284e:	e012      	b.n	8012876 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8012850:	893b      	ldrh	r3, [r7, #8]
 8012852:	b2da      	uxtb	r2, r3
 8012854:	68fb      	ldr	r3, [r7, #12]
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 801285a:	69fb      	ldr	r3, [r7, #28]
 801285c:	9300      	str	r3, [sp, #0]
 801285e:	69bb      	ldr	r3, [r7, #24]
 8012860:	2200      	movs	r2, #0
 8012862:	2140      	movs	r1, #64	; 0x40
 8012864:	68f8      	ldr	r0, [r7, #12]
 8012866:	f000 f831 	bl	80128cc <I2C_WaitOnFlagUntilTimeout>
 801286a:	4603      	mov	r3, r0
 801286c:	2b00      	cmp	r3, #0
 801286e:	d001      	beq.n	8012874 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8012870:	2301      	movs	r3, #1
 8012872:	e000      	b.n	8012876 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8012874:	2300      	movs	r3, #0
}
 8012876:	4618      	mov	r0, r3
 8012878:	3710      	adds	r7, #16
 801287a:	46bd      	mov	sp, r7
 801287c:	bd80      	pop	{r7, pc}
 801287e:	bf00      	nop
 8012880:	80002000 	.word	0x80002000

08012884 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8012884:	b480      	push	{r7}
 8012886:	b083      	sub	sp, #12
 8012888:	af00      	add	r7, sp, #0
 801288a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	699b      	ldr	r3, [r3, #24]
 8012892:	f003 0302 	and.w	r3, r3, #2
 8012896:	2b02      	cmp	r3, #2
 8012898:	d103      	bne.n	80128a2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	681b      	ldr	r3, [r3, #0]
 801289e:	2200      	movs	r2, #0
 80128a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	699b      	ldr	r3, [r3, #24]
 80128a8:	f003 0301 	and.w	r3, r3, #1
 80128ac:	2b01      	cmp	r3, #1
 80128ae:	d007      	beq.n	80128c0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	699a      	ldr	r2, [r3, #24]
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	681b      	ldr	r3, [r3, #0]
 80128ba:	f042 0201 	orr.w	r2, r2, #1
 80128be:	619a      	str	r2, [r3, #24]
  }
}
 80128c0:	bf00      	nop
 80128c2:	370c      	adds	r7, #12
 80128c4:	46bd      	mov	sp, r7
 80128c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ca:	4770      	bx	lr

080128cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80128cc:	b580      	push	{r7, lr}
 80128ce:	b084      	sub	sp, #16
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	60f8      	str	r0, [r7, #12]
 80128d4:	60b9      	str	r1, [r7, #8]
 80128d6:	603b      	str	r3, [r7, #0]
 80128d8:	4613      	mov	r3, r2
 80128da:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80128dc:	e022      	b.n	8012924 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80128de:	683b      	ldr	r3, [r7, #0]
 80128e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128e4:	d01e      	beq.n	8012924 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80128e6:	f7fe fceb 	bl	80112c0 <HAL_GetTick>
 80128ea:	4602      	mov	r2, r0
 80128ec:	69bb      	ldr	r3, [r7, #24]
 80128ee:	1ad3      	subs	r3, r2, r3
 80128f0:	683a      	ldr	r2, [r7, #0]
 80128f2:	429a      	cmp	r2, r3
 80128f4:	d302      	bcc.n	80128fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80128f6:	683b      	ldr	r3, [r7, #0]
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d113      	bne.n	8012924 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80128fc:	68fb      	ldr	r3, [r7, #12]
 80128fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012900:	f043 0220 	orr.w	r2, r3, #32
 8012904:	68fb      	ldr	r3, [r7, #12]
 8012906:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8012908:	68fb      	ldr	r3, [r7, #12]
 801290a:	2220      	movs	r2, #32
 801290c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	2200      	movs	r2, #0
 8012914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	2200      	movs	r2, #0
 801291c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8012920:	2301      	movs	r3, #1
 8012922:	e00f      	b.n	8012944 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8012924:	68fb      	ldr	r3, [r7, #12]
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	699a      	ldr	r2, [r3, #24]
 801292a:	68bb      	ldr	r3, [r7, #8]
 801292c:	4013      	ands	r3, r2
 801292e:	68ba      	ldr	r2, [r7, #8]
 8012930:	429a      	cmp	r2, r3
 8012932:	bf0c      	ite	eq
 8012934:	2301      	moveq	r3, #1
 8012936:	2300      	movne	r3, #0
 8012938:	b2db      	uxtb	r3, r3
 801293a:	461a      	mov	r2, r3
 801293c:	79fb      	ldrb	r3, [r7, #7]
 801293e:	429a      	cmp	r2, r3
 8012940:	d0cd      	beq.n	80128de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8012942:	2300      	movs	r3, #0
}
 8012944:	4618      	mov	r0, r3
 8012946:	3710      	adds	r7, #16
 8012948:	46bd      	mov	sp, r7
 801294a:	bd80      	pop	{r7, pc}

0801294c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801294c:	b580      	push	{r7, lr}
 801294e:	b084      	sub	sp, #16
 8012950:	af00      	add	r7, sp, #0
 8012952:	60f8      	str	r0, [r7, #12]
 8012954:	60b9      	str	r1, [r7, #8]
 8012956:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8012958:	e02c      	b.n	80129b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801295a:	687a      	ldr	r2, [r7, #4]
 801295c:	68b9      	ldr	r1, [r7, #8]
 801295e:	68f8      	ldr	r0, [r7, #12]
 8012960:	f000 f870 	bl	8012a44 <I2C_IsErrorOccurred>
 8012964:	4603      	mov	r3, r0
 8012966:	2b00      	cmp	r3, #0
 8012968:	d001      	beq.n	801296e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801296a:	2301      	movs	r3, #1
 801296c:	e02a      	b.n	80129c4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801296e:	68bb      	ldr	r3, [r7, #8]
 8012970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012974:	d01e      	beq.n	80129b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012976:	f7fe fca3 	bl	80112c0 <HAL_GetTick>
 801297a:	4602      	mov	r2, r0
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	1ad3      	subs	r3, r2, r3
 8012980:	68ba      	ldr	r2, [r7, #8]
 8012982:	429a      	cmp	r2, r3
 8012984:	d302      	bcc.n	801298c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8012986:	68bb      	ldr	r3, [r7, #8]
 8012988:	2b00      	cmp	r3, #0
 801298a:	d113      	bne.n	80129b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801298c:	68fb      	ldr	r3, [r7, #12]
 801298e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012990:	f043 0220 	orr.w	r2, r3, #32
 8012994:	68fb      	ldr	r3, [r7, #12]
 8012996:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8012998:	68fb      	ldr	r3, [r7, #12]
 801299a:	2220      	movs	r2, #32
 801299c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	2200      	movs	r2, #0
 80129a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	2200      	movs	r2, #0
 80129ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80129b0:	2301      	movs	r3, #1
 80129b2:	e007      	b.n	80129c4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	699b      	ldr	r3, [r3, #24]
 80129ba:	f003 0302 	and.w	r3, r3, #2
 80129be:	2b02      	cmp	r3, #2
 80129c0:	d1cb      	bne.n	801295a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80129c2:	2300      	movs	r3, #0
}
 80129c4:	4618      	mov	r0, r3
 80129c6:	3710      	adds	r7, #16
 80129c8:	46bd      	mov	sp, r7
 80129ca:	bd80      	pop	{r7, pc}

080129cc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80129cc:	b580      	push	{r7, lr}
 80129ce:	b084      	sub	sp, #16
 80129d0:	af00      	add	r7, sp, #0
 80129d2:	60f8      	str	r0, [r7, #12]
 80129d4:	60b9      	str	r1, [r7, #8]
 80129d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80129d8:	e028      	b.n	8012a2c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80129da:	687a      	ldr	r2, [r7, #4]
 80129dc:	68b9      	ldr	r1, [r7, #8]
 80129de:	68f8      	ldr	r0, [r7, #12]
 80129e0:	f000 f830 	bl	8012a44 <I2C_IsErrorOccurred>
 80129e4:	4603      	mov	r3, r0
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d001      	beq.n	80129ee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80129ea:	2301      	movs	r3, #1
 80129ec:	e026      	b.n	8012a3c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80129ee:	f7fe fc67 	bl	80112c0 <HAL_GetTick>
 80129f2:	4602      	mov	r2, r0
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	1ad3      	subs	r3, r2, r3
 80129f8:	68ba      	ldr	r2, [r7, #8]
 80129fa:	429a      	cmp	r2, r3
 80129fc:	d302      	bcc.n	8012a04 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80129fe:	68bb      	ldr	r3, [r7, #8]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d113      	bne.n	8012a2c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8012a04:	68fb      	ldr	r3, [r7, #12]
 8012a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012a08:	f043 0220 	orr.w	r2, r3, #32
 8012a0c:	68fb      	ldr	r3, [r7, #12]
 8012a0e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8012a10:	68fb      	ldr	r3, [r7, #12]
 8012a12:	2220      	movs	r2, #32
 8012a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8012a18:	68fb      	ldr	r3, [r7, #12]
 8012a1a:	2200      	movs	r2, #0
 8012a1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8012a20:	68fb      	ldr	r3, [r7, #12]
 8012a22:	2200      	movs	r2, #0
 8012a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8012a28:	2301      	movs	r3, #1
 8012a2a:	e007      	b.n	8012a3c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	699b      	ldr	r3, [r3, #24]
 8012a32:	f003 0320 	and.w	r3, r3, #32
 8012a36:	2b20      	cmp	r3, #32
 8012a38:	d1cf      	bne.n	80129da <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8012a3a:	2300      	movs	r3, #0
}
 8012a3c:	4618      	mov	r0, r3
 8012a3e:	3710      	adds	r7, #16
 8012a40:	46bd      	mov	sp, r7
 8012a42:	bd80      	pop	{r7, pc}

08012a44 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8012a44:	b580      	push	{r7, lr}
 8012a46:	b08a      	sub	sp, #40	; 0x28
 8012a48:	af00      	add	r7, sp, #0
 8012a4a:	60f8      	str	r0, [r7, #12]
 8012a4c:	60b9      	str	r1, [r7, #8]
 8012a4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012a50:	2300      	movs	r3, #0
 8012a52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8012a56:	68fb      	ldr	r3, [r7, #12]
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	699b      	ldr	r3, [r3, #24]
 8012a5c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8012a5e:	2300      	movs	r3, #0
 8012a60:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8012a66:	69bb      	ldr	r3, [r7, #24]
 8012a68:	f003 0310 	and.w	r3, r3, #16
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d075      	beq.n	8012b5c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8012a70:	68fb      	ldr	r3, [r7, #12]
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	2210      	movs	r2, #16
 8012a76:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8012a78:	e056      	b.n	8012b28 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8012a7a:	68bb      	ldr	r3, [r7, #8]
 8012a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a80:	d052      	beq.n	8012b28 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8012a82:	f7fe fc1d 	bl	80112c0 <HAL_GetTick>
 8012a86:	4602      	mov	r2, r0
 8012a88:	69fb      	ldr	r3, [r7, #28]
 8012a8a:	1ad3      	subs	r3, r2, r3
 8012a8c:	68ba      	ldr	r2, [r7, #8]
 8012a8e:	429a      	cmp	r2, r3
 8012a90:	d302      	bcc.n	8012a98 <I2C_IsErrorOccurred+0x54>
 8012a92:	68bb      	ldr	r3, [r7, #8]
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d147      	bne.n	8012b28 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8012a98:	68fb      	ldr	r3, [r7, #12]
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	685b      	ldr	r3, [r3, #4]
 8012a9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012aa2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012aaa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8012aac:	68fb      	ldr	r3, [r7, #12]
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	699b      	ldr	r3, [r3, #24]
 8012ab2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012ab6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012aba:	d12e      	bne.n	8012b1a <I2C_IsErrorOccurred+0xd6>
 8012abc:	697b      	ldr	r3, [r7, #20]
 8012abe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012ac2:	d02a      	beq.n	8012b1a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8012ac4:	7cfb      	ldrb	r3, [r7, #19]
 8012ac6:	2b20      	cmp	r3, #32
 8012ac8:	d027      	beq.n	8012b1a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	681b      	ldr	r3, [r3, #0]
 8012ace:	685a      	ldr	r2, [r3, #4]
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8012ad8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8012ada:	f7fe fbf1 	bl	80112c0 <HAL_GetTick>
 8012ade:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8012ae0:	e01b      	b.n	8012b1a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8012ae2:	f7fe fbed 	bl	80112c0 <HAL_GetTick>
 8012ae6:	4602      	mov	r2, r0
 8012ae8:	69fb      	ldr	r3, [r7, #28]
 8012aea:	1ad3      	subs	r3, r2, r3
 8012aec:	2b19      	cmp	r3, #25
 8012aee:	d914      	bls.n	8012b1a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012af4:	f043 0220 	orr.w	r2, r3, #32
 8012af8:	68fb      	ldr	r3, [r7, #12]
 8012afa:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	2220      	movs	r2, #32
 8012b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8012b04:	68fb      	ldr	r3, [r7, #12]
 8012b06:	2200      	movs	r2, #0
 8012b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8012b0c:	68fb      	ldr	r3, [r7, #12]
 8012b0e:	2200      	movs	r2, #0
 8012b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8012b14:	2301      	movs	r3, #1
 8012b16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8012b1a:	68fb      	ldr	r3, [r7, #12]
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	699b      	ldr	r3, [r3, #24]
 8012b20:	f003 0320 	and.w	r3, r3, #32
 8012b24:	2b20      	cmp	r3, #32
 8012b26:	d1dc      	bne.n	8012ae2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	699b      	ldr	r3, [r3, #24]
 8012b2e:	f003 0320 	and.w	r3, r3, #32
 8012b32:	2b20      	cmp	r3, #32
 8012b34:	d003      	beq.n	8012b3e <I2C_IsErrorOccurred+0xfa>
 8012b36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d09d      	beq.n	8012a7a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8012b3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d103      	bne.n	8012b4e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	2220      	movs	r2, #32
 8012b4c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8012b4e:	6a3b      	ldr	r3, [r7, #32]
 8012b50:	f043 0304 	orr.w	r3, r3, #4
 8012b54:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8012b56:	2301      	movs	r3, #1
 8012b58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8012b5c:	68fb      	ldr	r3, [r7, #12]
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	699b      	ldr	r3, [r3, #24]
 8012b62:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8012b64:	69bb      	ldr	r3, [r7, #24]
 8012b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d00b      	beq.n	8012b86 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8012b6e:	6a3b      	ldr	r3, [r7, #32]
 8012b70:	f043 0301 	orr.w	r3, r3, #1
 8012b74:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012b7e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8012b80:	2301      	movs	r3, #1
 8012b82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8012b86:	69bb      	ldr	r3, [r7, #24]
 8012b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d00b      	beq.n	8012ba8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8012b90:	6a3b      	ldr	r3, [r7, #32]
 8012b92:	f043 0308 	orr.w	r3, r3, #8
 8012b96:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012ba0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8012ba2:	2301      	movs	r3, #1
 8012ba4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8012ba8:	69bb      	ldr	r3, [r7, #24]
 8012baa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d00b      	beq.n	8012bca <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8012bb2:	6a3b      	ldr	r3, [r7, #32]
 8012bb4:	f043 0302 	orr.w	r3, r3, #2
 8012bb8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	681b      	ldr	r3, [r3, #0]
 8012bbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012bc2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8012bc4:	2301      	movs	r3, #1
 8012bc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8012bca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d01c      	beq.n	8012c0c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8012bd2:	68f8      	ldr	r0, [r7, #12]
 8012bd4:	f7ff fe56 	bl	8012884 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8012bd8:	68fb      	ldr	r3, [r7, #12]
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	6859      	ldr	r1, [r3, #4]
 8012bde:	68fb      	ldr	r3, [r7, #12]
 8012be0:	681a      	ldr	r2, [r3, #0]
 8012be2:	4b0d      	ldr	r3, [pc, #52]	; (8012c18 <I2C_IsErrorOccurred+0x1d4>)
 8012be4:	400b      	ands	r3, r1
 8012be6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012bec:	6a3b      	ldr	r3, [r7, #32]
 8012bee:	431a      	orrs	r2, r3
 8012bf0:	68fb      	ldr	r3, [r7, #12]
 8012bf2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8012bf4:	68fb      	ldr	r3, [r7, #12]
 8012bf6:	2220      	movs	r2, #32
 8012bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8012bfc:	68fb      	ldr	r3, [r7, #12]
 8012bfe:	2200      	movs	r2, #0
 8012c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012c04:	68fb      	ldr	r3, [r7, #12]
 8012c06:	2200      	movs	r2, #0
 8012c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8012c0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8012c10:	4618      	mov	r0, r3
 8012c12:	3728      	adds	r7, #40	; 0x28
 8012c14:	46bd      	mov	sp, r7
 8012c16:	bd80      	pop	{r7, pc}
 8012c18:	fe00e800 	.word	0xfe00e800

08012c1c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8012c1c:	b480      	push	{r7}
 8012c1e:	b087      	sub	sp, #28
 8012c20:	af00      	add	r7, sp, #0
 8012c22:	60f8      	str	r0, [r7, #12]
 8012c24:	607b      	str	r3, [r7, #4]
 8012c26:	460b      	mov	r3, r1
 8012c28:	817b      	strh	r3, [r7, #10]
 8012c2a:	4613      	mov	r3, r2
 8012c2c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8012c2e:	897b      	ldrh	r3, [r7, #10]
 8012c30:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8012c34:	7a7b      	ldrb	r3, [r7, #9]
 8012c36:	041b      	lsls	r3, r3, #16
 8012c38:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8012c3c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8012c42:	6a3b      	ldr	r3, [r7, #32]
 8012c44:	4313      	orrs	r3, r2
 8012c46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012c4a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	685a      	ldr	r2, [r3, #4]
 8012c52:	6a3b      	ldr	r3, [r7, #32]
 8012c54:	0d5b      	lsrs	r3, r3, #21
 8012c56:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8012c5a:	4b08      	ldr	r3, [pc, #32]	; (8012c7c <I2C_TransferConfig+0x60>)
 8012c5c:	430b      	orrs	r3, r1
 8012c5e:	43db      	mvns	r3, r3
 8012c60:	ea02 0103 	and.w	r1, r2, r3
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	697a      	ldr	r2, [r7, #20]
 8012c6a:	430a      	orrs	r2, r1
 8012c6c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8012c6e:	bf00      	nop
 8012c70:	371c      	adds	r7, #28
 8012c72:	46bd      	mov	sp, r7
 8012c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c78:	4770      	bx	lr
 8012c7a:	bf00      	nop
 8012c7c:	03ff63ff 	.word	0x03ff63ff

08012c80 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8012c80:	b480      	push	{r7}
 8012c82:	b083      	sub	sp, #12
 8012c84:	af00      	add	r7, sp, #0
 8012c86:	6078      	str	r0, [r7, #4]
 8012c88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012c90:	b2db      	uxtb	r3, r3
 8012c92:	2b20      	cmp	r3, #32
 8012c94:	d138      	bne.n	8012d08 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012c9c:	2b01      	cmp	r3, #1
 8012c9e:	d101      	bne.n	8012ca4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8012ca0:	2302      	movs	r3, #2
 8012ca2:	e032      	b.n	8012d0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	2201      	movs	r2, #1
 8012ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	2224      	movs	r2, #36	; 0x24
 8012cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	681b      	ldr	r3, [r3, #0]
 8012cb8:	681a      	ldr	r2, [r3, #0]
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	f022 0201 	bic.w	r2, r2, #1
 8012cc2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	681b      	ldr	r3, [r3, #0]
 8012cc8:	681a      	ldr	r2, [r3, #0]
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8012cd2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	6819      	ldr	r1, [r3, #0]
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	683a      	ldr	r2, [r7, #0]
 8012ce0:	430a      	orrs	r2, r1
 8012ce2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	681b      	ldr	r3, [r3, #0]
 8012ce8:	681a      	ldr	r2, [r3, #0]
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	681b      	ldr	r3, [r3, #0]
 8012cee:	f042 0201 	orr.w	r2, r2, #1
 8012cf2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	2220      	movs	r2, #32
 8012cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	2200      	movs	r2, #0
 8012d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8012d04:	2300      	movs	r3, #0
 8012d06:	e000      	b.n	8012d0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8012d08:	2302      	movs	r3, #2
  }
}
 8012d0a:	4618      	mov	r0, r3
 8012d0c:	370c      	adds	r7, #12
 8012d0e:	46bd      	mov	sp, r7
 8012d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d14:	4770      	bx	lr

08012d16 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8012d16:	b480      	push	{r7}
 8012d18:	b085      	sub	sp, #20
 8012d1a:	af00      	add	r7, sp, #0
 8012d1c:	6078      	str	r0, [r7, #4]
 8012d1e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012d26:	b2db      	uxtb	r3, r3
 8012d28:	2b20      	cmp	r3, #32
 8012d2a:	d139      	bne.n	8012da0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012d32:	2b01      	cmp	r3, #1
 8012d34:	d101      	bne.n	8012d3a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8012d36:	2302      	movs	r3, #2
 8012d38:	e033      	b.n	8012da2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	2201      	movs	r2, #1
 8012d3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	2224      	movs	r2, #36	; 0x24
 8012d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	681b      	ldr	r3, [r3, #0]
 8012d4e:	681a      	ldr	r2, [r3, #0]
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	f022 0201 	bic.w	r2, r2, #1
 8012d58:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	681b      	ldr	r3, [r3, #0]
 8012d60:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8012d62:	68fb      	ldr	r3, [r7, #12]
 8012d64:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8012d68:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8012d6a:	683b      	ldr	r3, [r7, #0]
 8012d6c:	021b      	lsls	r3, r3, #8
 8012d6e:	68fa      	ldr	r2, [r7, #12]
 8012d70:	4313      	orrs	r3, r2
 8012d72:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	68fa      	ldr	r2, [r7, #12]
 8012d7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	681a      	ldr	r2, [r3, #0]
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	f042 0201 	orr.w	r2, r2, #1
 8012d8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	2220      	movs	r2, #32
 8012d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	2200      	movs	r2, #0
 8012d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8012d9c:	2300      	movs	r3, #0
 8012d9e:	e000      	b.n	8012da2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8012da0:	2302      	movs	r3, #2
  }
}
 8012da2:	4618      	mov	r0, r3
 8012da4:	3714      	adds	r7, #20
 8012da6:	46bd      	mov	sp, r7
 8012da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dac:	4770      	bx	lr
	...

08012db0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8012db0:	b580      	push	{r7, lr}
 8012db2:	b084      	sub	sp, #16
 8012db4:	af00      	add	r7, sp, #0
 8012db6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d101      	bne.n	8012dc2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8012dbe:	2301      	movs	r3, #1
 8012dc0:	e0bf      	b.n	8012f42 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8012dc8:	b2db      	uxtb	r3, r3
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d106      	bne.n	8012ddc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	2200      	movs	r2, #0
 8012dd2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8012dd6:	6878      	ldr	r0, [r7, #4]
 8012dd8:	f7ee f896 	bl	8000f08 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	2202      	movs	r2, #2
 8012de0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	699a      	ldr	r2, [r3, #24]
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8012df2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	6999      	ldr	r1, [r3, #24]
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	685a      	ldr	r2, [r3, #4]
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	689b      	ldr	r3, [r3, #8]
 8012e02:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8012e08:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	691b      	ldr	r3, [r3, #16]
 8012e0e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	681b      	ldr	r3, [r3, #0]
 8012e14:	430a      	orrs	r2, r1
 8012e16:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	681b      	ldr	r3, [r3, #0]
 8012e1c:	6899      	ldr	r1, [r3, #8]
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	681a      	ldr	r2, [r3, #0]
 8012e22:	4b4a      	ldr	r3, [pc, #296]	; (8012f4c <HAL_LTDC_Init+0x19c>)
 8012e24:	400b      	ands	r3, r1
 8012e26:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	695b      	ldr	r3, [r3, #20]
 8012e2c:	041b      	lsls	r3, r3, #16
 8012e2e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	6899      	ldr	r1, [r3, #8]
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	699a      	ldr	r2, [r3, #24]
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	431a      	orrs	r2, r3
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	430a      	orrs	r2, r1
 8012e44:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	68d9      	ldr	r1, [r3, #12]
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	681a      	ldr	r2, [r3, #0]
 8012e50:	4b3e      	ldr	r3, [pc, #248]	; (8012f4c <HAL_LTDC_Init+0x19c>)
 8012e52:	400b      	ands	r3, r1
 8012e54:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	69db      	ldr	r3, [r3, #28]
 8012e5a:	041b      	lsls	r3, r3, #16
 8012e5c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	68d9      	ldr	r1, [r3, #12]
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	6a1a      	ldr	r2, [r3, #32]
 8012e68:	68fb      	ldr	r3, [r7, #12]
 8012e6a:	431a      	orrs	r2, r3
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	430a      	orrs	r2, r1
 8012e72:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	6919      	ldr	r1, [r3, #16]
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	681a      	ldr	r2, [r3, #0]
 8012e7e:	4b33      	ldr	r3, [pc, #204]	; (8012f4c <HAL_LTDC_Init+0x19c>)
 8012e80:	400b      	ands	r3, r1
 8012e82:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e88:	041b      	lsls	r3, r3, #16
 8012e8a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	681b      	ldr	r3, [r3, #0]
 8012e90:	6919      	ldr	r1, [r3, #16]
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012e96:	68fb      	ldr	r3, [r7, #12]
 8012e98:	431a      	orrs	r2, r3
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	430a      	orrs	r2, r1
 8012ea0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	681b      	ldr	r3, [r3, #0]
 8012ea6:	6959      	ldr	r1, [r3, #20]
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	681a      	ldr	r2, [r3, #0]
 8012eac:	4b27      	ldr	r3, [pc, #156]	; (8012f4c <HAL_LTDC_Init+0x19c>)
 8012eae:	400b      	ands	r3, r1
 8012eb0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012eb6:	041b      	lsls	r3, r3, #16
 8012eb8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	6959      	ldr	r1, [r3, #20]
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012ec4:	68fb      	ldr	r3, [r7, #12]
 8012ec6:	431a      	orrs	r2, r3
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	681b      	ldr	r3, [r3, #0]
 8012ecc:	430a      	orrs	r2, r1
 8012ece:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8012ed6:	021b      	lsls	r3, r3, #8
 8012ed8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8012ee0:	041b      	lsls	r3, r3, #16
 8012ee2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	681b      	ldr	r3, [r3, #0]
 8012eee:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8012ef2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8012efa:	68ba      	ldr	r2, [r7, #8]
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	4313      	orrs	r3, r2
 8012f00:	687a      	ldr	r2, [r7, #4]
 8012f02:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8012f06:	431a      	orrs	r2, r3
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	430a      	orrs	r2, r1
 8012f0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	681b      	ldr	r3, [r3, #0]
 8012f14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	681b      	ldr	r3, [r3, #0]
 8012f1a:	f042 0206 	orr.w	r2, r2, #6
 8012f1e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	699a      	ldr	r2, [r3, #24]
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	f042 0201 	orr.w	r2, r2, #1
 8012f2e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	2200      	movs	r2, #0
 8012f34:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	2201      	movs	r2, #1
 8012f3c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8012f40:	2300      	movs	r3, #0
}
 8012f42:	4618      	mov	r0, r3
 8012f44:	3710      	adds	r7, #16
 8012f46:	46bd      	mov	sp, r7
 8012f48:	bd80      	pop	{r7, pc}
 8012f4a:	bf00      	nop
 8012f4c:	f000f800 	.word	0xf000f800

08012f50 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8012f50:	b580      	push	{r7, lr}
 8012f52:	b084      	sub	sp, #16
 8012f54:	af00      	add	r7, sp, #0
 8012f56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012f5e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	681b      	ldr	r3, [r3, #0]
 8012f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012f66:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	f003 0304 	and.w	r3, r3, #4
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d023      	beq.n	8012fba <HAL_LTDC_IRQHandler+0x6a>
 8012f72:	68bb      	ldr	r3, [r7, #8]
 8012f74:	f003 0304 	and.w	r3, r3, #4
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d01e      	beq.n	8012fba <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	f022 0204 	bic.w	r2, r2, #4
 8012f8a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	2204      	movs	r2, #4
 8012f92:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012f9a:	f043 0201 	orr.w	r2, r3, #1
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	2204      	movs	r2, #4
 8012fa8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	2200      	movs	r2, #0
 8012fb0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8012fb4:	6878      	ldr	r0, [r7, #4]
 8012fb6:	f000 f86f 	bl	8013098 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8012fba:	68fb      	ldr	r3, [r7, #12]
 8012fbc:	f003 0302 	and.w	r3, r3, #2
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d023      	beq.n	801300c <HAL_LTDC_IRQHandler+0xbc>
 8012fc4:	68bb      	ldr	r3, [r7, #8]
 8012fc6:	f003 0302 	and.w	r3, r3, #2
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	d01e      	beq.n	801300c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	681b      	ldr	r3, [r3, #0]
 8012fd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	681b      	ldr	r3, [r3, #0]
 8012fd8:	f022 0202 	bic.w	r2, r2, #2
 8012fdc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	2202      	movs	r2, #2
 8012fe4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012fec:	f043 0202 	orr.w	r2, r3, #2
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	2204      	movs	r2, #4
 8012ffa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	2200      	movs	r2, #0
 8013002:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8013006:	6878      	ldr	r0, [r7, #4]
 8013008:	f000 f846 	bl	8013098 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	f003 0301 	and.w	r3, r3, #1
 8013012:	2b00      	cmp	r3, #0
 8013014:	d01b      	beq.n	801304e <HAL_LTDC_IRQHandler+0xfe>
 8013016:	68bb      	ldr	r3, [r7, #8]
 8013018:	f003 0301 	and.w	r3, r3, #1
 801301c:	2b00      	cmp	r3, #0
 801301e:	d016      	beq.n	801304e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	681b      	ldr	r3, [r3, #0]
 801302a:	f022 0201 	bic.w	r2, r2, #1
 801302e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	681b      	ldr	r3, [r3, #0]
 8013034:	2201      	movs	r2, #1
 8013036:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	2201      	movs	r2, #1
 801303c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	2200      	movs	r2, #0
 8013044:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8013048:	6878      	ldr	r0, [r7, #4]
 801304a:	f7f0 fe05 	bl	8003c58 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	f003 0308 	and.w	r3, r3, #8
 8013054:	2b00      	cmp	r3, #0
 8013056:	d01b      	beq.n	8013090 <HAL_LTDC_IRQHandler+0x140>
 8013058:	68bb      	ldr	r3, [r7, #8]
 801305a:	f003 0308 	and.w	r3, r3, #8
 801305e:	2b00      	cmp	r3, #0
 8013060:	d016      	beq.n	8013090 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	681b      	ldr	r3, [r3, #0]
 8013066:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	f022 0208 	bic.w	r2, r2, #8
 8013070:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	2208      	movs	r2, #8
 8013078:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	2201      	movs	r2, #1
 801307e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	2200      	movs	r2, #0
 8013086:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 801308a:	6878      	ldr	r0, [r7, #4]
 801308c:	f000 f80e 	bl	80130ac <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8013090:	bf00      	nop
 8013092:	3710      	adds	r7, #16
 8013094:	46bd      	mov	sp, r7
 8013096:	bd80      	pop	{r7, pc}

08013098 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8013098:	b480      	push	{r7}
 801309a:	b083      	sub	sp, #12
 801309c:	af00      	add	r7, sp, #0
 801309e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80130a0:	bf00      	nop
 80130a2:	370c      	adds	r7, #12
 80130a4:	46bd      	mov	sp, r7
 80130a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130aa:	4770      	bx	lr

080130ac <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80130ac:	b480      	push	{r7}
 80130ae:	b083      	sub	sp, #12
 80130b0:	af00      	add	r7, sp, #0
 80130b2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80130b4:	bf00      	nop
 80130b6:	370c      	adds	r7, #12
 80130b8:	46bd      	mov	sp, r7
 80130ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130be:	4770      	bx	lr

080130c0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80130c0:	b5b0      	push	{r4, r5, r7, lr}
 80130c2:	b084      	sub	sp, #16
 80130c4:	af00      	add	r7, sp, #0
 80130c6:	60f8      	str	r0, [r7, #12]
 80130c8:	60b9      	str	r1, [r7, #8]
 80130ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80130d2:	2b01      	cmp	r3, #1
 80130d4:	d101      	bne.n	80130da <HAL_LTDC_ConfigLayer+0x1a>
 80130d6:	2302      	movs	r3, #2
 80130d8:	e02c      	b.n	8013134 <HAL_LTDC_ConfigLayer+0x74>
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	2201      	movs	r2, #1
 80130de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	2202      	movs	r2, #2
 80130e6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80130ea:	68fa      	ldr	r2, [r7, #12]
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	2134      	movs	r1, #52	; 0x34
 80130f0:	fb01 f303 	mul.w	r3, r1, r3
 80130f4:	4413      	add	r3, r2
 80130f6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80130fa:	68bb      	ldr	r3, [r7, #8]
 80130fc:	4614      	mov	r4, r2
 80130fe:	461d      	mov	r5, r3
 8013100:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013102:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013104:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013106:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013108:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801310a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801310c:	682b      	ldr	r3, [r5, #0]
 801310e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8013110:	687a      	ldr	r2, [r7, #4]
 8013112:	68b9      	ldr	r1, [r7, #8]
 8013114:	68f8      	ldr	r0, [r7, #12]
 8013116:	f000 f849 	bl	80131ac <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	2201      	movs	r2, #1
 8013120:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	2201      	movs	r2, #1
 8013126:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	2200      	movs	r2, #0
 801312e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8013132:	2300      	movs	r3, #0
}
 8013134:	4618      	mov	r0, r3
 8013136:	3710      	adds	r7, #16
 8013138:	46bd      	mov	sp, r7
 801313a:	bdb0      	pop	{r4, r5, r7, pc}

0801313c <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 801313c:	b480      	push	{r7}
 801313e:	b083      	sub	sp, #12
 8013140:	af00      	add	r7, sp, #0
 8013142:	6078      	str	r0, [r7, #4]
 8013144:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 801314c:	2b01      	cmp	r3, #1
 801314e:	d101      	bne.n	8013154 <HAL_LTDC_ProgramLineEvent+0x18>
 8013150:	2302      	movs	r3, #2
 8013152:	e023      	b.n	801319c <HAL_LTDC_ProgramLineEvent+0x60>
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	2201      	movs	r2, #1
 8013158:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	2202      	movs	r2, #2
 8013160:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	f022 0201 	bic.w	r2, r2, #1
 8013172:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8013174:	4a0c      	ldr	r2, [pc, #48]	; (80131a8 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8013176:	683b      	ldr	r3, [r7, #0]
 8013178:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	f042 0201 	orr.w	r2, r2, #1
 8013188:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	2201      	movs	r2, #1
 801318e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	2200      	movs	r2, #0
 8013196:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 801319a:	2300      	movs	r3, #0
}
 801319c:	4618      	mov	r0, r3
 801319e:	370c      	adds	r7, #12
 80131a0:	46bd      	mov	sp, r7
 80131a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131a6:	4770      	bx	lr
 80131a8:	50001000 	.word	0x50001000

080131ac <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80131ac:	b480      	push	{r7}
 80131ae:	b089      	sub	sp, #36	; 0x24
 80131b0:	af00      	add	r7, sp, #0
 80131b2:	60f8      	str	r0, [r7, #12]
 80131b4:	60b9      	str	r1, [r7, #8]
 80131b6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80131b8:	68bb      	ldr	r3, [r7, #8]
 80131ba:	685a      	ldr	r2, [r3, #4]
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	68db      	ldr	r3, [r3, #12]
 80131c2:	0c1b      	lsrs	r3, r3, #16
 80131c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80131c8:	4413      	add	r3, r2
 80131ca:	041b      	lsls	r3, r3, #16
 80131cc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80131ce:	68fb      	ldr	r3, [r7, #12]
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	461a      	mov	r2, r3
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	01db      	lsls	r3, r3, #7
 80131d8:	4413      	add	r3, r2
 80131da:	3384      	adds	r3, #132	; 0x84
 80131dc:	685b      	ldr	r3, [r3, #4]
 80131de:	68fa      	ldr	r2, [r7, #12]
 80131e0:	6812      	ldr	r2, [r2, #0]
 80131e2:	4611      	mov	r1, r2
 80131e4:	687a      	ldr	r2, [r7, #4]
 80131e6:	01d2      	lsls	r2, r2, #7
 80131e8:	440a      	add	r2, r1
 80131ea:	3284      	adds	r2, #132	; 0x84
 80131ec:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80131f0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80131f2:	68bb      	ldr	r3, [r7, #8]
 80131f4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80131f6:	68fb      	ldr	r3, [r7, #12]
 80131f8:	681b      	ldr	r3, [r3, #0]
 80131fa:	68db      	ldr	r3, [r3, #12]
 80131fc:	0c1b      	lsrs	r3, r3, #16
 80131fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8013202:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8013204:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	4619      	mov	r1, r3
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	01db      	lsls	r3, r3, #7
 8013210:	440b      	add	r3, r1
 8013212:	3384      	adds	r3, #132	; 0x84
 8013214:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8013216:	69fb      	ldr	r3, [r7, #28]
 8013218:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 801321a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 801321c:	68bb      	ldr	r3, [r7, #8]
 801321e:	68da      	ldr	r2, [r3, #12]
 8013220:	68fb      	ldr	r3, [r7, #12]
 8013222:	681b      	ldr	r3, [r3, #0]
 8013224:	68db      	ldr	r3, [r3, #12]
 8013226:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801322a:	4413      	add	r3, r2
 801322c:	041b      	lsls	r3, r3, #16
 801322e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8013230:	68fb      	ldr	r3, [r7, #12]
 8013232:	681b      	ldr	r3, [r3, #0]
 8013234:	461a      	mov	r2, r3
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	01db      	lsls	r3, r3, #7
 801323a:	4413      	add	r3, r2
 801323c:	3384      	adds	r3, #132	; 0x84
 801323e:	689b      	ldr	r3, [r3, #8]
 8013240:	68fa      	ldr	r2, [r7, #12]
 8013242:	6812      	ldr	r2, [r2, #0]
 8013244:	4611      	mov	r1, r2
 8013246:	687a      	ldr	r2, [r7, #4]
 8013248:	01d2      	lsls	r2, r2, #7
 801324a:	440a      	add	r2, r1
 801324c:	3284      	adds	r2, #132	; 0x84
 801324e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8013252:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8013254:	68bb      	ldr	r3, [r7, #8]
 8013256:	689a      	ldr	r2, [r3, #8]
 8013258:	68fb      	ldr	r3, [r7, #12]
 801325a:	681b      	ldr	r3, [r3, #0]
 801325c:	68db      	ldr	r3, [r3, #12]
 801325e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013262:	4413      	add	r3, r2
 8013264:	1c5a      	adds	r2, r3, #1
 8013266:	68fb      	ldr	r3, [r7, #12]
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	4619      	mov	r1, r3
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	01db      	lsls	r3, r3, #7
 8013270:	440b      	add	r3, r1
 8013272:	3384      	adds	r3, #132	; 0x84
 8013274:	4619      	mov	r1, r3
 8013276:	69fb      	ldr	r3, [r7, #28]
 8013278:	4313      	orrs	r3, r2
 801327a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	461a      	mov	r2, r3
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	01db      	lsls	r3, r3, #7
 8013286:	4413      	add	r3, r2
 8013288:	3384      	adds	r3, #132	; 0x84
 801328a:	691b      	ldr	r3, [r3, #16]
 801328c:	68fa      	ldr	r2, [r7, #12]
 801328e:	6812      	ldr	r2, [r2, #0]
 8013290:	4611      	mov	r1, r2
 8013292:	687a      	ldr	r2, [r7, #4]
 8013294:	01d2      	lsls	r2, r2, #7
 8013296:	440a      	add	r2, r1
 8013298:	3284      	adds	r2, #132	; 0x84
 801329a:	f023 0307 	bic.w	r3, r3, #7
 801329e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80132a0:	68fb      	ldr	r3, [r7, #12]
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	461a      	mov	r2, r3
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	01db      	lsls	r3, r3, #7
 80132aa:	4413      	add	r3, r2
 80132ac:	3384      	adds	r3, #132	; 0x84
 80132ae:	461a      	mov	r2, r3
 80132b0:	68bb      	ldr	r3, [r7, #8]
 80132b2:	691b      	ldr	r3, [r3, #16]
 80132b4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80132b6:	68bb      	ldr	r3, [r7, #8]
 80132b8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80132bc:	021b      	lsls	r3, r3, #8
 80132be:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80132c0:	68bb      	ldr	r3, [r7, #8]
 80132c2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80132c6:	041b      	lsls	r3, r3, #16
 80132c8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80132ca:	68bb      	ldr	r3, [r7, #8]
 80132cc:	699b      	ldr	r3, [r3, #24]
 80132ce:	061b      	lsls	r3, r3, #24
 80132d0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	461a      	mov	r2, r3
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	01db      	lsls	r3, r3, #7
 80132dc:	4413      	add	r3, r2
 80132de:	3384      	adds	r3, #132	; 0x84
 80132e0:	699b      	ldr	r3, [r3, #24]
 80132e2:	68fb      	ldr	r3, [r7, #12]
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	461a      	mov	r2, r3
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	01db      	lsls	r3, r3, #7
 80132ec:	4413      	add	r3, r2
 80132ee:	3384      	adds	r3, #132	; 0x84
 80132f0:	461a      	mov	r2, r3
 80132f2:	2300      	movs	r3, #0
 80132f4:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80132f6:	68bb      	ldr	r3, [r7, #8]
 80132f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80132fc:	461a      	mov	r2, r3
 80132fe:	69fb      	ldr	r3, [r7, #28]
 8013300:	431a      	orrs	r2, r3
 8013302:	69bb      	ldr	r3, [r7, #24]
 8013304:	431a      	orrs	r2, r3
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	4619      	mov	r1, r3
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	01db      	lsls	r3, r3, #7
 8013310:	440b      	add	r3, r1
 8013312:	3384      	adds	r3, #132	; 0x84
 8013314:	4619      	mov	r1, r3
 8013316:	697b      	ldr	r3, [r7, #20]
 8013318:	4313      	orrs	r3, r2
 801331a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	681b      	ldr	r3, [r3, #0]
 8013320:	461a      	mov	r2, r3
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	01db      	lsls	r3, r3, #7
 8013326:	4413      	add	r3, r2
 8013328:	3384      	adds	r3, #132	; 0x84
 801332a:	695b      	ldr	r3, [r3, #20]
 801332c:	68fa      	ldr	r2, [r7, #12]
 801332e:	6812      	ldr	r2, [r2, #0]
 8013330:	4611      	mov	r1, r2
 8013332:	687a      	ldr	r2, [r7, #4]
 8013334:	01d2      	lsls	r2, r2, #7
 8013336:	440a      	add	r2, r1
 8013338:	3284      	adds	r2, #132	; 0x84
 801333a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801333e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8013340:	68fb      	ldr	r3, [r7, #12]
 8013342:	681b      	ldr	r3, [r3, #0]
 8013344:	461a      	mov	r2, r3
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	01db      	lsls	r3, r3, #7
 801334a:	4413      	add	r3, r2
 801334c:	3384      	adds	r3, #132	; 0x84
 801334e:	461a      	mov	r2, r3
 8013350:	68bb      	ldr	r3, [r7, #8]
 8013352:	695b      	ldr	r3, [r3, #20]
 8013354:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	461a      	mov	r2, r3
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	01db      	lsls	r3, r3, #7
 8013360:	4413      	add	r3, r2
 8013362:	3384      	adds	r3, #132	; 0x84
 8013364:	69da      	ldr	r2, [r3, #28]
 8013366:	68fb      	ldr	r3, [r7, #12]
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	4619      	mov	r1, r3
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	01db      	lsls	r3, r3, #7
 8013370:	440b      	add	r3, r1
 8013372:	3384      	adds	r3, #132	; 0x84
 8013374:	4619      	mov	r1, r3
 8013376:	4b58      	ldr	r3, [pc, #352]	; (80134d8 <LTDC_SetConfig+0x32c>)
 8013378:	4013      	ands	r3, r2
 801337a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 801337c:	68bb      	ldr	r3, [r7, #8]
 801337e:	69da      	ldr	r2, [r3, #28]
 8013380:	68bb      	ldr	r3, [r7, #8]
 8013382:	6a1b      	ldr	r3, [r3, #32]
 8013384:	68f9      	ldr	r1, [r7, #12]
 8013386:	6809      	ldr	r1, [r1, #0]
 8013388:	4608      	mov	r0, r1
 801338a:	6879      	ldr	r1, [r7, #4]
 801338c:	01c9      	lsls	r1, r1, #7
 801338e:	4401      	add	r1, r0
 8013390:	3184      	adds	r1, #132	; 0x84
 8013392:	4313      	orrs	r3, r2
 8013394:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8013396:	68fb      	ldr	r3, [r7, #12]
 8013398:	681b      	ldr	r3, [r3, #0]
 801339a:	461a      	mov	r2, r3
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	01db      	lsls	r3, r3, #7
 80133a0:	4413      	add	r3, r2
 80133a2:	3384      	adds	r3, #132	; 0x84
 80133a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80133a6:	68fb      	ldr	r3, [r7, #12]
 80133a8:	681b      	ldr	r3, [r3, #0]
 80133aa:	461a      	mov	r2, r3
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	01db      	lsls	r3, r3, #7
 80133b0:	4413      	add	r3, r2
 80133b2:	3384      	adds	r3, #132	; 0x84
 80133b4:	461a      	mov	r2, r3
 80133b6:	2300      	movs	r3, #0
 80133b8:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80133ba:	68fb      	ldr	r3, [r7, #12]
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	461a      	mov	r2, r3
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	01db      	lsls	r3, r3, #7
 80133c4:	4413      	add	r3, r2
 80133c6:	3384      	adds	r3, #132	; 0x84
 80133c8:	461a      	mov	r2, r3
 80133ca:	68bb      	ldr	r3, [r7, #8]
 80133cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133ce:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80133d0:	68bb      	ldr	r3, [r7, #8]
 80133d2:	691b      	ldr	r3, [r3, #16]
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d102      	bne.n	80133de <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80133d8:	2304      	movs	r3, #4
 80133da:	61fb      	str	r3, [r7, #28]
 80133dc:	e01b      	b.n	8013416 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80133de:	68bb      	ldr	r3, [r7, #8]
 80133e0:	691b      	ldr	r3, [r3, #16]
 80133e2:	2b01      	cmp	r3, #1
 80133e4:	d102      	bne.n	80133ec <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80133e6:	2303      	movs	r3, #3
 80133e8:	61fb      	str	r3, [r7, #28]
 80133ea:	e014      	b.n	8013416 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80133ec:	68bb      	ldr	r3, [r7, #8]
 80133ee:	691b      	ldr	r3, [r3, #16]
 80133f0:	2b04      	cmp	r3, #4
 80133f2:	d00b      	beq.n	801340c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80133f4:	68bb      	ldr	r3, [r7, #8]
 80133f6:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80133f8:	2b02      	cmp	r3, #2
 80133fa:	d007      	beq.n	801340c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80133fc:	68bb      	ldr	r3, [r7, #8]
 80133fe:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8013400:	2b03      	cmp	r3, #3
 8013402:	d003      	beq.n	801340c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8013404:	68bb      	ldr	r3, [r7, #8]
 8013406:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8013408:	2b07      	cmp	r3, #7
 801340a:	d102      	bne.n	8013412 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 801340c:	2302      	movs	r3, #2
 801340e:	61fb      	str	r3, [r7, #28]
 8013410:	e001      	b.n	8013416 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8013412:	2301      	movs	r3, #1
 8013414:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8013416:	68fb      	ldr	r3, [r7, #12]
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	461a      	mov	r2, r3
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	01db      	lsls	r3, r3, #7
 8013420:	4413      	add	r3, r2
 8013422:	3384      	adds	r3, #132	; 0x84
 8013424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013426:	68fa      	ldr	r2, [r7, #12]
 8013428:	6812      	ldr	r2, [r2, #0]
 801342a:	4611      	mov	r1, r2
 801342c:	687a      	ldr	r2, [r7, #4]
 801342e:	01d2      	lsls	r2, r2, #7
 8013430:	440a      	add	r2, r1
 8013432:	3284      	adds	r2, #132	; 0x84
 8013434:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8013438:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 801343a:	68bb      	ldr	r3, [r7, #8]
 801343c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801343e:	69fa      	ldr	r2, [r7, #28]
 8013440:	fb02 f303 	mul.w	r3, r2, r3
 8013444:	041a      	lsls	r2, r3, #16
 8013446:	68bb      	ldr	r3, [r7, #8]
 8013448:	6859      	ldr	r1, [r3, #4]
 801344a:	68bb      	ldr	r3, [r7, #8]
 801344c:	681b      	ldr	r3, [r3, #0]
 801344e:	1acb      	subs	r3, r1, r3
 8013450:	69f9      	ldr	r1, [r7, #28]
 8013452:	fb01 f303 	mul.w	r3, r1, r3
 8013456:	3307      	adds	r3, #7
 8013458:	68f9      	ldr	r1, [r7, #12]
 801345a:	6809      	ldr	r1, [r1, #0]
 801345c:	4608      	mov	r0, r1
 801345e:	6879      	ldr	r1, [r7, #4]
 8013460:	01c9      	lsls	r1, r1, #7
 8013462:	4401      	add	r1, r0
 8013464:	3184      	adds	r1, #132	; 0x84
 8013466:	4313      	orrs	r3, r2
 8013468:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 801346a:	68fb      	ldr	r3, [r7, #12]
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	461a      	mov	r2, r3
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	01db      	lsls	r3, r3, #7
 8013474:	4413      	add	r3, r2
 8013476:	3384      	adds	r3, #132	; 0x84
 8013478:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801347a:	68fb      	ldr	r3, [r7, #12]
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	4619      	mov	r1, r3
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	01db      	lsls	r3, r3, #7
 8013484:	440b      	add	r3, r1
 8013486:	3384      	adds	r3, #132	; 0x84
 8013488:	4619      	mov	r1, r3
 801348a:	4b14      	ldr	r3, [pc, #80]	; (80134dc <LTDC_SetConfig+0x330>)
 801348c:	4013      	ands	r3, r2
 801348e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	681b      	ldr	r3, [r3, #0]
 8013494:	461a      	mov	r2, r3
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	01db      	lsls	r3, r3, #7
 801349a:	4413      	add	r3, r2
 801349c:	3384      	adds	r3, #132	; 0x84
 801349e:	461a      	mov	r2, r3
 80134a0:	68bb      	ldr	r3, [r7, #8]
 80134a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134a4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80134a6:	68fb      	ldr	r3, [r7, #12]
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	461a      	mov	r2, r3
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	01db      	lsls	r3, r3, #7
 80134b0:	4413      	add	r3, r2
 80134b2:	3384      	adds	r3, #132	; 0x84
 80134b4:	681b      	ldr	r3, [r3, #0]
 80134b6:	68fa      	ldr	r2, [r7, #12]
 80134b8:	6812      	ldr	r2, [r2, #0]
 80134ba:	4611      	mov	r1, r2
 80134bc:	687a      	ldr	r2, [r7, #4]
 80134be:	01d2      	lsls	r2, r2, #7
 80134c0:	440a      	add	r2, r1
 80134c2:	3284      	adds	r2, #132	; 0x84
 80134c4:	f043 0301 	orr.w	r3, r3, #1
 80134c8:	6013      	str	r3, [r2, #0]
}
 80134ca:	bf00      	nop
 80134cc:	3724      	adds	r7, #36	; 0x24
 80134ce:	46bd      	mov	sp, r7
 80134d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134d4:	4770      	bx	lr
 80134d6:	bf00      	nop
 80134d8:	fffff8f8 	.word	0xfffff8f8
 80134dc:	fffff800 	.word	0xfffff800

080134e0 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80134e0:	b580      	push	{r7, lr}
 80134e2:	b084      	sub	sp, #16
 80134e4:	af00      	add	r7, sp, #0
 80134e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80134e8:	f7fd feea 	bl	80112c0 <HAL_GetTick>
 80134ec:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d101      	bne.n	80134f8 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 80134f4:	2301      	movs	r3, #1
 80134f6:	e03b      	b.n	8013570 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	2200      	movs	r2, #0
 80134fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	2202      	movs	r2, #2
 8013504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	68da      	ldr	r2, [r3, #12]
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	681b      	ldr	r3, [r3, #0]
 8013512:	f022 0201 	bic.w	r2, r2, #1
 8013516:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8013518:	e00f      	b.n	801353a <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 801351a:	f7fd fed1 	bl	80112c0 <HAL_GetTick>
 801351e:	4602      	mov	r2, r0
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	1ad3      	subs	r3, r2, r3
 8013524:	2b05      	cmp	r3, #5
 8013526:	d908      	bls.n	801353a <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	2240      	movs	r2, #64	; 0x40
 801352c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	2203      	movs	r2, #3
 8013532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 8013536:	2301      	movs	r3, #1
 8013538:	e01a      	b.n	8013570 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	681b      	ldr	r3, [r3, #0]
 801353e:	68db      	ldr	r3, [r3, #12]
 8013540:	f003 0301 	and.w	r3, r3, #1
 8013544:	2b00      	cmp	r3, #0
 8013546:	d1e8      	bne.n	801351a <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8013548:	6878      	ldr	r0, [r7, #4]
 801354a:	f000 f894 	bl	8013676 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	2200      	movs	r2, #0
 8013552:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	2200      	movs	r2, #0
 8013558:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	2200      	movs	r2, #0
 801355e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	2200      	movs	r2, #0
 8013564:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	2201      	movs	r2, #1
 801356a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801356e:	2300      	movs	r3, #0
}
 8013570:	4618      	mov	r0, r3
 8013572:	3710      	adds	r7, #16
 8013574:	46bd      	mov	sp, r7
 8013576:	bd80      	pop	{r7, pc}

08013578 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 8013578:	b480      	push	{r7}
 801357a:	b083      	sub	sp, #12
 801357c:	af00      	add	r7, sp, #0
 801357e:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	2b00      	cmp	r3, #0
 8013584:	d101      	bne.n	801358a <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8013586:	2301      	movs	r3, #1
 8013588:	e048      	b.n	801361c <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	681b      	ldr	r3, [r3, #0]
 801358e:	68da      	ldr	r2, [r3, #12]
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	f022 0201 	bic.w	r2, r2, #1
 8013598:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	681b      	ldr	r3, [r3, #0]
 801359e:	2200      	movs	r2, #0
 80135a0:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	2200      	movs	r2, #0
 80135a8:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	681b      	ldr	r3, [r3, #0]
 80135ae:	2200      	movs	r2, #0
 80135b0:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	681b      	ldr	r3, [r3, #0]
 80135b6:	2200      	movs	r2, #0
 80135b8:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	681b      	ldr	r3, [r3, #0]
 80135be:	2200      	movs	r2, #0
 80135c0:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	681b      	ldr	r3, [r3, #0]
 80135c6:	2200      	movs	r2, #0
 80135c8:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	2200      	movs	r2, #0
 80135d0:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	2200      	movs	r2, #0
 80135d8:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	681b      	ldr	r3, [r3, #0]
 80135de:	2200      	movs	r2, #0
 80135e0:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	2200      	movs	r2, #0
 80135e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	681b      	ldr	r3, [r3, #0]
 80135ee:	221f      	movs	r2, #31
 80135f0:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	2200      	movs	r2, #0
 80135f6:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	2200      	movs	r2, #0
 80135fc:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	2200      	movs	r2, #0
 8013602:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	2200      	movs	r2, #0
 8013608:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	2200      	movs	r2, #0
 801360e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	2200      	movs	r2, #0
 8013616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801361a:	2300      	movs	r3, #0
}
 801361c:	4618      	mov	r0, r3
 801361e:	370c      	adds	r7, #12
 8013620:	46bd      	mov	sp, r7
 8013622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013626:	4770      	bx	lr

08013628 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 8013628:	b480      	push	{r7}
 801362a:	b083      	sub	sp, #12
 801362c:	af00      	add	r7, sp, #0
 801362e:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	2b00      	cmp	r3, #0
 8013634:	d101      	bne.n	801363a <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8013636:	2301      	movs	r3, #1
 8013638:	e017      	b.n	801366a <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013640:	b2db      	uxtb	r3, r3
 8013642:	2b02      	cmp	r3, #2
 8013644:	d004      	beq.n	8013650 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	2280      	movs	r2, #128	; 0x80
 801364a:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
 801364c:	2301      	movs	r3, #1
 801364e:	e00c      	b.n	801366a <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	2204      	movs	r2, #4
 8013654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	681b      	ldr	r3, [r3, #0]
 801365c:	68da      	ldr	r2, [r3, #12]
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	681b      	ldr	r3, [r3, #0]
 8013662:	f022 0201 	bic.w	r2, r2, #1
 8013666:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 8013668:	2300      	movs	r3, #0
}
 801366a:	4618      	mov	r0, r3
 801366c:	370c      	adds	r7, #12
 801366e:	46bd      	mov	sp, r7
 8013670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013674:	4770      	bx	lr

08013676 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8013676:	b480      	push	{r7}
 8013678:	b085      	sub	sp, #20
 801367a:	af00      	add	r7, sp, #0
 801367c:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	68d9      	ldr	r1, [r3, #12]
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	691a      	ldr	r2, [r3, #16]
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	430a      	orrs	r2, r1
 801368c:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	695a      	ldr	r2, [r3, #20]
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	699b      	ldr	r3, [r3, #24]
 8013696:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 801369c:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	6a1b      	ldr	r3, [r3, #32]
 80136a2:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80136a8:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136ae:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80136b4:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80136ba:	3b01      	subs	r3, #1
 80136bc:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 80136be:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80136ca:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80136cc:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	685b      	ldr	r3, [r3, #4]
 80136d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80136d6:	d107      	bne.n	80136e8 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	681b      	ldr	r3, [r3, #0]
 80136dc:	691a      	ldr	r2, [r3, #16]
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	681b      	ldr	r3, [r3, #0]
 80136e2:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 80136e6:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	681b      	ldr	r3, [r3, #0]
 80136ec:	2200      	movs	r2, #0
 80136ee:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	da11      	bge.n	801371c <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	681b      	ldr	r3, [r3, #0]
 80136fc:	695a      	ldr	r2, [r3, #20]
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8013706:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801370c:	425b      	negs	r3, r3
 801370e:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	681b      	ldr	r3, [r3, #0]
 8013714:	68fa      	ldr	r2, [r7, #12]
 8013716:	b292      	uxth	r2, r2
 8013718:	621a      	str	r2, [r3, #32]
 801371a:	e006      	b.n	801372a <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013720:	461a      	mov	r2, r3
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	681b      	ldr	r3, [r3, #0]
 8013726:	b292      	uxth	r2, r2
 8013728:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801372e:	2b00      	cmp	r3, #0
 8013730:	da15      	bge.n	801375e <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	695a      	ldr	r2, [r3, #20]
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	681b      	ldr	r3, [r3, #0]
 801373c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8013740:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013746:	425b      	negs	r3, r3
 8013748:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	681b      	ldr	r3, [r3, #0]
 801374e:	6a19      	ldr	r1, [r3, #32]
 8013750:	68fb      	ldr	r3, [r7, #12]
 8013752:	041a      	lsls	r2, r3, #16
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	681b      	ldr	r3, [r3, #0]
 8013758:	430a      	orrs	r2, r1
 801375a:	621a      	str	r2, [r3, #32]
 801375c:	e009      	b.n	8013772 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	681b      	ldr	r3, [r3, #0]
 8013762:	6a19      	ldr	r1, [r3, #32]
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013768:	041a      	lsls	r2, r3, #16
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	430a      	orrs	r2, r1
 8013770:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	685b      	ldr	r3, [r3, #4]
 8013776:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801377a:	d006      	beq.n	801378a <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	685a      	ldr	r2, [r3, #4]
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	681b      	ldr	r3, [r3, #0]
 8013784:	b2d2      	uxtb	r2, r2
 8013786:	629a      	str	r2, [r3, #40]	; 0x28
 8013788:	e003      	b.n	8013792 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	681b      	ldr	r3, [r3, #0]
 801378e:	2200      	movs	r2, #0
 8013790:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	681b      	ldr	r3, [r3, #0]
 8013796:	2200      	movs	r2, #0
 8013798:	625a      	str	r2, [r3, #36]	; 0x24
}
 801379a:	bf00      	nop
 801379c:	3714      	adds	r7, #20
 801379e:	46bd      	mov	sp, r7
 80137a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137a4:	4770      	bx	lr
	...

080137a8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80137a8:	b580      	push	{r7, lr}
 80137aa:	b084      	sub	sp, #16
 80137ac:	af00      	add	r7, sp, #0
 80137ae:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80137b0:	4b29      	ldr	r3, [pc, #164]	; (8013858 <HAL_PWREx_ConfigSupply+0xb0>)
 80137b2:	68db      	ldr	r3, [r3, #12]
 80137b4:	f003 0307 	and.w	r3, r3, #7
 80137b8:	2b06      	cmp	r3, #6
 80137ba:	d00a      	beq.n	80137d2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80137bc:	4b26      	ldr	r3, [pc, #152]	; (8013858 <HAL_PWREx_ConfigSupply+0xb0>)
 80137be:	68db      	ldr	r3, [r3, #12]
 80137c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80137c4:	687a      	ldr	r2, [r7, #4]
 80137c6:	429a      	cmp	r2, r3
 80137c8:	d001      	beq.n	80137ce <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80137ca:	2301      	movs	r3, #1
 80137cc:	e040      	b.n	8013850 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80137ce:	2300      	movs	r3, #0
 80137d0:	e03e      	b.n	8013850 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80137d2:	4b21      	ldr	r3, [pc, #132]	; (8013858 <HAL_PWREx_ConfigSupply+0xb0>)
 80137d4:	68db      	ldr	r3, [r3, #12]
 80137d6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80137da:	491f      	ldr	r1, [pc, #124]	; (8013858 <HAL_PWREx_ConfigSupply+0xb0>)
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	4313      	orrs	r3, r2
 80137e0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80137e2:	f7fd fd6d 	bl	80112c0 <HAL_GetTick>
 80137e6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80137e8:	e009      	b.n	80137fe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80137ea:	f7fd fd69 	bl	80112c0 <HAL_GetTick>
 80137ee:	4602      	mov	r2, r0
 80137f0:	68fb      	ldr	r3, [r7, #12]
 80137f2:	1ad3      	subs	r3, r2, r3
 80137f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80137f8:	d901      	bls.n	80137fe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80137fa:	2301      	movs	r3, #1
 80137fc:	e028      	b.n	8013850 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80137fe:	4b16      	ldr	r3, [pc, #88]	; (8013858 <HAL_PWREx_ConfigSupply+0xb0>)
 8013800:	685b      	ldr	r3, [r3, #4]
 8013802:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013806:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801380a:	d1ee      	bne.n	80137ea <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	2b1e      	cmp	r3, #30
 8013810:	d008      	beq.n	8013824 <HAL_PWREx_ConfigSupply+0x7c>
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	2b2e      	cmp	r3, #46	; 0x2e
 8013816:	d005      	beq.n	8013824 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	2b1d      	cmp	r3, #29
 801381c:	d002      	beq.n	8013824 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	2b2d      	cmp	r3, #45	; 0x2d
 8013822:	d114      	bne.n	801384e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8013824:	f7fd fd4c 	bl	80112c0 <HAL_GetTick>
 8013828:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 801382a:	e009      	b.n	8013840 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801382c:	f7fd fd48 	bl	80112c0 <HAL_GetTick>
 8013830:	4602      	mov	r2, r0
 8013832:	68fb      	ldr	r3, [r7, #12]
 8013834:	1ad3      	subs	r3, r2, r3
 8013836:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801383a:	d901      	bls.n	8013840 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 801383c:	2301      	movs	r3, #1
 801383e:	e007      	b.n	8013850 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8013840:	4b05      	ldr	r3, [pc, #20]	; (8013858 <HAL_PWREx_ConfigSupply+0xb0>)
 8013842:	68db      	ldr	r3, [r3, #12]
 8013844:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801384c:	d1ee      	bne.n	801382c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 801384e:	2300      	movs	r3, #0
}
 8013850:	4618      	mov	r0, r3
 8013852:	3710      	adds	r7, #16
 8013854:	46bd      	mov	sp, r7
 8013856:	bd80      	pop	{r7, pc}
 8013858:	58024800 	.word	0x58024800

0801385c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 801385c:	b580      	push	{r7, lr}
 801385e:	b086      	sub	sp, #24
 8013860:	af02      	add	r7, sp, #8
 8013862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8013864:	f7fd fd2c 	bl	80112c0 <HAL_GetTick>
 8013868:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	2b00      	cmp	r3, #0
 801386e:	d101      	bne.n	8013874 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8013870:	2301      	movs	r3, #1
 8013872:	e05f      	b.n	8013934 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801387a:	b2db      	uxtb	r3, r3
 801387c:	2b00      	cmp	r3, #0
 801387e:	d107      	bne.n	8013890 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8013880:	6878      	ldr	r0, [r7, #4]
 8013882:	f7ed fc33 	bl	80010ec <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8013886:	f241 3188 	movw	r1, #5000	; 0x1388
 801388a:	6878      	ldr	r0, [r7, #4]
 801388c:	f000 fcca 	bl	8014224 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	681b      	ldr	r3, [r3, #0]
 8013894:	681b      	ldr	r3, [r3, #0]
 8013896:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	689b      	ldr	r3, [r3, #8]
 801389e:	3b01      	subs	r3, #1
 80138a0:	021a      	lsls	r2, r3, #8
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	430a      	orrs	r2, r1
 80138a8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80138ae:	9300      	str	r3, [sp, #0]
 80138b0:	68fb      	ldr	r3, [r7, #12]
 80138b2:	2200      	movs	r2, #0
 80138b4:	2120      	movs	r1, #32
 80138b6:	6878      	ldr	r0, [r7, #4]
 80138b8:	f000 fcf5 	bl	80142a6 <QSPI_WaitFlagStateUntilTimeout>
 80138bc:	4603      	mov	r3, r0
 80138be:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80138c0:	7afb      	ldrb	r3, [r7, #11]
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d135      	bne.n	8013932 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	681b      	ldr	r3, [r3, #0]
 80138ca:	681a      	ldr	r2, [r3, #0]
 80138cc:	4b1b      	ldr	r3, [pc, #108]	; (801393c <HAL_QSPI_Init+0xe0>)
 80138ce:	4013      	ands	r3, r2
 80138d0:	687a      	ldr	r2, [r7, #4]
 80138d2:	6852      	ldr	r2, [r2, #4]
 80138d4:	0611      	lsls	r1, r2, #24
 80138d6:	687a      	ldr	r2, [r7, #4]
 80138d8:	68d2      	ldr	r2, [r2, #12]
 80138da:	4311      	orrs	r1, r2
 80138dc:	687a      	ldr	r2, [r7, #4]
 80138de:	69d2      	ldr	r2, [r2, #28]
 80138e0:	4311      	orrs	r1, r2
 80138e2:	687a      	ldr	r2, [r7, #4]
 80138e4:	6a12      	ldr	r2, [r2, #32]
 80138e6:	4311      	orrs	r1, r2
 80138e8:	687a      	ldr	r2, [r7, #4]
 80138ea:	6812      	ldr	r2, [r2, #0]
 80138ec:	430b      	orrs	r3, r1
 80138ee:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	681b      	ldr	r3, [r3, #0]
 80138f4:	685a      	ldr	r2, [r3, #4]
 80138f6:	4b12      	ldr	r3, [pc, #72]	; (8013940 <HAL_QSPI_Init+0xe4>)
 80138f8:	4013      	ands	r3, r2
 80138fa:	687a      	ldr	r2, [r7, #4]
 80138fc:	6912      	ldr	r2, [r2, #16]
 80138fe:	0411      	lsls	r1, r2, #16
 8013900:	687a      	ldr	r2, [r7, #4]
 8013902:	6952      	ldr	r2, [r2, #20]
 8013904:	4311      	orrs	r1, r2
 8013906:	687a      	ldr	r2, [r7, #4]
 8013908:	6992      	ldr	r2, [r2, #24]
 801390a:	4311      	orrs	r1, r2
 801390c:	687a      	ldr	r2, [r7, #4]
 801390e:	6812      	ldr	r2, [r2, #0]
 8013910:	430b      	orrs	r3, r1
 8013912:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	681b      	ldr	r3, [r3, #0]
 8013918:	681a      	ldr	r2, [r3, #0]
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	f042 0201 	orr.w	r2, r2, #1
 8013922:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	2200      	movs	r2, #0
 8013928:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	2201      	movs	r2, #1
 801392e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8013932:	7afb      	ldrb	r3, [r7, #11]
}
 8013934:	4618      	mov	r0, r3
 8013936:	3710      	adds	r7, #16
 8013938:	46bd      	mov	sp, r7
 801393a:	bd80      	pop	{r7, pc}
 801393c:	00ffff2f 	.word	0x00ffff2f
 8013940:	ffe0f8fe 	.word	0xffe0f8fe

08013944 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 8013944:	b580      	push	{r7, lr}
 8013946:	b086      	sub	sp, #24
 8013948:	af00      	add	r7, sp, #0
 801394a:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	689b      	ldr	r3, [r3, #8]
 8013952:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	681b      	ldr	r3, [r3, #0]
 8013958:	681b      	ldr	r3, [r3, #0]
 801395a:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 801395c:	697b      	ldr	r3, [r7, #20]
 801395e:	f003 0304 	and.w	r3, r3, #4
 8013962:	2b00      	cmp	r3, #0
 8013964:	d064      	beq.n	8013a30 <HAL_QSPI_IRQHandler+0xec>
 8013966:	693b      	ldr	r3, [r7, #16]
 8013968:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801396c:	2b00      	cmp	r3, #0
 801396e:	d05f      	beq.n	8013a30 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	3320      	adds	r3, #32
 8013976:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801397e:	b2db      	uxtb	r3, r3
 8013980:	2b12      	cmp	r3, #18
 8013982:	d125      	bne.n	80139d0 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8013984:	e01c      	b.n	80139c0 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801398a:	2b00      	cmp	r3, #0
 801398c:	d00f      	beq.n	80139ae <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013992:	781a      	ldrb	r2, [r3, #0]
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801399c:	1c5a      	adds	r2, r3, #1
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139a6:	1e5a      	subs	r2, r3, #1
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80139ac:	e008      	b.n	80139c0 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	681b      	ldr	r3, [r3, #0]
 80139b2:	681a      	ldr	r2, [r3, #0]
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	681b      	ldr	r3, [r3, #0]
 80139b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80139bc:	601a      	str	r2, [r3, #0]
          break;
 80139be:	e033      	b.n	8013a28 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	681b      	ldr	r3, [r3, #0]
 80139c4:	689b      	ldr	r3, [r3, #8]
 80139c6:	f003 0304 	and.w	r3, r3, #4
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d1db      	bne.n	8013986 <HAL_QSPI_IRQHandler+0x42>
 80139ce:	e02b      	b.n	8013a28 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80139d6:	b2db      	uxtb	r3, r3
 80139d8:	2b22      	cmp	r3, #34	; 0x22
 80139da:	d125      	bne.n	8013a28 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 80139dc:	e01d      	b.n	8013a1a <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d010      	beq.n	8013a08 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139ea:	68fa      	ldr	r2, [r7, #12]
 80139ec:	7812      	ldrb	r2, [r2, #0]
 80139ee:	b2d2      	uxtb	r2, r2
 80139f0:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139f6:	1c5a      	adds	r2, r3, #1
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a00:	1e5a      	subs	r2, r3, #1
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	639a      	str	r2, [r3, #56]	; 0x38
 8013a06:	e008      	b.n	8013a1a <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	681b      	ldr	r3, [r3, #0]
 8013a0c:	681a      	ldr	r2, [r3, #0]
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8013a16:	601a      	str	r2, [r3, #0]
          break;
 8013a18:	e006      	b.n	8013a28 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	681b      	ldr	r3, [r3, #0]
 8013a1e:	689b      	ldr	r3, [r3, #8]
 8013a20:	f003 0304 	and.w	r3, r3, #4
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d1da      	bne.n	80139de <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 8013a28:	6878      	ldr	r0, [r7, #4]
 8013a2a:	f000 fbdd 	bl	80141e8 <HAL_QSPI_FifoThresholdCallback>
 8013a2e:	e13c      	b.n	8013caa <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 8013a30:	697b      	ldr	r3, [r7, #20]
 8013a32:	f003 0302 	and.w	r3, r3, #2
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	f000 80b0 	beq.w	8013b9c <HAL_QSPI_IRQHandler+0x258>
 8013a3c:	693b      	ldr	r3, [r7, #16]
 8013a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	f000 80aa 	beq.w	8013b9c <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	681b      	ldr	r3, [r3, #0]
 8013a4c:	2202      	movs	r2, #2
 8013a4e:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	681b      	ldr	r3, [r3, #0]
 8013a54:	681a      	ldr	r2, [r3, #0]
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8013a5e:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013a66:	b2db      	uxtb	r3, r3
 8013a68:	2b12      	cmp	r3, #18
 8013a6a:	d120      	bne.n	8013aae <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	681b      	ldr	r3, [r3, #0]
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	f003 0304 	and.w	r3, r3, #4
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d011      	beq.n	8013a9e <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	681b      	ldr	r3, [r3, #0]
 8013a7e:	681a      	ldr	r2, [r3, #0]
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	681b      	ldr	r3, [r3, #0]
 8013a84:	f022 0204 	bic.w	r2, r2, #4
 8013a88:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	68da      	ldr	r2, [r3, #12]
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013a96:	681b      	ldr	r3, [r3, #0]
 8013a98:	f022 0201 	bic.w	r2, r2, #1
 8013a9c:	60da      	str	r2, [r3, #12]
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	2201      	movs	r2, #1
 8013aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 8013aa6:	6878      	ldr	r0, [r7, #4]
 8013aa8:	f000 fb94 	bl	80141d4 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8013aac:	e0fa      	b.n	8013ca4 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013ab4:	b2db      	uxtb	r3, r3
 8013ab6:	2b22      	cmp	r3, #34	; 0x22
 8013ab8:	d143      	bne.n	8013b42 <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	681b      	ldr	r3, [r3, #0]
 8013ac0:	f003 0304 	and.w	r3, r3, #4
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d012      	beq.n	8013aee <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	681b      	ldr	r3, [r3, #0]
 8013acc:	681a      	ldr	r2, [r3, #0]
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	f022 0204 	bic.w	r2, r2, #4
 8013ad6:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013adc:	681b      	ldr	r3, [r3, #0]
 8013ade:	68da      	ldr	r2, [r3, #12]
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	f022 0201 	bic.w	r2, r2, #1
 8013aea:	60da      	str	r2, [r3, #12]
 8013aec:	e021      	b.n	8013b32 <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	681b      	ldr	r3, [r3, #0]
 8013af2:	3320      	adds	r3, #32
 8013af4:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8013af6:	e013      	b.n	8013b20 <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d017      	beq.n	8013b30 <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b04:	68fa      	ldr	r2, [r7, #12]
 8013b06:	7812      	ldrb	r2, [r2, #0]
 8013b08:	b2d2      	uxtb	r2, r2
 8013b0a:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b10:	1c5a      	adds	r2, r3, #1
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b1a:	1e5a      	subs	r2, r3, #1
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	681b      	ldr	r3, [r3, #0]
 8013b24:	689b      	ldr	r3, [r3, #8]
 8013b26:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d1e4      	bne.n	8013af8 <HAL_QSPI_IRQHandler+0x1b4>
 8013b2e:	e000      	b.n	8013b32 <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 8013b30:	bf00      	nop
        }
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	2201      	movs	r2, #1
 8013b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 8013b3a:	6878      	ldr	r0, [r7, #4]
 8013b3c:	f000 fb40 	bl	80141c0 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8013b40:	e0b0      	b.n	8013ca4 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013b48:	b2db      	uxtb	r3, r3
 8013b4a:	2b02      	cmp	r3, #2
 8013b4c:	d107      	bne.n	8013b5e <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	2201      	movs	r2, #1
 8013b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 8013b56:	6878      	ldr	r0, [r7, #4]
 8013b58:	f000 fb28 	bl	80141ac <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8013b5c:	e0a2      	b.n	8013ca4 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013b64:	b2db      	uxtb	r3, r3
 8013b66:	2b08      	cmp	r3, #8
 8013b68:	f040 809c 	bne.w	8013ca4 <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	681b      	ldr	r3, [r3, #0]
 8013b70:	695a      	ldr	r2, [r3, #20]
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	681b      	ldr	r3, [r3, #0]
 8013b76:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8013b7a:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	2201      	movs	r2, #1
 8013b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d103      	bne.n	8013b94 <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 8013b8c:	6878      	ldr	r0, [r7, #4]
 8013b8e:	f000 fb03 	bl	8014198 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8013b92:	e087      	b.n	8013ca4 <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8013b94:	6878      	ldr	r0, [r7, #4]
 8013b96:	f000 faf5 	bl	8014184 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8013b9a:	e083      	b.n	8013ca4 <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 8013b9c:	697b      	ldr	r3, [r7, #20]
 8013b9e:	f003 0308 	and.w	r3, r3, #8
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d01f      	beq.n	8013be6 <HAL_QSPI_IRQHandler+0x2a2>
 8013ba6:	693b      	ldr	r3, [r7, #16]
 8013ba8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d01a      	beq.n	8013be6 <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	681b      	ldr	r3, [r3, #0]
 8013bb4:	2208      	movs	r2, #8
 8013bb6:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	681b      	ldr	r3, [r3, #0]
 8013bbc:	681b      	ldr	r3, [r3, #0]
 8013bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d00b      	beq.n	8013bde <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	681a      	ldr	r2, [r3, #0]
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	681b      	ldr	r3, [r3, #0]
 8013bd0:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8013bd4:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	2201      	movs	r2, #1
 8013bda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 8013bde:	6878      	ldr	r0, [r7, #4]
 8013be0:	f000 fb0c 	bl	80141fc <HAL_QSPI_StatusMatchCallback>
 8013be4:	e061      	b.n	8013caa <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 8013be6:	697b      	ldr	r3, [r7, #20]
 8013be8:	f003 0301 	and.w	r3, r3, #1
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d047      	beq.n	8013c80 <HAL_QSPI_IRQHandler+0x33c>
 8013bf0:	693b      	ldr	r3, [r7, #16]
 8013bf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d042      	beq.n	8013c80 <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	681b      	ldr	r3, [r3, #0]
 8013bfe:	2201      	movs	r2, #1
 8013c00:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	681a      	ldr	r2, [r3, #0]
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	681b      	ldr	r3, [r3, #0]
 8013c0c:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8013c10:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013c16:	f043 0202 	orr.w	r2, r3, #2
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	681b      	ldr	r3, [r3, #0]
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	f003 0304 	and.w	r3, r3, #4
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d021      	beq.n	8013c70 <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
         but no impact on H7 HW and it minimize the cost in the footprint */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	681b      	ldr	r3, [r3, #0]
 8013c30:	681a      	ldr	r2, [r3, #0]
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	f022 0204 	bic.w	r2, r2, #4
 8013c3a:	601a      	str	r2, [r3, #0]

      /* Disable the MDMA channel */
      hqspi->hmdma->XferAbortCallback = QSPI_DMAAbortCplt;
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013c40:	4a1c      	ldr	r2, [pc, #112]	; (8013cb4 <HAL_QSPI_IRQHandler+0x370>)
 8013c42:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hqspi->hmdma) != HAL_OK)
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013c48:	4618      	mov	r0, r3
 8013c4a:	f7ff fced 	bl	8013628 <HAL_MDMA_Abort_IT>
 8013c4e:	4603      	mov	r3, r0
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d029      	beq.n	8013ca8 <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013c58:	f043 0204 	orr.w	r2, r3, #4
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	2201      	movs	r2, #1
 8013c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8013c68:	6878      	ldr	r0, [r7, #4]
 8013c6a:	f000 fa8b 	bl	8014184 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8013c6e:	e01b      	b.n	8013ca8 <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	2201      	movs	r2, #1
 8013c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 8013c78:	6878      	ldr	r0, [r7, #4]
 8013c7a:	f000 fa83 	bl	8014184 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8013c7e:	e013      	b.n	8013ca8 <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 8013c80:	697b      	ldr	r3, [r7, #20]
 8013c82:	f003 0310 	and.w	r3, r3, #16
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d00f      	beq.n	8013caa <HAL_QSPI_IRQHandler+0x366>
 8013c8a:	693b      	ldr	r3, [r7, #16]
 8013c8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d00a      	beq.n	8013caa <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	2210      	movs	r2, #16
 8013c9a:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 8013c9c:	6878      	ldr	r0, [r7, #4]
 8013c9e:	f000 fab7 	bl	8014210 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 8013ca2:	e002      	b.n	8013caa <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8013ca4:	bf00      	nop
 8013ca6:	e000      	b.n	8013caa <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8013ca8:	bf00      	nop
}
 8013caa:	bf00      	nop
 8013cac:	3718      	adds	r7, #24
 8013cae:	46bd      	mov	sp, r7
 8013cb0:	bd80      	pop	{r7, pc}
 8013cb2:	bf00      	nop
 8013cb4:	08014241 	.word	0x08014241

08013cb8 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8013cb8:	b580      	push	{r7, lr}
 8013cba:	b088      	sub	sp, #32
 8013cbc:	af02      	add	r7, sp, #8
 8013cbe:	60f8      	str	r0, [r7, #12]
 8013cc0:	60b9      	str	r1, [r7, #8]
 8013cc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8013cc4:	f7fd fafc 	bl	80112c0 <HAL_GetTick>
 8013cc8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8013cca:	68fb      	ldr	r3, [r7, #12]
 8013ccc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013cd0:	b2db      	uxtb	r3, r3
 8013cd2:	2b01      	cmp	r3, #1
 8013cd4:	d101      	bne.n	8013cda <HAL_QSPI_Command+0x22>
 8013cd6:	2302      	movs	r3, #2
 8013cd8:	e048      	b.n	8013d6c <HAL_QSPI_Command+0xb4>
 8013cda:	68fb      	ldr	r3, [r7, #12]
 8013cdc:	2201      	movs	r2, #1
 8013cde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013ce8:	b2db      	uxtb	r3, r3
 8013cea:	2b01      	cmp	r3, #1
 8013cec:	d137      	bne.n	8013d5e <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8013cee:	68fb      	ldr	r3, [r7, #12]
 8013cf0:	2200      	movs	r2, #0
 8013cf2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8013cf4:	68fb      	ldr	r3, [r7, #12]
 8013cf6:	2202      	movs	r2, #2
 8013cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	9300      	str	r3, [sp, #0]
 8013d00:	693b      	ldr	r3, [r7, #16]
 8013d02:	2200      	movs	r2, #0
 8013d04:	2120      	movs	r1, #32
 8013d06:	68f8      	ldr	r0, [r7, #12]
 8013d08:	f000 facd 	bl	80142a6 <QSPI_WaitFlagStateUntilTimeout>
 8013d0c:	4603      	mov	r3, r0
 8013d0e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8013d10:	7dfb      	ldrb	r3, [r7, #23]
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d125      	bne.n	8013d62 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8013d16:	2200      	movs	r2, #0
 8013d18:	68b9      	ldr	r1, [r7, #8]
 8013d1a:	68f8      	ldr	r0, [r7, #12]
 8013d1c:	f000 fafa 	bl	8014314 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8013d20:	68bb      	ldr	r3, [r7, #8]
 8013d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d115      	bne.n	8013d54 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	9300      	str	r3, [sp, #0]
 8013d2c:	693b      	ldr	r3, [r7, #16]
 8013d2e:	2201      	movs	r2, #1
 8013d30:	2102      	movs	r1, #2
 8013d32:	68f8      	ldr	r0, [r7, #12]
 8013d34:	f000 fab7 	bl	80142a6 <QSPI_WaitFlagStateUntilTimeout>
 8013d38:	4603      	mov	r3, r0
 8013d3a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8013d3c:	7dfb      	ldrb	r3, [r7, #23]
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d10f      	bne.n	8013d62 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8013d42:	68fb      	ldr	r3, [r7, #12]
 8013d44:	681b      	ldr	r3, [r3, #0]
 8013d46:	2202      	movs	r2, #2
 8013d48:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8013d4a:	68fb      	ldr	r3, [r7, #12]
 8013d4c:	2201      	movs	r2, #1
 8013d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8013d52:	e006      	b.n	8013d62 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8013d54:	68fb      	ldr	r3, [r7, #12]
 8013d56:	2201      	movs	r2, #1
 8013d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8013d5c:	e001      	b.n	8013d62 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8013d5e:	2302      	movs	r3, #2
 8013d60:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8013d62:	68fb      	ldr	r3, [r7, #12]
 8013d64:	2200      	movs	r2, #0
 8013d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8013d6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8013d6c:	4618      	mov	r0, r3
 8013d6e:	3718      	adds	r7, #24
 8013d70:	46bd      	mov	sp, r7
 8013d72:	bd80      	pop	{r7, pc}

08013d74 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8013d74:	b580      	push	{r7, lr}
 8013d76:	b08a      	sub	sp, #40	; 0x28
 8013d78:	af02      	add	r7, sp, #8
 8013d7a:	60f8      	str	r0, [r7, #12]
 8013d7c:	60b9      	str	r1, [r7, #8]
 8013d7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013d80:	2300      	movs	r3, #0
 8013d82:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8013d84:	f7fd fa9c 	bl	80112c0 <HAL_GetTick>
 8013d88:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8013d8a:	68fb      	ldr	r3, [r7, #12]
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	3320      	adds	r3, #32
 8013d90:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013d98:	b2db      	uxtb	r3, r3
 8013d9a:	2b01      	cmp	r3, #1
 8013d9c:	d101      	bne.n	8013da2 <HAL_QSPI_Transmit+0x2e>
 8013d9e:	2302      	movs	r3, #2
 8013da0:	e076      	b.n	8013e90 <HAL_QSPI_Transmit+0x11c>
 8013da2:	68fb      	ldr	r3, [r7, #12]
 8013da4:	2201      	movs	r2, #1
 8013da6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8013daa:	68fb      	ldr	r3, [r7, #12]
 8013dac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013db0:	b2db      	uxtb	r3, r3
 8013db2:	2b01      	cmp	r3, #1
 8013db4:	d165      	bne.n	8013e82 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	2200      	movs	r2, #0
 8013dba:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8013dbc:	68bb      	ldr	r3, [r7, #8]
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d056      	beq.n	8013e70 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8013dc2:	68fb      	ldr	r3, [r7, #12]
 8013dc4:	2212      	movs	r2, #18
 8013dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8013dca:	68fb      	ldr	r3, [r7, #12]
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	691b      	ldr	r3, [r3, #16]
 8013dd0:	1c5a      	adds	r2, r3, #1
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8013dd6:	68fb      	ldr	r3, [r7, #12]
 8013dd8:	681b      	ldr	r3, [r3, #0]
 8013dda:	691b      	ldr	r3, [r3, #16]
 8013ddc:	1c5a      	adds	r2, r3, #1
 8013dde:	68fb      	ldr	r3, [r7, #12]
 8013de0:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8013de2:	68fb      	ldr	r3, [r7, #12]
 8013de4:	68ba      	ldr	r2, [r7, #8]
 8013de6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	681b      	ldr	r3, [r3, #0]
 8013dec:	695a      	ldr	r2, [r3, #20]
 8013dee:	68fb      	ldr	r3, [r7, #12]
 8013df0:	681b      	ldr	r3, [r3, #0]
 8013df2:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8013df6:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8013df8:	e01b      	b.n	8013e32 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	9300      	str	r3, [sp, #0]
 8013dfe:	69bb      	ldr	r3, [r7, #24]
 8013e00:	2201      	movs	r2, #1
 8013e02:	2104      	movs	r1, #4
 8013e04:	68f8      	ldr	r0, [r7, #12]
 8013e06:	f000 fa4e 	bl	80142a6 <QSPI_WaitFlagStateUntilTimeout>
 8013e0a:	4603      	mov	r3, r0
 8013e0c:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8013e0e:	7ffb      	ldrb	r3, [r7, #31]
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d113      	bne.n	8013e3c <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8013e14:	68fb      	ldr	r3, [r7, #12]
 8013e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e18:	781a      	ldrb	r2, [r3, #0]
 8013e1a:	697b      	ldr	r3, [r7, #20]
 8013e1c:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e22:	1c5a      	adds	r2, r3, #1
 8013e24:	68fb      	ldr	r3, [r7, #12]
 8013e26:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 8013e28:	68fb      	ldr	r3, [r7, #12]
 8013e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e2c:	1e5a      	subs	r2, r3, #1
 8013e2e:	68fb      	ldr	r3, [r7, #12]
 8013e30:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 8013e32:	68fb      	ldr	r3, [r7, #12]
 8013e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d1df      	bne.n	8013dfa <HAL_QSPI_Transmit+0x86>
 8013e3a:	e000      	b.n	8013e3e <HAL_QSPI_Transmit+0xca>
          break;
 8013e3c:	bf00      	nop
      }

      if (status == HAL_OK)
 8013e3e:	7ffb      	ldrb	r3, [r7, #31]
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d110      	bne.n	8013e66 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	9300      	str	r3, [sp, #0]
 8013e48:	69bb      	ldr	r3, [r7, #24]
 8013e4a:	2201      	movs	r2, #1
 8013e4c:	2102      	movs	r1, #2
 8013e4e:	68f8      	ldr	r0, [r7, #12]
 8013e50:	f000 fa29 	bl	80142a6 <QSPI_WaitFlagStateUntilTimeout>
 8013e54:	4603      	mov	r3, r0
 8013e56:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8013e58:	7ffb      	ldrb	r3, [r7, #31]
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d103      	bne.n	8013e66 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8013e5e:	68fb      	ldr	r3, [r7, #12]
 8013e60:	681b      	ldr	r3, [r3, #0]
 8013e62:	2202      	movs	r2, #2
 8013e64:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8013e66:	68fb      	ldr	r3, [r7, #12]
 8013e68:	2201      	movs	r2, #1
 8013e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8013e6e:	e00a      	b.n	8013e86 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8013e70:	68fb      	ldr	r3, [r7, #12]
 8013e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013e74:	f043 0208 	orr.w	r2, r3, #8
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8013e7c:	2301      	movs	r3, #1
 8013e7e:	77fb      	strb	r3, [r7, #31]
 8013e80:	e001      	b.n	8013e86 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 8013e82:	2302      	movs	r3, #2
 8013e84:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8013e86:	68fb      	ldr	r3, [r7, #12]
 8013e88:	2200      	movs	r2, #0
 8013e8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8013e8e:	7ffb      	ldrb	r3, [r7, #31]
}
 8013e90:	4618      	mov	r0, r3
 8013e92:	3720      	adds	r7, #32
 8013e94:	46bd      	mov	sp, r7
 8013e96:	bd80      	pop	{r7, pc}

08013e98 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8013e98:	b580      	push	{r7, lr}
 8013e9a:	b08a      	sub	sp, #40	; 0x28
 8013e9c:	af02      	add	r7, sp, #8
 8013e9e:	60f8      	str	r0, [r7, #12]
 8013ea0:	60b9      	str	r1, [r7, #8]
 8013ea2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013ea4:	2300      	movs	r3, #0
 8013ea6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8013ea8:	f7fd fa0a 	bl	80112c0 <HAL_GetTick>
 8013eac:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8013eae:	68fb      	ldr	r3, [r7, #12]
 8013eb0:	681b      	ldr	r3, [r3, #0]
 8013eb2:	699b      	ldr	r3, [r3, #24]
 8013eb4:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8013eb6:	68fb      	ldr	r3, [r7, #12]
 8013eb8:	681b      	ldr	r3, [r3, #0]
 8013eba:	3320      	adds	r3, #32
 8013ebc:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8013ebe:	68fb      	ldr	r3, [r7, #12]
 8013ec0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013ec4:	b2db      	uxtb	r3, r3
 8013ec6:	2b01      	cmp	r3, #1
 8013ec8:	d101      	bne.n	8013ece <HAL_QSPI_Receive+0x36>
 8013eca:	2302      	movs	r3, #2
 8013ecc:	e07d      	b.n	8013fca <HAL_QSPI_Receive+0x132>
 8013ece:	68fb      	ldr	r3, [r7, #12]
 8013ed0:	2201      	movs	r2, #1
 8013ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8013ed6:	68fb      	ldr	r3, [r7, #12]
 8013ed8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013edc:	b2db      	uxtb	r3, r3
 8013ede:	2b01      	cmp	r3, #1
 8013ee0:	d16c      	bne.n	8013fbc <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	2200      	movs	r2, #0
 8013ee6:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8013ee8:	68bb      	ldr	r3, [r7, #8]
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d05d      	beq.n	8013faa <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8013eee:	68fb      	ldr	r3, [r7, #12]
 8013ef0:	2222      	movs	r2, #34	; 0x22
 8013ef2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	681b      	ldr	r3, [r3, #0]
 8013efa:	691b      	ldr	r3, [r3, #16]
 8013efc:	1c5a      	adds	r2, r3, #1
 8013efe:	68fb      	ldr	r3, [r7, #12]
 8013f00:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8013f02:	68fb      	ldr	r3, [r7, #12]
 8013f04:	681b      	ldr	r3, [r3, #0]
 8013f06:	691b      	ldr	r3, [r3, #16]
 8013f08:	1c5a      	adds	r2, r3, #1
 8013f0a:	68fb      	ldr	r3, [r7, #12]
 8013f0c:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8013f0e:	68fb      	ldr	r3, [r7, #12]
 8013f10:	68ba      	ldr	r2, [r7, #8]
 8013f12:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8013f14:	68fb      	ldr	r3, [r7, #12]
 8013f16:	681b      	ldr	r3, [r3, #0]
 8013f18:	695b      	ldr	r3, [r3, #20]
 8013f1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8013f1e:	68fb      	ldr	r3, [r7, #12]
 8013f20:	681b      	ldr	r3, [r3, #0]
 8013f22:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8013f26:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	681b      	ldr	r3, [r3, #0]
 8013f2c:	697a      	ldr	r2, [r7, #20]
 8013f2e:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8013f30:	e01c      	b.n	8013f6c <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	9300      	str	r3, [sp, #0]
 8013f36:	69bb      	ldr	r3, [r7, #24]
 8013f38:	2201      	movs	r2, #1
 8013f3a:	2106      	movs	r1, #6
 8013f3c:	68f8      	ldr	r0, [r7, #12]
 8013f3e:	f000 f9b2 	bl	80142a6 <QSPI_WaitFlagStateUntilTimeout>
 8013f42:	4603      	mov	r3, r0
 8013f44:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8013f46:	7ffb      	ldrb	r3, [r7, #31]
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d114      	bne.n	8013f76 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8013f4c:	68fb      	ldr	r3, [r7, #12]
 8013f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f50:	693a      	ldr	r2, [r7, #16]
 8013f52:	7812      	ldrb	r2, [r2, #0]
 8013f54:	b2d2      	uxtb	r2, r2
 8013f56:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8013f58:	68fb      	ldr	r3, [r7, #12]
 8013f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f5c:	1c5a      	adds	r2, r3, #1
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 8013f62:	68fb      	ldr	r3, [r7, #12]
 8013f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f66:	1e5a      	subs	r2, r3, #1
 8013f68:	68fb      	ldr	r3, [r7, #12]
 8013f6a:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8013f6c:	68fb      	ldr	r3, [r7, #12]
 8013f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d1de      	bne.n	8013f32 <HAL_QSPI_Receive+0x9a>
 8013f74:	e000      	b.n	8013f78 <HAL_QSPI_Receive+0xe0>
          break;
 8013f76:	bf00      	nop
      }

      if (status == HAL_OK)
 8013f78:	7ffb      	ldrb	r3, [r7, #31]
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d110      	bne.n	8013fa0 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	9300      	str	r3, [sp, #0]
 8013f82:	69bb      	ldr	r3, [r7, #24]
 8013f84:	2201      	movs	r2, #1
 8013f86:	2102      	movs	r1, #2
 8013f88:	68f8      	ldr	r0, [r7, #12]
 8013f8a:	f000 f98c 	bl	80142a6 <QSPI_WaitFlagStateUntilTimeout>
 8013f8e:	4603      	mov	r3, r0
 8013f90:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8013f92:	7ffb      	ldrb	r3, [r7, #31]
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d103      	bne.n	8013fa0 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	681b      	ldr	r3, [r3, #0]
 8013f9c:	2202      	movs	r2, #2
 8013f9e:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8013fa0:	68fb      	ldr	r3, [r7, #12]
 8013fa2:	2201      	movs	r2, #1
 8013fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8013fa8:	e00a      	b.n	8013fc0 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8013faa:	68fb      	ldr	r3, [r7, #12]
 8013fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013fae:	f043 0208 	orr.w	r2, r3, #8
 8013fb2:	68fb      	ldr	r3, [r7, #12]
 8013fb4:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8013fb6:	2301      	movs	r3, #1
 8013fb8:	77fb      	strb	r3, [r7, #31]
 8013fba:	e001      	b.n	8013fc0 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8013fbc:	2302      	movs	r3, #2
 8013fbe:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8013fc0:	68fb      	ldr	r3, [r7, #12]
 8013fc2:	2200      	movs	r2, #0
 8013fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8013fc8:	7ffb      	ldrb	r3, [r7, #31]
}
 8013fca:	4618      	mov	r0, r3
 8013fcc:	3720      	adds	r7, #32
 8013fce:	46bd      	mov	sp, r7
 8013fd0:	bd80      	pop	{r7, pc}

08013fd2 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8013fd2:	b580      	push	{r7, lr}
 8013fd4:	b088      	sub	sp, #32
 8013fd6:	af02      	add	r7, sp, #8
 8013fd8:	60f8      	str	r0, [r7, #12]
 8013fda:	60b9      	str	r1, [r7, #8]
 8013fdc:	607a      	str	r2, [r7, #4]
 8013fde:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8013fe0:	f7fd f96e 	bl	80112c0 <HAL_GetTick>
 8013fe4:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8013fe6:	68fb      	ldr	r3, [r7, #12]
 8013fe8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013fec:	b2db      	uxtb	r3, r3
 8013fee:	2b01      	cmp	r3, #1
 8013ff0:	d101      	bne.n	8013ff6 <HAL_QSPI_AutoPolling+0x24>
 8013ff2:	2302      	movs	r3, #2
 8013ff4:	e060      	b.n	80140b8 <HAL_QSPI_AutoPolling+0xe6>
 8013ff6:	68fb      	ldr	r3, [r7, #12]
 8013ff8:	2201      	movs	r2, #1
 8013ffa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8013ffe:	68fb      	ldr	r3, [r7, #12]
 8014000:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8014004:	b2db      	uxtb	r3, r3
 8014006:	2b01      	cmp	r3, #1
 8014008:	d14f      	bne.n	80140aa <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 801400a:	68fb      	ldr	r3, [r7, #12]
 801400c:	2200      	movs	r2, #0
 801400e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8014010:	68fb      	ldr	r3, [r7, #12]
 8014012:	2242      	movs	r2, #66	; 0x42
 8014014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8014018:	683b      	ldr	r3, [r7, #0]
 801401a:	9300      	str	r3, [sp, #0]
 801401c:	693b      	ldr	r3, [r7, #16]
 801401e:	2200      	movs	r2, #0
 8014020:	2120      	movs	r1, #32
 8014022:	68f8      	ldr	r0, [r7, #12]
 8014024:	f000 f93f 	bl	80142a6 <QSPI_WaitFlagStateUntilTimeout>
 8014028:	4603      	mov	r3, r0
 801402a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 801402c:	7dfb      	ldrb	r3, [r7, #23]
 801402e:	2b00      	cmp	r3, #0
 8014030:	d13d      	bne.n	80140ae <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8014032:	68fb      	ldr	r3, [r7, #12]
 8014034:	681b      	ldr	r3, [r3, #0]
 8014036:	687a      	ldr	r2, [r7, #4]
 8014038:	6812      	ldr	r2, [r2, #0]
 801403a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 801403c:	68fb      	ldr	r3, [r7, #12]
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	687a      	ldr	r2, [r7, #4]
 8014042:	6852      	ldr	r2, [r2, #4]
 8014044:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8014046:	68fb      	ldr	r3, [r7, #12]
 8014048:	681b      	ldr	r3, [r3, #0]
 801404a:	687a      	ldr	r2, [r7, #4]
 801404c:	6892      	ldr	r2, [r2, #8]
 801404e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8014050:	68fb      	ldr	r3, [r7, #12]
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	691b      	ldr	r3, [r3, #16]
 801405e:	431a      	orrs	r2, r3
 8014060:	68fb      	ldr	r3, [r7, #12]
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8014068:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	68da      	ldr	r2, [r3, #12]
 801406e:	68bb      	ldr	r3, [r7, #8]
 8014070:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8014072:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8014076:	68b9      	ldr	r1, [r7, #8]
 8014078:	68f8      	ldr	r0, [r7, #12]
 801407a:	f000 f94b 	bl	8014314 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 801407e:	683b      	ldr	r3, [r7, #0]
 8014080:	9300      	str	r3, [sp, #0]
 8014082:	693b      	ldr	r3, [r7, #16]
 8014084:	2201      	movs	r2, #1
 8014086:	2108      	movs	r1, #8
 8014088:	68f8      	ldr	r0, [r7, #12]
 801408a:	f000 f90c 	bl	80142a6 <QSPI_WaitFlagStateUntilTimeout>
 801408e:	4603      	mov	r3, r0
 8014090:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8014092:	7dfb      	ldrb	r3, [r7, #23]
 8014094:	2b00      	cmp	r3, #0
 8014096:	d10a      	bne.n	80140ae <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8014098:	68fb      	ldr	r3, [r7, #12]
 801409a:	681b      	ldr	r3, [r3, #0]
 801409c:	2208      	movs	r2, #8
 801409e:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80140a0:	68fb      	ldr	r3, [r7, #12]
 80140a2:	2201      	movs	r2, #1
 80140a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80140a8:	e001      	b.n	80140ae <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80140aa:	2302      	movs	r3, #2
 80140ac:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80140ae:	68fb      	ldr	r3, [r7, #12]
 80140b0:	2200      	movs	r2, #0
 80140b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80140b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80140b8:	4618      	mov	r0, r3
 80140ba:	3718      	adds	r7, #24
 80140bc:	46bd      	mov	sp, r7
 80140be:	bd80      	pop	{r7, pc}

080140c0 <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 80140c0:	b580      	push	{r7, lr}
 80140c2:	b088      	sub	sp, #32
 80140c4:	af02      	add	r7, sp, #8
 80140c6:	60f8      	str	r0, [r7, #12]
 80140c8:	60b9      	str	r1, [r7, #8]
 80140ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80140cc:	f7fd f8f8 	bl	80112c0 <HAL_GetTick>
 80140d0:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80140d2:	68fb      	ldr	r3, [r7, #12]
 80140d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80140d8:	b2db      	uxtb	r3, r3
 80140da:	2b01      	cmp	r3, #1
 80140dc:	d101      	bne.n	80140e2 <HAL_QSPI_MemoryMapped+0x22>
 80140de:	2302      	movs	r3, #2
 80140e0:	e04c      	b.n	801417c <HAL_QSPI_MemoryMapped+0xbc>
 80140e2:	68fb      	ldr	r3, [r7, #12]
 80140e4:	2201      	movs	r2, #1
 80140e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80140ea:	68fb      	ldr	r3, [r7, #12]
 80140ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80140f0:	b2db      	uxtb	r3, r3
 80140f2:	2b01      	cmp	r3, #1
 80140f4:	d13b      	bne.n	801416e <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80140f6:	68fb      	ldr	r3, [r7, #12]
 80140f8:	2200      	movs	r2, #0
 80140fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 80140fc:	68fb      	ldr	r3, [r7, #12]
 80140fe:	2282      	movs	r2, #130	; 0x82
 8014100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8014104:	68fb      	ldr	r3, [r7, #12]
 8014106:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014108:	9300      	str	r3, [sp, #0]
 801410a:	693b      	ldr	r3, [r7, #16]
 801410c:	2200      	movs	r2, #0
 801410e:	2120      	movs	r1, #32
 8014110:	68f8      	ldr	r0, [r7, #12]
 8014112:	f000 f8c8 	bl	80142a6 <QSPI_WaitFlagStateUntilTimeout>
 8014116:	4603      	mov	r3, r0
 8014118:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 801411a:	7dfb      	ldrb	r3, [r7, #23]
 801411c:	2b00      	cmp	r3, #0
 801411e:	d128      	bne.n	8014172 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8014120:	68fb      	ldr	r3, [r7, #12]
 8014122:	681b      	ldr	r3, [r3, #0]
 8014124:	681b      	ldr	r3, [r3, #0]
 8014126:	f023 0108 	bic.w	r1, r3, #8
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	685a      	ldr	r2, [r3, #4]
 801412e:	68fb      	ldr	r3, [r7, #12]
 8014130:	681b      	ldr	r3, [r3, #0]
 8014132:	430a      	orrs	r2, r1
 8014134:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	685b      	ldr	r3, [r3, #4]
 801413a:	2b08      	cmp	r3, #8
 801413c:	d110      	bne.n	8014160 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 801413e:	68fb      	ldr	r3, [r7, #12]
 8014140:	681b      	ldr	r3, [r3, #0]
 8014142:	687a      	ldr	r2, [r7, #4]
 8014144:	6812      	ldr	r2, [r2, #0]
 8014146:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8014148:	68fb      	ldr	r3, [r7, #12]
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	2210      	movs	r2, #16
 801414e:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8014150:	68fb      	ldr	r3, [r7, #12]
 8014152:	681b      	ldr	r3, [r3, #0]
 8014154:	681a      	ldr	r2, [r3, #0]
 8014156:	68fb      	ldr	r3, [r7, #12]
 8014158:	681b      	ldr	r3, [r3, #0]
 801415a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801415e:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8014160:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8014164:	68b9      	ldr	r1, [r7, #8]
 8014166:	68f8      	ldr	r0, [r7, #12]
 8014168:	f000 f8d4 	bl	8014314 <QSPI_Config>
 801416c:	e001      	b.n	8014172 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 801416e:	2302      	movs	r3, #2
 8014170:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8014172:	68fb      	ldr	r3, [r7, #12]
 8014174:	2200      	movs	r2, #0
 8014176:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 801417a:	7dfb      	ldrb	r3, [r7, #23]
}
 801417c:	4618      	mov	r0, r3
 801417e:	3718      	adds	r7, #24
 8014180:	46bd      	mov	sp, r7
 8014182:	bd80      	pop	{r7, pc}

08014184 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 8014184:	b480      	push	{r7}
 8014186:	b083      	sub	sp, #12
 8014188:	af00      	add	r7, sp, #0
 801418a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 801418c:	bf00      	nop
 801418e:	370c      	adds	r7, #12
 8014190:	46bd      	mov	sp, r7
 8014192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014196:	4770      	bx	lr

08014198 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8014198:	b480      	push	{r7}
 801419a:	b083      	sub	sp, #12
 801419c:	af00      	add	r7, sp, #0
 801419e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 80141a0:	bf00      	nop
 80141a2:	370c      	adds	r7, #12
 80141a4:	46bd      	mov	sp, r7
 80141a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141aa:	4770      	bx	lr

080141ac <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80141ac:	b480      	push	{r7}
 80141ae:	b083      	sub	sp, #12
 80141b0:	af00      	add	r7, sp, #0
 80141b2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 80141b4:	bf00      	nop
 80141b6:	370c      	adds	r7, #12
 80141b8:	46bd      	mov	sp, r7
 80141ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141be:	4770      	bx	lr

080141c0 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80141c0:	b480      	push	{r7}
 80141c2:	b083      	sub	sp, #12
 80141c4:	af00      	add	r7, sp, #0
 80141c6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 80141c8:	bf00      	nop
 80141ca:	370c      	adds	r7, #12
 80141cc:	46bd      	mov	sp, r7
 80141ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141d2:	4770      	bx	lr

080141d4 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80141d4:	b480      	push	{r7}
 80141d6:	b083      	sub	sp, #12
 80141d8:	af00      	add	r7, sp, #0
 80141da:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 80141dc:	bf00      	nop
 80141de:	370c      	adds	r7, #12
 80141e0:	46bd      	mov	sp, r7
 80141e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141e6:	4770      	bx	lr

080141e8 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 80141e8:	b480      	push	{r7}
 80141ea:	b083      	sub	sp, #12
 80141ec:	af00      	add	r7, sp, #0
 80141ee:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 80141f0:	bf00      	nop
 80141f2:	370c      	adds	r7, #12
 80141f4:	46bd      	mov	sp, r7
 80141f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141fa:	4770      	bx	lr

080141fc <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 80141fc:	b480      	push	{r7}
 80141fe:	b083      	sub	sp, #12
 8014200:	af00      	add	r7, sp, #0
 8014202:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8014204:	bf00      	nop
 8014206:	370c      	adds	r7, #12
 8014208:	46bd      	mov	sp, r7
 801420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801420e:	4770      	bx	lr

08014210 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 8014210:	b480      	push	{r7}
 8014212:	b083      	sub	sp, #12
 8014214:	af00      	add	r7, sp, #0
 8014216:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 8014218:	bf00      	nop
 801421a:	370c      	adds	r7, #12
 801421c:	46bd      	mov	sp, r7
 801421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014222:	4770      	bx	lr

08014224 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8014224:	b480      	push	{r7}
 8014226:	b083      	sub	sp, #12
 8014228:	af00      	add	r7, sp, #0
 801422a:	6078      	str	r0, [r7, #4]
 801422c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	683a      	ldr	r2, [r7, #0]
 8014232:	649a      	str	r2, [r3, #72]	; 0x48
}
 8014234:	bf00      	nop
 8014236:	370c      	adds	r7, #12
 8014238:	46bd      	mov	sp, r7
 801423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801423e:	4770      	bx	lr

08014240 <QSPI_DMAAbortCplt>:
  * @brief  MDMA QSPI abort complete callback.
  * @param  hmdma MDMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 8014240:	b580      	push	{r7, lr}
 8014242:	b084      	sub	sp, #16
 8014244:	af00      	add	r7, sp, #0
 8014246:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hmdma->Parent);
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801424c:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 801424e:	68fb      	ldr	r3, [r7, #12]
 8014250:	2200      	movs	r2, #0
 8014252:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 8014254:	68fb      	ldr	r3, [r7, #12]
 8014256:	2200      	movs	r2, #0
 8014258:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8014260:	b2db      	uxtb	r3, r3
 8014262:	2b08      	cmp	r3, #8
 8014264:	d114      	bne.n	8014290 <QSPI_DMAAbortCplt+0x50>
  {
    /* MDMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8014266:	68fb      	ldr	r3, [r7, #12]
 8014268:	681b      	ldr	r3, [r3, #0]
 801426a:	2202      	movs	r2, #2
 801426c:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 801426e:	68fb      	ldr	r3, [r7, #12]
 8014270:	681b      	ldr	r3, [r3, #0]
 8014272:	681a      	ldr	r2, [r3, #0]
 8014274:	68fb      	ldr	r3, [r7, #12]
 8014276:	681b      	ldr	r3, [r3, #0]
 8014278:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 801427c:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 801427e:	68fb      	ldr	r3, [r7, #12]
 8014280:	681b      	ldr	r3, [r3, #0]
 8014282:	681a      	ldr	r2, [r3, #0]
 8014284:	68fb      	ldr	r3, [r7, #12]
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	f042 0202 	orr.w	r2, r2, #2
 801428c:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 801428e:	e006      	b.n	801429e <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 8014290:	68fb      	ldr	r3, [r7, #12]
 8014292:	2201      	movs	r2, #1
 8014294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 8014298:	68f8      	ldr	r0, [r7, #12]
 801429a:	f7ff ff73 	bl	8014184 <HAL_QSPI_ErrorCallback>
}
 801429e:	bf00      	nop
 80142a0:	3710      	adds	r7, #16
 80142a2:	46bd      	mov	sp, r7
 80142a4:	bd80      	pop	{r7, pc}

080142a6 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80142a6:	b580      	push	{r7, lr}
 80142a8:	b084      	sub	sp, #16
 80142aa:	af00      	add	r7, sp, #0
 80142ac:	60f8      	str	r0, [r7, #12]
 80142ae:	60b9      	str	r1, [r7, #8]
 80142b0:	603b      	str	r3, [r7, #0]
 80142b2:	4613      	mov	r3, r2
 80142b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80142b6:	e01a      	b.n	80142ee <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80142b8:	69bb      	ldr	r3, [r7, #24]
 80142ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80142be:	d016      	beq.n	80142ee <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80142c0:	f7fc fffe 	bl	80112c0 <HAL_GetTick>
 80142c4:	4602      	mov	r2, r0
 80142c6:	683b      	ldr	r3, [r7, #0]
 80142c8:	1ad3      	subs	r3, r2, r3
 80142ca:	69ba      	ldr	r2, [r7, #24]
 80142cc:	429a      	cmp	r2, r3
 80142ce:	d302      	bcc.n	80142d6 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80142d0:	69bb      	ldr	r3, [r7, #24]
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d10b      	bne.n	80142ee <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80142d6:	68fb      	ldr	r3, [r7, #12]
 80142d8:	2204      	movs	r2, #4
 80142da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80142de:	68fb      	ldr	r3, [r7, #12]
 80142e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80142e2:	f043 0201 	orr.w	r2, r3, #1
 80142e6:	68fb      	ldr	r3, [r7, #12]
 80142e8:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80142ea:	2301      	movs	r3, #1
 80142ec:	e00e      	b.n	801430c <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80142ee:	68fb      	ldr	r3, [r7, #12]
 80142f0:	681b      	ldr	r3, [r3, #0]
 80142f2:	689a      	ldr	r2, [r3, #8]
 80142f4:	68bb      	ldr	r3, [r7, #8]
 80142f6:	4013      	ands	r3, r2
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	bf14      	ite	ne
 80142fc:	2301      	movne	r3, #1
 80142fe:	2300      	moveq	r3, #0
 8014300:	b2db      	uxtb	r3, r3
 8014302:	461a      	mov	r2, r3
 8014304:	79fb      	ldrb	r3, [r7, #7]
 8014306:	429a      	cmp	r2, r3
 8014308:	d1d6      	bne.n	80142b8 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801430a:	2300      	movs	r3, #0
}
 801430c:	4618      	mov	r0, r3
 801430e:	3710      	adds	r7, #16
 8014310:	46bd      	mov	sp, r7
 8014312:	bd80      	pop	{r7, pc}

08014314 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8014314:	b480      	push	{r7}
 8014316:	b085      	sub	sp, #20
 8014318:	af00      	add	r7, sp, #0
 801431a:	60f8      	str	r0, [r7, #12]
 801431c:	60b9      	str	r1, [r7, #8]
 801431e:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8014320:	68bb      	ldr	r3, [r7, #8]
 8014322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014324:	2b00      	cmp	r3, #0
 8014326:	d009      	beq.n	801433c <QSPI_Config+0x28>
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 801432e:	d005      	beq.n	801433c <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8014330:	68bb      	ldr	r3, [r7, #8]
 8014332:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014334:	68fb      	ldr	r3, [r7, #12]
 8014336:	681b      	ldr	r3, [r3, #0]
 8014338:	3a01      	subs	r2, #1
 801433a:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 801433c:	68bb      	ldr	r3, [r7, #8]
 801433e:	699b      	ldr	r3, [r3, #24]
 8014340:	2b00      	cmp	r3, #0
 8014342:	f000 80b9 	beq.w	80144b8 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8014346:	68bb      	ldr	r3, [r7, #8]
 8014348:	6a1b      	ldr	r3, [r3, #32]
 801434a:	2b00      	cmp	r3, #0
 801434c:	d05f      	beq.n	801440e <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 801434e:	68fb      	ldr	r3, [r7, #12]
 8014350:	681b      	ldr	r3, [r3, #0]
 8014352:	68ba      	ldr	r2, [r7, #8]
 8014354:	6892      	ldr	r2, [r2, #8]
 8014356:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8014358:	68bb      	ldr	r3, [r7, #8]
 801435a:	69db      	ldr	r3, [r3, #28]
 801435c:	2b00      	cmp	r3, #0
 801435e:	d031      	beq.n	80143c4 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8014360:	68bb      	ldr	r3, [r7, #8]
 8014362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014364:	68bb      	ldr	r3, [r7, #8]
 8014366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014368:	431a      	orrs	r2, r3
 801436a:	68bb      	ldr	r3, [r7, #8]
 801436c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801436e:	431a      	orrs	r2, r3
 8014370:	68bb      	ldr	r3, [r7, #8]
 8014372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014374:	431a      	orrs	r2, r3
 8014376:	68bb      	ldr	r3, [r7, #8]
 8014378:	695b      	ldr	r3, [r3, #20]
 801437a:	049b      	lsls	r3, r3, #18
 801437c:	431a      	orrs	r2, r3
 801437e:	68bb      	ldr	r3, [r7, #8]
 8014380:	691b      	ldr	r3, [r3, #16]
 8014382:	431a      	orrs	r2, r3
 8014384:	68bb      	ldr	r3, [r7, #8]
 8014386:	6a1b      	ldr	r3, [r3, #32]
 8014388:	431a      	orrs	r2, r3
 801438a:	68bb      	ldr	r3, [r7, #8]
 801438c:	68db      	ldr	r3, [r3, #12]
 801438e:	431a      	orrs	r2, r3
 8014390:	68bb      	ldr	r3, [r7, #8]
 8014392:	69db      	ldr	r3, [r3, #28]
 8014394:	431a      	orrs	r2, r3
 8014396:	68bb      	ldr	r3, [r7, #8]
 8014398:	699b      	ldr	r3, [r3, #24]
 801439a:	431a      	orrs	r2, r3
 801439c:	68bb      	ldr	r3, [r7, #8]
 801439e:	681b      	ldr	r3, [r3, #0]
 80143a0:	ea42 0103 	orr.w	r1, r2, r3
 80143a4:	68fb      	ldr	r3, [r7, #12]
 80143a6:	681b      	ldr	r3, [r3, #0]
 80143a8:	687a      	ldr	r2, [r7, #4]
 80143aa:	430a      	orrs	r2, r1
 80143ac:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80143b4:	f000 812e 	beq.w	8014614 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80143b8:	68fb      	ldr	r3, [r7, #12]
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	68ba      	ldr	r2, [r7, #8]
 80143be:	6852      	ldr	r2, [r2, #4]
 80143c0:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 80143c2:	e127      	b.n	8014614 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80143c4:	68bb      	ldr	r3, [r7, #8]
 80143c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80143c8:	68bb      	ldr	r3, [r7, #8]
 80143ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80143cc:	431a      	orrs	r2, r3
 80143ce:	68bb      	ldr	r3, [r7, #8]
 80143d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80143d2:	431a      	orrs	r2, r3
 80143d4:	68bb      	ldr	r3, [r7, #8]
 80143d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143d8:	431a      	orrs	r2, r3
 80143da:	68bb      	ldr	r3, [r7, #8]
 80143dc:	695b      	ldr	r3, [r3, #20]
 80143de:	049b      	lsls	r3, r3, #18
 80143e0:	431a      	orrs	r2, r3
 80143e2:	68bb      	ldr	r3, [r7, #8]
 80143e4:	691b      	ldr	r3, [r3, #16]
 80143e6:	431a      	orrs	r2, r3
 80143e8:	68bb      	ldr	r3, [r7, #8]
 80143ea:	6a1b      	ldr	r3, [r3, #32]
 80143ec:	431a      	orrs	r2, r3
 80143ee:	68bb      	ldr	r3, [r7, #8]
 80143f0:	69db      	ldr	r3, [r3, #28]
 80143f2:	431a      	orrs	r2, r3
 80143f4:	68bb      	ldr	r3, [r7, #8]
 80143f6:	699b      	ldr	r3, [r3, #24]
 80143f8:	431a      	orrs	r2, r3
 80143fa:	68bb      	ldr	r3, [r7, #8]
 80143fc:	681b      	ldr	r3, [r3, #0]
 80143fe:	ea42 0103 	orr.w	r1, r2, r3
 8014402:	68fb      	ldr	r3, [r7, #12]
 8014404:	681b      	ldr	r3, [r3, #0]
 8014406:	687a      	ldr	r2, [r7, #4]
 8014408:	430a      	orrs	r2, r1
 801440a:	615a      	str	r2, [r3, #20]
}
 801440c:	e102      	b.n	8014614 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 801440e:	68bb      	ldr	r3, [r7, #8]
 8014410:	69db      	ldr	r3, [r3, #28]
 8014412:	2b00      	cmp	r3, #0
 8014414:	d02e      	beq.n	8014474 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8014416:	68bb      	ldr	r3, [r7, #8]
 8014418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801441a:	68bb      	ldr	r3, [r7, #8]
 801441c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801441e:	431a      	orrs	r2, r3
 8014420:	68bb      	ldr	r3, [r7, #8]
 8014422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014424:	431a      	orrs	r2, r3
 8014426:	68bb      	ldr	r3, [r7, #8]
 8014428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801442a:	431a      	orrs	r2, r3
 801442c:	68bb      	ldr	r3, [r7, #8]
 801442e:	695b      	ldr	r3, [r3, #20]
 8014430:	049b      	lsls	r3, r3, #18
 8014432:	431a      	orrs	r2, r3
 8014434:	68bb      	ldr	r3, [r7, #8]
 8014436:	6a1b      	ldr	r3, [r3, #32]
 8014438:	431a      	orrs	r2, r3
 801443a:	68bb      	ldr	r3, [r7, #8]
 801443c:	68db      	ldr	r3, [r3, #12]
 801443e:	431a      	orrs	r2, r3
 8014440:	68bb      	ldr	r3, [r7, #8]
 8014442:	69db      	ldr	r3, [r3, #28]
 8014444:	431a      	orrs	r2, r3
 8014446:	68bb      	ldr	r3, [r7, #8]
 8014448:	699b      	ldr	r3, [r3, #24]
 801444a:	431a      	orrs	r2, r3
 801444c:	68bb      	ldr	r3, [r7, #8]
 801444e:	681b      	ldr	r3, [r3, #0]
 8014450:	ea42 0103 	orr.w	r1, r2, r3
 8014454:	68fb      	ldr	r3, [r7, #12]
 8014456:	681b      	ldr	r3, [r3, #0]
 8014458:	687a      	ldr	r2, [r7, #4]
 801445a:	430a      	orrs	r2, r1
 801445c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8014464:	f000 80d6 	beq.w	8014614 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8014468:	68fb      	ldr	r3, [r7, #12]
 801446a:	681b      	ldr	r3, [r3, #0]
 801446c:	68ba      	ldr	r2, [r7, #8]
 801446e:	6852      	ldr	r2, [r2, #4]
 8014470:	619a      	str	r2, [r3, #24]
}
 8014472:	e0cf      	b.n	8014614 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8014474:	68bb      	ldr	r3, [r7, #8]
 8014476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014478:	68bb      	ldr	r3, [r7, #8]
 801447a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801447c:	431a      	orrs	r2, r3
 801447e:	68bb      	ldr	r3, [r7, #8]
 8014480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014482:	431a      	orrs	r2, r3
 8014484:	68bb      	ldr	r3, [r7, #8]
 8014486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014488:	431a      	orrs	r2, r3
 801448a:	68bb      	ldr	r3, [r7, #8]
 801448c:	695b      	ldr	r3, [r3, #20]
 801448e:	049b      	lsls	r3, r3, #18
 8014490:	431a      	orrs	r2, r3
 8014492:	68bb      	ldr	r3, [r7, #8]
 8014494:	6a1b      	ldr	r3, [r3, #32]
 8014496:	431a      	orrs	r2, r3
 8014498:	68bb      	ldr	r3, [r7, #8]
 801449a:	69db      	ldr	r3, [r3, #28]
 801449c:	431a      	orrs	r2, r3
 801449e:	68bb      	ldr	r3, [r7, #8]
 80144a0:	699b      	ldr	r3, [r3, #24]
 80144a2:	431a      	orrs	r2, r3
 80144a4:	68bb      	ldr	r3, [r7, #8]
 80144a6:	681b      	ldr	r3, [r3, #0]
 80144a8:	ea42 0103 	orr.w	r1, r2, r3
 80144ac:	68fb      	ldr	r3, [r7, #12]
 80144ae:	681b      	ldr	r3, [r3, #0]
 80144b0:	687a      	ldr	r2, [r7, #4]
 80144b2:	430a      	orrs	r2, r1
 80144b4:	615a      	str	r2, [r3, #20]
}
 80144b6:	e0ad      	b.n	8014614 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80144b8:	68bb      	ldr	r3, [r7, #8]
 80144ba:	6a1b      	ldr	r3, [r3, #32]
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d058      	beq.n	8014572 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80144c0:	68fb      	ldr	r3, [r7, #12]
 80144c2:	681b      	ldr	r3, [r3, #0]
 80144c4:	68ba      	ldr	r2, [r7, #8]
 80144c6:	6892      	ldr	r2, [r2, #8]
 80144c8:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80144ca:	68bb      	ldr	r3, [r7, #8]
 80144cc:	69db      	ldr	r3, [r3, #28]
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d02d      	beq.n	801452e <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80144d2:	68bb      	ldr	r3, [r7, #8]
 80144d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144d6:	68bb      	ldr	r3, [r7, #8]
 80144d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80144da:	431a      	orrs	r2, r3
 80144dc:	68bb      	ldr	r3, [r7, #8]
 80144de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80144e0:	431a      	orrs	r2, r3
 80144e2:	68bb      	ldr	r3, [r7, #8]
 80144e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144e6:	431a      	orrs	r2, r3
 80144e8:	68bb      	ldr	r3, [r7, #8]
 80144ea:	695b      	ldr	r3, [r3, #20]
 80144ec:	049b      	lsls	r3, r3, #18
 80144ee:	431a      	orrs	r2, r3
 80144f0:	68bb      	ldr	r3, [r7, #8]
 80144f2:	691b      	ldr	r3, [r3, #16]
 80144f4:	431a      	orrs	r2, r3
 80144f6:	68bb      	ldr	r3, [r7, #8]
 80144f8:	6a1b      	ldr	r3, [r3, #32]
 80144fa:	431a      	orrs	r2, r3
 80144fc:	68bb      	ldr	r3, [r7, #8]
 80144fe:	68db      	ldr	r3, [r3, #12]
 8014500:	431a      	orrs	r2, r3
 8014502:	68bb      	ldr	r3, [r7, #8]
 8014504:	69db      	ldr	r3, [r3, #28]
 8014506:	431a      	orrs	r2, r3
 8014508:	68bb      	ldr	r3, [r7, #8]
 801450a:	699b      	ldr	r3, [r3, #24]
 801450c:	ea42 0103 	orr.w	r1, r2, r3
 8014510:	68fb      	ldr	r3, [r7, #12]
 8014512:	681b      	ldr	r3, [r3, #0]
 8014514:	687a      	ldr	r2, [r7, #4]
 8014516:	430a      	orrs	r2, r1
 8014518:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8014520:	d078      	beq.n	8014614 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8014522:	68fb      	ldr	r3, [r7, #12]
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	68ba      	ldr	r2, [r7, #8]
 8014528:	6852      	ldr	r2, [r2, #4]
 801452a:	619a      	str	r2, [r3, #24]
}
 801452c:	e072      	b.n	8014614 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 801452e:	68bb      	ldr	r3, [r7, #8]
 8014530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014532:	68bb      	ldr	r3, [r7, #8]
 8014534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014536:	431a      	orrs	r2, r3
 8014538:	68bb      	ldr	r3, [r7, #8]
 801453a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801453c:	431a      	orrs	r2, r3
 801453e:	68bb      	ldr	r3, [r7, #8]
 8014540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014542:	431a      	orrs	r2, r3
 8014544:	68bb      	ldr	r3, [r7, #8]
 8014546:	695b      	ldr	r3, [r3, #20]
 8014548:	049b      	lsls	r3, r3, #18
 801454a:	431a      	orrs	r2, r3
 801454c:	68bb      	ldr	r3, [r7, #8]
 801454e:	691b      	ldr	r3, [r3, #16]
 8014550:	431a      	orrs	r2, r3
 8014552:	68bb      	ldr	r3, [r7, #8]
 8014554:	6a1b      	ldr	r3, [r3, #32]
 8014556:	431a      	orrs	r2, r3
 8014558:	68bb      	ldr	r3, [r7, #8]
 801455a:	69db      	ldr	r3, [r3, #28]
 801455c:	431a      	orrs	r2, r3
 801455e:	68bb      	ldr	r3, [r7, #8]
 8014560:	699b      	ldr	r3, [r3, #24]
 8014562:	ea42 0103 	orr.w	r1, r2, r3
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	681b      	ldr	r3, [r3, #0]
 801456a:	687a      	ldr	r2, [r7, #4]
 801456c:	430a      	orrs	r2, r1
 801456e:	615a      	str	r2, [r3, #20]
}
 8014570:	e050      	b.n	8014614 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8014572:	68bb      	ldr	r3, [r7, #8]
 8014574:	69db      	ldr	r3, [r3, #28]
 8014576:	2b00      	cmp	r3, #0
 8014578:	d02a      	beq.n	80145d0 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 801457a:	68bb      	ldr	r3, [r7, #8]
 801457c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801457e:	68bb      	ldr	r3, [r7, #8]
 8014580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014582:	431a      	orrs	r2, r3
 8014584:	68bb      	ldr	r3, [r7, #8]
 8014586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014588:	431a      	orrs	r2, r3
 801458a:	68bb      	ldr	r3, [r7, #8]
 801458c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801458e:	431a      	orrs	r2, r3
 8014590:	68bb      	ldr	r3, [r7, #8]
 8014592:	695b      	ldr	r3, [r3, #20]
 8014594:	049b      	lsls	r3, r3, #18
 8014596:	431a      	orrs	r2, r3
 8014598:	68bb      	ldr	r3, [r7, #8]
 801459a:	6a1b      	ldr	r3, [r3, #32]
 801459c:	431a      	orrs	r2, r3
 801459e:	68bb      	ldr	r3, [r7, #8]
 80145a0:	68db      	ldr	r3, [r3, #12]
 80145a2:	431a      	orrs	r2, r3
 80145a4:	68bb      	ldr	r3, [r7, #8]
 80145a6:	69db      	ldr	r3, [r3, #28]
 80145a8:	431a      	orrs	r2, r3
 80145aa:	68bb      	ldr	r3, [r7, #8]
 80145ac:	699b      	ldr	r3, [r3, #24]
 80145ae:	ea42 0103 	orr.w	r1, r2, r3
 80145b2:	68fb      	ldr	r3, [r7, #12]
 80145b4:	681b      	ldr	r3, [r3, #0]
 80145b6:	687a      	ldr	r2, [r7, #4]
 80145b8:	430a      	orrs	r2, r1
 80145ba:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80145c2:	d027      	beq.n	8014614 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80145c4:	68fb      	ldr	r3, [r7, #12]
 80145c6:	681b      	ldr	r3, [r3, #0]
 80145c8:	68ba      	ldr	r2, [r7, #8]
 80145ca:	6852      	ldr	r2, [r2, #4]
 80145cc:	619a      	str	r2, [r3, #24]
}
 80145ce:	e021      	b.n	8014614 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80145d0:	68bb      	ldr	r3, [r7, #8]
 80145d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d01d      	beq.n	8014614 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80145d8:	68bb      	ldr	r3, [r7, #8]
 80145da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80145dc:	68bb      	ldr	r3, [r7, #8]
 80145de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80145e0:	431a      	orrs	r2, r3
 80145e2:	68bb      	ldr	r3, [r7, #8]
 80145e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80145e6:	431a      	orrs	r2, r3
 80145e8:	68bb      	ldr	r3, [r7, #8]
 80145ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145ec:	431a      	orrs	r2, r3
 80145ee:	68bb      	ldr	r3, [r7, #8]
 80145f0:	695b      	ldr	r3, [r3, #20]
 80145f2:	049b      	lsls	r3, r3, #18
 80145f4:	431a      	orrs	r2, r3
 80145f6:	68bb      	ldr	r3, [r7, #8]
 80145f8:	6a1b      	ldr	r3, [r3, #32]
 80145fa:	431a      	orrs	r2, r3
 80145fc:	68bb      	ldr	r3, [r7, #8]
 80145fe:	69db      	ldr	r3, [r3, #28]
 8014600:	431a      	orrs	r2, r3
 8014602:	68bb      	ldr	r3, [r7, #8]
 8014604:	699b      	ldr	r3, [r3, #24]
 8014606:	ea42 0103 	orr.w	r1, r2, r3
 801460a:	68fb      	ldr	r3, [r7, #12]
 801460c:	681b      	ldr	r3, [r3, #0]
 801460e:	687a      	ldr	r2, [r7, #4]
 8014610:	430a      	orrs	r2, r1
 8014612:	615a      	str	r2, [r3, #20]
}
 8014614:	bf00      	nop
 8014616:	3714      	adds	r7, #20
 8014618:	46bd      	mov	sp, r7
 801461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801461e:	4770      	bx	lr

08014620 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8014620:	b580      	push	{r7, lr}
 8014622:	b08c      	sub	sp, #48	; 0x30
 8014624:	af00      	add	r7, sp, #0
 8014626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	2b00      	cmp	r3, #0
 801462c:	d102      	bne.n	8014634 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801462e:	2301      	movs	r3, #1
 8014630:	f000 bc1d 	b.w	8014e6e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	f003 0301 	and.w	r3, r3, #1
 801463c:	2b00      	cmp	r3, #0
 801463e:	f000 8087 	beq.w	8014750 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8014642:	4b99      	ldr	r3, [pc, #612]	; (80148a8 <HAL_RCC_OscConfig+0x288>)
 8014644:	691b      	ldr	r3, [r3, #16]
 8014646:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801464a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801464c:	4b96      	ldr	r3, [pc, #600]	; (80148a8 <HAL_RCC_OscConfig+0x288>)
 801464e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014650:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8014652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014654:	2b10      	cmp	r3, #16
 8014656:	d007      	beq.n	8014668 <HAL_RCC_OscConfig+0x48>
 8014658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801465a:	2b18      	cmp	r3, #24
 801465c:	d110      	bne.n	8014680 <HAL_RCC_OscConfig+0x60>
 801465e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014660:	f003 0303 	and.w	r3, r3, #3
 8014664:	2b02      	cmp	r3, #2
 8014666:	d10b      	bne.n	8014680 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8014668:	4b8f      	ldr	r3, [pc, #572]	; (80148a8 <HAL_RCC_OscConfig+0x288>)
 801466a:	681b      	ldr	r3, [r3, #0]
 801466c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014670:	2b00      	cmp	r3, #0
 8014672:	d06c      	beq.n	801474e <HAL_RCC_OscConfig+0x12e>
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	685b      	ldr	r3, [r3, #4]
 8014678:	2b00      	cmp	r3, #0
 801467a:	d168      	bne.n	801474e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 801467c:	2301      	movs	r3, #1
 801467e:	e3f6      	b.n	8014e6e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	685b      	ldr	r3, [r3, #4]
 8014684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014688:	d106      	bne.n	8014698 <HAL_RCC_OscConfig+0x78>
 801468a:	4b87      	ldr	r3, [pc, #540]	; (80148a8 <HAL_RCC_OscConfig+0x288>)
 801468c:	681b      	ldr	r3, [r3, #0]
 801468e:	4a86      	ldr	r2, [pc, #536]	; (80148a8 <HAL_RCC_OscConfig+0x288>)
 8014690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014694:	6013      	str	r3, [r2, #0]
 8014696:	e02e      	b.n	80146f6 <HAL_RCC_OscConfig+0xd6>
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	685b      	ldr	r3, [r3, #4]
 801469c:	2b00      	cmp	r3, #0
 801469e:	d10c      	bne.n	80146ba <HAL_RCC_OscConfig+0x9a>
 80146a0:	4b81      	ldr	r3, [pc, #516]	; (80148a8 <HAL_RCC_OscConfig+0x288>)
 80146a2:	681b      	ldr	r3, [r3, #0]
 80146a4:	4a80      	ldr	r2, [pc, #512]	; (80148a8 <HAL_RCC_OscConfig+0x288>)
 80146a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80146aa:	6013      	str	r3, [r2, #0]
 80146ac:	4b7e      	ldr	r3, [pc, #504]	; (80148a8 <HAL_RCC_OscConfig+0x288>)
 80146ae:	681b      	ldr	r3, [r3, #0]
 80146b0:	4a7d      	ldr	r2, [pc, #500]	; (80148a8 <HAL_RCC_OscConfig+0x288>)
 80146b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80146b6:	6013      	str	r3, [r2, #0]
 80146b8:	e01d      	b.n	80146f6 <HAL_RCC_OscConfig+0xd6>
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	685b      	ldr	r3, [r3, #4]
 80146be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80146c2:	d10c      	bne.n	80146de <HAL_RCC_OscConfig+0xbe>
 80146c4:	4b78      	ldr	r3, [pc, #480]	; (80148a8 <HAL_RCC_OscConfig+0x288>)
 80146c6:	681b      	ldr	r3, [r3, #0]
 80146c8:	4a77      	ldr	r2, [pc, #476]	; (80148a8 <HAL_RCC_OscConfig+0x288>)
 80146ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80146ce:	6013      	str	r3, [r2, #0]
 80146d0:	4b75      	ldr	r3, [pc, #468]	; (80148a8 <HAL_RCC_OscConfig+0x288>)
 80146d2:	681b      	ldr	r3, [r3, #0]
 80146d4:	4a74      	ldr	r2, [pc, #464]	; (80148a8 <HAL_RCC_OscConfig+0x288>)
 80146d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80146da:	6013      	str	r3, [r2, #0]
 80146dc:	e00b      	b.n	80146f6 <HAL_RCC_OscConfig+0xd6>
 80146de:	4b72      	ldr	r3, [pc, #456]	; (80148a8 <HAL_RCC_OscConfig+0x288>)
 80146e0:	681b      	ldr	r3, [r3, #0]
 80146e2:	4a71      	ldr	r2, [pc, #452]	; (80148a8 <HAL_RCC_OscConfig+0x288>)
 80146e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80146e8:	6013      	str	r3, [r2, #0]
 80146ea:	4b6f      	ldr	r3, [pc, #444]	; (80148a8 <HAL_RCC_OscConfig+0x288>)
 80146ec:	681b      	ldr	r3, [r3, #0]
 80146ee:	4a6e      	ldr	r2, [pc, #440]	; (80148a8 <HAL_RCC_OscConfig+0x288>)
 80146f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80146f4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	685b      	ldr	r3, [r3, #4]
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d013      	beq.n	8014726 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80146fe:	f7fc fddf 	bl	80112c0 <HAL_GetTick>
 8014702:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8014704:	e008      	b.n	8014718 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8014706:	f7fc fddb 	bl	80112c0 <HAL_GetTick>
 801470a:	4602      	mov	r2, r0
 801470c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801470e:	1ad3      	subs	r3, r2, r3
 8014710:	2b64      	cmp	r3, #100	; 0x64
 8014712:	d901      	bls.n	8014718 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8014714:	2303      	movs	r3, #3
 8014716:	e3aa      	b.n	8014e6e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8014718:	4b63      	ldr	r3, [pc, #396]	; (80148a8 <HAL_RCC_OscConfig+0x288>)
 801471a:	681b      	ldr	r3, [r3, #0]
 801471c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014720:	2b00      	cmp	r3, #0
 8014722:	d0f0      	beq.n	8014706 <HAL_RCC_OscConfig+0xe6>
 8014724:	e014      	b.n	8014750 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014726:	f7fc fdcb 	bl	80112c0 <HAL_GetTick>
 801472a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801472c:	e008      	b.n	8014740 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801472e:	f7fc fdc7 	bl	80112c0 <HAL_GetTick>
 8014732:	4602      	mov	r2, r0
 8014734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014736:	1ad3      	subs	r3, r2, r3
 8014738:	2b64      	cmp	r3, #100	; 0x64
 801473a:	d901      	bls.n	8014740 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 801473c:	2303      	movs	r3, #3
 801473e:	e396      	b.n	8014e6e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8014740:	4b59      	ldr	r3, [pc, #356]	; (80148a8 <HAL_RCC_OscConfig+0x288>)
 8014742:	681b      	ldr	r3, [r3, #0]
 8014744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014748:	2b00      	cmp	r3, #0
 801474a:	d1f0      	bne.n	801472e <HAL_RCC_OscConfig+0x10e>
 801474c:	e000      	b.n	8014750 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801474e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	681b      	ldr	r3, [r3, #0]
 8014754:	f003 0302 	and.w	r3, r3, #2
 8014758:	2b00      	cmp	r3, #0
 801475a:	f000 80cb 	beq.w	80148f4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801475e:	4b52      	ldr	r3, [pc, #328]	; (80148a8 <HAL_RCC_OscConfig+0x288>)
 8014760:	691b      	ldr	r3, [r3, #16]
 8014762:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014766:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8014768:	4b4f      	ldr	r3, [pc, #316]	; (80148a8 <HAL_RCC_OscConfig+0x288>)
 801476a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801476c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 801476e:	6a3b      	ldr	r3, [r7, #32]
 8014770:	2b00      	cmp	r3, #0
 8014772:	d007      	beq.n	8014784 <HAL_RCC_OscConfig+0x164>
 8014774:	6a3b      	ldr	r3, [r7, #32]
 8014776:	2b18      	cmp	r3, #24
 8014778:	d156      	bne.n	8014828 <HAL_RCC_OscConfig+0x208>
 801477a:	69fb      	ldr	r3, [r7, #28]
 801477c:	f003 0303 	and.w	r3, r3, #3
 8014780:	2b00      	cmp	r3, #0
 8014782:	d151      	bne.n	8014828 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8014784:	4b48      	ldr	r3, [pc, #288]	; (80148a8 <HAL_RCC_OscConfig+0x288>)
 8014786:	681b      	ldr	r3, [r3, #0]
 8014788:	f003 0304 	and.w	r3, r3, #4
 801478c:	2b00      	cmp	r3, #0
 801478e:	d005      	beq.n	801479c <HAL_RCC_OscConfig+0x17c>
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	68db      	ldr	r3, [r3, #12]
 8014794:	2b00      	cmp	r3, #0
 8014796:	d101      	bne.n	801479c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8014798:	2301      	movs	r3, #1
 801479a:	e368      	b.n	8014e6e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801479c:	4b42      	ldr	r3, [pc, #264]	; (80148a8 <HAL_RCC_OscConfig+0x288>)
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	f023 0219 	bic.w	r2, r3, #25
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	68db      	ldr	r3, [r3, #12]
 80147a8:	493f      	ldr	r1, [pc, #252]	; (80148a8 <HAL_RCC_OscConfig+0x288>)
 80147aa:	4313      	orrs	r3, r2
 80147ac:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80147ae:	f7fc fd87 	bl	80112c0 <HAL_GetTick>
 80147b2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80147b4:	e008      	b.n	80147c8 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80147b6:	f7fc fd83 	bl	80112c0 <HAL_GetTick>
 80147ba:	4602      	mov	r2, r0
 80147bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147be:	1ad3      	subs	r3, r2, r3
 80147c0:	2b02      	cmp	r3, #2
 80147c2:	d901      	bls.n	80147c8 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80147c4:	2303      	movs	r3, #3
 80147c6:	e352      	b.n	8014e6e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80147c8:	4b37      	ldr	r3, [pc, #220]	; (80148a8 <HAL_RCC_OscConfig+0x288>)
 80147ca:	681b      	ldr	r3, [r3, #0]
 80147cc:	f003 0304 	and.w	r3, r3, #4
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d0f0      	beq.n	80147b6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80147d4:	f7fc fd80 	bl	80112d8 <HAL_GetREVID>
 80147d8:	4603      	mov	r3, r0
 80147da:	f241 0203 	movw	r2, #4099	; 0x1003
 80147de:	4293      	cmp	r3, r2
 80147e0:	d817      	bhi.n	8014812 <HAL_RCC_OscConfig+0x1f2>
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	691b      	ldr	r3, [r3, #16]
 80147e6:	2b40      	cmp	r3, #64	; 0x40
 80147e8:	d108      	bne.n	80147fc <HAL_RCC_OscConfig+0x1dc>
 80147ea:	4b2f      	ldr	r3, [pc, #188]	; (80148a8 <HAL_RCC_OscConfig+0x288>)
 80147ec:	685b      	ldr	r3, [r3, #4]
 80147ee:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80147f2:	4a2d      	ldr	r2, [pc, #180]	; (80148a8 <HAL_RCC_OscConfig+0x288>)
 80147f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80147f8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80147fa:	e07b      	b.n	80148f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80147fc:	4b2a      	ldr	r3, [pc, #168]	; (80148a8 <HAL_RCC_OscConfig+0x288>)
 80147fe:	685b      	ldr	r3, [r3, #4]
 8014800:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	691b      	ldr	r3, [r3, #16]
 8014808:	031b      	lsls	r3, r3, #12
 801480a:	4927      	ldr	r1, [pc, #156]	; (80148a8 <HAL_RCC_OscConfig+0x288>)
 801480c:	4313      	orrs	r3, r2
 801480e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8014810:	e070      	b.n	80148f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014812:	4b25      	ldr	r3, [pc, #148]	; (80148a8 <HAL_RCC_OscConfig+0x288>)
 8014814:	685b      	ldr	r3, [r3, #4]
 8014816:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	691b      	ldr	r3, [r3, #16]
 801481e:	061b      	lsls	r3, r3, #24
 8014820:	4921      	ldr	r1, [pc, #132]	; (80148a8 <HAL_RCC_OscConfig+0x288>)
 8014822:	4313      	orrs	r3, r2
 8014824:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8014826:	e065      	b.n	80148f4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	68db      	ldr	r3, [r3, #12]
 801482c:	2b00      	cmp	r3, #0
 801482e:	d048      	beq.n	80148c2 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8014830:	4b1d      	ldr	r3, [pc, #116]	; (80148a8 <HAL_RCC_OscConfig+0x288>)
 8014832:	681b      	ldr	r3, [r3, #0]
 8014834:	f023 0219 	bic.w	r2, r3, #25
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	68db      	ldr	r3, [r3, #12]
 801483c:	491a      	ldr	r1, [pc, #104]	; (80148a8 <HAL_RCC_OscConfig+0x288>)
 801483e:	4313      	orrs	r3, r2
 8014840:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014842:	f7fc fd3d 	bl	80112c0 <HAL_GetTick>
 8014846:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8014848:	e008      	b.n	801485c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801484a:	f7fc fd39 	bl	80112c0 <HAL_GetTick>
 801484e:	4602      	mov	r2, r0
 8014850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014852:	1ad3      	subs	r3, r2, r3
 8014854:	2b02      	cmp	r3, #2
 8014856:	d901      	bls.n	801485c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8014858:	2303      	movs	r3, #3
 801485a:	e308      	b.n	8014e6e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801485c:	4b12      	ldr	r3, [pc, #72]	; (80148a8 <HAL_RCC_OscConfig+0x288>)
 801485e:	681b      	ldr	r3, [r3, #0]
 8014860:	f003 0304 	and.w	r3, r3, #4
 8014864:	2b00      	cmp	r3, #0
 8014866:	d0f0      	beq.n	801484a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014868:	f7fc fd36 	bl	80112d8 <HAL_GetREVID>
 801486c:	4603      	mov	r3, r0
 801486e:	f241 0203 	movw	r2, #4099	; 0x1003
 8014872:	4293      	cmp	r3, r2
 8014874:	d81a      	bhi.n	80148ac <HAL_RCC_OscConfig+0x28c>
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	691b      	ldr	r3, [r3, #16]
 801487a:	2b40      	cmp	r3, #64	; 0x40
 801487c:	d108      	bne.n	8014890 <HAL_RCC_OscConfig+0x270>
 801487e:	4b0a      	ldr	r3, [pc, #40]	; (80148a8 <HAL_RCC_OscConfig+0x288>)
 8014880:	685b      	ldr	r3, [r3, #4]
 8014882:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8014886:	4a08      	ldr	r2, [pc, #32]	; (80148a8 <HAL_RCC_OscConfig+0x288>)
 8014888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801488c:	6053      	str	r3, [r2, #4]
 801488e:	e031      	b.n	80148f4 <HAL_RCC_OscConfig+0x2d4>
 8014890:	4b05      	ldr	r3, [pc, #20]	; (80148a8 <HAL_RCC_OscConfig+0x288>)
 8014892:	685b      	ldr	r3, [r3, #4]
 8014894:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	691b      	ldr	r3, [r3, #16]
 801489c:	031b      	lsls	r3, r3, #12
 801489e:	4902      	ldr	r1, [pc, #8]	; (80148a8 <HAL_RCC_OscConfig+0x288>)
 80148a0:	4313      	orrs	r3, r2
 80148a2:	604b      	str	r3, [r1, #4]
 80148a4:	e026      	b.n	80148f4 <HAL_RCC_OscConfig+0x2d4>
 80148a6:	bf00      	nop
 80148a8:	58024400 	.word	0x58024400
 80148ac:	4b9a      	ldr	r3, [pc, #616]	; (8014b18 <HAL_RCC_OscConfig+0x4f8>)
 80148ae:	685b      	ldr	r3, [r3, #4]
 80148b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	691b      	ldr	r3, [r3, #16]
 80148b8:	061b      	lsls	r3, r3, #24
 80148ba:	4997      	ldr	r1, [pc, #604]	; (8014b18 <HAL_RCC_OscConfig+0x4f8>)
 80148bc:	4313      	orrs	r3, r2
 80148be:	604b      	str	r3, [r1, #4]
 80148c0:	e018      	b.n	80148f4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80148c2:	4b95      	ldr	r3, [pc, #596]	; (8014b18 <HAL_RCC_OscConfig+0x4f8>)
 80148c4:	681b      	ldr	r3, [r3, #0]
 80148c6:	4a94      	ldr	r2, [pc, #592]	; (8014b18 <HAL_RCC_OscConfig+0x4f8>)
 80148c8:	f023 0301 	bic.w	r3, r3, #1
 80148cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80148ce:	f7fc fcf7 	bl	80112c0 <HAL_GetTick>
 80148d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80148d4:	e008      	b.n	80148e8 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80148d6:	f7fc fcf3 	bl	80112c0 <HAL_GetTick>
 80148da:	4602      	mov	r2, r0
 80148dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148de:	1ad3      	subs	r3, r2, r3
 80148e0:	2b02      	cmp	r3, #2
 80148e2:	d901      	bls.n	80148e8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80148e4:	2303      	movs	r3, #3
 80148e6:	e2c2      	b.n	8014e6e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80148e8:	4b8b      	ldr	r3, [pc, #556]	; (8014b18 <HAL_RCC_OscConfig+0x4f8>)
 80148ea:	681b      	ldr	r3, [r3, #0]
 80148ec:	f003 0304 	and.w	r3, r3, #4
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d1f0      	bne.n	80148d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	f003 0310 	and.w	r3, r3, #16
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	f000 80a9 	beq.w	8014a54 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8014902:	4b85      	ldr	r3, [pc, #532]	; (8014b18 <HAL_RCC_OscConfig+0x4f8>)
 8014904:	691b      	ldr	r3, [r3, #16]
 8014906:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801490a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801490c:	4b82      	ldr	r3, [pc, #520]	; (8014b18 <HAL_RCC_OscConfig+0x4f8>)
 801490e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014910:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8014912:	69bb      	ldr	r3, [r7, #24]
 8014914:	2b08      	cmp	r3, #8
 8014916:	d007      	beq.n	8014928 <HAL_RCC_OscConfig+0x308>
 8014918:	69bb      	ldr	r3, [r7, #24]
 801491a:	2b18      	cmp	r3, #24
 801491c:	d13a      	bne.n	8014994 <HAL_RCC_OscConfig+0x374>
 801491e:	697b      	ldr	r3, [r7, #20]
 8014920:	f003 0303 	and.w	r3, r3, #3
 8014924:	2b01      	cmp	r3, #1
 8014926:	d135      	bne.n	8014994 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8014928:	4b7b      	ldr	r3, [pc, #492]	; (8014b18 <HAL_RCC_OscConfig+0x4f8>)
 801492a:	681b      	ldr	r3, [r3, #0]
 801492c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014930:	2b00      	cmp	r3, #0
 8014932:	d005      	beq.n	8014940 <HAL_RCC_OscConfig+0x320>
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	69db      	ldr	r3, [r3, #28]
 8014938:	2b80      	cmp	r3, #128	; 0x80
 801493a:	d001      	beq.n	8014940 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 801493c:	2301      	movs	r3, #1
 801493e:	e296      	b.n	8014e6e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8014940:	f7fc fcca 	bl	80112d8 <HAL_GetREVID>
 8014944:	4603      	mov	r3, r0
 8014946:	f241 0203 	movw	r2, #4099	; 0x1003
 801494a:	4293      	cmp	r3, r2
 801494c:	d817      	bhi.n	801497e <HAL_RCC_OscConfig+0x35e>
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	6a1b      	ldr	r3, [r3, #32]
 8014952:	2b20      	cmp	r3, #32
 8014954:	d108      	bne.n	8014968 <HAL_RCC_OscConfig+0x348>
 8014956:	4b70      	ldr	r3, [pc, #448]	; (8014b18 <HAL_RCC_OscConfig+0x4f8>)
 8014958:	685b      	ldr	r3, [r3, #4]
 801495a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 801495e:	4a6e      	ldr	r2, [pc, #440]	; (8014b18 <HAL_RCC_OscConfig+0x4f8>)
 8014960:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014964:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8014966:	e075      	b.n	8014a54 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8014968:	4b6b      	ldr	r3, [pc, #428]	; (8014b18 <HAL_RCC_OscConfig+0x4f8>)
 801496a:	685b      	ldr	r3, [r3, #4]
 801496c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	6a1b      	ldr	r3, [r3, #32]
 8014974:	069b      	lsls	r3, r3, #26
 8014976:	4968      	ldr	r1, [pc, #416]	; (8014b18 <HAL_RCC_OscConfig+0x4f8>)
 8014978:	4313      	orrs	r3, r2
 801497a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801497c:	e06a      	b.n	8014a54 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801497e:	4b66      	ldr	r3, [pc, #408]	; (8014b18 <HAL_RCC_OscConfig+0x4f8>)
 8014980:	68db      	ldr	r3, [r3, #12]
 8014982:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	6a1b      	ldr	r3, [r3, #32]
 801498a:	061b      	lsls	r3, r3, #24
 801498c:	4962      	ldr	r1, [pc, #392]	; (8014b18 <HAL_RCC_OscConfig+0x4f8>)
 801498e:	4313      	orrs	r3, r2
 8014990:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8014992:	e05f      	b.n	8014a54 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	69db      	ldr	r3, [r3, #28]
 8014998:	2b00      	cmp	r3, #0
 801499a:	d042      	beq.n	8014a22 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 801499c:	4b5e      	ldr	r3, [pc, #376]	; (8014b18 <HAL_RCC_OscConfig+0x4f8>)
 801499e:	681b      	ldr	r3, [r3, #0]
 80149a0:	4a5d      	ldr	r2, [pc, #372]	; (8014b18 <HAL_RCC_OscConfig+0x4f8>)
 80149a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80149a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80149a8:	f7fc fc8a 	bl	80112c0 <HAL_GetTick>
 80149ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80149ae:	e008      	b.n	80149c2 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80149b0:	f7fc fc86 	bl	80112c0 <HAL_GetTick>
 80149b4:	4602      	mov	r2, r0
 80149b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149b8:	1ad3      	subs	r3, r2, r3
 80149ba:	2b02      	cmp	r3, #2
 80149bc:	d901      	bls.n	80149c2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80149be:	2303      	movs	r3, #3
 80149c0:	e255      	b.n	8014e6e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80149c2:	4b55      	ldr	r3, [pc, #340]	; (8014b18 <HAL_RCC_OscConfig+0x4f8>)
 80149c4:	681b      	ldr	r3, [r3, #0]
 80149c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d0f0      	beq.n	80149b0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80149ce:	f7fc fc83 	bl	80112d8 <HAL_GetREVID>
 80149d2:	4603      	mov	r3, r0
 80149d4:	f241 0203 	movw	r2, #4099	; 0x1003
 80149d8:	4293      	cmp	r3, r2
 80149da:	d817      	bhi.n	8014a0c <HAL_RCC_OscConfig+0x3ec>
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	6a1b      	ldr	r3, [r3, #32]
 80149e0:	2b20      	cmp	r3, #32
 80149e2:	d108      	bne.n	80149f6 <HAL_RCC_OscConfig+0x3d6>
 80149e4:	4b4c      	ldr	r3, [pc, #304]	; (8014b18 <HAL_RCC_OscConfig+0x4f8>)
 80149e6:	685b      	ldr	r3, [r3, #4]
 80149e8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80149ec:	4a4a      	ldr	r2, [pc, #296]	; (8014b18 <HAL_RCC_OscConfig+0x4f8>)
 80149ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80149f2:	6053      	str	r3, [r2, #4]
 80149f4:	e02e      	b.n	8014a54 <HAL_RCC_OscConfig+0x434>
 80149f6:	4b48      	ldr	r3, [pc, #288]	; (8014b18 <HAL_RCC_OscConfig+0x4f8>)
 80149f8:	685b      	ldr	r3, [r3, #4]
 80149fa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	6a1b      	ldr	r3, [r3, #32]
 8014a02:	069b      	lsls	r3, r3, #26
 8014a04:	4944      	ldr	r1, [pc, #272]	; (8014b18 <HAL_RCC_OscConfig+0x4f8>)
 8014a06:	4313      	orrs	r3, r2
 8014a08:	604b      	str	r3, [r1, #4]
 8014a0a:	e023      	b.n	8014a54 <HAL_RCC_OscConfig+0x434>
 8014a0c:	4b42      	ldr	r3, [pc, #264]	; (8014b18 <HAL_RCC_OscConfig+0x4f8>)
 8014a0e:	68db      	ldr	r3, [r3, #12]
 8014a10:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	6a1b      	ldr	r3, [r3, #32]
 8014a18:	061b      	lsls	r3, r3, #24
 8014a1a:	493f      	ldr	r1, [pc, #252]	; (8014b18 <HAL_RCC_OscConfig+0x4f8>)
 8014a1c:	4313      	orrs	r3, r2
 8014a1e:	60cb      	str	r3, [r1, #12]
 8014a20:	e018      	b.n	8014a54 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8014a22:	4b3d      	ldr	r3, [pc, #244]	; (8014b18 <HAL_RCC_OscConfig+0x4f8>)
 8014a24:	681b      	ldr	r3, [r3, #0]
 8014a26:	4a3c      	ldr	r2, [pc, #240]	; (8014b18 <HAL_RCC_OscConfig+0x4f8>)
 8014a28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014a2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014a2e:	f7fc fc47 	bl	80112c0 <HAL_GetTick>
 8014a32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8014a34:	e008      	b.n	8014a48 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8014a36:	f7fc fc43 	bl	80112c0 <HAL_GetTick>
 8014a3a:	4602      	mov	r2, r0
 8014a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a3e:	1ad3      	subs	r3, r2, r3
 8014a40:	2b02      	cmp	r3, #2
 8014a42:	d901      	bls.n	8014a48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8014a44:	2303      	movs	r3, #3
 8014a46:	e212      	b.n	8014e6e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8014a48:	4b33      	ldr	r3, [pc, #204]	; (8014b18 <HAL_RCC_OscConfig+0x4f8>)
 8014a4a:	681b      	ldr	r3, [r3, #0]
 8014a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d1f0      	bne.n	8014a36 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	f003 0308 	and.w	r3, r3, #8
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d036      	beq.n	8014ace <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	695b      	ldr	r3, [r3, #20]
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d019      	beq.n	8014a9c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8014a68:	4b2b      	ldr	r3, [pc, #172]	; (8014b18 <HAL_RCC_OscConfig+0x4f8>)
 8014a6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014a6c:	4a2a      	ldr	r2, [pc, #168]	; (8014b18 <HAL_RCC_OscConfig+0x4f8>)
 8014a6e:	f043 0301 	orr.w	r3, r3, #1
 8014a72:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014a74:	f7fc fc24 	bl	80112c0 <HAL_GetTick>
 8014a78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8014a7a:	e008      	b.n	8014a8e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8014a7c:	f7fc fc20 	bl	80112c0 <HAL_GetTick>
 8014a80:	4602      	mov	r2, r0
 8014a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a84:	1ad3      	subs	r3, r2, r3
 8014a86:	2b02      	cmp	r3, #2
 8014a88:	d901      	bls.n	8014a8e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8014a8a:	2303      	movs	r3, #3
 8014a8c:	e1ef      	b.n	8014e6e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8014a8e:	4b22      	ldr	r3, [pc, #136]	; (8014b18 <HAL_RCC_OscConfig+0x4f8>)
 8014a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014a92:	f003 0302 	and.w	r3, r3, #2
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d0f0      	beq.n	8014a7c <HAL_RCC_OscConfig+0x45c>
 8014a9a:	e018      	b.n	8014ace <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8014a9c:	4b1e      	ldr	r3, [pc, #120]	; (8014b18 <HAL_RCC_OscConfig+0x4f8>)
 8014a9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014aa0:	4a1d      	ldr	r2, [pc, #116]	; (8014b18 <HAL_RCC_OscConfig+0x4f8>)
 8014aa2:	f023 0301 	bic.w	r3, r3, #1
 8014aa6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014aa8:	f7fc fc0a 	bl	80112c0 <HAL_GetTick>
 8014aac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8014aae:	e008      	b.n	8014ac2 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8014ab0:	f7fc fc06 	bl	80112c0 <HAL_GetTick>
 8014ab4:	4602      	mov	r2, r0
 8014ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ab8:	1ad3      	subs	r3, r2, r3
 8014aba:	2b02      	cmp	r3, #2
 8014abc:	d901      	bls.n	8014ac2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8014abe:	2303      	movs	r3, #3
 8014ac0:	e1d5      	b.n	8014e6e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8014ac2:	4b15      	ldr	r3, [pc, #84]	; (8014b18 <HAL_RCC_OscConfig+0x4f8>)
 8014ac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014ac6:	f003 0302 	and.w	r3, r3, #2
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d1f0      	bne.n	8014ab0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	681b      	ldr	r3, [r3, #0]
 8014ad2:	f003 0320 	and.w	r3, r3, #32
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d039      	beq.n	8014b4e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	699b      	ldr	r3, [r3, #24]
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d01c      	beq.n	8014b1c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8014ae2:	4b0d      	ldr	r3, [pc, #52]	; (8014b18 <HAL_RCC_OscConfig+0x4f8>)
 8014ae4:	681b      	ldr	r3, [r3, #0]
 8014ae6:	4a0c      	ldr	r2, [pc, #48]	; (8014b18 <HAL_RCC_OscConfig+0x4f8>)
 8014ae8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8014aec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8014aee:	f7fc fbe7 	bl	80112c0 <HAL_GetTick>
 8014af2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8014af4:	e008      	b.n	8014b08 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8014af6:	f7fc fbe3 	bl	80112c0 <HAL_GetTick>
 8014afa:	4602      	mov	r2, r0
 8014afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014afe:	1ad3      	subs	r3, r2, r3
 8014b00:	2b02      	cmp	r3, #2
 8014b02:	d901      	bls.n	8014b08 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8014b04:	2303      	movs	r3, #3
 8014b06:	e1b2      	b.n	8014e6e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8014b08:	4b03      	ldr	r3, [pc, #12]	; (8014b18 <HAL_RCC_OscConfig+0x4f8>)
 8014b0a:	681b      	ldr	r3, [r3, #0]
 8014b0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	d0f0      	beq.n	8014af6 <HAL_RCC_OscConfig+0x4d6>
 8014b14:	e01b      	b.n	8014b4e <HAL_RCC_OscConfig+0x52e>
 8014b16:	bf00      	nop
 8014b18:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8014b1c:	4b9b      	ldr	r3, [pc, #620]	; (8014d8c <HAL_RCC_OscConfig+0x76c>)
 8014b1e:	681b      	ldr	r3, [r3, #0]
 8014b20:	4a9a      	ldr	r2, [pc, #616]	; (8014d8c <HAL_RCC_OscConfig+0x76c>)
 8014b22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014b26:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8014b28:	f7fc fbca 	bl	80112c0 <HAL_GetTick>
 8014b2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8014b2e:	e008      	b.n	8014b42 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8014b30:	f7fc fbc6 	bl	80112c0 <HAL_GetTick>
 8014b34:	4602      	mov	r2, r0
 8014b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b38:	1ad3      	subs	r3, r2, r3
 8014b3a:	2b02      	cmp	r3, #2
 8014b3c:	d901      	bls.n	8014b42 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8014b3e:	2303      	movs	r3, #3
 8014b40:	e195      	b.n	8014e6e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8014b42:	4b92      	ldr	r3, [pc, #584]	; (8014d8c <HAL_RCC_OscConfig+0x76c>)
 8014b44:	681b      	ldr	r3, [r3, #0]
 8014b46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	d1f0      	bne.n	8014b30 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	681b      	ldr	r3, [r3, #0]
 8014b52:	f003 0304 	and.w	r3, r3, #4
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	f000 8081 	beq.w	8014c5e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8014b5c:	4b8c      	ldr	r3, [pc, #560]	; (8014d90 <HAL_RCC_OscConfig+0x770>)
 8014b5e:	681b      	ldr	r3, [r3, #0]
 8014b60:	4a8b      	ldr	r2, [pc, #556]	; (8014d90 <HAL_RCC_OscConfig+0x770>)
 8014b62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014b66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8014b68:	f7fc fbaa 	bl	80112c0 <HAL_GetTick>
 8014b6c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8014b6e:	e008      	b.n	8014b82 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8014b70:	f7fc fba6 	bl	80112c0 <HAL_GetTick>
 8014b74:	4602      	mov	r2, r0
 8014b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b78:	1ad3      	subs	r3, r2, r3
 8014b7a:	2b64      	cmp	r3, #100	; 0x64
 8014b7c:	d901      	bls.n	8014b82 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8014b7e:	2303      	movs	r3, #3
 8014b80:	e175      	b.n	8014e6e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8014b82:	4b83      	ldr	r3, [pc, #524]	; (8014d90 <HAL_RCC_OscConfig+0x770>)
 8014b84:	681b      	ldr	r3, [r3, #0]
 8014b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	d0f0      	beq.n	8014b70 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	689b      	ldr	r3, [r3, #8]
 8014b92:	2b01      	cmp	r3, #1
 8014b94:	d106      	bne.n	8014ba4 <HAL_RCC_OscConfig+0x584>
 8014b96:	4b7d      	ldr	r3, [pc, #500]	; (8014d8c <HAL_RCC_OscConfig+0x76c>)
 8014b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014b9a:	4a7c      	ldr	r2, [pc, #496]	; (8014d8c <HAL_RCC_OscConfig+0x76c>)
 8014b9c:	f043 0301 	orr.w	r3, r3, #1
 8014ba0:	6713      	str	r3, [r2, #112]	; 0x70
 8014ba2:	e02d      	b.n	8014c00 <HAL_RCC_OscConfig+0x5e0>
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	689b      	ldr	r3, [r3, #8]
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d10c      	bne.n	8014bc6 <HAL_RCC_OscConfig+0x5a6>
 8014bac:	4b77      	ldr	r3, [pc, #476]	; (8014d8c <HAL_RCC_OscConfig+0x76c>)
 8014bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014bb0:	4a76      	ldr	r2, [pc, #472]	; (8014d8c <HAL_RCC_OscConfig+0x76c>)
 8014bb2:	f023 0301 	bic.w	r3, r3, #1
 8014bb6:	6713      	str	r3, [r2, #112]	; 0x70
 8014bb8:	4b74      	ldr	r3, [pc, #464]	; (8014d8c <HAL_RCC_OscConfig+0x76c>)
 8014bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014bbc:	4a73      	ldr	r2, [pc, #460]	; (8014d8c <HAL_RCC_OscConfig+0x76c>)
 8014bbe:	f023 0304 	bic.w	r3, r3, #4
 8014bc2:	6713      	str	r3, [r2, #112]	; 0x70
 8014bc4:	e01c      	b.n	8014c00 <HAL_RCC_OscConfig+0x5e0>
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	689b      	ldr	r3, [r3, #8]
 8014bca:	2b05      	cmp	r3, #5
 8014bcc:	d10c      	bne.n	8014be8 <HAL_RCC_OscConfig+0x5c8>
 8014bce:	4b6f      	ldr	r3, [pc, #444]	; (8014d8c <HAL_RCC_OscConfig+0x76c>)
 8014bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014bd2:	4a6e      	ldr	r2, [pc, #440]	; (8014d8c <HAL_RCC_OscConfig+0x76c>)
 8014bd4:	f043 0304 	orr.w	r3, r3, #4
 8014bd8:	6713      	str	r3, [r2, #112]	; 0x70
 8014bda:	4b6c      	ldr	r3, [pc, #432]	; (8014d8c <HAL_RCC_OscConfig+0x76c>)
 8014bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014bde:	4a6b      	ldr	r2, [pc, #428]	; (8014d8c <HAL_RCC_OscConfig+0x76c>)
 8014be0:	f043 0301 	orr.w	r3, r3, #1
 8014be4:	6713      	str	r3, [r2, #112]	; 0x70
 8014be6:	e00b      	b.n	8014c00 <HAL_RCC_OscConfig+0x5e0>
 8014be8:	4b68      	ldr	r3, [pc, #416]	; (8014d8c <HAL_RCC_OscConfig+0x76c>)
 8014bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014bec:	4a67      	ldr	r2, [pc, #412]	; (8014d8c <HAL_RCC_OscConfig+0x76c>)
 8014bee:	f023 0301 	bic.w	r3, r3, #1
 8014bf2:	6713      	str	r3, [r2, #112]	; 0x70
 8014bf4:	4b65      	ldr	r3, [pc, #404]	; (8014d8c <HAL_RCC_OscConfig+0x76c>)
 8014bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014bf8:	4a64      	ldr	r2, [pc, #400]	; (8014d8c <HAL_RCC_OscConfig+0x76c>)
 8014bfa:	f023 0304 	bic.w	r3, r3, #4
 8014bfe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	689b      	ldr	r3, [r3, #8]
 8014c04:	2b00      	cmp	r3, #0
 8014c06:	d015      	beq.n	8014c34 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014c08:	f7fc fb5a 	bl	80112c0 <HAL_GetTick>
 8014c0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8014c0e:	e00a      	b.n	8014c26 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8014c10:	f7fc fb56 	bl	80112c0 <HAL_GetTick>
 8014c14:	4602      	mov	r2, r0
 8014c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c18:	1ad3      	subs	r3, r2, r3
 8014c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8014c1e:	4293      	cmp	r3, r2
 8014c20:	d901      	bls.n	8014c26 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8014c22:	2303      	movs	r3, #3
 8014c24:	e123      	b.n	8014e6e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8014c26:	4b59      	ldr	r3, [pc, #356]	; (8014d8c <HAL_RCC_OscConfig+0x76c>)
 8014c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014c2a:	f003 0302 	and.w	r3, r3, #2
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d0ee      	beq.n	8014c10 <HAL_RCC_OscConfig+0x5f0>
 8014c32:	e014      	b.n	8014c5e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014c34:	f7fc fb44 	bl	80112c0 <HAL_GetTick>
 8014c38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8014c3a:	e00a      	b.n	8014c52 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8014c3c:	f7fc fb40 	bl	80112c0 <HAL_GetTick>
 8014c40:	4602      	mov	r2, r0
 8014c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c44:	1ad3      	subs	r3, r2, r3
 8014c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8014c4a:	4293      	cmp	r3, r2
 8014c4c:	d901      	bls.n	8014c52 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8014c4e:	2303      	movs	r3, #3
 8014c50:	e10d      	b.n	8014e6e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8014c52:	4b4e      	ldr	r3, [pc, #312]	; (8014d8c <HAL_RCC_OscConfig+0x76c>)
 8014c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014c56:	f003 0302 	and.w	r3, r3, #2
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	d1ee      	bne.n	8014c3c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	f000 8102 	beq.w	8014e6c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8014c68:	4b48      	ldr	r3, [pc, #288]	; (8014d8c <HAL_RCC_OscConfig+0x76c>)
 8014c6a:	691b      	ldr	r3, [r3, #16]
 8014c6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014c70:	2b18      	cmp	r3, #24
 8014c72:	f000 80bd 	beq.w	8014df0 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c7a:	2b02      	cmp	r3, #2
 8014c7c:	f040 809e 	bne.w	8014dbc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014c80:	4b42      	ldr	r3, [pc, #264]	; (8014d8c <HAL_RCC_OscConfig+0x76c>)
 8014c82:	681b      	ldr	r3, [r3, #0]
 8014c84:	4a41      	ldr	r2, [pc, #260]	; (8014d8c <HAL_RCC_OscConfig+0x76c>)
 8014c86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8014c8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014c8c:	f7fc fb18 	bl	80112c0 <HAL_GetTick>
 8014c90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8014c92:	e008      	b.n	8014ca6 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8014c94:	f7fc fb14 	bl	80112c0 <HAL_GetTick>
 8014c98:	4602      	mov	r2, r0
 8014c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c9c:	1ad3      	subs	r3, r2, r3
 8014c9e:	2b02      	cmp	r3, #2
 8014ca0:	d901      	bls.n	8014ca6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8014ca2:	2303      	movs	r3, #3
 8014ca4:	e0e3      	b.n	8014e6e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8014ca6:	4b39      	ldr	r3, [pc, #228]	; (8014d8c <HAL_RCC_OscConfig+0x76c>)
 8014ca8:	681b      	ldr	r3, [r3, #0]
 8014caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	d1f0      	bne.n	8014c94 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8014cb2:	4b36      	ldr	r3, [pc, #216]	; (8014d8c <HAL_RCC_OscConfig+0x76c>)
 8014cb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014cb6:	4b37      	ldr	r3, [pc, #220]	; (8014d94 <HAL_RCC_OscConfig+0x774>)
 8014cb8:	4013      	ands	r3, r2
 8014cba:	687a      	ldr	r2, [r7, #4]
 8014cbc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8014cbe:	687a      	ldr	r2, [r7, #4]
 8014cc0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8014cc2:	0112      	lsls	r2, r2, #4
 8014cc4:	430a      	orrs	r2, r1
 8014cc6:	4931      	ldr	r1, [pc, #196]	; (8014d8c <HAL_RCC_OscConfig+0x76c>)
 8014cc8:	4313      	orrs	r3, r2
 8014cca:	628b      	str	r3, [r1, #40]	; 0x28
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014cd0:	3b01      	subs	r3, #1
 8014cd2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014cda:	3b01      	subs	r3, #1
 8014cdc:	025b      	lsls	r3, r3, #9
 8014cde:	b29b      	uxth	r3, r3
 8014ce0:	431a      	orrs	r2, r3
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014ce6:	3b01      	subs	r3, #1
 8014ce8:	041b      	lsls	r3, r3, #16
 8014cea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8014cee:	431a      	orrs	r2, r3
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014cf4:	3b01      	subs	r3, #1
 8014cf6:	061b      	lsls	r3, r3, #24
 8014cf8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8014cfc:	4923      	ldr	r1, [pc, #140]	; (8014d8c <HAL_RCC_OscConfig+0x76c>)
 8014cfe:	4313      	orrs	r3, r2
 8014d00:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8014d02:	4b22      	ldr	r3, [pc, #136]	; (8014d8c <HAL_RCC_OscConfig+0x76c>)
 8014d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d06:	4a21      	ldr	r2, [pc, #132]	; (8014d8c <HAL_RCC_OscConfig+0x76c>)
 8014d08:	f023 0301 	bic.w	r3, r3, #1
 8014d0c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8014d0e:	4b1f      	ldr	r3, [pc, #124]	; (8014d8c <HAL_RCC_OscConfig+0x76c>)
 8014d10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014d12:	4b21      	ldr	r3, [pc, #132]	; (8014d98 <HAL_RCC_OscConfig+0x778>)
 8014d14:	4013      	ands	r3, r2
 8014d16:	687a      	ldr	r2, [r7, #4]
 8014d18:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8014d1a:	00d2      	lsls	r2, r2, #3
 8014d1c:	491b      	ldr	r1, [pc, #108]	; (8014d8c <HAL_RCC_OscConfig+0x76c>)
 8014d1e:	4313      	orrs	r3, r2
 8014d20:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8014d22:	4b1a      	ldr	r3, [pc, #104]	; (8014d8c <HAL_RCC_OscConfig+0x76c>)
 8014d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d26:	f023 020c 	bic.w	r2, r3, #12
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d2e:	4917      	ldr	r1, [pc, #92]	; (8014d8c <HAL_RCC_OscConfig+0x76c>)
 8014d30:	4313      	orrs	r3, r2
 8014d32:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8014d34:	4b15      	ldr	r3, [pc, #84]	; (8014d8c <HAL_RCC_OscConfig+0x76c>)
 8014d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d38:	f023 0202 	bic.w	r2, r3, #2
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014d40:	4912      	ldr	r1, [pc, #72]	; (8014d8c <HAL_RCC_OscConfig+0x76c>)
 8014d42:	4313      	orrs	r3, r2
 8014d44:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8014d46:	4b11      	ldr	r3, [pc, #68]	; (8014d8c <HAL_RCC_OscConfig+0x76c>)
 8014d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d4a:	4a10      	ldr	r2, [pc, #64]	; (8014d8c <HAL_RCC_OscConfig+0x76c>)
 8014d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014d50:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8014d52:	4b0e      	ldr	r3, [pc, #56]	; (8014d8c <HAL_RCC_OscConfig+0x76c>)
 8014d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d56:	4a0d      	ldr	r2, [pc, #52]	; (8014d8c <HAL_RCC_OscConfig+0x76c>)
 8014d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014d5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8014d5e:	4b0b      	ldr	r3, [pc, #44]	; (8014d8c <HAL_RCC_OscConfig+0x76c>)
 8014d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d62:	4a0a      	ldr	r2, [pc, #40]	; (8014d8c <HAL_RCC_OscConfig+0x76c>)
 8014d64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8014d68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8014d6a:	4b08      	ldr	r3, [pc, #32]	; (8014d8c <HAL_RCC_OscConfig+0x76c>)
 8014d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d6e:	4a07      	ldr	r2, [pc, #28]	; (8014d8c <HAL_RCC_OscConfig+0x76c>)
 8014d70:	f043 0301 	orr.w	r3, r3, #1
 8014d74:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8014d76:	4b05      	ldr	r3, [pc, #20]	; (8014d8c <HAL_RCC_OscConfig+0x76c>)
 8014d78:	681b      	ldr	r3, [r3, #0]
 8014d7a:	4a04      	ldr	r2, [pc, #16]	; (8014d8c <HAL_RCC_OscConfig+0x76c>)
 8014d7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8014d80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014d82:	f7fc fa9d 	bl	80112c0 <HAL_GetTick>
 8014d86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8014d88:	e011      	b.n	8014dae <HAL_RCC_OscConfig+0x78e>
 8014d8a:	bf00      	nop
 8014d8c:	58024400 	.word	0x58024400
 8014d90:	58024800 	.word	0x58024800
 8014d94:	fffffc0c 	.word	0xfffffc0c
 8014d98:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8014d9c:	f7fc fa90 	bl	80112c0 <HAL_GetTick>
 8014da0:	4602      	mov	r2, r0
 8014da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014da4:	1ad3      	subs	r3, r2, r3
 8014da6:	2b02      	cmp	r3, #2
 8014da8:	d901      	bls.n	8014dae <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8014daa:	2303      	movs	r3, #3
 8014dac:	e05f      	b.n	8014e6e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8014dae:	4b32      	ldr	r3, [pc, #200]	; (8014e78 <HAL_RCC_OscConfig+0x858>)
 8014db0:	681b      	ldr	r3, [r3, #0]
 8014db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	d0f0      	beq.n	8014d9c <HAL_RCC_OscConfig+0x77c>
 8014dba:	e057      	b.n	8014e6c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014dbc:	4b2e      	ldr	r3, [pc, #184]	; (8014e78 <HAL_RCC_OscConfig+0x858>)
 8014dbe:	681b      	ldr	r3, [r3, #0]
 8014dc0:	4a2d      	ldr	r2, [pc, #180]	; (8014e78 <HAL_RCC_OscConfig+0x858>)
 8014dc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8014dc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014dc8:	f7fc fa7a 	bl	80112c0 <HAL_GetTick>
 8014dcc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8014dce:	e008      	b.n	8014de2 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8014dd0:	f7fc fa76 	bl	80112c0 <HAL_GetTick>
 8014dd4:	4602      	mov	r2, r0
 8014dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dd8:	1ad3      	subs	r3, r2, r3
 8014dda:	2b02      	cmp	r3, #2
 8014ddc:	d901      	bls.n	8014de2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8014dde:	2303      	movs	r3, #3
 8014de0:	e045      	b.n	8014e6e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8014de2:	4b25      	ldr	r3, [pc, #148]	; (8014e78 <HAL_RCC_OscConfig+0x858>)
 8014de4:	681b      	ldr	r3, [r3, #0]
 8014de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d1f0      	bne.n	8014dd0 <HAL_RCC_OscConfig+0x7b0>
 8014dee:	e03d      	b.n	8014e6c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8014df0:	4b21      	ldr	r3, [pc, #132]	; (8014e78 <HAL_RCC_OscConfig+0x858>)
 8014df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014df4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8014df6:	4b20      	ldr	r3, [pc, #128]	; (8014e78 <HAL_RCC_OscConfig+0x858>)
 8014df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014dfa:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e00:	2b01      	cmp	r3, #1
 8014e02:	d031      	beq.n	8014e68 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014e04:	693b      	ldr	r3, [r7, #16]
 8014e06:	f003 0203 	and.w	r2, r3, #3
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8014e0e:	429a      	cmp	r2, r3
 8014e10:	d12a      	bne.n	8014e68 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8014e12:	693b      	ldr	r3, [r7, #16]
 8014e14:	091b      	lsrs	r3, r3, #4
 8014e16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014e1e:	429a      	cmp	r2, r3
 8014e20:	d122      	bne.n	8014e68 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8014e22:	68fb      	ldr	r3, [r7, #12]
 8014e24:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e2c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8014e2e:	429a      	cmp	r2, r3
 8014e30:	d11a      	bne.n	8014e68 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8014e32:	68fb      	ldr	r3, [r7, #12]
 8014e34:	0a5b      	lsrs	r3, r3, #9
 8014e36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014e3e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8014e40:	429a      	cmp	r2, r3
 8014e42:	d111      	bne.n	8014e68 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8014e44:	68fb      	ldr	r3, [r7, #12]
 8014e46:	0c1b      	lsrs	r3, r3, #16
 8014e48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014e50:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8014e52:	429a      	cmp	r2, r3
 8014e54:	d108      	bne.n	8014e68 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8014e56:	68fb      	ldr	r3, [r7, #12]
 8014e58:	0e1b      	lsrs	r3, r3, #24
 8014e5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014e62:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8014e64:	429a      	cmp	r2, r3
 8014e66:	d001      	beq.n	8014e6c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8014e68:	2301      	movs	r3, #1
 8014e6a:	e000      	b.n	8014e6e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8014e6c:	2300      	movs	r3, #0
}
 8014e6e:	4618      	mov	r0, r3
 8014e70:	3730      	adds	r7, #48	; 0x30
 8014e72:	46bd      	mov	sp, r7
 8014e74:	bd80      	pop	{r7, pc}
 8014e76:	bf00      	nop
 8014e78:	58024400 	.word	0x58024400

08014e7c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8014e7c:	b580      	push	{r7, lr}
 8014e7e:	b086      	sub	sp, #24
 8014e80:	af00      	add	r7, sp, #0
 8014e82:	6078      	str	r0, [r7, #4]
 8014e84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d101      	bne.n	8014e90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8014e8c:	2301      	movs	r3, #1
 8014e8e:	e19c      	b.n	80151ca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8014e90:	4b8a      	ldr	r3, [pc, #552]	; (80150bc <HAL_RCC_ClockConfig+0x240>)
 8014e92:	681b      	ldr	r3, [r3, #0]
 8014e94:	f003 030f 	and.w	r3, r3, #15
 8014e98:	683a      	ldr	r2, [r7, #0]
 8014e9a:	429a      	cmp	r2, r3
 8014e9c:	d910      	bls.n	8014ec0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014e9e:	4b87      	ldr	r3, [pc, #540]	; (80150bc <HAL_RCC_ClockConfig+0x240>)
 8014ea0:	681b      	ldr	r3, [r3, #0]
 8014ea2:	f023 020f 	bic.w	r2, r3, #15
 8014ea6:	4985      	ldr	r1, [pc, #532]	; (80150bc <HAL_RCC_ClockConfig+0x240>)
 8014ea8:	683b      	ldr	r3, [r7, #0]
 8014eaa:	4313      	orrs	r3, r2
 8014eac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8014eae:	4b83      	ldr	r3, [pc, #524]	; (80150bc <HAL_RCC_ClockConfig+0x240>)
 8014eb0:	681b      	ldr	r3, [r3, #0]
 8014eb2:	f003 030f 	and.w	r3, r3, #15
 8014eb6:	683a      	ldr	r2, [r7, #0]
 8014eb8:	429a      	cmp	r2, r3
 8014eba:	d001      	beq.n	8014ec0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8014ebc:	2301      	movs	r3, #1
 8014ebe:	e184      	b.n	80151ca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	681b      	ldr	r3, [r3, #0]
 8014ec4:	f003 0304 	and.w	r3, r3, #4
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d010      	beq.n	8014eee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	691a      	ldr	r2, [r3, #16]
 8014ed0:	4b7b      	ldr	r3, [pc, #492]	; (80150c0 <HAL_RCC_ClockConfig+0x244>)
 8014ed2:	699b      	ldr	r3, [r3, #24]
 8014ed4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8014ed8:	429a      	cmp	r2, r3
 8014eda:	d908      	bls.n	8014eee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8014edc:	4b78      	ldr	r3, [pc, #480]	; (80150c0 <HAL_RCC_ClockConfig+0x244>)
 8014ede:	699b      	ldr	r3, [r3, #24]
 8014ee0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	691b      	ldr	r3, [r3, #16]
 8014ee8:	4975      	ldr	r1, [pc, #468]	; (80150c0 <HAL_RCC_ClockConfig+0x244>)
 8014eea:	4313      	orrs	r3, r2
 8014eec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	681b      	ldr	r3, [r3, #0]
 8014ef2:	f003 0308 	and.w	r3, r3, #8
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d010      	beq.n	8014f1c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	695a      	ldr	r2, [r3, #20]
 8014efe:	4b70      	ldr	r3, [pc, #448]	; (80150c0 <HAL_RCC_ClockConfig+0x244>)
 8014f00:	69db      	ldr	r3, [r3, #28]
 8014f02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8014f06:	429a      	cmp	r2, r3
 8014f08:	d908      	bls.n	8014f1c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8014f0a:	4b6d      	ldr	r3, [pc, #436]	; (80150c0 <HAL_RCC_ClockConfig+0x244>)
 8014f0c:	69db      	ldr	r3, [r3, #28]
 8014f0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	695b      	ldr	r3, [r3, #20]
 8014f16:	496a      	ldr	r1, [pc, #424]	; (80150c0 <HAL_RCC_ClockConfig+0x244>)
 8014f18:	4313      	orrs	r3, r2
 8014f1a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	681b      	ldr	r3, [r3, #0]
 8014f20:	f003 0310 	and.w	r3, r3, #16
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	d010      	beq.n	8014f4a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	699a      	ldr	r2, [r3, #24]
 8014f2c:	4b64      	ldr	r3, [pc, #400]	; (80150c0 <HAL_RCC_ClockConfig+0x244>)
 8014f2e:	69db      	ldr	r3, [r3, #28]
 8014f30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014f34:	429a      	cmp	r2, r3
 8014f36:	d908      	bls.n	8014f4a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8014f38:	4b61      	ldr	r3, [pc, #388]	; (80150c0 <HAL_RCC_ClockConfig+0x244>)
 8014f3a:	69db      	ldr	r3, [r3, #28]
 8014f3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	699b      	ldr	r3, [r3, #24]
 8014f44:	495e      	ldr	r1, [pc, #376]	; (80150c0 <HAL_RCC_ClockConfig+0x244>)
 8014f46:	4313      	orrs	r3, r2
 8014f48:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	681b      	ldr	r3, [r3, #0]
 8014f4e:	f003 0320 	and.w	r3, r3, #32
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	d010      	beq.n	8014f78 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	69da      	ldr	r2, [r3, #28]
 8014f5a:	4b59      	ldr	r3, [pc, #356]	; (80150c0 <HAL_RCC_ClockConfig+0x244>)
 8014f5c:	6a1b      	ldr	r3, [r3, #32]
 8014f5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8014f62:	429a      	cmp	r2, r3
 8014f64:	d908      	bls.n	8014f78 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8014f66:	4b56      	ldr	r3, [pc, #344]	; (80150c0 <HAL_RCC_ClockConfig+0x244>)
 8014f68:	6a1b      	ldr	r3, [r3, #32]
 8014f6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	69db      	ldr	r3, [r3, #28]
 8014f72:	4953      	ldr	r1, [pc, #332]	; (80150c0 <HAL_RCC_ClockConfig+0x244>)
 8014f74:	4313      	orrs	r3, r2
 8014f76:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	681b      	ldr	r3, [r3, #0]
 8014f7c:	f003 0302 	and.w	r3, r3, #2
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	d010      	beq.n	8014fa6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	68da      	ldr	r2, [r3, #12]
 8014f88:	4b4d      	ldr	r3, [pc, #308]	; (80150c0 <HAL_RCC_ClockConfig+0x244>)
 8014f8a:	699b      	ldr	r3, [r3, #24]
 8014f8c:	f003 030f 	and.w	r3, r3, #15
 8014f90:	429a      	cmp	r2, r3
 8014f92:	d908      	bls.n	8014fa6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8014f94:	4b4a      	ldr	r3, [pc, #296]	; (80150c0 <HAL_RCC_ClockConfig+0x244>)
 8014f96:	699b      	ldr	r3, [r3, #24]
 8014f98:	f023 020f 	bic.w	r2, r3, #15
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	68db      	ldr	r3, [r3, #12]
 8014fa0:	4947      	ldr	r1, [pc, #284]	; (80150c0 <HAL_RCC_ClockConfig+0x244>)
 8014fa2:	4313      	orrs	r3, r2
 8014fa4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	681b      	ldr	r3, [r3, #0]
 8014faa:	f003 0301 	and.w	r3, r3, #1
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d055      	beq.n	801505e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8014fb2:	4b43      	ldr	r3, [pc, #268]	; (80150c0 <HAL_RCC_ClockConfig+0x244>)
 8014fb4:	699b      	ldr	r3, [r3, #24]
 8014fb6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	689b      	ldr	r3, [r3, #8]
 8014fbe:	4940      	ldr	r1, [pc, #256]	; (80150c0 <HAL_RCC_ClockConfig+0x244>)
 8014fc0:	4313      	orrs	r3, r2
 8014fc2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	685b      	ldr	r3, [r3, #4]
 8014fc8:	2b02      	cmp	r3, #2
 8014fca:	d107      	bne.n	8014fdc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8014fcc:	4b3c      	ldr	r3, [pc, #240]	; (80150c0 <HAL_RCC_ClockConfig+0x244>)
 8014fce:	681b      	ldr	r3, [r3, #0]
 8014fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	d121      	bne.n	801501c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8014fd8:	2301      	movs	r3, #1
 8014fda:	e0f6      	b.n	80151ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	685b      	ldr	r3, [r3, #4]
 8014fe0:	2b03      	cmp	r3, #3
 8014fe2:	d107      	bne.n	8014ff4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8014fe4:	4b36      	ldr	r3, [pc, #216]	; (80150c0 <HAL_RCC_ClockConfig+0x244>)
 8014fe6:	681b      	ldr	r3, [r3, #0]
 8014fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d115      	bne.n	801501c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8014ff0:	2301      	movs	r3, #1
 8014ff2:	e0ea      	b.n	80151ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	685b      	ldr	r3, [r3, #4]
 8014ff8:	2b01      	cmp	r3, #1
 8014ffa:	d107      	bne.n	801500c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8014ffc:	4b30      	ldr	r3, [pc, #192]	; (80150c0 <HAL_RCC_ClockConfig+0x244>)
 8014ffe:	681b      	ldr	r3, [r3, #0]
 8015000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015004:	2b00      	cmp	r3, #0
 8015006:	d109      	bne.n	801501c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8015008:	2301      	movs	r3, #1
 801500a:	e0de      	b.n	80151ca <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801500c:	4b2c      	ldr	r3, [pc, #176]	; (80150c0 <HAL_RCC_ClockConfig+0x244>)
 801500e:	681b      	ldr	r3, [r3, #0]
 8015010:	f003 0304 	and.w	r3, r3, #4
 8015014:	2b00      	cmp	r3, #0
 8015016:	d101      	bne.n	801501c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8015018:	2301      	movs	r3, #1
 801501a:	e0d6      	b.n	80151ca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801501c:	4b28      	ldr	r3, [pc, #160]	; (80150c0 <HAL_RCC_ClockConfig+0x244>)
 801501e:	691b      	ldr	r3, [r3, #16]
 8015020:	f023 0207 	bic.w	r2, r3, #7
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	685b      	ldr	r3, [r3, #4]
 8015028:	4925      	ldr	r1, [pc, #148]	; (80150c0 <HAL_RCC_ClockConfig+0x244>)
 801502a:	4313      	orrs	r3, r2
 801502c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801502e:	f7fc f947 	bl	80112c0 <HAL_GetTick>
 8015032:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8015034:	e00a      	b.n	801504c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015036:	f7fc f943 	bl	80112c0 <HAL_GetTick>
 801503a:	4602      	mov	r2, r0
 801503c:	697b      	ldr	r3, [r7, #20]
 801503e:	1ad3      	subs	r3, r2, r3
 8015040:	f241 3288 	movw	r2, #5000	; 0x1388
 8015044:	4293      	cmp	r3, r2
 8015046:	d901      	bls.n	801504c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8015048:	2303      	movs	r3, #3
 801504a:	e0be      	b.n	80151ca <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801504c:	4b1c      	ldr	r3, [pc, #112]	; (80150c0 <HAL_RCC_ClockConfig+0x244>)
 801504e:	691b      	ldr	r3, [r3, #16]
 8015050:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	685b      	ldr	r3, [r3, #4]
 8015058:	00db      	lsls	r3, r3, #3
 801505a:	429a      	cmp	r2, r3
 801505c:	d1eb      	bne.n	8015036 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	681b      	ldr	r3, [r3, #0]
 8015062:	f003 0302 	and.w	r3, r3, #2
 8015066:	2b00      	cmp	r3, #0
 8015068:	d010      	beq.n	801508c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	68da      	ldr	r2, [r3, #12]
 801506e:	4b14      	ldr	r3, [pc, #80]	; (80150c0 <HAL_RCC_ClockConfig+0x244>)
 8015070:	699b      	ldr	r3, [r3, #24]
 8015072:	f003 030f 	and.w	r3, r3, #15
 8015076:	429a      	cmp	r2, r3
 8015078:	d208      	bcs.n	801508c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801507a:	4b11      	ldr	r3, [pc, #68]	; (80150c0 <HAL_RCC_ClockConfig+0x244>)
 801507c:	699b      	ldr	r3, [r3, #24]
 801507e:	f023 020f 	bic.w	r2, r3, #15
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	68db      	ldr	r3, [r3, #12]
 8015086:	490e      	ldr	r1, [pc, #56]	; (80150c0 <HAL_RCC_ClockConfig+0x244>)
 8015088:	4313      	orrs	r3, r2
 801508a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801508c:	4b0b      	ldr	r3, [pc, #44]	; (80150bc <HAL_RCC_ClockConfig+0x240>)
 801508e:	681b      	ldr	r3, [r3, #0]
 8015090:	f003 030f 	and.w	r3, r3, #15
 8015094:	683a      	ldr	r2, [r7, #0]
 8015096:	429a      	cmp	r2, r3
 8015098:	d214      	bcs.n	80150c4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801509a:	4b08      	ldr	r3, [pc, #32]	; (80150bc <HAL_RCC_ClockConfig+0x240>)
 801509c:	681b      	ldr	r3, [r3, #0]
 801509e:	f023 020f 	bic.w	r2, r3, #15
 80150a2:	4906      	ldr	r1, [pc, #24]	; (80150bc <HAL_RCC_ClockConfig+0x240>)
 80150a4:	683b      	ldr	r3, [r7, #0]
 80150a6:	4313      	orrs	r3, r2
 80150a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80150aa:	4b04      	ldr	r3, [pc, #16]	; (80150bc <HAL_RCC_ClockConfig+0x240>)
 80150ac:	681b      	ldr	r3, [r3, #0]
 80150ae:	f003 030f 	and.w	r3, r3, #15
 80150b2:	683a      	ldr	r2, [r7, #0]
 80150b4:	429a      	cmp	r2, r3
 80150b6:	d005      	beq.n	80150c4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80150b8:	2301      	movs	r3, #1
 80150ba:	e086      	b.n	80151ca <HAL_RCC_ClockConfig+0x34e>
 80150bc:	52002000 	.word	0x52002000
 80150c0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	f003 0304 	and.w	r3, r3, #4
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	d010      	beq.n	80150f2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	691a      	ldr	r2, [r3, #16]
 80150d4:	4b3f      	ldr	r3, [pc, #252]	; (80151d4 <HAL_RCC_ClockConfig+0x358>)
 80150d6:	699b      	ldr	r3, [r3, #24]
 80150d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80150dc:	429a      	cmp	r2, r3
 80150de:	d208      	bcs.n	80150f2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80150e0:	4b3c      	ldr	r3, [pc, #240]	; (80151d4 <HAL_RCC_ClockConfig+0x358>)
 80150e2:	699b      	ldr	r3, [r3, #24]
 80150e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	691b      	ldr	r3, [r3, #16]
 80150ec:	4939      	ldr	r1, [pc, #228]	; (80151d4 <HAL_RCC_ClockConfig+0x358>)
 80150ee:	4313      	orrs	r3, r2
 80150f0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	681b      	ldr	r3, [r3, #0]
 80150f6:	f003 0308 	and.w	r3, r3, #8
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	d010      	beq.n	8015120 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	695a      	ldr	r2, [r3, #20]
 8015102:	4b34      	ldr	r3, [pc, #208]	; (80151d4 <HAL_RCC_ClockConfig+0x358>)
 8015104:	69db      	ldr	r3, [r3, #28]
 8015106:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801510a:	429a      	cmp	r2, r3
 801510c:	d208      	bcs.n	8015120 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801510e:	4b31      	ldr	r3, [pc, #196]	; (80151d4 <HAL_RCC_ClockConfig+0x358>)
 8015110:	69db      	ldr	r3, [r3, #28]
 8015112:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	695b      	ldr	r3, [r3, #20]
 801511a:	492e      	ldr	r1, [pc, #184]	; (80151d4 <HAL_RCC_ClockConfig+0x358>)
 801511c:	4313      	orrs	r3, r2
 801511e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	681b      	ldr	r3, [r3, #0]
 8015124:	f003 0310 	and.w	r3, r3, #16
 8015128:	2b00      	cmp	r3, #0
 801512a:	d010      	beq.n	801514e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	699a      	ldr	r2, [r3, #24]
 8015130:	4b28      	ldr	r3, [pc, #160]	; (80151d4 <HAL_RCC_ClockConfig+0x358>)
 8015132:	69db      	ldr	r3, [r3, #28]
 8015134:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8015138:	429a      	cmp	r2, r3
 801513a:	d208      	bcs.n	801514e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801513c:	4b25      	ldr	r3, [pc, #148]	; (80151d4 <HAL_RCC_ClockConfig+0x358>)
 801513e:	69db      	ldr	r3, [r3, #28]
 8015140:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	699b      	ldr	r3, [r3, #24]
 8015148:	4922      	ldr	r1, [pc, #136]	; (80151d4 <HAL_RCC_ClockConfig+0x358>)
 801514a:	4313      	orrs	r3, r2
 801514c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	681b      	ldr	r3, [r3, #0]
 8015152:	f003 0320 	and.w	r3, r3, #32
 8015156:	2b00      	cmp	r3, #0
 8015158:	d010      	beq.n	801517c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	69da      	ldr	r2, [r3, #28]
 801515e:	4b1d      	ldr	r3, [pc, #116]	; (80151d4 <HAL_RCC_ClockConfig+0x358>)
 8015160:	6a1b      	ldr	r3, [r3, #32]
 8015162:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8015166:	429a      	cmp	r2, r3
 8015168:	d208      	bcs.n	801517c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 801516a:	4b1a      	ldr	r3, [pc, #104]	; (80151d4 <HAL_RCC_ClockConfig+0x358>)
 801516c:	6a1b      	ldr	r3, [r3, #32]
 801516e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	69db      	ldr	r3, [r3, #28]
 8015176:	4917      	ldr	r1, [pc, #92]	; (80151d4 <HAL_RCC_ClockConfig+0x358>)
 8015178:	4313      	orrs	r3, r2
 801517a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801517c:	f000 f89e 	bl	80152bc <HAL_RCC_GetSysClockFreq>
 8015180:	4602      	mov	r2, r0
 8015182:	4b14      	ldr	r3, [pc, #80]	; (80151d4 <HAL_RCC_ClockConfig+0x358>)
 8015184:	699b      	ldr	r3, [r3, #24]
 8015186:	0a1b      	lsrs	r3, r3, #8
 8015188:	f003 030f 	and.w	r3, r3, #15
 801518c:	4912      	ldr	r1, [pc, #72]	; (80151d8 <HAL_RCC_ClockConfig+0x35c>)
 801518e:	5ccb      	ldrb	r3, [r1, r3]
 8015190:	f003 031f 	and.w	r3, r3, #31
 8015194:	fa22 f303 	lsr.w	r3, r2, r3
 8015198:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801519a:	4b0e      	ldr	r3, [pc, #56]	; (80151d4 <HAL_RCC_ClockConfig+0x358>)
 801519c:	699b      	ldr	r3, [r3, #24]
 801519e:	f003 030f 	and.w	r3, r3, #15
 80151a2:	4a0d      	ldr	r2, [pc, #52]	; (80151d8 <HAL_RCC_ClockConfig+0x35c>)
 80151a4:	5cd3      	ldrb	r3, [r2, r3]
 80151a6:	f003 031f 	and.w	r3, r3, #31
 80151aa:	693a      	ldr	r2, [r7, #16]
 80151ac:	fa22 f303 	lsr.w	r3, r2, r3
 80151b0:	4a0a      	ldr	r2, [pc, #40]	; (80151dc <HAL_RCC_ClockConfig+0x360>)
 80151b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80151b4:	4a0a      	ldr	r2, [pc, #40]	; (80151e0 <HAL_RCC_ClockConfig+0x364>)
 80151b6:	693b      	ldr	r3, [r7, #16]
 80151b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80151ba:	4b0a      	ldr	r3, [pc, #40]	; (80151e4 <HAL_RCC_ClockConfig+0x368>)
 80151bc:	681b      	ldr	r3, [r3, #0]
 80151be:	4618      	mov	r0, r3
 80151c0:	f7ec f9f2 	bl	80015a8 <HAL_InitTick>
 80151c4:	4603      	mov	r3, r0
 80151c6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80151c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80151ca:	4618      	mov	r0, r3
 80151cc:	3718      	adds	r7, #24
 80151ce:	46bd      	mov	sp, r7
 80151d0:	bd80      	pop	{r7, pc}
 80151d2:	bf00      	nop
 80151d4:	58024400 	.word	0x58024400
 80151d8:	0802f118 	.word	0x0802f118
 80151dc:	2400001c 	.word	0x2400001c
 80151e0:	24000018 	.word	0x24000018
 80151e4:	24000050 	.word	0x24000050

080151e8 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80151e8:	b580      	push	{r7, lr}
 80151ea:	b08c      	sub	sp, #48	; 0x30
 80151ec:	af00      	add	r7, sp, #0
 80151ee:	60f8      	str	r0, [r7, #12]
 80151f0:	60b9      	str	r1, [r7, #8]
 80151f2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80151f4:	68fb      	ldr	r3, [r7, #12]
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	d12a      	bne.n	8015250 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80151fa:	4b2d      	ldr	r3, [pc, #180]	; (80152b0 <HAL_RCC_MCOConfig+0xc8>)
 80151fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8015200:	4a2b      	ldr	r2, [pc, #172]	; (80152b0 <HAL_RCC_MCOConfig+0xc8>)
 8015202:	f043 0301 	orr.w	r3, r3, #1
 8015206:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801520a:	4b29      	ldr	r3, [pc, #164]	; (80152b0 <HAL_RCC_MCOConfig+0xc8>)
 801520c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8015210:	f003 0301 	and.w	r3, r3, #1
 8015214:	61bb      	str	r3, [r7, #24]
 8015216:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8015218:	f44f 7380 	mov.w	r3, #256	; 0x100
 801521c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801521e:	2302      	movs	r3, #2
 8015220:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015222:	2303      	movs	r3, #3
 8015224:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015226:	2300      	movs	r3, #0
 8015228:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 801522a:	2300      	movs	r3, #0
 801522c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 801522e:	f107 031c 	add.w	r3, r7, #28
 8015232:	4619      	mov	r1, r3
 8015234:	481f      	ldr	r0, [pc, #124]	; (80152b4 <HAL_RCC_MCOConfig+0xcc>)
 8015236:	f7fc fc47 	bl	8011ac8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 801523a:	4b1d      	ldr	r3, [pc, #116]	; (80152b0 <HAL_RCC_MCOConfig+0xc8>)
 801523c:	691b      	ldr	r3, [r3, #16]
 801523e:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8015242:	68b9      	ldr	r1, [r7, #8]
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	430b      	orrs	r3, r1
 8015248:	4919      	ldr	r1, [pc, #100]	; (80152b0 <HAL_RCC_MCOConfig+0xc8>)
 801524a:	4313      	orrs	r3, r2
 801524c:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 801524e:	e02a      	b.n	80152a6 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8015250:	4b17      	ldr	r3, [pc, #92]	; (80152b0 <HAL_RCC_MCOConfig+0xc8>)
 8015252:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8015256:	4a16      	ldr	r2, [pc, #88]	; (80152b0 <HAL_RCC_MCOConfig+0xc8>)
 8015258:	f043 0304 	orr.w	r3, r3, #4
 801525c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8015260:	4b13      	ldr	r3, [pc, #76]	; (80152b0 <HAL_RCC_MCOConfig+0xc8>)
 8015262:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8015266:	f003 0304 	and.w	r3, r3, #4
 801526a:	617b      	str	r3, [r7, #20]
 801526c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 801526e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015272:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015274:	2302      	movs	r3, #2
 8015276:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015278:	2303      	movs	r3, #3
 801527a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801527c:	2300      	movs	r3, #0
 801527e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8015280:	2300      	movs	r3, #0
 8015282:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8015284:	f107 031c 	add.w	r3, r7, #28
 8015288:	4619      	mov	r1, r3
 801528a:	480b      	ldr	r0, [pc, #44]	; (80152b8 <HAL_RCC_MCOConfig+0xd0>)
 801528c:	f7fc fc1c 	bl	8011ac8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8015290:	4b07      	ldr	r3, [pc, #28]	; (80152b0 <HAL_RCC_MCOConfig+0xc8>)
 8015292:	691b      	ldr	r3, [r3, #16]
 8015294:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	01d9      	lsls	r1, r3, #7
 801529c:	68bb      	ldr	r3, [r7, #8]
 801529e:	430b      	orrs	r3, r1
 80152a0:	4903      	ldr	r1, [pc, #12]	; (80152b0 <HAL_RCC_MCOConfig+0xc8>)
 80152a2:	4313      	orrs	r3, r2
 80152a4:	610b      	str	r3, [r1, #16]
}
 80152a6:	bf00      	nop
 80152a8:	3730      	adds	r7, #48	; 0x30
 80152aa:	46bd      	mov	sp, r7
 80152ac:	bd80      	pop	{r7, pc}
 80152ae:	bf00      	nop
 80152b0:	58024400 	.word	0x58024400
 80152b4:	58020000 	.word	0x58020000
 80152b8:	58020800 	.word	0x58020800

080152bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80152bc:	b480      	push	{r7}
 80152be:	b089      	sub	sp, #36	; 0x24
 80152c0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80152c2:	4bb3      	ldr	r3, [pc, #716]	; (8015590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80152c4:	691b      	ldr	r3, [r3, #16]
 80152c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80152ca:	2b18      	cmp	r3, #24
 80152cc:	f200 8155 	bhi.w	801557a <HAL_RCC_GetSysClockFreq+0x2be>
 80152d0:	a201      	add	r2, pc, #4	; (adr r2, 80152d8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80152d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80152d6:	bf00      	nop
 80152d8:	0801533d 	.word	0x0801533d
 80152dc:	0801557b 	.word	0x0801557b
 80152e0:	0801557b 	.word	0x0801557b
 80152e4:	0801557b 	.word	0x0801557b
 80152e8:	0801557b 	.word	0x0801557b
 80152ec:	0801557b 	.word	0x0801557b
 80152f0:	0801557b 	.word	0x0801557b
 80152f4:	0801557b 	.word	0x0801557b
 80152f8:	08015363 	.word	0x08015363
 80152fc:	0801557b 	.word	0x0801557b
 8015300:	0801557b 	.word	0x0801557b
 8015304:	0801557b 	.word	0x0801557b
 8015308:	0801557b 	.word	0x0801557b
 801530c:	0801557b 	.word	0x0801557b
 8015310:	0801557b 	.word	0x0801557b
 8015314:	0801557b 	.word	0x0801557b
 8015318:	08015369 	.word	0x08015369
 801531c:	0801557b 	.word	0x0801557b
 8015320:	0801557b 	.word	0x0801557b
 8015324:	0801557b 	.word	0x0801557b
 8015328:	0801557b 	.word	0x0801557b
 801532c:	0801557b 	.word	0x0801557b
 8015330:	0801557b 	.word	0x0801557b
 8015334:	0801557b 	.word	0x0801557b
 8015338:	0801536f 	.word	0x0801536f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801533c:	4b94      	ldr	r3, [pc, #592]	; (8015590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801533e:	681b      	ldr	r3, [r3, #0]
 8015340:	f003 0320 	and.w	r3, r3, #32
 8015344:	2b00      	cmp	r3, #0
 8015346:	d009      	beq.n	801535c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8015348:	4b91      	ldr	r3, [pc, #580]	; (8015590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801534a:	681b      	ldr	r3, [r3, #0]
 801534c:	08db      	lsrs	r3, r3, #3
 801534e:	f003 0303 	and.w	r3, r3, #3
 8015352:	4a90      	ldr	r2, [pc, #576]	; (8015594 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8015354:	fa22 f303 	lsr.w	r3, r2, r3
 8015358:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 801535a:	e111      	b.n	8015580 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 801535c:	4b8d      	ldr	r3, [pc, #564]	; (8015594 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801535e:	61bb      	str	r3, [r7, #24]
    break;
 8015360:	e10e      	b.n	8015580 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8015362:	4b8d      	ldr	r3, [pc, #564]	; (8015598 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8015364:	61bb      	str	r3, [r7, #24]
    break;
 8015366:	e10b      	b.n	8015580 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8015368:	4b8c      	ldr	r3, [pc, #560]	; (801559c <HAL_RCC_GetSysClockFreq+0x2e0>)
 801536a:	61bb      	str	r3, [r7, #24]
    break;
 801536c:	e108      	b.n	8015580 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801536e:	4b88      	ldr	r3, [pc, #544]	; (8015590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8015370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015372:	f003 0303 	and.w	r3, r3, #3
 8015376:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8015378:	4b85      	ldr	r3, [pc, #532]	; (8015590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801537a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801537c:	091b      	lsrs	r3, r3, #4
 801537e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015382:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8015384:	4b82      	ldr	r3, [pc, #520]	; (8015590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8015386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015388:	f003 0301 	and.w	r3, r3, #1
 801538c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 801538e:	4b80      	ldr	r3, [pc, #512]	; (8015590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8015390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015392:	08db      	lsrs	r3, r3, #3
 8015394:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015398:	68fa      	ldr	r2, [r7, #12]
 801539a:	fb02 f303 	mul.w	r3, r2, r3
 801539e:	ee07 3a90 	vmov	s15, r3
 80153a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80153a6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80153aa:	693b      	ldr	r3, [r7, #16]
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	f000 80e1 	beq.w	8015574 <HAL_RCC_GetSysClockFreq+0x2b8>
 80153b2:	697b      	ldr	r3, [r7, #20]
 80153b4:	2b02      	cmp	r3, #2
 80153b6:	f000 8083 	beq.w	80154c0 <HAL_RCC_GetSysClockFreq+0x204>
 80153ba:	697b      	ldr	r3, [r7, #20]
 80153bc:	2b02      	cmp	r3, #2
 80153be:	f200 80a1 	bhi.w	8015504 <HAL_RCC_GetSysClockFreq+0x248>
 80153c2:	697b      	ldr	r3, [r7, #20]
 80153c4:	2b00      	cmp	r3, #0
 80153c6:	d003      	beq.n	80153d0 <HAL_RCC_GetSysClockFreq+0x114>
 80153c8:	697b      	ldr	r3, [r7, #20]
 80153ca:	2b01      	cmp	r3, #1
 80153cc:	d056      	beq.n	801547c <HAL_RCC_GetSysClockFreq+0x1c0>
 80153ce:	e099      	b.n	8015504 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80153d0:	4b6f      	ldr	r3, [pc, #444]	; (8015590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80153d2:	681b      	ldr	r3, [r3, #0]
 80153d4:	f003 0320 	and.w	r3, r3, #32
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d02d      	beq.n	8015438 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80153dc:	4b6c      	ldr	r3, [pc, #432]	; (8015590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80153de:	681b      	ldr	r3, [r3, #0]
 80153e0:	08db      	lsrs	r3, r3, #3
 80153e2:	f003 0303 	and.w	r3, r3, #3
 80153e6:	4a6b      	ldr	r2, [pc, #428]	; (8015594 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80153e8:	fa22 f303 	lsr.w	r3, r2, r3
 80153ec:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	ee07 3a90 	vmov	s15, r3
 80153f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80153f8:	693b      	ldr	r3, [r7, #16]
 80153fa:	ee07 3a90 	vmov	s15, r3
 80153fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015406:	4b62      	ldr	r3, [pc, #392]	; (8015590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8015408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801540a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801540e:	ee07 3a90 	vmov	s15, r3
 8015412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015416:	ed97 6a02 	vldr	s12, [r7, #8]
 801541a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80155a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 801541e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015426:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801542a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801542e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015432:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8015436:	e087      	b.n	8015548 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8015438:	693b      	ldr	r3, [r7, #16]
 801543a:	ee07 3a90 	vmov	s15, r3
 801543e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015442:	eddf 6a58 	vldr	s13, [pc, #352]	; 80155a4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8015446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801544a:	4b51      	ldr	r3, [pc, #324]	; (8015590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801544c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801544e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015452:	ee07 3a90 	vmov	s15, r3
 8015456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801545a:	ed97 6a02 	vldr	s12, [r7, #8]
 801545e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80155a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8015462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801546a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801546e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015476:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801547a:	e065      	b.n	8015548 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801547c:	693b      	ldr	r3, [r7, #16]
 801547e:	ee07 3a90 	vmov	s15, r3
 8015482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015486:	eddf 6a48 	vldr	s13, [pc, #288]	; 80155a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 801548a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801548e:	4b40      	ldr	r3, [pc, #256]	; (8015590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8015490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015496:	ee07 3a90 	vmov	s15, r3
 801549a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801549e:	ed97 6a02 	vldr	s12, [r7, #8]
 80154a2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80155a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80154a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80154aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80154ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80154b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80154b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80154ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80154be:	e043      	b.n	8015548 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80154c0:	693b      	ldr	r3, [r7, #16]
 80154c2:	ee07 3a90 	vmov	s15, r3
 80154c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80154ca:	eddf 6a38 	vldr	s13, [pc, #224]	; 80155ac <HAL_RCC_GetSysClockFreq+0x2f0>
 80154ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80154d2:	4b2f      	ldr	r3, [pc, #188]	; (8015590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80154d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80154d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80154da:	ee07 3a90 	vmov	s15, r3
 80154de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80154e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80154e6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80155a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80154ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80154ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80154f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80154f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80154fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80154fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8015502:	e021      	b.n	8015548 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8015504:	693b      	ldr	r3, [r7, #16]
 8015506:	ee07 3a90 	vmov	s15, r3
 801550a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801550e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80155a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8015512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015516:	4b1e      	ldr	r3, [pc, #120]	; (8015590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8015518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801551a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801551e:	ee07 3a90 	vmov	s15, r3
 8015522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015526:	ed97 6a02 	vldr	s12, [r7, #8]
 801552a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80155a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 801552e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015536:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801553a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801553e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015542:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8015546:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8015548:	4b11      	ldr	r3, [pc, #68]	; (8015590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801554a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801554c:	0a5b      	lsrs	r3, r3, #9
 801554e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015552:	3301      	adds	r3, #1
 8015554:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8015556:	683b      	ldr	r3, [r7, #0]
 8015558:	ee07 3a90 	vmov	s15, r3
 801555c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8015560:	edd7 6a07 	vldr	s13, [r7, #28]
 8015564:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015568:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801556c:	ee17 3a90 	vmov	r3, s15
 8015570:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8015572:	e005      	b.n	8015580 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8015574:	2300      	movs	r3, #0
 8015576:	61bb      	str	r3, [r7, #24]
    break;
 8015578:	e002      	b.n	8015580 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 801557a:	4b07      	ldr	r3, [pc, #28]	; (8015598 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801557c:	61bb      	str	r3, [r7, #24]
    break;
 801557e:	bf00      	nop
  }

  return sysclockfreq;
 8015580:	69bb      	ldr	r3, [r7, #24]
}
 8015582:	4618      	mov	r0, r3
 8015584:	3724      	adds	r7, #36	; 0x24
 8015586:	46bd      	mov	sp, r7
 8015588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801558c:	4770      	bx	lr
 801558e:	bf00      	nop
 8015590:	58024400 	.word	0x58024400
 8015594:	03d09000 	.word	0x03d09000
 8015598:	003d0900 	.word	0x003d0900
 801559c:	017d7840 	.word	0x017d7840
 80155a0:	46000000 	.word	0x46000000
 80155a4:	4c742400 	.word	0x4c742400
 80155a8:	4a742400 	.word	0x4a742400
 80155ac:	4bbebc20 	.word	0x4bbebc20

080155b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80155b0:	b580      	push	{r7, lr}
 80155b2:	b082      	sub	sp, #8
 80155b4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80155b6:	f7ff fe81 	bl	80152bc <HAL_RCC_GetSysClockFreq>
 80155ba:	4602      	mov	r2, r0
 80155bc:	4b10      	ldr	r3, [pc, #64]	; (8015600 <HAL_RCC_GetHCLKFreq+0x50>)
 80155be:	699b      	ldr	r3, [r3, #24]
 80155c0:	0a1b      	lsrs	r3, r3, #8
 80155c2:	f003 030f 	and.w	r3, r3, #15
 80155c6:	490f      	ldr	r1, [pc, #60]	; (8015604 <HAL_RCC_GetHCLKFreq+0x54>)
 80155c8:	5ccb      	ldrb	r3, [r1, r3]
 80155ca:	f003 031f 	and.w	r3, r3, #31
 80155ce:	fa22 f303 	lsr.w	r3, r2, r3
 80155d2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80155d4:	4b0a      	ldr	r3, [pc, #40]	; (8015600 <HAL_RCC_GetHCLKFreq+0x50>)
 80155d6:	699b      	ldr	r3, [r3, #24]
 80155d8:	f003 030f 	and.w	r3, r3, #15
 80155dc:	4a09      	ldr	r2, [pc, #36]	; (8015604 <HAL_RCC_GetHCLKFreq+0x54>)
 80155de:	5cd3      	ldrb	r3, [r2, r3]
 80155e0:	f003 031f 	and.w	r3, r3, #31
 80155e4:	687a      	ldr	r2, [r7, #4]
 80155e6:	fa22 f303 	lsr.w	r3, r2, r3
 80155ea:	4a07      	ldr	r2, [pc, #28]	; (8015608 <HAL_RCC_GetHCLKFreq+0x58>)
 80155ec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80155ee:	4a07      	ldr	r2, [pc, #28]	; (801560c <HAL_RCC_GetHCLKFreq+0x5c>)
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80155f4:	4b04      	ldr	r3, [pc, #16]	; (8015608 <HAL_RCC_GetHCLKFreq+0x58>)
 80155f6:	681b      	ldr	r3, [r3, #0]
}
 80155f8:	4618      	mov	r0, r3
 80155fa:	3708      	adds	r7, #8
 80155fc:	46bd      	mov	sp, r7
 80155fe:	bd80      	pop	{r7, pc}
 8015600:	58024400 	.word	0x58024400
 8015604:	0802f118 	.word	0x0802f118
 8015608:	2400001c 	.word	0x2400001c
 801560c:	24000018 	.word	0x24000018

08015610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8015610:	b580      	push	{r7, lr}
 8015612:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8015614:	f7ff ffcc 	bl	80155b0 <HAL_RCC_GetHCLKFreq>
 8015618:	4602      	mov	r2, r0
 801561a:	4b06      	ldr	r3, [pc, #24]	; (8015634 <HAL_RCC_GetPCLK1Freq+0x24>)
 801561c:	69db      	ldr	r3, [r3, #28]
 801561e:	091b      	lsrs	r3, r3, #4
 8015620:	f003 0307 	and.w	r3, r3, #7
 8015624:	4904      	ldr	r1, [pc, #16]	; (8015638 <HAL_RCC_GetPCLK1Freq+0x28>)
 8015626:	5ccb      	ldrb	r3, [r1, r3]
 8015628:	f003 031f 	and.w	r3, r3, #31
 801562c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8015630:	4618      	mov	r0, r3
 8015632:	bd80      	pop	{r7, pc}
 8015634:	58024400 	.word	0x58024400
 8015638:	0802f118 	.word	0x0802f118

0801563c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801563c:	b580      	push	{r7, lr}
 801563e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8015640:	f7ff ffb6 	bl	80155b0 <HAL_RCC_GetHCLKFreq>
 8015644:	4602      	mov	r2, r0
 8015646:	4b06      	ldr	r3, [pc, #24]	; (8015660 <HAL_RCC_GetPCLK2Freq+0x24>)
 8015648:	69db      	ldr	r3, [r3, #28]
 801564a:	0a1b      	lsrs	r3, r3, #8
 801564c:	f003 0307 	and.w	r3, r3, #7
 8015650:	4904      	ldr	r1, [pc, #16]	; (8015664 <HAL_RCC_GetPCLK2Freq+0x28>)
 8015652:	5ccb      	ldrb	r3, [r1, r3]
 8015654:	f003 031f 	and.w	r3, r3, #31
 8015658:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 801565c:	4618      	mov	r0, r3
 801565e:	bd80      	pop	{r7, pc}
 8015660:	58024400 	.word	0x58024400
 8015664:	0802f118 	.word	0x0802f118

08015668 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8015668:	b480      	push	{r7}
 801566a:	b083      	sub	sp, #12
 801566c:	af00      	add	r7, sp, #0
 801566e:	6078      	str	r0, [r7, #4]
 8015670:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	223f      	movs	r2, #63	; 0x3f
 8015676:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8015678:	4b1a      	ldr	r3, [pc, #104]	; (80156e4 <HAL_RCC_GetClockConfig+0x7c>)
 801567a:	691b      	ldr	r3, [r3, #16]
 801567c:	f003 0207 	and.w	r2, r3, #7
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8015684:	4b17      	ldr	r3, [pc, #92]	; (80156e4 <HAL_RCC_GetClockConfig+0x7c>)
 8015686:	699b      	ldr	r3, [r3, #24]
 8015688:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8015690:	4b14      	ldr	r3, [pc, #80]	; (80156e4 <HAL_RCC_GetClockConfig+0x7c>)
 8015692:	699b      	ldr	r3, [r3, #24]
 8015694:	f003 020f 	and.w	r2, r3, #15
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 801569c:	4b11      	ldr	r3, [pc, #68]	; (80156e4 <HAL_RCC_GetClockConfig+0x7c>)
 801569e:	699b      	ldr	r3, [r3, #24]
 80156a0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80156a8:	4b0e      	ldr	r3, [pc, #56]	; (80156e4 <HAL_RCC_GetClockConfig+0x7c>)
 80156aa:	69db      	ldr	r3, [r3, #28]
 80156ac:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80156b4:	4b0b      	ldr	r3, [pc, #44]	; (80156e4 <HAL_RCC_GetClockConfig+0x7c>)
 80156b6:	69db      	ldr	r3, [r3, #28]
 80156b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80156c0:	4b08      	ldr	r3, [pc, #32]	; (80156e4 <HAL_RCC_GetClockConfig+0x7c>)
 80156c2:	6a1b      	ldr	r3, [r3, #32]
 80156c4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80156cc:	4b06      	ldr	r3, [pc, #24]	; (80156e8 <HAL_RCC_GetClockConfig+0x80>)
 80156ce:	681b      	ldr	r3, [r3, #0]
 80156d0:	f003 020f 	and.w	r2, r3, #15
 80156d4:	683b      	ldr	r3, [r7, #0]
 80156d6:	601a      	str	r2, [r3, #0]
}
 80156d8:	bf00      	nop
 80156da:	370c      	adds	r7, #12
 80156dc:	46bd      	mov	sp, r7
 80156de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156e2:	4770      	bx	lr
 80156e4:	58024400 	.word	0x58024400
 80156e8:	52002000 	.word	0x52002000

080156ec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80156ec:	b580      	push	{r7, lr}
 80156ee:	b086      	sub	sp, #24
 80156f0:	af00      	add	r7, sp, #0
 80156f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80156f4:	2300      	movs	r3, #0
 80156f6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80156f8:	2300      	movs	r3, #0
 80156fa:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	681b      	ldr	r3, [r3, #0]
 8015700:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8015704:	2b00      	cmp	r3, #0
 8015706:	d03f      	beq.n	8015788 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801570c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8015710:	d02a      	beq.n	8015768 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8015712:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8015716:	d824      	bhi.n	8015762 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8015718:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801571c:	d018      	beq.n	8015750 <HAL_RCCEx_PeriphCLKConfig+0x64>
 801571e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8015722:	d81e      	bhi.n	8015762 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8015724:	2b00      	cmp	r3, #0
 8015726:	d003      	beq.n	8015730 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8015728:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801572c:	d007      	beq.n	801573e <HAL_RCCEx_PeriphCLKConfig+0x52>
 801572e:	e018      	b.n	8015762 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015730:	4ba3      	ldr	r3, [pc, #652]	; (80159c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8015732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015734:	4aa2      	ldr	r2, [pc, #648]	; (80159c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8015736:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801573a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 801573c:	e015      	b.n	801576a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	3304      	adds	r3, #4
 8015742:	2102      	movs	r1, #2
 8015744:	4618      	mov	r0, r3
 8015746:	f000 ff17 	bl	8016578 <RCCEx_PLL2_Config>
 801574a:	4603      	mov	r3, r0
 801574c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 801574e:	e00c      	b.n	801576a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	3324      	adds	r3, #36	; 0x24
 8015754:	2102      	movs	r1, #2
 8015756:	4618      	mov	r0, r3
 8015758:	f000 ffc0 	bl	80166dc <RCCEx_PLL3_Config>
 801575c:	4603      	mov	r3, r0
 801575e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8015760:	e003      	b.n	801576a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015762:	2301      	movs	r3, #1
 8015764:	75fb      	strb	r3, [r7, #23]
      break;
 8015766:	e000      	b.n	801576a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8015768:	bf00      	nop
    }

    if(ret == HAL_OK)
 801576a:	7dfb      	ldrb	r3, [r7, #23]
 801576c:	2b00      	cmp	r3, #0
 801576e:	d109      	bne.n	8015784 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8015770:	4b93      	ldr	r3, [pc, #588]	; (80159c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8015772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015774:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801577c:	4990      	ldr	r1, [pc, #576]	; (80159c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 801577e:	4313      	orrs	r3, r2
 8015780:	650b      	str	r3, [r1, #80]	; 0x50
 8015782:	e001      	b.n	8015788 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015784:	7dfb      	ldrb	r3, [r7, #23]
 8015786:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	681b      	ldr	r3, [r3, #0]
 801578c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015790:	2b00      	cmp	r3, #0
 8015792:	d03d      	beq.n	8015810 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015798:	2b04      	cmp	r3, #4
 801579a:	d826      	bhi.n	80157ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
 801579c:	a201      	add	r2, pc, #4	; (adr r2, 80157a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 801579e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80157a2:	bf00      	nop
 80157a4:	080157b9 	.word	0x080157b9
 80157a8:	080157c7 	.word	0x080157c7
 80157ac:	080157d9 	.word	0x080157d9
 80157b0:	080157f1 	.word	0x080157f1
 80157b4:	080157f1 	.word	0x080157f1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80157b8:	4b81      	ldr	r3, [pc, #516]	; (80159c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80157ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80157bc:	4a80      	ldr	r2, [pc, #512]	; (80159c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80157be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80157c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80157c4:	e015      	b.n	80157f2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	3304      	adds	r3, #4
 80157ca:	2100      	movs	r1, #0
 80157cc:	4618      	mov	r0, r3
 80157ce:	f000 fed3 	bl	8016578 <RCCEx_PLL2_Config>
 80157d2:	4603      	mov	r3, r0
 80157d4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80157d6:	e00c      	b.n	80157f2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	3324      	adds	r3, #36	; 0x24
 80157dc:	2100      	movs	r1, #0
 80157de:	4618      	mov	r0, r3
 80157e0:	f000 ff7c 	bl	80166dc <RCCEx_PLL3_Config>
 80157e4:	4603      	mov	r3, r0
 80157e6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80157e8:	e003      	b.n	80157f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80157ea:	2301      	movs	r3, #1
 80157ec:	75fb      	strb	r3, [r7, #23]
      break;
 80157ee:	e000      	b.n	80157f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80157f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80157f2:	7dfb      	ldrb	r3, [r7, #23]
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	d109      	bne.n	801580c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80157f8:	4b71      	ldr	r3, [pc, #452]	; (80159c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80157fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80157fc:	f023 0207 	bic.w	r2, r3, #7
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015804:	496e      	ldr	r1, [pc, #440]	; (80159c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8015806:	4313      	orrs	r3, r2
 8015808:	650b      	str	r3, [r1, #80]	; 0x50
 801580a:	e001      	b.n	8015810 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801580c:	7dfb      	ldrb	r3, [r7, #23]
 801580e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	681b      	ldr	r3, [r3, #0]
 8015814:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8015818:	2b00      	cmp	r3, #0
 801581a:	d042      	beq.n	80158a2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015820:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015824:	d02b      	beq.n	801587e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8015826:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801582a:	d825      	bhi.n	8015878 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 801582c:	2bc0      	cmp	r3, #192	; 0xc0
 801582e:	d028      	beq.n	8015882 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8015830:	2bc0      	cmp	r3, #192	; 0xc0
 8015832:	d821      	bhi.n	8015878 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8015834:	2b80      	cmp	r3, #128	; 0x80
 8015836:	d016      	beq.n	8015866 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8015838:	2b80      	cmp	r3, #128	; 0x80
 801583a:	d81d      	bhi.n	8015878 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 801583c:	2b00      	cmp	r3, #0
 801583e:	d002      	beq.n	8015846 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8015840:	2b40      	cmp	r3, #64	; 0x40
 8015842:	d007      	beq.n	8015854 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8015844:	e018      	b.n	8015878 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015846:	4b5e      	ldr	r3, [pc, #376]	; (80159c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8015848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801584a:	4a5d      	ldr	r2, [pc, #372]	; (80159c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 801584c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015850:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8015852:	e017      	b.n	8015884 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	3304      	adds	r3, #4
 8015858:	2100      	movs	r1, #0
 801585a:	4618      	mov	r0, r3
 801585c:	f000 fe8c 	bl	8016578 <RCCEx_PLL2_Config>
 8015860:	4603      	mov	r3, r0
 8015862:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8015864:	e00e      	b.n	8015884 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	3324      	adds	r3, #36	; 0x24
 801586a:	2100      	movs	r1, #0
 801586c:	4618      	mov	r0, r3
 801586e:	f000 ff35 	bl	80166dc <RCCEx_PLL3_Config>
 8015872:	4603      	mov	r3, r0
 8015874:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8015876:	e005      	b.n	8015884 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015878:	2301      	movs	r3, #1
 801587a:	75fb      	strb	r3, [r7, #23]
      break;
 801587c:	e002      	b.n	8015884 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 801587e:	bf00      	nop
 8015880:	e000      	b.n	8015884 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8015882:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015884:	7dfb      	ldrb	r3, [r7, #23]
 8015886:	2b00      	cmp	r3, #0
 8015888:	d109      	bne.n	801589e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 801588a:	4b4d      	ldr	r3, [pc, #308]	; (80159c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 801588c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801588e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015896:	494a      	ldr	r1, [pc, #296]	; (80159c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8015898:	4313      	orrs	r3, r2
 801589a:	650b      	str	r3, [r1, #80]	; 0x50
 801589c:	e001      	b.n	80158a2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801589e:	7dfb      	ldrb	r3, [r7, #23]
 80158a0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	681b      	ldr	r3, [r3, #0]
 80158a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d049      	beq.n	8015942 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80158b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80158b8:	d030      	beq.n	801591c <HAL_RCCEx_PeriphCLKConfig+0x230>
 80158ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80158be:	d82a      	bhi.n	8015916 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80158c0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80158c4:	d02c      	beq.n	8015920 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80158c6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80158ca:	d824      	bhi.n	8015916 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80158cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80158d0:	d018      	beq.n	8015904 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80158d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80158d6:	d81e      	bhi.n	8015916 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80158d8:	2b00      	cmp	r3, #0
 80158da:	d003      	beq.n	80158e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80158dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80158e0:	d007      	beq.n	80158f2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80158e2:	e018      	b.n	8015916 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80158e4:	4b36      	ldr	r3, [pc, #216]	; (80159c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80158e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80158e8:	4a35      	ldr	r2, [pc, #212]	; (80159c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80158ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80158ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80158f0:	e017      	b.n	8015922 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	3304      	adds	r3, #4
 80158f6:	2100      	movs	r1, #0
 80158f8:	4618      	mov	r0, r3
 80158fa:	f000 fe3d 	bl	8016578 <RCCEx_PLL2_Config>
 80158fe:	4603      	mov	r3, r0
 8015900:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8015902:	e00e      	b.n	8015922 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	3324      	adds	r3, #36	; 0x24
 8015908:	2100      	movs	r1, #0
 801590a:	4618      	mov	r0, r3
 801590c:	f000 fee6 	bl	80166dc <RCCEx_PLL3_Config>
 8015910:	4603      	mov	r3, r0
 8015912:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8015914:	e005      	b.n	8015922 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8015916:	2301      	movs	r3, #1
 8015918:	75fb      	strb	r3, [r7, #23]
      break;
 801591a:	e002      	b.n	8015922 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 801591c:	bf00      	nop
 801591e:	e000      	b.n	8015922 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8015920:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015922:	7dfb      	ldrb	r3, [r7, #23]
 8015924:	2b00      	cmp	r3, #0
 8015926:	d10a      	bne.n	801593e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8015928:	4b25      	ldr	r3, [pc, #148]	; (80159c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 801592a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801592c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8015936:	4922      	ldr	r1, [pc, #136]	; (80159c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8015938:	4313      	orrs	r3, r2
 801593a:	658b      	str	r3, [r1, #88]	; 0x58
 801593c:	e001      	b.n	8015942 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801593e:	7dfb      	ldrb	r3, [r7, #23]
 8015940:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	681b      	ldr	r3, [r3, #0]
 8015946:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801594a:	2b00      	cmp	r3, #0
 801594c:	d04b      	beq.n	80159e6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8015954:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8015958:	d030      	beq.n	80159bc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 801595a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801595e:	d82a      	bhi.n	80159b6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8015960:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8015964:	d02e      	beq.n	80159c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8015966:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801596a:	d824      	bhi.n	80159b6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 801596c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8015970:	d018      	beq.n	80159a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8015972:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8015976:	d81e      	bhi.n	80159b6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8015978:	2b00      	cmp	r3, #0
 801597a:	d003      	beq.n	8015984 <HAL_RCCEx_PeriphCLKConfig+0x298>
 801597c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8015980:	d007      	beq.n	8015992 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8015982:	e018      	b.n	80159b6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015984:	4b0e      	ldr	r3, [pc, #56]	; (80159c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8015986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015988:	4a0d      	ldr	r2, [pc, #52]	; (80159c0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 801598a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801598e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8015990:	e019      	b.n	80159c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	3304      	adds	r3, #4
 8015996:	2100      	movs	r1, #0
 8015998:	4618      	mov	r0, r3
 801599a:	f000 fded 	bl	8016578 <RCCEx_PLL2_Config>
 801599e:	4603      	mov	r3, r0
 80159a0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80159a2:	e010      	b.n	80159c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	3324      	adds	r3, #36	; 0x24
 80159a8:	2100      	movs	r1, #0
 80159aa:	4618      	mov	r0, r3
 80159ac:	f000 fe96 	bl	80166dc <RCCEx_PLL3_Config>
 80159b0:	4603      	mov	r3, r0
 80159b2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80159b4:	e007      	b.n	80159c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80159b6:	2301      	movs	r3, #1
 80159b8:	75fb      	strb	r3, [r7, #23]
      break;
 80159ba:	e004      	b.n	80159c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80159bc:	bf00      	nop
 80159be:	e002      	b.n	80159c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80159c0:	58024400 	.word	0x58024400
      break;
 80159c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80159c6:	7dfb      	ldrb	r3, [r7, #23]
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	d10a      	bne.n	80159e2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80159cc:	4b99      	ldr	r3, [pc, #612]	; (8015c34 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80159ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80159d0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80159da:	4996      	ldr	r1, [pc, #600]	; (8015c34 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80159dc:	4313      	orrs	r3, r2
 80159de:	658b      	str	r3, [r1, #88]	; 0x58
 80159e0:	e001      	b.n	80159e6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80159e2:	7dfb      	ldrb	r3, [r7, #23]
 80159e4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	681b      	ldr	r3, [r3, #0]
 80159ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	d032      	beq.n	8015a58 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80159f6:	2b30      	cmp	r3, #48	; 0x30
 80159f8:	d01c      	beq.n	8015a34 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80159fa:	2b30      	cmp	r3, #48	; 0x30
 80159fc:	d817      	bhi.n	8015a2e <HAL_RCCEx_PeriphCLKConfig+0x342>
 80159fe:	2b20      	cmp	r3, #32
 8015a00:	d00c      	beq.n	8015a1c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8015a02:	2b20      	cmp	r3, #32
 8015a04:	d813      	bhi.n	8015a2e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	d016      	beq.n	8015a38 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8015a0a:	2b10      	cmp	r3, #16
 8015a0c:	d10f      	bne.n	8015a2e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015a0e:	4b89      	ldr	r3, [pc, #548]	; (8015c34 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8015a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a12:	4a88      	ldr	r2, [pc, #544]	; (8015c34 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8015a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015a18:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8015a1a:	e00e      	b.n	8015a3a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	3304      	adds	r3, #4
 8015a20:	2102      	movs	r1, #2
 8015a22:	4618      	mov	r0, r3
 8015a24:	f000 fda8 	bl	8016578 <RCCEx_PLL2_Config>
 8015a28:	4603      	mov	r3, r0
 8015a2a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8015a2c:	e005      	b.n	8015a3a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8015a2e:	2301      	movs	r3, #1
 8015a30:	75fb      	strb	r3, [r7, #23]
      break;
 8015a32:	e002      	b.n	8015a3a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8015a34:	bf00      	nop
 8015a36:	e000      	b.n	8015a3a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8015a38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015a3a:	7dfb      	ldrb	r3, [r7, #23]
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	d109      	bne.n	8015a54 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8015a40:	4b7c      	ldr	r3, [pc, #496]	; (8015c34 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8015a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015a44:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015a4c:	4979      	ldr	r1, [pc, #484]	; (8015c34 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8015a4e:	4313      	orrs	r3, r2
 8015a50:	64cb      	str	r3, [r1, #76]	; 0x4c
 8015a52:	e001      	b.n	8015a58 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015a54:	7dfb      	ldrb	r3, [r7, #23]
 8015a56:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	681b      	ldr	r3, [r3, #0]
 8015a5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	d047      	beq.n	8015af4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015a68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015a6c:	d030      	beq.n	8015ad0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8015a6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015a72:	d82a      	bhi.n	8015aca <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8015a74:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8015a78:	d02c      	beq.n	8015ad4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8015a7a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8015a7e:	d824      	bhi.n	8015aca <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8015a80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8015a84:	d018      	beq.n	8015ab8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8015a86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8015a8a:	d81e      	bhi.n	8015aca <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	d003      	beq.n	8015a98 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8015a90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015a94:	d007      	beq.n	8015aa6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8015a96:	e018      	b.n	8015aca <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015a98:	4b66      	ldr	r3, [pc, #408]	; (8015c34 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8015a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a9c:	4a65      	ldr	r2, [pc, #404]	; (8015c34 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8015a9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015aa2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8015aa4:	e017      	b.n	8015ad6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	3304      	adds	r3, #4
 8015aaa:	2100      	movs	r1, #0
 8015aac:	4618      	mov	r0, r3
 8015aae:	f000 fd63 	bl	8016578 <RCCEx_PLL2_Config>
 8015ab2:	4603      	mov	r3, r0
 8015ab4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8015ab6:	e00e      	b.n	8015ad6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	3324      	adds	r3, #36	; 0x24
 8015abc:	2100      	movs	r1, #0
 8015abe:	4618      	mov	r0, r3
 8015ac0:	f000 fe0c 	bl	80166dc <RCCEx_PLL3_Config>
 8015ac4:	4603      	mov	r3, r0
 8015ac6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8015ac8:	e005      	b.n	8015ad6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015aca:	2301      	movs	r3, #1
 8015acc:	75fb      	strb	r3, [r7, #23]
      break;
 8015ace:	e002      	b.n	8015ad6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8015ad0:	bf00      	nop
 8015ad2:	e000      	b.n	8015ad6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8015ad4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015ad6:	7dfb      	ldrb	r3, [r7, #23]
 8015ad8:	2b00      	cmp	r3, #0
 8015ada:	d109      	bne.n	8015af0 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8015adc:	4b55      	ldr	r3, [pc, #340]	; (8015c34 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8015ade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015ae0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015ae8:	4952      	ldr	r1, [pc, #328]	; (8015c34 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8015aea:	4313      	orrs	r3, r2
 8015aec:	650b      	str	r3, [r1, #80]	; 0x50
 8015aee:	e001      	b.n	8015af4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015af0:	7dfb      	ldrb	r3, [r7, #23]
 8015af2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	681b      	ldr	r3, [r3, #0]
 8015af8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015afc:	2b00      	cmp	r3, #0
 8015afe:	d049      	beq.n	8015b94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015b04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8015b08:	d02e      	beq.n	8015b68 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8015b0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8015b0e:	d828      	bhi.n	8015b62 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8015b10:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8015b14:	d02a      	beq.n	8015b6c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8015b16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8015b1a:	d822      	bhi.n	8015b62 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8015b1c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8015b20:	d026      	beq.n	8015b70 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8015b22:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8015b26:	d81c      	bhi.n	8015b62 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8015b28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8015b2c:	d010      	beq.n	8015b50 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8015b2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8015b32:	d816      	bhi.n	8015b62 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d01d      	beq.n	8015b74 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8015b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015b3c:	d111      	bne.n	8015b62 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	3304      	adds	r3, #4
 8015b42:	2101      	movs	r1, #1
 8015b44:	4618      	mov	r0, r3
 8015b46:	f000 fd17 	bl	8016578 <RCCEx_PLL2_Config>
 8015b4a:	4603      	mov	r3, r0
 8015b4c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8015b4e:	e012      	b.n	8015b76 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	3324      	adds	r3, #36	; 0x24
 8015b54:	2101      	movs	r1, #1
 8015b56:	4618      	mov	r0, r3
 8015b58:	f000 fdc0 	bl	80166dc <RCCEx_PLL3_Config>
 8015b5c:	4603      	mov	r3, r0
 8015b5e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8015b60:	e009      	b.n	8015b76 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015b62:	2301      	movs	r3, #1
 8015b64:	75fb      	strb	r3, [r7, #23]
      break;
 8015b66:	e006      	b.n	8015b76 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8015b68:	bf00      	nop
 8015b6a:	e004      	b.n	8015b76 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8015b6c:	bf00      	nop
 8015b6e:	e002      	b.n	8015b76 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8015b70:	bf00      	nop
 8015b72:	e000      	b.n	8015b76 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8015b74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015b76:	7dfb      	ldrb	r3, [r7, #23]
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	d109      	bne.n	8015b90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8015b7c:	4b2d      	ldr	r3, [pc, #180]	; (8015c34 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8015b7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015b80:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015b88:	492a      	ldr	r1, [pc, #168]	; (8015c34 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8015b8a:	4313      	orrs	r3, r2
 8015b8c:	650b      	str	r3, [r1, #80]	; 0x50
 8015b8e:	e001      	b.n	8015b94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015b90:	7dfb      	ldrb	r3, [r7, #23]
 8015b92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	681b      	ldr	r3, [r3, #0]
 8015b98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	d04d      	beq.n	8015c3c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8015ba6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8015baa:	d02e      	beq.n	8015c0a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8015bac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8015bb0:	d828      	bhi.n	8015c04 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8015bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015bb6:	d02a      	beq.n	8015c0e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8015bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015bbc:	d822      	bhi.n	8015c04 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8015bbe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8015bc2:	d026      	beq.n	8015c12 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8015bc4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8015bc8:	d81c      	bhi.n	8015c04 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8015bca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8015bce:	d010      	beq.n	8015bf2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8015bd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8015bd4:	d816      	bhi.n	8015c04 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d01d      	beq.n	8015c16 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8015bda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8015bde:	d111      	bne.n	8015c04 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	3304      	adds	r3, #4
 8015be4:	2101      	movs	r1, #1
 8015be6:	4618      	mov	r0, r3
 8015be8:	f000 fcc6 	bl	8016578 <RCCEx_PLL2_Config>
 8015bec:	4603      	mov	r3, r0
 8015bee:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8015bf0:	e012      	b.n	8015c18 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	3324      	adds	r3, #36	; 0x24
 8015bf6:	2101      	movs	r1, #1
 8015bf8:	4618      	mov	r0, r3
 8015bfa:	f000 fd6f 	bl	80166dc <RCCEx_PLL3_Config>
 8015bfe:	4603      	mov	r3, r0
 8015c00:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8015c02:	e009      	b.n	8015c18 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8015c04:	2301      	movs	r3, #1
 8015c06:	75fb      	strb	r3, [r7, #23]
      break;
 8015c08:	e006      	b.n	8015c18 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8015c0a:	bf00      	nop
 8015c0c:	e004      	b.n	8015c18 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8015c0e:	bf00      	nop
 8015c10:	e002      	b.n	8015c18 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8015c12:	bf00      	nop
 8015c14:	e000      	b.n	8015c18 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8015c16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015c18:	7dfb      	ldrb	r3, [r7, #23]
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d10c      	bne.n	8015c38 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8015c1e:	4b05      	ldr	r3, [pc, #20]	; (8015c34 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8015c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015c22:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8015c2c:	4901      	ldr	r1, [pc, #4]	; (8015c34 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8015c2e:	4313      	orrs	r3, r2
 8015c30:	658b      	str	r3, [r1, #88]	; 0x58
 8015c32:	e003      	b.n	8015c3c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8015c34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015c38:	7dfb      	ldrb	r3, [r7, #23]
 8015c3a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	681b      	ldr	r3, [r3, #0]
 8015c40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d02f      	beq.n	8015ca8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015c4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8015c50:	d00e      	beq.n	8015c70 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8015c52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8015c56:	d814      	bhi.n	8015c82 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	d015      	beq.n	8015c88 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8015c5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8015c60:	d10f      	bne.n	8015c82 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015c62:	4baf      	ldr	r3, [pc, #700]	; (8015f20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8015c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c66:	4aae      	ldr	r2, [pc, #696]	; (8015f20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8015c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015c6c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8015c6e:	e00c      	b.n	8015c8a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	3304      	adds	r3, #4
 8015c74:	2101      	movs	r1, #1
 8015c76:	4618      	mov	r0, r3
 8015c78:	f000 fc7e 	bl	8016578 <RCCEx_PLL2_Config>
 8015c7c:	4603      	mov	r3, r0
 8015c7e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8015c80:	e003      	b.n	8015c8a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015c82:	2301      	movs	r3, #1
 8015c84:	75fb      	strb	r3, [r7, #23]
      break;
 8015c86:	e000      	b.n	8015c8a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8015c88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015c8a:	7dfb      	ldrb	r3, [r7, #23]
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	d109      	bne.n	8015ca4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8015c90:	4ba3      	ldr	r3, [pc, #652]	; (8015f20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8015c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015c94:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015c9c:	49a0      	ldr	r1, [pc, #640]	; (8015f20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8015c9e:	4313      	orrs	r3, r2
 8015ca0:	650b      	str	r3, [r1, #80]	; 0x50
 8015ca2:	e001      	b.n	8015ca8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015ca4:	7dfb      	ldrb	r3, [r7, #23]
 8015ca6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	681b      	ldr	r3, [r3, #0]
 8015cac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	d032      	beq.n	8015d1a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015cb8:	2b03      	cmp	r3, #3
 8015cba:	d81b      	bhi.n	8015cf4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8015cbc:	a201      	add	r2, pc, #4	; (adr r2, 8015cc4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8015cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015cc2:	bf00      	nop
 8015cc4:	08015cfb 	.word	0x08015cfb
 8015cc8:	08015cd5 	.word	0x08015cd5
 8015ccc:	08015ce3 	.word	0x08015ce3
 8015cd0:	08015cfb 	.word	0x08015cfb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015cd4:	4b92      	ldr	r3, [pc, #584]	; (8015f20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8015cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015cd8:	4a91      	ldr	r2, [pc, #580]	; (8015f20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8015cda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015cde:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8015ce0:	e00c      	b.n	8015cfc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	3304      	adds	r3, #4
 8015ce6:	2102      	movs	r1, #2
 8015ce8:	4618      	mov	r0, r3
 8015cea:	f000 fc45 	bl	8016578 <RCCEx_PLL2_Config>
 8015cee:	4603      	mov	r3, r0
 8015cf0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8015cf2:	e003      	b.n	8015cfc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8015cf4:	2301      	movs	r3, #1
 8015cf6:	75fb      	strb	r3, [r7, #23]
      break;
 8015cf8:	e000      	b.n	8015cfc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8015cfa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015cfc:	7dfb      	ldrb	r3, [r7, #23]
 8015cfe:	2b00      	cmp	r3, #0
 8015d00:	d109      	bne.n	8015d16 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8015d02:	4b87      	ldr	r3, [pc, #540]	; (8015f20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8015d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015d06:	f023 0203 	bic.w	r2, r3, #3
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015d0e:	4984      	ldr	r1, [pc, #528]	; (8015f20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8015d10:	4313      	orrs	r3, r2
 8015d12:	64cb      	str	r3, [r1, #76]	; 0x4c
 8015d14:	e001      	b.n	8015d1a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015d16:	7dfb      	ldrb	r3, [r7, #23]
 8015d18:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8015d1a:	687b      	ldr	r3, [r7, #4]
 8015d1c:	681b      	ldr	r3, [r3, #0]
 8015d1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	f000 8086 	beq.w	8015e34 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8015d28:	4b7e      	ldr	r3, [pc, #504]	; (8015f24 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8015d2a:	681b      	ldr	r3, [r3, #0]
 8015d2c:	4a7d      	ldr	r2, [pc, #500]	; (8015f24 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8015d2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015d32:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8015d34:	f7fb fac4 	bl	80112c0 <HAL_GetTick>
 8015d38:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8015d3a:	e009      	b.n	8015d50 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8015d3c:	f7fb fac0 	bl	80112c0 <HAL_GetTick>
 8015d40:	4602      	mov	r2, r0
 8015d42:	693b      	ldr	r3, [r7, #16]
 8015d44:	1ad3      	subs	r3, r2, r3
 8015d46:	2b64      	cmp	r3, #100	; 0x64
 8015d48:	d902      	bls.n	8015d50 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8015d4a:	2303      	movs	r3, #3
 8015d4c:	75fb      	strb	r3, [r7, #23]
        break;
 8015d4e:	e005      	b.n	8015d5c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8015d50:	4b74      	ldr	r3, [pc, #464]	; (8015f24 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8015d52:	681b      	ldr	r3, [r3, #0]
 8015d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d0ef      	beq.n	8015d3c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8015d5c:	7dfb      	ldrb	r3, [r7, #23]
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	d166      	bne.n	8015e30 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8015d62:	4b6f      	ldr	r3, [pc, #444]	; (8015f20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8015d64:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8015d6c:	4053      	eors	r3, r2
 8015d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d013      	beq.n	8015d9e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8015d76:	4b6a      	ldr	r3, [pc, #424]	; (8015f20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8015d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015d7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015d7e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8015d80:	4b67      	ldr	r3, [pc, #412]	; (8015f20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8015d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015d84:	4a66      	ldr	r2, [pc, #408]	; (8015f20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8015d86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8015d8a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8015d8c:	4b64      	ldr	r3, [pc, #400]	; (8015f20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8015d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015d90:	4a63      	ldr	r2, [pc, #396]	; (8015f20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8015d92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8015d96:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8015d98:	4a61      	ldr	r2, [pc, #388]	; (8015f20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8015d9a:	68fb      	ldr	r3, [r7, #12]
 8015d9c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8015da4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015da8:	d115      	bne.n	8015dd6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015daa:	f7fb fa89 	bl	80112c0 <HAL_GetTick>
 8015dae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015db0:	e00b      	b.n	8015dca <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8015db2:	f7fb fa85 	bl	80112c0 <HAL_GetTick>
 8015db6:	4602      	mov	r2, r0
 8015db8:	693b      	ldr	r3, [r7, #16]
 8015dba:	1ad3      	subs	r3, r2, r3
 8015dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8015dc0:	4293      	cmp	r3, r2
 8015dc2:	d902      	bls.n	8015dca <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8015dc4:	2303      	movs	r3, #3
 8015dc6:	75fb      	strb	r3, [r7, #23]
            break;
 8015dc8:	e005      	b.n	8015dd6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015dca:	4b55      	ldr	r3, [pc, #340]	; (8015f20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8015dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015dce:	f003 0302 	and.w	r3, r3, #2
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d0ed      	beq.n	8015db2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8015dd6:	7dfb      	ldrb	r3, [r7, #23]
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	d126      	bne.n	8015e2a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8015de2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8015de6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8015dea:	d10d      	bne.n	8015e08 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8015dec:	4b4c      	ldr	r3, [pc, #304]	; (8015f20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8015dee:	691b      	ldr	r3, [r3, #16]
 8015df0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8015dfa:	0919      	lsrs	r1, r3, #4
 8015dfc:	4b4a      	ldr	r3, [pc, #296]	; (8015f28 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8015dfe:	400b      	ands	r3, r1
 8015e00:	4947      	ldr	r1, [pc, #284]	; (8015f20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8015e02:	4313      	orrs	r3, r2
 8015e04:	610b      	str	r3, [r1, #16]
 8015e06:	e005      	b.n	8015e14 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8015e08:	4b45      	ldr	r3, [pc, #276]	; (8015f20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8015e0a:	691b      	ldr	r3, [r3, #16]
 8015e0c:	4a44      	ldr	r2, [pc, #272]	; (8015f20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8015e0e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015e12:	6113      	str	r3, [r2, #16]
 8015e14:	4b42      	ldr	r3, [pc, #264]	; (8015f20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8015e16:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8015e1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015e22:	493f      	ldr	r1, [pc, #252]	; (8015f20 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8015e24:	4313      	orrs	r3, r2
 8015e26:	670b      	str	r3, [r1, #112]	; 0x70
 8015e28:	e004      	b.n	8015e34 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8015e2a:	7dfb      	ldrb	r3, [r7, #23]
 8015e2c:	75bb      	strb	r3, [r7, #22]
 8015e2e:	e001      	b.n	8015e34 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015e30:	7dfb      	ldrb	r3, [r7, #23]
 8015e32:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	681b      	ldr	r3, [r3, #0]
 8015e38:	f003 0301 	and.w	r3, r3, #1
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	f000 8085 	beq.w	8015f4c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015e46:	2b28      	cmp	r3, #40	; 0x28
 8015e48:	d866      	bhi.n	8015f18 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8015e4a:	a201      	add	r2, pc, #4	; (adr r2, 8015e50 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8015e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e50:	08015f2d 	.word	0x08015f2d
 8015e54:	08015f19 	.word	0x08015f19
 8015e58:	08015f19 	.word	0x08015f19
 8015e5c:	08015f19 	.word	0x08015f19
 8015e60:	08015f19 	.word	0x08015f19
 8015e64:	08015f19 	.word	0x08015f19
 8015e68:	08015f19 	.word	0x08015f19
 8015e6c:	08015f19 	.word	0x08015f19
 8015e70:	08015ef5 	.word	0x08015ef5
 8015e74:	08015f19 	.word	0x08015f19
 8015e78:	08015f19 	.word	0x08015f19
 8015e7c:	08015f19 	.word	0x08015f19
 8015e80:	08015f19 	.word	0x08015f19
 8015e84:	08015f19 	.word	0x08015f19
 8015e88:	08015f19 	.word	0x08015f19
 8015e8c:	08015f19 	.word	0x08015f19
 8015e90:	08015f07 	.word	0x08015f07
 8015e94:	08015f19 	.word	0x08015f19
 8015e98:	08015f19 	.word	0x08015f19
 8015e9c:	08015f19 	.word	0x08015f19
 8015ea0:	08015f19 	.word	0x08015f19
 8015ea4:	08015f19 	.word	0x08015f19
 8015ea8:	08015f19 	.word	0x08015f19
 8015eac:	08015f19 	.word	0x08015f19
 8015eb0:	08015f2d 	.word	0x08015f2d
 8015eb4:	08015f19 	.word	0x08015f19
 8015eb8:	08015f19 	.word	0x08015f19
 8015ebc:	08015f19 	.word	0x08015f19
 8015ec0:	08015f19 	.word	0x08015f19
 8015ec4:	08015f19 	.word	0x08015f19
 8015ec8:	08015f19 	.word	0x08015f19
 8015ecc:	08015f19 	.word	0x08015f19
 8015ed0:	08015f2d 	.word	0x08015f2d
 8015ed4:	08015f19 	.word	0x08015f19
 8015ed8:	08015f19 	.word	0x08015f19
 8015edc:	08015f19 	.word	0x08015f19
 8015ee0:	08015f19 	.word	0x08015f19
 8015ee4:	08015f19 	.word	0x08015f19
 8015ee8:	08015f19 	.word	0x08015f19
 8015eec:	08015f19 	.word	0x08015f19
 8015ef0:	08015f2d 	.word	0x08015f2d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	3304      	adds	r3, #4
 8015ef8:	2101      	movs	r1, #1
 8015efa:	4618      	mov	r0, r3
 8015efc:	f000 fb3c 	bl	8016578 <RCCEx_PLL2_Config>
 8015f00:	4603      	mov	r3, r0
 8015f02:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8015f04:	e013      	b.n	8015f2e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	3324      	adds	r3, #36	; 0x24
 8015f0a:	2101      	movs	r1, #1
 8015f0c:	4618      	mov	r0, r3
 8015f0e:	f000 fbe5 	bl	80166dc <RCCEx_PLL3_Config>
 8015f12:	4603      	mov	r3, r0
 8015f14:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8015f16:	e00a      	b.n	8015f2e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015f18:	2301      	movs	r3, #1
 8015f1a:	75fb      	strb	r3, [r7, #23]
      break;
 8015f1c:	e007      	b.n	8015f2e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8015f1e:	bf00      	nop
 8015f20:	58024400 	.word	0x58024400
 8015f24:	58024800 	.word	0x58024800
 8015f28:	00ffffcf 	.word	0x00ffffcf
      break;
 8015f2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015f2e:	7dfb      	ldrb	r3, [r7, #23]
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	d109      	bne.n	8015f48 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8015f34:	4b96      	ldr	r3, [pc, #600]	; (8016190 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8015f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015f38:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015f40:	4993      	ldr	r1, [pc, #588]	; (8016190 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8015f42:	4313      	orrs	r3, r2
 8015f44:	654b      	str	r3, [r1, #84]	; 0x54
 8015f46:	e001      	b.n	8015f4c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015f48:	7dfb      	ldrb	r3, [r7, #23]
 8015f4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	681b      	ldr	r3, [r3, #0]
 8015f50:	f003 0302 	and.w	r3, r3, #2
 8015f54:	2b00      	cmp	r3, #0
 8015f56:	d038      	beq.n	8015fca <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015f5c:	2b05      	cmp	r3, #5
 8015f5e:	d821      	bhi.n	8015fa4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8015f60:	a201      	add	r2, pc, #4	; (adr r2, 8015f68 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8015f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f66:	bf00      	nop
 8015f68:	08015fab 	.word	0x08015fab
 8015f6c:	08015f81 	.word	0x08015f81
 8015f70:	08015f93 	.word	0x08015f93
 8015f74:	08015fab 	.word	0x08015fab
 8015f78:	08015fab 	.word	0x08015fab
 8015f7c:	08015fab 	.word	0x08015fab
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	3304      	adds	r3, #4
 8015f84:	2101      	movs	r1, #1
 8015f86:	4618      	mov	r0, r3
 8015f88:	f000 faf6 	bl	8016578 <RCCEx_PLL2_Config>
 8015f8c:	4603      	mov	r3, r0
 8015f8e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8015f90:	e00c      	b.n	8015fac <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	3324      	adds	r3, #36	; 0x24
 8015f96:	2101      	movs	r1, #1
 8015f98:	4618      	mov	r0, r3
 8015f9a:	f000 fb9f 	bl	80166dc <RCCEx_PLL3_Config>
 8015f9e:	4603      	mov	r3, r0
 8015fa0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8015fa2:	e003      	b.n	8015fac <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015fa4:	2301      	movs	r3, #1
 8015fa6:	75fb      	strb	r3, [r7, #23]
      break;
 8015fa8:	e000      	b.n	8015fac <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8015faa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015fac:	7dfb      	ldrb	r3, [r7, #23]
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d109      	bne.n	8015fc6 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8015fb2:	4b77      	ldr	r3, [pc, #476]	; (8016190 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8015fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015fb6:	f023 0207 	bic.w	r2, r3, #7
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015fbe:	4974      	ldr	r1, [pc, #464]	; (8016190 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8015fc0:	4313      	orrs	r3, r2
 8015fc2:	654b      	str	r3, [r1, #84]	; 0x54
 8015fc4:	e001      	b.n	8015fca <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015fc6:	7dfb      	ldrb	r3, [r7, #23]
 8015fc8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	681b      	ldr	r3, [r3, #0]
 8015fce:	f003 0304 	and.w	r3, r3, #4
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	d03a      	beq.n	801604c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015fdc:	2b05      	cmp	r3, #5
 8015fde:	d821      	bhi.n	8016024 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8015fe0:	a201      	add	r2, pc, #4	; (adr r2, 8015fe8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8015fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015fe6:	bf00      	nop
 8015fe8:	0801602b 	.word	0x0801602b
 8015fec:	08016001 	.word	0x08016001
 8015ff0:	08016013 	.word	0x08016013
 8015ff4:	0801602b 	.word	0x0801602b
 8015ff8:	0801602b 	.word	0x0801602b
 8015ffc:	0801602b 	.word	0x0801602b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	3304      	adds	r3, #4
 8016004:	2101      	movs	r1, #1
 8016006:	4618      	mov	r0, r3
 8016008:	f000 fab6 	bl	8016578 <RCCEx_PLL2_Config>
 801600c:	4603      	mov	r3, r0
 801600e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8016010:	e00c      	b.n	801602c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	3324      	adds	r3, #36	; 0x24
 8016016:	2101      	movs	r1, #1
 8016018:	4618      	mov	r0, r3
 801601a:	f000 fb5f 	bl	80166dc <RCCEx_PLL3_Config>
 801601e:	4603      	mov	r3, r0
 8016020:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8016022:	e003      	b.n	801602c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8016024:	2301      	movs	r3, #1
 8016026:	75fb      	strb	r3, [r7, #23]
      break;
 8016028:	e000      	b.n	801602c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 801602a:	bf00      	nop
    }

    if(ret == HAL_OK)
 801602c:	7dfb      	ldrb	r3, [r7, #23]
 801602e:	2b00      	cmp	r3, #0
 8016030:	d10a      	bne.n	8016048 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8016032:	4b57      	ldr	r3, [pc, #348]	; (8016190 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8016034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016036:	f023 0207 	bic.w	r2, r3, #7
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016040:	4953      	ldr	r1, [pc, #332]	; (8016190 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8016042:	4313      	orrs	r3, r2
 8016044:	658b      	str	r3, [r1, #88]	; 0x58
 8016046:	e001      	b.n	801604c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016048:	7dfb      	ldrb	r3, [r7, #23]
 801604a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	681b      	ldr	r3, [r3, #0]
 8016050:	f003 0320 	and.w	r3, r3, #32
 8016054:	2b00      	cmp	r3, #0
 8016056:	d04b      	beq.n	80160f0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801605e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8016062:	d02e      	beq.n	80160c2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8016064:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8016068:	d828      	bhi.n	80160bc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 801606a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801606e:	d02a      	beq.n	80160c6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8016070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016074:	d822      	bhi.n	80160bc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8016076:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801607a:	d026      	beq.n	80160ca <HAL_RCCEx_PeriphCLKConfig+0x9de>
 801607c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8016080:	d81c      	bhi.n	80160bc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8016082:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8016086:	d010      	beq.n	80160aa <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8016088:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801608c:	d816      	bhi.n	80160bc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 801608e:	2b00      	cmp	r3, #0
 8016090:	d01d      	beq.n	80160ce <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8016092:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8016096:	d111      	bne.n	80160bc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	3304      	adds	r3, #4
 801609c:	2100      	movs	r1, #0
 801609e:	4618      	mov	r0, r3
 80160a0:	f000 fa6a 	bl	8016578 <RCCEx_PLL2_Config>
 80160a4:	4603      	mov	r3, r0
 80160a6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80160a8:	e012      	b.n	80160d0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	3324      	adds	r3, #36	; 0x24
 80160ae:	2102      	movs	r1, #2
 80160b0:	4618      	mov	r0, r3
 80160b2:	f000 fb13 	bl	80166dc <RCCEx_PLL3_Config>
 80160b6:	4603      	mov	r3, r0
 80160b8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80160ba:	e009      	b.n	80160d0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80160bc:	2301      	movs	r3, #1
 80160be:	75fb      	strb	r3, [r7, #23]
      break;
 80160c0:	e006      	b.n	80160d0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80160c2:	bf00      	nop
 80160c4:	e004      	b.n	80160d0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80160c6:	bf00      	nop
 80160c8:	e002      	b.n	80160d0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80160ca:	bf00      	nop
 80160cc:	e000      	b.n	80160d0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80160ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80160d0:	7dfb      	ldrb	r3, [r7, #23]
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	d10a      	bne.n	80160ec <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80160d6:	4b2e      	ldr	r3, [pc, #184]	; (8016190 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80160d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80160da:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80160e4:	492a      	ldr	r1, [pc, #168]	; (8016190 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80160e6:	4313      	orrs	r3, r2
 80160e8:	654b      	str	r3, [r1, #84]	; 0x54
 80160ea:	e001      	b.n	80160f0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80160ec:	7dfb      	ldrb	r3, [r7, #23]
 80160ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	681b      	ldr	r3, [r3, #0]
 80160f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d04d      	beq.n	8016198 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8016102:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8016106:	d02e      	beq.n	8016166 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8016108:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 801610c:	d828      	bhi.n	8016160 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 801610e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016112:	d02a      	beq.n	801616a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8016114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016118:	d822      	bhi.n	8016160 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 801611a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801611e:	d026      	beq.n	801616e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8016120:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8016124:	d81c      	bhi.n	8016160 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8016126:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801612a:	d010      	beq.n	801614e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 801612c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016130:	d816      	bhi.n	8016160 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8016132:	2b00      	cmp	r3, #0
 8016134:	d01d      	beq.n	8016172 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8016136:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801613a:	d111      	bne.n	8016160 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	3304      	adds	r3, #4
 8016140:	2100      	movs	r1, #0
 8016142:	4618      	mov	r0, r3
 8016144:	f000 fa18 	bl	8016578 <RCCEx_PLL2_Config>
 8016148:	4603      	mov	r3, r0
 801614a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 801614c:	e012      	b.n	8016174 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	3324      	adds	r3, #36	; 0x24
 8016152:	2102      	movs	r1, #2
 8016154:	4618      	mov	r0, r3
 8016156:	f000 fac1 	bl	80166dc <RCCEx_PLL3_Config>
 801615a:	4603      	mov	r3, r0
 801615c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 801615e:	e009      	b.n	8016174 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8016160:	2301      	movs	r3, #1
 8016162:	75fb      	strb	r3, [r7, #23]
      break;
 8016164:	e006      	b.n	8016174 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8016166:	bf00      	nop
 8016168:	e004      	b.n	8016174 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 801616a:	bf00      	nop
 801616c:	e002      	b.n	8016174 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 801616e:	bf00      	nop
 8016170:	e000      	b.n	8016174 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8016172:	bf00      	nop
    }

    if(ret == HAL_OK)
 8016174:	7dfb      	ldrb	r3, [r7, #23]
 8016176:	2b00      	cmp	r3, #0
 8016178:	d10c      	bne.n	8016194 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801617a:	4b05      	ldr	r3, [pc, #20]	; (8016190 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 801617c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801617e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8016188:	4901      	ldr	r1, [pc, #4]	; (8016190 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 801618a:	4313      	orrs	r3, r2
 801618c:	658b      	str	r3, [r1, #88]	; 0x58
 801618e:	e003      	b.n	8016198 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8016190:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016194:	7dfb      	ldrb	r3, [r7, #23]
 8016196:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	681b      	ldr	r3, [r3, #0]
 801619c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	d04b      	beq.n	801623c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80161aa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80161ae:	d02e      	beq.n	801620e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80161b0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80161b4:	d828      	bhi.n	8016208 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80161b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80161ba:	d02a      	beq.n	8016212 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80161bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80161c0:	d822      	bhi.n	8016208 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80161c2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80161c6:	d026      	beq.n	8016216 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80161c8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80161cc:	d81c      	bhi.n	8016208 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80161ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80161d2:	d010      	beq.n	80161f6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80161d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80161d8:	d816      	bhi.n	8016208 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d01d      	beq.n	801621a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80161de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80161e2:	d111      	bne.n	8016208 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	3304      	adds	r3, #4
 80161e8:	2100      	movs	r1, #0
 80161ea:	4618      	mov	r0, r3
 80161ec:	f000 f9c4 	bl	8016578 <RCCEx_PLL2_Config>
 80161f0:	4603      	mov	r3, r0
 80161f2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80161f4:	e012      	b.n	801621c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	3324      	adds	r3, #36	; 0x24
 80161fa:	2102      	movs	r1, #2
 80161fc:	4618      	mov	r0, r3
 80161fe:	f000 fa6d 	bl	80166dc <RCCEx_PLL3_Config>
 8016202:	4603      	mov	r3, r0
 8016204:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8016206:	e009      	b.n	801621c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8016208:	2301      	movs	r3, #1
 801620a:	75fb      	strb	r3, [r7, #23]
      break;
 801620c:	e006      	b.n	801621c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 801620e:	bf00      	nop
 8016210:	e004      	b.n	801621c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8016212:	bf00      	nop
 8016214:	e002      	b.n	801621c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8016216:	bf00      	nop
 8016218:	e000      	b.n	801621c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 801621a:	bf00      	nop
    }

    if(ret == HAL_OK)
 801621c:	7dfb      	ldrb	r3, [r7, #23]
 801621e:	2b00      	cmp	r3, #0
 8016220:	d10a      	bne.n	8016238 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8016222:	4b9d      	ldr	r3, [pc, #628]	; (8016498 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8016224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016226:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8016230:	4999      	ldr	r1, [pc, #612]	; (8016498 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8016232:	4313      	orrs	r3, r2
 8016234:	658b      	str	r3, [r1, #88]	; 0x58
 8016236:	e001      	b.n	801623c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016238:	7dfb      	ldrb	r3, [r7, #23]
 801623a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	681b      	ldr	r3, [r3, #0]
 8016240:	f003 0308 	and.w	r3, r3, #8
 8016244:	2b00      	cmp	r3, #0
 8016246:	d01a      	beq.n	801627e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801624e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016252:	d10a      	bne.n	801626a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	3324      	adds	r3, #36	; 0x24
 8016258:	2102      	movs	r1, #2
 801625a:	4618      	mov	r0, r3
 801625c:	f000 fa3e 	bl	80166dc <RCCEx_PLL3_Config>
 8016260:	4603      	mov	r3, r0
 8016262:	2b00      	cmp	r3, #0
 8016264:	d001      	beq.n	801626a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8016266:	2301      	movs	r3, #1
 8016268:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 801626a:	4b8b      	ldr	r3, [pc, #556]	; (8016498 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 801626c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801626e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016278:	4987      	ldr	r1, [pc, #540]	; (8016498 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 801627a:	4313      	orrs	r3, r2
 801627c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	681b      	ldr	r3, [r3, #0]
 8016282:	f003 0310 	and.w	r3, r3, #16
 8016286:	2b00      	cmp	r3, #0
 8016288:	d01a      	beq.n	80162c0 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016290:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016294:	d10a      	bne.n	80162ac <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	3324      	adds	r3, #36	; 0x24
 801629a:	2102      	movs	r1, #2
 801629c:	4618      	mov	r0, r3
 801629e:	f000 fa1d 	bl	80166dc <RCCEx_PLL3_Config>
 80162a2:	4603      	mov	r3, r0
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	d001      	beq.n	80162ac <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80162a8:	2301      	movs	r3, #1
 80162aa:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80162ac:	4b7a      	ldr	r3, [pc, #488]	; (8016498 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80162ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80162b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80162ba:	4977      	ldr	r1, [pc, #476]	; (8016498 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80162bc:	4313      	orrs	r3, r2
 80162be:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80162c0:	687b      	ldr	r3, [r7, #4]
 80162c2:	681b      	ldr	r3, [r3, #0]
 80162c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	d034      	beq.n	8016336 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80162cc:	687b      	ldr	r3, [r7, #4]
 80162ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80162d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80162d6:	d01d      	beq.n	8016314 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80162d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80162dc:	d817      	bhi.n	801630e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80162de:	2b00      	cmp	r3, #0
 80162e0:	d003      	beq.n	80162ea <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80162e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80162e6:	d009      	beq.n	80162fc <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80162e8:	e011      	b.n	801630e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	3304      	adds	r3, #4
 80162ee:	2100      	movs	r1, #0
 80162f0:	4618      	mov	r0, r3
 80162f2:	f000 f941 	bl	8016578 <RCCEx_PLL2_Config>
 80162f6:	4603      	mov	r3, r0
 80162f8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80162fa:	e00c      	b.n	8016316 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	3324      	adds	r3, #36	; 0x24
 8016300:	2102      	movs	r1, #2
 8016302:	4618      	mov	r0, r3
 8016304:	f000 f9ea 	bl	80166dc <RCCEx_PLL3_Config>
 8016308:	4603      	mov	r3, r0
 801630a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 801630c:	e003      	b.n	8016316 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801630e:	2301      	movs	r3, #1
 8016310:	75fb      	strb	r3, [r7, #23]
      break;
 8016312:	e000      	b.n	8016316 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8016314:	bf00      	nop
    }

    if(ret == HAL_OK)
 8016316:	7dfb      	ldrb	r3, [r7, #23]
 8016318:	2b00      	cmp	r3, #0
 801631a:	d10a      	bne.n	8016332 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801631c:	4b5e      	ldr	r3, [pc, #376]	; (8016498 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 801631e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016320:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8016324:	687b      	ldr	r3, [r7, #4]
 8016326:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801632a:	495b      	ldr	r1, [pc, #364]	; (8016498 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 801632c:	4313      	orrs	r3, r2
 801632e:	658b      	str	r3, [r1, #88]	; 0x58
 8016330:	e001      	b.n	8016336 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016332:	7dfb      	ldrb	r3, [r7, #23]
 8016334:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	681b      	ldr	r3, [r3, #0]
 801633a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801633e:	2b00      	cmp	r3, #0
 8016340:	d033      	beq.n	80163aa <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016348:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801634c:	d01c      	beq.n	8016388 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 801634e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8016352:	d816      	bhi.n	8016382 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8016354:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8016358:	d003      	beq.n	8016362 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 801635a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801635e:	d007      	beq.n	8016370 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8016360:	e00f      	b.n	8016382 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8016362:	4b4d      	ldr	r3, [pc, #308]	; (8016498 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8016364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016366:	4a4c      	ldr	r2, [pc, #304]	; (8016498 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8016368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801636c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 801636e:	e00c      	b.n	801638a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8016370:	687b      	ldr	r3, [r7, #4]
 8016372:	3324      	adds	r3, #36	; 0x24
 8016374:	2101      	movs	r1, #1
 8016376:	4618      	mov	r0, r3
 8016378:	f000 f9b0 	bl	80166dc <RCCEx_PLL3_Config>
 801637c:	4603      	mov	r3, r0
 801637e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8016380:	e003      	b.n	801638a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8016382:	2301      	movs	r3, #1
 8016384:	75fb      	strb	r3, [r7, #23]
      break;
 8016386:	e000      	b.n	801638a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8016388:	bf00      	nop
    }

    if(ret == HAL_OK)
 801638a:	7dfb      	ldrb	r3, [r7, #23]
 801638c:	2b00      	cmp	r3, #0
 801638e:	d10a      	bne.n	80163a6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8016390:	4b41      	ldr	r3, [pc, #260]	; (8016498 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8016392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016394:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801639e:	493e      	ldr	r1, [pc, #248]	; (8016498 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80163a0:	4313      	orrs	r3, r2
 80163a2:	654b      	str	r3, [r1, #84]	; 0x54
 80163a4:	e001      	b.n	80163aa <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80163a6:	7dfb      	ldrb	r3, [r7, #23]
 80163a8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	681b      	ldr	r3, [r3, #0]
 80163ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	d029      	beq.n	801640a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d003      	beq.n	80163c6 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80163be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80163c2:	d007      	beq.n	80163d4 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80163c4:	e00f      	b.n	80163e6 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80163c6:	4b34      	ldr	r3, [pc, #208]	; (8016498 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80163c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80163ca:	4a33      	ldr	r2, [pc, #204]	; (8016498 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80163cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80163d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80163d2:	e00b      	b.n	80163ec <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	3304      	adds	r3, #4
 80163d8:	2102      	movs	r1, #2
 80163da:	4618      	mov	r0, r3
 80163dc:	f000 f8cc 	bl	8016578 <RCCEx_PLL2_Config>
 80163e0:	4603      	mov	r3, r0
 80163e2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80163e4:	e002      	b.n	80163ec <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80163e6:	2301      	movs	r3, #1
 80163e8:	75fb      	strb	r3, [r7, #23]
      break;
 80163ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80163ec:	7dfb      	ldrb	r3, [r7, #23]
 80163ee:	2b00      	cmp	r3, #0
 80163f0:	d109      	bne.n	8016406 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80163f2:	4b29      	ldr	r3, [pc, #164]	; (8016498 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80163f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80163f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80163fe:	4926      	ldr	r1, [pc, #152]	; (8016498 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8016400:	4313      	orrs	r3, r2
 8016402:	64cb      	str	r3, [r1, #76]	; 0x4c
 8016404:	e001      	b.n	801640a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016406:	7dfb      	ldrb	r3, [r7, #23]
 8016408:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	681b      	ldr	r3, [r3, #0]
 801640e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8016412:	2b00      	cmp	r3, #0
 8016414:	d00a      	beq.n	801642c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	3324      	adds	r3, #36	; 0x24
 801641a:	2102      	movs	r1, #2
 801641c:	4618      	mov	r0, r3
 801641e:	f000 f95d 	bl	80166dc <RCCEx_PLL3_Config>
 8016422:	4603      	mov	r3, r0
 8016424:	2b00      	cmp	r3, #0
 8016426:	d001      	beq.n	801642c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8016428:	2301      	movs	r3, #1
 801642a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	681b      	ldr	r3, [r3, #0]
 8016430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016434:	2b00      	cmp	r3, #0
 8016436:	d033      	beq.n	80164a0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801643c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8016440:	d017      	beq.n	8016472 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8016442:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8016446:	d811      	bhi.n	801646c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8016448:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801644c:	d013      	beq.n	8016476 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 801644e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016452:	d80b      	bhi.n	801646c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8016454:	2b00      	cmp	r3, #0
 8016456:	d010      	beq.n	801647a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8016458:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801645c:	d106      	bne.n	801646c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801645e:	4b0e      	ldr	r3, [pc, #56]	; (8016498 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8016460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016462:	4a0d      	ldr	r2, [pc, #52]	; (8016498 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8016464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8016468:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 801646a:	e007      	b.n	801647c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801646c:	2301      	movs	r3, #1
 801646e:	75fb      	strb	r3, [r7, #23]
      break;
 8016470:	e004      	b.n	801647c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8016472:	bf00      	nop
 8016474:	e002      	b.n	801647c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8016476:	bf00      	nop
 8016478:	e000      	b.n	801647c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 801647a:	bf00      	nop
    }

    if(ret == HAL_OK)
 801647c:	7dfb      	ldrb	r3, [r7, #23]
 801647e:	2b00      	cmp	r3, #0
 8016480:	d10c      	bne.n	801649c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8016482:	4b05      	ldr	r3, [pc, #20]	; (8016498 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8016484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016486:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801648e:	4902      	ldr	r1, [pc, #8]	; (8016498 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8016490:	4313      	orrs	r3, r2
 8016492:	654b      	str	r3, [r1, #84]	; 0x54
 8016494:	e004      	b.n	80164a0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8016496:	bf00      	nop
 8016498:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801649c:	7dfb      	ldrb	r3, [r7, #23]
 801649e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	681b      	ldr	r3, [r3, #0]
 80164a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80164a8:	2b00      	cmp	r3, #0
 80164aa:	d008      	beq.n	80164be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80164ac:	4b31      	ldr	r3, [pc, #196]	; (8016574 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80164ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80164b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80164b8:	492e      	ldr	r1, [pc, #184]	; (8016574 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80164ba:	4313      	orrs	r3, r2
 80164bc:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	681b      	ldr	r3, [r3, #0]
 80164c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	d009      	beq.n	80164de <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80164ca:	4b2a      	ldr	r3, [pc, #168]	; (8016574 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80164cc:	691b      	ldr	r3, [r3, #16]
 80164ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80164d2:	687b      	ldr	r3, [r7, #4]
 80164d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80164d8:	4926      	ldr	r1, [pc, #152]	; (8016574 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80164da:	4313      	orrs	r3, r2
 80164dc:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	681b      	ldr	r3, [r3, #0]
 80164e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	d008      	beq.n	80164fc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80164ea:	4b22      	ldr	r3, [pc, #136]	; (8016574 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80164ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80164ee:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80164f6:	491f      	ldr	r1, [pc, #124]	; (8016574 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80164f8:	4313      	orrs	r3, r2
 80164fa:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	681b      	ldr	r3, [r3, #0]
 8016500:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8016504:	2b00      	cmp	r3, #0
 8016506:	d00d      	beq.n	8016524 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8016508:	4b1a      	ldr	r3, [pc, #104]	; (8016574 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 801650a:	691b      	ldr	r3, [r3, #16]
 801650c:	4a19      	ldr	r2, [pc, #100]	; (8016574 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 801650e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8016512:	6113      	str	r3, [r2, #16]
 8016514:	4b17      	ldr	r3, [pc, #92]	; (8016574 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8016516:	691a      	ldr	r2, [r3, #16]
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801651e:	4915      	ldr	r1, [pc, #84]	; (8016574 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8016520:	4313      	orrs	r3, r2
 8016522:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	681b      	ldr	r3, [r3, #0]
 8016528:	2b00      	cmp	r3, #0
 801652a:	da08      	bge.n	801653e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 801652c:	4b11      	ldr	r3, [pc, #68]	; (8016574 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 801652e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016530:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8016534:	687b      	ldr	r3, [r7, #4]
 8016536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016538:	490e      	ldr	r1, [pc, #56]	; (8016574 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 801653a:	4313      	orrs	r3, r2
 801653c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	681b      	ldr	r3, [r3, #0]
 8016542:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016546:	2b00      	cmp	r3, #0
 8016548:	d009      	beq.n	801655e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801654a:	4b0a      	ldr	r3, [pc, #40]	; (8016574 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 801654c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801654e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016558:	4906      	ldr	r1, [pc, #24]	; (8016574 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 801655a:	4313      	orrs	r3, r2
 801655c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 801655e:	7dbb      	ldrb	r3, [r7, #22]
 8016560:	2b00      	cmp	r3, #0
 8016562:	d101      	bne.n	8016568 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8016564:	2300      	movs	r3, #0
 8016566:	e000      	b.n	801656a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8016568:	2301      	movs	r3, #1
}
 801656a:	4618      	mov	r0, r3
 801656c:	3718      	adds	r7, #24
 801656e:	46bd      	mov	sp, r7
 8016570:	bd80      	pop	{r7, pc}
 8016572:	bf00      	nop
 8016574:	58024400 	.word	0x58024400

08016578 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8016578:	b580      	push	{r7, lr}
 801657a:	b084      	sub	sp, #16
 801657c:	af00      	add	r7, sp, #0
 801657e:	6078      	str	r0, [r7, #4]
 8016580:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8016582:	2300      	movs	r3, #0
 8016584:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8016586:	4b53      	ldr	r3, [pc, #332]	; (80166d4 <RCCEx_PLL2_Config+0x15c>)
 8016588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801658a:	f003 0303 	and.w	r3, r3, #3
 801658e:	2b03      	cmp	r3, #3
 8016590:	d101      	bne.n	8016596 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8016592:	2301      	movs	r3, #1
 8016594:	e099      	b.n	80166ca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8016596:	4b4f      	ldr	r3, [pc, #316]	; (80166d4 <RCCEx_PLL2_Config+0x15c>)
 8016598:	681b      	ldr	r3, [r3, #0]
 801659a:	4a4e      	ldr	r2, [pc, #312]	; (80166d4 <RCCEx_PLL2_Config+0x15c>)
 801659c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80165a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80165a2:	f7fa fe8d 	bl	80112c0 <HAL_GetTick>
 80165a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80165a8:	e008      	b.n	80165bc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80165aa:	f7fa fe89 	bl	80112c0 <HAL_GetTick>
 80165ae:	4602      	mov	r2, r0
 80165b0:	68bb      	ldr	r3, [r7, #8]
 80165b2:	1ad3      	subs	r3, r2, r3
 80165b4:	2b02      	cmp	r3, #2
 80165b6:	d901      	bls.n	80165bc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80165b8:	2303      	movs	r3, #3
 80165ba:	e086      	b.n	80166ca <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80165bc:	4b45      	ldr	r3, [pc, #276]	; (80166d4 <RCCEx_PLL2_Config+0x15c>)
 80165be:	681b      	ldr	r3, [r3, #0]
 80165c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	d1f0      	bne.n	80165aa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80165c8:	4b42      	ldr	r3, [pc, #264]	; (80166d4 <RCCEx_PLL2_Config+0x15c>)
 80165ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80165cc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	681b      	ldr	r3, [r3, #0]
 80165d4:	031b      	lsls	r3, r3, #12
 80165d6:	493f      	ldr	r1, [pc, #252]	; (80166d4 <RCCEx_PLL2_Config+0x15c>)
 80165d8:	4313      	orrs	r3, r2
 80165da:	628b      	str	r3, [r1, #40]	; 0x28
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	685b      	ldr	r3, [r3, #4]
 80165e0:	3b01      	subs	r3, #1
 80165e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	689b      	ldr	r3, [r3, #8]
 80165ea:	3b01      	subs	r3, #1
 80165ec:	025b      	lsls	r3, r3, #9
 80165ee:	b29b      	uxth	r3, r3
 80165f0:	431a      	orrs	r2, r3
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	68db      	ldr	r3, [r3, #12]
 80165f6:	3b01      	subs	r3, #1
 80165f8:	041b      	lsls	r3, r3, #16
 80165fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80165fe:	431a      	orrs	r2, r3
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	691b      	ldr	r3, [r3, #16]
 8016604:	3b01      	subs	r3, #1
 8016606:	061b      	lsls	r3, r3, #24
 8016608:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801660c:	4931      	ldr	r1, [pc, #196]	; (80166d4 <RCCEx_PLL2_Config+0x15c>)
 801660e:	4313      	orrs	r3, r2
 8016610:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8016612:	4b30      	ldr	r3, [pc, #192]	; (80166d4 <RCCEx_PLL2_Config+0x15c>)
 8016614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016616:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801661a:	687b      	ldr	r3, [r7, #4]
 801661c:	695b      	ldr	r3, [r3, #20]
 801661e:	492d      	ldr	r1, [pc, #180]	; (80166d4 <RCCEx_PLL2_Config+0x15c>)
 8016620:	4313      	orrs	r3, r2
 8016622:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8016624:	4b2b      	ldr	r3, [pc, #172]	; (80166d4 <RCCEx_PLL2_Config+0x15c>)
 8016626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016628:	f023 0220 	bic.w	r2, r3, #32
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	699b      	ldr	r3, [r3, #24]
 8016630:	4928      	ldr	r1, [pc, #160]	; (80166d4 <RCCEx_PLL2_Config+0x15c>)
 8016632:	4313      	orrs	r3, r2
 8016634:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8016636:	4b27      	ldr	r3, [pc, #156]	; (80166d4 <RCCEx_PLL2_Config+0x15c>)
 8016638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801663a:	4a26      	ldr	r2, [pc, #152]	; (80166d4 <RCCEx_PLL2_Config+0x15c>)
 801663c:	f023 0310 	bic.w	r3, r3, #16
 8016640:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8016642:	4b24      	ldr	r3, [pc, #144]	; (80166d4 <RCCEx_PLL2_Config+0x15c>)
 8016644:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8016646:	4b24      	ldr	r3, [pc, #144]	; (80166d8 <RCCEx_PLL2_Config+0x160>)
 8016648:	4013      	ands	r3, r2
 801664a:	687a      	ldr	r2, [r7, #4]
 801664c:	69d2      	ldr	r2, [r2, #28]
 801664e:	00d2      	lsls	r2, r2, #3
 8016650:	4920      	ldr	r1, [pc, #128]	; (80166d4 <RCCEx_PLL2_Config+0x15c>)
 8016652:	4313      	orrs	r3, r2
 8016654:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8016656:	4b1f      	ldr	r3, [pc, #124]	; (80166d4 <RCCEx_PLL2_Config+0x15c>)
 8016658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801665a:	4a1e      	ldr	r2, [pc, #120]	; (80166d4 <RCCEx_PLL2_Config+0x15c>)
 801665c:	f043 0310 	orr.w	r3, r3, #16
 8016660:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8016662:	683b      	ldr	r3, [r7, #0]
 8016664:	2b00      	cmp	r3, #0
 8016666:	d106      	bne.n	8016676 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8016668:	4b1a      	ldr	r3, [pc, #104]	; (80166d4 <RCCEx_PLL2_Config+0x15c>)
 801666a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801666c:	4a19      	ldr	r2, [pc, #100]	; (80166d4 <RCCEx_PLL2_Config+0x15c>)
 801666e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8016672:	62d3      	str	r3, [r2, #44]	; 0x2c
 8016674:	e00f      	b.n	8016696 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8016676:	683b      	ldr	r3, [r7, #0]
 8016678:	2b01      	cmp	r3, #1
 801667a:	d106      	bne.n	801668a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 801667c:	4b15      	ldr	r3, [pc, #84]	; (80166d4 <RCCEx_PLL2_Config+0x15c>)
 801667e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016680:	4a14      	ldr	r2, [pc, #80]	; (80166d4 <RCCEx_PLL2_Config+0x15c>)
 8016682:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016686:	62d3      	str	r3, [r2, #44]	; 0x2c
 8016688:	e005      	b.n	8016696 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801668a:	4b12      	ldr	r3, [pc, #72]	; (80166d4 <RCCEx_PLL2_Config+0x15c>)
 801668c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801668e:	4a11      	ldr	r2, [pc, #68]	; (80166d4 <RCCEx_PLL2_Config+0x15c>)
 8016690:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8016694:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8016696:	4b0f      	ldr	r3, [pc, #60]	; (80166d4 <RCCEx_PLL2_Config+0x15c>)
 8016698:	681b      	ldr	r3, [r3, #0]
 801669a:	4a0e      	ldr	r2, [pc, #56]	; (80166d4 <RCCEx_PLL2_Config+0x15c>)
 801669c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80166a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80166a2:	f7fa fe0d 	bl	80112c0 <HAL_GetTick>
 80166a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80166a8:	e008      	b.n	80166bc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80166aa:	f7fa fe09 	bl	80112c0 <HAL_GetTick>
 80166ae:	4602      	mov	r2, r0
 80166b0:	68bb      	ldr	r3, [r7, #8]
 80166b2:	1ad3      	subs	r3, r2, r3
 80166b4:	2b02      	cmp	r3, #2
 80166b6:	d901      	bls.n	80166bc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80166b8:	2303      	movs	r3, #3
 80166ba:	e006      	b.n	80166ca <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80166bc:	4b05      	ldr	r3, [pc, #20]	; (80166d4 <RCCEx_PLL2_Config+0x15c>)
 80166be:	681b      	ldr	r3, [r3, #0]
 80166c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80166c4:	2b00      	cmp	r3, #0
 80166c6:	d0f0      	beq.n	80166aa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80166c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80166ca:	4618      	mov	r0, r3
 80166cc:	3710      	adds	r7, #16
 80166ce:	46bd      	mov	sp, r7
 80166d0:	bd80      	pop	{r7, pc}
 80166d2:	bf00      	nop
 80166d4:	58024400 	.word	0x58024400
 80166d8:	ffff0007 	.word	0xffff0007

080166dc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80166dc:	b580      	push	{r7, lr}
 80166de:	b084      	sub	sp, #16
 80166e0:	af00      	add	r7, sp, #0
 80166e2:	6078      	str	r0, [r7, #4]
 80166e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80166e6:	2300      	movs	r3, #0
 80166e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80166ea:	4b53      	ldr	r3, [pc, #332]	; (8016838 <RCCEx_PLL3_Config+0x15c>)
 80166ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80166ee:	f003 0303 	and.w	r3, r3, #3
 80166f2:	2b03      	cmp	r3, #3
 80166f4:	d101      	bne.n	80166fa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80166f6:	2301      	movs	r3, #1
 80166f8:	e099      	b.n	801682e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80166fa:	4b4f      	ldr	r3, [pc, #316]	; (8016838 <RCCEx_PLL3_Config+0x15c>)
 80166fc:	681b      	ldr	r3, [r3, #0]
 80166fe:	4a4e      	ldr	r2, [pc, #312]	; (8016838 <RCCEx_PLL3_Config+0x15c>)
 8016700:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8016704:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8016706:	f7fa fddb 	bl	80112c0 <HAL_GetTick>
 801670a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801670c:	e008      	b.n	8016720 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 801670e:	f7fa fdd7 	bl	80112c0 <HAL_GetTick>
 8016712:	4602      	mov	r2, r0
 8016714:	68bb      	ldr	r3, [r7, #8]
 8016716:	1ad3      	subs	r3, r2, r3
 8016718:	2b02      	cmp	r3, #2
 801671a:	d901      	bls.n	8016720 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 801671c:	2303      	movs	r3, #3
 801671e:	e086      	b.n	801682e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8016720:	4b45      	ldr	r3, [pc, #276]	; (8016838 <RCCEx_PLL3_Config+0x15c>)
 8016722:	681b      	ldr	r3, [r3, #0]
 8016724:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8016728:	2b00      	cmp	r3, #0
 801672a:	d1f0      	bne.n	801670e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 801672c:	4b42      	ldr	r3, [pc, #264]	; (8016838 <RCCEx_PLL3_Config+0x15c>)
 801672e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016730:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	681b      	ldr	r3, [r3, #0]
 8016738:	051b      	lsls	r3, r3, #20
 801673a:	493f      	ldr	r1, [pc, #252]	; (8016838 <RCCEx_PLL3_Config+0x15c>)
 801673c:	4313      	orrs	r3, r2
 801673e:	628b      	str	r3, [r1, #40]	; 0x28
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	685b      	ldr	r3, [r3, #4]
 8016744:	3b01      	subs	r3, #1
 8016746:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	689b      	ldr	r3, [r3, #8]
 801674e:	3b01      	subs	r3, #1
 8016750:	025b      	lsls	r3, r3, #9
 8016752:	b29b      	uxth	r3, r3
 8016754:	431a      	orrs	r2, r3
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	68db      	ldr	r3, [r3, #12]
 801675a:	3b01      	subs	r3, #1
 801675c:	041b      	lsls	r3, r3, #16
 801675e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8016762:	431a      	orrs	r2, r3
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	691b      	ldr	r3, [r3, #16]
 8016768:	3b01      	subs	r3, #1
 801676a:	061b      	lsls	r3, r3, #24
 801676c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8016770:	4931      	ldr	r1, [pc, #196]	; (8016838 <RCCEx_PLL3_Config+0x15c>)
 8016772:	4313      	orrs	r3, r2
 8016774:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8016776:	4b30      	ldr	r3, [pc, #192]	; (8016838 <RCCEx_PLL3_Config+0x15c>)
 8016778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801677a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	695b      	ldr	r3, [r3, #20]
 8016782:	492d      	ldr	r1, [pc, #180]	; (8016838 <RCCEx_PLL3_Config+0x15c>)
 8016784:	4313      	orrs	r3, r2
 8016786:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8016788:	4b2b      	ldr	r3, [pc, #172]	; (8016838 <RCCEx_PLL3_Config+0x15c>)
 801678a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801678c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	699b      	ldr	r3, [r3, #24]
 8016794:	4928      	ldr	r1, [pc, #160]	; (8016838 <RCCEx_PLL3_Config+0x15c>)
 8016796:	4313      	orrs	r3, r2
 8016798:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801679a:	4b27      	ldr	r3, [pc, #156]	; (8016838 <RCCEx_PLL3_Config+0x15c>)
 801679c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801679e:	4a26      	ldr	r2, [pc, #152]	; (8016838 <RCCEx_PLL3_Config+0x15c>)
 80167a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80167a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80167a6:	4b24      	ldr	r3, [pc, #144]	; (8016838 <RCCEx_PLL3_Config+0x15c>)
 80167a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80167aa:	4b24      	ldr	r3, [pc, #144]	; (801683c <RCCEx_PLL3_Config+0x160>)
 80167ac:	4013      	ands	r3, r2
 80167ae:	687a      	ldr	r2, [r7, #4]
 80167b0:	69d2      	ldr	r2, [r2, #28]
 80167b2:	00d2      	lsls	r2, r2, #3
 80167b4:	4920      	ldr	r1, [pc, #128]	; (8016838 <RCCEx_PLL3_Config+0x15c>)
 80167b6:	4313      	orrs	r3, r2
 80167b8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80167ba:	4b1f      	ldr	r3, [pc, #124]	; (8016838 <RCCEx_PLL3_Config+0x15c>)
 80167bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80167be:	4a1e      	ldr	r2, [pc, #120]	; (8016838 <RCCEx_PLL3_Config+0x15c>)
 80167c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80167c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80167c6:	683b      	ldr	r3, [r7, #0]
 80167c8:	2b00      	cmp	r3, #0
 80167ca:	d106      	bne.n	80167da <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80167cc:	4b1a      	ldr	r3, [pc, #104]	; (8016838 <RCCEx_PLL3_Config+0x15c>)
 80167ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80167d0:	4a19      	ldr	r2, [pc, #100]	; (8016838 <RCCEx_PLL3_Config+0x15c>)
 80167d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80167d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80167d8:	e00f      	b.n	80167fa <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80167da:	683b      	ldr	r3, [r7, #0]
 80167dc:	2b01      	cmp	r3, #1
 80167de:	d106      	bne.n	80167ee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80167e0:	4b15      	ldr	r3, [pc, #84]	; (8016838 <RCCEx_PLL3_Config+0x15c>)
 80167e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80167e4:	4a14      	ldr	r2, [pc, #80]	; (8016838 <RCCEx_PLL3_Config+0x15c>)
 80167e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80167ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80167ec:	e005      	b.n	80167fa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80167ee:	4b12      	ldr	r3, [pc, #72]	; (8016838 <RCCEx_PLL3_Config+0x15c>)
 80167f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80167f2:	4a11      	ldr	r2, [pc, #68]	; (8016838 <RCCEx_PLL3_Config+0x15c>)
 80167f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80167f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80167fa:	4b0f      	ldr	r3, [pc, #60]	; (8016838 <RCCEx_PLL3_Config+0x15c>)
 80167fc:	681b      	ldr	r3, [r3, #0]
 80167fe:	4a0e      	ldr	r2, [pc, #56]	; (8016838 <RCCEx_PLL3_Config+0x15c>)
 8016800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016804:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8016806:	f7fa fd5b 	bl	80112c0 <HAL_GetTick>
 801680a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801680c:	e008      	b.n	8016820 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 801680e:	f7fa fd57 	bl	80112c0 <HAL_GetTick>
 8016812:	4602      	mov	r2, r0
 8016814:	68bb      	ldr	r3, [r7, #8]
 8016816:	1ad3      	subs	r3, r2, r3
 8016818:	2b02      	cmp	r3, #2
 801681a:	d901      	bls.n	8016820 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 801681c:	2303      	movs	r3, #3
 801681e:	e006      	b.n	801682e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8016820:	4b05      	ldr	r3, [pc, #20]	; (8016838 <RCCEx_PLL3_Config+0x15c>)
 8016822:	681b      	ldr	r3, [r3, #0]
 8016824:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8016828:	2b00      	cmp	r3, #0
 801682a:	d0f0      	beq.n	801680e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 801682c:	7bfb      	ldrb	r3, [r7, #15]
}
 801682e:	4618      	mov	r0, r3
 8016830:	3710      	adds	r7, #16
 8016832:	46bd      	mov	sp, r7
 8016834:	bd80      	pop	{r7, pc}
 8016836:	bf00      	nop
 8016838:	58024400 	.word	0x58024400
 801683c:	ffff0007 	.word	0xffff0007

08016840 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8016840:	b580      	push	{r7, lr}
 8016842:	b082      	sub	sp, #8
 8016844:	af00      	add	r7, sp, #0
 8016846:	6078      	str	r0, [r7, #4]
 8016848:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	2b00      	cmp	r3, #0
 801684e:	d101      	bne.n	8016854 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8016850:	2301      	movs	r3, #1
 8016852:	e02b      	b.n	80168ac <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801685a:	b2db      	uxtb	r3, r3
 801685c:	2b00      	cmp	r3, #0
 801685e:	d106      	bne.n	801686e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	2200      	movs	r2, #0
 8016864:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8016868:	6878      	ldr	r0, [r7, #4]
 801686a:	f7ea fe4f 	bl	800150c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	2202      	movs	r2, #2
 8016872:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	681a      	ldr	r2, [r3, #0]
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	3304      	adds	r3, #4
 801687e:	4619      	mov	r1, r3
 8016880:	4610      	mov	r0, r2
 8016882:	f000 fd9b 	bl	80173bc <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	6818      	ldr	r0, [r3, #0]
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	685b      	ldr	r3, [r3, #4]
 801688e:	461a      	mov	r2, r3
 8016890:	6839      	ldr	r1, [r7, #0]
 8016892:	f000 fdef 	bl	8017474 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8016896:	4b07      	ldr	r3, [pc, #28]	; (80168b4 <HAL_SDRAM_Init+0x74>)
 8016898:	681b      	ldr	r3, [r3, #0]
 801689a:	4a06      	ldr	r2, [pc, #24]	; (80168b4 <HAL_SDRAM_Init+0x74>)
 801689c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80168a0:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	2201      	movs	r2, #1
 80168a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80168aa:	2300      	movs	r3, #0
}
 80168ac:	4618      	mov	r0, r3
 80168ae:	3708      	adds	r7, #8
 80168b0:	46bd      	mov	sp, r7
 80168b2:	bd80      	pop	{r7, pc}
 80168b4:	52004000 	.word	0x52004000

080168b8 <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
 80168b8:	b580      	push	{r7, lr}
 80168ba:	b082      	sub	sp, #8
 80168bc:	af00      	add	r7, sp, #0
 80168be:	6078      	str	r0, [r7, #4]

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
 80168c0:	6878      	ldr	r0, [r7, #4]
 80168c2:	f7ea fe67 	bl	8001594 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 80168c6:	687b      	ldr	r3, [r7, #4]
 80168c8:	681a      	ldr	r2, [r3, #0]
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	685b      	ldr	r3, [r3, #4]
 80168ce:	4619      	mov	r1, r3
 80168d0:	4610      	mov	r0, r2
 80168d2:	f000 fe39 	bl	8017548 <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
 80168d6:	687b      	ldr	r3, [r7, #4]
 80168d8:	2200      	movs	r2, #0
 80168da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	2200      	movs	r2, #0
 80168e2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  return HAL_OK;
 80168e6:	2300      	movs	r3, #0
}
 80168e8:	4618      	mov	r0, r3
 80168ea:	3708      	adds	r7, #8
 80168ec:	46bd      	mov	sp, r7
 80168ee:	bd80      	pop	{r7, pc}

080168f0 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80168f0:	b580      	push	{r7, lr}
 80168f2:	b086      	sub	sp, #24
 80168f4:	af00      	add	r7, sp, #0
 80168f6:	60f8      	str	r0, [r7, #12]
 80168f8:	60b9      	str	r1, [r7, #8]
 80168fa:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80168fc:	68fb      	ldr	r3, [r7, #12]
 80168fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016902:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8016904:	7dfb      	ldrb	r3, [r7, #23]
 8016906:	2b02      	cmp	r3, #2
 8016908:	d101      	bne.n	801690e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 801690a:	2302      	movs	r3, #2
 801690c:	e021      	b.n	8016952 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 801690e:	7dfb      	ldrb	r3, [r7, #23]
 8016910:	2b01      	cmp	r3, #1
 8016912:	d002      	beq.n	801691a <HAL_SDRAM_SendCommand+0x2a>
 8016914:	7dfb      	ldrb	r3, [r7, #23]
 8016916:	2b05      	cmp	r3, #5
 8016918:	d118      	bne.n	801694c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 801691a:	68fb      	ldr	r3, [r7, #12]
 801691c:	2202      	movs	r2, #2
 801691e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8016922:	68fb      	ldr	r3, [r7, #12]
 8016924:	681b      	ldr	r3, [r3, #0]
 8016926:	687a      	ldr	r2, [r7, #4]
 8016928:	68b9      	ldr	r1, [r7, #8]
 801692a:	4618      	mov	r0, r3
 801692c:	f000 fe2e 	bl	801758c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8016930:	68bb      	ldr	r3, [r7, #8]
 8016932:	681b      	ldr	r3, [r3, #0]
 8016934:	2b02      	cmp	r3, #2
 8016936:	d104      	bne.n	8016942 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8016938:	68fb      	ldr	r3, [r7, #12]
 801693a:	2205      	movs	r2, #5
 801693c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8016940:	e006      	b.n	8016950 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8016942:	68fb      	ldr	r3, [r7, #12]
 8016944:	2201      	movs	r2, #1
 8016946:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 801694a:	e001      	b.n	8016950 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 801694c:	2301      	movs	r3, #1
 801694e:	e000      	b.n	8016952 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8016950:	2300      	movs	r3, #0
}
 8016952:	4618      	mov	r0, r3
 8016954:	3718      	adds	r7, #24
 8016956:	46bd      	mov	sp, r7
 8016958:	bd80      	pop	{r7, pc}

0801695a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 801695a:	b580      	push	{r7, lr}
 801695c:	b082      	sub	sp, #8
 801695e:	af00      	add	r7, sp, #0
 8016960:	6078      	str	r0, [r7, #4]
 8016962:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801696a:	b2db      	uxtb	r3, r3
 801696c:	2b02      	cmp	r3, #2
 801696e:	d101      	bne.n	8016974 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8016970:	2302      	movs	r3, #2
 8016972:	e016      	b.n	80169a2 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801697a:	b2db      	uxtb	r3, r3
 801697c:	2b01      	cmp	r3, #1
 801697e:	d10f      	bne.n	80169a0 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8016980:	687b      	ldr	r3, [r7, #4]
 8016982:	2202      	movs	r2, #2
 8016984:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	681b      	ldr	r3, [r3, #0]
 801698c:	6839      	ldr	r1, [r7, #0]
 801698e:	4618      	mov	r0, r3
 8016990:	f000 fe20 	bl	80175d4 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	2201      	movs	r2, #1
 8016998:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 801699c:	2300      	movs	r3, #0
 801699e:	e000      	b.n	80169a2 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80169a0:	2301      	movs	r3, #1
}
 80169a2:	4618      	mov	r0, r3
 80169a4:	3708      	adds	r7, #8
 80169a6:	46bd      	mov	sp, r7
 80169a8:	bd80      	pop	{r7, pc}

080169aa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80169aa:	b580      	push	{r7, lr}
 80169ac:	b082      	sub	sp, #8
 80169ae:	af00      	add	r7, sp, #0
 80169b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d101      	bne.n	80169bc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80169b8:	2301      	movs	r3, #1
 80169ba:	e049      	b.n	8016a50 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80169c2:	b2db      	uxtb	r3, r3
 80169c4:	2b00      	cmp	r3, #0
 80169c6:	d106      	bne.n	80169d6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	2200      	movs	r2, #0
 80169cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80169d0:	6878      	ldr	r0, [r7, #4]
 80169d2:	f7ea fc99 	bl	8001308 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	2202      	movs	r2, #2
 80169da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	681a      	ldr	r2, [r3, #0]
 80169e2:	687b      	ldr	r3, [r7, #4]
 80169e4:	3304      	adds	r3, #4
 80169e6:	4619      	mov	r1, r3
 80169e8:	4610      	mov	r0, r2
 80169ea:	f000 fa37 	bl	8016e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	2201      	movs	r2, #1
 80169f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	2201      	movs	r2, #1
 80169fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80169fe:	687b      	ldr	r3, [r7, #4]
 8016a00:	2201      	movs	r2, #1
 8016a02:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	2201      	movs	r2, #1
 8016a0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	2201      	movs	r2, #1
 8016a12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	2201      	movs	r2, #1
 8016a1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8016a1e:	687b      	ldr	r3, [r7, #4]
 8016a20:	2201      	movs	r2, #1
 8016a22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016a26:	687b      	ldr	r3, [r7, #4]
 8016a28:	2201      	movs	r2, #1
 8016a2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016a2e:	687b      	ldr	r3, [r7, #4]
 8016a30:	2201      	movs	r2, #1
 8016a32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	2201      	movs	r2, #1
 8016a3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	2201      	movs	r2, #1
 8016a42:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016a46:	687b      	ldr	r3, [r7, #4]
 8016a48:	2201      	movs	r2, #1
 8016a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8016a4e:	2300      	movs	r3, #0
}
 8016a50:	4618      	mov	r0, r3
 8016a52:	3708      	adds	r7, #8
 8016a54:	46bd      	mov	sp, r7
 8016a56:	bd80      	pop	{r7, pc}

08016a58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8016a58:	b480      	push	{r7}
 8016a5a:	b085      	sub	sp, #20
 8016a5c:	af00      	add	r7, sp, #0
 8016a5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016a66:	b2db      	uxtb	r3, r3
 8016a68:	2b01      	cmp	r3, #1
 8016a6a:	d001      	beq.n	8016a70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8016a6c:	2301      	movs	r3, #1
 8016a6e:	e054      	b.n	8016b1a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	2202      	movs	r2, #2
 8016a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8016a78:	687b      	ldr	r3, [r7, #4]
 8016a7a:	681b      	ldr	r3, [r3, #0]
 8016a7c:	68da      	ldr	r2, [r3, #12]
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	681b      	ldr	r3, [r3, #0]
 8016a82:	f042 0201 	orr.w	r2, r2, #1
 8016a86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	681b      	ldr	r3, [r3, #0]
 8016a8c:	4a26      	ldr	r2, [pc, #152]	; (8016b28 <HAL_TIM_Base_Start_IT+0xd0>)
 8016a8e:	4293      	cmp	r3, r2
 8016a90:	d022      	beq.n	8016ad8 <HAL_TIM_Base_Start_IT+0x80>
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	681b      	ldr	r3, [r3, #0]
 8016a96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016a9a:	d01d      	beq.n	8016ad8 <HAL_TIM_Base_Start_IT+0x80>
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	681b      	ldr	r3, [r3, #0]
 8016aa0:	4a22      	ldr	r2, [pc, #136]	; (8016b2c <HAL_TIM_Base_Start_IT+0xd4>)
 8016aa2:	4293      	cmp	r3, r2
 8016aa4:	d018      	beq.n	8016ad8 <HAL_TIM_Base_Start_IT+0x80>
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	681b      	ldr	r3, [r3, #0]
 8016aaa:	4a21      	ldr	r2, [pc, #132]	; (8016b30 <HAL_TIM_Base_Start_IT+0xd8>)
 8016aac:	4293      	cmp	r3, r2
 8016aae:	d013      	beq.n	8016ad8 <HAL_TIM_Base_Start_IT+0x80>
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	681b      	ldr	r3, [r3, #0]
 8016ab4:	4a1f      	ldr	r2, [pc, #124]	; (8016b34 <HAL_TIM_Base_Start_IT+0xdc>)
 8016ab6:	4293      	cmp	r3, r2
 8016ab8:	d00e      	beq.n	8016ad8 <HAL_TIM_Base_Start_IT+0x80>
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	681b      	ldr	r3, [r3, #0]
 8016abe:	4a1e      	ldr	r2, [pc, #120]	; (8016b38 <HAL_TIM_Base_Start_IT+0xe0>)
 8016ac0:	4293      	cmp	r3, r2
 8016ac2:	d009      	beq.n	8016ad8 <HAL_TIM_Base_Start_IT+0x80>
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	681b      	ldr	r3, [r3, #0]
 8016ac8:	4a1c      	ldr	r2, [pc, #112]	; (8016b3c <HAL_TIM_Base_Start_IT+0xe4>)
 8016aca:	4293      	cmp	r3, r2
 8016acc:	d004      	beq.n	8016ad8 <HAL_TIM_Base_Start_IT+0x80>
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	681b      	ldr	r3, [r3, #0]
 8016ad2:	4a1b      	ldr	r2, [pc, #108]	; (8016b40 <HAL_TIM_Base_Start_IT+0xe8>)
 8016ad4:	4293      	cmp	r3, r2
 8016ad6:	d115      	bne.n	8016b04 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	681b      	ldr	r3, [r3, #0]
 8016adc:	689a      	ldr	r2, [r3, #8]
 8016ade:	4b19      	ldr	r3, [pc, #100]	; (8016b44 <HAL_TIM_Base_Start_IT+0xec>)
 8016ae0:	4013      	ands	r3, r2
 8016ae2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016ae4:	68fb      	ldr	r3, [r7, #12]
 8016ae6:	2b06      	cmp	r3, #6
 8016ae8:	d015      	beq.n	8016b16 <HAL_TIM_Base_Start_IT+0xbe>
 8016aea:	68fb      	ldr	r3, [r7, #12]
 8016aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016af0:	d011      	beq.n	8016b16 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8016af2:	687b      	ldr	r3, [r7, #4]
 8016af4:	681b      	ldr	r3, [r3, #0]
 8016af6:	681a      	ldr	r2, [r3, #0]
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	681b      	ldr	r3, [r3, #0]
 8016afc:	f042 0201 	orr.w	r2, r2, #1
 8016b00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016b02:	e008      	b.n	8016b16 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8016b04:	687b      	ldr	r3, [r7, #4]
 8016b06:	681b      	ldr	r3, [r3, #0]
 8016b08:	681a      	ldr	r2, [r3, #0]
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	681b      	ldr	r3, [r3, #0]
 8016b0e:	f042 0201 	orr.w	r2, r2, #1
 8016b12:	601a      	str	r2, [r3, #0]
 8016b14:	e000      	b.n	8016b18 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016b16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8016b18:	2300      	movs	r3, #0
}
 8016b1a:	4618      	mov	r0, r3
 8016b1c:	3714      	adds	r7, #20
 8016b1e:	46bd      	mov	sp, r7
 8016b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b24:	4770      	bx	lr
 8016b26:	bf00      	nop
 8016b28:	40010000 	.word	0x40010000
 8016b2c:	40000400 	.word	0x40000400
 8016b30:	40000800 	.word	0x40000800
 8016b34:	40000c00 	.word	0x40000c00
 8016b38:	40010400 	.word	0x40010400
 8016b3c:	40001800 	.word	0x40001800
 8016b40:	40014000 	.word	0x40014000
 8016b44:	00010007 	.word	0x00010007

08016b48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8016b48:	b580      	push	{r7, lr}
 8016b4a:	b082      	sub	sp, #8
 8016b4c:	af00      	add	r7, sp, #0
 8016b4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8016b50:	687b      	ldr	r3, [r7, #4]
 8016b52:	681b      	ldr	r3, [r3, #0]
 8016b54:	691b      	ldr	r3, [r3, #16]
 8016b56:	f003 0302 	and.w	r3, r3, #2
 8016b5a:	2b02      	cmp	r3, #2
 8016b5c:	d122      	bne.n	8016ba4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	681b      	ldr	r3, [r3, #0]
 8016b62:	68db      	ldr	r3, [r3, #12]
 8016b64:	f003 0302 	and.w	r3, r3, #2
 8016b68:	2b02      	cmp	r3, #2
 8016b6a:	d11b      	bne.n	8016ba4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	681b      	ldr	r3, [r3, #0]
 8016b70:	f06f 0202 	mvn.w	r2, #2
 8016b74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	2201      	movs	r2, #1
 8016b7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8016b7c:	687b      	ldr	r3, [r7, #4]
 8016b7e:	681b      	ldr	r3, [r3, #0]
 8016b80:	699b      	ldr	r3, [r3, #24]
 8016b82:	f003 0303 	and.w	r3, r3, #3
 8016b86:	2b00      	cmp	r3, #0
 8016b88:	d003      	beq.n	8016b92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8016b8a:	6878      	ldr	r0, [r7, #4]
 8016b8c:	f000 f947 	bl	8016e1e <HAL_TIM_IC_CaptureCallback>
 8016b90:	e005      	b.n	8016b9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8016b92:	6878      	ldr	r0, [r7, #4]
 8016b94:	f000 f939 	bl	8016e0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016b98:	6878      	ldr	r0, [r7, #4]
 8016b9a:	f000 f94a 	bl	8016e32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	2200      	movs	r2, #0
 8016ba2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8016ba4:	687b      	ldr	r3, [r7, #4]
 8016ba6:	681b      	ldr	r3, [r3, #0]
 8016ba8:	691b      	ldr	r3, [r3, #16]
 8016baa:	f003 0304 	and.w	r3, r3, #4
 8016bae:	2b04      	cmp	r3, #4
 8016bb0:	d122      	bne.n	8016bf8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8016bb2:	687b      	ldr	r3, [r7, #4]
 8016bb4:	681b      	ldr	r3, [r3, #0]
 8016bb6:	68db      	ldr	r3, [r3, #12]
 8016bb8:	f003 0304 	and.w	r3, r3, #4
 8016bbc:	2b04      	cmp	r3, #4
 8016bbe:	d11b      	bne.n	8016bf8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8016bc0:	687b      	ldr	r3, [r7, #4]
 8016bc2:	681b      	ldr	r3, [r3, #0]
 8016bc4:	f06f 0204 	mvn.w	r2, #4
 8016bc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	2202      	movs	r2, #2
 8016bce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	681b      	ldr	r3, [r3, #0]
 8016bd4:	699b      	ldr	r3, [r3, #24]
 8016bd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8016bda:	2b00      	cmp	r3, #0
 8016bdc:	d003      	beq.n	8016be6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016bde:	6878      	ldr	r0, [r7, #4]
 8016be0:	f000 f91d 	bl	8016e1e <HAL_TIM_IC_CaptureCallback>
 8016be4:	e005      	b.n	8016bf2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016be6:	6878      	ldr	r0, [r7, #4]
 8016be8:	f000 f90f 	bl	8016e0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016bec:	6878      	ldr	r0, [r7, #4]
 8016bee:	f000 f920 	bl	8016e32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016bf2:	687b      	ldr	r3, [r7, #4]
 8016bf4:	2200      	movs	r2, #0
 8016bf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	681b      	ldr	r3, [r3, #0]
 8016bfc:	691b      	ldr	r3, [r3, #16]
 8016bfe:	f003 0308 	and.w	r3, r3, #8
 8016c02:	2b08      	cmp	r3, #8
 8016c04:	d122      	bne.n	8016c4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	681b      	ldr	r3, [r3, #0]
 8016c0a:	68db      	ldr	r3, [r3, #12]
 8016c0c:	f003 0308 	and.w	r3, r3, #8
 8016c10:	2b08      	cmp	r3, #8
 8016c12:	d11b      	bne.n	8016c4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	681b      	ldr	r3, [r3, #0]
 8016c18:	f06f 0208 	mvn.w	r2, #8
 8016c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	2204      	movs	r2, #4
 8016c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	681b      	ldr	r3, [r3, #0]
 8016c28:	69db      	ldr	r3, [r3, #28]
 8016c2a:	f003 0303 	and.w	r3, r3, #3
 8016c2e:	2b00      	cmp	r3, #0
 8016c30:	d003      	beq.n	8016c3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016c32:	6878      	ldr	r0, [r7, #4]
 8016c34:	f000 f8f3 	bl	8016e1e <HAL_TIM_IC_CaptureCallback>
 8016c38:	e005      	b.n	8016c46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016c3a:	6878      	ldr	r0, [r7, #4]
 8016c3c:	f000 f8e5 	bl	8016e0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016c40:	6878      	ldr	r0, [r7, #4]
 8016c42:	f000 f8f6 	bl	8016e32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	2200      	movs	r2, #0
 8016c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	681b      	ldr	r3, [r3, #0]
 8016c50:	691b      	ldr	r3, [r3, #16]
 8016c52:	f003 0310 	and.w	r3, r3, #16
 8016c56:	2b10      	cmp	r3, #16
 8016c58:	d122      	bne.n	8016ca0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	681b      	ldr	r3, [r3, #0]
 8016c5e:	68db      	ldr	r3, [r3, #12]
 8016c60:	f003 0310 	and.w	r3, r3, #16
 8016c64:	2b10      	cmp	r3, #16
 8016c66:	d11b      	bne.n	8016ca0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	681b      	ldr	r3, [r3, #0]
 8016c6c:	f06f 0210 	mvn.w	r2, #16
 8016c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	2208      	movs	r2, #8
 8016c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	681b      	ldr	r3, [r3, #0]
 8016c7c:	69db      	ldr	r3, [r3, #28]
 8016c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8016c82:	2b00      	cmp	r3, #0
 8016c84:	d003      	beq.n	8016c8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016c86:	6878      	ldr	r0, [r7, #4]
 8016c88:	f000 f8c9 	bl	8016e1e <HAL_TIM_IC_CaptureCallback>
 8016c8c:	e005      	b.n	8016c9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016c8e:	6878      	ldr	r0, [r7, #4]
 8016c90:	f000 f8bb 	bl	8016e0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016c94:	6878      	ldr	r0, [r7, #4]
 8016c96:	f000 f8cc 	bl	8016e32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	2200      	movs	r2, #0
 8016c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	681b      	ldr	r3, [r3, #0]
 8016ca4:	691b      	ldr	r3, [r3, #16]
 8016ca6:	f003 0301 	and.w	r3, r3, #1
 8016caa:	2b01      	cmp	r3, #1
 8016cac:	d10e      	bne.n	8016ccc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	681b      	ldr	r3, [r3, #0]
 8016cb2:	68db      	ldr	r3, [r3, #12]
 8016cb4:	f003 0301 	and.w	r3, r3, #1
 8016cb8:	2b01      	cmp	r3, #1
 8016cba:	d107      	bne.n	8016ccc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	681b      	ldr	r3, [r3, #0]
 8016cc0:	f06f 0201 	mvn.w	r2, #1
 8016cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8016cc6:	6878      	ldr	r0, [r7, #4]
 8016cc8:	f7e9 fff6 	bl	8000cb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	681b      	ldr	r3, [r3, #0]
 8016cd0:	691b      	ldr	r3, [r3, #16]
 8016cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016cd6:	2b80      	cmp	r3, #128	; 0x80
 8016cd8:	d10e      	bne.n	8016cf8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	681b      	ldr	r3, [r3, #0]
 8016cde:	68db      	ldr	r3, [r3, #12]
 8016ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016ce4:	2b80      	cmp	r3, #128	; 0x80
 8016ce6:	d107      	bne.n	8016cf8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	681b      	ldr	r3, [r3, #0]
 8016cec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8016cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8016cf2:	6878      	ldr	r0, [r7, #4]
 8016cf4:	f000 fb4e 	bl	8017394 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	681b      	ldr	r3, [r3, #0]
 8016cfc:	691b      	ldr	r3, [r3, #16]
 8016cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016d02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016d06:	d10e      	bne.n	8016d26 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	681b      	ldr	r3, [r3, #0]
 8016d0c:	68db      	ldr	r3, [r3, #12]
 8016d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016d12:	2b80      	cmp	r3, #128	; 0x80
 8016d14:	d107      	bne.n	8016d26 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8016d16:	687b      	ldr	r3, [r7, #4]
 8016d18:	681b      	ldr	r3, [r3, #0]
 8016d1a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8016d1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8016d20:	6878      	ldr	r0, [r7, #4]
 8016d22:	f000 fb41 	bl	80173a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8016d26:	687b      	ldr	r3, [r7, #4]
 8016d28:	681b      	ldr	r3, [r3, #0]
 8016d2a:	691b      	ldr	r3, [r3, #16]
 8016d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016d30:	2b40      	cmp	r3, #64	; 0x40
 8016d32:	d10e      	bne.n	8016d52 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	681b      	ldr	r3, [r3, #0]
 8016d38:	68db      	ldr	r3, [r3, #12]
 8016d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016d3e:	2b40      	cmp	r3, #64	; 0x40
 8016d40:	d107      	bne.n	8016d52 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8016d42:	687b      	ldr	r3, [r7, #4]
 8016d44:	681b      	ldr	r3, [r3, #0]
 8016d46:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8016d4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8016d4c:	6878      	ldr	r0, [r7, #4]
 8016d4e:	f000 f87a 	bl	8016e46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	681b      	ldr	r3, [r3, #0]
 8016d56:	691b      	ldr	r3, [r3, #16]
 8016d58:	f003 0320 	and.w	r3, r3, #32
 8016d5c:	2b20      	cmp	r3, #32
 8016d5e:	d10e      	bne.n	8016d7e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	681b      	ldr	r3, [r3, #0]
 8016d64:	68db      	ldr	r3, [r3, #12]
 8016d66:	f003 0320 	and.w	r3, r3, #32
 8016d6a:	2b20      	cmp	r3, #32
 8016d6c:	d107      	bne.n	8016d7e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	681b      	ldr	r3, [r3, #0]
 8016d72:	f06f 0220 	mvn.w	r2, #32
 8016d76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8016d78:	6878      	ldr	r0, [r7, #4]
 8016d7a:	f000 fb01 	bl	8017380 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8016d7e:	bf00      	nop
 8016d80:	3708      	adds	r7, #8
 8016d82:	46bd      	mov	sp, r7
 8016d84:	bd80      	pop	{r7, pc}

08016d86 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8016d86:	b580      	push	{r7, lr}
 8016d88:	b082      	sub	sp, #8
 8016d8a:	af00      	add	r7, sp, #0
 8016d8c:	6078      	str	r0, [r7, #4]
 8016d8e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016d96:	2b01      	cmp	r3, #1
 8016d98:	d101      	bne.n	8016d9e <HAL_TIM_SlaveConfigSynchro+0x18>
 8016d9a:	2302      	movs	r3, #2
 8016d9c:	e031      	b.n	8016e02 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	2201      	movs	r2, #1
 8016da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	2202      	movs	r2, #2
 8016daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8016dae:	6839      	ldr	r1, [r7, #0]
 8016db0:	6878      	ldr	r0, [r7, #4]
 8016db2:	f000 f8ed 	bl	8016f90 <TIM_SlaveTimer_SetConfig>
 8016db6:	4603      	mov	r3, r0
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	d009      	beq.n	8016dd0 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	2201      	movs	r2, #1
 8016dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	2200      	movs	r2, #0
 8016dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8016dcc:	2301      	movs	r3, #1
 8016dce:	e018      	b.n	8016e02 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8016dd0:	687b      	ldr	r3, [r7, #4]
 8016dd2:	681b      	ldr	r3, [r3, #0]
 8016dd4:	68da      	ldr	r2, [r3, #12]
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	681b      	ldr	r3, [r3, #0]
 8016dda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8016dde:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	681b      	ldr	r3, [r3, #0]
 8016de4:	68da      	ldr	r2, [r3, #12]
 8016de6:	687b      	ldr	r3, [r7, #4]
 8016de8:	681b      	ldr	r3, [r3, #0]
 8016dea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8016dee:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	2201      	movs	r2, #1
 8016df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8016df8:	687b      	ldr	r3, [r7, #4]
 8016dfa:	2200      	movs	r2, #0
 8016dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8016e00:	2300      	movs	r3, #0
}
 8016e02:	4618      	mov	r0, r3
 8016e04:	3708      	adds	r7, #8
 8016e06:	46bd      	mov	sp, r7
 8016e08:	bd80      	pop	{r7, pc}

08016e0a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8016e0a:	b480      	push	{r7}
 8016e0c:	b083      	sub	sp, #12
 8016e0e:	af00      	add	r7, sp, #0
 8016e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8016e12:	bf00      	nop
 8016e14:	370c      	adds	r7, #12
 8016e16:	46bd      	mov	sp, r7
 8016e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e1c:	4770      	bx	lr

08016e1e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8016e1e:	b480      	push	{r7}
 8016e20:	b083      	sub	sp, #12
 8016e22:	af00      	add	r7, sp, #0
 8016e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8016e26:	bf00      	nop
 8016e28:	370c      	adds	r7, #12
 8016e2a:	46bd      	mov	sp, r7
 8016e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e30:	4770      	bx	lr

08016e32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8016e32:	b480      	push	{r7}
 8016e34:	b083      	sub	sp, #12
 8016e36:	af00      	add	r7, sp, #0
 8016e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8016e3a:	bf00      	nop
 8016e3c:	370c      	adds	r7, #12
 8016e3e:	46bd      	mov	sp, r7
 8016e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e44:	4770      	bx	lr

08016e46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8016e46:	b480      	push	{r7}
 8016e48:	b083      	sub	sp, #12
 8016e4a:	af00      	add	r7, sp, #0
 8016e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8016e4e:	bf00      	nop
 8016e50:	370c      	adds	r7, #12
 8016e52:	46bd      	mov	sp, r7
 8016e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e58:	4770      	bx	lr
	...

08016e5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8016e5c:	b480      	push	{r7}
 8016e5e:	b085      	sub	sp, #20
 8016e60:	af00      	add	r7, sp, #0
 8016e62:	6078      	str	r0, [r7, #4]
 8016e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8016e66:	687b      	ldr	r3, [r7, #4]
 8016e68:	681b      	ldr	r3, [r3, #0]
 8016e6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8016e6c:	687b      	ldr	r3, [r7, #4]
 8016e6e:	4a40      	ldr	r2, [pc, #256]	; (8016f70 <TIM_Base_SetConfig+0x114>)
 8016e70:	4293      	cmp	r3, r2
 8016e72:	d013      	beq.n	8016e9c <TIM_Base_SetConfig+0x40>
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016e7a:	d00f      	beq.n	8016e9c <TIM_Base_SetConfig+0x40>
 8016e7c:	687b      	ldr	r3, [r7, #4]
 8016e7e:	4a3d      	ldr	r2, [pc, #244]	; (8016f74 <TIM_Base_SetConfig+0x118>)
 8016e80:	4293      	cmp	r3, r2
 8016e82:	d00b      	beq.n	8016e9c <TIM_Base_SetConfig+0x40>
 8016e84:	687b      	ldr	r3, [r7, #4]
 8016e86:	4a3c      	ldr	r2, [pc, #240]	; (8016f78 <TIM_Base_SetConfig+0x11c>)
 8016e88:	4293      	cmp	r3, r2
 8016e8a:	d007      	beq.n	8016e9c <TIM_Base_SetConfig+0x40>
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	4a3b      	ldr	r2, [pc, #236]	; (8016f7c <TIM_Base_SetConfig+0x120>)
 8016e90:	4293      	cmp	r3, r2
 8016e92:	d003      	beq.n	8016e9c <TIM_Base_SetConfig+0x40>
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	4a3a      	ldr	r2, [pc, #232]	; (8016f80 <TIM_Base_SetConfig+0x124>)
 8016e98:	4293      	cmp	r3, r2
 8016e9a:	d108      	bne.n	8016eae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8016e9c:	68fb      	ldr	r3, [r7, #12]
 8016e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8016ea2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8016ea4:	683b      	ldr	r3, [r7, #0]
 8016ea6:	685b      	ldr	r3, [r3, #4]
 8016ea8:	68fa      	ldr	r2, [r7, #12]
 8016eaa:	4313      	orrs	r3, r2
 8016eac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	4a2f      	ldr	r2, [pc, #188]	; (8016f70 <TIM_Base_SetConfig+0x114>)
 8016eb2:	4293      	cmp	r3, r2
 8016eb4:	d01f      	beq.n	8016ef6 <TIM_Base_SetConfig+0x9a>
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016ebc:	d01b      	beq.n	8016ef6 <TIM_Base_SetConfig+0x9a>
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	4a2c      	ldr	r2, [pc, #176]	; (8016f74 <TIM_Base_SetConfig+0x118>)
 8016ec2:	4293      	cmp	r3, r2
 8016ec4:	d017      	beq.n	8016ef6 <TIM_Base_SetConfig+0x9a>
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	4a2b      	ldr	r2, [pc, #172]	; (8016f78 <TIM_Base_SetConfig+0x11c>)
 8016eca:	4293      	cmp	r3, r2
 8016ecc:	d013      	beq.n	8016ef6 <TIM_Base_SetConfig+0x9a>
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	4a2a      	ldr	r2, [pc, #168]	; (8016f7c <TIM_Base_SetConfig+0x120>)
 8016ed2:	4293      	cmp	r3, r2
 8016ed4:	d00f      	beq.n	8016ef6 <TIM_Base_SetConfig+0x9a>
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	4a29      	ldr	r2, [pc, #164]	; (8016f80 <TIM_Base_SetConfig+0x124>)
 8016eda:	4293      	cmp	r3, r2
 8016edc:	d00b      	beq.n	8016ef6 <TIM_Base_SetConfig+0x9a>
 8016ede:	687b      	ldr	r3, [r7, #4]
 8016ee0:	4a28      	ldr	r2, [pc, #160]	; (8016f84 <TIM_Base_SetConfig+0x128>)
 8016ee2:	4293      	cmp	r3, r2
 8016ee4:	d007      	beq.n	8016ef6 <TIM_Base_SetConfig+0x9a>
 8016ee6:	687b      	ldr	r3, [r7, #4]
 8016ee8:	4a27      	ldr	r2, [pc, #156]	; (8016f88 <TIM_Base_SetConfig+0x12c>)
 8016eea:	4293      	cmp	r3, r2
 8016eec:	d003      	beq.n	8016ef6 <TIM_Base_SetConfig+0x9a>
 8016eee:	687b      	ldr	r3, [r7, #4]
 8016ef0:	4a26      	ldr	r2, [pc, #152]	; (8016f8c <TIM_Base_SetConfig+0x130>)
 8016ef2:	4293      	cmp	r3, r2
 8016ef4:	d108      	bne.n	8016f08 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8016ef6:	68fb      	ldr	r3, [r7, #12]
 8016ef8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8016efc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8016efe:	683b      	ldr	r3, [r7, #0]
 8016f00:	68db      	ldr	r3, [r3, #12]
 8016f02:	68fa      	ldr	r2, [r7, #12]
 8016f04:	4313      	orrs	r3, r2
 8016f06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8016f08:	68fb      	ldr	r3, [r7, #12]
 8016f0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8016f0e:	683b      	ldr	r3, [r7, #0]
 8016f10:	695b      	ldr	r3, [r3, #20]
 8016f12:	4313      	orrs	r3, r2
 8016f14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	68fa      	ldr	r2, [r7, #12]
 8016f1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8016f1c:	683b      	ldr	r3, [r7, #0]
 8016f1e:	689a      	ldr	r2, [r3, #8]
 8016f20:	687b      	ldr	r3, [r7, #4]
 8016f22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8016f24:	683b      	ldr	r3, [r7, #0]
 8016f26:	681a      	ldr	r2, [r3, #0]
 8016f28:	687b      	ldr	r3, [r7, #4]
 8016f2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	4a10      	ldr	r2, [pc, #64]	; (8016f70 <TIM_Base_SetConfig+0x114>)
 8016f30:	4293      	cmp	r3, r2
 8016f32:	d00f      	beq.n	8016f54 <TIM_Base_SetConfig+0xf8>
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	4a12      	ldr	r2, [pc, #72]	; (8016f80 <TIM_Base_SetConfig+0x124>)
 8016f38:	4293      	cmp	r3, r2
 8016f3a:	d00b      	beq.n	8016f54 <TIM_Base_SetConfig+0xf8>
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	4a11      	ldr	r2, [pc, #68]	; (8016f84 <TIM_Base_SetConfig+0x128>)
 8016f40:	4293      	cmp	r3, r2
 8016f42:	d007      	beq.n	8016f54 <TIM_Base_SetConfig+0xf8>
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	4a10      	ldr	r2, [pc, #64]	; (8016f88 <TIM_Base_SetConfig+0x12c>)
 8016f48:	4293      	cmp	r3, r2
 8016f4a:	d003      	beq.n	8016f54 <TIM_Base_SetConfig+0xf8>
 8016f4c:	687b      	ldr	r3, [r7, #4]
 8016f4e:	4a0f      	ldr	r2, [pc, #60]	; (8016f8c <TIM_Base_SetConfig+0x130>)
 8016f50:	4293      	cmp	r3, r2
 8016f52:	d103      	bne.n	8016f5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8016f54:	683b      	ldr	r3, [r7, #0]
 8016f56:	691a      	ldr	r2, [r3, #16]
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	2201      	movs	r2, #1
 8016f60:	615a      	str	r2, [r3, #20]
}
 8016f62:	bf00      	nop
 8016f64:	3714      	adds	r7, #20
 8016f66:	46bd      	mov	sp, r7
 8016f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f6c:	4770      	bx	lr
 8016f6e:	bf00      	nop
 8016f70:	40010000 	.word	0x40010000
 8016f74:	40000400 	.word	0x40000400
 8016f78:	40000800 	.word	0x40000800
 8016f7c:	40000c00 	.word	0x40000c00
 8016f80:	40010400 	.word	0x40010400
 8016f84:	40014000 	.word	0x40014000
 8016f88:	40014400 	.word	0x40014400
 8016f8c:	40014800 	.word	0x40014800

08016f90 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8016f90:	b580      	push	{r7, lr}
 8016f92:	b086      	sub	sp, #24
 8016f94:	af00      	add	r7, sp, #0
 8016f96:	6078      	str	r0, [r7, #4]
 8016f98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8016f9a:	2300      	movs	r3, #0
 8016f9c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8016f9e:	687b      	ldr	r3, [r7, #4]
 8016fa0:	681b      	ldr	r3, [r3, #0]
 8016fa2:	689b      	ldr	r3, [r3, #8]
 8016fa4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8016fa6:	693a      	ldr	r2, [r7, #16]
 8016fa8:	4b65      	ldr	r3, [pc, #404]	; (8017140 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8016faa:	4013      	ands	r3, r2
 8016fac:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8016fae:	683b      	ldr	r3, [r7, #0]
 8016fb0:	685b      	ldr	r3, [r3, #4]
 8016fb2:	693a      	ldr	r2, [r7, #16]
 8016fb4:	4313      	orrs	r3, r2
 8016fb6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8016fb8:	693a      	ldr	r2, [r7, #16]
 8016fba:	4b62      	ldr	r3, [pc, #392]	; (8017144 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8016fbc:	4013      	ands	r3, r2
 8016fbe:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8016fc0:	683b      	ldr	r3, [r7, #0]
 8016fc2:	681b      	ldr	r3, [r3, #0]
 8016fc4:	693a      	ldr	r2, [r7, #16]
 8016fc6:	4313      	orrs	r3, r2
 8016fc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	681b      	ldr	r3, [r3, #0]
 8016fce:	693a      	ldr	r2, [r7, #16]
 8016fd0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8016fd2:	683b      	ldr	r3, [r7, #0]
 8016fd4:	685b      	ldr	r3, [r3, #4]
 8016fd6:	4a5c      	ldr	r2, [pc, #368]	; (8017148 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8016fd8:	4293      	cmp	r3, r2
 8016fda:	f000 80ab 	beq.w	8017134 <TIM_SlaveTimer_SetConfig+0x1a4>
 8016fde:	4a5a      	ldr	r2, [pc, #360]	; (8017148 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8016fe0:	4293      	cmp	r3, r2
 8016fe2:	f200 80a4 	bhi.w	801712e <TIM_SlaveTimer_SetConfig+0x19e>
 8016fe6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8016fea:	f000 80a3 	beq.w	8017134 <TIM_SlaveTimer_SetConfig+0x1a4>
 8016fee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8016ff2:	f200 809c 	bhi.w	801712e <TIM_SlaveTimer_SetConfig+0x19e>
 8016ff6:	4a55      	ldr	r2, [pc, #340]	; (801714c <TIM_SlaveTimer_SetConfig+0x1bc>)
 8016ff8:	4293      	cmp	r3, r2
 8016ffa:	f000 809b 	beq.w	8017134 <TIM_SlaveTimer_SetConfig+0x1a4>
 8016ffe:	4a53      	ldr	r2, [pc, #332]	; (801714c <TIM_SlaveTimer_SetConfig+0x1bc>)
 8017000:	4293      	cmp	r3, r2
 8017002:	f200 8094 	bhi.w	801712e <TIM_SlaveTimer_SetConfig+0x19e>
 8017006:	4a52      	ldr	r2, [pc, #328]	; (8017150 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8017008:	4293      	cmp	r3, r2
 801700a:	f000 8093 	beq.w	8017134 <TIM_SlaveTimer_SetConfig+0x1a4>
 801700e:	4a50      	ldr	r2, [pc, #320]	; (8017150 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8017010:	4293      	cmp	r3, r2
 8017012:	f200 808c 	bhi.w	801712e <TIM_SlaveTimer_SetConfig+0x19e>
 8017016:	4a4f      	ldr	r2, [pc, #316]	; (8017154 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8017018:	4293      	cmp	r3, r2
 801701a:	f000 808b 	beq.w	8017134 <TIM_SlaveTimer_SetConfig+0x1a4>
 801701e:	4a4d      	ldr	r2, [pc, #308]	; (8017154 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8017020:	4293      	cmp	r3, r2
 8017022:	f200 8084 	bhi.w	801712e <TIM_SlaveTimer_SetConfig+0x19e>
 8017026:	4a4c      	ldr	r2, [pc, #304]	; (8017158 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8017028:	4293      	cmp	r3, r2
 801702a:	f000 8083 	beq.w	8017134 <TIM_SlaveTimer_SetConfig+0x1a4>
 801702e:	4a4a      	ldr	r2, [pc, #296]	; (8017158 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8017030:	4293      	cmp	r3, r2
 8017032:	d87c      	bhi.n	801712e <TIM_SlaveTimer_SetConfig+0x19e>
 8017034:	4a49      	ldr	r2, [pc, #292]	; (801715c <TIM_SlaveTimer_SetConfig+0x1cc>)
 8017036:	4293      	cmp	r3, r2
 8017038:	d07c      	beq.n	8017134 <TIM_SlaveTimer_SetConfig+0x1a4>
 801703a:	4a48      	ldr	r2, [pc, #288]	; (801715c <TIM_SlaveTimer_SetConfig+0x1cc>)
 801703c:	4293      	cmp	r3, r2
 801703e:	d876      	bhi.n	801712e <TIM_SlaveTimer_SetConfig+0x19e>
 8017040:	4a47      	ldr	r2, [pc, #284]	; (8017160 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8017042:	4293      	cmp	r3, r2
 8017044:	d076      	beq.n	8017134 <TIM_SlaveTimer_SetConfig+0x1a4>
 8017046:	4a46      	ldr	r2, [pc, #280]	; (8017160 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8017048:	4293      	cmp	r3, r2
 801704a:	d870      	bhi.n	801712e <TIM_SlaveTimer_SetConfig+0x19e>
 801704c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8017050:	d070      	beq.n	8017134 <TIM_SlaveTimer_SetConfig+0x1a4>
 8017052:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8017056:	d86a      	bhi.n	801712e <TIM_SlaveTimer_SetConfig+0x19e>
 8017058:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801705c:	d06a      	beq.n	8017134 <TIM_SlaveTimer_SetConfig+0x1a4>
 801705e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8017062:	d864      	bhi.n	801712e <TIM_SlaveTimer_SetConfig+0x19e>
 8017064:	2b70      	cmp	r3, #112	; 0x70
 8017066:	d01a      	beq.n	801709e <TIM_SlaveTimer_SetConfig+0x10e>
 8017068:	2b70      	cmp	r3, #112	; 0x70
 801706a:	d860      	bhi.n	801712e <TIM_SlaveTimer_SetConfig+0x19e>
 801706c:	2b60      	cmp	r3, #96	; 0x60
 801706e:	d054      	beq.n	801711a <TIM_SlaveTimer_SetConfig+0x18a>
 8017070:	2b60      	cmp	r3, #96	; 0x60
 8017072:	d85c      	bhi.n	801712e <TIM_SlaveTimer_SetConfig+0x19e>
 8017074:	2b50      	cmp	r3, #80	; 0x50
 8017076:	d046      	beq.n	8017106 <TIM_SlaveTimer_SetConfig+0x176>
 8017078:	2b50      	cmp	r3, #80	; 0x50
 801707a:	d858      	bhi.n	801712e <TIM_SlaveTimer_SetConfig+0x19e>
 801707c:	2b40      	cmp	r3, #64	; 0x40
 801707e:	d019      	beq.n	80170b4 <TIM_SlaveTimer_SetConfig+0x124>
 8017080:	2b40      	cmp	r3, #64	; 0x40
 8017082:	d854      	bhi.n	801712e <TIM_SlaveTimer_SetConfig+0x19e>
 8017084:	2b30      	cmp	r3, #48	; 0x30
 8017086:	d055      	beq.n	8017134 <TIM_SlaveTimer_SetConfig+0x1a4>
 8017088:	2b30      	cmp	r3, #48	; 0x30
 801708a:	d850      	bhi.n	801712e <TIM_SlaveTimer_SetConfig+0x19e>
 801708c:	2b20      	cmp	r3, #32
 801708e:	d051      	beq.n	8017134 <TIM_SlaveTimer_SetConfig+0x1a4>
 8017090:	2b20      	cmp	r3, #32
 8017092:	d84c      	bhi.n	801712e <TIM_SlaveTimer_SetConfig+0x19e>
 8017094:	2b00      	cmp	r3, #0
 8017096:	d04d      	beq.n	8017134 <TIM_SlaveTimer_SetConfig+0x1a4>
 8017098:	2b10      	cmp	r3, #16
 801709a:	d04b      	beq.n	8017134 <TIM_SlaveTimer_SetConfig+0x1a4>
 801709c:	e047      	b.n	801712e <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 801709e:	687b      	ldr	r3, [r7, #4]
 80170a0:	6818      	ldr	r0, [r3, #0]
 80170a2:	683b      	ldr	r3, [r7, #0]
 80170a4:	68d9      	ldr	r1, [r3, #12]
 80170a6:	683b      	ldr	r3, [r7, #0]
 80170a8:	689a      	ldr	r2, [r3, #8]
 80170aa:	683b      	ldr	r3, [r7, #0]
 80170ac:	691b      	ldr	r3, [r3, #16]
 80170ae:	f000 f8b8 	bl	8017222 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80170b2:	e040      	b.n	8017136 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80170b4:	683b      	ldr	r3, [r7, #0]
 80170b6:	681b      	ldr	r3, [r3, #0]
 80170b8:	2b05      	cmp	r3, #5
 80170ba:	d101      	bne.n	80170c0 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 80170bc:	2301      	movs	r3, #1
 80170be:	e03b      	b.n	8017138 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	681b      	ldr	r3, [r3, #0]
 80170c4:	6a1b      	ldr	r3, [r3, #32]
 80170c6:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	681b      	ldr	r3, [r3, #0]
 80170cc:	6a1a      	ldr	r2, [r3, #32]
 80170ce:	687b      	ldr	r3, [r7, #4]
 80170d0:	681b      	ldr	r3, [r3, #0]
 80170d2:	f022 0201 	bic.w	r2, r2, #1
 80170d6:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80170d8:	687b      	ldr	r3, [r7, #4]
 80170da:	681b      	ldr	r3, [r3, #0]
 80170dc:	699b      	ldr	r3, [r3, #24]
 80170de:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80170e0:	68bb      	ldr	r3, [r7, #8]
 80170e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80170e6:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80170e8:	683b      	ldr	r3, [r7, #0]
 80170ea:	691b      	ldr	r3, [r3, #16]
 80170ec:	011b      	lsls	r3, r3, #4
 80170ee:	68ba      	ldr	r2, [r7, #8]
 80170f0:	4313      	orrs	r3, r2
 80170f2:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	681b      	ldr	r3, [r3, #0]
 80170f8:	68ba      	ldr	r2, [r7, #8]
 80170fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80170fc:	687b      	ldr	r3, [r7, #4]
 80170fe:	681b      	ldr	r3, [r3, #0]
 8017100:	68fa      	ldr	r2, [r7, #12]
 8017102:	621a      	str	r2, [r3, #32]
      break;
 8017104:	e017      	b.n	8017136 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8017106:	687b      	ldr	r3, [r7, #4]
 8017108:	6818      	ldr	r0, [r3, #0]
 801710a:	683b      	ldr	r3, [r7, #0]
 801710c:	6899      	ldr	r1, [r3, #8]
 801710e:	683b      	ldr	r3, [r7, #0]
 8017110:	691b      	ldr	r3, [r3, #16]
 8017112:	461a      	mov	r2, r3
 8017114:	f000 f826 	bl	8017164 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8017118:	e00d      	b.n	8017136 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 801711a:	687b      	ldr	r3, [r7, #4]
 801711c:	6818      	ldr	r0, [r3, #0]
 801711e:	683b      	ldr	r3, [r7, #0]
 8017120:	6899      	ldr	r1, [r3, #8]
 8017122:	683b      	ldr	r3, [r7, #0]
 8017124:	691b      	ldr	r3, [r3, #16]
 8017126:	461a      	mov	r2, r3
 8017128:	f000 f84b 	bl	80171c2 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 801712c:	e003      	b.n	8017136 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 801712e:	2301      	movs	r3, #1
 8017130:	75fb      	strb	r3, [r7, #23]
      break;
 8017132:	e000      	b.n	8017136 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 8017134:	bf00      	nop
  }

  return status;
 8017136:	7dfb      	ldrb	r3, [r7, #23]
}
 8017138:	4618      	mov	r0, r3
 801713a:	3718      	adds	r7, #24
 801713c:	46bd      	mov	sp, r7
 801713e:	bd80      	pop	{r7, pc}
 8017140:	ffcfff8f 	.word	0xffcfff8f
 8017144:	fffefff8 	.word	0xfffefff8
 8017148:	00200010 	.word	0x00200010
 801714c:	00100070 	.word	0x00100070
 8017150:	00100060 	.word	0x00100060
 8017154:	00100050 	.word	0x00100050
 8017158:	00100040 	.word	0x00100040
 801715c:	00100030 	.word	0x00100030
 8017160:	00100020 	.word	0x00100020

08017164 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8017164:	b480      	push	{r7}
 8017166:	b087      	sub	sp, #28
 8017168:	af00      	add	r7, sp, #0
 801716a:	60f8      	str	r0, [r7, #12]
 801716c:	60b9      	str	r1, [r7, #8]
 801716e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8017170:	68fb      	ldr	r3, [r7, #12]
 8017172:	6a1b      	ldr	r3, [r3, #32]
 8017174:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8017176:	68fb      	ldr	r3, [r7, #12]
 8017178:	6a1b      	ldr	r3, [r3, #32]
 801717a:	f023 0201 	bic.w	r2, r3, #1
 801717e:	68fb      	ldr	r3, [r7, #12]
 8017180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8017182:	68fb      	ldr	r3, [r7, #12]
 8017184:	699b      	ldr	r3, [r3, #24]
 8017186:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8017188:	693b      	ldr	r3, [r7, #16]
 801718a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801718e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	011b      	lsls	r3, r3, #4
 8017194:	693a      	ldr	r2, [r7, #16]
 8017196:	4313      	orrs	r3, r2
 8017198:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801719a:	697b      	ldr	r3, [r7, #20]
 801719c:	f023 030a 	bic.w	r3, r3, #10
 80171a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80171a2:	697a      	ldr	r2, [r7, #20]
 80171a4:	68bb      	ldr	r3, [r7, #8]
 80171a6:	4313      	orrs	r3, r2
 80171a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80171aa:	68fb      	ldr	r3, [r7, #12]
 80171ac:	693a      	ldr	r2, [r7, #16]
 80171ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80171b0:	68fb      	ldr	r3, [r7, #12]
 80171b2:	697a      	ldr	r2, [r7, #20]
 80171b4:	621a      	str	r2, [r3, #32]
}
 80171b6:	bf00      	nop
 80171b8:	371c      	adds	r7, #28
 80171ba:	46bd      	mov	sp, r7
 80171bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171c0:	4770      	bx	lr

080171c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80171c2:	b480      	push	{r7}
 80171c4:	b087      	sub	sp, #28
 80171c6:	af00      	add	r7, sp, #0
 80171c8:	60f8      	str	r0, [r7, #12]
 80171ca:	60b9      	str	r1, [r7, #8]
 80171cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80171ce:	68fb      	ldr	r3, [r7, #12]
 80171d0:	6a1b      	ldr	r3, [r3, #32]
 80171d2:	f023 0210 	bic.w	r2, r3, #16
 80171d6:	68fb      	ldr	r3, [r7, #12]
 80171d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80171da:	68fb      	ldr	r3, [r7, #12]
 80171dc:	699b      	ldr	r3, [r3, #24]
 80171de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80171e0:	68fb      	ldr	r3, [r7, #12]
 80171e2:	6a1b      	ldr	r3, [r3, #32]
 80171e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80171e6:	697b      	ldr	r3, [r7, #20]
 80171e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80171ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	031b      	lsls	r3, r3, #12
 80171f2:	697a      	ldr	r2, [r7, #20]
 80171f4:	4313      	orrs	r3, r2
 80171f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80171f8:	693b      	ldr	r3, [r7, #16]
 80171fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80171fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8017200:	68bb      	ldr	r3, [r7, #8]
 8017202:	011b      	lsls	r3, r3, #4
 8017204:	693a      	ldr	r2, [r7, #16]
 8017206:	4313      	orrs	r3, r2
 8017208:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801720a:	68fb      	ldr	r3, [r7, #12]
 801720c:	697a      	ldr	r2, [r7, #20]
 801720e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8017210:	68fb      	ldr	r3, [r7, #12]
 8017212:	693a      	ldr	r2, [r7, #16]
 8017214:	621a      	str	r2, [r3, #32]
}
 8017216:	bf00      	nop
 8017218:	371c      	adds	r7, #28
 801721a:	46bd      	mov	sp, r7
 801721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017220:	4770      	bx	lr

08017222 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8017222:	b480      	push	{r7}
 8017224:	b087      	sub	sp, #28
 8017226:	af00      	add	r7, sp, #0
 8017228:	60f8      	str	r0, [r7, #12]
 801722a:	60b9      	str	r1, [r7, #8]
 801722c:	607a      	str	r2, [r7, #4]
 801722e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8017230:	68fb      	ldr	r3, [r7, #12]
 8017232:	689b      	ldr	r3, [r3, #8]
 8017234:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8017236:	697b      	ldr	r3, [r7, #20]
 8017238:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801723c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801723e:	683b      	ldr	r3, [r7, #0]
 8017240:	021a      	lsls	r2, r3, #8
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	431a      	orrs	r2, r3
 8017246:	68bb      	ldr	r3, [r7, #8]
 8017248:	4313      	orrs	r3, r2
 801724a:	697a      	ldr	r2, [r7, #20]
 801724c:	4313      	orrs	r3, r2
 801724e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8017250:	68fb      	ldr	r3, [r7, #12]
 8017252:	697a      	ldr	r2, [r7, #20]
 8017254:	609a      	str	r2, [r3, #8]
}
 8017256:	bf00      	nop
 8017258:	371c      	adds	r7, #28
 801725a:	46bd      	mov	sp, r7
 801725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017260:	4770      	bx	lr
	...

08017264 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8017264:	b480      	push	{r7}
 8017266:	b085      	sub	sp, #20
 8017268:	af00      	add	r7, sp, #0
 801726a:	6078      	str	r0, [r7, #4]
 801726c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801726e:	687b      	ldr	r3, [r7, #4]
 8017270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017274:	2b01      	cmp	r3, #1
 8017276:	d101      	bne.n	801727c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8017278:	2302      	movs	r3, #2
 801727a:	e06d      	b.n	8017358 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 801727c:	687b      	ldr	r3, [r7, #4]
 801727e:	2201      	movs	r2, #1
 8017280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	2202      	movs	r2, #2
 8017288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	681b      	ldr	r3, [r3, #0]
 8017290:	685b      	ldr	r3, [r3, #4]
 8017292:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	681b      	ldr	r3, [r3, #0]
 8017298:	689b      	ldr	r3, [r3, #8]
 801729a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801729c:	687b      	ldr	r3, [r7, #4]
 801729e:	681b      	ldr	r3, [r3, #0]
 80172a0:	4a30      	ldr	r2, [pc, #192]	; (8017364 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80172a2:	4293      	cmp	r3, r2
 80172a4:	d004      	beq.n	80172b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80172a6:	687b      	ldr	r3, [r7, #4]
 80172a8:	681b      	ldr	r3, [r3, #0]
 80172aa:	4a2f      	ldr	r2, [pc, #188]	; (8017368 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80172ac:	4293      	cmp	r3, r2
 80172ae:	d108      	bne.n	80172c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80172b0:	68fb      	ldr	r3, [r7, #12]
 80172b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80172b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80172b8:	683b      	ldr	r3, [r7, #0]
 80172ba:	685b      	ldr	r3, [r3, #4]
 80172bc:	68fa      	ldr	r2, [r7, #12]
 80172be:	4313      	orrs	r3, r2
 80172c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80172c2:	68fb      	ldr	r3, [r7, #12]
 80172c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80172c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80172ca:	683b      	ldr	r3, [r7, #0]
 80172cc:	681b      	ldr	r3, [r3, #0]
 80172ce:	68fa      	ldr	r2, [r7, #12]
 80172d0:	4313      	orrs	r3, r2
 80172d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	681b      	ldr	r3, [r3, #0]
 80172d8:	68fa      	ldr	r2, [r7, #12]
 80172da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	681b      	ldr	r3, [r3, #0]
 80172e0:	4a20      	ldr	r2, [pc, #128]	; (8017364 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80172e2:	4293      	cmp	r3, r2
 80172e4:	d022      	beq.n	801732c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80172e6:	687b      	ldr	r3, [r7, #4]
 80172e8:	681b      	ldr	r3, [r3, #0]
 80172ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80172ee:	d01d      	beq.n	801732c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	681b      	ldr	r3, [r3, #0]
 80172f4:	4a1d      	ldr	r2, [pc, #116]	; (801736c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80172f6:	4293      	cmp	r3, r2
 80172f8:	d018      	beq.n	801732c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	681b      	ldr	r3, [r3, #0]
 80172fe:	4a1c      	ldr	r2, [pc, #112]	; (8017370 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8017300:	4293      	cmp	r3, r2
 8017302:	d013      	beq.n	801732c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8017304:	687b      	ldr	r3, [r7, #4]
 8017306:	681b      	ldr	r3, [r3, #0]
 8017308:	4a1a      	ldr	r2, [pc, #104]	; (8017374 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 801730a:	4293      	cmp	r3, r2
 801730c:	d00e      	beq.n	801732c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801730e:	687b      	ldr	r3, [r7, #4]
 8017310:	681b      	ldr	r3, [r3, #0]
 8017312:	4a15      	ldr	r2, [pc, #84]	; (8017368 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8017314:	4293      	cmp	r3, r2
 8017316:	d009      	beq.n	801732c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8017318:	687b      	ldr	r3, [r7, #4]
 801731a:	681b      	ldr	r3, [r3, #0]
 801731c:	4a16      	ldr	r2, [pc, #88]	; (8017378 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801731e:	4293      	cmp	r3, r2
 8017320:	d004      	beq.n	801732c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8017322:	687b      	ldr	r3, [r7, #4]
 8017324:	681b      	ldr	r3, [r3, #0]
 8017326:	4a15      	ldr	r2, [pc, #84]	; (801737c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8017328:	4293      	cmp	r3, r2
 801732a:	d10c      	bne.n	8017346 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801732c:	68bb      	ldr	r3, [r7, #8]
 801732e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8017332:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8017334:	683b      	ldr	r3, [r7, #0]
 8017336:	689b      	ldr	r3, [r3, #8]
 8017338:	68ba      	ldr	r2, [r7, #8]
 801733a:	4313      	orrs	r3, r2
 801733c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801733e:	687b      	ldr	r3, [r7, #4]
 8017340:	681b      	ldr	r3, [r3, #0]
 8017342:	68ba      	ldr	r2, [r7, #8]
 8017344:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	2201      	movs	r2, #1
 801734a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801734e:	687b      	ldr	r3, [r7, #4]
 8017350:	2200      	movs	r2, #0
 8017352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8017356:	2300      	movs	r3, #0
}
 8017358:	4618      	mov	r0, r3
 801735a:	3714      	adds	r7, #20
 801735c:	46bd      	mov	sp, r7
 801735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017362:	4770      	bx	lr
 8017364:	40010000 	.word	0x40010000
 8017368:	40010400 	.word	0x40010400
 801736c:	40000400 	.word	0x40000400
 8017370:	40000800 	.word	0x40000800
 8017374:	40000c00 	.word	0x40000c00
 8017378:	40001800 	.word	0x40001800
 801737c:	40014000 	.word	0x40014000

08017380 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8017380:	b480      	push	{r7}
 8017382:	b083      	sub	sp, #12
 8017384:	af00      	add	r7, sp, #0
 8017386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8017388:	bf00      	nop
 801738a:	370c      	adds	r7, #12
 801738c:	46bd      	mov	sp, r7
 801738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017392:	4770      	bx	lr

08017394 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8017394:	b480      	push	{r7}
 8017396:	b083      	sub	sp, #12
 8017398:	af00      	add	r7, sp, #0
 801739a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801739c:	bf00      	nop
 801739e:	370c      	adds	r7, #12
 80173a0:	46bd      	mov	sp, r7
 80173a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173a6:	4770      	bx	lr

080173a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80173a8:	b480      	push	{r7}
 80173aa:	b083      	sub	sp, #12
 80173ac:	af00      	add	r7, sp, #0
 80173ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80173b0:	bf00      	nop
 80173b2:	370c      	adds	r7, #12
 80173b4:	46bd      	mov	sp, r7
 80173b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173ba:	4770      	bx	lr

080173bc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80173bc:	b480      	push	{r7}
 80173be:	b083      	sub	sp, #12
 80173c0:	af00      	add	r7, sp, #0
 80173c2:	6078      	str	r0, [r7, #4]
 80173c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80173c6:	683b      	ldr	r3, [r7, #0]
 80173c8:	681b      	ldr	r3, [r3, #0]
 80173ca:	2b00      	cmp	r3, #0
 80173cc:	d121      	bne.n	8017412 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80173ce:	687b      	ldr	r3, [r7, #4]
 80173d0:	681a      	ldr	r2, [r3, #0]
 80173d2:	4b27      	ldr	r3, [pc, #156]	; (8017470 <FMC_SDRAM_Init+0xb4>)
 80173d4:	4013      	ands	r3, r2
 80173d6:	683a      	ldr	r2, [r7, #0]
 80173d8:	6851      	ldr	r1, [r2, #4]
 80173da:	683a      	ldr	r2, [r7, #0]
 80173dc:	6892      	ldr	r2, [r2, #8]
 80173de:	4311      	orrs	r1, r2
 80173e0:	683a      	ldr	r2, [r7, #0]
 80173e2:	68d2      	ldr	r2, [r2, #12]
 80173e4:	4311      	orrs	r1, r2
 80173e6:	683a      	ldr	r2, [r7, #0]
 80173e8:	6912      	ldr	r2, [r2, #16]
 80173ea:	4311      	orrs	r1, r2
 80173ec:	683a      	ldr	r2, [r7, #0]
 80173ee:	6952      	ldr	r2, [r2, #20]
 80173f0:	4311      	orrs	r1, r2
 80173f2:	683a      	ldr	r2, [r7, #0]
 80173f4:	6992      	ldr	r2, [r2, #24]
 80173f6:	4311      	orrs	r1, r2
 80173f8:	683a      	ldr	r2, [r7, #0]
 80173fa:	69d2      	ldr	r2, [r2, #28]
 80173fc:	4311      	orrs	r1, r2
 80173fe:	683a      	ldr	r2, [r7, #0]
 8017400:	6a12      	ldr	r2, [r2, #32]
 8017402:	4311      	orrs	r1, r2
 8017404:	683a      	ldr	r2, [r7, #0]
 8017406:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8017408:	430a      	orrs	r2, r1
 801740a:	431a      	orrs	r2, r3
 801740c:	687b      	ldr	r3, [r7, #4]
 801740e:	601a      	str	r2, [r3, #0]
 8017410:	e026      	b.n	8017460 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8017412:	687b      	ldr	r3, [r7, #4]
 8017414:	681b      	ldr	r3, [r3, #0]
 8017416:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 801741a:	683b      	ldr	r3, [r7, #0]
 801741c:	69d9      	ldr	r1, [r3, #28]
 801741e:	683b      	ldr	r3, [r7, #0]
 8017420:	6a1b      	ldr	r3, [r3, #32]
 8017422:	4319      	orrs	r1, r3
 8017424:	683b      	ldr	r3, [r7, #0]
 8017426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017428:	430b      	orrs	r3, r1
 801742a:	431a      	orrs	r2, r3
 801742c:	687b      	ldr	r3, [r7, #4]
 801742e:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	685a      	ldr	r2, [r3, #4]
 8017434:	4b0e      	ldr	r3, [pc, #56]	; (8017470 <FMC_SDRAM_Init+0xb4>)
 8017436:	4013      	ands	r3, r2
 8017438:	683a      	ldr	r2, [r7, #0]
 801743a:	6851      	ldr	r1, [r2, #4]
 801743c:	683a      	ldr	r2, [r7, #0]
 801743e:	6892      	ldr	r2, [r2, #8]
 8017440:	4311      	orrs	r1, r2
 8017442:	683a      	ldr	r2, [r7, #0]
 8017444:	68d2      	ldr	r2, [r2, #12]
 8017446:	4311      	orrs	r1, r2
 8017448:	683a      	ldr	r2, [r7, #0]
 801744a:	6912      	ldr	r2, [r2, #16]
 801744c:	4311      	orrs	r1, r2
 801744e:	683a      	ldr	r2, [r7, #0]
 8017450:	6952      	ldr	r2, [r2, #20]
 8017452:	4311      	orrs	r1, r2
 8017454:	683a      	ldr	r2, [r7, #0]
 8017456:	6992      	ldr	r2, [r2, #24]
 8017458:	430a      	orrs	r2, r1
 801745a:	431a      	orrs	r2, r3
 801745c:	687b      	ldr	r3, [r7, #4]
 801745e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8017460:	2300      	movs	r3, #0
}
 8017462:	4618      	mov	r0, r3
 8017464:	370c      	adds	r7, #12
 8017466:	46bd      	mov	sp, r7
 8017468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801746c:	4770      	bx	lr
 801746e:	bf00      	nop
 8017470:	ffff8000 	.word	0xffff8000

08017474 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8017474:	b480      	push	{r7}
 8017476:	b085      	sub	sp, #20
 8017478:	af00      	add	r7, sp, #0
 801747a:	60f8      	str	r0, [r7, #12]
 801747c:	60b9      	str	r1, [r7, #8]
 801747e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8017480:	687b      	ldr	r3, [r7, #4]
 8017482:	2b00      	cmp	r3, #0
 8017484:	d128      	bne.n	80174d8 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8017486:	68fb      	ldr	r3, [r7, #12]
 8017488:	689b      	ldr	r3, [r3, #8]
 801748a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 801748e:	68bb      	ldr	r3, [r7, #8]
 8017490:	681b      	ldr	r3, [r3, #0]
 8017492:	1e59      	subs	r1, r3, #1
 8017494:	68bb      	ldr	r3, [r7, #8]
 8017496:	685b      	ldr	r3, [r3, #4]
 8017498:	3b01      	subs	r3, #1
 801749a:	011b      	lsls	r3, r3, #4
 801749c:	4319      	orrs	r1, r3
 801749e:	68bb      	ldr	r3, [r7, #8]
 80174a0:	689b      	ldr	r3, [r3, #8]
 80174a2:	3b01      	subs	r3, #1
 80174a4:	021b      	lsls	r3, r3, #8
 80174a6:	4319      	orrs	r1, r3
 80174a8:	68bb      	ldr	r3, [r7, #8]
 80174aa:	68db      	ldr	r3, [r3, #12]
 80174ac:	3b01      	subs	r3, #1
 80174ae:	031b      	lsls	r3, r3, #12
 80174b0:	4319      	orrs	r1, r3
 80174b2:	68bb      	ldr	r3, [r7, #8]
 80174b4:	691b      	ldr	r3, [r3, #16]
 80174b6:	3b01      	subs	r3, #1
 80174b8:	041b      	lsls	r3, r3, #16
 80174ba:	4319      	orrs	r1, r3
 80174bc:	68bb      	ldr	r3, [r7, #8]
 80174be:	695b      	ldr	r3, [r3, #20]
 80174c0:	3b01      	subs	r3, #1
 80174c2:	051b      	lsls	r3, r3, #20
 80174c4:	4319      	orrs	r1, r3
 80174c6:	68bb      	ldr	r3, [r7, #8]
 80174c8:	699b      	ldr	r3, [r3, #24]
 80174ca:	3b01      	subs	r3, #1
 80174cc:	061b      	lsls	r3, r3, #24
 80174ce:	430b      	orrs	r3, r1
 80174d0:	431a      	orrs	r2, r3
 80174d2:	68fb      	ldr	r3, [r7, #12]
 80174d4:	609a      	str	r2, [r3, #8]
 80174d6:	e02d      	b.n	8017534 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80174d8:	68fb      	ldr	r3, [r7, #12]
 80174da:	689a      	ldr	r2, [r3, #8]
 80174dc:	4b19      	ldr	r3, [pc, #100]	; (8017544 <FMC_SDRAM_Timing_Init+0xd0>)
 80174de:	4013      	ands	r3, r2
 80174e0:	68ba      	ldr	r2, [r7, #8]
 80174e2:	68d2      	ldr	r2, [r2, #12]
 80174e4:	3a01      	subs	r2, #1
 80174e6:	0311      	lsls	r1, r2, #12
 80174e8:	68ba      	ldr	r2, [r7, #8]
 80174ea:	6952      	ldr	r2, [r2, #20]
 80174ec:	3a01      	subs	r2, #1
 80174ee:	0512      	lsls	r2, r2, #20
 80174f0:	430a      	orrs	r2, r1
 80174f2:	431a      	orrs	r2, r3
 80174f4:	68fb      	ldr	r3, [r7, #12]
 80174f6:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80174f8:	68fb      	ldr	r3, [r7, #12]
 80174fa:	68db      	ldr	r3, [r3, #12]
 80174fc:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8017500:	68bb      	ldr	r3, [r7, #8]
 8017502:	681b      	ldr	r3, [r3, #0]
 8017504:	1e59      	subs	r1, r3, #1
 8017506:	68bb      	ldr	r3, [r7, #8]
 8017508:	685b      	ldr	r3, [r3, #4]
 801750a:	3b01      	subs	r3, #1
 801750c:	011b      	lsls	r3, r3, #4
 801750e:	4319      	orrs	r1, r3
 8017510:	68bb      	ldr	r3, [r7, #8]
 8017512:	689b      	ldr	r3, [r3, #8]
 8017514:	3b01      	subs	r3, #1
 8017516:	021b      	lsls	r3, r3, #8
 8017518:	4319      	orrs	r1, r3
 801751a:	68bb      	ldr	r3, [r7, #8]
 801751c:	691b      	ldr	r3, [r3, #16]
 801751e:	3b01      	subs	r3, #1
 8017520:	041b      	lsls	r3, r3, #16
 8017522:	4319      	orrs	r1, r3
 8017524:	68bb      	ldr	r3, [r7, #8]
 8017526:	699b      	ldr	r3, [r3, #24]
 8017528:	3b01      	subs	r3, #1
 801752a:	061b      	lsls	r3, r3, #24
 801752c:	430b      	orrs	r3, r1
 801752e:	431a      	orrs	r2, r3
 8017530:	68fb      	ldr	r3, [r7, #12]
 8017532:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8017534:	2300      	movs	r3, #0
}
 8017536:	4618      	mov	r0, r3
 8017538:	3714      	adds	r7, #20
 801753a:	46bd      	mov	sp, r7
 801753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017540:	4770      	bx	lr
 8017542:	bf00      	nop
 8017544:	ff0f0fff 	.word	0xff0f0fff

08017548 <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
 8017548:	b480      	push	{r7}
 801754a:	b083      	sub	sp, #12
 801754c:	af00      	add	r7, sp, #0
 801754e:	6078      	str	r0, [r7, #4]
 8017550:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
 8017552:	687b      	ldr	r3, [r7, #4]
 8017554:	683a      	ldr	r2, [r7, #0]
 8017556:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 801755a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFFU;
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	683a      	ldr	r2, [r7, #0]
 8017562:	3202      	adds	r2, #2
 8017564:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8017568:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  Device->SDCMR      = 0x00000000U;
 801756c:	687b      	ldr	r3, [r7, #4]
 801756e:	2200      	movs	r2, #0
 8017570:	611a      	str	r2, [r3, #16]
  Device->SDRTR      = 0x00000000U;
 8017572:	687b      	ldr	r3, [r7, #4]
 8017574:	2200      	movs	r2, #0
 8017576:	615a      	str	r2, [r3, #20]
  Device->SDSR       = 0x00000000U;
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	2200      	movs	r2, #0
 801757c:	619a      	str	r2, [r3, #24]

  return HAL_OK;
 801757e:	2300      	movs	r3, #0
}
 8017580:	4618      	mov	r0, r3
 8017582:	370c      	adds	r7, #12
 8017584:	46bd      	mov	sp, r7
 8017586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801758a:	4770      	bx	lr

0801758c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 801758c:	b480      	push	{r7}
 801758e:	b085      	sub	sp, #20
 8017590:	af00      	add	r7, sp, #0
 8017592:	60f8      	str	r0, [r7, #12]
 8017594:	60b9      	str	r1, [r7, #8]
 8017596:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8017598:	68fb      	ldr	r3, [r7, #12]
 801759a:	691a      	ldr	r2, [r3, #16]
 801759c:	4b0c      	ldr	r3, [pc, #48]	; (80175d0 <FMC_SDRAM_SendCommand+0x44>)
 801759e:	4013      	ands	r3, r2
 80175a0:	68ba      	ldr	r2, [r7, #8]
 80175a2:	6811      	ldr	r1, [r2, #0]
 80175a4:	68ba      	ldr	r2, [r7, #8]
 80175a6:	6852      	ldr	r2, [r2, #4]
 80175a8:	4311      	orrs	r1, r2
 80175aa:	68ba      	ldr	r2, [r7, #8]
 80175ac:	6892      	ldr	r2, [r2, #8]
 80175ae:	3a01      	subs	r2, #1
 80175b0:	0152      	lsls	r2, r2, #5
 80175b2:	4311      	orrs	r1, r2
 80175b4:	68ba      	ldr	r2, [r7, #8]
 80175b6:	68d2      	ldr	r2, [r2, #12]
 80175b8:	0252      	lsls	r2, r2, #9
 80175ba:	430a      	orrs	r2, r1
 80175bc:	431a      	orrs	r2, r3
 80175be:	68fb      	ldr	r3, [r7, #12]
 80175c0:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 80175c2:	2300      	movs	r3, #0
}
 80175c4:	4618      	mov	r0, r3
 80175c6:	3714      	adds	r7, #20
 80175c8:	46bd      	mov	sp, r7
 80175ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175ce:	4770      	bx	lr
 80175d0:	ffc00000 	.word	0xffc00000

080175d4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80175d4:	b480      	push	{r7}
 80175d6:	b083      	sub	sp, #12
 80175d8:	af00      	add	r7, sp, #0
 80175da:	6078      	str	r0, [r7, #4]
 80175dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80175de:	687b      	ldr	r3, [r7, #4]
 80175e0:	695a      	ldr	r2, [r3, #20]
 80175e2:	4b07      	ldr	r3, [pc, #28]	; (8017600 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 80175e4:	4013      	ands	r3, r2
 80175e6:	683a      	ldr	r2, [r7, #0]
 80175e8:	0052      	lsls	r2, r2, #1
 80175ea:	431a      	orrs	r2, r3
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80175f0:	2300      	movs	r3, #0
}
 80175f2:	4618      	mov	r0, r3
 80175f4:	370c      	adds	r7, #12
 80175f6:	46bd      	mov	sp, r7
 80175f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175fc:	4770      	bx	lr
 80175fe:	bf00      	nop
 8017600:	ffffc001 	.word	0xffffc001

08017604 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8017604:	8880      	ldrh	r0, [r0, #4]
 8017606:	4770      	bx	lr

08017608 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8017608:	b570      	push	{r4, r5, r6, lr}
 801760a:	6803      	ldr	r3, [r0, #0]
 801760c:	460c      	mov	r4, r1
 801760e:	2100      	movs	r1, #0
 8017610:	4605      	mov	r5, r0
 8017612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017614:	4798      	blx	r3
 8017616:	4606      	mov	r6, r0
 8017618:	682b      	ldr	r3, [r5, #0]
 801761a:	4628      	mov	r0, r5
 801761c:	1ba4      	subs	r4, r4, r6
 801761e:	6a1b      	ldr	r3, [r3, #32]
 8017620:	b2a4      	uxth	r4, r4
 8017622:	4798      	blx	r3
 8017624:	fbb4 f0f0 	udiv	r0, r4, r0
 8017628:	bd70      	pop	{r4, r5, r6, pc}

0801762a <_ZN8touchgfx17AbstractPartition5clearEv>:
 801762a:	2300      	movs	r3, #0
 801762c:	8083      	strh	r3, [r0, #4]
 801762e:	4770      	bx	lr

08017630 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8017630:	b510      	push	{r4, lr}
 8017632:	6803      	ldr	r3, [r0, #0]
 8017634:	4604      	mov	r4, r0
 8017636:	8881      	ldrh	r1, [r0, #4]
 8017638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801763a:	4798      	blx	r3
 801763c:	88a3      	ldrh	r3, [r4, #4]
 801763e:	3301      	adds	r3, #1
 8017640:	80a3      	strh	r3, [r4, #4]
 8017642:	bd10      	pop	{r4, pc}

08017644 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8017644:	6803      	ldr	r3, [r0, #0]
 8017646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017648:	4718      	bx	r3

0801764a <_ZN8touchgfx17AbstractPartitionD1Ev>:
 801764a:	4770      	bx	lr

0801764c <_ZN8touchgfx17AbstractPartitionC1Ev>:
 801764c:	4a02      	ldr	r2, [pc, #8]	; (8017658 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 801764e:	6002      	str	r2, [r0, #0]
 8017650:	2200      	movs	r2, #0
 8017652:	8082      	strh	r2, [r0, #4]
 8017654:	4770      	bx	lr
 8017656:	bf00      	nop
 8017658:	0802f1bc 	.word	0x0802f1bc

0801765c <_ZN8touchgfx9Container13getFirstChildEv>:
 801765c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801765e:	4770      	bx	lr

08017660 <_ZNK8touchgfx25AbstractProgressIndicator17invalidateContentEv>:
 8017660:	b510      	push	{r4, lr}
 8017662:	6803      	ldr	r3, [r0, #0]
 8017664:	4604      	mov	r4, r0
 8017666:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801766a:	4798      	blx	r3
 801766c:	b110      	cbz	r0, 8017674 <_ZNK8touchgfx25AbstractProgressIndicator17invalidateContentEv+0x14>
 801766e:	4620      	mov	r0, r4
 8017670:	f7ec fcee 	bl	8004050 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8017674:	bd10      	pop	{r4, pc}

08017676 <_ZNK8touchgfx12TextProgress12getTypedTextEv>:
 8017676:	30dc      	adds	r0, #220	; 0xdc
 8017678:	4770      	bx	lr

0801767a <_ZN8touchgfx12TextProgress8setColorENS_9colortypeE>:
 801767a:	f8c0 10e4 	str.w	r1, [r0, #228]	; 0xe4
 801767e:	4770      	bx	lr

08017680 <_ZNK8touchgfx12TextProgress8getColorEv>:
 8017680:	f8d0 00e4 	ldr.w	r0, [r0, #228]	; 0xe4
 8017684:	4770      	bx	lr

08017686 <_ZN8touchgfx12TextProgress19setNumberOfDecimalsEt>:
 8017686:	2902      	cmp	r1, #2
 8017688:	b570      	push	{r4, r5, r6, lr}
 801768a:	bf28      	it	cs
 801768c:	2102      	movcs	r1, #2
 801768e:	6803      	ldr	r3, [r0, #0]
 8017690:	4604      	mov	r4, r0
 8017692:	f8a0 1112 	strh.w	r1, [r0, #274]	; 0x112
 8017696:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 801769a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801769e:	4798      	blx	r3
 80176a0:	462b      	mov	r3, r5
 80176a2:	4601      	mov	r1, r0
 80176a4:	4620      	mov	r0, r4
 80176a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80176aa:	4718      	bx	r3

080176ac <_ZNK8touchgfx12TextProgress19getNumberOfDecimalsEv>:
 80176ac:	f8b0 0112 	ldrh.w	r0, [r0, #274]	; 0x112
 80176b0:	4770      	bx	lr

080176b2 <_ZN8touchgfx12TextProgress12setTypedTextERKNS_9TypedTextE>:
 80176b2:	30b4      	adds	r0, #180	; 0xb4
 80176b4:	f002 ba3c 	b.w	8019b30 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>

080176b8 <_ZN8touchgfx12TextProgress8setAlphaEh>:
 80176b8:	b538      	push	{r3, r4, r5, lr}
 80176ba:	4604      	mov	r4, r0
 80176bc:	460d      	mov	r5, r1
 80176be:	f000 f90f 	bl	80178e0 <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>
 80176c2:	f884 50ea 	strb.w	r5, [r4, #234]	; 0xea
 80176c6:	bd38      	pop	{r3, r4, r5, pc}

080176c8 <_ZN8touchgfx12TextProgress8setValueEi>:
 80176c8:	b570      	push	{r4, r5, r6, lr}
 80176ca:	f100 05b4 	add.w	r5, r0, #180	; 0xb4
 80176ce:	4604      	mov	r4, r0
 80176d0:	460e      	mov	r6, r1
 80176d2:	b086      	sub	sp, #24
 80176d4:	4628      	mov	r0, r5
 80176d6:	f7ec fcbb 	bl	8004050 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 80176da:	4631      	mov	r1, r6
 80176dc:	4620      	mov	r0, r4
 80176de:	f504 7680 	add.w	r6, r4, #256	; 0x100
 80176e2:	f000 f948 	bl	8017976 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 80176e6:	4b1b      	ldr	r3, [pc, #108]	; (8017754 <_ZN8touchgfx12TextProgress8setValueEi+0x8c>)
 80176e8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80176ec:	ab06      	add	r3, sp, #24
 80176ee:	e903 0007 	stmdb	r3, {r0, r1, r2}
 80176f2:	f8b4 3112 	ldrh.w	r3, [r4, #274]	; 0x112
 80176f6:	aa06      	add	r2, sp, #24
 80176f8:	4620      	mov	r0, r4
 80176fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80176fe:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 8017702:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8017706:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801770a:	0089      	lsls	r1, r1, #2
 801770c:	b289      	uxth	r1, r1
 801770e:	f000 f954 	bl	80179ba <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 8017712:	f8b4 1112 	ldrh.w	r1, [r4, #274]	; 0x112
 8017716:	b1b1      	cbz	r1, 8017746 <_ZN8touchgfx12TextProgress8setValueEi+0x7e>
 8017718:	ab06      	add	r3, sp, #24
 801771a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801771e:	f853 2c0c 	ldr.w	r2, [r3, #-12]
 8017722:	fb90 f3f2 	sdiv	r3, r0, r2
 8017726:	fb02 0213 	mls	r2, r2, r3, r0
 801772a:	4630      	mov	r0, r6
 801772c:	e9cd 1200 	strd	r1, r2, [sp]
 8017730:	4a09      	ldr	r2, [pc, #36]	; (8017758 <_ZN8touchgfx12TextProgress8setValueEi+0x90>)
 8017732:	2108      	movs	r1, #8
 8017734:	f007 fa6a 	bl	801ec0c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8017738:	4628      	mov	r0, r5
 801773a:	f8c4 60fc 	str.w	r6, [r4, #252]	; 0xfc
 801773e:	f7ec fc87 	bl	8004050 <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8017742:	b006      	add	sp, #24
 8017744:	bd70      	pop	{r4, r5, r6, pc}
 8017746:	4603      	mov	r3, r0
 8017748:	4a04      	ldr	r2, [pc, #16]	; (801775c <_ZN8touchgfx12TextProgress8setValueEi+0x94>)
 801774a:	2108      	movs	r1, #8
 801774c:	4630      	mov	r0, r6
 801774e:	f007 fa5d 	bl	801ec0c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8017752:	e7f1      	b.n	8017738 <_ZN8touchgfx12TextProgress8setValueEi+0x70>
 8017754:	0802e5ac 	.word	0x0802e5ac
 8017758:	0802f1e8 	.word	0x0802f1e8
 801775c:	0802f1f0 	.word	0x0802f1f0

08017760 <_ZN8touchgfx12TextProgress28setProgressIndicatorPositionEssss>:
 8017760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017764:	461d      	mov	r5, r3
 8017766:	f100 07b4 	add.w	r7, r0, #180	; 0xb4
 801776a:	2300      	movs	r3, #0
 801776c:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 8017770:	4691      	mov	r9, r2
 8017772:	4604      	mov	r4, r0
 8017774:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
 8017778:	4688      	mov	r8, r1
 801777a:	4638      	mov	r0, r7
 801777c:	4629      	mov	r1, r5
 801777e:	f7ef fa2c 	bl	8006bda <_ZN8touchgfx8TextArea8setWidthEs>
 8017782:	4631      	mov	r1, r6
 8017784:	4638      	mov	r0, r7
 8017786:	f7ef fa48 	bl	8006c1a <_ZN8touchgfx8TextArea9setHeightEs>
 801778a:	9608      	str	r6, [sp, #32]
 801778c:	462b      	mov	r3, r5
 801778e:	464a      	mov	r2, r9
 8017790:	4641      	mov	r1, r8
 8017792:	4620      	mov	r0, r4
 8017794:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017798:	f000 b969 	b.w	8017a6e <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

0801779c <_ZN8touchgfx12TextProgressC1Ev>:
 801779c:	b510      	push	{r4, lr}
 801779e:	4604      	mov	r4, r0
 80177a0:	f000 f992 	bl	8017ac8 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 80177a4:	2201      	movs	r2, #1
 80177a6:	4b25      	ldr	r3, [pc, #148]	; (801783c <_ZN8touchgfx12TextProgressC1Ev+0xa0>)
 80177a8:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 80177ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80177b0:	f884 20d9 	strb.w	r2, [r4, #217]	; 0xd9
 80177b4:	4a22      	ldr	r2, [pc, #136]	; (8017840 <_ZN8touchgfx12TextProgressC1Ev+0xa4>)
 80177b6:	6023      	str	r3, [r4, #0]
 80177b8:	2300      	movs	r3, #0
 80177ba:	f8c4 20dc 	str.w	r2, [r4, #220]	; 0xdc
 80177be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80177c2:	f8c4 10e8 	str.w	r1, [r4, #232]	; 0xe8
 80177c6:	f104 01b4 	add.w	r1, r4, #180	; 0xb4
 80177ca:	f8a4 20e0 	strh.w	r2, [r4, #224]	; 0xe0
 80177ce:	f8a4 20f4 	strh.w	r2, [r4, #244]	; 0xf4
 80177d2:	f8a4 20f6 	strh.w	r2, [r4, #246]	; 0xf6
 80177d6:	4a1b      	ldr	r2, [pc, #108]	; (8017844 <_ZN8touchgfx12TextProgressC1Ev+0xa8>)
 80177d8:	f8a4 30b8 	strh.w	r3, [r4, #184]	; 0xb8
 80177dc:	f8a4 30ba 	strh.w	r3, [r4, #186]	; 0xba
 80177e0:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
 80177e4:	f8a4 30be 	strh.w	r3, [r4, #190]	; 0xbe
 80177e8:	f8a4 30c0 	strh.w	r3, [r4, #192]	; 0xc0
 80177ec:	f8a4 30c2 	strh.w	r3, [r4, #194]	; 0xc2
 80177f0:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
 80177f4:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
 80177f8:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
 80177fc:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
 8017800:	f8a4 30d6 	strh.w	r3, [r4, #214]	; 0xd6
 8017804:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
 8017808:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
 801780c:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
 8017810:	f884 30ed 	strb.w	r3, [r4, #237]	; 0xed
 8017814:	f8a4 30f0 	strh.w	r3, [r4, #240]	; 0xf0
 8017818:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
 801781c:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
 8017820:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
 8017824:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
 8017828:	f8a4 3112 	strh.w	r3, [r4, #274]	; 0x112
 801782c:	f8a4 3100 	strh.w	r3, [r4, #256]	; 0x100
 8017830:	e9c4 3332 	strd	r3, r3, [r4, #200]	; 0xc8
 8017834:	f000 f9a8 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8017838:	4620      	mov	r0, r4
 801783a:	bd10      	pop	{r4, pc}
 801783c:	0802f1fc 	.word	0x0802f1fc
 8017840:	0802ec04 	.word	0x0802ec04
 8017844:	0802ef38 	.word	0x0802ef38

08017848 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 8017848:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 801784c:	4770      	bx	lr

0801784e <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 801784e:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 8017852:	4770      	bx	lr

08017854 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 8017854:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 8017858:	4770      	bx	lr

0801785a <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 801785a:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 801785e:	4770      	bx	lr

08017860 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>:
 8017860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017862:	461e      	mov	r6, r3
 8017864:	6803      	ldr	r3, [r0, #0]
 8017866:	460f      	mov	r7, r1
 8017868:	4604      	mov	r4, r0
 801786a:	4615      	mov	r5, r2
 801786c:	e9c0 1221 	strd	r1, r2, [r0, #132]	; 0x84
 8017870:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 8017874:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8017878:	4798      	blx	r3
 801787a:	b93e      	cbnz	r6, 801788c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x2c>
 801787c:	1bed      	subs	r5, r5, r7
 801787e:	f8a4 5090 	strh.w	r5, [r4, #144]	; 0x90
 8017882:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8017886:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
 801788a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801788c:	f8a4 6090 	strh.w	r6, [r4, #144]	; 0x90
 8017890:	e7f7      	b.n	8017882 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x22>

08017892 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_RtS2_>:
 8017892:	b510      	push	{r4, lr}
 8017894:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 8017898:	600c      	str	r4, [r1, #0]
 801789a:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 801789e:	6011      	str	r1, [r2, #0]
 80178a0:	f8b0 2090 	ldrh.w	r2, [r0, #144]	; 0x90
 80178a4:	801a      	strh	r2, [r3, #0]
 80178a6:	9b02      	ldr	r3, [sp, #8]
 80178a8:	f8b0 2092 	ldrh.w	r2, [r0, #146]	; 0x92
 80178ac:	801a      	strh	r2, [r3, #0]
 80178ae:	bd10      	pop	{r4, pc}

080178b0 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_Rt>:
 80178b0:	b510      	push	{r4, lr}
 80178b2:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 80178b6:	600c      	str	r4, [r1, #0]
 80178b8:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 80178bc:	6011      	str	r1, [r2, #0]
 80178be:	f8b0 2090 	ldrh.w	r2, [r0, #144]	; 0x90
 80178c2:	801a      	strh	r2, [r3, #0]
 80178c4:	bd10      	pop	{r4, pc}

080178c6 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_>:
 80178c6:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80178ca:	600b      	str	r3, [r1, #0]
 80178cc:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80178d0:	6013      	str	r3, [r2, #0]
 80178d2:	4770      	bx	lr

080178d4 <_ZN8touchgfx25AbstractProgressIndicator17setEasingEquationEPFstsstE>:
 80178d4:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
 80178d8:	4770      	bx	lr

080178da <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 80178da:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
 80178de:	4770      	bx	lr

080178e0 <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>:
 80178e0:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
 80178e4:	4770      	bx	lr

080178e6 <_ZNK8touchgfx25AbstractProgressIndicator8getAlphaEv>:
 80178e6:	f890 0054 	ldrb.w	r0, [r0, #84]	; 0x54
 80178ea:	4770      	bx	lr

080178ec <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit>:
 80178ec:	b570      	push	{r4, r5, r6, lr}
 80178ee:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
 80178f2:	4604      	mov	r4, r0
 80178f4:	4616      	mov	r6, r2
 80178f6:	428d      	cmp	r5, r1
 80178f8:	bfb8      	it	lt
 80178fa:	460d      	movlt	r5, r1
 80178fc:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8017900:	428d      	cmp	r5, r1
 8017902:	bfa8      	it	ge
 8017904:	460d      	movge	r5, r1
 8017906:	b99a      	cbnz	r2, 8017930 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x44>
 8017908:	6803      	ldr	r3, [r0, #0]
 801790a:	4629      	mov	r1, r5
 801790c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8017910:	4798      	blx	r3
 8017912:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8017916:	b368      	cbz	r0, 8017974 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x88>
 8017918:	6803      	ldr	r3, [r0, #0]
 801791a:	68db      	ldr	r3, [r3, #12]
 801791c:	4798      	blx	r3
 801791e:	b348      	cbz	r0, 8017974 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x88>
 8017920:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8017924:	4621      	mov	r1, r4
 8017926:	6803      	ldr	r3, [r0, #0]
 8017928:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801792c:	689b      	ldr	r3, [r3, #8]
 801792e:	4718      	bx	r3
 8017930:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8017934:	2b00      	cmp	r3, #0
 8017936:	dd08      	ble.n	801794a <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x5e>
 8017938:	f004 f82c 	bl	801b994 <_ZN8touchgfx11Application11getInstanceEv>
 801793c:	4621      	mov	r1, r4
 801793e:	3004      	adds	r0, #4
 8017940:	f004 f875 	bl	801ba2e <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 8017944:	2300      	movs	r3, #0
 8017946:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
 801794a:	6823      	ldr	r3, [r4, #0]
 801794c:	4620      	mov	r0, r4
 801794e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8017952:	4798      	blx	r3
 8017954:	2300      	movs	r3, #0
 8017956:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
 801795a:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 801795e:	e9c4 0527 	strd	r0, r5, [r4, #156]	; 0x9c
 8017962:	f004 f817 	bl	801b994 <_ZN8touchgfx11Application11getInstanceEv>
 8017966:	4621      	mov	r1, r4
 8017968:	3004      	adds	r0, #4
 801796a:	f004 f909 	bl	801bb80 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
 801796e:	2301      	movs	r3, #1
 8017970:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
 8017974:	bd70      	pop	{r4, r5, r6, pc}

08017976 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 8017976:	b510      	push	{r4, lr}
 8017978:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 801797c:	4604      	mov	r4, r0
 801797e:	4299      	cmp	r1, r3
 8017980:	bfb8      	it	lt
 8017982:	4619      	movlt	r1, r3
 8017984:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8017988:	4299      	cmp	r1, r3
 801798a:	bfa8      	it	ge
 801798c:	4619      	movge	r1, r3
 801798e:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8017992:	428b      	cmp	r3, r1
 8017994:	d010      	beq.n	80179b8 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8017996:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
 801799a:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
 801799e:	b158      	cbz	r0, 80179b8 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 80179a0:	6803      	ldr	r3, [r0, #0]
 80179a2:	68db      	ldr	r3, [r3, #12]
 80179a4:	4798      	blx	r3
 80179a6:	b138      	cbz	r0, 80179b8 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 80179a8:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 80179ac:	4621      	mov	r1, r4
 80179ae:	6803      	ldr	r3, [r0, #0]
 80179b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80179b4:	689b      	ldr	r3, [r3, #8]
 80179b6:	4718      	bx	r3
 80179b8:	bd10      	pop	{r4, pc}

080179ba <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 80179ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80179bc:	4604      	mov	r4, r0
 80179be:	460d      	mov	r5, r1
 80179c0:	b1a9      	cbz	r1, 80179ee <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x34>
 80179c2:	f8b0 6092 	ldrh.w	r6, [r0, #146]	; 0x92
 80179c6:	ab01      	add	r3, sp, #4
 80179c8:	f8b4 1090 	ldrh.w	r1, [r4, #144]	; 0x90
 80179cc:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
 80179d0:	1b89      	subs	r1, r1, r6
 80179d2:	e9d0 0221 	ldrd	r0, r2, [r0, #132]	; 0x84
 80179d6:	1a12      	subs	r2, r2, r0
 80179d8:	1a38      	subs	r0, r7, r0
 80179da:	f005 fa71 	bl	801cec0 <_ZN8touchgfx6muldivElllRl>
 80179de:	4629      	mov	r1, r5
 80179e0:	ab01      	add	r3, sp, #4
 80179e2:	f8b4 2090 	ldrh.w	r2, [r4, #144]	; 0x90
 80179e6:	4430      	add	r0, r6
 80179e8:	f005 fa6a 	bl	801cec0 <_ZN8touchgfx6muldivElllRl>
 80179ec:	b285      	uxth	r5, r0
 80179ee:	4628      	mov	r0, r5
 80179f0:	b003      	add	sp, #12
 80179f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080179f4 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv>:
 80179f4:	b570      	push	{r4, r5, r6, lr}
 80179f6:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
 80179fa:	4604      	mov	r4, r0
 80179fc:	2b00      	cmp	r3, #0
 80179fe:	d035      	beq.n	8017a6c <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 8017a00:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
 8017a04:	2100      	movs	r1, #0
 8017a06:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
 8017a0a:	3001      	adds	r0, #1
 8017a0c:	e9d4 3227 	ldrd	r3, r2, [r4, #156]	; 0x9c
 8017a10:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
 8017a14:	b280      	uxth	r0, r0
 8017a16:	1ad2      	subs	r2, r2, r3
 8017a18:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8017a1c:	b212      	sxth	r2, r2
 8017a1e:	47a8      	blx	r5
 8017a20:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8017a24:	6823      	ldr	r3, [r4, #0]
 8017a26:	4401      	add	r1, r0
 8017a28:	4620      	mov	r0, r4
 8017a2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8017a2e:	4798      	blx	r3
 8017a30:	e9d4 3229 	ldrd	r3, r2, [r4, #164]	; 0xa4
 8017a34:	429a      	cmp	r2, r3
 8017a36:	db19      	blt.n	8017a6c <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 8017a38:	2500      	movs	r5, #0
 8017a3a:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 8017a3e:	f003 ffa9 	bl	801b994 <_ZN8touchgfx11Application11getInstanceEv>
 8017a42:	4621      	mov	r1, r4
 8017a44:	3004      	adds	r0, #4
 8017a46:	f003 fff2 	bl	801ba2e <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 8017a4a:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8017a4e:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
 8017a52:	b158      	cbz	r0, 8017a6c <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 8017a54:	6803      	ldr	r3, [r0, #0]
 8017a56:	68db      	ldr	r3, [r3, #12]
 8017a58:	4798      	blx	r3
 8017a5a:	b138      	cbz	r0, 8017a6c <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 8017a5c:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8017a60:	4621      	mov	r1, r4
 8017a62:	6803      	ldr	r3, [r0, #0]
 8017a64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017a68:	689b      	ldr	r3, [r3, #8]
 8017a6a:	4718      	bx	r3
 8017a6c:	bd70      	pop	{r4, r5, r6, pc}

08017a6e <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 8017a6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a72:	4604      	mov	r4, r0
 8017a74:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
 8017a78:	4698      	mov	r8, r3
 8017a7a:	460e      	mov	r6, r1
 8017a7c:	4615      	mov	r5, r2
 8017a7e:	f8a4 105c 	strh.w	r1, [r4, #92]	; 0x5c
 8017a82:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8017a86:	4619      	mov	r1, r3
 8017a88:	463a      	mov	r2, r7
 8017a8a:	3058      	adds	r0, #88	; 0x58
 8017a8c:	f7ec fbb3 	bl	80041f6 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8017a90:	4446      	add	r6, r8
 8017a92:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8017a96:	443d      	add	r5, r7
 8017a98:	42b3      	cmp	r3, r6
 8017a9a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8017a9e:	bfb8      	it	lt
 8017aa0:	8126      	strhlt	r6, [r4, #8]
 8017aa2:	42ab      	cmp	r3, r5
 8017aa4:	bfb8      	it	lt
 8017aa6:	8165      	strhlt	r5, [r4, #10]
 8017aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017aac <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 8017aac:	b510      	push	{r4, lr}
 8017aae:	4604      	mov	r4, r0
 8017ab0:	302c      	adds	r0, #44	; 0x2c
 8017ab2:	f002 fa32 	bl	8019f1a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8017ab6:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	; 0x36
 8017aba:	4620      	mov	r0, r4
 8017abc:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
 8017ac0:	f7ec fb99 	bl	80041f6 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8017ac4:	bd10      	pop	{r4, pc}
	...

08017ac8 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 8017ac8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017aca:	4604      	mov	r4, r0
 8017acc:	2500      	movs	r5, #0
 8017ace:	f7ec fa6f 	bl	8003fb0 <_ZN8touchgfx8DrawableC1Ev>
 8017ad2:	4b24      	ldr	r3, [pc, #144]	; (8017b64 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x9c>)
 8017ad4:	4626      	mov	r6, r4
 8017ad6:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8017ada:	2226      	movs	r2, #38	; 0x26
 8017adc:	4629      	mov	r1, r5
 8017ade:	62a5      	str	r5, [r4, #40]	; 0x28
 8017ae0:	f846 3b2c 	str.w	r3, [r6], #44
 8017ae4:	4630      	mov	r0, r6
 8017ae6:	f8ad 7004 	strh.w	r7, [sp, #4]
 8017aea:	f014 ffc4 	bl	802ca76 <memset>
 8017aee:	4630      	mov	r0, r6
 8017af0:	f7ec fa5e 	bl	8003fb0 <_ZN8touchgfx8DrawableC1Ev>
 8017af4:	a902      	add	r1, sp, #8
 8017af6:	4b1c      	ldr	r3, [pc, #112]	; (8017b68 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa0>)
 8017af8:	4630      	mov	r0, r6
 8017afa:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
 8017afe:	f104 0758 	add.w	r7, r4, #88	; 0x58
 8017b02:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017b04:	f831 3d04 	ldrh.w	r3, [r1, #-4]!
 8017b08:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8017b0c:	f002 fa05 	bl	8019f1a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8017b10:	4638      	mov	r0, r7
 8017b12:	f7ec fa4d 	bl	8003fb0 <_ZN8touchgfx8DrawableC1Ev>
 8017b16:	4b15      	ldr	r3, [pc, #84]	; (8017b6c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa4>)
 8017b18:	4629      	mov	r1, r5
 8017b1a:	4630      	mov	r0, r6
 8017b1c:	65a3      	str	r3, [r4, #88]	; 0x58
 8017b1e:	2364      	movs	r3, #100	; 0x64
 8017b20:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
 8017b24:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8017b28:	e9c4 3522 	strd	r3, r5, [r4, #136]	; 0x88
 8017b2c:	4b10      	ldr	r3, [pc, #64]	; (8017b70 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa8>)
 8017b2e:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
 8017b32:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8017b36:	e9c4 5527 	strd	r5, r5, [r4, #156]	; 0x9c
 8017b3a:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 8017b3e:	e9c4 552b 	strd	r5, r5, [r4, #172]	; 0xac
 8017b42:	f7ec fade 	bl	8004102 <_ZN8touchgfx8Drawable4setXEs>
 8017b46:	4629      	mov	r1, r5
 8017b48:	4630      	mov	r0, r6
 8017b4a:	f7ec fae9 	bl	8004120 <_ZN8touchgfx8Drawable4setYEs>
 8017b4e:	4631      	mov	r1, r6
 8017b50:	4620      	mov	r0, r4
 8017b52:	f000 f819 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8017b56:	4620      	mov	r0, r4
 8017b58:	4639      	mov	r1, r7
 8017b5a:	f000 f815 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8017b5e:	4620      	mov	r0, r4
 8017b60:	b003      	add	sp, #12
 8017b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017b64:	0802f2e8 	.word	0x0802f2e8
 8017b68:	0802f9b8 	.word	0x0802f9b8
 8017b6c:	0802f3bc 	.word	0x0802f3bc
 8017b70:	0801d60f 	.word	0x0801d60f

08017b74 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8017b74:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017b76:	2000      	movs	r0, #0
 8017b78:	b12b      	cbz	r3, 8017b86 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8017b7a:	b920      	cbnz	r0, 8017b86 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8017b7c:	1a5a      	subs	r2, r3, r1
 8017b7e:	699b      	ldr	r3, [r3, #24]
 8017b80:	4250      	negs	r0, r2
 8017b82:	4150      	adcs	r0, r2
 8017b84:	e7f8      	b.n	8017b78 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8017b86:	4770      	bx	lr

08017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8017b88:	2300      	movs	r3, #0
 8017b8a:	6148      	str	r0, [r1, #20]
 8017b8c:	618b      	str	r3, [r1, #24]
 8017b8e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017b90:	b913      	cbnz	r3, 8017b98 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8017b92:	6281      	str	r1, [r0, #40]	; 0x28
 8017b94:	4770      	bx	lr
 8017b96:	4613      	mov	r3, r2
 8017b98:	699a      	ldr	r2, [r3, #24]
 8017b9a:	2a00      	cmp	r2, #0
 8017b9c:	d1fb      	bne.n	8017b96 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8017b9e:	6199      	str	r1, [r3, #24]
 8017ba0:	4770      	bx	lr

08017ba2 <_ZN8touchgfx9Container9removeAllEv>:
 8017ba2:	2200      	movs	r2, #0
 8017ba4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017ba6:	b123      	cbz	r3, 8017bb2 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8017ba8:	6999      	ldr	r1, [r3, #24]
 8017baa:	6281      	str	r1, [r0, #40]	; 0x28
 8017bac:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8017bb0:	e7f8      	b.n	8017ba4 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8017bb2:	4770      	bx	lr

08017bb4 <_ZN8touchgfx9Container6unlinkEv>:
 8017bb4:	2300      	movs	r3, #0
 8017bb6:	6283      	str	r3, [r0, #40]	; 0x28
 8017bb8:	4770      	bx	lr

08017bba <_ZNK8touchgfx9Container12getSolidRectEv>:
 8017bba:	2200      	movs	r2, #0
 8017bbc:	8002      	strh	r2, [r0, #0]
 8017bbe:	8042      	strh	r2, [r0, #2]
 8017bc0:	8082      	strh	r2, [r0, #4]
 8017bc2:	80c2      	strh	r2, [r0, #6]
 8017bc4:	4770      	bx	lr

08017bc6 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8017bc6:	b570      	push	{r4, r5, r6, lr}
 8017bc8:	460d      	mov	r5, r1
 8017bca:	4616      	mov	r6, r2
 8017bcc:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8017bce:	b13c      	cbz	r4, 8017be0 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8017bd0:	6823      	ldr	r3, [r4, #0]
 8017bd2:	4620      	mov	r0, r4
 8017bd4:	4632      	mov	r2, r6
 8017bd6:	4629      	mov	r1, r5
 8017bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017bda:	4798      	blx	r3
 8017bdc:	69a4      	ldr	r4, [r4, #24]
 8017bde:	e7f6      	b.n	8017bce <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8017be0:	bd70      	pop	{r4, r5, r6, pc}

08017be2 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8017be2:	b538      	push	{r3, r4, r5, lr}
 8017be4:	460d      	mov	r5, r1
 8017be6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8017be8:	b134      	cbz	r4, 8017bf8 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8017bea:	682b      	ldr	r3, [r5, #0]
 8017bec:	4621      	mov	r1, r4
 8017bee:	4628      	mov	r0, r5
 8017bf0:	689b      	ldr	r3, [r3, #8]
 8017bf2:	4798      	blx	r3
 8017bf4:	69a4      	ldr	r4, [r4, #24]
 8017bf6:	e7f7      	b.n	8017be8 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8017bf8:	bd38      	pop	{r3, r4, r5, pc}

08017bfa <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8017bfa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017bfc:	b19b      	cbz	r3, 8017c26 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8017bfe:	428b      	cmp	r3, r1
 8017c00:	d109      	bne.n	8017c16 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8017c02:	699a      	ldr	r2, [r3, #24]
 8017c04:	2100      	movs	r1, #0
 8017c06:	6159      	str	r1, [r3, #20]
 8017c08:	6282      	str	r2, [r0, #40]	; 0x28
 8017c0a:	b902      	cbnz	r2, 8017c0e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8017c0c:	4770      	bx	lr
 8017c0e:	6199      	str	r1, [r3, #24]
 8017c10:	4770      	bx	lr
 8017c12:	4613      	mov	r3, r2
 8017c14:	b13a      	cbz	r2, 8017c26 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8017c16:	699a      	ldr	r2, [r3, #24]
 8017c18:	428a      	cmp	r2, r1
 8017c1a:	d1fa      	bne.n	8017c12 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8017c1c:	698a      	ldr	r2, [r1, #24]
 8017c1e:	619a      	str	r2, [r3, #24]
 8017c20:	2300      	movs	r3, #0
 8017c22:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8017c26:	4770      	bx	lr

08017c28 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8017c28:	b410      	push	{r4}
 8017c2a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017c2c:	4604      	mov	r4, r0
 8017c2e:	b92b      	cbnz	r3, 8017c3c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8017c30:	6803      	ldr	r3, [r0, #0]
 8017c32:	4611      	mov	r1, r2
 8017c34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017c38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017c3a:	4718      	bx	r3
 8017c3c:	b941      	cbnz	r1, 8017c50 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8017c3e:	6193      	str	r3, [r2, #24]
 8017c40:	6282      	str	r2, [r0, #40]	; 0x28
 8017c42:	6154      	str	r4, [r2, #20]
 8017c44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017c48:	4770      	bx	lr
 8017c4a:	4603      	mov	r3, r0
 8017c4c:	2800      	cmp	r0, #0
 8017c4e:	d0f9      	beq.n	8017c44 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8017c50:	4299      	cmp	r1, r3
 8017c52:	6998      	ldr	r0, [r3, #24]
 8017c54:	d1f9      	bne.n	8017c4a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8017c56:	6190      	str	r0, [r2, #24]
 8017c58:	618a      	str	r2, [r1, #24]
 8017c5a:	e7f2      	b.n	8017c42 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08017c5c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8017c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c60:	461f      	mov	r7, r3
 8017c62:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8017c66:	460d      	mov	r5, r1
 8017c68:	4616      	mov	r6, r2
 8017c6a:	b103      	cbz	r3, 8017c6e <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8017c6c:	6038      	str	r0, [r7, #0]
 8017c6e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8017c70:	b314      	cbz	r4, 8017cb8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8017c72:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8017c76:	b1eb      	cbz	r3, 8017cb4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017c78:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8017c7c:	428d      	cmp	r5, r1
 8017c7e:	db19      	blt.n	8017cb4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017c80:	b289      	uxth	r1, r1
 8017c82:	8923      	ldrh	r3, [r4, #8]
 8017c84:	440b      	add	r3, r1
 8017c86:	b21b      	sxth	r3, r3
 8017c88:	429d      	cmp	r5, r3
 8017c8a:	da13      	bge.n	8017cb4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017c8c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8017c90:	4296      	cmp	r6, r2
 8017c92:	db0f      	blt.n	8017cb4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017c94:	b292      	uxth	r2, r2
 8017c96:	8963      	ldrh	r3, [r4, #10]
 8017c98:	4413      	add	r3, r2
 8017c9a:	b21b      	sxth	r3, r3
 8017c9c:	429e      	cmp	r6, r3
 8017c9e:	da09      	bge.n	8017cb4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017ca0:	6823      	ldr	r3, [r4, #0]
 8017ca2:	1ab2      	subs	r2, r6, r2
 8017ca4:	1a69      	subs	r1, r5, r1
 8017ca6:	4620      	mov	r0, r4
 8017ca8:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8017cac:	b212      	sxth	r2, r2
 8017cae:	463b      	mov	r3, r7
 8017cb0:	b209      	sxth	r1, r1
 8017cb2:	47c0      	blx	r8
 8017cb4:	69a4      	ldr	r4, [r4, #24]
 8017cb6:	e7db      	b.n	8017c70 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8017cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017cbc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8017cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017cc0:	4c6d      	ldr	r4, [pc, #436]	; (8017e78 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8017cc2:	b0a1      	sub	sp, #132	; 0x84
 8017cc4:	4606      	mov	r6, r0
 8017cc6:	6824      	ldr	r4, [r4, #0]
 8017cc8:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8017cca:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8017cce:	2400      	movs	r4, #0
 8017cd0:	9303      	str	r3, [sp, #12]
 8017cd2:	802c      	strh	r4, [r5, #0]
 8017cd4:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8017cd6:	802c      	strh	r4, [r5, #0]
 8017cd8:	601c      	str	r4, [r3, #0]
 8017cda:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8017cde:	f7ff ffbd 	bl	8017c5c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8017ce2:	f1b9 0f03 	cmp.w	r9, #3
 8017ce6:	f340 80c1 	ble.w	8017e6c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8017cea:	4631      	mov	r1, r6
 8017cec:	a80c      	add	r0, sp, #48	; 0x30
 8017cee:	f004 ffd7 	bl	801cca0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017cf2:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8017cf6:	9306      	str	r3, [sp, #24]
 8017cf8:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8017cfc:	9307      	str	r3, [sp, #28]
 8017cfe:	9b03      	ldr	r3, [sp, #12]
 8017d00:	f8d3 a000 	ldr.w	sl, [r3]
 8017d04:	f1ba 0f00 	cmp.w	sl, #0
 8017d08:	f000 80b3 	beq.w	8017e72 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8017d0c:	4651      	mov	r1, sl
 8017d0e:	a810      	add	r0, sp, #64	; 0x40
 8017d10:	f004 ffc6 	bl	801cca0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017d14:	2002      	movs	r0, #2
 8017d16:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8017d1a:	9b01      	ldr	r3, [sp, #4]
 8017d1c:	9a06      	ldr	r2, [sp, #24]
 8017d1e:	fb91 f1f0 	sdiv	r1, r1, r0
 8017d22:	189d      	adds	r5, r3, r2
 8017d24:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8017d28:	9a07      	ldr	r2, [sp, #28]
 8017d2a:	4419      	add	r1, r3
 8017d2c:	9b02      	ldr	r3, [sp, #8]
 8017d2e:	4413      	add	r3, r2
 8017d30:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8017d34:	1a6d      	subs	r5, r5, r1
 8017d36:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8017d3a:	fb92 f2f0 	sdiv	r2, r2, r0
 8017d3e:	440a      	add	r2, r1
 8017d40:	1a9b      	subs	r3, r3, r2
 8017d42:	435b      	muls	r3, r3
 8017d44:	fb05 3505 	mla	r5, r5, r5, r3
 8017d48:	4f4c      	ldr	r7, [pc, #304]	; (8017e7c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8017d4a:	ac10      	add	r4, sp, #64	; 0x40
 8017d4c:	f1b9 0f0c 	cmp.w	r9, #12
 8017d50:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8017d52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017d54:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8017d56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017d58:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8017d5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017d5c:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8017d60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8017d64:	f04f 0303 	mov.w	r3, #3
 8017d68:	bfd8      	it	le
 8017d6a:	f109 32ff 	addle.w	r2, r9, #4294967295
 8017d6e:	f04f 0400 	mov.w	r4, #0
 8017d72:	f8cd 9000 	str.w	r9, [sp]
 8017d76:	bfcc      	ite	gt
 8017d78:	4698      	movgt	r8, r3
 8017d7a:	fb92 f8f3 	sdivle	r8, r2, r3
 8017d7e:	1c63      	adds	r3, r4, #1
 8017d80:	aa10      	add	r2, sp, #64	; 0x40
 8017d82:	f004 0401 	and.w	r4, r4, #1
 8017d86:	f04f 0b00 	mov.w	fp, #0
 8017d8a:	9308      	str	r3, [sp, #32]
 8017d8c:	9b00      	ldr	r3, [sp, #0]
 8017d8e:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8017d92:	fb93 f3f8 	sdiv	r3, r3, r8
 8017d96:	3404      	adds	r4, #4
 8017d98:	b29b      	uxth	r3, r3
 8017d9a:	9304      	str	r3, [sp, #16]
 8017d9c:	9a04      	ldr	r2, [sp, #16]
 8017d9e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8017da2:	fb13 f302 	smulbb	r3, r3, r2
 8017da6:	9a01      	ldr	r2, [sp, #4]
 8017da8:	b29b      	uxth	r3, r3
 8017daa:	1899      	adds	r1, r3, r2
 8017dac:	9305      	str	r3, [sp, #20]
 8017dae:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8017db2:	b209      	sxth	r1, r1
 8017db4:	4299      	cmp	r1, r3
 8017db6:	db4d      	blt.n	8017e54 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8017db8:	8932      	ldrh	r2, [r6, #8]
 8017dba:	4413      	add	r3, r2
 8017dbc:	b21b      	sxth	r3, r3
 8017dbe:	4299      	cmp	r1, r3
 8017dc0:	da48      	bge.n	8017e54 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8017dc2:	9b04      	ldr	r3, [sp, #16]
 8017dc4:	6827      	ldr	r7, [r4, #0]
 8017dc6:	fb17 f703 	smulbb	r7, r7, r3
 8017dca:	9b02      	ldr	r3, [sp, #8]
 8017dcc:	b2bf      	uxth	r7, r7
 8017dce:	18fa      	adds	r2, r7, r3
 8017dd0:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8017dd4:	b212      	sxth	r2, r2
 8017dd6:	429a      	cmp	r2, r3
 8017dd8:	db3c      	blt.n	8017e54 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8017dda:	8970      	ldrh	r0, [r6, #10]
 8017ddc:	4403      	add	r3, r0
 8017dde:	b21b      	sxth	r3, r3
 8017de0:	429a      	cmp	r2, r3
 8017de2:	da37      	bge.n	8017e54 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8017de4:	2300      	movs	r3, #0
 8017de6:	4630      	mov	r0, r6
 8017de8:	930b      	str	r3, [sp, #44]	; 0x2c
 8017dea:	ab0b      	add	r3, sp, #44	; 0x2c
 8017dec:	f7ff ff36 	bl	8017c5c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8017df0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017df2:	b37a      	cbz	r2, 8017e54 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8017df4:	4552      	cmp	r2, sl
 8017df6:	d02d      	beq.n	8017e54 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8017df8:	4611      	mov	r1, r2
 8017dfa:	a80e      	add	r0, sp, #56	; 0x38
 8017dfc:	9209      	str	r2, [sp, #36]	; 0x24
 8017dfe:	f004 ff4f 	bl	801cca0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017e02:	f04f 0e02 	mov.w	lr, #2
 8017e06:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8017e0a:	9a06      	ldr	r2, [sp, #24]
 8017e0c:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8017e10:	9b01      	ldr	r3, [sp, #4]
 8017e12:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 8017e16:	4413      	add	r3, r2
 8017e18:	9a07      	ldr	r2, [sp, #28]
 8017e1a:	fb91 f1fe 	sdiv	r1, r1, lr
 8017e1e:	fb9c fcfe 	sdiv	ip, ip, lr
 8017e22:	4401      	add	r1, r0
 8017e24:	1a58      	subs	r0, r3, r1
 8017e26:	9b02      	ldr	r3, [sp, #8]
 8017e28:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8017e2c:	4413      	add	r3, r2
 8017e2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017e30:	448c      	add	ip, r1
 8017e32:	eba3 030c 	sub.w	r3, r3, ip
 8017e36:	435b      	muls	r3, r3
 8017e38:	fb00 3300 	mla	r3, r0, r0, r3
 8017e3c:	42ab      	cmp	r3, r5
 8017e3e:	d208      	bcs.n	8017e52 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8017e40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017e42:	461d      	mov	r5, r3
 8017e44:	9803      	ldr	r0, [sp, #12]
 8017e46:	6001      	str	r1, [r0, #0]
 8017e48:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8017e4a:	9805      	ldr	r0, [sp, #20]
 8017e4c:	8008      	strh	r0, [r1, #0]
 8017e4e:	992b      	ldr	r1, [sp, #172]	; 0xac
 8017e50:	800f      	strh	r7, [r1, #0]
 8017e52:	4692      	mov	sl, r2
 8017e54:	f10b 0b01 	add.w	fp, fp, #1
 8017e58:	3408      	adds	r4, #8
 8017e5a:	f1bb 0f04 	cmp.w	fp, #4
 8017e5e:	d19d      	bne.n	8017d9c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8017e60:	9b00      	ldr	r3, [sp, #0]
 8017e62:	9c08      	ldr	r4, [sp, #32]
 8017e64:	444b      	add	r3, r9
 8017e66:	4544      	cmp	r4, r8
 8017e68:	9300      	str	r3, [sp, #0]
 8017e6a:	d188      	bne.n	8017d7e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8017e6c:	b021      	add	sp, #132	; 0x84
 8017e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e72:	f04f 35ff 	mov.w	r5, #4294967295
 8017e76:	e767      	b.n	8017d48 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8017e78:	2400baf0 	.word	0x2400baf0
 8017e7c:	0802e5b8 	.word	0x0802e5b8

08017e80 <_ZN8touchgfx4RectaNERKS0_>:
 8017e80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017e84:	f9b1 7000 	ldrsh.w	r7, [r1]
 8017e88:	888c      	ldrh	r4, [r1, #4]
 8017e8a:	f9b0 9000 	ldrsh.w	r9, [r0]
 8017e8e:	443c      	add	r4, r7
 8017e90:	b2a4      	uxth	r4, r4
 8017e92:	fa0f f884 	sxth.w	r8, r4
 8017e96:	45c1      	cmp	r9, r8
 8017e98:	da2f      	bge.n	8017efa <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8017e9a:	8882      	ldrh	r2, [r0, #4]
 8017e9c:	444a      	add	r2, r9
 8017e9e:	b292      	uxth	r2, r2
 8017ea0:	fa0f fe82 	sxth.w	lr, r2
 8017ea4:	4577      	cmp	r7, lr
 8017ea6:	da28      	bge.n	8017efa <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8017ea8:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8017eac:	88cb      	ldrh	r3, [r1, #6]
 8017eae:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8017eb2:	442b      	add	r3, r5
 8017eb4:	b21b      	sxth	r3, r3
 8017eb6:	429e      	cmp	r6, r3
 8017eb8:	da1f      	bge.n	8017efa <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8017eba:	88c3      	ldrh	r3, [r0, #6]
 8017ebc:	4433      	add	r3, r6
 8017ebe:	b29b      	uxth	r3, r3
 8017ec0:	fa0f fc83 	sxth.w	ip, r3
 8017ec4:	4565      	cmp	r5, ip
 8017ec6:	da18      	bge.n	8017efa <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8017ec8:	454f      	cmp	r7, r9
 8017eca:	bfb8      	it	lt
 8017ecc:	464f      	movlt	r7, r9
 8017ece:	42b5      	cmp	r5, r6
 8017ed0:	bfb8      	it	lt
 8017ed2:	4635      	movlt	r5, r6
 8017ed4:	45f0      	cmp	r8, lr
 8017ed6:	bfd8      	it	le
 8017ed8:	4622      	movle	r2, r4
 8017eda:	1bd2      	subs	r2, r2, r7
 8017edc:	8082      	strh	r2, [r0, #4]
 8017ede:	884a      	ldrh	r2, [r1, #2]
 8017ee0:	88c9      	ldrh	r1, [r1, #6]
 8017ee2:	8007      	strh	r7, [r0, #0]
 8017ee4:	440a      	add	r2, r1
 8017ee6:	8045      	strh	r5, [r0, #2]
 8017ee8:	b292      	uxth	r2, r2
 8017eea:	b211      	sxth	r1, r2
 8017eec:	458c      	cmp	ip, r1
 8017eee:	bfa8      	it	ge
 8017ef0:	4613      	movge	r3, r2
 8017ef2:	1b5b      	subs	r3, r3, r5
 8017ef4:	80c3      	strh	r3, [r0, #6]
 8017ef6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017efa:	2300      	movs	r3, #0
 8017efc:	8003      	strh	r3, [r0, #0]
 8017efe:	8043      	strh	r3, [r0, #2]
 8017f00:	8083      	strh	r3, [r0, #4]
 8017f02:	80c3      	strh	r3, [r0, #6]
 8017f04:	e7f7      	b.n	8017ef6 <_ZN8touchgfx4RectaNERKS0_+0x76>

08017f06 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8017f06:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017f0a:	2b00      	cmp	r3, #0
 8017f0c:	dd06      	ble.n	8017f1c <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8017f0e:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8017f12:	2800      	cmp	r0, #0
 8017f14:	bfcc      	ite	gt
 8017f16:	2000      	movgt	r0, #0
 8017f18:	2001      	movle	r0, #1
 8017f1a:	4770      	bx	lr
 8017f1c:	2001      	movs	r0, #1
 8017f1e:	4770      	bx	lr

08017f20 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8017f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f24:	2300      	movs	r3, #0
 8017f26:	4604      	mov	r4, r0
 8017f28:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8017f2a:	8003      	strh	r3, [r0, #0]
 8017f2c:	8043      	strh	r3, [r0, #2]
 8017f2e:	8083      	strh	r3, [r0, #4]
 8017f30:	80c3      	strh	r3, [r0, #6]
 8017f32:	2d00      	cmp	r5, #0
 8017f34:	d040      	beq.n	8017fb8 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8017f36:	1d28      	adds	r0, r5, #4
 8017f38:	f7ff ffe5 	bl	8017f06 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017f3c:	b988      	cbnz	r0, 8017f62 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8017f3e:	4620      	mov	r0, r4
 8017f40:	f7ff ffe1 	bl	8017f06 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017f44:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8017f48:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8017f4c:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8017f50:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8017f54:	b138      	cbz	r0, 8017f66 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8017f56:	8022      	strh	r2, [r4, #0]
 8017f58:	8063      	strh	r3, [r4, #2]
 8017f5a:	f8a4 e004 	strh.w	lr, [r4, #4]
 8017f5e:	f8a4 c006 	strh.w	ip, [r4, #6]
 8017f62:	69ad      	ldr	r5, [r5, #24]
 8017f64:	e7e5      	b.n	8017f32 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8017f66:	f9b4 0000 	ldrsh.w	r0, [r4]
 8017f6a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8017f6e:	4290      	cmp	r0, r2
 8017f70:	4607      	mov	r7, r0
 8017f72:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8017f76:	460e      	mov	r6, r1
 8017f78:	bfa8      	it	ge
 8017f7a:	4617      	movge	r7, r2
 8017f7c:	4299      	cmp	r1, r3
 8017f7e:	4472      	add	r2, lr
 8017f80:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8017f84:	bfa8      	it	ge
 8017f86:	461e      	movge	r6, r3
 8017f88:	4440      	add	r0, r8
 8017f8a:	4471      	add	r1, lr
 8017f8c:	4463      	add	r3, ip
 8017f8e:	b200      	sxth	r0, r0
 8017f90:	8027      	strh	r7, [r4, #0]
 8017f92:	b212      	sxth	r2, r2
 8017f94:	8066      	strh	r6, [r4, #2]
 8017f96:	b209      	sxth	r1, r1
 8017f98:	b21b      	sxth	r3, r3
 8017f9a:	4290      	cmp	r0, r2
 8017f9c:	bfac      	ite	ge
 8017f9e:	ebc7 0200 	rsbge	r2, r7, r0
 8017fa2:	ebc7 0202 	rsblt	r2, r7, r2
 8017fa6:	4299      	cmp	r1, r3
 8017fa8:	bfac      	ite	ge
 8017faa:	ebc6 0301 	rsbge	r3, r6, r1
 8017fae:	ebc6 0303 	rsblt	r3, r6, r3
 8017fb2:	80a2      	strh	r2, [r4, #4]
 8017fb4:	80e3      	strh	r3, [r4, #6]
 8017fb6:	e7d4      	b.n	8017f62 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8017fb8:	4620      	mov	r0, r4
 8017fba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017fbe <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8017fbe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8017fc2:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8017fc6:	b383      	cbz	r3, 801802a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8017fc8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8017fca:	b374      	cbz	r4, 801802a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8017fcc:	f9b1 5000 	ldrsh.w	r5, [r1]
 8017fd0:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8017fd4:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8017fd8:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8017fdc:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8017fe0:	b303      	cbz	r3, 8018024 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8017fe2:	4668      	mov	r0, sp
 8017fe4:	1d21      	adds	r1, r4, #4
 8017fe6:	f8ad 5000 	strh.w	r5, [sp]
 8017fea:	f8ad 6002 	strh.w	r6, [sp, #2]
 8017fee:	f8ad 7004 	strh.w	r7, [sp, #4]
 8017ff2:	f8ad 8006 	strh.w	r8, [sp, #6]
 8017ff6:	f7ff ff43 	bl	8017e80 <_ZN8touchgfx4RectaNERKS0_>
 8017ffa:	4668      	mov	r0, sp
 8017ffc:	f7ff ff83 	bl	8017f06 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018000:	b980      	cbnz	r0, 8018024 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8018002:	f8bd 3000 	ldrh.w	r3, [sp]
 8018006:	4669      	mov	r1, sp
 8018008:	88a2      	ldrh	r2, [r4, #4]
 801800a:	4620      	mov	r0, r4
 801800c:	1a9b      	subs	r3, r3, r2
 801800e:	88e2      	ldrh	r2, [r4, #6]
 8018010:	f8ad 3000 	strh.w	r3, [sp]
 8018014:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018018:	1a9b      	subs	r3, r3, r2
 801801a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801801e:	6823      	ldr	r3, [r4, #0]
 8018020:	689b      	ldr	r3, [r3, #8]
 8018022:	4798      	blx	r3
 8018024:	69a4      	ldr	r4, [r4, #24]
 8018026:	2c00      	cmp	r4, #0
 8018028:	d1d8      	bne.n	8017fdc <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 801802a:	b002      	add	sp, #8
 801802c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018030 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8018030:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018032:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8018036:	460d      	mov	r5, r1
 8018038:	4616      	mov	r6, r2
 801803a:	b323      	cbz	r3, 8018086 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801803c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801803e:	b314      	cbz	r4, 8018086 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8018040:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8018044:	b1eb      	cbz	r3, 8018082 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8018046:	6828      	ldr	r0, [r5, #0]
 8018048:	466b      	mov	r3, sp
 801804a:	6869      	ldr	r1, [r5, #4]
 801804c:	c303      	stmia	r3!, {r0, r1}
 801804e:	4668      	mov	r0, sp
 8018050:	1d21      	adds	r1, r4, #4
 8018052:	f7ff ff15 	bl	8017e80 <_ZN8touchgfx4RectaNERKS0_>
 8018056:	4668      	mov	r0, sp
 8018058:	f7ff ff55 	bl	8017f06 <_ZNK8touchgfx4Rect7isEmptyEv>
 801805c:	b988      	cbnz	r0, 8018082 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801805e:	f8bd 3000 	ldrh.w	r3, [sp]
 8018062:	4669      	mov	r1, sp
 8018064:	88a2      	ldrh	r2, [r4, #4]
 8018066:	4620      	mov	r0, r4
 8018068:	1a9b      	subs	r3, r3, r2
 801806a:	88e2      	ldrh	r2, [r4, #6]
 801806c:	f8ad 3000 	strh.w	r3, [sp]
 8018070:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018074:	1a9b      	subs	r3, r3, r2
 8018076:	4632      	mov	r2, r6
 8018078:	f8ad 3002 	strh.w	r3, [sp, #2]
 801807c:	6823      	ldr	r3, [r4, #0]
 801807e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018080:	4798      	blx	r3
 8018082:	69a4      	ldr	r4, [r4, #24]
 8018084:	e7db      	b.n	801803e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8018086:	b002      	add	sp, #8
 8018088:	bd70      	pop	{r4, r5, r6, pc}

0801808a <_ZNK8touchgfx6Slider15getIndicatorMinEv>:
 801808a:	f9b0 00e4 	ldrsh.w	r0, [r0, #228]	; 0xe4
 801808e:	4770      	bx	lr

08018090 <_ZNK8touchgfx6Slider15getIndicatorMaxEv>:
 8018090:	f9b0 00e6 	ldrsh.w	r0, [r0, #230]	; 0xe6
 8018094:	4770      	bx	lr

08018096 <_ZNK8touchgfx6Slider11getMinValueEv>:
 8018096:	f9b0 0030 	ldrsh.w	r0, [r0, #48]	; 0x30
 801809a:	4770      	bx	lr

0801809c <_ZNK8touchgfx6Slider11getMaxValueEv>:
 801809c:	f9b0 0032 	ldrsh.w	r0, [r0, #50]	; 0x32
 80180a0:	4770      	bx	lr

080180a2 <_ZN8touchgfx6Slider8setValueEs>:
 80180a2:	b570      	push	{r4, r5, r6, lr}
 80180a4:	6803      	ldr	r3, [r0, #0]
 80180a6:	4604      	mov	r4, r0
 80180a8:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
 80180ac:	4798      	blx	r3
 80180ae:	4601      	mov	r1, r0
 80180b0:	462b      	mov	r3, r5
 80180b2:	4620      	mov	r0, r4
 80180b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80180b8:	4718      	bx	r3

080180ba <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE>:
 80180ba:	b570      	push	{r4, r5, r6, lr}
 80180bc:	6803      	ldr	r3, [r0, #0]
 80180be:	4604      	mov	r4, r0
 80180c0:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 80180c4:	f8d3 60ac 	ldr.w	r6, [r3, #172]	; 0xac
 80180c8:	b95a      	cbnz	r2, 80180e2 <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x28>
 80180ca:	894d      	ldrh	r5, [r1, #10]
 80180cc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80180d0:	4620      	mov	r0, r4
 80180d2:	4798      	blx	r3
 80180d4:	1a29      	subs	r1, r5, r0
 80180d6:	4633      	mov	r3, r6
 80180d8:	4620      	mov	r0, r4
 80180da:	b209      	sxth	r1, r1
 80180dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80180e0:	4718      	bx	r3
 80180e2:	898d      	ldrh	r5, [r1, #12]
 80180e4:	e7f2      	b.n	80180cc <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x12>

080180e6 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv>:
 80180e6:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 80180ea:	2302      	movs	r3, #2
 80180ec:	b922      	cbnz	r2, 80180f8 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0x12>
 80180ee:	f9b0 0094 	ldrsh.w	r0, [r0, #148]	; 0x94
 80180f2:	fb90 f0f3 	sdiv	r0, r0, r3
 80180f6:	4770      	bx	lr
 80180f8:	f9b0 0096 	ldrsh.w	r0, [r0, #150]	; 0x96
 80180fc:	e7f9      	b.n	80180f2 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0xc>

080180fe <_ZN8touchgfx6Slider13setValueRangeEsss>:
 80180fe:	8642      	strh	r2, [r0, #50]	; 0x32
 8018100:	6802      	ldr	r2, [r0, #0]
 8018102:	8601      	strh	r1, [r0, #48]	; 0x30
 8018104:	4619      	mov	r1, r3
 8018106:	b410      	push	{r4}
 8018108:	f85d 4b04 	ldr.w	r4, [sp], #4
 801810c:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 8018110:	4710      	bx	r2

08018112 <_ZN8touchgfx6Slider13setValueRangeEss>:
 8018112:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
 8018116:	428b      	cmp	r3, r1
 8018118:	b410      	push	{r4}
 801811a:	db09      	blt.n	8018130 <_ZN8touchgfx6Slider13setValueRangeEss+0x1e>
 801811c:	4293      	cmp	r3, r2
 801811e:	bfa8      	it	ge
 8018120:	4613      	movge	r3, r2
 8018122:	6804      	ldr	r4, [r0, #0]
 8018124:	f8d4 4098 	ldr.w	r4, [r4, #152]	; 0x98
 8018128:	46a4      	mov	ip, r4
 801812a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801812e:	4760      	bx	ip
 8018130:	460b      	mov	r3, r1
 8018132:	e7f6      	b.n	8018122 <_ZN8touchgfx6Slider13setValueRangeEss+0x10>

08018134 <_ZNK8touchgfx6Slider29getIndicatorPositionRangeSizeEv>:
 8018134:	f9b0 20e6 	ldrsh.w	r2, [r0, #230]	; 0xe6
 8018138:	f9b0 00e4 	ldrsh.w	r0, [r0, #228]	; 0xe4
 801813c:	1a10      	subs	r0, r2, r0
 801813e:	4770      	bx	lr

08018140 <_ZNK8touchgfx6Slider17getValueRangeSizeEv>:
 8018140:	f9b0 2032 	ldrsh.w	r2, [r0, #50]	; 0x32
 8018144:	f9b0 0030 	ldrsh.w	r0, [r0, #48]	; 0x30
 8018148:	1a10      	subs	r0, r2, r0
 801814a:	4770      	bx	lr

0801814c <_ZNK8touchgfx6Slider15valueToPositionEi>:
 801814c:	b570      	push	{r4, r5, r6, lr}
 801814e:	f9b0 5032 	ldrsh.w	r5, [r0, #50]	; 0x32
 8018152:	4604      	mov	r4, r0
 8018154:	f9b0 3030 	ldrsh.w	r3, [r0, #48]	; 0x30
 8018158:	428d      	cmp	r5, r1
 801815a:	bfa8      	it	ge
 801815c:	460d      	movge	r5, r1
 801815e:	429d      	cmp	r5, r3
 8018160:	bfac      	ite	ge
 8018162:	ebc3 0505 	rsbge	r5, r3, r5
 8018166:	ebc3 0503 	rsblt	r5, r3, r3
 801816a:	6803      	ldr	r3, [r0, #0]
 801816c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8018170:	4798      	blx	r3
 8018172:	6823      	ldr	r3, [r4, #0]
 8018174:	4606      	mov	r6, r0
 8018176:	4620      	mov	r0, r4
 8018178:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801817c:	4798      	blx	r3
 801817e:	4631      	mov	r1, r6
 8018180:	4602      	mov	r2, r0
 8018182:	4628      	mov	r0, r5
 8018184:	f004 febb 	bl	801cefe <_ZN8touchgfx6muldivElll>
 8018188:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801818c:	2b01      	cmp	r3, #1
 801818e:	bf0b      	itete	eq
 8018190:	f8b4 30e6 	ldrheq.w	r3, [r4, #230]	; 0xe6
 8018194:	f8b4 30e4 	ldrhne.w	r3, [r4, #228]	; 0xe4
 8018198:	1a18      	subeq	r0, r3, r0
 801819a:	18c0      	addne	r0, r0, r3
 801819c:	b200      	sxth	r0, r0
 801819e:	bd70      	pop	{r4, r5, r6, pc}

080181a0 <_ZNK8touchgfx6Slider15positionToValueEs>:
 80181a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80181a2:	f9b0 30e6 	ldrsh.w	r3, [r0, #230]	; 0xe6
 80181a6:	4605      	mov	r5, r0
 80181a8:	f9b0 40e4 	ldrsh.w	r4, [r0, #228]	; 0xe4
 80181ac:	4299      	cmp	r1, r3
 80181ae:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 80181b2:	f9b0 6030 	ldrsh.w	r6, [r0, #48]	; 0x30
 80181b6:	bfa8      	it	ge
 80181b8:	4619      	movge	r1, r3
 80181ba:	42a1      	cmp	r1, r4
 80181bc:	bfb8      	it	lt
 80181be:	4621      	movlt	r1, r4
 80181c0:	2a01      	cmp	r2, #1
 80181c2:	b289      	uxth	r1, r1
 80181c4:	bf08      	it	eq
 80181c6:	1a5c      	subeq	r4, r3, r1
 80181c8:	6803      	ldr	r3, [r0, #0]
 80181ca:	bf18      	it	ne
 80181cc:	1b0c      	subne	r4, r1, r4
 80181ce:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80181d2:	4798      	blx	r3
 80181d4:	682b      	ldr	r3, [r5, #0]
 80181d6:	4607      	mov	r7, r0
 80181d8:	b224      	sxth	r4, r4
 80181da:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80181de:	4628      	mov	r0, r5
 80181e0:	4798      	blx	r3
 80181e2:	4639      	mov	r1, r7
 80181e4:	4602      	mov	r2, r0
 80181e6:	4620      	mov	r0, r4
 80181e8:	f004 fe89 	bl	801cefe <_ZN8touchgfx6muldivElll>
 80181ec:	4430      	add	r0, r6
 80181ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080181f0 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE>:
 80181f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80181f4:	790b      	ldrb	r3, [r1, #4]
 80181f6:	4604      	mov	r4, r0
 80181f8:	460d      	mov	r5, r1
 80181fa:	b32b      	cbz	r3, 8018248 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x58>
 80181fc:	2b01      	cmp	r3, #1
 80181fe:	d137      	bne.n	8018270 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x80>
 8018200:	6823      	ldr	r3, [r4, #0]
 8018202:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8018206:	f8d3 70ac 	ldr.w	r7, [r3, #172]	; 0xac
 801820a:	2a00      	cmp	r2, #0
 801820c:	d12e      	bne.n	801826c <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 801820e:	88ee      	ldrh	r6, [r5, #6]
 8018210:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8018214:	4620      	mov	r0, r4
 8018216:	4798      	blx	r3
 8018218:	1a31      	subs	r1, r6, r0
 801821a:	4620      	mov	r0, r4
 801821c:	b209      	sxth	r1, r1
 801821e:	47b8      	blx	r7
 8018220:	792b      	ldrb	r3, [r5, #4]
 8018222:	2b01      	cmp	r3, #1
 8018224:	d124      	bne.n	8018270 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x80>
 8018226:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
 801822a:	b308      	cbz	r0, 8018270 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x80>
 801822c:	6803      	ldr	r3, [r0, #0]
 801822e:	68db      	ldr	r3, [r3, #12]
 8018230:	4798      	blx	r3
 8018232:	b1e8      	cbz	r0, 8018270 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x80>
 8018234:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
 8018238:	4621      	mov	r1, r4
 801823a:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	; 0x2e
 801823e:	6803      	ldr	r3, [r0, #0]
 8018240:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018244:	689b      	ldr	r3, [r3, #8]
 8018246:	4718      	bx	r3
 8018248:	f8d0 00e8 	ldr.w	r0, [r0, #232]	; 0xe8
 801824c:	2800      	cmp	r0, #0
 801824e:	d0d7      	beq.n	8018200 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 8018250:	6803      	ldr	r3, [r0, #0]
 8018252:	68db      	ldr	r3, [r3, #12]
 8018254:	4798      	blx	r3
 8018256:	2800      	cmp	r0, #0
 8018258:	d0d2      	beq.n	8018200 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 801825a:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
 801825e:	4621      	mov	r1, r4
 8018260:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	; 0x2e
 8018264:	6803      	ldr	r3, [r0, #0]
 8018266:	689b      	ldr	r3, [r3, #8]
 8018268:	4798      	blx	r3
 801826a:	e7c9      	b.n	8018200 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 801826c:	892e      	ldrh	r6, [r5, #8]
 801826e:	e7cf      	b.n	8018210 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x20>
 8018270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018274 <_ZN8touchgfx6Slider23updateIndicatorPositionEs>:
 8018274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018278:	f9b0 80e4 	ldrsh.w	r8, [r0, #228]	; 0xe4
 801827c:	4604      	mov	r4, r0
 801827e:	308c      	adds	r0, #140	; 0x8c
 8018280:	4588      	cmp	r8, r1
 8018282:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8018286:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
 801828a:	bfb8      	it	lt
 801828c:	4688      	movlt	r8, r1
 801828e:	f9b0 105a 	ldrsh.w	r1, [r0, #90]	; 0x5a
 8018292:	4588      	cmp	r8, r1
 8018294:	bfa8      	it	ge
 8018296:	4688      	movge	r8, r1
 8018298:	fa1f f788 	uxth.w	r7, r8
 801829c:	2b00      	cmp	r3, #0
 801829e:	d130      	bne.n	8018302 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x8e>
 80182a0:	f9b4 2092 	ldrsh.w	r2, [r4, #146]	; 0x92
 80182a4:	4641      	mov	r1, r8
 80182a6:	f7eb fff3 	bl	8004290 <_ZN8touchgfx8Drawable6moveToEss>
 80182aa:	4630      	mov	r0, r6
 80182ac:	f004 fc5d 	bl	801cb6a <_ZNK8touchgfx8Drawable10invalidateEv>
 80182b0:	f8b4 20bc 	ldrh.w	r2, [r4, #188]	; 0xbc
 80182b4:	6823      	ldr	r3, [r4, #0]
 80182b6:	4620      	mov	r0, r4
 80182b8:	1abf      	subs	r7, r7, r2
 80182ba:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80182be:	b2bf      	uxth	r7, r7
 80182c0:	4798      	blx	r3
 80182c2:	4407      	add	r7, r0
 80182c4:	f8a4 70c0 	strh.w	r7, [r4, #192]	; 0xc0
 80182c8:	4630      	mov	r0, r6
 80182ca:	f004 fc4e 	bl	801cb6a <_ZNK8touchgfx8Drawable10invalidateEv>
 80182ce:	6823      	ldr	r3, [r4, #0]
 80182d0:	4641      	mov	r1, r8
 80182d2:	4620      	mov	r0, r4
 80182d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80182d8:	4798      	blx	r3
 80182da:	85e0      	strh	r0, [r4, #46]	; 0x2e
 80182dc:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
 80182e0:	2800      	cmp	r0, #0
 80182e2:	d03c      	beq.n	801835e <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xea>
 80182e4:	6803      	ldr	r3, [r0, #0]
 80182e6:	68db      	ldr	r3, [r3, #12]
 80182e8:	4798      	blx	r3
 80182ea:	2800      	cmp	r0, #0
 80182ec:	d037      	beq.n	801835e <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xea>
 80182ee:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
 80182f2:	4621      	mov	r1, r4
 80182f4:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	; 0x2e
 80182f8:	6803      	ldr	r3, [r0, #0]
 80182fa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80182fe:	689b      	ldr	r3, [r3, #8]
 8018300:	4718      	bx	r3
 8018302:	4642      	mov	r2, r8
 8018304:	f9b4 1090 	ldrsh.w	r1, [r4, #144]	; 0x90
 8018308:	f7eb ffc2 	bl	8004290 <_ZN8touchgfx8Drawable6moveToEss>
 801830c:	4630      	mov	r0, r6
 801830e:	f004 fc2c 	bl	801cb6a <_ZNK8touchgfx8Drawable10invalidateEv>
 8018312:	8f60      	ldrh	r0, [r4, #58]	; 0x3a
 8018314:	8fe5      	ldrh	r5, [r4, #62]	; 0x3e
 8018316:	6823      	ldr	r3, [r4, #0]
 8018318:	4405      	add	r5, r0
 801831a:	4620      	mov	r0, r4
 801831c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8018320:	b2ad      	uxth	r5, r5
 8018322:	4798      	blx	r3
 8018324:	6823      	ldr	r3, [r4, #0]
 8018326:	1bed      	subs	r5, r5, r7
 8018328:	f9b4 a0bc 	ldrsh.w	sl, [r4, #188]	; 0xbc
 801832c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8018330:	1a2d      	subs	r5, r5, r0
 8018332:	4620      	mov	r0, r4
 8018334:	4798      	blx	r3
 8018336:	4438      	add	r0, r7
 8018338:	b2ad      	uxth	r5, r5
 801833a:	f9b4 90c0 	ldrsh.w	r9, [r4, #192]	; 0xc0
 801833e:	b202      	sxth	r2, r0
 8018340:	4651      	mov	r1, sl
 8018342:	4630      	mov	r0, r6
 8018344:	f7eb fefb 	bl	800413e <_ZN8touchgfx8Drawable5setXYEss>
 8018348:	4630      	mov	r0, r6
 801834a:	b22a      	sxth	r2, r5
 801834c:	4649      	mov	r1, r9
 801834e:	f7eb ff52 	bl	80041f6 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8018352:	f8b4 006a 	ldrh.w	r0, [r4, #106]	; 0x6a
 8018356:	1a2d      	subs	r5, r5, r0
 8018358:	f8a4 5066 	strh.w	r5, [r4, #102]	; 0x66
 801835c:	e7b4      	b.n	80182c8 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x54>
 801835e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08018362 <_ZN8touchgfx8Drawable11setPositionERKS0_>:
 8018362:	b570      	push	{r4, r5, r6, lr}
 8018364:	4604      	mov	r4, r0
 8018366:	f9b1 5008 	ldrsh.w	r5, [r1, #8]
 801836a:	f9b1 600a 	ldrsh.w	r6, [r1, #10]
 801836e:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 8018372:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 8018376:	f7eb fee2 	bl	800413e <_ZN8touchgfx8Drawable5setXYEss>
 801837a:	4632      	mov	r2, r6
 801837c:	4629      	mov	r1, r5
 801837e:	4620      	mov	r0, r4
 8018380:	f7eb ff39 	bl	80041f6 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8018384:	bd70      	pop	{r4, r5, r6, pc}

08018386 <_ZN8touchgfx6Slider21setupHorizontalSliderEsssss>:
 8018386:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801838a:	f04f 0a00 	mov.w	sl, #0
 801838e:	f100 0b34 	add.w	fp, r0, #52	; 0x34
 8018392:	4604      	mov	r4, r0
 8018394:	461d      	mov	r5, r3
 8018396:	f880 a02c 	strb.w	sl, [r0, #44]	; 0x2c
 801839a:	4658      	mov	r0, fp
 801839c:	4690      	mov	r8, r2
 801839e:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 80183a2:	4689      	mov	r9, r1
 80183a4:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 80183a8:	f7eb fec9 	bl	800413e <_ZN8touchgfx8Drawable5setXYEss>
 80183ac:	4659      	mov	r1, fp
 80183ae:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 80183b2:	f7ff ffd6 	bl	8018362 <_ZN8touchgfx8Drawable11setPositionERKS0_>
 80183b6:	4652      	mov	r2, sl
 80183b8:	4651      	mov	r1, sl
 80183ba:	f104 0060 	add.w	r0, r4, #96	; 0x60
 80183be:	f7eb febe 	bl	800413e <_ZN8touchgfx8Drawable5setXYEss>
 80183c2:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80183c4:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 80183c6:	4620      	mov	r0, r4
 80183c8:	4490      	add	r8, r2
 80183ca:	f8b4 2096 	ldrh.w	r2, [r4, #150]	; 0x96
 80183ce:	f8a4 5092 	strh.w	r5, [r4, #146]	; 0x92
 80183d2:	4489      	add	r9, r1
 80183d4:	4415      	add	r5, r2
 80183d6:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
 80183da:	fa0f f288 	sxth.w	r2, r8
 80183de:	f8a4 70e4 	strh.w	r7, [r4, #228]	; 0xe4
 80183e2:	1873      	adds	r3, r6, r1
 80183e4:	b22d      	sxth	r5, r5
 80183e6:	fa0f f989 	sxth.w	r9, r9
 80183ea:	f8a4 60e6 	strh.w	r6, [r4, #230]	; 0xe6
 80183ee:	b219      	sxth	r1, r3
 80183f0:	42aa      	cmp	r2, r5
 80183f2:	bfb8      	it	lt
 80183f4:	462a      	movlt	r2, r5
 80183f6:	4549      	cmp	r1, r9
 80183f8:	bfb8      	it	lt
 80183fa:	4649      	movlt	r1, r9
 80183fc:	f7eb fefb 	bl	80041f6 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8018400:	6823      	ldr	r3, [r4, #0]
 8018402:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	; 0x2e
 8018406:	4620      	mov	r0, r4
 8018408:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801840c:	b001      	add	sp, #4
 801840e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018412:	4718      	bx	r3

08018414 <_ZN8touchgfx6Slider19setupVerticalSliderEsssss>:
 8018414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018418:	461d      	mov	r5, r3
 801841a:	f100 0a34 	add.w	sl, r0, #52	; 0x34
 801841e:	2301      	movs	r3, #1
 8018420:	4604      	mov	r4, r0
 8018422:	4617      	mov	r7, r2
 8018424:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 8018428:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 801842c:	4650      	mov	r0, sl
 801842e:	460e      	mov	r6, r1
 8018430:	f9bd 9020 	ldrsh.w	r9, [sp, #32]
 8018434:	f7eb fe83 	bl	800413e <_ZN8touchgfx8Drawable5setXYEss>
 8018438:	4651      	mov	r1, sl
 801843a:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 801843e:	f7ff ff90 	bl	8018362 <_ZN8touchgfx8Drawable11setPositionERKS0_>
 8018442:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 8018444:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8018446:	4620      	mov	r0, r4
 8018448:	f8b4 3096 	ldrh.w	r3, [r4, #150]	; 0x96
 801844c:	440e      	add	r6, r1
 801844e:	443a      	add	r2, r7
 8018450:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
 8018454:	4443      	add	r3, r8
 8018456:	f8a4 5090 	strh.w	r5, [r4, #144]	; 0x90
 801845a:	b212      	sxth	r2, r2
 801845c:	440d      	add	r5, r1
 801845e:	b21b      	sxth	r3, r3
 8018460:	f8a4 90e4 	strh.w	r9, [r4, #228]	; 0xe4
 8018464:	b231      	sxth	r1, r6
 8018466:	f8a4 80e6 	strh.w	r8, [r4, #230]	; 0xe6
 801846a:	429a      	cmp	r2, r3
 801846c:	b22d      	sxth	r5, r5
 801846e:	bfb8      	it	lt
 8018470:	461a      	movlt	r2, r3
 8018472:	42a9      	cmp	r1, r5
 8018474:	bfb8      	it	lt
 8018476:	4629      	movlt	r1, r5
 8018478:	f7eb febd 	bl	80041f6 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 801847c:	6823      	ldr	r3, [r4, #0]
 801847e:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	; 0x2e
 8018482:	4620      	mov	r0, r4
 8018484:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8018488:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801848c:	4718      	bx	r3
	...

08018490 <_ZN8touchgfx6SliderC1Ev>:
 8018490:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8018494:	4604      	mov	r4, r0
 8018496:	f7eb fd8b 	bl	8003fb0 <_ZN8touchgfx8DrawableC1Ev>
 801849a:	4b28      	ldr	r3, [pc, #160]	; (801853c <_ZN8touchgfx6SliderC1Ev+0xac>)
 801849c:	2500      	movs	r5, #0
 801849e:	ae02      	add	r6, sp, #8
 80184a0:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80184a4:	6023      	str	r3, [r4, #0]
 80184a6:	f104 0934 	add.w	r9, r4, #52	; 0x34
 80184aa:	2364      	movs	r3, #100	; 0x64
 80184ac:	f104 0a60 	add.w	sl, r4, #96	; 0x60
 80184b0:	f826 7d04 	strh.w	r7, [r6, #-4]!
 80184b4:	4648      	mov	r0, r9
 80184b6:	8663      	strh	r3, [r4, #50]	; 0x32
 80184b8:	4631      	mov	r1, r6
 80184ba:	62a5      	str	r5, [r4, #40]	; 0x28
 80184bc:	f104 088c 	add.w	r8, r4, #140	; 0x8c
 80184c0:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
 80184c4:	85e5      	strh	r5, [r4, #46]	; 0x2e
 80184c6:	8625      	strh	r5, [r4, #48]	; 0x30
 80184c8:	f7ed fa7a 	bl	80059c0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80184cc:	4631      	mov	r1, r6
 80184ce:	4650      	mov	r0, sl
 80184d0:	f8ad 7004 	strh.w	r7, [sp, #4]
 80184d4:	f7ed fa74 	bl	80059c0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80184d8:	4631      	mov	r1, r6
 80184da:	f104 06b8 	add.w	r6, r4, #184	; 0xb8
 80184de:	4640      	mov	r0, r8
 80184e0:	f8ad 7004 	strh.w	r7, [sp, #4]
 80184e4:	f7ed fa6c 	bl	80059c0 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80184e8:	4630      	mov	r0, r6
 80184ea:	f7eb fd61 	bl	8003fb0 <_ZN8touchgfx8DrawableC1Ev>
 80184ee:	4b14      	ldr	r3, [pc, #80]	; (8018540 <_ZN8touchgfx6SliderC1Ev+0xb0>)
 80184f0:	4651      	mov	r1, sl
 80184f2:	4630      	mov	r0, r6
 80184f4:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 80184f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80184fc:	f8c4 50e0 	str.w	r5, [r4, #224]	; 0xe0
 8018500:	e9c4 3539 	strd	r3, r5, [r4, #228]	; 0xe4
 8018504:	2301      	movs	r3, #1
 8018506:	e9c4 553b 	strd	r5, r5, [r4, #236]	; 0xec
 801850a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 801850e:	f7ff fb3b 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8018512:	4649      	mov	r1, r9
 8018514:	4620      	mov	r0, r4
 8018516:	f7ff fb37 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801851a:	4631      	mov	r1, r6
 801851c:	4620      	mov	r0, r4
 801851e:	f7ff fb33 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8018522:	4641      	mov	r1, r8
 8018524:	4620      	mov	r0, r4
 8018526:	f7ff fb2f 	bl	8017b88 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801852a:	4620      	mov	r0, r4
 801852c:	f9b4 10e4 	ldrsh.w	r1, [r4, #228]	; 0xe4
 8018530:	f7ff fea0 	bl	8018274 <_ZN8touchgfx6Slider23updateIndicatorPositionEs>
 8018534:	4620      	mov	r0, r4
 8018536:	b002      	add	sp, #8
 8018538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801853c:	0802f44c 	.word	0x0802f44c
 8018540:	0802f3bc 	.word	0x0802f3bc

08018544 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>:
 8018544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018548:	4604      	mov	r4, r0
 801854a:	f100 0634 	add.w	r6, r0, #52	; 0x34
 801854e:	4689      	mov	r9, r1
 8018550:	461f      	mov	r7, r3
 8018552:	f104 058c 	add.w	r5, r4, #140	; 0x8c
 8018556:	4630      	mov	r0, r6
 8018558:	4690      	mov	r8, r2
 801855a:	f004 fb06 	bl	801cb6a <_ZNK8touchgfx8Drawable10invalidateEv>
 801855e:	4628      	mov	r0, r5
 8018560:	f004 fb03 	bl	801cb6a <_ZNK8touchgfx8Drawable10invalidateEv>
 8018564:	4649      	mov	r1, r9
 8018566:	4630      	mov	r0, r6
 8018568:	f001 fcd7 	bl	8019f1a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801856c:	4641      	mov	r1, r8
 801856e:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8018572:	f001 fcd2 	bl	8019f1a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8018576:	4639      	mov	r1, r7
 8018578:	4628      	mov	r0, r5
 801857a:	f001 fcce 	bl	8019f1a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801857e:	f9b4 206a 	ldrsh.w	r2, [r4, #106]	; 0x6a
 8018582:	f9b4 1068 	ldrsh.w	r1, [r4, #104]	; 0x68
 8018586:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 801858a:	f7eb fe34 	bl	80041f6 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 801858e:	6823      	ldr	r3, [r4, #0]
 8018590:	f9b4 102e 	ldrsh.w	r1, [r4, #46]	; 0x2e
 8018594:	4620      	mov	r0, r4
 8018596:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801859a:	4798      	blx	r3
 801859c:	4630      	mov	r0, r6
 801859e:	f004 fae4 	bl	801cb6a <_ZNK8touchgfx8Drawable10invalidateEv>
 80185a2:	4628      	mov	r0, r5
 80185a4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80185a8:	f004 badf 	b.w	801cb6a <_ZNK8touchgfx8Drawable10invalidateEv>

080185ac <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 80185ac:	4770      	bx	lr

080185ae <_ZN8touchgfx3HAL10FlushCacheEv>:
 80185ae:	4770      	bx	lr

080185b0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80185b0:	6803      	ldr	r3, [r0, #0]
 80185b2:	b513      	push	{r0, r1, r4, lr}
 80185b4:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 80185b8:	2300      	movs	r3, #0
 80185ba:	e9cd 3300 	strd	r3, r3, [sp]
 80185be:	466b      	mov	r3, sp
 80185c0:	47a0      	blx	r4
 80185c2:	b002      	add	sp, #8
 80185c4:	bd10      	pop	{r4, pc}

080185c6 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 80185c6:	2301      	movs	r3, #1
 80185c8:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80185cc:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
 80185d0:	4770      	bx	lr

080185d2 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80185d2:	2301      	movs	r3, #1
 80185d4:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80185d8:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
 80185dc:	4770      	bx	lr

080185de <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80185de:	6843      	ldr	r3, [r0, #4]
 80185e0:	2201      	movs	r2, #1
 80185e2:	725a      	strb	r2, [r3, #9]
 80185e4:	6840      	ldr	r0, [r0, #4]
 80185e6:	6803      	ldr	r3, [r0, #0]
 80185e8:	691b      	ldr	r3, [r3, #16]
 80185ea:	4718      	bx	r3

080185ec <_ZN8touchgfx3HAL8flushDMAEv>:
 80185ec:	6840      	ldr	r0, [r0, #4]
 80185ee:	6803      	ldr	r3, [r0, #0]
 80185f0:	689b      	ldr	r3, [r3, #8]
 80185f2:	4718      	bx	r3

080185f4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 80185f4:	b530      	push	{r4, r5, lr}
 80185f6:	b08b      	sub	sp, #44	; 0x2c
 80185f8:	6804      	ldr	r4, [r0, #0]
 80185fa:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 80185fe:	9509      	str	r5, [sp, #36]	; 0x24
 8018600:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8018604:	9508      	str	r5, [sp, #32]
 8018606:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 801860a:	9507      	str	r5, [sp, #28]
 801860c:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8018610:	9506      	str	r5, [sp, #24]
 8018612:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8018616:	9505      	str	r5, [sp, #20]
 8018618:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 801861c:	9504      	str	r5, [sp, #16]
 801861e:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8018622:	9503      	str	r5, [sp, #12]
 8018624:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8018628:	9502      	str	r5, [sp, #8]
 801862a:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801862e:	e9cd 3500 	strd	r3, r5, [sp]
 8018632:	4613      	mov	r3, r2
 8018634:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8018636:	2200      	movs	r2, #0
 8018638:	47a0      	blx	r4
 801863a:	b00b      	add	sp, #44	; 0x2c
 801863c:	bd30      	pop	{r4, r5, pc}
	...

08018640 <_ZN8touchgfx3HAL10beginFrameEv>:
 8018640:	4b04      	ldr	r3, [pc, #16]	; (8018654 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8018642:	781b      	ldrb	r3, [r3, #0]
 8018644:	b123      	cbz	r3, 8018650 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8018646:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
 801864a:	f080 0001 	eor.w	r0, r0, #1
 801864e:	4770      	bx	lr
 8018650:	2001      	movs	r0, #1
 8018652:	4770      	bx	lr
 8018654:	2400baee 	.word	0x2400baee

08018658 <_ZN8touchgfx3HAL8endFrameEv>:
 8018658:	b510      	push	{r4, lr}
 801865a:	4604      	mov	r4, r0
 801865c:	6840      	ldr	r0, [r0, #4]
 801865e:	6803      	ldr	r3, [r0, #0]
 8018660:	689b      	ldr	r3, [r3, #8]
 8018662:	4798      	blx	r3
 8018664:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
 8018668:	b113      	cbz	r3, 8018670 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 801866a:	2301      	movs	r3, #1
 801866c:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
 8018670:	bd10      	pop	{r4, pc}

08018672 <_ZN8touchgfx3HAL10initializeEv>:
 8018672:	b510      	push	{r4, lr}
 8018674:	4604      	mov	r4, r0
 8018676:	f7e9 fcb9 	bl	8001fec <_ZN8touchgfx10OSWrappers10initializeEv>
 801867a:	f7e9 f99b 	bl	80019b4 <_ZN8touchgfx4GPIO4initEv>
 801867e:	6860      	ldr	r0, [r4, #4]
 8018680:	6803      	ldr	r3, [r0, #0]
 8018682:	68db      	ldr	r3, [r3, #12]
 8018684:	4798      	blx	r3
 8018686:	68e0      	ldr	r0, [r4, #12]
 8018688:	6803      	ldr	r3, [r0, #0]
 801868a:	689b      	ldr	r3, [r3, #8]
 801868c:	4798      	blx	r3
 801868e:	6823      	ldr	r3, [r4, #0]
 8018690:	4620      	mov	r0, r4
 8018692:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018698:	4718      	bx	r3

0801869a <_ZN8touchgfx3HAL9taskEntryEv>:
 801869a:	b508      	push	{r3, lr}
 801869c:	6803      	ldr	r3, [r0, #0]
 801869e:	4604      	mov	r4, r0
 80186a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80186a4:	4798      	blx	r3
 80186a6:	6823      	ldr	r3, [r4, #0]
 80186a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80186aa:	4620      	mov	r0, r4
 80186ac:	4798      	blx	r3
 80186ae:	f7e9 fd13 	bl	80020d8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 80186b2:	6823      	ldr	r3, [r4, #0]
 80186b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80186b6:	e7f8      	b.n	80186aa <_ZN8touchgfx3HAL9taskEntryEv+0x10>

080186b8 <_ZN8touchgfx3HAL4tickEv>:
 80186b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80186ba:	6803      	ldr	r3, [r0, #0]
 80186bc:	4604      	mov	r4, r0
 80186be:	4d5b      	ldr	r5, [pc, #364]	; (801882c <_ZN8touchgfx3HAL4tickEv+0x174>)
 80186c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80186c4:	4798      	blx	r3
 80186c6:	2800      	cmp	r0, #0
 80186c8:	f000 8095 	beq.w	80187f6 <_ZN8touchgfx3HAL4tickEv+0x13e>
 80186cc:	2001      	movs	r0, #1
 80186ce:	2600      	movs	r6, #0
 80186d0:	f7e9 f996 	bl	8001a00 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80186d4:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
 80186d8:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 80186dc:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80186e0:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
 80186e4:	f884 606a 	strb.w	r6, [r4, #106]	; 0x6a
 80186e8:	b133      	cbz	r3, 80186f8 <_ZN8touchgfx3HAL4tickEv+0x40>
 80186ea:	6823      	ldr	r3, [r4, #0]
 80186ec:	4620      	mov	r0, r4
 80186ee:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80186f2:	4798      	blx	r3
 80186f4:	f884 6079 	strb.w	r6, [r4, #121]	; 0x79
 80186f8:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 80186fc:	2601      	movs	r6, #1
 80186fe:	6862      	ldr	r2, [r4, #4]
 8018700:	f083 0301 	eor.w	r3, r3, #1
 8018704:	702e      	strb	r6, [r5, #0]
 8018706:	7253      	strb	r3, [r2, #9]
 8018708:	f003 f944 	bl	801b994 <_ZN8touchgfx11Application11getInstanceEv>
 801870c:	6803      	ldr	r3, [r0, #0]
 801870e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018710:	4798      	blx	r3
 8018712:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 8018716:	b90b      	cbnz	r3, 801871c <_ZN8touchgfx3HAL4tickEv+0x64>
 8018718:	f884 606b 	strb.w	r6, [r4, #107]	; 0x6b
 801871c:	f003 f93a 	bl	801b994 <_ZN8touchgfx11Application11getInstanceEv>
 8018720:	6803      	ldr	r3, [r0, #0]
 8018722:	695b      	ldr	r3, [r3, #20]
 8018724:	4798      	blx	r3
 8018726:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8018728:	6803      	ldr	r3, [r0, #0]
 801872a:	691b      	ldr	r3, [r3, #16]
 801872c:	4798      	blx	r3
 801872e:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 8018732:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
 8018736:	3b01      	subs	r3, #1
 8018738:	b2db      	uxtb	r3, r3
 801873a:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801873e:	b10a      	cbz	r2, 8018744 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8018740:	2b00      	cmp	r3, #0
 8018742:	d1eb      	bne.n	801871c <_ZN8touchgfx3HAL4tickEv+0x64>
 8018744:	4a3a      	ldr	r2, [pc, #232]	; (8018830 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8018746:	f994 1068 	ldrsb.w	r1, [r4, #104]	; 0x68
 801874a:	7813      	ldrb	r3, [r2, #0]
 801874c:	3301      	adds	r3, #1
 801874e:	b25b      	sxtb	r3, r3
 8018750:	4299      	cmp	r1, r3
 8018752:	7013      	strb	r3, [r2, #0]
 8018754:	dc10      	bgt.n	8018778 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8018756:	2300      	movs	r3, #0
 8018758:	68e0      	ldr	r0, [r4, #12]
 801875a:	a902      	add	r1, sp, #8
 801875c:	7013      	strb	r3, [r2, #0]
 801875e:	aa03      	add	r2, sp, #12
 8018760:	6803      	ldr	r3, [r0, #0]
 8018762:	68db      	ldr	r3, [r3, #12]
 8018764:	4798      	blx	r3
 8018766:	6823      	ldr	r3, [r4, #0]
 8018768:	2800      	cmp	r0, #0
 801876a:	d050      	beq.n	801880e <_ZN8touchgfx3HAL4tickEv+0x156>
 801876c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8018770:	4620      	mov	r0, r4
 8018772:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8018776:	4798      	blx	r3
 8018778:	2300      	movs	r3, #0
 801877a:	6960      	ldr	r0, [r4, #20]
 801877c:	f88d 3007 	strb.w	r3, [sp, #7]
 8018780:	b158      	cbz	r0, 801879a <_ZN8touchgfx3HAL4tickEv+0xe2>
 8018782:	6803      	ldr	r3, [r0, #0]
 8018784:	f10d 0107 	add.w	r1, sp, #7
 8018788:	68db      	ldr	r3, [r3, #12]
 801878a:	4798      	blx	r3
 801878c:	b128      	cbz	r0, 801879a <_ZN8touchgfx3HAL4tickEv+0xe2>
 801878e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8018790:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8018794:	6803      	ldr	r3, [r0, #0]
 8018796:	68db      	ldr	r3, [r3, #12]
 8018798:	4798      	blx	r3
 801879a:	f104 001c 	add.w	r0, r4, #28
 801879e:	f013 fe81 	bl	802c4a4 <_ZN8touchgfx8Gestures4tickEv>
 80187a2:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 80187a6:	b30b      	cbz	r3, 80187ec <_ZN8touchgfx3HAL4tickEv+0x134>
 80187a8:	6920      	ldr	r0, [r4, #16]
 80187aa:	6803      	ldr	r3, [r0, #0]
 80187ac:	691b      	ldr	r3, [r3, #16]
 80187ae:	4798      	blx	r3
 80187b0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80187b2:	4606      	mov	r6, r0
 80187b4:	b903      	cbnz	r3, 80187b8 <_ZN8touchgfx3HAL4tickEv+0x100>
 80187b6:	6760      	str	r0, [r4, #116]	; 0x74
 80187b8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80187ba:	4a1e      	ldr	r2, [pc, #120]	; (8018834 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 80187bc:	1af3      	subs	r3, r6, r3
 80187be:	4293      	cmp	r3, r2
 80187c0:	d914      	bls.n	80187ec <_ZN8touchgfx3HAL4tickEv+0x134>
 80187c2:	6920      	ldr	r0, [r4, #16]
 80187c4:	6803      	ldr	r3, [r0, #0]
 80187c6:	699b      	ldr	r3, [r3, #24]
 80187c8:	4798      	blx	r3
 80187ca:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80187cc:	2264      	movs	r2, #100	; 0x64
 80187ce:	1af3      	subs	r3, r6, r3
 80187d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80187d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80187d8:	2800      	cmp	r0, #0
 80187da:	dc1d      	bgt.n	8018818 <_ZN8touchgfx3HAL4tickEv+0x160>
 80187dc:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
 80187e0:	6920      	ldr	r0, [r4, #16]
 80187e2:	2100      	movs	r1, #0
 80187e4:	6803      	ldr	r3, [r0, #0]
 80187e6:	69db      	ldr	r3, [r3, #28]
 80187e8:	4798      	blx	r3
 80187ea:	6766      	str	r6, [r4, #116]	; 0x74
 80187ec:	f003 f8d2 	bl	801b994 <_ZN8touchgfx11Application11getInstanceEv>
 80187f0:	6803      	ldr	r3, [r0, #0]
 80187f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80187f4:	4798      	blx	r3
 80187f6:	6823      	ldr	r3, [r4, #0]
 80187f8:	4620      	mov	r0, r4
 80187fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80187fe:	4798      	blx	r3
 8018800:	2001      	movs	r0, #1
 8018802:	f7e9 f919 	bl	8001a38 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8018806:	2300      	movs	r3, #0
 8018808:	702b      	strb	r3, [r5, #0]
 801880a:	b004      	add	sp, #16
 801880c:	bd70      	pop	{r4, r5, r6, pc}
 801880e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8018812:	4620      	mov	r0, r4
 8018814:	4798      	blx	r3
 8018816:	e7af      	b.n	8018778 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8018818:	2863      	cmp	r0, #99	; 0x63
 801881a:	bfcb      	itete	gt
 801881c:	2300      	movgt	r3, #0
 801881e:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8018822:	f884 3069 	strbgt.w	r3, [r4, #105]	; 0x69
 8018826:	f884 0069 	strble.w	r0, [r4, #105]	; 0x69
 801882a:	e7d9      	b.n	80187e0 <_ZN8touchgfx3HAL4tickEv+0x128>
 801882c:	2400baf4 	.word	0x2400baf4
 8018830:	2400baf5 	.word	0x2400baf5
 8018834:	05f5e100 	.word	0x05f5e100

08018838 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8018838:	b510      	push	{r4, lr}
 801883a:	4604      	mov	r4, r0
 801883c:	f7e9 fc18 	bl	8002070 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 8018840:	2200      	movs	r2, #0
 8018842:	6863      	ldr	r3, [r4, #4]
 8018844:	729a      	strb	r2, [r3, #10]
 8018846:	bd10      	pop	{r4, pc}

08018848 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8018848:	65c1      	str	r1, [r0, #92]	; 0x5c
 801884a:	301c      	adds	r0, #28
 801884c:	f013 be28 	b.w	802c4a0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08018850 <_ZN8touchgfx3HAL5touchEll>:
 8018850:	b530      	push	{r4, r5, lr}
 8018852:	b087      	sub	sp, #28
 8018854:	4604      	mov	r4, r0
 8018856:	a804      	add	r0, sp, #16
 8018858:	e9cd 1204 	strd	r1, r2, [sp, #16]
 801885c:	f002 fe8c 	bl	801b578 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8018860:	9b04      	ldr	r3, [sp, #16]
 8018862:	a906      	add	r1, sp, #24
 8018864:	a803      	add	r0, sp, #12
 8018866:	f8ad 300c 	strh.w	r3, [sp, #12]
 801886a:	9b05      	ldr	r3, [sp, #20]
 801886c:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8018870:	f002 fed4 	bl	801b61c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8018874:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
 8018878:	f104 001c 	add.w	r0, r4, #28
 801887c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8018880:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8018884:	b189      	cbz	r1, 80188aa <_ZN8touchgfx3HAL5touchEll+0x5a>
 8018886:	f8b4 5064 	ldrh.w	r5, [r4, #100]	; 0x64
 801888a:	9300      	str	r3, [sp, #0]
 801888c:	4613      	mov	r3, r2
 801888e:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 8018892:	462a      	mov	r2, r5
 8018894:	f013 fe14 	bl	802c4c0 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8018898:	b128      	cbz	r0, 80188a6 <_ZN8touchgfx3HAL5touchEll+0x56>
 801889a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801889e:	6623      	str	r3, [r4, #96]	; 0x60
 80188a0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80188a4:	6663      	str	r3, [r4, #100]	; 0x64
 80188a6:	b007      	add	sp, #28
 80188a8:	bd30      	pop	{r4, r5, pc}
 80188aa:	f013 fe49 	bl	802c540 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80188ae:	2301      	movs	r3, #1
 80188b0:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
 80188b4:	e7f1      	b.n	801889a <_ZN8touchgfx3HAL5touchEll+0x4a>

080188b6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80188b6:	b510      	push	{r4, lr}
 80188b8:	2b00      	cmp	r3, #0
 80188ba:	d046      	beq.n	801894a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80188bc:	ea81 0002 	eor.w	r0, r1, r2
 80188c0:	07c4      	lsls	r4, r0, #31
 80188c2:	d508      	bpl.n	80188d6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80188c4:	440b      	add	r3, r1
 80188c6:	3a01      	subs	r2, #1
 80188c8:	428b      	cmp	r3, r1
 80188ca:	d93e      	bls.n	801894a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80188cc:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80188d0:	f801 0b01 	strb.w	r0, [r1], #1
 80188d4:	e7f8      	b.n	80188c8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80188d6:	07d0      	lsls	r0, r2, #31
 80188d8:	bf42      	ittt	mi
 80188da:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80188de:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80188e2:	f801 0b01 	strbmi.w	r0, [r1], #1
 80188e6:	2b01      	cmp	r3, #1
 80188e8:	d911      	bls.n	801890e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80188ea:	ea81 0402 	eor.w	r4, r1, r2
 80188ee:	4610      	mov	r0, r2
 80188f0:	07a4      	lsls	r4, r4, #30
 80188f2:	d022      	beq.n	801893a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 80188f4:	f023 0401 	bic.w	r4, r3, #1
 80188f8:	440c      	add	r4, r1
 80188fa:	428c      	cmp	r4, r1
 80188fc:	4602      	mov	r2, r0
 80188fe:	d904      	bls.n	801890a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8018900:	8812      	ldrh	r2, [r2, #0]
 8018902:	3002      	adds	r0, #2
 8018904:	f821 2b02 	strh.w	r2, [r1], #2
 8018908:	e7f7      	b.n	80188fa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 801890a:	f003 0301 	and.w	r3, r3, #1
 801890e:	f023 0003 	bic.w	r0, r3, #3
 8018912:	4408      	add	r0, r1
 8018914:	4288      	cmp	r0, r1
 8018916:	4614      	mov	r4, r2
 8018918:	d904      	bls.n	8018924 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 801891a:	6824      	ldr	r4, [r4, #0]
 801891c:	3204      	adds	r2, #4
 801891e:	f841 4b04 	str.w	r4, [r1], #4
 8018922:	e7f7      	b.n	8018914 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8018924:	f003 0303 	and.w	r3, r3, #3
 8018928:	3a01      	subs	r2, #1
 801892a:	440b      	add	r3, r1
 801892c:	428b      	cmp	r3, r1
 801892e:	d90c      	bls.n	801894a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8018930:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8018934:	f801 0b01 	strb.w	r0, [r1], #1
 8018938:	e7f8      	b.n	801892c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 801893a:	0790      	lsls	r0, r2, #30
 801893c:	d0e7      	beq.n	801890e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801893e:	f832 0b02 	ldrh.w	r0, [r2], #2
 8018942:	3b02      	subs	r3, #2
 8018944:	f821 0b02 	strh.w	r0, [r1], #2
 8018948:	e7e1      	b.n	801890e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801894a:	2001      	movs	r0, #1
 801894c:	bd10      	pop	{r4, pc}

0801894e <_ZN8touchgfx3HAL7noTouchEv>:
 801894e:	b510      	push	{r4, lr}
 8018950:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
 8018954:	4604      	mov	r4, r0
 8018956:	b153      	cbz	r3, 801896e <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8018958:	f8b0 3064 	ldrh.w	r3, [r0, #100]	; 0x64
 801895c:	2101      	movs	r1, #1
 801895e:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
 8018962:	301c      	adds	r0, #28
 8018964:	f013 fdec 	bl	802c540 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8018968:	2300      	movs	r3, #0
 801896a:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
 801896e:	bd10      	pop	{r4, pc}

08018970 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8018970:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018974:	b085      	sub	sp, #20
 8018976:	4604      	mov	r4, r0
 8018978:	2000      	movs	r0, #0
 801897a:	4699      	mov	r9, r3
 801897c:	ad04      	add	r5, sp, #16
 801897e:	460f      	mov	r7, r1
 8018980:	4690      	mov	r8, r2
 8018982:	f845 0d04 	str.w	r0, [r5, #-4]!
 8018986:	69a0      	ldr	r0, [r4, #24]
 8018988:	6806      	ldr	r6, [r0, #0]
 801898a:	9501      	str	r5, [sp, #4]
 801898c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8018990:	9500      	str	r5, [sp, #0]
 8018992:	6835      	ldr	r5, [r6, #0]
 8018994:	47a8      	blx	r5
 8018996:	4d10      	ldr	r5, [pc, #64]	; (80189d8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8018998:	4606      	mov	r6, r0
 801899a:	f8a5 9000 	strh.w	r9, [r5]
 801899e:	f7eb fcd1 	bl	8004344 <_ZN8touchgfx3HAL3lcdEv>
 80189a2:	6803      	ldr	r3, [r0, #0]
 80189a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80189a6:	4798      	blx	r3
 80189a8:	b128      	cbz	r0, 80189b6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 80189aa:	2801      	cmp	r0, #1
 80189ac:	d00b      	beq.n	80189c6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 80189ae:	4630      	mov	r0, r6
 80189b0:	b005      	add	sp, #20
 80189b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80189b6:	882b      	ldrh	r3, [r5, #0]
 80189b8:	fb08 7203 	mla	r2, r8, r3, r7
 80189bc:	9b03      	ldr	r3, [sp, #12]
 80189be:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80189c2:	63e3      	str	r3, [r4, #60]	; 0x3c
 80189c4:	e7f3      	b.n	80189ae <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80189c6:	882a      	ldrh	r2, [r5, #0]
 80189c8:	9b03      	ldr	r3, [sp, #12]
 80189ca:	fb08 7202 	mla	r2, r8, r2, r7
 80189ce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80189d2:	1a9a      	subs	r2, r3, r2
 80189d4:	63e2      	str	r2, [r4, #60]	; 0x3c
 80189d6:	e7ea      	b.n	80189ae <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80189d8:	2400baea 	.word	0x2400baea

080189dc <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 80189dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80189de:	b08b      	sub	sp, #44	; 0x2c
 80189e0:	4617      	mov	r7, r2
 80189e2:	4604      	mov	r4, r0
 80189e4:	460e      	mov	r6, r1
 80189e6:	461d      	mov	r5, r3
 80189e8:	f7eb fcac 	bl	8004344 <_ZN8touchgfx3HAL3lcdEv>
 80189ec:	6803      	ldr	r3, [r0, #0]
 80189ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80189f0:	4798      	blx	r3
 80189f2:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80189f6:	9007      	str	r0, [sp, #28]
 80189f8:	4631      	mov	r1, r6
 80189fa:	6822      	ldr	r2, [r4, #0]
 80189fc:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8018a00:	4b0c      	ldr	r3, [pc, #48]	; (8018a34 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8018a02:	4620      	mov	r0, r4
 8018a04:	881b      	ldrh	r3, [r3, #0]
 8018a06:	9306      	str	r3, [sp, #24]
 8018a08:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8018a0c:	9305      	str	r3, [sp, #20]
 8018a0e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8018a12:	9304      	str	r3, [sp, #16]
 8018a14:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8018a18:	9303      	str	r3, [sp, #12]
 8018a1a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8018a1e:	9302      	str	r3, [sp, #8]
 8018a20:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8018a24:	e9cd 5300 	strd	r5, r3, [sp]
 8018a28:	463b      	mov	r3, r7
 8018a2a:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8018a2c:	2200      	movs	r2, #0
 8018a2e:	47a8      	blx	r5
 8018a30:	b00b      	add	sp, #44	; 0x2c
 8018a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018a34:	2400baea 	.word	0x2400baea

08018a38 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8018a38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018a3c:	4698      	mov	r8, r3
 8018a3e:	6803      	ldr	r3, [r0, #0]
 8018a40:	b08b      	sub	sp, #44	; 0x2c
 8018a42:	4617      	mov	r7, r2
 8018a44:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8018a46:	460e      	mov	r6, r1
 8018a48:	4b13      	ldr	r3, [pc, #76]	; (8018a98 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8018a4a:	4604      	mov	r4, r0
 8018a4c:	f8b3 9000 	ldrh.w	r9, [r3]
 8018a50:	f7eb fc78 	bl	8004344 <_ZN8touchgfx3HAL3lcdEv>
 8018a54:	6803      	ldr	r3, [r0, #0]
 8018a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a58:	4798      	blx	r3
 8018a5a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8018a5e:	2200      	movs	r2, #0
 8018a60:	4631      	mov	r1, r6
 8018a62:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8018a66:	2302      	movs	r3, #2
 8018a68:	4620      	mov	r0, r4
 8018a6a:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8018a6e:	2301      	movs	r3, #1
 8018a70:	9305      	str	r3, [sp, #20]
 8018a72:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8018a76:	9304      	str	r3, [sp, #16]
 8018a78:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8018a7c:	9303      	str	r3, [sp, #12]
 8018a7e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8018a82:	9302      	str	r3, [sp, #8]
 8018a84:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8018a88:	e9cd 8300 	strd	r8, r3, [sp]
 8018a8c:	463b      	mov	r3, r7
 8018a8e:	47a8      	blx	r5
 8018a90:	b00b      	add	sp, #44	; 0x2c
 8018a92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018a96:	bf00      	nop
 8018a98:	2400baea 	.word	0x2400baea

08018a9c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8018a9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018aa0:	4698      	mov	r8, r3
 8018aa2:	6803      	ldr	r3, [r0, #0]
 8018aa4:	b087      	sub	sp, #28
 8018aa6:	460e      	mov	r6, r1
 8018aa8:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8018aaa:	4617      	mov	r7, r2
 8018aac:	4b0f      	ldr	r3, [pc, #60]	; (8018aec <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8018aae:	4604      	mov	r4, r0
 8018ab0:	f8b3 9000 	ldrh.w	r9, [r3]
 8018ab4:	f7eb fc46 	bl	8004344 <_ZN8touchgfx3HAL3lcdEv>
 8018ab8:	6803      	ldr	r3, [r0, #0]
 8018aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018abc:	4798      	blx	r3
 8018abe:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8018ac2:	463a      	mov	r2, r7
 8018ac4:	4631      	mov	r1, r6
 8018ac6:	f8cd 900c 	str.w	r9, [sp, #12]
 8018aca:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8018ace:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8018ad2:	4620      	mov	r0, r4
 8018ad4:	9302      	str	r3, [sp, #8]
 8018ad6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8018ada:	9301      	str	r3, [sp, #4]
 8018adc:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8018ae0:	9300      	str	r3, [sp, #0]
 8018ae2:	4643      	mov	r3, r8
 8018ae4:	47a8      	blx	r5
 8018ae6:	b007      	add	sp, #28
 8018ae8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018aec:	2400baea 	.word	0x2400baea

08018af0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8018af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018af4:	4604      	mov	r4, r0
 8018af6:	b08f      	sub	sp, #60	; 0x3c
 8018af8:	4610      	mov	r0, r2
 8018afa:	460d      	mov	r5, r1
 8018afc:	4691      	mov	r9, r2
 8018afe:	461e      	mov	r6, r3
 8018b00:	f006 f8aa 	bl	801ec58 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8018b04:	2800      	cmp	r0, #0
 8018b06:	f000 809d 	beq.w	8018c44 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8018b0a:	6823      	ldr	r3, [r4, #0]
 8018b0c:	4620      	mov	r0, r4
 8018b0e:	f8df b198 	ldr.w	fp, [pc, #408]	; 8018ca8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8018b12:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8018b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018b18:	4798      	blx	r3
 8018b1a:	6823      	ldr	r3, [r4, #0]
 8018b1c:	4620      	mov	r0, r4
 8018b1e:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8018cac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8018b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b24:	4798      	blx	r3
 8018b26:	f8bb 3000 	ldrh.w	r3, [fp]
 8018b2a:	4f5c      	ldr	r7, [pc, #368]	; (8018c9c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8018b2c:	9301      	str	r3, [sp, #4]
 8018b2e:	f8ba 3000 	ldrh.w	r3, [sl]
 8018b32:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8018b36:	4640      	mov	r0, r8
 8018b38:	9302      	str	r3, [sp, #8]
 8018b3a:	883b      	ldrh	r3, [r7, #0]
 8018b3c:	9303      	str	r3, [sp, #12]
 8018b3e:	4b58      	ldr	r3, [pc, #352]	; (8018ca0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8018b40:	881a      	ldrh	r2, [r3, #0]
 8018b42:	9305      	str	r3, [sp, #20]
 8018b44:	9204      	str	r2, [sp, #16]
 8018b46:	f006 f91b 	bl	801ed80 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018b4a:	8038      	strh	r0, [r7, #0]
 8018b4c:	4640      	mov	r0, r8
 8018b4e:	f006 f94b 	bl	801ede8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018b52:	9b05      	ldr	r3, [sp, #20]
 8018b54:	b280      	uxth	r0, r0
 8018b56:	8018      	strh	r0, [r3, #0]
 8018b58:	4b52      	ldr	r3, [pc, #328]	; (8018ca4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8018b5a:	781b      	ldrb	r3, [r3, #0]
 8018b5c:	2b00      	cmp	r3, #0
 8018b5e:	d174      	bne.n	8018c4a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8018b60:	883b      	ldrh	r3, [r7, #0]
 8018b62:	f8aa 0000 	strh.w	r0, [sl]
 8018b66:	f8ab 3000 	strh.w	r3, [fp]
 8018b6a:	4648      	mov	r0, r9
 8018b6c:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8018b70:	f006 f872 	bl	801ec58 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8018b74:	2200      	movs	r2, #0
 8018b76:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8018b7a:	4611      	mov	r1, r2
 8018b7c:	4628      	mov	r0, r5
 8018b7e:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8018b82:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8018b86:	f7eb fada 	bl	800413e <_ZN8touchgfx8Drawable5setXYEss>
 8018b8a:	2301      	movs	r3, #1
 8018b8c:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8018b90:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8018b94:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8018b98:	2b00      	cmp	r3, #0
 8018b9a:	dd5c      	ble.n	8018c56 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8018b9c:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8018ba0:	2b00      	cmp	r3, #0
 8018ba2:	dd58      	ble.n	8018c56 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8018ba4:	462a      	mov	r2, r5
 8018ba6:	ab0a      	add	r3, sp, #40	; 0x28
 8018ba8:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8018bac:	6851      	ldr	r1, [r2, #4]
 8018bae:	c303      	stmia	r3!, {r0, r1}
 8018bb0:	4631      	mov	r1, r6
 8018bb2:	a80a      	add	r0, sp, #40	; 0x28
 8018bb4:	f7ff f964 	bl	8017e80 <_ZN8touchgfx4RectaNERKS0_>
 8018bb8:	4b38      	ldr	r3, [pc, #224]	; (8018c9c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8018bba:	2100      	movs	r1, #0
 8018bbc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018bc0:	4b37      	ldr	r3, [pc, #220]	; (8018ca0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8018bc2:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8018bc6:	aa0a      	add	r2, sp, #40	; 0x28
 8018bc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018bcc:	910c      	str	r1, [sp, #48]	; 0x30
 8018bce:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8018bd2:	ab08      	add	r3, sp, #32
 8018bd4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018bd8:	e883 0003 	stmia.w	r3, {r0, r1}
 8018bdc:	4618      	mov	r0, r3
 8018bde:	a90c      	add	r1, sp, #48	; 0x30
 8018be0:	f7ff f94e 	bl	8017e80 <_ZN8touchgfx4RectaNERKS0_>
 8018be4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8018be6:	2b00      	cmp	r3, #0
 8018be8:	d13c      	bne.n	8018c64 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8018bea:	2000      	movs	r0, #0
 8018bec:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
 8018bf0:	2600      	movs	r6, #0
 8018bf2:	696b      	ldr	r3, [r5, #20]
 8018bf4:	a908      	add	r1, sp, #32
 8018bf6:	682a      	ldr	r2, [r5, #0]
 8018bf8:	4628      	mov	r0, r5
 8018bfa:	9305      	str	r3, [sp, #20]
 8018bfc:	616e      	str	r6, [r5, #20]
 8018bfe:	6892      	ldr	r2, [r2, #8]
 8018c00:	4790      	blx	r2
 8018c02:	9b05      	ldr	r3, [sp, #20]
 8018c04:	4652      	mov	r2, sl
 8018c06:	4649      	mov	r1, r9
 8018c08:	616b      	str	r3, [r5, #20]
 8018c0a:	4628      	mov	r0, r5
 8018c0c:	f884 6058 	strb.w	r6, [r4, #88]	; 0x58
 8018c10:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8018c14:	f7eb fa93 	bl	800413e <_ZN8touchgfx8Drawable5setXYEss>
 8018c18:	9a01      	ldr	r2, [sp, #4]
 8018c1a:	4b23      	ldr	r3, [pc, #140]	; (8018ca8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8018c1c:	4620      	mov	r0, r4
 8018c1e:	801a      	strh	r2, [r3, #0]
 8018c20:	9a02      	ldr	r2, [sp, #8]
 8018c22:	4b22      	ldr	r3, [pc, #136]	; (8018cac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8018c24:	801a      	strh	r2, [r3, #0]
 8018c26:	9a03      	ldr	r2, [sp, #12]
 8018c28:	4b1c      	ldr	r3, [pc, #112]	; (8018c9c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8018c2a:	801a      	strh	r2, [r3, #0]
 8018c2c:	4b1c      	ldr	r3, [pc, #112]	; (8018ca0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8018c2e:	9a04      	ldr	r2, [sp, #16]
 8018c30:	801a      	strh	r2, [r3, #0]
 8018c32:	6823      	ldr	r3, [r4, #0]
 8018c34:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8018c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018c3a:	4798      	blx	r3
 8018c3c:	6823      	ldr	r3, [r4, #0]
 8018c3e:	4620      	mov	r0, r4
 8018c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018c42:	4798      	blx	r3
 8018c44:	b00f      	add	sp, #60	; 0x3c
 8018c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c4a:	883b      	ldrh	r3, [r7, #0]
 8018c4c:	f8ab 0000 	strh.w	r0, [fp]
 8018c50:	f8aa 3000 	strh.w	r3, [sl]
 8018c54:	e789      	b.n	8018b6a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8018c56:	462a      	mov	r2, r5
 8018c58:	ab0a      	add	r3, sp, #40	; 0x28
 8018c5a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8018c5e:	6851      	ldr	r1, [r2, #4]
 8018c60:	c303      	stmia	r3!, {r0, r1}
 8018c62:	e7a9      	b.n	8018bb8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8018c64:	a807      	add	r0, sp, #28
 8018c66:	f006 f9fb 	bl	801f060 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8018c6a:	4606      	mov	r6, r0
 8018c6c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8018c6e:	6803      	ldr	r3, [r0, #0]
 8018c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018c72:	4798      	blx	r3
 8018c74:	4286      	cmp	r6, r0
 8018c76:	d1b8      	bne.n	8018bea <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8018c78:	f7eb fb64 	bl	8004344 <_ZN8touchgfx3HAL3lcdEv>
 8018c7c:	6803      	ldr	r3, [r0, #0]
 8018c7e:	4606      	mov	r6, r0
 8018c80:	a807      	add	r0, sp, #28
 8018c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018c84:	9305      	str	r3, [sp, #20]
 8018c86:	f006 f9eb 	bl	801f060 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8018c8a:	9b05      	ldr	r3, [sp, #20]
 8018c8c:	4601      	mov	r1, r0
 8018c8e:	4630      	mov	r0, r6
 8018c90:	4798      	blx	r3
 8018c92:	f080 0001 	eor.w	r0, r0, #1
 8018c96:	b2c0      	uxtb	r0, r0
 8018c98:	e7a8      	b.n	8018bec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8018c9a:	bf00      	nop
 8018c9c:	2400bae4 	.word	0x2400bae4
 8018ca0:	2400bae6 	.word	0x2400bae6
 8018ca4:	2400bae8 	.word	0x2400bae8
 8018ca8:	2400baea 	.word	0x2400baea
 8018cac:	2400baec 	.word	0x2400baec

08018cb0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8018cb0:	4b07      	ldr	r3, [pc, #28]	; (8018cd0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8018cb2:	b510      	push	{r4, lr}
 8018cb4:	781b      	ldrb	r3, [r3, #0]
 8018cb6:	4604      	mov	r4, r0
 8018cb8:	b13b      	cbz	r3, 8018cca <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8018cba:	6803      	ldr	r3, [r0, #0]
 8018cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018cbe:	4798      	blx	r3
 8018cc0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018cc2:	4283      	cmp	r3, r0
 8018cc4:	d101      	bne.n	8018cca <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8018cc6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8018cc8:	bd10      	pop	{r4, pc}
 8018cca:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8018ccc:	e7fc      	b.n	8018cc8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8018cce:	bf00      	nop
 8018cd0:	2400baee 	.word	0x2400baee

08018cd4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8018cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018cd8:	461d      	mov	r5, r3
 8018cda:	b08a      	sub	sp, #40	; 0x28
 8018cdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018ce0:	4690      	mov	r8, r2
 8018ce2:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8018ce6:	2400      	movs	r4, #0
 8018ce8:	4607      	mov	r7, r0
 8018cea:	fb06 8505 	mla	r5, r6, r5, r8
 8018cee:	9404      	str	r4, [sp, #16]
 8018cf0:	f88d 4020 	strb.w	r4, [sp, #32]
 8018cf4:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8018cf8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8018cfc:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018d00:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8018d04:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018d08:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8018d0c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018d10:	f7ff ffce 	bl	8018cb0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018d14:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8018d18:	6878      	ldr	r0, [r7, #4]
 8018d1a:	f8ad 601e 	strh.w	r6, [sp, #30]
 8018d1e:	a901      	add	r1, sp, #4
 8018d20:	9505      	str	r5, [sp, #20]
 8018d22:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8018d26:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8018d2a:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8018d2e:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8018d32:	6803      	ldr	r3, [r0, #0]
 8018d34:	685b      	ldr	r3, [r3, #4]
 8018d36:	4798      	blx	r3
 8018d38:	b00a      	add	sp, #40	; 0x28
 8018d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018d3e <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8018d3e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018d42:	b08b      	sub	sp, #44	; 0x2c
 8018d44:	2400      	movs	r4, #0
 8018d46:	4691      	mov	r9, r2
 8018d48:	461d      	mov	r5, r3
 8018d4a:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8018d4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018d52:	4688      	mov	r8, r1
 8018d54:	4607      	mov	r7, r0
 8018d56:	9404      	str	r4, [sp, #16]
 8018d58:	fb06 9505 	mla	r5, r6, r5, r9
 8018d5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018d60:	f7ff ffa6 	bl	8018cb0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018d64:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8018d68:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8018d6c:	6878      	ldr	r0, [r7, #4]
 8018d6e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018d72:	a901      	add	r1, sp, #4
 8018d74:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8018d78:	9505      	str	r5, [sp, #20]
 8018d7a:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018d7e:	f8ad 401c 	strh.w	r4, [sp, #28]
 8018d82:	f8ad 601e 	strh.w	r6, [sp, #30]
 8018d86:	f8cd 8010 	str.w	r8, [sp, #16]
 8018d8a:	f8ad 4020 	strh.w	r4, [sp, #32]
 8018d8e:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8018d92:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8018d96:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8018d9a:	6803      	ldr	r3, [r0, #0]
 8018d9c:	685b      	ldr	r3, [r3, #4]
 8018d9e:	4798      	blx	r3
 8018da0:	b00b      	add	sp, #44	; 0x2c
 8018da2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08018da8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8018da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018dac:	b08a      	sub	sp, #40	; 0x28
 8018dae:	4698      	mov	r8, r3
 8018db0:	2300      	movs	r3, #0
 8018db2:	4606      	mov	r6, r0
 8018db4:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8018db8:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8018dbc:	2d0b      	cmp	r5, #11
 8018dbe:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8018dc2:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 8018dc6:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 8018dca:	9304      	str	r3, [sp, #16]
 8018dcc:	d137      	bne.n	8018e3e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 8018dce:	2380      	movs	r3, #128	; 0x80
 8018dd0:	f88d 0020 	strb.w	r0, [sp, #32]
 8018dd4:	4630      	mov	r0, r6
 8018dd6:	9203      	str	r2, [sp, #12]
 8018dd8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8018ddc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8018de0:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018de4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8018de8:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018dec:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8018df0:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018df4:	f7ff ff5c 	bl	8018cb0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018df8:	2c0b      	cmp	r4, #11
 8018dfa:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8018dfe:	f8ad 701e 	strh.w	r7, [sp, #30]
 8018e02:	bf94      	ite	ls
 8018e04:	4b19      	ldrls	r3, [pc, #100]	; (8018e6c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8018e06:	2100      	movhi	r1, #0
 8018e08:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8018e0c:	bf98      	it	ls
 8018e0e:	5d19      	ldrbls	r1, [r3, r4]
 8018e10:	fb02 8307 	mla	r3, r2, r7, r8
 8018e14:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8018e18:	10c9      	asrs	r1, r1, #3
 8018e1a:	fb01 0003 	mla	r0, r1, r3, r0
 8018e1e:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8018e22:	a901      	add	r1, sp, #4
 8018e24:	9005      	str	r0, [sp, #20]
 8018e26:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8018e2a:	2300      	movs	r3, #0
 8018e2c:	6870      	ldr	r0, [r6, #4]
 8018e2e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8018e32:	6803      	ldr	r3, [r0, #0]
 8018e34:	685b      	ldr	r3, [r3, #4]
 8018e36:	4798      	blx	r3
 8018e38:	b00a      	add	sp, #40	; 0x28
 8018e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e3e:	2d02      	cmp	r5, #2
 8018e40:	d109      	bne.n	8018e56 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8018e42:	28ff      	cmp	r0, #255	; 0xff
 8018e44:	d105      	bne.n	8018e52 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8018e46:	f1bc 0f00 	cmp.w	ip, #0
 8018e4a:	bf14      	ite	ne
 8018e4c:	2340      	movne	r3, #64	; 0x40
 8018e4e:	2320      	moveq	r3, #32
 8018e50:	e7be      	b.n	8018dd0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8018e52:	2340      	movs	r3, #64	; 0x40
 8018e54:	e7bc      	b.n	8018dd0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8018e56:	28ff      	cmp	r0, #255	; 0xff
 8018e58:	d105      	bne.n	8018e66 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 8018e5a:	f1bc 0f00 	cmp.w	ip, #0
 8018e5e:	bf14      	ite	ne
 8018e60:	2304      	movne	r3, #4
 8018e62:	2301      	moveq	r3, #1
 8018e64:	e7b4      	b.n	8018dd0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8018e66:	2304      	movs	r3, #4
 8018e68:	e7b2      	b.n	8018dd0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8018e6a:	bf00      	nop
 8018e6c:	0802f510 	.word	0x0802f510

08018e70 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8018e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e74:	b08b      	sub	sp, #44	; 0x2c
 8018e76:	461d      	mov	r5, r3
 8018e78:	2400      	movs	r4, #0
 8018e7a:	4688      	mov	r8, r1
 8018e7c:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 8018e80:	4693      	mov	fp, r2
 8018e82:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 8018e86:	4607      	mov	r7, r0
 8018e88:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8018e8c:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 8018e90:	9404      	str	r4, [sp, #16]
 8018e92:	bf14      	ite	ne
 8018e94:	2308      	movne	r3, #8
 8018e96:	2302      	moveq	r3, #2
 8018e98:	fb05 b50a 	mla	r5, r5, sl, fp
 8018e9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018ea0:	f7ff ff06 	bl	8018cb0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018ea4:	2e0b      	cmp	r6, #11
 8018ea6:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8018eaa:	a901      	add	r1, sp, #4
 8018eac:	bf98      	it	ls
 8018eae:	4b13      	ldrls	r3, [pc, #76]	; (8018efc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8018eb0:	f8ad a01e 	strh.w	sl, [sp, #30]
 8018eb4:	bf98      	it	ls
 8018eb6:	5d9c      	ldrbls	r4, [r3, r6]
 8018eb8:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8018ebc:	10e4      	asrs	r4, r4, #3
 8018ebe:	f8cd 8010 	str.w	r8, [sp, #16]
 8018ec2:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018ec6:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8018eca:	fb04 0405 	mla	r4, r4, r5, r0
 8018ece:	6878      	ldr	r0, [r7, #4]
 8018ed0:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018ed4:	2300      	movs	r3, #0
 8018ed6:	9405      	str	r4, [sp, #20]
 8018ed8:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018edc:	f88d 9020 	strb.w	r9, [sp, #32]
 8018ee0:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8018ee4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8018ee8:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 8018eec:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 8018ef0:	6803      	ldr	r3, [r0, #0]
 8018ef2:	685b      	ldr	r3, [r3, #4]
 8018ef4:	4798      	blx	r3
 8018ef6:	b00b      	add	sp, #44	; 0x2c
 8018ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018efc:	0802f510 	.word	0x0802f510

08018f00 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8018f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f04:	461e      	mov	r6, r3
 8018f06:	4b0a      	ldr	r3, [pc, #40]	; (8018f30 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8018f08:	460f      	mov	r7, r1
 8018f0a:	4690      	mov	r8, r2
 8018f0c:	881d      	ldrh	r5, [r3, #0]
 8018f0e:	f7eb fa19 	bl	8004344 <_ZN8touchgfx3HAL3lcdEv>
 8018f12:	6803      	ldr	r3, [r0, #0]
 8018f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f16:	4798      	blx	r3
 8018f18:	280b      	cmp	r0, #11
 8018f1a:	bf96      	itet	ls
 8018f1c:	4b05      	ldrls	r3, [pc, #20]	; (8018f34 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8018f1e:	2400      	movhi	r4, #0
 8018f20:	5c1c      	ldrbls	r4, [r3, r0]
 8018f22:	fb08 7005 	mla	r0, r8, r5, r7
 8018f26:	10e4      	asrs	r4, r4, #3
 8018f28:	fb04 6000 	mla	r0, r4, r0, r6
 8018f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f30:	2400baea 	.word	0x2400baea
 8018f34:	0802f510 	.word	0x0802f510

08018f38 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8018f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018f3a:	b08b      	sub	sp, #44	; 0x2c
 8018f3c:	461f      	mov	r7, r3
 8018f3e:	4604      	mov	r4, r0
 8018f40:	4616      	mov	r6, r2
 8018f42:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8018f46:	2500      	movs	r5, #0
 8018f48:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8018f4c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8018f50:	9504      	str	r5, [sp, #16]
 8018f52:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018f56:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8018f5a:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018f5e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8018f62:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018f66:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8018f6a:	f88d 3020 	strb.w	r3, [sp, #32]
 8018f6e:	f7ff fe9f 	bl	8018cb0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018f72:	463a      	mov	r2, r7
 8018f74:	4631      	mov	r1, r6
 8018f76:	4603      	mov	r3, r0
 8018f78:	4620      	mov	r0, r4
 8018f7a:	f7ff ffc1 	bl	8018f00 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8018f7e:	4b0e      	ldr	r3, [pc, #56]	; (8018fb8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8018f80:	9005      	str	r0, [sp, #20]
 8018f82:	881b      	ldrh	r3, [r3, #0]
 8018f84:	f8ad 301e 	strh.w	r3, [sp, #30]
 8018f88:	f7eb f9dc 	bl	8004344 <_ZN8touchgfx3HAL3lcdEv>
 8018f8c:	6803      	ldr	r3, [r0, #0]
 8018f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f90:	4798      	blx	r3
 8018f92:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018f94:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8018f98:	a901      	add	r1, sp, #4
 8018f9a:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8018f9e:	9304      	str	r3, [sp, #16]
 8018fa0:	6860      	ldr	r0, [r4, #4]
 8018fa2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8018fa6:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8018faa:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8018fae:	6803      	ldr	r3, [r0, #0]
 8018fb0:	685b      	ldr	r3, [r3, #4]
 8018fb2:	4798      	blx	r3
 8018fb4:	b00b      	add	sp, #44	; 0x2c
 8018fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018fb8:	2400baea 	.word	0x2400baea

08018fbc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8018fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018fbe:	b08d      	sub	sp, #52	; 0x34
 8018fc0:	2501      	movs	r5, #1
 8018fc2:	4604      	mov	r4, r0
 8018fc4:	466b      	mov	r3, sp
 8018fc6:	9503      	str	r5, [sp, #12]
 8018fc8:	e883 0006 	stmia.w	r3, {r1, r2}
 8018fcc:	2300      	movs	r3, #0
 8018fce:	f8bd 6000 	ldrh.w	r6, [sp]
 8018fd2:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8018fd6:	9306      	str	r3, [sp, #24]
 8018fd8:	6803      	ldr	r3, [r0, #0]
 8018fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018fdc:	4798      	blx	r3
 8018fde:	463a      	mov	r2, r7
 8018fe0:	4631      	mov	r1, r6
 8018fe2:	4603      	mov	r3, r0
 8018fe4:	4620      	mov	r0, r4
 8018fe6:	f7ff ff8b 	bl	8018f00 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8018fea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018fec:	9004      	str	r0, [sp, #16]
 8018fee:	9307      	str	r3, [sp, #28]
 8018ff0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8018ff4:	f8ad 3020 	strh.w	r3, [sp, #32]
 8018ff8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8018ffc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8019000:	4b0e      	ldr	r3, [pc, #56]	; (801903c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8019002:	881b      	ldrh	r3, [r3, #0]
 8019004:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8019008:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801900c:	f7eb f99a 	bl	8004344 <_ZN8touchgfx3HAL3lcdEv>
 8019010:	6803      	ldr	r3, [r0, #0]
 8019012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019014:	4798      	blx	r3
 8019016:	23ff      	movs	r3, #255	; 0xff
 8019018:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 801901c:	a903      	add	r1, sp, #12
 801901e:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8019022:	6860      	ldr	r0, [r4, #4]
 8019024:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8019028:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801902c:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8019030:	6803      	ldr	r3, [r0, #0]
 8019032:	685b      	ldr	r3, [r3, #4]
 8019034:	4798      	blx	r3
 8019036:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8019038:	b00d      	add	sp, #52	; 0x34
 801903a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801903c:	2400baea 	.word	0x2400baea

08019040 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8019040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019044:	b08c      	sub	sp, #48	; 0x30
 8019046:	461e      	mov	r6, r3
 8019048:	2300      	movs	r3, #0
 801904a:	4604      	mov	r4, r0
 801904c:	466d      	mov	r5, sp
 801904e:	9306      	str	r3, [sp, #24]
 8019050:	6803      	ldr	r3, [r0, #0]
 8019052:	e885 0006 	stmia.w	r5, {r1, r2}
 8019056:	2501      	movs	r5, #1
 8019058:	f8bd 7000 	ldrh.w	r7, [sp]
 801905c:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8019060:	9503      	str	r5, [sp, #12]
 8019062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019064:	4798      	blx	r3
 8019066:	4642      	mov	r2, r8
 8019068:	4639      	mov	r1, r7
 801906a:	4603      	mov	r3, r0
 801906c:	4620      	mov	r0, r4
 801906e:	f7ff ff47 	bl	8018f00 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8019072:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8019076:	9004      	str	r0, [sp, #16]
 8019078:	f8ad 3020 	strh.w	r3, [sp, #32]
 801907c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8019080:	9607      	str	r6, [sp, #28]
 8019082:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8019086:	4b10      	ldr	r3, [pc, #64]	; (80190c8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8019088:	881b      	ldrh	r3, [r3, #0]
 801908a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801908e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019090:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8019094:	f7eb f956 	bl	8004344 <_ZN8touchgfx3HAL3lcdEv>
 8019098:	6803      	ldr	r3, [r0, #0]
 801909a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801909c:	4798      	blx	r3
 801909e:	23ff      	movs	r3, #255	; 0xff
 80190a0:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 80190a4:	a903      	add	r1, sp, #12
 80190a6:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 80190aa:	6860      	ldr	r0, [r4, #4]
 80190ac:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80190b0:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 80190b4:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 80190b8:	6803      	ldr	r3, [r0, #0]
 80190ba:	685b      	ldr	r3, [r3, #4]
 80190bc:	4798      	blx	r3
 80190be:	4630      	mov	r0, r6
 80190c0:	b00c      	add	sp, #48	; 0x30
 80190c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80190c6:	bf00      	nop
 80190c8:	2400baea 	.word	0x2400baea

080190cc <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 80190cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80190ce:	b085      	sub	sp, #20
 80190d0:	4605      	mov	r5, r0
 80190d2:	ac02      	add	r4, sp, #8
 80190d4:	e884 0006 	stmia.w	r4, {r1, r2}
 80190d8:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 80190dc:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 80190e0:	f7ff fde6 	bl	8018cb0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80190e4:	4631      	mov	r1, r6
 80190e6:	4603      	mov	r3, r0
 80190e8:	463a      	mov	r2, r7
 80190ea:	4628      	mov	r0, r5
 80190ec:	f7ff ff08 	bl	8018f00 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80190f0:	4a05      	ldr	r2, [pc, #20]	; (8019108 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 80190f2:	682b      	ldr	r3, [r5, #0]
 80190f4:	8812      	ldrh	r2, [r2, #0]
 80190f6:	9200      	str	r2, [sp, #0]
 80190f8:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 80190fa:	4603      	mov	r3, r0
 80190fc:	4628      	mov	r0, r5
 80190fe:	e894 0006 	ldmia.w	r4, {r1, r2}
 8019102:	47b0      	blx	r6
 8019104:	b005      	add	sp, #20
 8019106:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019108:	2400baea 	.word	0x2400baea

0801910c <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 801910c:	b570      	push	{r4, r5, r6, lr}
 801910e:	f890 306e 	ldrb.w	r3, [r0, #110]	; 0x6e
 8019112:	4604      	mov	r4, r0
 8019114:	b19b      	cbz	r3, 801913e <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8019116:	2002      	movs	r0, #2
 8019118:	f7e8 fcaa 	bl	8001a70 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 801911c:	2300      	movs	r3, #0
 801911e:	4620      	mov	r0, r4
 8019120:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
 8019124:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
 8019128:	6823      	ldr	r3, [r4, #0]
 801912a:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 801912e:	f7ff fdbf 	bl	8018cb0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019132:	4601      	mov	r1, r0
 8019134:	4620      	mov	r0, r4
 8019136:	462b      	mov	r3, r5
 8019138:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801913c:	4718      	bx	r3
 801913e:	bd70      	pop	{r4, r5, r6, pc}

08019140 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8019140:	b538      	push	{r3, r4, r5, lr}
 8019142:	f890 307b 	ldrb.w	r3, [r0, #123]	; 0x7b
 8019146:	4604      	mov	r4, r0
 8019148:	460d      	mov	r5, r1
 801914a:	428b      	cmp	r3, r1
 801914c:	d006      	beq.n	801915c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 801914e:	6803      	ldr	r3, [r0, #0]
 8019150:	b929      	cbnz	r1, 801915e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8019152:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8019156:	4798      	blx	r3
 8019158:	f884 507b 	strb.w	r5, [r4, #123]	; 0x7b
 801915c:	bd38      	pop	{r3, r4, r5, pc}
 801915e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8019162:	e7f8      	b.n	8019156 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08019164 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8019164:	4b0d      	ldr	r3, [pc, #52]	; (801919c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8019166:	b510      	push	{r4, lr}
 8019168:	781b      	ldrb	r3, [r3, #0]
 801916a:	4604      	mov	r4, r0
 801916c:	b95b      	cbnz	r3, 8019186 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801916e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8019172:	2b02      	cmp	r3, #2
 8019174:	d007      	beq.n	8019186 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8019176:	6840      	ldr	r0, [r0, #4]
 8019178:	f000 f90e 	bl	8019398 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801917c:	b118      	cbz	r0, 8019186 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801917e:	6862      	ldr	r2, [r4, #4]
 8019180:	7a53      	ldrb	r3, [r2, #9]
 8019182:	2b00      	cmp	r3, #0
 8019184:	d0fc      	beq.n	8019180 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8019186:	f7e8 ff65 	bl	8002054 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801918a:	4620      	mov	r0, r4
 801918c:	2100      	movs	r1, #0
 801918e:	f7ff ffd7 	bl	8019140 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8019192:	4620      	mov	r0, r4
 8019194:	f7ff fd8c 	bl	8018cb0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019198:	bd10      	pop	{r4, pc}
 801919a:	bf00      	nop
 801919c:	2400baee 	.word	0x2400baee

080191a0 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 80191a0:	4770      	bx	lr

080191a2 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 80191a2:	2000      	movs	r0, #0
 80191a4:	4770      	bx	lr

080191a6 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 80191a6:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 80191aa:	1a13      	subs	r3, r2, r0
 80191ac:	4258      	negs	r0, r3
 80191ae:	4158      	adcs	r0, r3
 80191b0:	4770      	bx	lr

080191b2 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 80191b2:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80191b6:	1a9b      	subs	r3, r3, r2
 80191b8:	2b00      	cmp	r3, #0
 80191ba:	bfdc      	itt	le
 80191bc:	6882      	ldrle	r2, [r0, #8]
 80191be:	189b      	addle	r3, r3, r2
 80191c0:	2b01      	cmp	r3, #1
 80191c2:	bfcc      	ite	gt
 80191c4:	2000      	movgt	r0, #0
 80191c6:	2001      	movle	r0, #1
 80191c8:	4770      	bx	lr

080191ca <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 80191ca:	6902      	ldr	r2, [r0, #16]
 80191cc:	6843      	ldr	r3, [r0, #4]
 80191ce:	2024      	movs	r0, #36	; 0x24
 80191d0:	fb00 3002 	mla	r0, r0, r2, r3
 80191d4:	4770      	bx	lr

080191d6 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 80191d6:	6803      	ldr	r3, [r0, #0]
 80191d8:	691b      	ldr	r3, [r3, #16]
 80191da:	4718      	bx	r3

080191dc <_ZN8touchgfx13DMA_Interface7executeEv>:
 80191dc:	2301      	movs	r3, #1
 80191de:	b570      	push	{r4, r5, r6, lr}
 80191e0:	7203      	strb	r3, [r0, #8]
 80191e2:	4604      	mov	r4, r0
 80191e4:	6840      	ldr	r0, [r0, #4]
 80191e6:	6803      	ldr	r3, [r0, #0]
 80191e8:	699b      	ldr	r3, [r3, #24]
 80191ea:	4798      	blx	r3
 80191ec:	6803      	ldr	r3, [r0, #0]
 80191ee:	4605      	mov	r5, r0
 80191f0:	2b40      	cmp	r3, #64	; 0x40
 80191f2:	d00c      	beq.n	801920e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80191f4:	d810      	bhi.n	8019218 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 80191f6:	2b04      	cmp	r3, #4
 80191f8:	d01d      	beq.n	8019236 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 80191fa:	d804      	bhi.n	8019206 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 80191fc:	2b01      	cmp	r3, #1
 80191fe:	d006      	beq.n	801920e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8019200:	2b02      	cmp	r3, #2
 8019202:	d02c      	beq.n	801925e <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8019204:	bd70      	pop	{r4, r5, r6, pc}
 8019206:	2b08      	cmp	r3, #8
 8019208:	d01d      	beq.n	8019246 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 801920a:	2b20      	cmp	r3, #32
 801920c:	d1fa      	bne.n	8019204 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 801920e:	6823      	ldr	r3, [r4, #0]
 8019210:	4620      	mov	r0, r4
 8019212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019214:	4798      	blx	r3
 8019216:	e013      	b.n	8019240 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8019218:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801921c:	d0f7      	beq.n	801920e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801921e:	d804      	bhi.n	801922a <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8019220:	2b80      	cmp	r3, #128	; 0x80
 8019222:	d0f4      	beq.n	801920e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8019224:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019228:	e7f0      	b.n	801920c <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 801922a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801922e:	d0ee      	beq.n	801920e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8019230:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8019234:	e7e5      	b.n	8019202 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8019236:	6823      	ldr	r3, [r4, #0]
 8019238:	7f01      	ldrb	r1, [r0, #28]
 801923a:	4620      	mov	r0, r4
 801923c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801923e:	4798      	blx	r3
 8019240:	6823      	ldr	r3, [r4, #0]
 8019242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019244:	e006      	b.n	8019254 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8019246:	6823      	ldr	r3, [r4, #0]
 8019248:	7f01      	ldrb	r1, [r0, #28]
 801924a:	4620      	mov	r0, r4
 801924c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801924e:	4798      	blx	r3
 8019250:	6823      	ldr	r3, [r4, #0]
 8019252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019254:	4629      	mov	r1, r5
 8019256:	4620      	mov	r0, r4
 8019258:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801925c:	4718      	bx	r3
 801925e:	6823      	ldr	r3, [r4, #0]
 8019260:	4620      	mov	r0, r4
 8019262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019264:	4798      	blx	r3
 8019266:	e7f3      	b.n	8019250 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08019268 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8019268:	4770      	bx	lr

0801926a <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 801926a:	4770      	bx	lr

0801926c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 801926c:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8019270:	b510      	push	{r4, lr}
 8019272:	1ad2      	subs	r2, r2, r3
 8019274:	2a00      	cmp	r2, #0
 8019276:	bfdc      	itt	le
 8019278:	6884      	ldrle	r4, [r0, #8]
 801927a:	1912      	addle	r2, r2, r4
 801927c:	2a01      	cmp	r2, #1
 801927e:	dd16      	ble.n	80192ae <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8019280:	6842      	ldr	r2, [r0, #4]
 8019282:	2424      	movs	r4, #36	; 0x24
 8019284:	fb04 2303 	mla	r3, r4, r3, r2
 8019288:	f101 0220 	add.w	r2, r1, #32
 801928c:	f851 4b04 	ldr.w	r4, [r1], #4
 8019290:	4291      	cmp	r1, r2
 8019292:	f843 4b04 	str.w	r4, [r3], #4
 8019296:	d1f9      	bne.n	801928c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8019298:	780a      	ldrb	r2, [r1, #0]
 801929a:	701a      	strb	r2, [r3, #0]
 801929c:	68c3      	ldr	r3, [r0, #12]
 801929e:	6882      	ldr	r2, [r0, #8]
 80192a0:	f3bf 8f5b 	dmb	ish
 80192a4:	3301      	adds	r3, #1
 80192a6:	429a      	cmp	r2, r3
 80192a8:	bfd8      	it	le
 80192aa:	1a9b      	suble	r3, r3, r2
 80192ac:	60c3      	str	r3, [r0, #12]
 80192ae:	bd10      	pop	{r4, pc}

080192b0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80192b0:	6903      	ldr	r3, [r0, #16]
 80192b2:	6882      	ldr	r2, [r0, #8]
 80192b4:	f3bf 8f5b 	dmb	ish
 80192b8:	3301      	adds	r3, #1
 80192ba:	429a      	cmp	r2, r3
 80192bc:	bfd8      	it	le
 80192be:	1a9b      	suble	r3, r3, r2
 80192c0:	6103      	str	r3, [r0, #16]
 80192c2:	4770      	bx	lr

080192c4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80192c4:	b570      	push	{r4, r5, r6, lr}
 80192c6:	4604      	mov	r4, r0
 80192c8:	460e      	mov	r6, r1
 80192ca:	6860      	ldr	r0, [r4, #4]
 80192cc:	6803      	ldr	r3, [r0, #0]
 80192ce:	685b      	ldr	r3, [r3, #4]
 80192d0:	4798      	blx	r3
 80192d2:	2800      	cmp	r0, #0
 80192d4:	d1f9      	bne.n	80192ca <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 80192d6:	4d0d      	ldr	r5, [pc, #52]	; (801930c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 80192d8:	6828      	ldr	r0, [r5, #0]
 80192da:	6803      	ldr	r3, [r0, #0]
 80192dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80192de:	4798      	blx	r3
 80192e0:	f7e8 fed2 	bl	8002088 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 80192e4:	6828      	ldr	r0, [r5, #0]
 80192e6:	2101      	movs	r1, #1
 80192e8:	f7ff ff2a 	bl	8019140 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80192ec:	6860      	ldr	r0, [r4, #4]
 80192ee:	4631      	mov	r1, r6
 80192f0:	6803      	ldr	r3, [r0, #0]
 80192f2:	689b      	ldr	r3, [r3, #8]
 80192f4:	4798      	blx	r3
 80192f6:	6823      	ldr	r3, [r4, #0]
 80192f8:	4620      	mov	r0, r4
 80192fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80192fc:	4798      	blx	r3
 80192fe:	6828      	ldr	r0, [r5, #0]
 8019300:	6803      	ldr	r3, [r0, #0]
 8019302:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019306:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019308:	4718      	bx	r3
 801930a:	bf00      	nop
 801930c:	2400baf0 	.word	0x2400baf0

08019310 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8019310:	b508      	push	{r3, lr}
 8019312:	f7e8 fe9f 	bl	8002054 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8019316:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801931a:	f7e8 bea9 	b.w	8002070 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801931e <_ZN8touchgfx13DMA_Interface5startEv>:
 801931e:	b510      	push	{r4, lr}
 8019320:	4604      	mov	r4, r0
 8019322:	6840      	ldr	r0, [r0, #4]
 8019324:	6803      	ldr	r3, [r0, #0]
 8019326:	681b      	ldr	r3, [r3, #0]
 8019328:	4798      	blx	r3
 801932a:	b948      	cbnz	r0, 8019340 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801932c:	7a63      	ldrb	r3, [r4, #9]
 801932e:	b13b      	cbz	r3, 8019340 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8019330:	7a23      	ldrb	r3, [r4, #8]
 8019332:	b92b      	cbnz	r3, 8019340 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8019334:	6823      	ldr	r3, [r4, #0]
 8019336:	4620      	mov	r0, r4
 8019338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801933a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801933e:	4718      	bx	r3
 8019340:	bd10      	pop	{r4, pc}

08019342 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8019342:	b570      	push	{r4, r5, r6, lr}
 8019344:	4604      	mov	r4, r0
 8019346:	6840      	ldr	r0, [r0, #4]
 8019348:	6803      	ldr	r3, [r0, #0]
 801934a:	681b      	ldr	r3, [r3, #0]
 801934c:	4798      	blx	r3
 801934e:	4605      	mov	r5, r0
 8019350:	b930      	cbnz	r0, 8019360 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8019352:	7a23      	ldrb	r3, [r4, #8]
 8019354:	b123      	cbz	r3, 8019360 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8019356:	6860      	ldr	r0, [r4, #4]
 8019358:	6803      	ldr	r3, [r0, #0]
 801935a:	695b      	ldr	r3, [r3, #20]
 801935c:	4798      	blx	r3
 801935e:	7225      	strb	r5, [r4, #8]
 8019360:	6860      	ldr	r0, [r4, #4]
 8019362:	6803      	ldr	r3, [r0, #0]
 8019364:	681b      	ldr	r3, [r3, #0]
 8019366:	4798      	blx	r3
 8019368:	b928      	cbnz	r0, 8019376 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 801936a:	6823      	ldr	r3, [r4, #0]
 801936c:	4620      	mov	r0, r4
 801936e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019370:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019374:	4718      	bx	r3
 8019376:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801937a:	f7e8 be91 	b.w	80020a0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

08019380 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8019380:	b510      	push	{r4, lr}
 8019382:	6082      	str	r2, [r0, #8]
 8019384:	2200      	movs	r2, #0
 8019386:	4c03      	ldr	r4, [pc, #12]	; (8019394 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8019388:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801938c:	e9c0 4100 	strd	r4, r1, [r0]
 8019390:	bd10      	pop	{r4, pc}
 8019392:	bf00      	nop
 8019394:	0802f64c 	.word	0x0802f64c

08019398 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8019398:	6840      	ldr	r0, [r0, #4]
 801939a:	6803      	ldr	r3, [r0, #0]
 801939c:	681b      	ldr	r3, [r3, #0]
 801939e:	4718      	bx	r3

080193a0 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 80193a0:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80193a4:	4770      	bx	lr

080193a6 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 80193a6:	b510      	push	{r4, lr}
 80193a8:	4604      	mov	r4, r0
 80193aa:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80193ac:	b150      	cbz	r0, 80193c4 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 80193ae:	6803      	ldr	r3, [r0, #0]
 80193b0:	68db      	ldr	r3, [r3, #12]
 80193b2:	4798      	blx	r3
 80193b4:	b130      	cbz	r0, 80193c4 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 80193b6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80193b8:	4621      	mov	r1, r4
 80193ba:	6803      	ldr	r3, [r0, #0]
 80193bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80193c0:	689b      	ldr	r3, [r3, #8]
 80193c2:	4718      	bx	r3
 80193c4:	bd10      	pop	{r4, pc}

080193c6 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 80193c6:	790b      	ldrb	r3, [r1, #4]
 80193c8:	2b00      	cmp	r3, #0
 80193ca:	bf0c      	ite	eq
 80193cc:	2301      	moveq	r3, #1
 80193ce:	2300      	movne	r3, #0
 80193d0:	b570      	push	{r4, r5, r6, lr}
 80193d2:	4604      	mov	r4, r0
 80193d4:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 80193d8:	460e      	mov	r6, r1
 80193da:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 80193de:	d109      	bne.n	80193f4 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 80193e0:	b14d      	cbz	r5, 80193f6 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 80193e2:	7933      	ldrb	r3, [r6, #4]
 80193e4:	2b01      	cmp	r3, #1
 80193e6:	d10c      	bne.n	8019402 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 80193e8:	6823      	ldr	r3, [r4, #0]
 80193ea:	4620      	mov	r0, r4
 80193ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80193ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80193f2:	4718      	bx	r3
 80193f4:	b12d      	cbz	r5, 8019402 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 80193f6:	6823      	ldr	r3, [r4, #0]
 80193f8:	4620      	mov	r0, r4
 80193fa:	695b      	ldr	r3, [r3, #20]
 80193fc:	4798      	blx	r3
 80193fe:	2d00      	cmp	r5, #0
 8019400:	d1ef      	bne.n	80193e2 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8019402:	bd70      	pop	{r4, r5, r6, pc}

08019404 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE>:
 8019404:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8019408:	b133      	cbz	r3, 8019418 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE+0x14>
 801940a:	790b      	ldrb	r3, [r1, #4]
 801940c:	2b01      	cmp	r3, #1
 801940e:	bf01      	itttt	eq
 8019410:	8dc3      	ldrheq	r3, [r0, #46]	; 0x2e
 8019412:	8e02      	ldrheq	r2, [r0, #48]	; 0x30
 8019414:	8603      	strheq	r3, [r0, #48]	; 0x30
 8019416:	85c2      	strheq	r2, [r0, #46]	; 0x2e
 8019418:	f7ff bfd5 	b.w	80193c6 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>

0801941c <_ZNK8touchgfx6Button17invalidateContentEv>:
 801941c:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
 8019420:	b12a      	cbz	r2, 801942e <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8019422:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8019426:	b112      	cbz	r2, 801942e <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8019428:	6803      	ldr	r3, [r0, #0]
 801942a:	695b      	ldr	r3, [r3, #20]
 801942c:	4718      	bx	r3
 801942e:	4770      	bx	lr

08019430 <_ZN8touchgfx12ToggleButton10forceStateEb>:
 8019430:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 8019432:	b129      	cbz	r1, 8019440 <_ZN8touchgfx12ToggleButton10forceStateEb+0x10>
 8019434:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
 8019436:	429a      	cmp	r2, r3
 8019438:	d007      	beq.n	801944a <_ZN8touchgfx12ToggleButton10forceStateEb+0x1a>
 801943a:	8602      	strh	r2, [r0, #48]	; 0x30
 801943c:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801943e:	4770      	bx	lr
 8019440:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 8019442:	429a      	cmp	r2, r3
 8019444:	bf1c      	itt	ne
 8019446:	85c2      	strhne	r2, [r0, #46]	; 0x2e
 8019448:	8603      	strhne	r3, [r0, #48]	; 0x30
 801944a:	4770      	bx	lr

0801944c <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 801944c:	2000      	movs	r0, #0
 801944e:	4770      	bx	lr

08019450 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 8019450:	4b07      	ldr	r3, [pc, #28]	; (8019470 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 8019452:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8019454:	881b      	ldrh	r3, [r3, #0]
 8019456:	4293      	cmp	r3, r2
 8019458:	bf81      	itttt	hi
 801945a:	4b06      	ldrhi	r3, [pc, #24]	; (8019474 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 801945c:	681b      	ldrhi	r3, [r3, #0]
 801945e:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 8019462:	7858      	ldrbhi	r0, [r3, #1]
 8019464:	bf8c      	ite	hi
 8019466:	f000 0003 	andhi.w	r0, r0, #3
 801946a:	2000      	movls	r0, #0
 801946c:	4770      	bx	lr
 801946e:	bf00      	nop
 8019470:	2400bb44 	.word	0x2400bb44
 8019474:	2400bb40 	.word	0x2400bb40

08019478 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 8019478:	4b11      	ldr	r3, [pc, #68]	; (80194c0 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 801947a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801947e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8019480:	4604      	mov	r4, r0
 8019482:	881b      	ldrh	r3, [r3, #0]
 8019484:	428b      	cmp	r3, r1
 8019486:	d918      	bls.n	80194ba <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 8019488:	6803      	ldr	r3, [r0, #0]
 801948a:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 801948c:	4b0d      	ldr	r3, [pc, #52]	; (80194c4 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 801948e:	6818      	ldr	r0, [r3, #0]
 8019490:	f7f1 f86a 	bl	800a568 <_ZNK8touchgfx5Texts7getTextEt>
 8019494:	6823      	ldr	r3, [r4, #0]
 8019496:	4606      	mov	r6, r0
 8019498:	4620      	mov	r0, r4
 801949a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801949c:	4798      	blx	r3
 801949e:	6823      	ldr	r3, [r4, #0]
 80194a0:	4607      	mov	r7, r0
 80194a2:	4620      	mov	r0, r4
 80194a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80194a8:	4798      	blx	r3
 80194aa:	463a      	mov	r2, r7
 80194ac:	4603      	mov	r3, r0
 80194ae:	4631      	mov	r1, r6
 80194b0:	4620      	mov	r0, r4
 80194b2:	46ac      	mov	ip, r5
 80194b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80194b8:	4760      	bx	ip
 80194ba:	2000      	movs	r0, #0
 80194bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80194c0:	2400bb44 	.word	0x2400bb44
 80194c4:	2400bb4c 	.word	0x2400bb4c

080194c8 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 80194c8:	4b18      	ldr	r3, [pc, #96]	; (801952c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 80194ca:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80194ce:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80194d0:	4604      	mov	r4, r0
 80194d2:	881b      	ldrh	r3, [r3, #0]
 80194d4:	428b      	cmp	r3, r1
 80194d6:	d926      	bls.n	8019526 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 80194d8:	4b15      	ldr	r3, [pc, #84]	; (8019530 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 80194da:	681b      	ldr	r3, [r3, #0]
 80194dc:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 80194e0:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 80194e4:	4b13      	ldr	r3, [pc, #76]	; (8019534 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 80194e6:	7855      	ldrb	r5, [r2, #1]
 80194e8:	681b      	ldr	r3, [r3, #0]
 80194ea:	f3c5 0581 	ubfx	r5, r5, #2, #2
 80194ee:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 80194f2:	6833      	ldr	r3, [r6, #0]
 80194f4:	69df      	ldr	r7, [r3, #28]
 80194f6:	4b10      	ldr	r3, [pc, #64]	; (8019538 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 80194f8:	6818      	ldr	r0, [r3, #0]
 80194fa:	f7f1 f835 	bl	800a568 <_ZNK8touchgfx5Texts7getTextEt>
 80194fe:	6823      	ldr	r3, [r4, #0]
 8019500:	4680      	mov	r8, r0
 8019502:	4620      	mov	r0, r4
 8019504:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019506:	4798      	blx	r3
 8019508:	6823      	ldr	r3, [r4, #0]
 801950a:	4681      	mov	r9, r0
 801950c:	4620      	mov	r0, r4
 801950e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8019512:	4798      	blx	r3
 8019514:	464b      	mov	r3, r9
 8019516:	9000      	str	r0, [sp, #0]
 8019518:	4642      	mov	r2, r8
 801951a:	4629      	mov	r1, r5
 801951c:	4630      	mov	r0, r6
 801951e:	47b8      	blx	r7
 8019520:	b003      	add	sp, #12
 8019522:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019526:	2000      	movs	r0, #0
 8019528:	e7fa      	b.n	8019520 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 801952a:	bf00      	nop
 801952c:	2400bb44 	.word	0x2400bb44
 8019530:	2400bb40 	.word	0x2400bb40
 8019534:	2400bb48 	.word	0x2400bb48
 8019538:	2400bb4c 	.word	0x2400bb4c

0801953c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 801953c:	b40e      	push	{r1, r2, r3}
 801953e:	4b30      	ldr	r3, [pc, #192]	; (8019600 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 8019540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019544:	881a      	ldrh	r2, [r3, #0]
 8019546:	b09d      	sub	sp, #116	; 0x74
 8019548:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801954a:	4604      	mov	r4, r0
 801954c:	429a      	cmp	r2, r3
 801954e:	d954      	bls.n	80195fa <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 8019550:	aa26      	add	r2, sp, #152	; 0x98
 8019552:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8019604 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8019556:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8019608 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 801955a:	9202      	str	r2, [sp, #8]
 801955c:	f8d9 2000 	ldr.w	r2, [r9]
 8019560:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8019564:	f8d8 3000 	ldr.w	r3, [r8]
 8019568:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801956c:	682b      	ldr	r3, [r5, #0]
 801956e:	4628      	mov	r0, r5
 8019570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019572:	4798      	blx	r3
 8019574:	4606      	mov	r6, r0
 8019576:	b207      	sxth	r7, r0
 8019578:	a803      	add	r0, sp, #12
 801957a:	f004 f875 	bl	801d668 <_ZN8touchgfx12TextProviderC1Ev>
 801957e:	682b      	ldr	r3, [r5, #0]
 8019580:	4628      	mov	r0, r5
 8019582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019584:	4798      	blx	r3
 8019586:	682b      	ldr	r3, [r5, #0]
 8019588:	4682      	mov	sl, r0
 801958a:	4628      	mov	r0, r5
 801958c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801958e:	4798      	blx	r3
 8019590:	4653      	mov	r3, sl
 8019592:	9000      	str	r0, [sp, #0]
 8019594:	a803      	add	r0, sp, #12
 8019596:	9a02      	ldr	r2, [sp, #8]
 8019598:	9925      	ldr	r1, [sp, #148]	; 0x94
 801959a:	f004 f8c0 	bl	801d71e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801959e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80195a0:	f8d9 3000 	ldr.w	r3, [r9]
 80195a4:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 80195a8:	8925      	ldrh	r5, [r4, #8]
 80195aa:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 80195ae:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 80195b2:	eba5 050c 	sub.w	r5, r5, ip
 80195b6:	784a      	ldrb	r2, [r1, #1]
 80195b8:	f8d8 3000 	ldr.w	r3, [r8]
 80195bc:	b22d      	sxth	r5, r5
 80195be:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 80195c2:	f3c2 0281 	ubfx	r2, r2, #2, #2
 80195c6:	9500      	str	r5, [sp, #0]
 80195c8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80195cc:	a803      	add	r0, sp, #12
 80195ce:	f001 fd59 	bl	801b084 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 80195d2:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 80195d6:	b203      	sxth	r3, r0
 80195d8:	18b9      	adds	r1, r7, r2
 80195da:	2900      	cmp	r1, #0
 80195dc:	dd0b      	ble.n	80195f6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 80195de:	3b01      	subs	r3, #1
 80195e0:	fb13 f302 	smulbb	r3, r3, r2
 80195e4:	fb16 3300 	smlabb	r3, r6, r0, r3
 80195e8:	b21f      	sxth	r7, r3
 80195ea:	4638      	mov	r0, r7
 80195ec:	b01d      	add	sp, #116	; 0x74
 80195ee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80195f2:	b003      	add	sp, #12
 80195f4:	4770      	bx	lr
 80195f6:	2b00      	cmp	r3, #0
 80195f8:	dcf7      	bgt.n	80195ea <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 80195fa:	2700      	movs	r7, #0
 80195fc:	e7f5      	b.n	80195ea <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 80195fe:	bf00      	nop
 8019600:	2400bb44 	.word	0x2400bb44
 8019604:	2400bb40 	.word	0x2400bb40
 8019608:	2400bb48 	.word	0x2400bb48

0801960c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 801960c:	4bbd      	ldr	r3, [pc, #756]	; (8019904 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 801960e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019612:	460c      	mov	r4, r1
 8019614:	881b      	ldrh	r3, [r3, #0]
 8019616:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 8019618:	b0a9      	sub	sp, #164	; 0xa4
 801961a:	4680      	mov	r8, r0
 801961c:	428b      	cmp	r3, r1
 801961e:	d809      	bhi.n	8019634 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 8019620:	2300      	movs	r3, #0
 8019622:	f04f 32ff 	mov.w	r2, #4294967295
 8019626:	6083      	str	r3, [r0, #8]
 8019628:	e9c0 3200 	strd	r3, r2, [r0]
 801962c:	4640      	mov	r0, r8
 801962e:	b029      	add	sp, #164	; 0xa4
 8019630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019634:	4eb4      	ldr	r6, [pc, #720]	; (8019908 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 8019636:	6833      	ldr	r3, [r6, #0]
 8019638:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 801963c:	4bb3      	ldr	r3, [pc, #716]	; (801990c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 801963e:	681b      	ldr	r3, [r3, #0]
 8019640:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8019644:	4bb2      	ldr	r3, [pc, #712]	; (8019910 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8019646:	6818      	ldr	r0, [r3, #0]
 8019648:	f7f0 ff8e 	bl	800a568 <_ZNK8touchgfx5Texts7getTextEt>
 801964c:	682b      	ldr	r3, [r5, #0]
 801964e:	4681      	mov	r9, r0
 8019650:	4628      	mov	r0, r5
 8019652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019654:	4798      	blx	r3
 8019656:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
 8019658:	b203      	sxth	r3, r0
 801965a:	4682      	mov	sl, r0
 801965c:	4407      	add	r7, r0
 801965e:	a80f      	add	r0, sp, #60	; 0x3c
 8019660:	9304      	str	r3, [sp, #16]
 8019662:	b2bb      	uxth	r3, r7
 8019664:	9303      	str	r3, [sp, #12]
 8019666:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 801966a:	2b00      	cmp	r3, #0
 801966c:	f040 80a5 	bne.w	80197ba <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1ae>
 8019670:	f003 fffa 	bl	801d668 <_ZN8touchgfx12TextProviderC1Ev>
 8019674:	682b      	ldr	r3, [r5, #0]
 8019676:	4628      	mov	r0, r5
 8019678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801967a:	4798      	blx	r3
 801967c:	682b      	ldr	r3, [r5, #0]
 801967e:	4606      	mov	r6, r0
 8019680:	4628      	mov	r0, r5
 8019682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019684:	4798      	blx	r3
 8019686:	6823      	ldr	r3, [r4, #0]
 8019688:	4607      	mov	r7, r0
 801968a:	4620      	mov	r0, r4
 801968c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801968e:	4798      	blx	r3
 8019690:	6823      	ldr	r3, [r4, #0]
 8019692:	4683      	mov	fp, r0
 8019694:	4620      	mov	r0, r4
 8019696:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801969a:	4798      	blx	r3
 801969c:	463b      	mov	r3, r7
 801969e:	4649      	mov	r1, r9
 80196a0:	4632      	mov	r2, r6
 80196a2:	2600      	movs	r6, #0
 80196a4:	e9cd b000 	strd	fp, r0, [sp]
 80196a8:	a80f      	add	r0, sp, #60	; 0x3c
 80196aa:	4637      	mov	r7, r6
 80196ac:	f004 f84c 	bl	801d748 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 80196b0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80196b4:	f8df b250 	ldr.w	fp, [pc, #592]	; 8019908 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 80196b8:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80196bc:	bf0c      	ite	eq
 80196be:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 80196c2:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 80196c6:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80196c8:	4629      	mov	r1, r5
 80196ca:	f8db 3000 	ldr.w	r3, [fp]
 80196ce:	a80f      	add	r0, sp, #60	; 0x3c
 80196d0:	3701      	adds	r7, #1
 80196d2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80196d6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80196da:	b2bf      	uxth	r7, r7
 80196dc:	785b      	ldrb	r3, [r3, #1]
 80196de:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80196e2:	f001 f9ea 	bl	801aaba <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 80196e6:	9b03      	ldr	r3, [sp, #12]
 80196e8:	4286      	cmp	r6, r0
 80196ea:	eba9 0903 	sub.w	r9, r9, r3
 80196ee:	bfb8      	it	lt
 80196f0:	4606      	movlt	r6, r0
 80196f2:	a80f      	add	r0, sp, #60	; 0x3c
 80196f4:	fa0f f989 	sxth.w	r9, r9
 80196f8:	b236      	sxth	r6, r6
 80196fa:	f003 ffdc 	bl	801d6b6 <_ZN8touchgfx12TextProvider11endOfStringEv>
 80196fe:	b918      	cbnz	r0, 8019708 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8019700:	7a2b      	ldrb	r3, [r5, #8]
 8019702:	444b      	add	r3, r9
 8019704:	2b00      	cmp	r3, #0
 8019706:	dcde      	bgt.n	80196c6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xba>
 8019708:	9b03      	ldr	r3, [sp, #12]
 801970a:	4620      	mov	r0, r4
 801970c:	9a04      	ldr	r2, [sp, #16]
 801970e:	fb13 f707 	smulbb	r7, r3, r7
 8019712:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8019714:	f895 9009 	ldrb.w	r9, [r5, #9]
 8019718:	1aff      	subs	r7, r7, r3
 801971a:	b2bf      	uxth	r7, r7
 801971c:	b23b      	sxth	r3, r7
 801971e:	429a      	cmp	r2, r3
 8019720:	bfa8      	it	ge
 8019722:	4657      	movge	r7, sl
 8019724:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8019728:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801972c:	6823      	ldr	r3, [r4, #0]
 801972e:	444f      	add	r7, r9
 8019730:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019732:	bf08      	it	eq
 8019734:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 8019738:	fa1f f987 	uxth.w	r9, r7
 801973c:	bf18      	it	ne
 801973e:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 8019742:	4798      	blx	r3
 8019744:	2801      	cmp	r0, #1
 8019746:	fa0f f789 	sxth.w	r7, r9
 801974a:	b2b3      	uxth	r3, r6
 801974c:	f000 80e2 	beq.w	8019914 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 8019750:	2802      	cmp	r0, #2
 8019752:	f894 6037 	ldrb.w	r6, [r4, #55]	; 0x37
 8019756:	f000 80e3 	beq.w	8019920 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 801975a:	7aea      	ldrb	r2, [r5, #11]
 801975c:	b236      	sxth	r6, r6
 801975e:	7b2d      	ldrb	r5, [r5, #12]
 8019760:	1ab6      	subs	r6, r6, r2
 8019762:	442a      	add	r2, r5
 8019764:	fa1f fa86 	uxth.w	sl, r6
 8019768:	4413      	add	r3, r2
 801976a:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 801976e:	fa0f fb8a 	sxth.w	fp, sl
 8019772:	b29b      	uxth	r3, r3
 8019774:	2a02      	cmp	r2, #2
 8019776:	b21e      	sxth	r6, r3
 8019778:	f000 80d6 	beq.w	8019928 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 801977c:	2a03      	cmp	r2, #3
 801977e:	f000 80de 	beq.w	801993e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 8019782:	2a01      	cmp	r2, #1
 8019784:	f040 80e6 	bne.w	8019954 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 8019788:	8925      	ldrh	r5, [r4, #8]
 801978a:	4633      	mov	r3, r6
 801978c:	463e      	mov	r6, r7
 801978e:	eba5 0909 	sub.w	r9, r5, r9
 8019792:	461f      	mov	r7, r3
 8019794:	465d      	mov	r5, fp
 8019796:	fa0f fb89 	sxth.w	fp, r9
 801979a:	4b5d      	ldr	r3, [pc, #372]	; (8019910 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 801979c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801979e:	6818      	ldr	r0, [r3, #0]
 80197a0:	f7f0 fee2 	bl	800a568 <_ZNK8touchgfx5Texts7getTextEt>
 80197a4:	f8a8 b000 	strh.w	fp, [r8]
 80197a8:	f8a8 5002 	strh.w	r5, [r8, #2]
 80197ac:	f8a8 6004 	strh.w	r6, [r8, #4]
 80197b0:	f8a8 7006 	strh.w	r7, [r8, #6]
 80197b4:	f8c8 0008 	str.w	r0, [r8, #8]
 80197b8:	e738      	b.n	801962c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 80197ba:	f003 ff55 	bl	801d668 <_ZN8touchgfx12TextProviderC1Ev>
 80197be:	682b      	ldr	r3, [r5, #0]
 80197c0:	4628      	mov	r0, r5
 80197c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80197c4:	4798      	blx	r3
 80197c6:	682b      	ldr	r3, [r5, #0]
 80197c8:	4607      	mov	r7, r0
 80197ca:	4628      	mov	r0, r5
 80197cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80197ce:	4798      	blx	r3
 80197d0:	6823      	ldr	r3, [r4, #0]
 80197d2:	4683      	mov	fp, r0
 80197d4:	4620      	mov	r0, r4
 80197d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80197d8:	4798      	blx	r3
 80197da:	6822      	ldr	r2, [r4, #0]
 80197dc:	9005      	str	r0, [sp, #20]
 80197de:	4620      	mov	r0, r4
 80197e0:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80197e4:	4790      	blx	r2
 80197e6:	9b05      	ldr	r3, [sp, #20]
 80197e8:	463a      	mov	r2, r7
 80197ea:	4649      	mov	r1, r9
 80197ec:	9001      	str	r0, [sp, #4]
 80197ee:	a80f      	add	r0, sp, #60	; 0x3c
 80197f0:	9300      	str	r3, [sp, #0]
 80197f2:	465b      	mov	r3, fp
 80197f4:	f003 ffa8 	bl	801d748 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 80197f8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80197fc:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 8019800:	af0f      	add	r7, sp, #60	; 0x3c
 8019802:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8019806:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801980a:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801980c:	bf0a      	itet	eq
 801980e:	464a      	moveq	r2, r9
 8019810:	461a      	movne	r2, r3
 8019812:	4699      	moveq	r9, r3
 8019814:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8019818:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 801981c:	1ad2      	subs	r2, r2, r3
 801981e:	6833      	ldr	r3, [r6, #0]
 8019820:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	; 0x34
 8019824:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8019828:	7859      	ldrb	r1, [r3, #1]
 801982a:	2300      	movs	r3, #0
 801982c:	9707      	str	r7, [sp, #28]
 801982e:	f3c1 0181 	ubfx	r1, r1, #2, #2
 8019832:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019836:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 801983a:	f88d 1020 	strb.w	r1, [sp, #32]
 801983e:	9509      	str	r5, [sp, #36]	; 0x24
 8019840:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8019844:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 8019848:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 801984c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8019850:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8019854:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8019858:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801985c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8019860:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8019864:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8019868:	b350      	cbz	r0, 80198c0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 801986a:	682b      	ldr	r3, [r5, #0]
 801986c:	4628      	mov	r0, r5
 801986e:	695b      	ldr	r3, [r3, #20]
 8019870:	4798      	blx	r3
 8019872:	4607      	mov	r7, r0
 8019874:	b320      	cbz	r0, 80198c0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8019876:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019878:	4639      	mov	r1, r7
 801987a:	6803      	ldr	r3, [r0, #0]
 801987c:	68db      	ldr	r3, [r3, #12]
 801987e:	4798      	blx	r3
 8019880:	4606      	mov	r6, r0
 8019882:	b1e8      	cbz	r0, 80198c0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8019884:	7b43      	ldrb	r3, [r0, #13]
 8019886:	7a82      	ldrb	r2, [r0, #10]
 8019888:	005b      	lsls	r3, r3, #1
 801988a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801988e:	4313      	orrs	r3, r2
 8019890:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8019894:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 8019898:	2b06      	cmp	r3, #6
 801989a:	d111      	bne.n	80198c0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 801989c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801989e:	4632      	mov	r2, r6
 80198a0:	4639      	mov	r1, r7
 80198a2:	6803      	ldr	r3, [r0, #0]
 80198a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80198a6:	4798      	blx	r3
 80198a8:	7b73      	ldrb	r3, [r6, #13]
 80198aa:	005b      	lsls	r3, r3, #1
 80198ac:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80198b0:	7ab3      	ldrb	r3, [r6, #10]
 80198b2:	4313      	orrs	r3, r2
 80198b4:	4418      	add	r0, r3
 80198b6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80198ba:	4418      	add	r0, r3
 80198bc:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 80198c0:	2600      	movs	r6, #0
 80198c2:	4637      	mov	r7, r6
 80198c4:	a806      	add	r0, sp, #24
 80198c6:	3701      	adds	r7, #1
 80198c8:	f001 fad9 	bl	801ae7e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 80198cc:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 80198d0:	9b03      	ldr	r3, [sp, #12]
 80198d2:	b2bf      	uxth	r7, r7
 80198d4:	4286      	cmp	r6, r0
 80198d6:	eba9 0903 	sub.w	r9, r9, r3
 80198da:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80198de:	bfb8      	it	lt
 80198e0:	4606      	movlt	r6, r0
 80198e2:	fa0f f989 	sxth.w	r9, r9
 80198e6:	b236      	sxth	r6, r6
 80198e8:	2b00      	cmp	r3, #0
 80198ea:	f43f af0d 	beq.w	8019708 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 80198ee:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 80198f2:	2b00      	cmp	r3, #0
 80198f4:	f47f af08 	bne.w	8019708 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 80198f8:	7a2b      	ldrb	r3, [r5, #8]
 80198fa:	444b      	add	r3, r9
 80198fc:	2b00      	cmp	r3, #0
 80198fe:	dce1      	bgt.n	80198c4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b8>
 8019900:	e702      	b.n	8019708 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8019902:	bf00      	nop
 8019904:	2400bb44 	.word	0x2400bb44
 8019908:	2400bb40 	.word	0x2400bb40
 801990c:	2400bb48 	.word	0x2400bb48
 8019910:	2400bb4c 	.word	0x2400bb4c
 8019914:	ebaa 0606 	sub.w	r6, sl, r6
 8019918:	2002      	movs	r0, #2
 801991a:	fb96 f6f0 	sdiv	r6, r6, r0
 801991e:	e71c      	b.n	801975a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8019920:	441e      	add	r6, r3
 8019922:	ebaa 0606 	sub.w	r6, sl, r6
 8019926:	e718      	b.n	801975a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8019928:	8925      	ldrh	r5, [r4, #8]
 801992a:	1aed      	subs	r5, r5, r3
 801992c:	eba5 050a 	sub.w	r5, r5, sl
 8019930:	fa0f fb85 	sxth.w	fp, r5
 8019934:	8965      	ldrh	r5, [r4, #10]
 8019936:	eba5 0509 	sub.w	r5, r5, r9
 801993a:	b22d      	sxth	r5, r5
 801993c:	e72d      	b.n	801979a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 801993e:	8965      	ldrh	r5, [r4, #10]
 8019940:	f04f 0b00 	mov.w	fp, #0
 8019944:	1aed      	subs	r5, r5, r3
 8019946:	4633      	mov	r3, r6
 8019948:	463e      	mov	r6, r7
 801994a:	eba5 050a 	sub.w	r5, r5, sl
 801994e:	461f      	mov	r7, r3
 8019950:	b22d      	sxth	r5, r5
 8019952:	e722      	b.n	801979a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8019954:	2500      	movs	r5, #0
 8019956:	e720      	b.n	801979a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>

08019958 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 8019958:	b513      	push	{r0, r1, r4, lr}
 801995a:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 801995e:	4604      	mov	r4, r0
 8019960:	b1fb      	cbz	r3, 80199a2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8019962:	4b16      	ldr	r3, [pc, #88]	; (80199bc <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 8019964:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8019966:	881b      	ldrh	r3, [r3, #0]
 8019968:	428b      	cmp	r3, r1
 801996a:	d91a      	bls.n	80199a2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801996c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8019970:	2b00      	cmp	r3, #0
 8019972:	dd16      	ble.n	80199a2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8019974:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8019978:	2b00      	cmp	r3, #0
 801997a:	dd12      	ble.n	80199a2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801997c:	4b10      	ldr	r3, [pc, #64]	; (80199c0 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 801997e:	6818      	ldr	r0, [r3, #0]
 8019980:	f7f0 fdf2 	bl	800a568 <_ZNK8touchgfx5Texts7getTextEt>
 8019984:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 8019988:	6822      	ldr	r2, [r4, #0]
 801998a:	2b00      	cmp	r3, #0
 801998c:	db06      	blt.n	801999c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 801998e:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8019992:	2b00      	cmp	r3, #0
 8019994:	db02      	blt.n	801999c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8019996:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8019998:	4298      	cmp	r0, r3
 801999a:	d004      	beq.n	80199a6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 801999c:	6953      	ldr	r3, [r2, #20]
 801999e:	4620      	mov	r0, r4
 80199a0:	4798      	blx	r3
 80199a2:	b002      	add	sp, #8
 80199a4:	bd10      	pop	{r4, pc}
 80199a6:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 80199aa:	466b      	mov	r3, sp
 80199ac:	6912      	ldr	r2, [r2, #16]
 80199ae:	c903      	ldmia	r1, {r0, r1}
 80199b0:	e883 0003 	stmia.w	r3, {r0, r1}
 80199b4:	4619      	mov	r1, r3
 80199b6:	4620      	mov	r0, r4
 80199b8:	4790      	blx	r2
 80199ba:	e7f2      	b.n	80199a2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80199bc:	2400bb44 	.word	0x2400bb44
 80199c0:	2400bb4c 	.word	0x2400bb4c

080199c4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 80199c4:	4b45      	ldr	r3, [pc, #276]	; (8019adc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 80199c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80199ca:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80199cc:	b08e      	sub	sp, #56	; 0x38
 80199ce:	881b      	ldrh	r3, [r3, #0]
 80199d0:	4604      	mov	r4, r0
 80199d2:	4293      	cmp	r3, r2
 80199d4:	d97e      	bls.n	8019ad4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 80199d6:	6808      	ldr	r0, [r1, #0]
 80199d8:	ab05      	add	r3, sp, #20
 80199da:	6849      	ldr	r1, [r1, #4]
 80199dc:	4d40      	ldr	r5, [pc, #256]	; (8019ae0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 80199de:	c303      	stmia	r3!, {r0, r1}
 80199e0:	4611      	mov	r1, r2
 80199e2:	6828      	ldr	r0, [r5, #0]
 80199e4:	f7f0 fdc0 	bl	800a568 <_ZNK8touchgfx5Texts7getTextEt>
 80199e8:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 80199ec:	2b00      	cmp	r3, #0
 80199ee:	db11      	blt.n	8019a14 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 80199f0:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 80199f4:	2b00      	cmp	r3, #0
 80199f6:	db0d      	blt.n	8019a14 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 80199f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80199fa:	4298      	cmp	r0, r3
 80199fc:	d10a      	bne.n	8019a14 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 80199fe:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 8019a02:	ab09      	add	r3, sp, #36	; 0x24
 8019a04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019a08:	e883 0003 	stmia.w	r3, {r0, r1}
 8019a0c:	4619      	mov	r1, r3
 8019a0e:	a805      	add	r0, sp, #20
 8019a10:	f7fe fa36 	bl	8017e80 <_ZN8touchgfx4RectaNERKS0_>
 8019a14:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8019a18:	2b00      	cmp	r3, #0
 8019a1a:	dd5b      	ble.n	8019ad4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8019a1c:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8019a20:	2b00      	cmp	r3, #0
 8019a22:	dd57      	ble.n	8019ad4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8019a24:	4f2f      	ldr	r7, [pc, #188]	; (8019ae4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 8019a26:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8019a28:	683b      	ldr	r3, [r7, #0]
 8019a2a:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8019a2e:	4b2e      	ldr	r3, [pc, #184]	; (8019ae8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 8019a30:	681b      	ldr	r3, [r3, #0]
 8019a32:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8019a36:	2e00      	cmp	r6, #0
 8019a38:	d04c      	beq.n	8019ad4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8019a3a:	6823      	ldr	r3, [r4, #0]
 8019a3c:	4620      	mov	r0, r4
 8019a3e:	f894 8036 	ldrb.w	r8, [r4, #54]	; 0x36
 8019a42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019a44:	4798      	blx	r3
 8019a46:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8019a48:	683b      	ldr	r3, [r7, #0]
 8019a4a:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	; 0x34
 8019a4e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8019a52:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
 8019a56:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8019a5a:	785b      	ldrb	r3, [r3, #1]
 8019a5c:	f894 7037 	ldrb.w	r7, [r4, #55]	; 0x37
 8019a60:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8019a64:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8019a66:	9609      	str	r6, [sp, #36]	; 0x24
 8019a68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019a6c:	4b1f      	ldr	r3, [pc, #124]	; (8019aec <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 8019a6e:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 8019a72:	681b      	ldr	r3, [r3, #0]
 8019a74:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
 8019a78:	910b      	str	r1, [sp, #44]	; 0x2c
 8019a7a:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
 8019a7e:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
 8019a82:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
 8019a86:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 8019a8a:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8019a8e:	b10a      	cbz	r2, 8019a94 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 8019a90:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 8019a92:	b906      	cbnz	r6, 8019a96 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 8019a94:	689e      	ldr	r6, [r3, #8]
 8019a96:	af07      	add	r7, sp, #28
 8019a98:	4621      	mov	r1, r4
 8019a9a:	4638      	mov	r0, r7
 8019a9c:	f003 f900 	bl	801cca0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019aa0:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8019aa2:	6828      	ldr	r0, [r5, #0]
 8019aa4:	f7f0 fd60 	bl	800a568 <_ZNK8touchgfx5Texts7getTextEt>
 8019aa8:	6823      	ldr	r3, [r4, #0]
 8019aaa:	4605      	mov	r5, r0
 8019aac:	4620      	mov	r0, r4
 8019aae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019ab0:	4798      	blx	r3
 8019ab2:	6823      	ldr	r3, [r4, #0]
 8019ab4:	4680      	mov	r8, r0
 8019ab6:	4620      	mov	r0, r4
 8019ab8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8019abc:	4798      	blx	r3
 8019abe:	ab09      	add	r3, sp, #36	; 0x24
 8019ac0:	9501      	str	r5, [sp, #4]
 8019ac2:	9300      	str	r3, [sp, #0]
 8019ac4:	ab05      	add	r3, sp, #20
 8019ac6:	e9cd 8002 	strd	r8, r0, [sp, #8]
 8019aca:	4630      	mov	r0, r6
 8019acc:	e897 0006 	ldmia.w	r7, {r1, r2}
 8019ad0:	f7f0 fcdb 	bl	800a48a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8019ad4:	b00e      	add	sp, #56	; 0x38
 8019ad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ada:	bf00      	nop
 8019adc:	2400bb44 	.word	0x2400bb44
 8019ae0:	2400bb4c 	.word	0x2400bb4c
 8019ae4:	2400bb40 	.word	0x2400bb40
 8019ae8:	2400bb48 	.word	0x2400bb48
 8019aec:	2400baf0 	.word	0x2400baf0

08019af0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8019af0:	b538      	push	{r3, r4, r5, lr}
 8019af2:	4b0e      	ldr	r3, [pc, #56]	; (8019b2c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 8019af4:	4604      	mov	r4, r0
 8019af6:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8019af8:	881b      	ldrh	r3, [r3, #0]
 8019afa:	429a      	cmp	r2, r3
 8019afc:	d214      	bcs.n	8019b28 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8019afe:	6803      	ldr	r3, [r0, #0]
 8019b00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019b02:	4798      	blx	r3
 8019b04:	6823      	ldr	r3, [r4, #0]
 8019b06:	4605      	mov	r5, r0
 8019b08:	4620      	mov	r0, r4
 8019b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019b0c:	4798      	blx	r3
 8019b0e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8019b12:	b22d      	sxth	r5, r5
 8019b14:	4601      	mov	r1, r0
 8019b16:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8019b1a:	bf06      	itte	eq
 8019b1c:	4602      	moveq	r2, r0
 8019b1e:	4629      	moveq	r1, r5
 8019b20:	462a      	movne	r2, r5
 8019b22:	4620      	mov	r0, r4
 8019b24:	f7ea fb67 	bl	80041f6 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8019b28:	bd38      	pop	{r3, r4, r5, pc}
 8019b2a:	bf00      	nop
 8019b2c:	2400bb44 	.word	0x2400bb44

08019b30 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8019b30:	b530      	push	{r4, r5, lr}
 8019b32:	888b      	ldrh	r3, [r1, #4]
 8019b34:	b085      	sub	sp, #20
 8019b36:	4604      	mov	r4, r0
 8019b38:	8583      	strh	r3, [r0, #44]	; 0x2c
 8019b3a:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8019b3e:	b923      	cbnz	r3, 8019b4a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8019b40:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8019b44:	b90b      	cbnz	r3, 8019b4a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8019b46:	f7ff ffd3 	bl	8019af0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8019b4a:	6823      	ldr	r3, [r4, #0]
 8019b4c:	466d      	mov	r5, sp
 8019b4e:	4621      	mov	r1, r4
 8019b50:	343c      	adds	r4, #60	; 0x3c
 8019b52:	4628      	mov	r0, r5
 8019b54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019b58:	4798      	blx	r3
 8019b5a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019b5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8019b62:	b005      	add	sp, #20
 8019b64:	bd30      	pop	{r4, r5, pc}

08019b66 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8019b66:	2300      	movs	r3, #0
 8019b68:	8083      	strh	r3, [r0, #4]
 8019b6a:	80c3      	strh	r3, [r0, #6]
 8019b6c:	8003      	strh	r3, [r0, #0]
 8019b6e:	8043      	strh	r3, [r0, #2]
 8019b70:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8019b74:	2bff      	cmp	r3, #255	; 0xff
 8019b76:	bf01      	itttt	eq
 8019b78:	890b      	ldrheq	r3, [r1, #8]
 8019b7a:	8083      	strheq	r3, [r0, #4]
 8019b7c:	894b      	ldrheq	r3, [r1, #10]
 8019b7e:	80c3      	strheq	r3, [r0, #6]
 8019b80:	4770      	bx	lr
	...

08019b84 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8019b84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019b86:	4604      	mov	r4, r0
 8019b88:	466b      	mov	r3, sp
 8019b8a:	6808      	ldr	r0, [r1, #0]
 8019b8c:	6849      	ldr	r1, [r1, #4]
 8019b8e:	c303      	stmia	r3!, {r0, r1}
 8019b90:	6823      	ldr	r3, [r4, #0]
 8019b92:	4669      	mov	r1, sp
 8019b94:	4620      	mov	r0, r4
 8019b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019b98:	4798      	blx	r3
 8019b9a:	4b08      	ldr	r3, [pc, #32]	; (8019bbc <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8019b9c:	681b      	ldr	r3, [r3, #0]
 8019b9e:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8019ba2:	b10a      	cbz	r2, 8019ba8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8019ba4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8019ba6:	b900      	cbnz	r0, 8019baa <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8019ba8:	6898      	ldr	r0, [r3, #8]
 8019baa:	6803      	ldr	r3, [r0, #0]
 8019bac:	4669      	mov	r1, sp
 8019bae:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8019bb0:	6a1d      	ldr	r5, [r3, #32]
 8019bb2:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8019bb6:	47a8      	blx	r5
 8019bb8:	b003      	add	sp, #12
 8019bba:	bd30      	pop	{r4, r5, pc}
 8019bbc:	2400baf0 	.word	0x2400baf0

08019bc0 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8019bc0:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 8019bc4:	b12a      	cbz	r2, 8019bd2 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8019bc6:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8019bca:	b112      	cbz	r2, 8019bd2 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8019bcc:	6803      	ldr	r3, [r0, #0]
 8019bce:	695b      	ldr	r3, [r3, #20]
 8019bd0:	4718      	bx	r3
 8019bd2:	4770      	bx	lr

08019bd4 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8019bd4:	b570      	push	{r4, r5, r6, lr}
 8019bd6:	880b      	ldrh	r3, [r1, #0]
 8019bd8:	4605      	mov	r5, r0
 8019bda:	4604      	mov	r4, r0
 8019bdc:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8019bde:	8813      	ldrh	r3, [r2, #0]
 8019be0:	f825 3f30 	strh.w	r3, [r5, #48]!
 8019be4:	4628      	mov	r0, r5
 8019be6:	f005 f8cb 	bl	801ed80 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019bea:	4606      	mov	r6, r0
 8019bec:	4628      	mov	r0, r5
 8019bee:	f005 f8fb 	bl	801ede8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019bf2:	6823      	ldr	r3, [r4, #0]
 8019bf4:	4605      	mov	r5, r0
 8019bf6:	4631      	mov	r1, r6
 8019bf8:	4620      	mov	r0, r4
 8019bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019bfc:	4798      	blx	r3
 8019bfe:	6823      	ldr	r3, [r4, #0]
 8019c00:	4629      	mov	r1, r5
 8019c02:	4620      	mov	r0, r4
 8019c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019c06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019c0a:	4718      	bx	r3

08019c0c <_ZNK8touchgfx6Button12getSolidRectEv>:
 8019c0c:	b510      	push	{r4, lr}
 8019c0e:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8019c12:	4604      	mov	r4, r0
 8019c14:	2bff      	cmp	r3, #255	; 0xff
 8019c16:	d006      	beq.n	8019c26 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8019c18:	2300      	movs	r3, #0
 8019c1a:	8003      	strh	r3, [r0, #0]
 8019c1c:	8043      	strh	r3, [r0, #2]
 8019c1e:	8083      	strh	r3, [r0, #4]
 8019c20:	80c3      	strh	r3, [r0, #6]
 8019c22:	4620      	mov	r0, r4
 8019c24:	bd10      	pop	{r4, pc}
 8019c26:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8019c2a:	b11b      	cbz	r3, 8019c34 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8019c2c:	3130      	adds	r1, #48	; 0x30
 8019c2e:	f005 f90f 	bl	801ee50 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8019c32:	e7f6      	b.n	8019c22 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8019c34:	312e      	adds	r1, #46	; 0x2e
 8019c36:	e7fa      	b.n	8019c2e <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

08019c38 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8019c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c3c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8019c40:	b08a      	sub	sp, #40	; 0x28
 8019c42:	4604      	mov	r4, r0
 8019c44:	4688      	mov	r8, r1
 8019c46:	2b00      	cmp	r3, #0
 8019c48:	d066      	beq.n	8019d18 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 8019c4a:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8019c4c:	a805      	add	r0, sp, #20
 8019c4e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019c52:	f005 f895 	bl	801ed80 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019c56:	4607      	mov	r7, r0
 8019c58:	a805      	add	r0, sp, #20
 8019c5a:	f005 f8c5 	bl	801ede8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019c5e:	f9b8 6000 	ldrsh.w	r6, [r8]
 8019c62:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 8019c66:	2300      	movs	r3, #0
 8019c68:	4432      	add	r2, r6
 8019c6a:	9306      	str	r3, [sp, #24]
 8019c6c:	b292      	uxth	r2, r2
 8019c6e:	fa0f fc82 	sxth.w	ip, r2
 8019c72:	459c      	cmp	ip, r3
 8019c74:	dd52      	ble.n	8019d1c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8019c76:	42b7      	cmp	r7, r6
 8019c78:	dd50      	ble.n	8019d1c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8019c7a:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 8019c7e:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8019c82:	442b      	add	r3, r5
 8019c84:	b29b      	uxth	r3, r3
 8019c86:	b219      	sxth	r1, r3
 8019c88:	2900      	cmp	r1, #0
 8019c8a:	dd47      	ble.n	8019d1c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8019c8c:	42a8      	cmp	r0, r5
 8019c8e:	dd45      	ble.n	8019d1c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8019c90:	4567      	cmp	r7, ip
 8019c92:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8019c96:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8019c9a:	bfb8      	it	lt
 8019c9c:	b2ba      	uxthlt	r2, r7
 8019c9e:	4288      	cmp	r0, r1
 8019ca0:	f8ad 6018 	strh.w	r6, [sp, #24]
 8019ca4:	bfb8      	it	lt
 8019ca6:	b283      	uxthlt	r3, r0
 8019ca8:	1b92      	subs	r2, r2, r6
 8019caa:	f8ad 501a 	strh.w	r5, [sp, #26]
 8019cae:	1b5b      	subs	r3, r3, r5
 8019cb0:	f8ad 201c 	strh.w	r2, [sp, #28]
 8019cb4:	f8ad 301e 	strh.w	r3, [sp, #30]
 8019cb8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8019cbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019cc0:	429a      	cmp	r2, r3
 8019cc2:	d026      	beq.n	8019d12 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8019cc4:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8019cc8:	2b00      	cmp	r3, #0
 8019cca:	dd22      	ble.n	8019d12 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8019ccc:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8019cd0:	2b00      	cmp	r3, #0
 8019cd2:	dd1e      	ble.n	8019d12 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8019cd4:	2300      	movs	r3, #0
 8019cd6:	a908      	add	r1, sp, #32
 8019cd8:	4620      	mov	r0, r4
 8019cda:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8019cde:	6823      	ldr	r3, [r4, #0]
 8019ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019ce2:	4798      	blx	r3
 8019ce4:	4b0f      	ldr	r3, [pc, #60]	; (8019d24 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 8019ce6:	681b      	ldr	r3, [r3, #0]
 8019ce8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8019cec:	b10a      	cbz	r2, 8019cf2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 8019cee:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8019cf0:	b900      	cbnz	r0, 8019cf4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 8019cf2:	6898      	ldr	r0, [r3, #8]
 8019cf4:	2501      	movs	r5, #1
 8019cf6:	6801      	ldr	r1, [r0, #0]
 8019cf8:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8019cfc:	9502      	str	r5, [sp, #8]
 8019cfe:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 8019d02:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8019d06:	9401      	str	r4, [sp, #4]
 8019d08:	ac06      	add	r4, sp, #24
 8019d0a:	9400      	str	r4, [sp, #0]
 8019d0c:	688c      	ldr	r4, [r1, #8]
 8019d0e:	a905      	add	r1, sp, #20
 8019d10:	47a0      	blx	r4
 8019d12:	b00a      	add	sp, #40	; 0x28
 8019d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d18:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8019d1a:	e797      	b.n	8019c4c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8019d1c:	2300      	movs	r3, #0
 8019d1e:	9307      	str	r3, [sp, #28]
 8019d20:	e7ca      	b.n	8019cb8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 8019d22:	bf00      	nop
 8019d24:	2400baf0 	.word	0x2400baf0

08019d28 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 8019d28:	4b30      	ldr	r3, [pc, #192]	; (8019dec <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 8019d2a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019d2e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8019d30:	b08d      	sub	sp, #52	; 0x34
 8019d32:	881b      	ldrh	r3, [r3, #0]
 8019d34:	4604      	mov	r4, r0
 8019d36:	460f      	mov	r7, r1
 8019d38:	4293      	cmp	r3, r2
 8019d3a:	d954      	bls.n	8019de6 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8019d3c:	4b2c      	ldr	r3, [pc, #176]	; (8019df0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 8019d3e:	6819      	ldr	r1, [r3, #0]
 8019d40:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 8019d44:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 8019d48:	4a2a      	ldr	r2, [pc, #168]	; (8019df4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 8019d4a:	6812      	ldr	r2, [r2, #0]
 8019d4c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8019d50:	2900      	cmp	r1, #0
 8019d52:	d048      	beq.n	8019de6 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8019d54:	785a      	ldrb	r2, [r3, #1]
 8019d56:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8019d5a:	f3c2 0801 	ubfx	r8, r2, #0, #2
 8019d5e:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8019d62:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8019d66:	4b24      	ldr	r3, [pc, #144]	; (8019df8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 8019d68:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
 8019d6c:	681a      	ldr	r2, [r3, #0]
 8019d6e:	f890 5036 	ldrb.w	r5, [r0, #54]	; 0x36
 8019d72:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 8019d76:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 8019d7a:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8019d7c:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
 8019d80:	f892 3058 	ldrb.w	r3, [r2, #88]	; 0x58
 8019d84:	9107      	str	r1, [sp, #28]
 8019d86:	f88d 8020 	strb.w	r8, [sp, #32]
 8019d8a:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 8019d8e:	9609      	str	r6, [sp, #36]	; 0x24
 8019d90:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 8019d94:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 8019d98:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
 8019d9c:	b10b      	cbz	r3, 8019da2 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 8019d9e:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
 8019da0:	b905      	cbnz	r5, 8019da4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 8019da2:	6895      	ldr	r5, [r2, #8]
 8019da4:	ae05      	add	r6, sp, #20
 8019da6:	4621      	mov	r1, r4
 8019da8:	4630      	mov	r0, r6
 8019daa:	f002 ff79 	bl	801cca0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019dae:	4b13      	ldr	r3, [pc, #76]	; (8019dfc <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 8019db0:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8019db2:	6818      	ldr	r0, [r3, #0]
 8019db4:	f7f0 fbd8 	bl	800a568 <_ZNK8touchgfx5Texts7getTextEt>
 8019db8:	6823      	ldr	r3, [r4, #0]
 8019dba:	4680      	mov	r8, r0
 8019dbc:	4620      	mov	r0, r4
 8019dbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019dc0:	4798      	blx	r3
 8019dc2:	6823      	ldr	r3, [r4, #0]
 8019dc4:	4681      	mov	r9, r0
 8019dc6:	4620      	mov	r0, r4
 8019dc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8019dcc:	4798      	blx	r3
 8019dce:	ab07      	add	r3, sp, #28
 8019dd0:	f8cd 8004 	str.w	r8, [sp, #4]
 8019dd4:	9300      	str	r3, [sp, #0]
 8019dd6:	463b      	mov	r3, r7
 8019dd8:	e9cd 9002 	strd	r9, r0, [sp, #8]
 8019ddc:	4628      	mov	r0, r5
 8019dde:	e896 0006 	ldmia.w	r6, {r1, r2}
 8019de2:	f7f0 fb52 	bl	800a48a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8019de6:	b00d      	add	sp, #52	; 0x34
 8019de8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019dec:	2400bb44 	.word	0x2400bb44
 8019df0:	2400bb40 	.word	0x2400bb40
 8019df4:	2400bb48 	.word	0x2400bb48
 8019df8:	2400baf0 	.word	0x2400baf0
 8019dfc:	2400bb4c 	.word	0x2400bb4c

08019e00 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 8019e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e04:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8019e06:	4604      	mov	r4, r0
 8019e08:	460e      	mov	r6, r1
 8019e0a:	b08e      	sub	sp, #56	; 0x38
 8019e0c:	b218      	sxth	r0, r3
 8019e0e:	8921      	ldrh	r1, [r4, #8]
 8019e10:	005b      	lsls	r3, r3, #1
 8019e12:	8962      	ldrh	r2, [r4, #10]
 8019e14:	f8ad 0000 	strh.w	r0, [sp]
 8019e18:	b29b      	uxth	r3, r3
 8019e1a:	f8ad 0002 	strh.w	r0, [sp, #2]
 8019e1e:	1ac9      	subs	r1, r1, r3
 8019e20:	1ad3      	subs	r3, r2, r3
 8019e22:	b209      	sxth	r1, r1
 8019e24:	b21b      	sxth	r3, r3
 8019e26:	2900      	cmp	r1, #0
 8019e28:	f8ad 1004 	strh.w	r1, [sp, #4]
 8019e2c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019e30:	dd5e      	ble.n	8019ef0 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 8019e32:	2b00      	cmp	r3, #0
 8019e34:	dd5c      	ble.n	8019ef0 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 8019e36:	6830      	ldr	r0, [r6, #0]
 8019e38:	ab02      	add	r3, sp, #8
 8019e3a:	6871      	ldr	r1, [r6, #4]
 8019e3c:	c303      	stmia	r3!, {r0, r1}
 8019e3e:	4669      	mov	r1, sp
 8019e40:	a802      	add	r0, sp, #8
 8019e42:	f7fe f81d 	bl	8017e80 <_ZN8touchgfx4RectaNERKS0_>
 8019e46:	4620      	mov	r0, r4
 8019e48:	a902      	add	r1, sp, #8
 8019e4a:	f7ff fe9b 	bl	8019b84 <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 8019e4e:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8019e50:	2800      	cmp	r0, #0
 8019e52:	d05f      	beq.n	8019f14 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8019e54:	8963      	ldrh	r3, [r4, #10]
 8019e56:	b202      	sxth	r2, r0
 8019e58:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8019e5c:	2500      	movs	r5, #0
 8019e5e:	1a1f      	subs	r7, r3, r0
 8019e60:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 8019e64:	f8ad 101c 	strh.w	r1, [sp, #28]
 8019e68:	b21b      	sxth	r3, r3
 8019e6a:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8019e6e:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 8019e72:	af04      	add	r7, sp, #16
 8019e74:	1a09      	subs	r1, r1, r0
 8019e76:	9506      	str	r5, [sp, #24]
 8019e78:	f8ad 201e 	strh.w	r2, [sp, #30]
 8019e7c:	f8ad 5020 	strh.w	r5, [sp, #32]
 8019e80:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8019e84:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 8019e88:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8019e8c:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8019e90:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8019e94:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 8019e98:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8019e9c:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8019ea0:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8019ea4:	ab06      	add	r3, sp, #24
 8019ea6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8019eaa:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019eae:	e887 0003 	stmia.w	r7, {r0, r1}
 8019eb2:	4631      	mov	r1, r6
 8019eb4:	4638      	mov	r0, r7
 8019eb6:	f7fd ffe3 	bl	8017e80 <_ZN8touchgfx4RectaNERKS0_>
 8019eba:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8019ebe:	2b00      	cmp	r3, #0
 8019ec0:	dd12      	ble.n	8019ee8 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 8019ec2:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8019ec6:	2b00      	cmp	r3, #0
 8019ec8:	dd0e      	ble.n	8019ee8 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 8019eca:	6823      	ldr	r3, [r4, #0]
 8019ecc:	4639      	mov	r1, r7
 8019ece:	4620      	mov	r0, r4
 8019ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019ed2:	4798      	blx	r3
 8019ed4:	f7ea fa36 	bl	8004344 <_ZN8touchgfx3HAL3lcdEv>
 8019ed8:	6803      	ldr	r3, [r0, #0]
 8019eda:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8019edc:	4639      	mov	r1, r7
 8019ede:	f8d3 8020 	ldr.w	r8, [r3, #32]
 8019ee2:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8019ee6:	47c0      	blx	r8
 8019ee8:	3501      	adds	r5, #1
 8019eea:	2d04      	cmp	r5, #4
 8019eec:	d1da      	bne.n	8019ea4 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 8019eee:	e011      	b.n	8019f14 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8019ef0:	6830      	ldr	r0, [r6, #0]
 8019ef2:	ab06      	add	r3, sp, #24
 8019ef4:	6871      	ldr	r1, [r6, #4]
 8019ef6:	c303      	stmia	r3!, {r0, r1}
 8019ef8:	6823      	ldr	r3, [r4, #0]
 8019efa:	a906      	add	r1, sp, #24
 8019efc:	4620      	mov	r0, r4
 8019efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019f00:	4798      	blx	r3
 8019f02:	f7ea fa1f 	bl	8004344 <_ZN8touchgfx3HAL3lcdEv>
 8019f06:	6803      	ldr	r3, [r0, #0]
 8019f08:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8019f0a:	a906      	add	r1, sp, #24
 8019f0c:	6a1d      	ldr	r5, [r3, #32]
 8019f0e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8019f12:	47a8      	blx	r5
 8019f14:	b00e      	add	sp, #56	; 0x38
 8019f16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019f1a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8019f1a:	b570      	push	{r4, r5, r6, lr}
 8019f1c:	880b      	ldrh	r3, [r1, #0]
 8019f1e:	460d      	mov	r5, r1
 8019f20:	4604      	mov	r4, r0
 8019f22:	84c3      	strh	r3, [r0, #38]	; 0x26
 8019f24:	4608      	mov	r0, r1
 8019f26:	f004 ff2b 	bl	801ed80 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019f2a:	4606      	mov	r6, r0
 8019f2c:	4628      	mov	r0, r5
 8019f2e:	f004 ff5b 	bl	801ede8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019f32:	6823      	ldr	r3, [r4, #0]
 8019f34:	4605      	mov	r5, r0
 8019f36:	4631      	mov	r1, r6
 8019f38:	4620      	mov	r0, r4
 8019f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019f3c:	4798      	blx	r3
 8019f3e:	6823      	ldr	r3, [r4, #0]
 8019f40:	4629      	mov	r1, r5
 8019f42:	4620      	mov	r0, r4
 8019f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019f46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019f4a:	4718      	bx	r3

08019f4c <_ZNK8touchgfx5Image12getSolidRectEv>:
 8019f4c:	b510      	push	{r4, lr}
 8019f4e:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8019f52:	4604      	mov	r4, r0
 8019f54:	2bff      	cmp	r3, #255	; 0xff
 8019f56:	d006      	beq.n	8019f66 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8019f58:	2300      	movs	r3, #0
 8019f5a:	8003      	strh	r3, [r0, #0]
 8019f5c:	8043      	strh	r3, [r0, #2]
 8019f5e:	8083      	strh	r3, [r0, #4]
 8019f60:	80c3      	strh	r3, [r0, #6]
 8019f62:	4620      	mov	r0, r4
 8019f64:	bd10      	pop	{r4, pc}
 8019f66:	3126      	adds	r1, #38	; 0x26
 8019f68:	f004 ff72 	bl	801ee50 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8019f6c:	e7f9      	b.n	8019f62 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08019f6e <_ZNK8touchgfx5Image17invalidateContentEv>:
 8019f6e:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 8019f72:	b12a      	cbz	r2, 8019f80 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8019f74:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8019f78:	b112      	cbz	r2, 8019f80 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8019f7a:	6803      	ldr	r3, [r0, #0]
 8019f7c:	695b      	ldr	r3, [r3, #20]
 8019f7e:	4718      	bx	r3
 8019f80:	4770      	bx	lr
	...

08019f84 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8019f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f88:	4604      	mov	r4, r0
 8019f8a:	b088      	sub	sp, #32
 8019f8c:	2500      	movs	r5, #0
 8019f8e:	460f      	mov	r7, r1
 8019f90:	f854 3b26 	ldr.w	r3, [r4], #38
 8019f94:	a904      	add	r1, sp, #16
 8019f96:	4606      	mov	r6, r0
 8019f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019f9a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8019f9e:	4798      	blx	r3
 8019fa0:	4620      	mov	r0, r4
 8019fa2:	f004 feed 	bl	801ed80 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019fa6:	4680      	mov	r8, r0
 8019fa8:	4620      	mov	r0, r4
 8019faa:	f004 ff1d 	bl	801ede8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019fae:	9506      	str	r5, [sp, #24]
 8019fb0:	ad06      	add	r5, sp, #24
 8019fb2:	f8ad 001e 	strh.w	r0, [sp, #30]
 8019fb6:	4639      	mov	r1, r7
 8019fb8:	f8ad 801c 	strh.w	r8, [sp, #28]
 8019fbc:	4628      	mov	r0, r5
 8019fbe:	f7fd ff5f 	bl	8017e80 <_ZN8touchgfx4RectaNERKS0_>
 8019fc2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8019fc6:	2b00      	cmp	r3, #0
 8019fc8:	dd19      	ble.n	8019ffe <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8019fca:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8019fce:	2b00      	cmp	r3, #0
 8019fd0:	dd15      	ble.n	8019ffe <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8019fd2:	4b0c      	ldr	r3, [pc, #48]	; (801a004 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8019fd4:	681b      	ldr	r3, [r3, #0]
 8019fd6:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8019fda:	b10a      	cbz	r2, 8019fe0 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8019fdc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8019fde:	b900      	cbnz	r0, 8019fe2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8019fe0:	6898      	ldr	r0, [r3, #8]
 8019fe2:	2701      	movs	r7, #1
 8019fe4:	6801      	ldr	r1, [r0, #0]
 8019fe6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8019fea:	9702      	str	r7, [sp, #8]
 8019fec:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8019ff0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8019ff4:	e9cd 5600 	strd	r5, r6, [sp]
 8019ff8:	688d      	ldr	r5, [r1, #8]
 8019ffa:	4621      	mov	r1, r4
 8019ffc:	47a8      	blx	r5
 8019ffe:	b008      	add	sp, #32
 801a000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a004:	2400baf0 	.word	0x2400baf0

0801a008 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 801a008:	b510      	push	{r4, lr}
 801a00a:	6803      	ldr	r3, [r0, #0]
 801a00c:	460c      	mov	r4, r1
 801a00e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a010:	4798      	blx	r3
 801a012:	1b03      	subs	r3, r0, r4
 801a014:	4258      	negs	r0, r3
 801a016:	4158      	adcs	r0, r3
 801a018:	bd10      	pop	{r4, pc}
	...

0801a01c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 801a01c:	4b01      	ldr	r3, [pc, #4]	; (801a024 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801a01e:	6019      	str	r1, [r3, #0]
 801a020:	4770      	bx	lr
 801a022:	bf00      	nop
 801a024:	2400baf8 	.word	0x2400baf8

0801a028 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801a028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a02c:	4696      	mov	lr, r2
 801a02e:	b097      	sub	sp, #92	; 0x5c
 801a030:	4605      	mov	r5, r0
 801a032:	4614      	mov	r4, r2
 801a034:	460e      	mov	r6, r1
 801a036:	461f      	mov	r7, r3
 801a038:	f10d 0c1c 	add.w	ip, sp, #28
 801a03c:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 801a040:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 801a044:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 801a048:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a04c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a050:	f8de 3000 	ldr.w	r3, [lr]
 801a054:	f104 0e14 	add.w	lr, r4, #20
 801a058:	f8cc 3000 	str.w	r3, [ip]
 801a05c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801a060:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a064:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a068:	f8de 3000 	ldr.w	r3, [lr]
 801a06c:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801a070:	f8cc 3000 	str.w	r3, [ip]
 801a074:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801a078:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a07c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a080:	f8de 3000 	ldr.w	r3, [lr]
 801a084:	4631      	mov	r1, r6
 801a086:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a088:	4628      	mov	r0, r5
 801a08a:	f8cc 3000 	str.w	r3, [ip]
 801a08e:	682b      	ldr	r3, [r5, #0]
 801a090:	9201      	str	r2, [sp, #4]
 801a092:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a094:	f8cd 8008 	str.w	r8, [sp, #8]
 801a098:	9200      	str	r2, [sp, #0]
 801a09a:	aa07      	add	r2, sp, #28
 801a09c:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801a0a0:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 801a0a4:	463b      	mov	r3, r7
 801a0a6:	47d8      	blx	fp
 801a0a8:	46a6      	mov	lr, r4
 801a0aa:	f10d 0c1c 	add.w	ip, sp, #28
 801a0ae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a0b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a0b6:	f8de 3000 	ldr.w	r3, [lr]
 801a0ba:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801a0be:	343c      	adds	r4, #60	; 0x3c
 801a0c0:	f8cc 3000 	str.w	r3, [ip]
 801a0c4:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801a0c8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a0cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a0d0:	f8de 3000 	ldr.w	r3, [lr]
 801a0d4:	f8cc 3000 	str.w	r3, [ip]
 801a0d8:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801a0dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a0de:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a0e2:	6823      	ldr	r3, [r4, #0]
 801a0e4:	4631      	mov	r1, r6
 801a0e6:	4628      	mov	r0, r5
 801a0e8:	f8cc 3000 	str.w	r3, [ip]
 801a0ec:	682b      	ldr	r3, [r5, #0]
 801a0ee:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801a0f2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a0f4:	f8cd 8008 	str.w	r8, [sp, #8]
 801a0f8:	9201      	str	r2, [sp, #4]
 801a0fa:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a0fc:	9200      	str	r2, [sp, #0]
 801a0fe:	aa07      	add	r2, sp, #28
 801a100:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 801a102:	463b      	mov	r3, r7
 801a104:	47a0      	blx	r4
 801a106:	b017      	add	sp, #92	; 0x5c
 801a108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a10c <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801a10c:	2000      	movs	r0, #0
 801a10e:	4770      	bx	lr

0801a110 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801a110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a114:	b08d      	sub	sp, #52	; 0x34
 801a116:	4688      	mov	r8, r1
 801a118:	f8d3 c000 	ldr.w	ip, [r3]
 801a11c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801a11e:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 801a122:	680f      	ldr	r7, [r1, #0]
 801a124:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 801a128:	eba7 070c 	sub.w	r7, r7, ip
 801a12c:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 801a130:	edd3 6a07 	vldr	s13, [r3, #28]
 801a134:	42bc      	cmp	r4, r7
 801a136:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a138:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 801a13c:	bfa8      	it	ge
 801a13e:	463c      	movge	r4, r7
 801a140:	f9b1 9000 	ldrsh.w	r9, [r1]
 801a144:	f9ba 1000 	ldrsh.w	r1, [sl]
 801a148:	ee07 4a90 	vmov	s15, r4
 801a14c:	eb09 0e0c 	add.w	lr, r9, ip
 801a150:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 801a154:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801a158:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 801a15c:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 801a160:	4571      	cmp	r1, lr
 801a162:	ee25 4a04 	vmul.f32	s8, s10, s8
 801a166:	ee65 4a24 	vmul.f32	s9, s10, s9
 801a16a:	ee25 5a27 	vmul.f32	s10, s10, s15
 801a16e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801a172:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801a176:	ee32 1a05 	vadd.f32	s2, s4, s10
 801a17a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801a17e:	ee36 0a84 	vadd.f32	s0, s13, s8
 801a182:	ee61 1a87 	vmul.f32	s3, s3, s14
 801a186:	ee22 2a07 	vmul.f32	s4, s4, s14
 801a18a:	f340 808c 	ble.w	801a2a6 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801a18e:	eba1 060e 	sub.w	r6, r1, lr
 801a192:	fb96 f5f4 	sdiv	r5, r6, r4
 801a196:	ee07 5a10 	vmov	s14, r5
 801a19a:	2d00      	cmp	r5, #0
 801a19c:	fb04 6615 	mls	r6, r4, r5, r6
 801a1a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a1a4:	eea7 0a04 	vfma.f32	s0, s14, s8
 801a1a8:	eee7 0a24 	vfma.f32	s1, s14, s9
 801a1ac:	eea7 1a05 	vfma.f32	s2, s14, s10
 801a1b0:	dd12      	ble.n	801a1d8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801a1b2:	ee70 6a44 	vsub.f32	s13, s0, s8
 801a1b6:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801a1ba:	ee31 2a45 	vsub.f32	s4, s2, s10
 801a1be:	eef5 6a40 	vcmp.f32	s13, #0.0
 801a1c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a1c6:	bf14      	ite	ne
 801a1c8:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801a1cc:	eeb0 7a67 	vmoveq.f32	s14, s15
 801a1d0:	ee61 1a87 	vmul.f32	s3, s3, s14
 801a1d4:	ee22 2a07 	vmul.f32	s4, s4, s14
 801a1d8:	fb05 f204 	mul.w	r2, r5, r4
 801a1dc:	1abf      	subs	r7, r7, r2
 801a1de:	4494      	add	ip, r2
 801a1e0:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 801a1e4:	4411      	add	r1, r2
 801a1e6:	eb09 020c 	add.w	r2, r9, ip
 801a1ea:	b209      	sxth	r1, r1
 801a1ec:	443a      	add	r2, r7
 801a1ee:	428a      	cmp	r2, r1
 801a1f0:	bfc4      	itt	gt
 801a1f2:	eba1 0209 	subgt.w	r2, r1, r9
 801a1f6:	eba2 070c 	subgt.w	r7, r2, ip
 801a1fa:	2f00      	cmp	r7, #0
 801a1fc:	dd50      	ble.n	801a2a0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 801a1fe:	fb97 f1f4 	sdiv	r1, r7, r4
 801a202:	fb04 7211 	mls	r2, r4, r1, r7
 801a206:	b90a      	cbnz	r2, 801a20c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 801a208:	3901      	subs	r1, #1
 801a20a:	4622      	mov	r2, r4
 801a20c:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801a210:	6840      	ldr	r0, [r0, #4]
 801a212:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 801a216:	44b6      	add	lr, r6
 801a218:	f8d0 a000 	ldr.w	sl, [r0]
 801a21c:	2900      	cmp	r1, #0
 801a21e:	bfcc      	ite	gt
 801a220:	46a1      	movgt	r9, r4
 801a222:	4691      	movle	r9, r2
 801a224:	900b      	str	r0, [sp, #44]	; 0x2c
 801a226:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801a228:	fb04 e505 	mla	r5, r4, r5, lr
 801a22c:	eef0 6a42 	vmov.f32	s13, s4
 801a230:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801a234:	9008      	str	r0, [sp, #32]
 801a236:	eeb0 7a61 	vmov.f32	s14, s3
 801a23a:	9818      	ldr	r0, [sp, #96]	; 0x60
 801a23c:	695b      	ldr	r3, [r3, #20]
 801a23e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a242:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801a246:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801a24a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801a24c:	445b      	add	r3, fp
 801a24e:	9307      	str	r3, [sp, #28]
 801a250:	ee16 3a90 	vmov	r3, s13
 801a254:	e9cd 8505 	strd	r8, r5, [sp, #20]
 801a258:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801a25c:	ee21 3a23 	vmul.f32	s6, s2, s7
 801a260:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801a264:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801a268:	ee17 7a90 	vmov	r7, s15
 801a26c:	ee73 7a42 	vsub.f32	s15, s6, s4
 801a270:	fb97 f7f4 	sdiv	r7, r7, r4
 801a274:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801a278:	ee17 ca90 	vmov	ip, s15
 801a27c:	fb9c fcf4 	sdiv	ip, ip, r4
 801a280:	fb0c 3306 	mla	r3, ip, r6, r3
 801a284:	9302      	str	r3, [sp, #8]
 801a286:	ee17 3a10 	vmov	r3, s14
 801a28a:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801a28e:	fb07 3706 	mla	r7, r7, r6, r3
 801a292:	eba9 0306 	sub.w	r3, r9, r6
 801a296:	e9cd 4700 	strd	r4, r7, [sp]
 801a29a:	f8da 4008 	ldr.w	r4, [sl, #8]
 801a29e:	47a0      	blx	r4
 801a2a0:	b00d      	add	sp, #52	; 0x34
 801a2a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2a6:	2500      	movs	r5, #0
 801a2a8:	462e      	mov	r6, r5
 801a2aa:	e799      	b.n	801a1e0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0801a2ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801a2ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a2b0:	b0db      	sub	sp, #364	; 0x16c
 801a2b2:	461d      	mov	r5, r3
 801a2b4:	4614      	mov	r4, r2
 801a2b6:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 801a2ba:	910f      	str	r1, [sp, #60]	; 0x3c
 801a2bc:	4629      	mov	r1, r5
 801a2be:	930a      	str	r3, [sp, #40]	; 0x28
 801a2c0:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 801a2c4:	9009      	str	r0, [sp, #36]	; 0x24
 801a2c6:	930b      	str	r3, [sp, #44]	; 0x2c
 801a2c8:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 801a2cc:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 801a2d0:	9310      	str	r3, [sp, #64]	; 0x40
 801a2d2:	6803      	ldr	r3, [r0, #0]
 801a2d4:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 801a2d6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801a2da:	47b8      	blx	r7
 801a2dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a2de:	6058      	str	r0, [r3, #4]
 801a2e0:	2800      	cmp	r0, #0
 801a2e2:	f000 83a1 	beq.w	801aa28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a2e6:	682b      	ldr	r3, [r5, #0]
 801a2e8:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 801a2ec:	ed94 7a02 	vldr	s14, [r4, #8]
 801a2f0:	9314      	str	r3, [sp, #80]	; 0x50
 801a2f2:	686b      	ldr	r3, [r5, #4]
 801a2f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a2f8:	9315      	str	r3, [sp, #84]	; 0x54
 801a2fa:	4bc1      	ldr	r3, [pc, #772]	; (801a600 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 801a2fc:	7819      	ldrb	r1, [r3, #0]
 801a2fe:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801a302:	2900      	cmp	r1, #0
 801a304:	bf16      	itet	ne
 801a306:	4619      	movne	r1, r3
 801a308:	4611      	moveq	r1, r2
 801a30a:	4613      	movne	r3, r2
 801a30c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a310:	9116      	str	r1, [sp, #88]	; 0x58
 801a312:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 801a316:	f240 8387 	bls.w	801aa28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a31a:	ed94 7a07 	vldr	s14, [r4, #28]
 801a31e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a326:	f240 837f 	bls.w	801aa28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a32a:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 801a32e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a336:	f240 8377 	bls.w	801aa28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a33a:	6822      	ldr	r2, [r4, #0]
 801a33c:	4bb1      	ldr	r3, [pc, #708]	; (801a604 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801a33e:	429a      	cmp	r2, r3
 801a340:	f2c0 8372 	blt.w	801aa28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a344:	49b0      	ldr	r1, [pc, #704]	; (801a608 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801a346:	6963      	ldr	r3, [r4, #20]
 801a348:	428a      	cmp	r2, r1
 801a34a:	f300 836d 	bgt.w	801aa28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a34e:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801a352:	48ae      	ldr	r0, [pc, #696]	; (801a60c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 801a354:	33ff      	adds	r3, #255	; 0xff
 801a356:	4283      	cmp	r3, r0
 801a358:	f200 8366 	bhi.w	801aa28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a35c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801a35e:	4dac      	ldr	r5, [pc, #688]	; (801a610 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801a360:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801a364:	33ff      	adds	r3, #255	; 0xff
 801a366:	42ab      	cmp	r3, r5
 801a368:	f200 835e 	bhi.w	801aa28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a36c:	6862      	ldr	r2, [r4, #4]
 801a36e:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801a372:	33ff      	adds	r3, #255	; 0xff
 801a374:	4283      	cmp	r3, r0
 801a376:	f200 8357 	bhi.w	801aa28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a37a:	69a1      	ldr	r1, [r4, #24]
 801a37c:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 801a380:	33ff      	adds	r3, #255	; 0xff
 801a382:	4283      	cmp	r3, r0
 801a384:	f200 8350 	bhi.w	801aa28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a388:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801a38a:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 801a38e:	30ff      	adds	r0, #255	; 0xff
 801a390:	42a8      	cmp	r0, r5
 801a392:	f200 8349 	bhi.w	801aa28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a396:	428a      	cmp	r2, r1
 801a398:	f280 8110 	bge.w	801a5bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 801a39c:	429a      	cmp	r2, r3
 801a39e:	f300 8119 	bgt.w	801a5d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801a3a2:	4299      	cmp	r1, r3
 801a3a4:	f280 811d 	bge.w	801a5e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 801a3a8:	2502      	movs	r5, #2
 801a3aa:	2701      	movs	r7, #1
 801a3ac:	46a9      	mov	r9, r5
 801a3ae:	46b8      	mov	r8, r7
 801a3b0:	f04f 0a00 	mov.w	sl, #0
 801a3b4:	4621      	mov	r1, r4
 801a3b6:	a849      	add	r0, sp, #292	; 0x124
 801a3b8:	f003 fea0 	bl	801e0fc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 801a3bc:	4622      	mov	r2, r4
 801a3be:	4653      	mov	r3, sl
 801a3c0:	a949      	add	r1, sp, #292	; 0x124
 801a3c2:	f8cd 9000 	str.w	r9, [sp]
 801a3c6:	a819      	add	r0, sp, #100	; 0x64
 801a3c8:	f003 ffc8 	bl	801e35c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801a3cc:	4622      	mov	r2, r4
 801a3ce:	4653      	mov	r3, sl
 801a3d0:	a949      	add	r1, sp, #292	; 0x124
 801a3d2:	f8cd 8000 	str.w	r8, [sp]
 801a3d6:	a829      	add	r0, sp, #164	; 0xa4
 801a3d8:	f003 ffc0 	bl	801e35c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801a3dc:	4643      	mov	r3, r8
 801a3de:	4622      	mov	r2, r4
 801a3e0:	a949      	add	r1, sp, #292	; 0x124
 801a3e2:	f8cd 9000 	str.w	r9, [sp]
 801a3e6:	a839      	add	r0, sp, #228	; 0xe4
 801a3e8:	f003 ffb8 	bl	801e35c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801a3ec:	42af      	cmp	r7, r5
 801a3ee:	af12      	add	r7, sp, #72	; 0x48
 801a3f0:	bfb7      	itett	lt
 801a3f2:	2300      	movlt	r3, #0
 801a3f4:	2301      	movge	r3, #1
 801a3f6:	ad29      	addlt	r5, sp, #164	; 0xa4
 801a3f8:	ac19      	addlt	r4, sp, #100	; 0x64
 801a3fa:	bfb1      	iteee	lt
 801a3fc:	930e      	strlt	r3, [sp, #56]	; 0x38
 801a3fe:	ad19      	addge	r5, sp, #100	; 0x64
 801a400:	930e      	strge	r3, [sp, #56]	; 0x38
 801a402:	ac29      	addge	r4, sp, #164	; 0xa4
 801a404:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a406:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a40a:	e887 0003 	stmia.w	r7, {r0, r1}
 801a40e:	b928      	cbnz	r0, 801a41c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 801a410:	4b80      	ldr	r3, [pc, #512]	; (801a614 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801a412:	6818      	ldr	r0, [r3, #0]
 801a414:	6803      	ldr	r3, [r0, #0]
 801a416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a418:	4798      	blx	r3
 801a41a:	6038      	str	r0, [r7, #0]
 801a41c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801a41e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801a422:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a426:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801a428:	930c      	str	r3, [sp, #48]	; 0x30
 801a42a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a42c:	6963      	ldr	r3, [r4, #20]
 801a42e:	440b      	add	r3, r1
 801a430:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801a434:	4408      	add	r0, r1
 801a436:	b200      	sxth	r0, r0
 801a438:	4283      	cmp	r3, r0
 801a43a:	900d      	str	r0, [sp, #52]	; 0x34
 801a43c:	f280 80dd 	bge.w	801a5fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801a440:	428b      	cmp	r3, r1
 801a442:	da08      	bge.n	801a456 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801a444:	2a00      	cmp	r2, #0
 801a446:	dd06      	ble.n	801a456 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801a448:	1acb      	subs	r3, r1, r3
 801a44a:	429a      	cmp	r2, r3
 801a44c:	f2c0 80e4 	blt.w	801a618 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801a450:	2b00      	cmp	r3, #0
 801a452:	f300 80e2 	bgt.w	801a61a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801a456:	6967      	ldr	r7, [r4, #20]
 801a458:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801a45c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a45e:	443b      	add	r3, r7
 801a460:	461f      	mov	r7, r3
 801a462:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a464:	1bdf      	subs	r7, r3, r7
 801a466:	4297      	cmp	r7, r2
 801a468:	bfa8      	it	ge
 801a46a:	4617      	movge	r7, r2
 801a46c:	2f00      	cmp	r7, #0
 801a46e:	f340 8166 	ble.w	801a73e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801a472:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801a474:	6829      	ldr	r1, [r5, #0]
 801a476:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a47a:	f9bb 3000 	ldrsh.w	r3, [fp]
 801a47e:	4411      	add	r1, r2
 801a480:	6820      	ldr	r0, [r4, #0]
 801a482:	4299      	cmp	r1, r3
 801a484:	dd1a      	ble.n	801a4bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801a486:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801a48a:	4402      	add	r2, r0
 801a48c:	440b      	add	r3, r1
 801a48e:	b21b      	sxth	r3, r3
 801a490:	429a      	cmp	r2, r3
 801a492:	dc13      	bgt.n	801a4bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801a494:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a496:	a912      	add	r1, sp, #72	; 0x48
 801a498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a49a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a49c:	681b      	ldr	r3, [r3, #0]
 801a49e:	9206      	str	r2, [sp, #24]
 801a4a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a4a2:	9500      	str	r5, [sp, #0]
 801a4a4:	9205      	str	r2, [sp, #20]
 801a4a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a4a8:	e9cd b203 	strd	fp, r2, [sp, #12]
 801a4ac:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801a4ae:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801a4b2:	aa49      	add	r2, sp, #292	; 0x124
 801a4b4:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801a4b8:	4623      	mov	r3, r4
 801a4ba:	47c8      	blx	r9
 801a4bc:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801a4c0:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801a4c4:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801a4c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a4cc:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801a4d0:	68a1      	ldr	r1, [r4, #8]
 801a4d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a4d6:	ed94 6a08 	vldr	s12, [r4, #32]
 801a4da:	edd4 6a07 	vldr	s13, [r4, #28]
 801a4de:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801a4e2:	ee76 6a86 	vadd.f32	s13, s13, s12
 801a4e6:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801a4ea:	e9d4 2300 	ldrd	r2, r3, [r4]
 801a4ee:	edc4 6a07 	vstr	s13, [r4, #28]
 801a4f2:	441a      	add	r2, r3
 801a4f4:	6963      	ldr	r3, [r4, #20]
 801a4f6:	3301      	adds	r3, #1
 801a4f8:	6022      	str	r2, [r4, #0]
 801a4fa:	6163      	str	r3, [r4, #20]
 801a4fc:	69a3      	ldr	r3, [r4, #24]
 801a4fe:	3b01      	subs	r3, #1
 801a500:	61a3      	str	r3, [r4, #24]
 801a502:	6923      	ldr	r3, [r4, #16]
 801a504:	440b      	add	r3, r1
 801a506:	68e1      	ldr	r1, [r4, #12]
 801a508:	428b      	cmp	r3, r1
 801a50a:	6123      	str	r3, [r4, #16]
 801a50c:	db15      	blt.n	801a53a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801a50e:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801a512:	3201      	adds	r2, #1
 801a514:	1a5b      	subs	r3, r3, r1
 801a516:	ee76 6a26 	vadd.f32	s13, s12, s13
 801a51a:	6022      	str	r2, [r4, #0]
 801a51c:	6123      	str	r3, [r4, #16]
 801a51e:	edc4 6a07 	vstr	s13, [r4, #28]
 801a522:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801a526:	ee36 7a87 	vadd.f32	s14, s13, s14
 801a52a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801a52e:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801a532:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a536:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801a53a:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801a53e:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801a542:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801a546:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a54a:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801a54e:	68a9      	ldr	r1, [r5, #8]
 801a550:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a554:	ed95 6a08 	vldr	s12, [r5, #32]
 801a558:	edd5 6a07 	vldr	s13, [r5, #28]
 801a55c:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801a560:	ee76 6a86 	vadd.f32	s13, s13, s12
 801a564:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801a568:	e9d5 2300 	ldrd	r2, r3, [r5]
 801a56c:	edc5 6a07 	vstr	s13, [r5, #28]
 801a570:	441a      	add	r2, r3
 801a572:	696b      	ldr	r3, [r5, #20]
 801a574:	3301      	adds	r3, #1
 801a576:	602a      	str	r2, [r5, #0]
 801a578:	616b      	str	r3, [r5, #20]
 801a57a:	69ab      	ldr	r3, [r5, #24]
 801a57c:	3b01      	subs	r3, #1
 801a57e:	61ab      	str	r3, [r5, #24]
 801a580:	692b      	ldr	r3, [r5, #16]
 801a582:	440b      	add	r3, r1
 801a584:	68e9      	ldr	r1, [r5, #12]
 801a586:	428b      	cmp	r3, r1
 801a588:	612b      	str	r3, [r5, #16]
 801a58a:	db15      	blt.n	801a5b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 801a58c:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801a590:	3201      	adds	r2, #1
 801a592:	1a5b      	subs	r3, r3, r1
 801a594:	ee76 6a26 	vadd.f32	s13, s12, s13
 801a598:	602a      	str	r2, [r5, #0]
 801a59a:	612b      	str	r3, [r5, #16]
 801a59c:	edc5 6a07 	vstr	s13, [r5, #28]
 801a5a0:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801a5a4:	ee36 7a87 	vadd.f32	s14, s13, s14
 801a5a8:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801a5ac:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801a5b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a5b4:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801a5b8:	3f01      	subs	r7, #1
 801a5ba:	e757      	b.n	801a46c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 801a5bc:	4299      	cmp	r1, r3
 801a5be:	dc13      	bgt.n	801a5e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801a5c0:	429a      	cmp	r2, r3
 801a5c2:	da14      	bge.n	801a5ee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 801a5c4:	2502      	movs	r5, #2
 801a5c6:	2703      	movs	r7, #3
 801a5c8:	f04f 0800 	mov.w	r8, #0
 801a5cc:	46a9      	mov	r9, r5
 801a5ce:	f04f 0a01 	mov.w	sl, #1
 801a5d2:	e6ef      	b.n	801a3b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801a5d4:	2501      	movs	r5, #1
 801a5d6:	2700      	movs	r7, #0
 801a5d8:	46a9      	mov	r9, r5
 801a5da:	46b8      	mov	r8, r7
 801a5dc:	f04f 0a02 	mov.w	sl, #2
 801a5e0:	e6e8      	b.n	801a3b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801a5e2:	2501      	movs	r5, #1
 801a5e4:	2702      	movs	r7, #2
 801a5e6:	e6e1      	b.n	801a3ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 801a5e8:	2500      	movs	r5, #0
 801a5ea:	2701      	movs	r7, #1
 801a5ec:	e7f4      	b.n	801a5d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 801a5ee:	2702      	movs	r7, #2
 801a5f0:	2503      	movs	r5, #3
 801a5f2:	f04f 0900 	mov.w	r9, #0
 801a5f6:	46b8      	mov	r8, r7
 801a5f8:	e7e9      	b.n	801a5ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 801a5fa:	4613      	mov	r3, r2
 801a5fc:	e728      	b.n	801a450 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 801a5fe:	bf00      	nop
 801a600:	2400bae8 	.word	0x2400bae8
 801a604:	fffd8f01 	.word	0xfffd8f01
 801a608:	00027100 	.word	0x00027100
 801a60c:	0004e1ff 	.word	0x0004e1ff
 801a610:	0004e1fe 	.word	0x0004e1fe
 801a614:	2400baf0 	.word	0x2400baf0
 801a618:	4613      	mov	r3, r2
 801a61a:	992b      	ldr	r1, [sp, #172]	; 0xac
 801a61c:	469e      	mov	lr, r3
 801a61e:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 801a620:	469c      	mov	ip, r3
 801a622:	9111      	str	r1, [sp, #68]	; 0x44
 801a624:	f04f 0900 	mov.w	r9, #0
 801a628:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 801a62c:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 801a630:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 801a634:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 801a638:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 801a63c:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801a640:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 801a644:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 801a648:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 801a64c:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 801a650:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 801a654:	f1bc 0f00 	cmp.w	ip, #0
 801a658:	d147      	bne.n	801a6ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801a65a:	eb03 0c07 	add.w	ip, r3, r7
 801a65e:	1ad7      	subs	r7, r2, r3
 801a660:	f1b9 0f00 	cmp.w	r9, #0
 801a664:	d009      	beq.n	801a67a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801a666:	9029      	str	r0, [sp, #164]	; 0xa4
 801a668:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 801a66c:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 801a670:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 801a674:	912d      	str	r1, [sp, #180]	; 0xb4
 801a676:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 801a67a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801a67c:	f04f 0800 	mov.w	r8, #0
 801a680:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801a684:	9111      	str	r1, [sp, #68]	; 0x44
 801a686:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801a68a:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801a68e:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801a692:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801a696:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801a69a:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801a69e:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801a6a2:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801a6a6:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801a6aa:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801a6ae:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801a6b2:	f1be 0f00 	cmp.w	lr, #0
 801a6b6:	d031      	beq.n	801a71c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 801a6b8:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801a6ba:	4450      	add	r0, sl
 801a6bc:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801a6c0:	4431      	add	r1, r6
 801a6c2:	ee37 7a04 	vadd.f32	s14, s14, s8
 801a6c6:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801a6ca:	4549      	cmp	r1, r9
 801a6cc:	db08      	blt.n	801a6e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801a6ce:	ee77 7a85 	vadd.f32	s15, s15, s10
 801a6d2:	3001      	adds	r0, #1
 801a6d4:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801a6d8:	eba1 0109 	sub.w	r1, r1, r9
 801a6dc:	ee37 7a06 	vadd.f32	s14, s14, s12
 801a6e0:	f10e 3eff 	add.w	lr, lr, #4294967295
 801a6e4:	f04f 0801 	mov.w	r8, #1
 801a6e8:	e7e3      	b.n	801a6b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801a6ea:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801a6ec:	4450      	add	r0, sl
 801a6ee:	ee37 7a24 	vadd.f32	s14, s14, s9
 801a6f2:	4431      	add	r1, r6
 801a6f4:	ee77 7a84 	vadd.f32	s15, s15, s8
 801a6f8:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801a6fc:	4541      	cmp	r1, r8
 801a6fe:	db08      	blt.n	801a712 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 801a700:	ee76 6a85 	vadd.f32	s13, s13, s10
 801a704:	3001      	adds	r0, #1
 801a706:	ee37 7a25 	vadd.f32	s14, s14, s11
 801a70a:	eba1 0108 	sub.w	r1, r1, r8
 801a70e:	ee77 7a86 	vadd.f32	s15, s15, s12
 801a712:	f10c 3cff 	add.w	ip, ip, #4294967295
 801a716:	f04f 0901 	mov.w	r9, #1
 801a71a:	e79b      	b.n	801a654 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 801a71c:	449c      	add	ip, r3
 801a71e:	1aff      	subs	r7, r7, r3
 801a720:	f1b8 0f00 	cmp.w	r8, #0
 801a724:	d009      	beq.n	801a73a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801a726:	9019      	str	r0, [sp, #100]	; 0x64
 801a728:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801a72c:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801a730:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801a734:	911d      	str	r1, [sp, #116]	; 0x74
 801a736:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801a73a:	1ad2      	subs	r2, r2, r3
 801a73c:	e68b      	b.n	801a456 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801a73e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a740:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801a742:	2b00      	cmp	r3, #0
 801a744:	f000 80d1 	beq.w	801a8ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 801a748:	ad19      	add	r5, sp, #100	; 0x64
 801a74a:	ac39      	add	r4, sp, #228	; 0xe4
 801a74c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801a74e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801a752:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a756:	930c      	str	r3, [sp, #48]	; 0x30
 801a758:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a75a:	6963      	ldr	r3, [r4, #20]
 801a75c:	440b      	add	r3, r1
 801a75e:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801a762:	4408      	add	r0, r1
 801a764:	b200      	sxth	r0, r0
 801a766:	4283      	cmp	r3, r0
 801a768:	900d      	str	r0, [sp, #52]	; 0x34
 801a76a:	f280 80c1 	bge.w	801a8f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801a76e:	428b      	cmp	r3, r1
 801a770:	da08      	bge.n	801a784 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801a772:	2a00      	cmp	r2, #0
 801a774:	dd06      	ble.n	801a784 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801a776:	1acb      	subs	r3, r1, r3
 801a778:	429a      	cmp	r2, r3
 801a77a:	f2c0 80bb 	blt.w	801a8f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801a77e:	2b00      	cmp	r3, #0
 801a780:	f300 80b9 	bgt.w	801a8f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 801a784:	6967      	ldr	r7, [r4, #20]
 801a786:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801a78a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a78c:	443b      	add	r3, r7
 801a78e:	461f      	mov	r7, r3
 801a790:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a792:	1bdf      	subs	r7, r3, r7
 801a794:	4297      	cmp	r7, r2
 801a796:	bfa8      	it	ge
 801a798:	4617      	movge	r7, r2
 801a79a:	2f00      	cmp	r7, #0
 801a79c:	f340 813c 	ble.w	801aa18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801a7a0:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801a7a2:	6829      	ldr	r1, [r5, #0]
 801a7a4:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a7a8:	f9bb 3000 	ldrsh.w	r3, [fp]
 801a7ac:	4411      	add	r1, r2
 801a7ae:	6820      	ldr	r0, [r4, #0]
 801a7b0:	4299      	cmp	r1, r3
 801a7b2:	dd1a      	ble.n	801a7ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801a7b4:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801a7b8:	4402      	add	r2, r0
 801a7ba:	440b      	add	r3, r1
 801a7bc:	b21b      	sxth	r3, r3
 801a7be:	429a      	cmp	r2, r3
 801a7c0:	dc13      	bgt.n	801a7ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801a7c2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a7c4:	a912      	add	r1, sp, #72	; 0x48
 801a7c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a7c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a7ca:	681b      	ldr	r3, [r3, #0]
 801a7cc:	9206      	str	r2, [sp, #24]
 801a7ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a7d0:	9500      	str	r5, [sp, #0]
 801a7d2:	9205      	str	r2, [sp, #20]
 801a7d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a7d6:	e9cd b203 	strd	fp, r2, [sp, #12]
 801a7da:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801a7dc:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801a7e0:	aa49      	add	r2, sp, #292	; 0x124
 801a7e2:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801a7e6:	4623      	mov	r3, r4
 801a7e8:	47c8      	blx	r9
 801a7ea:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801a7ee:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801a7f2:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801a7f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a7fa:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801a7fe:	68a1      	ldr	r1, [r4, #8]
 801a800:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a804:	ed94 6a08 	vldr	s12, [r4, #32]
 801a808:	edd4 6a07 	vldr	s13, [r4, #28]
 801a80c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801a810:	ee76 6a86 	vadd.f32	s13, s13, s12
 801a814:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801a818:	e9d4 2300 	ldrd	r2, r3, [r4]
 801a81c:	edc4 6a07 	vstr	s13, [r4, #28]
 801a820:	441a      	add	r2, r3
 801a822:	6963      	ldr	r3, [r4, #20]
 801a824:	3301      	adds	r3, #1
 801a826:	6022      	str	r2, [r4, #0]
 801a828:	6163      	str	r3, [r4, #20]
 801a82a:	69a3      	ldr	r3, [r4, #24]
 801a82c:	3b01      	subs	r3, #1
 801a82e:	61a3      	str	r3, [r4, #24]
 801a830:	6923      	ldr	r3, [r4, #16]
 801a832:	440b      	add	r3, r1
 801a834:	68e1      	ldr	r1, [r4, #12]
 801a836:	428b      	cmp	r3, r1
 801a838:	6123      	str	r3, [r4, #16]
 801a83a:	db15      	blt.n	801a868 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 801a83c:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801a840:	3201      	adds	r2, #1
 801a842:	1a5b      	subs	r3, r3, r1
 801a844:	ee76 6a26 	vadd.f32	s13, s12, s13
 801a848:	6022      	str	r2, [r4, #0]
 801a84a:	6123      	str	r3, [r4, #16]
 801a84c:	edc4 6a07 	vstr	s13, [r4, #28]
 801a850:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801a854:	ee36 7a87 	vadd.f32	s14, s13, s14
 801a858:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801a85c:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801a860:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a864:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801a868:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801a86c:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801a870:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801a874:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a878:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801a87c:	68a9      	ldr	r1, [r5, #8]
 801a87e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a882:	ed95 6a08 	vldr	s12, [r5, #32]
 801a886:	edd5 6a07 	vldr	s13, [r5, #28]
 801a88a:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801a88e:	ee76 6a86 	vadd.f32	s13, s13, s12
 801a892:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801a896:	e9d5 2300 	ldrd	r2, r3, [r5]
 801a89a:	edc5 6a07 	vstr	s13, [r5, #28]
 801a89e:	441a      	add	r2, r3
 801a8a0:	696b      	ldr	r3, [r5, #20]
 801a8a2:	3301      	adds	r3, #1
 801a8a4:	602a      	str	r2, [r5, #0]
 801a8a6:	616b      	str	r3, [r5, #20]
 801a8a8:	69ab      	ldr	r3, [r5, #24]
 801a8aa:	3b01      	subs	r3, #1
 801a8ac:	61ab      	str	r3, [r5, #24]
 801a8ae:	692b      	ldr	r3, [r5, #16]
 801a8b0:	440b      	add	r3, r1
 801a8b2:	68e9      	ldr	r1, [r5, #12]
 801a8b4:	428b      	cmp	r3, r1
 801a8b6:	612b      	str	r3, [r5, #16]
 801a8b8:	db15      	blt.n	801a8e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801a8ba:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801a8be:	3201      	adds	r2, #1
 801a8c0:	1a5b      	subs	r3, r3, r1
 801a8c2:	ee76 6a26 	vadd.f32	s13, s12, s13
 801a8c6:	602a      	str	r2, [r5, #0]
 801a8c8:	612b      	str	r3, [r5, #16]
 801a8ca:	edc5 6a07 	vstr	s13, [r5, #28]
 801a8ce:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801a8d2:	ee36 7a87 	vadd.f32	s14, s13, s14
 801a8d6:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801a8da:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801a8de:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a8e2:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801a8e6:	3f01      	subs	r7, #1
 801a8e8:	e757      	b.n	801a79a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801a8ea:	ad39      	add	r5, sp, #228	; 0xe4
 801a8ec:	ac19      	add	r4, sp, #100	; 0x64
 801a8ee:	e72d      	b.n	801a74c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801a8f0:	4613      	mov	r3, r2
 801a8f2:	e744      	b.n	801a77e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 801a8f4:	4613      	mov	r3, r2
 801a8f6:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 801a8f8:	469e      	mov	lr, r3
 801a8fa:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 801a8fe:	461f      	mov	r7, r3
 801a900:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 801a904:	f04f 0900 	mov.w	r9, #0
 801a908:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 801a90c:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 801a910:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 801a914:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 801a918:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 801a91c:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801a91e:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 801a922:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 801a926:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 801a92a:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 801a92e:	960e      	str	r6, [sp, #56]	; 0x38
 801a930:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 801a934:	2f00      	cmp	r7, #0
 801a936:	d146      	bne.n	801a9c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 801a938:	449c      	add	ip, r3
 801a93a:	1ad7      	subs	r7, r2, r3
 801a93c:	f1b9 0f00 	cmp.w	r9, #0
 801a940:	d009      	beq.n	801a956 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801a942:	9039      	str	r0, [sp, #228]	; 0xe4
 801a944:	913d      	str	r1, [sp, #244]	; 0xf4
 801a946:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 801a94a:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 801a94e:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801a952:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 801a956:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801a958:	f04f 0800 	mov.w	r8, #0
 801a95c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801a960:	910e      	str	r1, [sp, #56]	; 0x38
 801a962:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801a966:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801a96a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801a96e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801a972:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801a976:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801a97a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801a97e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801a982:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801a986:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801a98a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801a98e:	f1be 0f00 	cmp.w	lr, #0
 801a992:	d030      	beq.n	801a9f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 801a994:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801a996:	4450      	add	r0, sl
 801a998:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801a99c:	4431      	add	r1, r6
 801a99e:	ee37 7a04 	vadd.f32	s14, s14, s8
 801a9a2:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801a9a6:	4549      	cmp	r1, r9
 801a9a8:	db08      	blt.n	801a9bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801a9aa:	ee77 7a85 	vadd.f32	s15, s15, s10
 801a9ae:	3001      	adds	r0, #1
 801a9b0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801a9b4:	eba1 0109 	sub.w	r1, r1, r9
 801a9b8:	ee37 7a06 	vadd.f32	s14, s14, s12
 801a9bc:	f10e 3eff 	add.w	lr, lr, #4294967295
 801a9c0:	f04f 0801 	mov.w	r8, #1
 801a9c4:	e7e3      	b.n	801a98e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801a9c6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801a9c8:	4450      	add	r0, sl
 801a9ca:	ee37 7a24 	vadd.f32	s14, s14, s9
 801a9ce:	4431      	add	r1, r6
 801a9d0:	ee77 7a84 	vadd.f32	s15, s15, s8
 801a9d4:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801a9d8:	4541      	cmp	r1, r8
 801a9da:	db08      	blt.n	801a9ee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 801a9dc:	ee76 6a85 	vadd.f32	s13, s13, s10
 801a9e0:	3001      	adds	r0, #1
 801a9e2:	ee37 7a25 	vadd.f32	s14, s14, s11
 801a9e6:	eba1 0108 	sub.w	r1, r1, r8
 801a9ea:	ee77 7a86 	vadd.f32	s15, s15, s12
 801a9ee:	3f01      	subs	r7, #1
 801a9f0:	f04f 0901 	mov.w	r9, #1
 801a9f4:	e79e      	b.n	801a934 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801a9f6:	449c      	add	ip, r3
 801a9f8:	1aff      	subs	r7, r7, r3
 801a9fa:	f1b8 0f00 	cmp.w	r8, #0
 801a9fe:	d009      	beq.n	801aa14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801aa00:	9019      	str	r0, [sp, #100]	; 0x64
 801aa02:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801aa06:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801aa0a:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801aa0e:	911d      	str	r1, [sp, #116]	; 0x74
 801aa10:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801aa14:	1ad2      	subs	r2, r2, r3
 801aa16:	e6b5      	b.n	801a784 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801aa18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801aa1a:	681b      	ldr	r3, [r3, #0]
 801aa1c:	b923      	cbnz	r3, 801aa28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801aa1e:	4b04      	ldr	r3, [pc, #16]	; (801aa30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801aa20:	6818      	ldr	r0, [r3, #0]
 801aa22:	6803      	ldr	r3, [r0, #0]
 801aa24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aa26:	4798      	blx	r3
 801aa28:	b05b      	add	sp, #364	; 0x16c
 801aa2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa2e:	bf00      	nop
 801aa30:	2400baf0 	.word	0x2400baf0

0801aa34 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 801aa34:	b570      	push	{r4, r5, r6, lr}
 801aa36:	4604      	mov	r4, r0
 801aa38:	2500      	movs	r5, #0
 801aa3a:	9805      	ldr	r0, [sp, #20]
 801aa3c:	f89d 601c 	ldrb.w	r6, [sp, #28]
 801aa40:	6061      	str	r1, [r4, #4]
 801aa42:	8263      	strh	r3, [r4, #18]
 801aa44:	f89d 1010 	ldrb.w	r1, [sp, #16]
 801aa48:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801aa4c:	8025      	strh	r5, [r4, #0]
 801aa4e:	7221      	strb	r1, [r4, #8]
 801aa50:	7266      	strb	r6, [r4, #9]
 801aa52:	60e0      	str	r0, [r4, #12]
 801aa54:	8222      	strh	r2, [r4, #16]
 801aa56:	82a3      	strh	r3, [r4, #20]
 801aa58:	82e5      	strh	r5, [r4, #22]
 801aa5a:	8325      	strh	r5, [r4, #24]
 801aa5c:	8365      	strh	r5, [r4, #26]
 801aa5e:	83a5      	strh	r5, [r4, #28]
 801aa60:	83e5      	strh	r5, [r4, #30]
 801aa62:	8425      	strh	r5, [r4, #32]
 801aa64:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 801aa68:	b32e      	cbz	r6, 801aab6 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801aa6a:	6803      	ldr	r3, [r0, #0]
 801aa6c:	695b      	ldr	r3, [r3, #20]
 801aa6e:	4798      	blx	r3
 801aa70:	4606      	mov	r6, r0
 801aa72:	b300      	cbz	r0, 801aab6 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801aa74:	68e0      	ldr	r0, [r4, #12]
 801aa76:	4631      	mov	r1, r6
 801aa78:	6803      	ldr	r3, [r0, #0]
 801aa7a:	68db      	ldr	r3, [r3, #12]
 801aa7c:	4798      	blx	r3
 801aa7e:	4605      	mov	r5, r0
 801aa80:	b1c8      	cbz	r0, 801aab6 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801aa82:	7b43      	ldrb	r3, [r0, #13]
 801aa84:	7a82      	ldrb	r2, [r0, #10]
 801aa86:	005b      	lsls	r3, r3, #1
 801aa88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801aa8c:	4313      	orrs	r3, r2
 801aa8e:	8423      	strh	r3, [r4, #32]
 801aa90:	7a63      	ldrb	r3, [r4, #9]
 801aa92:	2b06      	cmp	r3, #6
 801aa94:	d10f      	bne.n	801aab6 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801aa96:	68e0      	ldr	r0, [r4, #12]
 801aa98:	462a      	mov	r2, r5
 801aa9a:	4631      	mov	r1, r6
 801aa9c:	6803      	ldr	r3, [r0, #0]
 801aa9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801aaa0:	4798      	blx	r3
 801aaa2:	7b6b      	ldrb	r3, [r5, #13]
 801aaa4:	005b      	lsls	r3, r3, #1
 801aaa6:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801aaaa:	7aab      	ldrb	r3, [r5, #10]
 801aaac:	4313      	orrs	r3, r2
 801aaae:	4418      	add	r0, r3
 801aab0:	8c23      	ldrh	r3, [r4, #32]
 801aab2:	4418      	add	r0, r3
 801aab4:	8420      	strh	r0, [r4, #32]
 801aab6:	4620      	mov	r0, r4
 801aab8:	bd70      	pop	{r4, r5, r6, pc}

0801aaba <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801aaba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aabe:	2400      	movs	r4, #0
 801aac0:	b085      	sub	sp, #20
 801aac2:	4681      	mov	r9, r0
 801aac4:	4688      	mov	r8, r1
 801aac6:	4692      	mov	sl, r2
 801aac8:	469b      	mov	fp, r3
 801aaca:	4627      	mov	r7, r4
 801aacc:	4625      	mov	r5, r4
 801aace:	4626      	mov	r6, r4
 801aad0:	4554      	cmp	r4, sl
 801aad2:	da2a      	bge.n	801ab2a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801aad4:	2300      	movs	r3, #0
 801aad6:	9303      	str	r3, [sp, #12]
 801aad8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801aadc:	429d      	cmp	r5, r3
 801aade:	d004      	beq.n	801aaea <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 801aae0:	f242 030b 	movw	r3, #8203	; 0x200b
 801aae4:	429d      	cmp	r5, r3
 801aae6:	bf18      	it	ne
 801aae8:	462f      	movne	r7, r5
 801aaea:	ab03      	add	r3, sp, #12
 801aaec:	4642      	mov	r2, r8
 801aaee:	4659      	mov	r1, fp
 801aaf0:	4648      	mov	r0, r9
 801aaf2:	f003 f919 	bl	801dd28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801aaf6:	4605      	mov	r5, r0
 801aaf8:	b1b8      	cbz	r0, 801ab2a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801aafa:	280a      	cmp	r0, #10
 801aafc:	d015      	beq.n	801ab2a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801aafe:	9a03      	ldr	r2, [sp, #12]
 801ab00:	b18a      	cbz	r2, 801ab26 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 801ab02:	7b50      	ldrb	r0, [r2, #13]
 801ab04:	4639      	mov	r1, r7
 801ab06:	7a93      	ldrb	r3, [r2, #10]
 801ab08:	0040      	lsls	r0, r0, #1
 801ab0a:	8895      	ldrh	r5, [r2, #4]
 801ab0c:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801ab10:	4303      	orrs	r3, r0
 801ab12:	4640      	mov	r0, r8
 801ab14:	9301      	str	r3, [sp, #4]
 801ab16:	f8d8 3000 	ldr.w	r3, [r8]
 801ab1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ab1c:	4798      	blx	r3
 801ab1e:	9b01      	ldr	r3, [sp, #4]
 801ab20:	4418      	add	r0, r3
 801ab22:	4406      	add	r6, r0
 801ab24:	b2b6      	uxth	r6, r6
 801ab26:	3401      	adds	r4, #1
 801ab28:	e7d2      	b.n	801aad0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 801ab2a:	4630      	mov	r0, r6
 801ab2c:	b005      	add	sp, #20
 801ab2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ab32 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801ab32:	2a02      	cmp	r2, #2
 801ab34:	b530      	push	{r4, r5, lr}
 801ab36:	d011      	beq.n	801ab5c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801ab38:	2a03      	cmp	r2, #3
 801ab3a:	d01c      	beq.n	801ab76 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801ab3c:	2a01      	cmp	r2, #1
 801ab3e:	d10c      	bne.n	801ab5a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801ab40:	888b      	ldrh	r3, [r1, #4]
 801ab42:	8801      	ldrh	r1, [r0, #0]
 801ab44:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801ab48:	1a5b      	subs	r3, r3, r1
 801ab4a:	8844      	ldrh	r4, [r0, #2]
 801ab4c:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801ab50:	1a9b      	subs	r3, r3, r2
 801ab52:	8004      	strh	r4, [r0, #0]
 801ab54:	8081      	strh	r1, [r0, #4]
 801ab56:	8043      	strh	r3, [r0, #2]
 801ab58:	80c2      	strh	r2, [r0, #6]
 801ab5a:	bd30      	pop	{r4, r5, pc}
 801ab5c:	88cb      	ldrh	r3, [r1, #6]
 801ab5e:	8842      	ldrh	r2, [r0, #2]
 801ab60:	1a9b      	subs	r3, r3, r2
 801ab62:	88c2      	ldrh	r2, [r0, #6]
 801ab64:	1a9b      	subs	r3, r3, r2
 801ab66:	888a      	ldrh	r2, [r1, #4]
 801ab68:	8801      	ldrh	r1, [r0, #0]
 801ab6a:	8043      	strh	r3, [r0, #2]
 801ab6c:	1a52      	subs	r2, r2, r1
 801ab6e:	8881      	ldrh	r1, [r0, #4]
 801ab70:	1a52      	subs	r2, r2, r1
 801ab72:	8002      	strh	r2, [r0, #0]
 801ab74:	e7f1      	b.n	801ab5a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801ab76:	88cb      	ldrh	r3, [r1, #6]
 801ab78:	8841      	ldrh	r1, [r0, #2]
 801ab7a:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801ab7e:	1a5b      	subs	r3, r3, r1
 801ab80:	f9b0 5000 	ldrsh.w	r5, [r0]
 801ab84:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801ab88:	1a9b      	subs	r3, r3, r2
 801ab8a:	8045      	strh	r5, [r0, #2]
 801ab8c:	8082      	strh	r2, [r0, #4]
 801ab8e:	8003      	strh	r3, [r0, #0]
 801ab90:	80c4      	strh	r4, [r0, #6]
 801ab92:	e7e2      	b.n	801ab5a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801ab94 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801ab94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab98:	b09f      	sub	sp, #124	; 0x7c
 801ab9a:	9116      	str	r1, [sp, #88]	; 0x58
 801ab9c:	9317      	str	r3, [sp, #92]	; 0x5c
 801ab9e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801aba0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801aba2:	8809      	ldrh	r1, [r1, #0]
 801aba4:	889b      	ldrh	r3, [r3, #4]
 801aba6:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 801abaa:	440b      	add	r3, r1
 801abac:	9212      	str	r2, [sp, #72]	; 0x48
 801abae:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 801abb2:	b21b      	sxth	r3, r3
 801abb4:	9011      	str	r0, [sp, #68]	; 0x44
 801abb6:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 801abba:	9310      	str	r3, [sp, #64]	; 0x40
 801abbc:	f8d8 3000 	ldr.w	r3, [r8]
 801abc0:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	; 0xa0
 801abc4:	7b19      	ldrb	r1, [r3, #12]
 801abc6:	7adb      	ldrb	r3, [r3, #11]
 801abc8:	9114      	str	r1, [sp, #80]	; 0x50
 801abca:	9315      	str	r3, [sp, #84]	; 0x54
 801abcc:	2a00      	cmp	r2, #0
 801abce:	d06a      	beq.n	801aca6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 801abd0:	f898 3010 	ldrb.w	r3, [r8, #16]
 801abd4:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801abd6:	2b06      	cmp	r3, #6
 801abd8:	bf14      	ite	ne
 801abda:	2301      	movne	r3, #1
 801abdc:	2302      	moveq	r3, #2
 801abde:	4413      	add	r3, r2
 801abe0:	f04f 0900 	mov.w	r9, #0
 801abe4:	930f      	str	r3, [sp, #60]	; 0x3c
 801abe6:	464c      	mov	r4, r9
 801abe8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801abec:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801abf0:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 801abf4:	4293      	cmp	r3, r2
 801abf6:	f280 808f 	bge.w	801ad18 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 801abfa:	2300      	movs	r3, #0
 801abfc:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 801ac00:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 801ac04:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801ac08:	429c      	cmp	r4, r3
 801ac0a:	d006      	beq.n	801ac1a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 801ac0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ac0e:	f242 020b 	movw	r2, #8203	; 0x200b
 801ac12:	4294      	cmp	r4, r2
 801ac14:	bf18      	it	ne
 801ac16:	4623      	movne	r3, r4
 801ac18:	930d      	str	r3, [sp, #52]	; 0x34
 801ac1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ac1c:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801ac1e:	f8d8 2000 	ldr.w	r2, [r8]
 801ac22:	428b      	cmp	r3, r1
 801ac24:	db41      	blt.n	801acaa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 801ac26:	6813      	ldr	r3, [r2, #0]
 801ac28:	4610      	mov	r0, r2
 801ac2a:	695b      	ldr	r3, [r3, #20]
 801ac2c:	4798      	blx	r3
 801ac2e:	4604      	mov	r4, r0
 801ac30:	f8d8 0000 	ldr.w	r0, [r8]
 801ac34:	aa1d      	add	r2, sp, #116	; 0x74
 801ac36:	4621      	mov	r1, r4
 801ac38:	6803      	ldr	r3, [r0, #0]
 801ac3a:	689d      	ldr	r5, [r3, #8]
 801ac3c:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801ac40:	47a8      	blx	r5
 801ac42:	901c      	str	r0, [sp, #112]	; 0x70
 801ac44:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801ac48:	429c      	cmp	r4, r3
 801ac4a:	f000 80ec 	beq.w	801ae26 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801ac4e:	f242 030b 	movw	r3, #8203	; 0x200b
 801ac52:	429c      	cmp	r4, r3
 801ac54:	f000 80e7 	beq.w	801ae26 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801ac58:	2c00      	cmp	r4, #0
 801ac5a:	f000 80f9 	beq.w	801ae50 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 801ac5e:	2c0a      	cmp	r4, #10
 801ac60:	d060      	beq.n	801ad24 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 801ac62:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801ac64:	b36a      	cbz	r2, 801acc2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 801ac66:	8894      	ldrh	r4, [r2, #4]
 801ac68:	f1bb 0f00 	cmp.w	fp, #0
 801ac6c:	d03b      	beq.n	801ace6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 801ac6e:	f892 900d 	ldrb.w	r9, [r2, #13]
 801ac72:	f1bb 0f01 	cmp.w	fp, #1
 801ac76:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801ac7a:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801ac7e:	f892 900a 	ldrb.w	r9, [r2, #10]
 801ac82:	ea49 0903 	orr.w	r9, r9, r3
 801ac86:	d134      	bne.n	801acf2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 801ac88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ac8a:	eba6 0609 	sub.w	r6, r6, r9
 801ac8e:	2b00      	cmp	r3, #0
 801ac90:	d14f      	bne.n	801ad32 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 801ac92:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ac94:	eb09 0306 	add.w	r3, r9, r6
 801ac98:	4413      	add	r3, r2
 801ac9a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801ac9c:	f9b2 2000 	ldrsh.w	r2, [r2]
 801aca0:	4293      	cmp	r3, r2
 801aca2:	da51      	bge.n	801ad48 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 801aca4:	e038      	b.n	801ad18 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 801aca6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801aca8:	e79a      	b.n	801abe0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 801acaa:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801acae:	4659      	mov	r1, fp
 801acb0:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801acb2:	9301      	str	r3, [sp, #4]
 801acb4:	ab1d      	add	r3, sp, #116	; 0x74
 801acb6:	9300      	str	r3, [sp, #0]
 801acb8:	ab1c      	add	r3, sp, #112	; 0x70
 801acba:	f003 f87e 	bl	801ddba <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801acbe:	4604      	mov	r4, r0
 801acc0:	e7c0      	b.n	801ac44 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 801acc2:	f8d8 0000 	ldr.w	r0, [r8]
 801acc6:	6803      	ldr	r3, [r0, #0]
 801acc8:	691b      	ldr	r3, [r3, #16]
 801acca:	4798      	blx	r3
 801accc:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801acd0:	4298      	cmp	r0, r3
 801acd2:	f000 80a8 	beq.w	801ae26 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801acd6:	f242 030b 	movw	r3, #8203	; 0x200b
 801acda:	4298      	cmp	r0, r3
 801acdc:	f000 80a3 	beq.w	801ae26 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801ace0:	f1bb 0f00 	cmp.w	fp, #0
 801ace4:	d100      	bne.n	801ace8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 801ace6:	444e      	add	r6, r9
 801ace8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801acea:	2a00      	cmp	r2, #0
 801acec:	d1bf      	bne.n	801ac6e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 801acee:	4691      	mov	r9, r2
 801acf0:	e099      	b.n	801ae26 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801acf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801acf4:	2b00      	cmp	r3, #0
 801acf6:	f000 80ad 	beq.w	801ae54 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c0>
 801acfa:	f1bb 0f00 	cmp.w	fp, #0
 801acfe:	d118      	bne.n	801ad32 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 801ad00:	f8d8 0000 	ldr.w	r0, [r8]
 801ad04:	990d      	ldr	r1, [sp, #52]	; 0x34
 801ad06:	6803      	ldr	r3, [r0, #0]
 801ad08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ad0a:	4798      	blx	r3
 801ad0c:	4406      	add	r6, r0
 801ad0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ad10:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ad12:	1af3      	subs	r3, r6, r3
 801ad14:	4293      	cmp	r3, r2
 801ad16:	dd17      	ble.n	801ad48 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 801ad18:	2c00      	cmp	r4, #0
 801ad1a:	f000 8099 	beq.w	801ae50 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 801ad1e:	2c0a      	cmp	r4, #10
 801ad20:	f040 8087 	bne.w	801ae32 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29e>
 801ad24:	240a      	movs	r4, #10
 801ad26:	fab4 f084 	clz	r0, r4
 801ad2a:	0940      	lsrs	r0, r0, #5
 801ad2c:	b01f      	add	sp, #124	; 0x7c
 801ad2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad32:	f8d8 0000 	ldr.w	r0, [r8]
 801ad36:	990d      	ldr	r1, [sp, #52]	; 0x34
 801ad38:	6803      	ldr	r3, [r0, #0]
 801ad3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ad3c:	4798      	blx	r3
 801ad3e:	f1bb 0f01 	cmp.w	fp, #1
 801ad42:	eba6 0600 	sub.w	r6, r6, r0
 801ad46:	d0a4      	beq.n	801ac92 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 801ad48:	981c      	ldr	r0, [sp, #112]	; 0x70
 801ad4a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801ad4c:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801ad50:	f9b3 7000 	ldrsh.w	r7, [r3]
 801ad54:	7b43      	ldrb	r3, [r0, #13]
 801ad56:	4431      	add	r1, r6
 801ad58:	015b      	lsls	r3, r3, #5
 801ad5a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801ad5e:	7983      	ldrb	r3, [r0, #6]
 801ad60:	4313      	orrs	r3, r2
 801ad62:	440b      	add	r3, r1
 801ad64:	42bb      	cmp	r3, r7
 801ad66:	db5e      	blt.n	801ae26 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801ad68:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ad6a:	4299      	cmp	r1, r3
 801ad6c:	da5b      	bge.n	801ae26 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801ad6e:	f8d8 0000 	ldr.w	r0, [r8]
 801ad72:	42b7      	cmp	r7, r6
 801ad74:	6803      	ldr	r3, [r0, #0]
 801ad76:	bfcc      	ite	gt
 801ad78:	1bbf      	subgt	r7, r7, r6
 801ad7a:	2700      	movle	r7, #0
 801ad7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ad7e:	bfc8      	it	gt
 801ad80:	b2bf      	uxthgt	r7, r7
 801ad82:	4798      	blx	r3
 801ad84:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ad86:	7b5a      	ldrb	r2, [r3, #13]
 801ad88:	00d1      	lsls	r1, r2, #3
 801ad8a:	f401 7580 	and.w	r5, r1, #256	; 0x100
 801ad8e:	7a19      	ldrb	r1, [r3, #8]
 801ad90:	4329      	orrs	r1, r5
 801ad92:	0655      	lsls	r5, r2, #25
 801ad94:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 801ad96:	bf48      	it	mi
 801ad98:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 801ad9c:	4405      	add	r5, r0
 801ad9e:	bf48      	it	mi
 801ada0:	b209      	sxthmi	r1, r1
 801ada2:	1a6d      	subs	r5, r5, r1
 801ada4:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801ada6:	b2ad      	uxth	r5, r5
 801ada8:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801adac:	fa0f fa85 	sxth.w	sl, r5
 801adb0:	4551      	cmp	r1, sl
 801adb2:	dd3c      	ble.n	801ae2e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 801adb4:	0112      	lsls	r2, r2, #4
 801adb6:	79d8      	ldrb	r0, [r3, #7]
 801adb8:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801adbc:	4302      	orrs	r2, r0
 801adbe:	4492      	add	sl, r2
 801adc0:	4551      	cmp	r1, sl
 801adc2:	dc30      	bgt.n	801ae26 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801adc4:	1b4d      	subs	r5, r1, r5
 801adc6:	468a      	mov	sl, r1
 801adc8:	b22d      	sxth	r5, r5
 801adca:	9319      	str	r3, [sp, #100]	; 0x64
 801adcc:	b2ad      	uxth	r5, r5
 801adce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801add0:	f8d8 0000 	ldr.w	r0, [r8]
 801add4:	681a      	ldr	r2, [r3, #0]
 801add6:	6801      	ldr	r1, [r0, #0]
 801add8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 801adda:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801addc:	9313      	str	r3, [sp, #76]	; 0x4c
 801adde:	9218      	str	r2, [sp, #96]	; 0x60
 801ade0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801ade2:	4788      	blx	r1
 801ade4:	f898 1006 	ldrb.w	r1, [r8, #6]
 801ade8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801adea:	910b      	str	r1, [sp, #44]	; 0x2c
 801adec:	f898 100e 	ldrb.w	r1, [r8, #14]
 801adf0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801adf2:	910a      	str	r1, [sp, #40]	; 0x28
 801adf4:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 801adf8:	9109      	str	r1, [sp, #36]	; 0x24
 801adfa:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801adfe:	9305      	str	r3, [sp, #20]
 801ae00:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801ae02:	9206      	str	r2, [sp, #24]
 801ae04:	9304      	str	r3, [sp, #16]
 801ae06:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ae08:	f8cd a004 	str.w	sl, [sp, #4]
 801ae0c:	e9cd 7502 	strd	r7, r5, [sp, #8]
 801ae10:	4437      	add	r7, r6
 801ae12:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801ae14:	b23f      	sxth	r7, r7
 801ae16:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801ae1a:	9700      	str	r7, [sp, #0]
 801ae1c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801ae1e:	681a      	ldr	r2, [r3, #0]
 801ae20:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ae22:	685b      	ldr	r3, [r3, #4]
 801ae24:	47a8      	blx	r5
 801ae26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ae28:	3301      	adds	r3, #1
 801ae2a:	930e      	str	r3, [sp, #56]	; 0x38
 801ae2c:	e6e0      	b.n	801abf0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 801ae2e:	2500      	movs	r5, #0
 801ae30:	e7cb      	b.n	801adca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
 801ae32:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801ae34:	3501      	adds	r5, #1
 801ae36:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801ae38:	429d      	cmp	r5, r3
 801ae3a:	f6bf af74 	bge.w	801ad26 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 801ae3e:	4659      	mov	r1, fp
 801ae40:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801ae42:	f7ef fa71 	bl	800a328 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801ae46:	4604      	mov	r4, r0
 801ae48:	b110      	cbz	r0, 801ae50 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 801ae4a:	280a      	cmp	r0, #10
 801ae4c:	d1f2      	bne.n	801ae34 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2a0>
 801ae4e:	e769      	b.n	801ad24 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 801ae50:	2400      	movs	r4, #0
 801ae52:	e768      	b.n	801ad26 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 801ae54:	f1bb 0f00 	cmp.w	fp, #0
 801ae58:	f43f af59 	beq.w	801ad0e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 801ae5c:	e774      	b.n	801ad48 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

0801ae5e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801ae5e:	b530      	push	{r4, r5, lr}
 801ae60:	8ac4      	ldrh	r4, [r0, #22]
 801ae62:	8b45      	ldrh	r5, [r0, #26]
 801ae64:	8343      	strh	r3, [r0, #26]
 801ae66:	442c      	add	r4, r5
 801ae68:	1ae4      	subs	r4, r4, r3
 801ae6a:	8b83      	ldrh	r3, [r0, #28]
 801ae6c:	82c4      	strh	r4, [r0, #22]
 801ae6e:	8b04      	ldrh	r4, [r0, #24]
 801ae70:	4422      	add	r2, r4
 801ae72:	440c      	add	r4, r1
 801ae74:	1a59      	subs	r1, r3, r1
 801ae76:	83c2      	strh	r2, [r0, #30]
 801ae78:	8304      	strh	r4, [r0, #24]
 801ae7a:	8381      	strh	r1, [r0, #28]
 801ae7c:	bd30      	pop	{r4, r5, pc}

0801ae7e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 801ae7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae82:	4604      	mov	r4, r0
 801ae84:	8a47      	ldrh	r7, [r0, #18]
 801ae86:	68c0      	ldr	r0, [r0, #12]
 801ae88:	b085      	sub	sp, #20
 801ae8a:	6803      	ldr	r3, [r0, #0]
 801ae8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ae8e:	4798      	blx	r3
 801ae90:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 801ae94:	7a63      	ldrb	r3, [r4, #9]
 801ae96:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 801ae9a:	3b01      	subs	r3, #1
 801ae9c:	42b7      	cmp	r7, r6
 801ae9e:	bfac      	ite	ge
 801aea0:	f04f 0900 	movge.w	r9, #0
 801aea4:	f04f 0901 	movlt.w	r9, #1
 801aea8:	2b05      	cmp	r3, #5
 801aeaa:	d804      	bhi.n	801aeb6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 801aeac:	e8df f003 	tbb	[pc, r3]
 801aeb0:	470f0854 	.word	0x470f0854
 801aeb4:	4c4c      	.short	0x4c4c
 801aeb6:	2500      	movs	r5, #0
 801aeb8:	46a9      	mov	r9, r5
 801aeba:	462e      	mov	r6, r5
 801aebc:	462f      	mov	r7, r5
 801aebe:	e00e      	b.n	801aede <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 801aec0:	42b7      	cmp	r7, r6
 801aec2:	f04f 0500 	mov.w	r5, #0
 801aec6:	bfb4      	ite	lt
 801aec8:	2600      	movlt	r6, #0
 801aeca:	2601      	movge	r6, #1
 801aecc:	e7f6      	b.n	801aebc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 801aece:	42b7      	cmp	r7, r6
 801aed0:	464d      	mov	r5, r9
 801aed2:	f04f 0900 	mov.w	r9, #0
 801aed6:	bfb4      	ite	lt
 801aed8:	2600      	movlt	r6, #0
 801aeda:	2601      	movge	r6, #1
 801aedc:	464f      	mov	r7, r9
 801aede:	f04f 0800 	mov.w	r8, #0
 801aee2:	f8a4 8016 	strh.w	r8, [r4, #22]
 801aee6:	f8a4 8018 	strh.w	r8, [r4, #24]
 801aeea:	f8cd 8004 	str.w	r8, [sp, #4]
 801aeee:	2300      	movs	r3, #0
 801aef0:	9303      	str	r3, [sp, #12]
 801aef2:	8823      	ldrh	r3, [r4, #0]
 801aef4:	2b20      	cmp	r3, #32
 801aef6:	d033      	beq.n	801af60 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 801aef8:	f242 010b 	movw	r1, #8203	; 0x200b
 801aefc:	1a5a      	subs	r2, r3, r1
 801aefe:	f1d2 0a00 	rsbs	sl, r2, #0
 801af02:	eb4a 0a02 	adc.w	sl, sl, r2
 801af06:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801af0a:	4293      	cmp	r3, r2
 801af0c:	d008      	beq.n	801af20 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 801af0e:	428b      	cmp	r3, r1
 801af10:	9a01      	ldr	r2, [sp, #4]
 801af12:	bf0e      	itee	eq
 801af14:	f04f 0a01 	moveq.w	sl, #1
 801af18:	461a      	movne	r2, r3
 801af1a:	f04f 0a00 	movne.w	sl, #0
 801af1e:	9201      	str	r2, [sp, #4]
 801af20:	ab03      	add	r3, sp, #12
 801af22:	68e2      	ldr	r2, [r4, #12]
 801af24:	7a21      	ldrb	r1, [r4, #8]
 801af26:	6860      	ldr	r0, [r4, #4]
 801af28:	f002 fefe 	bl	801dd28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801af2c:	8020      	strh	r0, [r4, #0]
 801af2e:	b9d8      	cbnz	r0, 801af68 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 801af30:	8ba2      	ldrh	r2, [r4, #28]
 801af32:	2300      	movs	r3, #0
 801af34:	4611      	mov	r1, r2
 801af36:	4620      	mov	r0, r4
 801af38:	f7ff ff91 	bl	801ae5e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801af3c:	e06e      	b.n	801b01c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 801af3e:	2500      	movs	r5, #0
 801af40:	2701      	movs	r7, #1
 801af42:	46a9      	mov	r9, r5
 801af44:	462e      	mov	r6, r5
 801af46:	e7ca      	b.n	801aede <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 801af48:	42b7      	cmp	r7, r6
 801af4a:	f04f 0500 	mov.w	r5, #0
 801af4e:	bfb4      	ite	lt
 801af50:	2700      	movlt	r7, #0
 801af52:	2701      	movge	r7, #1
 801af54:	462e      	mov	r6, r5
 801af56:	e7c2      	b.n	801aede <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 801af58:	2500      	movs	r5, #0
 801af5a:	2601      	movs	r6, #1
 801af5c:	46a9      	mov	r9, r5
 801af5e:	e7ad      	b.n	801aebc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 801af60:	9301      	str	r3, [sp, #4]
 801af62:	f04f 0a01 	mov.w	sl, #1
 801af66:	e7db      	b.n	801af20 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 801af68:	8b63      	ldrh	r3, [r4, #26]
 801af6a:	280a      	cmp	r0, #10
 801af6c:	f103 0301 	add.w	r3, r3, #1
 801af70:	8363      	strh	r3, [r4, #26]
 801af72:	d0dd      	beq.n	801af30 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 801af74:	9a03      	ldr	r2, [sp, #12]
 801af76:	bb62      	cbnz	r2, 801afd2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 801af78:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801af7c:	4298      	cmp	r0, r3
 801af7e:	d003      	beq.n	801af88 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 801af80:	f242 030b 	movw	r3, #8203	; 0x200b
 801af84:	4298      	cmp	r0, r3
 801af86:	d1b2      	bne.n	801aeee <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801af88:	8823      	ldrh	r3, [r4, #0]
 801af8a:	8ba1      	ldrh	r1, [r4, #28]
 801af8c:	2b20      	cmp	r3, #32
 801af8e:	d003      	beq.n	801af98 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 801af90:	f242 000b 	movw	r0, #8203	; 0x200b
 801af94:	4283      	cmp	r3, r0
 801af96:	d131      	bne.n	801affc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 801af98:	f1ba 0f00 	cmp.w	sl, #0
 801af9c:	bf0a      	itet	eq
 801af9e:	4688      	moveq	r8, r1
 801afa0:	4650      	movne	r0, sl
 801afa2:	2001      	moveq	r0, #1
 801afa4:	440a      	add	r2, r1
 801afa6:	8b23      	ldrh	r3, [r4, #24]
 801afa8:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801afac:	b292      	uxth	r2, r2
 801afae:	83a2      	strh	r2, [r4, #28]
 801afb0:	4413      	add	r3, r2
 801afb2:	f1b9 0f00 	cmp.w	r9, #0
 801afb6:	d102      	bne.n	801afbe <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 801afb8:	2d00      	cmp	r5, #0
 801afba:	d042      	beq.n	801b042 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 801afbc:	b300      	cbz	r0, 801b000 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 801afbe:	8c21      	ldrh	r1, [r4, #32]
 801afc0:	4419      	add	r1, r3
 801afc2:	458c      	cmp	ip, r1
 801afc4:	da37      	bge.n	801b036 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 801afc6:	8ae1      	ldrh	r1, [r4, #22]
 801afc8:	2900      	cmp	r1, #0
 801afca:	d034      	beq.n	801b036 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 801afcc:	4563      	cmp	r3, ip
 801afce:	dd8e      	ble.n	801aeee <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801afd0:	e01d      	b.n	801b00e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 801afd2:	8893      	ldrh	r3, [r2, #4]
 801afd4:	9901      	ldr	r1, [sp, #4]
 801afd6:	8023      	strh	r3, [r4, #0]
 801afd8:	f892 b00d 	ldrb.w	fp, [r2, #13]
 801afdc:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 801afe0:	f40b 7080 	and.w	r0, fp, #256	; 0x100
 801afe4:	f892 b00a 	ldrb.w	fp, [r2, #10]
 801afe8:	ea4b 0b00 	orr.w	fp, fp, r0
 801afec:	68e0      	ldr	r0, [r4, #12]
 801afee:	6803      	ldr	r3, [r0, #0]
 801aff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801aff2:	4798      	blx	r3
 801aff4:	eb0b 0200 	add.w	r2, fp, r0
 801aff8:	b292      	uxth	r2, r2
 801affa:	e7c5      	b.n	801af88 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 801affc:	2000      	movs	r0, #0
 801affe:	e7d1      	b.n	801afa4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 801b000:	4563      	cmp	r3, ip
 801b002:	f77f af74 	ble.w	801aeee <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801b006:	8ae3      	ldrh	r3, [r4, #22]
 801b008:	2b00      	cmp	r3, #0
 801b00a:	f43f af70 	beq.w	801aeee <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801b00e:	2301      	movs	r3, #1
 801b010:	8c22      	ldrh	r2, [r4, #32]
 801b012:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 801b016:	8be3      	ldrh	r3, [r4, #30]
 801b018:	4413      	add	r3, r2
 801b01a:	83e3      	strh	r3, [r4, #30]
 801b01c:	68e0      	ldr	r0, [r4, #12]
 801b01e:	6803      	ldr	r3, [r0, #0]
 801b020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b022:	4798      	blx	r3
 801b024:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 801b028:	4418      	add	r0, r3
 801b02a:	8a63      	ldrh	r3, [r4, #18]
 801b02c:	1a18      	subs	r0, r3, r0
 801b02e:	8260      	strh	r0, [r4, #18]
 801b030:	b005      	add	sp, #20
 801b032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b036:	2300      	movs	r3, #0
 801b038:	4611      	mov	r1, r2
 801b03a:	4620      	mov	r0, r4
 801b03c:	f7ff ff0f 	bl	801ae5e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801b040:	e755      	b.n	801aeee <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801b042:	4563      	cmp	r3, ip
 801b044:	dd14      	ble.n	801b070 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 801b046:	b117      	cbz	r7, 801b04e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 801b048:	2301      	movs	r3, #1
 801b04a:	460a      	mov	r2, r1
 801b04c:	e772      	b.n	801af34 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 801b04e:	2e00      	cmp	r6, #0
 801b050:	f43f af4d 	beq.w	801aeee <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801b054:	2800      	cmp	r0, #0
 801b056:	f47f af4a 	bne.w	801aeee <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801b05a:	f1ba 0f00 	cmp.w	sl, #0
 801b05e:	d002      	beq.n	801b066 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 801b060:	2301      	movs	r3, #1
 801b062:	4642      	mov	r2, r8
 801b064:	e767      	b.n	801af36 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 801b066:	8ae3      	ldrh	r3, [r4, #22]
 801b068:	2b00      	cmp	r3, #0
 801b06a:	f43f af40 	beq.w	801aeee <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801b06e:	e7d5      	b.n	801b01c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 801b070:	2800      	cmp	r0, #0
 801b072:	f47f af3c 	bne.w	801aeee <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801b076:	f1ba 0f00 	cmp.w	sl, #0
 801b07a:	f43f af38 	beq.w	801aeee <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801b07e:	2301      	movs	r3, #1
 801b080:	4642      	mov	r2, r8
 801b082:	e7da      	b.n	801b03a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

0801b084 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801b084:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b086:	4605      	mov	r5, r0
 801b088:	b08f      	sub	sp, #60	; 0x3c
 801b08a:	4617      	mov	r7, r2
 801b08c:	461c      	mov	r4, r3
 801b08e:	460e      	mov	r6, r1
 801b090:	b1d1      	cbz	r1, 801b0c8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 801b092:	681b      	ldr	r3, [r3, #0]
 801b094:	4620      	mov	r0, r4
 801b096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b098:	4798      	blx	r3
 801b09a:	4240      	negs	r0, r0
 801b09c:	9603      	str	r6, [sp, #12]
 801b09e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b0a2:	b200      	sxth	r0, r0
 801b0a4:	9700      	str	r7, [sp, #0]
 801b0a6:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801b0aa:	4629      	mov	r1, r5
 801b0ac:	e9cd 4001 	strd	r4, r0, [sp, #4]
 801b0b0:	2401      	movs	r4, #1
 801b0b2:	a805      	add	r0, sp, #20
 801b0b4:	f7ff fcbe 	bl	801aa34 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 801b0b8:	a805      	add	r0, sp, #20
 801b0ba:	f7ff fee0 	bl	801ae7e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801b0be:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801b0c2:	b163      	cbz	r3, 801b0de <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 801b0c4:	3401      	adds	r4, #1
 801b0c6:	e7f7      	b.n	801b0b8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801b0c8:	2401      	movs	r4, #1
 801b0ca:	f002 fef9 	bl	801dec0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b0ce:	280a      	cmp	r0, #10
 801b0d0:	4628      	mov	r0, r5
 801b0d2:	bf08      	it	eq
 801b0d4:	3401      	addeq	r4, #1
 801b0d6:	f002 fef3 	bl	801dec0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b0da:	2800      	cmp	r0, #0
 801b0dc:	d1f7      	bne.n	801b0ce <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 801b0de:	b2a0      	uxth	r0, r4
 801b0e0:	b00f      	add	sp, #60	; 0x3c
 801b0e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b0e4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801b0e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0e8:	b0e3      	sub	sp, #396	; 0x18c
 801b0ea:	461c      	mov	r4, r3
 801b0ec:	4683      	mov	fp, r0
 801b0ee:	4688      	mov	r8, r1
 801b0f0:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
 801b0f2:	2b00      	cmp	r3, #0
 801b0f4:	f000 8112 	beq.w	801b31c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801b0f8:	6823      	ldr	r3, [r4, #0]
 801b0fa:	2b00      	cmp	r3, #0
 801b0fc:	f000 810e 	beq.w	801b31c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801b100:	7ba3      	ldrb	r3, [r4, #14]
 801b102:	2b00      	cmp	r3, #0
 801b104:	f000 810a 	beq.w	801b31c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801b108:	ad0a      	add	r5, sp, #40	; 0x28
 801b10a:	6810      	ldr	r0, [r2, #0]
 801b10c:	6851      	ldr	r1, [r2, #4]
 801b10e:	462b      	mov	r3, r5
 801b110:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 801b114:	c303      	stmia	r3!, {r0, r1}
 801b116:	2100      	movs	r1, #0
 801b118:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801b11c:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801b120:	4628      	mov	r0, r5
 801b122:	910c      	str	r1, [sp, #48]	; 0x30
 801b124:	a90c      	add	r1, sp, #48	; 0x30
 801b126:	79a2      	ldrb	r2, [r4, #6]
 801b128:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801b12c:	f7ff fd01 	bl	801ab32 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801b130:	a90c      	add	r1, sp, #48	; 0x30
 801b132:	79a2      	ldrb	r2, [r4, #6]
 801b134:	4608      	mov	r0, r1
 801b136:	f7ff fcfc 	bl	801ab32 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801b13a:	a817      	add	r0, sp, #92	; 0x5c
 801b13c:	f002 fa94 	bl	801d668 <_ZN8touchgfx12TextProviderC1Ev>
 801b140:	6820      	ldr	r0, [r4, #0]
 801b142:	6803      	ldr	r3, [r0, #0]
 801b144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b146:	4798      	blx	r3
 801b148:	4606      	mov	r6, r0
 801b14a:	6820      	ldr	r0, [r4, #0]
 801b14c:	6803      	ldr	r3, [r0, #0]
 801b14e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b150:	4798      	blx	r3
 801b152:	4633      	mov	r3, r6
 801b154:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 801b156:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 801b158:	9000      	str	r0, [sp, #0]
 801b15a:	a817      	add	r0, sp, #92	; 0x5c
 801b15c:	f002 fadf 	bl	801d71e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b160:	6820      	ldr	r0, [r4, #0]
 801b162:	f894 a004 	ldrb.w	sl, [r4, #4]
 801b166:	6803      	ldr	r3, [r0, #0]
 801b168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b16a:	4798      	blx	r3
 801b16c:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 801b170:	6823      	ldr	r3, [r4, #0]
 801b172:	4607      	mov	r7, r0
 801b174:	4406      	add	r6, r0
 801b176:	a830      	add	r0, sp, #192	; 0xc0
 801b178:	f893 9009 	ldrb.w	r9, [r3, #9]
 801b17c:	f002 fa74 	bl	801d668 <_ZN8touchgfx12TextProviderC1Ev>
 801b180:	7c23      	ldrb	r3, [r4, #16]
 801b182:	b17b      	cbz	r3, 801b1a4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 801b184:	6820      	ldr	r0, [r4, #0]
 801b186:	6803      	ldr	r3, [r0, #0]
 801b188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b18a:	4798      	blx	r3
 801b18c:	9009      	str	r0, [sp, #36]	; 0x24
 801b18e:	6820      	ldr	r0, [r4, #0]
 801b190:	6802      	ldr	r2, [r0, #0]
 801b192:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801b194:	4790      	blx	r2
 801b196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b198:	9000      	str	r0, [sp, #0]
 801b19a:	a830      	add	r0, sp, #192	; 0xc0
 801b19c:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 801b19e:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 801b1a0:	f002 fabd 	bl	801d71e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b1a4:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801b1a8:	a80e      	add	r0, sp, #56	; 0x38
 801b1aa:	7be2      	ldrb	r2, [r4, #15]
 801b1ac:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 801b1b0:	1a8a      	subs	r2, r1, r2
 801b1b2:	7c21      	ldrb	r1, [r4, #16]
 801b1b4:	9103      	str	r1, [sp, #12]
 801b1b6:	b292      	uxth	r2, r2
 801b1b8:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 801b1bc:	9102      	str	r1, [sp, #8]
 801b1be:	6821      	ldr	r1, [r4, #0]
 801b1c0:	9101      	str	r1, [sp, #4]
 801b1c2:	7961      	ldrb	r1, [r4, #5]
 801b1c4:	9100      	str	r1, [sp, #0]
 801b1c6:	a930      	add	r1, sp, #192	; 0xc0
 801b1c8:	f7ff fc34 	bl	801aa34 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 801b1cc:	2e00      	cmp	r6, #0
 801b1ce:	dc5b      	bgt.n	801b288 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 801b1d0:	af17      	add	r7, sp, #92	; 0x5c
 801b1d2:	f04f 0900 	mov.w	r9, #0
 801b1d6:	7c23      	ldrb	r3, [r4, #16]
 801b1d8:	2b00      	cmp	r3, #0
 801b1da:	f000 80b1 	beq.w	801b340 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801b1de:	a80e      	add	r0, sp, #56	; 0x38
 801b1e0:	f7ff fe4d 	bl	801ae7e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801b1e4:	f1ba 0f00 	cmp.w	sl, #0
 801b1e8:	f000 80a5 	beq.w	801b336 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801b1ec:	7c23      	ldrb	r3, [r4, #16]
 801b1ee:	2264      	movs	r2, #100	; 0x64
 801b1f0:	4639      	mov	r1, r7
 801b1f2:	a849      	add	r0, sp, #292	; 0x124
 801b1f4:	9309      	str	r3, [sp, #36]	; 0x24
 801b1f6:	f011 fd64 	bl	802ccc2 <memcpy>
 801b1fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b1fc:	2b00      	cmp	r3, #0
 801b1fe:	f000 80a7 	beq.w	801b350 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 801b202:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 801b206:	7922      	ldrb	r2, [r4, #4]
 801b208:	2a01      	cmp	r2, #1
 801b20a:	f040 808a 	bne.w	801b322 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 801b20e:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
 801b212:	1ac0      	subs	r0, r0, r3
 801b214:	2302      	movs	r3, #2
 801b216:	fb90 f0f3 	sdiv	r0, r0, r3
 801b21a:	b200      	sxth	r0, r0
 801b21c:	7c23      	ldrb	r3, [r4, #16]
 801b21e:	2b00      	cmp	r3, #0
 801b220:	f000 808b 	beq.w	801b33a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801b224:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
 801b228:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
 801b22c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801b230:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801b234:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801b238:	2100      	movs	r1, #0
 801b23a:	4410      	add	r0, r2
 801b23c:	4642      	mov	r2, r8
 801b23e:	b200      	sxth	r0, r0
 801b240:	e9cd 9703 	strd	r9, r7, [sp, #12]
 801b244:	9000      	str	r0, [sp, #0]
 801b246:	4658      	mov	r0, fp
 801b248:	e9cd 5401 	strd	r5, r4, [sp, #4]
 801b24c:	f7ff fca2 	bl	801ab94 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801b250:	2800      	cmp	r0, #0
 801b252:	d163      	bne.n	801b31c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801b254:	b2b2      	uxth	r2, r6
 801b256:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801b25a:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 801b25e:	4413      	add	r3, r2
 801b260:	1a8a      	subs	r2, r1, r2
 801b262:	b21b      	sxth	r3, r3
 801b264:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 801b268:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
 801b26c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801b270:	2a00      	cmp	r2, #0
 801b272:	d153      	bne.n	801b31c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801b274:	6822      	ldr	r2, [r4, #0]
 801b276:	8869      	ldrh	r1, [r5, #2]
 801b278:	7a12      	ldrb	r2, [r2, #8]
 801b27a:	1a9b      	subs	r3, r3, r2
 801b27c:	88ea      	ldrh	r2, [r5, #6]
 801b27e:	440a      	add	r2, r1
 801b280:	b212      	sxth	r2, r2
 801b282:	4293      	cmp	r3, r2
 801b284:	dda7      	ble.n	801b1d6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 801b286:	e049      	b.n	801b31c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801b288:	7c23      	ldrb	r3, [r4, #16]
 801b28a:	444f      	add	r7, r9
 801b28c:	b1c3      	cbz	r3, 801b2c0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 801b28e:	f64f 79ff 	movw	r9, #65535	; 0xffff
 801b292:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801b296:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801b29a:	443b      	add	r3, r7
 801b29c:	4293      	cmp	r3, r2
 801b29e:	da97      	bge.n	801b1d0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 801b2a0:	a80e      	add	r0, sp, #56	; 0x38
 801b2a2:	f7ff fdec 	bl	801ae7e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801b2a6:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 801b2aa:	3b01      	subs	r3, #1
 801b2ac:	b29b      	uxth	r3, r3
 801b2ae:	454b      	cmp	r3, r9
 801b2b0:	9309      	str	r3, [sp, #36]	; 0x24
 801b2b2:	d021      	beq.n	801b2f8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 801b2b4:	7961      	ldrb	r1, [r4, #5]
 801b2b6:	a817      	add	r0, sp, #92	; 0x5c
 801b2b8:	f7ef f836 	bl	800a328 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b2bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b2be:	e7f4      	b.n	801b2aa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 801b2c0:	fa1f f986 	uxth.w	r9, r6
 801b2c4:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801b2c8:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801b2cc:	443b      	add	r3, r7
 801b2ce:	4293      	cmp	r3, r2
 801b2d0:	f6bf af7e 	bge.w	801b1d0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 801b2d4:	a817      	add	r0, sp, #92	; 0x5c
 801b2d6:	f002 fdf3 	bl	801dec0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b2da:	b1f8      	cbz	r0, 801b31c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801b2dc:	280a      	cmp	r0, #10
 801b2de:	d1f1      	bne.n	801b2c4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 801b2e0:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801b2e4:	444b      	add	r3, r9
 801b2e6:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801b2ea:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 801b2ee:	eba3 0309 	sub.w	r3, r3, r9
 801b2f2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801b2f6:	e7e5      	b.n	801b2c4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 801b2f8:	b2b3      	uxth	r3, r6
 801b2fa:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801b2fe:	441a      	add	r2, r3
 801b300:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 801b304:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 801b308:	1ad3      	subs	r3, r2, r3
 801b30a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801b30e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801b312:	b11b      	cbz	r3, 801b31c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801b314:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
 801b318:	2b00      	cmp	r3, #0
 801b31a:	d0ba      	beq.n	801b292 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 801b31c:	b063      	add	sp, #396	; 0x18c
 801b31e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b322:	2a02      	cmp	r2, #2
 801b324:	d105      	bne.n	801b332 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 801b326:	7be2      	ldrb	r2, [r4, #15]
 801b328:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801b32c:	1a80      	subs	r0, r0, r2
 801b32e:	1ac0      	subs	r0, r0, r3
 801b330:	e773      	b.n	801b21a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 801b332:	2000      	movs	r0, #0
 801b334:	e772      	b.n	801b21c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 801b336:	7be0      	ldrb	r0, [r4, #15]
 801b338:	e770      	b.n	801b21c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 801b33a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801b33e:	e773      	b.n	801b228 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 801b340:	f1ba 0f00 	cmp.w	sl, #0
 801b344:	d0f7      	beq.n	801b336 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801b346:	2264      	movs	r2, #100	; 0x64
 801b348:	4639      	mov	r1, r7
 801b34a:	a849      	add	r0, sp, #292	; 0x124
 801b34c:	f011 fcb9 	bl	802ccc2 <memcpy>
 801b350:	2300      	movs	r3, #0
 801b352:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801b356:	6821      	ldr	r1, [r4, #0]
 801b358:	a849      	add	r0, sp, #292	; 0x124
 801b35a:	f7ff fbae 	bl	801aaba <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801b35e:	b203      	sxth	r3, r0
 801b360:	e751      	b.n	801b206 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

0801b362 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801b362:	2b03      	cmp	r3, #3
 801b364:	d818      	bhi.n	801b398 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 801b366:	e8df f003 	tbb	[pc, r3]
 801b36a:	0602      	.short	0x0602
 801b36c:	130d      	.short	0x130d
 801b36e:	f9b0 2000 	ldrsh.w	r2, [r0]
 801b372:	1850      	adds	r0, r2, r1
 801b374:	4770      	bx	lr
 801b376:	8803      	ldrh	r3, [r0, #0]
 801b378:	8880      	ldrh	r0, [r0, #4]
 801b37a:	4418      	add	r0, r3
 801b37c:	b200      	sxth	r0, r0
 801b37e:	1a80      	subs	r0, r0, r2
 801b380:	3801      	subs	r0, #1
 801b382:	4770      	bx	lr
 801b384:	8803      	ldrh	r3, [r0, #0]
 801b386:	8880      	ldrh	r0, [r0, #4]
 801b388:	4418      	add	r0, r3
 801b38a:	b200      	sxth	r0, r0
 801b38c:	1a40      	subs	r0, r0, r1
 801b38e:	e7f7      	b.n	801b380 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801b390:	f9b0 0000 	ldrsh.w	r0, [r0]
 801b394:	4410      	add	r0, r2
 801b396:	4770      	bx	lr
 801b398:	2000      	movs	r0, #0
 801b39a:	4770      	bx	lr

0801b39c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801b39c:	2b03      	cmp	r3, #3
 801b39e:	d817      	bhi.n	801b3d0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 801b3a0:	e8df f003 	tbb	[pc, r3]
 801b3a4:	10090602 	.word	0x10090602
 801b3a8:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801b3ac:	1850      	adds	r0, r2, r1
 801b3ae:	4770      	bx	lr
 801b3b0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801b3b4:	e7fa      	b.n	801b3ac <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 801b3b6:	8843      	ldrh	r3, [r0, #2]
 801b3b8:	88c0      	ldrh	r0, [r0, #6]
 801b3ba:	4418      	add	r0, r3
 801b3bc:	b200      	sxth	r0, r0
 801b3be:	1a80      	subs	r0, r0, r2
 801b3c0:	3801      	subs	r0, #1
 801b3c2:	4770      	bx	lr
 801b3c4:	8843      	ldrh	r3, [r0, #2]
 801b3c6:	88c0      	ldrh	r0, [r0, #6]
 801b3c8:	4418      	add	r0, r3
 801b3ca:	b200      	sxth	r0, r0
 801b3cc:	1a40      	subs	r0, r0, r1
 801b3ce:	e7f7      	b.n	801b3c0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801b3d0:	2000      	movs	r0, #0
 801b3d2:	4770      	bx	lr

0801b3d4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801b3d4:	4b01      	ldr	r3, [pc, #4]	; (801b3dc <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801b3d6:	2200      	movs	r2, #0
 801b3d8:	601a      	str	r2, [r3, #0]
 801b3da:	4770      	bx	lr
 801b3dc:	2400baf8 	.word	0x2400baf8

0801b3e0 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801b3e0:	4603      	mov	r3, r0
 801b3e2:	b1c8      	cbz	r0, 801b418 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801b3e4:	0c02      	lsrs	r2, r0, #16
 801b3e6:	0412      	lsls	r2, r2, #16
 801b3e8:	b9a2      	cbnz	r2, 801b414 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801b3ea:	0403      	lsls	r3, r0, #16
 801b3ec:	2010      	movs	r0, #16
 801b3ee:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801b3f2:	bf04      	itt	eq
 801b3f4:	021b      	lsleq	r3, r3, #8
 801b3f6:	3008      	addeq	r0, #8
 801b3f8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801b3fc:	bf04      	itt	eq
 801b3fe:	011b      	lsleq	r3, r3, #4
 801b400:	3004      	addeq	r0, #4
 801b402:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801b406:	bf04      	itt	eq
 801b408:	009b      	lsleq	r3, r3, #2
 801b40a:	3002      	addeq	r0, #2
 801b40c:	2b00      	cmp	r3, #0
 801b40e:	db04      	blt.n	801b41a <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801b410:	3001      	adds	r0, #1
 801b412:	4770      	bx	lr
 801b414:	2000      	movs	r0, #0
 801b416:	e7ea      	b.n	801b3ee <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801b418:	2020      	movs	r0, #32
 801b41a:	4770      	bx	lr

0801b41c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801b41c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b420:	b087      	sub	sp, #28
 801b422:	460d      	mov	r5, r1
 801b424:	4616      	mov	r6, r2
 801b426:	4698      	mov	r8, r3
 801b428:	4601      	mov	r1, r0
 801b42a:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801b42e:	b120      	cbz	r0, 801b43a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801b430:	b11a      	cbz	r2, 801b43a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801b432:	2d1f      	cmp	r5, #31
 801b434:	d801      	bhi.n	801b43a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801b436:	2b1f      	cmp	r3, #31
 801b438:	d904      	bls.n	801b444 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 801b43a:	2000      	movs	r0, #0
 801b43c:	6038      	str	r0, [r7, #0]
 801b43e:	b007      	add	sp, #28
 801b440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b444:	b97d      	cbnz	r5, 801b466 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 801b446:	b143      	cbz	r3, 801b45a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 801b448:	4602      	mov	r2, r0
 801b44a:	462b      	mov	r3, r5
 801b44c:	4641      	mov	r1, r8
 801b44e:	4630      	mov	r0, r6
 801b450:	e9cd 4700 	strd	r4, r7, [sp]
 801b454:	f7ff ffe2 	bl	801b41c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801b458:	e7f1      	b.n	801b43e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801b45a:	f04f 33ff 	mov.w	r3, #4294967295
 801b45e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801b462:	603b      	str	r3, [r7, #0]
 801b464:	e7eb      	b.n	801b43e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801b466:	fa32 fa05 	lsrs.w	sl, r2, r5
 801b46a:	d106      	bne.n	801b47a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 801b46c:	4346      	muls	r6, r0
 801b46e:	fbb6 f0f4 	udiv	r0, r6, r4
 801b472:	fb04 6610 	mls	r6, r4, r0, r6
 801b476:	603e      	str	r6, [r7, #0]
 801b478:	e7e1      	b.n	801b43e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801b47a:	2201      	movs	r2, #1
 801b47c:	fa00 fb05 	lsl.w	fp, r0, r5
 801b480:	40aa      	lsls	r2, r5
 801b482:	fbbb f9f4 	udiv	r9, fp, r4
 801b486:	3a01      	subs	r2, #1
 801b488:	fb0a f309 	mul.w	r3, sl, r9
 801b48c:	fb04 b919 	mls	r9, r4, r9, fp
 801b490:	4016      	ands	r6, r2
 801b492:	9303      	str	r3, [sp, #12]
 801b494:	4630      	mov	r0, r6
 801b496:	f7ff ffa3 	bl	801b3e0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801b49a:	462b      	mov	r3, r5
 801b49c:	460a      	mov	r2, r1
 801b49e:	4601      	mov	r1, r0
 801b4a0:	4630      	mov	r0, r6
 801b4a2:	e9cd 4700 	strd	r4, r7, [sp]
 801b4a6:	f7ff ffb9 	bl	801b41c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801b4aa:	4606      	mov	r6, r0
 801b4ac:	4648      	mov	r0, r9
 801b4ae:	eb05 0108 	add.w	r1, r5, r8
 801b4b2:	f7ff ff95 	bl	801b3e0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801b4b6:	ab05      	add	r3, sp, #20
 801b4b8:	464a      	mov	r2, r9
 801b4ba:	e9cd 4300 	strd	r4, r3, [sp]
 801b4be:	4603      	mov	r3, r0
 801b4c0:	4650      	mov	r0, sl
 801b4c2:	f7ff ffab 	bl	801b41c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801b4c6:	6839      	ldr	r1, [r7, #0]
 801b4c8:	9a05      	ldr	r2, [sp, #20]
 801b4ca:	9b03      	ldr	r3, [sp, #12]
 801b4cc:	4411      	add	r1, r2
 801b4ce:	fbb1 f2f4 	udiv	r2, r1, r4
 801b4d2:	18d3      	adds	r3, r2, r3
 801b4d4:	fb04 1412 	mls	r4, r4, r2, r1
 801b4d8:	441e      	add	r6, r3
 801b4da:	603c      	str	r4, [r7, #0]
 801b4dc:	4430      	add	r0, r6
 801b4de:	e7ae      	b.n	801b43e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

0801b4e0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801b4e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b4e4:	b085      	sub	sp, #20
 801b4e6:	f1b0 0900 	subs.w	r9, r0, #0
 801b4ea:	461d      	mov	r5, r3
 801b4ec:	4617      	mov	r7, r2
 801b4ee:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801b4f0:	bfbb      	ittet	lt
 801b4f2:	f1c9 0900 	rsblt	r9, r9, #0
 801b4f6:	f04f 36ff 	movlt.w	r6, #4294967295
 801b4fa:	2601      	movge	r6, #1
 801b4fc:	6823      	ldrlt	r3, [r4, #0]
 801b4fe:	bfbc      	itt	lt
 801b500:	425b      	neglt	r3, r3
 801b502:	6023      	strlt	r3, [r4, #0]
 801b504:	2a00      	cmp	r2, #0
 801b506:	da04      	bge.n	801b512 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801b508:	6823      	ldr	r3, [r4, #0]
 801b50a:	4257      	negs	r7, r2
 801b50c:	4276      	negs	r6, r6
 801b50e:	425b      	negs	r3, r3
 801b510:	6023      	str	r3, [r4, #0]
 801b512:	2d00      	cmp	r5, #0
 801b514:	4638      	mov	r0, r7
 801b516:	bfba      	itte	lt
 801b518:	426d      	neglt	r5, r5
 801b51a:	f04f 38ff 	movlt.w	r8, #4294967295
 801b51e:	f04f 0801 	movge.w	r8, #1
 801b522:	f7ff ff5d 	bl	801b3e0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801b526:	ab03      	add	r3, sp, #12
 801b528:	463a      	mov	r2, r7
 801b52a:	e9cd 5300 	strd	r5, r3, [sp]
 801b52e:	4603      	mov	r3, r0
 801b530:	4648      	mov	r0, r9
 801b532:	f7ff ff73 	bl	801b41c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801b536:	6823      	ldr	r3, [r4, #0]
 801b538:	9a03      	ldr	r2, [sp, #12]
 801b53a:	4546      	cmp	r6, r8
 801b53c:	441a      	add	r2, r3
 801b53e:	fb92 f3f5 	sdiv	r3, r2, r5
 801b542:	4418      	add	r0, r3
 801b544:	fb05 2313 	mls	r3, r5, r3, r2
 801b548:	bf18      	it	ne
 801b54a:	4240      	negne	r0, r0
 801b54c:	1c72      	adds	r2, r6, #1
 801b54e:	6023      	str	r3, [r4, #0]
 801b550:	d105      	bne.n	801b55e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801b552:	2b00      	cmp	r3, #0
 801b554:	f1c3 0200 	rsb	r2, r3, #0
 801b558:	db0b      	blt.n	801b572 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801b55a:	6022      	str	r2, [r4, #0]
 801b55c:	e006      	b.n	801b56c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801b55e:	2e01      	cmp	r6, #1
 801b560:	d104      	bne.n	801b56c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801b562:	2b00      	cmp	r3, #0
 801b564:	da02      	bge.n	801b56c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801b566:	442b      	add	r3, r5
 801b568:	3801      	subs	r0, #1
 801b56a:	6023      	str	r3, [r4, #0]
 801b56c:	b005      	add	sp, #20
 801b56e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b572:	3801      	subs	r0, #1
 801b574:	1b52      	subs	r2, r2, r5
 801b576:	e7f0      	b.n	801b55a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

0801b578 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801b578:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801b57c:	4c1c      	ldr	r4, [pc, #112]	; (801b5f0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801b57e:	4605      	mov	r5, r0
 801b580:	6807      	ldr	r7, [r0, #0]
 801b582:	69a3      	ldr	r3, [r4, #24]
 801b584:	b92b      	cbnz	r3, 801b592 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801b586:	6840      	ldr	r0, [r0, #4]
 801b588:	e9c5 7000 	strd	r7, r0, [r5]
 801b58c:	b004      	add	sp, #16
 801b58e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b592:	f04f 0802 	mov.w	r8, #2
 801b596:	68a2      	ldr	r2, [r4, #8]
 801b598:	ae04      	add	r6, sp, #16
 801b59a:	6820      	ldr	r0, [r4, #0]
 801b59c:	fb93 f1f8 	sdiv	r1, r3, r8
 801b5a0:	440a      	add	r2, r1
 801b5a2:	69e1      	ldr	r1, [r4, #28]
 801b5a4:	f846 2d04 	str.w	r2, [r6, #-4]!
 801b5a8:	463a      	mov	r2, r7
 801b5aa:	9600      	str	r6, [sp, #0]
 801b5ac:	f7ff ff98 	bl	801b4e0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801b5b0:	69a3      	ldr	r3, [r4, #24]
 801b5b2:	4607      	mov	r7, r0
 801b5b4:	686a      	ldr	r2, [r5, #4]
 801b5b6:	6a21      	ldr	r1, [r4, #32]
 801b5b8:	9600      	str	r6, [sp, #0]
 801b5ba:	6860      	ldr	r0, [r4, #4]
 801b5bc:	f7ff ff90 	bl	801b4e0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801b5c0:	69a3      	ldr	r3, [r4, #24]
 801b5c2:	6962      	ldr	r2, [r4, #20]
 801b5c4:	4407      	add	r7, r0
 801b5c6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801b5c8:	9600      	str	r6, [sp, #0]
 801b5ca:	68e0      	ldr	r0, [r4, #12]
 801b5cc:	fb93 f8f8 	sdiv	r8, r3, r8
 801b5d0:	4442      	add	r2, r8
 801b5d2:	9203      	str	r2, [sp, #12]
 801b5d4:	682a      	ldr	r2, [r5, #0]
 801b5d6:	f7ff ff83 	bl	801b4e0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801b5da:	4680      	mov	r8, r0
 801b5dc:	9600      	str	r6, [sp, #0]
 801b5de:	69a3      	ldr	r3, [r4, #24]
 801b5e0:	686a      	ldr	r2, [r5, #4]
 801b5e2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801b5e4:	6920      	ldr	r0, [r4, #16]
 801b5e6:	f7ff ff7b 	bl	801b4e0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801b5ea:	4440      	add	r0, r8
 801b5ec:	e7cc      	b.n	801b588 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801b5ee:	bf00      	nop
 801b5f0:	2400bafc 	.word	0x2400bafc

0801b5f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801b5f4:	4b07      	ldr	r3, [pc, #28]	; (801b614 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801b5f6:	781b      	ldrb	r3, [r3, #0]
 801b5f8:	2b01      	cmp	r3, #1
 801b5fa:	d109      	bne.n	801b610 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801b5fc:	f9b1 3000 	ldrsh.w	r3, [r1]
 801b600:	f9b0 2000 	ldrsh.w	r2, [r0]
 801b604:	8003      	strh	r3, [r0, #0]
 801b606:	4b04      	ldr	r3, [pc, #16]	; (801b618 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801b608:	881b      	ldrh	r3, [r3, #0]
 801b60a:	3b01      	subs	r3, #1
 801b60c:	1a9b      	subs	r3, r3, r2
 801b60e:	800b      	strh	r3, [r1, #0]
 801b610:	4770      	bx	lr
 801b612:	bf00      	nop
 801b614:	2400bae8 	.word	0x2400bae8
 801b618:	2400bae4 	.word	0x2400bae4

0801b61c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801b61c:	4b07      	ldr	r3, [pc, #28]	; (801b63c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801b61e:	b510      	push	{r4, lr}
 801b620:	781b      	ldrb	r3, [r3, #0]
 801b622:	2b01      	cmp	r3, #1
 801b624:	d108      	bne.n	801b638 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801b626:	4b06      	ldr	r3, [pc, #24]	; (801b640 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801b628:	880c      	ldrh	r4, [r1, #0]
 801b62a:	881b      	ldrh	r3, [r3, #0]
 801b62c:	f9b0 2000 	ldrsh.w	r2, [r0]
 801b630:	3b01      	subs	r3, #1
 801b632:	1b1b      	subs	r3, r3, r4
 801b634:	8003      	strh	r3, [r0, #0]
 801b636:	800a      	strh	r2, [r1, #0]
 801b638:	bd10      	pop	{r4, pc}
 801b63a:	bf00      	nop
 801b63c:	2400bae8 	.word	0x2400bae8
 801b640:	2400bae4 	.word	0x2400bae4

0801b644 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801b644:	4b0a      	ldr	r3, [pc, #40]	; (801b670 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801b646:	b510      	push	{r4, lr}
 801b648:	781b      	ldrb	r3, [r3, #0]
 801b64a:	2b01      	cmp	r3, #1
 801b64c:	d10e      	bne.n	801b66c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801b64e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801b652:	8843      	ldrh	r3, [r0, #2]
 801b654:	f9b0 4000 	ldrsh.w	r4, [r0]
 801b658:	18ca      	adds	r2, r1, r3
 801b65a:	4b06      	ldr	r3, [pc, #24]	; (801b674 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801b65c:	8044      	strh	r4, [r0, #2]
 801b65e:	881b      	ldrh	r3, [r3, #0]
 801b660:	1a9b      	subs	r3, r3, r2
 801b662:	8003      	strh	r3, [r0, #0]
 801b664:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801b668:	8081      	strh	r1, [r0, #4]
 801b66a:	80c3      	strh	r3, [r0, #6]
 801b66c:	bd10      	pop	{r4, pc}
 801b66e:	bf00      	nop
 801b670:	2400bae8 	.word	0x2400bae8
 801b674:	2400bae4 	.word	0x2400bae4

0801b678 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801b678:	4b08      	ldr	r3, [pc, #32]	; (801b69c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801b67a:	781b      	ldrb	r3, [r3, #0]
 801b67c:	2b01      	cmp	r3, #1
 801b67e:	d10c      	bne.n	801b69a <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801b680:	8803      	ldrh	r3, [r0, #0]
 801b682:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801b686:	8842      	ldrh	r2, [r0, #2]
 801b688:	8002      	strh	r2, [r0, #0]
 801b68a:	185a      	adds	r2, r3, r1
 801b68c:	4b04      	ldr	r3, [pc, #16]	; (801b6a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801b68e:	881b      	ldrh	r3, [r3, #0]
 801b690:	1a9b      	subs	r3, r3, r2
 801b692:	8043      	strh	r3, [r0, #2]
 801b694:	88c3      	ldrh	r3, [r0, #6]
 801b696:	80c1      	strh	r1, [r0, #6]
 801b698:	8083      	strh	r3, [r0, #4]
 801b69a:	4770      	bx	lr
 801b69c:	2400bae8 	.word	0x2400bae8
 801b6a0:	2400bae4 	.word	0x2400bae4

0801b6a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801b6a4:	4b07      	ldr	r3, [pc, #28]	; (801b6c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801b6a6:	b510      	push	{r4, lr}
 801b6a8:	781b      	ldrb	r3, [r3, #0]
 801b6aa:	2b01      	cmp	r3, #1
 801b6ac:	d108      	bne.n	801b6c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801b6ae:	f9b1 3000 	ldrsh.w	r3, [r1]
 801b6b2:	f9b0 4000 	ldrsh.w	r4, [r0]
 801b6b6:	8003      	strh	r3, [r0, #0]
 801b6b8:	8893      	ldrh	r3, [r2, #4]
 801b6ba:	3b01      	subs	r3, #1
 801b6bc:	1b1b      	subs	r3, r3, r4
 801b6be:	800b      	strh	r3, [r1, #0]
 801b6c0:	bd10      	pop	{r4, pc}
 801b6c2:	bf00      	nop
 801b6c4:	2400bae8 	.word	0x2400bae8

0801b6c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801b6c8:	4b0a      	ldr	r3, [pc, #40]	; (801b6f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801b6ca:	460a      	mov	r2, r1
 801b6cc:	b510      	push	{r4, lr}
 801b6ce:	781b      	ldrb	r3, [r3, #0]
 801b6d0:	2b01      	cmp	r3, #1
 801b6d2:	d10d      	bne.n	801b6f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801b6d4:	8881      	ldrh	r1, [r0, #4]
 801b6d6:	8803      	ldrh	r3, [r0, #0]
 801b6d8:	440b      	add	r3, r1
 801b6da:	4601      	mov	r1, r0
 801b6dc:	3b01      	subs	r3, #1
 801b6de:	f821 3b02 	strh.w	r3, [r1], #2
 801b6e2:	f7ff ffdf 	bl	801b6a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801b6e6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801b6ea:	88c2      	ldrh	r2, [r0, #6]
 801b6ec:	80c3      	strh	r3, [r0, #6]
 801b6ee:	8082      	strh	r2, [r0, #4]
 801b6f0:	bd10      	pop	{r4, pc}
 801b6f2:	bf00      	nop
 801b6f4:	2400bae8 	.word	0x2400bae8

0801b6f8 <_ZN8touchgfx11Application13requestRedrawEv>:
 801b6f8:	4b06      	ldr	r3, [pc, #24]	; (801b714 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801b6fa:	2100      	movs	r1, #0
 801b6fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b700:	4b05      	ldr	r3, [pc, #20]	; (801b718 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801b702:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 801b706:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b70a:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
 801b70e:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
 801b712:	4770      	bx	lr
 801b714:	2400bae4 	.word	0x2400bae4
 801b718:	2400bae6 	.word	0x2400bae6

0801b71c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801b71c:	4b03      	ldr	r3, [pc, #12]	; (801b72c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801b71e:	6818      	ldr	r0, [r3, #0]
 801b720:	b110      	cbz	r0, 801b728 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801b722:	6803      	ldr	r3, [r0, #0]
 801b724:	699b      	ldr	r3, [r3, #24]
 801b726:	4718      	bx	r3
 801b728:	4770      	bx	lr
 801b72a:	bf00      	nop
 801b72c:	2400bb2c 	.word	0x2400bb2c

0801b730 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801b730:	4770      	bx	lr
	...

0801b734 <_ZN8touchgfx11Application4drawEv>:
 801b734:	4b09      	ldr	r3, [pc, #36]	; (801b75c <_ZN8touchgfx11Application4drawEv+0x28>)
 801b736:	b507      	push	{r0, r1, r2, lr}
 801b738:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b73c:	2100      	movs	r1, #0
 801b73e:	4b08      	ldr	r3, [pc, #32]	; (801b760 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801b740:	9100      	str	r1, [sp, #0]
 801b742:	4669      	mov	r1, sp
 801b744:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b748:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b74c:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b750:	6803      	ldr	r3, [r0, #0]
 801b752:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b754:	4798      	blx	r3
 801b756:	b003      	add	sp, #12
 801b758:	f85d fb04 	ldr.w	pc, [sp], #4
 801b75c:	2400bae4 	.word	0x2400bae4
 801b760:	2400bae6 	.word	0x2400bae6

0801b764 <_ZN8touchgfx11Application10invalidateEv>:
 801b764:	4b09      	ldr	r3, [pc, #36]	; (801b78c <_ZN8touchgfx11Application10invalidateEv+0x28>)
 801b766:	b082      	sub	sp, #8
 801b768:	2100      	movs	r1, #0
 801b76a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b76e:	4b08      	ldr	r3, [pc, #32]	; (801b790 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 801b770:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b774:	aa02      	add	r2, sp, #8
 801b776:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b77a:	9100      	str	r1, [sp, #0]
 801b77c:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b780:	6803      	ldr	r3, [r0, #0]
 801b782:	e912 0006 	ldmdb	r2, {r1, r2}
 801b786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b788:	b002      	add	sp, #8
 801b78a:	4718      	bx	r3
 801b78c:	2400bae4 	.word	0x2400bae4
 801b790:	2400bae6 	.word	0x2400bae6

0801b794 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801b794:	4b03      	ldr	r3, [pc, #12]	; (801b7a4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801b796:	6818      	ldr	r0, [r3, #0]
 801b798:	b110      	cbz	r0, 801b7a0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801b79a:	6803      	ldr	r3, [r0, #0]
 801b79c:	69db      	ldr	r3, [r3, #28]
 801b79e:	4718      	bx	r3
 801b7a0:	4770      	bx	lr
 801b7a2:	bf00      	nop
 801b7a4:	2400bb2c 	.word	0x2400bb2c

0801b7a8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801b7a8:	4b03      	ldr	r3, [pc, #12]	; (801b7b8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801b7aa:	6818      	ldr	r0, [r3, #0]
 801b7ac:	b110      	cbz	r0, 801b7b4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801b7ae:	6803      	ldr	r3, [r0, #0]
 801b7b0:	6a1b      	ldr	r3, [r3, #32]
 801b7b2:	4718      	bx	r3
 801b7b4:	4770      	bx	lr
 801b7b6:	bf00      	nop
 801b7b8:	2400bb2c 	.word	0x2400bb2c

0801b7bc <_ZN8touchgfx11Application16clearCachedAreasEv>:
 801b7bc:	2300      	movs	r3, #0
 801b7be:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
 801b7c2:	4770      	bx	lr

0801b7c4 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801b7c4:	4b03      	ldr	r3, [pc, #12]	; (801b7d4 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801b7c6:	6818      	ldr	r0, [r3, #0]
 801b7c8:	b110      	cbz	r0, 801b7d0 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801b7ca:	6803      	ldr	r3, [r0, #0]
 801b7cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b7ce:	4718      	bx	r3
 801b7d0:	4770      	bx	lr
 801b7d2:	bf00      	nop
 801b7d4:	2400bb2c 	.word	0x2400bb2c

0801b7d8 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801b7d8:	b510      	push	{r4, lr}
 801b7da:	f9b1 4000 	ldrsh.w	r4, [r1]
 801b7de:	888a      	ldrh	r2, [r1, #4]
 801b7e0:	f9b0 3000 	ldrsh.w	r3, [r0]
 801b7e4:	4422      	add	r2, r4
 801b7e6:	b212      	sxth	r2, r2
 801b7e8:	4293      	cmp	r3, r2
 801b7ea:	da15      	bge.n	801b818 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801b7ec:	8882      	ldrh	r2, [r0, #4]
 801b7ee:	4413      	add	r3, r2
 801b7f0:	b21b      	sxth	r3, r3
 801b7f2:	429c      	cmp	r4, r3
 801b7f4:	da10      	bge.n	801b818 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801b7f6:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801b7fa:	88c9      	ldrh	r1, [r1, #6]
 801b7fc:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801b800:	4419      	add	r1, r3
 801b802:	b209      	sxth	r1, r1
 801b804:	428a      	cmp	r2, r1
 801b806:	da07      	bge.n	801b818 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801b808:	88c0      	ldrh	r0, [r0, #6]
 801b80a:	4410      	add	r0, r2
 801b80c:	b200      	sxth	r0, r0
 801b80e:	4283      	cmp	r3, r0
 801b810:	bfac      	ite	ge
 801b812:	2000      	movge	r0, #0
 801b814:	2001      	movlt	r0, #1
 801b816:	bd10      	pop	{r4, pc}
 801b818:	2000      	movs	r0, #0
 801b81a:	e7fc      	b.n	801b816 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801b81c <_ZN8touchgfx4Rect10restrictToEss>:
 801b81c:	f9b0 3000 	ldrsh.w	r3, [r0]
 801b820:	2b00      	cmp	r3, #0
 801b822:	b510      	push	{r4, lr}
 801b824:	da04      	bge.n	801b830 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 801b826:	8884      	ldrh	r4, [r0, #4]
 801b828:	4423      	add	r3, r4
 801b82a:	8083      	strh	r3, [r0, #4]
 801b82c:	2300      	movs	r3, #0
 801b82e:	8003      	strh	r3, [r0, #0]
 801b830:	f9b0 4000 	ldrsh.w	r4, [r0]
 801b834:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801b838:	1b09      	subs	r1, r1, r4
 801b83a:	428b      	cmp	r3, r1
 801b83c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801b840:	bfc8      	it	gt
 801b842:	8081      	strhgt	r1, [r0, #4]
 801b844:	2b00      	cmp	r3, #0
 801b846:	da04      	bge.n	801b852 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 801b848:	88c1      	ldrh	r1, [r0, #6]
 801b84a:	440b      	add	r3, r1
 801b84c:	80c3      	strh	r3, [r0, #6]
 801b84e:	2300      	movs	r3, #0
 801b850:	8043      	strh	r3, [r0, #2]
 801b852:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801b856:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801b85a:	1a52      	subs	r2, r2, r1
 801b85c:	4293      	cmp	r3, r2
 801b85e:	bfc8      	it	gt
 801b860:	80c2      	strhgt	r2, [r0, #6]
 801b862:	bd10      	pop	{r4, pc}

0801b864 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801b864:	4b10      	ldr	r3, [pc, #64]	; (801b8a8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801b866:	b510      	push	{r4, lr}
 801b868:	460c      	mov	r4, r1
 801b86a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b86e:	4b0f      	ldr	r3, [pc, #60]	; (801b8ac <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 801b870:	4620      	mov	r0, r4
 801b872:	f9b3 1000 	ldrsh.w	r1, [r3]
 801b876:	f7ff ffd1 	bl	801b81c <_ZN8touchgfx4Rect10restrictToEss>
 801b87a:	4b0d      	ldr	r3, [pc, #52]	; (801b8b0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 801b87c:	6818      	ldr	r0, [r3, #0]
 801b87e:	b190      	cbz	r0, 801b8a6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 801b880:	6803      	ldr	r3, [r0, #0]
 801b882:	4621      	mov	r1, r4
 801b884:	689b      	ldr	r3, [r3, #8]
 801b886:	4798      	blx	r3
 801b888:	4b0a      	ldr	r3, [pc, #40]	; (801b8b4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801b88a:	6818      	ldr	r0, [r3, #0]
 801b88c:	b118      	cbz	r0, 801b896 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801b88e:	6803      	ldr	r3, [r0, #0]
 801b890:	4621      	mov	r1, r4
 801b892:	689b      	ldr	r3, [r3, #8]
 801b894:	4798      	blx	r3
 801b896:	4b08      	ldr	r3, [pc, #32]	; (801b8b8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 801b898:	4621      	mov	r1, r4
 801b89a:	6818      	ldr	r0, [r3, #0]
 801b89c:	6803      	ldr	r3, [r0, #0]
 801b89e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b8a2:	69db      	ldr	r3, [r3, #28]
 801b8a4:	4718      	bx	r3
 801b8a6:	bd10      	pop	{r4, pc}
 801b8a8:	2400bae6 	.word	0x2400bae6
 801b8ac:	2400bae4 	.word	0x2400bae4
 801b8b0:	2400bb2c 	.word	0x2400bb2c
 801b8b4:	2400bb28 	.word	0x2400bb28
 801b8b8:	2400baf0 	.word	0x2400baf0

0801b8bc <_ZNK8touchgfx4Rect8includesERKS0_>:
 801b8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b8be:	4606      	mov	r6, r0
 801b8c0:	4608      	mov	r0, r1
 801b8c2:	460f      	mov	r7, r1
 801b8c4:	f7fc fb1f 	bl	8017f06 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b8c8:	b9e8      	cbnz	r0, 801b906 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801b8ca:	f9b7 5000 	ldrsh.w	r5, [r7]
 801b8ce:	f9b6 4000 	ldrsh.w	r4, [r6]
 801b8d2:	42a5      	cmp	r5, r4
 801b8d4:	db17      	blt.n	801b906 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801b8d6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801b8da:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801b8de:	429a      	cmp	r2, r3
 801b8e0:	db11      	blt.n	801b906 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801b8e2:	88b9      	ldrh	r1, [r7, #4]
 801b8e4:	440d      	add	r5, r1
 801b8e6:	88b1      	ldrh	r1, [r6, #4]
 801b8e8:	440c      	add	r4, r1
 801b8ea:	b22d      	sxth	r5, r5
 801b8ec:	b224      	sxth	r4, r4
 801b8ee:	42a5      	cmp	r5, r4
 801b8f0:	dc09      	bgt.n	801b906 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801b8f2:	88f8      	ldrh	r0, [r7, #6]
 801b8f4:	4410      	add	r0, r2
 801b8f6:	88f2      	ldrh	r2, [r6, #6]
 801b8f8:	4413      	add	r3, r2
 801b8fa:	b200      	sxth	r0, r0
 801b8fc:	b21b      	sxth	r3, r3
 801b8fe:	4298      	cmp	r0, r3
 801b900:	bfcc      	ite	gt
 801b902:	2000      	movgt	r0, #0
 801b904:	2001      	movle	r0, #1
 801b906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801b908 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801b908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b90a:	4604      	mov	r4, r0
 801b90c:	4608      	mov	r0, r1
 801b90e:	460d      	mov	r5, r1
 801b910:	f7fc faf9 	bl	8017f06 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b914:	b978      	cbnz	r0, 801b936 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801b916:	4620      	mov	r0, r4
 801b918:	f7fc faf5 	bl	8017f06 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b91c:	f9b5 6000 	ldrsh.w	r6, [r5]
 801b920:	b150      	cbz	r0, 801b938 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801b922:	8026      	strh	r6, [r4, #0]
 801b924:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801b928:	8063      	strh	r3, [r4, #2]
 801b92a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801b92e:	80a3      	strh	r3, [r4, #4]
 801b930:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801b934:	80e3      	strh	r3, [r4, #6]
 801b936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b938:	f9b4 1000 	ldrsh.w	r1, [r4]
 801b93c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801b940:	42b1      	cmp	r1, r6
 801b942:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801b946:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801b94a:	460f      	mov	r7, r1
 801b94c:	88ed      	ldrh	r5, [r5, #6]
 801b94e:	bfa8      	it	ge
 801b950:	4637      	movge	r7, r6
 801b952:	4293      	cmp	r3, r2
 801b954:	4618      	mov	r0, r3
 801b956:	4466      	add	r6, ip
 801b958:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801b95c:	bfa8      	it	ge
 801b95e:	4610      	movge	r0, r2
 801b960:	442a      	add	r2, r5
 801b962:	88e5      	ldrh	r5, [r4, #6]
 801b964:	4461      	add	r1, ip
 801b966:	b236      	sxth	r6, r6
 801b968:	8027      	strh	r7, [r4, #0]
 801b96a:	442b      	add	r3, r5
 801b96c:	b209      	sxth	r1, r1
 801b96e:	b212      	sxth	r2, r2
 801b970:	8060      	strh	r0, [r4, #2]
 801b972:	b21b      	sxth	r3, r3
 801b974:	428e      	cmp	r6, r1
 801b976:	bfac      	ite	ge
 801b978:	ebc7 0106 	rsbge	r1, r7, r6
 801b97c:	ebc7 0101 	rsblt	r1, r7, r1
 801b980:	429a      	cmp	r2, r3
 801b982:	bfac      	ite	ge
 801b984:	ebc0 0202 	rsbge	r2, r0, r2
 801b988:	ebc0 0203 	rsblt	r2, r0, r3
 801b98c:	80a1      	strh	r1, [r4, #4]
 801b98e:	80e2      	strh	r2, [r4, #6]
 801b990:	e7d1      	b.n	801b936 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801b994 <_ZN8touchgfx11Application11getInstanceEv>:
 801b994:	4b01      	ldr	r3, [pc, #4]	; (801b99c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801b996:	6818      	ldr	r0, [r3, #0]
 801b998:	4770      	bx	lr
 801b99a:	bf00      	nop
 801b99c:	2400bb3c 	.word	0x2400bb3c

0801b9a0 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>:
 801b9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b9a2:	4b10      	ldr	r3, [pc, #64]	; (801b9e4 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x44>)
 801b9a4:	4605      	mov	r5, r0
 801b9a6:	781b      	ldrb	r3, [r3, #0]
 801b9a8:	b1d3      	cbz	r3, 801b9e0 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x40>
 801b9aa:	4b0f      	ldr	r3, [pc, #60]	; (801b9e8 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x48>)
 801b9ac:	f100 06ee 	add.w	r6, r0, #238	; 0xee
 801b9b0:	4f0e      	ldr	r7, [pc, #56]	; (801b9ec <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x4c>)
 801b9b2:	881c      	ldrh	r4, [r3, #0]
 801b9b4:	f8b5 312e 	ldrh.w	r3, [r5, #302]	; 0x12e
 801b9b8:	42a3      	cmp	r3, r4
 801b9ba:	d90e      	bls.n	801b9da <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x3a>
 801b9bc:	683b      	ldr	r3, [r7, #0]
 801b9be:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 801b9c2:	b10a      	cbz	r2, 801b9c8 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x28>
 801b9c4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801b9c6:	b900      	cbnz	r0, 801b9ca <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x2a>
 801b9c8:	6898      	ldr	r0, [r3, #8]
 801b9ca:	6803      	ldr	r3, [r0, #0]
 801b9cc:	eb06 01c4 	add.w	r1, r6, r4, lsl #3
 801b9d0:	3401      	adds	r4, #1
 801b9d2:	69db      	ldr	r3, [r3, #28]
 801b9d4:	4798      	blx	r3
 801b9d6:	b2a4      	uxth	r4, r4
 801b9d8:	e7ec      	b.n	801b9b4 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x14>
 801b9da:	2300      	movs	r3, #0
 801b9dc:	f8a5 312e 	strh.w	r3, [r5, #302]	; 0x12e
 801b9e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b9e2:	bf00      	nop
 801b9e4:	2400baee 	.word	0x2400baee
 801b9e8:	24000056 	.word	0x24000056
 801b9ec:	2400baf0 	.word	0x2400baf0

0801b9f0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 801b9f0:	2300      	movs	r3, #0
 801b9f2:	b510      	push	{r4, lr}
 801b9f4:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 801b9f8:	4604      	mov	r4, r0
 801b9fa:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 801b9fe:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 801ba02:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 801ba06:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 801ba0a:	429a      	cmp	r2, r3
 801ba0c:	d90e      	bls.n	801ba2c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 801ba0e:	18e2      	adds	r2, r4, r3
 801ba10:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 801ba14:	b122      	cbz	r2, 801ba20 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 801ba16:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801ba1a:	6803      	ldr	r3, [r0, #0]
 801ba1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ba1e:	4798      	blx	r3
 801ba20:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 801ba24:	3301      	adds	r3, #1
 801ba26:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 801ba2a:	e7ea      	b.n	801ba02 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 801ba2c:	bd10      	pop	{r4, pc}

0801ba2e <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>:
 801ba2e:	b530      	push	{r4, r5, lr}
 801ba30:	2200      	movs	r2, #0
 801ba32:	f8b0 5080 	ldrh.w	r5, [r0, #128]	; 0x80
 801ba36:	b293      	uxth	r3, r2
 801ba38:	429d      	cmp	r5, r3
 801ba3a:	d90e      	bls.n	801ba5a <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 801ba3c:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 801ba40:	428b      	cmp	r3, r1
 801ba42:	d10b      	bne.n	801ba5c <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 801ba44:	1884      	adds	r4, r0, r2
 801ba46:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
 801ba4a:	b13b      	cbz	r3, 801ba5c <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 801ba4c:	3b01      	subs	r3, #1
 801ba4e:	b2db      	uxtb	r3, r3
 801ba50:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
 801ba54:	b90b      	cbnz	r3, 801ba5a <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 801ba56:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801ba5a:	bd30      	pop	{r4, r5, pc}
 801ba5c:	3201      	adds	r2, #1
 801ba5e:	e7ea      	b.n	801ba36 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x8>

0801ba60 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 801ba60:	2300      	movs	r3, #0
 801ba62:	f100 0284 	add.w	r2, r0, #132	; 0x84
 801ba66:	30a4      	adds	r0, #164	; 0xa4
 801ba68:	f820 3c24 	strh.w	r3, [r0, #-36]
 801ba6c:	f802 3b01 	strb.w	r3, [r2], #1
 801ba70:	4282      	cmp	r2, r0
 801ba72:	d1fb      	bne.n	801ba6c <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 801ba74:	4770      	bx	lr
	...

0801ba78 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801ba78:	b570      	push	{r4, r5, r6, lr}
 801ba7a:	4c0b      	ldr	r4, [pc, #44]	; (801baa8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 801ba7c:	4605      	mov	r5, r0
 801ba7e:	460e      	mov	r6, r1
 801ba80:	6820      	ldr	r0, [r4, #0]
 801ba82:	b110      	cbz	r0, 801ba8a <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 801ba84:	6803      	ldr	r3, [r0, #0]
 801ba86:	695b      	ldr	r3, [r3, #20]
 801ba88:	4798      	blx	r3
 801ba8a:	1d28      	adds	r0, r5, #4
 801ba8c:	f7ff ffe8 	bl	801ba60 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801ba90:	6026      	str	r6, [r4, #0]
 801ba92:	6833      	ldr	r3, [r6, #0]
 801ba94:	4630      	mov	r0, r6
 801ba96:	68db      	ldr	r3, [r3, #12]
 801ba98:	4798      	blx	r3
 801ba9a:	682b      	ldr	r3, [r5, #0]
 801ba9c:	4628      	mov	r0, r5
 801ba9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801baa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801baa4:	4718      	bx	r3
 801baa6:	bf00      	nop
 801baa8:	2400bb2c 	.word	0x2400bb2c

0801baac <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 801baac:	2300      	movs	r3, #0
 801baae:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
 801bab2:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
 801bab6:	461a      	mov	r2, r3
 801bab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801baba:	461c      	mov	r4, r3
 801babc:	461d      	mov	r5, r3
 801babe:	459c      	cmp	ip, r3
 801bac0:	dd1a      	ble.n	801baf8 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 801bac2:	18c6      	adds	r6, r0, r3
 801bac4:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
 801bac8:	b16e      	cbz	r6, 801bae6 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 801baca:	429a      	cmp	r2, r3
 801bacc:	d008      	beq.n	801bae0 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 801bace:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 801bad2:	fa1f fe82 	uxth.w	lr, r2
 801bad6:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 801bada:	1887      	adds	r7, r0, r2
 801badc:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
 801bae0:	3201      	adds	r2, #1
 801bae2:	3301      	adds	r3, #1
 801bae4:	e7eb      	b.n	801babe <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 801bae6:	4299      	cmp	r1, r3
 801bae8:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
 801baec:	bfa8      	it	ge
 801baee:	3501      	addge	r5, #1
 801baf0:	429e      	cmp	r6, r3
 801baf2:	bfc8      	it	gt
 801baf4:	3401      	addgt	r4, #1
 801baf6:	e7f4      	b.n	801bae2 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 801baf8:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 801bafc:	1b49      	subs	r1, r1, r5
 801bafe:	1b1b      	subs	r3, r3, r4
 801bb00:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 801bb04:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 801bb08:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 801bb0c:	4293      	cmp	r3, r2
 801bb0e:	dd03      	ble.n	801bb18 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 801bb10:	3b01      	subs	r3, #1
 801bb12:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 801bb16:	e7f7      	b.n	801bb08 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 801bb18:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801bb1c <_ZN8touchgfx11Application15handleTickEventEv>:
 801bb1c:	b570      	push	{r4, r5, r6, lr}
 801bb1e:	4d16      	ldr	r5, [pc, #88]	; (801bb78 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 801bb20:	4604      	mov	r4, r0
 801bb22:	6828      	ldr	r0, [r5, #0]
 801bb24:	b140      	cbz	r0, 801bb38 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801bb26:	7a03      	ldrb	r3, [r0, #8]
 801bb28:	b933      	cbnz	r3, 801bb38 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801bb2a:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 801bb2e:	6803      	ldr	r3, [r0, #0]
 801bb30:	689b      	ldr	r3, [r3, #8]
 801bb32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bb36:	4718      	bx	r3
 801bb38:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 801bb3c:	4e0f      	ldr	r6, [pc, #60]	; (801bb7c <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 801bb3e:	b973      	cbnz	r3, 801bb5e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801bb40:	b168      	cbz	r0, 801bb5e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801bb42:	7a03      	ldrb	r3, [r0, #8]
 801bb44:	b15b      	cbz	r3, 801bb5e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801bb46:	6830      	ldr	r0, [r6, #0]
 801bb48:	b110      	cbz	r0, 801bb50 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801bb4a:	6803      	ldr	r3, [r0, #0]
 801bb4c:	691b      	ldr	r3, [r3, #16]
 801bb4e:	4798      	blx	r3
 801bb50:	6828      	ldr	r0, [r5, #0]
 801bb52:	6803      	ldr	r3, [r0, #0]
 801bb54:	68db      	ldr	r3, [r3, #12]
 801bb56:	4798      	blx	r3
 801bb58:	2301      	movs	r3, #1
 801bb5a:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 801bb5e:	3404      	adds	r4, #4
 801bb60:	4620      	mov	r0, r4
 801bb62:	f7ff ff45 	bl	801b9f0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 801bb66:	4620      	mov	r0, r4
 801bb68:	f7ff ffa0 	bl	801baac <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 801bb6c:	6830      	ldr	r0, [r6, #0]
 801bb6e:	b110      	cbz	r0, 801bb76 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 801bb70:	6803      	ldr	r3, [r0, #0]
 801bb72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bb74:	e7dd      	b.n	801bb32 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801bb76:	bd70      	pop	{r4, r5, r6, pc}
 801bb78:	2400bb30 	.word	0x2400bb30
 801bb7c:	2400bb2c 	.word	0x2400bb2c

0801bb80 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>:
 801bb80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bb82:	2300      	movs	r3, #0
 801bb84:	4604      	mov	r4, r0
 801bb86:	460d      	mov	r5, r1
 801bb88:	f8b0 1080 	ldrh.w	r1, [r0, #128]	; 0x80
 801bb8c:	4618      	mov	r0, r3
 801bb8e:	b29a      	uxth	r2, r3
 801bb90:	4291      	cmp	r1, r2
 801bb92:	d912      	bls.n	801bbba <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x3a>
 801bb94:	f854 7023 	ldr.w	r7, [r4, r3, lsl #2]
 801bb98:	18e6      	adds	r6, r4, r3
 801bb9a:	42af      	cmp	r7, r5
 801bb9c:	f896 2084 	ldrb.w	r2, [r6, #132]	; 0x84
 801bba0:	d105      	bne.n	801bbae <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2e>
 801bba2:	2aff      	cmp	r2, #255	; 0xff
 801bba4:	d002      	beq.n	801bbac <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 801bba6:	3201      	adds	r2, #1
 801bba8:	f886 2084 	strb.w	r2, [r6, #132]	; 0x84
 801bbac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bbae:	2a00      	cmp	r2, #0
 801bbb0:	f103 0301 	add.w	r3, r3, #1
 801bbb4:	bf08      	it	eq
 801bbb6:	2001      	moveq	r0, #1
 801bbb8:	e7e9      	b.n	801bb8e <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0xe>
 801bbba:	b120      	cbz	r0, 801bbc6 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 801bbbc:	2920      	cmp	r1, #32
 801bbbe:	d102      	bne.n	801bbc6 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 801bbc0:	4620      	mov	r0, r4
 801bbc2:	f7ff ff73 	bl	801baac <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 801bbc6:	f8b4 3080 	ldrh.w	r3, [r4, #128]	; 0x80
 801bbca:	2b1f      	cmp	r3, #31
 801bbcc:	d8ee      	bhi.n	801bbac <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 801bbce:	18e2      	adds	r2, r4, r3
 801bbd0:	2101      	movs	r1, #1
 801bbd2:	f882 1084 	strb.w	r1, [r2, #132]	; 0x84
 801bbd6:	185a      	adds	r2, r3, r1
 801bbd8:	f8a4 2080 	strh.w	r2, [r4, #128]	; 0x80
 801bbdc:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801bbe0:	e7e4      	b.n	801bbac <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>

0801bbe2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801bbe2:	4603      	mov	r3, r0
 801bbe4:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801bbe8:	2200      	movs	r2, #0
 801bbea:	801a      	strh	r2, [r3, #0]
 801bbec:	3308      	adds	r3, #8
 801bbee:	f823 2c06 	strh.w	r2, [r3, #-6]
 801bbf2:	f823 2c04 	strh.w	r2, [r3, #-4]
 801bbf6:	f823 2c02 	strh.w	r2, [r3, #-2]
 801bbfa:	428b      	cmp	r3, r1
 801bbfc:	d1f5      	bne.n	801bbea <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801bbfe:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801bc02:	4770      	bx	lr

0801bc04 <_ZN8touchgfx11ApplicationC1Ev>:
 801bc04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc06:	4b1d      	ldr	r3, [pc, #116]	; (801bc7c <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801bc08:	4606      	mov	r6, r0
 801bc0a:	4604      	mov	r4, r0
 801bc0c:	2500      	movs	r5, #0
 801bc0e:	f846 3b04 	str.w	r3, [r6], #4
 801bc12:	22a8      	movs	r2, #168	; 0xa8
 801bc14:	2100      	movs	r1, #0
 801bc16:	4630      	mov	r0, r6
 801bc18:	f010 ff2d 	bl	802ca76 <memset>
 801bc1c:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
 801bc20:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 801bc24:	4f16      	ldr	r7, [pc, #88]	; (801bc80 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801bc26:	f7ff ffdc 	bl	801bbe2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801bc2a:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 801bc2e:	f7ff ffd8 	bl	801bbe2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801bc32:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801bc36:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801bc3a:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
 801bc3e:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
 801bc42:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 801bc46:	490f      	ldr	r1, [pc, #60]	; (801bc84 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801bc48:	480f      	ldr	r0, [pc, #60]	; (801bc88 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801bc4a:	f010 fbd7 	bl	802c3fc <CRC_Lock>
 801bc4e:	4b0f      	ldr	r3, [pc, #60]	; (801bc8c <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 801bc50:	b158      	cbz	r0, 801bc6a <_ZN8touchgfx11ApplicationC1Ev+0x66>
 801bc52:	801d      	strh	r5, [r3, #0]
 801bc54:	2300      	movs	r3, #0
 801bc56:	4a0e      	ldr	r2, [pc, #56]	; (801bc90 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 801bc58:	4630      	mov	r0, r6
 801bc5a:	6013      	str	r3, [r2, #0]
 801bc5c:	4a0d      	ldr	r2, [pc, #52]	; (801bc94 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 801bc5e:	603b      	str	r3, [r7, #0]
 801bc60:	6013      	str	r3, [r2, #0]
 801bc62:	f7ff fefd 	bl	801ba60 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801bc66:	4620      	mov	r0, r4
 801bc68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bc6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801bc6e:	2002      	movs	r0, #2
 801bc70:	801a      	strh	r2, [r3, #0]
 801bc72:	6038      	str	r0, [r7, #0]
 801bc74:	f001 fb1e 	bl	801d2b4 <_ZN8touchgfx6Screen4drawEv>
 801bc78:	e7ec      	b.n	801bc54 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 801bc7a:	bf00      	nop
 801bc7c:	0802fa7c 	.word	0x0802fa7c
 801bc80:	2400bb2c 	.word	0x2400bb2c
 801bc84:	b5e8b5cd 	.word	0xb5e8b5cd
 801bc88:	f407a5c2 	.word	0xf407a5c2
 801bc8c:	24000056 	.word	0x24000056
 801bc90:	2400bb3c 	.word	0x2400bb3c
 801bc94:	2400bb30 	.word	0x2400bb30

0801bc98 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801bc98:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 801bc9c:	3b01      	subs	r3, #1
 801bc9e:	b29b      	uxth	r3, r3
 801bca0:	428b      	cmp	r3, r1
 801bca2:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801bca6:	b510      	push	{r4, lr}
 801bca8:	d908      	bls.n	801bcbc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801bcaa:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801bcae:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801bcb2:	681a      	ldr	r2, [r3, #0]
 801bcb4:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801bcb8:	685a      	ldr	r2, [r3, #4]
 801bcba:	6062      	str	r2, [r4, #4]
 801bcbc:	bd10      	pop	{r4, pc}
	...

0801bcc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801bcc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bcc4:	b08f      	sub	sp, #60	; 0x3c
 801bcc6:	4b8f      	ldr	r3, [pc, #572]	; (801bf04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 801bcc8:	4683      	mov	fp, r0
 801bcca:	ac0a      	add	r4, sp, #40	; 0x28
 801bccc:	e884 0006 	stmia.w	r4, {r1, r2}
 801bcd0:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bcd4:	4620      	mov	r0, r4
 801bcd6:	4b8c      	ldr	r3, [pc, #560]	; (801bf08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 801bcd8:	f9b3 1000 	ldrsh.w	r1, [r3]
 801bcdc:	f7ff fd9e 	bl	801b81c <_ZN8touchgfx4Rect10restrictToEss>
 801bce0:	4620      	mov	r0, r4
 801bce2:	f7fc f910 	bl	8017f06 <_ZNK8touchgfx4Rect7isEmptyEv>
 801bce6:	2800      	cmp	r0, #0
 801bce8:	d16a      	bne.n	801bdc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801bcea:	9403      	str	r4, [sp, #12]
 801bcec:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 801bcf0:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 801bcf4:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 801bcf8:	9301      	str	r3, [sp, #4]
 801bcfa:	35a4      	adds	r5, #164	; 0xa4
 801bcfc:	b15c      	cbz	r4, 801bd16 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801bcfe:	4629      	mov	r1, r5
 801bd00:	9803      	ldr	r0, [sp, #12]
 801bd02:	f7ff fddb 	bl	801b8bc <_ZNK8touchgfx4Rect8includesERKS0_>
 801bd06:	3c01      	subs	r4, #1
 801bd08:	b118      	cbz	r0, 801bd12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 801bd0a:	b2a1      	uxth	r1, r4
 801bd0c:	9801      	ldr	r0, [sp, #4]
 801bd0e:	f7ff ffc3 	bl	801bc98 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801bd12:	3d08      	subs	r5, #8
 801bd14:	e7f2      	b.n	801bcfc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 801bd16:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	; 0xec
 801bd1a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801bd1e:	f8cd a010 	str.w	sl, [sp, #16]
 801bd22:	9302      	str	r3, [sp, #8]
 801bd24:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801bd28:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 801bd2c:	9306      	str	r3, [sp, #24]
 801bd2e:	445c      	add	r4, fp
 801bd30:	2500      	movs	r5, #0
 801bd32:	4626      	mov	r6, r4
 801bd34:	f8cd a014 	str.w	sl, [sp, #20]
 801bd38:	462f      	mov	r7, r5
 801bd3a:	9b05      	ldr	r3, [sp, #20]
 801bd3c:	2b00      	cmp	r3, #0
 801bd3e:	d073      	beq.n	801be28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801bd40:	9903      	ldr	r1, [sp, #12]
 801bd42:	4630      	mov	r0, r6
 801bd44:	f7ff fd48 	bl	801b7d8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801bd48:	b350      	cbz	r0, 801bda0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801bd4a:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801bd4e:	f9b6 c000 	ldrsh.w	ip, [r6]
 801bd52:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	; 0x2a
 801bd56:	45e6      	cmp	lr, ip
 801bd58:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 801bd5c:	db33      	blt.n	801bdc6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801bd5e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801bd62:	88b3      	ldrh	r3, [r6, #4]
 801bd64:	4472      	add	r2, lr
 801bd66:	4463      	add	r3, ip
 801bd68:	b212      	sxth	r2, r2
 801bd6a:	b21b      	sxth	r3, r3
 801bd6c:	429a      	cmp	r2, r3
 801bd6e:	dc2a      	bgt.n	801bdc6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801bd70:	fa1f f289 	uxth.w	r2, r9
 801bd74:	88f3      	ldrh	r3, [r6, #6]
 801bd76:	45c8      	cmp	r8, r9
 801bd78:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801bd7c:	4413      	add	r3, r2
 801bd7e:	fa1f fc88 	uxth.w	ip, r8
 801bd82:	b29b      	uxth	r3, r3
 801bd84:	fa0f fe83 	sxth.w	lr, r3
 801bd88:	db0f      	blt.n	801bdaa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801bd8a:	eba3 030c 	sub.w	r3, r3, ip
 801bd8e:	1ac9      	subs	r1, r1, r3
 801bd90:	b209      	sxth	r1, r1
 801bd92:	2900      	cmp	r1, #0
 801bd94:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801bd98:	dd12      	ble.n	801bdc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801bd9a:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 801bd9e:	4605      	mov	r5, r0
 801bda0:	9b05      	ldr	r3, [sp, #20]
 801bda2:	3e08      	subs	r6, #8
 801bda4:	3b01      	subs	r3, #1
 801bda6:	9305      	str	r3, [sp, #20]
 801bda8:	e7c7      	b.n	801bd3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801bdaa:	4461      	add	r1, ip
 801bdac:	b209      	sxth	r1, r1
 801bdae:	4571      	cmp	r1, lr
 801bdb0:	dc38      	bgt.n	801be24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801bdb2:	eba2 020c 	sub.w	r2, r2, ip
 801bdb6:	b212      	sxth	r2, r2
 801bdb8:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 801bdbc:	2a00      	cmp	r2, #0
 801bdbe:	dcee      	bgt.n	801bd9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801bdc0:	b00f      	add	sp, #60	; 0x3c
 801bdc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bdc6:	45c8      	cmp	r8, r9
 801bdc8:	db2c      	blt.n	801be24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801bdca:	88f3      	ldrh	r3, [r6, #6]
 801bdcc:	4499      	add	r9, r3
 801bdce:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 801bdd2:	4498      	add	r8, r3
 801bdd4:	fa0f f989 	sxth.w	r9, r9
 801bdd8:	fa0f f888 	sxth.w	r8, r8
 801bddc:	45c1      	cmp	r9, r8
 801bdde:	db21      	blt.n	801be24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801bde0:	fa1f f28c 	uxth.w	r2, ip
 801bde4:	88b3      	ldrh	r3, [r6, #4]
 801bde6:	45e6      	cmp	lr, ip
 801bde8:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801bdec:	4413      	add	r3, r2
 801bdee:	fa1f f88e 	uxth.w	r8, lr
 801bdf2:	b29b      	uxth	r3, r3
 801bdf4:	fa0f f983 	sxth.w	r9, r3
 801bdf8:	db0a      	blt.n	801be10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 801bdfa:	eba3 0308 	sub.w	r3, r3, r8
 801bdfe:	1ac9      	subs	r1, r1, r3
 801be00:	b209      	sxth	r1, r1
 801be02:	2900      	cmp	r1, #0
 801be04:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 801be08:	ddda      	ble.n	801bdc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801be0a:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 801be0e:	e7c6      	b.n	801bd9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801be10:	4441      	add	r1, r8
 801be12:	b209      	sxth	r1, r1
 801be14:	4549      	cmp	r1, r9
 801be16:	dc05      	bgt.n	801be24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801be18:	eba2 0208 	sub.w	r2, r2, r8
 801be1c:	b212      	sxth	r2, r2
 801be1e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801be22:	e7cb      	b.n	801bdbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 801be24:	4607      	mov	r7, r0
 801be26:	e7bb      	b.n	801bda0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801be28:	2d00      	cmp	r5, #0
 801be2a:	d181      	bne.n	801bd30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 801be2c:	2f00      	cmp	r7, #0
 801be2e:	f000 81dd 	beq.w	801c1ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801be32:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 801be36:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 801be3a:	b2b3      	uxth	r3, r6
 801be3c:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
 801be40:	9305      	str	r3, [sp, #20]
 801be42:	9a05      	ldr	r2, [sp, #20]
 801be44:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 801be48:	4413      	add	r3, r2
 801be4a:	b2ba      	uxth	r2, r7
 801be4c:	4492      	add	sl, r2
 801be4e:	b29b      	uxth	r3, r3
 801be50:	fa1f fa8a 	uxth.w	sl, sl
 801be54:	fa0f f883 	sxth.w	r8, r3
 801be58:	fa0f f98a 	sxth.w	r9, sl
 801be5c:	e9cd 2307 	strd	r2, r3, [sp, #28]
 801be60:	9b04      	ldr	r3, [sp, #16]
 801be62:	2b00      	cmp	r3, #0
 801be64:	d052      	beq.n	801bf0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801be66:	9903      	ldr	r1, [sp, #12]
 801be68:	4620      	mov	r0, r4
 801be6a:	f7ff fcb5 	bl	801b7d8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801be6e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801be72:	b1c0      	cbz	r0, 801bea6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801be74:	f9b4 e000 	ldrsh.w	lr, [r4]
 801be78:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801be7c:	4576      	cmp	r6, lr
 801be7e:	dc22      	bgt.n	801bec6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801be80:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801be84:	44f4      	add	ip, lr
 801be86:	fa0f fc8c 	sxth.w	ip, ip
 801be8a:	45e0      	cmp	r8, ip
 801be8c:	db1b      	blt.n	801bec6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801be8e:	428f      	cmp	r7, r1
 801be90:	fa1f fc81 	uxth.w	ip, r1
 801be94:	88e1      	ldrh	r1, [r4, #6]
 801be96:	dc0d      	bgt.n	801beb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 801be98:	ebaa 0c0c 	sub.w	ip, sl, ip
 801be9c:	f8a4 9002 	strh.w	r9, [r4, #2]
 801bea0:	eba1 010c 	sub.w	r1, r1, ip
 801bea4:	80e1      	strh	r1, [r4, #6]
 801bea6:	4628      	mov	r0, r5
 801bea8:	9904      	ldr	r1, [sp, #16]
 801beaa:	3c08      	subs	r4, #8
 801beac:	4605      	mov	r5, r0
 801beae:	3901      	subs	r1, #1
 801beb0:	9104      	str	r1, [sp, #16]
 801beb2:	e7d3      	b.n	801be5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 801beb4:	4461      	add	r1, ip
 801beb6:	b209      	sxth	r1, r1
 801beb8:	4549      	cmp	r1, r9
 801beba:	dcf5      	bgt.n	801bea8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801bebc:	eba2 0c0c 	sub.w	ip, r2, ip
 801bec0:	f8a4 c006 	strh.w	ip, [r4, #6]
 801bec4:	e7ef      	b.n	801bea6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801bec6:	428f      	cmp	r7, r1
 801bec8:	dcee      	bgt.n	801bea8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801beca:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 801bece:	4461      	add	r1, ip
 801bed0:	b209      	sxth	r1, r1
 801bed2:	4589      	cmp	r9, r1
 801bed4:	dbe8      	blt.n	801bea8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801bed6:	4576      	cmp	r6, lr
 801bed8:	fa1f fc8e 	uxth.w	ip, lr
 801bedc:	88a1      	ldrh	r1, [r4, #4]
 801bede:	dc07      	bgt.n	801bef0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 801bee0:	eba3 0c0c 	sub.w	ip, r3, ip
 801bee4:	f8a4 8000 	strh.w	r8, [r4]
 801bee8:	eba1 010c 	sub.w	r1, r1, ip
 801beec:	80a1      	strh	r1, [r4, #4]
 801beee:	e7da      	b.n	801bea6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801bef0:	4461      	add	r1, ip
 801bef2:	b209      	sxth	r1, r1
 801bef4:	4588      	cmp	r8, r1
 801bef6:	dbd7      	blt.n	801bea8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801bef8:	9905      	ldr	r1, [sp, #20]
 801befa:	eba1 0c0c 	sub.w	ip, r1, ip
 801befe:	f8a4 c004 	strh.w	ip, [r4, #4]
 801bf02:	e7d0      	b.n	801bea6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801bf04:	2400bae6 	.word	0x2400bae6
 801bf08:	2400bae4 	.word	0x2400bae4
 801bf0c:	2d00      	cmp	r5, #0
 801bf0e:	f000 816d 	beq.w	801c1ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801bf12:	9b06      	ldr	r3, [sp, #24]
 801bf14:	445b      	add	r3, fp
 801bf16:	461c      	mov	r4, r3
 801bf18:	9b02      	ldr	r3, [sp, #8]
 801bf1a:	3301      	adds	r3, #1
 801bf1c:	f000 8166 	beq.w	801c1ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801bf20:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
 801bf24:	9803      	ldr	r0, [sp, #12]
 801bf26:	4629      	mov	r1, r5
 801bf28:	f7ff fcc8 	bl	801b8bc <_ZNK8touchgfx4Rect8includesERKS0_>
 801bf2c:	b120      	cbz	r0, 801bf38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 801bf2e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801bf32:	9801      	ldr	r0, [sp, #4]
 801bf34:	f7ff feb0 	bl	801bc98 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801bf38:	9903      	ldr	r1, [sp, #12]
 801bf3a:	4628      	mov	r0, r5
 801bf3c:	f7ff fc4c 	bl	801b7d8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801bf40:	2800      	cmp	r0, #0
 801bf42:	f000 809c 	beq.w	801c07e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801bf46:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
 801bf4a:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 801bf4e:	fa1f f189 	uxth.w	r1, r9
 801bf52:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801bf56:	9309      	str	r3, [sp, #36]	; 0x24
 801bf58:	eb01 0c03 	add.w	ip, r1, r3
 801bf5c:	b283      	uxth	r3, r0
 801bf5e:	4548      	cmp	r0, r9
 801bf60:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 801bf64:	fa1f fa8c 	uxth.w	sl, ip
 801bf68:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801bf6c:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
 801bf70:	eb03 050c 	add.w	r5, r3, ip
 801bf74:	b2ad      	uxth	r5, r5
 801bf76:	9505      	str	r5, [sp, #20]
 801bf78:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 801bf7c:	9504      	str	r5, [sp, #16]
 801bf7e:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
 801bf82:	f340 8099 	ble.w	801c0b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 801bf86:	1a5b      	subs	r3, r3, r1
 801bf88:	4596      	cmp	lr, r2
 801bf8a:	fa0f f08a 	sxth.w	r0, sl
 801bf8e:	b29b      	uxth	r3, r3
 801bf90:	b21e      	sxth	r6, r3
 801bf92:	dd2e      	ble.n	801bff2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 801bf94:	9f02      	ldr	r7, [sp, #8]
 801bf96:	fa1f fe8e 	uxth.w	lr, lr
 801bf9a:	b292      	uxth	r2, r2
 801bf9c:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 801bfa0:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 801bfa4:	9f04      	ldr	r7, [sp, #16]
 801bfa6:	ebae 0102 	sub.w	r1, lr, r2
 801bfaa:	44a6      	add	lr, r4
 801bfac:	1a3f      	subs	r7, r7, r0
 801bfae:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
 801bfb2:	b289      	uxth	r1, r1
 801bfb4:	4402      	add	r2, r0
 801bfb6:	fa0f fe8e 	sxth.w	lr, lr
 801bfba:	b20d      	sxth	r5, r1
 801bfbc:	b212      	sxth	r2, r2
 801bfbe:	436f      	muls	r7, r5
 801bfc0:	ebae 0202 	sub.w	r2, lr, r2
 801bfc4:	4372      	muls	r2, r6
 801bfc6:	4297      	cmp	r7, r2
 801bfc8:	db09      	blt.n	801bfde <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 801bfca:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
 801bfce:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
 801bfd2:	449c      	add	ip, r3
 801bfd4:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801bfd8:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801bfdc:	e686      	b.n	801bcec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801bfde:	4421      	add	r1, r4
 801bfe0:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 801bfe4:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
 801bfe8:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801bfec:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801bff0:	e67c      	b.n	801bcec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801bff2:	9f04      	ldr	r7, [sp, #16]
 801bff4:	42b8      	cmp	r0, r7
 801bff6:	da27      	bge.n	801c048 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 801bff8:	9902      	ldr	r1, [sp, #8]
 801bffa:	1a3f      	subs	r7, r7, r0
 801bffc:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
 801c000:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 801c004:	eb05 010e 	add.w	r1, r5, lr
 801c008:	fa1f f881 	uxth.w	r8, r1
 801c00c:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
 801c010:	4411      	add	r1, r2
 801c012:	fa0f f988 	sxth.w	r9, r8
 801c016:	eba2 020e 	sub.w	r2, r2, lr
 801c01a:	eba1 0108 	sub.w	r1, r1, r8
 801c01e:	4372      	muls	r2, r6
 801c020:	b289      	uxth	r1, r1
 801c022:	fa0f f881 	sxth.w	r8, r1
 801c026:	fb08 f707 	mul.w	r7, r8, r7
 801c02a:	42ba      	cmp	r2, r7
 801c02c:	dc06      	bgt.n	801c03c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 801c02e:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
 801c032:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
 801c036:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
 801c03a:	e7ca      	b.n	801bfd2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 801c03c:	4429      	add	r1, r5
 801c03e:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 801c042:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801c046:	e651      	b.n	801bcec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801c048:	9805      	ldr	r0, [sp, #20]
 801c04a:	2d06      	cmp	r5, #6
 801c04c:	ebaa 0000 	sub.w	r0, sl, r0
 801c050:	b280      	uxth	r0, r0
 801c052:	fa0f fe80 	sxth.w	lr, r0
 801c056:	d817      	bhi.n	801c088 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 801c058:	9b04      	ldr	r3, [sp, #16]
 801c05a:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 801c05e:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 801c062:	1c6b      	adds	r3, r5, #1
 801c064:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
 801c068:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 801c06c:	9b01      	ldr	r3, [sp, #4]
 801c06e:	9801      	ldr	r0, [sp, #4]
 801c070:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801c074:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 801c078:	805a      	strh	r2, [r3, #2]
 801c07a:	809e      	strh	r6, [r3, #4]
 801c07c:	80d9      	strh	r1, [r3, #6]
 801c07e:	9b02      	ldr	r3, [sp, #8]
 801c080:	3c08      	subs	r4, #8
 801c082:	3b01      	subs	r3, #1
 801c084:	9302      	str	r3, [sp, #8]
 801c086:	e747      	b.n	801bf18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 801c088:	9a02      	ldr	r2, [sp, #8]
 801c08a:	45b6      	cmp	lr, r6
 801c08c:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801c090:	db0d      	blt.n	801c0ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801c092:	449c      	add	ip, r3
 801c094:	445a      	add	r2, fp
 801c096:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 801c09a:	fa1f fc8c 	uxth.w	ip, ip
 801c09e:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
 801c0a2:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801c0a6:	448c      	add	ip, r1
 801c0a8:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
 801c0ac:	e61e      	b.n	801bcec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801c0ae:	445a      	add	r2, fp
 801c0b0:	4484      	add	ip, r0
 801c0b2:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
 801c0b6:	e78f      	b.n	801bfd8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801c0b8:	fa1f f18e 	uxth.w	r1, lr
 801c0bc:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 801c0c0:	b293      	uxth	r3, r2
 801c0c2:	4596      	cmp	lr, r2
 801c0c4:	eb01 0806 	add.w	r8, r1, r6
 801c0c8:	9306      	str	r3, [sp, #24]
 801c0ca:	fa1f f888 	uxth.w	r8, r8
 801c0ce:	9f06      	ldr	r7, [sp, #24]
 801c0d0:	fa0f f388 	sxth.w	r3, r8
 801c0d4:	9307      	str	r3, [sp, #28]
 801c0d6:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 801c0da:	443b      	add	r3, r7
 801c0dc:	b29b      	uxth	r3, r3
 801c0de:	9308      	str	r3, [sp, #32]
 801c0e0:	da24      	bge.n	801c12c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 801c0e2:	9905      	ldr	r1, [sp, #20]
 801c0e4:	eba3 0308 	sub.w	r3, r3, r8
 801c0e8:	eba2 020e 	sub.w	r2, r2, lr
 801c0ec:	eba9 0000 	sub.w	r0, r9, r0
 801c0f0:	ebaa 0401 	sub.w	r4, sl, r1
 801c0f4:	b29b      	uxth	r3, r3
 801c0f6:	b2a4      	uxth	r4, r4
 801c0f8:	b219      	sxth	r1, r3
 801c0fa:	b225      	sxth	r5, r4
 801c0fc:	4348      	muls	r0, r1
 801c0fe:	436a      	muls	r2, r5
 801c100:	4282      	cmp	r2, r0
 801c102:	9a02      	ldr	r2, [sp, #8]
 801c104:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801c108:	445a      	add	r2, fp
 801c10a:	dc06      	bgt.n	801c11a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 801c10c:	9b07      	ldr	r3, [sp, #28]
 801c10e:	44a4      	add	ip, r4
 801c110:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
 801c114:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 801c118:	e75e      	b.n	801bfd8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801c11a:	9904      	ldr	r1, [sp, #16]
 801c11c:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
 801c120:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
 801c124:	4433      	add	r3, r6
 801c126:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801c12a:	e5df      	b.n	801bcec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801c12c:	9f06      	ldr	r7, [sp, #24]
 801c12e:	9b04      	ldr	r3, [sp, #16]
 801c130:	1bc9      	subs	r1, r1, r7
 801c132:	fa0f f78a 	sxth.w	r7, sl
 801c136:	b289      	uxth	r1, r1
 801c138:	429f      	cmp	r7, r3
 801c13a:	fa0f fe81 	sxth.w	lr, r1
 801c13e:	dd23      	ble.n	801c188 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 801c140:	9a05      	ldr	r2, [sp, #20]
 801c142:	eba9 0000 	sub.w	r0, r9, r0
 801c146:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801c14a:	ebaa 0202 	sub.w	r2, sl, r2
 801c14e:	9d07      	ldr	r5, [sp, #28]
 801c150:	fb0e f000 	mul.w	r0, lr, r0
 801c154:	b292      	uxth	r2, r2
 801c156:	eba5 0a03 	sub.w	sl, r5, r3
 801c15a:	9b02      	ldr	r3, [sp, #8]
 801c15c:	b214      	sxth	r4, r2
 801c15e:	00db      	lsls	r3, r3, #3
 801c160:	fb04 fa0a 	mul.w	sl, r4, sl
 801c164:	445b      	add	r3, fp
 801c166:	4550      	cmp	r0, sl
 801c168:	db03      	blt.n	801c172 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 801c16a:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
 801c16e:	4494      	add	ip, r2
 801c170:	e732      	b.n	801bfd8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801c172:	9a04      	ldr	r2, [sp, #16]
 801c174:	4431      	add	r1, r6
 801c176:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
 801c17a:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 801c17e:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 801c182:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801c186:	e75c      	b.n	801c042 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 801c188:	9b08      	ldr	r3, [sp, #32]
 801c18a:	2d06      	cmp	r5, #6
 801c18c:	eba3 0308 	sub.w	r3, r3, r8
 801c190:	b29b      	uxth	r3, r3
 801c192:	b218      	sxth	r0, r3
 801c194:	d813      	bhi.n	801c1be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 801c196:	9b07      	ldr	r3, [sp, #28]
 801c198:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
 801c19c:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 801c1a0:	1c6b      	adds	r3, r5, #1
 801c1a2:	9901      	ldr	r1, [sp, #4]
 801c1a4:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 801c1a8:	9b01      	ldr	r3, [sp, #4]
 801c1aa:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 801c1ae:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801c1b2:	805a      	strh	r2, [r3, #2]
 801c1b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c1b6:	f8a3 e006 	strh.w	lr, [r3, #6]
 801c1ba:	809a      	strh	r2, [r3, #4]
 801c1bc:	e75f      	b.n	801c07e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801c1be:	9c02      	ldr	r4, [sp, #8]
 801c1c0:	4570      	cmp	r0, lr
 801c1c2:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801c1c6:	db0d      	blt.n	801c1e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 801c1c8:	4431      	add	r1, r6
 801c1ca:	9b06      	ldr	r3, [sp, #24]
 801c1cc:	445c      	add	r4, fp
 801c1ce:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801c1d2:	b289      	uxth	r1, r1
 801c1d4:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
 801c1d8:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801c1dc:	4419      	add	r1, r3
 801c1de:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
 801c1e2:	e583      	b.n	801bcec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801c1e4:	445c      	add	r4, fp
 801c1e6:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
 801c1ea:	e79b      	b.n	801c124 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 801c1ec:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 801c1f0:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801c1f4:	1e65      	subs	r5, r4, #1
 801c1f6:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 801c1fa:	b2ad      	uxth	r5, r5
 801c1fc:	42b5      	cmp	r5, r6
 801c1fe:	d044      	beq.n	801c28a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 801c200:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801c204:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	; 0xa6
 801c208:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801c20c:	4282      	cmp	r2, r0
 801c20e:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	; 0xa4
 801c212:	d11f      	bne.n	801c254 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 801c214:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	; 0x2e
 801c218:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 801c21c:	459c      	cmp	ip, r3
 801c21e:	d119      	bne.n	801c254 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 801c220:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
 801c224:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801c228:	19d8      	adds	r0, r3, r7
 801c22a:	b200      	sxth	r0, r0
 801c22c:	4288      	cmp	r0, r1
 801c22e:	d109      	bne.n	801c244 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 801c230:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
 801c234:	4413      	add	r3, r2
 801c236:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801c23a:	4629      	mov	r1, r5
 801c23c:	9801      	ldr	r0, [sp, #4]
 801c23e:	f7ff fd2b 	bl	801bc98 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c242:	e003      	b.n	801c24c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801c244:	4411      	add	r1, r2
 801c246:	b209      	sxth	r1, r1
 801c248:	42b9      	cmp	r1, r7
 801c24a:	d0f3      	beq.n	801c234 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 801c24c:	3d01      	subs	r5, #1
 801c24e:	3c08      	subs	r4, #8
 801c250:	b2ad      	uxth	r5, r5
 801c252:	e7d3      	b.n	801c1fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 801c254:	42b9      	cmp	r1, r7
 801c256:	d1f9      	bne.n	801c24c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801c258:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
 801c25c:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 801c260:	4299      	cmp	r1, r3
 801c262:	d1f3      	bne.n	801c24c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801c264:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 801c268:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801c26c:	181f      	adds	r7, r3, r0
 801c26e:	b23f      	sxth	r7, r7
 801c270:	42ba      	cmp	r2, r7
 801c272:	d105      	bne.n	801c280 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 801c274:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
 801c278:	440b      	add	r3, r1
 801c27a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801c27e:	e7dc      	b.n	801c23a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 801c280:	440a      	add	r2, r1
 801c282:	b212      	sxth	r2, r2
 801c284:	4290      	cmp	r0, r2
 801c286:	d1e1      	bne.n	801c24c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801c288:	e7f6      	b.n	801c278 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 801c28a:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
 801c28e:	2e07      	cmp	r6, #7
 801c290:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 801c294:	d812      	bhi.n	801c2bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 801c296:	1c75      	adds	r5, r6, #1
 801c298:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801c29c:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 801c2a0:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
 801c2a4:	9d01      	ldr	r5, [sp, #4]
 801c2a6:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801c2aa:	442c      	add	r4, r5
 801c2ac:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801c2b0:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 801c2b4:	8061      	strh	r1, [r4, #2]
 801c2b6:	80a2      	strh	r2, [r4, #4]
 801c2b8:	80e3      	strh	r3, [r4, #6]
 801c2ba:	e581      	b.n	801bdc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801c2bc:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 801c2c0:	3e01      	subs	r6, #1
 801c2c2:	445c      	add	r4, fp
 801c2c4:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801c2c8:	f04f 37ff 	mov.w	r7, #4294967295
 801c2cc:	2500      	movs	r5, #0
 801c2ce:	9305      	str	r3, [sp, #20]
 801c2d0:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 801c2d4:	1e72      	subs	r2, r6, #1
 801c2d6:	9302      	str	r3, [sp, #8]
 801c2d8:	4691      	mov	r9, r2
 801c2da:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 801c2de:	9304      	str	r3, [sp, #16]
 801c2e0:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
 801c2e4:	f1b9 3fff 	cmp.w	r9, #4294967295
 801c2e8:	6818      	ldr	r0, [r3, #0]
 801c2ea:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801c2ee:	9207      	str	r2, [sp, #28]
 801c2f0:	bf16      	itet	ne
 801c2f2:	9905      	ldrne	r1, [sp, #20]
 801c2f4:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801c2f8:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 801c2fc:	9306      	str	r3, [sp, #24]
 801c2fe:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801c302:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801c306:	fb18 f801 	smulbb	r8, r8, r1
 801c30a:	6859      	ldr	r1, [r3, #4]
 801c30c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801c310:	4671      	mov	r1, lr
 801c312:	a80c      	add	r0, sp, #48	; 0x30
 801c314:	f7ff faf8 	bl	801b908 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801c318:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 801c31c:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801c320:	f04f 0c08 	mov.w	ip, #8
 801c324:	9b04      	ldr	r3, [sp, #16]
 801c326:	9a02      	ldr	r2, [sp, #8]
 801c328:	fb10 f001 	smulbb	r0, r0, r1
 801c32c:	fb02 8803 	mla	r8, r2, r3, r8
 801c330:	eba0 0108 	sub.w	r1, r0, r8
 801c334:	fb90 f0fc 	sdiv	r0, r0, ip
 801c338:	4288      	cmp	r0, r1
 801c33a:	dc20      	bgt.n	801c37e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 801c33c:	4551      	cmp	r1, sl
 801c33e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801c342:	da03      	bge.n	801c34c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68c>
 801c344:	b1d9      	cbz	r1, 801c37e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 801c346:	468a      	mov	sl, r1
 801c348:	464f      	mov	r7, r9
 801c34a:	4635      	mov	r5, r6
 801c34c:	f109 39ff 	add.w	r9, r9, #4294967295
 801c350:	f119 0f02 	cmn.w	r9, #2
 801c354:	d1c6      	bne.n	801c2e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 801c356:	4616      	mov	r6, r2
 801c358:	3201      	adds	r2, #1
 801c35a:	f1a4 0408 	sub.w	r4, r4, #8
 801c35e:	d1b7      	bne.n	801c2d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 801c360:	9b01      	ldr	r3, [sp, #4]
 801c362:	b2ac      	uxth	r4, r5
 801c364:	00ed      	lsls	r5, r5, #3
 801c366:	1958      	adds	r0, r3, r5
 801c368:	1c7b      	adds	r3, r7, #1
 801c36a:	d10b      	bne.n	801c384 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 801c36c:	4601      	mov	r1, r0
 801c36e:	9803      	ldr	r0, [sp, #12]
 801c370:	f7ff faca 	bl	801b908 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801c374:	4621      	mov	r1, r4
 801c376:	9801      	ldr	r0, [sp, #4]
 801c378:	f7ff fc8e 	bl	801bc98 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c37c:	e4b6      	b.n	801bcec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801c37e:	464f      	mov	r7, r9
 801c380:	4635      	mov	r5, r6
 801c382:	e7ed      	b.n	801c360 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a0>
 801c384:	9b01      	ldr	r3, [sp, #4]
 801c386:	00ff      	lsls	r7, r7, #3
 801c388:	445d      	add	r5, fp
 801c38a:	19d9      	adds	r1, r3, r7
 801c38c:	445f      	add	r7, fp
 801c38e:	f7ff fabb 	bl	801b908 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801c392:	9b03      	ldr	r3, [sp, #12]
 801c394:	cb03      	ldmia	r3!, {r0, r1}
 801c396:	9b03      	ldr	r3, [sp, #12]
 801c398:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 801c39c:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 801c3a0:	f855 0fac 	ldr.w	r0, [r5, #172]!
 801c3a4:	6869      	ldr	r1, [r5, #4]
 801c3a6:	c303      	stmia	r3!, {r0, r1}
 801c3a8:	e7e4      	b.n	801c374 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b4>
 801c3aa:	bf00      	nop

0801c3ac <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801c3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c3b0:	f500 7698 	add.w	r6, r0, #304	; 0x130
 801c3b4:	b09b      	sub	sp, #108	; 0x6c
 801c3b6:	4604      	mov	r4, r0
 801c3b8:	4630      	mov	r0, r6
 801c3ba:	f7fb fda4 	bl	8017f06 <_ZNK8touchgfx4Rect7isEmptyEv>
 801c3be:	4605      	mov	r5, r0
 801c3c0:	b948      	cbnz	r0, 801c3d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 801c3c2:	6823      	ldr	r3, [r4, #0]
 801c3c4:	4620      	mov	r0, r4
 801c3c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c3c8:	e896 0006 	ldmia.w	r6, {r1, r2}
 801c3cc:	4798      	blx	r3
 801c3ce:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801c3d2:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 801c3d6:	4bc5      	ldr	r3, [pc, #788]	; (801c6ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x340>)
 801c3d8:	681b      	ldr	r3, [r3, #0]
 801c3da:	2b00      	cmp	r3, #0
 801c3dc:	d03f      	beq.n	801c45e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 801c3de:	4dc4      	ldr	r5, [pc, #784]	; (801c6f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 801c3e0:	4628      	mov	r0, r5
 801c3e2:	f7fb fd90 	bl	8017f06 <_ZNK8touchgfx4Rect7isEmptyEv>
 801c3e6:	4606      	mov	r6, r0
 801c3e8:	2800      	cmp	r0, #0
 801c3ea:	d138      	bne.n	801c45e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 801c3ec:	4628      	mov	r0, r5
 801c3ee:	f7ff f929 	bl	801b644 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801c3f2:	6823      	ldr	r3, [r4, #0]
 801c3f4:	6829      	ldr	r1, [r5, #0]
 801c3f6:	4620      	mov	r0, r4
 801c3f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c3fa:	686a      	ldr	r2, [r5, #4]
 801c3fc:	4798      	blx	r3
 801c3fe:	802e      	strh	r6, [r5, #0]
 801c400:	806e      	strh	r6, [r5, #2]
 801c402:	80ae      	strh	r6, [r5, #4]
 801c404:	80ee      	strh	r6, [r5, #6]
 801c406:	f10d 0824 	add.w	r8, sp, #36	; 0x24
 801c40a:	4dba      	ldr	r5, [pc, #744]	; (801c6f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 801c40c:	4640      	mov	r0, r8
 801c40e:	f7ff fbe8 	bl	801bbe2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801c412:	882e      	ldrh	r6, [r5, #0]
 801c414:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 801c418:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 801c41c:	4633      	mov	r3, r6
 801c41e:	42bb      	cmp	r3, r7
 801c420:	d224      	bcs.n	801c46c <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801c422:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 801c426:	2907      	cmp	r1, #7
 801c428:	d816      	bhi.n	801c458 <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 801c42a:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801c42e:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 801c432:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 801c436:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801c43a:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801c43e:	1c4a      	adds	r2, r1, #1
 801c440:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 801c444:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 801c448:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 801c44c:	f8a2 a002 	strh.w	sl, [r2, #2]
 801c450:	f8a2 e004 	strh.w	lr, [r2, #4]
 801c454:	f8a2 c006 	strh.w	ip, [r2, #6]
 801c458:	3301      	adds	r3, #1
 801c45a:	b29b      	uxth	r3, r3
 801c45c:	e7df      	b.n	801c41e <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 801c45e:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801c462:	2b00      	cmp	r3, #0
 801c464:	d1cf      	bne.n	801c406 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 801c466:	b01b      	add	sp, #108	; 0x6c
 801c468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c46c:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
 801c470:	42b3      	cmp	r3, r6
 801c472:	d90c      	bls.n	801c48e <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 801c474:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801c478:	6822      	ldr	r2, [r4, #0]
 801c47a:	3601      	adds	r6, #1
 801c47c:	4620      	mov	r0, r4
 801c47e:	6c17      	ldr	r7, [r2, #64]	; 0x40
 801c480:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
 801c484:	b2b6      	uxth	r6, r6
 801c486:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
 801c48a:	47b8      	blx	r7
 801c48c:	e7ee      	b.n	801c46c <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801c48e:	4a9a      	ldr	r2, [pc, #616]	; (801c6f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801c490:	6813      	ldr	r3, [r2, #0]
 801c492:	4691      	mov	r9, r2
 801c494:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801c498:	2b01      	cmp	r3, #1
 801c49a:	f040 80e0 	bne.w	801c65e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b2>
 801c49e:	8829      	ldrh	r1, [r5, #0]
 801c4a0:	2600      	movs	r6, #0
 801c4a2:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 801c4a6:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 801c4aa:	33ae      	adds	r3, #174	; 0xae
 801c4ac:	428f      	cmp	r7, r1
 801c4ae:	f103 0308 	add.w	r3, r3, #8
 801c4b2:	dd0a      	ble.n	801c4ca <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 801c4b4:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 801c4b8:	3101      	adds	r1, #1
 801c4ba:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 801c4be:	4402      	add	r2, r0
 801c4c0:	b212      	sxth	r2, r2
 801c4c2:	4296      	cmp	r6, r2
 801c4c4:	bfb8      	it	lt
 801c4c6:	4616      	movlt	r6, r2
 801c4c8:	e7f0      	b.n	801c4ac <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 801c4ca:	4b8c      	ldr	r3, [pc, #560]	; (801c6fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801c4cc:	f8df 9228 	ldr.w	r9, [pc, #552]	; 801c6f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>
 801c4d0:	881b      	ldrh	r3, [r3, #0]
 801c4d2:	2b0f      	cmp	r3, #15
 801c4d4:	bf8c      	ite	hi
 801c4d6:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 801c4da:	f04f 0b01 	movls.w	fp, #1
 801c4de:	2300      	movs	r3, #0
 801c4e0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801c4e4:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 801c4e8:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 801c4ec:	4b82      	ldr	r3, [pc, #520]	; (801c6f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801c4ee:	4438      	add	r0, r7
 801c4f0:	b207      	sxth	r7, r0
 801c4f2:	6818      	ldr	r0, [r3, #0]
 801c4f4:	42b7      	cmp	r7, r6
 801c4f6:	6803      	ldr	r3, [r0, #0]
 801c4f8:	f280 8083 	bge.w	801c602 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 801c4fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801c500:	4798      	blx	r3
 801c502:	eb07 030b 	add.w	r3, r7, fp
 801c506:	4298      	cmp	r0, r3
 801c508:	da07      	bge.n	801c51a <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801c50a:	42b0      	cmp	r0, r6
 801c50c:	da05      	bge.n	801c51a <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801c50e:	4287      	cmp	r7, r0
 801c510:	dd6c      	ble.n	801c5ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801c512:	2f00      	cmp	r7, #0
 801c514:	dd6a      	ble.n	801c5ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801c516:	4630      	mov	r0, r6
 801c518:	e004      	b.n	801c524 <_ZN8touchgfx11Application15drawCachedAreasEv+0x178>
 801c51a:	4287      	cmp	r7, r0
 801c51c:	dcfb      	bgt.n	801c516 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16a>
 801c51e:	42b0      	cmp	r0, r6
 801c520:	bfa8      	it	ge
 801c522:	4630      	movge	r0, r6
 801c524:	4b76      	ldr	r3, [pc, #472]	; (801c700 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 801c526:	1bc0      	subs	r0, r0, r7
 801c528:	2200      	movs	r2, #0
 801c52a:	f8ad 7016 	strh.w	r7, [sp, #22]
 801c52e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c532:	882f      	ldrh	r7, [r5, #0]
 801c534:	f8ad 2014 	strh.w	r2, [sp, #20]
 801c538:	f8ad 3018 	strh.w	r3, [sp, #24]
 801c53c:	f8ad 001a 	strh.w	r0, [sp, #26]
 801c540:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801c544:	42bb      	cmp	r3, r7
 801c546:	d9cd      	bls.n	801c4e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 801c548:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 801c54c:	ab07      	add	r3, sp, #28
 801c54e:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801c552:	6851      	ldr	r1, [r2, #4]
 801c554:	c303      	stmia	r3!, {r0, r1}
 801c556:	a905      	add	r1, sp, #20
 801c558:	a807      	add	r0, sp, #28
 801c55a:	f7ff f93d 	bl	801b7d8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c55e:	2800      	cmp	r0, #0
 801c560:	d04c      	beq.n	801c5fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 801c562:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801c566:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801c56a:	f8bd a020 	ldrh.w	sl, [sp, #32]
 801c56e:	4686      	mov	lr, r0
 801c570:	4290      	cmp	r0, r2
 801c572:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801c576:	4450      	add	r0, sl
 801c578:	f8bd a018 	ldrh.w	sl, [sp, #24]
 801c57c:	bfb8      	it	lt
 801c57e:	4696      	movlt	lr, r2
 801c580:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801c584:	4452      	add	r2, sl
 801c586:	b280      	uxth	r0, r0
 801c588:	4299      	cmp	r1, r3
 801c58a:	468c      	mov	ip, r1
 801c58c:	b292      	uxth	r2, r2
 801c58e:	9302      	str	r3, [sp, #8]
 801c590:	bfb8      	it	lt
 801c592:	469c      	movlt	ip, r3
 801c594:	b203      	sxth	r3, r0
 801c596:	fa0f fa82 	sxth.w	sl, r2
 801c59a:	f8ad e01c 	strh.w	lr, [sp, #28]
 801c59e:	f8ad c01e 	strh.w	ip, [sp, #30]
 801c5a2:	4553      	cmp	r3, sl
 801c5a4:	bfb8      	it	lt
 801c5a6:	4602      	movlt	r2, r0
 801c5a8:	9b02      	ldr	r3, [sp, #8]
 801c5aa:	eba2 020e 	sub.w	r2, r2, lr
 801c5ae:	f8ad 2020 	strh.w	r2, [sp, #32]
 801c5b2:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801c5b6:	4411      	add	r1, r2
 801c5b8:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801c5bc:	4413      	add	r3, r2
 801c5be:	b289      	uxth	r1, r1
 801c5c0:	b29b      	uxth	r3, r3
 801c5c2:	b208      	sxth	r0, r1
 801c5c4:	b21a      	sxth	r2, r3
 801c5c6:	4290      	cmp	r0, r2
 801c5c8:	bfb8      	it	lt
 801c5ca:	460b      	movlt	r3, r1
 801c5cc:	eba3 030c 	sub.w	r3, r3, ip
 801c5d0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801c5d4:	a807      	add	r0, sp, #28
 801c5d6:	f7fb fc96 	bl	8017f06 <_ZNK8touchgfx4Rect7isEmptyEv>
 801c5da:	b920      	cbnz	r0, 801c5e6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 801c5dc:	6823      	ldr	r3, [r4, #0]
 801c5de:	a907      	add	r1, sp, #28
 801c5e0:	4620      	mov	r0, r4
 801c5e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c5e4:	4798      	blx	r3
 801c5e6:	3701      	adds	r7, #1
 801c5e8:	b2bf      	uxth	r7, r7
 801c5ea:	e7a9      	b.n	801c540 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 801c5ec:	f8d9 0000 	ldr.w	r0, [r9]
 801c5f0:	2101      	movs	r1, #1
 801c5f2:	6803      	ldr	r3, [r0, #0]
 801c5f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c5f8:	4798      	blx	r3
 801c5fa:	e773      	b.n	801c4e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 801c5fc:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801c600:	e7e8      	b.n	801c5d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 801c602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c604:	4798      	blx	r3
 801c606:	4b3f      	ldr	r3, [pc, #252]	; (801c704 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 801c608:	781b      	ldrb	r3, [r3, #0]
 801c60a:	2b00      	cmp	r3, #0
 801c60c:	f43f af2b 	beq.w	801c466 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 801c610:	2300      	movs	r3, #0
 801c612:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 801c616:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
 801c61a:	882b      	ldrh	r3, [r5, #0]
 801c61c:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 801c620:	42ab      	cmp	r3, r5
 801c622:	f4bf af20 	bcs.w	801c466 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 801c626:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
 801c62a:	2907      	cmp	r1, #7
 801c62c:	d814      	bhi.n	801c658 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ac>
 801c62e:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 801c632:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 801c636:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 801c63a:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 801c63e:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 801c642:	1c4a      	adds	r2, r1, #1
 801c644:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
 801c648:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 801c64c:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 801c650:	f8a2 c002 	strh.w	ip, [r2, #2]
 801c654:	8097      	strh	r7, [r2, #4]
 801c656:	80d6      	strh	r6, [r2, #6]
 801c658:	3301      	adds	r3, #1
 801c65a:	b29b      	uxth	r3, r3
 801c65c:	e7e0      	b.n	801c620 <_ZN8touchgfx11Application15drawCachedAreasEv+0x274>
 801c65e:	2b02      	cmp	r3, #2
 801c660:	f040 8133 	bne.w	801c8ca <_ZN8touchgfx11Application15drawCachedAreasEv+0x51e>
 801c664:	4b28      	ldr	r3, [pc, #160]	; (801c708 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 801c666:	f104 0aac 	add.w	sl, r4, #172	; 0xac
 801c66a:	781b      	ldrb	r3, [r3, #0]
 801c66c:	2b01      	cmp	r3, #1
 801c66e:	f000 8098 	beq.w	801c7a2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801c672:	882a      	ldrh	r2, [r5, #0]
 801c674:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	; 0xec
 801c678:	3201      	adds	r2, #1
 801c67a:	b292      	uxth	r2, r2
 801c67c:	2900      	cmp	r1, #0
 801c67e:	d0c2      	beq.n	801c606 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801c680:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	; 0xae
 801c684:	4694      	mov	ip, r2
 801c686:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 801c68a:	f04f 0900 	mov.w	r9, #0
 801c68e:	441e      	add	r6, r3
 801c690:	b236      	sxth	r6, r6
 801c692:	fa1f f38c 	uxth.w	r3, ip
 801c696:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 801c69a:	4299      	cmp	r1, r3
 801c69c:	f240 80be 	bls.w	801c81c <_ZN8touchgfx11Application15drawCachedAreasEv+0x470>
 801c6a0:	4427      	add	r7, r4
 801c6a2:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 801c6a6:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 801c6aa:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	; 0xae
 801c6ae:	4283      	cmp	r3, r0
 801c6b0:	f340 80a0 	ble.w	801c7f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x448>
 801c6b4:	f8be 60b2 	ldrh.w	r6, [lr, #178]	; 0xb2
 801c6b8:	46e1      	mov	r9, ip
 801c6ba:	4406      	add	r6, r0
 801c6bc:	b236      	sxth	r6, r6
 801c6be:	429e      	cmp	r6, r3
 801c6c0:	bfa8      	it	ge
 801c6c2:	461e      	movge	r6, r3
 801c6c4:	f10c 0c01 	add.w	ip, ip, #1
 801c6c8:	e7e3      	b.n	801c692 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e6>
 801c6ca:	d10a      	bne.n	801c6e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x336>
 801c6cc:	4562      	cmp	r2, ip
 801c6ce:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	; 0xb2
 801c6d2:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	; 0xb2
 801c6d6:	bfb8      	it	lt
 801c6d8:	4662      	movlt	r2, ip
 801c6da:	4288      	cmp	r0, r1
 801c6dc:	bfb8      	it	lt
 801c6de:	461f      	movlt	r7, r3
 801c6e0:	e086      	b.n	801c7f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 801c6e2:	428a      	cmp	r2, r1
 801c6e4:	bfb8      	it	lt
 801c6e6:	460a      	movlt	r2, r1
 801c6e8:	e082      	b.n	801c7f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 801c6ea:	bf00      	nop
 801c6ec:	2400bb28 	.word	0x2400bb28
 801c6f0:	2400bb34 	.word	0x2400bb34
 801c6f4:	24000056 	.word	0x24000056
 801c6f8:	2400baf0 	.word	0x2400baf0
 801c6fc:	2400bae6 	.word	0x2400bae6
 801c700:	2400bae4 	.word	0x2400bae4
 801c704:	2400baee 	.word	0x2400baee
 801c708:	2400bae8 	.word	0x2400bae8
 801c70c:	19a1      	adds	r1, r4, r6
 801c70e:	ab07      	add	r3, sp, #28
 801c710:	f851 0fac 	ldr.w	r0, [r1, #172]!
 801c714:	6849      	ldr	r1, [r1, #4]
 801c716:	c303      	stmia	r3!, {r0, r1}
 801c718:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801c71c:	a807      	add	r0, sp, #28
 801c71e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801c722:	2b13      	cmp	r3, #19
 801c724:	440b      	add	r3, r1
 801c726:	bfd8      	it	le
 801c728:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801c72c:	1a9b      	subs	r3, r3, r2
 801c72e:	f8ad 201c 	strh.w	r2, [sp, #28]
 801c732:	f8ad 3020 	strh.w	r3, [sp, #32]
 801c736:	f7fe ff9f 	bl	801b678 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c73a:	a807      	add	r0, sp, #28
 801c73c:	f7fb fbe3 	bl	8017f06 <_ZNK8touchgfx4Rect7isEmptyEv>
 801c740:	bb78      	cbnz	r0, 801c7a2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801c742:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801c746:	4426      	add	r6, r4
 801c748:	f8d9 0000 	ldr.w	r0, [r9]
 801c74c:	f1bc 0f14 	cmp.w	ip, #20
 801c750:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801c754:	f8d0 e000 	ldr.w	lr, [r0]
 801c758:	bfa8      	it	ge
 801c75a:	f04f 0c14 	movge.w	ip, #20
 801c75e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801c762:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801c766:	fa1f fc8c 	uxth.w	ip, ip
 801c76a:	f8cd c000 	str.w	ip, [sp]
 801c76e:	f8de b090 	ldr.w	fp, [lr, #144]	; 0x90
 801c772:	47d8      	blx	fp
 801c774:	4683      	mov	fp, r0
 801c776:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801c77a:	a807      	add	r0, sp, #28
 801c77c:	f7fe ff62 	bl	801b644 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801c780:	6823      	ldr	r3, [r4, #0]
 801c782:	4620      	mov	r0, r4
 801c784:	a907      	add	r1, sp, #28
 801c786:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c788:	4798      	blx	r3
 801c78a:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	; 0xb0
 801c78e:	eba0 000b 	sub.w	r0, r0, fp
 801c792:	b200      	sxth	r0, r0
 801c794:	f8a6 00b0 	strh.w	r0, [r6, #176]	; 0xb0
 801c798:	b918      	cbnz	r0, 801c7a2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801c79a:	b2b9      	uxth	r1, r7
 801c79c:	4650      	mov	r0, sl
 801c79e:	f7ff fa7b 	bl	801bc98 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c7a2:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
 801c7a6:	f1bb 0f00 	cmp.w	fp, #0
 801c7aa:	f43f af2c 	beq.w	801c606 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801c7ae:	882b      	ldrh	r3, [r5, #0]
 801c7b0:	2700      	movs	r7, #0
 801c7b2:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 801c7b6:	3301      	adds	r3, #1
 801c7b8:	b29b      	uxth	r3, r3
 801c7ba:	b299      	uxth	r1, r3
 801c7bc:	00fe      	lsls	r6, r7, #3
 801c7be:	458b      	cmp	fp, r1
 801c7c0:	d9a4      	bls.n	801c70c <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>
 801c7c2:	4426      	add	r6, r4
 801c7c4:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 801c7c8:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	; 0xac
 801c7cc:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	; 0xb0
 801c7d0:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	; 0xac
 801c7d4:	4408      	add	r0, r1
 801c7d6:	f8be 10b0 	ldrh.w	r1, [lr, #176]	; 0xb0
 801c7da:	4461      	add	r1, ip
 801c7dc:	b200      	sxth	r0, r0
 801c7de:	b209      	sxth	r1, r1
 801c7e0:	4288      	cmp	r0, r1
 801c7e2:	f6bf af72 	bge.w	801c6ca <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 801c7e6:	4584      	cmp	ip, r0
 801c7e8:	4662      	mov	r2, ip
 801c7ea:	461f      	mov	r7, r3
 801c7ec:	bfb8      	it	lt
 801c7ee:	4602      	movlt	r2, r0
 801c7f0:	3301      	adds	r3, #1
 801c7f2:	e7e2      	b.n	801c7ba <_ZN8touchgfx11Application15drawCachedAreasEv+0x40e>
 801c7f4:	d10e      	bne.n	801c814 <_ZN8touchgfx11Application15drawCachedAreasEv+0x468>
 801c7f6:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
 801c7fa:	f8be e0b2 	ldrh.w	lr, [lr, #178]	; 0xb2
 801c7fe:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
 801c802:	4473      	add	r3, lr
 801c804:	b21b      	sxth	r3, r3
 801c806:	429e      	cmp	r6, r3
 801c808:	bfa8      	it	ge
 801c80a:	461e      	movge	r6, r3
 801c80c:	4287      	cmp	r7, r0
 801c80e:	bfb8      	it	lt
 801c810:	46e1      	movlt	r9, ip
 801c812:	e757      	b.n	801c6c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 801c814:	4286      	cmp	r6, r0
 801c816:	bfa8      	it	ge
 801c818:	4606      	movge	r6, r0
 801c81a:	e753      	b.n	801c6c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 801c81c:	eb0a 0007 	add.w	r0, sl, r7
 801c820:	4427      	add	r7, r4
 801c822:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	; 0xb2
 801c826:	f1bb 0f13 	cmp.w	fp, #19
 801c82a:	bfdc      	itt	le
 801c82c:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	; 0xae
 801c830:	445e      	addle	r6, fp
 801c832:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801c836:	bfd8      	it	le
 801c838:	b236      	sxthle	r6, r6
 801c83a:	f7fb fb64 	bl	8017f06 <_ZNK8touchgfx4Rect7isEmptyEv>
 801c83e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801c842:	2800      	cmp	r0, #0
 801c844:	f47f af1a 	bne.w	801c67c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d0>
 801c848:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 801c84c:	fa1f fb8b 	uxth.w	fp, fp
 801c850:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801c854:	1ab6      	subs	r6, r6, r2
 801c856:	4829      	ldr	r0, [pc, #164]	; (801c8fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>)
 801c858:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
 801c85c:	2e14      	cmp	r6, #20
 801c85e:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 801c862:	6800      	ldr	r0, [r0, #0]
 801c864:	bfa8      	it	ge
 801c866:	2614      	movge	r6, #20
 801c868:	f8ad 101c 	strh.w	r1, [sp, #28]
 801c86c:	f8ad 201e 	strh.w	r2, [sp, #30]
 801c870:	b289      	uxth	r1, r1
 801c872:	f8ad 3020 	strh.w	r3, [sp, #32]
 801c876:	b2b6      	uxth	r6, r6
 801c878:	f8d0 c000 	ldr.w	ip, [r0]
 801c87c:	b292      	uxth	r2, r2
 801c87e:	455e      	cmp	r6, fp
 801c880:	bf94      	ite	ls
 801c882:	9600      	strls	r6, [sp, #0]
 801c884:	f8cd b000 	strhi.w	fp, [sp]
 801c888:	b29b      	uxth	r3, r3
 801c88a:	f8dc 6090 	ldr.w	r6, [ip, #144]	; 0x90
 801c88e:	47b0      	blx	r6
 801c890:	6823      	ldr	r3, [r4, #0]
 801c892:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801c896:	a907      	add	r1, sp, #28
 801c898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c89a:	4620      	mov	r0, r4
 801c89c:	4798      	blx	r3
 801c89e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801c8a2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801c8a6:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 801c8aa:	1a5b      	subs	r3, r3, r1
 801c8ac:	440a      	add	r2, r1
 801c8ae:	b21b      	sxth	r3, r3
 801c8b0:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 801c8b4:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801c8b8:	2b00      	cmp	r3, #0
 801c8ba:	f47f aeda 	bne.w	801c672 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 801c8be:	fa1f f189 	uxth.w	r1, r9
 801c8c2:	4650      	mov	r0, sl
 801c8c4:	f7ff f9e8 	bl	801bc98 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c8c8:	e6d3      	b.n	801c672 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 801c8ca:	882e      	ldrh	r6, [r5, #0]
 801c8cc:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801c8d0:	42b3      	cmp	r3, r6
 801c8d2:	f67f ae98 	bls.w	801c606 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801c8d6:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 801c8da:	ab07      	add	r3, sp, #28
 801c8dc:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801c8e0:	6851      	ldr	r1, [r2, #4]
 801c8e2:	c303      	stmia	r3!, {r0, r1}
 801c8e4:	a807      	add	r0, sp, #28
 801c8e6:	f7fb fb0e 	bl	8017f06 <_ZNK8touchgfx4Rect7isEmptyEv>
 801c8ea:	b920      	cbnz	r0, 801c8f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x54a>
 801c8ec:	6823      	ldr	r3, [r4, #0]
 801c8ee:	a907      	add	r1, sp, #28
 801c8f0:	4620      	mov	r0, r4
 801c8f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c8f4:	4798      	blx	r3
 801c8f6:	3601      	adds	r6, #1
 801c8f8:	b2b6      	uxth	r6, r6
 801c8fa:	e7e7      	b.n	801c8cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 801c8fc:	2400baf0 	.word	0x2400baf0

0801c900 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801c900:	4b03      	ldr	r3, [pc, #12]	; (801c910 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801c902:	2200      	movs	r2, #0
 801c904:	801a      	strh	r2, [r3, #0]
 801c906:	805a      	strh	r2, [r3, #2]
 801c908:	809a      	strh	r2, [r3, #4]
 801c90a:	80da      	strh	r2, [r3, #6]
 801c90c:	4770      	bx	lr
 801c90e:	bf00      	nop
 801c910:	2400bb34 	.word	0x2400bb34

0801c914 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801c914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c918:	b09d      	sub	sp, #116	; 0x74
 801c91a:	4606      	mov	r6, r0
 801c91c:	4614      	mov	r4, r2
 801c91e:	468a      	mov	sl, r1
 801c920:	a803      	add	r0, sp, #12
 801c922:	461d      	mov	r5, r3
 801c924:	f000 fea0 	bl	801d668 <_ZN8touchgfx12TextProviderC1Ev>
 801c928:	6833      	ldr	r3, [r6, #0]
 801c92a:	4630      	mov	r0, r6
 801c92c:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801c930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c932:	4798      	blx	r3
 801c934:	6833      	ldr	r3, [r6, #0]
 801c936:	4607      	mov	r7, r0
 801c938:	4630      	mov	r0, r6
 801c93a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c93c:	4798      	blx	r3
 801c93e:	462a      	mov	r2, r5
 801c940:	2500      	movs	r5, #0
 801c942:	4621      	mov	r1, r4
 801c944:	9000      	str	r0, [sp, #0]
 801c946:	463b      	mov	r3, r7
 801c948:	462c      	mov	r4, r5
 801c94a:	46a9      	mov	r9, r5
 801c94c:	46a8      	mov	r8, r5
 801c94e:	a803      	add	r0, sp, #12
 801c950:	f000 fee5 	bl	801d71e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c954:	2300      	movs	r3, #0
 801c956:	9302      	str	r3, [sp, #8]
 801c958:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801c95c:	429c      	cmp	r4, r3
 801c95e:	d002      	beq.n	801c966 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801c960:	455c      	cmp	r4, fp
 801c962:	bf18      	it	ne
 801c964:	4625      	movne	r5, r4
 801c966:	ab02      	add	r3, sp, #8
 801c968:	4632      	mov	r2, r6
 801c96a:	4651      	mov	r1, sl
 801c96c:	a803      	add	r0, sp, #12
 801c96e:	f001 f9db 	bl	801dd28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c972:	4604      	mov	r4, r0
 801c974:	b108      	cbz	r0, 801c97a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801c976:	280a      	cmp	r0, #10
 801c978:	d10a      	bne.n	801c990 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801c97a:	45c1      	cmp	r9, r8
 801c97c:	bf38      	it	cc
 801c97e:	46c1      	movcc	r9, r8
 801c980:	f04f 0800 	mov.w	r8, #0
 801c984:	2c00      	cmp	r4, #0
 801c986:	d1e5      	bne.n	801c954 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801c988:	4648      	mov	r0, r9
 801c98a:	b01d      	add	sp, #116	; 0x74
 801c98c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c990:	9a02      	ldr	r2, [sp, #8]
 801c992:	2a00      	cmp	r2, #0
 801c994:	d0de      	beq.n	801c954 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801c996:	7b57      	ldrb	r7, [r2, #13]
 801c998:	4629      	mov	r1, r5
 801c99a:	6833      	ldr	r3, [r6, #0]
 801c99c:	007f      	lsls	r7, r7, #1
 801c99e:	8894      	ldrh	r4, [r2, #4]
 801c9a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c9a2:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801c9a6:	7a97      	ldrb	r7, [r2, #10]
 801c9a8:	4307      	orrs	r7, r0
 801c9aa:	4630      	mov	r0, r6
 801c9ac:	4798      	blx	r3
 801c9ae:	4438      	add	r0, r7
 801c9b0:	4480      	add	r8, r0
 801c9b2:	fa1f f888 	uxth.w	r8, r8
 801c9b6:	e7e5      	b.n	801c984 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801c9b8 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801c9b8:	b508      	push	{r3, lr}
 801c9ba:	6803      	ldr	r3, [r0, #0]
 801c9bc:	68db      	ldr	r3, [r3, #12]
 801c9be:	4798      	blx	r3
 801c9c0:	b128      	cbz	r0, 801c9ce <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801c9c2:	7b43      	ldrb	r3, [r0, #13]
 801c9c4:	7a80      	ldrb	r0, [r0, #10]
 801c9c6:	005b      	lsls	r3, r3, #1
 801c9c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c9cc:	4318      	orrs	r0, r3
 801c9ce:	bd08      	pop	{r3, pc}

0801c9d0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801c9d0:	b40e      	push	{r1, r2, r3}
 801c9d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c9d4:	b09e      	sub	sp, #120	; 0x78
 801c9d6:	4605      	mov	r5, r0
 801c9d8:	ab23      	add	r3, sp, #140	; 0x8c
 801c9da:	a805      	add	r0, sp, #20
 801c9dc:	f853 4b04 	ldr.w	r4, [r3], #4
 801c9e0:	9303      	str	r3, [sp, #12]
 801c9e2:	f000 fe41 	bl	801d668 <_ZN8touchgfx12TextProviderC1Ev>
 801c9e6:	682b      	ldr	r3, [r5, #0]
 801c9e8:	4628      	mov	r0, r5
 801c9ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c9ec:	4798      	blx	r3
 801c9ee:	682b      	ldr	r3, [r5, #0]
 801c9f0:	4606      	mov	r6, r0
 801c9f2:	4628      	mov	r0, r5
 801c9f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c9f6:	4798      	blx	r3
 801c9f8:	4633      	mov	r3, r6
 801c9fa:	4621      	mov	r1, r4
 801c9fc:	ae1e      	add	r6, sp, #120	; 0x78
 801c9fe:	2400      	movs	r4, #0
 801ca00:	9000      	str	r0, [sp, #0]
 801ca02:	9a03      	ldr	r2, [sp, #12]
 801ca04:	a805      	add	r0, sp, #20
 801ca06:	f000 fe8a 	bl	801d71e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801ca0a:	f846 4d68 	str.w	r4, [r6, #-104]!
 801ca0e:	462a      	mov	r2, r5
 801ca10:	4633      	mov	r3, r6
 801ca12:	4621      	mov	r1, r4
 801ca14:	a805      	add	r0, sp, #20
 801ca16:	f001 f987 	bl	801dd28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801ca1a:	b300      	cbz	r0, 801ca5e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801ca1c:	280a      	cmp	r0, #10
 801ca1e:	d01a      	beq.n	801ca56 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801ca20:	9f04      	ldr	r7, [sp, #16]
 801ca22:	b1c7      	cbz	r7, 801ca56 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801ca24:	7b78      	ldrb	r0, [r7, #13]
 801ca26:	7a3b      	ldrb	r3, [r7, #8]
 801ca28:	00c1      	lsls	r1, r0, #3
 801ca2a:	88ea      	ldrh	r2, [r5, #6]
 801ca2c:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801ca30:	4319      	orrs	r1, r3
 801ca32:	0643      	lsls	r3, r0, #25
 801ca34:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801ca38:	bf48      	it	mi
 801ca3a:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801ca3e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801ca42:	bf48      	it	mi
 801ca44:	b219      	sxthmi	r1, r3
 801ca46:	79fb      	ldrb	r3, [r7, #7]
 801ca48:	4303      	orrs	r3, r0
 801ca4a:	4413      	add	r3, r2
 801ca4c:	1a5b      	subs	r3, r3, r1
 801ca4e:	b21b      	sxth	r3, r3
 801ca50:	429c      	cmp	r4, r3
 801ca52:	bfb8      	it	lt
 801ca54:	461c      	movlt	r4, r3
 801ca56:	4633      	mov	r3, r6
 801ca58:	462a      	mov	r2, r5
 801ca5a:	2100      	movs	r1, #0
 801ca5c:	e7da      	b.n	801ca14 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801ca5e:	b2a0      	uxth	r0, r4
 801ca60:	b01e      	add	sp, #120	; 0x78
 801ca62:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801ca66:	b003      	add	sp, #12
 801ca68:	4770      	bx	lr

0801ca6a <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801ca6a:	7a43      	ldrb	r3, [r0, #9]
 801ca6c:	8880      	ldrh	r0, [r0, #4]
 801ca6e:	4418      	add	r0, r3
 801ca70:	b280      	uxth	r0, r0
 801ca72:	4770      	bx	lr

0801ca74 <_ZNK8touchgfx4Font13getFontHeightEv>:
 801ca74:	6803      	ldr	r3, [r0, #0]
 801ca76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ca78:	4718      	bx	r3

0801ca7a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801ca7a:	b40e      	push	{r1, r2, r3}
 801ca7c:	b570      	push	{r4, r5, r6, lr}
 801ca7e:	b09d      	sub	sp, #116	; 0x74
 801ca80:	4604      	mov	r4, r0
 801ca82:	ab21      	add	r3, sp, #132	; 0x84
 801ca84:	a803      	add	r0, sp, #12
 801ca86:	f853 5b04 	ldr.w	r5, [r3], #4
 801ca8a:	9302      	str	r3, [sp, #8]
 801ca8c:	f000 fdec 	bl	801d668 <_ZN8touchgfx12TextProviderC1Ev>
 801ca90:	6823      	ldr	r3, [r4, #0]
 801ca92:	4620      	mov	r0, r4
 801ca94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ca96:	4798      	blx	r3
 801ca98:	6823      	ldr	r3, [r4, #0]
 801ca9a:	4606      	mov	r6, r0
 801ca9c:	4620      	mov	r0, r4
 801ca9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801caa0:	2401      	movs	r4, #1
 801caa2:	4798      	blx	r3
 801caa4:	4633      	mov	r3, r6
 801caa6:	9000      	str	r0, [sp, #0]
 801caa8:	4629      	mov	r1, r5
 801caaa:	9a02      	ldr	r2, [sp, #8]
 801caac:	a803      	add	r0, sp, #12
 801caae:	f000 fe36 	bl	801d71e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801cab2:	a803      	add	r0, sp, #12
 801cab4:	f001 fa04 	bl	801dec0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801cab8:	b2a3      	uxth	r3, r4
 801caba:	b138      	cbz	r0, 801cacc <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801cabc:	280a      	cmp	r0, #10
 801cabe:	a803      	add	r0, sp, #12
 801cac0:	bf04      	itt	eq
 801cac2:	3301      	addeq	r3, #1
 801cac4:	b21c      	sxtheq	r4, r3
 801cac6:	f001 f9fb 	bl	801dec0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801caca:	e7f5      	b.n	801cab8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801cacc:	4618      	mov	r0, r3
 801cace:	b01d      	add	sp, #116	; 0x74
 801cad0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cad4:	b003      	add	sp, #12
 801cad6:	4770      	bx	lr

0801cad8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801cad8:	b40e      	push	{r1, r2, r3}
 801cada:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cadc:	b09e      	sub	sp, #120	; 0x78
 801cade:	4604      	mov	r4, r0
 801cae0:	ab23      	add	r3, sp, #140	; 0x8c
 801cae2:	a805      	add	r0, sp, #20
 801cae4:	f853 5b04 	ldr.w	r5, [r3], #4
 801cae8:	9303      	str	r3, [sp, #12]
 801caea:	f000 fdbd 	bl	801d668 <_ZN8touchgfx12TextProviderC1Ev>
 801caee:	6823      	ldr	r3, [r4, #0]
 801caf0:	4620      	mov	r0, r4
 801caf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801caf4:	4798      	blx	r3
 801caf6:	6823      	ldr	r3, [r4, #0]
 801caf8:	4606      	mov	r6, r0
 801cafa:	4620      	mov	r0, r4
 801cafc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cafe:	4798      	blx	r3
 801cb00:	4633      	mov	r3, r6
 801cb02:	4629      	mov	r1, r5
 801cb04:	9000      	str	r0, [sp, #0]
 801cb06:	9a03      	ldr	r2, [sp, #12]
 801cb08:	a805      	add	r0, sp, #20
 801cb0a:	f000 fe08 	bl	801d71e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801cb0e:	ad1e      	add	r5, sp, #120	; 0x78
 801cb10:	2100      	movs	r1, #0
 801cb12:	f647 76ff 	movw	r6, #32767	; 0x7fff
 801cb16:	4622      	mov	r2, r4
 801cb18:	a805      	add	r0, sp, #20
 801cb1a:	f845 1d68 	str.w	r1, [r5, #-104]!
 801cb1e:	462b      	mov	r3, r5
 801cb20:	f001 f902 	bl	801dd28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801cb24:	b1d8      	cbz	r0, 801cb5e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 801cb26:	280a      	cmp	r0, #10
 801cb28:	d012      	beq.n	801cb50 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801cb2a:	9804      	ldr	r0, [sp, #16]
 801cb2c:	b180      	cbz	r0, 801cb50 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801cb2e:	7b47      	ldrb	r7, [r0, #13]
 801cb30:	88e2      	ldrh	r2, [r4, #6]
 801cb32:	00fb      	lsls	r3, r7, #3
 801cb34:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801cb38:	7a03      	ldrb	r3, [r0, #8]
 801cb3a:	430b      	orrs	r3, r1
 801cb3c:	0679      	lsls	r1, r7, #25
 801cb3e:	bf44      	itt	mi
 801cb40:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801cb44:	b21b      	sxthmi	r3, r3
 801cb46:	1ad3      	subs	r3, r2, r3
 801cb48:	b21b      	sxth	r3, r3
 801cb4a:	429e      	cmp	r6, r3
 801cb4c:	bfa8      	it	ge
 801cb4e:	461e      	movge	r6, r3
 801cb50:	462b      	mov	r3, r5
 801cb52:	4622      	mov	r2, r4
 801cb54:	2100      	movs	r1, #0
 801cb56:	a805      	add	r0, sp, #20
 801cb58:	f001 f8e6 	bl	801dd28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801cb5c:	e7e2      	b.n	801cb24 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801cb5e:	4630      	mov	r0, r6
 801cb60:	b01e      	add	sp, #120	; 0x78
 801cb62:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801cb66:	b003      	add	sp, #12
 801cb68:	4770      	bx	lr

0801cb6a <_ZNK8touchgfx8Drawable10invalidateEv>:
 801cb6a:	b513      	push	{r0, r1, r4, lr}
 801cb6c:	6803      	ldr	r3, [r0, #0]
 801cb6e:	2400      	movs	r4, #0
 801cb70:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801cb74:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801cb78:	f8ad 1004 	strh.w	r1, [sp, #4]
 801cb7c:	4669      	mov	r1, sp
 801cb7e:	691b      	ldr	r3, [r3, #16]
 801cb80:	9400      	str	r4, [sp, #0]
 801cb82:	f8ad 2006 	strh.w	r2, [sp, #6]
 801cb86:	4798      	blx	r3
 801cb88:	b002      	add	sp, #8
 801cb8a:	bd10      	pop	{r4, pc}

0801cb8c <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801cb8c:	b538      	push	{r3, r4, r5, lr}
 801cb8e:	680b      	ldr	r3, [r1, #0]
 801cb90:	460c      	mov	r4, r1
 801cb92:	4605      	mov	r5, r0
 801cb94:	68db      	ldr	r3, [r3, #12]
 801cb96:	4798      	blx	r3
 801cb98:	6823      	ldr	r3, [r4, #0]
 801cb9a:	4620      	mov	r0, r4
 801cb9c:	4629      	mov	r1, r5
 801cb9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cba0:	4798      	blx	r3
 801cba2:	4628      	mov	r0, r5
 801cba4:	bd38      	pop	{r3, r4, r5, pc}

0801cba6 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801cba6:	b410      	push	{r4}
 801cba8:	880a      	ldrh	r2, [r1, #0]
 801cbaa:	8884      	ldrh	r4, [r0, #4]
 801cbac:	4422      	add	r2, r4
 801cbae:	800a      	strh	r2, [r1, #0]
 801cbb0:	884a      	ldrh	r2, [r1, #2]
 801cbb2:	88c4      	ldrh	r4, [r0, #6]
 801cbb4:	4422      	add	r2, r4
 801cbb6:	804a      	strh	r2, [r1, #2]
 801cbb8:	6940      	ldr	r0, [r0, #20]
 801cbba:	b120      	cbz	r0, 801cbc6 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801cbbc:	6803      	ldr	r3, [r0, #0]
 801cbbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cbc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cbc4:	4718      	bx	r3
 801cbc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cbca:	4770      	bx	lr

0801cbcc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801cbcc:	b570      	push	{r4, r5, r6, lr}
 801cbce:	8882      	ldrh	r2, [r0, #4]
 801cbd0:	460c      	mov	r4, r1
 801cbd2:	880b      	ldrh	r3, [r1, #0]
 801cbd4:	4605      	mov	r5, r0
 801cbd6:	4413      	add	r3, r2
 801cbd8:	800b      	strh	r3, [r1, #0]
 801cbda:	884b      	ldrh	r3, [r1, #2]
 801cbdc:	88c2      	ldrh	r2, [r0, #6]
 801cbde:	4413      	add	r3, r2
 801cbe0:	804b      	strh	r3, [r1, #2]
 801cbe2:	1d01      	adds	r1, r0, #4
 801cbe4:	4620      	mov	r0, r4
 801cbe6:	f7fb f94b 	bl	8017e80 <_ZN8touchgfx4RectaNERKS0_>
 801cbea:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801cbee:	2b00      	cmp	r3, #0
 801cbf0:	dd0b      	ble.n	801cc0a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801cbf2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801cbf6:	2b00      	cmp	r3, #0
 801cbf8:	dd07      	ble.n	801cc0a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801cbfa:	6968      	ldr	r0, [r5, #20]
 801cbfc:	b128      	cbz	r0, 801cc0a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801cbfe:	6803      	ldr	r3, [r0, #0]
 801cc00:	4621      	mov	r1, r4
 801cc02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cc04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cc08:	4718      	bx	r3
 801cc0a:	bd70      	pop	{r4, r5, r6, pc}

0801cc0c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801cc0c:	b570      	push	{r4, r5, r6, lr}
 801cc0e:	8882      	ldrh	r2, [r0, #4]
 801cc10:	460c      	mov	r4, r1
 801cc12:	880b      	ldrh	r3, [r1, #0]
 801cc14:	4605      	mov	r5, r0
 801cc16:	4413      	add	r3, r2
 801cc18:	800b      	strh	r3, [r1, #0]
 801cc1a:	884b      	ldrh	r3, [r1, #2]
 801cc1c:	88c2      	ldrh	r2, [r0, #6]
 801cc1e:	4413      	add	r3, r2
 801cc20:	804b      	strh	r3, [r1, #2]
 801cc22:	1d01      	adds	r1, r0, #4
 801cc24:	4620      	mov	r0, r4
 801cc26:	f7fb f92b 	bl	8017e80 <_ZN8touchgfx4RectaNERKS0_>
 801cc2a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801cc2e:	2b00      	cmp	r3, #0
 801cc30:	dd19      	ble.n	801cc66 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801cc32:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801cc36:	2b00      	cmp	r3, #0
 801cc38:	dd15      	ble.n	801cc66 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801cc3a:	6968      	ldr	r0, [r5, #20]
 801cc3c:	b128      	cbz	r0, 801cc4a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801cc3e:	6803      	ldr	r3, [r0, #0]
 801cc40:	4621      	mov	r1, r4
 801cc42:	691b      	ldr	r3, [r3, #16]
 801cc44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cc48:	4718      	bx	r3
 801cc4a:	4b07      	ldr	r3, [pc, #28]	; (801cc68 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801cc4c:	681b      	ldr	r3, [r3, #0]
 801cc4e:	3304      	adds	r3, #4
 801cc50:	429d      	cmp	r5, r3
 801cc52:	d108      	bne.n	801cc66 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801cc54:	f7fe fe9e 	bl	801b994 <_ZN8touchgfx11Application11getInstanceEv>
 801cc58:	6803      	ldr	r3, [r0, #0]
 801cc5a:	6821      	ldr	r1, [r4, #0]
 801cc5c:	6862      	ldr	r2, [r4, #4]
 801cc5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cc60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cc64:	4718      	bx	r3
 801cc66:	bd70      	pop	{r4, r5, r6, pc}
 801cc68:	2400bb2c 	.word	0x2400bb2c

0801cc6c <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801cc6c:	b570      	push	{r4, r5, r6, lr}
 801cc6e:	4604      	mov	r4, r0
 801cc70:	4616      	mov	r6, r2
 801cc72:	460d      	mov	r5, r1
 801cc74:	b901      	cbnz	r1, 801cc78 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801cc76:	b192      	cbz	r2, 801cc9e <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801cc78:	6823      	ldr	r3, [r4, #0]
 801cc7a:	4620      	mov	r0, r4
 801cc7c:	699b      	ldr	r3, [r3, #24]
 801cc7e:	4798      	blx	r3
 801cc80:	88e2      	ldrh	r2, [r4, #6]
 801cc82:	88a1      	ldrh	r1, [r4, #4]
 801cc84:	4620      	mov	r0, r4
 801cc86:	4432      	add	r2, r6
 801cc88:	4429      	add	r1, r5
 801cc8a:	b212      	sxth	r2, r2
 801cc8c:	b209      	sxth	r1, r1
 801cc8e:	f7e7 fa56 	bl	800413e <_ZN8touchgfx8Drawable5setXYEss>
 801cc92:	6823      	ldr	r3, [r4, #0]
 801cc94:	4620      	mov	r0, r4
 801cc96:	699b      	ldr	r3, [r3, #24]
 801cc98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cc9c:	4718      	bx	r3
 801cc9e:	bd70      	pop	{r4, r5, r6, pc}

0801cca0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801cca0:	b510      	push	{r4, lr}
 801cca2:	2300      	movs	r3, #0
 801cca4:	4604      	mov	r4, r0
 801cca6:	4608      	mov	r0, r1
 801cca8:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801ccac:	8023      	strh	r3, [r4, #0]
 801ccae:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801ccb2:	8063      	strh	r3, [r4, #2]
 801ccb4:	6803      	ldr	r3, [r0, #0]
 801ccb6:	80a1      	strh	r1, [r4, #4]
 801ccb8:	4621      	mov	r1, r4
 801ccba:	80e2      	strh	r2, [r4, #6]
 801ccbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ccbe:	4798      	blx	r3
 801ccc0:	4620      	mov	r0, r4
 801ccc2:	bd10      	pop	{r4, pc}

0801ccc4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 801ccc4:	b530      	push	{r4, r5, lr}
 801ccc6:	8083      	strh	r3, [r0, #4]
 801ccc8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801cccc:	f89d 5018 	ldrb.w	r5, [sp, #24]
 801ccd0:	80c3      	strh	r3, [r0, #6]
 801ccd2:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801ccd6:	6141      	str	r1, [r0, #20]
 801ccd8:	7203      	strb	r3, [r0, #8]
 801ccda:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801ccde:	8302      	strh	r2, [r0, #24]
 801cce0:	7243      	strb	r3, [r0, #9]
 801cce2:	7a83      	ldrb	r3, [r0, #10]
 801cce4:	f365 0306 	bfi	r3, r5, #0, #7
 801cce8:	f89d 501c 	ldrb.w	r5, [sp, #28]
 801ccec:	f365 13c7 	bfi	r3, r5, #7, #1
 801ccf0:	7283      	strb	r3, [r0, #10]
 801ccf2:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801ccf6:	72c3      	strb	r3, [r0, #11]
 801ccf8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 801ccfc:	7303      	strb	r3, [r0, #12]
 801ccfe:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801cd02:	81c3      	strh	r3, [r0, #14]
 801cd04:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 801cd08:	8203      	strh	r3, [r0, #16]
 801cd0a:	4b01      	ldr	r3, [pc, #4]	; (801cd10 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 801cd0c:	6003      	str	r3, [r0, #0]
 801cd0e:	bd30      	pop	{r4, r5, pc}
 801cd10:	0802fb38 	.word	0x0802fb38

0801cd14 <_ZNK8touchgfx9ConstFont4findEt>:
 801cd14:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cd16:	6944      	ldr	r4, [r0, #20]
 801cd18:	b3bc      	cbz	r4, 801cd8a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801cd1a:	88a3      	ldrh	r3, [r4, #4]
 801cd1c:	8b02      	ldrh	r2, [r0, #24]
 801cd1e:	1acb      	subs	r3, r1, r3
 801cd20:	f102 32ff 	add.w	r2, r2, #4294967295
 801cd24:	d431      	bmi.n	801cd8a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801cd26:	4293      	cmp	r3, r2
 801cd28:	dd0c      	ble.n	801cd44 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801cd2a:	230e      	movs	r3, #14
 801cd2c:	fb03 4302 	mla	r3, r3, r2, r4
 801cd30:	889b      	ldrh	r3, [r3, #4]
 801cd32:	1a5b      	subs	r3, r3, r1
 801cd34:	1ad3      	subs	r3, r2, r3
 801cd36:	429a      	cmp	r2, r3
 801cd38:	db27      	blt.n	801cd8a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801cd3a:	2b00      	cmp	r3, #0
 801cd3c:	bfbc      	itt	lt
 801cd3e:	2302      	movlt	r3, #2
 801cd40:	fb92 f3f3 	sdivlt	r3, r2, r3
 801cd44:	2500      	movs	r5, #0
 801cd46:	260e      	movs	r6, #14
 801cd48:	4295      	cmp	r5, r2
 801cd4a:	dc1e      	bgt.n	801cd8a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801cd4c:	fb06 4003 	mla	r0, r6, r3, r4
 801cd50:	8887      	ldrh	r7, [r0, #4]
 801cd52:	42b9      	cmp	r1, r7
 801cd54:	d01a      	beq.n	801cd8c <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801cd56:	d20d      	bcs.n	801cd74 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801cd58:	1e5a      	subs	r2, r3, #1
 801cd5a:	4295      	cmp	r5, r2
 801cd5c:	dc15      	bgt.n	801cd8a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801cd5e:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801cd62:	1a5b      	subs	r3, r3, r1
 801cd64:	1ad3      	subs	r3, r2, r3
 801cd66:	429a      	cmp	r2, r3
 801cd68:	db0f      	blt.n	801cd8a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801cd6a:	429d      	cmp	r5, r3
 801cd6c:	ddec      	ble.n	801cd48 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801cd6e:	1953      	adds	r3, r2, r5
 801cd70:	105b      	asrs	r3, r3, #1
 801cd72:	e7e9      	b.n	801cd48 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801cd74:	1c5d      	adds	r5, r3, #1
 801cd76:	42aa      	cmp	r2, r5
 801cd78:	db07      	blt.n	801cd8a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801cd7a:	8a43      	ldrh	r3, [r0, #18]
 801cd7c:	1acb      	subs	r3, r1, r3
 801cd7e:	442b      	add	r3, r5
 801cd80:	429d      	cmp	r5, r3
 801cd82:	dc02      	bgt.n	801cd8a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801cd84:	429a      	cmp	r2, r3
 801cd86:	dadf      	bge.n	801cd48 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801cd88:	e7f1      	b.n	801cd6e <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801cd8a:	2000      	movs	r0, #0
 801cd8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cd8e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801cd8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cd90:	4604      	mov	r4, r0
 801cd92:	4617      	mov	r7, r2
 801cd94:	461e      	mov	r6, r3
 801cd96:	b911      	cbnz	r1, 801cd9e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801cd98:	2500      	movs	r5, #0
 801cd9a:	4628      	mov	r0, r5
 801cd9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cd9e:	290a      	cmp	r1, #10
 801cda0:	d0fa      	beq.n	801cd98 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801cda2:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801cda6:	4291      	cmp	r1, r2
 801cda8:	d0f6      	beq.n	801cd98 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801cdaa:	f242 020b 	movw	r2, #8203	; 0x200b
 801cdae:	4291      	cmp	r1, r2
 801cdb0:	d0f2      	beq.n	801cd98 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801cdb2:	f7ff ffaf 	bl	801cd14 <_ZNK8touchgfx9ConstFont4findEt>
 801cdb6:	4605      	mov	r5, r0
 801cdb8:	b950      	cbnz	r0, 801cdd0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801cdba:	6823      	ldr	r3, [r4, #0]
 801cdbc:	4620      	mov	r0, r4
 801cdbe:	691b      	ldr	r3, [r3, #16]
 801cdc0:	4798      	blx	r3
 801cdc2:	4601      	mov	r1, r0
 801cdc4:	4620      	mov	r0, r4
 801cdc6:	f7ff ffa5 	bl	801cd14 <_ZNK8touchgfx9ConstFont4findEt>
 801cdca:	4605      	mov	r5, r0
 801cdcc:	2800      	cmp	r0, #0
 801cdce:	d0e3      	beq.n	801cd98 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801cdd0:	6823      	ldr	r3, [r4, #0]
 801cdd2:	4629      	mov	r1, r5
 801cdd4:	4620      	mov	r0, r4
 801cdd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cdd8:	4798      	blx	r3
 801cdda:	6038      	str	r0, [r7, #0]
 801cddc:	6823      	ldr	r3, [r4, #0]
 801cdde:	4620      	mov	r0, r4
 801cde0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cde2:	4798      	blx	r3
 801cde4:	7030      	strb	r0, [r6, #0]
 801cde6:	e7d8      	b.n	801cd9a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801cde8 <_ZN8touchgfx4clzuEm>:
 801cde8:	4603      	mov	r3, r0
 801cdea:	b1c8      	cbz	r0, 801ce20 <_ZN8touchgfx4clzuEm+0x38>
 801cdec:	0c02      	lsrs	r2, r0, #16
 801cdee:	0412      	lsls	r2, r2, #16
 801cdf0:	b9a2      	cbnz	r2, 801ce1c <_ZN8touchgfx4clzuEm+0x34>
 801cdf2:	0403      	lsls	r3, r0, #16
 801cdf4:	2010      	movs	r0, #16
 801cdf6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801cdfa:	bf04      	itt	eq
 801cdfc:	021b      	lsleq	r3, r3, #8
 801cdfe:	3008      	addeq	r0, #8
 801ce00:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801ce04:	bf04      	itt	eq
 801ce06:	011b      	lsleq	r3, r3, #4
 801ce08:	3004      	addeq	r0, #4
 801ce0a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801ce0e:	bf04      	itt	eq
 801ce10:	009b      	lsleq	r3, r3, #2
 801ce12:	3002      	addeq	r0, #2
 801ce14:	2b00      	cmp	r3, #0
 801ce16:	db04      	blt.n	801ce22 <_ZN8touchgfx4clzuEm+0x3a>
 801ce18:	3001      	adds	r0, #1
 801ce1a:	4770      	bx	lr
 801ce1c:	2000      	movs	r0, #0
 801ce1e:	e7ea      	b.n	801cdf6 <_ZN8touchgfx4clzuEm+0xe>
 801ce20:	2020      	movs	r0, #32
 801ce22:	4770      	bx	lr

0801ce24 <_ZN8touchgfx7muldivuEmmmRm>:
 801ce24:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801ce28:	460f      	mov	r7, r1
 801ce2a:	4615      	mov	r5, r2
 801ce2c:	461e      	mov	r6, r3
 801ce2e:	4601      	mov	r1, r0
 801ce30:	b100      	cbz	r0, 801ce34 <_ZN8touchgfx7muldivuEmmmRm+0x10>
 801ce32:	b927      	cbnz	r7, 801ce3e <_ZN8touchgfx7muldivuEmmmRm+0x1a>
 801ce34:	2000      	movs	r0, #0
 801ce36:	6030      	str	r0, [r6, #0]
 801ce38:	b002      	add	sp, #8
 801ce3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ce3e:	f7ff ffd3 	bl	801cde8 <_ZN8touchgfx4clzuEm>
 801ce42:	b980      	cbnz	r0, 801ce66 <_ZN8touchgfx7muldivuEmmmRm+0x42>
 801ce44:	4638      	mov	r0, r7
 801ce46:	f7ff ffcf 	bl	801cde8 <_ZN8touchgfx4clzuEm>
 801ce4a:	2800      	cmp	r0, #0
 801ce4c:	dd05      	ble.n	801ce5a <_ZN8touchgfx7muldivuEmmmRm+0x36>
 801ce4e:	4633      	mov	r3, r6
 801ce50:	462a      	mov	r2, r5
 801ce52:	4638      	mov	r0, r7
 801ce54:	f7ff ffe6 	bl	801ce24 <_ZN8touchgfx7muldivuEmmmRm>
 801ce58:	e7ee      	b.n	801ce38 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 801ce5a:	f04f 33ff 	mov.w	r3, #4294967295
 801ce5e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801ce62:	6033      	str	r3, [r6, #0]
 801ce64:	e7e8      	b.n	801ce38 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 801ce66:	fa37 f800 	lsrs.w	r8, r7, r0
 801ce6a:	fb07 f301 	mul.w	r3, r7, r1
 801ce6e:	d105      	bne.n	801ce7c <_ZN8touchgfx7muldivuEmmmRm+0x58>
 801ce70:	fbb3 f0f5 	udiv	r0, r3, r5
 801ce74:	fb05 3510 	mls	r5, r5, r0, r3
 801ce78:	6035      	str	r5, [r6, #0]
 801ce7a:	e7dd      	b.n	801ce38 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 801ce7c:	2301      	movs	r3, #1
 801ce7e:	fa01 fa00 	lsl.w	sl, r1, r0
 801ce82:	462a      	mov	r2, r5
 801ce84:	fa03 f000 	lsl.w	r0, r3, r0
 801ce88:	4633      	mov	r3, r6
 801ce8a:	fbba f9f5 	udiv	r9, sl, r5
 801ce8e:	3801      	subs	r0, #1
 801ce90:	fb08 f409 	mul.w	r4, r8, r9
 801ce94:	4038      	ands	r0, r7
 801ce96:	f7ff ffc5 	bl	801ce24 <_ZN8touchgfx7muldivuEmmmRm>
 801ce9a:	462a      	mov	r2, r5
 801ce9c:	4607      	mov	r7, r0
 801ce9e:	ab01      	add	r3, sp, #4
 801cea0:	fb05 a119 	mls	r1, r5, r9, sl
 801cea4:	4640      	mov	r0, r8
 801cea6:	f7ff ffbd 	bl	801ce24 <_ZN8touchgfx7muldivuEmmmRm>
 801ceaa:	9b01      	ldr	r3, [sp, #4]
 801ceac:	6832      	ldr	r2, [r6, #0]
 801ceae:	441a      	add	r2, r3
 801ceb0:	fbb2 f3f5 	udiv	r3, r2, r5
 801ceb4:	441c      	add	r4, r3
 801ceb6:	fb05 2513 	mls	r5, r5, r3, r2
 801ceba:	443c      	add	r4, r7
 801cebc:	4420      	add	r0, r4
 801cebe:	e7db      	b.n	801ce78 <_ZN8touchgfx7muldivuEmmmRm+0x54>

0801cec0 <_ZN8touchgfx6muldivElllRl>:
 801cec0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801cec2:	2800      	cmp	r0, #0
 801cec4:	461e      	mov	r6, r3
 801cec6:	bfba      	itte	lt
 801cec8:	4240      	neglt	r0, r0
 801ceca:	f04f 34ff 	movlt.w	r4, #4294967295
 801cece:	2401      	movge	r4, #1
 801ced0:	2900      	cmp	r1, #0
 801ced2:	bfbc      	itt	lt
 801ced4:	4249      	neglt	r1, r1
 801ced6:	4264      	neglt	r4, r4
 801ced8:	2a00      	cmp	r2, #0
 801ceda:	bfb6      	itet	lt
 801cedc:	4265      	neglt	r5, r4
 801cede:	4625      	movge	r5, r4
 801cee0:	4252      	neglt	r2, r2
 801cee2:	4288      	cmp	r0, r1
 801cee4:	bfc2      	ittt	gt
 801cee6:	4603      	movgt	r3, r0
 801cee8:	4608      	movgt	r0, r1
 801ceea:	4619      	movgt	r1, r3
 801ceec:	ab01      	add	r3, sp, #4
 801ceee:	f7ff ff99 	bl	801ce24 <_ZN8touchgfx7muldivuEmmmRm>
 801cef2:	9b01      	ldr	r3, [sp, #4]
 801cef4:	4368      	muls	r0, r5
 801cef6:	435c      	muls	r4, r3
 801cef8:	6034      	str	r4, [r6, #0]
 801cefa:	b002      	add	sp, #8
 801cefc:	bd70      	pop	{r4, r5, r6, pc}

0801cefe <_ZN8touchgfx6muldivElll>:
 801cefe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801cf00:	4606      	mov	r6, r0
 801cf02:	ab01      	add	r3, sp, #4
 801cf04:	460d      	mov	r5, r1
 801cf06:	4614      	mov	r4, r2
 801cf08:	f7ff ffda 	bl	801cec0 <_ZN8touchgfx6muldivElllRl>
 801cf0c:	2e00      	cmp	r6, #0
 801cf0e:	db20      	blt.n	801cf52 <_ZN8touchgfx6muldivElll+0x54>
 801cf10:	bf14      	ite	ne
 801cf12:	2301      	movne	r3, #1
 801cf14:	2300      	moveq	r3, #0
 801cf16:	2d00      	cmp	r5, #0
 801cf18:	db1e      	blt.n	801cf58 <_ZN8touchgfx6muldivElll+0x5a>
 801cf1a:	bf14      	ite	ne
 801cf1c:	2201      	movne	r2, #1
 801cf1e:	2200      	moveq	r2, #0
 801cf20:	2c00      	cmp	r4, #0
 801cf22:	fb03 f202 	mul.w	r2, r3, r2
 801cf26:	db1a      	blt.n	801cf5e <_ZN8touchgfx6muldivElll+0x60>
 801cf28:	bf14      	ite	ne
 801cf2a:	2301      	movne	r3, #1
 801cf2c:	2300      	moveq	r3, #0
 801cf2e:	4353      	muls	r3, r2
 801cf30:	2b01      	cmp	r3, #1
 801cf32:	d117      	bne.n	801cf64 <_ZN8touchgfx6muldivElll+0x66>
 801cf34:	2c00      	cmp	r4, #0
 801cf36:	9b01      	ldr	r3, [sp, #4]
 801cf38:	bfb8      	it	lt
 801cf3a:	4264      	neglt	r4, r4
 801cf3c:	2b00      	cmp	r3, #0
 801cf3e:	f104 0401 	add.w	r4, r4, #1
 801cf42:	bfb8      	it	lt
 801cf44:	425b      	neglt	r3, r3
 801cf46:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 801cf4a:	db00      	blt.n	801cf4e <_ZN8touchgfx6muldivElll+0x50>
 801cf4c:	3001      	adds	r0, #1
 801cf4e:	b002      	add	sp, #8
 801cf50:	bd70      	pop	{r4, r5, r6, pc}
 801cf52:	f04f 33ff 	mov.w	r3, #4294967295
 801cf56:	e7de      	b.n	801cf16 <_ZN8touchgfx6muldivElll+0x18>
 801cf58:	f04f 32ff 	mov.w	r2, #4294967295
 801cf5c:	e7e0      	b.n	801cf20 <_ZN8touchgfx6muldivElll+0x22>
 801cf5e:	f04f 33ff 	mov.w	r3, #4294967295
 801cf62:	e7e4      	b.n	801cf2e <_ZN8touchgfx6muldivElll+0x30>
 801cf64:	3301      	adds	r3, #1
 801cf66:	d1f2      	bne.n	801cf4e <_ZN8touchgfx6muldivElll+0x50>
 801cf68:	9b01      	ldr	r3, [sp, #4]
 801cf6a:	2c00      	cmp	r4, #0
 801cf6c:	bfb8      	it	lt
 801cf6e:	4264      	neglt	r4, r4
 801cf70:	2b00      	cmp	r3, #0
 801cf72:	bfb8      	it	lt
 801cf74:	425b      	neglt	r3, r3
 801cf76:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 801cf7a:	bfc8      	it	gt
 801cf7c:	f100 30ff 	addgt.w	r0, r0, #4294967295
 801cf80:	e7e5      	b.n	801cf4e <_ZN8touchgfx6muldivElll+0x50>

0801cf82 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801cf82:	2000      	movs	r0, #0
 801cf84:	4770      	bx	lr

0801cf86 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801cf86:	2001      	movs	r0, #1
 801cf88:	4770      	bx	lr

0801cf8a <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801cf8a:	2002      	movs	r0, #2
 801cf8c:	4770      	bx	lr

0801cf8e <_ZN8touchgfx12GestureEventD1Ev>:
 801cf8e:	4770      	bx	lr

0801cf90 <_ZN8touchgfx9DragEventD1Ev>:
 801cf90:	4770      	bx	lr

0801cf92 <_ZN8touchgfx10ClickEventD1Ev>:
 801cf92:	4770      	bx	lr

0801cf94 <_ZN8touchgfx10ClickEventD0Ev>:
 801cf94:	b510      	push	{r4, lr}
 801cf96:	4604      	mov	r4, r0
 801cf98:	210c      	movs	r1, #12
 801cf9a:	f00f fb38 	bl	802c60e <_ZdlPvj>
 801cf9e:	4620      	mov	r0, r4
 801cfa0:	bd10      	pop	{r4, pc}

0801cfa2 <_ZN8touchgfx9DragEventD0Ev>:
 801cfa2:	b510      	push	{r4, lr}
 801cfa4:	4604      	mov	r4, r0
 801cfa6:	2110      	movs	r1, #16
 801cfa8:	f00f fb31 	bl	802c60e <_ZdlPvj>
 801cfac:	4620      	mov	r0, r4
 801cfae:	bd10      	pop	{r4, pc}

0801cfb0 <_ZN8touchgfx12GestureEventD0Ev>:
 801cfb0:	b510      	push	{r4, lr}
 801cfb2:	4604      	mov	r4, r0
 801cfb4:	210c      	movs	r1, #12
 801cfb6:	f00f fb2a 	bl	802c60e <_ZdlPvj>
 801cfba:	4620      	mov	r0, r4
 801cfbc:	bd10      	pop	{r4, pc}
	...

0801cfc0 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801cfc0:	b530      	push	{r4, r5, lr}
 801cfc2:	460d      	mov	r5, r1
 801cfc4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801cfc6:	b087      	sub	sp, #28
 801cfc8:	4604      	mov	r4, r0
 801cfca:	b301      	cbz	r1, 801d00e <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801cfcc:	a801      	add	r0, sp, #4
 801cfce:	f7ff fe67 	bl	801cca0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cfd2:	892a      	ldrh	r2, [r5, #8]
 801cfd4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801cfd8:	7928      	ldrb	r0, [r5, #4]
 801cfda:	1ad2      	subs	r2, r2, r3
 801cfdc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801cfde:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801cfe2:	441a      	add	r2, r3
 801cfe4:	896b      	ldrh	r3, [r5, #10]
 801cfe6:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801cfea:	f88d 0010 	strb.w	r0, [sp, #16]
 801cfee:	1b5b      	subs	r3, r3, r5
 801cff0:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801cff2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801cff4:	442b      	add	r3, r5
 801cff6:	4d07      	ldr	r5, [pc, #28]	; (801d014 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801cff8:	f8ad 1012 	strh.w	r1, [sp, #18]
 801cffc:	a903      	add	r1, sp, #12
 801cffe:	9503      	str	r5, [sp, #12]
 801d000:	f8ad 2014 	strh.w	r2, [sp, #20]
 801d004:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d008:	6803      	ldr	r3, [r0, #0]
 801d00a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d00c:	4798      	blx	r3
 801d00e:	b007      	add	sp, #28
 801d010:	bd30      	pop	{r4, r5, pc}
 801d012:	bf00      	nop
 801d014:	0802fbc0 	.word	0x0802fbc0

0801d018 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801d018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d01c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801d01e:	b08a      	sub	sp, #40	; 0x28
 801d020:	4604      	mov	r4, r0
 801d022:	460d      	mov	r5, r1
 801d024:	b113      	cbz	r3, 801d02c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801d026:	790b      	ldrb	r3, [r1, #4]
 801d028:	2b00      	cmp	r3, #0
 801d02a:	d044      	beq.n	801d0b6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801d02c:	f104 0804 	add.w	r8, r4, #4
 801d030:	a803      	add	r0, sp, #12
 801d032:	4641      	mov	r1, r8
 801d034:	f7ff fe34 	bl	801cca0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d038:	792b      	ldrb	r3, [r5, #4]
 801d03a:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801d03e:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801d042:	b983      	cbnz	r3, 801d066 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801d044:	f104 0336 	add.w	r3, r4, #54	; 0x36
 801d048:	892a      	ldrh	r2, [r5, #8]
 801d04a:	88e9      	ldrh	r1, [r5, #6]
 801d04c:	4640      	mov	r0, r8
 801d04e:	1b92      	subs	r2, r2, r6
 801d050:	9301      	str	r3, [sp, #4]
 801d052:	1bc9      	subs	r1, r1, r7
 801d054:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801d058:	b212      	sxth	r2, r2
 801d05a:	9300      	str	r3, [sp, #0]
 801d05c:	b209      	sxth	r1, r1
 801d05e:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801d062:	f7fa fe2b 	bl	8017cbc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801d066:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801d068:	b329      	cbz	r1, 801d0b6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801d06a:	a805      	add	r0, sp, #20
 801d06c:	f7ff fe18 	bl	801cca0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d070:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801d074:	792b      	ldrb	r3, [r5, #4]
 801d076:	a907      	add	r1, sp, #28
 801d078:	1abf      	subs	r7, r7, r2
 801d07a:	88ea      	ldrh	r2, [r5, #6]
 801d07c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801d07e:	4417      	add	r7, r2
 801d080:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801d082:	f88d 3020 	strb.w	r3, [sp, #32]
 801d086:	4417      	add	r7, r2
 801d088:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801d08c:	1ab6      	subs	r6, r6, r2
 801d08e:	892a      	ldrh	r2, [r5, #8]
 801d090:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801d094:	4416      	add	r6, r2
 801d096:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801d098:	4416      	add	r6, r2
 801d09a:	4a08      	ldr	r2, [pc, #32]	; (801d0bc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801d09c:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801d0a0:	2600      	movs	r6, #0
 801d0a2:	9207      	str	r2, [sp, #28]
 801d0a4:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 801d0a8:	6803      	ldr	r3, [r0, #0]
 801d0aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d0ac:	4798      	blx	r3
 801d0ae:	792b      	ldrb	r3, [r5, #4]
 801d0b0:	b10b      	cbz	r3, 801d0b6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801d0b2:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801d0b6:	b00a      	add	sp, #40	; 0x28
 801d0b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d0bc:	0802fb98 	.word	0x0802fb98

0801d0c0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801d0c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d0c4:	460c      	mov	r4, r1
 801d0c6:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801d0c8:	b088      	sub	sp, #32
 801d0ca:	4605      	mov	r5, r0
 801d0cc:	2900      	cmp	r1, #0
 801d0ce:	d06d      	beq.n	801d1ac <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801d0d0:	4668      	mov	r0, sp
 801d0d2:	f7ff fde5 	bl	801cca0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d0d6:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 801d0d8:	88e3      	ldrh	r3, [r4, #6]
 801d0da:	f9bd 8000 	ldrsh.w	r8, [sp]
 801d0de:	440b      	add	r3, r1
 801d0e0:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801d0e4:	b21b      	sxth	r3, r3
 801d0e6:	4543      	cmp	r3, r8
 801d0e8:	db31      	blt.n	801d14e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801d0ea:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801d0ee:	44c4      	add	ip, r8
 801d0f0:	fa0f fc8c 	sxth.w	ip, ip
 801d0f4:	4563      	cmp	r3, ip
 801d0f6:	da2a      	bge.n	801d14e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801d0f8:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801d0fa:	8926      	ldrh	r6, [r4, #8]
 801d0fc:	4416      	add	r6, r2
 801d0fe:	b236      	sxth	r6, r6
 801d100:	42be      	cmp	r6, r7
 801d102:	db24      	blt.n	801d14e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801d104:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801d108:	4438      	add	r0, r7
 801d10a:	b200      	sxth	r0, r0
 801d10c:	4286      	cmp	r6, r0
 801d10e:	da1e      	bge.n	801d14e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801d110:	8963      	ldrh	r3, [r4, #10]
 801d112:	4419      	add	r1, r3
 801d114:	b209      	sxth	r1, r1
 801d116:	4541      	cmp	r1, r8
 801d118:	db08      	blt.n	801d12c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801d11a:	4561      	cmp	r1, ip
 801d11c:	da06      	bge.n	801d12c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801d11e:	89a3      	ldrh	r3, [r4, #12]
 801d120:	441a      	add	r2, r3
 801d122:	b212      	sxth	r2, r2
 801d124:	42ba      	cmp	r2, r7
 801d126:	db01      	blt.n	801d12c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801d128:	4282      	cmp	r2, r0
 801d12a:	db10      	blt.n	801d14e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801d12c:	4b21      	ldr	r3, [pc, #132]	; (801d1b4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801d12e:	a904      	add	r1, sp, #16
 801d130:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801d132:	9304      	str	r3, [sp, #16]
 801d134:	2302      	movs	r3, #2
 801d136:	f88d 3014 	strb.w	r3, [sp, #20]
 801d13a:	2300      	movs	r3, #0
 801d13c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d140:	f8ad 3018 	strh.w	r3, [sp, #24]
 801d144:	f8ad 301a 	strh.w	r3, [sp, #26]
 801d148:	6803      	ldr	r3, [r0, #0]
 801d14a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d14c:	4798      	blx	r3
 801d14e:	1d29      	adds	r1, r5, #4
 801d150:	a802      	add	r0, sp, #8
 801d152:	f7ff fda5 	bl	801cca0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d156:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801d15a:	88e0      	ldrh	r0, [r4, #6]
 801d15c:	eba3 0808 	sub.w	r8, r3, r8
 801d160:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801d164:	7921      	ldrb	r1, [r4, #4]
 801d166:	fa1f f888 	uxth.w	r8, r8
 801d16a:	1bdf      	subs	r7, r3, r7
 801d16c:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801d170:	b2bb      	uxth	r3, r7
 801d172:	4440      	add	r0, r8
 801d174:	8922      	ldrh	r2, [r4, #8]
 801d176:	8967      	ldrh	r7, [r4, #10]
 801d178:	4460      	add	r0, ip
 801d17a:	89a4      	ldrh	r4, [r4, #12]
 801d17c:	441a      	add	r2, r3
 801d17e:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801d180:	44b8      	add	r8, r7
 801d182:	4423      	add	r3, r4
 801d184:	f8ad 0016 	strh.w	r0, [sp, #22]
 801d188:	4432      	add	r2, r6
 801d18a:	44e0      	add	r8, ip
 801d18c:	4433      	add	r3, r6
 801d18e:	4c0a      	ldr	r4, [pc, #40]	; (801d1b8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801d190:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801d192:	f88d 1014 	strb.w	r1, [sp, #20]
 801d196:	a904      	add	r1, sp, #16
 801d198:	9404      	str	r4, [sp, #16]
 801d19a:	f8ad 2018 	strh.w	r2, [sp, #24]
 801d19e:	f8ad 801a 	strh.w	r8, [sp, #26]
 801d1a2:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d1a6:	6803      	ldr	r3, [r0, #0]
 801d1a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d1aa:	4798      	blx	r3
 801d1ac:	b008      	add	sp, #32
 801d1ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d1b2:	bf00      	nop
 801d1b4:	0802fb98 	.word	0x0802fb98
 801d1b8:	0802fbac 	.word	0x0802fbac

0801d1bc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801d1bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d1be:	4604      	mov	r4, r0
 801d1c0:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801d1c4:	3201      	adds	r2, #1
 801d1c6:	d112      	bne.n	801d1ee <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801d1c8:	2500      	movs	r5, #0
 801d1ca:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801d1ce:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801d1d2:	6803      	ldr	r3, [r0, #0]
 801d1d4:	9500      	str	r5, [sp, #0]
 801d1d6:	466d      	mov	r5, sp
 801d1d8:	f8ad 1004 	strh.w	r1, [sp, #4]
 801d1dc:	f8ad 2006 	strh.w	r2, [sp, #6]
 801d1e0:	4629      	mov	r1, r5
 801d1e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d1e4:	4798      	blx	r3
 801d1e6:	e895 0003 	ldmia.w	r5, {r0, r1}
 801d1ea:	e884 0003 	stmia.w	r4, {r0, r1}
 801d1ee:	4620      	mov	r0, r4
 801d1f0:	b003      	add	sp, #12
 801d1f2:	bd30      	pop	{r4, r5, pc}

0801d1f4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801d1f4:	b513      	push	{r0, r1, r4, lr}
 801d1f6:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801d1fa:	4604      	mov	r4, r0
 801d1fc:	3301      	adds	r3, #1
 801d1fe:	d109      	bne.n	801d214 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801d200:	4601      	mov	r1, r0
 801d202:	4668      	mov	r0, sp
 801d204:	f7ff fd4c 	bl	801cca0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d208:	f8bd 3000 	ldrh.w	r3, [sp]
 801d20c:	8423      	strh	r3, [r4, #32]
 801d20e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d212:	8463      	strh	r3, [r4, #34]	; 0x22
 801d214:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801d218:	b002      	add	sp, #8
 801d21a:	bd10      	pop	{r4, pc}

0801d21c <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801d21c:	b513      	push	{r0, r1, r4, lr}
 801d21e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801d222:	4604      	mov	r4, r0
 801d224:	3301      	adds	r3, #1
 801d226:	d109      	bne.n	801d23c <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801d228:	4601      	mov	r1, r0
 801d22a:	4668      	mov	r0, sp
 801d22c:	f7ff fd38 	bl	801cca0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d230:	f8bd 3000 	ldrh.w	r3, [sp]
 801d234:	8423      	strh	r3, [r4, #32]
 801d236:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d23a:	8463      	strh	r3, [r4, #34]	; 0x22
 801d23c:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801d240:	b002      	add	sp, #8
 801d242:	bd10      	pop	{r4, pc}

0801d244 <_ZN8touchgfx6ScreenC1Ev>:
 801d244:	b570      	push	{r4, r5, r6, lr}
 801d246:	4b17      	ldr	r3, [pc, #92]	; (801d2a4 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801d248:	4605      	mov	r5, r0
 801d24a:	4a17      	ldr	r2, [pc, #92]	; (801d2a8 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801d24c:	2101      	movs	r1, #1
 801d24e:	f845 3b04 	str.w	r3, [r5], #4
 801d252:	2300      	movs	r3, #0
 801d254:	6042      	str	r2, [r0, #4]
 801d256:	4604      	mov	r4, r0
 801d258:	8103      	strh	r3, [r0, #8]
 801d25a:	8143      	strh	r3, [r0, #10]
 801d25c:	8183      	strh	r3, [r0, #12]
 801d25e:	81c3      	strh	r3, [r0, #14]
 801d260:	8203      	strh	r3, [r0, #16]
 801d262:	8243      	strh	r3, [r0, #18]
 801d264:	8283      	strh	r3, [r0, #20]
 801d266:	82c3      	strh	r3, [r0, #22]
 801d268:	6203      	str	r3, [r0, #32]
 801d26a:	8483      	strh	r3, [r0, #36]	; 0x24
 801d26c:	84c3      	strh	r3, [r0, #38]	; 0x26
 801d26e:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801d272:	6343      	str	r3, [r0, #52]	; 0x34
 801d274:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801d278:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801d27c:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801d280:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801d284:	4b09      	ldr	r3, [pc, #36]	; (801d2ac <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801d286:	4628      	mov	r0, r5
 801d288:	f9b3 6000 	ldrsh.w	r6, [r3]
 801d28c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 801d28e:	4a08      	ldr	r2, [pc, #32]	; (801d2b0 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801d290:	f9b2 1000 	ldrsh.w	r1, [r2]
 801d294:	4798      	blx	r3
 801d296:	6863      	ldr	r3, [r4, #4]
 801d298:	4628      	mov	r0, r5
 801d29a:	4631      	mov	r1, r6
 801d29c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d29e:	4798      	blx	r3
 801d2a0:	4620      	mov	r0, r4
 801d2a2:	bd70      	pop	{r4, r5, r6, pc}
 801d2a4:	0802fbd4 	.word	0x0802fbd4
 801d2a8:	0802f3bc 	.word	0x0802f3bc
 801d2ac:	2400bae6 	.word	0x2400bae6
 801d2b0:	2400bae4 	.word	0x2400bae4

0801d2b4 <_ZN8touchgfx6Screen4drawEv>:
 801d2b4:	4b09      	ldr	r3, [pc, #36]	; (801d2dc <_ZN8touchgfx6Screen4drawEv+0x28>)
 801d2b6:	b507      	push	{r0, r1, r2, lr}
 801d2b8:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d2bc:	2100      	movs	r1, #0
 801d2be:	4b08      	ldr	r3, [pc, #32]	; (801d2e0 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801d2c0:	9100      	str	r1, [sp, #0]
 801d2c2:	4669      	mov	r1, sp
 801d2c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d2c8:	f8ad 2004 	strh.w	r2, [sp, #4]
 801d2cc:	f8ad 3006 	strh.w	r3, [sp, #6]
 801d2d0:	6803      	ldr	r3, [r0, #0]
 801d2d2:	689b      	ldr	r3, [r3, #8]
 801d2d4:	4798      	blx	r3
 801d2d6:	b003      	add	sp, #12
 801d2d8:	f85d fb04 	ldr.w	pc, [sp], #4
 801d2dc:	2400bae4 	.word	0x2400bae4
 801d2e0:	2400bae6 	.word	0x2400bae6

0801d2e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801d2e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d2e8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801d2ec:	b089      	sub	sp, #36	; 0x24
 801d2ee:	4680      	mov	r8, r0
 801d2f0:	460c      	mov	r4, r1
 801d2f2:	2b00      	cmp	r3, #0
 801d2f4:	4615      	mov	r5, r2
 801d2f6:	dd0e      	ble.n	801d316 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801d2f8:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801d2fc:	2b00      	cmp	r3, #0
 801d2fe:	dd0a      	ble.n	801d316 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801d300:	4628      	mov	r0, r5
 801d302:	f7ff ff5b 	bl	801d1bc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801d306:	4621      	mov	r1, r4
 801d308:	f7fe fa66 	bl	801b7d8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801d30c:	69eb      	ldr	r3, [r5, #28]
 801d30e:	b928      	cbnz	r0, 801d31c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801d310:	461d      	mov	r5, r3
 801d312:	2b00      	cmp	r3, #0
 801d314:	d1f4      	bne.n	801d300 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801d316:	b009      	add	sp, #36	; 0x24
 801d318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d31c:	ae04      	add	r6, sp, #16
 801d31e:	2b00      	cmp	r3, #0
 801d320:	f000 80b5 	beq.w	801d48e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801d324:	682b      	ldr	r3, [r5, #0]
 801d326:	4629      	mov	r1, r5
 801d328:	a802      	add	r0, sp, #8
 801d32a:	68db      	ldr	r3, [r3, #12]
 801d32c:	4798      	blx	r3
 801d32e:	4628      	mov	r0, r5
 801d330:	f7ff ff60 	bl	801d1f4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801d334:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801d338:	4407      	add	r7, r0
 801d33a:	4628      	mov	r0, r5
 801d33c:	f7ff ff6e 	bl	801d21c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801d340:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801d344:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801d348:	b23f      	sxth	r7, r7
 801d34a:	4418      	add	r0, r3
 801d34c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801d350:	4621      	mov	r1, r4
 801d352:	f8ad 2014 	strh.w	r2, [sp, #20]
 801d356:	f8ad 0012 	strh.w	r0, [sp, #18]
 801d35a:	4630      	mov	r0, r6
 801d35c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d360:	f8ad 7010 	strh.w	r7, [sp, #16]
 801d364:	f7fa fd8c 	bl	8017e80 <_ZN8touchgfx4RectaNERKS0_>
 801d368:	4628      	mov	r0, r5
 801d36a:	f7ff ff27 	bl	801d1bc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801d36e:	ab06      	add	r3, sp, #24
 801d370:	4602      	mov	r2, r0
 801d372:	e896 0003 	ldmia.w	r6, {r0, r1}
 801d376:	e883 0003 	stmia.w	r3, {r0, r1}
 801d37a:	4611      	mov	r1, r2
 801d37c:	4618      	mov	r0, r3
 801d37e:	f7fa fd7f 	bl	8017e80 <_ZN8touchgfx4RectaNERKS0_>
 801d382:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801d386:	f9b4 1000 	ldrsh.w	r1, [r4]
 801d38a:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801d38e:	4299      	cmp	r1, r3
 801d390:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801d394:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801d398:	d10b      	bne.n	801d3b2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801d39a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801d39e:	4552      	cmp	r2, sl
 801d3a0:	d107      	bne.n	801d3b2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801d3a2:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801d3a6:	455a      	cmp	r2, fp
 801d3a8:	d103      	bne.n	801d3b2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801d3aa:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801d3ae:	454a      	cmp	r2, r9
 801d3b0:	d06d      	beq.n	801d48e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801d3b2:	f1bb 0f00 	cmp.w	fp, #0
 801d3b6:	dd65      	ble.n	801d484 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801d3b8:	f1b9 0f00 	cmp.w	r9, #0
 801d3bc:	dd62      	ble.n	801d484 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801d3be:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801d3c2:	fa1f f08a 	uxth.w	r0, sl
 801d3c6:	4552      	cmp	r2, sl
 801d3c8:	9000      	str	r0, [sp, #0]
 801d3ca:	da12      	bge.n	801d3f2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801d3cc:	9301      	str	r3, [sp, #4]
 801d3ce:	9b00      	ldr	r3, [sp, #0]
 801d3d0:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801d3d4:	f8ad 2012 	strh.w	r2, [sp, #18]
 801d3d8:	1a9a      	subs	r2, r3, r2
 801d3da:	f8ad 1010 	strh.w	r1, [sp, #16]
 801d3de:	4631      	mov	r1, r6
 801d3e0:	f8ad 0014 	strh.w	r0, [sp, #20]
 801d3e4:	4640      	mov	r0, r8
 801d3e6:	f8ad 2016 	strh.w	r2, [sp, #22]
 801d3ea:	69ea      	ldr	r2, [r5, #28]
 801d3ec:	f7ff ff7a 	bl	801d2e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d3f0:	9b01      	ldr	r3, [sp, #4]
 801d3f2:	f9b4 2000 	ldrsh.w	r2, [r4]
 801d3f6:	b29f      	uxth	r7, r3
 801d3f8:	429a      	cmp	r2, r3
 801d3fa:	da0d      	bge.n	801d418 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801d3fc:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d400:	1aba      	subs	r2, r7, r2
 801d402:	f8ad a012 	strh.w	sl, [sp, #18]
 801d406:	4631      	mov	r1, r6
 801d408:	f8ad 2014 	strh.w	r2, [sp, #20]
 801d40c:	4640      	mov	r0, r8
 801d40e:	f8ad 9016 	strh.w	r9, [sp, #22]
 801d412:	69ea      	ldr	r2, [r5, #28]
 801d414:	f7ff ff66 	bl	801d2e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d418:	8822      	ldrh	r2, [r4, #0]
 801d41a:	445f      	add	r7, fp
 801d41c:	88a3      	ldrh	r3, [r4, #4]
 801d41e:	b2bf      	uxth	r7, r7
 801d420:	4413      	add	r3, r2
 801d422:	b23a      	sxth	r2, r7
 801d424:	b29b      	uxth	r3, r3
 801d426:	b219      	sxth	r1, r3
 801d428:	4291      	cmp	r1, r2
 801d42a:	dd0d      	ble.n	801d448 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801d42c:	1bdb      	subs	r3, r3, r7
 801d42e:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d432:	f8ad a012 	strh.w	sl, [sp, #18]
 801d436:	4631      	mov	r1, r6
 801d438:	f8ad 3014 	strh.w	r3, [sp, #20]
 801d43c:	4640      	mov	r0, r8
 801d43e:	f8ad 9016 	strh.w	r9, [sp, #22]
 801d442:	69ea      	ldr	r2, [r5, #28]
 801d444:	f7ff ff4e 	bl	801d2e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d448:	88e2      	ldrh	r2, [r4, #6]
 801d44a:	8863      	ldrh	r3, [r4, #2]
 801d44c:	4413      	add	r3, r2
 801d44e:	9a00      	ldr	r2, [sp, #0]
 801d450:	444a      	add	r2, r9
 801d452:	b29b      	uxth	r3, r3
 801d454:	fa1f f982 	uxth.w	r9, r2
 801d458:	b219      	sxth	r1, r3
 801d45a:	fa0f f289 	sxth.w	r2, r9
 801d45e:	428a      	cmp	r2, r1
 801d460:	da15      	bge.n	801d48e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801d462:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801d466:	eba3 0309 	sub.w	r3, r3, r9
 801d46a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801d46e:	f8ad 1014 	strh.w	r1, [sp, #20]
 801d472:	4631      	mov	r1, r6
 801d474:	f8ad 0010 	strh.w	r0, [sp, #16]
 801d478:	f8ad 2012 	strh.w	r2, [sp, #18]
 801d47c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d480:	69ea      	ldr	r2, [r5, #28]
 801d482:	e001      	b.n	801d488 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801d484:	69ea      	ldr	r2, [r5, #28]
 801d486:	4621      	mov	r1, r4
 801d488:	4640      	mov	r0, r8
 801d48a:	f7ff ff2b 	bl	801d2e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d48e:	4628      	mov	r0, r5
 801d490:	f7ff fe94 	bl	801d1bc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801d494:	6861      	ldr	r1, [r4, #4]
 801d496:	4602      	mov	r2, r0
 801d498:	4633      	mov	r3, r6
 801d49a:	6820      	ldr	r0, [r4, #0]
 801d49c:	c303      	stmia	r3!, {r0, r1}
 801d49e:	4611      	mov	r1, r2
 801d4a0:	4630      	mov	r0, r6
 801d4a2:	f7fa fced 	bl	8017e80 <_ZN8touchgfx4RectaNERKS0_>
 801d4a6:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801d4aa:	2b00      	cmp	r3, #0
 801d4ac:	f77f af33 	ble.w	801d316 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801d4b0:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801d4b4:	2b00      	cmp	r3, #0
 801d4b6:	f77f af2e 	ble.w	801d316 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801d4ba:	4628      	mov	r0, r5
 801d4bc:	f7ff fe9a 	bl	801d1f4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801d4c0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801d4c4:	1a18      	subs	r0, r3, r0
 801d4c6:	f8ad 0010 	strh.w	r0, [sp, #16]
 801d4ca:	4628      	mov	r0, r5
 801d4cc:	f7ff fea6 	bl	801d21c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801d4d0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801d4d4:	4631      	mov	r1, r6
 801d4d6:	1a18      	subs	r0, r3, r0
 801d4d8:	f8ad 0012 	strh.w	r0, [sp, #18]
 801d4dc:	4628      	mov	r0, r5
 801d4de:	682b      	ldr	r3, [r5, #0]
 801d4e0:	689b      	ldr	r3, [r3, #8]
 801d4e2:	4798      	blx	r3
 801d4e4:	e717      	b.n	801d316 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801d4e6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801d4e6:	b570      	push	{r4, r5, r6, lr}
 801d4e8:	1d06      	adds	r6, r0, #4
 801d4ea:	b086      	sub	sp, #24
 801d4ec:	460c      	mov	r4, r1
 801d4ee:	2300      	movs	r3, #0
 801d4f0:	4631      	mov	r1, r6
 801d4f2:	4605      	mov	r5, r0
 801d4f4:	a802      	add	r0, sp, #8
 801d4f6:	9301      	str	r3, [sp, #4]
 801d4f8:	f7ff fbd2 	bl	801cca0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d4fc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801d500:	8822      	ldrh	r2, [r4, #0]
 801d502:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801d506:	1ad2      	subs	r2, r2, r3
 801d508:	8863      	ldrh	r3, [r4, #2]
 801d50a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801d50e:	1a5b      	subs	r3, r3, r1
 801d510:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801d514:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d518:	aa01      	add	r2, sp, #4
 801d51a:	f8ad 0014 	strh.w	r0, [sp, #20]
 801d51e:	4630      	mov	r0, r6
 801d520:	f8ad 1016 	strh.w	r1, [sp, #22]
 801d524:	a904      	add	r1, sp, #16
 801d526:	f8ad 3012 	strh.w	r3, [sp, #18]
 801d52a:	f7fa fd81 	bl	8018030 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801d52e:	9a01      	ldr	r2, [sp, #4]
 801d530:	b11a      	cbz	r2, 801d53a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801d532:	4621      	mov	r1, r4
 801d534:	4628      	mov	r0, r5
 801d536:	f7ff fed5 	bl	801d2e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d53a:	b006      	add	sp, #24
 801d53c:	bd70      	pop	{r4, r5, r6, pc}

0801d53e <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801d53e:	4602      	mov	r2, r0
 801d540:	b530      	push	{r4, r5, lr}
 801d542:	4604      	mov	r4, r0
 801d544:	b085      	sub	sp, #20
 801d546:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801d54a:	460d      	mov	r5, r1
 801d54c:	466b      	mov	r3, sp
 801d54e:	6851      	ldr	r1, [r2, #4]
 801d550:	c303      	stmia	r3!, {r0, r1}
 801d552:	4629      	mov	r1, r5
 801d554:	4668      	mov	r0, sp
 801d556:	f7fa fc93 	bl	8017e80 <_ZN8touchgfx4RectaNERKS0_>
 801d55a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801d55e:	b12b      	cbz	r3, 801d56c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801d560:	4669      	mov	r1, sp
 801d562:	4620      	mov	r0, r4
 801d564:	f7ff ffbf 	bl	801d4e6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801d568:	b005      	add	sp, #20
 801d56a:	bd30      	pop	{r4, r5, pc}
 801d56c:	3404      	adds	r4, #4
 801d56e:	a802      	add	r0, sp, #8
 801d570:	4621      	mov	r1, r4
 801d572:	f7ff fb95 	bl	801cca0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d576:	f8bd 3000 	ldrh.w	r3, [sp]
 801d57a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801d57e:	4669      	mov	r1, sp
 801d580:	4620      	mov	r0, r4
 801d582:	1a9b      	subs	r3, r3, r2
 801d584:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801d588:	f8ad 3000 	strh.w	r3, [sp]
 801d58c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d590:	1a9b      	subs	r3, r3, r2
 801d592:	f8ad 3002 	strh.w	r3, [sp, #2]
 801d596:	f7fa fd12 	bl	8017fbe <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801d59a:	e7e5      	b.n	801d568 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801d59c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801d59c:	460b      	mov	r3, r1
 801d59e:	680a      	ldr	r2, [r1, #0]
 801d5a0:	1d01      	adds	r1, r0, #4
 801d5a2:	6992      	ldr	r2, [r2, #24]
 801d5a4:	4618      	mov	r0, r3
 801d5a6:	4710      	bx	r2

0801d5a8 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801d5a8:	4298      	cmp	r0, r3
 801d5aa:	d200      	bcs.n	801d5ae <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 801d5ac:	b913      	cbnz	r3, 801d5b4 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 801d5ae:	440a      	add	r2, r1
 801d5b0:	b210      	sxth	r0, r2
 801d5b2:	4770      	bx	lr
 801d5b4:	ee07 0a90 	vmov	s15, r0
 801d5b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d5bc:	ee07 3a90 	vmov	s15, r3
 801d5c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d5c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d5c8:	ee07 2a90 	vmov	s15, r2
 801d5cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d5d0:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801d5d4:	ee07 1a90 	vmov	s15, r1
 801d5d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d5dc:	ee37 7a66 	vsub.f32	s14, s14, s13
 801d5e0:	ee67 5a07 	vmul.f32	s11, s14, s14
 801d5e4:	eee5 6a87 	vfma.f32	s13, s11, s14
 801d5e8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801d5ec:	eee6 7a26 	vfma.f32	s15, s12, s13
 801d5f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d5f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d5f8:	bfcc      	ite	gt
 801d5fa:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801d5fe:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801d602:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d606:	ee17 3a90 	vmov	r3, s15
 801d60a:	b218      	sxth	r0, r3
 801d60c:	4770      	bx	lr

0801d60e <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>:
 801d60e:	4298      	cmp	r0, r3
 801d610:	d200      	bcs.n	801d614 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x6>
 801d612:	b913      	cbnz	r3, 801d61a <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0xc>
 801d614:	440a      	add	r2, r1
 801d616:	b210      	sxth	r0, r2
 801d618:	4770      	bx	lr
 801d61a:	ee07 2a90 	vmov	s15, r2
 801d61e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801d622:	ee07 0a90 	vmov	s15, r0
 801d626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d62a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d62e:	ee07 3a10 	vmov	s14, r3
 801d632:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 801d636:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801d63a:	ee07 1a90 	vmov	s15, r1
 801d63e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d642:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d646:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801d64a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d64e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d652:	bfcc      	ite	gt
 801d654:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801d658:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801d65c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d660:	ee17 3a90 	vmov	r3, s15
 801d664:	b218      	sxth	r0, r3
 801d666:	4770      	bx	lr

0801d668 <_ZN8touchgfx12TextProviderC1Ev>:
 801d668:	b538      	push	{r3, r4, r5, lr}
 801d66a:	2500      	movs	r5, #0
 801d66c:	2302      	movs	r3, #2
 801d66e:	4604      	mov	r4, r0
 801d670:	220e      	movs	r2, #14
 801d672:	7403      	strb	r3, [r0, #16]
 801d674:	4629      	mov	r1, r5
 801d676:	6145      	str	r5, [r0, #20]
 801d678:	7605      	strb	r5, [r0, #24]
 801d67a:	83c5      	strh	r5, [r0, #30]
 801d67c:	8405      	strh	r5, [r0, #32]
 801d67e:	86c5      	strh	r5, [r0, #54]	; 0x36
 801d680:	8705      	strh	r5, [r0, #56]	; 0x38
 801d682:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801d684:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801d688:	e9c0 5500 	strd	r5, r5, [r0]
 801d68c:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801d690:	304c      	adds	r0, #76	; 0x4c
 801d692:	f00f f9f0 	bl	802ca76 <memset>
 801d696:	2301      	movs	r3, #1
 801d698:	4620      	mov	r0, r4
 801d69a:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801d69e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801d6a2:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801d6a6:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801d6aa:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801d6ae:	f7ec fee1 	bl	800a474 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801d6b2:	4620      	mov	r0, r4
 801d6b4:	bd38      	pop	{r3, r4, r5, pc}

0801d6b6 <_ZN8touchgfx12TextProvider11endOfStringEv>:
 801d6b6:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801d6b8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801d6bc:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 801d6be:	fab0 f080 	clz	r0, r0
 801d6c2:	0940      	lsrs	r0, r0, #5
 801d6c4:	4770      	bx	lr

0801d6c6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801d6c6:	b530      	push	{r4, r5, lr}
 801d6c8:	2500      	movs	r5, #0
 801d6ca:	2401      	movs	r4, #1
 801d6cc:	6843      	ldr	r3, [r0, #4]
 801d6ce:	b913      	cbnz	r3, 801d6d6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801d6d0:	6803      	ldr	r3, [r0, #0]
 801d6d2:	b313      	cbz	r3, 801d71a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801d6d4:	6043      	str	r3, [r0, #4]
 801d6d6:	7e03      	ldrb	r3, [r0, #24]
 801d6d8:	b143      	cbz	r3, 801d6ec <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801d6da:	6943      	ldr	r3, [r0, #20]
 801d6dc:	b12b      	cbz	r3, 801d6ea <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801d6de:	881a      	ldrh	r2, [r3, #0]
 801d6e0:	b11a      	cbz	r2, 801d6ea <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801d6e2:	1c9a      	adds	r2, r3, #2
 801d6e4:	6142      	str	r2, [r0, #20]
 801d6e6:	8818      	ldrh	r0, [r3, #0]
 801d6e8:	bd30      	pop	{r4, r5, pc}
 801d6ea:	7605      	strb	r5, [r0, #24]
 801d6ec:	6843      	ldr	r3, [r0, #4]
 801d6ee:	8819      	ldrh	r1, [r3, #0]
 801d6f0:	b199      	cbz	r1, 801d71a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801d6f2:	1c9a      	adds	r2, r3, #2
 801d6f4:	2902      	cmp	r1, #2
 801d6f6:	6042      	str	r2, [r0, #4]
 801d6f8:	d1f5      	bne.n	801d6e6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801d6fa:	7c03      	ldrb	r3, [r0, #16]
 801d6fc:	2b01      	cmp	r3, #1
 801d6fe:	d8e5      	bhi.n	801d6cc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d700:	1c5a      	adds	r2, r3, #1
 801d702:	3302      	adds	r3, #2
 801d704:	7402      	strb	r2, [r0, #16]
 801d706:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801d70a:	6143      	str	r3, [r0, #20]
 801d70c:	2b00      	cmp	r3, #0
 801d70e:	d0dd      	beq.n	801d6cc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d710:	881b      	ldrh	r3, [r3, #0]
 801d712:	2b00      	cmp	r3, #0
 801d714:	d0da      	beq.n	801d6cc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d716:	7604      	strb	r4, [r0, #24]
 801d718:	e7d8      	b.n	801d6cc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d71a:	2000      	movs	r0, #0
 801d71c:	e7e4      	b.n	801d6e8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801d71e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801d71e:	6001      	str	r1, [r0, #0]
 801d720:	2100      	movs	r1, #0
 801d722:	b430      	push	{r4, r5}
 801d724:	6041      	str	r1, [r0, #4]
 801d726:	6815      	ldr	r5, [r2, #0]
 801d728:	6085      	str	r5, [r0, #8]
 801d72a:	6852      	ldr	r2, [r2, #4]
 801d72c:	6443      	str	r3, [r0, #68]	; 0x44
 801d72e:	9b02      	ldr	r3, [sp, #8]
 801d730:	60c2      	str	r2, [r0, #12]
 801d732:	7401      	strb	r1, [r0, #16]
 801d734:	6141      	str	r1, [r0, #20]
 801d736:	7601      	strb	r1, [r0, #24]
 801d738:	8701      	strh	r1, [r0, #56]	; 0x38
 801d73a:	8401      	strh	r1, [r0, #32]
 801d73c:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801d740:	6483      	str	r3, [r0, #72]	; 0x48
 801d742:	bc30      	pop	{r4, r5}
 801d744:	f7ec be96 	b.w	800a474 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801d748 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 801d748:	b408      	push	{r3}
 801d74a:	b510      	push	{r4, lr}
 801d74c:	b085      	sub	sp, #20
 801d74e:	ac07      	add	r4, sp, #28
 801d750:	f854 3b04 	ldr.w	r3, [r4], #4
 801d754:	9300      	str	r3, [sp, #0]
 801d756:	4613      	mov	r3, r2
 801d758:	4622      	mov	r2, r4
 801d75a:	9403      	str	r4, [sp, #12]
 801d75c:	f7ff ffdf 	bl	801d71e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801d760:	b005      	add	sp, #20
 801d762:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d766:	b001      	add	sp, #4
 801d768:	4770      	bx	lr

0801d76a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801d76a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d76c:	4605      	mov	r5, r0
 801d76e:	4608      	mov	r0, r1
 801d770:	b1f1      	cbz	r1, 801d7b0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801d772:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801d776:	460b      	mov	r3, r1
 801d778:	f101 0708 	add.w	r7, r1, #8
 801d77c:	4622      	mov	r2, r4
 801d77e:	6818      	ldr	r0, [r3, #0]
 801d780:	3308      	adds	r3, #8
 801d782:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801d786:	4626      	mov	r6, r4
 801d788:	42bb      	cmp	r3, r7
 801d78a:	c603      	stmia	r6!, {r0, r1}
 801d78c:	4634      	mov	r4, r6
 801d78e:	d1f6      	bne.n	801d77e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801d790:	6818      	ldr	r0, [r3, #0]
 801d792:	6030      	str	r0, [r6, #0]
 801d794:	4610      	mov	r0, r2
 801d796:	889b      	ldrh	r3, [r3, #4]
 801d798:	80b3      	strh	r3, [r6, #4]
 801d79a:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801d79e:	015b      	lsls	r3, r3, #5
 801d7a0:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801d7a4:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801d7a8:	430b      	orrs	r3, r1
 801d7aa:	425b      	negs	r3, r3
 801d7ac:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801d7b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d7b2 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801d7b2:	b538      	push	{r3, r4, r5, lr}
 801d7b4:	460c      	mov	r4, r1
 801d7b6:	6811      	ldr	r1, [r2, #0]
 801d7b8:	4610      	mov	r0, r2
 801d7ba:	68cd      	ldr	r5, [r1, #12]
 801d7bc:	4619      	mov	r1, r3
 801d7be:	47a8      	blx	r5
 801d7c0:	2800      	cmp	r0, #0
 801d7c2:	bf08      	it	eq
 801d7c4:	4620      	moveq	r0, r4
 801d7c6:	bd38      	pop	{r3, r4, r5, pc}

0801d7c8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801d7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d7ca:	4604      	mov	r4, r0
 801d7cc:	4615      	mov	r5, r2
 801d7ce:	4608      	mov	r0, r1
 801d7d0:	b93a      	cbnz	r2, 801d7e2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801d7d2:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801d7d6:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801d7da:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801d7de:	4628      	mov	r0, r5
 801d7e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d7e2:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801d7e6:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 801d7ea:	8893      	ldrh	r3, [r2, #4]
 801d7ec:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801d7f0:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801d7f4:	79ee      	ldrb	r6, [r5, #7]
 801d7f6:	4316      	orrs	r6, r2
 801d7f8:	19da      	adds	r2, r3, r7
 801d7fa:	b291      	uxth	r1, r2
 801d7fc:	b2b7      	uxth	r7, r6
 801d7fe:	291d      	cmp	r1, #29
 801d800:	d87b      	bhi.n	801d8fa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801d802:	2201      	movs	r2, #1
 801d804:	10f6      	asrs	r6, r6, #3
 801d806:	408a      	lsls	r2, r1
 801d808:	4974      	ldr	r1, [pc, #464]	; (801d9dc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 801d80a:	420a      	tst	r2, r1
 801d80c:	d12e      	bne.n	801d86c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801d80e:	f412 7f60 	tst.w	r2, #896	; 0x380
 801d812:	d072      	beq.n	801d8fa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801d814:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 801d818:	462b      	mov	r3, r5
 801d81a:	f105 0e08 	add.w	lr, r5, #8
 801d81e:	4615      	mov	r5, r2
 801d820:	6818      	ldr	r0, [r3, #0]
 801d822:	3308      	adds	r3, #8
 801d824:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801d828:	4694      	mov	ip, r2
 801d82a:	4573      	cmp	r3, lr
 801d82c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801d830:	4662      	mov	r2, ip
 801d832:	d1f5      	bne.n	801d820 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801d834:	6818      	ldr	r0, [r3, #0]
 801d836:	f8cc 0000 	str.w	r0, [ip]
 801d83a:	889b      	ldrh	r3, [r3, #4]
 801d83c:	f8ac 3004 	strh.w	r3, [ip, #4]
 801d840:	b2b3      	uxth	r3, r6
 801d842:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801d846:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801d84a:	1aca      	subs	r2, r1, r3
 801d84c:	1bcf      	subs	r7, r1, r7
 801d84e:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801d852:	b292      	uxth	r2, r2
 801d854:	1afb      	subs	r3, r7, r3
 801d856:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 801d85a:	10d2      	asrs	r2, r2, #3
 801d85c:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801d860:	4302      	orrs	r2, r0
 801d862:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801d866:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801d86a:	e7b8      	b.n	801d7de <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801d86c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801d86e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d872:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801d874:	f640 6333 	movw	r3, #3635	; 0xe33
 801d878:	4299      	cmp	r1, r3
 801d87a:	d110      	bne.n	801d89e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 801d87c:	6803      	ldr	r3, [r0, #0]
 801d87e:	68db      	ldr	r3, [r3, #12]
 801d880:	4798      	blx	r3
 801d882:	7b41      	ldrb	r1, [r0, #13]
 801d884:	00cb      	lsls	r3, r1, #3
 801d886:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d88a:	7a03      	ldrb	r3, [r0, #8]
 801d88c:	0648      	lsls	r0, r1, #25
 801d88e:	ea43 0302 	orr.w	r3, r3, r2
 801d892:	bf44      	itt	mi
 801d894:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d898:	b21b      	sxthmi	r3, r3
 801d89a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801d89e:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801d8a2:	462a      	mov	r2, r5
 801d8a4:	f105 0c08 	add.w	ip, r5, #8
 801d8a8:	443b      	add	r3, r7
 801d8aa:	4433      	add	r3, r6
 801d8ac:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801d8b0:	b29b      	uxth	r3, r3
 801d8b2:	4635      	mov	r5, r6
 801d8b4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801d8b8:	6810      	ldr	r0, [r2, #0]
 801d8ba:	3208      	adds	r2, #8
 801d8bc:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801d8c0:	4637      	mov	r7, r6
 801d8c2:	4562      	cmp	r2, ip
 801d8c4:	c703      	stmia	r7!, {r0, r1}
 801d8c6:	463e      	mov	r6, r7
 801d8c8:	d1f6      	bne.n	801d8b8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 801d8ca:	6810      	ldr	r0, [r2, #0]
 801d8cc:	6038      	str	r0, [r7, #0]
 801d8ce:	8892      	ldrh	r2, [r2, #4]
 801d8d0:	80ba      	strh	r2, [r7, #4]
 801d8d2:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801d8d6:	10db      	asrs	r3, r3, #3
 801d8d8:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801d8dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801d8e0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801d8e4:	4313      	orrs	r3, r2
 801d8e6:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801d8ea:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801d8ee:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801d8f2:	1a9b      	subs	r3, r3, r2
 801d8f4:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801d8f8:	e771      	b.n	801d7de <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801d8fa:	f023 0204 	bic.w	r2, r3, #4
 801d8fe:	f640 611b 	movw	r1, #3611	; 0xe1b
 801d902:	428a      	cmp	r2, r1
 801d904:	d003      	beq.n	801d90e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 801d906:	f640 621d 	movw	r2, #3613	; 0xe1d
 801d90a:	4293      	cmp	r3, r2
 801d90c:	d120      	bne.n	801d950 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 801d90e:	3b01      	subs	r3, #1
 801d910:	4602      	mov	r2, r0
 801d912:	4629      	mov	r1, r5
 801d914:	4620      	mov	r0, r4
 801d916:	b29b      	uxth	r3, r3
 801d918:	f7ff ff4b 	bl	801d7b2 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801d91c:	7b41      	ldrb	r1, [r0, #13]
 801d91e:	00cb      	lsls	r3, r1, #3
 801d920:	0649      	lsls	r1, r1, #25
 801d922:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d926:	7a03      	ldrb	r3, [r0, #8]
 801d928:	ea43 0302 	orr.w	r3, r3, r2
 801d92c:	bf44      	itt	mi
 801d92e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d932:	b21b      	sxthmi	r3, r3
 801d934:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801d938:	7b6b      	ldrb	r3, [r5, #13]
 801d93a:	7aaa      	ldrb	r2, [r5, #10]
 801d93c:	005b      	lsls	r3, r3, #1
 801d93e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d942:	4313      	orrs	r3, r2
 801d944:	115a      	asrs	r2, r3, #5
 801d946:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801d94a:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801d94e:	e035      	b.n	801d9bc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 801d950:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801d954:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801d958:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801d95c:	7a2a      	ldrb	r2, [r5, #8]
 801d95e:	ea42 0201 	orr.w	r2, r2, r1
 801d962:	f640 6109 	movw	r1, #3593	; 0xe09
 801d966:	bf1c      	itt	ne
 801d968:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801d96c:	b212      	sxthne	r2, r2
 801d96e:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801d972:	f023 0210 	bic.w	r2, r3, #16
 801d976:	428a      	cmp	r2, r1
 801d978:	d003      	beq.n	801d982 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 801d97a:	f640 6213 	movw	r2, #3603	; 0xe13
 801d97e:	4293      	cmp	r3, r2
 801d980:	d129      	bne.n	801d9d6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 801d982:	7b6e      	ldrb	r6, [r5, #13]
 801d984:	4629      	mov	r1, r5
 801d986:	0076      	lsls	r6, r6, #1
 801d988:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801d98c:	7aae      	ldrb	r6, [r5, #10]
 801d98e:	4316      	orrs	r6, r2
 801d990:	f640 6213 	movw	r2, #3603	; 0xe13
 801d994:	4293      	cmp	r3, r2
 801d996:	4602      	mov	r2, r0
 801d998:	4620      	mov	r0, r4
 801d99a:	bf16      	itet	ne
 801d99c:	f103 33ff 	addne.w	r3, r3, #4294967295
 801d9a0:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801d9a4:	b29b      	uxthne	r3, r3
 801d9a6:	f7ff ff04 	bl	801d7b2 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801d9aa:	7b43      	ldrb	r3, [r0, #13]
 801d9ac:	7a82      	ldrb	r2, [r0, #10]
 801d9ae:	005b      	lsls	r3, r3, #1
 801d9b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d9b4:	4313      	orrs	r3, r2
 801d9b6:	1af6      	subs	r6, r6, r3
 801d9b8:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801d9bc:	7b69      	ldrb	r1, [r5, #13]
 801d9be:	00cb      	lsls	r3, r1, #3
 801d9c0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d9c4:	7a2b      	ldrb	r3, [r5, #8]
 801d9c6:	4313      	orrs	r3, r2
 801d9c8:	064a      	lsls	r2, r1, #25
 801d9ca:	bf44      	itt	mi
 801d9cc:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d9d0:	b21b      	sxthmi	r3, r3
 801d9d2:	1bdb      	subs	r3, r3, r7
 801d9d4:	e747      	b.n	801d866 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 801d9d6:	2300      	movs	r3, #0
 801d9d8:	e7b7      	b.n	801d94a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 801d9da:	bf00      	nop
 801d9dc:	3fc00079 	.word	0x3fc00079

0801d9e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801d9e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d9e4:	4604      	mov	r4, r0
 801d9e6:	b942      	cbnz	r2, 801d9fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801d9e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801d9ec:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 801d9f0:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801d9f4:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801d9f8:	e047      	b.n	801da8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801d9fa:	7b51      	ldrb	r1, [r2, #13]
 801d9fc:	8893      	ldrh	r3, [r2, #4]
 801d9fe:	010d      	lsls	r5, r1, #4
 801da00:	f405 7080 	and.w	r0, r5, #256	; 0x100
 801da04:	79d5      	ldrb	r5, [r2, #7]
 801da06:	4305      	orrs	r5, r0
 801da08:	2d04      	cmp	r5, #4
 801da0a:	bfcc      	ite	gt
 801da0c:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801da10:	f04f 0e01 	movle.w	lr, #1
 801da14:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801da18:	f200 80ab 	bhi.w	801db72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801da1c:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801da20:	4283      	cmp	r3, r0
 801da22:	d216      	bcs.n	801da52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801da24:	f240 605b 	movw	r0, #1627	; 0x65b
 801da28:	4283      	cmp	r3, r0
 801da2a:	d859      	bhi.n	801dae0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801da2c:	f240 6057 	movw	r0, #1623	; 0x657
 801da30:	4283      	cmp	r3, r0
 801da32:	d20e      	bcs.n	801da52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801da34:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801da38:	d24a      	bcs.n	801dad0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801da3a:	f240 604e 	movw	r0, #1614	; 0x64e
 801da3e:	4283      	cmp	r3, r0
 801da40:	d207      	bcs.n	801da52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801da42:	f240 601a 	movw	r0, #1562	; 0x61a
 801da46:	4283      	cmp	r3, r0
 801da48:	d02a      	beq.n	801daa0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801da4a:	d821      	bhi.n	801da90 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801da4c:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801da50:	d35b      	bcc.n	801db0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801da52:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801da56:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801da5a:	f040 80d0 	bne.w	801dbfe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801da5e:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 801da62:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801da66:	f040 80ca 	bne.w	801dbfe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801da6a:	00cb      	lsls	r3, r1, #3
 801da6c:	0649      	lsls	r1, r1, #25
 801da6e:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801da72:	7a13      	ldrb	r3, [r2, #8]
 801da74:	ea43 0300 	orr.w	r3, r3, r0
 801da78:	bf44      	itt	mi
 801da7a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801da7e:	b21b      	sxthmi	r3, r3
 801da80:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801da84:	1b5d      	subs	r5, r3, r5
 801da86:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801da8a:	4610      	mov	r0, r2
 801da8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801da90:	f240 604b 	movw	r0, #1611	; 0x64b
 801da94:	4283      	cmp	r3, r0
 801da96:	d338      	bcc.n	801db0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801da98:	f240 604c 	movw	r0, #1612	; 0x64c
 801da9c:	4283      	cmp	r3, r0
 801da9e:	d9d8      	bls.n	801da52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801daa0:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801daa4:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801daa8:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801daac:	f040 80f3 	bne.w	801dc96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801dab0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801dab4:	f040 80ef 	bne.w	801dc96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801dab8:	00cb      	lsls	r3, r1, #3
 801daba:	064e      	lsls	r6, r1, #25
 801dabc:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801dac0:	7a13      	ldrb	r3, [r2, #8]
 801dac2:	ea43 0300 	orr.w	r3, r3, r0
 801dac6:	bf44      	itt	mi
 801dac8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801dacc:	b21b      	sxthmi	r3, r3
 801dace:	e7d9      	b.n	801da84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801dad0:	f240 6054 	movw	r0, #1620	; 0x654
 801dad4:	4283      	cmp	r3, r0
 801dad6:	d8e3      	bhi.n	801daa0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801dad8:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801dadc:	d9e0      	bls.n	801daa0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801dade:	e7b8      	b.n	801da52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801dae0:	f240 6074 	movw	r0, #1652	; 0x674
 801dae4:	4283      	cmp	r3, r0
 801dae6:	d0b4      	beq.n	801da52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801dae8:	d82d      	bhi.n	801db46 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801daea:	f240 605e 	movw	r0, #1630	; 0x65e
 801daee:	4283      	cmp	r3, r0
 801daf0:	d804      	bhi.n	801dafc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801daf2:	f240 605d 	movw	r0, #1629	; 0x65d
 801daf6:	4283      	cmp	r3, r0
 801daf8:	d3d2      	bcc.n	801daa0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801dafa:	e7aa      	b.n	801da52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801dafc:	f240 605f 	movw	r0, #1631	; 0x65f
 801db00:	4283      	cmp	r3, r0
 801db02:	d0cd      	beq.n	801daa0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801db04:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801db08:	d0a3      	beq.n	801da52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801db0a:	00cb      	lsls	r3, r1, #3
 801db0c:	0649      	lsls	r1, r1, #25
 801db0e:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801db12:	7a13      	ldrb	r3, [r2, #8]
 801db14:	ea43 0300 	orr.w	r3, r3, r0
 801db18:	bf44      	itt	mi
 801db1a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801db1e:	b21b      	sxthmi	r3, r3
 801db20:	1b5d      	subs	r5, r3, r5
 801db22:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801db26:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801db2a:	7b53      	ldrb	r3, [r2, #13]
 801db2c:	015b      	lsls	r3, r3, #5
 801db2e:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801db32:	7993      	ldrb	r3, [r2, #6]
 801db34:	430b      	orrs	r3, r1
 801db36:	2105      	movs	r1, #5
 801db38:	005b      	lsls	r3, r3, #1
 801db3a:	fb93 f3f1 	sdiv	r3, r3, r1
 801db3e:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801db42:	440b      	add	r3, r1
 801db44:	e756      	b.n	801d9f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801db46:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801db4a:	4283      	cmp	r3, r0
 801db4c:	d809      	bhi.n	801db62 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801db4e:	f240 60df 	movw	r0, #1759	; 0x6df
 801db52:	4283      	cmp	r3, r0
 801db54:	f4bf af7d 	bcs.w	801da52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801db58:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801db5c:	2b05      	cmp	r3, #5
 801db5e:	d8d4      	bhi.n	801db0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801db60:	e777      	b.n	801da52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801db62:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801db66:	4283      	cmp	r3, r0
 801db68:	d09a      	beq.n	801daa0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801db6a:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801db6e:	4283      	cmp	r3, r0
 801db70:	e7ca      	b.n	801db08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801db72:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801db76:	d22b      	bcs.n	801dbd0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801db78:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801db7c:	4283      	cmp	r3, r0
 801db7e:	d28f      	bcs.n	801daa0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801db80:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801db84:	4283      	cmp	r3, r0
 801db86:	d816      	bhi.n	801dbb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801db88:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801db8c:	4283      	cmp	r3, r0
 801db8e:	f4bf af60 	bcs.w	801da52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801db92:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801db96:	4283      	cmp	r3, r0
 801db98:	d80a      	bhi.n	801dbb0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801db9a:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801db9e:	4283      	cmp	r3, r0
 801dba0:	f4bf af57 	bcs.w	801da52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801dba4:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801dba8:	4283      	cmp	r3, r0
 801dbaa:	f43f af79 	beq.w	801daa0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801dbae:	e7ac      	b.n	801db0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801dbb0:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801dbb4:	e7f8      	b.n	801dba8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801dbb6:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801dbba:	4283      	cmp	r3, r0
 801dbbc:	d802      	bhi.n	801dbc4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801dbbe:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801dbc2:	e798      	b.n	801daf6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801dbc4:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801dbc8:	4283      	cmp	r3, r0
 801dbca:	f47f af42 	bne.w	801da52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801dbce:	e767      	b.n	801daa0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801dbd0:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801dbd4:	4283      	cmp	r3, r0
 801dbd6:	f43f af63 	beq.w	801daa0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801dbda:	d802      	bhi.n	801dbe2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801dbdc:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801dbe0:	e7f2      	b.n	801dbc8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801dbe2:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801dbe6:	4283      	cmp	r3, r0
 801dbe8:	d805      	bhi.n	801dbf6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801dbea:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801dbee:	4283      	cmp	r3, r0
 801dbf0:	f4ff af2f 	bcc.w	801da52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801dbf4:	e754      	b.n	801daa0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801dbf6:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801dbfa:	4283      	cmp	r3, r0
 801dbfc:	e7af      	b.n	801db5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801dbfe:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801dc02:	4617      	mov	r7, r2
 801dc04:	f102 0808 	add.w	r8, r2, #8
 801dc08:	4666      	mov	r6, ip
 801dc0a:	6838      	ldr	r0, [r7, #0]
 801dc0c:	3708      	adds	r7, #8
 801dc0e:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801dc12:	46e6      	mov	lr, ip
 801dc14:	4547      	cmp	r7, r8
 801dc16:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801dc1a:	46f4      	mov	ip, lr
 801dc1c:	d1f5      	bne.n	801dc0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801dc1e:	6838      	ldr	r0, [r7, #0]
 801dc20:	f8ce 0000 	str.w	r0, [lr]
 801dc24:	88b9      	ldrh	r1, [r7, #4]
 801dc26:	f8ae 1004 	strh.w	r1, [lr, #4]
 801dc2a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801dc2e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801dc32:	d009      	beq.n	801dc48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 801dc34:	7b51      	ldrb	r1, [r2, #13]
 801dc36:	7992      	ldrb	r2, [r2, #6]
 801dc38:	0149      	lsls	r1, r1, #5
 801dc3a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801dc3e:	4311      	orrs	r1, r2
 801dc40:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801dc44:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801dc48:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801dc4c:	b2ad      	uxth	r5, r5
 801dc4e:	d00d      	beq.n	801dc6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 801dc50:	442b      	add	r3, r5
 801dc52:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801dc56:	b29b      	uxth	r3, r3
 801dc58:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801dc5c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801dc60:	10db      	asrs	r3, r3, #3
 801dc62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801dc66:	4313      	orrs	r3, r2
 801dc68:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801dc6c:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801dc70:	00cb      	lsls	r3, r1, #3
 801dc72:	064f      	lsls	r7, r1, #25
 801dc74:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801dc78:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801dc7c:	ea43 0302 	orr.w	r3, r3, r2
 801dc80:	bf44      	itt	mi
 801dc82:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801dc86:	b21b      	sxthmi	r3, r3
 801dc88:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801dc8c:	1b5b      	subs	r3, r3, r5
 801dc8e:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801dc92:	4632      	mov	r2, r6
 801dc94:	e6f9      	b.n	801da8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801dc96:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801dc9a:	4617      	mov	r7, r2
 801dc9c:	f102 0908 	add.w	r9, r2, #8
 801dca0:	4666      	mov	r6, ip
 801dca2:	6838      	ldr	r0, [r7, #0]
 801dca4:	3708      	adds	r7, #8
 801dca6:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801dcaa:	46e0      	mov	r8, ip
 801dcac:	454f      	cmp	r7, r9
 801dcae:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801dcb2:	46c4      	mov	ip, r8
 801dcb4:	d1f5      	bne.n	801dca2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 801dcb6:	6838      	ldr	r0, [r7, #0]
 801dcb8:	f8c8 0000 	str.w	r0, [r8]
 801dcbc:	88b9      	ldrh	r1, [r7, #4]
 801dcbe:	f8a8 1004 	strh.w	r1, [r8, #4]
 801dcc2:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801dcc6:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801dcca:	d009      	beq.n	801dce0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 801dccc:	7b51      	ldrb	r1, [r2, #13]
 801dcce:	7992      	ldrb	r2, [r2, #6]
 801dcd0:	0149      	lsls	r1, r1, #5
 801dcd2:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801dcd6:	4311      	orrs	r1, r2
 801dcd8:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801dcdc:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801dce0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801dce4:	d00e      	beq.n	801dd04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801dce6:	eba3 030e 	sub.w	r3, r3, lr
 801dcea:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801dcee:	b29b      	uxth	r3, r3
 801dcf0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801dcf4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801dcf8:	10db      	asrs	r3, r3, #3
 801dcfa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801dcfe:	4313      	orrs	r3, r2
 801dd00:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801dd04:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801dd08:	00cb      	lsls	r3, r1, #3
 801dd0a:	0648      	lsls	r0, r1, #25
 801dd0c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801dd10:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801dd14:	ea43 0302 	orr.w	r3, r3, r2
 801dd18:	bf44      	itt	mi
 801dd1a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801dd1e:	b21b      	sxthmi	r3, r3
 801dd20:	1b5d      	subs	r5, r3, r5
 801dd22:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801dd26:	e7b4      	b.n	801dc92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

0801dd28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801dd28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dd2c:	461e      	mov	r6, r3
 801dd2e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801dd30:	4604      	mov	r4, r0
 801dd32:	4617      	mov	r7, r2
 801dd34:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801dd38:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801dd3c:	f7ec faf4 	bl	800a328 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801dd40:	4605      	mov	r5, r0
 801dd42:	b918      	cbnz	r0, 801dd4c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801dd44:	6030      	str	r0, [r6, #0]
 801dd46:	4628      	mov	r0, r5
 801dd48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dd4c:	683b      	ldr	r3, [r7, #0]
 801dd4e:	4601      	mov	r1, r0
 801dd50:	4638      	mov	r0, r7
 801dd52:	68db      	ldr	r3, [r3, #12]
 801dd54:	4798      	blx	r3
 801dd56:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801dd5a:	4602      	mov	r2, r0
 801dd5c:	6030      	str	r0, [r6, #0]
 801dd5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801dd62:	d213      	bcs.n	801dd8c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801dd64:	4643      	mov	r3, r8
 801dd66:	4639      	mov	r1, r7
 801dd68:	4620      	mov	r0, r4
 801dd6a:	f7ff fe39 	bl	801d9e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801dd6e:	6030      	str	r0, [r6, #0]
 801dd70:	6833      	ldr	r3, [r6, #0]
 801dd72:	b143      	cbz	r3, 801dd86 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801dd74:	7b5a      	ldrb	r2, [r3, #13]
 801dd76:	7a9b      	ldrb	r3, [r3, #10]
 801dd78:	0052      	lsls	r2, r2, #1
 801dd7a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801dd7e:	4313      	orrs	r3, r2
 801dd80:	bf0c      	ite	eq
 801dd82:	2301      	moveq	r3, #1
 801dd84:	2300      	movne	r3, #0
 801dd86:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801dd8a:	e7dc      	b.n	801dd46 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801dd8c:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801dd90:	b29b      	uxth	r3, r3
 801dd92:	2b7f      	cmp	r3, #127	; 0x7f
 801dd94:	d804      	bhi.n	801dda0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801dd96:	4639      	mov	r1, r7
 801dd98:	4620      	mov	r0, r4
 801dd9a:	f7ff fd15 	bl	801d7c8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801dd9e:	e7e6      	b.n	801dd6e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801dda0:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801dda4:	2b00      	cmp	r3, #0
 801dda6:	d0e3      	beq.n	801dd70 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801dda8:	f640 1302 	movw	r3, #2306	; 0x902
 801ddac:	429d      	cmp	r5, r3
 801ddae:	d1df      	bne.n	801dd70 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801ddb0:	4601      	mov	r1, r0
 801ddb2:	4620      	mov	r0, r4
 801ddb4:	f7ff fcd9 	bl	801d76a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801ddb8:	e7d9      	b.n	801dd6e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801ddba <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801ddba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ddbe:	461e      	mov	r6, r3
 801ddc0:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801ddc2:	4604      	mov	r4, r0
 801ddc4:	4617      	mov	r7, r2
 801ddc6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801ddca:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801ddce:	f7ec faab 	bl	800a328 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801ddd2:	4605      	mov	r5, r0
 801ddd4:	b918      	cbnz	r0, 801ddde <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 801ddd6:	6030      	str	r0, [r6, #0]
 801ddd8:	4628      	mov	r0, r5
 801ddda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ddde:	683b      	ldr	r3, [r7, #0]
 801dde0:	4601      	mov	r1, r0
 801dde2:	4638      	mov	r0, r7
 801dde4:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801dde8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801ddec:	47c8      	blx	r9
 801ddee:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801ddf2:	4602      	mov	r2, r0
 801ddf4:	6030      	str	r0, [r6, #0]
 801ddf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801ddfa:	d213      	bcs.n	801de24 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801ddfc:	4643      	mov	r3, r8
 801ddfe:	4639      	mov	r1, r7
 801de00:	4620      	mov	r0, r4
 801de02:	f7ff fded 	bl	801d9e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801de06:	6030      	str	r0, [r6, #0]
 801de08:	6833      	ldr	r3, [r6, #0]
 801de0a:	b143      	cbz	r3, 801de1e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 801de0c:	7b5a      	ldrb	r2, [r3, #13]
 801de0e:	7a9b      	ldrb	r3, [r3, #10]
 801de10:	0052      	lsls	r2, r2, #1
 801de12:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801de16:	4313      	orrs	r3, r2
 801de18:	bf0c      	ite	eq
 801de1a:	2301      	moveq	r3, #1
 801de1c:	2300      	movne	r3, #0
 801de1e:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801de22:	e7d9      	b.n	801ddd8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 801de24:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801de28:	b29b      	uxth	r3, r3
 801de2a:	2b7f      	cmp	r3, #127	; 0x7f
 801de2c:	d804      	bhi.n	801de38 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 801de2e:	4639      	mov	r1, r7
 801de30:	4620      	mov	r0, r4
 801de32:	f7ff fcc9 	bl	801d7c8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801de36:	e7e6      	b.n	801de06 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 801de38:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801de3c:	2b00      	cmp	r3, #0
 801de3e:	d0e3      	beq.n	801de08 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801de40:	f640 1302 	movw	r3, #2306	; 0x902
 801de44:	429d      	cmp	r5, r3
 801de46:	d1df      	bne.n	801de08 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801de48:	4601      	mov	r1, r0
 801de4a:	4620      	mov	r0, r4
 801de4c:	f7ff fc8d 	bl	801d76a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801de50:	e7d9      	b.n	801de06 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0801de52 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801de52:	b510      	push	{r4, lr}
 801de54:	4604      	mov	r4, r0
 801de56:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801de5a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801de5c:	b1e1      	cbz	r1, 801de98 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801de5e:	2b0a      	cmp	r3, #10
 801de60:	d02d      	beq.n	801debe <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801de62:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801de64:	3901      	subs	r1, #1
 801de66:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801de6a:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801de6c:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 801de70:	1c51      	adds	r1, r2, #1
 801de72:	b289      	uxth	r1, r1
 801de74:	2901      	cmp	r1, #1
 801de76:	bf8a      	itet	hi
 801de78:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801de7c:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801de7e:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 801de80:	1c5a      	adds	r2, r3, #1
 801de82:	8722      	strh	r2, [r4, #56]	; 0x38
 801de84:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801de86:	4413      	add	r3, r2
 801de88:	b29b      	uxth	r3, r3
 801de8a:	2b09      	cmp	r3, #9
 801de8c:	bf88      	it	hi
 801de8e:	3b0a      	subhi	r3, #10
 801de90:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801de94:	8458      	strh	r0, [r3, #34]	; 0x22
 801de96:	e7de      	b.n	801de56 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801de98:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801de9a:	2b0a      	cmp	r3, #10
 801de9c:	d00f      	beq.n	801debe <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801de9e:	4620      	mov	r0, r4
 801dea0:	f7ff fc11 	bl	801d6c6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801dea4:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801dea6:	1c5a      	adds	r2, r3, #1
 801dea8:	8722      	strh	r2, [r4, #56]	; 0x38
 801deaa:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801deac:	4413      	add	r3, r2
 801deae:	b29b      	uxth	r3, r3
 801deb0:	2b09      	cmp	r3, #9
 801deb2:	bf88      	it	hi
 801deb4:	3b0a      	subhi	r3, #10
 801deb6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801deba:	8458      	strh	r0, [r3, #34]	; 0x22
 801debc:	e7ec      	b.n	801de98 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801debe:	bd10      	pop	{r4, pc}

0801dec0 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801dec0:	b538      	push	{r3, r4, r5, lr}
 801dec2:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801dec4:	4604      	mov	r4, r0
 801dec6:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801deca:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 801decc:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801dece:	3a01      	subs	r2, #1
 801ded0:	8702      	strh	r2, [r0, #56]	; 0x38
 801ded2:	1c5a      	adds	r2, r3, #1
 801ded4:	b292      	uxth	r2, r2
 801ded6:	2a09      	cmp	r2, #9
 801ded8:	bf8a      	itet	hi
 801deda:	3b09      	subhi	r3, #9
 801dedc:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801dede:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801dee0:	f7ff ffb7 	bl	801de52 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801dee4:	8c23      	ldrh	r3, [r4, #32]
 801dee6:	2b01      	cmp	r3, #1
 801dee8:	bf9c      	itt	ls
 801deea:	3301      	addls	r3, #1
 801deec:	8423      	strhls	r3, [r4, #32]
 801deee:	8be3      	ldrh	r3, [r4, #30]
 801def0:	b90b      	cbnz	r3, 801def6 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801def2:	2302      	movs	r3, #2
 801def4:	83e3      	strh	r3, [r4, #30]
 801def6:	8be3      	ldrh	r3, [r4, #30]
 801def8:	4628      	mov	r0, r5
 801defa:	3b01      	subs	r3, #1
 801defc:	b29b      	uxth	r3, r3
 801defe:	83e3      	strh	r3, [r4, #30]
 801df00:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801df04:	8365      	strh	r5, [r4, #26]
 801df06:	bd38      	pop	{r3, r4, r5, pc}

0801df08 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801df08:	428a      	cmp	r2, r1
 801df0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801df0e:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 801df10:	d932      	bls.n	801df78 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801df12:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 801df14:	1a54      	subs	r4, r2, r1
 801df16:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 801df1a:	19ee      	adds	r6, r5, r7
 801df1c:	fa1f fe84 	uxth.w	lr, r4
 801df20:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 801df24:	3e01      	subs	r6, #1
 801df26:	b2b4      	uxth	r4, r6
 801df28:	eba4 090e 	sub.w	r9, r4, lr
 801df2c:	fa1f f989 	uxth.w	r9, r9
 801df30:	2c09      	cmp	r4, #9
 801df32:	4626      	mov	r6, r4
 801df34:	bf88      	it	hi
 801df36:	f1a4 060a 	subhi.w	r6, r4, #10
 801df3a:	f1bc 0f00 	cmp.w	ip, #0
 801df3e:	f104 34ff 	add.w	r4, r4, #4294967295
 801df42:	bf08      	it	eq
 801df44:	f04f 0c02 	moveq.w	ip, #2
 801df48:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801df4c:	b2a4      	uxth	r4, r4
 801df4e:	f10c 3cff 	add.w	ip, ip, #4294967295
 801df52:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 801df56:	454c      	cmp	r4, r9
 801df58:	fa1f fc8c 	uxth.w	ip, ip
 801df5c:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801df60:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 801df64:	d1e4      	bne.n	801df30 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801df66:	eba5 050e 	sub.w	r5, r5, lr
 801df6a:	eb0e 0408 	add.w	r4, lr, r8
 801df6e:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 801df72:	8705      	strh	r5, [r0, #56]	; 0x38
 801df74:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 801df78:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801df7a:	250a      	movs	r5, #10
 801df7c:	1a64      	subs	r4, r4, r1
 801df7e:	4439      	add	r1, r7
 801df80:	b289      	uxth	r1, r1
 801df82:	8704      	strh	r4, [r0, #56]	; 0x38
 801df84:	2909      	cmp	r1, #9
 801df86:	bf88      	it	hi
 801df88:	390a      	subhi	r1, #10
 801df8a:	86c1      	strh	r1, [r0, #54]	; 0x36
 801df8c:	b18a      	cbz	r2, 801dfb2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801df8e:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 801df90:	3a01      	subs	r2, #1
 801df92:	3101      	adds	r1, #1
 801df94:	b292      	uxth	r2, r2
 801df96:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801df9a:	8701      	strh	r1, [r0, #56]	; 0x38
 801df9c:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801df9e:	b901      	cbnz	r1, 801dfa2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 801dfa0:	86c5      	strh	r5, [r0, #54]	; 0x36
 801dfa2:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801dfa4:	3901      	subs	r1, #1
 801dfa6:	b289      	uxth	r1, r1
 801dfa8:	86c1      	strh	r1, [r0, #54]	; 0x36
 801dfaa:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801dfae:	844c      	strh	r4, [r1, #34]	; 0x22
 801dfb0:	e7ec      	b.n	801df8c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801dfb2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dfb6:	f7ff bf4c 	b.w	801de52 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801dfba <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801dfba:	b570      	push	{r4, r5, r6, lr}
 801dfbc:	2500      	movs	r5, #0
 801dfbe:	4295      	cmp	r5, r2
 801dfc0:	d011      	beq.n	801dfe6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801dfc2:	8bc4      	ldrh	r4, [r0, #30]
 801dfc4:	f831 6b02 	ldrh.w	r6, [r1], #2
 801dfc8:	4414      	add	r4, r2
 801dfca:	3c01      	subs	r4, #1
 801dfcc:	1b64      	subs	r4, r4, r5
 801dfce:	b2a4      	uxth	r4, r4
 801dfd0:	2c01      	cmp	r4, #1
 801dfd2:	bf88      	it	hi
 801dfd4:	3c02      	subhi	r4, #2
 801dfd6:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801dfda:	8b64      	ldrh	r4, [r4, #26]
 801dfdc:	42b4      	cmp	r4, r6
 801dfde:	d117      	bne.n	801e010 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801dfe0:	3501      	adds	r5, #1
 801dfe2:	b2ad      	uxth	r5, r5
 801dfe4:	e7eb      	b.n	801dfbe <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801dfe6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801dfea:	2400      	movs	r4, #0
 801dfec:	4413      	add	r3, r2
 801dfee:	b2a2      	uxth	r2, r4
 801dff0:	429a      	cmp	r2, r3
 801dff2:	da0f      	bge.n	801e014 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801dff4:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801dff6:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801dffa:	3401      	adds	r4, #1
 801dffc:	4432      	add	r2, r6
 801dffe:	b292      	uxth	r2, r2
 801e000:	2a09      	cmp	r2, #9
 801e002:	bf88      	it	hi
 801e004:	3a0a      	subhi	r2, #10
 801e006:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801e00a:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801e00c:	42aa      	cmp	r2, r5
 801e00e:	d0ee      	beq.n	801dfee <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801e010:	2000      	movs	r0, #0
 801e012:	bd70      	pop	{r4, r5, r6, pc}
 801e014:	2001      	movs	r0, #1
 801e016:	e7fc      	b.n	801e012 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801e018 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801e018:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e01c:	4605      	mov	r5, r0
 801e01e:	4616      	mov	r6, r2
 801e020:	1c8c      	adds	r4, r1, #2
 801e022:	8809      	ldrh	r1, [r1, #0]
 801e024:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801e028:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801e02c:	42b3      	cmp	r3, r6
 801e02e:	d124      	bne.n	801e07a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801e030:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801e034:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801e038:	f001 070f 	and.w	r7, r1, #15
 801e03c:	4652      	mov	r2, sl
 801e03e:	f8cd 8000 	str.w	r8, [sp]
 801e042:	464b      	mov	r3, r9
 801e044:	4621      	mov	r1, r4
 801e046:	4628      	mov	r0, r5
 801e048:	f7ff ffb7 	bl	801dfba <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801e04c:	4683      	mov	fp, r0
 801e04e:	b168      	cbz	r0, 801e06c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801e050:	eb0a 0109 	add.w	r1, sl, r9
 801e054:	463a      	mov	r2, r7
 801e056:	4628      	mov	r0, r5
 801e058:	4441      	add	r1, r8
 801e05a:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801e05e:	4649      	mov	r1, r9
 801e060:	f7ff ff52 	bl	801df08 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801e064:	4658      	mov	r0, fp
 801e066:	b003      	add	sp, #12
 801e068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e06c:	eb07 010a 	add.w	r1, r7, sl
 801e070:	4449      	add	r1, r9
 801e072:	4441      	add	r1, r8
 801e074:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801e078:	e7d2      	b.n	801e020 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801e07a:	f04f 0b00 	mov.w	fp, #0
 801e07e:	e7f1      	b.n	801e064 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801e080 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801e080:	b570      	push	{r4, r5, r6, lr}
 801e082:	8810      	ldrh	r0, [r2, #0]
 801e084:	4298      	cmp	r0, r3
 801e086:	d817      	bhi.n	801e0b8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801e088:	1e48      	subs	r0, r1, #1
 801e08a:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801e08e:	4298      	cmp	r0, r3
 801e090:	d312      	bcc.n	801e0b8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801e092:	2400      	movs	r4, #0
 801e094:	428c      	cmp	r4, r1
 801e096:	d20f      	bcs.n	801e0b8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801e098:	1860      	adds	r0, r4, r1
 801e09a:	1040      	asrs	r0, r0, #1
 801e09c:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801e0a0:	0085      	lsls	r5, r0, #2
 801e0a2:	42b3      	cmp	r3, r6
 801e0a4:	d902      	bls.n	801e0ac <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801e0a6:	3001      	adds	r0, #1
 801e0a8:	b284      	uxth	r4, r0
 801e0aa:	e7f3      	b.n	801e094 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801e0ac:	d201      	bcs.n	801e0b2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801e0ae:	b281      	uxth	r1, r0
 801e0b0:	e7f0      	b.n	801e094 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801e0b2:	442a      	add	r2, r5
 801e0b4:	8850      	ldrh	r0, [r2, #2]
 801e0b6:	bd70      	pop	{r4, r5, r6, pc}
 801e0b8:	2000      	movs	r0, #0
 801e0ba:	e7fc      	b.n	801e0b6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801e0bc <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801e0bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e0c0:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801e0c2:	4604      	mov	r4, r0
 801e0c4:	260b      	movs	r6, #11
 801e0c6:	886f      	ldrh	r7, [r5, #2]
 801e0c8:	087f      	lsrs	r7, r7, #1
 801e0ca:	3e01      	subs	r6, #1
 801e0cc:	d013      	beq.n	801e0f6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801e0ce:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801e0d0:	462a      	mov	r2, r5
 801e0d2:	4639      	mov	r1, r7
 801e0d4:	4620      	mov	r0, r4
 801e0d6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801e0da:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801e0de:	4643      	mov	r3, r8
 801e0e0:	f7ff ffce 	bl	801e080 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801e0e4:	b138      	cbz	r0, 801e0f6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801e0e6:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801e0ea:	4642      	mov	r2, r8
 801e0ec:	4620      	mov	r0, r4
 801e0ee:	f7ff ff93 	bl	801e018 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801e0f2:	2800      	cmp	r0, #0
 801e0f4:	d1e9      	bne.n	801e0ca <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801e0f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801e0fc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801e0fc:	b570      	push	{r4, r5, r6, lr}
 801e0fe:	694a      	ldr	r2, [r1, #20]
 801e100:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801e102:	684b      	ldr	r3, [r1, #4]
 801e104:	1b54      	subs	r4, r2, r5
 801e106:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801e108:	f000 8106 	beq.w	801e318 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801e10c:	1b9b      	subs	r3, r3, r6
 801e10e:	d003      	beq.n	801e118 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801e110:	4363      	muls	r3, r4
 801e112:	2210      	movs	r2, #16
 801e114:	fb93 f3f2 	sdiv	r3, r3, r2
 801e118:	680c      	ldr	r4, [r1, #0]
 801e11a:	698a      	ldr	r2, [r1, #24]
 801e11c:	1b65      	subs	r5, r4, r5
 801e11e:	f000 80fd 	beq.w	801e31c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801e122:	1b92      	subs	r2, r2, r6
 801e124:	d003      	beq.n	801e12e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801e126:	436a      	muls	r2, r5
 801e128:	2410      	movs	r4, #16
 801e12a:	fb92 f2f4 	sdiv	r2, r2, r4
 801e12e:	1a9b      	subs	r3, r3, r2
 801e130:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801e358 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801e134:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e138:	460a      	mov	r2, r1
 801e13a:	ee07 3a90 	vmov	s15, r3
 801e13e:	f100 040c 	add.w	r4, r0, #12
 801e142:	4603      	mov	r3, r0
 801e144:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e148:	ee67 7a84 	vmul.f32	s15, s15, s8
 801e14c:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801e150:	eeb1 6a43 	vneg.f32	s12, s6
 801e154:	edd2 7a02 	vldr	s15, [r2, #8]
 801e158:	3214      	adds	r2, #20
 801e15a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801e15e:	ece3 6a01 	vstmia	r3!, {s13}
 801e162:	429c      	cmp	r4, r3
 801e164:	ed52 7a02 	vldr	s15, [r2, #-8]
 801e168:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801e16c:	edc3 7a02 	vstr	s15, [r3, #8]
 801e170:	ed52 7a01 	vldr	s15, [r2, #-4]
 801e174:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801e178:	edc3 7a05 	vstr	s15, [r3, #20]
 801e17c:	d1ea      	bne.n	801e154 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801e17e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801e180:	698b      	ldr	r3, [r1, #24]
 801e182:	edd0 4a02 	vldr	s9, [r0, #8]
 801e186:	1a9b      	subs	r3, r3, r2
 801e188:	edd0 3a00 	vldr	s7, [r0]
 801e18c:	edd0 6a01 	vldr	s13, [r0, #4]
 801e190:	ee07 3a90 	vmov	s15, r3
 801e194:	684b      	ldr	r3, [r1, #4]
 801e196:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801e19a:	ed90 5a05 	vldr	s10, [r0, #20]
 801e19e:	1a9b      	subs	r3, r3, r2
 801e1a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e1a4:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801e1a8:	ed90 2a03 	vldr	s4, [r0, #12]
 801e1ac:	ee07 3a10 	vmov	s14, r3
 801e1b0:	edd0 5a04 	vldr	s11, [r0, #16]
 801e1b4:	ee67 7a84 	vmul.f32	s15, s15, s8
 801e1b8:	ed90 1a07 	vldr	s2, [r0, #28]
 801e1bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e1c0:	edd0 2a06 	vldr	s5, [r0, #24]
 801e1c4:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801e1c8:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801e1cc:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e1d0:	ee32 5a45 	vsub.f32	s10, s4, s10
 801e1d4:	eee6 7a87 	vfma.f32	s15, s13, s14
 801e1d8:	ee67 7a83 	vmul.f32	s15, s15, s6
 801e1dc:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801e1e0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801e1e2:	694a      	ldr	r2, [r1, #20]
 801e1e4:	1b13      	subs	r3, r2, r4
 801e1e6:	ee07 3a10 	vmov	s14, r3
 801e1ea:	680b      	ldr	r3, [r1, #0]
 801e1ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e1f0:	1b1b      	subs	r3, r3, r4
 801e1f2:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e1f6:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801e1fa:	ee07 3a10 	vmov	s14, r3
 801e1fe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e202:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e206:	eee6 4a87 	vfma.f32	s9, s13, s14
 801e20a:	ee64 4a86 	vmul.f32	s9, s9, s12
 801e20e:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801e212:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801e214:	698b      	ldr	r3, [r1, #24]
 801e216:	1a9b      	subs	r3, r3, r2
 801e218:	ee06 3a90 	vmov	s13, r3
 801e21c:	684b      	ldr	r3, [r1, #4]
 801e21e:	1a9b      	subs	r3, r3, r2
 801e220:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801e224:	ee07 3a10 	vmov	s14, r3
 801e228:	ee66 6a84 	vmul.f32	s13, s13, s8
 801e22c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e230:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801e234:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e238:	eee5 6a87 	vfma.f32	s13, s11, s14
 801e23c:	ee66 6a83 	vmul.f32	s13, s13, s6
 801e240:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801e244:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801e246:	694a      	ldr	r2, [r1, #20]
 801e248:	1b13      	subs	r3, r2, r4
 801e24a:	ee07 3a10 	vmov	s14, r3
 801e24e:	680b      	ldr	r3, [r1, #0]
 801e250:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e254:	1b1b      	subs	r3, r3, r4
 801e256:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e25a:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801e25e:	ee07 3a10 	vmov	s14, r3
 801e262:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e266:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e26a:	eea5 5a87 	vfma.f32	s10, s11, s14
 801e26e:	edd0 5a08 	vldr	s11, [r0, #32]
 801e272:	ee31 1a65 	vsub.f32	s2, s2, s11
 801e276:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801e27a:	ee25 5a06 	vmul.f32	s10, s10, s12
 801e27e:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801e282:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801e284:	698b      	ldr	r3, [r1, #24]
 801e286:	1a9b      	subs	r3, r3, r2
 801e288:	ee07 3a10 	vmov	s14, r3
 801e28c:	684b      	ldr	r3, [r1, #4]
 801e28e:	1a9b      	subs	r3, r3, r2
 801e290:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e294:	ee01 3a90 	vmov	s3, r3
 801e298:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e29c:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801e2a0:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801e2a4:	ee61 1a84 	vmul.f32	s3, s3, s8
 801e2a8:	eea1 7a21 	vfma.f32	s14, s2, s3
 801e2ac:	ee27 7a03 	vmul.f32	s14, s14, s6
 801e2b0:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801e2b4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801e2b6:	694a      	ldr	r2, [r1, #20]
 801e2b8:	1b13      	subs	r3, r2, r4
 801e2ba:	ee03 3a10 	vmov	s6, r3
 801e2be:	680b      	ldr	r3, [r1, #0]
 801e2c0:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801e2c4:	1b1b      	subs	r3, r3, r4
 801e2c6:	ee23 3a04 	vmul.f32	s6, s6, s8
 801e2ca:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801e2ce:	ee03 3a10 	vmov	s6, r3
 801e2d2:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801e2d6:	ee23 4a04 	vmul.f32	s8, s6, s8
 801e2da:	eee1 5a04 	vfma.f32	s11, s2, s8
 801e2de:	ee25 6a86 	vmul.f32	s12, s11, s12
 801e2e2:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801e2e6:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801e2ea:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801e2ee:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801e2f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e2f6:	dd13      	ble.n	801e320 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801e2f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801e2fc:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801e300:	63c3      	str	r3, [r0, #60]	; 0x3c
 801e302:	eee3 7a87 	vfma.f32	s15, s7, s14
 801e306:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801e30a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e30e:	dd15      	ble.n	801e33c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801e310:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801e314:	6403      	str	r3, [r0, #64]	; 0x40
 801e316:	bd70      	pop	{r4, r5, r6, pc}
 801e318:	4623      	mov	r3, r4
 801e31a:	e6fd      	b.n	801e118 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801e31c:	462a      	mov	r2, r5
 801e31e:	e706      	b.n	801e12e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801e320:	d502      	bpl.n	801e328 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801e322:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801e326:	e7e9      	b.n	801e2fc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801e328:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801e32c:	eea3 2a85 	vfma.f32	s4, s7, s10
 801e330:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801e334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e338:	dade      	bge.n	801e2f8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801e33a:	e7f2      	b.n	801e322 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801e33c:	d502      	bpl.n	801e344 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801e33e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801e342:	e7e7      	b.n	801e314 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801e344:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801e348:	eee3 4a86 	vfma.f32	s9, s7, s12
 801e34c:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801e350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e354:	dadc      	bge.n	801e310 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801e356:	e7f2      	b.n	801e33e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801e358:	3d800000 	.word	0x3d800000

0801e35c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801e35c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e360:	2714      	movs	r7, #20
 801e362:	435f      	muls	r7, r3
 801e364:	eb02 0c07 	add.w	ip, r2, r7
 801e368:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801e36c:	f115 0e0f 	adds.w	lr, r5, #15
 801e370:	f100 80a2 	bmi.w	801e4b8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801e374:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801e378:	9c08      	ldr	r4, [sp, #32]
 801e37a:	2614      	movs	r6, #20
 801e37c:	f8c0 e014 	str.w	lr, [r0, #20]
 801e380:	4366      	muls	r6, r4
 801e382:	eb02 0806 	add.w	r8, r2, r6
 801e386:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801e38a:	f115 040f 	adds.w	r4, r5, #15
 801e38e:	f100 809f 	bmi.w	801e4d0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801e392:	1124      	asrs	r4, r4, #4
 801e394:	eba4 040e 	sub.w	r4, r4, lr
 801e398:	6184      	str	r4, [r0, #24]
 801e39a:	2c00      	cmp	r4, #0
 801e39c:	f000 808a 	beq.w	801e4b4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801e3a0:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801e3a4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801e3a8:	5995      	ldr	r5, [r2, r6]
 801e3aa:	eba4 0809 	sub.w	r8, r4, r9
 801e3ae:	59d4      	ldr	r4, [r2, r7]
 801e3b0:	eba5 0a04 	sub.w	sl, r5, r4
 801e3b4:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801e3b8:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801e3bc:	fb0e fe05 	mul.w	lr, lr, r5
 801e3c0:	fb0a ee19 	mls	lr, sl, r9, lr
 801e3c4:	fb08 e404 	mla	r4, r8, r4, lr
 801e3c8:	3c01      	subs	r4, #1
 801e3ca:	19a4      	adds	r4, r4, r6
 801e3cc:	f100 808c 	bmi.w	801e4e8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801e3d0:	fb94 fef6 	sdiv	lr, r4, r6
 801e3d4:	fb06 441e 	mls	r4, r6, lr, r4
 801e3d8:	f8c0 e000 	str.w	lr, [r0]
 801e3dc:	6104      	str	r4, [r0, #16]
 801e3de:	2d00      	cmp	r5, #0
 801e3e0:	f2c0 8095 	blt.w	801e50e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801e3e4:	fb95 f4f6 	sdiv	r4, r5, r6
 801e3e8:	fb06 5514 	mls	r5, r6, r4, r5
 801e3ec:	6044      	str	r4, [r0, #4]
 801e3ee:	6085      	str	r5, [r0, #8]
 801e3f0:	60c6      	str	r6, [r0, #12]
 801e3f2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801e3f6:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801e3fa:	6945      	ldr	r5, [r0, #20]
 801e3fc:	59d2      	ldr	r2, [r2, r7]
 801e3fe:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801e402:	eddf 6a4b 	vldr	s13, [pc, #300]	; 801e530 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801e406:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801e40a:	ee07 4a10 	vmov	s14, r4
 801e40e:	6804      	ldr	r4, [r0, #0]
 801e410:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801e414:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e418:	ee07 2a90 	vmov	s15, r2
 801e41c:	ee27 7a26 	vmul.f32	s14, s14, s13
 801e420:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e424:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801e428:	edd3 6a00 	vldr	s13, [r3]
 801e42c:	eee6 6a07 	vfma.f32	s13, s12, s14
 801e430:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 801e434:	eee6 6a27 	vfma.f32	s13, s12, s15
 801e438:	edc0 6a07 	vstr	s13, [r0, #28]
 801e43c:	edd0 6a01 	vldr	s13, [r0, #4]
 801e440:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 801e444:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801e448:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801e44c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801e450:	ed80 6a08 	vstr	s12, [r0, #32]
 801e454:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 801e456:	6242      	str	r2, [r0, #36]	; 0x24
 801e458:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 801e45c:	ed93 6a03 	vldr	s12, [r3, #12]
 801e460:	eea5 6a87 	vfma.f32	s12, s11, s14
 801e464:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801e468:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801e46c:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 801e470:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801e474:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 801e478:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801e47c:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 801e480:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801e482:	6302      	str	r2, [r0, #48]	; 0x30
 801e484:	ed93 6a06 	vldr	s12, [r3, #24]
 801e488:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 801e48c:	eea5 6a87 	vfma.f32	s12, s11, s14
 801e490:	eeb0 7a46 	vmov.f32	s14, s12
 801e494:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 801e498:	eea6 7a27 	vfma.f32	s14, s12, s15
 801e49c:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801e4a0:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 801e4a4:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 801e4a8:	eee6 7a87 	vfma.f32	s15, s13, s14
 801e4ac:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 801e4b0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801e4b2:	63c3      	str	r3, [r0, #60]	; 0x3c
 801e4b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e4b8:	2410      	movs	r4, #16
 801e4ba:	f1c5 0501 	rsb	r5, r5, #1
 801e4be:	fb9e fef4 	sdiv	lr, lr, r4
 801e4c2:	f015 050f 	ands.w	r5, r5, #15
 801e4c6:	bf18      	it	ne
 801e4c8:	2501      	movne	r5, #1
 801e4ca:	ebae 0e05 	sub.w	lr, lr, r5
 801e4ce:	e753      	b.n	801e378 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801e4d0:	f04f 0910 	mov.w	r9, #16
 801e4d4:	f1c5 0501 	rsb	r5, r5, #1
 801e4d8:	fb94 f4f9 	sdiv	r4, r4, r9
 801e4dc:	f015 050f 	ands.w	r5, r5, #15
 801e4e0:	bf18      	it	ne
 801e4e2:	2501      	movne	r5, #1
 801e4e4:	1b64      	subs	r4, r4, r5
 801e4e6:	e755      	b.n	801e394 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801e4e8:	4264      	negs	r4, r4
 801e4ea:	fb94 fef6 	sdiv	lr, r4, r6
 801e4ee:	f1ce 0800 	rsb	r8, lr, #0
 801e4f2:	fb06 441e 	mls	r4, r6, lr, r4
 801e4f6:	f8c0 8000 	str.w	r8, [r0]
 801e4fa:	6104      	str	r4, [r0, #16]
 801e4fc:	2c00      	cmp	r4, #0
 801e4fe:	f43f af6e 	beq.w	801e3de <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801e502:	ea6f 0e0e 	mvn.w	lr, lr
 801e506:	1b34      	subs	r4, r6, r4
 801e508:	f8c0 e000 	str.w	lr, [r0]
 801e50c:	e766      	b.n	801e3dc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801e50e:	426d      	negs	r5, r5
 801e510:	fb95 f4f6 	sdiv	r4, r5, r6
 801e514:	f1c4 0e00 	rsb	lr, r4, #0
 801e518:	fb06 5514 	mls	r5, r6, r4, r5
 801e51c:	f8c0 e004 	str.w	lr, [r0, #4]
 801e520:	6085      	str	r5, [r0, #8]
 801e522:	2d00      	cmp	r5, #0
 801e524:	f43f af64 	beq.w	801e3f0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801e528:	43e4      	mvns	r4, r4
 801e52a:	1b75      	subs	r5, r6, r5
 801e52c:	6044      	str	r4, [r0, #4]
 801e52e:	e75e      	b.n	801e3ee <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801e530:	3d800000 	.word	0x3d800000

0801e534 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801e534:	4602      	mov	r2, r0
 801e536:	b148      	cbz	r0, 801e54c <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801e538:	2300      	movs	r3, #0
 801e53a:	b298      	uxth	r0, r3
 801e53c:	3301      	adds	r3, #1
 801e53e:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801e542:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801e546:	2900      	cmp	r1, #0
 801e548:	d1f7      	bne.n	801e53a <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801e54a:	4770      	bx	lr
 801e54c:	4770      	bx	lr

0801e54e <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801e54e:	b530      	push	{r4, r5, lr}
 801e550:	4604      	mov	r4, r0
 801e552:	b159      	cbz	r1, 801e56c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801e554:	b148      	cbz	r0, 801e56a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801e556:	2300      	movs	r3, #0
 801e558:	b298      	uxth	r0, r3
 801e55a:	4282      	cmp	r2, r0
 801e55c:	d905      	bls.n	801e56a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801e55e:	5ccd      	ldrb	r5, [r1, r3]
 801e560:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801e564:	3301      	adds	r3, #1
 801e566:	2d00      	cmp	r5, #0
 801e568:	d1f6      	bne.n	801e558 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801e56a:	bd30      	pop	{r4, r5, pc}
 801e56c:	4608      	mov	r0, r1
 801e56e:	e7fc      	b.n	801e56a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801e570 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>:
 801e570:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e572:	b08b      	sub	sp, #44	; 0x2c
 801e574:	468c      	mov	ip, r1
 801e576:	4604      	mov	r4, r0
 801e578:	2100      	movs	r1, #0
 801e57a:	261f      	movs	r6, #31
 801e57c:	af01      	add	r7, sp, #4
 801e57e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801e582:	1e71      	subs	r1, r6, #1
 801e584:	fb94 fef3 	sdiv	lr, r4, r3
 801e588:	fb03 441e 	mls	r4, r3, lr, r4
 801e58c:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801e590:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801e594:	b2ec      	uxtb	r4, r5
 801e596:	2d09      	cmp	r5, #9
 801e598:	bfd4      	ite	le
 801e59a:	3430      	addle	r4, #48	; 0x30
 801e59c:	3457      	addgt	r4, #87	; 0x57
 801e59e:	b2e4      	uxtb	r4, r4
 801e5a0:	55bc      	strb	r4, [r7, r6]
 801e5a2:	4674      	mov	r4, lr
 801e5a4:	b974      	cbnz	r4, 801e5c4 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x54>
 801e5a6:	2800      	cmp	r0, #0
 801e5a8:	da05      	bge.n	801e5b6 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x46>
 801e5aa:	ab0a      	add	r3, sp, #40	; 0x28
 801e5ac:	4419      	add	r1, r3
 801e5ae:	232d      	movs	r3, #45	; 0x2d
 801e5b0:	f801 3c24 	strb.w	r3, [r1, #-36]
 801e5b4:	1eb1      	subs	r1, r6, #2
 801e5b6:	3101      	adds	r1, #1
 801e5b8:	4660      	mov	r0, ip
 801e5ba:	4439      	add	r1, r7
 801e5bc:	f7ff ffc7 	bl	801e54e <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801e5c0:	b00b      	add	sp, #44	; 0x2c
 801e5c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e5c4:	460e      	mov	r6, r1
 801e5c6:	e7dc      	b.n	801e582 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x12>

0801e5c8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 801e5c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e5ca:	468c      	mov	ip, r1
 801e5cc:	b08b      	sub	sp, #44	; 0x2c
 801e5ce:	2100      	movs	r1, #0
 801e5d0:	ae01      	add	r6, sp, #4
 801e5d2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801e5d6:	211f      	movs	r1, #31
 801e5d8:	fbb0 f7f3 	udiv	r7, r0, r3
 801e5dc:	fb03 0517 	mls	r5, r3, r7, r0
 801e5e0:	4638      	mov	r0, r7
 801e5e2:	b2ec      	uxtb	r4, r5
 801e5e4:	2d09      	cmp	r5, #9
 801e5e6:	bfd4      	ite	le
 801e5e8:	3430      	addle	r4, #48	; 0x30
 801e5ea:	3457      	addgt	r4, #87	; 0x57
 801e5ec:	b2e4      	uxtb	r4, r4
 801e5ee:	558c      	strb	r4, [r1, r6]
 801e5f0:	1e4c      	subs	r4, r1, #1
 801e5f2:	b92f      	cbnz	r7, 801e600 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 801e5f4:	4431      	add	r1, r6
 801e5f6:	4660      	mov	r0, ip
 801e5f8:	f7ff ffa9 	bl	801e54e <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801e5fc:	b00b      	add	sp, #44	; 0x2c
 801e5fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e600:	4621      	mov	r1, r4
 801e602:	e7e9      	b.n	801e5d8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

0801e604 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801e604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e608:	b085      	sub	sp, #20
 801e60a:	4691      	mov	r9, r2
 801e60c:	6802      	ldr	r2, [r0, #0]
 801e60e:	4688      	mov	r8, r1
 801e610:	461c      	mov	r4, r3
 801e612:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801e616:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801e61a:	4683      	mov	fp, r0
 801e61c:	4610      	mov	r0, r2
 801e61e:	9103      	str	r1, [sp, #12]
 801e620:	9302      	str	r3, [sp, #8]
 801e622:	9201      	str	r2, [sp, #4]
 801e624:	f7ff ff86 	bl	801e534 <_ZN8touchgfx7Unicode6strlenEPKt>
 801e628:	f1b8 0f00 	cmp.w	r8, #0
 801e62c:	bf0c      	ite	eq
 801e62e:	4684      	moveq	ip, r0
 801e630:	f100 0c01 	addne.w	ip, r0, #1
 801e634:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 801e638:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801e63c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801e63e:	fa1f fc8c 	uxth.w	ip, ip
 801e642:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801e644:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 801e648:	9903      	ldr	r1, [sp, #12]
 801e64a:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801e64e:	d041      	beq.n	801e6d4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801e650:	d834      	bhi.n	801e6bc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801e652:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 801e656:	d059      	beq.n	801e70c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801e658:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 801e65c:	d03a      	beq.n	801e6d4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801e65e:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 801e662:	d034      	beq.n	801e6ce <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801e664:	2400      	movs	r4, #0
 801e666:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801e66a:	3a01      	subs	r2, #1
 801e66c:	b169      	cbz	r1, 801e68a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801e66e:	9911      	ldr	r1, [sp, #68]	; 0x44
 801e670:	458c      	cmp	ip, r1
 801e672:	da09      	bge.n	801e688 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801e674:	eba1 010c 	sub.w	r1, r1, ip
 801e678:	b289      	uxth	r1, r1
 801e67a:	b933      	cbnz	r3, 801e68a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801e67c:	2e00      	cmp	r6, #0
 801e67e:	d051      	beq.n	801e724 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801e680:	2800      	cmp	r0, #0
 801e682:	d04f      	beq.n	801e724 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801e684:	440c      	add	r4, r1
 801e686:	b2a4      	uxth	r4, r4
 801e688:	2100      	movs	r1, #0
 801e68a:	682b      	ldr	r3, [r5, #0]
 801e68c:	4293      	cmp	r3, r2
 801e68e:	da07      	bge.n	801e6a0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801e690:	f1b8 0f00 	cmp.w	r8, #0
 801e694:	d004      	beq.n	801e6a0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801e696:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801e69a:	682b      	ldr	r3, [r5, #0]
 801e69c:	3301      	adds	r3, #1
 801e69e:	602b      	str	r3, [r5, #0]
 801e6a0:	2730      	movs	r7, #48	; 0x30
 801e6a2:	2c00      	cmp	r4, #0
 801e6a4:	d04e      	beq.n	801e744 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801e6a6:	682e      	ldr	r6, [r5, #0]
 801e6a8:	3c01      	subs	r4, #1
 801e6aa:	42b2      	cmp	r2, r6
 801e6ac:	b2a4      	uxth	r4, r4
 801e6ae:	dd49      	ble.n	801e744 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801e6b0:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801e6b4:	682b      	ldr	r3, [r5, #0]
 801e6b6:	3301      	adds	r3, #1
 801e6b8:	602b      	str	r3, [r5, #0]
 801e6ba:	e7f2      	b.n	801e6a2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801e6bc:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 801e6c0:	d01d      	beq.n	801e6fe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801e6c2:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 801e6c6:	d002      	beq.n	801e6ce <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801e6c8:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 801e6cc:	e7c9      	b.n	801e662 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801e6ce:	4684      	mov	ip, r0
 801e6d0:	f04f 0800 	mov.w	r8, #0
 801e6d4:	2c00      	cmp	r4, #0
 801e6d6:	d0c6      	beq.n	801e666 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801e6d8:	b947      	cbnz	r7, 801e6ec <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801e6da:	2801      	cmp	r0, #1
 801e6dc:	d106      	bne.n	801e6ec <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801e6de:	8814      	ldrh	r4, [r2, #0]
 801e6e0:	2c30      	cmp	r4, #48	; 0x30
 801e6e2:	bf02      	ittt	eq
 801e6e4:	3202      	addeq	r2, #2
 801e6e6:	4638      	moveq	r0, r7
 801e6e8:	f8cb 2000 	streq.w	r2, [fp]
 801e6ec:	45bc      	cmp	ip, r7
 801e6ee:	da14      	bge.n	801e71a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801e6f0:	b2bf      	uxth	r7, r7
 801e6f2:	eba7 040c 	sub.w	r4, r7, ip
 801e6f6:	46bc      	mov	ip, r7
 801e6f8:	b2a4      	uxth	r4, r4
 801e6fa:	2600      	movs	r6, #0
 801e6fc:	e7b3      	b.n	801e666 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801e6fe:	4684      	mov	ip, r0
 801e700:	b16c      	cbz	r4, 801e71e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801e702:	42b8      	cmp	r0, r7
 801e704:	dd00      	ble.n	801e708 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801e706:	b2b8      	uxth	r0, r7
 801e708:	2400      	movs	r4, #0
 801e70a:	e003      	b.n	801e714 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801e70c:	f04f 0c01 	mov.w	ip, #1
 801e710:	2400      	movs	r4, #0
 801e712:	4660      	mov	r0, ip
 801e714:	4626      	mov	r6, r4
 801e716:	46a0      	mov	r8, r4
 801e718:	e7a5      	b.n	801e666 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801e71a:	2400      	movs	r4, #0
 801e71c:	e7ed      	b.n	801e6fa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801e71e:	4626      	mov	r6, r4
 801e720:	46a0      	mov	r8, r4
 801e722:	e7a0      	b.n	801e666 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801e724:	2900      	cmp	r1, #0
 801e726:	d0b0      	beq.n	801e68a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801e728:	2720      	movs	r7, #32
 801e72a:	682e      	ldr	r6, [r5, #0]
 801e72c:	2900      	cmp	r1, #0
 801e72e:	d0ac      	beq.n	801e68a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801e730:	3901      	subs	r1, #1
 801e732:	4296      	cmp	r6, r2
 801e734:	b289      	uxth	r1, r1
 801e736:	daa7      	bge.n	801e688 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801e738:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801e73c:	682b      	ldr	r3, [r5, #0]
 801e73e:	3301      	adds	r3, #1
 801e740:	602b      	str	r3, [r5, #0]
 801e742:	e7f2      	b.n	801e72a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801e744:	b188      	cbz	r0, 801e76a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801e746:	682b      	ldr	r3, [r5, #0]
 801e748:	3801      	subs	r0, #1
 801e74a:	429a      	cmp	r2, r3
 801e74c:	b280      	uxth	r0, r0
 801e74e:	dd0c      	ble.n	801e76a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801e750:	f8db 3000 	ldr.w	r3, [fp]
 801e754:	1c9c      	adds	r4, r3, #2
 801e756:	f8cb 4000 	str.w	r4, [fp]
 801e75a:	881c      	ldrh	r4, [r3, #0]
 801e75c:	682b      	ldr	r3, [r5, #0]
 801e75e:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801e762:	682b      	ldr	r3, [r5, #0]
 801e764:	3301      	adds	r3, #1
 801e766:	602b      	str	r3, [r5, #0]
 801e768:	e7ec      	b.n	801e744 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801e76a:	2620      	movs	r6, #32
 801e76c:	b151      	cbz	r1, 801e784 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801e76e:	6828      	ldr	r0, [r5, #0]
 801e770:	3901      	subs	r1, #1
 801e772:	4282      	cmp	r2, r0
 801e774:	b289      	uxth	r1, r1
 801e776:	dd05      	ble.n	801e784 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801e778:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801e77c:	682b      	ldr	r3, [r5, #0]
 801e77e:	3301      	adds	r3, #1
 801e780:	602b      	str	r3, [r5, #0]
 801e782:	e7f3      	b.n	801e76c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801e784:	b005      	add	sp, #20
 801e786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e78a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801e78a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e78e:	2400      	movs	r4, #0
 801e790:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801e794:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 801e798:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 801e79c:	8014      	strh	r4, [r2, #0]
 801e79e:	701c      	strb	r4, [r3, #0]
 801e7a0:	f888 4000 	strb.w	r4, [r8]
 801e7a4:	f88c 4000 	strb.w	r4, [ip]
 801e7a8:	f88e 4000 	strb.w	r4, [lr]
 801e7ac:	703c      	strb	r4, [r7, #0]
 801e7ae:	6804      	ldr	r4, [r0, #0]
 801e7b0:	b1a4      	cbz	r4, 801e7dc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801e7b2:	8824      	ldrh	r4, [r4, #0]
 801e7b4:	f04f 0901 	mov.w	r9, #1
 801e7b8:	b314      	cbz	r4, 801e800 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801e7ba:	2c2b      	cmp	r4, #43	; 0x2b
 801e7bc:	d001      	beq.n	801e7c2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801e7be:	2c20      	cmp	r4, #32
 801e7c0:	d110      	bne.n	801e7e4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801e7c2:	8014      	strh	r4, [r2, #0]
 801e7c4:	6804      	ldr	r4, [r0, #0]
 801e7c6:	b10c      	cbz	r4, 801e7cc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801e7c8:	3402      	adds	r4, #2
 801e7ca:	6004      	str	r4, [r0, #0]
 801e7cc:	680c      	ldr	r4, [r1, #0]
 801e7ce:	b10c      	cbz	r4, 801e7d4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801e7d0:	3401      	adds	r4, #1
 801e7d2:	600c      	str	r4, [r1, #0]
 801e7d4:	6804      	ldr	r4, [r0, #0]
 801e7d6:	b17c      	cbz	r4, 801e7f8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801e7d8:	8824      	ldrh	r4, [r4, #0]
 801e7da:	e7ed      	b.n	801e7b8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801e7dc:	680c      	ldr	r4, [r1, #0]
 801e7de:	b17c      	cbz	r4, 801e800 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801e7e0:	7824      	ldrb	r4, [r4, #0]
 801e7e2:	e7e7      	b.n	801e7b4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801e7e4:	2c2d      	cmp	r4, #45	; 0x2d
 801e7e6:	d102      	bne.n	801e7ee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801e7e8:	f883 9000 	strb.w	r9, [r3]
 801e7ec:	e7ea      	b.n	801e7c4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801e7ee:	2c23      	cmp	r4, #35	; 0x23
 801e7f0:	d107      	bne.n	801e802 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801e7f2:	f888 9000 	strb.w	r9, [r8]
 801e7f6:	e7e5      	b.n	801e7c4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801e7f8:	680c      	ldr	r4, [r1, #0]
 801e7fa:	b10c      	cbz	r4, 801e800 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801e7fc:	7824      	ldrb	r4, [r4, #0]
 801e7fe:	e7db      	b.n	801e7b8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801e800:	2400      	movs	r4, #0
 801e802:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801e806:	2b09      	cmp	r3, #9
 801e808:	d901      	bls.n	801e80e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801e80a:	2c2a      	cmp	r4, #42	; 0x2a
 801e80c:	d122      	bne.n	801e854 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801e80e:	2301      	movs	r3, #1
 801e810:	2c30      	cmp	r4, #48	; 0x30
 801e812:	f88e 3000 	strb.w	r3, [lr]
 801e816:	d10d      	bne.n	801e834 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801e818:	f88c 3000 	strb.w	r3, [ip]
 801e81c:	6803      	ldr	r3, [r0, #0]
 801e81e:	b10b      	cbz	r3, 801e824 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801e820:	3302      	adds	r3, #2
 801e822:	6003      	str	r3, [r0, #0]
 801e824:	680b      	ldr	r3, [r1, #0]
 801e826:	b10b      	cbz	r3, 801e82c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801e828:	3301      	adds	r3, #1
 801e82a:	600b      	str	r3, [r1, #0]
 801e82c:	6803      	ldr	r3, [r0, #0]
 801e82e:	2b00      	cmp	r3, #0
 801e830:	d02f      	beq.n	801e892 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801e832:	881c      	ldrh	r4, [r3, #0]
 801e834:	2c2a      	cmp	r4, #42	; 0x2a
 801e836:	d135      	bne.n	801e8a4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801e838:	f04f 33ff 	mov.w	r3, #4294967295
 801e83c:	6033      	str	r3, [r6, #0]
 801e83e:	6803      	ldr	r3, [r0, #0]
 801e840:	b10b      	cbz	r3, 801e846 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801e842:	3302      	adds	r3, #2
 801e844:	6003      	str	r3, [r0, #0]
 801e846:	680b      	ldr	r3, [r1, #0]
 801e848:	b10b      	cbz	r3, 801e84e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801e84a:	3301      	adds	r3, #1
 801e84c:	600b      	str	r3, [r1, #0]
 801e84e:	6803      	ldr	r3, [r0, #0]
 801e850:	b31b      	cbz	r3, 801e89a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801e852:	881c      	ldrh	r4, [r3, #0]
 801e854:	2c2e      	cmp	r4, #46	; 0x2e
 801e856:	d11a      	bne.n	801e88e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801e858:	2301      	movs	r3, #1
 801e85a:	703b      	strb	r3, [r7, #0]
 801e85c:	6803      	ldr	r3, [r0, #0]
 801e85e:	b10b      	cbz	r3, 801e864 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801e860:	3302      	adds	r3, #2
 801e862:	6003      	str	r3, [r0, #0]
 801e864:	680b      	ldr	r3, [r1, #0]
 801e866:	b10b      	cbz	r3, 801e86c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801e868:	3301      	adds	r3, #1
 801e86a:	600b      	str	r3, [r1, #0]
 801e86c:	6803      	ldr	r3, [r0, #0]
 801e86e:	2b00      	cmp	r3, #0
 801e870:	d036      	beq.n	801e8e0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801e872:	881b      	ldrh	r3, [r3, #0]
 801e874:	2b2a      	cmp	r3, #42	; 0x2a
 801e876:	d137      	bne.n	801e8e8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801e878:	f04f 33ff 	mov.w	r3, #4294967295
 801e87c:	602b      	str	r3, [r5, #0]
 801e87e:	6803      	ldr	r3, [r0, #0]
 801e880:	b10b      	cbz	r3, 801e886 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801e882:	3302      	adds	r3, #2
 801e884:	6003      	str	r3, [r0, #0]
 801e886:	680b      	ldr	r3, [r1, #0]
 801e888:	b10b      	cbz	r3, 801e88e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801e88a:	3301      	adds	r3, #1
 801e88c:	600b      	str	r3, [r1, #0]
 801e88e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e892:	680c      	ldr	r4, [r1, #0]
 801e894:	b134      	cbz	r4, 801e8a4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801e896:	7824      	ldrb	r4, [r4, #0]
 801e898:	e7cc      	b.n	801e834 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801e89a:	680b      	ldr	r3, [r1, #0]
 801e89c:	2b00      	cmp	r3, #0
 801e89e:	d0f6      	beq.n	801e88e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801e8a0:	781c      	ldrb	r4, [r3, #0]
 801e8a2:	e7d7      	b.n	801e854 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801e8a4:	2300      	movs	r3, #0
 801e8a6:	220a      	movs	r2, #10
 801e8a8:	6033      	str	r3, [r6, #0]
 801e8aa:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801e8ae:	fa1f f38c 	uxth.w	r3, ip
 801e8b2:	2b09      	cmp	r3, #9
 801e8b4:	d8ce      	bhi.n	801e854 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801e8b6:	6833      	ldr	r3, [r6, #0]
 801e8b8:	fb02 c303 	mla	r3, r2, r3, ip
 801e8bc:	6033      	str	r3, [r6, #0]
 801e8be:	6803      	ldr	r3, [r0, #0]
 801e8c0:	b10b      	cbz	r3, 801e8c6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801e8c2:	3302      	adds	r3, #2
 801e8c4:	6003      	str	r3, [r0, #0]
 801e8c6:	680b      	ldr	r3, [r1, #0]
 801e8c8:	b10b      	cbz	r3, 801e8ce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801e8ca:	3301      	adds	r3, #1
 801e8cc:	600b      	str	r3, [r1, #0]
 801e8ce:	6803      	ldr	r3, [r0, #0]
 801e8d0:	b10b      	cbz	r3, 801e8d6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801e8d2:	881c      	ldrh	r4, [r3, #0]
 801e8d4:	e7e9      	b.n	801e8aa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801e8d6:	680c      	ldr	r4, [r1, #0]
 801e8d8:	2c00      	cmp	r4, #0
 801e8da:	d0e6      	beq.n	801e8aa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801e8dc:	7824      	ldrb	r4, [r4, #0]
 801e8de:	e7e4      	b.n	801e8aa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801e8e0:	680b      	ldr	r3, [r1, #0]
 801e8e2:	b10b      	cbz	r3, 801e8e8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801e8e4:	781b      	ldrb	r3, [r3, #0]
 801e8e6:	e7c5      	b.n	801e874 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801e8e8:	2200      	movs	r2, #0
 801e8ea:	240a      	movs	r4, #10
 801e8ec:	602a      	str	r2, [r5, #0]
 801e8ee:	3b30      	subs	r3, #48	; 0x30
 801e8f0:	682a      	ldr	r2, [r5, #0]
 801e8f2:	b29e      	uxth	r6, r3
 801e8f4:	2e09      	cmp	r6, #9
 801e8f6:	d813      	bhi.n	801e920 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801e8f8:	fb04 3302 	mla	r3, r4, r2, r3
 801e8fc:	602b      	str	r3, [r5, #0]
 801e8fe:	6803      	ldr	r3, [r0, #0]
 801e900:	b10b      	cbz	r3, 801e906 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801e902:	3302      	adds	r3, #2
 801e904:	6003      	str	r3, [r0, #0]
 801e906:	680b      	ldr	r3, [r1, #0]
 801e908:	b10b      	cbz	r3, 801e90e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801e90a:	3301      	adds	r3, #1
 801e90c:	600b      	str	r3, [r1, #0]
 801e90e:	6803      	ldr	r3, [r0, #0]
 801e910:	b10b      	cbz	r3, 801e916 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801e912:	881b      	ldrh	r3, [r3, #0]
 801e914:	e7eb      	b.n	801e8ee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801e916:	680b      	ldr	r3, [r1, #0]
 801e918:	2b00      	cmp	r3, #0
 801e91a:	d0e8      	beq.n	801e8ee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801e91c:	781b      	ldrb	r3, [r3, #0]
 801e91e:	e7e6      	b.n	801e8ee <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801e920:	2a06      	cmp	r2, #6
 801e922:	bfa8      	it	ge
 801e924:	2206      	movge	r2, #6
 801e926:	602a      	str	r2, [r5, #0]
 801e928:	e7b1      	b.n	801e88e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801e92a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801e92a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e92e:	b0a3      	sub	sp, #140	; 0x8c
 801e930:	2600      	movs	r6, #0
 801e932:	4607      	mov	r7, r0
 801e934:	4688      	mov	r8, r1
 801e936:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 801e93a:	4631      	mov	r1, r6
 801e93c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801e93e:	4648      	mov	r0, r9
 801e940:	960d      	str	r6, [sp, #52]	; 0x34
 801e942:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801e946:	2242      	movs	r2, #66	; 0x42
 801e948:	f00e f895 	bl	802ca76 <memset>
 801e94c:	b15f      	cbz	r7, 801e966 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801e94e:	f108 3aff 	add.w	sl, r8, #4294967295
 801e952:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e954:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e956:	b152      	cbz	r2, 801e96e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801e958:	8812      	ldrh	r2, [r2, #0]
 801e95a:	b10a      	cbz	r2, 801e960 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801e95c:	459a      	cmp	sl, r3
 801e95e:	dc2e      	bgt.n	801e9be <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801e960:	2200      	movs	r2, #0
 801e962:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801e966:	4638      	mov	r0, r7
 801e968:	b023      	add	sp, #140	; 0x8c
 801e96a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e96e:	9a08      	ldr	r2, [sp, #32]
 801e970:	2a00      	cmp	r2, #0
 801e972:	d0f5      	beq.n	801e960 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801e974:	7812      	ldrb	r2, [r2, #0]
 801e976:	e7f0      	b.n	801e95a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801e978:	2d00      	cmp	r5, #0
 801e97a:	d0ea      	beq.n	801e952 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801e97c:	782a      	ldrb	r2, [r5, #0]
 801e97e:	b142      	cbz	r2, 801e992 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801e980:	2a25      	cmp	r2, #37	; 0x25
 801e982:	d001      	beq.n	801e988 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801e984:	459a      	cmp	sl, r3
 801e986:	dc08      	bgt.n	801e99a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801e988:	f1bb 0f00 	cmp.w	fp, #0
 801e98c:	d121      	bne.n	801e9d2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801e98e:	2d00      	cmp	r5, #0
 801e990:	d0df      	beq.n	801e952 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801e992:	782a      	ldrb	r2, [r5, #0]
 801e994:	f04f 0b00 	mov.w	fp, #0
 801e998:	e01d      	b.n	801e9d6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801e99a:	f1bb 0f00 	cmp.w	fp, #0
 801e99e:	d077      	beq.n	801ea90 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 801e9a0:	f8bb 2000 	ldrh.w	r2, [fp]
 801e9a4:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801e9a8:	f1bb 0f00 	cmp.w	fp, #0
 801e9ac:	d002      	beq.n	801e9b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801e9ae:	f10b 0202 	add.w	r2, fp, #2
 801e9b2:	9209      	str	r2, [sp, #36]	; 0x24
 801e9b4:	b10d      	cbz	r5, 801e9ba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801e9b6:	3501      	adds	r5, #1
 801e9b8:	9508      	str	r5, [sp, #32]
 801e9ba:	3301      	adds	r3, #1
 801e9bc:	930d      	str	r3, [sp, #52]	; 0x34
 801e9be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e9c0:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801e9c4:	f1bb 0f00 	cmp.w	fp, #0
 801e9c8:	d0d6      	beq.n	801e978 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801e9ca:	f8bb 2000 	ldrh.w	r2, [fp]
 801e9ce:	2a00      	cmp	r2, #0
 801e9d0:	d1d6      	bne.n	801e980 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801e9d2:	f8bb 2000 	ldrh.w	r2, [fp]
 801e9d6:	2a00      	cmp	r2, #0
 801e9d8:	d0bb      	beq.n	801e952 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801e9da:	459a      	cmp	sl, r3
 801e9dc:	ddb9      	ble.n	801e952 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801e9de:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 801e9e2:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801e9e6:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 801e9ea:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 801e9ee:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801e9f2:	960e      	str	r6, [sp, #56]	; 0x38
 801e9f4:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 801e9f8:	960f      	str	r6, [sp, #60]	; 0x3c
 801e9fa:	f1bb 0f00 	cmp.w	fp, #0
 801e9fe:	d002      	beq.n	801ea06 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801ea00:	f10b 0302 	add.w	r3, fp, #2
 801ea04:	9309      	str	r3, [sp, #36]	; 0x24
 801ea06:	b10d      	cbz	r5, 801ea0c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801ea08:	1c6b      	adds	r3, r5, #1
 801ea0a:	9308      	str	r3, [sp, #32]
 801ea0c:	ab0f      	add	r3, sp, #60	; 0x3c
 801ea0e:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801ea12:	a908      	add	r1, sp, #32
 801ea14:	a809      	add	r0, sp, #36	; 0x24
 801ea16:	9305      	str	r3, [sp, #20]
 801ea18:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801ea1c:	9304      	str	r3, [sp, #16]
 801ea1e:	ab0e      	add	r3, sp, #56	; 0x38
 801ea20:	9303      	str	r3, [sp, #12]
 801ea22:	ab0c      	add	r3, sp, #48	; 0x30
 801ea24:	9302      	str	r3, [sp, #8]
 801ea26:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801ea2a:	9301      	str	r3, [sp, #4]
 801ea2c:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801ea30:	9300      	str	r3, [sp, #0]
 801ea32:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801ea36:	f7ff fea8 	bl	801e78a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801ea3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ea3c:	2b00      	cmp	r3, #0
 801ea3e:	bfbf      	itttt	lt
 801ea40:	6823      	ldrlt	r3, [r4, #0]
 801ea42:	3404      	addlt	r4, #4
 801ea44:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801ea48:	930e      	strlt	r3, [sp, #56]	; 0x38
 801ea4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ea4c:	2b00      	cmp	r3, #0
 801ea4e:	bfbe      	ittt	lt
 801ea50:	6823      	ldrlt	r3, [r4, #0]
 801ea52:	3404      	addlt	r4, #4
 801ea54:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801ea58:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801ea5c:	bfb8      	it	lt
 801ea5e:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801ea60:	b1d9      	cbz	r1, 801ea9a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801ea62:	880b      	ldrh	r3, [r1, #0]
 801ea64:	2b69      	cmp	r3, #105	; 0x69
 801ea66:	d01f      	beq.n	801eaa8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801ea68:	d82f      	bhi.n	801eaca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801ea6a:	2b58      	cmp	r3, #88	; 0x58
 801ea6c:	d01c      	beq.n	801eaa8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801ea6e:	d818      	bhi.n	801eaa2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801ea70:	2b25      	cmp	r3, #37	; 0x25
 801ea72:	d034      	beq.n	801eade <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801ea74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ea76:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801ea7a:	f1bb 0f00 	cmp.w	fp, #0
 801ea7e:	f000 80b7 	beq.w	801ebf0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801ea82:	f8bb 5000 	ldrh.w	r5, [fp]
 801ea86:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801ea8a:	3301      	adds	r3, #1
 801ea8c:	930d      	str	r3, [sp, #52]	; 0x34
 801ea8e:	e029      	b.n	801eae4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801ea90:	b10d      	cbz	r5, 801ea96 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801ea92:	782a      	ldrb	r2, [r5, #0]
 801ea94:	e786      	b.n	801e9a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801ea96:	462a      	mov	r2, r5
 801ea98:	e784      	b.n	801e9a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801ea9a:	2a00      	cmp	r2, #0
 801ea9c:	d0ea      	beq.n	801ea74 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801ea9e:	7813      	ldrb	r3, [r2, #0]
 801eaa0:	e7e0      	b.n	801ea64 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801eaa2:	3b63      	subs	r3, #99	; 0x63
 801eaa4:	2b01      	cmp	r3, #1
 801eaa6:	d8e5      	bhi.n	801ea74 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801eaa8:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801eaac:	b329      	cbz	r1, 801eafa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801eaae:	880b      	ldrh	r3, [r1, #0]
 801eab0:	2b69      	cmp	r3, #105	; 0x69
 801eab2:	d063      	beq.n	801eb7c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801eab4:	d825      	bhi.n	801eb02 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801eab6:	2b63      	cmp	r3, #99	; 0x63
 801eab8:	d038      	beq.n	801eb2c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801eaba:	2b64      	cmp	r3, #100	; 0x64
 801eabc:	d05e      	beq.n	801eb7c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801eabe:	2b58      	cmp	r3, #88	; 0x58
 801eac0:	d07a      	beq.n	801ebb8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801eac2:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801eac6:	4625      	mov	r5, r4
 801eac8:	e036      	b.n	801eb38 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801eaca:	2b73      	cmp	r3, #115	; 0x73
 801eacc:	d0ec      	beq.n	801eaa8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801eace:	d802      	bhi.n	801ead6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801ead0:	2b6f      	cmp	r3, #111	; 0x6f
 801ead2:	d1cf      	bne.n	801ea74 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801ead4:	e7e8      	b.n	801eaa8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801ead6:	2b75      	cmp	r3, #117	; 0x75
 801ead8:	d0e6      	beq.n	801eaa8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801eada:	2b78      	cmp	r3, #120	; 0x78
 801eadc:	e7f9      	b.n	801ead2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801eade:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801eae0:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801eae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eae6:	b10b      	cbz	r3, 801eaec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801eae8:	3302      	adds	r3, #2
 801eaea:	9309      	str	r3, [sp, #36]	; 0x24
 801eaec:	9b08      	ldr	r3, [sp, #32]
 801eaee:	2b00      	cmp	r3, #0
 801eaf0:	f43f af2f 	beq.w	801e952 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801eaf4:	3301      	adds	r3, #1
 801eaf6:	9308      	str	r3, [sp, #32]
 801eaf8:	e72b      	b.n	801e952 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801eafa:	2a00      	cmp	r2, #0
 801eafc:	d0e1      	beq.n	801eac2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801eafe:	7813      	ldrb	r3, [r2, #0]
 801eb00:	e7d6      	b.n	801eab0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801eb02:	2b73      	cmp	r3, #115	; 0x73
 801eb04:	d036      	beq.n	801eb74 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801eb06:	d807      	bhi.n	801eb18 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801eb08:	2b6f      	cmp	r3, #111	; 0x6f
 801eb0a:	d1da      	bne.n	801eac2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801eb0c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801eb0e:	1d25      	adds	r5, r4, #4
 801eb10:	2308      	movs	r3, #8
 801eb12:	eba8 0202 	sub.w	r2, r8, r2
 801eb16:	e049      	b.n	801ebac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801eb18:	2b75      	cmp	r3, #117	; 0x75
 801eb1a:	d042      	beq.n	801eba2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 801eb1c:	2b78      	cmp	r3, #120	; 0x78
 801eb1e:	d1d0      	bne.n	801eac2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801eb20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801eb22:	1d25      	adds	r5, r4, #4
 801eb24:	2310      	movs	r3, #16
 801eb26:	eba8 0202 	sub.w	r2, r8, r2
 801eb2a:	e03f      	b.n	801ebac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801eb2c:	6823      	ldr	r3, [r4, #0]
 801eb2e:	1d25      	adds	r5, r4, #4
 801eb30:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801eb34:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801eb38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eb3a:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801eb3e:	2b00      	cmp	r3, #0
 801eb40:	d051      	beq.n	801ebe6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801eb42:	881a      	ldrh	r2, [r3, #0]
 801eb44:	a80d      	add	r0, sp, #52	; 0x34
 801eb46:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801eb4a:	462c      	mov	r4, r5
 801eb4c:	9005      	str	r0, [sp, #20]
 801eb4e:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 801eb52:	9004      	str	r0, [sp, #16]
 801eb54:	980e      	ldr	r0, [sp, #56]	; 0x38
 801eb56:	9003      	str	r0, [sp, #12]
 801eb58:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801eb5c:	9002      	str	r0, [sp, #8]
 801eb5e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801eb60:	9001      	str	r0, [sp, #4]
 801eb62:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 801eb66:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801eb6a:	9000      	str	r0, [sp, #0]
 801eb6c:	a810      	add	r0, sp, #64	; 0x40
 801eb6e:	f7ff fd49 	bl	801e604 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801eb72:	e7b7      	b.n	801eae4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801eb74:	1d25      	adds	r5, r4, #4
 801eb76:	6823      	ldr	r3, [r4, #0]
 801eb78:	9310      	str	r3, [sp, #64]	; 0x40
 801eb7a:	e7dd      	b.n	801eb38 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801eb7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801eb7e:	230a      	movs	r3, #10
 801eb80:	4649      	mov	r1, r9
 801eb82:	6820      	ldr	r0, [r4, #0]
 801eb84:	eba8 0202 	sub.w	r2, r8, r2
 801eb88:	1d25      	adds	r5, r4, #4
 801eb8a:	b292      	uxth	r2, r2
 801eb8c:	f7ff fcf0 	bl	801e570 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>
 801eb90:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801eb94:	2b2d      	cmp	r3, #45	; 0x2d
 801eb96:	d1cf      	bne.n	801eb38 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801eb98:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801eb9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801eb9e:	3302      	adds	r3, #2
 801eba0:	e7ea      	b.n	801eb78 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801eba2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801eba4:	1d25      	adds	r5, r4, #4
 801eba6:	230a      	movs	r3, #10
 801eba8:	eba8 0202 	sub.w	r2, r8, r2
 801ebac:	b292      	uxth	r2, r2
 801ebae:	4649      	mov	r1, r9
 801ebb0:	6820      	ldr	r0, [r4, #0]
 801ebb2:	f7ff fd09 	bl	801e5c8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801ebb6:	e7bf      	b.n	801eb38 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801ebb8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ebba:	2310      	movs	r3, #16
 801ebbc:	4649      	mov	r1, r9
 801ebbe:	6820      	ldr	r0, [r4, #0]
 801ebc0:	eba8 0202 	sub.w	r2, r8, r2
 801ebc4:	1d25      	adds	r5, r4, #4
 801ebc6:	b292      	uxth	r2, r2
 801ebc8:	f7ff fcfe 	bl	801e5c8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801ebcc:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801ebd0:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801ebd4:	2b00      	cmp	r3, #0
 801ebd6:	d0af      	beq.n	801eb38 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801ebd8:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801ebdc:	2919      	cmp	r1, #25
 801ebde:	d8f7      	bhi.n	801ebd0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801ebe0:	3b20      	subs	r3, #32
 801ebe2:	8013      	strh	r3, [r2, #0]
 801ebe4:	e7f4      	b.n	801ebd0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801ebe6:	9a08      	ldr	r2, [sp, #32]
 801ebe8:	2a00      	cmp	r2, #0
 801ebea:	d0ab      	beq.n	801eb44 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801ebec:	7812      	ldrb	r2, [r2, #0]
 801ebee:	e7a9      	b.n	801eb44 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801ebf0:	2d00      	cmp	r5, #0
 801ebf2:	f43f af48 	beq.w	801ea86 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801ebf6:	782d      	ldrb	r5, [r5, #0]
 801ebf8:	e745      	b.n	801ea86 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801ebfa <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801ebfa:	b507      	push	{r0, r1, r2, lr}
 801ebfc:	9300      	str	r3, [sp, #0]
 801ebfe:	4613      	mov	r3, r2
 801ec00:	2200      	movs	r2, #0
 801ec02:	f7ff fe92 	bl	801e92a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801ec06:	b003      	add	sp, #12
 801ec08:	f85d fb04 	ldr.w	pc, [sp], #4

0801ec0c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801ec0c:	b40c      	push	{r2, r3}
 801ec0e:	b507      	push	{r0, r1, r2, lr}
 801ec10:	ab04      	add	r3, sp, #16
 801ec12:	f853 2b04 	ldr.w	r2, [r3], #4
 801ec16:	9301      	str	r3, [sp, #4]
 801ec18:	f7ff ffef 	bl	801ebfa <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801ec1c:	b003      	add	sp, #12
 801ec1e:	f85d eb04 	ldr.w	lr, [sp], #4
 801ec22:	b002      	add	sp, #8
 801ec24:	4770      	bx	lr
	...

0801ec28 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801ec28:	4b01      	ldr	r3, [pc, #4]	; (801ec30 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801ec2a:	6018      	str	r0, [r3, #0]
 801ec2c:	4770      	bx	lr
 801ec2e:	bf00      	nop
 801ec30:	2400bb50 	.word	0x2400bb50

0801ec34 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801ec34:	4b06      	ldr	r3, [pc, #24]	; (801ec50 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801ec36:	881a      	ldrh	r2, [r3, #0]
 801ec38:	4282      	cmp	r2, r0
 801ec3a:	d807      	bhi.n	801ec4c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801ec3c:	4b05      	ldr	r3, [pc, #20]	; (801ec54 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801ec3e:	881b      	ldrh	r3, [r3, #0]
 801ec40:	4413      	add	r3, r2
 801ec42:	4298      	cmp	r0, r3
 801ec44:	bfac      	ite	ge
 801ec46:	2000      	movge	r0, #0
 801ec48:	2001      	movlt	r0, #1
 801ec4a:	4770      	bx	lr
 801ec4c:	2000      	movs	r0, #0
 801ec4e:	4770      	bx	lr
 801ec50:	2400bb70 	.word	0x2400bb70
 801ec54:	2400bb74 	.word	0x2400bb74

0801ec58 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801ec58:	b508      	push	{r3, lr}
 801ec5a:	4601      	mov	r1, r0
 801ec5c:	f7ff ffea 	bl	801ec34 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801ec60:	b118      	cbz	r0, 801ec6a <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801ec62:	4b02      	ldr	r3, [pc, #8]	; (801ec6c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801ec64:	681b      	ldr	r3, [r3, #0]
 801ec66:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801ec6a:	bd08      	pop	{r3, pc}
 801ec6c:	2400bb54 	.word	0x2400bb54

0801ec70 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801ec70:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ec72:	4c24      	ldr	r4, [pc, #144]	; (801ed04 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801ec74:	6823      	ldr	r3, [r4, #0]
 801ec76:	2b00      	cmp	r3, #0
 801ec78:	d042      	beq.n	801ed00 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801ec7a:	4a23      	ldr	r2, [pc, #140]	; (801ed08 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801ec7c:	4d23      	ldr	r5, [pc, #140]	; (801ed0c <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801ec7e:	8811      	ldrh	r1, [r2, #0]
 801ec80:	f8b5 c000 	ldrh.w	ip, [r5]
 801ec84:	4822      	ldr	r0, [pc, #136]	; (801ed10 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801ec86:	4461      	add	r1, ip
 801ec88:	1c4a      	adds	r2, r1, #1
 801ec8a:	008f      	lsls	r7, r1, #2
 801ec8c:	f022 0201 	bic.w	r2, r2, #1
 801ec90:	19de      	adds	r6, r3, r7
 801ec92:	0412      	lsls	r2, r2, #16
 801ec94:	6006      	str	r6, [r0, #0]
 801ec96:	4e1f      	ldr	r6, [pc, #124]	; (801ed14 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801ec98:	0c12      	lsrs	r2, r2, #16
 801ec9a:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801ec9e:	19da      	adds	r2, r3, r7
 801eca0:	6032      	str	r2, [r6, #0]
 801eca2:	220e      	movs	r2, #14
 801eca4:	fb02 f20c 	mul.w	r2, r2, ip
 801eca8:	3203      	adds	r2, #3
 801ecaa:	f022 0203 	bic.w	r2, r2, #3
 801ecae:	443a      	add	r2, r7
 801ecb0:	4f19      	ldr	r7, [pc, #100]	; (801ed18 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801ecb2:	4413      	add	r3, r2
 801ecb4:	603b      	str	r3, [r7, #0]
 801ecb6:	2300      	movs	r3, #0
 801ecb8:	4f18      	ldr	r7, [pc, #96]	; (801ed1c <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801ecba:	469c      	mov	ip, r3
 801ecbc:	803b      	strh	r3, [r7, #0]
 801ecbe:	4f18      	ldr	r7, [pc, #96]	; (801ed20 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801ecc0:	683f      	ldr	r7, [r7, #0]
 801ecc2:	1aba      	subs	r2, r7, r2
 801ecc4:	4f17      	ldr	r7, [pc, #92]	; (801ed24 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801ecc6:	603a      	str	r2, [r7, #0]
 801ecc8:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801eccc:	4a16      	ldr	r2, [pc, #88]	; (801ed28 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801ecce:	8013      	strh	r3, [r2, #0]
 801ecd0:	428b      	cmp	r3, r1
 801ecd2:	d10d      	bne.n	801ecf0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801ecd4:	882d      	ldrh	r5, [r5, #0]
 801ecd6:	2300      	movs	r3, #0
 801ecd8:	6830      	ldr	r0, [r6, #0]
 801ecda:	240e      	movs	r4, #14
 801ecdc:	429d      	cmp	r5, r3
 801ecde:	d90f      	bls.n	801ed00 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801ece0:	fb04 0203 	mla	r2, r4, r3, r0
 801ece4:	3301      	adds	r3, #1
 801ece6:	7b11      	ldrb	r1, [r2, #12]
 801ece8:	f36f 1145 	bfc	r1, #5, #1
 801ecec:	7311      	strb	r1, [r2, #12]
 801ecee:	e7f5      	b.n	801ecdc <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801ecf0:	6822      	ldr	r2, [r4, #0]
 801ecf2:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801ecf6:	6802      	ldr	r2, [r0, #0]
 801ecf8:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801ecfc:	3301      	adds	r3, #1
 801ecfe:	e7e7      	b.n	801ecd0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801ed00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ed02:	bf00      	nop
 801ed04:	2400bb54 	.word	0x2400bb54
 801ed08:	2400bb70 	.word	0x2400bb70
 801ed0c:	2400bb74 	.word	0x2400bb74
 801ed10:	2400bb68 	.word	0x2400bb68
 801ed14:	2400bb58 	.word	0x2400bb58
 801ed18:	2400bb60 	.word	0x2400bb60
 801ed1c:	2400bb72 	.word	0x2400bb72
 801ed20:	2400bb5c 	.word	0x2400bb5c
 801ed24:	2400bb6c 	.word	0x2400bb6c
 801ed28:	2400bb64 	.word	0x2400bb64

0801ed2c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801ed2c:	4b06      	ldr	r3, [pc, #24]	; (801ed48 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801ed2e:	681b      	ldr	r3, [r3, #0]
 801ed30:	b943      	cbnz	r3, 801ed44 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801ed32:	b139      	cbz	r1, 801ed44 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801ed34:	4b05      	ldr	r3, [pc, #20]	; (801ed4c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801ed36:	801a      	strh	r2, [r3, #0]
 801ed38:	4b05      	ldr	r3, [pc, #20]	; (801ed50 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801ed3a:	6019      	str	r1, [r3, #0]
 801ed3c:	4b05      	ldr	r3, [pc, #20]	; (801ed54 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801ed3e:	6018      	str	r0, [r3, #0]
 801ed40:	f7ff bf96 	b.w	801ec70 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801ed44:	4770      	bx	lr
 801ed46:	bf00      	nop
 801ed48:	2400bb60 	.word	0x2400bb60
 801ed4c:	2400bb74 	.word	0x2400bb74
 801ed50:	2400bb5c 	.word	0x2400bb5c
 801ed54:	2400bb54 	.word	0x2400bb54

0801ed58 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801ed58:	b470      	push	{r4, r5, r6}
 801ed5a:	4c07      	ldr	r4, [pc, #28]	; (801ed78 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801ed5c:	4605      	mov	r5, r0
 801ed5e:	4610      	mov	r0, r2
 801ed60:	9a03      	ldr	r2, [sp, #12]
 801ed62:	6826      	ldr	r6, [r4, #0]
 801ed64:	b936      	cbnz	r6, 801ed74 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801ed66:	6025      	str	r5, [r4, #0]
 801ed68:	4c04      	ldr	r4, [pc, #16]	; (801ed7c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801ed6a:	8021      	strh	r1, [r4, #0]
 801ed6c:	4619      	mov	r1, r3
 801ed6e:	bc70      	pop	{r4, r5, r6}
 801ed70:	f7ff bfdc 	b.w	801ed2c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801ed74:	bc70      	pop	{r4, r5, r6}
 801ed76:	4770      	bx	lr
 801ed78:	2400bb78 	.word	0x2400bb78
 801ed7c:	2400bb70 	.word	0x2400bb70

0801ed80 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801ed80:	4a12      	ldr	r2, [pc, #72]	; (801edcc <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801ed82:	8803      	ldrh	r3, [r0, #0]
 801ed84:	8812      	ldrh	r2, [r2, #0]
 801ed86:	4293      	cmp	r3, r2
 801ed88:	d207      	bcs.n	801ed9a <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801ed8a:	4a11      	ldr	r2, [pc, #68]	; (801edd0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801ed8c:	2114      	movs	r1, #20
 801ed8e:	6812      	ldr	r2, [r2, #0]
 801ed90:	fb01 2303 	mla	r3, r1, r3, r2
 801ed94:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801ed98:	4770      	bx	lr
 801ed9a:	490e      	ldr	r1, [pc, #56]	; (801edd4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801ed9c:	8809      	ldrh	r1, [r1, #0]
 801ed9e:	4411      	add	r1, r2
 801eda0:	428b      	cmp	r3, r1
 801eda2:	da04      	bge.n	801edae <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801eda4:	1a9b      	subs	r3, r3, r2
 801eda6:	4a0c      	ldr	r2, [pc, #48]	; (801edd8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801eda8:	210e      	movs	r1, #14
 801edaa:	6812      	ldr	r2, [r2, #0]
 801edac:	e7f0      	b.n	801ed90 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801edae:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801edb2:	4293      	cmp	r3, r2
 801edb4:	d108      	bne.n	801edc8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801edb6:	4b09      	ldr	r3, [pc, #36]	; (801eddc <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801edb8:	781b      	ldrb	r3, [r3, #0]
 801edba:	b91b      	cbnz	r3, 801edc4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801edbc:	4b08      	ldr	r3, [pc, #32]	; (801ede0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801edbe:	f9b3 0000 	ldrsh.w	r0, [r3]
 801edc2:	4770      	bx	lr
 801edc4:	4b07      	ldr	r3, [pc, #28]	; (801ede4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801edc6:	e7fa      	b.n	801edbe <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801edc8:	2000      	movs	r0, #0
 801edca:	4770      	bx	lr
 801edcc:	2400bb70 	.word	0x2400bb70
 801edd0:	2400bb78 	.word	0x2400bb78
 801edd4:	2400bb74 	.word	0x2400bb74
 801edd8:	2400bb58 	.word	0x2400bb58
 801eddc:	2400bae8 	.word	0x2400bae8
 801ede0:	2400baea 	.word	0x2400baea
 801ede4:	2400baec 	.word	0x2400baec

0801ede8 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801ede8:	4a12      	ldr	r2, [pc, #72]	; (801ee34 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801edea:	8803      	ldrh	r3, [r0, #0]
 801edec:	8812      	ldrh	r2, [r2, #0]
 801edee:	4293      	cmp	r3, r2
 801edf0:	d207      	bcs.n	801ee02 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801edf2:	4a11      	ldr	r2, [pc, #68]	; (801ee38 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801edf4:	2114      	movs	r1, #20
 801edf6:	6812      	ldr	r2, [r2, #0]
 801edf8:	fb01 2303 	mla	r3, r1, r3, r2
 801edfc:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801ee00:	4770      	bx	lr
 801ee02:	490e      	ldr	r1, [pc, #56]	; (801ee3c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801ee04:	8809      	ldrh	r1, [r1, #0]
 801ee06:	4411      	add	r1, r2
 801ee08:	428b      	cmp	r3, r1
 801ee0a:	da04      	bge.n	801ee16 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801ee0c:	1a9b      	subs	r3, r3, r2
 801ee0e:	4a0c      	ldr	r2, [pc, #48]	; (801ee40 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801ee10:	210e      	movs	r1, #14
 801ee12:	6812      	ldr	r2, [r2, #0]
 801ee14:	e7f0      	b.n	801edf8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801ee16:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ee1a:	4293      	cmp	r3, r2
 801ee1c:	d108      	bne.n	801ee30 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801ee1e:	4b09      	ldr	r3, [pc, #36]	; (801ee44 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801ee20:	781b      	ldrb	r3, [r3, #0]
 801ee22:	b91b      	cbnz	r3, 801ee2c <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801ee24:	4b08      	ldr	r3, [pc, #32]	; (801ee48 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801ee26:	f9b3 0000 	ldrsh.w	r0, [r3]
 801ee2a:	4770      	bx	lr
 801ee2c:	4b07      	ldr	r3, [pc, #28]	; (801ee4c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801ee2e:	e7fa      	b.n	801ee26 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801ee30:	2000      	movs	r0, #0
 801ee32:	4770      	bx	lr
 801ee34:	2400bb70 	.word	0x2400bb70
 801ee38:	2400bb78 	.word	0x2400bb78
 801ee3c:	2400bb74 	.word	0x2400bb74
 801ee40:	2400bb58 	.word	0x2400bb58
 801ee44:	2400bae8 	.word	0x2400bae8
 801ee48:	2400baec 	.word	0x2400baec
 801ee4c:	2400baea 	.word	0x2400baea

0801ee50 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801ee50:	4a1f      	ldr	r2, [pc, #124]	; (801eed0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 801ee52:	b510      	push	{r4, lr}
 801ee54:	880b      	ldrh	r3, [r1, #0]
 801ee56:	8812      	ldrh	r2, [r2, #0]
 801ee58:	4293      	cmp	r3, r2
 801ee5a:	d213      	bcs.n	801ee84 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801ee5c:	4a1d      	ldr	r2, [pc, #116]	; (801eed4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 801ee5e:	2114      	movs	r1, #20
 801ee60:	6812      	ldr	r2, [r2, #0]
 801ee62:	fb01 2303 	mla	r3, r1, r3, r2
 801ee66:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801ee6a:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801ee6e:	8a1a      	ldrh	r2, [r3, #16]
 801ee70:	8a5b      	ldrh	r3, [r3, #18]
 801ee72:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801ee76:	8004      	strh	r4, [r0, #0]
 801ee78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ee7c:	8041      	strh	r1, [r0, #2]
 801ee7e:	8082      	strh	r2, [r0, #4]
 801ee80:	80c3      	strh	r3, [r0, #6]
 801ee82:	e00e      	b.n	801eea2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801ee84:	4914      	ldr	r1, [pc, #80]	; (801eed8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 801ee86:	8809      	ldrh	r1, [r1, #0]
 801ee88:	4411      	add	r1, r2
 801ee8a:	428b      	cmp	r3, r1
 801ee8c:	da0a      	bge.n	801eea4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 801ee8e:	1a9b      	subs	r3, r3, r2
 801ee90:	4a12      	ldr	r2, [pc, #72]	; (801eedc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801ee92:	210e      	movs	r1, #14
 801ee94:	6812      	ldr	r2, [r2, #0]
 801ee96:	fb01 2303 	mla	r3, r1, r3, r2
 801ee9a:	681a      	ldr	r2, [r3, #0]
 801ee9c:	6002      	str	r2, [r0, #0]
 801ee9e:	685a      	ldr	r2, [r3, #4]
 801eea0:	6042      	str	r2, [r0, #4]
 801eea2:	bd10      	pop	{r4, pc}
 801eea4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801eea8:	4293      	cmp	r3, r2
 801eeaa:	d10b      	bne.n	801eec4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 801eeac:	4b0c      	ldr	r3, [pc, #48]	; (801eee0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801eeae:	f9b3 1000 	ldrsh.w	r1, [r3]
 801eeb2:	4b0c      	ldr	r3, [pc, #48]	; (801eee4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801eeb4:	8081      	strh	r1, [r0, #4]
 801eeb6:	f9b3 2000 	ldrsh.w	r2, [r3]
 801eeba:	2300      	movs	r3, #0
 801eebc:	80c2      	strh	r2, [r0, #6]
 801eebe:	8003      	strh	r3, [r0, #0]
 801eec0:	8043      	strh	r3, [r0, #2]
 801eec2:	e7ee      	b.n	801eea2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801eec4:	2300      	movs	r3, #0
 801eec6:	8003      	strh	r3, [r0, #0]
 801eec8:	8043      	strh	r3, [r0, #2]
 801eeca:	8083      	strh	r3, [r0, #4]
 801eecc:	e7d8      	b.n	801ee80 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801eece:	bf00      	nop
 801eed0:	2400bb70 	.word	0x2400bb70
 801eed4:	2400bb78 	.word	0x2400bb78
 801eed8:	2400bb74 	.word	0x2400bb74
 801eedc:	2400bb58 	.word	0x2400bb58
 801eee0:	2400bae4 	.word	0x2400bae4
 801eee4:	2400bae6 	.word	0x2400bae6

0801eee8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801eee8:	4a17      	ldr	r2, [pc, #92]	; (801ef48 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801eeea:	8803      	ldrh	r3, [r0, #0]
 801eeec:	8812      	ldrh	r2, [r2, #0]
 801eeee:	4293      	cmp	r3, r2
 801eef0:	d213      	bcs.n	801ef1a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801eef2:	4a16      	ldr	r2, [pc, #88]	; (801ef4c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801eef4:	2114      	movs	r1, #20
 801eef6:	6812      	ldr	r2, [r2, #0]
 801eef8:	fb01 2303 	mla	r3, r1, r3, r2
 801eefc:	8a1a      	ldrh	r2, [r3, #16]
 801eefe:	8919      	ldrh	r1, [r3, #8]
 801ef00:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801ef04:	428a      	cmp	r2, r1
 801ef06:	db1d      	blt.n	801ef44 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801ef08:	8a58      	ldrh	r0, [r3, #18]
 801ef0a:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801ef0e:	895b      	ldrh	r3, [r3, #10]
 801ef10:	4298      	cmp	r0, r3
 801ef12:	bfac      	ite	ge
 801ef14:	2000      	movge	r0, #0
 801ef16:	2001      	movlt	r0, #1
 801ef18:	4770      	bx	lr
 801ef1a:	490d      	ldr	r1, [pc, #52]	; (801ef50 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801ef1c:	8809      	ldrh	r1, [r1, #0]
 801ef1e:	4411      	add	r1, r2
 801ef20:	428b      	cmp	r3, r1
 801ef22:	da0d      	bge.n	801ef40 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801ef24:	1a9b      	subs	r3, r3, r2
 801ef26:	4a0b      	ldr	r2, [pc, #44]	; (801ef54 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801ef28:	210e      	movs	r1, #14
 801ef2a:	6812      	ldr	r2, [r2, #0]
 801ef2c:	fb01 2303 	mla	r3, r1, r3, r2
 801ef30:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801ef34:	891a      	ldrh	r2, [r3, #8]
 801ef36:	4291      	cmp	r1, r2
 801ef38:	db04      	blt.n	801ef44 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801ef3a:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801ef3e:	e7e6      	b.n	801ef0e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 801ef40:	2000      	movs	r0, #0
 801ef42:	4770      	bx	lr
 801ef44:	2001      	movs	r0, #1
 801ef46:	4770      	bx	lr
 801ef48:	2400bb70 	.word	0x2400bb70
 801ef4c:	2400bb78 	.word	0x2400bb78
 801ef50:	2400bb74 	.word	0x2400bb74
 801ef54:	2400bb58 	.word	0x2400bb58

0801ef58 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801ef58:	4a12      	ldr	r2, [pc, #72]	; (801efa4 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801ef5a:	8803      	ldrh	r3, [r0, #0]
 801ef5c:	8811      	ldrh	r1, [r2, #0]
 801ef5e:	428b      	cmp	r3, r1
 801ef60:	d20b      	bcs.n	801ef7a <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801ef62:	4a11      	ldr	r2, [pc, #68]	; (801efa8 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801ef64:	6812      	ldr	r2, [r2, #0]
 801ef66:	b112      	cbz	r2, 801ef6e <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801ef68:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801ef6c:	b9c0      	cbnz	r0, 801efa0 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801ef6e:	4a0f      	ldr	r2, [pc, #60]	; (801efac <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801ef70:	6811      	ldr	r1, [r2, #0]
 801ef72:	2214      	movs	r2, #20
 801ef74:	4353      	muls	r3, r2
 801ef76:	58c8      	ldr	r0, [r1, r3]
 801ef78:	4770      	bx	lr
 801ef7a:	4a0d      	ldr	r2, [pc, #52]	; (801efb0 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801ef7c:	8812      	ldrh	r2, [r2, #0]
 801ef7e:	440a      	add	r2, r1
 801ef80:	4293      	cmp	r3, r2
 801ef82:	da04      	bge.n	801ef8e <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801ef84:	4a08      	ldr	r2, [pc, #32]	; (801efa8 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801ef86:	6812      	ldr	r2, [r2, #0]
 801ef88:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801ef8c:	4770      	bx	lr
 801ef8e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ef92:	4293      	cmp	r3, r2
 801ef94:	d103      	bne.n	801ef9e <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801ef96:	4b07      	ldr	r3, [pc, #28]	; (801efb4 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801ef98:	681b      	ldr	r3, [r3, #0]
 801ef9a:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801ef9c:	4770      	bx	lr
 801ef9e:	2000      	movs	r0, #0
 801efa0:	4770      	bx	lr
 801efa2:	bf00      	nop
 801efa4:	2400bb70 	.word	0x2400bb70
 801efa8:	2400bb54 	.word	0x2400bb54
 801efac:	2400bb78 	.word	0x2400bb78
 801efb0:	2400bb74 	.word	0x2400bb74
 801efb4:	2400baf0 	.word	0x2400baf0

0801efb8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801efb8:	4b24      	ldr	r3, [pc, #144]	; (801f04c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801efba:	8802      	ldrh	r2, [r0, #0]
 801efbc:	8818      	ldrh	r0, [r3, #0]
 801efbe:	4282      	cmp	r2, r0
 801efc0:	d221      	bcs.n	801f006 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801efc2:	4b23      	ldr	r3, [pc, #140]	; (801f050 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801efc4:	6819      	ldr	r1, [r3, #0]
 801efc6:	2314      	movs	r3, #20
 801efc8:	fb03 1302 	mla	r3, r3, r2, r1
 801efcc:	6858      	ldr	r0, [r3, #4]
 801efce:	2800      	cmp	r0, #0
 801efd0:	d03a      	beq.n	801f048 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801efd2:	4920      	ldr	r1, [pc, #128]	; (801f054 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801efd4:	6809      	ldr	r1, [r1, #0]
 801efd6:	2900      	cmp	r1, #0
 801efd8:	d036      	beq.n	801f048 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801efda:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801efde:	2900      	cmp	r1, #0
 801efe0:	d032      	beq.n	801f048 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801efe2:	891a      	ldrh	r2, [r3, #8]
 801efe4:	8958      	ldrh	r0, [r3, #10]
 801efe6:	4350      	muls	r0, r2
 801efe8:	7c5a      	ldrb	r2, [r3, #17]
 801efea:	7cdb      	ldrb	r3, [r3, #19]
 801efec:	0952      	lsrs	r2, r2, #5
 801efee:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801eff2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801eff6:	2b0b      	cmp	r3, #11
 801eff8:	bf18      	it	ne
 801effa:	0040      	lslne	r0, r0, #1
 801effc:	3003      	adds	r0, #3
 801effe:	f020 0003 	bic.w	r0, r0, #3
 801f002:	4408      	add	r0, r1
 801f004:	4770      	bx	lr
 801f006:	4b14      	ldr	r3, [pc, #80]	; (801f058 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801f008:	881b      	ldrh	r3, [r3, #0]
 801f00a:	4403      	add	r3, r0
 801f00c:	429a      	cmp	r2, r3
 801f00e:	da1a      	bge.n	801f046 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801f010:	4b12      	ldr	r3, [pc, #72]	; (801f05c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801f012:	1a10      	subs	r0, r2, r0
 801f014:	210e      	movs	r1, #14
 801f016:	681b      	ldr	r3, [r3, #0]
 801f018:	fb01 3000 	mla	r0, r1, r0, r3
 801f01c:	7b03      	ldrb	r3, [r0, #12]
 801f01e:	f003 031f 	and.w	r3, r3, #31
 801f022:	2b0b      	cmp	r3, #11
 801f024:	d10b      	bne.n	801f03e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801f026:	8903      	ldrh	r3, [r0, #8]
 801f028:	8940      	ldrh	r0, [r0, #10]
 801f02a:	4358      	muls	r0, r3
 801f02c:	4b09      	ldr	r3, [pc, #36]	; (801f054 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801f02e:	3003      	adds	r0, #3
 801f030:	6819      	ldr	r1, [r3, #0]
 801f032:	f020 0303 	bic.w	r3, r0, #3
 801f036:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801f03a:	4418      	add	r0, r3
 801f03c:	4770      	bx	lr
 801f03e:	2b0d      	cmp	r3, #13
 801f040:	d101      	bne.n	801f046 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801f042:	300d      	adds	r0, #13
 801f044:	4770      	bx	lr
 801f046:	2000      	movs	r0, #0
 801f048:	4770      	bx	lr
 801f04a:	bf00      	nop
 801f04c:	2400bb70 	.word	0x2400bb70
 801f050:	2400bb78 	.word	0x2400bb78
 801f054:	2400bb54 	.word	0x2400bb54
 801f058:	2400bb74 	.word	0x2400bb74
 801f05c:	2400bb58 	.word	0x2400bb58

0801f060 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801f060:	4a17      	ldr	r2, [pc, #92]	; (801f0c0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801f062:	b510      	push	{r4, lr}
 801f064:	8803      	ldrh	r3, [r0, #0]
 801f066:	8812      	ldrh	r2, [r2, #0]
 801f068:	4293      	cmp	r3, r2
 801f06a:	d20c      	bcs.n	801f086 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801f06c:	4a15      	ldr	r2, [pc, #84]	; (801f0c4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801f06e:	2114      	movs	r1, #20
 801f070:	6812      	ldr	r2, [r2, #0]
 801f072:	fb01 2303 	mla	r3, r1, r3, r2
 801f076:	7c58      	ldrb	r0, [r3, #17]
 801f078:	0942      	lsrs	r2, r0, #5
 801f07a:	7cd8      	ldrb	r0, [r3, #19]
 801f07c:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801f080:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801f084:	bd10      	pop	{r4, pc}
 801f086:	4910      	ldr	r1, [pc, #64]	; (801f0c8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801f088:	8809      	ldrh	r1, [r1, #0]
 801f08a:	4411      	add	r1, r2
 801f08c:	428b      	cmp	r3, r1
 801f08e:	da09      	bge.n	801f0a4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801f090:	1a9b      	subs	r3, r3, r2
 801f092:	4a0e      	ldr	r2, [pc, #56]	; (801f0cc <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801f094:	210e      	movs	r1, #14
 801f096:	6812      	ldr	r2, [r2, #0]
 801f098:	fb01 2303 	mla	r3, r1, r3, r2
 801f09c:	7b18      	ldrb	r0, [r3, #12]
 801f09e:	f000 001f 	and.w	r0, r0, #31
 801f0a2:	e7ef      	b.n	801f084 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801f0a4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801f0a8:	4293      	cmp	r3, r2
 801f0aa:	d106      	bne.n	801f0ba <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801f0ac:	f7e5 f94a 	bl	8004344 <_ZN8touchgfx3HAL3lcdEv>
 801f0b0:	6803      	ldr	r3, [r0, #0]
 801f0b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f0b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f0b8:	4718      	bx	r3
 801f0ba:	2000      	movs	r0, #0
 801f0bc:	e7e2      	b.n	801f084 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801f0be:	bf00      	nop
 801f0c0:	2400bb70 	.word	0x2400bb70
 801f0c4:	2400bb78 	.word	0x2400bb78
 801f0c8:	2400bb74 	.word	0x2400bb74
 801f0cc:	2400bb58 	.word	0x2400bb58

0801f0d0 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801f0d0:	2010      	movs	r0, #16
 801f0d2:	4770      	bx	lr

0801f0d4 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801f0d4:	2000      	movs	r0, #0
 801f0d6:	4770      	bx	lr

0801f0d8 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 801f0d8:	4b02      	ldr	r3, [pc, #8]	; (801f0e4 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 801f0da:	8818      	ldrh	r0, [r3, #0]
 801f0dc:	0040      	lsls	r0, r0, #1
 801f0de:	b280      	uxth	r0, r0
 801f0e0:	4770      	bx	lr
 801f0e2:	bf00      	nop
 801f0e4:	2400baea 	.word	0x2400baea

0801f0e8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801f0e8:	2bff      	cmp	r3, #255	; 0xff
 801f0ea:	d050      	beq.n	801f18e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801f0ec:	2a0b      	cmp	r2, #11
 801f0ee:	d04a      	beq.n	801f186 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801f0f0:	d80e      	bhi.n	801f110 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801f0f2:	2a03      	cmp	r2, #3
 801f0f4:	d03f      	beq.n	801f176 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801f0f6:	d804      	bhi.n	801f102 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801f0f8:	2a01      	cmp	r2, #1
 801f0fa:	d03e      	beq.n	801f17a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801f0fc:	d93f      	bls.n	801f17e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801f0fe:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801f100:	4770      	bx	lr
 801f102:	2a09      	cmp	r2, #9
 801f104:	d03f      	beq.n	801f186 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801f106:	d83c      	bhi.n	801f182 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801f108:	2a08      	cmp	r2, #8
 801f10a:	d03a      	beq.n	801f182 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801f10c:	2000      	movs	r0, #0
 801f10e:	4770      	bx	lr
 801f110:	2a2f      	cmp	r2, #47	; 0x2f
 801f112:	d024      	beq.n	801f15e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801f114:	d80d      	bhi.n	801f132 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801f116:	2a2d      	cmp	r2, #45	; 0x2d
 801f118:	d014      	beq.n	801f144 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 801f11a:	d826      	bhi.n	801f16a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801f11c:	2a2c      	cmp	r2, #44	; 0x2c
 801f11e:	d1f5      	bne.n	801f10c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f120:	684b      	ldr	r3, [r1, #4]
 801f122:	781b      	ldrb	r3, [r3, #0]
 801f124:	2b01      	cmp	r3, #1
 801f126:	d018      	beq.n	801f15a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801f128:	d323      	bcc.n	801f172 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801f12a:	2b02      	cmp	r3, #2
 801f12c:	d1ee      	bne.n	801f10c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f12e:	6880      	ldr	r0, [r0, #8]
 801f130:	4770      	bx	lr
 801f132:	2a31      	cmp	r2, #49	; 0x31
 801f134:	d004      	beq.n	801f140 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801f136:	d328      	bcc.n	801f18a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801f138:	2a32      	cmp	r2, #50	; 0x32
 801f13a:	d026      	beq.n	801f18a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801f13c:	2a33      	cmp	r2, #51	; 0x33
 801f13e:	d1e5      	bne.n	801f10c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f140:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801f142:	4770      	bx	lr
 801f144:	684b      	ldr	r3, [r1, #4]
 801f146:	781b      	ldrb	r3, [r3, #0]
 801f148:	2b01      	cmp	r3, #1
 801f14a:	d004      	beq.n	801f156 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f14c:	d30b      	bcc.n	801f166 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801f14e:	2b02      	cmp	r3, #2
 801f150:	d1dc      	bne.n	801f10c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f152:	6900      	ldr	r0, [r0, #16]
 801f154:	4770      	bx	lr
 801f156:	6a00      	ldr	r0, [r0, #32]
 801f158:	4770      	bx	lr
 801f15a:	6980      	ldr	r0, [r0, #24]
 801f15c:	4770      	bx	lr
 801f15e:	684b      	ldr	r3, [r1, #4]
 801f160:	781b      	ldrb	r3, [r3, #0]
 801f162:	2b00      	cmp	r3, #0
 801f164:	d1d2      	bne.n	801f10c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f166:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801f168:	4770      	bx	lr
 801f16a:	684b      	ldr	r3, [r1, #4]
 801f16c:	781b      	ldrb	r3, [r3, #0]
 801f16e:	2b00      	cmp	r3, #0
 801f170:	d1cc      	bne.n	801f10c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f172:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801f174:	4770      	bx	lr
 801f176:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801f178:	4770      	bx	lr
 801f17a:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801f17c:	4770      	bx	lr
 801f17e:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801f180:	4770      	bx	lr
 801f182:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801f184:	4770      	bx	lr
 801f186:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801f188:	4770      	bx	lr
 801f18a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801f18c:	4770      	bx	lr
 801f18e:	2a0b      	cmp	r2, #11
 801f190:	d049      	beq.n	801f226 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801f192:	d80e      	bhi.n	801f1b2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 801f194:	2a03      	cmp	r2, #3
 801f196:	d040      	beq.n	801f21a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801f198:	d804      	bhi.n	801f1a4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 801f19a:	2a01      	cmp	r2, #1
 801f19c:	d03f      	beq.n	801f21e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801f19e:	d940      	bls.n	801f222 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801f1a0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801f1a2:	4770      	bx	lr
 801f1a4:	2a09      	cmp	r2, #9
 801f1a6:	d03e      	beq.n	801f226 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801f1a8:	d801      	bhi.n	801f1ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 801f1aa:	2a08      	cmp	r2, #8
 801f1ac:	d1ae      	bne.n	801f10c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f1ae:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801f1b0:	4770      	bx	lr
 801f1b2:	2a2f      	cmp	r2, #47	; 0x2f
 801f1b4:	d024      	beq.n	801f200 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801f1b6:	d80d      	bhi.n	801f1d4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801f1b8:	2a2d      	cmp	r2, #45	; 0x2d
 801f1ba:	d014      	beq.n	801f1e6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 801f1bc:	d826      	bhi.n	801f20c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801f1be:	2a2c      	cmp	r2, #44	; 0x2c
 801f1c0:	d1a4      	bne.n	801f10c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f1c2:	684b      	ldr	r3, [r1, #4]
 801f1c4:	781b      	ldrb	r3, [r3, #0]
 801f1c6:	2b01      	cmp	r3, #1
 801f1c8:	d018      	beq.n	801f1fc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 801f1ca:	d324      	bcc.n	801f216 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801f1cc:	2b02      	cmp	r3, #2
 801f1ce:	d19d      	bne.n	801f10c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f1d0:	68c0      	ldr	r0, [r0, #12]
 801f1d2:	4770      	bx	lr
 801f1d4:	2a31      	cmp	r2, #49	; 0x31
 801f1d6:	d004      	beq.n	801f1e2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 801f1d8:	d327      	bcc.n	801f22a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801f1da:	2a32      	cmp	r2, #50	; 0x32
 801f1dc:	d025      	beq.n	801f22a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801f1de:	2a33      	cmp	r2, #51	; 0x33
 801f1e0:	d194      	bne.n	801f10c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f1e2:	6f40      	ldr	r0, [r0, #116]	; 0x74
 801f1e4:	4770      	bx	lr
 801f1e6:	684b      	ldr	r3, [r1, #4]
 801f1e8:	781b      	ldrb	r3, [r3, #0]
 801f1ea:	2b01      	cmp	r3, #1
 801f1ec:	d004      	beq.n	801f1f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801f1ee:	d30b      	bcc.n	801f208 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801f1f0:	2b02      	cmp	r3, #2
 801f1f2:	d18b      	bne.n	801f10c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f1f4:	6940      	ldr	r0, [r0, #20]
 801f1f6:	4770      	bx	lr
 801f1f8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801f1fa:	4770      	bx	lr
 801f1fc:	69c0      	ldr	r0, [r0, #28]
 801f1fe:	4770      	bx	lr
 801f200:	684b      	ldr	r3, [r1, #4]
 801f202:	781b      	ldrb	r3, [r3, #0]
 801f204:	2b00      	cmp	r3, #0
 801f206:	d181      	bne.n	801f10c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f208:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801f20a:	4770      	bx	lr
 801f20c:	684b      	ldr	r3, [r1, #4]
 801f20e:	781b      	ldrb	r3, [r3, #0]
 801f210:	2b00      	cmp	r3, #0
 801f212:	f47f af7b 	bne.w	801f10c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f216:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801f218:	4770      	bx	lr
 801f21a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801f21c:	4770      	bx	lr
 801f21e:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801f220:	4770      	bx	lr
 801f222:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801f224:	4770      	bx	lr
 801f226:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801f228:	4770      	bx	lr
 801f22a:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 801f22c:	4770      	bx	lr

0801f22e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f22e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f232:	b087      	sub	sp, #28
 801f234:	9815      	ldr	r0, [sp, #84]	; 0x54
 801f236:	9205      	str	r2, [sp, #20]
 801f238:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801f23c:	9101      	str	r1, [sp, #4]
 801f23e:	9202      	str	r2, [sp, #8]
 801f240:	6841      	ldr	r1, [r0, #4]
 801f242:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801f246:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801f24a:	fb01 2404 	mla	r4, r1, r4, r2
 801f24e:	6802      	ldr	r2, [r0, #0]
 801f250:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f254:	f8de 2000 	ldr.w	r2, [lr]
 801f258:	9203      	str	r2, [sp, #12]
 801f25a:	f8de 2004 	ldr.w	r2, [lr, #4]
 801f25e:	3204      	adds	r2, #4
 801f260:	9204      	str	r2, [sp, #16]
 801f262:	9a02      	ldr	r2, [sp, #8]
 801f264:	43d6      	mvns	r6, r2
 801f266:	b2f6      	uxtb	r6, r6
 801f268:	9a01      	ldr	r2, [sp, #4]
 801f26a:	2a00      	cmp	r2, #0
 801f26c:	dc03      	bgt.n	801f276 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801f26e:	9a05      	ldr	r2, [sp, #20]
 801f270:	2a00      	cmp	r2, #0
 801f272:	f340 8129 	ble.w	801f4c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801f276:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f278:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801f27c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f280:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f282:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801f286:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f28a:	2b00      	cmp	r3, #0
 801f28c:	dd0e      	ble.n	801f2ac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f28e:	1408      	asrs	r0, r1, #16
 801f290:	d405      	bmi.n	801f29e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f292:	4560      	cmp	r0, ip
 801f294:	da03      	bge.n	801f29e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f296:	1410      	asrs	r0, r2, #16
 801f298:	d401      	bmi.n	801f29e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f29a:	42b8      	cmp	r0, r7
 801f29c:	db07      	blt.n	801f2ae <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801f29e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f2a0:	3b01      	subs	r3, #1
 801f2a2:	3402      	adds	r4, #2
 801f2a4:	4401      	add	r1, r0
 801f2a6:	9814      	ldr	r0, [sp, #80]	; 0x50
 801f2a8:	4402      	add	r2, r0
 801f2aa:	e7ee      	b.n	801f28a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801f2ac:	d071      	beq.n	801f392 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801f2ae:	1e58      	subs	r0, r3, #1
 801f2b0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801f2b2:	fb05 1500 	mla	r5, r5, r0, r1
 801f2b6:	142d      	asrs	r5, r5, #16
 801f2b8:	d45f      	bmi.n	801f37a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801f2ba:	4565      	cmp	r5, ip
 801f2bc:	da5d      	bge.n	801f37a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801f2be:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801f2c0:	fb05 2000 	mla	r0, r5, r0, r2
 801f2c4:	1400      	asrs	r0, r0, #16
 801f2c6:	d458      	bmi.n	801f37a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801f2c8:	42b8      	cmp	r0, r7
 801f2ca:	da56      	bge.n	801f37a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801f2cc:	4699      	mov	r9, r3
 801f2ce:	46a2      	mov	sl, r4
 801f2d0:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801f2d4:	f1b9 0f00 	cmp.w	r9, #0
 801f2d8:	dd57      	ble.n	801f38a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801f2da:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801f2de:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801f2e2:	9803      	ldr	r0, [sp, #12]
 801f2e4:	140d      	asrs	r5, r1, #16
 801f2e6:	f109 39ff 	add.w	r9, r9, #4294967295
 801f2ea:	fb07 000c 	mla	r0, r7, ip, r0
 801f2ee:	5d40      	ldrb	r0, [r0, r5]
 801f2f0:	9d04      	ldr	r5, [sp, #16]
 801f2f2:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801f2f6:	f8ba 5000 	ldrh.w	r5, [sl]
 801f2fa:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801f2fe:	122f      	asrs	r7, r5, #8
 801f300:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801f304:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f308:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f30c:	00ed      	lsls	r5, r5, #3
 801f30e:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801f312:	fb17 f706 	smulbb	r7, r7, r6
 801f316:	b2ed      	uxtb	r5, r5
 801f318:	fb18 f806 	smulbb	r8, r8, r6
 801f31c:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801f320:	10c7      	asrs	r7, r0, #3
 801f322:	fb15 f506 	smulbb	r5, r5, r6
 801f326:	00c0      	lsls	r0, r0, #3
 801f328:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f32c:	fa1f fc8c 	uxth.w	ip, ip
 801f330:	b2c0      	uxtb	r0, r0
 801f332:	fb07 870b 	mla	r7, r7, fp, r8
 801f336:	fb00 500b 	mla	r0, r0, fp, r5
 801f33a:	f10c 0501 	add.w	r5, ip, #1
 801f33e:	b2bf      	uxth	r7, r7
 801f340:	b280      	uxth	r0, r0
 801f342:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801f346:	f107 0801 	add.w	r8, r7, #1
 801f34a:	1c45      	adds	r5, r0, #1
 801f34c:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801f350:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f354:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801f358:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f35a:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801f35e:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801f362:	4401      	add	r1, r0
 801f364:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801f368:	9814      	ldr	r0, [sp, #80]	; 0x50
 801f36a:	ea45 0c0c 	orr.w	ip, r5, ip
 801f36e:	4402      	add	r2, r0
 801f370:	ea4c 0c08 	orr.w	ip, ip, r8
 801f374:	f82a cb02 	strh.w	ip, [sl], #2
 801f378:	e7ac      	b.n	801f2d4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801f37a:	f04f 0800 	mov.w	r8, #0
 801f37e:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801f382:	eb03 0008 	add.w	r0, r3, r8
 801f386:	2800      	cmp	r0, #0
 801f388:	dc41      	bgt.n	801f40e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801f38a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f38e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f392:	9b01      	ldr	r3, [sp, #4]
 801f394:	2b00      	cmp	r3, #0
 801f396:	f340 8097 	ble.w	801f4c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801f39a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f39e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f3a0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f3a4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f3a8:	eef0 6a62 	vmov.f32	s13, s5
 801f3ac:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f3b0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f3b4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f3b8:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801f3bc:	eef0 6a43 	vmov.f32	s13, s6
 801f3c0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f3c4:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801f3c8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f3cc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f3d0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f3d4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f3d8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f3dc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f3e0:	ee12 2a90 	vmov	r2, s5
 801f3e4:	eef0 2a47 	vmov.f32	s5, s14
 801f3e8:	fb92 f3f3 	sdiv	r3, r2, r3
 801f3ec:	ee13 2a10 	vmov	r2, s6
 801f3f0:	9313      	str	r3, [sp, #76]	; 0x4c
 801f3f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f3f4:	eeb0 3a67 	vmov.f32	s6, s15
 801f3f8:	fb92 f3f3 	sdiv	r3, r2, r3
 801f3fc:	9314      	str	r3, [sp, #80]	; 0x50
 801f3fe:	9b01      	ldr	r3, [sp, #4]
 801f400:	9a05      	ldr	r2, [sp, #20]
 801f402:	3b01      	subs	r3, #1
 801f404:	9301      	str	r3, [sp, #4]
 801f406:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f408:	bf08      	it	eq
 801f40a:	4613      	moveq	r3, r2
 801f40c:	e72c      	b.n	801f268 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801f40e:	140f      	asrs	r7, r1, #16
 801f410:	d453      	bmi.n	801f4ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801f412:	f8de 5008 	ldr.w	r5, [lr, #8]
 801f416:	42bd      	cmp	r5, r7
 801f418:	dd4f      	ble.n	801f4ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801f41a:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801f41e:	d44c      	bmi.n	801f4ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801f420:	f8de 000c 	ldr.w	r0, [lr, #12]
 801f424:	4560      	cmp	r0, ip
 801f426:	dd48      	ble.n	801f4ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801f428:	9803      	ldr	r0, [sp, #12]
 801f42a:	b22d      	sxth	r5, r5
 801f42c:	fb0c 0505 	mla	r5, ip, r5, r0
 801f430:	5de8      	ldrb	r0, [r5, r7]
 801f432:	9d04      	ldr	r5, [sp, #16]
 801f434:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801f438:	f06f 0501 	mvn.w	r5, #1
 801f43c:	fb05 fb08 	mul.w	fp, r5, r8
 801f440:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801f444:	f834 500b 	ldrh.w	r5, [r4, fp]
 801f448:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f44c:	122f      	asrs	r7, r5, #8
 801f44e:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801f452:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f456:	00ed      	lsls	r5, r5, #3
 801f458:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801f45c:	fb17 f706 	smulbb	r7, r7, r6
 801f460:	b2ed      	uxtb	r5, r5
 801f462:	fb19 f906 	smulbb	r9, r9, r6
 801f466:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801f46a:	10c7      	asrs	r7, r0, #3
 801f46c:	fb15 f506 	smulbb	r5, r5, r6
 801f470:	00c0      	lsls	r0, r0, #3
 801f472:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f476:	fa1f fc8c 	uxth.w	ip, ip
 801f47a:	b2c0      	uxtb	r0, r0
 801f47c:	fb07 970a 	mla	r7, r7, sl, r9
 801f480:	fb00 500a 	mla	r0, r0, sl, r5
 801f484:	f10c 0501 	add.w	r5, ip, #1
 801f488:	b2bf      	uxth	r7, r7
 801f48a:	b280      	uxth	r0, r0
 801f48c:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801f490:	f107 0901 	add.w	r9, r7, #1
 801f494:	1c45      	adds	r5, r0, #1
 801f496:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801f49a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f49e:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801f4a2:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801f4a6:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801f4aa:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801f4ae:	ea45 0c0c 	orr.w	ip, r5, ip
 801f4b2:	ea4c 0c09 	orr.w	ip, ip, r9
 801f4b6:	f824 c00b 	strh.w	ip, [r4, fp]
 801f4ba:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f4bc:	f108 38ff 	add.w	r8, r8, #4294967295
 801f4c0:	4401      	add	r1, r0
 801f4c2:	9814      	ldr	r0, [sp, #80]	; 0x50
 801f4c4:	4402      	add	r2, r0
 801f4c6:	e75c      	b.n	801f382 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801f4c8:	b007      	add	sp, #28
 801f4ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f4ce <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f4ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f4d2:	b085      	sub	sp, #20
 801f4d4:	4693      	mov	fp, r2
 801f4d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f4da:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801f4dc:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801f4de:	6870      	ldr	r0, [r6, #4]
 801f4e0:	9100      	str	r1, [sp, #0]
 801f4e2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801f4e6:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801f4ea:	fb00 2404 	mla	r4, r0, r4, r2
 801f4ee:	6832      	ldr	r2, [r6, #0]
 801f4f0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f4f4:	682a      	ldr	r2, [r5, #0]
 801f4f6:	9201      	str	r2, [sp, #4]
 801f4f8:	686a      	ldr	r2, [r5, #4]
 801f4fa:	3204      	adds	r2, #4
 801f4fc:	9202      	str	r2, [sp, #8]
 801f4fe:	9a00      	ldr	r2, [sp, #0]
 801f500:	2a00      	cmp	r2, #0
 801f502:	dc03      	bgt.n	801f50c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801f504:	f1bb 0f00 	cmp.w	fp, #0
 801f508:	f340 80a0 	ble.w	801f64c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801f50c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f50e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801f512:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f516:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f518:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801f51c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f520:	2b00      	cmp	r3, #0
 801f522:	dd0c      	ble.n	801f53e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f524:	1406      	asrs	r6, r0, #16
 801f526:	d405      	bmi.n	801f534 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f528:	454e      	cmp	r6, r9
 801f52a:	da03      	bge.n	801f534 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f52c:	1416      	asrs	r6, r2, #16
 801f52e:	d401      	bmi.n	801f534 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f530:	4546      	cmp	r6, r8
 801f532:	db05      	blt.n	801f540 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f534:	4470      	add	r0, lr
 801f536:	4462      	add	r2, ip
 801f538:	3b01      	subs	r3, #1
 801f53a:	3402      	adds	r4, #2
 801f53c:	e7f0      	b.n	801f520 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801f53e:	d00f      	beq.n	801f560 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f540:	1e5e      	subs	r6, r3, #1
 801f542:	fb0e 0706 	mla	r7, lr, r6, r0
 801f546:	143f      	asrs	r7, r7, #16
 801f548:	d541      	bpl.n	801f5ce <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801f54a:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801f54e:	4698      	mov	r8, r3
 801f550:	9603      	str	r6, [sp, #12]
 801f552:	f1b8 0f00 	cmp.w	r8, #0
 801f556:	dc59      	bgt.n	801f60c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801f558:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f55c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f560:	9b00      	ldr	r3, [sp, #0]
 801f562:	2b00      	cmp	r3, #0
 801f564:	dd72      	ble.n	801f64c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801f566:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f56a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f56c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f570:	eeb0 6a62 	vmov.f32	s12, s5
 801f574:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f578:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f57c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f580:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f584:	eeb0 6a43 	vmov.f32	s12, s6
 801f588:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f58c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801f590:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f594:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f598:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f59c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f5a0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f5a4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f5a8:	ee12 2a90 	vmov	r2, s5
 801f5ac:	eef0 2a47 	vmov.f32	s5, s14
 801f5b0:	fb92 fef3 	sdiv	lr, r2, r3
 801f5b4:	ee13 2a10 	vmov	r2, s6
 801f5b8:	eeb0 3a67 	vmov.f32	s6, s15
 801f5bc:	fb92 fcf3 	sdiv	ip, r2, r3
 801f5c0:	9b00      	ldr	r3, [sp, #0]
 801f5c2:	3b01      	subs	r3, #1
 801f5c4:	9300      	str	r3, [sp, #0]
 801f5c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f5c8:	bf08      	it	eq
 801f5ca:	465b      	moveq	r3, fp
 801f5cc:	e797      	b.n	801f4fe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801f5ce:	454f      	cmp	r7, r9
 801f5d0:	dabb      	bge.n	801f54a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f5d2:	fb0c 2606 	mla	r6, ip, r6, r2
 801f5d6:	1436      	asrs	r6, r6, #16
 801f5d8:	d4b7      	bmi.n	801f54a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f5da:	4546      	cmp	r6, r8
 801f5dc:	dab5      	bge.n	801f54a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f5de:	461e      	mov	r6, r3
 801f5e0:	46a0      	mov	r8, r4
 801f5e2:	2e00      	cmp	r6, #0
 801f5e4:	ddb8      	ble.n	801f558 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801f5e6:	1417      	asrs	r7, r2, #16
 801f5e8:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801f5ec:	9901      	ldr	r1, [sp, #4]
 801f5ee:	ea4f 4920 	mov.w	r9, r0, asr #16
 801f5f2:	4462      	add	r2, ip
 801f5f4:	4470      	add	r0, lr
 801f5f6:	fb0a 1707 	mla	r7, sl, r7, r1
 801f5fa:	9902      	ldr	r1, [sp, #8]
 801f5fc:	3e01      	subs	r6, #1
 801f5fe:	f817 7009 	ldrb.w	r7, [r7, r9]
 801f602:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801f606:	f828 7b02 	strh.w	r7, [r8], #2
 801f60a:	e7ea      	b.n	801f5e2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801f60c:	ea5f 4920 	movs.w	r9, r0, asr #16
 801f610:	d417      	bmi.n	801f642 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801f612:	68ae      	ldr	r6, [r5, #8]
 801f614:	454e      	cmp	r6, r9
 801f616:	dd14      	ble.n	801f642 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801f618:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801f61c:	d411      	bmi.n	801f642 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801f61e:	68ef      	ldr	r7, [r5, #12]
 801f620:	4557      	cmp	r7, sl
 801f622:	dd0e      	ble.n	801f642 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801f624:	9f01      	ldr	r7, [sp, #4]
 801f626:	b236      	sxth	r6, r6
 801f628:	f06f 0101 	mvn.w	r1, #1
 801f62c:	fb0a 7606 	mla	r6, sl, r6, r7
 801f630:	9f02      	ldr	r7, [sp, #8]
 801f632:	f816 6009 	ldrb.w	r6, [r6, r9]
 801f636:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801f63a:	fb01 f608 	mul.w	r6, r1, r8
 801f63e:	9903      	ldr	r1, [sp, #12]
 801f640:	538f      	strh	r7, [r1, r6]
 801f642:	4470      	add	r0, lr
 801f644:	4462      	add	r2, ip
 801f646:	f108 38ff 	add.w	r8, r8, #4294967295
 801f64a:	e782      	b.n	801f552 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f64c:	b005      	add	sp, #20
 801f64e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f652 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f652:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f656:	b087      	sub	sp, #28
 801f658:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f65a:	9205      	str	r2, [sp, #20]
 801f65c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801f660:	9102      	str	r1, [sp, #8]
 801f662:	9203      	str	r2, [sp, #12]
 801f664:	6861      	ldr	r1, [r4, #4]
 801f666:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801f66a:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801f66e:	fb01 2000 	mla	r0, r1, r0, r2
 801f672:	6822      	ldr	r2, [r4, #0]
 801f674:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801f678:	9200      	str	r2, [sp, #0]
 801f67a:	f8dc 2000 	ldr.w	r2, [ip]
 801f67e:	9204      	str	r2, [sp, #16]
 801f680:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801f684:	3204      	adds	r2, #4
 801f686:	9201      	str	r2, [sp, #4]
 801f688:	9a03      	ldr	r2, [sp, #12]
 801f68a:	43d5      	mvns	r5, r2
 801f68c:	b2ed      	uxtb	r5, r5
 801f68e:	9a02      	ldr	r2, [sp, #8]
 801f690:	2a00      	cmp	r2, #0
 801f692:	dc03      	bgt.n	801f69c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801f694:	9a05      	ldr	r2, [sp, #20]
 801f696:	2a00      	cmp	r2, #0
 801f698:	f340 812c 	ble.w	801f8f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801f69c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f69e:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801f6a2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f6a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f6a8:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801f6ac:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f6b0:	2b00      	cmp	r3, #0
 801f6b2:	dd10      	ble.n	801f6d6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f6b4:	140c      	asrs	r4, r1, #16
 801f6b6:	d405      	bmi.n	801f6c4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f6b8:	4574      	cmp	r4, lr
 801f6ba:	da03      	bge.n	801f6c4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f6bc:	1414      	asrs	r4, r2, #16
 801f6be:	d401      	bmi.n	801f6c4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f6c0:	42bc      	cmp	r4, r7
 801f6c2:	db09      	blt.n	801f6d8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801f6c4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f6c6:	3b01      	subs	r3, #1
 801f6c8:	9800      	ldr	r0, [sp, #0]
 801f6ca:	4421      	add	r1, r4
 801f6cc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f6ce:	3002      	adds	r0, #2
 801f6d0:	4422      	add	r2, r4
 801f6d2:	9000      	str	r0, [sp, #0]
 801f6d4:	e7ec      	b.n	801f6b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801f6d6:	d071      	beq.n	801f7bc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801f6d8:	1e5c      	subs	r4, r3, #1
 801f6da:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801f6dc:	fb06 1604 	mla	r6, r6, r4, r1
 801f6e0:	1436      	asrs	r6, r6, #16
 801f6e2:	d45d      	bmi.n	801f7a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801f6e4:	4576      	cmp	r6, lr
 801f6e6:	da5b      	bge.n	801f7a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801f6e8:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801f6ea:	fb06 2404 	mla	r4, r6, r4, r2
 801f6ee:	1424      	asrs	r4, r4, #16
 801f6f0:	d456      	bmi.n	801f7a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801f6f2:	42bc      	cmp	r4, r7
 801f6f4:	da54      	bge.n	801f7a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801f6f6:	4698      	mov	r8, r3
 801f6f8:	f8dd 9000 	ldr.w	r9, [sp]
 801f6fc:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801f700:	f1b8 0f00 	cmp.w	r8, #0
 801f704:	dd54      	ble.n	801f7b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801f706:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801f70a:	1414      	asrs	r4, r2, #16
 801f70c:	9804      	ldr	r0, [sp, #16]
 801f70e:	140e      	asrs	r6, r1, #16
 801f710:	f108 38ff 	add.w	r8, r8, #4294967295
 801f714:	fb07 0404 	mla	r4, r7, r4, r0
 801f718:	9801      	ldr	r0, [sp, #4]
 801f71a:	f814 e006 	ldrb.w	lr, [r4, r6]
 801f71e:	f8b9 4000 	ldrh.w	r4, [r9]
 801f722:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801f726:	1227      	asrs	r7, r4, #8
 801f728:	eb00 0b0e 	add.w	fp, r0, lr
 801f72c:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801f730:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f734:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f736:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801f73a:	f89b b001 	ldrb.w	fp, [fp, #1]
 801f73e:	4401      	add	r1, r0
 801f740:	fb16 f60a 	smulbb	r6, r6, sl
 801f744:	9814      	ldr	r0, [sp, #80]	; 0x50
 801f746:	fb1b fb0a 	smulbb	fp, fp, sl
 801f74a:	fb07 6705 	mla	r7, r7, r5, r6
 801f74e:	10e6      	asrs	r6, r4, #3
 801f750:	00e4      	lsls	r4, r4, #3
 801f752:	4402      	add	r2, r0
 801f754:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f758:	b2bf      	uxth	r7, r7
 801f75a:	b2e4      	uxtb	r4, r4
 801f75c:	fb06 b605 	mla	r6, r6, r5, fp
 801f760:	fb14 f405 	smulbb	r4, r4, r5
 801f764:	b2b6      	uxth	r6, r6
 801f766:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801f76a:	1c7c      	adds	r4, r7, #1
 801f76c:	f106 0b01 	add.w	fp, r6, #1
 801f770:	fa1f fe8e 	uxth.w	lr, lr
 801f774:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801f778:	f10e 0401 	add.w	r4, lr, #1
 801f77c:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801f780:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801f784:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801f788:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801f78c:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801f790:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801f794:	4327      	orrs	r7, r4
 801f796:	ea47 070b 	orr.w	r7, r7, fp
 801f79a:	f829 7b02 	strh.w	r7, [r9], #2
 801f79e:	e7af      	b.n	801f700 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801f7a0:	f04f 0e00 	mov.w	lr, #0
 801f7a4:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801f7a8:	eb03 040e 	add.w	r4, r3, lr
 801f7ac:	2c00      	cmp	r4, #0
 801f7ae:	dc43      	bgt.n	801f838 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801f7b0:	9a00      	ldr	r2, [sp, #0]
 801f7b2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f7b6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f7ba:	9300      	str	r3, [sp, #0]
 801f7bc:	9b02      	ldr	r3, [sp, #8]
 801f7be:	2b00      	cmp	r3, #0
 801f7c0:	f340 8098 	ble.w	801f8f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801f7c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f7c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f7ca:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f7ce:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f7d2:	eef0 6a62 	vmov.f32	s13, s5
 801f7d6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f7da:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f7de:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f7e2:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801f7e6:	eef0 6a43 	vmov.f32	s13, s6
 801f7ea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f7ee:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801f7f2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f7f6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f7fa:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f7fe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f802:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f806:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f80a:	ee12 2a90 	vmov	r2, s5
 801f80e:	eef0 2a47 	vmov.f32	s5, s14
 801f812:	fb92 f3f3 	sdiv	r3, r2, r3
 801f816:	ee13 2a10 	vmov	r2, s6
 801f81a:	9313      	str	r3, [sp, #76]	; 0x4c
 801f81c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f81e:	eeb0 3a67 	vmov.f32	s6, s15
 801f822:	fb92 f3f3 	sdiv	r3, r2, r3
 801f826:	9314      	str	r3, [sp, #80]	; 0x50
 801f828:	9b02      	ldr	r3, [sp, #8]
 801f82a:	9a05      	ldr	r2, [sp, #20]
 801f82c:	3b01      	subs	r3, #1
 801f82e:	9302      	str	r3, [sp, #8]
 801f830:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f832:	bf08      	it	eq
 801f834:	4613      	moveq	r3, r2
 801f836:	e72a      	b.n	801f68e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801f838:	140f      	asrs	r7, r1, #16
 801f83a:	d454      	bmi.n	801f8e6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801f83c:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801f840:	42be      	cmp	r6, r7
 801f842:	dd50      	ble.n	801f8e6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801f844:	ea5f 4822 	movs.w	r8, r2, asr #16
 801f848:	d44d      	bmi.n	801f8e6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801f84a:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801f84e:	4544      	cmp	r4, r8
 801f850:	dd49      	ble.n	801f8e6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801f852:	9c04      	ldr	r4, [sp, #16]
 801f854:	b236      	sxth	r6, r6
 801f856:	f06f 0001 	mvn.w	r0, #1
 801f85a:	fb08 4606 	mla	r6, r8, r6, r4
 801f85e:	9c01      	ldr	r4, [sp, #4]
 801f860:	fb00 fa0e 	mul.w	sl, r0, lr
 801f864:	9800      	ldr	r0, [sp, #0]
 801f866:	f816 8007 	ldrb.w	r8, [r6, r7]
 801f86a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801f86e:	eb04 0b08 	add.w	fp, r4, r8
 801f872:	f830 400a 	ldrh.w	r4, [r0, sl]
 801f876:	9801      	ldr	r0, [sp, #4]
 801f878:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801f87c:	1227      	asrs	r7, r4, #8
 801f87e:	f89b b001 	ldrb.w	fp, [fp, #1]
 801f882:	fb16 f609 	smulbb	r6, r6, r9
 801f886:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f88a:	f810 8008 	ldrb.w	r8, [r0, r8]
 801f88e:	fb1b fb09 	smulbb	fp, fp, r9
 801f892:	fb07 6705 	mla	r7, r7, r5, r6
 801f896:	10e6      	asrs	r6, r4, #3
 801f898:	00e4      	lsls	r4, r4, #3
 801f89a:	9800      	ldr	r0, [sp, #0]
 801f89c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f8a0:	b2bf      	uxth	r7, r7
 801f8a2:	b2e4      	uxtb	r4, r4
 801f8a4:	fb06 b605 	mla	r6, r6, r5, fp
 801f8a8:	fb14 f405 	smulbb	r4, r4, r5
 801f8ac:	b2b6      	uxth	r6, r6
 801f8ae:	fb08 4809 	mla	r8, r8, r9, r4
 801f8b2:	1c7c      	adds	r4, r7, #1
 801f8b4:	f106 0b01 	add.w	fp, r6, #1
 801f8b8:	fa1f f888 	uxth.w	r8, r8
 801f8bc:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801f8c0:	f108 0401 	add.w	r4, r8, #1
 801f8c4:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801f8c8:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801f8cc:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801f8d0:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801f8d4:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801f8d8:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801f8dc:	4327      	orrs	r7, r4
 801f8de:	ea47 070b 	orr.w	r7, r7, fp
 801f8e2:	f820 700a 	strh.w	r7, [r0, sl]
 801f8e6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f8e8:	f10e 3eff 	add.w	lr, lr, #4294967295
 801f8ec:	4401      	add	r1, r0
 801f8ee:	9814      	ldr	r0, [sp, #80]	; 0x50
 801f8f0:	4402      	add	r2, r0
 801f8f2:	e759      	b.n	801f7a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801f8f4:	b007      	add	sp, #28
 801f8f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801f8fc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f8fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f900:	b085      	sub	sp, #20
 801f902:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f906:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801f908:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801f90a:	9203      	str	r2, [sp, #12]
 801f90c:	6870      	ldr	r0, [r6, #4]
 801f90e:	686f      	ldr	r7, [r5, #4]
 801f910:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 801f914:	3704      	adds	r7, #4
 801f916:	9101      	str	r1, [sp, #4]
 801f918:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801f91c:	fb00 2404 	mla	r4, r0, r4, r2
 801f920:	6832      	ldr	r2, [r6, #0]
 801f922:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f926:	682a      	ldr	r2, [r5, #0]
 801f928:	9202      	str	r2, [sp, #8]
 801f92a:	9a01      	ldr	r2, [sp, #4]
 801f92c:	2a00      	cmp	r2, #0
 801f92e:	dc03      	bgt.n	801f938 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801f930:	9a03      	ldr	r2, [sp, #12]
 801f932:	2a00      	cmp	r2, #0
 801f934:	f340 80cc 	ble.w	801fad0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801f938:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f93a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801f93e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f942:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f944:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801f948:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f94c:	2b00      	cmp	r3, #0
 801f94e:	dd0d      	ble.n	801f96c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f950:	1406      	asrs	r6, r0, #16
 801f952:	d405      	bmi.n	801f960 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801f954:	454e      	cmp	r6, r9
 801f956:	da03      	bge.n	801f960 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801f958:	1416      	asrs	r6, r2, #16
 801f95a:	d401      	bmi.n	801f960 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801f95c:	4546      	cmp	r6, r8
 801f95e:	db06      	blt.n	801f96e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f960:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801f962:	4460      	add	r0, ip
 801f964:	3b01      	subs	r3, #1
 801f966:	3402      	adds	r4, #2
 801f968:	4432      	add	r2, r6
 801f96a:	e7ef      	b.n	801f94c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801f96c:	d00f      	beq.n	801f98e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f96e:	1e5e      	subs	r6, r3, #1
 801f970:	fb0c 0e06 	mla	lr, ip, r6, r0
 801f974:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801f978:	d543      	bpl.n	801fa02 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801f97a:	4698      	mov	r8, r3
 801f97c:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801f980:	f1b8 0f00 	cmp.w	r8, #0
 801f984:	dc71      	bgt.n	801fa6a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801f986:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f98a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f98e:	9b01      	ldr	r3, [sp, #4]
 801f990:	2b00      	cmp	r3, #0
 801f992:	f340 809d 	ble.w	801fad0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801f996:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f99a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f99c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f9a0:	eeb0 6a62 	vmov.f32	s12, s5
 801f9a4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f9a8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f9ac:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f9b0:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f9b4:	eeb0 6a43 	vmov.f32	s12, s6
 801f9b8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f9bc:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801f9c0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f9c4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f9c8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f9cc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f9d0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f9d4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f9d8:	ee12 2a90 	vmov	r2, s5
 801f9dc:	eef0 2a47 	vmov.f32	s5, s14
 801f9e0:	fb92 fcf3 	sdiv	ip, r2, r3
 801f9e4:	ee13 2a10 	vmov	r2, s6
 801f9e8:	eeb0 3a67 	vmov.f32	s6, s15
 801f9ec:	fb92 f3f3 	sdiv	r3, r2, r3
 801f9f0:	9312      	str	r3, [sp, #72]	; 0x48
 801f9f2:	9b01      	ldr	r3, [sp, #4]
 801f9f4:	9a03      	ldr	r2, [sp, #12]
 801f9f6:	3b01      	subs	r3, #1
 801f9f8:	9301      	str	r3, [sp, #4]
 801f9fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f9fc:	bf08      	it	eq
 801f9fe:	4613      	moveq	r3, r2
 801fa00:	e793      	b.n	801f92a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801fa02:	45ce      	cmp	lr, r9
 801fa04:	dab9      	bge.n	801f97a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801fa06:	9912      	ldr	r1, [sp, #72]	; 0x48
 801fa08:	fb01 2606 	mla	r6, r1, r6, r2
 801fa0c:	1436      	asrs	r6, r6, #16
 801fa0e:	d4b4      	bmi.n	801f97a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801fa10:	4546      	cmp	r6, r8
 801fa12:	dab2      	bge.n	801f97a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801fa14:	4698      	mov	r8, r3
 801fa16:	46a2      	mov	sl, r4
 801fa18:	f1b8 0f00 	cmp.w	r8, #0
 801fa1c:	ddb3      	ble.n	801f986 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801fa1e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801fa22:	1416      	asrs	r6, r2, #16
 801fa24:	9902      	ldr	r1, [sp, #8]
 801fa26:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801fa2a:	f108 38ff 	add.w	r8, r8, #4294967295
 801fa2e:	4460      	add	r0, ip
 801fa30:	fb09 1606 	mla	r6, r9, r6, r1
 801fa34:	4928      	ldr	r1, [pc, #160]	; (801fad8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801fa36:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801fa3a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801fa3e:	eb07 0b0e 	add.w	fp, r7, lr
 801fa42:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801fa46:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801fa4a:	00f6      	lsls	r6, r6, #3
 801fa4c:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801fa50:	9912      	ldr	r1, [sp, #72]	; 0x48
 801fa52:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801fa56:	440a      	add	r2, r1
 801fa58:	ea49 0606 	orr.w	r6, r9, r6
 801fa5c:	f817 900e 	ldrb.w	r9, [r7, lr]
 801fa60:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801fa64:	f82a 6b02 	strh.w	r6, [sl], #2
 801fa68:	e7d6      	b.n	801fa18 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801fa6a:	ea5f 4920 	movs.w	r9, r0, asr #16
 801fa6e:	d429      	bmi.n	801fac4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801fa70:	68ae      	ldr	r6, [r5, #8]
 801fa72:	454e      	cmp	r6, r9
 801fa74:	dd26      	ble.n	801fac4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801fa76:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801fa7a:	d423      	bmi.n	801fac4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801fa7c:	68e9      	ldr	r1, [r5, #12]
 801fa7e:	4559      	cmp	r1, fp
 801fa80:	dd20      	ble.n	801fac4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801fa82:	fa0f fe86 	sxth.w	lr, r6
 801fa86:	9902      	ldr	r1, [sp, #8]
 801fa88:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801fa8c:	f06f 0101 	mvn.w	r1, #1
 801fa90:	f81e e009 	ldrb.w	lr, [lr, r9]
 801fa94:	fb01 f908 	mul.w	r9, r1, r8
 801fa98:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 801fa9c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801faa0:	eb07 060e 	add.w	r6, r7, lr
 801faa4:	f896 b002 	ldrb.w	fp, [r6, #2]
 801faa8:	7876      	ldrb	r6, [r6, #1]
 801faaa:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801faae:	00f6      	lsls	r6, r6, #3
 801fab0:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801fab4:	ea4b 0606 	orr.w	r6, fp, r6
 801fab8:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801fabc:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801fac0:	f82a 6009 	strh.w	r6, [sl, r9]
 801fac4:	9912      	ldr	r1, [sp, #72]	; 0x48
 801fac6:	4460      	add	r0, ip
 801fac8:	f108 38ff 	add.w	r8, r8, #4294967295
 801facc:	440a      	add	r2, r1
 801face:	e757      	b.n	801f980 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801fad0:	b005      	add	sp, #20
 801fad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fad6:	bf00      	nop
 801fad8:	fffff800 	.word	0xfffff800

0801fadc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fadc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fae0:	b087      	sub	sp, #28
 801fae2:	468b      	mov	fp, r1
 801fae4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fae8:	9815      	ldr	r0, [sp, #84]	; 0x54
 801faea:	9204      	str	r2, [sp, #16]
 801faec:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801faf0:	6841      	ldr	r1, [r0, #4]
 801faf2:	9205      	str	r2, [sp, #20]
 801faf4:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801faf8:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801fafc:	fb01 2404 	mla	r4, r1, r4, r2
 801fb00:	6802      	ldr	r2, [r0, #0]
 801fb02:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801fb06:	f8dc 2000 	ldr.w	r2, [ip]
 801fb0a:	9201      	str	r2, [sp, #4]
 801fb0c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801fb10:	3204      	adds	r2, #4
 801fb12:	9202      	str	r2, [sp, #8]
 801fb14:	f1bb 0f00 	cmp.w	fp, #0
 801fb18:	dc03      	bgt.n	801fb22 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801fb1a:	9a04      	ldr	r2, [sp, #16]
 801fb1c:	2a00      	cmp	r2, #0
 801fb1e:	f340 8138 	ble.w	801fd92 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801fb22:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fb24:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801fb28:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801fb2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fb2e:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801fb32:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801fb36:	2b00      	cmp	r3, #0
 801fb38:	dd0e      	ble.n	801fb58 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801fb3a:	1402      	asrs	r2, r0, #16
 801fb3c:	d405      	bmi.n	801fb4a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801fb3e:	42ba      	cmp	r2, r7
 801fb40:	da03      	bge.n	801fb4a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801fb42:	140a      	asrs	r2, r1, #16
 801fb44:	d401      	bmi.n	801fb4a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801fb46:	42b2      	cmp	r2, r6
 801fb48:	db07      	blt.n	801fb5a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801fb4a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fb4c:	3b01      	subs	r3, #1
 801fb4e:	3402      	adds	r4, #2
 801fb50:	4410      	add	r0, r2
 801fb52:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fb54:	4411      	add	r1, r2
 801fb56:	e7ee      	b.n	801fb36 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801fb58:	d019      	beq.n	801fb8e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801fb5a:	1e5a      	subs	r2, r3, #1
 801fb5c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801fb5e:	fb05 0502 	mla	r5, r5, r2, r0
 801fb62:	142d      	asrs	r5, r5, #16
 801fb64:	d409      	bmi.n	801fb7a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801fb66:	42bd      	cmp	r5, r7
 801fb68:	da07      	bge.n	801fb7a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801fb6a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801fb6c:	fb05 1202 	mla	r2, r5, r2, r1
 801fb70:	1412      	asrs	r2, r2, #16
 801fb72:	d402      	bmi.n	801fb7a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801fb74:	42b2      	cmp	r2, r6
 801fb76:	f2c0 80ac 	blt.w	801fcd2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801fb7a:	f04f 0e00 	mov.w	lr, #0
 801fb7e:	eb03 020e 	add.w	r2, r3, lr
 801fb82:	2a00      	cmp	r2, #0
 801fb84:	dc3e      	bgt.n	801fc04 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801fb86:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fb8a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801fb8e:	f1bb 0f00 	cmp.w	fp, #0
 801fb92:	f340 80fe 	ble.w	801fd92 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801fb96:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fb9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fb9c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fba0:	f1bb 0b01 	subs.w	fp, fp, #1
 801fba4:	eeb0 6a62 	vmov.f32	s12, s5
 801fba8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fbac:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fbb0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fbb4:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801fbb8:	eeb0 6a43 	vmov.f32	s12, s6
 801fbbc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fbc0:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801fbc4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fbc8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fbcc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fbd0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fbd4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fbd8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fbdc:	ee12 2a90 	vmov	r2, s5
 801fbe0:	eef0 2a47 	vmov.f32	s5, s14
 801fbe4:	fb92 f3f3 	sdiv	r3, r2, r3
 801fbe8:	ee13 2a10 	vmov	r2, s6
 801fbec:	9313      	str	r3, [sp, #76]	; 0x4c
 801fbee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fbf0:	eeb0 3a67 	vmov.f32	s6, s15
 801fbf4:	fb92 f3f3 	sdiv	r3, r2, r3
 801fbf8:	9a04      	ldr	r2, [sp, #16]
 801fbfa:	9314      	str	r3, [sp, #80]	; 0x50
 801fbfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fbfe:	bf08      	it	eq
 801fc00:	4613      	moveq	r3, r2
 801fc02:	e787      	b.n	801fb14 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801fc04:	1406      	asrs	r6, r0, #16
 801fc06:	d45d      	bmi.n	801fcc4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801fc08:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801fc0c:	42b5      	cmp	r5, r6
 801fc0e:	dd59      	ble.n	801fcc4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801fc10:	140f      	asrs	r7, r1, #16
 801fc12:	d457      	bmi.n	801fcc4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801fc14:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801fc18:	42ba      	cmp	r2, r7
 801fc1a:	dd53      	ble.n	801fcc4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801fc1c:	9a01      	ldr	r2, [sp, #4]
 801fc1e:	b22d      	sxth	r5, r5
 801fc20:	fb07 2505 	mla	r5, r7, r5, r2
 801fc24:	5daa      	ldrb	r2, [r5, r6]
 801fc26:	9d02      	ldr	r5, [sp, #8]
 801fc28:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801fc2c:	0e2e      	lsrs	r6, r5, #24
 801fc2e:	d049      	beq.n	801fcc4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801fc30:	f06f 0201 	mvn.w	r2, #1
 801fc34:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801fc38:	fb02 f20e 	mul.w	r2, r2, lr
 801fc3c:	f834 8002 	ldrh.w	r8, [r4, r2]
 801fc40:	9203      	str	r2, [sp, #12]
 801fc42:	9a05      	ldr	r2, [sp, #20]
 801fc44:	ea4f 2728 	mov.w	r7, r8, asr #8
 801fc48:	4356      	muls	r6, r2
 801fc4a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801fc4e:	1c72      	adds	r2, r6, #1
 801fc50:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801fc54:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801fc58:	b2ed      	uxtb	r5, r5
 801fc5a:	1212      	asrs	r2, r2, #8
 801fc5c:	fa1f f982 	uxth.w	r9, r2
 801fc60:	43d2      	mvns	r2, r2
 801fc62:	fb16 f609 	smulbb	r6, r6, r9
 801fc66:	b2d2      	uxtb	r2, r2
 801fc68:	fb15 f509 	smulbb	r5, r5, r9
 801fc6c:	fb07 6702 	mla	r7, r7, r2, r6
 801fc70:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801fc74:	fb1a fa09 	smulbb	sl, sl, r9
 801fc78:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801fc7c:	b2bf      	uxth	r7, r7
 801fc7e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801fc82:	fa5f f888 	uxtb.w	r8, r8
 801fc86:	fb06 a602 	mla	r6, r6, r2, sl
 801fc8a:	fb08 5502 	mla	r5, r8, r2, r5
 801fc8e:	1c7a      	adds	r2, r7, #1
 801fc90:	b2b6      	uxth	r6, r6
 801fc92:	b2ad      	uxth	r5, r5
 801fc94:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801fc98:	9a03      	ldr	r2, [sp, #12]
 801fc9a:	f105 0a01 	add.w	sl, r5, #1
 801fc9e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801fca2:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801fca6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801fcaa:	ea4a 0707 	orr.w	r7, sl, r7
 801fcae:	f106 0a01 	add.w	sl, r6, #1
 801fcb2:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801fcb6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801fcba:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801fcbe:	ea47 070a 	orr.w	r7, r7, sl
 801fcc2:	52a7      	strh	r7, [r4, r2]
 801fcc4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fcc6:	f10e 3eff 	add.w	lr, lr, #4294967295
 801fcca:	4410      	add	r0, r2
 801fccc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fcce:	4411      	add	r1, r2
 801fcd0:	e755      	b.n	801fb7e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801fcd2:	f04f 0800 	mov.w	r8, #0
 801fcd6:	eba3 0208 	sub.w	r2, r3, r8
 801fcda:	2a00      	cmp	r2, #0
 801fcdc:	f77f af53 	ble.w	801fb86 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801fce0:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801fce4:	140a      	asrs	r2, r1, #16
 801fce6:	9f01      	ldr	r7, [sp, #4]
 801fce8:	1405      	asrs	r5, r0, #16
 801fcea:	fb06 7202 	mla	r2, r6, r2, r7
 801fcee:	5d52      	ldrb	r2, [r2, r5]
 801fcf0:	9d02      	ldr	r5, [sp, #8]
 801fcf2:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801fcf6:	0e2e      	lsrs	r6, r5, #24
 801fcf8:	d044      	beq.n	801fd84 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801fcfa:	9a05      	ldr	r2, [sp, #20]
 801fcfc:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801fd00:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801fd04:	4356      	muls	r6, r2
 801fd06:	ea4f 272e 	mov.w	r7, lr, asr #8
 801fd0a:	1c72      	adds	r2, r6, #1
 801fd0c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801fd10:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801fd14:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801fd18:	b2ed      	uxtb	r5, r5
 801fd1a:	1212      	asrs	r2, r2, #8
 801fd1c:	fa1f f982 	uxth.w	r9, r2
 801fd20:	43d2      	mvns	r2, r2
 801fd22:	fb16 f609 	smulbb	r6, r6, r9
 801fd26:	b2d2      	uxtb	r2, r2
 801fd28:	fb15 f509 	smulbb	r5, r5, r9
 801fd2c:	fb07 6702 	mla	r7, r7, r2, r6
 801fd30:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801fd34:	fb1a fa09 	smulbb	sl, sl, r9
 801fd38:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801fd3c:	b2bf      	uxth	r7, r7
 801fd3e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801fd42:	fa5f fe8e 	uxtb.w	lr, lr
 801fd46:	fb06 a602 	mla	r6, r6, r2, sl
 801fd4a:	fb0e 5502 	mla	r5, lr, r2, r5
 801fd4e:	1c7a      	adds	r2, r7, #1
 801fd50:	b2b6      	uxth	r6, r6
 801fd52:	b2ad      	uxth	r5, r5
 801fd54:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801fd58:	f105 0a01 	add.w	sl, r5, #1
 801fd5c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801fd60:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801fd64:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801fd68:	ea4a 0707 	orr.w	r7, sl, r7
 801fd6c:	f106 0a01 	add.w	sl, r6, #1
 801fd70:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801fd74:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801fd78:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801fd7c:	ea47 070a 	orr.w	r7, r7, sl
 801fd80:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801fd84:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fd86:	f108 0801 	add.w	r8, r8, #1
 801fd8a:	4410      	add	r0, r2
 801fd8c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fd8e:	4411      	add	r1, r2
 801fd90:	e7a1      	b.n	801fcd6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801fd92:	b007      	add	sp, #28
 801fd94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fd98 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fd98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd9c:	b085      	sub	sp, #20
 801fd9e:	468b      	mov	fp, r1
 801fda0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fda4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801fda6:	9203      	str	r2, [sp, #12]
 801fda8:	6841      	ldr	r1, [r0, #4]
 801fdaa:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801fdae:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801fdb2:	fb01 2404 	mla	r4, r1, r4, r2
 801fdb6:	6802      	ldr	r2, [r0, #0]
 801fdb8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801fdbc:	f8de 2000 	ldr.w	r2, [lr]
 801fdc0:	9200      	str	r2, [sp, #0]
 801fdc2:	f8de 2004 	ldr.w	r2, [lr, #4]
 801fdc6:	3204      	adds	r2, #4
 801fdc8:	9201      	str	r2, [sp, #4]
 801fdca:	f1bb 0f00 	cmp.w	fp, #0
 801fdce:	dc03      	bgt.n	801fdd8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801fdd0:	9a03      	ldr	r2, [sp, #12]
 801fdd2:	2a00      	cmp	r2, #0
 801fdd4:	f340 8153 	ble.w	802007e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801fdd8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fdda:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801fdde:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801fde2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fde4:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801fde8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801fdec:	2b00      	cmp	r3, #0
 801fdee:	dd0e      	ble.n	801fe0e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801fdf0:	1408      	asrs	r0, r1, #16
 801fdf2:	d405      	bmi.n	801fe00 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801fdf4:	42b8      	cmp	r0, r7
 801fdf6:	da03      	bge.n	801fe00 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801fdf8:	1410      	asrs	r0, r2, #16
 801fdfa:	d401      	bmi.n	801fe00 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801fdfc:	42b0      	cmp	r0, r6
 801fdfe:	db07      	blt.n	801fe10 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801fe00:	9811      	ldr	r0, [sp, #68]	; 0x44
 801fe02:	3b01      	subs	r3, #1
 801fe04:	3402      	adds	r4, #2
 801fe06:	4401      	add	r1, r0
 801fe08:	9812      	ldr	r0, [sp, #72]	; 0x48
 801fe0a:	4402      	add	r2, r0
 801fe0c:	e7ee      	b.n	801fdec <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801fe0e:	d017      	beq.n	801fe40 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801fe10:	1e58      	subs	r0, r3, #1
 801fe12:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801fe14:	fb05 1500 	mla	r5, r5, r0, r1
 801fe18:	142d      	asrs	r5, r5, #16
 801fe1a:	d409      	bmi.n	801fe30 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801fe1c:	42bd      	cmp	r5, r7
 801fe1e:	da07      	bge.n	801fe30 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801fe20:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801fe22:	fb05 2000 	mla	r0, r5, r0, r2
 801fe26:	1400      	asrs	r0, r0, #16
 801fe28:	d402      	bmi.n	801fe30 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801fe2a:	42b0      	cmp	r0, r6
 801fe2c:	f2c0 80bc 	blt.w	801ffa8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801fe30:	2600      	movs	r6, #0
 801fe32:	1998      	adds	r0, r3, r6
 801fe34:	2800      	cmp	r0, #0
 801fe36:	dc3e      	bgt.n	801feb6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801fe38:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fe3c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801fe40:	f1bb 0f00 	cmp.w	fp, #0
 801fe44:	f340 811b 	ble.w	802007e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801fe48:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fe4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fe4e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fe52:	f1bb 0b01 	subs.w	fp, fp, #1
 801fe56:	eeb0 6a62 	vmov.f32	s12, s5
 801fe5a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fe5e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fe62:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fe66:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801fe6a:	eeb0 6a43 	vmov.f32	s12, s6
 801fe6e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fe72:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801fe76:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fe7a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fe7e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fe82:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fe86:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fe8a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fe8e:	ee12 2a90 	vmov	r2, s5
 801fe92:	eef0 2a47 	vmov.f32	s5, s14
 801fe96:	fb92 f3f3 	sdiv	r3, r2, r3
 801fe9a:	ee13 2a10 	vmov	r2, s6
 801fe9e:	9311      	str	r3, [sp, #68]	; 0x44
 801fea0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fea2:	eeb0 3a67 	vmov.f32	s6, s15
 801fea6:	fb92 f3f3 	sdiv	r3, r2, r3
 801feaa:	9a03      	ldr	r2, [sp, #12]
 801feac:	9312      	str	r3, [sp, #72]	; 0x48
 801feae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801feb0:	bf08      	it	eq
 801feb2:	4613      	moveq	r3, r2
 801feb4:	e789      	b.n	801fdca <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801feb6:	140f      	asrs	r7, r1, #16
 801feb8:	d426      	bmi.n	801ff08 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801feba:	f8de 5008 	ldr.w	r5, [lr, #8]
 801febe:	42bd      	cmp	r5, r7
 801fec0:	dd22      	ble.n	801ff08 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801fec2:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801fec6:	d41f      	bmi.n	801ff08 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801fec8:	f8de 000c 	ldr.w	r0, [lr, #12]
 801fecc:	4560      	cmp	r0, ip
 801fece:	dd1b      	ble.n	801ff08 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801fed0:	9800      	ldr	r0, [sp, #0]
 801fed2:	b22d      	sxth	r5, r5
 801fed4:	fb0c 0505 	mla	r5, ip, r5, r0
 801fed8:	5de8      	ldrb	r0, [r5, r7]
 801feda:	9d01      	ldr	r5, [sp, #4]
 801fedc:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801fee0:	0e07      	lsrs	r7, r0, #24
 801fee2:	2fff      	cmp	r7, #255	; 0xff
 801fee4:	d116      	bne.n	801ff14 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801fee6:	f06f 0501 	mvn.w	r5, #1
 801feea:	fb05 f706 	mul.w	r7, r5, r6
 801feee:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801fef2:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801fef6:	0945      	lsrs	r5, r0, #5
 801fef8:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801fefc:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801ff00:	ea4c 0505 	orr.w	r5, ip, r5
 801ff04:	4305      	orrs	r5, r0
 801ff06:	53e5      	strh	r5, [r4, r7]
 801ff08:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ff0a:	3e01      	subs	r6, #1
 801ff0c:	4401      	add	r1, r0
 801ff0e:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ff10:	4402      	add	r2, r0
 801ff12:	e78e      	b.n	801fe32 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801ff14:	b2fd      	uxtb	r5, r7
 801ff16:	2f00      	cmp	r7, #0
 801ff18:	d0f6      	beq.n	801ff08 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ff1a:	f06f 0701 	mvn.w	r7, #1
 801ff1e:	fa1f f985 	uxth.w	r9, r5
 801ff22:	43ed      	mvns	r5, r5
 801ff24:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801ff28:	4377      	muls	r7, r6
 801ff2a:	fb1a fa09 	smulbb	sl, sl, r9
 801ff2e:	b2ed      	uxtb	r5, r5
 801ff30:	f834 8007 	ldrh.w	r8, [r4, r7]
 801ff34:	9702      	str	r7, [sp, #8]
 801ff36:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801ff3a:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801ff3e:	fb17 f709 	smulbb	r7, r7, r9
 801ff42:	b2c0      	uxtb	r0, r0
 801ff44:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ff48:	fb10 f009 	smulbb	r0, r0, r9
 801ff4c:	fb0c 7c05 	mla	ip, ip, r5, r7
 801ff50:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801ff54:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801ff58:	fa1f fc8c 	uxth.w	ip, ip
 801ff5c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ff60:	fa5f f888 	uxtb.w	r8, r8
 801ff64:	fb07 a705 	mla	r7, r7, r5, sl
 801ff68:	fb08 0005 	mla	r0, r8, r5, r0
 801ff6c:	f10c 0501 	add.w	r5, ip, #1
 801ff70:	b2bf      	uxth	r7, r7
 801ff72:	b280      	uxth	r0, r0
 801ff74:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801ff78:	f100 0a01 	add.w	sl, r0, #1
 801ff7c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ff80:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801ff84:	9802      	ldr	r0, [sp, #8]
 801ff86:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ff8a:	ea4a 0c0c 	orr.w	ip, sl, ip
 801ff8e:	f107 0a01 	add.w	sl, r7, #1
 801ff92:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801ff96:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ff9a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ff9e:	ea4c 0c0a 	orr.w	ip, ip, sl
 801ffa2:	f824 c000 	strh.w	ip, [r4, r0]
 801ffa6:	e7af      	b.n	801ff08 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ffa8:	f04f 0800 	mov.w	r8, #0
 801ffac:	eba3 0008 	sub.w	r0, r3, r8
 801ffb0:	2800      	cmp	r0, #0
 801ffb2:	f77f af41 	ble.w	801fe38 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801ffb6:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801ffba:	1410      	asrs	r0, r2, #16
 801ffbc:	9f00      	ldr	r7, [sp, #0]
 801ffbe:	140d      	asrs	r5, r1, #16
 801ffc0:	fb06 7000 	mla	r0, r6, r0, r7
 801ffc4:	5d40      	ldrb	r0, [r0, r5]
 801ffc6:	9d01      	ldr	r5, [sp, #4]
 801ffc8:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801ffcc:	0e2e      	lsrs	r6, r5, #24
 801ffce:	2eff      	cmp	r6, #255	; 0xff
 801ffd0:	d112      	bne.n	801fff8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801ffd2:	482c      	ldr	r0, [pc, #176]	; (8020084 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801ffd4:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801ffd8:	0968      	lsrs	r0, r5, #5
 801ffda:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801ffde:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ffe2:	4330      	orrs	r0, r6
 801ffe4:	4328      	orrs	r0, r5
 801ffe6:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 801ffea:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ffec:	f108 0801 	add.w	r8, r8, #1
 801fff0:	4401      	add	r1, r0
 801fff2:	9812      	ldr	r0, [sp, #72]	; 0x48
 801fff4:	4402      	add	r2, r0
 801fff6:	e7d9      	b.n	801ffac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801fff8:	b2f0      	uxtb	r0, r6
 801fffa:	2e00      	cmp	r6, #0
 801fffc:	d0f5      	beq.n	801ffea <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801fffe:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 8020002:	fa1f f980 	uxth.w	r9, r0
 8020006:	f3c5 4607 	ubfx	r6, r5, #16, #8
 802000a:	43c0      	mvns	r0, r0
 802000c:	ea4f 272c 	mov.w	r7, ip, asr #8
 8020010:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8020014:	fb16 f609 	smulbb	r6, r6, r9
 8020018:	b2c0      	uxtb	r0, r0
 802001a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 802001e:	b2ed      	uxtb	r5, r5
 8020020:	fb1a fa09 	smulbb	sl, sl, r9
 8020024:	fb07 6700 	mla	r7, r7, r0, r6
 8020028:	ea4f 06ec 	mov.w	r6, ip, asr #3
 802002c:	fb15 f509 	smulbb	r5, r5, r9
 8020030:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8020034:	b2bf      	uxth	r7, r7
 8020036:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802003a:	fa5f fc8c 	uxtb.w	ip, ip
 802003e:	fb06 a600 	mla	r6, r6, r0, sl
 8020042:	fb0c 5500 	mla	r5, ip, r0, r5
 8020046:	1c78      	adds	r0, r7, #1
 8020048:	b2b6      	uxth	r6, r6
 802004a:	b2ad      	uxth	r5, r5
 802004c:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8020050:	f105 0a01 	add.w	sl, r5, #1
 8020054:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8020058:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 802005c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020060:	ea4a 0707 	orr.w	r7, sl, r7
 8020064:	f106 0a01 	add.w	sl, r6, #1
 8020068:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 802006c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020070:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020074:	ea47 070a 	orr.w	r7, r7, sl
 8020078:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 802007c:	e7b5      	b.n	801ffea <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 802007e:	b005      	add	sp, #20
 8020080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020084:	fffff800 	.word	0xfffff800

08020088 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802008c:	b087      	sub	sp, #28
 802008e:	468b      	mov	fp, r1
 8020090:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020094:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020096:	9204      	str	r2, [sp, #16]
 8020098:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 802009c:	6861      	ldr	r1, [r4, #4]
 802009e:	9205      	str	r2, [sp, #20]
 80200a0:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 80200a4:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 80200a8:	fb01 2000 	mla	r0, r1, r0, r2
 80200ac:	6822      	ldr	r2, [r4, #0]
 80200ae:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 80200b2:	f8de 2000 	ldr.w	r2, [lr]
 80200b6:	9201      	str	r2, [sp, #4]
 80200b8:	f8de 2004 	ldr.w	r2, [lr, #4]
 80200bc:	9202      	str	r2, [sp, #8]
 80200be:	f1bb 0f00 	cmp.w	fp, #0
 80200c2:	dc03      	bgt.n	80200cc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 80200c4:	9a04      	ldr	r2, [sp, #16]
 80200c6:	2a00      	cmp	r2, #0
 80200c8:	f340 8142 	ble.w	8020350 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 80200cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80200ce:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 80200d2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80200d6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80200d8:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 80200dc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80200e0:	2b00      	cmp	r3, #0
 80200e2:	dd0e      	ble.n	8020102 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80200e4:	140c      	asrs	r4, r1, #16
 80200e6:	d405      	bmi.n	80200f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80200e8:	42bc      	cmp	r4, r7
 80200ea:	da03      	bge.n	80200f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80200ec:	1414      	asrs	r4, r2, #16
 80200ee:	d401      	bmi.n	80200f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80200f0:	42b4      	cmp	r4, r6
 80200f2:	db07      	blt.n	8020104 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80200f4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80200f6:	3b01      	subs	r3, #1
 80200f8:	3002      	adds	r0, #2
 80200fa:	4421      	add	r1, r4
 80200fc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80200fe:	4422      	add	r2, r4
 8020100:	e7ee      	b.n	80200e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8020102:	d019      	beq.n	8020138 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8020104:	1e5c      	subs	r4, r3, #1
 8020106:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8020108:	fb05 1504 	mla	r5, r5, r4, r1
 802010c:	142d      	asrs	r5, r5, #16
 802010e:	d409      	bmi.n	8020124 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8020110:	42bd      	cmp	r5, r7
 8020112:	da07      	bge.n	8020124 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8020114:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8020116:	fb05 2404 	mla	r4, r5, r4, r2
 802011a:	1424      	asrs	r4, r4, #16
 802011c:	d402      	bmi.n	8020124 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802011e:	42b4      	cmp	r4, r6
 8020120:	f2c0 80b1 	blt.w	8020286 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8020124:	f04f 0800 	mov.w	r8, #0
 8020128:	eb03 0408 	add.w	r4, r3, r8
 802012c:	2c00      	cmp	r4, #0
 802012e:	dc3e      	bgt.n	80201ae <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8020130:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020134:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020138:	f1bb 0f00 	cmp.w	fp, #0
 802013c:	f340 8108 	ble.w	8020350 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8020140:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020144:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020146:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802014a:	f1bb 0b01 	subs.w	fp, fp, #1
 802014e:	eeb0 6a62 	vmov.f32	s12, s5
 8020152:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020156:	ee31 1a05 	vadd.f32	s2, s2, s10
 802015a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802015e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8020162:	eeb0 6a43 	vmov.f32	s12, s6
 8020166:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802016a:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 802016e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020172:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020176:	ee77 2a62 	vsub.f32	s5, s14, s5
 802017a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802017e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020182:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020186:	ee12 2a90 	vmov	r2, s5
 802018a:	eef0 2a47 	vmov.f32	s5, s14
 802018e:	fb92 f3f3 	sdiv	r3, r2, r3
 8020192:	ee13 2a10 	vmov	r2, s6
 8020196:	9313      	str	r3, [sp, #76]	; 0x4c
 8020198:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802019a:	eeb0 3a67 	vmov.f32	s6, s15
 802019e:	fb92 f3f3 	sdiv	r3, r2, r3
 80201a2:	9a04      	ldr	r2, [sp, #16]
 80201a4:	9314      	str	r3, [sp, #80]	; 0x50
 80201a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80201a8:	bf08      	it	eq
 80201aa:	4613      	moveq	r3, r2
 80201ac:	e787      	b.n	80200be <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 80201ae:	140e      	asrs	r6, r1, #16
 80201b0:	d462      	bmi.n	8020278 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 80201b2:	f8de 5008 	ldr.w	r5, [lr, #8]
 80201b6:	42b5      	cmp	r5, r6
 80201b8:	dd5e      	ble.n	8020278 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 80201ba:	1417      	asrs	r7, r2, #16
 80201bc:	d45c      	bmi.n	8020278 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 80201be:	f8de 400c 	ldr.w	r4, [lr, #12]
 80201c2:	42bc      	cmp	r4, r7
 80201c4:	dd58      	ble.n	8020278 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 80201c6:	b22d      	sxth	r5, r5
 80201c8:	9c02      	ldr	r4, [sp, #8]
 80201ca:	fb07 6505 	mla	r5, r7, r5, r6
 80201ce:	5d66      	ldrb	r6, [r4, r5]
 80201d0:	2e00      	cmp	r6, #0
 80201d2:	d051      	beq.n	8020278 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 80201d4:	9c01      	ldr	r4, [sp, #4]
 80201d6:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 80201da:	f06f 0401 	mvn.w	r4, #1
 80201de:	fb04 f408 	mul.w	r4, r4, r8
 80201e2:	ea4f 2c29 	mov.w	ip, r9, asr #8
 80201e6:	5b05      	ldrh	r5, [r0, r4]
 80201e8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80201ec:	9403      	str	r4, [sp, #12]
 80201ee:	9c05      	ldr	r4, [sp, #20]
 80201f0:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80201f4:	4366      	muls	r6, r4
 80201f6:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 80201fa:	1c74      	adds	r4, r6, #1
 80201fc:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8020200:	122e      	asrs	r6, r5, #8
 8020202:	1224      	asrs	r4, r4, #8
 8020204:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8020208:	00ed      	lsls	r5, r5, #3
 802020a:	b2a7      	uxth	r7, r4
 802020c:	43e4      	mvns	r4, r4
 802020e:	b2ed      	uxtb	r5, r5
 8020210:	b2e4      	uxtb	r4, r4
 8020212:	fb16 f604 	smulbb	r6, r6, r4
 8020216:	fb15 f504 	smulbb	r5, r5, r4
 802021a:	fb0c 6c07 	mla	ip, ip, r7, r6
 802021e:	ea4f 06e9 	mov.w	r6, r9, asr #3
 8020222:	fb1a fa04 	smulbb	sl, sl, r4
 8020226:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 802022a:	fa1f fc8c 	uxth.w	ip, ip
 802022e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020232:	fa5f f989 	uxtb.w	r9, r9
 8020236:	fb06 a607 	mla	r6, r6, r7, sl
 802023a:	f10c 0401 	add.w	r4, ip, #1
 802023e:	fb09 5507 	mla	r5, r9, r7, r5
 8020242:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8020246:	9c03      	ldr	r4, [sp, #12]
 8020248:	b2ad      	uxth	r5, r5
 802024a:	b2b6      	uxth	r6, r6
 802024c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8020250:	f105 0a01 	add.w	sl, r5, #1
 8020254:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020258:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 802025c:	ea4a 0c0c 	orr.w	ip, sl, ip
 8020260:	f106 0a01 	add.w	sl, r6, #1
 8020264:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8020268:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 802026c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020270:	ea4c 0c0a 	orr.w	ip, ip, sl
 8020274:	f820 c004 	strh.w	ip, [r0, r4]
 8020278:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802027a:	f108 38ff 	add.w	r8, r8, #4294967295
 802027e:	4421      	add	r1, r4
 8020280:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020282:	4422      	add	r2, r4
 8020284:	e750      	b.n	8020128 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020286:	f04f 0900 	mov.w	r9, #0
 802028a:	eba3 0409 	sub.w	r4, r3, r9
 802028e:	2c00      	cmp	r4, #0
 8020290:	f77f af4e 	ble.w	8020130 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8020294:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 8020298:	140d      	asrs	r5, r1, #16
 802029a:	1414      	asrs	r4, r2, #16
 802029c:	fb06 5404 	mla	r4, r6, r4, r5
 80202a0:	9d02      	ldr	r5, [sp, #8]
 80202a2:	5d2e      	ldrb	r6, [r5, r4]
 80202a4:	2e00      	cmp	r6, #0
 80202a6:	d04c      	beq.n	8020342 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 80202a8:	9d01      	ldr	r5, [sp, #4]
 80202aa:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 80202ae:	9c05      	ldr	r4, [sp, #20]
 80202b0:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 80202b4:	ea4f 2c28 	mov.w	ip, r8, asr #8
 80202b8:	4366      	muls	r6, r4
 80202ba:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80202be:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80202c2:	1c74      	adds	r4, r6, #1
 80202c4:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 80202c8:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 80202cc:	122e      	asrs	r6, r5, #8
 80202ce:	1224      	asrs	r4, r4, #8
 80202d0:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80202d4:	00ed      	lsls	r5, r5, #3
 80202d6:	b2a7      	uxth	r7, r4
 80202d8:	43e4      	mvns	r4, r4
 80202da:	b2ed      	uxtb	r5, r5
 80202dc:	b2e4      	uxtb	r4, r4
 80202de:	fb16 f604 	smulbb	r6, r6, r4
 80202e2:	fb15 f504 	smulbb	r5, r5, r4
 80202e6:	fb0c 6c07 	mla	ip, ip, r7, r6
 80202ea:	ea4f 06e8 	mov.w	r6, r8, asr #3
 80202ee:	fb1a fa04 	smulbb	sl, sl, r4
 80202f2:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80202f6:	fa1f fc8c 	uxth.w	ip, ip
 80202fa:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80202fe:	fa5f f888 	uxtb.w	r8, r8
 8020302:	fb06 a607 	mla	r6, r6, r7, sl
 8020306:	f10c 0401 	add.w	r4, ip, #1
 802030a:	fb08 5507 	mla	r5, r8, r7, r5
 802030e:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8020312:	b2ad      	uxth	r5, r5
 8020314:	b2b6      	uxth	r6, r6
 8020316:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 802031a:	f105 0a01 	add.w	sl, r5, #1
 802031e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020322:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020326:	ea4a 0c0c 	orr.w	ip, sl, ip
 802032a:	f106 0a01 	add.w	sl, r6, #1
 802032e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8020332:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020336:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 802033a:	ea4c 0c0a 	orr.w	ip, ip, sl
 802033e:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 8020342:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020344:	f109 0901 	add.w	r9, r9, #1
 8020348:	4421      	add	r1, r4
 802034a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802034c:	4422      	add	r2, r4
 802034e:	e79c      	b.n	802028a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 8020350:	b007      	add	sp, #28
 8020352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020356 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020356:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802035a:	b085      	sub	sp, #20
 802035c:	468b      	mov	fp, r1
 802035e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020362:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020364:	9203      	str	r2, [sp, #12]
 8020366:	6861      	ldr	r1, [r4, #4]
 8020368:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 802036c:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 8020370:	fb01 2000 	mla	r0, r1, r0, r2
 8020374:	6822      	ldr	r2, [r4, #0]
 8020376:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 802037a:	f8d8 2000 	ldr.w	r2, [r8]
 802037e:	9200      	str	r2, [sp, #0]
 8020380:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8020384:	9201      	str	r2, [sp, #4]
 8020386:	f1bb 0f00 	cmp.w	fp, #0
 802038a:	dc03      	bgt.n	8020394 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 802038c:	9a03      	ldr	r2, [sp, #12]
 802038e:	2a00      	cmp	r2, #0
 8020390:	f340 8146 	ble.w	8020620 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8020394:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020396:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 802039a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 802039e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80203a0:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 80203a4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80203a8:	2b00      	cmp	r3, #0
 80203aa:	dd0e      	ble.n	80203ca <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80203ac:	140c      	asrs	r4, r1, #16
 80203ae:	d405      	bmi.n	80203bc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80203b0:	42bc      	cmp	r4, r7
 80203b2:	da03      	bge.n	80203bc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80203b4:	1414      	asrs	r4, r2, #16
 80203b6:	d401      	bmi.n	80203bc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80203b8:	42b4      	cmp	r4, r6
 80203ba:	db07      	blt.n	80203cc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80203bc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80203be:	3b01      	subs	r3, #1
 80203c0:	3002      	adds	r0, #2
 80203c2:	4421      	add	r1, r4
 80203c4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80203c6:	4422      	add	r2, r4
 80203c8:	e7ee      	b.n	80203a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80203ca:	d017      	beq.n	80203fc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80203cc:	1e5c      	subs	r4, r3, #1
 80203ce:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80203d0:	fb05 1504 	mla	r5, r5, r4, r1
 80203d4:	142d      	asrs	r5, r5, #16
 80203d6:	d409      	bmi.n	80203ec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80203d8:	42bd      	cmp	r5, r7
 80203da:	da07      	bge.n	80203ec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80203dc:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80203de:	fb05 2404 	mla	r4, r5, r4, r2
 80203e2:	1424      	asrs	r4, r4, #16
 80203e4:	d402      	bmi.n	80203ec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80203e6:	42b4      	cmp	r4, r6
 80203e8:	f2c0 80b3 	blt.w	8020552 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 80203ec:	2600      	movs	r6, #0
 80203ee:	199c      	adds	r4, r3, r6
 80203f0:	2c00      	cmp	r4, #0
 80203f2:	dc3e      	bgt.n	8020472 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80203f4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80203f8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80203fc:	f1bb 0f00 	cmp.w	fp, #0
 8020400:	f340 810e 	ble.w	8020620 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8020404:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020408:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802040a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802040e:	f1bb 0b01 	subs.w	fp, fp, #1
 8020412:	eeb0 6a62 	vmov.f32	s12, s5
 8020416:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802041a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802041e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020422:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8020426:	eeb0 6a43 	vmov.f32	s12, s6
 802042a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802042e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8020432:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020436:	ee61 7a27 	vmul.f32	s15, s2, s15
 802043a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802043e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020442:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020446:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802044a:	ee12 2a90 	vmov	r2, s5
 802044e:	eef0 2a47 	vmov.f32	s5, s14
 8020452:	fb92 f3f3 	sdiv	r3, r2, r3
 8020456:	ee13 2a10 	vmov	r2, s6
 802045a:	9311      	str	r3, [sp, #68]	; 0x44
 802045c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802045e:	eeb0 3a67 	vmov.f32	s6, s15
 8020462:	fb92 f3f3 	sdiv	r3, r2, r3
 8020466:	9a03      	ldr	r2, [sp, #12]
 8020468:	9312      	str	r3, [sp, #72]	; 0x48
 802046a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802046c:	bf08      	it	eq
 802046e:	4613      	moveq	r3, r2
 8020470:	e789      	b.n	8020386 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8020472:	140f      	asrs	r7, r1, #16
 8020474:	d418      	bmi.n	80204a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8020476:	f8d8 5008 	ldr.w	r5, [r8, #8]
 802047a:	42bd      	cmp	r5, r7
 802047c:	dd14      	ble.n	80204a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802047e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8020482:	d411      	bmi.n	80204a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8020484:	f8d8 400c 	ldr.w	r4, [r8, #12]
 8020488:	4564      	cmp	r4, ip
 802048a:	dd0d      	ble.n	80204a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802048c:	b22d      	sxth	r5, r5
 802048e:	9c01      	ldr	r4, [sp, #4]
 8020490:	fb0c 7505 	mla	r5, ip, r5, r7
 8020494:	5d64      	ldrb	r4, [r4, r5]
 8020496:	2cff      	cmp	r4, #255	; 0xff
 8020498:	d10c      	bne.n	80204b4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 802049a:	9c00      	ldr	r4, [sp, #0]
 802049c:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 80204a0:	f06f 0401 	mvn.w	r4, #1
 80204a4:	4374      	muls	r4, r6
 80204a6:	5305      	strh	r5, [r0, r4]
 80204a8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80204aa:	3e01      	subs	r6, #1
 80204ac:	4421      	add	r1, r4
 80204ae:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80204b0:	4422      	add	r2, r4
 80204b2:	e79c      	b.n	80203ee <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80204b4:	2c00      	cmp	r4, #0
 80204b6:	d0f7      	beq.n	80204a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80204b8:	9f00      	ldr	r7, [sp, #0]
 80204ba:	fa1f fc84 	uxth.w	ip, r4
 80204be:	43e4      	mvns	r4, r4
 80204c0:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 80204c4:	f06f 0501 	mvn.w	r5, #1
 80204c8:	b2e4      	uxtb	r4, r4
 80204ca:	4375      	muls	r5, r6
 80204cc:	ea4f 2e29 	mov.w	lr, r9, asr #8
 80204d0:	9502      	str	r5, [sp, #8]
 80204d2:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 80204d6:	5b45      	ldrh	r5, [r0, r5]
 80204d8:	122f      	asrs	r7, r5, #8
 80204da:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80204de:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80204e2:	00ed      	lsls	r5, r5, #3
 80204e4:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 80204e8:	fb17 f704 	smulbb	r7, r7, r4
 80204ec:	b2ed      	uxtb	r5, r5
 80204ee:	fb1a fa04 	smulbb	sl, sl, r4
 80204f2:	fb0e 7e0c 	mla	lr, lr, ip, r7
 80204f6:	ea4f 07e9 	mov.w	r7, r9, asr #3
 80204fa:	fb15 f504 	smulbb	r5, r5, r4
 80204fe:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8020502:	fa1f fe8e 	uxth.w	lr, lr
 8020506:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802050a:	fa5f f989 	uxtb.w	r9, r9
 802050e:	fb07 a70c 	mla	r7, r7, ip, sl
 8020512:	f10e 0401 	add.w	r4, lr, #1
 8020516:	fb09 550c 	mla	r5, r9, ip, r5
 802051a:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 802051e:	9c02      	ldr	r4, [sp, #8]
 8020520:	b2ad      	uxth	r5, r5
 8020522:	b2bf      	uxth	r7, r7
 8020524:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8020528:	f105 0a01 	add.w	sl, r5, #1
 802052c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020530:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020534:	ea4a 0e0e 	orr.w	lr, sl, lr
 8020538:	f107 0a01 	add.w	sl, r7, #1
 802053c:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8020540:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020544:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020548:	ea4e 0e0a 	orr.w	lr, lr, sl
 802054c:	f820 e004 	strh.w	lr, [r0, r4]
 8020550:	e7aa      	b.n	80204a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8020552:	f04f 0900 	mov.w	r9, #0
 8020556:	eba3 0409 	sub.w	r4, r3, r9
 802055a:	2c00      	cmp	r4, #0
 802055c:	f77f af4a 	ble.w	80203f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8020560:	1414      	asrs	r4, r2, #16
 8020562:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 8020566:	140d      	asrs	r5, r1, #16
 8020568:	fb06 5504 	mla	r5, r6, r4, r5
 802056c:	9c01      	ldr	r4, [sp, #4]
 802056e:	5d64      	ldrb	r4, [r4, r5]
 8020570:	2cff      	cmp	r4, #255	; 0xff
 8020572:	d10b      	bne.n	802058c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8020574:	9c00      	ldr	r4, [sp, #0]
 8020576:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 802057a:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 802057e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020580:	f109 0901 	add.w	r9, r9, #1
 8020584:	4421      	add	r1, r4
 8020586:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020588:	4422      	add	r2, r4
 802058a:	e7e4      	b.n	8020556 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 802058c:	2c00      	cmp	r4, #0
 802058e:	d0f6      	beq.n	802057e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8020590:	9e00      	ldr	r6, [sp, #0]
 8020592:	b2a7      	uxth	r7, r4
 8020594:	43e4      	mvns	r4, r4
 8020596:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 802059a:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 802059e:	b2e4      	uxtb	r4, r4
 80205a0:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80205a4:	122e      	asrs	r6, r5, #8
 80205a6:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80205aa:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80205ae:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80205b2:	00ed      	lsls	r5, r5, #3
 80205b4:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 80205b8:	fb16 f604 	smulbb	r6, r6, r4
 80205bc:	b2ed      	uxtb	r5, r5
 80205be:	fb1a fa04 	smulbb	sl, sl, r4
 80205c2:	fb0c 6c07 	mla	ip, ip, r7, r6
 80205c6:	ea4f 06ee 	mov.w	r6, lr, asr #3
 80205ca:	fb15 f504 	smulbb	r5, r5, r4
 80205ce:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80205d2:	fa1f fc8c 	uxth.w	ip, ip
 80205d6:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80205da:	fa5f fe8e 	uxtb.w	lr, lr
 80205de:	fb06 a607 	mla	r6, r6, r7, sl
 80205e2:	f10c 0401 	add.w	r4, ip, #1
 80205e6:	fb0e 5507 	mla	r5, lr, r7, r5
 80205ea:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 80205ee:	b2ad      	uxth	r5, r5
 80205f0:	b2b6      	uxth	r6, r6
 80205f2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80205f6:	f105 0a01 	add.w	sl, r5, #1
 80205fa:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80205fe:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020602:	ea4a 0c0c 	orr.w	ip, sl, ip
 8020606:	f106 0a01 	add.w	sl, r6, #1
 802060a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 802060e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020612:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020616:	ea4c 0c0a 	orr.w	ip, ip, sl
 802061a:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 802061e:	e7ae      	b.n	802057e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8020620:	b005      	add	sp, #20
 8020622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020626 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020626:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802062a:	b085      	sub	sp, #20
 802062c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802062e:	9203      	str	r2, [sp, #12]
 8020630:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8020634:	9100      	str	r1, [sp, #0]
 8020636:	9201      	str	r2, [sp, #4]
 8020638:	6841      	ldr	r1, [r0, #4]
 802063a:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 802063e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8020642:	fb01 2404 	mla	r4, r1, r4, r2
 8020646:	6802      	ldr	r2, [r0, #0]
 8020648:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 802064c:	f8de 2000 	ldr.w	r2, [lr]
 8020650:	9202      	str	r2, [sp, #8]
 8020652:	9a01      	ldr	r2, [sp, #4]
 8020654:	43d6      	mvns	r6, r2
 8020656:	b2f6      	uxtb	r6, r6
 8020658:	9a00      	ldr	r2, [sp, #0]
 802065a:	2a00      	cmp	r2, #0
 802065c:	dc03      	bgt.n	8020666 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 802065e:	9a03      	ldr	r2, [sp, #12]
 8020660:	2a00      	cmp	r2, #0
 8020662:	f340 8124 	ble.w	80208ae <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8020666:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020668:	f9be c008 	ldrsh.w	ip, [lr, #8]
 802066c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8020670:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020672:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 8020676:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 802067a:	2b00      	cmp	r3, #0
 802067c:	dd0e      	ble.n	802069c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802067e:	1408      	asrs	r0, r1, #16
 8020680:	d405      	bmi.n	802068e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020682:	4560      	cmp	r0, ip
 8020684:	da03      	bge.n	802068e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020686:	1410      	asrs	r0, r2, #16
 8020688:	d401      	bmi.n	802068e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802068a:	42b8      	cmp	r0, r7
 802068c:	db07      	blt.n	802069e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802068e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020690:	3b01      	subs	r3, #1
 8020692:	3402      	adds	r4, #2
 8020694:	4401      	add	r1, r0
 8020696:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020698:	4402      	add	r2, r0
 802069a:	e7ee      	b.n	802067a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 802069c:	d06e      	beq.n	802077c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 802069e:	1e58      	subs	r0, r3, #1
 80206a0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80206a2:	fb05 1500 	mla	r5, r5, r0, r1
 80206a6:	142d      	asrs	r5, r5, #16
 80206a8:	d45c      	bmi.n	8020764 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80206aa:	4565      	cmp	r5, ip
 80206ac:	da5a      	bge.n	8020764 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80206ae:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80206b0:	fb05 2000 	mla	r0, r5, r0, r2
 80206b4:	1400      	asrs	r0, r0, #16
 80206b6:	d455      	bmi.n	8020764 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80206b8:	42b8      	cmp	r0, r7
 80206ba:	da53      	bge.n	8020764 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80206bc:	4699      	mov	r9, r3
 80206be:	46a2      	mov	sl, r4
 80206c0:	f8bd b004 	ldrh.w	fp, [sp, #4]
 80206c4:	f1b9 0f00 	cmp.w	r9, #0
 80206c8:	dd54      	ble.n	8020774 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80206ca:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 80206ce:	140d      	asrs	r5, r1, #16
 80206d0:	1410      	asrs	r0, r2, #16
 80206d2:	f109 39ff 	add.w	r9, r9, #4294967295
 80206d6:	fb07 5000 	mla	r0, r7, r0, r5
 80206da:	9d02      	ldr	r5, [sp, #8]
 80206dc:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 80206e0:	f8ba 5000 	ldrh.w	r5, [sl]
 80206e4:	ea4f 2c20 	mov.w	ip, r0, asr #8
 80206e8:	122f      	asrs	r7, r5, #8
 80206ea:	ea4f 08e5 	mov.w	r8, r5, asr #3
 80206ee:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80206f2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80206f6:	00ed      	lsls	r5, r5, #3
 80206f8:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 80206fc:	fb17 f706 	smulbb	r7, r7, r6
 8020700:	b2ed      	uxtb	r5, r5
 8020702:	fb18 f806 	smulbb	r8, r8, r6
 8020706:	fb0c 7c0b 	mla	ip, ip, fp, r7
 802070a:	10c7      	asrs	r7, r0, #3
 802070c:	fb15 f506 	smulbb	r5, r5, r6
 8020710:	00c0      	lsls	r0, r0, #3
 8020712:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8020716:	fa1f fc8c 	uxth.w	ip, ip
 802071a:	b2c0      	uxtb	r0, r0
 802071c:	fb07 870b 	mla	r7, r7, fp, r8
 8020720:	fb00 500b 	mla	r0, r0, fp, r5
 8020724:	f10c 0501 	add.w	r5, ip, #1
 8020728:	b2bf      	uxth	r7, r7
 802072a:	b280      	uxth	r0, r0
 802072c:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8020730:	f107 0801 	add.w	r8, r7, #1
 8020734:	1c45      	adds	r5, r0, #1
 8020736:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 802073a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 802073e:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8020742:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020744:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8020748:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 802074c:	4401      	add	r1, r0
 802074e:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8020752:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020754:	ea45 0c0c 	orr.w	ip, r5, ip
 8020758:	4402      	add	r2, r0
 802075a:	ea4c 0c08 	orr.w	ip, ip, r8
 802075e:	f82a cb02 	strh.w	ip, [sl], #2
 8020762:	e7af      	b.n	80206c4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8020764:	f04f 0800 	mov.w	r8, #0
 8020768:	f8bd a004 	ldrh.w	sl, [sp, #4]
 802076c:	eb03 0008 	add.w	r0, r3, r8
 8020770:	2800      	cmp	r0, #0
 8020772:	dc41      	bgt.n	80207f8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8020774:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020778:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802077c:	9b00      	ldr	r3, [sp, #0]
 802077e:	2b00      	cmp	r3, #0
 8020780:	f340 8095 	ble.w	80208ae <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8020784:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020788:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802078a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802078e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020792:	eef0 6a62 	vmov.f32	s13, s5
 8020796:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802079a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802079e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80207a2:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 80207a6:	eef0 6a43 	vmov.f32	s13, s6
 80207aa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80207ae:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 80207b2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80207b6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80207ba:	ee77 2a62 	vsub.f32	s5, s14, s5
 80207be:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80207c2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80207c6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80207ca:	ee12 2a90 	vmov	r2, s5
 80207ce:	eef0 2a47 	vmov.f32	s5, s14
 80207d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80207d6:	ee13 2a10 	vmov	r2, s6
 80207da:	9311      	str	r3, [sp, #68]	; 0x44
 80207dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80207de:	eeb0 3a67 	vmov.f32	s6, s15
 80207e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80207e6:	9312      	str	r3, [sp, #72]	; 0x48
 80207e8:	9b00      	ldr	r3, [sp, #0]
 80207ea:	9a03      	ldr	r2, [sp, #12]
 80207ec:	3b01      	subs	r3, #1
 80207ee:	9300      	str	r3, [sp, #0]
 80207f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80207f2:	bf08      	it	eq
 80207f4:	4613      	moveq	r3, r2
 80207f6:	e72f      	b.n	8020658 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 80207f8:	140f      	asrs	r7, r1, #16
 80207fa:	d451      	bmi.n	80208a0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80207fc:	f8de 5008 	ldr.w	r5, [lr, #8]
 8020800:	42bd      	cmp	r5, r7
 8020802:	dd4d      	ble.n	80208a0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8020804:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8020808:	d44a      	bmi.n	80208a0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 802080a:	f8de 000c 	ldr.w	r0, [lr, #12]
 802080e:	4560      	cmp	r0, ip
 8020810:	dd46      	ble.n	80208a0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8020812:	b22d      	sxth	r5, r5
 8020814:	9802      	ldr	r0, [sp, #8]
 8020816:	fb0c 7505 	mla	r5, ip, r5, r7
 802081a:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 802081e:	f06f 0501 	mvn.w	r5, #1
 8020822:	fb05 fb08 	mul.w	fp, r5, r8
 8020826:	ea4f 2c20 	mov.w	ip, r0, asr #8
 802082a:	f834 500b 	ldrh.w	r5, [r4, fp]
 802082e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020832:	122f      	asrs	r7, r5, #8
 8020834:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8020838:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 802083c:	00ed      	lsls	r5, r5, #3
 802083e:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8020842:	fb17 f706 	smulbb	r7, r7, r6
 8020846:	b2ed      	uxtb	r5, r5
 8020848:	fb19 f906 	smulbb	r9, r9, r6
 802084c:	fb0c 7c0a 	mla	ip, ip, sl, r7
 8020850:	10c7      	asrs	r7, r0, #3
 8020852:	fb15 f506 	smulbb	r5, r5, r6
 8020856:	00c0      	lsls	r0, r0, #3
 8020858:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802085c:	fa1f fc8c 	uxth.w	ip, ip
 8020860:	b2c0      	uxtb	r0, r0
 8020862:	fb07 970a 	mla	r7, r7, sl, r9
 8020866:	fb00 500a 	mla	r0, r0, sl, r5
 802086a:	f10c 0501 	add.w	r5, ip, #1
 802086e:	b2bf      	uxth	r7, r7
 8020870:	b280      	uxth	r0, r0
 8020872:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8020876:	f107 0901 	add.w	r9, r7, #1
 802087a:	1c45      	adds	r5, r0, #1
 802087c:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8020880:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8020884:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8020888:	ea4f 1959 	mov.w	r9, r9, lsr #5
 802088c:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8020890:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8020894:	ea45 0c0c 	orr.w	ip, r5, ip
 8020898:	ea4c 0c09 	orr.w	ip, ip, r9
 802089c:	f824 c00b 	strh.w	ip, [r4, fp]
 80208a0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80208a2:	f108 38ff 	add.w	r8, r8, #4294967295
 80208a6:	4401      	add	r1, r0
 80208a8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80208aa:	4402      	add	r2, r0
 80208ac:	e75e      	b.n	802076c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80208ae:	b005      	add	sp, #20
 80208b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080208b4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80208b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80208b8:	b085      	sub	sp, #20
 80208ba:	4693      	mov	fp, r2
 80208bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80208c0:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80208c2:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80208c4:	6870      	ldr	r0, [r6, #4]
 80208c6:	9101      	str	r1, [sp, #4]
 80208c8:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80208cc:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 80208d0:	fb00 2404 	mla	r4, r0, r4, r2
 80208d4:	6832      	ldr	r2, [r6, #0]
 80208d6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80208da:	682a      	ldr	r2, [r5, #0]
 80208dc:	9202      	str	r2, [sp, #8]
 80208de:	9a01      	ldr	r2, [sp, #4]
 80208e0:	2a00      	cmp	r2, #0
 80208e2:	dc03      	bgt.n	80208ec <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80208e4:	f1bb 0f00 	cmp.w	fp, #0
 80208e8:	f340 809a 	ble.w	8020a20 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 80208ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80208ee:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 80208f2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80208f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80208f8:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 80208fc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8020900:	2b00      	cmp	r3, #0
 8020902:	dd0c      	ble.n	802091e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8020904:	1406      	asrs	r6, r0, #16
 8020906:	d405      	bmi.n	8020914 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8020908:	454e      	cmp	r6, r9
 802090a:	da03      	bge.n	8020914 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 802090c:	1416      	asrs	r6, r2, #16
 802090e:	d401      	bmi.n	8020914 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8020910:	4546      	cmp	r6, r8
 8020912:	db05      	blt.n	8020920 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8020914:	4470      	add	r0, lr
 8020916:	4462      	add	r2, ip
 8020918:	3b01      	subs	r3, #1
 802091a:	3402      	adds	r4, #2
 802091c:	e7f0      	b.n	8020900 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 802091e:	d00f      	beq.n	8020940 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8020920:	1e5e      	subs	r6, r3, #1
 8020922:	fb0e 0706 	mla	r7, lr, r6, r0
 8020926:	143f      	asrs	r7, r7, #16
 8020928:	d541      	bpl.n	80209ae <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 802092a:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 802092e:	4698      	mov	r8, r3
 8020930:	9603      	str	r6, [sp, #12]
 8020932:	f1b8 0f00 	cmp.w	r8, #0
 8020936:	dc56      	bgt.n	80209e6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 8020938:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802093c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020940:	9b01      	ldr	r3, [sp, #4]
 8020942:	2b00      	cmp	r3, #0
 8020944:	dd6c      	ble.n	8020a20 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8020946:	ee30 0a04 	vadd.f32	s0, s0, s8
 802094a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802094c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020950:	eeb0 6a62 	vmov.f32	s12, s5
 8020954:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020958:	ee31 1a05 	vadd.f32	s2, s2, s10
 802095c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020960:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8020964:	eeb0 6a43 	vmov.f32	s12, s6
 8020968:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802096c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8020970:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020974:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020978:	ee77 2a62 	vsub.f32	s5, s14, s5
 802097c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020980:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020984:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020988:	ee12 2a90 	vmov	r2, s5
 802098c:	eef0 2a47 	vmov.f32	s5, s14
 8020990:	fb92 fef3 	sdiv	lr, r2, r3
 8020994:	ee13 2a10 	vmov	r2, s6
 8020998:	eeb0 3a67 	vmov.f32	s6, s15
 802099c:	fb92 fcf3 	sdiv	ip, r2, r3
 80209a0:	9b01      	ldr	r3, [sp, #4]
 80209a2:	3b01      	subs	r3, #1
 80209a4:	9301      	str	r3, [sp, #4]
 80209a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80209a8:	bf08      	it	eq
 80209aa:	465b      	moveq	r3, fp
 80209ac:	e797      	b.n	80208de <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 80209ae:	454f      	cmp	r7, r9
 80209b0:	dabb      	bge.n	802092a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80209b2:	fb0c 2606 	mla	r6, ip, r6, r2
 80209b6:	1436      	asrs	r6, r6, #16
 80209b8:	d4b7      	bmi.n	802092a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80209ba:	4546      	cmp	r6, r8
 80209bc:	dab5      	bge.n	802092a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80209be:	461e      	mov	r6, r3
 80209c0:	46a0      	mov	r8, r4
 80209c2:	2e00      	cmp	r6, #0
 80209c4:	ddb8      	ble.n	8020938 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80209c6:	1417      	asrs	r7, r2, #16
 80209c8:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 80209cc:	ea4f 4920 	mov.w	r9, r0, asr #16
 80209d0:	9902      	ldr	r1, [sp, #8]
 80209d2:	4470      	add	r0, lr
 80209d4:	4462      	add	r2, ip
 80209d6:	fb0a 9707 	mla	r7, sl, r7, r9
 80209da:	3e01      	subs	r6, #1
 80209dc:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 80209e0:	f828 7b02 	strh.w	r7, [r8], #2
 80209e4:	e7ed      	b.n	80209c2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 80209e6:	ea5f 4920 	movs.w	r9, r0, asr #16
 80209ea:	d414      	bmi.n	8020a16 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 80209ec:	68ae      	ldr	r6, [r5, #8]
 80209ee:	454e      	cmp	r6, r9
 80209f0:	dd11      	ble.n	8020a16 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 80209f2:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80209f6:	d40e      	bmi.n	8020a16 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 80209f8:	68ef      	ldr	r7, [r5, #12]
 80209fa:	4557      	cmp	r7, sl
 80209fc:	dd0b      	ble.n	8020a16 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 80209fe:	b236      	sxth	r6, r6
 8020a00:	f06f 0101 	mvn.w	r1, #1
 8020a04:	9f02      	ldr	r7, [sp, #8]
 8020a06:	fb0a 9606 	mla	r6, sl, r6, r9
 8020a0a:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 8020a0e:	fb01 f608 	mul.w	r6, r1, r8
 8020a12:	9903      	ldr	r1, [sp, #12]
 8020a14:	538f      	strh	r7, [r1, r6]
 8020a16:	4470      	add	r0, lr
 8020a18:	4462      	add	r2, ip
 8020a1a:	f108 38ff 	add.w	r8, r8, #4294967295
 8020a1e:	e788      	b.n	8020932 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8020a20:	b005      	add	sp, #20
 8020a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020a26 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020a26:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a2a:	b087      	sub	sp, #28
 8020a2c:	468b      	mov	fp, r1
 8020a2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020a32:	9815      	ldr	r0, [sp, #84]	; 0x54
 8020a34:	9203      	str	r2, [sp, #12]
 8020a36:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8020a3a:	6841      	ldr	r1, [r0, #4]
 8020a3c:	9204      	str	r2, [sp, #16]
 8020a3e:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8020a42:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8020a46:	fb01 2505 	mla	r5, r1, r5, r2
 8020a4a:	6802      	ldr	r2, [r0, #0]
 8020a4c:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8020a50:	f8d9 2000 	ldr.w	r2, [r9]
 8020a54:	9201      	str	r2, [sp, #4]
 8020a56:	f1bb 0f00 	cmp.w	fp, #0
 8020a5a:	dc03      	bgt.n	8020a64 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8020a5c:	9a03      	ldr	r2, [sp, #12]
 8020a5e:	2a00      	cmp	r2, #0
 8020a60:	f340 8158 	ble.w	8020d14 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 8020a64:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020a66:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 8020a6a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8020a6e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020a70:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 8020a74:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8020a78:	2b00      	cmp	r3, #0
 8020a7a:	dd0e      	ble.n	8020a9a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8020a7c:	1402      	asrs	r2, r0, #16
 8020a7e:	d405      	bmi.n	8020a8c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020a80:	42ba      	cmp	r2, r7
 8020a82:	da03      	bge.n	8020a8c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020a84:	140a      	asrs	r2, r1, #16
 8020a86:	d401      	bmi.n	8020a8c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020a88:	42b2      	cmp	r2, r6
 8020a8a:	db07      	blt.n	8020a9c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020a8c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020a8e:	3b01      	subs	r3, #1
 8020a90:	3502      	adds	r5, #2
 8020a92:	4410      	add	r0, r2
 8020a94:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020a96:	4411      	add	r1, r2
 8020a98:	e7ee      	b.n	8020a78 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8020a9a:	d017      	beq.n	8020acc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8020a9c:	1e5a      	subs	r2, r3, #1
 8020a9e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020aa0:	fb04 0402 	mla	r4, r4, r2, r0
 8020aa4:	1424      	asrs	r4, r4, #16
 8020aa6:	d409      	bmi.n	8020abc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020aa8:	42bc      	cmp	r4, r7
 8020aaa:	da07      	bge.n	8020abc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020aac:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020aae:	fb04 1202 	mla	r2, r4, r2, r1
 8020ab2:	1412      	asrs	r2, r2, #16
 8020ab4:	d402      	bmi.n	8020abc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020ab6:	42b2      	cmp	r2, r6
 8020ab8:	f2c0 80bf 	blt.w	8020c3a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8020abc:	2700      	movs	r7, #0
 8020abe:	19da      	adds	r2, r3, r7
 8020ac0:	2a00      	cmp	r2, #0
 8020ac2:	dc3e      	bgt.n	8020b42 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8020ac4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020ac8:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8020acc:	f1bb 0f00 	cmp.w	fp, #0
 8020ad0:	f340 8120 	ble.w	8020d14 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 8020ad4:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020ad8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020ada:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020ade:	f1bb 0b01 	subs.w	fp, fp, #1
 8020ae2:	eeb0 6a62 	vmov.f32	s12, s5
 8020ae6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020aea:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020aee:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020af2:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8020af6:	eeb0 6a43 	vmov.f32	s12, s6
 8020afa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020afe:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8020b02:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020b06:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020b0a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020b0e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020b12:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020b16:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020b1a:	ee12 2a90 	vmov	r2, s5
 8020b1e:	eef0 2a47 	vmov.f32	s5, s14
 8020b22:	fb92 f3f3 	sdiv	r3, r2, r3
 8020b26:	ee13 2a10 	vmov	r2, s6
 8020b2a:	9313      	str	r3, [sp, #76]	; 0x4c
 8020b2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020b2e:	eeb0 3a67 	vmov.f32	s6, s15
 8020b32:	fb92 f3f3 	sdiv	r3, r2, r3
 8020b36:	9a03      	ldr	r2, [sp, #12]
 8020b38:	9314      	str	r3, [sp, #80]	; 0x50
 8020b3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020b3c:	bf08      	it	eq
 8020b3e:	4613      	moveq	r3, r2
 8020b40:	e789      	b.n	8020a56 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8020b42:	1406      	asrs	r6, r0, #16
 8020b44:	d42d      	bmi.n	8020ba2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8020b46:	f8d9 4008 	ldr.w	r4, [r9, #8]
 8020b4a:	42b4      	cmp	r4, r6
 8020b4c:	dd29      	ble.n	8020ba2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8020b4e:	ea5f 4c21 	movs.w	ip, r1, asr #16
 8020b52:	d426      	bmi.n	8020ba2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8020b54:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8020b58:	4562      	cmp	r2, ip
 8020b5a:	dd22      	ble.n	8020ba2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8020b5c:	b224      	sxth	r4, r4
 8020b5e:	9a01      	ldr	r2, [sp, #4]
 8020b60:	fb0c 6404 	mla	r4, ip, r4, r6
 8020b64:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 8020b68:	0e22      	lsrs	r2, r4, #24
 8020b6a:	d01a      	beq.n	8020ba2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8020b6c:	9e04      	ldr	r6, [sp, #16]
 8020b6e:	4372      	muls	r2, r6
 8020b70:	1c56      	adds	r6, r2, #1
 8020b72:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8020b76:	0a26      	lsrs	r6, r4, #8
 8020b78:	1212      	asrs	r2, r2, #8
 8020b7a:	9605      	str	r6, [sp, #20]
 8020b7c:	2aff      	cmp	r2, #255	; 0xff
 8020b7e:	d116      	bne.n	8020bae <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8020b80:	f06f 0201 	mvn.w	r2, #1
 8020b84:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8020b88:	fb02 fc07 	mul.w	ip, r2, r7
 8020b8c:	0962      	lsrs	r2, r4, #5
 8020b8e:	f026 0607 	bic.w	r6, r6, #7
 8020b92:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8020b96:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020b9a:	4316      	orrs	r6, r2
 8020b9c:	4326      	orrs	r6, r4
 8020b9e:	f825 600c 	strh.w	r6, [r5, ip]
 8020ba2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020ba4:	3f01      	subs	r7, #1
 8020ba6:	4410      	add	r0, r2
 8020ba8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020baa:	4411      	add	r1, r2
 8020bac:	e787      	b.n	8020abe <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8020bae:	f06f 0601 	mvn.w	r6, #1
 8020bb2:	fa1f fa82 	uxth.w	sl, r2
 8020bb6:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 8020bba:	43d2      	mvns	r2, r2
 8020bbc:	437e      	muls	r6, r7
 8020bbe:	b2e4      	uxtb	r4, r4
 8020bc0:	fb1c fc0a 	smulbb	ip, ip, sl
 8020bc4:	b2d2      	uxtb	r2, r2
 8020bc6:	f835 8006 	ldrh.w	r8, [r5, r6]
 8020bca:	fb14 f40a 	smulbb	r4, r4, sl
 8020bce:	9602      	str	r6, [sp, #8]
 8020bd0:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8020bd4:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8020bd8:	fb16 f60a 	smulbb	r6, r6, sl
 8020bdc:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8020be0:	fb0e ce02 	mla	lr, lr, r2, ip
 8020be4:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 8020be8:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8020bec:	fa1f fe8e 	uxth.w	lr, lr
 8020bf0:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8020bf4:	fa5f f888 	uxtb.w	r8, r8
 8020bf8:	fb0c 6c02 	mla	ip, ip, r2, r6
 8020bfc:	fb08 4402 	mla	r4, r8, r2, r4
 8020c00:	f10e 0201 	add.w	r2, lr, #1
 8020c04:	fa1f fc8c 	uxth.w	ip, ip
 8020c08:	b2a4      	uxth	r4, r4
 8020c0a:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8020c0e:	9a02      	ldr	r2, [sp, #8]
 8020c10:	1c66      	adds	r6, r4, #1
 8020c12:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8020c16:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 8020c1a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8020c1e:	ea46 0e0e 	orr.w	lr, r6, lr
 8020c22:	f10c 0601 	add.w	r6, ip, #1
 8020c26:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 8020c2a:	0976      	lsrs	r6, r6, #5
 8020c2c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8020c30:	ea4e 0e06 	orr.w	lr, lr, r6
 8020c34:	f825 e002 	strh.w	lr, [r5, r2]
 8020c38:	e7b3      	b.n	8020ba2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8020c3a:	f04f 0800 	mov.w	r8, #0
 8020c3e:	eba3 0208 	sub.w	r2, r3, r8
 8020c42:	2a00      	cmp	r2, #0
 8020c44:	f77f af3e 	ble.w	8020ac4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8020c48:	1404      	asrs	r4, r0, #16
 8020c4a:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 8020c4e:	140a      	asrs	r2, r1, #16
 8020c50:	fb06 4202 	mla	r2, r6, r2, r4
 8020c54:	9c01      	ldr	r4, [sp, #4]
 8020c56:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 8020c5a:	0e22      	lsrs	r2, r4, #24
 8020c5c:	d015      	beq.n	8020c8a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8020c5e:	9e04      	ldr	r6, [sp, #16]
 8020c60:	4372      	muls	r2, r6
 8020c62:	1c56      	adds	r6, r2, #1
 8020c64:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8020c68:	0a26      	lsrs	r6, r4, #8
 8020c6a:	1212      	asrs	r2, r2, #8
 8020c6c:	2aff      	cmp	r2, #255	; 0xff
 8020c6e:	d113      	bne.n	8020c98 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8020c70:	0962      	lsrs	r2, r4, #5
 8020c72:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8020c76:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8020c7a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020c7e:	f026 0607 	bic.w	r6, r6, #7
 8020c82:	4316      	orrs	r6, r2
 8020c84:	4326      	orrs	r6, r4
 8020c86:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 8020c8a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020c8c:	f108 0801 	add.w	r8, r8, #1
 8020c90:	4410      	add	r0, r2
 8020c92:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020c94:	4411      	add	r1, r2
 8020c96:	e7d2      	b.n	8020c3e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8020c98:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 8020c9c:	fa1f fa82 	uxth.w	sl, r2
 8020ca0:	f3c4 4707 	ubfx	r7, r4, #16, #8
 8020ca4:	43d2      	mvns	r2, r2
 8020ca6:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8020caa:	fb17 f70a 	smulbb	r7, r7, sl
 8020cae:	b2d2      	uxtb	r2, r2
 8020cb0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020cb4:	b2e4      	uxtb	r4, r4
 8020cb6:	b2f6      	uxtb	r6, r6
 8020cb8:	fb0c 7c02 	mla	ip, ip, r2, r7
 8020cbc:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8020cc0:	fb14 f40a 	smulbb	r4, r4, sl
 8020cc4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8020cc8:	fa1f fc8c 	uxth.w	ip, ip
 8020ccc:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8020cd0:	fb16 f60a 	smulbb	r6, r6, sl
 8020cd4:	fa5f fe8e 	uxtb.w	lr, lr
 8020cd8:	fb0e 4402 	mla	r4, lr, r2, r4
 8020cdc:	fb07 6702 	mla	r7, r7, r2, r6
 8020ce0:	f10c 0201 	add.w	r2, ip, #1
 8020ce4:	b2a4      	uxth	r4, r4
 8020ce6:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8020cea:	1c66      	adds	r6, r4, #1
 8020cec:	b2bf      	uxth	r7, r7
 8020cee:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8020cf2:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 8020cf6:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8020cfa:	ea46 0c0c 	orr.w	ip, r6, ip
 8020cfe:	1c7e      	adds	r6, r7, #1
 8020d00:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8020d04:	0976      	lsrs	r6, r6, #5
 8020d06:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8020d0a:	ea4c 0c06 	orr.w	ip, ip, r6
 8020d0e:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 8020d12:	e7ba      	b.n	8020c8a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8020d14:	b007      	add	sp, #28
 8020d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08020d1c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d20:	b085      	sub	sp, #20
 8020d22:	468b      	mov	fp, r1
 8020d24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020d28:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8020d2a:	9203      	str	r2, [sp, #12]
 8020d2c:	6841      	ldr	r1, [r0, #4]
 8020d2e:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8020d32:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8020d36:	fb01 2404 	mla	r4, r1, r4, r2
 8020d3a:	6802      	ldr	r2, [r0, #0]
 8020d3c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8020d40:	f8d8 2000 	ldr.w	r2, [r8]
 8020d44:	9201      	str	r2, [sp, #4]
 8020d46:	f1bb 0f00 	cmp.w	fp, #0
 8020d4a:	dc03      	bgt.n	8020d54 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8020d4c:	9a03      	ldr	r2, [sp, #12]
 8020d4e:	2a00      	cmp	r2, #0
 8020d50:	f340 814f 	ble.w	8020ff2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8020d54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020d56:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 8020d5a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8020d5e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020d60:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8020d64:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8020d68:	2b00      	cmp	r3, #0
 8020d6a:	dd0e      	ble.n	8020d8a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8020d6c:	1408      	asrs	r0, r1, #16
 8020d6e:	d405      	bmi.n	8020d7c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8020d70:	42b8      	cmp	r0, r7
 8020d72:	da03      	bge.n	8020d7c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8020d74:	1410      	asrs	r0, r2, #16
 8020d76:	d401      	bmi.n	8020d7c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8020d78:	42b0      	cmp	r0, r6
 8020d7a:	db07      	blt.n	8020d8c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020d7c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020d7e:	3b01      	subs	r3, #1
 8020d80:	3402      	adds	r4, #2
 8020d82:	4401      	add	r1, r0
 8020d84:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020d86:	4402      	add	r2, r0
 8020d88:	e7ee      	b.n	8020d68 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8020d8a:	d017      	beq.n	8020dbc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020d8c:	1e58      	subs	r0, r3, #1
 8020d8e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8020d90:	fb05 1500 	mla	r5, r5, r0, r1
 8020d94:	142d      	asrs	r5, r5, #16
 8020d96:	d409      	bmi.n	8020dac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020d98:	42bd      	cmp	r5, r7
 8020d9a:	da07      	bge.n	8020dac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020d9c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8020d9e:	fb05 2000 	mla	r0, r5, r0, r2
 8020da2:	1400      	asrs	r0, r0, #16
 8020da4:	d402      	bmi.n	8020dac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020da6:	42b0      	cmp	r0, r6
 8020da8:	f2c0 80ba 	blt.w	8020f20 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8020dac:	2600      	movs	r6, #0
 8020dae:	1998      	adds	r0, r3, r6
 8020db0:	2800      	cmp	r0, #0
 8020db2:	dc3e      	bgt.n	8020e32 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8020db4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020db8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020dbc:	f1bb 0f00 	cmp.w	fp, #0
 8020dc0:	f340 8117 	ble.w	8020ff2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8020dc4:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020dc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020dca:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020dce:	f1bb 0b01 	subs.w	fp, fp, #1
 8020dd2:	eeb0 6a62 	vmov.f32	s12, s5
 8020dd6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020dda:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020dde:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020de2:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8020de6:	eeb0 6a43 	vmov.f32	s12, s6
 8020dea:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020dee:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8020df2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020df6:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020dfa:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020dfe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020e02:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020e06:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020e0a:	ee12 2a90 	vmov	r2, s5
 8020e0e:	eef0 2a47 	vmov.f32	s5, s14
 8020e12:	fb92 f3f3 	sdiv	r3, r2, r3
 8020e16:	ee13 2a10 	vmov	r2, s6
 8020e1a:	9311      	str	r3, [sp, #68]	; 0x44
 8020e1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020e1e:	eeb0 3a67 	vmov.f32	s6, s15
 8020e22:	fb92 f3f3 	sdiv	r3, r2, r3
 8020e26:	9a03      	ldr	r2, [sp, #12]
 8020e28:	9312      	str	r3, [sp, #72]	; 0x48
 8020e2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020e2c:	bf08      	it	eq
 8020e2e:	4613      	moveq	r3, r2
 8020e30:	e789      	b.n	8020d46 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8020e32:	140f      	asrs	r7, r1, #16
 8020e34:	d424      	bmi.n	8020e80 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020e36:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8020e3a:	42bd      	cmp	r5, r7
 8020e3c:	dd20      	ble.n	8020e80 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020e3e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8020e42:	d41d      	bmi.n	8020e80 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020e44:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8020e48:	4560      	cmp	r0, ip
 8020e4a:	dd19      	ble.n	8020e80 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020e4c:	b22d      	sxth	r5, r5
 8020e4e:	9801      	ldr	r0, [sp, #4]
 8020e50:	fb0c 7505 	mla	r5, ip, r5, r7
 8020e54:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8020e58:	0e07      	lsrs	r7, r0, #24
 8020e5a:	2fff      	cmp	r7, #255	; 0xff
 8020e5c:	d116      	bne.n	8020e8c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8020e5e:	f06f 0501 	mvn.w	r5, #1
 8020e62:	fb05 f706 	mul.w	r7, r5, r6
 8020e66:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 8020e6a:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 8020e6e:	0945      	lsrs	r5, r0, #5
 8020e70:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8020e74:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8020e78:	ea4c 0505 	orr.w	r5, ip, r5
 8020e7c:	4305      	orrs	r5, r0
 8020e7e:	53e5      	strh	r5, [r4, r7]
 8020e80:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020e82:	3e01      	subs	r6, #1
 8020e84:	4401      	add	r1, r0
 8020e86:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020e88:	4402      	add	r2, r0
 8020e8a:	e790      	b.n	8020dae <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020e8c:	b2fd      	uxtb	r5, r7
 8020e8e:	2f00      	cmp	r7, #0
 8020e90:	d0f6      	beq.n	8020e80 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020e92:	f06f 0701 	mvn.w	r7, #1
 8020e96:	fa1f f985 	uxth.w	r9, r5
 8020e9a:	43ed      	mvns	r5, r5
 8020e9c:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8020ea0:	4377      	muls	r7, r6
 8020ea2:	fb1a fa09 	smulbb	sl, sl, r9
 8020ea6:	b2ed      	uxtb	r5, r5
 8020ea8:	f834 e007 	ldrh.w	lr, [r4, r7]
 8020eac:	9702      	str	r7, [sp, #8]
 8020eae:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8020eb2:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8020eb6:	fb17 f709 	smulbb	r7, r7, r9
 8020eba:	b2c0      	uxtb	r0, r0
 8020ebc:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020ec0:	fb10 f009 	smulbb	r0, r0, r9
 8020ec4:	fb0c 7c05 	mla	ip, ip, r5, r7
 8020ec8:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8020ecc:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8020ed0:	fa1f fc8c 	uxth.w	ip, ip
 8020ed4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8020ed8:	fa5f fe8e 	uxtb.w	lr, lr
 8020edc:	fb07 a705 	mla	r7, r7, r5, sl
 8020ee0:	fb0e 0005 	mla	r0, lr, r5, r0
 8020ee4:	f10c 0501 	add.w	r5, ip, #1
 8020ee8:	b2bf      	uxth	r7, r7
 8020eea:	b280      	uxth	r0, r0
 8020eec:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8020ef0:	f100 0a01 	add.w	sl, r0, #1
 8020ef4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8020ef8:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8020efc:	9802      	ldr	r0, [sp, #8]
 8020efe:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020f02:	ea4a 0c0c 	orr.w	ip, sl, ip
 8020f06:	f107 0a01 	add.w	sl, r7, #1
 8020f0a:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8020f0e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020f12:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020f16:	ea4c 0c0a 	orr.w	ip, ip, sl
 8020f1a:	f824 c000 	strh.w	ip, [r4, r0]
 8020f1e:	e7af      	b.n	8020e80 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020f20:	f04f 0e00 	mov.w	lr, #0
 8020f24:	eba3 000e 	sub.w	r0, r3, lr
 8020f28:	2800      	cmp	r0, #0
 8020f2a:	f77f af43 	ble.w	8020db4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8020f2e:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 8020f32:	140d      	asrs	r5, r1, #16
 8020f34:	1410      	asrs	r0, r2, #16
 8020f36:	fb06 5000 	mla	r0, r6, r0, r5
 8020f3a:	9d01      	ldr	r5, [sp, #4]
 8020f3c:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 8020f40:	0e2e      	lsrs	r6, r5, #24
 8020f42:	2eff      	cmp	r6, #255	; 0xff
 8020f44:	d112      	bne.n	8020f6c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8020f46:	482c      	ldr	r0, [pc, #176]	; (8020ff8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 8020f48:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 8020f4c:	0968      	lsrs	r0, r5, #5
 8020f4e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8020f52:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020f56:	4330      	orrs	r0, r6
 8020f58:	4328      	orrs	r0, r5
 8020f5a:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 8020f5e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020f60:	f10e 0e01 	add.w	lr, lr, #1
 8020f64:	4401      	add	r1, r0
 8020f66:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020f68:	4402      	add	r2, r0
 8020f6a:	e7db      	b.n	8020f24 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8020f6c:	b2f0      	uxtb	r0, r6
 8020f6e:	2e00      	cmp	r6, #0
 8020f70:	d0f5      	beq.n	8020f5e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8020f72:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8020f76:	fa1f f980 	uxth.w	r9, r0
 8020f7a:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8020f7e:	43c0      	mvns	r0, r0
 8020f80:	ea4f 272c 	mov.w	r7, ip, asr #8
 8020f84:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8020f88:	fb16 f609 	smulbb	r6, r6, r9
 8020f8c:	b2c0      	uxtb	r0, r0
 8020f8e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8020f92:	b2ed      	uxtb	r5, r5
 8020f94:	fb1a fa09 	smulbb	sl, sl, r9
 8020f98:	fb07 6700 	mla	r7, r7, r0, r6
 8020f9c:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8020fa0:	fb15 f509 	smulbb	r5, r5, r9
 8020fa4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8020fa8:	b2bf      	uxth	r7, r7
 8020faa:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020fae:	fa5f fc8c 	uxtb.w	ip, ip
 8020fb2:	fb06 a600 	mla	r6, r6, r0, sl
 8020fb6:	fb0c 5500 	mla	r5, ip, r0, r5
 8020fba:	1c78      	adds	r0, r7, #1
 8020fbc:	b2b6      	uxth	r6, r6
 8020fbe:	b2ad      	uxth	r5, r5
 8020fc0:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8020fc4:	f105 0a01 	add.w	sl, r5, #1
 8020fc8:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8020fcc:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020fd0:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020fd4:	ea4a 0707 	orr.w	r7, sl, r7
 8020fd8:	f106 0a01 	add.w	sl, r6, #1
 8020fdc:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8020fe0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020fe4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020fe8:	ea47 070a 	orr.w	r7, r7, sl
 8020fec:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 8020ff0:	e7b5      	b.n	8020f5e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8020ff2:	b005      	add	sp, #20
 8020ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020ff8:	fffff800 	.word	0xfffff800

08020ffc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021000:	b087      	sub	sp, #28
 8021002:	468b      	mov	fp, r1
 8021004:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021008:	9815      	ldr	r0, [sp, #84]	; 0x54
 802100a:	9203      	str	r2, [sp, #12]
 802100c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8021010:	6841      	ldr	r1, [r0, #4]
 8021012:	9204      	str	r2, [sp, #16]
 8021014:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8021018:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 802101c:	fb01 2404 	mla	r4, r1, r4, r2
 8021020:	6802      	ldr	r2, [r0, #0]
 8021022:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8021026:	f8d9 2008 	ldr.w	r2, [r9, #8]
 802102a:	3201      	adds	r2, #1
 802102c:	f022 0201 	bic.w	r2, r2, #1
 8021030:	9200      	str	r2, [sp, #0]
 8021032:	f8d9 2000 	ldr.w	r2, [r9]
 8021036:	9201      	str	r2, [sp, #4]
 8021038:	f1bb 0f00 	cmp.w	fp, #0
 802103c:	dc03      	bgt.n	8021046 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 802103e:	9a03      	ldr	r2, [sp, #12]
 8021040:	2a00      	cmp	r2, #0
 8021042:	f340 816a 	ble.w	802131a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8021046:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021048:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 802104c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8021050:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021052:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 8021056:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 802105a:	2b00      	cmp	r3, #0
 802105c:	dd0e      	ble.n	802107c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 802105e:	1402      	asrs	r2, r0, #16
 8021060:	d405      	bmi.n	802106e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021062:	42ba      	cmp	r2, r7
 8021064:	da03      	bge.n	802106e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021066:	140a      	asrs	r2, r1, #16
 8021068:	d401      	bmi.n	802106e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802106a:	42b2      	cmp	r2, r6
 802106c:	db07      	blt.n	802107e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802106e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021070:	3b01      	subs	r3, #1
 8021072:	3402      	adds	r4, #2
 8021074:	4410      	add	r0, r2
 8021076:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021078:	4411      	add	r1, r2
 802107a:	e7ee      	b.n	802105a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 802107c:	d017      	beq.n	80210ae <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 802107e:	1e5a      	subs	r2, r3, #1
 8021080:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8021082:	fb05 0502 	mla	r5, r5, r2, r0
 8021086:	142d      	asrs	r5, r5, #16
 8021088:	d409      	bmi.n	802109e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 802108a:	42bd      	cmp	r5, r7
 802108c:	da07      	bge.n	802109e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 802108e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8021090:	fb05 1202 	mla	r2, r5, r2, r1
 8021094:	1412      	asrs	r2, r2, #16
 8021096:	d402      	bmi.n	802109e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8021098:	42b2      	cmp	r2, r6
 802109a:	f2c0 80c8 	blt.w	802122e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 802109e:	2700      	movs	r7, #0
 80210a0:	19da      	adds	r2, r3, r7
 80210a2:	2a00      	cmp	r2, #0
 80210a4:	dc3e      	bgt.n	8021124 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 80210a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80210aa:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80210ae:	f1bb 0f00 	cmp.w	fp, #0
 80210b2:	f340 8132 	ble.w	802131a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 80210b6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80210ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80210bc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80210c0:	f1bb 0b01 	subs.w	fp, fp, #1
 80210c4:	eeb0 6a62 	vmov.f32	s12, s5
 80210c8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80210cc:	ee31 1a05 	vadd.f32	s2, s2, s10
 80210d0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80210d4:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80210d8:	eeb0 6a43 	vmov.f32	s12, s6
 80210dc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80210e0:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80210e4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80210e8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80210ec:	ee77 2a62 	vsub.f32	s5, s14, s5
 80210f0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80210f4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80210f8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80210fc:	ee12 2a90 	vmov	r2, s5
 8021100:	eef0 2a47 	vmov.f32	s5, s14
 8021104:	fb92 f3f3 	sdiv	r3, r2, r3
 8021108:	ee13 2a10 	vmov	r2, s6
 802110c:	9313      	str	r3, [sp, #76]	; 0x4c
 802110e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021110:	eeb0 3a67 	vmov.f32	s6, s15
 8021114:	fb92 f3f3 	sdiv	r3, r2, r3
 8021118:	9a03      	ldr	r2, [sp, #12]
 802111a:	9314      	str	r3, [sp, #80]	; 0x50
 802111c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802111e:	bf08      	it	eq
 8021120:	4613      	moveq	r3, r2
 8021122:	e789      	b.n	8021038 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8021124:	1405      	asrs	r5, r0, #16
 8021126:	d436      	bmi.n	8021196 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8021128:	f8d9 2008 	ldr.w	r2, [r9, #8]
 802112c:	42aa      	cmp	r2, r5
 802112e:	dd32      	ble.n	8021196 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8021130:	140e      	asrs	r6, r1, #16
 8021132:	d430      	bmi.n	8021196 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8021134:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8021138:	42b2      	cmp	r2, r6
 802113a:	dd2c      	ble.n	8021196 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802113c:	9a00      	ldr	r2, [sp, #0]
 802113e:	fb06 5502 	mla	r5, r6, r2, r5
 8021142:	9e01      	ldr	r6, [sp, #4]
 8021144:	086a      	lsrs	r2, r5, #1
 8021146:	5cb2      	ldrb	r2, [r6, r2]
 8021148:	07ee      	lsls	r6, r5, #31
 802114a:	bf54      	ite	pl
 802114c:	f002 020f 	andpl.w	r2, r2, #15
 8021150:	1112      	asrmi	r2, r2, #4
 8021152:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8021156:	b2d2      	uxtb	r2, r2
 8021158:	b1ea      	cbz	r2, 8021196 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802115a:	9d04      	ldr	r5, [sp, #16]
 802115c:	436a      	muls	r2, r5
 802115e:	1c55      	adds	r5, r2, #1
 8021160:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8021164:	4d6e      	ldr	r5, [pc, #440]	; (8021320 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 8021166:	1212      	asrs	r2, r2, #8
 8021168:	682d      	ldr	r5, [r5, #0]
 802116a:	2aff      	cmp	r2, #255	; 0xff
 802116c:	ea4f 2615 	mov.w	r6, r5, lsr #8
 8021170:	9605      	str	r6, [sp, #20]
 8021172:	d116      	bne.n	80211a2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8021174:	f06f 0201 	mvn.w	r2, #1
 8021178:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 802117c:	fb02 fc07 	mul.w	ip, r2, r7
 8021180:	096a      	lsrs	r2, r5, #5
 8021182:	f026 0607 	bic.w	r6, r6, #7
 8021186:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 802118a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802118e:	4316      	orrs	r6, r2
 8021190:	432e      	orrs	r6, r5
 8021192:	f824 600c 	strh.w	r6, [r4, ip]
 8021196:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021198:	3f01      	subs	r7, #1
 802119a:	4410      	add	r0, r2
 802119c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802119e:	4411      	add	r1, r2
 80211a0:	e77e      	b.n	80210a0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 80211a2:	f06f 0601 	mvn.w	r6, #1
 80211a6:	fa1f fa82 	uxth.w	sl, r2
 80211aa:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 80211ae:	43d2      	mvns	r2, r2
 80211b0:	437e      	muls	r6, r7
 80211b2:	b2ed      	uxtb	r5, r5
 80211b4:	fb1c fc0a 	smulbb	ip, ip, sl
 80211b8:	b2d2      	uxtb	r2, r2
 80211ba:	f834 8006 	ldrh.w	r8, [r4, r6]
 80211be:	fb15 f50a 	smulbb	r5, r5, sl
 80211c2:	9602      	str	r6, [sp, #8]
 80211c4:	ea4f 2e28 	mov.w	lr, r8, asr #8
 80211c8:	f89d 6014 	ldrb.w	r6, [sp, #20]
 80211cc:	fb16 f60a 	smulbb	r6, r6, sl
 80211d0:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 80211d4:	fb0e ce02 	mla	lr, lr, r2, ip
 80211d8:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 80211dc:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80211e0:	fa1f fe8e 	uxth.w	lr, lr
 80211e4:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80211e8:	fa5f f888 	uxtb.w	r8, r8
 80211ec:	fb0c 6c02 	mla	ip, ip, r2, r6
 80211f0:	fb08 5502 	mla	r5, r8, r2, r5
 80211f4:	f10e 0201 	add.w	r2, lr, #1
 80211f8:	fa1f fc8c 	uxth.w	ip, ip
 80211fc:	b2ad      	uxth	r5, r5
 80211fe:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8021202:	9a02      	ldr	r2, [sp, #8]
 8021204:	1c6e      	adds	r6, r5, #1
 8021206:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 802120a:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 802120e:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8021212:	ea46 0e0e 	orr.w	lr, r6, lr
 8021216:	f10c 0601 	add.w	r6, ip, #1
 802121a:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 802121e:	0976      	lsrs	r6, r6, #5
 8021220:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8021224:	ea4e 0e06 	orr.w	lr, lr, r6
 8021228:	f824 e002 	strh.w	lr, [r4, r2]
 802122c:	e7b3      	b.n	8021196 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802122e:	f04f 0800 	mov.w	r8, #0
 8021232:	eba3 0208 	sub.w	r2, r3, r8
 8021236:	2a00      	cmp	r2, #0
 8021238:	f77f af35 	ble.w	80210a6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 802123c:	1402      	asrs	r2, r0, #16
 802123e:	9e00      	ldr	r6, [sp, #0]
 8021240:	140d      	asrs	r5, r1, #16
 8021242:	fb06 2505 	mla	r5, r6, r5, r2
 8021246:	9e01      	ldr	r6, [sp, #4]
 8021248:	086a      	lsrs	r2, r5, #1
 802124a:	07ed      	lsls	r5, r5, #31
 802124c:	5cb2      	ldrb	r2, [r6, r2]
 802124e:	bf54      	ite	pl
 8021250:	f002 020f 	andpl.w	r2, r2, #15
 8021254:	1112      	asrmi	r2, r2, #4
 8021256:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802125a:	b2d2      	uxtb	r2, r2
 802125c:	b1c2      	cbz	r2, 8021290 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 802125e:	9d04      	ldr	r5, [sp, #16]
 8021260:	436a      	muls	r2, r5
 8021262:	1c55      	adds	r5, r2, #1
 8021264:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8021268:	4d2d      	ldr	r5, [pc, #180]	; (8021320 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 802126a:	1212      	asrs	r2, r2, #8
 802126c:	682e      	ldr	r6, [r5, #0]
 802126e:	2aff      	cmp	r2, #255	; 0xff
 8021270:	ea4f 2516 	mov.w	r5, r6, lsr #8
 8021274:	d113      	bne.n	802129e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8021276:	0972      	lsrs	r2, r6, #5
 8021278:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 802127c:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8021280:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021284:	f025 0507 	bic.w	r5, r5, #7
 8021288:	4315      	orrs	r5, r2
 802128a:	4335      	orrs	r5, r6
 802128c:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 8021290:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021292:	f108 0801 	add.w	r8, r8, #1
 8021296:	4410      	add	r0, r2
 8021298:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802129a:	4411      	add	r1, r2
 802129c:	e7c9      	b.n	8021232 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 802129e:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 80212a2:	fa1f fa82 	uxth.w	sl, r2
 80212a6:	f3c6 4707 	ubfx	r7, r6, #16, #8
 80212aa:	43d2      	mvns	r2, r2
 80212ac:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80212b0:	fb17 f70a 	smulbb	r7, r7, sl
 80212b4:	b2d2      	uxtb	r2, r2
 80212b6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80212ba:	b2f6      	uxtb	r6, r6
 80212bc:	b2ed      	uxtb	r5, r5
 80212be:	fb0c 7c02 	mla	ip, ip, r2, r7
 80212c2:	ea4f 07ee 	mov.w	r7, lr, asr #3
 80212c6:	fb16 f60a 	smulbb	r6, r6, sl
 80212ca:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80212ce:	fa1f fc8c 	uxth.w	ip, ip
 80212d2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80212d6:	fb15 f50a 	smulbb	r5, r5, sl
 80212da:	fa5f fe8e 	uxtb.w	lr, lr
 80212de:	fb0e 6602 	mla	r6, lr, r2, r6
 80212e2:	fb07 5702 	mla	r7, r7, r2, r5
 80212e6:	f10c 0201 	add.w	r2, ip, #1
 80212ea:	b2b6      	uxth	r6, r6
 80212ec:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 80212f0:	1c75      	adds	r5, r6, #1
 80212f2:	b2bf      	uxth	r7, r7
 80212f4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80212f8:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 80212fc:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8021300:	ea45 0c0c 	orr.w	ip, r5, ip
 8021304:	1c7d      	adds	r5, r7, #1
 8021306:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 802130a:	096d      	lsrs	r5, r5, #5
 802130c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021310:	ea4c 0c05 	orr.w	ip, ip, r5
 8021314:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 8021318:	e7ba      	b.n	8021290 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 802131a:	b007      	add	sp, #28
 802131c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021320:	2400baf8 	.word	0x2400baf8

08021324 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021328:	b087      	sub	sp, #28
 802132a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802132e:	f8df 8308 	ldr.w	r8, [pc, #776]	; 8021638 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 8021332:	9815      	ldr	r0, [sp, #84]	; 0x54
 8021334:	9101      	str	r1, [sp, #4]
 8021336:	9205      	str	r2, [sp, #20]
 8021338:	6841      	ldr	r1, [r0, #4]
 802133a:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 802133e:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8021342:	fb01 2404 	mla	r4, r1, r4, r2
 8021346:	6802      	ldr	r2, [r0, #0]
 8021348:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 802134c:	f8db 2008 	ldr.w	r2, [fp, #8]
 8021350:	3201      	adds	r2, #1
 8021352:	f022 0201 	bic.w	r2, r2, #1
 8021356:	9202      	str	r2, [sp, #8]
 8021358:	f8db 2000 	ldr.w	r2, [fp]
 802135c:	9203      	str	r2, [sp, #12]
 802135e:	9a01      	ldr	r2, [sp, #4]
 8021360:	2a00      	cmp	r2, #0
 8021362:	dc03      	bgt.n	802136c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8021364:	9a05      	ldr	r2, [sp, #20]
 8021366:	2a00      	cmp	r2, #0
 8021368:	f340 8162 	ble.w	8021630 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 802136c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802136e:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 8021372:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8021376:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021378:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 802137c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8021380:	2b00      	cmp	r3, #0
 8021382:	dd0e      	ble.n	80213a2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8021384:	1402      	asrs	r2, r0, #16
 8021386:	d405      	bmi.n	8021394 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8021388:	42ba      	cmp	r2, r7
 802138a:	da03      	bge.n	8021394 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802138c:	140a      	asrs	r2, r1, #16
 802138e:	d401      	bmi.n	8021394 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8021390:	42b2      	cmp	r2, r6
 8021392:	db07      	blt.n	80213a4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8021394:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021396:	3b01      	subs	r3, #1
 8021398:	3402      	adds	r4, #2
 802139a:	4410      	add	r0, r2
 802139c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802139e:	4411      	add	r1, r2
 80213a0:	e7ee      	b.n	8021380 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80213a2:	d017      	beq.n	80213d4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80213a4:	1e5a      	subs	r2, r3, #1
 80213a6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80213a8:	fb05 0502 	mla	r5, r5, r2, r0
 80213ac:	142d      	asrs	r5, r5, #16
 80213ae:	d409      	bmi.n	80213c4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80213b0:	42bd      	cmp	r5, r7
 80213b2:	da07      	bge.n	80213c4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80213b4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80213b6:	fb05 1202 	mla	r2, r5, r2, r1
 80213ba:	1412      	asrs	r2, r2, #16
 80213bc:	d402      	bmi.n	80213c4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80213be:	42b2      	cmp	r2, r6
 80213c0:	f2c0 80c3 	blt.w	802154a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 80213c4:	2500      	movs	r5, #0
 80213c6:	195a      	adds	r2, r3, r5
 80213c8:	2a00      	cmp	r2, #0
 80213ca:	dc3f      	bgt.n	802144c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 80213cc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80213d0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80213d4:	9b01      	ldr	r3, [sp, #4]
 80213d6:	2b00      	cmp	r3, #0
 80213d8:	f340 812a 	ble.w	8021630 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80213dc:	ee30 0a04 	vadd.f32	s0, s0, s8
 80213e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80213e2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80213e6:	eeb0 6a62 	vmov.f32	s12, s5
 80213ea:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80213ee:	ee31 1a05 	vadd.f32	s2, s2, s10
 80213f2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80213f6:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80213fa:	eeb0 6a43 	vmov.f32	s12, s6
 80213fe:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021402:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8021406:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802140a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802140e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021412:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021416:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802141a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802141e:	ee12 2a90 	vmov	r2, s5
 8021422:	eef0 2a47 	vmov.f32	s5, s14
 8021426:	fb92 f3f3 	sdiv	r3, r2, r3
 802142a:	ee13 2a10 	vmov	r2, s6
 802142e:	9313      	str	r3, [sp, #76]	; 0x4c
 8021430:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021432:	eeb0 3a67 	vmov.f32	s6, s15
 8021436:	fb92 f3f3 	sdiv	r3, r2, r3
 802143a:	9314      	str	r3, [sp, #80]	; 0x50
 802143c:	9b01      	ldr	r3, [sp, #4]
 802143e:	9a05      	ldr	r2, [sp, #20]
 8021440:	3b01      	subs	r3, #1
 8021442:	9301      	str	r3, [sp, #4]
 8021444:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021446:	bf08      	it	eq
 8021448:	4613      	moveq	r3, r2
 802144a:	e788      	b.n	802135e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802144c:	1406      	asrs	r6, r0, #16
 802144e:	d42c      	bmi.n	80214aa <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8021450:	f8db 2008 	ldr.w	r2, [fp, #8]
 8021454:	42b2      	cmp	r2, r6
 8021456:	dd28      	ble.n	80214aa <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8021458:	140f      	asrs	r7, r1, #16
 802145a:	d426      	bmi.n	80214aa <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802145c:	f8db 200c 	ldr.w	r2, [fp, #12]
 8021460:	42ba      	cmp	r2, r7
 8021462:	dd22      	ble.n	80214aa <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8021464:	9a02      	ldr	r2, [sp, #8]
 8021466:	fb07 6602 	mla	r6, r7, r2, r6
 802146a:	9f03      	ldr	r7, [sp, #12]
 802146c:	0872      	lsrs	r2, r6, #1
 802146e:	07f6      	lsls	r6, r6, #31
 8021470:	5cba      	ldrb	r2, [r7, r2]
 8021472:	bf54      	ite	pl
 8021474:	f002 020f 	andpl.w	r2, r2, #15
 8021478:	1112      	asrmi	r2, r2, #4
 802147a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802147e:	b2d2      	uxtb	r2, r2
 8021480:	2aff      	cmp	r2, #255	; 0xff
 8021482:	d118      	bne.n	80214b6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8021484:	f06f 0601 	mvn.w	r6, #1
 8021488:	f8d8 2000 	ldr.w	r2, [r8]
 802148c:	fb06 f705 	mul.w	r7, r6, r5
 8021490:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 8021494:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 8021498:	0956      	lsrs	r6, r2, #5
 802149a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802149e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80214a2:	ea4c 0606 	orr.w	r6, ip, r6
 80214a6:	4316      	orrs	r6, r2
 80214a8:	53e6      	strh	r6, [r4, r7]
 80214aa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80214ac:	3d01      	subs	r5, #1
 80214ae:	4410      	add	r0, r2
 80214b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80214b2:	4411      	add	r1, r2
 80214b4:	e787      	b.n	80213c6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 80214b6:	2a00      	cmp	r2, #0
 80214b8:	d0f7      	beq.n	80214aa <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80214ba:	f06f 0601 	mvn.w	r6, #1
 80214be:	f8d8 c000 	ldr.w	ip, [r8]
 80214c2:	fa1f f982 	uxth.w	r9, r2
 80214c6:	43d2      	mvns	r2, r2
 80214c8:	436e      	muls	r6, r5
 80214ca:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 80214ce:	b2d2      	uxtb	r2, r2
 80214d0:	f834 e006 	ldrh.w	lr, [r4, r6]
 80214d4:	fb1a fa09 	smulbb	sl, sl, r9
 80214d8:	9604      	str	r6, [sp, #16]
 80214da:	f3cc 4607 	ubfx	r6, ip, #16, #8
 80214de:	ea4f 272e 	mov.w	r7, lr, asr #8
 80214e2:	fb16 f609 	smulbb	r6, r6, r9
 80214e6:	fa5f fc8c 	uxtb.w	ip, ip
 80214ea:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80214ee:	fb1c fc09 	smulbb	ip, ip, r9
 80214f2:	fb07 6702 	mla	r7, r7, r2, r6
 80214f6:	ea4f 06ee 	mov.w	r6, lr, asr #3
 80214fa:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80214fe:	b2bf      	uxth	r7, r7
 8021500:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8021504:	fa5f fe8e 	uxtb.w	lr, lr
 8021508:	fb06 a602 	mla	r6, r6, r2, sl
 802150c:	fb0e cc02 	mla	ip, lr, r2, ip
 8021510:	1c7a      	adds	r2, r7, #1
 8021512:	b2b6      	uxth	r6, r6
 8021514:	fa1f fc8c 	uxth.w	ip, ip
 8021518:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 802151c:	9a04      	ldr	r2, [sp, #16]
 802151e:	f10c 0a01 	add.w	sl, ip, #1
 8021522:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8021526:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 802152a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 802152e:	ea4a 0707 	orr.w	r7, sl, r7
 8021532:	f106 0a01 	add.w	sl, r6, #1
 8021536:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 802153a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 802153e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8021542:	ea47 070a 	orr.w	r7, r7, sl
 8021546:	52a7      	strh	r7, [r4, r2]
 8021548:	e7af      	b.n	80214aa <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802154a:	f04f 0e00 	mov.w	lr, #0
 802154e:	eba3 020e 	sub.w	r2, r3, lr
 8021552:	2a00      	cmp	r2, #0
 8021554:	f77f af3a 	ble.w	80213cc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8021558:	1402      	asrs	r2, r0, #16
 802155a:	9e02      	ldr	r6, [sp, #8]
 802155c:	140d      	asrs	r5, r1, #16
 802155e:	fb06 2505 	mla	r5, r6, r5, r2
 8021562:	9e03      	ldr	r6, [sp, #12]
 8021564:	086a      	lsrs	r2, r5, #1
 8021566:	07ed      	lsls	r5, r5, #31
 8021568:	5cb2      	ldrb	r2, [r6, r2]
 802156a:	bf54      	ite	pl
 802156c:	f002 020f 	andpl.w	r2, r2, #15
 8021570:	1112      	asrmi	r2, r2, #4
 8021572:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8021576:	b2d2      	uxtb	r2, r2
 8021578:	2aff      	cmp	r2, #255	; 0xff
 802157a:	d115      	bne.n	80215a8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 802157c:	f8d8 5000 	ldr.w	r5, [r8]
 8021580:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 8021584:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 8021588:	096a      	lsrs	r2, r5, #5
 802158a:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 802158e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021592:	4332      	orrs	r2, r6
 8021594:	432a      	orrs	r2, r5
 8021596:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 802159a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802159c:	f10e 0e01 	add.w	lr, lr, #1
 80215a0:	4410      	add	r0, r2
 80215a2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80215a4:	4411      	add	r1, r2
 80215a6:	e7d2      	b.n	802154e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80215a8:	2a00      	cmp	r2, #0
 80215aa:	d0f6      	beq.n	802159a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 80215ac:	f8d8 7000 	ldr.w	r7, [r8]
 80215b0:	fa1f f982 	uxth.w	r9, r2
 80215b4:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 80215b8:	43d2      	mvns	r2, r2
 80215ba:	f3c7 4507 	ubfx	r5, r7, #16, #8
 80215be:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 80215c2:	ea4f 262c 	mov.w	r6, ip, asr #8
 80215c6:	fb15 f509 	smulbb	r5, r5, r9
 80215ca:	b2d2      	uxtb	r2, r2
 80215cc:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80215d0:	b2ff      	uxtb	r7, r7
 80215d2:	fb1a fa09 	smulbb	sl, sl, r9
 80215d6:	fb06 5602 	mla	r6, r6, r2, r5
 80215da:	ea4f 05ec 	mov.w	r5, ip, asr #3
 80215de:	fb17 f709 	smulbb	r7, r7, r9
 80215e2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80215e6:	b2b6      	uxth	r6, r6
 80215e8:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80215ec:	fa5f fc8c 	uxtb.w	ip, ip
 80215f0:	fb05 a502 	mla	r5, r5, r2, sl
 80215f4:	fb0c 7702 	mla	r7, ip, r2, r7
 80215f8:	1c72      	adds	r2, r6, #1
 80215fa:	b2ad      	uxth	r5, r5
 80215fc:	b2bf      	uxth	r7, r7
 80215fe:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8021602:	f107 0a01 	add.w	sl, r7, #1
 8021606:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 802160a:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 802160e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8021612:	ea4a 0606 	orr.w	r6, sl, r6
 8021616:	f105 0a01 	add.w	sl, r5, #1
 802161a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 802161e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8021622:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8021626:	ea46 060a 	orr.w	r6, r6, sl
 802162a:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 802162e:	e7b4      	b.n	802159a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8021630:	b007      	add	sp, #28
 8021632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021636:	bf00      	nop
 8021638:	2400baf8 	.word	0x2400baf8

0802163c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW9D1Ev>:
 802163c:	4770      	bx	lr

0802163e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLED1Ev>:
 802163e:	4770      	bx	lr

08021640 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D1Ev>:
 8021640:	4770      	bx	lr

08021642 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8021642:	4770      	bx	lr

08021644 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8021644:	4770      	bx	lr

08021646 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8021646:	4770      	bx	lr

08021648 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8021648:	4770      	bx	lr

0802164a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 802164a:	4770      	bx	lr

0802164c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 802164c:	4770      	bx	lr

0802164e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 802164e:	4770      	bx	lr

08021650 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8021650:	4770      	bx	lr

08021652 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8021652:	4770      	bx	lr

08021654 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8021654:	4770      	bx	lr

08021656 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8021656:	4770      	bx	lr

08021658 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8021658:	4770      	bx	lr

0802165a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 802165a:	4770      	bx	lr

0802165c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 802165c:	4770      	bx	lr

0802165e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 802165e:	4770      	bx	lr

08021660 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 8021660:	4770      	bx	lr

08021662 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8021662:	4770      	bx	lr

08021664 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8021664:	4770      	bx	lr

08021666 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8021666:	4770      	bx	lr

08021668 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8021668:	4770      	bx	lr

0802166a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 802166a:	4770      	bx	lr

0802166c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 802166c:	4770      	bx	lr

0802166e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 802166e:	4770      	bx	lr

08021670 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8021670:	4770      	bx	lr

08021672 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8021672:	4770      	bx	lr

08021674 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8021674:	4770      	bx	lr

08021676 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8021676:	4770      	bx	lr

08021678 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8021678:	4770      	bx	lr

0802167a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 802167a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802167e:	b088      	sub	sp, #32
 8021680:	4606      	mov	r6, r0
 8021682:	4688      	mov	r8, r1
 8021684:	4691      	mov	r9, r2
 8021686:	ac08      	add	r4, sp, #32
 8021688:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 802168c:	4620      	mov	r0, r4
 802168e:	f7fd fc63 	bl	801ef58 <_ZNK8touchgfx6Bitmap7getDataEv>
 8021692:	6833      	ldr	r3, [r6, #0]
 8021694:	4605      	mov	r5, r0
 8021696:	4620      	mov	r0, r4
 8021698:	699f      	ldr	r7, [r3, #24]
 802169a:	f7fd fb71 	bl	801ed80 <_ZNK8touchgfx6Bitmap8getWidthEv>
 802169e:	4682      	mov	sl, r0
 80216a0:	4620      	mov	r0, r4
 80216a2:	f7fd fba1 	bl	801ede8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80216a6:	9500      	str	r5, [sp, #0]
 80216a8:	464b      	mov	r3, r9
 80216aa:	4642      	mov	r2, r8
 80216ac:	4631      	mov	r1, r6
 80216ae:	e9cd a001 	strd	sl, r0, [sp, #4]
 80216b2:	a806      	add	r0, sp, #24
 80216b4:	47b8      	blx	r7
 80216b6:	4628      	mov	r0, r5
 80216b8:	b008      	add	sp, #32
 80216ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080216c0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 80216c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80216c4:	2300      	movs	r3, #0
 80216c6:	9300      	str	r3, [sp, #0]
 80216c8:	4b3d      	ldr	r3, [pc, #244]	; (80217c0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 80216ca:	781b      	ldrb	r3, [r3, #0]
 80216cc:	2b00      	cmp	r3, #0
 80216ce:	d137      	bne.n	8021740 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 80216d0:	4a3c      	ldr	r2, [pc, #240]	; (80217c4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 80216d2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80216d6:	f8ad 2004 	strh.w	r2, [sp, #4]
 80216da:	2b00      	cmp	r3, #0
 80216dc:	d132      	bne.n	8021744 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 80216de:	4b3a      	ldr	r3, [pc, #232]	; (80217c8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 80216e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80216e4:	ac02      	add	r4, sp, #8
 80216e6:	6808      	ldr	r0, [r1, #0]
 80216e8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80216ec:	ab02      	add	r3, sp, #8
 80216ee:	6849      	ldr	r1, [r1, #4]
 80216f0:	4d36      	ldr	r5, [pc, #216]	; (80217cc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 80216f2:	c303      	stmia	r3!, {r0, r1}
 80216f4:	4669      	mov	r1, sp
 80216f6:	4620      	mov	r0, r4
 80216f8:	f7f9 ffe6 	bl	801b6c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80216fc:	4668      	mov	r0, sp
 80216fe:	f7f9 ffbb 	bl	801b678 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021702:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8021706:	f8bd 2000 	ldrh.w	r2, [sp]
 802170a:	462f      	mov	r7, r5
 802170c:	6828      	ldr	r0, [r5, #0]
 802170e:	4413      	add	r3, r2
 8021710:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8021714:	f8ad 3008 	strh.w	r3, [sp, #8]
 8021718:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 802171c:	4413      	add	r3, r2
 802171e:	f8ad 300a 	strh.w	r3, [sp, #10]
 8021722:	6803      	ldr	r3, [r0, #0]
 8021724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021726:	4798      	blx	r3
 8021728:	f010 0f01 	tst.w	r0, #1
 802172c:	d00c      	beq.n	8021748 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 802172e:	6828      	ldr	r0, [r5, #0]
 8021730:	6803      	ldr	r3, [r0, #0]
 8021732:	e894 0006 	ldmia.w	r4, {r1, r2}
 8021736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8021738:	4798      	blx	r3
 802173a:	b004      	add	sp, #16
 802173c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021740:	4a21      	ldr	r2, [pc, #132]	; (80217c8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 8021742:	e7c6      	b.n	80216d2 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8021744:	4b1f      	ldr	r3, [pc, #124]	; (80217c4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8021746:	e7cb      	b.n	80216e0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8021748:	6838      	ldr	r0, [r7, #0]
 802174a:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 802174e:	6803      	ldr	r3, [r0, #0]
 8021750:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 8021754:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8021758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802175a:	4798      	blx	r3
 802175c:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8021760:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8021764:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 8021768:	fb16 3602 	smlabb	r6, r6, r2, r3
 802176c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8021770:	6838      	ldr	r0, [r7, #0]
 8021772:	6803      	ldr	r3, [r0, #0]
 8021774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021776:	4798      	blx	r3
 8021778:	4a12      	ldr	r2, [pc, #72]	; (80217c4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 802177a:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 802177e:	8813      	ldrh	r3, [r2, #0]
 8021780:	4691      	mov	r9, r2
 8021782:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8021786:	435d      	muls	r5, r3
 8021788:	fb03 1404 	mla	r4, r3, r4, r1
 802178c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8021790:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8021794:	6838      	ldr	r0, [r7, #0]
 8021796:	42ac      	cmp	r4, r5
 8021798:	6803      	ldr	r3, [r0, #0]
 802179a:	d20e      	bcs.n	80217ba <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 802179c:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 80217a0:	4632      	mov	r2, r6
 80217a2:	4643      	mov	r3, r8
 80217a4:	4621      	mov	r1, r4
 80217a6:	47d0      	blx	sl
 80217a8:	f8b9 3000 	ldrh.w	r3, [r9]
 80217ac:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80217b0:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80217b4:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80217b8:	e7ec      	b.n	8021794 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 80217ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80217bc:	4798      	blx	r3
 80217be:	e7bc      	b.n	802173a <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 80217c0:	2400bae8 	.word	0x2400bae8
 80217c4:	2400baea 	.word	0x2400baea
 80217c8:	2400baec 	.word	0x2400baec
 80217cc:	2400baf0 	.word	0x2400baf0

080217d0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 80217d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80217d4:	b08b      	sub	sp, #44	; 0x2c
 80217d6:	460f      	mov	r7, r1
 80217d8:	4616      	mov	r6, r2
 80217da:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 80217de:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 80217e2:	f1bb 0f00 	cmp.w	fp, #0
 80217e6:	d04a      	beq.n	802187e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 80217e8:	6810      	ldr	r0, [r2, #0]
 80217ea:	ad06      	add	r5, sp, #24
 80217ec:	6851      	ldr	r1, [r2, #4]
 80217ee:	c503      	stmia	r5!, {r0, r1}
 80217f0:	6818      	ldr	r0, [r3, #0]
 80217f2:	ad08      	add	r5, sp, #32
 80217f4:	6859      	ldr	r1, [r3, #4]
 80217f6:	c503      	stmia	r5!, {r0, r1}
 80217f8:	a806      	add	r0, sp, #24
 80217fa:	f7f9 ff3d 	bl	801b678 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80217fe:	4631      	mov	r1, r6
 8021800:	a808      	add	r0, sp, #32
 8021802:	f7f9 ff61 	bl	801b6c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021806:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 802180a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 802180e:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8021812:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 8021816:	fb16 2103 	smlabb	r1, r6, r3, r2
 802181a:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 802181e:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 8021822:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8021826:	4f5f      	ldr	r7, [pc, #380]	; (80219a4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 8021828:	440a      	add	r2, r1
 802182a:	6838      	ldr	r0, [r7, #0]
 802182c:	46b9      	mov	r9, r7
 802182e:	f8ad 2020 	strh.w	r2, [sp, #32]
 8021832:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8021836:	4413      	add	r3, r2
 8021838:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 802183c:	6803      	ldr	r3, [r0, #0]
 802183e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021840:	4798      	blx	r3
 8021842:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8021846:	d11d      	bne.n	8021884 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 8021848:	b9fc      	cbnz	r4, 802188a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 802184a:	f010 0f01 	tst.w	r0, #1
 802184e:	d01c      	beq.n	802188a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 8021850:	f8d9 0000 	ldr.w	r0, [r9]
 8021854:	2700      	movs	r7, #0
 8021856:	b2ad      	uxth	r5, r5
 8021858:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 802185c:	6801      	ldr	r1, [r0, #0]
 802185e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8021862:	f8cd b00c 	str.w	fp, [sp, #12]
 8021866:	9501      	str	r5, [sp, #4]
 8021868:	e9cd 4704 	strd	r4, r7, [sp, #16]
 802186c:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 8021870:	9402      	str	r4, [sp, #8]
 8021872:	fa1f f488 	uxth.w	r4, r8
 8021876:	9400      	str	r4, [sp, #0]
 8021878:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 802187a:	4631      	mov	r1, r6
 802187c:	47a0      	blx	r4
 802187e:	b00b      	add	sp, #44	; 0x2c
 8021880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021884:	f010 0f04 	tst.w	r0, #4
 8021888:	e7e1      	b.n	802184e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7e>
 802188a:	f8d9 0000 	ldr.w	r0, [r9]
 802188e:	ea4f 0748 	mov.w	r7, r8, lsl #1
 8021892:	6803      	ldr	r3, [r0, #0]
 8021894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021896:	4798      	blx	r3
 8021898:	4b43      	ldr	r3, [pc, #268]	; (80219a8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 802189a:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 802189e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80218a2:	881a      	ldrh	r2, [r3, #0]
 80218a4:	469a      	mov	sl, r3
 80218a6:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 80218aa:	fb05 f502 	mul.w	r5, r5, r2
 80218ae:	fb02 1404 	mla	r4, r2, r4, r1
 80218b2:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80218b6:	d059      	beq.n	802196c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 80218b8:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 80218bc:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80218c0:	fa1f f28b 	uxth.w	r2, fp
 80218c4:	469e      	mov	lr, r3
 80218c6:	fa1f f989 	uxth.w	r9, r9
 80218ca:	42ac      	cmp	r4, r5
 80218cc:	d264      	bcs.n	8021998 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 80218ce:	eb04 0a07 	add.w	sl, r4, r7
 80218d2:	4554      	cmp	r4, sl
 80218d4:	d23d      	bcs.n	8021952 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 80218d6:	8821      	ldrh	r1, [r4, #0]
 80218d8:	f836 3b02 	ldrh.w	r3, [r6], #2
 80218dc:	1208      	asrs	r0, r1, #8
 80218de:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80218e2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80218e6:	ea4f 0be1 	mov.w	fp, r1, asr #3
 80218ea:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80218ee:	00c9      	lsls	r1, r1, #3
 80218f0:	fb10 f009 	smulbb	r0, r0, r9
 80218f4:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 80218f8:	b2c9      	uxtb	r1, r1
 80218fa:	fb0c 0c02 	mla	ip, ip, r2, r0
 80218fe:	10d8      	asrs	r0, r3, #3
 8021900:	fb1b fb09 	smulbb	fp, fp, r9
 8021904:	00db      	lsls	r3, r3, #3
 8021906:	fa1f fc8c 	uxth.w	ip, ip
 802190a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802190e:	fb11 f109 	smulbb	r1, r1, r9
 8021912:	b2db      	uxtb	r3, r3
 8021914:	fb00 b002 	mla	r0, r0, r2, fp
 8021918:	f10c 0b01 	add.w	fp, ip, #1
 802191c:	fb03 1302 	mla	r3, r3, r2, r1
 8021920:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8021924:	b29b      	uxth	r3, r3
 8021926:	b280      	uxth	r0, r0
 8021928:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 802192c:	f103 0c01 	add.w	ip, r3, #1
 8021930:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8021934:	1c43      	adds	r3, r0, #1
 8021936:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802193a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 802193e:	0940      	lsrs	r0, r0, #5
 8021940:	ea4c 0c0b 	orr.w	ip, ip, fp
 8021944:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021948:	ea4c 0c00 	orr.w	ip, ip, r0
 802194c:	f824 cb02 	strh.w	ip, [r4], #2
 8021950:	e7bf      	b.n	80218d2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 8021952:	f8be 3000 	ldrh.w	r3, [lr]
 8021956:	eba3 0308 	sub.w	r3, r3, r8
 802195a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802195e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8021962:	eba3 0308 	sub.w	r3, r3, r8
 8021966:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 802196a:	e7ae      	b.n	80218ca <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 802196c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8021970:	f8d9 0000 	ldr.w	r0, [r9]
 8021974:	42ac      	cmp	r4, r5
 8021976:	6803      	ldr	r3, [r0, #0]
 8021978:	d20e      	bcs.n	8021998 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 802197a:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 802197e:	4632      	mov	r2, r6
 8021980:	463b      	mov	r3, r7
 8021982:	4621      	mov	r1, r4
 8021984:	47c0      	blx	r8
 8021986:	f8ba 3000 	ldrh.w	r3, [sl]
 802198a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802198e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8021992:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8021996:	e7eb      	b.n	8021970 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 8021998:	4b02      	ldr	r3, [pc, #8]	; (80219a4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 802199a:	6818      	ldr	r0, [r3, #0]
 802199c:	6803      	ldr	r3, [r0, #0]
 802199e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80219a0:	4798      	blx	r3
 80219a2:	e76c      	b.n	802187e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 80219a4:	2400baf0 	.word	0x2400baf0
 80219a8:	2400baea 	.word	0x2400baea

080219ac <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D0Ev>:
 80219ac:	b510      	push	{r4, lr}
 80219ae:	4604      	mov	r4, r0
 80219b0:	2104      	movs	r1, #4
 80219b2:	f00a fe2c 	bl	802c60e <_ZdlPvj>
 80219b6:	4620      	mov	r0, r4
 80219b8:	bd10      	pop	{r4, pc}

080219ba <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLED0Ev>:
 80219ba:	b510      	push	{r4, lr}
 80219bc:	4604      	mov	r4, r0
 80219be:	2104      	movs	r1, #4
 80219c0:	f00a fe25 	bl	802c60e <_ZdlPvj>
 80219c4:	4620      	mov	r0, r4
 80219c6:	bd10      	pop	{r4, pc}

080219c8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW9D0Ev>:
 80219c8:	b510      	push	{r4, lr}
 80219ca:	4604      	mov	r4, r0
 80219cc:	f640 0144 	movw	r1, #2116	; 0x844
 80219d0:	f00a fe1d 	bl	802c60e <_ZdlPvj>
 80219d4:	4620      	mov	r0, r4
 80219d6:	bd10      	pop	{r4, pc}

080219d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80219d8:	b510      	push	{r4, lr}
 80219da:	4604      	mov	r4, r0
 80219dc:	2104      	movs	r1, #4
 80219de:	f00a fe16 	bl	802c60e <_ZdlPvj>
 80219e2:	4620      	mov	r0, r4
 80219e4:	bd10      	pop	{r4, pc}

080219e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 80219e6:	b510      	push	{r4, lr}
 80219e8:	4604      	mov	r4, r0
 80219ea:	2104      	movs	r1, #4
 80219ec:	f00a fe0f 	bl	802c60e <_ZdlPvj>
 80219f0:	4620      	mov	r0, r4
 80219f2:	bd10      	pop	{r4, pc}

080219f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 80219f4:	b510      	push	{r4, lr}
 80219f6:	4604      	mov	r4, r0
 80219f8:	2104      	movs	r1, #4
 80219fa:	f00a fe08 	bl	802c60e <_ZdlPvj>
 80219fe:	4620      	mov	r0, r4
 8021a00:	bd10      	pop	{r4, pc}

08021a02 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8021a02:	b510      	push	{r4, lr}
 8021a04:	4604      	mov	r4, r0
 8021a06:	2104      	movs	r1, #4
 8021a08:	f00a fe01 	bl	802c60e <_ZdlPvj>
 8021a0c:	4620      	mov	r0, r4
 8021a0e:	bd10      	pop	{r4, pc}

08021a10 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8021a10:	b510      	push	{r4, lr}
 8021a12:	4604      	mov	r4, r0
 8021a14:	2104      	movs	r1, #4
 8021a16:	f00a fdfa 	bl	802c60e <_ZdlPvj>
 8021a1a:	4620      	mov	r0, r4
 8021a1c:	bd10      	pop	{r4, pc}

08021a1e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8021a1e:	b510      	push	{r4, lr}
 8021a20:	4604      	mov	r4, r0
 8021a22:	2104      	movs	r1, #4
 8021a24:	f00a fdf3 	bl	802c60e <_ZdlPvj>
 8021a28:	4620      	mov	r0, r4
 8021a2a:	bd10      	pop	{r4, pc}

08021a2c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8021a2c:	b510      	push	{r4, lr}
 8021a2e:	4604      	mov	r4, r0
 8021a30:	2104      	movs	r1, #4
 8021a32:	f00a fdec 	bl	802c60e <_ZdlPvj>
 8021a36:	4620      	mov	r0, r4
 8021a38:	bd10      	pop	{r4, pc}

08021a3a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8021a3a:	b510      	push	{r4, lr}
 8021a3c:	4604      	mov	r4, r0
 8021a3e:	2104      	movs	r1, #4
 8021a40:	f00a fde5 	bl	802c60e <_ZdlPvj>
 8021a44:	4620      	mov	r0, r4
 8021a46:	bd10      	pop	{r4, pc}

08021a48 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8021a48:	b510      	push	{r4, lr}
 8021a4a:	4604      	mov	r4, r0
 8021a4c:	2104      	movs	r1, #4
 8021a4e:	f00a fdde 	bl	802c60e <_ZdlPvj>
 8021a52:	4620      	mov	r0, r4
 8021a54:	bd10      	pop	{r4, pc}

08021a56 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8021a56:	b510      	push	{r4, lr}
 8021a58:	4604      	mov	r4, r0
 8021a5a:	2104      	movs	r1, #4
 8021a5c:	f00a fdd7 	bl	802c60e <_ZdlPvj>
 8021a60:	4620      	mov	r0, r4
 8021a62:	bd10      	pop	{r4, pc}

08021a64 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8021a64:	b510      	push	{r4, lr}
 8021a66:	4604      	mov	r4, r0
 8021a68:	2104      	movs	r1, #4
 8021a6a:	f00a fdd0 	bl	802c60e <_ZdlPvj>
 8021a6e:	4620      	mov	r0, r4
 8021a70:	bd10      	pop	{r4, pc}

08021a72 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8021a72:	b510      	push	{r4, lr}
 8021a74:	4604      	mov	r4, r0
 8021a76:	2104      	movs	r1, #4
 8021a78:	f00a fdc9 	bl	802c60e <_ZdlPvj>
 8021a7c:	4620      	mov	r0, r4
 8021a7e:	bd10      	pop	{r4, pc}

08021a80 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8021a80:	b510      	push	{r4, lr}
 8021a82:	4604      	mov	r4, r0
 8021a84:	2104      	movs	r1, #4
 8021a86:	f00a fdc2 	bl	802c60e <_ZdlPvj>
 8021a8a:	4620      	mov	r0, r4
 8021a8c:	bd10      	pop	{r4, pc}

08021a8e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8021a8e:	b510      	push	{r4, lr}
 8021a90:	4604      	mov	r4, r0
 8021a92:	2104      	movs	r1, #4
 8021a94:	f00a fdbb 	bl	802c60e <_ZdlPvj>
 8021a98:	4620      	mov	r0, r4
 8021a9a:	bd10      	pop	{r4, pc}

08021a9c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8021a9c:	b510      	push	{r4, lr}
 8021a9e:	4604      	mov	r4, r0
 8021aa0:	2104      	movs	r1, #4
 8021aa2:	f00a fdb4 	bl	802c60e <_ZdlPvj>
 8021aa6:	4620      	mov	r0, r4
 8021aa8:	bd10      	pop	{r4, pc}

08021aaa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8021aaa:	b510      	push	{r4, lr}
 8021aac:	4604      	mov	r4, r0
 8021aae:	2104      	movs	r1, #4
 8021ab0:	f00a fdad 	bl	802c60e <_ZdlPvj>
 8021ab4:	4620      	mov	r0, r4
 8021ab6:	bd10      	pop	{r4, pc}

08021ab8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8021ab8:	b510      	push	{r4, lr}
 8021aba:	4604      	mov	r4, r0
 8021abc:	2104      	movs	r1, #4
 8021abe:	f00a fda6 	bl	802c60e <_ZdlPvj>
 8021ac2:	4620      	mov	r0, r4
 8021ac4:	bd10      	pop	{r4, pc}

08021ac6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8021ac6:	b510      	push	{r4, lr}
 8021ac8:	4604      	mov	r4, r0
 8021aca:	2104      	movs	r1, #4
 8021acc:	f00a fd9f 	bl	802c60e <_ZdlPvj>
 8021ad0:	4620      	mov	r0, r4
 8021ad2:	bd10      	pop	{r4, pc}

08021ad4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8021ad4:	b510      	push	{r4, lr}
 8021ad6:	4604      	mov	r4, r0
 8021ad8:	2104      	movs	r1, #4
 8021ada:	f00a fd98 	bl	802c60e <_ZdlPvj>
 8021ade:	4620      	mov	r0, r4
 8021ae0:	bd10      	pop	{r4, pc}

08021ae2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 8021ae2:	b510      	push	{r4, lr}
 8021ae4:	4604      	mov	r4, r0
 8021ae6:	2104      	movs	r1, #4
 8021ae8:	f00a fd91 	bl	802c60e <_ZdlPvj>
 8021aec:	4620      	mov	r0, r4
 8021aee:	bd10      	pop	{r4, pc}

08021af0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8021af0:	b510      	push	{r4, lr}
 8021af2:	4604      	mov	r4, r0
 8021af4:	2104      	movs	r1, #4
 8021af6:	f00a fd8a 	bl	802c60e <_ZdlPvj>
 8021afa:	4620      	mov	r0, r4
 8021afc:	bd10      	pop	{r4, pc}

08021afe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8021afe:	b510      	push	{r4, lr}
 8021b00:	4604      	mov	r4, r0
 8021b02:	2104      	movs	r1, #4
 8021b04:	f00a fd83 	bl	802c60e <_ZdlPvj>
 8021b08:	4620      	mov	r0, r4
 8021b0a:	bd10      	pop	{r4, pc}

08021b0c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8021b0c:	b510      	push	{r4, lr}
 8021b0e:	4604      	mov	r4, r0
 8021b10:	2104      	movs	r1, #4
 8021b12:	f00a fd7c 	bl	802c60e <_ZdlPvj>
 8021b16:	4620      	mov	r0, r4
 8021b18:	bd10      	pop	{r4, pc}

08021b1a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8021b1a:	b510      	push	{r4, lr}
 8021b1c:	4604      	mov	r4, r0
 8021b1e:	2104      	movs	r1, #4
 8021b20:	f00a fd75 	bl	802c60e <_ZdlPvj>
 8021b24:	4620      	mov	r0, r4
 8021b26:	bd10      	pop	{r4, pc}

08021b28 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8021b28:	b510      	push	{r4, lr}
 8021b2a:	4604      	mov	r4, r0
 8021b2c:	2104      	movs	r1, #4
 8021b2e:	f00a fd6e 	bl	802c60e <_ZdlPvj>
 8021b32:	4620      	mov	r0, r4
 8021b34:	bd10      	pop	{r4, pc}

08021b36 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8021b36:	b510      	push	{r4, lr}
 8021b38:	4604      	mov	r4, r0
 8021b3a:	2104      	movs	r1, #4
 8021b3c:	f00a fd67 	bl	802c60e <_ZdlPvj>
 8021b40:	4620      	mov	r0, r4
 8021b42:	bd10      	pop	{r4, pc}

08021b44 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8021b44:	b510      	push	{r4, lr}
 8021b46:	4604      	mov	r4, r0
 8021b48:	2104      	movs	r1, #4
 8021b4a:	f00a fd60 	bl	802c60e <_ZdlPvj>
 8021b4e:	4620      	mov	r0, r4
 8021b50:	bd10      	pop	{r4, pc}

08021b52 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8021b52:	b510      	push	{r4, lr}
 8021b54:	4604      	mov	r4, r0
 8021b56:	2104      	movs	r1, #4
 8021b58:	f00a fd59 	bl	802c60e <_ZdlPvj>
 8021b5c:	4620      	mov	r0, r4
 8021b5e:	bd10      	pop	{r4, pc}

08021b60 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 8021b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021b64:	b08f      	sub	sp, #60	; 0x3c
 8021b66:	461c      	mov	r4, r3
 8021b68:	9205      	str	r2, [sp, #20]
 8021b6a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8021b6e:	9100      	str	r1, [sp, #0]
 8021b70:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8021b72:	9201      	str	r2, [sp, #4]
 8021b74:	2a00      	cmp	r2, #0
 8021b76:	f000 8116 	beq.w	8021da6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x246>
 8021b7a:	6820      	ldr	r0, [r4, #0]
 8021b7c:	aa0a      	add	r2, sp, #40	; 0x28
 8021b7e:	6861      	ldr	r1, [r4, #4]
 8021b80:	c203      	stmia	r2!, {r0, r1}
 8021b82:	6818      	ldr	r0, [r3, #0]
 8021b84:	aa0c      	add	r2, sp, #48	; 0x30
 8021b86:	6859      	ldr	r1, [r3, #4]
 8021b88:	c203      	stmia	r2!, {r0, r1}
 8021b8a:	a80a      	add	r0, sp, #40	; 0x28
 8021b8c:	f7f9 fd74 	bl	801b678 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021b90:	4621      	mov	r1, r4
 8021b92:	a80c      	add	r0, sp, #48	; 0x30
 8021b94:	f7f9 fd98 	bl	801b6c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021b98:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 8021b9c:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	; 0x2e
 8021ba0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8021ba4:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 8021ba8:	bfdb      	ittet	le
 8021baa:	b2b3      	uxthle	r3, r6
 8021bac:	f44f 6280 	movle.w	r2, #1024	; 0x400
 8021bb0:	2301      	movgt	r3, #1
 8021bb2:	fb92 f3f3 	sdivle	r3, r2, r3
 8021bb6:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8021bba:	441d      	add	r5, r3
 8021bbc:	fb92 f1f3 	sdiv	r1, r2, r3
 8021bc0:	fa1f fc81 	uxth.w	ip, r1
 8021bc4:	3d01      	subs	r5, #1
 8021bc6:	fb0c 2413 	mls	r4, ip, r3, r2
 8021bca:	4661      	mov	r1, ip
 8021bcc:	fb14 f406 	smulbb	r4, r4, r6
 8021bd0:	4404      	add	r4, r0
 8021bd2:	fb95 f5f3 	sdiv	r5, r5, r3
 8021bd6:	b2a4      	uxth	r4, r4
 8021bd8:	b131      	cbz	r1, 8021be8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x88>
 8021bda:	9b05      	ldr	r3, [sp, #20]
 8021bdc:	9900      	ldr	r1, [sp, #0]
 8021bde:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8021be2:	ba1b      	rev	r3, r3
 8021be4:	4419      	add	r1, r3
 8021be6:	9100      	str	r1, [sp, #0]
 8021be8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8021bec:	b2ad      	uxth	r5, r5
 8021bee:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 8021bf2:	4418      	add	r0, r3
 8021bf4:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8021bf8:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 8021bfc:	00ad      	lsls	r5, r5, #2
 8021bfe:	441a      	add	r2, r3
 8021c00:	4b6a      	ldr	r3, [pc, #424]	; (8021dac <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>)
 8021c02:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 8021c06:	6818      	ldr	r0, [r3, #0]
 8021c08:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8021c0c:	6803      	ldr	r3, [r0, #0]
 8021c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021c10:	4798      	blx	r3
 8021c12:	4967      	ldr	r1, [pc, #412]	; (8021db0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x250>)
 8021c14:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8021c18:	2c00      	cmp	r4, #0
 8021c1a:	880b      	ldrh	r3, [r1, #0]
 8021c1c:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8021c20:	bf0c      	ite	eq
 8021c22:	46c6      	moveq	lr, r8
 8021c24:	f04f 0e00 	movne.w	lr, #0
 8021c28:	9109      	str	r1, [sp, #36]	; 0x24
 8021c2a:	fb03 c202 	mla	r2, r3, r2, ip
 8021c2e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8021c32:	4373      	muls	r3, r6
 8021c34:	fa1f fe8e 	uxth.w	lr, lr
 8021c38:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8021c3c:	9103      	str	r1, [sp, #12]
 8021c3e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8021c42:	9306      	str	r3, [sp, #24]
 8021c44:	1d2b      	adds	r3, r5, #4
 8021c46:	9307      	str	r3, [sp, #28]
 8021c48:	9b01      	ldr	r3, [sp, #4]
 8021c4a:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 8021c4e:	2300      	movs	r3, #0
 8021c50:	b292      	uxth	r2, r2
 8021c52:	9302      	str	r3, [sp, #8]
 8021c54:	9204      	str	r2, [sp, #16]
 8021c56:	9a06      	ldr	r2, [sp, #24]
 8021c58:	4282      	cmp	r2, r0
 8021c5a:	f240 809f 	bls.w	8021d9c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x23c>
 8021c5e:	b963      	cbnz	r3, 8021c7a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11a>
 8021c60:	9b00      	ldr	r3, [sp, #0]
 8021c62:	781a      	ldrb	r2, [r3, #0]
 8021c64:	0993      	lsrs	r3, r2, #6
 8021c66:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8021c6a:	9202      	str	r2, [sp, #8]
 8021c6c:	1e5a      	subs	r2, r3, #1
 8021c6e:	2a02      	cmp	r2, #2
 8021c70:	d815      	bhi.n	8021c9e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13e>
 8021c72:	9a00      	ldr	r2, [sp, #0]
 8021c74:	b29b      	uxth	r3, r3
 8021c76:	3201      	adds	r2, #1
 8021c78:	9200      	str	r2, [sp, #0]
 8021c7a:	b1b4      	cbz	r4, 8021caa <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x14a>
 8021c7c:	429c      	cmp	r4, r3
 8021c7e:	bf91      	iteee	ls
 8021c80:	1b1c      	subls	r4, r3, r4
 8021c82:	1ae4      	subhi	r4, r4, r3
 8021c84:	4671      	movhi	r1, lr
 8021c86:	f04f 0a00 	movhi.w	sl, #0
 8021c8a:	bf9b      	ittet	ls
 8021c8c:	fa1f fa84 	uxthls.w	sl, r4
 8021c90:	2400      	movls	r4, #0
 8021c92:	b2a4      	uxthhi	r4, r4
 8021c94:	fa1f f188 	uxthls.w	r1, r8
 8021c98:	4653      	mov	r3, sl
 8021c9a:	468e      	mov	lr, r1
 8021c9c:	e7db      	b.n	8021c56 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xf6>
 8021c9e:	9a00      	ldr	r2, [sp, #0]
 8021ca0:	9b00      	ldr	r3, [sp, #0]
 8021ca2:	3202      	adds	r2, #2
 8021ca4:	785b      	ldrb	r3, [r3, #1]
 8021ca6:	9200      	str	r2, [sp, #0]
 8021ca8:	e7e7      	b.n	8021c7a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11a>
 8021caa:	2202      	movs	r2, #2
 8021cac:	9907      	ldr	r1, [sp, #28]
 8021cae:	4573      	cmp	r3, lr
 8021cb0:	4615      	mov	r5, r2
 8021cb2:	9a02      	ldr	r2, [sp, #8]
 8021cb4:	bf24      	itt	cs
 8021cb6:	eba3 0a0e 	subcs.w	sl, r3, lr
 8021cba:	46f1      	movcs	r9, lr
 8021cbc:	fb15 1202 	smlabb	r2, r5, r2, r1
 8021cc0:	9905      	ldr	r1, [sp, #20]
 8021cc2:	bf34      	ite	cc
 8021cc4:	4699      	movcc	r9, r3
 8021cc6:	fa1f fa8a 	uxthcs.w	sl, sl
 8021cca:	f831 c002 	ldrh.w	ip, [r1, r2]
 8021cce:	bf38      	it	cc
 8021cd0:	ebae 0103 	subcc.w	r1, lr, r3
 8021cd4:	9a01      	ldr	r2, [sp, #4]
 8021cd6:	bf2e      	itee	cs
 8021cd8:	4621      	movcs	r1, r4
 8021cda:	b289      	uxthcc	r1, r1
 8021cdc:	46a2      	movcc	sl, r4
 8021cde:	2aff      	cmp	r2, #255	; 0xff
 8021ce0:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8021ce4:	d105      	bne.n	8021cf2 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x192>
 8021ce6:	4481      	add	r9, r0
 8021ce8:	4581      	cmp	r9, r0
 8021cea:	d045      	beq.n	8021d78 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x218>
 8021cec:	f820 cb02 	strh.w	ip, [r0], #2
 8021cf0:	e7fa      	b.n	8021ce8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x188>
 8021cf2:	ea4f 222c 	mov.w	r2, ip, asr #8
 8021cf6:	9d03      	ldr	r5, [sp, #12]
 8021cf8:	ea4f 0bec 	mov.w	fp, ip, asr #3
 8021cfc:	4481      	add	r9, r0
 8021cfe:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8021d02:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8021d06:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8021d0a:	fa5f fc8c 	uxtb.w	ip, ip
 8021d0e:	436a      	muls	r2, r5
 8021d10:	fb0b fb05 	mul.w	fp, fp, r5
 8021d14:	fb0c fc05 	mul.w	ip, ip, r5
 8021d18:	9208      	str	r2, [sp, #32]
 8021d1a:	4581      	cmp	r9, r0
 8021d1c:	d02c      	beq.n	8021d78 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x218>
 8021d1e:	8802      	ldrh	r2, [r0, #0]
 8021d20:	9d04      	ldr	r5, [sp, #16]
 8021d22:	1216      	asrs	r6, r2, #8
 8021d24:	9f04      	ldr	r7, [sp, #16]
 8021d26:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8021d2a:	fb16 f605 	smulbb	r6, r6, r5
 8021d2e:	9d08      	ldr	r5, [sp, #32]
 8021d30:	442e      	add	r6, r5
 8021d32:	10d5      	asrs	r5, r2, #3
 8021d34:	00d2      	lsls	r2, r2, #3
 8021d36:	b2b6      	uxth	r6, r6
 8021d38:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8021d3c:	b2d2      	uxtb	r2, r2
 8021d3e:	fb15 f507 	smulbb	r5, r5, r7
 8021d42:	fb12 f207 	smulbb	r2, r2, r7
 8021d46:	1c77      	adds	r7, r6, #1
 8021d48:	445d      	add	r5, fp
 8021d4a:	4462      	add	r2, ip
 8021d4c:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8021d50:	b2ad      	uxth	r5, r5
 8021d52:	b292      	uxth	r2, r2
 8021d54:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8021d58:	1c57      	adds	r7, r2, #1
 8021d5a:	eb07 2212 	add.w	r2, r7, r2, lsr #8
 8021d5e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8021d62:	4316      	orrs	r6, r2
 8021d64:	1c6a      	adds	r2, r5, #1
 8021d66:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 8021d6a:	096d      	lsrs	r5, r5, #5
 8021d6c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021d70:	432e      	orrs	r6, r5
 8021d72:	f820 6b02 	strh.w	r6, [r0], #2
 8021d76:	e7d0      	b.n	8021d1a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ba>
 8021d78:	4573      	cmp	r3, lr
 8021d7a:	d38d      	bcc.n	8021c98 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x138>
 8021d7c:	fa1f f188 	uxth.w	r1, r8
 8021d80:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8021d84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021d86:	1a64      	subs	r4, r4, r1
 8021d88:	881b      	ldrh	r3, [r3, #0]
 8021d8a:	b2a4      	uxth	r4, r4
 8021d8c:	eba3 0308 	sub.w	r3, r3, r8
 8021d90:	2c00      	cmp	r4, #0
 8021d92:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021d96:	bf18      	it	ne
 8021d98:	2100      	movne	r1, #0
 8021d9a:	e77d      	b.n	8021c98 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x138>
 8021d9c:	4b03      	ldr	r3, [pc, #12]	; (8021dac <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>)
 8021d9e:	6818      	ldr	r0, [r3, #0]
 8021da0:	6803      	ldr	r3, [r0, #0]
 8021da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021da4:	4798      	blx	r3
 8021da6:	b00f      	add	sp, #60	; 0x3c
 8021da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021dac:	2400baf0 	.word	0x2400baf0
 8021db0:	2400baea 	.word	0x2400baea

08021db4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 8021db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021db8:	b09f      	sub	sp, #124	; 0x7c
 8021dba:	461d      	mov	r5, r3
 8021dbc:	4604      	mov	r4, r0
 8021dbe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021dc0:	e9cd 1213 	strd	r1, r2, [sp, #76]	; 0x4c
 8021dc4:	f89d 20a4 	ldrb.w	r2, [sp, #164]	; 0xa4
 8021dc8:	9209      	str	r2, [sp, #36]	; 0x24
 8021dca:	2a00      	cmp	r2, #0
 8021dcc:	f000 81ed 	beq.w	80221aa <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3f6>
 8021dd0:	6828      	ldr	r0, [r5, #0]
 8021dd2:	aa1a      	add	r2, sp, #104	; 0x68
 8021dd4:	6869      	ldr	r1, [r5, #4]
 8021dd6:	c203      	stmia	r2!, {r0, r1}
 8021dd8:	6818      	ldr	r0, [r3, #0]
 8021dda:	aa1c      	add	r2, sp, #112	; 0x70
 8021ddc:	6859      	ldr	r1, [r3, #4]
 8021dde:	c203      	stmia	r2!, {r0, r1}
 8021de0:	a81a      	add	r0, sp, #104	; 0x68
 8021de2:	f7f9 fc49 	bl	801b678 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021de6:	4629      	mov	r1, r5
 8021de8:	a81c      	add	r0, sp, #112	; 0x70
 8021dea:	f7f9 fc6d 	bl	801b6c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021dee:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 8021df2:	f9bd 806e 	ldrsh.w	r8, [sp, #110]	; 0x6e
 8021df6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8021dfa:	f9bd 6076 	ldrsh.w	r6, [sp, #118]	; 0x76
 8021dfe:	bfdb      	ittet	le
 8021e00:	b29a      	uxthle	r2, r3
 8021e02:	f44f 6180 	movle.w	r1, #1024	; 0x400
 8021e06:	2201      	movgt	r2, #1
 8021e08:	fb91 f2f2 	sdivle	r2, r1, r2
 8021e0c:	9202      	str	r2, [sp, #8]
 8021e0e:	9802      	ldr	r0, [sp, #8]
 8021e10:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	; 0x72
 8021e14:	9902      	ldr	r1, [sp, #8]
 8021e16:	fb92 f0f0 	sdiv	r0, r2, r0
 8021e1a:	b280      	uxth	r0, r0
 8021e1c:	4488      	add	r8, r1
 8021e1e:	9010      	str	r0, [sp, #64]	; 0x40
 8021e20:	f108 38ff 	add.w	r8, r8, #4294967295
 8021e24:	9802      	ldr	r0, [sp, #8]
 8021e26:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8021e28:	fb05 2510 	mls	r5, r5, r0, r2
 8021e2c:	fb98 f8f1 	sdiv	r8, r8, r1
 8021e30:	fb15 f503 	smulbb	r5, r5, r3
 8021e34:	f8bd 1070 	ldrh.w	r1, [sp, #112]	; 0x70
 8021e38:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8021e3c:	f108 0801 	add.w	r8, r8, #1
 8021e40:	440d      	add	r5, r1
 8021e42:	4419      	add	r1, r3
 8021e44:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
 8021e48:	fa1f f888 	uxth.w	r8, r8
 8021e4c:	441a      	add	r2, r3
 8021e4e:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	; 0x74
 8021e52:	f8ad 1070 	strh.w	r1, [sp, #112]	; 0x70
 8021e56:	b2ad      	uxth	r5, r5
 8021e58:	9304      	str	r3, [sp, #16]
 8021e5a:	4b94      	ldr	r3, [pc, #592]	; (80220ac <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2f8>)
 8021e5c:	f8ad 2072 	strh.w	r2, [sp, #114]	; 0x72
 8021e60:	6818      	ldr	r0, [r3, #0]
 8021e62:	6803      	ldr	r3, [r0, #0]
 8021e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021e66:	4798      	blx	r3
 8021e68:	4b91      	ldr	r3, [pc, #580]	; (80220b0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2fc>)
 8021e6a:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	; 0x72
 8021e6e:	2d00      	cmp	r5, #0
 8021e70:	881a      	ldrh	r2, [r3, #0]
 8021e72:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 8021e76:	fb02 f606 	mul.w	r6, r2, r6
 8021e7a:	fb02 7101 	mla	r1, r2, r1, r7
 8021e7e:	9318      	str	r3, [sp, #96]	; 0x60
 8021e80:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8021e84:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8021e88:	f04f 0100 	mov.w	r1, #0
 8021e8c:	eb00 0246 	add.w	r2, r0, r6, lsl #1
 8021e90:	930f      	str	r3, [sp, #60]	; 0x3c
 8021e92:	4b88      	ldr	r3, [pc, #544]	; (80220b4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x300>)
 8021e94:	920a      	str	r2, [sp, #40]	; 0x28
 8021e96:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021e98:	eba3 0304 	sub.w	r3, r3, r4
 8021e9c:	910d      	str	r1, [sp, #52]	; 0x34
 8021e9e:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 8021ea2:	9319      	str	r3, [sp, #100]	; 0x64
 8021ea4:	f108 0204 	add.w	r2, r8, #4
 8021ea8:	9211      	str	r2, [sp, #68]	; 0x44
 8021eaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021eac:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8021eb0:	9215      	str	r2, [sp, #84]	; 0x54
 8021eb2:	9a04      	ldr	r2, [sp, #16]
 8021eb4:	bf18      	it	ne
 8021eb6:	2200      	movne	r2, #0
 8021eb8:	b292      	uxth	r2, r2
 8021eba:	9910      	ldr	r1, [sp, #64]	; 0x40
 8021ebc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021ebe:	fa11 f383 	uxtah	r3, r1, r3
 8021ec2:	9914      	ldr	r1, [sp, #80]	; 0x50
 8021ec4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8021ec8:	3304      	adds	r3, #4
 8021eca:	9306      	str	r3, [sp, #24]
 8021ecc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021ece:	4283      	cmp	r3, r0
 8021ed0:	f240 8166 	bls.w	80221a0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3ec>
 8021ed4:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 8021ed8:	f04f 0a01 	mov.w	sl, #1
 8021edc:	9902      	ldr	r1, [sp, #8]
 8021ede:	9e06      	ldr	r6, [sp, #24]
 8021ee0:	46d3      	mov	fp, sl
 8021ee2:	4657      	mov	r7, sl
 8021ee4:	7836      	ldrb	r6, [r6, #0]
 8021ee6:	fbb5 f3f3 	udiv	r3, r5, r3
 8021eea:	1acb      	subs	r3, r1, r3
 8021eec:	9612      	str	r6, [sp, #72]	; 0x48
 8021eee:	3601      	adds	r6, #1
 8021ef0:	b29b      	uxth	r3, r3
 8021ef2:	9605      	str	r6, [sp, #20]
 8021ef4:	9316      	str	r3, [sp, #88]	; 0x58
 8021ef6:	9b06      	ldr	r3, [sp, #24]
 8021ef8:	7859      	ldrb	r1, [r3, #1]
 8021efa:	789b      	ldrb	r3, [r3, #2]
 8021efc:	021b      	lsls	r3, r3, #8
 8021efe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8021f02:	9906      	ldr	r1, [sp, #24]
 8021f04:	78c9      	ldrb	r1, [r1, #3]
 8021f06:	430b      	orrs	r3, r1
 8021f08:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8021f0a:	4419      	add	r1, r3
 8021f0c:	1c4e      	adds	r6, r1, #1
 8021f0e:	7849      	ldrb	r1, [r1, #1]
 8021f10:	9603      	str	r6, [sp, #12]
 8021f12:	0209      	lsls	r1, r1, #8
 8021f14:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8021f16:	f401 71ff 	and.w	r1, r1, #510	; 0x1fe
 8021f1a:	5cf3      	ldrb	r3, [r6, r3]
 8021f1c:	4319      	orrs	r1, r3
 8021f1e:	b28b      	uxth	r3, r1
 8021f20:	f884 1804 	strb.w	r1, [r4, #2052]	; 0x804
 8021f24:	930c      	str	r3, [sp, #48]	; 0x30
 8021f26:	2300      	movs	r3, #0
 8021f28:	9307      	str	r3, [sp, #28]
 8021f2a:	469c      	mov	ip, r3
 8021f2c:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8021f30:	930e      	str	r3, [sp, #56]	; 0x38
 8021f32:	2d00      	cmp	r5, #0
 8021f34:	d07e      	beq.n	8022034 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x280>
 8021f36:	42af      	cmp	r7, r5
 8021f38:	d26e      	bcs.n	8022018 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x264>
 8021f3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021f3c:	1bed      	subs	r5, r5, r7
 8021f3e:	9201      	str	r2, [sp, #4]
 8021f40:	4283      	cmp	r3, r0
 8021f42:	b2ad      	uxth	r5, r5
 8021f44:	d802      	bhi.n	8021f4c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x198>
 8021f46:	e073      	b.n	8022030 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x27c>
 8021f48:	2b00      	cmp	r3, #0
 8021f4a:	d15f      	bne.n	802200c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x258>
 8021f4c:	9b03      	ldr	r3, [sp, #12]
 8021f4e:	f1cb 0207 	rsb	r2, fp, #7
 8021f52:	785b      	ldrb	r3, [r3, #1]
 8021f54:	4093      	lsls	r3, r2
 8021f56:	005b      	lsls	r3, r3, #1
 8021f58:	f403 72ff 	and.w	r2, r3, #510	; 0x1fe
 8021f5c:	9b03      	ldr	r3, [sp, #12]
 8021f5e:	781b      	ldrb	r3, [r3, #0]
 8021f60:	fa43 f30b 	asr.w	r3, r3, fp
 8021f64:	b2db      	uxtb	r3, r3
 8021f66:	4313      	orrs	r3, r2
 8021f68:	f10b 0201 	add.w	r2, fp, #1
 8021f6c:	fa5f fb82 	uxtb.w	fp, r2
 8021f70:	9a03      	ldr	r2, [sp, #12]
 8021f72:	b29f      	uxth	r7, r3
 8021f74:	f1bb 0f08 	cmp.w	fp, #8
 8021f78:	bf13      	iteet	ne
 8021f7a:	3201      	addne	r2, #1
 8021f7c:	3202      	addeq	r2, #2
 8021f7e:	f04f 0b00 	moveq.w	fp, #0
 8021f82:	9203      	strne	r2, [sp, #12]
 8021f84:	bf08      	it	eq
 8021f86:	9203      	streq	r2, [sp, #12]
 8021f88:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021f8a:	42ba      	cmp	r2, r7
 8021f8c:	d309      	bcc.n	8021fa2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ee>
 8021f8e:	f884 3804 	strb.w	r3, [r4, #2052]	; 0x804
 8021f92:	2301      	movs	r3, #1
 8021f94:	9a05      	ldr	r2, [sp, #20]
 8021f96:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8021f9a:	d30e      	bcc.n	8021fba <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x206>
 8021f9c:	469a      	mov	sl, r3
 8021f9e:	2600      	movs	r6, #0
 8021fa0:	e035      	b.n	802200e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x25a>
 8021fa2:	9b05      	ldr	r3, [sp, #20]
 8021fa4:	429f      	cmp	r7, r3
 8021fa6:	d318      	bcc.n	8021fda <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x226>
 8021fa8:	eb04 030a 	add.w	r3, r4, sl
 8021fac:	f894 2804 	ldrb.w	r2, [r4, #2052]	; 0x804
 8021fb0:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
 8021fb4:	f10a 0301 	add.w	r3, sl, #1
 8021fb8:	b29b      	uxth	r3, r3
 8021fba:	9a05      	ldr	r2, [sp, #20]
 8021fbc:	f894 6804 	ldrb.w	r6, [r4, #2052]	; 0x804
 8021fc0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8021fc4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8021fc6:	7116      	strb	r6, [r2, #4]
 8021fc8:	f10a 0601 	add.w	r6, sl, #1
 8021fcc:	80d1      	strh	r1, [r2, #6]
 8021fce:	7156      	strb	r6, [r2, #5]
 8021fd0:	9a05      	ldr	r2, [sp, #20]
 8021fd2:	3201      	adds	r2, #1
 8021fd4:	b292      	uxth	r2, r2
 8021fd6:	9205      	str	r2, [sp, #20]
 8021fd8:	e7e0      	b.n	8021f9c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e8>
 8021fda:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 8021fde:	463a      	mov	r2, r7
 8021fe0:	795b      	ldrb	r3, [r3, #5]
 8021fe2:	f603 0604 	addw	r6, r3, #2052	; 0x804
 8021fe6:	4426      	add	r6, r4
 8021fe8:	9919      	ldr	r1, [sp, #100]	; 0x64
 8021fea:	eb01 0c06 	add.w	ip, r1, r6
 8021fee:	f1bc 0f00 	cmp.w	ip, #0
 8021ff2:	dd07      	ble.n	8022004 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x250>
 8021ff4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8021ff8:	f892 c004 	ldrb.w	ip, [r2, #4]
 8021ffc:	f806 cd01 	strb.w	ip, [r6, #-1]!
 8022000:	88d2      	ldrh	r2, [r2, #6]
 8022002:	e7f1      	b.n	8021fe8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x234>
 8022004:	f884 2804 	strb.w	r2, [r4, #2052]	; 0x804
 8022008:	b29b      	uxth	r3, r3
 802200a:	e7c3      	b.n	8021f94 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e0>
 802200c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 802200e:	970c      	str	r7, [sp, #48]	; 0x30
 8022010:	46b4      	mov	ip, r6
 8022012:	9a01      	ldr	r2, [sp, #4]
 8022014:	461f      	mov	r7, r3
 8022016:	e78c      	b.n	8021f32 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x17e>
 8022018:	1b7b      	subs	r3, r7, r5
 802201a:	eb0c 0605 	add.w	r6, ip, r5
 802201e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8022022:	b29b      	uxth	r3, r3
 8022024:	b2b6      	uxth	r6, r6
 8022026:	9201      	str	r2, [sp, #4]
 8022028:	2500      	movs	r5, #0
 802202a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802202c:	4282      	cmp	r2, r0
 802202e:	d88b      	bhi.n	8021f48 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x194>
 8022030:	9a01      	ldr	r2, [sp, #4]
 8022032:	e74b      	b.n	8021ecc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x118>
 8022034:	4297      	cmp	r7, r2
 8022036:	d332      	bcc.n	802209e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2ea>
 8022038:	1abb      	subs	r3, r7, r2
 802203a:	9208      	str	r2, [sp, #32]
 802203c:	9501      	str	r5, [sp, #4]
 802203e:	b29b      	uxth	r3, r3
 8022040:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022042:	29ff      	cmp	r1, #255	; 0xff
 8022044:	9908      	ldr	r1, [sp, #32]
 8022046:	eb0c 0601 	add.w	r6, ip, r1
 802204a:	d135      	bne.n	80220b8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x304>
 802204c:	f1a0 0e02 	sub.w	lr, r0, #2
 8022050:	b2b6      	uxth	r6, r6
 8022052:	45b4      	cmp	ip, r6
 8022054:	f040 808c 	bne.w	8022170 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3bc>
 8022058:	9908      	ldr	r1, [sp, #32]
 802205a:	4297      	cmp	r7, r2
 802205c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8022060:	d3e2      	bcc.n	8022028 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x274>
 8022062:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8022064:	9904      	ldr	r1, [sp, #16]
 8022066:	8812      	ldrh	r2, [r2, #0]
 8022068:	1a52      	subs	r2, r2, r1
 802206a:	9916      	ldr	r1, [sp, #88]	; 0x58
 802206c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8022070:	9a07      	ldr	r2, [sp, #28]
 8022072:	3201      	adds	r2, #1
 8022074:	428a      	cmp	r2, r1
 8022076:	9207      	str	r2, [sp, #28]
 8022078:	f040 8087 	bne.w	802218a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3d6>
 802207c:	f8bd 5070 	ldrh.w	r5, [sp, #112]	; 0x70
 8022080:	f8bd 7068 	ldrh.w	r7, [sp, #104]	; 0x68
 8022084:	9b04      	ldr	r3, [sp, #16]
 8022086:	1bed      	subs	r5, r5, r7
 8022088:	b2ad      	uxth	r5, r5
 802208a:	2d00      	cmp	r5, #0
 802208c:	bf08      	it	eq
 802208e:	461a      	moveq	r2, r3
 8022090:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022092:	bf18      	it	ne
 8022094:	2200      	movne	r2, #0
 8022096:	3301      	adds	r3, #1
 8022098:	b292      	uxth	r2, r2
 802209a:	930d      	str	r3, [sp, #52]	; 0x34
 802209c:	e70d      	b.n	8021eba <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x106>
 802209e:	1bd1      	subs	r1, r2, r7
 80220a0:	9708      	str	r7, [sp, #32]
 80220a2:	b28b      	uxth	r3, r1
 80220a4:	9301      	str	r3, [sp, #4]
 80220a6:	462b      	mov	r3, r5
 80220a8:	e7ca      	b.n	8022040 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x28c>
 80220aa:	bf00      	nop
 80220ac:	2400baf0 	.word	0x2400baf0
 80220b0:	2400baea 	.word	0x2400baea
 80220b4:	fffff7fb 	.word	0xfffff7fb
 80220b8:	b2b6      	uxth	r6, r6
 80220ba:	900b      	str	r0, [sp, #44]	; 0x2c
 80220bc:	45b4      	cmp	ip, r6
 80220be:	d0cb      	beq.n	8022058 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2a4>
 80220c0:	f10c 0101 	add.w	r1, ip, #1
 80220c4:	44a4      	add	ip, r4
 80220c6:	9117      	str	r1, [sp, #92]	; 0x5c
 80220c8:	f89c 5804 	ldrb.w	r5, [ip, #2052]	; 0x804
 80220cc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80220ce:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
 80220d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80220d4:	ea4f 2825 	mov.w	r8, r5, asr #8
 80220d8:	f8b1 c000 	ldrh.w	ip, [r1]
 80220dc:	990e      	ldr	r1, [sp, #56]	; 0x38
 80220de:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 80220e2:	ea4f 2e2c 	mov.w	lr, ip, asr #8
 80220e6:	ea4f 09ec 	mov.w	r9, ip, asr #3
 80220ea:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 80220ee:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80220f2:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 80220f6:	fb1e fe01 	smulbb	lr, lr, r1
 80220fa:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80220fc:	fa5f fc8c 	uxtb.w	ip, ip
 8022100:	fb08 e801 	mla	r8, r8, r1, lr
 8022104:	ea4f 0ee5 	mov.w	lr, r5, asr #3
 8022108:	990e      	ldr	r1, [sp, #56]	; 0x38
 802210a:	00ed      	lsls	r5, r5, #3
 802210c:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8022110:	fa1f f888 	uxth.w	r8, r8
 8022114:	fb19 f901 	smulbb	r9, r9, r1
 8022118:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802211a:	b2ed      	uxtb	r5, r5
 802211c:	fb0e 9e01 	mla	lr, lr, r1, r9
 8022120:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022122:	fb1c fc01 	smulbb	ip, ip, r1
 8022126:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8022128:	fa1f fe8e 	uxth.w	lr, lr
 802212c:	fb05 c501 	mla	r5, r5, r1, ip
 8022130:	f108 0c01 	add.w	ip, r8, #1
 8022134:	f10e 0901 	add.w	r9, lr, #1
 8022138:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802213a:	b2ad      	uxth	r5, r5
 802213c:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8022140:	f105 0c01 	add.w	ip, r5, #1
 8022144:	eb09 291e 	add.w	r9, r9, lr, lsr #8
 8022148:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 802214c:	eb0c 2c15 	add.w	ip, ip, r5, lsr #8
 8022150:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8022154:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8022158:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 802215c:	ea4c 0808 	orr.w	r8, ip, r8
 8022160:	f8bd c05c 	ldrh.w	ip, [sp, #92]	; 0x5c
 8022164:	ea48 0809 	orr.w	r8, r8, r9
 8022168:	f821 8b02 	strh.w	r8, [r1], #2
 802216c:	910b      	str	r1, [sp, #44]	; 0x2c
 802216e:	e7a5      	b.n	80220bc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x308>
 8022170:	f10c 0801 	add.w	r8, ip, #1
 8022174:	44a4      	add	ip, r4
 8022176:	9911      	ldr	r1, [sp, #68]	; 0x44
 8022178:	f89c 5804 	ldrb.w	r5, [ip, #2052]	; 0x804
 802217c:	fa1f fc88 	uxth.w	ip, r8
 8022180:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
 8022184:	f82e 5f02 	strh.w	r5, [lr, #2]!
 8022188:	e763      	b.n	8022052 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x29e>
 802218a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 802218e:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 8022192:	1aad      	subs	r5, r5, r2
 8022194:	b2ad      	uxth	r5, r5
 8022196:	2d00      	cmp	r5, #0
 8022198:	bf18      	it	ne
 802219a:	2200      	movne	r2, #0
 802219c:	9201      	str	r2, [sp, #4]
 802219e:	e744      	b.n	802202a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x276>
 80221a0:	4b03      	ldr	r3, [pc, #12]	; (80221b0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3fc>)
 80221a2:	6818      	ldr	r0, [r3, #0]
 80221a4:	6803      	ldr	r3, [r0, #0]
 80221a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80221a8:	4798      	blx	r3
 80221aa:	b01f      	add	sp, #124	; 0x7c
 80221ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80221b0:	2400baf0 	.word	0x2400baf0

080221b4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 80221b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80221b8:	b08f      	sub	sp, #60	; 0x3c
 80221ba:	461c      	mov	r4, r3
 80221bc:	460f      	mov	r7, r1
 80221be:	9203      	str	r2, [sp, #12]
 80221c0:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80221c4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80221c6:	9202      	str	r2, [sp, #8]
 80221c8:	2a00      	cmp	r2, #0
 80221ca:	f000 8128 	beq.w	802241e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 80221ce:	6820      	ldr	r0, [r4, #0]
 80221d0:	aa0a      	add	r2, sp, #40	; 0x28
 80221d2:	6861      	ldr	r1, [r4, #4]
 80221d4:	c203      	stmia	r2!, {r0, r1}
 80221d6:	6818      	ldr	r0, [r3, #0]
 80221d8:	aa0c      	add	r2, sp, #48	; 0x30
 80221da:	6859      	ldr	r1, [r3, #4]
 80221dc:	c203      	stmia	r2!, {r0, r1}
 80221de:	a80a      	add	r0, sp, #40	; 0x28
 80221e0:	f7f9 fa4a 	bl	801b678 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80221e4:	4621      	mov	r1, r4
 80221e6:	a80c      	add	r0, sp, #48	; 0x30
 80221e8:	f7f9 fa6e 	bl	801b6c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80221ec:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 80221f0:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	; 0x2e
 80221f4:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80221f8:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 80221fc:	bfdb      	ittet	le
 80221fe:	b2b3      	uxthle	r3, r6
 8022200:	f44f 6280 	movle.w	r2, #1024	; 0x400
 8022204:	2301      	movgt	r3, #1
 8022206:	fb92 f3f3 	sdivle	r3, r2, r3
 802220a:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 802220e:	441d      	add	r5, r3
 8022210:	fb92 f1f3 	sdiv	r1, r2, r3
 8022214:	fa1f fc81 	uxth.w	ip, r1
 8022218:	3d01      	subs	r5, #1
 802221a:	fb0c 2413 	mls	r4, ip, r3, r2
 802221e:	4661      	mov	r1, ip
 8022220:	fb14 f406 	smulbb	r4, r4, r6
 8022224:	4404      	add	r4, r0
 8022226:	fb95 f5f3 	sdiv	r5, r5, r3
 802222a:	b2a4      	uxth	r4, r4
 802222c:	b121      	cbz	r1, 8022238 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x84>
 802222e:	9b03      	ldr	r3, [sp, #12]
 8022230:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8022234:	ba1b      	rev	r3, r3
 8022236:	441f      	add	r7, r3
 8022238:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 802223c:	b2ad      	uxth	r5, r5
 802223e:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8022242:	4418      	add	r0, r3
 8022244:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8022248:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 802224c:	00ad      	lsls	r5, r5, #2
 802224e:	441a      	add	r2, r3
 8022250:	4b74      	ldr	r3, [pc, #464]	; (8022424 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x270>)
 8022252:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 8022256:	6818      	ldr	r0, [r3, #0]
 8022258:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 802225c:	6803      	ldr	r3, [r0, #0]
 802225e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022260:	4798      	blx	r3
 8022262:	4a71      	ldr	r2, [pc, #452]	; (8022428 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x274>)
 8022264:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 8022268:	2c00      	cmp	r4, #0
 802226a:	8813      	ldrh	r3, [r2, #0]
 802226c:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8022270:	bf0c      	ite	eq
 8022272:	46c8      	moveq	r8, r9
 8022274:	f04f 0800 	movne.w	r8, #0
 8022278:	9209      	str	r2, [sp, #36]	; 0x24
 802227a:	fb03 c101 	mla	r1, r3, r1, ip
 802227e:	4373      	muls	r3, r6
 8022280:	fa1f f888 	uxth.w	r8, r8
 8022284:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8022288:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 802228c:	9304      	str	r3, [sp, #16]
 802228e:	1d2b      	adds	r3, r5, #4
 8022290:	9305      	str	r3, [sp, #20]
 8022292:	2300      	movs	r3, #0
 8022294:	9301      	str	r3, [sp, #4]
 8022296:	9a04      	ldr	r2, [sp, #16]
 8022298:	4282      	cmp	r2, r0
 802229a:	f240 80bb 	bls.w	8022414 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 802229e:	b95b      	cbnz	r3, 80222b8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x104>
 80222a0:	783a      	ldrb	r2, [r7, #0]
 80222a2:	0993      	lsrs	r3, r2, #6
 80222a4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80222a8:	9201      	str	r2, [sp, #4]
 80222aa:	1e5a      	subs	r2, r3, #1
 80222ac:	2a02      	cmp	r2, #2
 80222ae:	bf8d      	iteet	hi
 80222b0:	787b      	ldrbhi	r3, [r7, #1]
 80222b2:	3701      	addls	r7, #1
 80222b4:	b29b      	uxthls	r3, r3
 80222b6:	3702      	addhi	r7, #2
 80222b8:	b184      	cbz	r4, 80222dc <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x128>
 80222ba:	429c      	cmp	r4, r3
 80222bc:	bf91      	iteee	ls
 80222be:	1b1c      	subls	r4, r3, r4
 80222c0:	1ae4      	subhi	r4, r4, r3
 80222c2:	46c4      	movhi	ip, r8
 80222c4:	f04f 0a00 	movhi.w	sl, #0
 80222c8:	bf9b      	ittet	ls
 80222ca:	fa1f fa84 	uxthls.w	sl, r4
 80222ce:	2400      	movls	r4, #0
 80222d0:	b2a4      	uxthhi	r4, r4
 80222d2:	fa1f fc89 	uxthls.w	ip, r9
 80222d6:	4653      	mov	r3, sl
 80222d8:	46e0      	mov	r8, ip
 80222da:	e7dc      	b.n	8022296 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xe2>
 80222dc:	2204      	movs	r2, #4
 80222de:	9905      	ldr	r1, [sp, #20]
 80222e0:	4543      	cmp	r3, r8
 80222e2:	4615      	mov	r5, r2
 80222e4:	9a01      	ldr	r2, [sp, #4]
 80222e6:	bf24      	itt	cs
 80222e8:	eba3 0a08 	subcs.w	sl, r3, r8
 80222ec:	46c6      	movcs	lr, r8
 80222ee:	fb15 1202 	smlabb	r2, r5, r2, r1
 80222f2:	9903      	ldr	r1, [sp, #12]
 80222f4:	bf3c      	itt	cc
 80222f6:	eba8 0c03 	subcc.w	ip, r8, r3
 80222fa:	469e      	movcc	lr, r3
 80222fc:	588a      	ldr	r2, [r1, r2]
 80222fe:	bf26      	itte	cs
 8022300:	fa1f fa8a 	uxthcs.w	sl, sl
 8022304:	46a4      	movcs	ip, r4
 8022306:	fa1f fc8c 	uxthcc.w	ip, ip
 802230a:	ea4f 6112 	mov.w	r1, r2, lsr #24
 802230e:	bf38      	it	cc
 8022310:	46a2      	movcc	sl, r4
 8022312:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8022316:	2900      	cmp	r1, #0
 8022318:	d066      	beq.n	80223e8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x234>
 802231a:	29ff      	cmp	r1, #255	; 0xff
 802231c:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8022320:	d114      	bne.n	802234c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x198>
 8022322:	9d02      	ldr	r5, [sp, #8]
 8022324:	2dff      	cmp	r5, #255	; 0xff
 8022326:	d111      	bne.n	802234c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x198>
 8022328:	0951      	lsrs	r1, r2, #5
 802232a:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 802232e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8022332:	4486      	add	lr, r0
 8022334:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022338:	f026 0607 	bic.w	r6, r6, #7
 802233c:	430e      	orrs	r6, r1
 802233e:	4316      	orrs	r6, r2
 8022340:	b2b6      	uxth	r6, r6
 8022342:	4586      	cmp	lr, r0
 8022344:	d051      	beq.n	80223ea <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 8022346:	f820 6b02 	strh.w	r6, [r0], #2
 802234a:	e7fa      	b.n	8022342 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 802234c:	9d02      	ldr	r5, [sp, #8]
 802234e:	b2f6      	uxtb	r6, r6
 8022350:	4486      	add	lr, r0
 8022352:	4369      	muls	r1, r5
 8022354:	1c4d      	adds	r5, r1, #1
 8022356:	eb05 2521 	add.w	r5, r5, r1, asr #8
 802235a:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802235e:	b2d2      	uxtb	r2, r2
 8022360:	122d      	asrs	r5, r5, #8
 8022362:	ea6f 0b05 	mvn.w	fp, r5
 8022366:	b2ad      	uxth	r5, r5
 8022368:	fb11 f105 	smulbb	r1, r1, r5
 802236c:	fa5f fb8b 	uxtb.w	fp, fp
 8022370:	fb16 f605 	smulbb	r6, r6, r5
 8022374:	fb12 f205 	smulbb	r2, r2, r5
 8022378:	b289      	uxth	r1, r1
 802237a:	b2b6      	uxth	r6, r6
 802237c:	b292      	uxth	r2, r2
 802237e:	9106      	str	r1, [sp, #24]
 8022380:	9607      	str	r6, [sp, #28]
 8022382:	9208      	str	r2, [sp, #32]
 8022384:	4586      	cmp	lr, r0
 8022386:	d030      	beq.n	80223ea <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 8022388:	8802      	ldrh	r2, [r0, #0]
 802238a:	9906      	ldr	r1, [sp, #24]
 802238c:	1216      	asrs	r6, r2, #8
 802238e:	10d5      	asrs	r5, r2, #3
 8022390:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8022394:	00d2      	lsls	r2, r2, #3
 8022396:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802239a:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 802239e:	b2d2      	uxtb	r2, r2
 80223a0:	fb06 160b 	mla	r6, r6, fp, r1
 80223a4:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 80223a8:	9907      	ldr	r1, [sp, #28]
 80223aa:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80223ae:	b2b6      	uxth	r6, r6
 80223b0:	fb05 150b 	mla	r5, r5, fp, r1
 80223b4:	9908      	ldr	r1, [sp, #32]
 80223b6:	fb02 120b 	mla	r2, r2, fp, r1
 80223ba:	1c71      	adds	r1, r6, #1
 80223bc:	b2ad      	uxth	r5, r5
 80223be:	b292      	uxth	r2, r2
 80223c0:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 80223c4:	1c51      	adds	r1, r2, #1
 80223c6:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 80223ca:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80223ce:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80223d2:	4316      	orrs	r6, r2
 80223d4:	1c6a      	adds	r2, r5, #1
 80223d6:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 80223da:	096d      	lsrs	r5, r5, #5
 80223dc:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80223e0:	432e      	orrs	r6, r5
 80223e2:	f820 6b02 	strh.w	r6, [r0], #2
 80223e6:	e7cd      	b.n	8022384 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d0>
 80223e8:	4470      	add	r0, lr
 80223ea:	4543      	cmp	r3, r8
 80223ec:	f4ff af73 	bcc.w	80222d6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 80223f0:	fa1f fc89 	uxth.w	ip, r9
 80223f4:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 80223f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80223fa:	eba4 040c 	sub.w	r4, r4, ip
 80223fe:	881b      	ldrh	r3, [r3, #0]
 8022400:	b2a4      	uxth	r4, r4
 8022402:	eba3 0309 	sub.w	r3, r3, r9
 8022406:	2c00      	cmp	r4, #0
 8022408:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802240c:	bf18      	it	ne
 802240e:	f04f 0c00 	movne.w	ip, #0
 8022412:	e760      	b.n	80222d6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 8022414:	4b03      	ldr	r3, [pc, #12]	; (8022424 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x270>)
 8022416:	6818      	ldr	r0, [r3, #0]
 8022418:	6803      	ldr	r3, [r0, #0]
 802241a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802241c:	4798      	blx	r3
 802241e:	b00f      	add	sp, #60	; 0x3c
 8022420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022424:	2400baf0 	.word	0x2400baf0
 8022428:	2400baea 	.word	0x2400baea

0802242c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 802242c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022430:	b093      	sub	sp, #76	; 0x4c
 8022432:	461c      	mov	r4, r3
 8022434:	9205      	str	r2, [sp, #20]
 8022436:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 802243a:	9101      	str	r1, [sp, #4]
 802243c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802243e:	9202      	str	r2, [sp, #8]
 8022440:	2a00      	cmp	r2, #0
 8022442:	f000 812e 	beq.w	80226a2 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x276>
 8022446:	6820      	ldr	r0, [r4, #0]
 8022448:	aa0e      	add	r2, sp, #56	; 0x38
 802244a:	6861      	ldr	r1, [r4, #4]
 802244c:	c203      	stmia	r2!, {r0, r1}
 802244e:	6818      	ldr	r0, [r3, #0]
 8022450:	aa10      	add	r2, sp, #64	; 0x40
 8022452:	6859      	ldr	r1, [r3, #4]
 8022454:	c203      	stmia	r2!, {r0, r1}
 8022456:	a80e      	add	r0, sp, #56	; 0x38
 8022458:	f7f9 f90e 	bl	801b678 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802245c:	4621      	mov	r1, r4
 802245e:	a810      	add	r0, sp, #64	; 0x40
 8022460:	f7f9 f932 	bl	801b6c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022464:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 8022468:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 802246c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8022470:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 8022474:	bfdb      	ittet	le
 8022476:	b2b3      	uxthle	r3, r6
 8022478:	f44f 6280 	movle.w	r2, #1024	; 0x400
 802247c:	2301      	movgt	r3, #1
 802247e:	fb92 f3f3 	sdivle	r3, r2, r3
 8022482:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 8022486:	441d      	add	r5, r3
 8022488:	fb92 f1f3 	sdiv	r1, r2, r3
 802248c:	fa1f fc81 	uxth.w	ip, r1
 8022490:	3d01      	subs	r5, #1
 8022492:	fb0c 2413 	mls	r4, ip, r3, r2
 8022496:	4661      	mov	r1, ip
 8022498:	fb14 f406 	smulbb	r4, r4, r6
 802249c:	4404      	add	r4, r0
 802249e:	fb95 f5f3 	sdiv	r5, r5, r3
 80224a2:	b2a4      	uxth	r4, r4
 80224a4:	b131      	cbz	r1, 80224b4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x88>
 80224a6:	9b05      	ldr	r3, [sp, #20]
 80224a8:	9901      	ldr	r1, [sp, #4]
 80224aa:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80224ae:	ba1b      	rev	r3, r3
 80224b0:	4419      	add	r1, r3
 80224b2:	9101      	str	r1, [sp, #4]
 80224b4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80224b8:	b2ad      	uxth	r5, r5
 80224ba:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 80224be:	4418      	add	r0, r3
 80224c0:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 80224c4:	f9bd 6046 	ldrsh.w	r6, [sp, #70]	; 0x46
 80224c8:	00ad      	lsls	r5, r5, #2
 80224ca:	441a      	add	r2, r3
 80224cc:	4b76      	ldr	r3, [pc, #472]	; (80226a8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>)
 80224ce:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 80224d2:	6818      	ldr	r0, [r3, #0]
 80224d4:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 80224d8:	6803      	ldr	r3, [r0, #0]
 80224da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80224dc:	4798      	blx	r3
 80224de:	4973      	ldr	r1, [pc, #460]	; (80226ac <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x280>)
 80224e0:	f9bd c040 	ldrsh.w	ip, [sp, #64]	; 0x40
 80224e4:	2c00      	cmp	r4, #0
 80224e6:	880b      	ldrh	r3, [r1, #0]
 80224e8:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 80224ec:	910d      	str	r1, [sp, #52]	; 0x34
 80224ee:	fb03 c202 	mla	r2, r3, r2, ip
 80224f2:	bf08      	it	eq
 80224f4:	46dc      	moveq	ip, fp
 80224f6:	fb03 f306 	mul.w	r3, r3, r6
 80224fa:	bf18      	it	ne
 80224fc:	f04f 0c00 	movne.w	ip, #0
 8022500:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8022504:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8022508:	fa1f fc8c 	uxth.w	ip, ip
 802250c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8022510:	9106      	str	r1, [sp, #24]
 8022512:	9308      	str	r3, [sp, #32]
 8022514:	1d2b      	adds	r3, r5, #4
 8022516:	9309      	str	r3, [sp, #36]	; 0x24
 8022518:	9b02      	ldr	r3, [sp, #8]
 802251a:	43da      	mvns	r2, r3
 802251c:	2300      	movs	r3, #0
 802251e:	b2d2      	uxtb	r2, r2
 8022520:	9303      	str	r3, [sp, #12]
 8022522:	9207      	str	r2, [sp, #28]
 8022524:	9a08      	ldr	r2, [sp, #32]
 8022526:	4282      	cmp	r2, r0
 8022528:	f240 80b6 	bls.w	8022698 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26c>
 802252c:	b963      	cbnz	r3, 8022548 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11c>
 802252e:	9b01      	ldr	r3, [sp, #4]
 8022530:	781a      	ldrb	r2, [r3, #0]
 8022532:	0993      	lsrs	r3, r2, #6
 8022534:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8022538:	9203      	str	r2, [sp, #12]
 802253a:	1e5a      	subs	r2, r3, #1
 802253c:	2a02      	cmp	r2, #2
 802253e:	d815      	bhi.n	802256c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x140>
 8022540:	9a01      	ldr	r2, [sp, #4]
 8022542:	b29b      	uxth	r3, r3
 8022544:	3201      	adds	r2, #1
 8022546:	9201      	str	r2, [sp, #4]
 8022548:	b1b4      	cbz	r4, 8022578 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x14c>
 802254a:	429c      	cmp	r4, r3
 802254c:	bf91      	iteee	ls
 802254e:	1b1c      	subls	r4, r3, r4
 8022550:	1ae4      	subhi	r4, r4, r3
 8022552:	4666      	movhi	r6, ip
 8022554:	f04f 0800 	movhi.w	r8, #0
 8022558:	bf9b      	ittet	ls
 802255a:	fa1f f884 	uxthls.w	r8, r4
 802255e:	2400      	movls	r4, #0
 8022560:	b2a4      	uxthhi	r4, r4
 8022562:	fa1f f68b 	uxthls.w	r6, fp
 8022566:	4643      	mov	r3, r8
 8022568:	46b4      	mov	ip, r6
 802256a:	e7db      	b.n	8022524 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf8>
 802256c:	9a01      	ldr	r2, [sp, #4]
 802256e:	9b01      	ldr	r3, [sp, #4]
 8022570:	3202      	adds	r2, #2
 8022572:	785b      	ldrb	r3, [r3, #1]
 8022574:	9201      	str	r2, [sp, #4]
 8022576:	e7e7      	b.n	8022548 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11c>
 8022578:	2203      	movs	r2, #3
 802257a:	9909      	ldr	r1, [sp, #36]	; 0x24
 802257c:	4563      	cmp	r3, ip
 802257e:	4615      	mov	r5, r2
 8022580:	9a03      	ldr	r2, [sp, #12]
 8022582:	bf2c      	ite	cs
 8022584:	eba3 080c 	subcs.w	r8, r3, ip
 8022588:	ebac 0603 	subcc.w	r6, ip, r3
 802258c:	fb15 1202 	smlabb	r2, r5, r2, r1
 8022590:	9905      	ldr	r1, [sp, #20]
 8022592:	bf24      	itt	cs
 8022594:	fa1f f888 	uxthcs.w	r8, r8
 8022598:	46e1      	movcs	r9, ip
 802259a:	eb01 0502 	add.w	r5, r1, r2
 802259e:	9902      	ldr	r1, [sp, #8]
 80225a0:	bf2f      	iteee	cs
 80225a2:	4626      	movcs	r6, r4
 80225a4:	b2b6      	uxthcc	r6, r6
 80225a6:	4699      	movcc	r9, r3
 80225a8:	46a0      	movcc	r8, r4
 80225aa:	29ff      	cmp	r1, #255	; 0xff
 80225ac:	d04a      	beq.n	8022644 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x218>
 80225ae:	9f06      	ldr	r7, [sp, #24]
 80225b0:	46ca      	mov	sl, r9
 80225b2:	78a9      	ldrb	r1, [r5, #2]
 80225b4:	9004      	str	r0, [sp, #16]
 80225b6:	4379      	muls	r1, r7
 80225b8:	910a      	str	r1, [sp, #40]	; 0x28
 80225ba:	7869      	ldrb	r1, [r5, #1]
 80225bc:	4379      	muls	r1, r7
 80225be:	910b      	str	r1, [sp, #44]	; 0x2c
 80225c0:	9905      	ldr	r1, [sp, #20]
 80225c2:	5c8a      	ldrb	r2, [r1, r2]
 80225c4:	437a      	muls	r2, r7
 80225c6:	920c      	str	r2, [sp, #48]	; 0x30
 80225c8:	f1ba 0f00 	cmp.w	sl, #0
 80225cc:	d03d      	beq.n	802264a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x21e>
 80225ce:	9a04      	ldr	r2, [sp, #16]
 80225d0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80225d4:	9f07      	ldr	r7, [sp, #28]
 80225d6:	8812      	ldrh	r2, [r2, #0]
 80225d8:	fa1f fa8a 	uxth.w	sl, sl
 80225dc:	46be      	mov	lr, r7
 80225de:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80225e0:	1215      	asrs	r5, r2, #8
 80225e2:	10d1      	asrs	r1, r2, #3
 80225e4:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80225e8:	00d2      	lsls	r2, r2, #3
 80225ea:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80225ee:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 80225f2:	b2d2      	uxtb	r2, r2
 80225f4:	fb05 750e 	mla	r5, r5, lr, r7
 80225f8:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 80225fc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80225fe:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8022602:	b2ad      	uxth	r5, r5
 8022604:	fb01 710e 	mla	r1, r1, lr, r7
 8022608:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 802260a:	fb02 720e 	mla	r2, r2, lr, r7
 802260e:	f105 0e01 	add.w	lr, r5, #1
 8022612:	b289      	uxth	r1, r1
 8022614:	b292      	uxth	r2, r2
 8022616:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 802261a:	f102 0e01 	add.w	lr, r2, #1
 802261e:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8022622:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8022626:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802262a:	4315      	orrs	r5, r2
 802262c:	1c4a      	adds	r2, r1, #1
 802262e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8022632:	9a04      	ldr	r2, [sp, #16]
 8022634:	0949      	lsrs	r1, r1, #5
 8022636:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802263a:	430d      	orrs	r5, r1
 802263c:	f822 5b02 	strh.w	r5, [r2], #2
 8022640:	9204      	str	r2, [sp, #16]
 8022642:	e7c1      	b.n	80225c8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19c>
 8022644:	4649      	mov	r1, r9
 8022646:	4686      	mov	lr, r0
 8022648:	b999      	cbnz	r1, 8022672 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x246>
 802264a:	4563      	cmp	r3, ip
 802264c:	eb00 0049 	add.w	r0, r0, r9, lsl #1
 8022650:	d389      	bcc.n	8022566 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13a>
 8022652:	fa1f f68b 	uxth.w	r6, fp
 8022656:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
 802265a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802265c:	1ba4      	subs	r4, r4, r6
 802265e:	881b      	ldrh	r3, [r3, #0]
 8022660:	b2a4      	uxth	r4, r4
 8022662:	eba3 030b 	sub.w	r3, r3, fp
 8022666:	2c00      	cmp	r4, #0
 8022668:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802266c:	bf18      	it	ne
 802266e:	2600      	movne	r6, #0
 8022670:	e779      	b.n	8022566 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13a>
 8022672:	78aa      	ldrb	r2, [r5, #2]
 8022674:	3901      	subs	r1, #1
 8022676:	4f0e      	ldr	r7, [pc, #56]	; (80226b0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x284>)
 8022678:	b289      	uxth	r1, r1
 802267a:	ea07 2a02 	and.w	sl, r7, r2, lsl #8
 802267e:	786a      	ldrb	r2, [r5, #1]
 8022680:	00d2      	lsls	r2, r2, #3
 8022682:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022686:	ea4a 0202 	orr.w	r2, sl, r2
 802268a:	f895 a000 	ldrb.w	sl, [r5]
 802268e:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
 8022692:	f82e 2b02 	strh.w	r2, [lr], #2
 8022696:	e7d7      	b.n	8022648 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x21c>
 8022698:	4b03      	ldr	r3, [pc, #12]	; (80226a8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>)
 802269a:	6818      	ldr	r0, [r3, #0]
 802269c:	6803      	ldr	r3, [r0, #0]
 802269e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80226a0:	4798      	blx	r3
 80226a2:	b013      	add	sp, #76	; 0x4c
 80226a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80226a8:	2400baf0 	.word	0x2400baf0
 80226ac:	2400baea 	.word	0x2400baea
 80226b0:	fffff800 	.word	0xfffff800

080226b4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 80226b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80226b8:	b09d      	sub	sp, #116	; 0x74
 80226ba:	461c      	mov	r4, r3
 80226bc:	4683      	mov	fp, r0
 80226be:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80226c0:	e9cd 1211 	strd	r1, r2, [sp, #68]	; 0x44
 80226c4:	f89d 209c 	ldrb.w	r2, [sp, #156]	; 0x9c
 80226c8:	920e      	str	r2, [sp, #56]	; 0x38
 80226ca:	2a00      	cmp	r2, #0
 80226cc:	f000 81e4 	beq.w	8022a98 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e4>
 80226d0:	6820      	ldr	r0, [r4, #0]
 80226d2:	aa18      	add	r2, sp, #96	; 0x60
 80226d4:	6861      	ldr	r1, [r4, #4]
 80226d6:	c203      	stmia	r2!, {r0, r1}
 80226d8:	6818      	ldr	r0, [r3, #0]
 80226da:	aa1a      	add	r2, sp, #104	; 0x68
 80226dc:	6859      	ldr	r1, [r3, #4]
 80226de:	c203      	stmia	r2!, {r0, r1}
 80226e0:	a818      	add	r0, sp, #96	; 0x60
 80226e2:	f7f8 ffc9 	bl	801b678 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80226e6:	4621      	mov	r1, r4
 80226e8:	a81a      	add	r0, sp, #104	; 0x68
 80226ea:	f7f8 ffed 	bl	801b6c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80226ee:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 80226f2:	f9bd 4066 	ldrsh.w	r4, [sp, #102]	; 0x66
 80226f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80226fa:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	; 0x6e
 80226fe:	bfdb      	ittet	le
 8022700:	b29a      	uxthle	r2, r3
 8022702:	f44f 6180 	movle.w	r1, #1024	; 0x400
 8022706:	2201      	movgt	r2, #1
 8022708:	fb91 f2f2 	sdivle	r2, r1, r2
 802270c:	9202      	str	r2, [sp, #8]
 802270e:	9802      	ldr	r0, [sp, #8]
 8022710:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
 8022714:	9902      	ldr	r1, [sp, #8]
 8022716:	fb92 f0f0 	sdiv	r0, r2, r0
 802271a:	b280      	uxth	r0, r0
 802271c:	440c      	add	r4, r1
 802271e:	900f      	str	r0, [sp, #60]	; 0x3c
 8022720:	3c01      	subs	r4, #1
 8022722:	9802      	ldr	r0, [sp, #8]
 8022724:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8022726:	fb05 2510 	mls	r5, r5, r0, r2
 802272a:	fb94 f4f1 	sdiv	r4, r4, r1
 802272e:	fb15 f503 	smulbb	r5, r5, r3
 8022732:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
 8022736:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 802273a:	3401      	adds	r4, #1
 802273c:	440d      	add	r5, r1
 802273e:	4419      	add	r1, r3
 8022740:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
 8022744:	b2a4      	uxth	r4, r4
 8022746:	441a      	add	r2, r3
 8022748:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 802274c:	f8ad 1068 	strh.w	r1, [sp, #104]	; 0x68
 8022750:	00a4      	lsls	r4, r4, #2
 8022752:	9306      	str	r3, [sp, #24]
 8022754:	b2ad      	uxth	r5, r5
 8022756:	4bb3      	ldr	r3, [pc, #716]	; (8022a24 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>)
 8022758:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
 802275c:	6818      	ldr	r0, [r3, #0]
 802275e:	6803      	ldr	r3, [r0, #0]
 8022760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022762:	4798      	blx	r3
 8022764:	4bb0      	ldr	r3, [pc, #704]	; (8022a28 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x374>)
 8022766:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	; 0x6a
 802276a:	2d00      	cmp	r5, #0
 802276c:	881a      	ldrh	r2, [r3, #0]
 802276e:	f9bd 7068 	ldrsh.w	r7, [sp, #104]	; 0x68
 8022772:	fb02 f606 	mul.w	r6, r2, r6
 8022776:	fb02 7101 	mla	r1, r2, r1, r7
 802277a:	9316      	str	r3, [sp, #88]	; 0x58
 802277c:	eb00 0841 	add.w	r8, r0, r1, lsl #1
 8022780:	4baa      	ldr	r3, [pc, #680]	; (8022a2c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x378>)
 8022782:	bf18      	it	ne
 8022784:	2100      	movne	r1, #0
 8022786:	eb08 0246 	add.w	r2, r8, r6, lsl #1
 802278a:	eba3 030b 	sub.w	r3, r3, fp
 802278e:	920a      	str	r2, [sp, #40]	; 0x28
 8022790:	f104 0204 	add.w	r2, r4, #4
 8022794:	9317      	str	r3, [sp, #92]	; 0x5c
 8022796:	9213      	str	r2, [sp, #76]	; 0x4c
 8022798:	9a06      	ldr	r2, [sp, #24]
 802279a:	bf08      	it	eq
 802279c:	4611      	moveq	r1, r2
 802279e:	2200      	movs	r2, #0
 80227a0:	b289      	uxth	r1, r1
 80227a2:	920d      	str	r2, [sp, #52]	; 0x34
 80227a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80227a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80227a8:	fa12 f383 	uxtah	r3, r2, r3
 80227ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80227ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80227b2:	3304      	adds	r3, #4
 80227b4:	9308      	str	r3, [sp, #32]
 80227b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80227b8:	4543      	cmp	r3, r8
 80227ba:	f240 8168 	bls.w	8022a8e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3da>
 80227be:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 80227c2:	f04f 0e01 	mov.w	lr, #1
 80227c6:	9a02      	ldr	r2, [sp, #8]
 80227c8:	9808      	ldr	r0, [sp, #32]
 80227ca:	fbb5 f3f3 	udiv	r3, r5, r3
 80227ce:	1ad3      	subs	r3, r2, r3
 80227d0:	7800      	ldrb	r0, [r0, #0]
 80227d2:	b29b      	uxth	r3, r3
 80227d4:	9010      	str	r0, [sp, #64]	; 0x40
 80227d6:	3001      	adds	r0, #1
 80227d8:	9314      	str	r3, [sp, #80]	; 0x50
 80227da:	9b08      	ldr	r3, [sp, #32]
 80227dc:	9007      	str	r0, [sp, #28]
 80227de:	785a      	ldrb	r2, [r3, #1]
 80227e0:	789b      	ldrb	r3, [r3, #2]
 80227e2:	021b      	lsls	r3, r3, #8
 80227e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80227e8:	9a08      	ldr	r2, [sp, #32]
 80227ea:	78d2      	ldrb	r2, [r2, #3]
 80227ec:	4313      	orrs	r3, r2
 80227ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80227f0:	441a      	add	r2, r3
 80227f2:	1c50      	adds	r0, r2, #1
 80227f4:	7852      	ldrb	r2, [r2, #1]
 80227f6:	9005      	str	r0, [sp, #20]
 80227f8:	0212      	lsls	r2, r2, #8
 80227fa:	9811      	ldr	r0, [sp, #68]	; 0x44
 80227fc:	f402 72ff 	and.w	r2, r2, #510	; 0x1fe
 8022800:	5cc3      	ldrb	r3, [r0, r3]
 8022802:	431a      	orrs	r2, r3
 8022804:	b293      	uxth	r3, r2
 8022806:	f88b 2804 	strb.w	r2, [fp, #2052]	; 0x804
 802280a:	930b      	str	r3, [sp, #44]	; 0x2c
 802280c:	2300      	movs	r3, #0
 802280e:	9309      	str	r3, [sp, #36]	; 0x24
 8022810:	2301      	movs	r3, #1
 8022812:	9301      	str	r3, [sp, #4]
 8022814:	9304      	str	r3, [sp, #16]
 8022816:	2300      	movs	r3, #0
 8022818:	9303      	str	r3, [sp, #12]
 802281a:	2d00      	cmp	r5, #0
 802281c:	d07d      	beq.n	802291a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x266>
 802281e:	45ae      	cmp	lr, r5
 8022820:	d26c      	bcs.n	80228fc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x248>
 8022822:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022824:	eba5 050e 	sub.w	r5, r5, lr
 8022828:	460c      	mov	r4, r1
 802282a:	4543      	cmp	r3, r8
 802282c:	b2ad      	uxth	r5, r5
 802282e:	d802      	bhi.n	8022836 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x182>
 8022830:	e071      	b.n	8022916 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x262>
 8022832:	2b00      	cmp	r3, #0
 8022834:	d15d      	bne.n	80228f2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23e>
 8022836:	9b05      	ldr	r3, [sp, #20]
 8022838:	9a04      	ldr	r2, [sp, #16]
 802283a:	785b      	ldrb	r3, [r3, #1]
 802283c:	f1c2 0207 	rsb	r2, r2, #7
 8022840:	9904      	ldr	r1, [sp, #16]
 8022842:	4093      	lsls	r3, r2
 8022844:	005b      	lsls	r3, r3, #1
 8022846:	f403 72ff 	and.w	r2, r3, #510	; 0x1fe
 802284a:	9b05      	ldr	r3, [sp, #20]
 802284c:	781b      	ldrb	r3, [r3, #0]
 802284e:	410b      	asrs	r3, r1
 8022850:	3101      	adds	r1, #1
 8022852:	b2c9      	uxtb	r1, r1
 8022854:	b2db      	uxtb	r3, r3
 8022856:	2908      	cmp	r1, #8
 8022858:	9104      	str	r1, [sp, #16]
 802285a:	9905      	ldr	r1, [sp, #20]
 802285c:	ea43 0302 	orr.w	r3, r3, r2
 8022860:	bf0c      	ite	eq
 8022862:	3102      	addeq	r1, #2
 8022864:	3101      	addne	r1, #1
 8022866:	b29a      	uxth	r2, r3
 8022868:	bf05      	ittet	eq
 802286a:	9105      	streq	r1, [sp, #20]
 802286c:	2100      	moveq	r1, #0
 802286e:	9105      	strne	r1, [sp, #20]
 8022870:	9104      	streq	r1, [sp, #16]
 8022872:	9910      	ldr	r1, [sp, #64]	; 0x40
 8022874:	4291      	cmp	r1, r2
 8022876:	d30a      	bcc.n	802288e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1da>
 8022878:	f88b 3804 	strb.w	r3, [fp, #2052]	; 0x804
 802287c:	2301      	movs	r3, #1
 802287e:	9907      	ldr	r1, [sp, #28]
 8022880:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8022884:	d30f      	bcc.n	80228a6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1f2>
 8022886:	2100      	movs	r1, #0
 8022888:	9301      	str	r3, [sp, #4]
 802288a:	9103      	str	r1, [sp, #12]
 802288c:	e032      	b.n	80228f4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x240>
 802288e:	9b07      	ldr	r3, [sp, #28]
 8022890:	429a      	cmp	r2, r3
 8022892:	d318      	bcc.n	80228c6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x212>
 8022894:	9b01      	ldr	r3, [sp, #4]
 8022896:	f89b 1804 	ldrb.w	r1, [fp, #2052]	; 0x804
 802289a:	445b      	add	r3, fp
 802289c:	f883 1804 	strb.w	r1, [r3, #2052]	; 0x804
 80228a0:	9b01      	ldr	r3, [sp, #4]
 80228a2:	3301      	adds	r3, #1
 80228a4:	b29b      	uxth	r3, r3
 80228a6:	9907      	ldr	r1, [sp, #28]
 80228a8:	f89b 0804 	ldrb.w	r0, [fp, #2052]	; 0x804
 80228ac:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 80228b0:	7108      	strb	r0, [r1, #4]
 80228b2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80228b4:	80c8      	strh	r0, [r1, #6]
 80228b6:	9801      	ldr	r0, [sp, #4]
 80228b8:	3001      	adds	r0, #1
 80228ba:	7148      	strb	r0, [r1, #5]
 80228bc:	9907      	ldr	r1, [sp, #28]
 80228be:	3101      	adds	r1, #1
 80228c0:	b289      	uxth	r1, r1
 80228c2:	9107      	str	r1, [sp, #28]
 80228c4:	e7df      	b.n	8022886 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 80228c6:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
 80228ca:	4611      	mov	r1, r2
 80228cc:	795b      	ldrb	r3, [r3, #5]
 80228ce:	f603 0004 	addw	r0, r3, #2052	; 0x804
 80228d2:	4458      	add	r0, fp
 80228d4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80228d6:	4406      	add	r6, r0
 80228d8:	2e00      	cmp	r6, #0
 80228da:	dd06      	ble.n	80228ea <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 80228dc:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 80228e0:	790e      	ldrb	r6, [r1, #4]
 80228e2:	f800 6d01 	strb.w	r6, [r0, #-1]!
 80228e6:	88c9      	ldrh	r1, [r1, #6]
 80228e8:	e7f4      	b.n	80228d4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x220>
 80228ea:	f88b 1804 	strb.w	r1, [fp, #2052]	; 0x804
 80228ee:	b29b      	uxth	r3, r3
 80228f0:	e7c5      	b.n	802287e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ca>
 80228f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80228f4:	4621      	mov	r1, r4
 80228f6:	920b      	str	r2, [sp, #44]	; 0x2c
 80228f8:	469e      	mov	lr, r3
 80228fa:	e78e      	b.n	802281a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x166>
 80228fc:	9a03      	ldr	r2, [sp, #12]
 80228fe:	ebae 0305 	sub.w	r3, lr, r5
 8022902:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8022906:	442a      	add	r2, r5
 8022908:	b29b      	uxth	r3, r3
 802290a:	b292      	uxth	r2, r2
 802290c:	9203      	str	r2, [sp, #12]
 802290e:	2500      	movs	r5, #0
 8022910:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022912:	4542      	cmp	r2, r8
 8022914:	d88d      	bhi.n	8022832 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17e>
 8022916:	4621      	mov	r1, r4
 8022918:	e74d      	b.n	80227b6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x102>
 802291a:	458e      	cmp	lr, r1
 802291c:	f04f 0900 	mov.w	r9, #0
 8022920:	bf2b      	itete	cs
 8022922:	ebae 0301 	subcs.w	r3, lr, r1
 8022926:	eba1 040e 	subcc.w	r4, r1, lr
 802292a:	462c      	movcs	r4, r5
 802292c:	462b      	movcc	r3, r5
 802292e:	bf27      	ittee	cs
 8022930:	b29b      	uxthcs	r3, r3
 8022932:	910c      	strcs	r1, [sp, #48]	; 0x30
 8022934:	b2a4      	uxthcc	r4, r4
 8022936:	f8cd e030 	strcc.w	lr, [sp, #48]	; 0x30
 802293a:	9a03      	ldr	r2, [sp, #12]
 802293c:	980c      	ldr	r0, [sp, #48]	; 0x30
 802293e:	444a      	add	r2, r9
 8022940:	4548      	cmp	r0, r9
 8022942:	b292      	uxth	r2, r2
 8022944:	d074      	beq.n	8022a30 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x37c>
 8022946:	2004      	movs	r0, #4
 8022948:	445a      	add	r2, fp
 802294a:	4605      	mov	r5, r0
 802294c:	f892 2804 	ldrb.w	r2, [r2, #2052]	; 0x804
 8022950:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8022952:	fb15 0202 	smlabb	r2, r5, r2, r0
 8022956:	9812      	ldr	r0, [sp, #72]	; 0x48
 8022958:	5880      	ldr	r0, [r0, r2]
 802295a:	ea5f 6a10 	movs.w	sl, r0, lsr #24
 802295e:	d014      	beq.n	802298a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d6>
 8022960:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8022964:	ea4f 2510 	mov.w	r5, r0, lsr #8
 8022968:	d112      	bne.n	8022990 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2dc>
 802296a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802296c:	2aff      	cmp	r2, #255	; 0xff
 802296e:	d10f      	bne.n	8022990 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2dc>
 8022970:	0942      	lsrs	r2, r0, #5
 8022972:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 8022976:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 802297a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802297e:	f025 0507 	bic.w	r5, r5, #7
 8022982:	4315      	orrs	r5, r2
 8022984:	4305      	orrs	r5, r0
 8022986:	f828 5019 	strh.w	r5, [r8, r9, lsl #1]
 802298a:	f109 0901 	add.w	r9, r9, #1
 802298e:	e7d4      	b.n	802293a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x286>
 8022990:	f838 c019 	ldrh.w	ip, [r8, r9, lsl #1]
 8022994:	b2ed      	uxtb	r5, r5
 8022996:	ea4f 06ec 	mov.w	r6, ip, asr #3
 802299a:	ea4f 272c 	mov.w	r7, ip, asr #8
 802299e:	f006 02fc 	and.w	r2, r6, #252	; 0xfc
 80229a2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80229a6:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80229aa:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80229ae:	9215      	str	r2, [sp, #84]	; 0x54
 80229b0:	fa5f fc8c 	uxtb.w	ip, ip
 80229b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80229b6:	b2c0      	uxtb	r0, r0
 80229b8:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 80229bc:	fb02 fa0a 	mul.w	sl, r2, sl
 80229c0:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 80229c4:	f10a 0201 	add.w	r2, sl, #1
 80229c8:	eb02 222a 	add.w	r2, r2, sl, asr #8
 80229cc:	1212      	asrs	r2, r2, #8
 80229ce:	fa1f fa82 	uxth.w	sl, r2
 80229d2:	43d2      	mvns	r2, r2
 80229d4:	fb16 f60a 	smulbb	r6, r6, sl
 80229d8:	b2d2      	uxtb	r2, r2
 80229da:	fb10 f00a 	smulbb	r0, r0, sl
 80229de:	fb07 6702 	mla	r7, r7, r2, r6
 80229e2:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80229e4:	fb0c 0002 	mla	r0, ip, r2, r0
 80229e8:	fb15 f50a 	smulbb	r5, r5, sl
 80229ec:	b2bf      	uxth	r7, r7
 80229ee:	b280      	uxth	r0, r0
 80229f0:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 80229f4:	fb06 5602 	mla	r6, r6, r2, r5
 80229f8:	1c7a      	adds	r2, r7, #1
 80229fa:	1c45      	adds	r5, r0, #1
 80229fc:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8022a00:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8022a04:	b2b6      	uxth	r6, r6
 8022a06:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8022a0a:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8022a0e:	432f      	orrs	r7, r5
 8022a10:	1c75      	adds	r5, r6, #1
 8022a12:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 8022a16:	096d      	lsrs	r5, r5, #5
 8022a18:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022a1c:	432f      	orrs	r7, r5
 8022a1e:	f828 7019 	strh.w	r7, [r8, r9, lsl #1]
 8022a22:	e7b2      	b.n	802298a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d6>
 8022a24:	2400baf0 	.word	0x2400baf0
 8022a28:	2400baea 	.word	0x2400baea
 8022a2c:	fffff7fb 	.word	0xfffff7fb
 8022a30:	9203      	str	r2, [sp, #12]
 8022a32:	458e      	cmp	lr, r1
 8022a34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022a36:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 8022a3a:	f4ff af68 	bcc.w	802290e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25a>
 8022a3e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8022a40:	9906      	ldr	r1, [sp, #24]
 8022a42:	8812      	ldrh	r2, [r2, #0]
 8022a44:	1a52      	subs	r2, r2, r1
 8022a46:	9914      	ldr	r1, [sp, #80]	; 0x50
 8022a48:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 8022a4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022a4e:	3201      	adds	r2, #1
 8022a50:	428a      	cmp	r2, r1
 8022a52:	9209      	str	r2, [sp, #36]	; 0x24
 8022a54:	d111      	bne.n	8022a7a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3c6>
 8022a56:	f8bd 5068 	ldrh.w	r5, [sp, #104]	; 0x68
 8022a5a:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8022a5e:	9b06      	ldr	r3, [sp, #24]
 8022a60:	eba5 0509 	sub.w	r5, r5, r9
 8022a64:	b2ad      	uxth	r5, r5
 8022a66:	2d00      	cmp	r5, #0
 8022a68:	bf08      	it	eq
 8022a6a:	4619      	moveq	r1, r3
 8022a6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022a6e:	bf18      	it	ne
 8022a70:	2100      	movne	r1, #0
 8022a72:	3301      	adds	r3, #1
 8022a74:	b289      	uxth	r1, r1
 8022a76:	930d      	str	r3, [sp, #52]	; 0x34
 8022a78:	e694      	b.n	80227a4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf0>
 8022a7a:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8022a7e:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 8022a82:	1b2d      	subs	r5, r5, r4
 8022a84:	b2ad      	uxth	r5, r5
 8022a86:	2d00      	cmp	r5, #0
 8022a88:	bf18      	it	ne
 8022a8a:	2400      	movne	r4, #0
 8022a8c:	e740      	b.n	8022910 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25c>
 8022a8e:	4b04      	ldr	r3, [pc, #16]	; (8022aa0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ec>)
 8022a90:	6818      	ldr	r0, [r3, #0]
 8022a92:	6803      	ldr	r3, [r0, #0]
 8022a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022a96:	4798      	blx	r3
 8022a98:	b01d      	add	sp, #116	; 0x74
 8022a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022a9e:	bf00      	nop
 8022aa0:	2400baf0 	.word	0x2400baf0

08022aa4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8022aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022aa8:	b09f      	sub	sp, #124	; 0x7c
 8022aaa:	461d      	mov	r5, r3
 8022aac:	4604      	mov	r4, r0
 8022aae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022ab0:	e9cd 1213 	strd	r1, r2, [sp, #76]	; 0x4c
 8022ab4:	f89d 20a4 	ldrb.w	r2, [sp, #164]	; 0xa4
 8022ab8:	920a      	str	r2, [sp, #40]	; 0x28
 8022aba:	2a00      	cmp	r2, #0
 8022abc:	f000 81fe 	beq.w	8022ebc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x418>
 8022ac0:	6828      	ldr	r0, [r5, #0]
 8022ac2:	aa1a      	add	r2, sp, #104	; 0x68
 8022ac4:	6869      	ldr	r1, [r5, #4]
 8022ac6:	c203      	stmia	r2!, {r0, r1}
 8022ac8:	6818      	ldr	r0, [r3, #0]
 8022aca:	aa1c      	add	r2, sp, #112	; 0x70
 8022acc:	6859      	ldr	r1, [r3, #4]
 8022ace:	c203      	stmia	r2!, {r0, r1}
 8022ad0:	a81a      	add	r0, sp, #104	; 0x68
 8022ad2:	f7f8 fdd1 	bl	801b678 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022ad6:	4629      	mov	r1, r5
 8022ad8:	a81c      	add	r0, sp, #112	; 0x70
 8022ada:	f7f8 fdf5 	bl	801b6c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022ade:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 8022ae2:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	; 0x6e
 8022ae6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8022aea:	f9bd 7076 	ldrsh.w	r7, [sp, #118]	; 0x76
 8022aee:	bfdb      	ittet	le
 8022af0:	b29a      	uxthle	r2, r3
 8022af2:	f44f 6180 	movle.w	r1, #1024	; 0x400
 8022af6:	2201      	movgt	r2, #1
 8022af8:	fb91 f2f2 	sdivle	r2, r1, r2
 8022afc:	9201      	str	r2, [sp, #4]
 8022afe:	9801      	ldr	r0, [sp, #4]
 8022b00:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	; 0x72
 8022b04:	9901      	ldr	r1, [sp, #4]
 8022b06:	fb92 f0f0 	sdiv	r0, r2, r0
 8022b0a:	b280      	uxth	r0, r0
 8022b0c:	440e      	add	r6, r1
 8022b0e:	9010      	str	r0, [sp, #64]	; 0x40
 8022b10:	3e01      	subs	r6, #1
 8022b12:	9801      	ldr	r0, [sp, #4]
 8022b14:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8022b16:	fb05 2510 	mls	r5, r5, r0, r2
 8022b1a:	fb96 f6f1 	sdiv	r6, r6, r1
 8022b1e:	fb15 f503 	smulbb	r5, r5, r3
 8022b22:	f8bd 1070 	ldrh.w	r1, [sp, #112]	; 0x70
 8022b26:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8022b2a:	3601      	adds	r6, #1
 8022b2c:	440d      	add	r5, r1
 8022b2e:	4419      	add	r1, r3
 8022b30:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
 8022b34:	b2b6      	uxth	r6, r6
 8022b36:	441a      	add	r2, r3
 8022b38:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	; 0x74
 8022b3c:	f8ad 1070 	strh.w	r1, [sp, #112]	; 0x70
 8022b40:	b2ad      	uxth	r5, r5
 8022b42:	9304      	str	r3, [sp, #16]
 8022b44:	4b96      	ldr	r3, [pc, #600]	; (8022da0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2fc>)
 8022b46:	f8ad 2072 	strh.w	r2, [sp, #114]	; 0x72
 8022b4a:	6818      	ldr	r0, [r3, #0]
 8022b4c:	6803      	ldr	r3, [r0, #0]
 8022b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022b50:	4798      	blx	r3
 8022b52:	4b94      	ldr	r3, [pc, #592]	; (8022da4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x300>)
 8022b54:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	; 0x72
 8022b58:	2d00      	cmp	r5, #0
 8022b5a:	881a      	ldrh	r2, [r3, #0]
 8022b5c:	f9bd c070 	ldrsh.w	ip, [sp, #112]	; 0x70
 8022b60:	fb02 f707 	mul.w	r7, r2, r7
 8022b64:	fb02 c101 	mla	r1, r2, r1, ip
 8022b68:	9318      	str	r3, [sp, #96]	; 0x60
 8022b6a:	eb00 0b41 	add.w	fp, r0, r1, lsl #1
 8022b6e:	4b8e      	ldr	r3, [pc, #568]	; (8022da8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>)
 8022b70:	bf18      	it	ne
 8022b72:	2100      	movne	r1, #0
 8022b74:	eb0b 0247 	add.w	r2, fp, r7, lsl #1
 8022b78:	eba3 0304 	sub.w	r3, r3, r4
 8022b7c:	920b      	str	r2, [sp, #44]	; 0x2c
 8022b7e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022b80:	9319      	str	r3, [sp, #100]	; 0x64
 8022b82:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8022b86:	f106 0204 	add.w	r2, r6, #4
 8022b8a:	9206      	str	r2, [sp, #24]
 8022b8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022b8e:	ea6f 0202 	mvn.w	r2, r2
 8022b92:	b2d2      	uxtb	r2, r2
 8022b94:	9215      	str	r2, [sp, #84]	; 0x54
 8022b96:	9a04      	ldr	r2, [sp, #16]
 8022b98:	bf08      	it	eq
 8022b9a:	4611      	moveq	r1, r2
 8022b9c:	2200      	movs	r2, #0
 8022b9e:	b289      	uxth	r1, r1
 8022ba0:	920d      	str	r2, [sp, #52]	; 0x34
 8022ba2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022ba4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022ba6:	fa12 f383 	uxtah	r3, r2, r3
 8022baa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8022bac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8022bb0:	3304      	adds	r3, #4
 8022bb2:	9307      	str	r3, [sp, #28]
 8022bb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022bb6:	455b      	cmp	r3, fp
 8022bb8:	f240 817b 	bls.w	8022eb2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x40e>
 8022bbc:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 8022bc0:	f04f 0801 	mov.w	r8, #1
 8022bc4:	9a01      	ldr	r2, [sp, #4]
 8022bc6:	9807      	ldr	r0, [sp, #28]
 8022bc8:	46c4      	mov	ip, r8
 8022bca:	f8cd 8008 	str.w	r8, [sp, #8]
 8022bce:	7800      	ldrb	r0, [r0, #0]
 8022bd0:	fbb5 f3f3 	udiv	r3, r5, r3
 8022bd4:	1ad3      	subs	r3, r2, r3
 8022bd6:	9011      	str	r0, [sp, #68]	; 0x44
 8022bd8:	3001      	adds	r0, #1
 8022bda:	b29b      	uxth	r3, r3
 8022bdc:	9005      	str	r0, [sp, #20]
 8022bde:	9316      	str	r3, [sp, #88]	; 0x58
 8022be0:	9b07      	ldr	r3, [sp, #28]
 8022be2:	785a      	ldrb	r2, [r3, #1]
 8022be4:	789b      	ldrb	r3, [r3, #2]
 8022be6:	021b      	lsls	r3, r3, #8
 8022be8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8022bec:	9a07      	ldr	r2, [sp, #28]
 8022bee:	78d2      	ldrb	r2, [r2, #3]
 8022bf0:	4313      	orrs	r3, r2
 8022bf2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022bf4:	441a      	add	r2, r3
 8022bf6:	1c50      	adds	r0, r2, #1
 8022bf8:	7852      	ldrb	r2, [r2, #1]
 8022bfa:	9003      	str	r0, [sp, #12]
 8022bfc:	0212      	lsls	r2, r2, #8
 8022bfe:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8022c00:	f402 72ff 	and.w	r2, r2, #510	; 0x1fe
 8022c04:	5cc3      	ldrb	r3, [r0, r3]
 8022c06:	431a      	orrs	r2, r3
 8022c08:	b293      	uxth	r3, r2
 8022c0a:	f884 2804 	strb.w	r2, [r4, #2052]	; 0x804
 8022c0e:	930c      	str	r3, [sp, #48]	; 0x30
 8022c10:	2300      	movs	r3, #0
 8022c12:	9308      	str	r3, [sp, #32]
 8022c14:	461a      	mov	r2, r3
 8022c16:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8022c1a:	930e      	str	r3, [sp, #56]	; 0x38
 8022c1c:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8022c20:	930f      	str	r3, [sp, #60]	; 0x3c
 8022c22:	2d00      	cmp	r5, #0
 8022c24:	d07d      	beq.n	8022d22 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27e>
 8022c26:	45ac      	cmp	ip, r5
 8022c28:	d26d      	bcs.n	8022d06 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x262>
 8022c2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022c2c:	eba5 050c 	sub.w	r5, r5, ip
 8022c30:	4608      	mov	r0, r1
 8022c32:	455b      	cmp	r3, fp
 8022c34:	b2ad      	uxth	r5, r5
 8022c36:	d802      	bhi.n	8022c3e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19a>
 8022c38:	e071      	b.n	8022d1e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27a>
 8022c3a:	2b00      	cmp	r3, #0
 8022c3c:	d15d      	bne.n	8022cfa <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x256>
 8022c3e:	9b03      	ldr	r3, [sp, #12]
 8022c40:	9a02      	ldr	r2, [sp, #8]
 8022c42:	785b      	ldrb	r3, [r3, #1]
 8022c44:	f1c2 0207 	rsb	r2, r2, #7
 8022c48:	9902      	ldr	r1, [sp, #8]
 8022c4a:	4093      	lsls	r3, r2
 8022c4c:	005b      	lsls	r3, r3, #1
 8022c4e:	f403 72ff 	and.w	r2, r3, #510	; 0x1fe
 8022c52:	9b03      	ldr	r3, [sp, #12]
 8022c54:	781b      	ldrb	r3, [r3, #0]
 8022c56:	410b      	asrs	r3, r1
 8022c58:	3101      	adds	r1, #1
 8022c5a:	b2c9      	uxtb	r1, r1
 8022c5c:	b2db      	uxtb	r3, r3
 8022c5e:	2908      	cmp	r1, #8
 8022c60:	9102      	str	r1, [sp, #8]
 8022c62:	9903      	ldr	r1, [sp, #12]
 8022c64:	ea43 0302 	orr.w	r3, r3, r2
 8022c68:	bf0c      	ite	eq
 8022c6a:	3102      	addeq	r1, #2
 8022c6c:	3101      	addne	r1, #1
 8022c6e:	b29a      	uxth	r2, r3
 8022c70:	bf05      	ittet	eq
 8022c72:	9103      	streq	r1, [sp, #12]
 8022c74:	2100      	moveq	r1, #0
 8022c76:	9103      	strne	r1, [sp, #12]
 8022c78:	9102      	streq	r1, [sp, #8]
 8022c7a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8022c7c:	4291      	cmp	r1, r2
 8022c7e:	d30a      	bcc.n	8022c96 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f2>
 8022c80:	f884 3804 	strb.w	r3, [r4, #2052]	; 0x804
 8022c84:	2301      	movs	r3, #1
 8022c86:	9905      	ldr	r1, [sp, #20]
 8022c88:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8022c8c:	d30f      	bcc.n	8022cae <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x20a>
 8022c8e:	2100      	movs	r1, #0
 8022c90:	4698      	mov	r8, r3
 8022c92:	9100      	str	r1, [sp, #0]
 8022c94:	e032      	b.n	8022cfc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x258>
 8022c96:	9b05      	ldr	r3, [sp, #20]
 8022c98:	429a      	cmp	r2, r3
 8022c9a:	d318      	bcc.n	8022cce <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22a>
 8022c9c:	eb04 0308 	add.w	r3, r4, r8
 8022ca0:	f894 1804 	ldrb.w	r1, [r4, #2052]	; 0x804
 8022ca4:	f883 1804 	strb.w	r1, [r3, #2052]	; 0x804
 8022ca8:	f108 0301 	add.w	r3, r8, #1
 8022cac:	b29b      	uxth	r3, r3
 8022cae:	9905      	ldr	r1, [sp, #20]
 8022cb0:	f894 6804 	ldrb.w	r6, [r4, #2052]	; 0x804
 8022cb4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8022cb8:	710e      	strb	r6, [r1, #4]
 8022cba:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8022cbc:	80ce      	strh	r6, [r1, #6]
 8022cbe:	f108 0601 	add.w	r6, r8, #1
 8022cc2:	714e      	strb	r6, [r1, #5]
 8022cc4:	9905      	ldr	r1, [sp, #20]
 8022cc6:	3101      	adds	r1, #1
 8022cc8:	b289      	uxth	r1, r1
 8022cca:	9105      	str	r1, [sp, #20]
 8022ccc:	e7df      	b.n	8022c8e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ea>
 8022cce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8022cd2:	4611      	mov	r1, r2
 8022cd4:	795b      	ldrb	r3, [r3, #5]
 8022cd6:	f603 0604 	addw	r6, r3, #2052	; 0x804
 8022cda:	4426      	add	r6, r4
 8022cdc:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8022cde:	4437      	add	r7, r6
 8022ce0:	2f00      	cmp	r7, #0
 8022ce2:	dd06      	ble.n	8022cf2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x24e>
 8022ce4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8022ce8:	790f      	ldrb	r7, [r1, #4]
 8022cea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8022cee:	88c9      	ldrh	r1, [r1, #6]
 8022cf0:	e7f4      	b.n	8022cdc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>
 8022cf2:	f884 1804 	strb.w	r1, [r4, #2052]	; 0x804
 8022cf6:	b29b      	uxth	r3, r3
 8022cf8:	e7c5      	b.n	8022c86 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e2>
 8022cfa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022cfc:	920c      	str	r2, [sp, #48]	; 0x30
 8022cfe:	4601      	mov	r1, r0
 8022d00:	9a00      	ldr	r2, [sp, #0]
 8022d02:	469c      	mov	ip, r3
 8022d04:	e78d      	b.n	8022c22 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 8022d06:	ebac 0305 	sub.w	r3, ip, r5
 8022d0a:	1957      	adds	r7, r2, r5
 8022d0c:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8022d10:	b2ba      	uxth	r2, r7
 8022d12:	b29b      	uxth	r3, r3
 8022d14:	9200      	str	r2, [sp, #0]
 8022d16:	2500      	movs	r5, #0
 8022d18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022d1a:	455a      	cmp	r2, fp
 8022d1c:	d88d      	bhi.n	8022c3a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x196>
 8022d1e:	4601      	mov	r1, r0
 8022d20:	e748      	b.n	8022bb4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x110>
 8022d22:	458c      	cmp	ip, r1
 8022d24:	bf27      	ittee	cs
 8022d26:	ebac 0301 	subcs.w	r3, ip, r1
 8022d2a:	4628      	movcs	r0, r5
 8022d2c:	eba1 000c 	subcc.w	r0, r1, ip
 8022d30:	462b      	movcc	r3, r5
 8022d32:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8022d34:	bf27      	ittee	cs
 8022d36:	b29b      	uxthcs	r3, r3
 8022d38:	9109      	strcs	r1, [sp, #36]	; 0x24
 8022d3a:	b280      	uxthcc	r0, r0
 8022d3c:	f8cd c024 	strcc.w	ip, [sp, #36]	; 0x24
 8022d40:	2dff      	cmp	r5, #255	; 0xff
 8022d42:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8022d44:	eb02 0705 	add.w	r7, r2, r5
 8022d48:	b2bd      	uxth	r5, r7
 8022d4a:	9500      	str	r5, [sp, #0]
 8022d4c:	d12e      	bne.n	8022dac <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x308>
 8022d4e:	465e      	mov	r6, fp
 8022d50:	9d00      	ldr	r5, [sp, #0]
 8022d52:	42aa      	cmp	r2, r5
 8022d54:	f040 8083 	bne.w	8022e5e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3ba>
 8022d58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022d5a:	458c      	cmp	ip, r1
 8022d5c:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 8022d60:	d3d9      	bcc.n	8022d16 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x272>
 8022d62:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8022d64:	9904      	ldr	r1, [sp, #16]
 8022d66:	8812      	ldrh	r2, [r2, #0]
 8022d68:	1a52      	subs	r2, r2, r1
 8022d6a:	9916      	ldr	r1, [sp, #88]	; 0x58
 8022d6c:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 8022d70:	9a08      	ldr	r2, [sp, #32]
 8022d72:	3201      	adds	r2, #1
 8022d74:	428a      	cmp	r2, r1
 8022d76:	9208      	str	r2, [sp, #32]
 8022d78:	f040 8091 	bne.w	8022e9e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3fa>
 8022d7c:	f8bd 5070 	ldrh.w	r5, [sp, #112]	; 0x70
 8022d80:	f8bd c068 	ldrh.w	ip, [sp, #104]	; 0x68
 8022d84:	9b04      	ldr	r3, [sp, #16]
 8022d86:	eba5 050c 	sub.w	r5, r5, ip
 8022d8a:	b2ad      	uxth	r5, r5
 8022d8c:	2d00      	cmp	r5, #0
 8022d8e:	bf08      	it	eq
 8022d90:	4619      	moveq	r1, r3
 8022d92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022d94:	bf18      	it	ne
 8022d96:	2100      	movne	r1, #0
 8022d98:	3301      	adds	r3, #1
 8022d9a:	b289      	uxth	r1, r1
 8022d9c:	930d      	str	r3, [sp, #52]	; 0x34
 8022d9e:	e700      	b.n	8022ba2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xfe>
 8022da0:	2400baf0 	.word	0x2400baf0
 8022da4:	2400baea 	.word	0x2400baea
 8022da8:	fffff7fb 	.word	0xfffff7fb
 8022dac:	46d9      	mov	r9, fp
 8022dae:	9d00      	ldr	r5, [sp, #0]
 8022db0:	42aa      	cmp	r2, r5
 8022db2:	d0d1      	beq.n	8022d58 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b4>
 8022db4:	1c55      	adds	r5, r2, #1
 8022db6:	4422      	add	r2, r4
 8022db8:	f892 e804 	ldrb.w	lr, [r2, #2052]	; 0x804
 8022dbc:	9a06      	ldr	r2, [sp, #24]
 8022dbe:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8022dc2:	9517      	str	r5, [sp, #92]	; 0x5c
 8022dc4:	4472      	add	r2, lr
 8022dc6:	9212      	str	r2, [sp, #72]	; 0x48
 8022dc8:	f8b9 2000 	ldrh.w	r2, [r9]
 8022dcc:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8022dce:	1216      	asrs	r6, r2, #8
 8022dd0:	f897 a002 	ldrb.w	sl, [r7, #2]
 8022dd4:	10d5      	asrs	r5, r2, #3
 8022dd6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8022dd8:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8022ddc:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8022de0:	00d2      	lsls	r2, r2, #3
 8022de2:	fb1a fa07 	smulbb	sl, sl, r7
 8022de6:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8022dea:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8022dec:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8022df0:	b2d2      	uxtb	r2, r2
 8022df2:	fb06 a607 	mla	r6, r6, r7, sl
 8022df6:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8022df8:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8022dfc:	f897 a001 	ldrb.w	sl, [r7, #1]
 8022e00:	b2b6      	uxth	r6, r6
 8022e02:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8022e04:	fb1a fa07 	smulbb	sl, sl, r7
 8022e08:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8022e0a:	fb05 a507 	mla	r5, r5, r7, sl
 8022e0e:	9f06      	ldr	r7, [sp, #24]
 8022e10:	f106 0a01 	add.w	sl, r6, #1
 8022e14:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8022e18:	b2ad      	uxth	r5, r5
 8022e1a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8022e1c:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8022e20:	f105 0a01 	add.w	sl, r5, #1
 8022e24:	fb1e fe07 	smulbb	lr, lr, r7
 8022e28:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8022e2a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8022e2e:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8022e32:	fb02 e207 	mla	r2, r2, r7, lr
 8022e36:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8022e3a:	b292      	uxth	r2, r2
 8022e3c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8022e40:	f102 0e01 	add.w	lr, r2, #1
 8022e44:	eb0e 2e12 	add.w	lr, lr, r2, lsr #8
 8022e48:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 8022e4c:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8022e50:	ea4e 0606 	orr.w	r6, lr, r6
 8022e54:	ea46 060a 	orr.w	r6, r6, sl
 8022e58:	f829 6b02 	strh.w	r6, [r9], #2
 8022e5c:	e7a7      	b.n	8022dae <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x30a>
 8022e5e:	f102 0e01 	add.w	lr, r2, #1
 8022e62:	4422      	add	r2, r4
 8022e64:	9f06      	ldr	r7, [sp, #24]
 8022e66:	f892 5804 	ldrb.w	r5, [r2, #2052]	; 0x804
 8022e6a:	9a06      	ldr	r2, [sp, #24]
 8022e6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022e70:	eb02 0a05 	add.w	sl, r2, r5
 8022e74:	4a13      	ldr	r2, [pc, #76]	; (8022ec4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x420>)
 8022e76:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8022e7a:	ea02 2909 	and.w	r9, r2, r9, lsl #8
 8022e7e:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8022e82:	00d2      	lsls	r2, r2, #3
 8022e84:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022e88:	ea49 0202 	orr.w	r2, r9, r2
 8022e8c:	f817 9005 	ldrb.w	r9, [r7, r5]
 8022e90:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 8022e94:	f826 2b02 	strh.w	r2, [r6], #2
 8022e98:	fa1f f28e 	uxth.w	r2, lr
 8022e9c:	e758      	b.n	8022d50 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ac>
 8022e9e:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8022ea2:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 8022ea6:	1a2d      	subs	r5, r5, r0
 8022ea8:	b2ad      	uxth	r5, r5
 8022eaa:	2d00      	cmp	r5, #0
 8022eac:	bf18      	it	ne
 8022eae:	2000      	movne	r0, #0
 8022eb0:	e732      	b.n	8022d18 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>
 8022eb2:	4b05      	ldr	r3, [pc, #20]	; (8022ec8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x424>)
 8022eb4:	6818      	ldr	r0, [r3, #0]
 8022eb6:	6803      	ldr	r3, [r0, #0]
 8022eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022eba:	4798      	blx	r3
 8022ebc:	b01f      	add	sp, #124	; 0x7c
 8022ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022ec2:	bf00      	nop
 8022ec4:	fffff800 	.word	0xfffff800
 8022ec8:	2400baf0 	.word	0x2400baf0

08022ecc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8022ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022ed0:	b091      	sub	sp, #68	; 0x44
 8022ed2:	469b      	mov	fp, r3
 8022ed4:	4616      	mov	r6, r2
 8022ed6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8022eda:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8022ede:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8022ee2:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
 8022ee6:	4604      	mov	r4, r0
 8022ee8:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 8022eec:	4640      	mov	r0, r8
 8022eee:	460d      	mov	r5, r1
 8022ef0:	4659      	mov	r1, fp
 8022ef2:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8022ef6:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8022efa:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
 8022efe:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
 8022f02:	f7f4 ffbd 	bl	8017e80 <_ZN8touchgfx4RectaNERKS0_>
 8022f06:	4631      	mov	r1, r6
 8022f08:	4640      	mov	r0, r8
 8022f0a:	f7f4 ffb9 	bl	8017e80 <_ZN8touchgfx4RectaNERKS0_>
 8022f0e:	4b74      	ldr	r3, [pc, #464]	; (80230e0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 8022f10:	8818      	ldrh	r0, [r3, #0]
 8022f12:	4b74      	ldr	r3, [pc, #464]	; (80230e4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 8022f14:	b202      	sxth	r2, r0
 8022f16:	8819      	ldrh	r1, [r3, #0]
 8022f18:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8022f1c:	b20e      	sxth	r6, r1
 8022f1e:	2b00      	cmp	r3, #0
 8022f20:	da07      	bge.n	8022f32 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 8022f22:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8022f26:	4463      	add	r3, ip
 8022f28:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8022f2c:	2300      	movs	r3, #0
 8022f2e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8022f32:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8022f36:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 8022f3a:	1ad2      	subs	r2, r2, r3
 8022f3c:	4594      	cmp	ip, r2
 8022f3e:	bfc4      	itt	gt
 8022f40:	1ac2      	subgt	r2, r0, r3
 8022f42:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
 8022f46:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8022f4a:	2a00      	cmp	r2, #0
 8022f4c:	da07      	bge.n	8022f5e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 8022f4e:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
 8022f52:	4462      	add	r2, ip
 8022f54:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8022f58:	2200      	movs	r2, #0
 8022f5a:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8022f5e:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 8022f62:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 8022f66:	eba6 060a 	sub.w	r6, r6, sl
 8022f6a:	42b2      	cmp	r2, r6
 8022f6c:	bfc4      	itt	gt
 8022f6e:	eba1 020a 	subgt.w	r2, r1, sl
 8022f72:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
 8022f76:	4a5c      	ldr	r2, [pc, #368]	; (80230e8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 8022f78:	7812      	ldrb	r2, [r2, #0]
 8022f7a:	b9a2      	cbnz	r2, 8022fa6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 8022f7c:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 8022f80:	4286      	cmp	r6, r0
 8022f82:	4640      	mov	r0, r8
 8022f84:	9303      	str	r3, [sp, #12]
 8022f86:	bf14      	ite	ne
 8022f88:	2600      	movne	r6, #0
 8022f8a:	2601      	moveq	r6, #1
 8022f8c:	f7f4 ffbb 	bl	8017f06 <_ZNK8touchgfx4Rect7isEmptyEv>
 8022f90:	9b03      	ldr	r3, [sp, #12]
 8022f92:	b160      	cbz	r0, 8022fae <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 8022f94:	2300      	movs	r3, #0
 8022f96:	8023      	strh	r3, [r4, #0]
 8022f98:	8063      	strh	r3, [r4, #2]
 8022f9a:	80a3      	strh	r3, [r4, #4]
 8022f9c:	4620      	mov	r0, r4
 8022f9e:	80e3      	strh	r3, [r4, #6]
 8022fa0:	b011      	add	sp, #68	; 0x44
 8022fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022fa6:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8022faa:	428e      	cmp	r6, r1
 8022fac:	e7e9      	b.n	8022f82 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 8022fae:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8022fb2:	a90e      	add	r1, sp, #56	; 0x38
 8022fb4:	900e      	str	r0, [sp, #56]	; 0x38
 8022fb6:	a80c      	add	r0, sp, #48	; 0x30
 8022fb8:	9205      	str	r2, [sp, #20]
 8022fba:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 8022fbe:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
 8022fc2:	9206      	str	r2, [sp, #24]
 8022fc4:	f8bb 2000 	ldrh.w	r2, [fp]
 8022fc8:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
 8022fcc:	1a9b      	subs	r3, r3, r2
 8022fce:	b21b      	sxth	r3, r3
 8022fd0:	9303      	str	r3, [sp, #12]
 8022fd2:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8022fd6:	f8df b118 	ldr.w	fp, [pc, #280]	; 80230f0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8022fda:	ebaa 0a03 	sub.w	sl, sl, r3
 8022fde:	fa0f f38a 	sxth.w	r3, sl
 8022fe2:	9304      	str	r3, [sp, #16]
 8022fe4:	9b03      	ldr	r3, [sp, #12]
 8022fe6:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8022fea:	9b04      	ldr	r3, [sp, #16]
 8022fec:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8022ff0:	9b05      	ldr	r3, [sp, #20]
 8022ff2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8022ff6:	9b06      	ldr	r3, [sp, #24]
 8022ff8:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8022ffc:	f7f8 fb64 	bl	801b6c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023000:	4640      	mov	r0, r8
 8023002:	f7f8 fb39 	bl	801b678 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023006:	a80e      	add	r0, sp, #56	; 0x38
 8023008:	f7f8 fb36 	bl	801b678 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802300c:	4b37      	ldr	r3, [pc, #220]	; (80230ec <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 802300e:	4628      	mov	r0, r5
 8023010:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8023014:	881b      	ldrh	r3, [r3, #0]
 8023016:	9307      	str	r3, [sp, #28]
 8023018:	682b      	ldr	r3, [r5, #0]
 802301a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802301c:	4798      	blx	r3
 802301e:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
 8023022:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8023026:	4681      	mov	r9, r0
 8023028:	f8db 0000 	ldr.w	r0, [fp]
 802302c:	fb1a 3305 	smlabb	r3, sl, r5, r3
 8023030:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8023032:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8023036:	6803      	ldr	r3, [r0, #0]
 8023038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802303a:	4798      	blx	r3
 802303c:	4607      	mov	r7, r0
 802303e:	f8db 0000 	ldr.w	r0, [fp]
 8023042:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8023046:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 802304a:	6803      	ldr	r3, [r0, #0]
 802304c:	9109      	str	r1, [sp, #36]	; 0x24
 802304e:	9208      	str	r2, [sp, #32]
 8023050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023052:	4798      	blx	r3
 8023054:	f010 0f01 	tst.w	r0, #1
 8023058:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 802305c:	d012      	beq.n	8023084 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 802305e:	f8db 0000 	ldr.w	r0, [fp]
 8023062:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8023066:	6803      	ldr	r3, [r0, #0]
 8023068:	9200      	str	r2, [sp, #0]
 802306a:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 802306c:	462b      	mov	r3, r5
 802306e:	e898 0006 	ldmia.w	r8, {r1, r2}
 8023072:	47b0      	blx	r6
 8023074:	9b03      	ldr	r3, [sp, #12]
 8023076:	8023      	strh	r3, [r4, #0]
 8023078:	9b04      	ldr	r3, [sp, #16]
 802307a:	8063      	strh	r3, [r4, #2]
 802307c:	9b05      	ldr	r3, [sp, #20]
 802307e:	80a3      	strh	r3, [r4, #4]
 8023080:	9b06      	ldr	r3, [sp, #24]
 8023082:	e78b      	b.n	8022f9c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 8023084:	fb09 f202 	mul.w	r2, r9, r2
 8023088:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 802308c:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8023090:	440f      	add	r7, r1
 8023092:	b166      	cbz	r6, 80230ae <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8023094:	9a07      	ldr	r2, [sp, #28]
 8023096:	4592      	cmp	sl, r2
 8023098:	d109      	bne.n	80230ae <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 802309a:	f8db 0000 	ldr.w	r0, [fp]
 802309e:	fb09 f303 	mul.w	r3, r9, r3
 80230a2:	4629      	mov	r1, r5
 80230a4:	6802      	ldr	r2, [r0, #0]
 80230a6:	6b56      	ldr	r6, [r2, #52]	; 0x34
 80230a8:	463a      	mov	r2, r7
 80230aa:	47b0      	blx	r6
 80230ac:	e7e2      	b.n	8023074 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 80230ae:	fb0a f303 	mul.w	r3, sl, r3
 80230b2:	ea4f 064a 	mov.w	r6, sl, lsl #1
 80230b6:	f8df b038 	ldr.w	fp, [pc, #56]	; 80230f0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 80230ba:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 80230be:	4545      	cmp	r5, r8
 80230c0:	d2d8      	bcs.n	8023074 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 80230c2:	f8db 0000 	ldr.w	r0, [fp]
 80230c6:	4629      	mov	r1, r5
 80230c8:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 80230cc:	4435      	add	r5, r6
 80230ce:	6802      	ldr	r2, [r0, #0]
 80230d0:	005b      	lsls	r3, r3, #1
 80230d2:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 80230d6:	463a      	mov	r2, r7
 80230d8:	47d0      	blx	sl
 80230da:	444f      	add	r7, r9
 80230dc:	e7ef      	b.n	80230be <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 80230de:	bf00      	nop
 80230e0:	2400bae4 	.word	0x2400bae4
 80230e4:	2400bae6 	.word	0x2400bae6
 80230e8:	2400bae8 	.word	0x2400bae8
 80230ec:	2400baea 	.word	0x2400baea
 80230f0:	2400baf0 	.word	0x2400baf0

080230f4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 80230f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80230f6:	4606      	mov	r6, r0
 80230f8:	b087      	sub	sp, #28
 80230fa:	460c      	mov	r4, r1
 80230fc:	4617      	mov	r7, r2
 80230fe:	461d      	mov	r5, r3
 8023100:	b333      	cbz	r3, 8023150 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8023102:	4608      	mov	r0, r1
 8023104:	f7f4 feff 	bl	8017f06 <_ZNK8touchgfx4Rect7isEmptyEv>
 8023108:	bb10      	cbnz	r0, 8023150 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 802310a:	6820      	ldr	r0, [r4, #0]
 802310c:	ab04      	add	r3, sp, #16
 802310e:	6861      	ldr	r1, [r4, #4]
 8023110:	4c1b      	ldr	r4, [pc, #108]	; (8023180 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 8023112:	c303      	stmia	r3!, {r0, r1}
 8023114:	a804      	add	r0, sp, #16
 8023116:	f7f8 faaf 	bl	801b678 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802311a:	6820      	ldr	r0, [r4, #0]
 802311c:	6803      	ldr	r3, [r0, #0]
 802311e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023120:	4798      	blx	r3
 8023122:	2dff      	cmp	r5, #255	; 0xff
 8023124:	d016      	beq.n	8023154 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 8023126:	f010 0f08 	tst.w	r0, #8
 802312a:	6820      	ldr	r0, [r4, #0]
 802312c:	d015      	beq.n	802315a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 802312e:	2400      	movs	r4, #0
 8023130:	6801      	ldr	r1, [r0, #0]
 8023132:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8023136:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 802313a:	e9cd 5402 	strd	r5, r4, [sp, #8]
 802313e:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8023142:	9401      	str	r4, [sp, #4]
 8023144:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8023148:	9400      	str	r4, [sp, #0]
 802314a:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 802314c:	4639      	mov	r1, r7
 802314e:	47a0      	blx	r4
 8023150:	b007      	add	sp, #28
 8023152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023154:	f010 0f02 	tst.w	r0, #2
 8023158:	e7e7      	b.n	802312a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 802315a:	6803      	ldr	r3, [r0, #0]
 802315c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802315e:	4798      	blx	r3
 8023160:	4b08      	ldr	r3, [pc, #32]	; (8023184 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8023162:	4601      	mov	r1, r0
 8023164:	4630      	mov	r0, r6
 8023166:	881a      	ldrh	r2, [r3, #0]
 8023168:	6833      	ldr	r3, [r6, #0]
 802316a:	e9cd 7500 	strd	r7, r5, [sp]
 802316e:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8023170:	ab04      	add	r3, sp, #16
 8023172:	47a8      	blx	r5
 8023174:	6820      	ldr	r0, [r4, #0]
 8023176:	6803      	ldr	r3, [r0, #0]
 8023178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802317a:	4798      	blx	r3
 802317c:	e7e8      	b.n	8023150 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 802317e:	bf00      	nop
 8023180:	2400baf0 	.word	0x2400baf0
 8023184:	2400baea 	.word	0x2400baea

08023188 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8023188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802318c:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 8023190:	4688      	mov	r8, r1
 8023192:	4614      	mov	r4, r2
 8023194:	461d      	mov	r5, r3
 8023196:	9e08      	ldr	r6, [sp, #32]
 8023198:	2f00      	cmp	r7, #0
 802319a:	f000 80ab 	beq.w	80232f4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 802319e:	4618      	mov	r0, r3
 80231a0:	f7f4 feb1 	bl	8017f06 <_ZNK8touchgfx4Rect7isEmptyEv>
 80231a4:	2800      	cmp	r0, #0
 80231a6:	f040 80a5 	bne.w	80232f4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 80231aa:	f9b5 1000 	ldrsh.w	r1, [r5]
 80231ae:	2fff      	cmp	r7, #255	; 0xff
 80231b0:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80231b4:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 80231b8:	fb04 1303 	mla	r3, r4, r3, r1
 80231bc:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 80231c0:	eba4 0200 	sub.w	r2, r4, r0
 80231c4:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 80231c8:	fb04 f505 	mul.w	r5, r4, r5
 80231cc:	ea4f 2816 	mov.w	r8, r6, lsr #8
 80231d0:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 80231d4:	d04a      	beq.n	802326c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
 80231d6:	b2bc      	uxth	r4, r7
 80231d8:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 80231dc:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 80231e0:	fa5f f788 	uxtb.w	r7, r8
 80231e4:	b2f3      	uxtb	r3, r6
 80231e6:	0040      	lsls	r0, r0, #1
 80231e8:	fb0e fe04 	mul.w	lr, lr, r4
 80231ec:	4367      	muls	r7, r4
 80231ee:	ea4f 0842 	mov.w	r8, r2, lsl #1
 80231f2:	4363      	muls	r3, r4
 80231f4:	fa1f fc8c 	uxth.w	ip, ip
 80231f8:	42a9      	cmp	r1, r5
 80231fa:	d27b      	bcs.n	80232f4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 80231fc:	eb01 0900 	add.w	r9, r1, r0
 8023200:	4549      	cmp	r1, r9
 8023202:	d231      	bcs.n	8023268 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe0>
 8023204:	880a      	ldrh	r2, [r1, #0]
 8023206:	1214      	asrs	r4, r2, #8
 8023208:	10d6      	asrs	r6, r2, #3
 802320a:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802320e:	00d2      	lsls	r2, r2, #3
 8023210:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8023214:	b2d2      	uxtb	r2, r2
 8023216:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 802321a:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 802321e:	fb14 f40c 	smulbb	r4, r4, ip
 8023222:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8023226:	fb12 f20c 	smulbb	r2, r2, ip
 802322a:	fb16 f60c 	smulbb	r6, r6, ip
 802322e:	4474      	add	r4, lr
 8023230:	441a      	add	r2, r3
 8023232:	b2a4      	uxth	r4, r4
 8023234:	443e      	add	r6, r7
 8023236:	b292      	uxth	r2, r2
 8023238:	f104 0a01 	add.w	sl, r4, #1
 802323c:	b2b6      	uxth	r6, r6
 802323e:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8023242:	f102 0a01 	add.w	sl, r2, #1
 8023246:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 802324a:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802324e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8023252:	4322      	orrs	r2, r4
 8023254:	1c74      	adds	r4, r6, #1
 8023256:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 802325a:	0976      	lsrs	r6, r6, #5
 802325c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8023260:	4332      	orrs	r2, r6
 8023262:	f821 2b02 	strh.w	r2, [r1], #2
 8023266:	e7cb      	b.n	8023200 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x78>
 8023268:	4441      	add	r1, r8
 802326a:	e7c5      	b.n	80231f8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 802326c:	0973      	lsrs	r3, r6, #5
 802326e:	4f22      	ldr	r7, [pc, #136]	; (80232f8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>)
 8023270:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8023274:	ea08 0707 	and.w	r7, r8, r7
 8023278:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802327c:	433b      	orrs	r3, r7
 802327e:	07e7      	lsls	r7, r4, #31
 8023280:	ea43 0306 	orr.w	r3, r3, r6
 8023284:	b29b      	uxth	r3, r3
 8023286:	d50b      	bpl.n	80232a0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 8023288:	0040      	lsls	r0, r0, #1
 802328a:	0052      	lsls	r2, r2, #1
 802328c:	42a9      	cmp	r1, r5
 802328e:	d231      	bcs.n	80232f4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8023290:	180c      	adds	r4, r1, r0
 8023292:	42a1      	cmp	r1, r4
 8023294:	d202      	bcs.n	802329c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 8023296:	f821 3b02 	strh.w	r3, [r1], #2
 802329a:	e7fa      	b.n	8023292 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 802329c:	4411      	add	r1, r2
 802329e:	e7f5      	b.n	802328c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
 80232a0:	078e      	lsls	r6, r1, #30
 80232a2:	d008      	beq.n	80232b6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
 80232a4:	0066      	lsls	r6, r4, #1
 80232a6:	460a      	mov	r2, r1
 80232a8:	42aa      	cmp	r2, r5
 80232aa:	d202      	bcs.n	80232b2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 80232ac:	8013      	strh	r3, [r2, #0]
 80232ae:	4432      	add	r2, r6
 80232b0:	e7fa      	b.n	80232a8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
 80232b2:	3102      	adds	r1, #2
 80232b4:	3801      	subs	r0, #1
 80232b6:	07c2      	lsls	r2, r0, #31
 80232b8:	d50b      	bpl.n	80232d2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 80232ba:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 80232be:	0066      	lsls	r6, r4, #1
 80232c0:	3a01      	subs	r2, #1
 80232c2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80232c6:	42aa      	cmp	r2, r5
 80232c8:	d202      	bcs.n	80232d0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 80232ca:	8013      	strh	r3, [r2, #0]
 80232cc:	4432      	add	r2, r6
 80232ce:	e7fa      	b.n	80232c6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
 80232d0:	3801      	subs	r0, #1
 80232d2:	b178      	cbz	r0, 80232f4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 80232d4:	1040      	asrs	r0, r0, #1
 80232d6:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 80232da:	0080      	lsls	r0, r0, #2
 80232dc:	0064      	lsls	r4, r4, #1
 80232de:	42a9      	cmp	r1, r5
 80232e0:	d208      	bcs.n	80232f4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 80232e2:	180e      	adds	r6, r1, r0
 80232e4:	460a      	mov	r2, r1
 80232e6:	42b2      	cmp	r2, r6
 80232e8:	d202      	bcs.n	80232f0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 80232ea:	f842 3b04 	str.w	r3, [r2], #4
 80232ee:	e7fa      	b.n	80232e6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15e>
 80232f0:	4421      	add	r1, r4
 80232f2:	e7f4      	b.n	80232de <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 80232f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80232f8:	00fff800 	.word	0x00fff800

080232fc <_ZN8touchgfx8LCD16bppC1Ev>:
 80232fc:	2200      	movs	r2, #0
 80232fe:	4912      	ldr	r1, [pc, #72]	; (8023348 <_ZN8touchgfx8LCD16bppC1Ev+0x4c>)
 8023300:	6042      	str	r2, [r0, #4]
 8023302:	6001      	str	r1, [r0, #0]
 8023304:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8023308:	e9c0 2204 	strd	r2, r2, [r0, #16]
 802330c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8023310:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8023314:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8023318:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 802331c:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8023320:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8023324:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8023328:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 802332c:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8023330:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8023334:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 8023338:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 802333c:	e9c0 221e 	strd	r2, r2, [r0, #120]	; 0x78
 8023340:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 8023344:	4770      	bx	lr
 8023346:	bf00      	nop
 8023348:	0802fe8c 	.word	0x0802fe8c

0802334c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 802334c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023350:	b08d      	sub	sp, #52	; 0x34
 8023352:	460d      	mov	r5, r1
 8023354:	4604      	mov	r4, r0
 8023356:	4699      	mov	r9, r3
 8023358:	6808      	ldr	r0, [r1, #0]
 802335a:	ab08      	add	r3, sp, #32
 802335c:	6849      	ldr	r1, [r1, #4]
 802335e:	c303      	stmia	r3!, {r0, r1}
 8023360:	6810      	ldr	r0, [r2, #0]
 8023362:	ab0a      	add	r3, sp, #40	; 0x28
 8023364:	6851      	ldr	r1, [r2, #4]
 8023366:	c303      	stmia	r3!, {r0, r1}
 8023368:	a808      	add	r0, sp, #32
 802336a:	f7f8 f985 	bl	801b678 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802336e:	4629      	mov	r1, r5
 8023370:	a80a      	add	r0, sp, #40	; 0x28
 8023372:	4d67      	ldr	r5, [pc, #412]	; (8023510 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8023374:	f7f8 f9a8 	bl	801b6c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023378:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 802337c:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8023380:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8023384:	6828      	ldr	r0, [r5, #0]
 8023386:	fb11 2103 	smlabb	r1, r1, r3, r2
 802338a:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 802338e:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8023392:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8023396:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 802339a:	440a      	add	r2, r1
 802339c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 80233a0:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 80233a4:	4413      	add	r3, r2
 80233a6:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80233aa:	6803      	ldr	r3, [r0, #0]
 80233ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80233ae:	4798      	blx	r3
 80233b0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80233b4:	d119      	bne.n	80233ea <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 80233b6:	f010 0f20 	tst.w	r0, #32
 80233ba:	6828      	ldr	r0, [r5, #0]
 80233bc:	d018      	beq.n	80233f0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 80233be:	2500      	movs	r5, #0
 80233c0:	6801      	ldr	r1, [r0, #0]
 80233c2:	b2b6      	uxth	r6, r6
 80233c4:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 80233c8:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80233cc:	9601      	str	r6, [sp, #4]
 80233ce:	e9cd 9503 	strd	r9, r5, [sp, #12]
 80233d2:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 80233d6:	9502      	str	r5, [sp, #8]
 80233d8:	fa1f f588 	uxth.w	r5, r8
 80233dc:	9500      	str	r5, [sp, #0]
 80233de:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 80233e0:	4621      	mov	r1, r4
 80233e2:	47a8      	blx	r5
 80233e4:	b00d      	add	sp, #52	; 0x34
 80233e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80233ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80233ee:	e7e4      	b.n	80233ba <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 80233f0:	6803      	ldr	r3, [r0, #0]
 80233f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80233f4:	4798      	blx	r3
 80233f6:	4947      	ldr	r1, [pc, #284]	; (8023514 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 80233f8:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 80233fc:	880b      	ldrh	r3, [r1, #0]
 80233fe:	468a      	mov	sl, r1
 8023400:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 8023404:	fb03 5202 	mla	r2, r3, r2, r5
 8023408:	4373      	muls	r3, r6
 802340a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 802340e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8023412:	9307      	str	r3, [sp, #28]
 8023414:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8023418:	9306      	str	r3, [sp, #24]
 802341a:	9b07      	ldr	r3, [sp, #28]
 802341c:	4298      	cmp	r0, r3
 802341e:	d270      	bcs.n	8023502 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 8023420:	9b06      	ldr	r3, [sp, #24]
 8023422:	4621      	mov	r1, r4
 8023424:	eb00 0b03 	add.w	fp, r0, r3
 8023428:	4558      	cmp	r0, fp
 802342a:	d25d      	bcs.n	80234e8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 802342c:	f851 4b04 	ldr.w	r4, [r1], #4
 8023430:	0e23      	lsrs	r3, r4, #24
 8023432:	d014      	beq.n	802345e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8023434:	2bff      	cmp	r3, #255	; 0xff
 8023436:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 802343a:	d112      	bne.n	8023462 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 802343c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8023440:	d10f      	bne.n	8023462 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8023442:	0963      	lsrs	r3, r4, #5
 8023444:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8023448:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 802344c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023450:	f02c 0c07 	bic.w	ip, ip, #7
 8023454:	ea43 0c0c 	orr.w	ip, r3, ip
 8023458:	ea4c 0404 	orr.w	r4, ip, r4
 802345c:	8004      	strh	r4, [r0, #0]
 802345e:	3002      	adds	r0, #2
 8023460:	e7e2      	b.n	8023428 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 8023462:	fb09 f303 	mul.w	r3, r9, r3
 8023466:	8807      	ldrh	r7, [r0, #0]
 8023468:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 802346c:	fa5f fc8c 	uxtb.w	ip, ip
 8023470:	1c5a      	adds	r2, r3, #1
 8023472:	123e      	asrs	r6, r7, #8
 8023474:	10fd      	asrs	r5, r7, #3
 8023476:	eb02 2223 	add.w	r2, r2, r3, asr #8
 802347a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 802347e:	00ff      	lsls	r7, r7, #3
 8023480:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8023484:	1212      	asrs	r2, r2, #8
 8023486:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 802348a:	b293      	uxth	r3, r2
 802348c:	43d2      	mvns	r2, r2
 802348e:	b2ff      	uxtb	r7, r7
 8023490:	fb1e fe03 	smulbb	lr, lr, r3
 8023494:	b2d2      	uxtb	r2, r2
 8023496:	fb1c fc03 	smulbb	ip, ip, r3
 802349a:	b2e4      	uxtb	r4, r4
 802349c:	fb06 e602 	mla	r6, r6, r2, lr
 80234a0:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 80234a4:	fb14 f403 	smulbb	r4, r4, r3
 80234a8:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 80234ac:	b2b6      	uxth	r6, r6
 80234ae:	fb05 c502 	mla	r5, r5, r2, ip
 80234b2:	fb07 4702 	mla	r7, r7, r2, r4
 80234b6:	f106 0e01 	add.w	lr, r6, #1
 80234ba:	b2ad      	uxth	r5, r5
 80234bc:	b2bf      	uxth	r7, r7
 80234be:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 80234c2:	f105 0c01 	add.w	ip, r5, #1
 80234c6:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 80234ca:	1c7e      	adds	r6, r7, #1
 80234cc:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80234d0:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 80234d4:	096d      	lsrs	r5, r5, #5
 80234d6:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80234da:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80234de:	ea46 060e 	orr.w	r6, r6, lr
 80234e2:	432e      	orrs	r6, r5
 80234e4:	8006      	strh	r6, [r0, #0]
 80234e6:	e7ba      	b.n	802345e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 80234e8:	f8ba 3000 	ldrh.w	r3, [sl]
 80234ec:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 80234f0:	eba3 0308 	sub.w	r3, r3, r8
 80234f4:	eba4 0408 	sub.w	r4, r4, r8
 80234f8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80234fc:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8023500:	e78b      	b.n	802341a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 8023502:	4b03      	ldr	r3, [pc, #12]	; (8023510 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8023504:	6818      	ldr	r0, [r3, #0]
 8023506:	6803      	ldr	r3, [r0, #0]
 8023508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802350a:	4798      	blx	r3
 802350c:	e76a      	b.n	80233e4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 802350e:	bf00      	nop
 8023510:	2400baf0 	.word	0x2400baf0
 8023514:	2400baea 	.word	0x2400baea

08023518 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 8023518:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802351c:	b085      	sub	sp, #20
 802351e:	6810      	ldr	r0, [r2, #0]
 8023520:	460c      	mov	r4, r1
 8023522:	6851      	ldr	r1, [r2, #4]
 8023524:	466d      	mov	r5, sp
 8023526:	4616      	mov	r6, r2
 8023528:	c503      	stmia	r5!, {r0, r1}
 802352a:	6818      	ldr	r0, [r3, #0]
 802352c:	6859      	ldr	r1, [r3, #4]
 802352e:	c503      	stmia	r5!, {r0, r1}
 8023530:	4668      	mov	r0, sp
 8023532:	4d2e      	ldr	r5, [pc, #184]	; (80235ec <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 8023534:	f7f8 f8a0 	bl	801b678 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023538:	4631      	mov	r1, r6
 802353a:	a802      	add	r0, sp, #8
 802353c:	4e2c      	ldr	r6, [pc, #176]	; (80235f0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 802353e:	f7f8 f8c3 	bl	801b6c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023542:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8023546:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 802354a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 802354e:	6828      	ldr	r0, [r5, #0]
 8023550:	fb11 2103 	smlabb	r1, r1, r3, r2
 8023554:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8023558:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 802355c:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8023560:	f8bd 1000 	ldrh.w	r1, [sp]
 8023564:	440a      	add	r2, r1
 8023566:	f8ad 2008 	strh.w	r2, [sp, #8]
 802356a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 802356e:	4413      	add	r3, r2
 8023570:	f8ad 300a 	strh.w	r3, [sp, #10]
 8023574:	6803      	ldr	r3, [r0, #0]
 8023576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023578:	4798      	blx	r3
 802357a:	8833      	ldrh	r3, [r6, #0]
 802357c:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8023580:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 8023584:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8023588:	f8df e068 	ldr.w	lr, [pc, #104]	; 80235f4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 802358c:	fb03 1202 	mla	r2, r3, r2, r1
 8023590:	fb08 f303 	mul.w	r3, r8, r3
 8023594:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8023598:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 802359c:	4298      	cmp	r0, r3
 802359e:	d21d      	bcs.n	80235dc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 80235a0:	eb00 080c 	add.w	r8, r0, ip
 80235a4:	4540      	cmp	r0, r8
 80235a6:	d20f      	bcs.n	80235c8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 80235a8:	f854 1b04 	ldr.w	r1, [r4], #4
 80235ac:	ea4f 1951 	mov.w	r9, r1, lsr #5
 80235b0:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 80235b4:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 80235b8:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80235bc:	ea42 0209 	orr.w	r2, r2, r9
 80235c0:	430a      	orrs	r2, r1
 80235c2:	f820 2b02 	strh.w	r2, [r0], #2
 80235c6:	e7ed      	b.n	80235a4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 80235c8:	8832      	ldrh	r2, [r6, #0]
 80235ca:	1bd2      	subs	r2, r2, r7
 80235cc:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80235d0:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80235d4:	1bd2      	subs	r2, r2, r7
 80235d6:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 80235da:	e7df      	b.n	802359c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 80235dc:	6828      	ldr	r0, [r5, #0]
 80235de:	6803      	ldr	r3, [r0, #0]
 80235e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80235e2:	4798      	blx	r3
 80235e4:	b005      	add	sp, #20
 80235e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80235ea:	bf00      	nop
 80235ec:	2400baf0 	.word	0x2400baf0
 80235f0:	2400baea 	.word	0x2400baea
 80235f4:	fffff800 	.word	0xfffff800

080235f8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 80235f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80235fc:	b08e      	sub	sp, #56	; 0x38
 80235fe:	460e      	mov	r6, r1
 8023600:	4604      	mov	r4, r0
 8023602:	461d      	mov	r5, r3
 8023604:	6808      	ldr	r0, [r1, #0]
 8023606:	ab0a      	add	r3, sp, #40	; 0x28
 8023608:	6849      	ldr	r1, [r1, #4]
 802360a:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 80237e0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 802360e:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 80237e4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 8023612:	c303      	stmia	r3!, {r0, r1}
 8023614:	6810      	ldr	r0, [r2, #0]
 8023616:	ab0c      	add	r3, sp, #48	; 0x30
 8023618:	6851      	ldr	r1, [r2, #4]
 802361a:	c303      	stmia	r3!, {r0, r1}
 802361c:	a80a      	add	r0, sp, #40	; 0x28
 802361e:	f7f8 f82b 	bl	801b678 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023622:	4631      	mov	r1, r6
 8023624:	a80c      	add	r0, sp, #48	; 0x30
 8023626:	f7f8 f84f 	bl	801b6c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802362a:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 802362e:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8023632:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8023636:	f8d8 0000 	ldr.w	r0, [r8]
 802363a:	fb11 2103 	smlabb	r1, r1, r3, r2
 802363e:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 8023642:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 8023646:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802364a:	440c      	add	r4, r1
 802364c:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8023650:	440a      	add	r2, r1
 8023652:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8023656:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 802365a:	4413      	add	r3, r2
 802365c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8023660:	6803      	ldr	r3, [r0, #0]
 8023662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023664:	4798      	blx	r3
 8023666:	2dff      	cmp	r5, #255	; 0xff
 8023668:	d124      	bne.n	80236b4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 802366a:	f010 0f01 	tst.w	r0, #1
 802366e:	f8d8 0000 	ldr.w	r0, [r8]
 8023672:	d022      	beq.n	80236ba <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 8023674:	2100      	movs	r1, #0
 8023676:	f04f 0e01 	mov.w	lr, #1
 802367a:	f8d0 c000 	ldr.w	ip, [r0]
 802367e:	b2b6      	uxth	r6, r6
 8023680:	f8cd e018 	str.w	lr, [sp, #24]
 8023684:	b2bf      	uxth	r7, r7
 8023686:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 802368a:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 802368e:	e9cd 1107 	strd	r1, r1, [sp, #28]
 8023692:	f8b9 e000 	ldrh.w	lr, [r9]
 8023696:	9503      	str	r5, [sp, #12]
 8023698:	9601      	str	r6, [sp, #4]
 802369a:	9700      	str	r7, [sp, #0]
 802369c:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 80236a0:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80236a4:	9102      	str	r1, [sp, #8]
 80236a6:	4621      	mov	r1, r4
 80236a8:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 80236ac:	47a8      	blx	r5
 80236ae:	b00e      	add	sp, #56	; 0x38
 80236b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80236b4:	f010 0f04 	tst.w	r0, #4
 80236b8:	e7d9      	b.n	802366e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 80236ba:	6803      	ldr	r3, [r0, #0]
 80236bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80236be:	4798      	blx	r3
 80236c0:	f8b9 3000 	ldrh.w	r3, [r9]
 80236c4:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 80236c8:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 80236cc:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 80236d0:	435e      	muls	r6, r3
 80236d2:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 80236d6:	2dff      	cmp	r5, #255	; 0xff
 80236d8:	fb03 1202 	mla	r2, r3, r2, r1
 80236dc:	ebac 0c07 	sub.w	ip, ip, r7
 80236e0:	eba3 0707 	sub.w	r7, r3, r7
 80236e4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80236e8:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80236ec:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80236f0:	ea4f 0747 	mov.w	r7, r7, lsl #1
 80236f4:	d049      	beq.n	802378a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 80236f6:	43eb      	mvns	r3, r5
 80236f8:	fa1f f985 	uxth.w	r9, r5
 80236fc:	b2db      	uxtb	r3, r3
 80236fe:	42b0      	cmp	r0, r6
 8023700:	d266      	bcs.n	80237d0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8023702:	eb00 0a0e 	add.w	sl, r0, lr
 8023706:	4550      	cmp	r0, sl
 8023708:	4621      	mov	r1, r4
 802370a:	f104 0403 	add.w	r4, r4, #3
 802370e:	d25b      	bcs.n	80237c8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 8023710:	8802      	ldrh	r2, [r0, #0]
 8023712:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8023716:	ea4f 2822 	mov.w	r8, r2, asr #8
 802371a:	fb11 f109 	smulbb	r1, r1, r9
 802371e:	10d5      	asrs	r5, r2, #3
 8023720:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 8023724:	00d2      	lsls	r2, r2, #3
 8023726:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802372a:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 802372e:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8023732:	fb08 1803 	mla	r8, r8, r3, r1
 8023736:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 802373a:	b2d2      	uxtb	r2, r2
 802373c:	fb11 f109 	smulbb	r1, r1, r9
 8023740:	fa1f f888 	uxth.w	r8, r8
 8023744:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8023748:	fb05 1503 	mla	r5, r5, r3, r1
 802374c:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8023750:	fb11 f109 	smulbb	r1, r1, r9
 8023754:	b2ad      	uxth	r5, r5
 8023756:	fb02 1203 	mla	r2, r2, r3, r1
 802375a:	f108 0101 	add.w	r1, r8, #1
 802375e:	b292      	uxth	r2, r2
 8023760:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8023764:	1c51      	adds	r1, r2, #1
 8023766:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 802376a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802376e:	1c69      	adds	r1, r5, #1
 8023770:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8023774:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8023778:	096d      	lsrs	r5, r5, #5
 802377a:	ea42 0208 	orr.w	r2, r2, r8
 802377e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8023782:	432a      	orrs	r2, r5
 8023784:	f820 2b02 	strh.w	r2, [r0], #2
 8023788:	e7bd      	b.n	8023706 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 802378a:	4a14      	ldr	r2, [pc, #80]	; (80237dc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 802378c:	42b0      	cmp	r0, r6
 802378e:	d21f      	bcs.n	80237d0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8023790:	eb00 050e 	add.w	r5, r0, lr
 8023794:	42a8      	cmp	r0, r5
 8023796:	4621      	mov	r1, r4
 8023798:	f104 0403 	add.w	r4, r4, #3
 802379c:	d210      	bcs.n	80237c0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 802379e:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 80237a2:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 80237a6:	00db      	lsls	r3, r3, #3
 80237a8:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 80237ac:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80237b0:	430b      	orrs	r3, r1
 80237b2:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 80237b6:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 80237ba:	f820 3b02 	strh.w	r3, [r0], #2
 80237be:	e7e9      	b.n	8023794 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 80237c0:	4438      	add	r0, r7
 80237c2:	eb01 040c 	add.w	r4, r1, ip
 80237c6:	e7e1      	b.n	802378c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 80237c8:	4438      	add	r0, r7
 80237ca:	eb01 040c 	add.w	r4, r1, ip
 80237ce:	e796      	b.n	80236fe <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 80237d0:	4b03      	ldr	r3, [pc, #12]	; (80237e0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 80237d2:	6818      	ldr	r0, [r3, #0]
 80237d4:	6803      	ldr	r3, [r0, #0]
 80237d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80237d8:	4798      	blx	r3
 80237da:	e768      	b.n	80236ae <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 80237dc:	fffff800 	.word	0xfffff800
 80237e0:	2400baf0 	.word	0x2400baf0
 80237e4:	2400baea 	.word	0x2400baea

080237e8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 80237e8:	b4f0      	push	{r4, r5, r6, r7}
 80237ea:	4616      	mov	r6, r2
 80237ec:	461c      	mov	r4, r3
 80237ee:	460d      	mov	r5, r1
 80237f0:	9a04      	ldr	r2, [sp, #16]
 80237f2:	2e01      	cmp	r6, #1
 80237f4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80237f8:	f89d 7018 	ldrb.w	r7, [sp, #24]
 80237fc:	d012      	beq.n	8023824 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 80237fe:	d303      	bcc.n	8023808 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 8023800:	2e02      	cmp	r6, #2
 8023802:	d00a      	beq.n	802381a <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 8023804:	bcf0      	pop	{r4, r5, r6, r7}
 8023806:	4770      	bx	lr
 8023808:	6805      	ldr	r5, [r0, #0]
 802380a:	e9cd 3704 	strd	r3, r7, [sp, #16]
 802380e:	68ed      	ldr	r5, [r5, #12]
 8023810:	4613      	mov	r3, r2
 8023812:	4622      	mov	r2, r4
 8023814:	46ac      	mov	ip, r5
 8023816:	bcf0      	pop	{r4, r5, r6, r7}
 8023818:	4760      	bx	ip
 802381a:	4621      	mov	r1, r4
 802381c:	4628      	mov	r0, r5
 802381e:	bcf0      	pop	{r4, r5, r6, r7}
 8023820:	f7ff bd94 	b.w	802334c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8023824:	4621      	mov	r1, r4
 8023826:	4628      	mov	r0, r5
 8023828:	bcf0      	pop	{r4, r5, r6, r7}
 802382a:	f7ff bee5 	b.w	80235f8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

08023830 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8023830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023834:	b093      	sub	sp, #76	; 0x4c
 8023836:	4681      	mov	r9, r0
 8023838:	4688      	mov	r8, r1
 802383a:	6810      	ldr	r0, [r2, #0]
 802383c:	6851      	ldr	r1, [r2, #4]
 802383e:	ac0e      	add	r4, sp, #56	; 0x38
 8023840:	4616      	mov	r6, r2
 8023842:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 8023846:	4f6b      	ldr	r7, [pc, #428]	; (80239f4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8023848:	c403      	stmia	r4!, {r0, r1}
 802384a:	6818      	ldr	r0, [r3, #0]
 802384c:	ac10      	add	r4, sp, #64	; 0x40
 802384e:	6859      	ldr	r1, [r3, #4]
 8023850:	c403      	stmia	r4!, {r0, r1}
 8023852:	a80e      	add	r0, sp, #56	; 0x38
 8023854:	f7f7 ff10 	bl	801b678 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023858:	4631      	mov	r1, r6
 802385a:	a810      	add	r0, sp, #64	; 0x40
 802385c:	4e66      	ldr	r6, [pc, #408]	; (80239f8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 802385e:	f7f7 ff33 	bl	801b6c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023862:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8023866:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 802386a:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 802386e:	6830      	ldr	r0, [r6, #0]
 8023870:	fb11 2103 	smlabb	r1, r1, r3, r2
 8023874:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 8023878:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 802387c:	4489      	add	r9, r1
 802387e:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8023882:	440a      	add	r2, r1
 8023884:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8023888:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 802388c:	4413      	add	r3, r2
 802388e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8023892:	6803      	ldr	r3, [r0, #0]
 8023894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023896:	4798      	blx	r3
 8023898:	f010 0f80 	tst.w	r0, #128	; 0x80
 802389c:	6830      	ldr	r0, [r6, #0]
 802389e:	d01d      	beq.n	80238dc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 80238a0:	2200      	movs	r2, #0
 80238a2:	6801      	ldr	r1, [r0, #0]
 80238a4:	b2a4      	uxth	r4, r4
 80238a6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80238aa:	b2ad      	uxth	r5, r5
 80238ac:	e9cd 2208 	strd	r2, r2, [sp, #32]
 80238b0:	220b      	movs	r2, #11
 80238b2:	9207      	str	r2, [sp, #28]
 80238b4:	883a      	ldrh	r2, [r7, #0]
 80238b6:	9502      	str	r5, [sp, #8]
 80238b8:	9206      	str	r2, [sp, #24]
 80238ba:	2201      	movs	r2, #1
 80238bc:	9401      	str	r4, [sp, #4]
 80238be:	e9cd a204 	strd	sl, r2, [sp, #16]
 80238c2:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 80238c6:	9203      	str	r2, [sp, #12]
 80238c8:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 80238cc:	9200      	str	r2, [sp, #0]
 80238ce:	4642      	mov	r2, r8
 80238d0:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 80238d2:	4649      	mov	r1, r9
 80238d4:	47a0      	blx	r4
 80238d6:	b013      	add	sp, #76	; 0x4c
 80238d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80238dc:	6803      	ldr	r3, [r0, #0]
 80238de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80238e0:	4798      	blx	r3
 80238e2:	883b      	ldrh	r3, [r7, #0]
 80238e4:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 80238e8:	f04f 0e04 	mov.w	lr, #4
 80238ec:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 80238f0:	435d      	muls	r5, r3
 80238f2:	fb03 1202 	mla	r2, r3, r2, r1
 80238f6:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80238fa:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 80238fe:	920c      	str	r2, [sp, #48]	; 0x30
 8023900:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8023904:	1b12      	subs	r2, r2, r4
 8023906:	920d      	str	r2, [sp, #52]	; 0x34
 8023908:	0062      	lsls	r2, r4, #1
 802390a:	1b1c      	subs	r4, r3, r4
 802390c:	920a      	str	r2, [sp, #40]	; 0x28
 802390e:	0063      	lsls	r3, r4, #1
 8023910:	930b      	str	r3, [sp, #44]	; 0x2c
 8023912:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023914:	4298      	cmp	r0, r3
 8023916:	d266      	bcs.n	80239e6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 8023918:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802391a:	eb00 0b03 	add.w	fp, r0, r3
 802391e:	4558      	cmp	r0, fp
 8023920:	d25c      	bcs.n	80239dc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 8023922:	f819 3b01 	ldrb.w	r3, [r9], #1
 8023926:	fb1e e303 	smlabb	r3, lr, r3, lr
 802392a:	f858 2003 	ldr.w	r2, [r8, r3]
 802392e:	0e11      	lsrs	r1, r2, #24
 8023930:	d012      	beq.n	8023958 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8023932:	29ff      	cmp	r1, #255	; 0xff
 8023934:	ea4f 2712 	mov.w	r7, r2, lsr #8
 8023938:	d110      	bne.n	802395c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 802393a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802393e:	d10d      	bne.n	802395c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8023940:	0953      	lsrs	r3, r2, #5
 8023942:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 8023946:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802394a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802394e:	f027 0707 	bic.w	r7, r7, #7
 8023952:	431f      	orrs	r7, r3
 8023954:	433a      	orrs	r2, r7
 8023956:	8002      	strh	r2, [r0, #0]
 8023958:	3002      	adds	r0, #2
 802395a:	e7e0      	b.n	802391e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 802395c:	fb0a f101 	mul.w	r1, sl, r1
 8023960:	8806      	ldrh	r6, [r0, #0]
 8023962:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8023966:	b2d2      	uxtb	r2, r2
 8023968:	1c4b      	adds	r3, r1, #1
 802396a:	1235      	asrs	r5, r6, #8
 802396c:	10f4      	asrs	r4, r6, #3
 802396e:	eb03 2321 	add.w	r3, r3, r1, asr #8
 8023972:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8023976:	00f6      	lsls	r6, r6, #3
 8023978:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 802397c:	121b      	asrs	r3, r3, #8
 802397e:	b2f6      	uxtb	r6, r6
 8023980:	b299      	uxth	r1, r3
 8023982:	43db      	mvns	r3, r3
 8023984:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8023988:	fb1c fc01 	smulbb	ip, ip, r1
 802398c:	b2db      	uxtb	r3, r3
 802398e:	fb12 f201 	smulbb	r2, r2, r1
 8023992:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8023996:	fb05 c503 	mla	r5, r5, r3, ip
 802399a:	b2ff      	uxtb	r7, r7
 802399c:	fb06 2203 	mla	r2, r6, r3, r2
 80239a0:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 80239a4:	fb17 f701 	smulbb	r7, r7, r1
 80239a8:	b2ad      	uxth	r5, r5
 80239aa:	b292      	uxth	r2, r2
 80239ac:	fb04 7403 	mla	r4, r4, r3, r7
 80239b0:	f105 0c01 	add.w	ip, r5, #1
 80239b4:	1c57      	adds	r7, r2, #1
 80239b6:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80239ba:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80239be:	b2a4      	uxth	r4, r4
 80239c0:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80239c4:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80239c8:	433d      	orrs	r5, r7
 80239ca:	1c67      	adds	r7, r4, #1
 80239cc:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 80239d0:	0964      	lsrs	r4, r4, #5
 80239d2:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 80239d6:	4325      	orrs	r5, r4
 80239d8:	8005      	strh	r5, [r0, #0]
 80239da:	e7bd      	b.n	8023958 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 80239dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80239de:	4418      	add	r0, r3
 80239e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80239e2:	4499      	add	r9, r3
 80239e4:	e795      	b.n	8023912 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 80239e6:	4b04      	ldr	r3, [pc, #16]	; (80239f8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 80239e8:	6818      	ldr	r0, [r3, #0]
 80239ea:	6803      	ldr	r3, [r0, #0]
 80239ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80239ee:	4798      	blx	r3
 80239f0:	e771      	b.n	80238d6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 80239f2:	bf00      	nop
 80239f4:	2400baea 	.word	0x2400baea
 80239f8:	2400baf0 	.word	0x2400baf0

080239fc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 80239fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023a00:	b087      	sub	sp, #28
 8023a02:	4680      	mov	r8, r0
 8023a04:	460d      	mov	r5, r1
 8023a06:	4614      	mov	r4, r2
 8023a08:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 8023a0c:	2e00      	cmp	r6, #0
 8023a0e:	f000 80b9 	beq.w	8023b84 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 8023a12:	6810      	ldr	r0, [r2, #0]
 8023a14:	af02      	add	r7, sp, #8
 8023a16:	6851      	ldr	r1, [r2, #4]
 8023a18:	c703      	stmia	r7!, {r0, r1}
 8023a1a:	6818      	ldr	r0, [r3, #0]
 8023a1c:	af04      	add	r7, sp, #16
 8023a1e:	6859      	ldr	r1, [r3, #4]
 8023a20:	c703      	stmia	r7!, {r0, r1}
 8023a22:	a802      	add	r0, sp, #8
 8023a24:	f7f7 fe28 	bl	801b678 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023a28:	4621      	mov	r1, r4
 8023a2a:	a804      	add	r0, sp, #16
 8023a2c:	f7f7 fe4c 	bl	801b6c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023a30:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8023a34:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023a38:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 8023a3c:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 8023a40:	fb14 2103 	smlabb	r1, r4, r3, r2
 8023a44:	eb08 0401 	add.w	r4, r8, r1
 8023a48:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8023a4c:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8023a50:	440a      	add	r2, r1
 8023a52:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 8023a56:	f8ad 2010 	strh.w	r2, [sp, #16]
 8023a5a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8023a5e:	4413      	add	r3, r2
 8023a60:	f8ad 3012 	strh.w	r3, [sp, #18]
 8023a64:	4b49      	ldr	r3, [pc, #292]	; (8023b8c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8023a66:	6818      	ldr	r0, [r3, #0]
 8023a68:	6803      	ldr	r3, [r0, #0]
 8023a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023a6c:	4798      	blx	r3
 8023a6e:	4b48      	ldr	r3, [pc, #288]	; (8023b90 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 8023a70:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8023a74:	2eff      	cmp	r6, #255	; 0xff
 8023a76:	881a      	ldrh	r2, [r3, #0]
 8023a78:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 8023a7c:	fb02 c101 	mla	r1, r2, r1, ip
 8023a80:	fb02 f207 	mul.w	r2, r2, r7
 8023a84:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8023a88:	f105 0104 	add.w	r1, r5, #4
 8023a8c:	461d      	mov	r5, r3
 8023a8e:	d05a      	beq.n	8023b46 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 8023a90:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 8023a94:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8023a98:	b2b6      	uxth	r6, r6
 8023a9a:	9301      	str	r3, [sp, #4]
 8023a9c:	fa1f fe8e 	uxth.w	lr, lr
 8023aa0:	4282      	cmp	r2, r0
 8023aa2:	d96a      	bls.n	8023b7a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 8023aa4:	eb00 0b0a 	add.w	fp, r0, sl
 8023aa8:	4583      	cmp	fp, r0
 8023aaa:	d940      	bls.n	8023b2e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 8023aac:	8805      	ldrh	r5, [r0, #0]
 8023aae:	f814 3b01 	ldrb.w	r3, [r4], #1
 8023ab2:	122f      	asrs	r7, r5, #8
 8023ab4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8023ab8:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8023abc:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8023ac0:	00ed      	lsls	r5, r5, #3
 8023ac2:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8023ac6:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8023aca:	fb17 f70e 	smulbb	r7, r7, lr
 8023ace:	b2ed      	uxtb	r5, r5
 8023ad0:	fb19 f90e 	smulbb	r9, r9, lr
 8023ad4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8023ad8:	fb15 f50e 	smulbb	r5, r5, lr
 8023adc:	fb0c 7c06 	mla	ip, ip, r6, r7
 8023ae0:	10df      	asrs	r7, r3, #3
 8023ae2:	00db      	lsls	r3, r3, #3
 8023ae4:	fa1f fc8c 	uxth.w	ip, ip
 8023ae8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8023aec:	b2db      	uxtb	r3, r3
 8023aee:	fb07 9706 	mla	r7, r7, r6, r9
 8023af2:	f10c 0901 	add.w	r9, ip, #1
 8023af6:	fb03 5306 	mla	r3, r3, r6, r5
 8023afa:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 8023afe:	b29b      	uxth	r3, r3
 8023b00:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 8023b04:	b2bf      	uxth	r7, r7
 8023b06:	f103 0c01 	add.w	ip, r3, #1
 8023b0a:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8023b0e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8023b12:	ea4c 0c09 	orr.w	ip, ip, r9
 8023b16:	f107 0901 	add.w	r9, r7, #1
 8023b1a:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 8023b1e:	097f      	lsrs	r7, r7, #5
 8023b20:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8023b24:	ea4c 0c07 	orr.w	ip, ip, r7
 8023b28:	f820 cb02 	strh.w	ip, [r0], #2
 8023b2c:	e7bc      	b.n	8023aa8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 8023b2e:	9b01      	ldr	r3, [sp, #4]
 8023b30:	881b      	ldrh	r3, [r3, #0]
 8023b32:	eba3 0308 	sub.w	r3, r3, r8
 8023b36:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8023b3a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8023b3e:	eba3 0308 	sub.w	r3, r3, r8
 8023b42:	441c      	add	r4, r3
 8023b44:	e7ac      	b.n	8023aa0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 8023b46:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8023b4a:	4282      	cmp	r2, r0
 8023b4c:	d915      	bls.n	8023b7a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 8023b4e:	eb00 060a 	add.w	r6, r0, sl
 8023b52:	4286      	cmp	r6, r0
 8023b54:	d906      	bls.n	8023b64 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 8023b56:	f814 3b01 	ldrb.w	r3, [r4], #1
 8023b5a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8023b5e:	f820 3b02 	strh.w	r3, [r0], #2
 8023b62:	e7f6      	b.n	8023b52 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 8023b64:	882b      	ldrh	r3, [r5, #0]
 8023b66:	eba3 0308 	sub.w	r3, r3, r8
 8023b6a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8023b6e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8023b72:	eba3 0308 	sub.w	r3, r3, r8
 8023b76:	441c      	add	r4, r3
 8023b78:	e7e7      	b.n	8023b4a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 8023b7a:	4b04      	ldr	r3, [pc, #16]	; (8023b8c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8023b7c:	6818      	ldr	r0, [r3, #0]
 8023b7e:	6803      	ldr	r3, [r0, #0]
 8023b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023b82:	4798      	blx	r3
 8023b84:	b007      	add	sp, #28
 8023b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023b8a:	bf00      	nop
 8023b8c:	2400baf0 	.word	0x2400baf0
 8023b90:	2400baea 	.word	0x2400baea

08023b94 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8023b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023b98:	b091      	sub	sp, #68	; 0x44
 8023b9a:	4680      	mov	r8, r0
 8023b9c:	460f      	mov	r7, r1
 8023b9e:	4614      	mov	r4, r2
 8023ba0:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 8023ba4:	2d00      	cmp	r5, #0
 8023ba6:	d051      	beq.n	8023c4c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 8023ba8:	6810      	ldr	r0, [r2, #0]
 8023baa:	ae0c      	add	r6, sp, #48	; 0x30
 8023bac:	6851      	ldr	r1, [r2, #4]
 8023bae:	f8df 9200 	ldr.w	r9, [pc, #512]	; 8023db0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 8023bb2:	c603      	stmia	r6!, {r0, r1}
 8023bb4:	6818      	ldr	r0, [r3, #0]
 8023bb6:	ae0e      	add	r6, sp, #56	; 0x38
 8023bb8:	6859      	ldr	r1, [r3, #4]
 8023bba:	c603      	stmia	r6!, {r0, r1}
 8023bbc:	a80c      	add	r0, sp, #48	; 0x30
 8023bbe:	f7f7 fd5b 	bl	801b678 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023bc2:	4621      	mov	r1, r4
 8023bc4:	a80e      	add	r0, sp, #56	; 0x38
 8023bc6:	f7f7 fd7f 	bl	801b6c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023bca:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8023bce:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8023bd2:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8023bd6:	f8d9 0000 	ldr.w	r0, [r9]
 8023bda:	fb11 2103 	smlabb	r1, r1, r3, r2
 8023bde:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 8023be2:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 8023be6:	eb08 0401 	add.w	r4, r8, r1
 8023bea:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8023bee:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8023db4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 8023bf2:	440a      	add	r2, r1
 8023bf4:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8023bf8:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8023bfc:	4413      	add	r3, r2
 8023bfe:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8023c02:	6803      	ldr	r3, [r0, #0]
 8023c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023c06:	4798      	blx	r3
 8023c08:	f010 0f80 	tst.w	r0, #128	; 0x80
 8023c0c:	f8d9 0000 	ldr.w	r0, [r9]
 8023c10:	d01f      	beq.n	8023c52 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 8023c12:	2200      	movs	r2, #0
 8023c14:	6801      	ldr	r1, [r0, #0]
 8023c16:	b2b6      	uxth	r6, r6
 8023c18:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8023c1c:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8023c20:	220b      	movs	r2, #11
 8023c22:	9207      	str	r2, [sp, #28]
 8023c24:	f8b8 2000 	ldrh.w	r2, [r8]
 8023c28:	9601      	str	r6, [sp, #4]
 8023c2a:	9206      	str	r2, [sp, #24]
 8023c2c:	2201      	movs	r2, #1
 8023c2e:	e9cd 5204 	strd	r5, r2, [sp, #16]
 8023c32:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8023c36:	9203      	str	r2, [sp, #12]
 8023c38:	fa1f f28a 	uxth.w	r2, sl
 8023c3c:	9202      	str	r2, [sp, #8]
 8023c3e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8023c42:	9200      	str	r2, [sp, #0]
 8023c44:	463a      	mov	r2, r7
 8023c46:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 8023c48:	4621      	mov	r1, r4
 8023c4a:	47a8      	blx	r5
 8023c4c:	b011      	add	sp, #68	; 0x44
 8023c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023c52:	6803      	ldr	r3, [r0, #0]
 8023c54:	ea4f 0946 	mov.w	r9, r6, lsl #1
 8023c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023c5a:	4798      	blx	r3
 8023c5c:	f8b8 2000 	ldrh.w	r2, [r8]
 8023c60:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8023c64:	2dff      	cmp	r5, #255	; 0xff
 8023c66:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8023c6a:	fb0a fa02 	mul.w	sl, sl, r2
 8023c6e:	fb02 1303 	mla	r3, r2, r3, r1
 8023c72:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8023c76:	d062      	beq.n	8023d3e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8023c78:	ea6f 0c05 	mvn.w	ip, r5
 8023c7c:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 8023c80:	b2ad      	uxth	r5, r5
 8023c82:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8023c86:	fa5f fc8c 	uxtb.w	ip, ip
 8023c8a:	930a      	str	r3, [sp, #40]	; 0x28
 8023c8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023c8e:	4298      	cmp	r0, r3
 8023c90:	f080 8085 	bcs.w	8023d9e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8023c94:	eb00 0b09 	add.w	fp, r0, r9
 8023c98:	4558      	cmp	r0, fp
 8023c9a:	d246      	bcs.n	8023d2a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 8023c9c:	f814 eb01 	ldrb.w	lr, [r4], #1
 8023ca0:	2303      	movs	r3, #3
 8023ca2:	2204      	movs	r2, #4
 8023ca4:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 8023ca8:	8803      	ldrh	r3, [r0, #0]
 8023caa:	eb07 0a0e 	add.w	sl, r7, lr
 8023cae:	1219      	asrs	r1, r3, #8
 8023cb0:	10da      	asrs	r2, r3, #3
 8023cb2:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8023cb6:	f89a 8002 	ldrb.w	r8, [sl, #2]
 8023cba:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8023cbe:	00db      	lsls	r3, r3, #3
 8023cc0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8023cc4:	fb18 f805 	smulbb	r8, r8, r5
 8023cc8:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8023ccc:	fb1e fe05 	smulbb	lr, lr, r5
 8023cd0:	b2db      	uxtb	r3, r3
 8023cd2:	fb01 810c 	mla	r1, r1, ip, r8
 8023cd6:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8023cda:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8023cde:	fb18 f805 	smulbb	r8, r8, r5
 8023ce2:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8023ce6:	b289      	uxth	r1, r1
 8023ce8:	fb02 820c 	mla	r2, r2, ip, r8
 8023cec:	fb03 e30c 	mla	r3, r3, ip, lr
 8023cf0:	f101 0801 	add.w	r8, r1, #1
 8023cf4:	b292      	uxth	r2, r2
 8023cf6:	b29b      	uxth	r3, r3
 8023cf8:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8023cfc:	f102 0801 	add.w	r8, r2, #1
 8023d00:	f103 0e01 	add.w	lr, r3, #1
 8023d04:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 8023d08:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8023d0c:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8023d10:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8023d14:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8023d18:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8023d1c:	ea4e 0101 	orr.w	r1, lr, r1
 8023d20:	ea41 0108 	orr.w	r1, r1, r8
 8023d24:	f820 1b02 	strh.w	r1, [r0], #2
 8023d28:	e7b6      	b.n	8023c98 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 8023d2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023d2c:	881b      	ldrh	r3, [r3, #0]
 8023d2e:	1b9b      	subs	r3, r3, r6
 8023d30:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8023d34:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8023d38:	1b9b      	subs	r3, r3, r6
 8023d3a:	441c      	add	r4, r3
 8023d3c:	e7a6      	b.n	8023c8c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 8023d3e:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 8023d42:	2203      	movs	r2, #3
 8023d44:	2504      	movs	r5, #4
 8023d46:	4919      	ldr	r1, [pc, #100]	; (8023dac <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 8023d48:	4550      	cmp	r0, sl
 8023d4a:	d228      	bcs.n	8023d9e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8023d4c:	eb00 0c09 	add.w	ip, r0, r9
 8023d50:	4560      	cmp	r0, ip
 8023d52:	4623      	mov	r3, r4
 8023d54:	d219      	bcs.n	8023d8a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 8023d56:	f893 e000 	ldrb.w	lr, [r3]
 8023d5a:	3401      	adds	r4, #1
 8023d5c:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 8023d60:	eb07 0b0e 	add.w	fp, r7, lr
 8023d64:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8023d68:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8023d6c:	f89b b001 	ldrb.w	fp, [fp, #1]
 8023d70:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 8023d74:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8023d78:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8023d7c:	ea43 030b 	orr.w	r3, r3, fp
 8023d80:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 8023d84:	f820 3b02 	strh.w	r3, [r0], #2
 8023d88:	e7e2      	b.n	8023d50 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 8023d8a:	f8b8 3000 	ldrh.w	r3, [r8]
 8023d8e:	1b9b      	subs	r3, r3, r6
 8023d90:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8023d94:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8023d98:	1b9b      	subs	r3, r3, r6
 8023d9a:	441c      	add	r4, r3
 8023d9c:	e7d4      	b.n	8023d48 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 8023d9e:	4b04      	ldr	r3, [pc, #16]	; (8023db0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 8023da0:	6818      	ldr	r0, [r3, #0]
 8023da2:	6803      	ldr	r3, [r0, #0]
 8023da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023da6:	4798      	blx	r3
 8023da8:	e750      	b.n	8023c4c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 8023daa:	bf00      	nop
 8023dac:	fffff800 	.word	0xfffff800
 8023db0:	2400baf0 	.word	0x2400baf0
 8023db4:	2400baea 	.word	0x2400baea

08023db8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8023db8:	b4f0      	push	{r4, r5, r6, r7}
 8023dba:	460c      	mov	r4, r1
 8023dbc:	4611      	mov	r1, r2
 8023dbe:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8023dc2:	461a      	mov	r2, r3
 8023dc4:	780f      	ldrb	r7, [r1, #0]
 8023dc6:	9b04      	ldr	r3, [sp, #16]
 8023dc8:	2f01      	cmp	r7, #1
 8023dca:	784e      	ldrb	r6, [r1, #1]
 8023dcc:	d036      	beq.n	8023e3c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x84>
 8023dce:	d31e      	bcc.n	8023e0e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x56>
 8023dd0:	2f02      	cmp	r7, #2
 8023dd2:	d14a      	bne.n	8023e6a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 8023dd4:	2e03      	cmp	r6, #3
 8023dd6:	d848      	bhi.n	8023e6a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 8023dd8:	e8df f006 	tbb	[pc, r6]
 8023ddc:	16140702 	.word	0x16140702
 8023de0:	9504      	str	r5, [sp, #16]
 8023de2:	4620      	mov	r0, r4
 8023de4:	bcf0      	pop	{r4, r5, r6, r7}
 8023de6:	f7ff be09 	b.w	80239fc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 8023dea:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8023dec:	2800      	cmp	r0, #0
 8023dee:	d03c      	beq.n	8023e6a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 8023df0:	6806      	ldr	r6, [r0, #0]
 8023df2:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8023df6:	68b5      	ldr	r5, [r6, #8]
 8023df8:	4613      	mov	r3, r2
 8023dfa:	46ac      	mov	ip, r5
 8023dfc:	460a      	mov	r2, r1
 8023dfe:	4621      	mov	r1, r4
 8023e00:	bcf0      	pop	{r4, r5, r6, r7}
 8023e02:	4760      	bx	ip
 8023e04:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8023e06:	e7f1      	b.n	8023dec <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 8023e08:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8023e0c:	e7ee      	b.n	8023dec <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 8023e0e:	2e03      	cmp	r6, #3
 8023e10:	d82b      	bhi.n	8023e6a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 8023e12:	e8df f006 	tbb	[pc, r6]
 8023e16:	0702      	.short	0x0702
 8023e18:	100e      	.short	0x100e
 8023e1a:	9504      	str	r5, [sp, #16]
 8023e1c:	4620      	mov	r0, r4
 8023e1e:	bcf0      	pop	{r4, r5, r6, r7}
 8023e20:	f7ff bd06 	b.w	8023830 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8023e24:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8023e26:	b300      	cbz	r0, 8023e6a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 8023e28:	6806      	ldr	r6, [r0, #0]
 8023e2a:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8023e2e:	68f5      	ldr	r5, [r6, #12]
 8023e30:	e7e2      	b.n	8023df8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 8023e32:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8023e34:	e7f7      	b.n	8023e26 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6e>
 8023e36:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8023e3a:	e7f4      	b.n	8023e26 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6e>
 8023e3c:	2e03      	cmp	r6, #3
 8023e3e:	d814      	bhi.n	8023e6a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 8023e40:	e8df f006 	tbb	[pc, r6]
 8023e44:	100e0702 	.word	0x100e0702
 8023e48:	9504      	str	r5, [sp, #16]
 8023e4a:	4620      	mov	r0, r4
 8023e4c:	bcf0      	pop	{r4, r5, r6, r7}
 8023e4e:	f7ff bea1 	b.w	8023b94 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8023e52:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8023e54:	b148      	cbz	r0, 8023e6a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb2>
 8023e56:	6806      	ldr	r6, [r0, #0]
 8023e58:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8023e5c:	6935      	ldr	r5, [r6, #16]
 8023e5e:	e7cb      	b.n	8023df8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 8023e60:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8023e62:	e7f7      	b.n	8023e54 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x9c>
 8023e64:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8023e68:	e7f4      	b.n	8023e54 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x9c>
 8023e6a:	bcf0      	pop	{r4, r5, r6, r7}
 8023e6c:	4770      	bx	lr
	...

08023e70 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8023e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023e74:	b087      	sub	sp, #28
 8023e76:	4604      	mov	r4, r0
 8023e78:	460e      	mov	r6, r1
 8023e7a:	6810      	ldr	r0, [r2, #0]
 8023e7c:	6851      	ldr	r1, [r2, #4]
 8023e7e:	ad02      	add	r5, sp, #8
 8023e80:	4617      	mov	r7, r2
 8023e82:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 8023e86:	f8df 9230 	ldr.w	r9, [pc, #560]	; 80240b8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 8023e8a:	c503      	stmia	r5!, {r0, r1}
 8023e8c:	6818      	ldr	r0, [r3, #0]
 8023e8e:	ad04      	add	r5, sp, #16
 8023e90:	6859      	ldr	r1, [r3, #4]
 8023e92:	c503      	stmia	r5!, {r0, r1}
 8023e94:	a802      	add	r0, sp, #8
 8023e96:	f7f7 fbef 	bl	801b678 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023e9a:	4639      	mov	r1, r7
 8023e9c:	a804      	add	r0, sp, #16
 8023e9e:	f7f7 fc13 	bl	801b6c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023ea2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8023ea6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023eaa:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8023eae:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8023eb2:	fb11 2103 	smlabb	r1, r1, r3, r2
 8023eb6:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 8023eba:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8023ebe:	440e      	add	r6, r1
 8023ec0:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8023ec4:	440a      	add	r2, r1
 8023ec6:	f8ad 2010 	strh.w	r2, [sp, #16]
 8023eca:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8023ece:	4413      	add	r3, r2
 8023ed0:	f8ad 3012 	strh.w	r3, [sp, #18]
 8023ed4:	4b77      	ldr	r3, [pc, #476]	; (80240b4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8023ed6:	6818      	ldr	r0, [r3, #0]
 8023ed8:	6803      	ldr	r3, [r0, #0]
 8023eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023edc:	4798      	blx	r3
 8023ede:	f8b9 b000 	ldrh.w	fp, [r9]
 8023ee2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023ee6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8023eea:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8023eee:	fb05 f50b 	mul.w	r5, r5, fp
 8023ef2:	fb0b 2303 	mla	r3, fp, r3, r2
 8023ef6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8023efa:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8023efe:	9300      	str	r3, [sp, #0]
 8023f00:	d069      	beq.n	8023fd6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 8023f02:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 8023f06:	4558      	cmp	r0, fp
 8023f08:	f080 80cc 	bcs.w	80240a4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8023f0c:	9b00      	ldr	r3, [sp, #0]
 8023f0e:	4631      	mov	r1, r6
 8023f10:	18c3      	adds	r3, r0, r3
 8023f12:	9301      	str	r3, [sp, #4]
 8023f14:	9b01      	ldr	r3, [sp, #4]
 8023f16:	4298      	cmp	r0, r3
 8023f18:	d24f      	bcs.n	8023fba <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 8023f1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8023f1e:	2a00      	cmp	r2, #0
 8023f20:	d048      	beq.n	8023fb4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8023f22:	fb0a f202 	mul.w	r2, sl, r2
 8023f26:	1c53      	adds	r3, r2, #1
 8023f28:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023f2c:	121b      	asrs	r3, r3, #8
 8023f2e:	d041      	beq.n	8023fb4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8023f30:	8802      	ldrh	r2, [r0, #0]
 8023f32:	b29e      	uxth	r6, r3
 8023f34:	f8b4 c000 	ldrh.w	ip, [r4]
 8023f38:	43db      	mvns	r3, r3
 8023f3a:	1215      	asrs	r5, r2, #8
 8023f3c:	b2db      	uxtb	r3, r3
 8023f3e:	ea4f 272c 	mov.w	r7, ip, asr #8
 8023f42:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8023f46:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 8023f4a:	fb15 f503 	smulbb	r5, r5, r3
 8023f4e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8023f52:	00d2      	lsls	r2, r2, #3
 8023f54:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8023f58:	fb07 5706 	mla	r7, r7, r6, r5
 8023f5c:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8023f60:	b2d2      	uxtb	r2, r2
 8023f62:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8023f66:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8023f6a:	fb1e fe03 	smulbb	lr, lr, r3
 8023f6e:	b2bf      	uxth	r7, r7
 8023f70:	fb12 f203 	smulbb	r2, r2, r3
 8023f74:	fa5f fc8c 	uxtb.w	ip, ip
 8023f78:	fb05 e506 	mla	r5, r5, r6, lr
 8023f7c:	f107 0e01 	add.w	lr, r7, #1
 8023f80:	fb0c 2c06 	mla	ip, ip, r6, r2
 8023f84:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8023f88:	fa1f fc8c 	uxth.w	ip, ip
 8023f8c:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 8023f90:	b2ad      	uxth	r5, r5
 8023f92:	f10c 0701 	add.w	r7, ip, #1
 8023f96:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8023f9a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8023f9e:	ea47 070e 	orr.w	r7, r7, lr
 8023fa2:	f105 0e01 	add.w	lr, r5, #1
 8023fa6:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 8023faa:	096d      	lsrs	r5, r5, #5
 8023fac:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8023fb0:	432f      	orrs	r7, r5
 8023fb2:	8007      	strh	r7, [r0, #0]
 8023fb4:	3002      	adds	r0, #2
 8023fb6:	3402      	adds	r4, #2
 8023fb8:	e7ac      	b.n	8023f14 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 8023fba:	f8b9 3000 	ldrh.w	r3, [r9]
 8023fbe:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8023fc2:	eba3 0308 	sub.w	r3, r3, r8
 8023fc6:	eba6 0608 	sub.w	r6, r6, r8
 8023fca:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8023fce:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8023fd2:	440e      	add	r6, r1
 8023fd4:	e797      	b.n	8023f06 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 8023fd6:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8023fda:	42a8      	cmp	r0, r5
 8023fdc:	d262      	bcs.n	80240a4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8023fde:	9b00      	ldr	r3, [sp, #0]
 8023fe0:	4631      	mov	r1, r6
 8023fe2:	eb00 0b03 	add.w	fp, r0, r3
 8023fe6:	4558      	cmp	r0, fp
 8023fe8:	d24e      	bcs.n	8024088 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 8023fea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023fee:	b12b      	cbz	r3, 8023ffc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8023ff0:	2bff      	cmp	r3, #255	; 0xff
 8023ff2:	f8b4 e000 	ldrh.w	lr, [r4]
 8023ff6:	d104      	bne.n	8024002 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 8023ff8:	f8a0 e000 	strh.w	lr, [r0]
 8023ffc:	3002      	adds	r0, #2
 8023ffe:	3402      	adds	r4, #2
 8024000:	e7f1      	b.n	8023fe6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 8024002:	8802      	ldrh	r2, [r0, #0]
 8024004:	b29f      	uxth	r7, r3
 8024006:	43db      	mvns	r3, r3
 8024008:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 802400c:	1216      	asrs	r6, r2, #8
 802400e:	b2db      	uxtb	r3, r3
 8024010:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8024014:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8024018:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 802401c:	00d2      	lsls	r2, r2, #3
 802401e:	fb16 f603 	smulbb	r6, r6, r3
 8024022:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8024026:	b2d2      	uxtb	r2, r2
 8024028:	fb0c 6c07 	mla	ip, ip, r7, r6
 802402c:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8024030:	fb1a fa03 	smulbb	sl, sl, r3
 8024034:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8024038:	fa1f fc8c 	uxth.w	ip, ip
 802403c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8024040:	fb12 f303 	smulbb	r3, r2, r3
 8024044:	fa5f fe8e 	uxtb.w	lr, lr
 8024048:	fb06 a607 	mla	r6, r6, r7, sl
 802404c:	f10c 0201 	add.w	r2, ip, #1
 8024050:	fb0e 3307 	mla	r3, lr, r7, r3
 8024054:	b2b6      	uxth	r6, r6
 8024056:	b29b      	uxth	r3, r3
 8024058:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 802405c:	f106 0a01 	add.w	sl, r6, #1
 8024060:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 8024064:	f103 0c01 	add.w	ip, r3, #1
 8024068:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 802406c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8024070:	0976      	lsrs	r6, r6, #5
 8024072:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8024076:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 802407a:	ea4c 0c02 	orr.w	ip, ip, r2
 802407e:	ea4c 0c06 	orr.w	ip, ip, r6
 8024082:	f8a0 c000 	strh.w	ip, [r0]
 8024086:	e7b9      	b.n	8023ffc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8024088:	f8b9 3000 	ldrh.w	r3, [r9]
 802408c:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8024090:	eba3 0308 	sub.w	r3, r3, r8
 8024094:	eba6 0608 	sub.w	r6, r6, r8
 8024098:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802409c:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 80240a0:	440e      	add	r6, r1
 80240a2:	e79a      	b.n	8023fda <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 80240a4:	4b03      	ldr	r3, [pc, #12]	; (80240b4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 80240a6:	6818      	ldr	r0, [r3, #0]
 80240a8:	6803      	ldr	r3, [r0, #0]
 80240aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80240ac:	4798      	blx	r3
 80240ae:	b007      	add	sp, #28
 80240b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80240b4:	2400baf0 	.word	0x2400baf0
 80240b8:	2400baea 	.word	0x2400baea

080240bc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 80240bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80240c0:	b089      	sub	sp, #36	; 0x24
 80240c2:	4682      	mov	sl, r0
 80240c4:	460f      	mov	r7, r1
 80240c6:	4691      	mov	r9, r2
 80240c8:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 80240cc:	4698      	mov	r8, r3
 80240ce:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80240d0:	2e00      	cmp	r6, #0
 80240d2:	d03d      	beq.n	8024150 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 80240d4:	4608      	mov	r0, r1
 80240d6:	f7fa fe53 	bl	801ed80 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80240da:	4605      	mov	r5, r0
 80240dc:	4638      	mov	r0, r7
 80240de:	f7fa fe83 	bl	801ede8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80240e2:	f8ad 000e 	strh.w	r0, [sp, #14]
 80240e6:	4638      	mov	r0, r7
 80240e8:	f8ad 9008 	strh.w	r9, [sp, #8]
 80240ec:	f8ad 500c 	strh.w	r5, [sp, #12]
 80240f0:	f8ad 800a 	strh.w	r8, [sp, #10]
 80240f4:	f7fa ff30 	bl	801ef58 <_ZNK8touchgfx6Bitmap7getDataEv>
 80240f8:	4605      	mov	r5, r0
 80240fa:	4638      	mov	r0, r7
 80240fc:	f7fa ff5c 	bl	801efb8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8024100:	4681      	mov	r9, r0
 8024102:	4638      	mov	r0, r7
 8024104:	f7fa ffac 	bl	801f060 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8024108:	280b      	cmp	r0, #11
 802410a:	d821      	bhi.n	8024150 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 802410c:	e8df f000 	tbb	[pc, r0]
 8024110:	2006aebe 	.word	0x2006aebe
 8024114:	20202020 	.word	0x20202020
 8024118:	b5202020 	.word	0xb5202020
 802411c:	4bb0      	ldr	r3, [pc, #704]	; (80243e0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
 802411e:	6818      	ldr	r0, [r3, #0]
 8024120:	6803      	ldr	r3, [r0, #0]
 8024122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024124:	4798      	blx	r3
 8024126:	2eff      	cmp	r6, #255	; 0xff
 8024128:	d101      	bne.n	802412e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x72>
 802412a:	0683      	lsls	r3, r0, #26
 802412c:	d506      	bpl.n	802413c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x80>
 802412e:	4633      	mov	r3, r6
 8024130:	4622      	mov	r2, r4
 8024132:	a902      	add	r1, sp, #8
 8024134:	4628      	mov	r0, r5
 8024136:	f7ff f909 	bl	802334c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 802413a:	e009      	b.n	8024150 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 802413c:	4638      	mov	r0, r7
 802413e:	f7fa fed3 	bl	801eee8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8024142:	b940      	cbnz	r0, 8024156 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x9a>
 8024144:	4623      	mov	r3, r4
 8024146:	aa02      	add	r2, sp, #8
 8024148:	4629      	mov	r1, r5
 802414a:	4650      	mov	r0, sl
 802414c:	f7ff f9e4 	bl	8023518 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8024150:	b009      	add	sp, #36	; 0x24
 8024152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024156:	f10d 0818 	add.w	r8, sp, #24
 802415a:	4639      	mov	r1, r7
 802415c:	af04      	add	r7, sp, #16
 802415e:	4640      	mov	r0, r8
 8024160:	f7fa fe76 	bl	801ee50 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8024164:	e898 0003 	ldmia.w	r8, {r0, r1}
 8024168:	e887 0003 	stmia.w	r7, {r0, r1}
 802416c:	4638      	mov	r0, r7
 802416e:	4621      	mov	r1, r4
 8024170:	f7f3 fe86 	bl	8017e80 <_ZN8touchgfx4RectaNERKS0_>
 8024174:	4638      	mov	r0, r7
 8024176:	f7f3 fec6 	bl	8017f06 <_ZNK8touchgfx4Rect7isEmptyEv>
 802417a:	2800      	cmp	r0, #0
 802417c:	d1d7      	bne.n	802412e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x72>
 802417e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8024182:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8024186:	4293      	cmp	r3, r2
 8024188:	dd12      	ble.n	80241b0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf4>
 802418a:	1a9b      	subs	r3, r3, r2
 802418c:	f9b4 0000 	ldrsh.w	r0, [r4]
 8024190:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8024194:	f8ad 0018 	strh.w	r0, [sp, #24]
 8024198:	4628      	mov	r0, r5
 802419a:	f8ad 201a 	strh.w	r2, [sp, #26]
 802419e:	4642      	mov	r2, r8
 80241a0:	f8ad 101c 	strh.w	r1, [sp, #28]
 80241a4:	a902      	add	r1, sp, #8
 80241a6:	f8ad 301e 	strh.w	r3, [sp, #30]
 80241aa:	4633      	mov	r3, r6
 80241ac:	f7ff f8ce 	bl	802334c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80241b0:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 80241b4:	f9b4 2000 	ldrsh.w	r2, [r4]
 80241b8:	4293      	cmp	r3, r2
 80241ba:	dd12      	ble.n	80241e2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x126>
 80241bc:	1a9b      	subs	r3, r3, r2
 80241be:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 80241c2:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 80241c6:	f8ad 2018 	strh.w	r2, [sp, #24]
 80241ca:	4642      	mov	r2, r8
 80241cc:	f8ad 001a 	strh.w	r0, [sp, #26]
 80241d0:	4628      	mov	r0, r5
 80241d2:	f8ad 301c 	strh.w	r3, [sp, #28]
 80241d6:	23ff      	movs	r3, #255	; 0xff
 80241d8:	f8ad 101e 	strh.w	r1, [sp, #30]
 80241dc:	a902      	add	r1, sp, #8
 80241de:	f7ff f8b5 	bl	802334c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80241e2:	463b      	mov	r3, r7
 80241e4:	aa02      	add	r2, sp, #8
 80241e6:	4629      	mov	r1, r5
 80241e8:	4650      	mov	r0, sl
 80241ea:	f7ff f995 	bl	8023518 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 80241ee:	88a2      	ldrh	r2, [r4, #4]
 80241f0:	8823      	ldrh	r3, [r4, #0]
 80241f2:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80241f6:	4413      	add	r3, r2
 80241f8:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80241fc:	440a      	add	r2, r1
 80241fe:	b29b      	uxth	r3, r3
 8024200:	b292      	uxth	r2, r2
 8024202:	b218      	sxth	r0, r3
 8024204:	b211      	sxth	r1, r2
 8024206:	4288      	cmp	r0, r1
 8024208:	dd12      	ble.n	8024230 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x174>
 802420a:	1a9b      	subs	r3, r3, r2
 802420c:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8024210:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8024214:	4642      	mov	r2, r8
 8024216:	f8ad 1018 	strh.w	r1, [sp, #24]
 802421a:	a902      	add	r1, sp, #8
 802421c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8024220:	23ff      	movs	r3, #255	; 0xff
 8024222:	f8ad 001e 	strh.w	r0, [sp, #30]
 8024226:	4628      	mov	r0, r5
 8024228:	f8ad 601a 	strh.w	r6, [sp, #26]
 802422c:	f7ff f88e 	bl	802334c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8024230:	88e2      	ldrh	r2, [r4, #6]
 8024232:	8863      	ldrh	r3, [r4, #2]
 8024234:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8024238:	4413      	add	r3, r2
 802423a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 802423e:	440a      	add	r2, r1
 8024240:	b29b      	uxth	r3, r3
 8024242:	b292      	uxth	r2, r2
 8024244:	b218      	sxth	r0, r3
 8024246:	b211      	sxth	r1, r2
 8024248:	4288      	cmp	r0, r1
 802424a:	dd81      	ble.n	8024150 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 802424c:	1a9b      	subs	r3, r3, r2
 802424e:	f9b4 6000 	ldrsh.w	r6, [r4]
 8024252:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8024256:	4642      	mov	r2, r8
 8024258:	f8ad 301e 	strh.w	r3, [sp, #30]
 802425c:	23ff      	movs	r3, #255	; 0xff
 802425e:	f8ad 6018 	strh.w	r6, [sp, #24]
 8024262:	f8ad 101a 	strh.w	r1, [sp, #26]
 8024266:	f8ad 001c 	strh.w	r0, [sp, #28]
 802426a:	e762      	b.n	8024132 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 802426c:	4633      	mov	r3, r6
 802426e:	4622      	mov	r2, r4
 8024270:	a902      	add	r1, sp, #8
 8024272:	4628      	mov	r0, r5
 8024274:	f7ff f9c0 	bl	80235f8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 8024278:	e76a      	b.n	8024150 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 802427a:	e9cd 4600 	strd	r4, r6, [sp]
 802427e:	ab02      	add	r3, sp, #8
 8024280:	464a      	mov	r2, r9
 8024282:	4629      	mov	r1, r5
 8024284:	4650      	mov	r0, sl
 8024286:	f7ff fd97 	bl	8023db8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 802428a:	e761      	b.n	8024150 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 802428c:	4638      	mov	r0, r7
 802428e:	f7fa fe2b 	bl	801eee8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8024292:	b950      	cbnz	r0, 80242aa <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ee>
 8024294:	f8da 3000 	ldr.w	r3, [sl]
 8024298:	aa02      	add	r2, sp, #8
 802429a:	4629      	mov	r1, r5
 802429c:	e9cd 6000 	strd	r6, r0, [sp]
 80242a0:	4650      	mov	r0, sl
 80242a2:	68de      	ldr	r6, [r3, #12]
 80242a4:	4623      	mov	r3, r4
 80242a6:	47b0      	blx	r6
 80242a8:	e752      	b.n	8024150 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 80242aa:	f10d 0818 	add.w	r8, sp, #24
 80242ae:	4639      	mov	r1, r7
 80242b0:	af04      	add	r7, sp, #16
 80242b2:	4640      	mov	r0, r8
 80242b4:	f7fa fdcc 	bl	801ee50 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80242b8:	e898 0003 	ldmia.w	r8, {r0, r1}
 80242bc:	e887 0003 	stmia.w	r7, {r0, r1}
 80242c0:	4638      	mov	r0, r7
 80242c2:	4621      	mov	r1, r4
 80242c4:	f7f3 fddc 	bl	8017e80 <_ZN8touchgfx4RectaNERKS0_>
 80242c8:	4638      	mov	r0, r7
 80242ca:	f7f3 fe1c 	bl	8017f06 <_ZNK8touchgfx4Rect7isEmptyEv>
 80242ce:	b138      	cbz	r0, 80242e0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x224>
 80242d0:	4623      	mov	r3, r4
 80242d2:	9600      	str	r6, [sp, #0]
 80242d4:	aa02      	add	r2, sp, #8
 80242d6:	4649      	mov	r1, r9
 80242d8:	4628      	mov	r0, r5
 80242da:	f7ff fdc9 	bl	8023e70 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80242de:	e737      	b.n	8024150 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 80242e0:	f8da 3000 	ldr.w	r3, [sl]
 80242e4:	aa02      	add	r2, sp, #8
 80242e6:	4629      	mov	r1, r5
 80242e8:	e9cd 6000 	strd	r6, r0, [sp]
 80242ec:	4650      	mov	r0, sl
 80242ee:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 80242f2:	463b      	mov	r3, r7
 80242f4:	47d8      	blx	fp
 80242f6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80242fa:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80242fe:	4293      	cmp	r3, r2
 8024300:	dd13      	ble.n	802432a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26e>
 8024302:	f9b4 0000 	ldrsh.w	r0, [r4]
 8024306:	1a9b      	subs	r3, r3, r2
 8024308:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802430c:	f8ad 0018 	strh.w	r0, [sp, #24]
 8024310:	4628      	mov	r0, r5
 8024312:	f8ad 201a 	strh.w	r2, [sp, #26]
 8024316:	aa02      	add	r2, sp, #8
 8024318:	f8ad 101c 	strh.w	r1, [sp, #28]
 802431c:	4649      	mov	r1, r9
 802431e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8024322:	4643      	mov	r3, r8
 8024324:	9600      	str	r6, [sp, #0]
 8024326:	f7ff fda3 	bl	8023e70 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 802432a:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 802432e:	f9b4 2000 	ldrsh.w	r2, [r4]
 8024332:	4293      	cmp	r3, r2
 8024334:	dd13      	ble.n	802435e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a2>
 8024336:	1a9b      	subs	r3, r3, r2
 8024338:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 802433c:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8024340:	f8ad 2018 	strh.w	r2, [sp, #24]
 8024344:	aa02      	add	r2, sp, #8
 8024346:	f8ad 001a 	strh.w	r0, [sp, #26]
 802434a:	4628      	mov	r0, r5
 802434c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8024350:	4643      	mov	r3, r8
 8024352:	f8ad 101e 	strh.w	r1, [sp, #30]
 8024356:	4649      	mov	r1, r9
 8024358:	9600      	str	r6, [sp, #0]
 802435a:	f7ff fd89 	bl	8023e70 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 802435e:	88a2      	ldrh	r2, [r4, #4]
 8024360:	8823      	ldrh	r3, [r4, #0]
 8024362:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8024366:	4413      	add	r3, r2
 8024368:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 802436c:	440a      	add	r2, r1
 802436e:	b29b      	uxth	r3, r3
 8024370:	b292      	uxth	r2, r2
 8024372:	b218      	sxth	r0, r3
 8024374:	b211      	sxth	r1, r2
 8024376:	4288      	cmp	r0, r1
 8024378:	dd13      	ble.n	80243a2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e6>
 802437a:	1a9b      	subs	r3, r3, r2
 802437c:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8024380:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 8024384:	aa02      	add	r2, sp, #8
 8024386:	f8ad 1018 	strh.w	r1, [sp, #24]
 802438a:	4649      	mov	r1, r9
 802438c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8024390:	4643      	mov	r3, r8
 8024392:	f8ad 001e 	strh.w	r0, [sp, #30]
 8024396:	4628      	mov	r0, r5
 8024398:	9600      	str	r6, [sp, #0]
 802439a:	f8ad 701a 	strh.w	r7, [sp, #26]
 802439e:	f7ff fd67 	bl	8023e70 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80243a2:	88e2      	ldrh	r2, [r4, #6]
 80243a4:	8863      	ldrh	r3, [r4, #2]
 80243a6:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80243aa:	4413      	add	r3, r2
 80243ac:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80243b0:	440a      	add	r2, r1
 80243b2:	b29b      	uxth	r3, r3
 80243b4:	b292      	uxth	r2, r2
 80243b6:	b218      	sxth	r0, r3
 80243b8:	b211      	sxth	r1, r2
 80243ba:	4288      	cmp	r0, r1
 80243bc:	f77f aec8 	ble.w	8024150 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 80243c0:	f9b4 7000 	ldrsh.w	r7, [r4]
 80243c4:	1a9b      	subs	r3, r3, r2
 80243c6:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80243ca:	f8ad 301e 	strh.w	r3, [sp, #30]
 80243ce:	4643      	mov	r3, r8
 80243d0:	f8ad 7018 	strh.w	r7, [sp, #24]
 80243d4:	f8ad 101a 	strh.w	r1, [sp, #26]
 80243d8:	f8ad 001c 	strh.w	r0, [sp, #28]
 80243dc:	9600      	str	r6, [sp, #0]
 80243de:	e779      	b.n	80242d4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x218>
 80243e0:	2400baf0 	.word	0x2400baf0

080243e4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 80243e4:	b180      	cbz	r0, 8024408 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 80243e6:	2903      	cmp	r1, #3
 80243e8:	d81c      	bhi.n	8024424 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 80243ea:	e8df f001 	tbb	[pc, r1]
 80243ee:	1d02      	.short	0x1d02
 80243f0:	1f08      	.short	0x1f08
 80243f2:	4b10      	ldr	r3, [pc, #64]	; (8024434 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 80243f4:	8818      	ldrh	r0, [r3, #0]
 80243f6:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80243fa:	4240      	negs	r0, r0
 80243fc:	4770      	bx	lr
 80243fe:	4b0d      	ldr	r3, [pc, #52]	; (8024434 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8024400:	8818      	ldrh	r0, [r3, #0]
 8024402:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8024406:	4770      	bx	lr
 8024408:	2903      	cmp	r1, #3
 802440a:	d80b      	bhi.n	8024424 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 802440c:	a301      	add	r3, pc, #4	; (adr r3, 8024414 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 802440e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8024412:	bf00      	nop
 8024414:	08024429 	.word	0x08024429
 8024418:	080243ff 	.word	0x080243ff
 802441c:	0802442d 	.word	0x0802442d
 8024420:	080243f3 	.word	0x080243f3
 8024424:	2000      	movs	r0, #0
 8024426:	4770      	bx	lr
 8024428:	2001      	movs	r0, #1
 802442a:	4770      	bx	lr
 802442c:	f04f 30ff 	mov.w	r0, #4294967295
 8024430:	4770      	bx	lr
 8024432:	bf00      	nop
 8024434:	2400baea 	.word	0x2400baea

08024438 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8024438:	b180      	cbz	r0, 802445c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 802443a:	2903      	cmp	r1, #3
 802443c:	d81c      	bhi.n	8024478 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 802443e:	e8df f001 	tbb	[pc, r1]
 8024442:	021d      	.short	0x021d
 8024444:	071f      	.short	0x071f
 8024446:	4b10      	ldr	r3, [pc, #64]	; (8024488 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8024448:	8818      	ldrh	r0, [r3, #0]
 802444a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 802444e:	4770      	bx	lr
 8024450:	4b0d      	ldr	r3, [pc, #52]	; (8024488 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8024452:	8818      	ldrh	r0, [r3, #0]
 8024454:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8024458:	4240      	negs	r0, r0
 802445a:	4770      	bx	lr
 802445c:	2903      	cmp	r1, #3
 802445e:	d80b      	bhi.n	8024478 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8024460:	a301      	add	r3, pc, #4	; (adr r3, 8024468 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 8024462:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8024466:	bf00      	nop
 8024468:	08024447 	.word	0x08024447
 802446c:	08024481 	.word	0x08024481
 8024470:	08024451 	.word	0x08024451
 8024474:	0802447d 	.word	0x0802447d
 8024478:	2000      	movs	r0, #0
 802447a:	4770      	bx	lr
 802447c:	2001      	movs	r0, #1
 802447e:	4770      	bx	lr
 8024480:	f04f 30ff 	mov.w	r0, #4294967295
 8024484:	4770      	bx	lr
 8024486:	bf00      	nop
 8024488:	2400baea 	.word	0x2400baea

0802448c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 802448c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024490:	b099      	sub	sp, #100	; 0x64
 8024492:	910b      	str	r1, [sp, #44]	; 0x2c
 8024494:	a914      	add	r1, sp, #80	; 0x50
 8024496:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
 802449a:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 802449e:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
 80244a2:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 80244a6:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 80244aa:	e881 000c 	stmia.w	r1, {r2, r3}
 80244ae:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 80244b2:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 80244b6:	9309      	str	r3, [sp, #36]	; 0x24
 80244b8:	f891 900d 	ldrb.w	r9, [r1, #13]
 80244bc:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 80244c0:	ea4f 1749 	mov.w	r7, r9, lsl #5
 80244c4:	9310      	str	r3, [sp, #64]	; 0x40
 80244c6:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 80244ca:	930c      	str	r3, [sp, #48]	; 0x30
 80244cc:	f407 7380 	and.w	r3, r7, #256	; 0x100
 80244d0:	798f      	ldrb	r7, [r1, #6]
 80244d2:	431f      	orrs	r7, r3
 80244d4:	f000 8195 	beq.w	8024802 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 80244d8:	ea4f 1909 	mov.w	r9, r9, lsl #4
 80244dc:	f409 7380 	and.w	r3, r9, #256	; 0x100
 80244e0:	f891 9007 	ldrb.w	r9, [r1, #7]
 80244e4:	ea59 0903 	orrs.w	r9, r9, r3
 80244e8:	f000 818b 	beq.w	8024802 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 80244ec:	f991 3009 	ldrsb.w	r3, [r1, #9]
 80244f0:	b29b      	uxth	r3, r3
 80244f2:	2d00      	cmp	r5, #0
 80244f4:	f000 812e 	beq.w	8024754 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
 80244f8:	1aed      	subs	r5, r5, r3
 80244fa:	b2ad      	uxth	r5, r5
 80244fc:	042b      	lsls	r3, r5, #16
 80244fe:	d502      	bpl.n	8024506 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 8024500:	1b64      	subs	r4, r4, r5
 8024502:	2500      	movs	r5, #0
 8024504:	b224      	sxth	r4, r4
 8024506:	f9b2 1000 	ldrsh.w	r1, [r2]
 802450a:	a814      	add	r0, sp, #80	; 0x50
 802450c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8024510:	428c      	cmp	r4, r1
 8024512:	b28b      	uxth	r3, r1
 8024514:	bfbf      	itttt	lt
 8024516:	18ed      	addlt	r5, r5, r3
 8024518:	1b2c      	sublt	r4, r5, r4
 802451a:	b2a5      	uxthlt	r5, r4
 802451c:	460c      	movlt	r4, r1
 802451e:	8891      	ldrh	r1, [r2, #4]
 8024520:	440b      	add	r3, r1
 8024522:	4621      	mov	r1, r4
 8024524:	b21b      	sxth	r3, r3
 8024526:	930f      	str	r3, [sp, #60]	; 0x3c
 8024528:	88d3      	ldrh	r3, [r2, #6]
 802452a:	8852      	ldrh	r2, [r2, #2]
 802452c:	4413      	add	r3, r2
 802452e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024530:	b21b      	sxth	r3, r3
 8024532:	930d      	str	r3, [sp, #52]	; 0x34
 8024534:	4bbd      	ldr	r3, [pc, #756]	; (802482c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 8024536:	f893 b000 	ldrb.w	fp, [r3]
 802453a:	f10b 3cff 	add.w	ip, fp, #4294967295
 802453e:	f1dc 0300 	rsbs	r3, ip, #0
 8024542:	eb43 030c 	adc.w	r3, r3, ip
 8024546:	930e      	str	r3, [sp, #56]	; 0x38
 8024548:	4653      	mov	r3, sl
 802454a:	f7f6 ff0a 	bl	801b362 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 802454e:	4621      	mov	r1, r4
 8024550:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 8024554:	4653      	mov	r3, sl
 8024556:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024558:	a814      	add	r0, sp, #80	; 0x50
 802455a:	f7f6 ff1f 	bl	801b39c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 802455e:	a918      	add	r1, sp, #96	; 0x60
 8024560:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8024564:	a817      	add	r0, sp, #92	; 0x5c
 8024566:	f7f7 f845 	bl	801b5f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 802456a:	f1ba 0f00 	cmp.w	sl, #0
 802456e:	f040 80f4 	bne.w	802475a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 8024572:	f1bb 0f01 	cmp.w	fp, #1
 8024576:	f040 80f8 	bne.w	802476a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 802457a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802457c:	2b00      	cmp	r3, #0
 802457e:	f040 8145 	bne.w	802480c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 8024582:	b2ba      	uxth	r2, r7
 8024584:	b905      	cbnz	r5, 8024588 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 8024586:	b16e      	cbz	r6, 80245a4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 8024588:	fb06 5302 	mla	r3, r6, r2, r5
 802458c:	9828      	ldr	r0, [sp, #160]	; 0xa0
 802458e:	4631      	mov	r1, r6
 8024590:	fb08 f303 	mul.w	r3, r8, r3
 8024594:	f003 0607 	and.w	r6, r3, #7
 8024598:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 802459c:	9328      	str	r3, [sp, #160]	; 0xa0
 802459e:	eba9 0301 	sub.w	r3, r9, r1
 80245a2:	930a      	str	r3, [sp, #40]	; 0x28
 80245a4:	4651      	mov	r1, sl
 80245a6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80245a8:	f7ff ff1c 	bl	80243e4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 80245ac:	4681      	mov	r9, r0
 80245ae:	980e      	ldr	r0, [sp, #56]	; 0x38
 80245b0:	f7ff ff42 	bl	8024438 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 80245b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80245b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80245b8:	4683      	mov	fp, r0
 80245ba:	eba3 0a01 	sub.w	sl, r3, r1
 80245be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80245c0:	459a      	cmp	sl, r3
 80245c2:	bfa8      	it	ge
 80245c4:	469a      	movge	sl, r3
 80245c6:	f1ba 0f00 	cmp.w	sl, #0
 80245ca:	f340 811a 	ble.w	8024802 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 80245ce:	1b64      	subs	r4, r4, r5
 80245d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80245d2:	1b1c      	subs	r4, r3, r4
 80245d4:	42bc      	cmp	r4, r7
 80245d6:	bfd4      	ite	le
 80245d8:	ebc5 0504 	rsble	r5, r5, r4
 80245dc:	ebc5 0507 	rsbgt	r5, r5, r7
 80245e0:	2d00      	cmp	r5, #0
 80245e2:	f340 810e 	ble.w	8024802 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 80245e6:	1b52      	subs	r2, r2, r5
 80245e8:	fb08 f302 	mul.w	r3, r8, r2
 80245ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80245ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80245f0:	2b00      	cmp	r3, #0
 80245f2:	f040 8116 	bne.w	8024822 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 80245f6:	4b8e      	ldr	r3, [pc, #568]	; (8024830 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 80245f8:	6818      	ldr	r0, [r3, #0]
 80245fa:	6803      	ldr	r3, [r0, #0]
 80245fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80245fe:	4798      	blx	r3
 8024600:	2301      	movs	r3, #1
 8024602:	4a8c      	ldr	r2, [pc, #560]	; (8024834 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 8024604:	fa03 f308 	lsl.w	r3, r3, r8
 8024608:	8811      	ldrh	r1, [r2, #0]
 802460a:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 802460e:	3b01      	subs	r3, #1
 8024610:	b2db      	uxtb	r3, r3
 8024612:	930e      	str	r3, [sp, #56]	; 0x38
 8024614:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8024618:	fb01 2303 	mla	r3, r1, r3, r2
 802461c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8024620:	930a      	str	r3, [sp, #40]	; 0x28
 8024622:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024624:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8024628:	9313      	str	r3, [sp, #76]	; 0x4c
 802462a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802462c:	0a19      	lsrs	r1, r3, #8
 802462e:	b2cb      	uxtb	r3, r1
 8024630:	9312      	str	r3, [sp, #72]	; 0x48
 8024632:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024634:	b2db      	uxtb	r3, r3
 8024636:	9311      	str	r3, [sp, #68]	; 0x44
 8024638:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802463a:	095a      	lsrs	r2, r3, #5
 802463c:	4b7e      	ldr	r3, [pc, #504]	; (8024838 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 802463e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024642:	400b      	ands	r3, r1
 8024644:	4313      	orrs	r3, r2
 8024646:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8024648:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802464c:	4313      	orrs	r3, r2
 802464e:	b29b      	uxth	r3, r3
 8024650:	9310      	str	r3, [sp, #64]	; 0x40
 8024652:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024654:	781a      	ldrb	r2, [r3, #0]
 8024656:	ea4f 0349 	mov.w	r3, r9, lsl #1
 802465a:	fb05 b919 	mls	r9, r5, r9, fp
 802465e:	4132      	asrs	r2, r6
 8024660:	fb03 fb05 	mul.w	fp, r3, r5
 8024664:	930d      	str	r3, [sp, #52]	; 0x34
 8024666:	b2d2      	uxtb	r2, r2
 8024668:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 802466c:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8024670:	f0c0 80f5 	bcc.w	802485e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
 8024674:	46ae      	mov	lr, r5
 8024676:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 802467a:	f11e 3eff 	adds.w	lr, lr, #4294967295
 802467e:	f0c0 80dd 	bcc.w	802483c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 8024682:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024684:	4013      	ands	r3, r2
 8024686:	d055      	beq.n	8024734 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 8024688:	20ff      	movs	r0, #255	; 0xff
 802468a:	990e      	ldr	r1, [sp, #56]	; 0x38
 802468c:	fb90 f1f1 	sdiv	r1, r0, r1
 8024690:	434b      	muls	r3, r1
 8024692:	2bfe      	cmp	r3, #254	; 0xfe
 8024694:	dd03      	ble.n	802469e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 8024696:	990c      	ldr	r1, [sp, #48]	; 0x30
 8024698:	4281      	cmp	r1, r0
 802469a:	f000 80c4 	beq.w	8024826 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 802469e:	990c      	ldr	r1, [sp, #48]	; 0x30
 80246a0:	f8bc 4000 	ldrh.w	r4, [ip]
 80246a4:	fb11 f303 	smulbb	r3, r1, r3
 80246a8:	1220      	asrs	r0, r4, #8
 80246aa:	b29b      	uxth	r3, r3
 80246ac:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80246b0:	1c59      	adds	r1, r3, #1
 80246b2:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 80246b6:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80246ba:	10e1      	asrs	r1, r4, #3
 80246bc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80246c0:	00e4      	lsls	r4, r4, #3
 80246c2:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80246c6:	b29f      	uxth	r7, r3
 80246c8:	43db      	mvns	r3, r3
 80246ca:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 80246ce:	b2db      	uxtb	r3, r3
 80246d0:	b2e4      	uxtb	r4, r4
 80246d2:	9309      	str	r3, [sp, #36]	; 0x24
 80246d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80246d6:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 80246da:	fb13 f907 	smulbb	r9, r3, r7
 80246de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80246e0:	fb00 9003 	mla	r0, r0, r3, r9
 80246e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80246e6:	fb13 f907 	smulbb	r9, r3, r7
 80246ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80246ec:	b280      	uxth	r0, r0
 80246ee:	fb01 9103 	mla	r1, r1, r3, r9
 80246f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80246f4:	fb13 f707 	smulbb	r7, r3, r7
 80246f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80246fa:	b289      	uxth	r1, r1
 80246fc:	fb04 7403 	mla	r4, r4, r3, r7
 8024700:	1c43      	adds	r3, r0, #1
 8024702:	b2a4      	uxth	r4, r4
 8024704:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8024708:	f104 0901 	add.w	r9, r4, #1
 802470c:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8024710:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 8024714:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 8024718:	ea49 0000 	orr.w	r0, r9, r0
 802471c:	f101 0901 	add.w	r9, r1, #1
 8024720:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 8024724:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8024728:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 802472c:	ea40 0009 	orr.w	r0, r0, r9
 8024730:	f8ac 0000 	strh.w	r0, [ip]
 8024734:	4446      	add	r6, r8
 8024736:	b2b6      	uxth	r6, r6
 8024738:	2e07      	cmp	r6, #7
 802473a:	bf89      	itett	hi
 802473c:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 802473e:	fa42 f208 	asrls.w	r2, r2, r8
 8024742:	2600      	movhi	r6, #0
 8024744:	785a      	ldrbhi	r2, [r3, #1]
 8024746:	bf8a      	itet	hi
 8024748:	3301      	addhi	r3, #1
 802474a:	b2d2      	uxtbls	r2, r2
 802474c:	9328      	strhi	r3, [sp, #160]	; 0xa0
 802474e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024750:	449c      	add	ip, r3
 8024752:	e792      	b.n	802467a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 8024754:	441c      	add	r4, r3
 8024756:	b224      	sxth	r4, r4
 8024758:	e6d5      	b.n	8024506 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 802475a:	f1ba 0f01 	cmp.w	sl, #1
 802475e:	f47f af0c 	bne.w	802457a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8024762:	f1bb 0f01 	cmp.w	fp, #1
 8024766:	f47f af08 	bne.w	802457a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 802476a:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 8024830 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
 802476e:	f8db 0000 	ldr.w	r0, [fp]
 8024772:	6803      	ldr	r3, [r0, #0]
 8024774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024776:	4798      	blx	r3
 8024778:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 802477c:	465a      	mov	r2, fp
 802477e:	d006      	beq.n	802478e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 8024780:	f1b8 0f04 	cmp.w	r8, #4
 8024784:	d140      	bne.n	8024808 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 8024786:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024788:	3300      	adds	r3, #0
 802478a:	bf18      	it	ne
 802478c:	2301      	movne	r3, #1
 802478e:	0580      	lsls	r0, r0, #22
 8024790:	d56e      	bpl.n	8024870 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 8024792:	f1b8 0f08 	cmp.w	r8, #8
 8024796:	d16b      	bne.n	8024870 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 8024798:	2b00      	cmp	r3, #0
 802479a:	bf0c      	ite	eq
 802479c:	f44f 7100 	moveq.w	r1, #512	; 0x200
 80247a0:	f44f 7180 	movne.w	r1, #256	; 0x100
 80247a4:	2d00      	cmp	r5, #0
 80247a6:	f47f aee8 	bne.w	802457a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80247aa:	2e00      	cmp	r6, #0
 80247ac:	f47f aee5 	bne.w	802457a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80247b0:	19e3      	adds	r3, r4, r7
 80247b2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80247b4:	4283      	cmp	r3, r0
 80247b6:	f73f aee0 	bgt.w	802457a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80247ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80247bc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80247be:	444b      	add	r3, r9
 80247c0:	4283      	cmp	r3, r0
 80247c2:	f73f aeda 	bgt.w	802457a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80247c6:	b2bf      	uxth	r7, r7
 80247c8:	f1b8 0f08 	cmp.w	r8, #8
 80247cc:	6810      	ldr	r0, [r2, #0]
 80247ce:	f04f 0500 	mov.w	r5, #0
 80247d2:	bf18      	it	ne
 80247d4:	3701      	addne	r7, #1
 80247d6:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 80247da:	6804      	ldr	r4, [r0, #0]
 80247dc:	bf18      	it	ne
 80247de:	f027 0701 	bicne.w	r7, r7, #1
 80247e2:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 80247e6:	e9cd 1505 	strd	r1, r5, [sp, #20]
 80247ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 80247ec:	bf18      	it	ne
 80247ee:	b2bf      	uxthne	r7, r7
 80247f0:	9104      	str	r1, [sp, #16]
 80247f2:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80247f4:	e9cd 7900 	strd	r7, r9, [sp]
 80247f8:	e9cd 7102 	strd	r7, r1, [sp, #8]
 80247fc:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80247fe:	6d64      	ldr	r4, [r4, #84]	; 0x54
 8024800:	47a0      	blx	r4
 8024802:	b019      	add	sp, #100	; 0x64
 8024804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024808:	2300      	movs	r3, #0
 802480a:	e7c0      	b.n	802478e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 802480c:	2208      	movs	r2, #8
 802480e:	fb92 f3f8 	sdiv	r3, r2, r8
 8024812:	1e5a      	subs	r2, r3, #1
 8024814:	443a      	add	r2, r7
 8024816:	fb92 f2f3 	sdiv	r2, r2, r3
 802481a:	fb12 f203 	smulbb	r2, r2, r3
 802481e:	b292      	uxth	r2, r2
 8024820:	e6b0      	b.n	8024584 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 8024822:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8024824:	e6ec      	b.n	8024600 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 8024826:	9810      	ldr	r0, [sp, #64]	; 0x40
 8024828:	e782      	b.n	8024730 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 802482a:	bf00      	nop
 802482c:	2400bae8 	.word	0x2400bae8
 8024830:	2400baf0 	.word	0x2400baf0
 8024834:	2400baea 	.word	0x2400baea
 8024838:	00fff800 	.word	0x00fff800
 802483c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802483e:	b153      	cbz	r3, 8024856 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 8024840:	441e      	add	r6, r3
 8024842:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024844:	b2b6      	uxth	r6, r6
 8024846:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 802484a:	f006 0607 	and.w	r6, r6, #7
 802484e:	781a      	ldrb	r2, [r3, #0]
 8024850:	9328      	str	r3, [sp, #160]	; 0xa0
 8024852:	4132      	asrs	r2, r6
 8024854:	b2d2      	uxtb	r2, r2
 8024856:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024858:	445b      	add	r3, fp
 802485a:	930a      	str	r3, [sp, #40]	; 0x28
 802485c:	e706      	b.n	802466c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 802485e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024860:	2b00      	cmp	r3, #0
 8024862:	d1ce      	bne.n	8024802 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8024864:	4b05      	ldr	r3, [pc, #20]	; (802487c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
 8024866:	6818      	ldr	r0, [r3, #0]
 8024868:	6803      	ldr	r3, [r0, #0]
 802486a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802486c:	4798      	blx	r3
 802486e:	e7c8      	b.n	8024802 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8024870:	2b00      	cmp	r3, #0
 8024872:	f43f ae82 	beq.w	802457a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8024876:	f44f 7180 	mov.w	r1, #256	; 0x100
 802487a:	e793      	b.n	80247a4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 802487c:	2400baf0 	.word	0x2400baf0

08024880 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 8024880:	b538      	push	{r3, r4, r5, lr}
 8024882:	4c15      	ldr	r4, [pc, #84]	; (80248d8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 8024884:	4605      	mov	r5, r0
 8024886:	7823      	ldrb	r3, [r4, #0]
 8024888:	f3bf 8f5b 	dmb	ish
 802488c:	07da      	lsls	r2, r3, #31
 802488e:	d40b      	bmi.n	80248a8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8024890:	4620      	mov	r0, r4
 8024892:	f007 febe 	bl	802c612 <__cxa_guard_acquire>
 8024896:	b138      	cbz	r0, 80248a8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8024898:	4620      	mov	r0, r4
 802489a:	f007 fec6 	bl	802c62a <__cxa_guard_release>
 802489e:	4a0f      	ldr	r2, [pc, #60]	; (80248dc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 80248a0:	490f      	ldr	r1, [pc, #60]	; (80248e0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 80248a2:	4810      	ldr	r0, [pc, #64]	; (80248e4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 80248a4:	f007 feae 	bl	802c604 <__aeabi_atexit>
 80248a8:	4c0f      	ldr	r4, [pc, #60]	; (80248e8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 80248aa:	7823      	ldrb	r3, [r4, #0]
 80248ac:	f3bf 8f5b 	dmb	ish
 80248b0:	07db      	lsls	r3, r3, #31
 80248b2:	d40b      	bmi.n	80248cc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 80248b4:	4620      	mov	r0, r4
 80248b6:	f007 feac 	bl	802c612 <__cxa_guard_acquire>
 80248ba:	b138      	cbz	r0, 80248cc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 80248bc:	4620      	mov	r0, r4
 80248be:	f007 feb4 	bl	802c62a <__cxa_guard_release>
 80248c2:	4a06      	ldr	r2, [pc, #24]	; (80248dc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 80248c4:	4909      	ldr	r1, [pc, #36]	; (80248ec <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 80248c6:	480a      	ldr	r0, [pc, #40]	; (80248f0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 80248c8:	f007 fe9c 	bl	802c604 <__aeabi_atexit>
 80248cc:	4b05      	ldr	r3, [pc, #20]	; (80248e4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 80248ce:	612b      	str	r3, [r5, #16]
 80248d0:	4b07      	ldr	r3, [pc, #28]	; (80248f0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 80248d2:	616b      	str	r3, [r5, #20]
 80248d4:	bd38      	pop	{r3, r4, r5, pc}
 80248d6:	bf00      	nop
 80248d8:	2400bbc8 	.word	0x2400bbc8
 80248dc:	24000000 	.word	0x24000000
 80248e0:	08021675 	.word	0x08021675
 80248e4:	240000a0 	.word	0x240000a0
 80248e8:	2400bbcc 	.word	0x2400bbcc
 80248ec:	08021673 	.word	0x08021673
 80248f0:	240000a4 	.word	0x240000a4

080248f4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 80248f4:	b538      	push	{r3, r4, r5, lr}
 80248f6:	4c15      	ldr	r4, [pc, #84]	; (802494c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 80248f8:	4605      	mov	r5, r0
 80248fa:	7823      	ldrb	r3, [r4, #0]
 80248fc:	f3bf 8f5b 	dmb	ish
 8024900:	07da      	lsls	r2, r3, #31
 8024902:	d40b      	bmi.n	802491c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8024904:	4620      	mov	r0, r4
 8024906:	f007 fe84 	bl	802c612 <__cxa_guard_acquire>
 802490a:	b138      	cbz	r0, 802491c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 802490c:	4620      	mov	r0, r4
 802490e:	f007 fe8c 	bl	802c62a <__cxa_guard_release>
 8024912:	4a0f      	ldr	r2, [pc, #60]	; (8024950 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8024914:	490f      	ldr	r1, [pc, #60]	; (8024954 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 8024916:	4810      	ldr	r0, [pc, #64]	; (8024958 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8024918:	f007 fe74 	bl	802c604 <__aeabi_atexit>
 802491c:	4c0f      	ldr	r4, [pc, #60]	; (802495c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 802491e:	7823      	ldrb	r3, [r4, #0]
 8024920:	f3bf 8f5b 	dmb	ish
 8024924:	07db      	lsls	r3, r3, #31
 8024926:	d40b      	bmi.n	8024940 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8024928:	4620      	mov	r0, r4
 802492a:	f007 fe72 	bl	802c612 <__cxa_guard_acquire>
 802492e:	b138      	cbz	r0, 8024940 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8024930:	4620      	mov	r0, r4
 8024932:	f007 fe7a 	bl	802c62a <__cxa_guard_release>
 8024936:	4a06      	ldr	r2, [pc, #24]	; (8024950 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8024938:	4909      	ldr	r1, [pc, #36]	; (8024960 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 802493a:	480a      	ldr	r0, [pc, #40]	; (8024964 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 802493c:	f007 fe62 	bl	802c604 <__aeabi_atexit>
 8024940:	4b05      	ldr	r3, [pc, #20]	; (8024958 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8024942:	60ab      	str	r3, [r5, #8]
 8024944:	4b07      	ldr	r3, [pc, #28]	; (8024964 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8024946:	60eb      	str	r3, [r5, #12]
 8024948:	bd38      	pop	{r3, r4, r5, pc}
 802494a:	bf00      	nop
 802494c:	2400bba0 	.word	0x2400bba0
 8024950:	24000000 	.word	0x24000000
 8024954:	08021679 	.word	0x08021679
 8024958:	24000078 	.word	0x24000078
 802495c:	2400bba4 	.word	0x2400bba4
 8024960:	08021677 	.word	0x08021677
 8024964:	2400007c 	.word	0x2400007c

08024968 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 8024968:	b510      	push	{r4, lr}
 802496a:	4604      	mov	r4, r0
 802496c:	f7ff ff88 	bl	8024880 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 8024970:	4620      	mov	r0, r4
 8024972:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024976:	f7ff bfbd 	b.w	80248f4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

0802497c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 802497c:	b538      	push	{r3, r4, r5, lr}
 802497e:	4c15      	ldr	r4, [pc, #84]	; (80249d4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8024980:	4605      	mov	r5, r0
 8024982:	7823      	ldrb	r3, [r4, #0]
 8024984:	f3bf 8f5b 	dmb	ish
 8024988:	07da      	lsls	r2, r3, #31
 802498a:	d40b      	bmi.n	80249a4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 802498c:	4620      	mov	r0, r4
 802498e:	f007 fe40 	bl	802c612 <__cxa_guard_acquire>
 8024992:	b138      	cbz	r0, 80249a4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8024994:	4620      	mov	r0, r4
 8024996:	f007 fe48 	bl	802c62a <__cxa_guard_release>
 802499a:	4a0f      	ldr	r2, [pc, #60]	; (80249d8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 802499c:	490f      	ldr	r1, [pc, #60]	; (80249dc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 802499e:	4810      	ldr	r0, [pc, #64]	; (80249e0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80249a0:	f007 fe30 	bl	802c604 <__aeabi_atexit>
 80249a4:	4c0f      	ldr	r4, [pc, #60]	; (80249e4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 80249a6:	7823      	ldrb	r3, [r4, #0]
 80249a8:	f3bf 8f5b 	dmb	ish
 80249ac:	07db      	lsls	r3, r3, #31
 80249ae:	d40b      	bmi.n	80249c8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80249b0:	4620      	mov	r0, r4
 80249b2:	f007 fe2e 	bl	802c612 <__cxa_guard_acquire>
 80249b6:	b138      	cbz	r0, 80249c8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80249b8:	4620      	mov	r0, r4
 80249ba:	f007 fe36 	bl	802c62a <__cxa_guard_release>
 80249be:	4a06      	ldr	r2, [pc, #24]	; (80249d8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80249c0:	4909      	ldr	r1, [pc, #36]	; (80249e8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 80249c2:	480a      	ldr	r0, [pc, #40]	; (80249ec <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80249c4:	f007 fe1e 	bl	802c604 <__aeabi_atexit>
 80249c8:	4b05      	ldr	r3, [pc, #20]	; (80249e0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80249ca:	622b      	str	r3, [r5, #32]
 80249cc:	4b07      	ldr	r3, [pc, #28]	; (80249ec <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80249ce:	626b      	str	r3, [r5, #36]	; 0x24
 80249d0:	bd38      	pop	{r3, r4, r5, pc}
 80249d2:	bf00      	nop
 80249d4:	2400bbd0 	.word	0x2400bbd0
 80249d8:	24000000 	.word	0x24000000
 80249dc:	0802166d 	.word	0x0802166d
 80249e0:	240000a8 	.word	0x240000a8
 80249e4:	2400bbd4 	.word	0x2400bbd4
 80249e8:	0802166b 	.word	0x0802166b
 80249ec:	240000ac 	.word	0x240000ac

080249f0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 80249f0:	b538      	push	{r3, r4, r5, lr}
 80249f2:	4c15      	ldr	r4, [pc, #84]	; (8024a48 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 80249f4:	4605      	mov	r5, r0
 80249f6:	7823      	ldrb	r3, [r4, #0]
 80249f8:	f3bf 8f5b 	dmb	ish
 80249fc:	07da      	lsls	r2, r3, #31
 80249fe:	d40b      	bmi.n	8024a18 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8024a00:	4620      	mov	r0, r4
 8024a02:	f007 fe06 	bl	802c612 <__cxa_guard_acquire>
 8024a06:	b138      	cbz	r0, 8024a18 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8024a08:	4620      	mov	r0, r4
 8024a0a:	f007 fe0e 	bl	802c62a <__cxa_guard_release>
 8024a0e:	4a0f      	ldr	r2, [pc, #60]	; (8024a4c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8024a10:	490f      	ldr	r1, [pc, #60]	; (8024a50 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8024a12:	4810      	ldr	r0, [pc, #64]	; (8024a54 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8024a14:	f007 fdf6 	bl	802c604 <__aeabi_atexit>
 8024a18:	4c0f      	ldr	r4, [pc, #60]	; (8024a58 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8024a1a:	7823      	ldrb	r3, [r4, #0]
 8024a1c:	f3bf 8f5b 	dmb	ish
 8024a20:	07db      	lsls	r3, r3, #31
 8024a22:	d40b      	bmi.n	8024a3c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8024a24:	4620      	mov	r0, r4
 8024a26:	f007 fdf4 	bl	802c612 <__cxa_guard_acquire>
 8024a2a:	b138      	cbz	r0, 8024a3c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8024a2c:	4620      	mov	r0, r4
 8024a2e:	f007 fdfc 	bl	802c62a <__cxa_guard_release>
 8024a32:	4a06      	ldr	r2, [pc, #24]	; (8024a4c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8024a34:	4909      	ldr	r1, [pc, #36]	; (8024a5c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8024a36:	480a      	ldr	r0, [pc, #40]	; (8024a60 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8024a38:	f007 fde4 	bl	802c604 <__aeabi_atexit>
 8024a3c:	4b05      	ldr	r3, [pc, #20]	; (8024a54 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8024a3e:	61ab      	str	r3, [r5, #24]
 8024a40:	4b07      	ldr	r3, [pc, #28]	; (8024a60 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8024a42:	61eb      	str	r3, [r5, #28]
 8024a44:	bd38      	pop	{r3, r4, r5, pc}
 8024a46:	bf00      	nop
 8024a48:	2400bba8 	.word	0x2400bba8
 8024a4c:	24000000 	.word	0x24000000
 8024a50:	08021671 	.word	0x08021671
 8024a54:	24000080 	.word	0x24000080
 8024a58:	2400bbac 	.word	0x2400bbac
 8024a5c:	0802166f 	.word	0x0802166f
 8024a60:	24000084 	.word	0x24000084

08024a64 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 8024a64:	b510      	push	{r4, lr}
 8024a66:	4604      	mov	r4, r0
 8024a68:	f7ff ff88 	bl	802497c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8024a6c:	4620      	mov	r0, r4
 8024a6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024a72:	f7ff bfbd 	b.w	80249f0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08024a78 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8024a78:	b538      	push	{r3, r4, r5, lr}
 8024a7a:	4c15      	ldr	r4, [pc, #84]	; (8024ad0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8024a7c:	4605      	mov	r5, r0
 8024a7e:	7823      	ldrb	r3, [r4, #0]
 8024a80:	f3bf 8f5b 	dmb	ish
 8024a84:	07da      	lsls	r2, r3, #31
 8024a86:	d40b      	bmi.n	8024aa0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8024a88:	4620      	mov	r0, r4
 8024a8a:	f007 fdc2 	bl	802c612 <__cxa_guard_acquire>
 8024a8e:	b138      	cbz	r0, 8024aa0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8024a90:	4620      	mov	r0, r4
 8024a92:	f007 fdca 	bl	802c62a <__cxa_guard_release>
 8024a96:	4a0f      	ldr	r2, [pc, #60]	; (8024ad4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8024a98:	490f      	ldr	r1, [pc, #60]	; (8024ad8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8024a9a:	4810      	ldr	r0, [pc, #64]	; (8024adc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8024a9c:	f007 fdb2 	bl	802c604 <__aeabi_atexit>
 8024aa0:	4c0f      	ldr	r4, [pc, #60]	; (8024ae0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8024aa2:	7823      	ldrb	r3, [r4, #0]
 8024aa4:	f3bf 8f5b 	dmb	ish
 8024aa8:	07db      	lsls	r3, r3, #31
 8024aaa:	d40b      	bmi.n	8024ac4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8024aac:	4620      	mov	r0, r4
 8024aae:	f007 fdb0 	bl	802c612 <__cxa_guard_acquire>
 8024ab2:	b138      	cbz	r0, 8024ac4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8024ab4:	4620      	mov	r0, r4
 8024ab6:	f007 fdb8 	bl	802c62a <__cxa_guard_release>
 8024aba:	4a06      	ldr	r2, [pc, #24]	; (8024ad4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8024abc:	4909      	ldr	r1, [pc, #36]	; (8024ae4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8024abe:	480a      	ldr	r0, [pc, #40]	; (8024ae8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8024ac0:	f007 fda0 	bl	802c604 <__aeabi_atexit>
 8024ac4:	4b05      	ldr	r3, [pc, #20]	; (8024adc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8024ac6:	632b      	str	r3, [r5, #48]	; 0x30
 8024ac8:	4b07      	ldr	r3, [pc, #28]	; (8024ae8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8024aca:	636b      	str	r3, [r5, #52]	; 0x34
 8024acc:	bd38      	pop	{r3, r4, r5, pc}
 8024ace:	bf00      	nop
 8024ad0:	2400bbe0 	.word	0x2400bbe0
 8024ad4:	24000000 	.word	0x24000000
 8024ad8:	08021665 	.word	0x08021665
 8024adc:	240000b8 	.word	0x240000b8
 8024ae0:	2400bbe4 	.word	0x2400bbe4
 8024ae4:	08021663 	.word	0x08021663
 8024ae8:	240000bc 	.word	0x240000bc

08024aec <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8024aec:	b538      	push	{r3, r4, r5, lr}
 8024aee:	4c15      	ldr	r4, [pc, #84]	; (8024b44 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8024af0:	4605      	mov	r5, r0
 8024af2:	7823      	ldrb	r3, [r4, #0]
 8024af4:	f3bf 8f5b 	dmb	ish
 8024af8:	07da      	lsls	r2, r3, #31
 8024afa:	d40b      	bmi.n	8024b14 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8024afc:	4620      	mov	r0, r4
 8024afe:	f007 fd88 	bl	802c612 <__cxa_guard_acquire>
 8024b02:	b138      	cbz	r0, 8024b14 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8024b04:	4620      	mov	r0, r4
 8024b06:	f007 fd90 	bl	802c62a <__cxa_guard_release>
 8024b0a:	4a0f      	ldr	r2, [pc, #60]	; (8024b48 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8024b0c:	490f      	ldr	r1, [pc, #60]	; (8024b4c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8024b0e:	4810      	ldr	r0, [pc, #64]	; (8024b50 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8024b10:	f007 fd78 	bl	802c604 <__aeabi_atexit>
 8024b14:	4c0f      	ldr	r4, [pc, #60]	; (8024b54 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8024b16:	7823      	ldrb	r3, [r4, #0]
 8024b18:	f3bf 8f5b 	dmb	ish
 8024b1c:	07db      	lsls	r3, r3, #31
 8024b1e:	d40b      	bmi.n	8024b38 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8024b20:	4620      	mov	r0, r4
 8024b22:	f007 fd76 	bl	802c612 <__cxa_guard_acquire>
 8024b26:	b138      	cbz	r0, 8024b38 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8024b28:	4620      	mov	r0, r4
 8024b2a:	f007 fd7e 	bl	802c62a <__cxa_guard_release>
 8024b2e:	4a06      	ldr	r2, [pc, #24]	; (8024b48 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8024b30:	4909      	ldr	r1, [pc, #36]	; (8024b58 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8024b32:	480a      	ldr	r0, [pc, #40]	; (8024b5c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8024b34:	f007 fd66 	bl	802c604 <__aeabi_atexit>
 8024b38:	4b05      	ldr	r3, [pc, #20]	; (8024b50 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8024b3a:	62ab      	str	r3, [r5, #40]	; 0x28
 8024b3c:	4b07      	ldr	r3, [pc, #28]	; (8024b5c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8024b3e:	62eb      	str	r3, [r5, #44]	; 0x2c
 8024b40:	bd38      	pop	{r3, r4, r5, pc}
 8024b42:	bf00      	nop
 8024b44:	2400bbb0 	.word	0x2400bbb0
 8024b48:	24000000 	.word	0x24000000
 8024b4c:	08021669 	.word	0x08021669
 8024b50:	24000088 	.word	0x24000088
 8024b54:	2400bbb4 	.word	0x2400bbb4
 8024b58:	08021667 	.word	0x08021667
 8024b5c:	2400008c 	.word	0x2400008c

08024b60 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 8024b60:	b510      	push	{r4, lr}
 8024b62:	4604      	mov	r4, r0
 8024b64:	f7ff ff88 	bl	8024a78 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8024b68:	4620      	mov	r0, r4
 8024b6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024b6e:	f7ff bfbd 	b.w	8024aec <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08024b74 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 8024b74:	b538      	push	{r3, r4, r5, lr}
 8024b76:	4c15      	ldr	r4, [pc, #84]	; (8024bcc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 8024b78:	4605      	mov	r5, r0
 8024b7a:	7823      	ldrb	r3, [r4, #0]
 8024b7c:	f3bf 8f5b 	dmb	ish
 8024b80:	07da      	lsls	r2, r3, #31
 8024b82:	d40b      	bmi.n	8024b9c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8024b84:	4620      	mov	r0, r4
 8024b86:	f007 fd44 	bl	802c612 <__cxa_guard_acquire>
 8024b8a:	b138      	cbz	r0, 8024b9c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8024b8c:	4620      	mov	r0, r4
 8024b8e:	f007 fd4c 	bl	802c62a <__cxa_guard_release>
 8024b92:	4a0f      	ldr	r2, [pc, #60]	; (8024bd0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8024b94:	490f      	ldr	r1, [pc, #60]	; (8024bd4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 8024b96:	4810      	ldr	r0, [pc, #64]	; (8024bd8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8024b98:	f007 fd34 	bl	802c604 <__aeabi_atexit>
 8024b9c:	4c0f      	ldr	r4, [pc, #60]	; (8024bdc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 8024b9e:	7823      	ldrb	r3, [r4, #0]
 8024ba0:	f3bf 8f5b 	dmb	ish
 8024ba4:	07db      	lsls	r3, r3, #31
 8024ba6:	d40b      	bmi.n	8024bc0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8024ba8:	4620      	mov	r0, r4
 8024baa:	f007 fd32 	bl	802c612 <__cxa_guard_acquire>
 8024bae:	b138      	cbz	r0, 8024bc0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8024bb0:	4620      	mov	r0, r4
 8024bb2:	f007 fd3a 	bl	802c62a <__cxa_guard_release>
 8024bb6:	4a06      	ldr	r2, [pc, #24]	; (8024bd0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8024bb8:	4909      	ldr	r1, [pc, #36]	; (8024be0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 8024bba:	480a      	ldr	r0, [pc, #40]	; (8024be4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8024bbc:	f007 fd22 	bl	802c604 <__aeabi_atexit>
 8024bc0:	4b05      	ldr	r3, [pc, #20]	; (8024bd8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8024bc2:	652b      	str	r3, [r5, #80]	; 0x50
 8024bc4:	4b07      	ldr	r3, [pc, #28]	; (8024be4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8024bc6:	656b      	str	r3, [r5, #84]	; 0x54
 8024bc8:	bd38      	pop	{r3, r4, r5, pc}
 8024bca:	bf00      	nop
 8024bcc:	2400bbe8 	.word	0x2400bbe8
 8024bd0:	24000000 	.word	0x24000000
 8024bd4:	08021655 	.word	0x08021655
 8024bd8:	240000c0 	.word	0x240000c0
 8024bdc:	2400bbec 	.word	0x2400bbec
 8024be0:	08021653 	.word	0x08021653
 8024be4:	240000c4 	.word	0x240000c4

08024be8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 8024be8:	b538      	push	{r3, r4, r5, lr}
 8024bea:	4c15      	ldr	r4, [pc, #84]	; (8024c40 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 8024bec:	4605      	mov	r5, r0
 8024bee:	7823      	ldrb	r3, [r4, #0]
 8024bf0:	f3bf 8f5b 	dmb	ish
 8024bf4:	07da      	lsls	r2, r3, #31
 8024bf6:	d40b      	bmi.n	8024c10 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8024bf8:	4620      	mov	r0, r4
 8024bfa:	f007 fd0a 	bl	802c612 <__cxa_guard_acquire>
 8024bfe:	b138      	cbz	r0, 8024c10 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8024c00:	4620      	mov	r0, r4
 8024c02:	f007 fd12 	bl	802c62a <__cxa_guard_release>
 8024c06:	4a0f      	ldr	r2, [pc, #60]	; (8024c44 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8024c08:	490f      	ldr	r1, [pc, #60]	; (8024c48 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 8024c0a:	4810      	ldr	r0, [pc, #64]	; (8024c4c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8024c0c:	f007 fcfa 	bl	802c604 <__aeabi_atexit>
 8024c10:	4c0f      	ldr	r4, [pc, #60]	; (8024c50 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 8024c12:	7823      	ldrb	r3, [r4, #0]
 8024c14:	f3bf 8f5b 	dmb	ish
 8024c18:	07db      	lsls	r3, r3, #31
 8024c1a:	d40b      	bmi.n	8024c34 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8024c1c:	4620      	mov	r0, r4
 8024c1e:	f007 fcf8 	bl	802c612 <__cxa_guard_acquire>
 8024c22:	b138      	cbz	r0, 8024c34 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8024c24:	4620      	mov	r0, r4
 8024c26:	f007 fd00 	bl	802c62a <__cxa_guard_release>
 8024c2a:	4a06      	ldr	r2, [pc, #24]	; (8024c44 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8024c2c:	4909      	ldr	r1, [pc, #36]	; (8024c54 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 8024c2e:	480a      	ldr	r0, [pc, #40]	; (8024c58 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8024c30:	f007 fce8 	bl	802c604 <__aeabi_atexit>
 8024c34:	4b05      	ldr	r3, [pc, #20]	; (8024c4c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8024c36:	64ab      	str	r3, [r5, #72]	; 0x48
 8024c38:	4b07      	ldr	r3, [pc, #28]	; (8024c58 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8024c3a:	64eb      	str	r3, [r5, #76]	; 0x4c
 8024c3c:	bd38      	pop	{r3, r4, r5, pc}
 8024c3e:	bf00      	nop
 8024c40:	2400bbf0 	.word	0x2400bbf0
 8024c44:	24000000 	.word	0x24000000
 8024c48:	08021659 	.word	0x08021659
 8024c4c:	240000c8 	.word	0x240000c8
 8024c50:	2400bbf4 	.word	0x2400bbf4
 8024c54:	08021657 	.word	0x08021657
 8024c58:	240000cc 	.word	0x240000cc

08024c5c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 8024c5c:	b538      	push	{r3, r4, r5, lr}
 8024c5e:	4c15      	ldr	r4, [pc, #84]	; (8024cb4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 8024c60:	4605      	mov	r5, r0
 8024c62:	7823      	ldrb	r3, [r4, #0]
 8024c64:	f3bf 8f5b 	dmb	ish
 8024c68:	07da      	lsls	r2, r3, #31
 8024c6a:	d40b      	bmi.n	8024c84 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8024c6c:	4620      	mov	r0, r4
 8024c6e:	f007 fcd0 	bl	802c612 <__cxa_guard_acquire>
 8024c72:	b138      	cbz	r0, 8024c84 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8024c74:	4620      	mov	r0, r4
 8024c76:	f007 fcd8 	bl	802c62a <__cxa_guard_release>
 8024c7a:	4a0f      	ldr	r2, [pc, #60]	; (8024cb8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8024c7c:	490f      	ldr	r1, [pc, #60]	; (8024cbc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 8024c7e:	4810      	ldr	r0, [pc, #64]	; (8024cc0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8024c80:	f007 fcc0 	bl	802c604 <__aeabi_atexit>
 8024c84:	4c0f      	ldr	r4, [pc, #60]	; (8024cc4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 8024c86:	7823      	ldrb	r3, [r4, #0]
 8024c88:	f3bf 8f5b 	dmb	ish
 8024c8c:	07db      	lsls	r3, r3, #31
 8024c8e:	d40b      	bmi.n	8024ca8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8024c90:	4620      	mov	r0, r4
 8024c92:	f007 fcbe 	bl	802c612 <__cxa_guard_acquire>
 8024c96:	b138      	cbz	r0, 8024ca8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8024c98:	4620      	mov	r0, r4
 8024c9a:	f007 fcc6 	bl	802c62a <__cxa_guard_release>
 8024c9e:	4a06      	ldr	r2, [pc, #24]	; (8024cb8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8024ca0:	4909      	ldr	r1, [pc, #36]	; (8024cc8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 8024ca2:	480a      	ldr	r0, [pc, #40]	; (8024ccc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8024ca4:	f007 fcae 	bl	802c604 <__aeabi_atexit>
 8024ca8:	4b05      	ldr	r3, [pc, #20]	; (8024cc0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8024caa:	642b      	str	r3, [r5, #64]	; 0x40
 8024cac:	4b07      	ldr	r3, [pc, #28]	; (8024ccc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8024cae:	646b      	str	r3, [r5, #68]	; 0x44
 8024cb0:	bd38      	pop	{r3, r4, r5, pc}
 8024cb2:	bf00      	nop
 8024cb4:	2400bbb8 	.word	0x2400bbb8
 8024cb8:	24000000 	.word	0x24000000
 8024cbc:	0802165d 	.word	0x0802165d
 8024cc0:	24000090 	.word	0x24000090
 8024cc4:	2400bbbc 	.word	0x2400bbbc
 8024cc8:	0802165b 	.word	0x0802165b
 8024ccc:	24000094 	.word	0x24000094

08024cd0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 8024cd0:	b538      	push	{r3, r4, r5, lr}
 8024cd2:	4c15      	ldr	r4, [pc, #84]	; (8024d28 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 8024cd4:	4605      	mov	r5, r0
 8024cd6:	7823      	ldrb	r3, [r4, #0]
 8024cd8:	f3bf 8f5b 	dmb	ish
 8024cdc:	07da      	lsls	r2, r3, #31
 8024cde:	d40b      	bmi.n	8024cf8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8024ce0:	4620      	mov	r0, r4
 8024ce2:	f007 fc96 	bl	802c612 <__cxa_guard_acquire>
 8024ce6:	b138      	cbz	r0, 8024cf8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8024ce8:	4620      	mov	r0, r4
 8024cea:	f007 fc9e 	bl	802c62a <__cxa_guard_release>
 8024cee:	4a0f      	ldr	r2, [pc, #60]	; (8024d2c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8024cf0:	490f      	ldr	r1, [pc, #60]	; (8024d30 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 8024cf2:	4810      	ldr	r0, [pc, #64]	; (8024d34 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8024cf4:	f007 fc86 	bl	802c604 <__aeabi_atexit>
 8024cf8:	4c0f      	ldr	r4, [pc, #60]	; (8024d38 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 8024cfa:	7823      	ldrb	r3, [r4, #0]
 8024cfc:	f3bf 8f5b 	dmb	ish
 8024d00:	07db      	lsls	r3, r3, #31
 8024d02:	d40b      	bmi.n	8024d1c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8024d04:	4620      	mov	r0, r4
 8024d06:	f007 fc84 	bl	802c612 <__cxa_guard_acquire>
 8024d0a:	b138      	cbz	r0, 8024d1c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8024d0c:	4620      	mov	r0, r4
 8024d0e:	f007 fc8c 	bl	802c62a <__cxa_guard_release>
 8024d12:	4a06      	ldr	r2, [pc, #24]	; (8024d2c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8024d14:	4909      	ldr	r1, [pc, #36]	; (8024d3c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 8024d16:	480a      	ldr	r0, [pc, #40]	; (8024d40 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8024d18:	f007 fc74 	bl	802c604 <__aeabi_atexit>
 8024d1c:	4b05      	ldr	r3, [pc, #20]	; (8024d34 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8024d1e:	63ab      	str	r3, [r5, #56]	; 0x38
 8024d20:	4b07      	ldr	r3, [pc, #28]	; (8024d40 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8024d22:	63eb      	str	r3, [r5, #60]	; 0x3c
 8024d24:	bd38      	pop	{r3, r4, r5, pc}
 8024d26:	bf00      	nop
 8024d28:	2400bbd8 	.word	0x2400bbd8
 8024d2c:	24000000 	.word	0x24000000
 8024d30:	08021661 	.word	0x08021661
 8024d34:	240000b0 	.word	0x240000b0
 8024d38:	2400bbdc 	.word	0x2400bbdc
 8024d3c:	0802165f 	.word	0x0802165f
 8024d40:	240000b4 	.word	0x240000b4

08024d44 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 8024d44:	b510      	push	{r4, lr}
 8024d46:	4604      	mov	r4, r0
 8024d48:	f7ff ff14 	bl	8024b74 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 8024d4c:	4620      	mov	r0, r4
 8024d4e:	f7ff ff85 	bl	8024c5c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 8024d52:	4620      	mov	r0, r4
 8024d54:	f7ff ff48 	bl	8024be8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 8024d58:	4620      	mov	r0, r4
 8024d5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024d5e:	f7ff bfb7 	b.w	8024cd0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

08024d64 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8024d64:	b538      	push	{r3, r4, r5, lr}
 8024d66:	4c15      	ldr	r4, [pc, #84]	; (8024dbc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8024d68:	4605      	mov	r5, r0
 8024d6a:	7823      	ldrb	r3, [r4, #0]
 8024d6c:	f3bf 8f5b 	dmb	ish
 8024d70:	07da      	lsls	r2, r3, #31
 8024d72:	d40b      	bmi.n	8024d8c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8024d74:	4620      	mov	r0, r4
 8024d76:	f007 fc4c 	bl	802c612 <__cxa_guard_acquire>
 8024d7a:	b138      	cbz	r0, 8024d8c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8024d7c:	4620      	mov	r0, r4
 8024d7e:	f007 fc54 	bl	802c62a <__cxa_guard_release>
 8024d82:	4a0f      	ldr	r2, [pc, #60]	; (8024dc0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8024d84:	490f      	ldr	r1, [pc, #60]	; (8024dc4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8024d86:	4810      	ldr	r0, [pc, #64]	; (8024dc8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8024d88:	f007 fc3c 	bl	802c604 <__aeabi_atexit>
 8024d8c:	4c0f      	ldr	r4, [pc, #60]	; (8024dcc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8024d8e:	7823      	ldrb	r3, [r4, #0]
 8024d90:	f3bf 8f5b 	dmb	ish
 8024d94:	07db      	lsls	r3, r3, #31
 8024d96:	d40b      	bmi.n	8024db0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8024d98:	4620      	mov	r0, r4
 8024d9a:	f007 fc3a 	bl	802c612 <__cxa_guard_acquire>
 8024d9e:	b138      	cbz	r0, 8024db0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8024da0:	4620      	mov	r0, r4
 8024da2:	f007 fc42 	bl	802c62a <__cxa_guard_release>
 8024da6:	4a06      	ldr	r2, [pc, #24]	; (8024dc0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8024da8:	4909      	ldr	r1, [pc, #36]	; (8024dd0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8024daa:	480a      	ldr	r0, [pc, #40]	; (8024dd4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8024dac:	f007 fc2a 	bl	802c604 <__aeabi_atexit>
 8024db0:	4b05      	ldr	r3, [pc, #20]	; (8024dc8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8024db2:	662b      	str	r3, [r5, #96]	; 0x60
 8024db4:	4b07      	ldr	r3, [pc, #28]	; (8024dd4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8024db6:	666b      	str	r3, [r5, #100]	; 0x64
 8024db8:	bd38      	pop	{r3, r4, r5, pc}
 8024dba:	bf00      	nop
 8024dbc:	2400bbc0 	.word	0x2400bbc0
 8024dc0:	24000000 	.word	0x24000000
 8024dc4:	0802164d 	.word	0x0802164d
 8024dc8:	24000098 	.word	0x24000098
 8024dcc:	2400bbc4 	.word	0x2400bbc4
 8024dd0:	0802164b 	.word	0x0802164b
 8024dd4:	2400009c 	.word	0x2400009c

08024dd8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8024dd8:	b538      	push	{r3, r4, r5, lr}
 8024dda:	4c15      	ldr	r4, [pc, #84]	; (8024e30 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8024ddc:	4605      	mov	r5, r0
 8024dde:	7823      	ldrb	r3, [r4, #0]
 8024de0:	f3bf 8f5b 	dmb	ish
 8024de4:	07da      	lsls	r2, r3, #31
 8024de6:	d40b      	bmi.n	8024e00 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8024de8:	4620      	mov	r0, r4
 8024dea:	f007 fc12 	bl	802c612 <__cxa_guard_acquire>
 8024dee:	b138      	cbz	r0, 8024e00 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8024df0:	4620      	mov	r0, r4
 8024df2:	f007 fc1a 	bl	802c62a <__cxa_guard_release>
 8024df6:	4a0f      	ldr	r2, [pc, #60]	; (8024e34 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8024df8:	490f      	ldr	r1, [pc, #60]	; (8024e38 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8024dfa:	4810      	ldr	r0, [pc, #64]	; (8024e3c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8024dfc:	f007 fc02 	bl	802c604 <__aeabi_atexit>
 8024e00:	4c0f      	ldr	r4, [pc, #60]	; (8024e40 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8024e02:	7823      	ldrb	r3, [r4, #0]
 8024e04:	f3bf 8f5b 	dmb	ish
 8024e08:	07db      	lsls	r3, r3, #31
 8024e0a:	d40b      	bmi.n	8024e24 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8024e0c:	4620      	mov	r0, r4
 8024e0e:	f007 fc00 	bl	802c612 <__cxa_guard_acquire>
 8024e12:	b138      	cbz	r0, 8024e24 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8024e14:	4620      	mov	r0, r4
 8024e16:	f007 fc08 	bl	802c62a <__cxa_guard_release>
 8024e1a:	4a06      	ldr	r2, [pc, #24]	; (8024e34 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8024e1c:	4909      	ldr	r1, [pc, #36]	; (8024e44 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8024e1e:	480a      	ldr	r0, [pc, #40]	; (8024e48 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8024e20:	f007 fbf0 	bl	802c604 <__aeabi_atexit>
 8024e24:	4b05      	ldr	r3, [pc, #20]	; (8024e3c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8024e26:	65ab      	str	r3, [r5, #88]	; 0x58
 8024e28:	4b07      	ldr	r3, [pc, #28]	; (8024e48 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8024e2a:	65eb      	str	r3, [r5, #92]	; 0x5c
 8024e2c:	bd38      	pop	{r3, r4, r5, pc}
 8024e2e:	bf00      	nop
 8024e30:	2400bb98 	.word	0x2400bb98
 8024e34:	24000000 	.word	0x24000000
 8024e38:	08021651 	.word	0x08021651
 8024e3c:	24000070 	.word	0x24000070
 8024e40:	2400bb9c 	.word	0x2400bb9c
 8024e44:	0802164f 	.word	0x0802164f
 8024e48:	24000074 	.word	0x24000074

08024e4c <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 8024e4c:	b510      	push	{r4, lr}
 8024e4e:	4604      	mov	r4, r0
 8024e50:	f7ff ff88 	bl	8024d64 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8024e54:	4620      	mov	r0, r4
 8024e56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024e5a:	f7ff bfbd 	b.w	8024dd8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08024e60 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8024e60:	b538      	push	{r3, r4, r5, lr}
 8024e62:	4c15      	ldr	r4, [pc, #84]	; (8024eb8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8024e64:	4605      	mov	r5, r0
 8024e66:	7823      	ldrb	r3, [r4, #0]
 8024e68:	f3bf 8f5b 	dmb	ish
 8024e6c:	07da      	lsls	r2, r3, #31
 8024e6e:	d40b      	bmi.n	8024e88 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8024e70:	4620      	mov	r0, r4
 8024e72:	f007 fbce 	bl	802c612 <__cxa_guard_acquire>
 8024e76:	b138      	cbz	r0, 8024e88 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8024e78:	4620      	mov	r0, r4
 8024e7a:	f007 fbd6 	bl	802c62a <__cxa_guard_release>
 8024e7e:	4a0f      	ldr	r2, [pc, #60]	; (8024ebc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8024e80:	490f      	ldr	r1, [pc, #60]	; (8024ec0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8024e82:	4810      	ldr	r0, [pc, #64]	; (8024ec4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8024e84:	f007 fbbe 	bl	802c604 <__aeabi_atexit>
 8024e88:	4c0f      	ldr	r4, [pc, #60]	; (8024ec8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8024e8a:	7823      	ldrb	r3, [r4, #0]
 8024e8c:	f3bf 8f5b 	dmb	ish
 8024e90:	07db      	lsls	r3, r3, #31
 8024e92:	d40b      	bmi.n	8024eac <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8024e94:	4620      	mov	r0, r4
 8024e96:	f007 fbbc 	bl	802c612 <__cxa_guard_acquire>
 8024e9a:	b138      	cbz	r0, 8024eac <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8024e9c:	4620      	mov	r0, r4
 8024e9e:	f007 fbc4 	bl	802c62a <__cxa_guard_release>
 8024ea2:	4a06      	ldr	r2, [pc, #24]	; (8024ebc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8024ea4:	4909      	ldr	r1, [pc, #36]	; (8024ecc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8024ea6:	480a      	ldr	r0, [pc, #40]	; (8024ed0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8024ea8:	f007 fbac 	bl	802c604 <__aeabi_atexit>
 8024eac:	4b05      	ldr	r3, [pc, #20]	; (8024ec4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8024eae:	672b      	str	r3, [r5, #112]	; 0x70
 8024eb0:	4b07      	ldr	r3, [pc, #28]	; (8024ed0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8024eb2:	676b      	str	r3, [r5, #116]	; 0x74
 8024eb4:	bd38      	pop	{r3, r4, r5, pc}
 8024eb6:	bf00      	nop
 8024eb8:	2400bb90 	.word	0x2400bb90
 8024ebc:	24000000 	.word	0x24000000
 8024ec0:	08021645 	.word	0x08021645
 8024ec4:	24000068 	.word	0x24000068
 8024ec8:	2400bb94 	.word	0x2400bb94
 8024ecc:	08021643 	.word	0x08021643
 8024ed0:	2400006c 	.word	0x2400006c

08024ed4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 8024ed4:	b538      	push	{r3, r4, r5, lr}
 8024ed6:	4c15      	ldr	r4, [pc, #84]	; (8024f2c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8024ed8:	4605      	mov	r5, r0
 8024eda:	7823      	ldrb	r3, [r4, #0]
 8024edc:	f3bf 8f5b 	dmb	ish
 8024ee0:	07da      	lsls	r2, r3, #31
 8024ee2:	d40b      	bmi.n	8024efc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8024ee4:	4620      	mov	r0, r4
 8024ee6:	f007 fb94 	bl	802c612 <__cxa_guard_acquire>
 8024eea:	b138      	cbz	r0, 8024efc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8024eec:	4620      	mov	r0, r4
 8024eee:	f007 fb9c 	bl	802c62a <__cxa_guard_release>
 8024ef2:	4a0f      	ldr	r2, [pc, #60]	; (8024f30 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8024ef4:	490f      	ldr	r1, [pc, #60]	; (8024f34 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8024ef6:	4810      	ldr	r0, [pc, #64]	; (8024f38 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8024ef8:	f007 fb84 	bl	802c604 <__aeabi_atexit>
 8024efc:	4c0f      	ldr	r4, [pc, #60]	; (8024f3c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8024efe:	7823      	ldrb	r3, [r4, #0]
 8024f00:	f3bf 8f5b 	dmb	ish
 8024f04:	07db      	lsls	r3, r3, #31
 8024f06:	d40b      	bmi.n	8024f20 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8024f08:	4620      	mov	r0, r4
 8024f0a:	f007 fb82 	bl	802c612 <__cxa_guard_acquire>
 8024f0e:	b138      	cbz	r0, 8024f20 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8024f10:	4620      	mov	r0, r4
 8024f12:	f007 fb8a 	bl	802c62a <__cxa_guard_release>
 8024f16:	4a06      	ldr	r2, [pc, #24]	; (8024f30 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8024f18:	4909      	ldr	r1, [pc, #36]	; (8024f40 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8024f1a:	480a      	ldr	r0, [pc, #40]	; (8024f44 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8024f1c:	f007 fb72 	bl	802c604 <__aeabi_atexit>
 8024f20:	4b05      	ldr	r3, [pc, #20]	; (8024f38 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8024f22:	66ab      	str	r3, [r5, #104]	; 0x68
 8024f24:	4b07      	ldr	r3, [pc, #28]	; (8024f44 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8024f26:	66eb      	str	r3, [r5, #108]	; 0x6c
 8024f28:	bd38      	pop	{r3, r4, r5, pc}
 8024f2a:	bf00      	nop
 8024f2c:	2400bb88 	.word	0x2400bb88
 8024f30:	24000000 	.word	0x24000000
 8024f34:	08021649 	.word	0x08021649
 8024f38:	24000060 	.word	0x24000060
 8024f3c:	2400bb8c 	.word	0x2400bb8c
 8024f40:	08021647 	.word	0x08021647
 8024f44:	24000064 	.word	0x24000064

08024f48 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 8024f48:	b510      	push	{r4, lr}
 8024f4a:	4604      	mov	r4, r0
 8024f4c:	f7ff ff88 	bl	8024e60 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8024f50:	4620      	mov	r0, r4
 8024f52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024f56:	f7ff bfbd 	b.w	8024ed4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

08024f5a <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 8024f5a:	b510      	push	{r4, lr}
 8024f5c:	4604      	mov	r4, r0
 8024f5e:	f7ff fff3 	bl	8024f48 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 8024f62:	4620      	mov	r0, r4
 8024f64:	f7ff ff72 	bl	8024e4c <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 8024f68:	4620      	mov	r0, r4
 8024f6a:	f7ff fdf9 	bl	8024b60 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 8024f6e:	4620      	mov	r0, r4
 8024f70:	f7ff fcfa 	bl	8024968 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 8024f74:	4620      	mov	r0, r4
 8024f76:	f7ff fd75 	bl	8024a64 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 8024f7a:	4620      	mov	r0, r4
 8024f7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024f80:	f7ff bee0 	b.w	8024d44 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

08024f84 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>:
 8024f84:	b538      	push	{r3, r4, r5, lr}
 8024f86:	4c0b      	ldr	r4, [pc, #44]	; (8024fb4 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x30>)
 8024f88:	4605      	mov	r5, r0
 8024f8a:	7823      	ldrb	r3, [r4, #0]
 8024f8c:	f3bf 8f5b 	dmb	ish
 8024f90:	07db      	lsls	r3, r3, #31
 8024f92:	d40b      	bmi.n	8024fac <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 8024f94:	4620      	mov	r0, r4
 8024f96:	f007 fb3c 	bl	802c612 <__cxa_guard_acquire>
 8024f9a:	b138      	cbz	r0, 8024fac <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 8024f9c:	4620      	mov	r0, r4
 8024f9e:	f007 fb44 	bl	802c62a <__cxa_guard_release>
 8024fa2:	4a05      	ldr	r2, [pc, #20]	; (8024fb8 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x34>)
 8024fa4:	4905      	ldr	r1, [pc, #20]	; (8024fbc <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x38>)
 8024fa6:	4806      	ldr	r0, [pc, #24]	; (8024fc0 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 8024fa8:	f007 fb2c 	bl	802c604 <__aeabi_atexit>
 8024fac:	4b04      	ldr	r3, [pc, #16]	; (8024fc0 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 8024fae:	67ab      	str	r3, [r5, #120]	; 0x78
 8024fb0:	bd38      	pop	{r3, r4, r5, pc}
 8024fb2:	bf00      	nop
 8024fb4:	2400bb7c 	.word	0x2400bb7c
 8024fb8:	24000000 	.word	0x24000000
 8024fbc:	08021641 	.word	0x08021641
 8024fc0:	24000058 	.word	0x24000058

08024fc4 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv>:
 8024fc4:	b538      	push	{r3, r4, r5, lr}
 8024fc6:	4c0b      	ldr	r4, [pc, #44]	; (8024ff4 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x30>)
 8024fc8:	4605      	mov	r5, r0
 8024fca:	7823      	ldrb	r3, [r4, #0]
 8024fcc:	f3bf 8f5b 	dmb	ish
 8024fd0:	07db      	lsls	r3, r3, #31
 8024fd2:	d40b      	bmi.n	8024fec <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x28>
 8024fd4:	4620      	mov	r0, r4
 8024fd6:	f007 fb1c 	bl	802c612 <__cxa_guard_acquire>
 8024fda:	b138      	cbz	r0, 8024fec <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x28>
 8024fdc:	4620      	mov	r0, r4
 8024fde:	f007 fb24 	bl	802c62a <__cxa_guard_release>
 8024fe2:	4a05      	ldr	r2, [pc, #20]	; (8024ff8 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x34>)
 8024fe4:	4905      	ldr	r1, [pc, #20]	; (8024ffc <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x38>)
 8024fe6:	4806      	ldr	r0, [pc, #24]	; (8025000 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x3c>)
 8024fe8:	f007 fb0c 	bl	802c604 <__aeabi_atexit>
 8024fec:	4b04      	ldr	r3, [pc, #16]	; (8025000 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x3c>)
 8024fee:	67eb      	str	r3, [r5, #124]	; 0x7c
 8024ff0:	bd38      	pop	{r3, r4, r5, pc}
 8024ff2:	bf00      	nop
 8024ff4:	2400bb80 	.word	0x2400bb80
 8024ff8:	24000000 	.word	0x24000000
 8024ffc:	0802163f 	.word	0x0802163f
 8025000:	2400005c 	.word	0x2400005c

08025004 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev>:
 8025004:	b570      	push	{r4, r5, r6, lr}
 8025006:	4d0d      	ldr	r5, [pc, #52]	; (802503c <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x38>)
 8025008:	4606      	mov	r6, r0
 802500a:	4c0d      	ldr	r4, [pc, #52]	; (8025040 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 802500c:	782b      	ldrb	r3, [r5, #0]
 802500e:	f3bf 8f5b 	dmb	ish
 8025012:	f013 0f01 	tst.w	r3, #1
 8025016:	d10d      	bne.n	8025034 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x30>
 8025018:	4628      	mov	r0, r5
 802501a:	f007 fafa 	bl	802c612 <__cxa_guard_acquire>
 802501e:	b148      	cbz	r0, 8025034 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x30>
 8025020:	4b08      	ldr	r3, [pc, #32]	; (8025044 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x40>)
 8025022:	4628      	mov	r0, r5
 8025024:	6023      	str	r3, [r4, #0]
 8025026:	f007 fb00 	bl	802c62a <__cxa_guard_release>
 802502a:	4a07      	ldr	r2, [pc, #28]	; (8025048 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x44>)
 802502c:	4620      	mov	r0, r4
 802502e:	4907      	ldr	r1, [pc, #28]	; (802504c <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x48>)
 8025030:	f007 fae8 	bl	802c604 <__aeabi_atexit>
 8025034:	f8c6 4080 	str.w	r4, [r6, #128]	; 0x80
 8025038:	bd70      	pop	{r4, r5, r6, pc}
 802503a:	bf00      	nop
 802503c:	2400bb84 	.word	0x2400bb84
 8025040:	2400bbf8 	.word	0x2400bbf8
 8025044:	0802fc40 	.word	0x0802fc40
 8025048:	24000000 	.word	0x24000000
 802504c:	0802163d 	.word	0x0802163d

08025050 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>:
 8025050:	b510      	push	{r4, lr}
 8025052:	4604      	mov	r4, r0
 8025054:	f7ff ff96 	bl	8024f84 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>
 8025058:	4620      	mov	r0, r4
 802505a:	f7ff ffb3 	bl	8024fc4 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv>
 802505e:	4620      	mov	r0, r4
 8025060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025064:	f7ff bfce 	b.w	8025004 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev>

08025068 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 8025068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802506c:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	; 0x2c
 8025070:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
 8025074:	2d00      	cmp	r5, #0
 8025076:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
 802507a:	fb05 4c0e 	mla	ip, r5, lr, r4
 802507e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 8025082:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8025086:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 802508a:	eb02 0a0c 	add.w	sl, r2, ip
 802508e:	8808      	ldrh	r0, [r1, #0]
 8025090:	f2c0 80b0 	blt.w	80251f4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 8025094:	45ab      	cmp	fp, r5
 8025096:	f340 80ad 	ble.w	80251f4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 802509a:	2c00      	cmp	r4, #0
 802509c:	f2c0 80a8 	blt.w	80251f0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 80250a0:	45a6      	cmp	lr, r4
 80250a2:	f340 80a5 	ble.w	80251f0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 80250a6:	f812 200c 	ldrb.w	r2, [r2, ip]
 80250aa:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 80250ae:	1c62      	adds	r2, r4, #1
 80250b0:	f100 80a3 	bmi.w	80251fa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 80250b4:	4596      	cmp	lr, r2
 80250b6:	f340 80a0 	ble.w	80251fa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 80250ba:	f1b9 0f00 	cmp.w	r9, #0
 80250be:	f000 809c 	beq.w	80251fa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 80250c2:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80250c6:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 80250ca:	3501      	adds	r5, #1
 80250cc:	f100 8099 	bmi.w	8025202 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 80250d0:	45ab      	cmp	fp, r5
 80250d2:	f340 8096 	ble.w	8025202 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 80250d6:	2f00      	cmp	r7, #0
 80250d8:	f000 8093 	beq.w	8025202 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 80250dc:	2c00      	cmp	r4, #0
 80250de:	f2c0 808e 	blt.w	80251fe <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 80250e2:	45a6      	cmp	lr, r4
 80250e4:	f340 808b 	ble.w	80251fe <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 80250e8:	f81a 200e 	ldrb.w	r2, [sl, lr]
 80250ec:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 80250f0:	3401      	adds	r4, #1
 80250f2:	f100 8089 	bmi.w	8025208 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 80250f6:	45a6      	cmp	lr, r4
 80250f8:	f340 8086 	ble.w	8025208 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 80250fc:	f1b9 0f00 	cmp.w	r9, #0
 8025100:	f000 8082 	beq.w	8025208 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8025104:	44d6      	add	lr, sl
 8025106:	f89e 2001 	ldrb.w	r2, [lr, #1]
 802510a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 802510e:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8025112:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 8025116:	fb19 fe07 	smulbb	lr, r9, r7
 802511a:	f1c7 0210 	rsb	r2, r7, #16
 802511e:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8025122:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8025126:	eba2 0209 	sub.w	r2, r2, r9
 802512a:	ea44 0808 	orr.w	r8, r4, r8
 802512e:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8025132:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8025136:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 802513a:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 802513e:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8025142:	ea44 0c0c 	orr.w	ip, r4, ip
 8025146:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 802514a:	fb04 f40c 	mul.w	r4, r4, ip
 802514e:	fb02 4808 	mla	r8, r2, r8, r4
 8025152:	041a      	lsls	r2, r3, #16
 8025154:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8025158:	b2b4      	uxth	r4, r6
 802515a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802515e:	43f6      	mvns	r6, r6
 8025160:	4313      	orrs	r3, r2
 8025162:	042a      	lsls	r2, r5, #16
 8025164:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8025168:	b2f6      	uxtb	r6, r6
 802516a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802516e:	fb0e 8303 	mla	r3, lr, r3, r8
 8025172:	432a      	orrs	r2, r5
 8025174:	fb07 3202 	mla	r2, r7, r2, r3
 8025178:	10c7      	asrs	r7, r0, #3
 802517a:	0d53      	lsrs	r3, r2, #21
 802517c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8025180:	0952      	lsrs	r2, r2, #5
 8025182:	fb17 f706 	smulbb	r7, r7, r6
 8025186:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802518a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802518e:	431a      	orrs	r2, r3
 8025190:	b293      	uxth	r3, r2
 8025192:	1202      	asrs	r2, r0, #8
 8025194:	121d      	asrs	r5, r3, #8
 8025196:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802519a:	00c0      	lsls	r0, r0, #3
 802519c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80251a0:	fb12 f206 	smulbb	r2, r2, r6
 80251a4:	b2c0      	uxtb	r0, r0
 80251a6:	fb05 2504 	mla	r5, r5, r4, r2
 80251aa:	10da      	asrs	r2, r3, #3
 80251ac:	fb10 f006 	smulbb	r0, r0, r6
 80251b0:	00db      	lsls	r3, r3, #3
 80251b2:	b2ad      	uxth	r5, r5
 80251b4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80251b8:	b2db      	uxtb	r3, r3
 80251ba:	fb02 7204 	mla	r2, r2, r4, r7
 80251be:	fb03 0004 	mla	r0, r3, r4, r0
 80251c2:	1c6b      	adds	r3, r5, #1
 80251c4:	b292      	uxth	r2, r2
 80251c6:	b280      	uxth	r0, r0
 80251c8:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80251cc:	1c43      	adds	r3, r0, #1
 80251ce:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80251d2:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80251d6:	1c50      	adds	r0, r2, #1
 80251d8:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80251dc:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80251e0:	0952      	lsrs	r2, r2, #5
 80251e2:	432b      	orrs	r3, r5
 80251e4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80251e8:	4313      	orrs	r3, r2
 80251ea:	800b      	strh	r3, [r1, #0]
 80251ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80251f0:	4680      	mov	r8, r0
 80251f2:	e75c      	b.n	80250ae <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 80251f4:	4684      	mov	ip, r0
 80251f6:	4680      	mov	r8, r0
 80251f8:	e767      	b.n	80250ca <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 80251fa:	4684      	mov	ip, r0
 80251fc:	e765      	b.n	80250ca <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 80251fe:	4605      	mov	r5, r0
 8025200:	e776      	b.n	80250f0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 8025202:	4603      	mov	r3, r0
 8025204:	4605      	mov	r5, r0
 8025206:	e782      	b.n	802510e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8025208:	4603      	mov	r3, r0
 802520a:	e780      	b.n	802510e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

0802520c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802520c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025210:	b099      	sub	sp, #100	; 0x64
 8025212:	9215      	str	r2, [sp, #84]	; 0x54
 8025214:	9309      	str	r3, [sp, #36]	; 0x24
 8025216:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8025218:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
 802521c:	9016      	str	r0, [sp, #88]	; 0x58
 802521e:	930d      	str	r3, [sp, #52]	; 0x34
 8025220:	6850      	ldr	r0, [r2, #4]
 8025222:	910c      	str	r1, [sp, #48]	; 0x30
 8025224:	6812      	ldr	r2, [r2, #0]
 8025226:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 802522a:	e9dd a523 	ldrd	sl, r5, [sp, #140]	; 0x8c
 802522e:	fb00 1303 	mla	r3, r0, r3, r1
 8025232:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 8025236:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025238:	681b      	ldr	r3, [r3, #0]
 802523a:	930b      	str	r3, [sp, #44]	; 0x2c
 802523c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802523e:	685e      	ldr	r6, [r3, #4]
 8025240:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025242:	3604      	adds	r6, #4
 8025244:	43db      	mvns	r3, r3
 8025246:	b2db      	uxtb	r3, r3
 8025248:	930a      	str	r3, [sp, #40]	; 0x28
 802524a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802524c:	2b00      	cmp	r3, #0
 802524e:	dc03      	bgt.n	8025258 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8025250:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8025252:	2b00      	cmp	r3, #0
 8025254:	f340 8225 	ble.w	80256a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8025258:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802525a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802525e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025262:	1e48      	subs	r0, r1, #1
 8025264:	1e57      	subs	r7, r2, #1
 8025266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025268:	2b00      	cmp	r3, #0
 802526a:	f340 80e3 	ble.w	8025434 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 802526e:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 8025272:	ea4f 4325 	mov.w	r3, r5, asr #16
 8025276:	d406      	bmi.n	8025286 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8025278:	4584      	cmp	ip, r0
 802527a:	da04      	bge.n	8025286 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 802527c:	2b00      	cmp	r3, #0
 802527e:	db02      	blt.n	8025286 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8025280:	42bb      	cmp	r3, r7
 8025282:	f2c0 80d8 	blt.w	8025436 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8025286:	f11c 0c01 	adds.w	ip, ip, #1
 802528a:	f100 80c9 	bmi.w	8025420 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 802528e:	4561      	cmp	r1, ip
 8025290:	f2c0 80c6 	blt.w	8025420 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8025294:	3301      	adds	r3, #1
 8025296:	f100 80c3 	bmi.w	8025420 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 802529a:	429a      	cmp	r2, r3
 802529c:	f2c0 80c0 	blt.w	8025420 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80252a0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80252a4:	4647      	mov	r7, r8
 80252a6:	f1bb 0f00 	cmp.w	fp, #0
 80252aa:	f340 80e3 	ble.w	8025474 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 80252ae:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80252b0:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80252b4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80252b6:	f3ca 3003 	ubfx	r0, sl, #12, #4
 80252ba:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80252be:	ea5f 422a 	movs.w	r2, sl, asr #16
 80252c2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80252c6:	689b      	ldr	r3, [r3, #8]
 80252c8:	f100 8121 	bmi.w	802550e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 80252cc:	f103 39ff 	add.w	r9, r3, #4294967295
 80252d0:	454a      	cmp	r2, r9
 80252d2:	f280 811c 	bge.w	802550e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 80252d6:	f1bc 0f00 	cmp.w	ip, #0
 80252da:	f2c0 8118 	blt.w	802550e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 80252de:	f10e 39ff 	add.w	r9, lr, #4294967295
 80252e2:	45cc      	cmp	ip, r9
 80252e4:	f280 8113 	bge.w	802550e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 80252e8:	b21b      	sxth	r3, r3
 80252ea:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80252ec:	fb0c 2203 	mla	r2, ip, r3, r2
 80252f0:	eb04 0902 	add.w	r9, r4, r2
 80252f4:	5ca2      	ldrb	r2, [r4, r2]
 80252f6:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 80252fa:	2800      	cmp	r0, #0
 80252fc:	f000 80fe 	beq.w	80254fc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8025300:	f899 2001 	ldrb.w	r2, [r9, #1]
 8025304:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8025308:	9211      	str	r2, [sp, #68]	; 0x44
 802530a:	b151      	cbz	r1, 8025322 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 802530c:	eb09 0203 	add.w	r2, r9, r3
 8025310:	f819 3003 	ldrb.w	r3, [r9, r3]
 8025314:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8025318:	930f      	str	r3, [sp, #60]	; 0x3c
 802531a:	7853      	ldrb	r3, [r2, #1]
 802531c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8025320:	9312      	str	r3, [sp, #72]	; 0x48
 8025322:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025324:	fb10 f201 	smulbb	r2, r0, r1
 8025328:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802532a:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802532e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8025332:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8025336:	10d2      	asrs	r2, r2, #3
 8025338:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802533c:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 8025340:	ea4c 0c03 	orr.w	ip, ip, r3
 8025344:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8025346:	041b      	lsls	r3, r3, #16
 8025348:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802534c:	4323      	orrs	r3, r4
 802534e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025350:	4353      	muls	r3, r2
 8025352:	fb09 330c 	mla	r3, r9, ip, r3
 8025356:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 802535a:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802535e:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8025362:	ea4c 0e0e 	orr.w	lr, ip, lr
 8025366:	f1c1 0c10 	rsb	ip, r1, #16
 802536a:	ebac 0c00 	sub.w	ip, ip, r0
 802536e:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8025372:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8025376:	fb0c 3c0e 	mla	ip, ip, lr, r3
 802537a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802537c:	0418      	lsls	r0, r3, #16
 802537e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8025382:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8025386:	4318      	orrs	r0, r3
 8025388:	fb02 c200 	mla	r2, r2, r0, ip
 802538c:	8838      	ldrh	r0, [r7, #0]
 802538e:	0d53      	lsrs	r3, r2, #21
 8025390:	0952      	lsrs	r2, r2, #5
 8025392:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025396:	1201      	asrs	r1, r0, #8
 8025398:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802539c:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 80253a0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80253a4:	00c0      	lsls	r0, r0, #3
 80253a6:	431a      	orrs	r2, r3
 80253a8:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 80253ac:	fb11 f104 	smulbb	r1, r1, r4
 80253b0:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 80253b4:	b292      	uxth	r2, r2
 80253b6:	fb1e fe04 	smulbb	lr, lr, r4
 80253ba:	b2c0      	uxtb	r0, r0
 80253bc:	ea4f 2c22 	mov.w	ip, r2, asr #8
 80253c0:	fb10 f004 	smulbb	r0, r0, r4
 80253c4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80253c8:	fb0c 1c03 	mla	ip, ip, r3, r1
 80253cc:	10d1      	asrs	r1, r2, #3
 80253ce:	00d2      	lsls	r2, r2, #3
 80253d0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80253d4:	fa1f fc8c 	uxth.w	ip, ip
 80253d8:	b2d2      	uxtb	r2, r2
 80253da:	fb01 e103 	mla	r1, r1, r3, lr
 80253de:	fb02 0303 	mla	r3, r2, r3, r0
 80253e2:	b289      	uxth	r1, r1
 80253e4:	b29a      	uxth	r2, r3
 80253e6:	f10c 0301 	add.w	r3, ip, #1
 80253ea:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80253ee:	1c53      	adds	r3, r2, #1
 80253f0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80253f4:	1c4a      	adds	r2, r1, #1
 80253f6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80253fa:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80253fe:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8025402:	0949      	lsrs	r1, r1, #5
 8025404:	ea43 030c 	orr.w	r3, r3, ip
 8025408:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802540c:	430b      	orrs	r3, r1
 802540e:	803b      	strh	r3, [r7, #0]
 8025410:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8025412:	3702      	adds	r7, #2
 8025414:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025418:	449a      	add	sl, r3
 802541a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802541c:	441d      	add	r5, r3
 802541e:	e742      	b.n	80252a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8025420:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8025422:	f108 0802 	add.w	r8, r8, #2
 8025426:	449a      	add	sl, r3
 8025428:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802542a:	441d      	add	r5, r3
 802542c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802542e:	3b01      	subs	r3, #1
 8025430:	9309      	str	r3, [sp, #36]	; 0x24
 8025432:	e718      	b.n	8025266 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8025434:	d023      	beq.n	802547e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8025436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025438:	9825      	ldr	r0, [sp, #148]	; 0x94
 802543a:	3b01      	subs	r3, #1
 802543c:	fb00 a003 	mla	r0, r0, r3, sl
 8025440:	1400      	asrs	r0, r0, #16
 8025442:	f53f af2d 	bmi.w	80252a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8025446:	3901      	subs	r1, #1
 8025448:	4288      	cmp	r0, r1
 802544a:	f6bf af29 	bge.w	80252a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802544e:	9926      	ldr	r1, [sp, #152]	; 0x98
 8025450:	fb01 5303 	mla	r3, r1, r3, r5
 8025454:	141b      	asrs	r3, r3, #16
 8025456:	f53f af23 	bmi.w	80252a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802545a:	3a01      	subs	r2, #1
 802545c:	4293      	cmp	r3, r2
 802545e:	f6bf af1f 	bge.w	80252a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8025462:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8025466:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 802546a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 802546e:	f1be 0f00 	cmp.w	lr, #0
 8025472:	dc6c      	bgt.n	802554e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8025474:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025476:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802547a:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 802547e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025480:	2b00      	cmp	r3, #0
 8025482:	f340 810e 	ble.w	80256a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8025486:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802548a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802548c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025490:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025494:	eef0 6a62 	vmov.f32	s13, s5
 8025498:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802549c:	ee31 1a05 	vadd.f32	s2, s2, s10
 80254a0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80254a4:	ee16 aa90 	vmov	sl, s13
 80254a8:	eef0 6a43 	vmov.f32	s13, s6
 80254ac:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80254b0:	ee16 5a90 	vmov	r5, s13
 80254b4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80254b8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80254bc:	ee77 2a62 	vsub.f32	s5, s14, s5
 80254c0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80254c4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80254c8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80254cc:	ee12 2a90 	vmov	r2, s5
 80254d0:	eef0 2a47 	vmov.f32	s5, s14
 80254d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80254d8:	ee13 2a10 	vmov	r2, s6
 80254dc:	9325      	str	r3, [sp, #148]	; 0x94
 80254de:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80254e0:	eeb0 3a67 	vmov.f32	s6, s15
 80254e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80254e8:	9326      	str	r3, [sp, #152]	; 0x98
 80254ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80254ec:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80254ee:	3b01      	subs	r3, #1
 80254f0:	930c      	str	r3, [sp, #48]	; 0x30
 80254f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80254f4:	bf08      	it	eq
 80254f6:	4613      	moveq	r3, r2
 80254f8:	9309      	str	r3, [sp, #36]	; 0x24
 80254fa:	e6a6      	b.n	802524a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80254fc:	2900      	cmp	r1, #0
 80254fe:	f43f af10 	beq.w	8025322 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8025502:	f819 3003 	ldrb.w	r3, [r9, r3]
 8025506:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802550a:	930f      	str	r3, [sp, #60]	; 0x3c
 802550c:	e709      	b.n	8025322 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 802550e:	f112 0901 	adds.w	r9, r2, #1
 8025512:	f53f af7d 	bmi.w	8025410 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8025516:	454b      	cmp	r3, r9
 8025518:	f6ff af7a 	blt.w	8025410 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802551c:	f11c 0901 	adds.w	r9, ip, #1
 8025520:	f53f af76 	bmi.w	8025410 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8025524:	45ce      	cmp	lr, r9
 8025526:	f6ff af73 	blt.w	8025410 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802552a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802552c:	b21b      	sxth	r3, r3
 802552e:	9202      	str	r2, [sp, #8]
 8025530:	fa0f f28e 	sxth.w	r2, lr
 8025534:	9300      	str	r3, [sp, #0]
 8025536:	4633      	mov	r3, r6
 8025538:	9201      	str	r2, [sp, #4]
 802553a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802553c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8025540:	e9cd c003 	strd	ip, r0, [sp, #12]
 8025544:	4639      	mov	r1, r7
 8025546:	9816      	ldr	r0, [sp, #88]	; 0x58
 8025548:	f7ff fd8e 	bl	8025068 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 802554c:	e760      	b.n	8025410 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802554e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025550:	ea4f 422a 	mov.w	r2, sl, asr #16
 8025554:	1429      	asrs	r1, r5, #16
 8025556:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025558:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 802555c:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 8025560:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8025564:	fb03 2101 	mla	r1, r3, r1, r2
 8025568:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802556a:	440a      	add	r2, r1
 802556c:	5c61      	ldrb	r1, [r4, r1]
 802556e:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 8025572:	f1bc 0f00 	cmp.w	ip, #0
 8025576:	f000 808c 	beq.w	8025692 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 802557a:	7857      	ldrb	r7, [r2, #1]
 802557c:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 8025580:	9413      	str	r4, [sp, #76]	; 0x4c
 8025582:	b140      	cbz	r0, 8025596 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8025584:	18d7      	adds	r7, r2, r3
 8025586:	5cd3      	ldrb	r3, [r2, r3]
 8025588:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802558c:	9310      	str	r3, [sp, #64]	; 0x40
 802558e:	787b      	ldrb	r3, [r7, #1]
 8025590:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8025594:	9314      	str	r3, [sp, #80]	; 0x50
 8025596:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025598:	fb1c f200 	smulbb	r2, ip, r0
 802559c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802559e:	f10e 3eff 	add.w	lr, lr, #4294967295
 80255a2:	041f      	lsls	r7, r3, #16
 80255a4:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80255a8:	10d2      	asrs	r2, r2, #3
 80255aa:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 80255ae:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 80255b2:	431f      	orrs	r7, r3
 80255b4:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 80255b8:	9317      	str	r3, [sp, #92]	; 0x5c
 80255ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80255bc:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80255be:	041b      	lsls	r3, r3, #16
 80255c0:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80255c4:	ea43 030b 	orr.w	r3, r3, fp
 80255c8:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80255cc:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80255d0:	4353      	muls	r3, r2
 80255d2:	fb04 3707 	mla	r7, r4, r7, r3
 80255d6:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 80255da:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80255dc:	ea43 0b01 	orr.w	fp, r3, r1
 80255e0:	f1c0 0110 	rsb	r1, r0, #16
 80255e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80255e6:	eba1 0c0c 	sub.w	ip, r1, ip
 80255ea:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 80255ee:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 80255f2:	fb0c 770b 	mla	r7, ip, fp, r7
 80255f6:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80255fa:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 80255fe:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8025602:	ea4c 0c0b 	orr.w	ip, ip, fp
 8025606:	fb02 770c 	mla	r7, r2, ip, r7
 802560a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802560c:	0d79      	lsrs	r1, r7, #21
 802560e:	8812      	ldrh	r2, [r2, #0]
 8025610:	097f      	lsrs	r7, r7, #5
 8025612:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025616:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 802561a:	430f      	orrs	r7, r1
 802561c:	1211      	asrs	r1, r2, #8
 802561e:	b2bb      	uxth	r3, r7
 8025620:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8025624:	10d7      	asrs	r7, r2, #3
 8025626:	fb11 f104 	smulbb	r1, r1, r4
 802562a:	1218      	asrs	r0, r3, #8
 802562c:	00d2      	lsls	r2, r2, #3
 802562e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8025632:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025636:	fb17 f704 	smulbb	r7, r7, r4
 802563a:	b2d2      	uxtb	r2, r2
 802563c:	fb00 1009 	mla	r0, r0, r9, r1
 8025640:	10d9      	asrs	r1, r3, #3
 8025642:	fb12 f204 	smulbb	r2, r2, r4
 8025646:	00db      	lsls	r3, r3, #3
 8025648:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802564c:	b280      	uxth	r0, r0
 802564e:	b2db      	uxtb	r3, r3
 8025650:	fb01 7109 	mla	r1, r1, r9, r7
 8025654:	fb03 2309 	mla	r3, r3, r9, r2
 8025658:	1c42      	adds	r2, r0, #1
 802565a:	b289      	uxth	r1, r1
 802565c:	b29b      	uxth	r3, r3
 802565e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8025662:	1c4f      	adds	r7, r1, #1
 8025664:	1c5a      	adds	r2, r3, #1
 8025666:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 802566a:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802566e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8025672:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025674:	0949      	lsrs	r1, r1, #5
 8025676:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802567a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802567e:	4310      	orrs	r0, r2
 8025680:	4308      	orrs	r0, r1
 8025682:	f823 0b02 	strh.w	r0, [r3], #2
 8025686:	930e      	str	r3, [sp, #56]	; 0x38
 8025688:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802568a:	449a      	add	sl, r3
 802568c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802568e:	441d      	add	r5, r3
 8025690:	e6ed      	b.n	802546e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 8025692:	2800      	cmp	r0, #0
 8025694:	f43f af7f 	beq.w	8025596 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8025698:	5cd3      	ldrb	r3, [r2, r3]
 802569a:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802569e:	9310      	str	r3, [sp, #64]	; 0x40
 80256a0:	e779      	b.n	8025596 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80256a2:	b019      	add	sp, #100	; 0x64
 80256a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080256a8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 80256a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80256ac:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
 80256b0:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 80256b4:	f1b8 0f00 	cmp.w	r8, #0
 80256b8:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 80256bc:	fb08 470e 	mla	r7, r8, lr, r4
 80256c0:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 80256c4:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 80256c8:	eb02 0907 	add.w	r9, r2, r7
 80256cc:	8808      	ldrh	r0, [r1, #0]
 80256ce:	db67      	blt.n	80257a0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 80256d0:	45c2      	cmp	sl, r8
 80256d2:	dd65      	ble.n	80257a0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 80256d4:	2c00      	cmp	r4, #0
 80256d6:	db61      	blt.n	802579c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 80256d8:	45a6      	cmp	lr, r4
 80256da:	dd5f      	ble.n	802579c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 80256dc:	5dd2      	ldrb	r2, [r2, r7]
 80256de:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 80256e2:	1c62      	adds	r2, r4, #1
 80256e4:	d45f      	bmi.n	80257a6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 80256e6:	4596      	cmp	lr, r2
 80256e8:	dd5d      	ble.n	80257a6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 80256ea:	2d00      	cmp	r5, #0
 80256ec:	d05b      	beq.n	80257a6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 80256ee:	f899 2001 	ldrb.w	r2, [r9, #1]
 80256f2:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 80256f6:	f118 0801 	adds.w	r8, r8, #1
 80256fa:	d458      	bmi.n	80257ae <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 80256fc:	45c2      	cmp	sl, r8
 80256fe:	dd56      	ble.n	80257ae <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8025700:	2e00      	cmp	r6, #0
 8025702:	d054      	beq.n	80257ae <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8025704:	2c00      	cmp	r4, #0
 8025706:	db50      	blt.n	80257aa <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 8025708:	45a6      	cmp	lr, r4
 802570a:	dd4e      	ble.n	80257aa <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 802570c:	f819 200e 	ldrb.w	r2, [r9, lr]
 8025710:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8025714:	3401      	adds	r4, #1
 8025716:	d407      	bmi.n	8025728 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8025718:	45a6      	cmp	lr, r4
 802571a:	dd05      	ble.n	8025728 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 802571c:	b125      	cbz	r5, 8025728 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 802571e:	44ce      	add	lr, r9
 8025720:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8025724:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8025728:	fb15 f406 	smulbb	r4, r5, r6
 802572c:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8025730:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8025734:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8025738:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802573c:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 8025740:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8025744:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8025748:	ea43 0c0c 	orr.w	ip, r3, ip
 802574c:	f1c6 0310 	rsb	r3, r6, #16
 8025750:	ea4e 0707 	orr.w	r7, lr, r7
 8025754:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8025758:	1b5b      	subs	r3, r3, r5
 802575a:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 802575e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8025762:	437d      	muls	r5, r7
 8025764:	fb03 5c0c 	mla	ip, r3, ip, r5
 8025768:	0403      	lsls	r3, r0, #16
 802576a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802576e:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8025772:	4318      	orrs	r0, r3
 8025774:	0413      	lsls	r3, r2, #16
 8025776:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802577a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802577e:	fb04 c000 	mla	r0, r4, r0, ip
 8025782:	4313      	orrs	r3, r2
 8025784:	fb06 0003 	mla	r0, r6, r3, r0
 8025788:	0d43      	lsrs	r3, r0, #21
 802578a:	0940      	lsrs	r0, r0, #5
 802578c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025790:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025794:	4318      	orrs	r0, r3
 8025796:	8008      	strh	r0, [r1, #0]
 8025798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802579c:	4684      	mov	ip, r0
 802579e:	e7a0      	b.n	80256e2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 80257a0:	4607      	mov	r7, r0
 80257a2:	4684      	mov	ip, r0
 80257a4:	e7a7      	b.n	80256f6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 80257a6:	4607      	mov	r7, r0
 80257a8:	e7a5      	b.n	80256f6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 80257aa:	4602      	mov	r2, r0
 80257ac:	e7b2      	b.n	8025714 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 80257ae:	4602      	mov	r2, r0
 80257b0:	e7ba      	b.n	8025728 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

080257b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80257b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80257b6:	b093      	sub	sp, #76	; 0x4c
 80257b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80257bc:	920f      	str	r2, [sp, #60]	; 0x3c
 80257be:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80257c0:	9010      	str	r0, [sp, #64]	; 0x40
 80257c2:	9108      	str	r1, [sp, #32]
 80257c4:	6850      	ldr	r0, [r2, #4]
 80257c6:	9306      	str	r3, [sp, #24]
 80257c8:	6812      	ldr	r2, [r2, #0]
 80257ca:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 80257ce:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 80257d2:	fb00 1303 	mla	r3, r0, r3, r1
 80257d6:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 80257da:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80257dc:	681b      	ldr	r3, [r3, #0]
 80257de:	9307      	str	r3, [sp, #28]
 80257e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80257e2:	685f      	ldr	r7, [r3, #4]
 80257e4:	3704      	adds	r7, #4
 80257e6:	9b08      	ldr	r3, [sp, #32]
 80257e8:	2b00      	cmp	r3, #0
 80257ea:	dc03      	bgt.n	80257f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 80257ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80257ee:	2b00      	cmp	r3, #0
 80257f0:	f340 81b2 	ble.w	8025b58 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 80257f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80257f6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80257fa:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80257fe:	1e48      	subs	r0, r1, #1
 8025800:	f102 3cff 	add.w	ip, r2, #4294967295
 8025804:	9b06      	ldr	r3, [sp, #24]
 8025806:	2b00      	cmp	r3, #0
 8025808:	f340 80a9 	ble.w	802595e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 802580c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8025810:	ea4f 4326 	mov.w	r3, r6, asr #16
 8025814:	d406      	bmi.n	8025824 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8025816:	4586      	cmp	lr, r0
 8025818:	da04      	bge.n	8025824 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802581a:	2b00      	cmp	r3, #0
 802581c:	db02      	blt.n	8025824 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802581e:	4563      	cmp	r3, ip
 8025820:	f2c0 809e 	blt.w	8025960 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8025824:	f11e 0e01 	adds.w	lr, lr, #1
 8025828:	f100 808f 	bmi.w	802594a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802582c:	4571      	cmp	r1, lr
 802582e:	f2c0 808c 	blt.w	802594a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8025832:	3301      	adds	r3, #1
 8025834:	f100 8089 	bmi.w	802594a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8025838:	429a      	cmp	r2, r3
 802583a:	f2c0 8086 	blt.w	802594a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802583e:	f8dd b018 	ldr.w	fp, [sp, #24]
 8025842:	46c8      	mov	r8, r9
 8025844:	f1bb 0f00 	cmp.w	fp, #0
 8025848:	f340 80a6 	ble.w	8025998 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802584c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 802584e:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8025852:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025854:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8025858:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802585c:	1422      	asrs	r2, r4, #16
 802585e:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8025862:	689b      	ldr	r3, [r3, #8]
 8025864:	f100 80e3 	bmi.w	8025a2e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8025868:	f103 3aff 	add.w	sl, r3, #4294967295
 802586c:	4552      	cmp	r2, sl
 802586e:	f280 80de 	bge.w	8025a2e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8025872:	f1bc 0f00 	cmp.w	ip, #0
 8025876:	f2c0 80da 	blt.w	8025a2e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 802587a:	f10e 3aff 	add.w	sl, lr, #4294967295
 802587e:	45d4      	cmp	ip, sl
 8025880:	f280 80d5 	bge.w	8025a2e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8025884:	b21b      	sxth	r3, r3
 8025886:	9d07      	ldr	r5, [sp, #28]
 8025888:	fb0c 2203 	mla	r2, ip, r3, r2
 802588c:	eb05 0a02 	add.w	sl, r5, r2
 8025890:	5caa      	ldrb	r2, [r5, r2]
 8025892:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 8025896:	2800      	cmp	r0, #0
 8025898:	f000 80c0 	beq.w	8025a1c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 802589c:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80258a0:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 80258a4:	920b      	str	r2, [sp, #44]	; 0x2c
 80258a6:	b151      	cbz	r1, 80258be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 80258a8:	eb0a 0203 	add.w	r2, sl, r3
 80258ac:	f81a 3003 	ldrb.w	r3, [sl, r3]
 80258b0:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80258b4:	9309      	str	r3, [sp, #36]	; 0x24
 80258b6:	7853      	ldrb	r3, [r2, #1]
 80258b8:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80258bc:	930c      	str	r3, [sp, #48]	; 0x30
 80258be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80258c0:	fb10 f201 	smulbb	r2, r0, r1
 80258c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80258c6:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80258ca:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80258ce:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80258d2:	10d2      	asrs	r2, r2, #3
 80258d4:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80258d8:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 80258dc:	ea4c 0c03 	orr.w	ip, ip, r3
 80258e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80258e2:	041b      	lsls	r3, r3, #16
 80258e4:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80258e8:	432b      	orrs	r3, r5
 80258ea:	4353      	muls	r3, r2
 80258ec:	fb0a 330c 	mla	r3, sl, ip, r3
 80258f0:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 80258f4:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80258f8:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80258fc:	ea4c 0e0e 	orr.w	lr, ip, lr
 8025900:	f1c1 0c10 	rsb	ip, r1, #16
 8025904:	ebac 0c00 	sub.w	ip, ip, r0
 8025908:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 802590c:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8025910:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8025914:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025916:	0418      	lsls	r0, r3, #16
 8025918:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802591c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8025920:	4318      	orrs	r0, r3
 8025922:	fb02 c200 	mla	r2, r2, r0, ip
 8025926:	0d53      	lsrs	r3, r2, #21
 8025928:	0952      	lsrs	r2, r2, #5
 802592a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802592e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025932:	431a      	orrs	r2, r3
 8025934:	f8a8 2000 	strh.w	r2, [r8]
 8025938:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802593a:	f108 0802 	add.w	r8, r8, #2
 802593e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025942:	441c      	add	r4, r3
 8025944:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025946:	441e      	add	r6, r3
 8025948:	e77c      	b.n	8025844 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802594a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802594c:	f109 0902 	add.w	r9, r9, #2
 8025950:	441c      	add	r4, r3
 8025952:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025954:	441e      	add	r6, r3
 8025956:	9b06      	ldr	r3, [sp, #24]
 8025958:	3b01      	subs	r3, #1
 802595a:	9306      	str	r3, [sp, #24]
 802595c:	e752      	b.n	8025804 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802595e:	d020      	beq.n	80259a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8025960:	9b06      	ldr	r3, [sp, #24]
 8025962:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8025964:	3b01      	subs	r3, #1
 8025966:	fb00 4003 	mla	r0, r0, r3, r4
 802596a:	1400      	asrs	r0, r0, #16
 802596c:	f53f af67 	bmi.w	802583e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8025970:	3901      	subs	r1, #1
 8025972:	4288      	cmp	r0, r1
 8025974:	f6bf af63 	bge.w	802583e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8025978:	9920      	ldr	r1, [sp, #128]	; 0x80
 802597a:	fb01 6303 	mla	r3, r1, r3, r6
 802597e:	141b      	asrs	r3, r3, #16
 8025980:	f53f af5d 	bmi.w	802583e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8025984:	3a01      	subs	r2, #1
 8025986:	4293      	cmp	r3, r2
 8025988:	f6bf af59 	bge.w	802583e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802598c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8025990:	46ca      	mov	sl, r9
 8025992:	f1b8 0f00 	cmp.w	r8, #0
 8025996:	dc67      	bgt.n	8025a68 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8025998:	9b06      	ldr	r3, [sp, #24]
 802599a:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802599e:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 80259a2:	9b08      	ldr	r3, [sp, #32]
 80259a4:	2b00      	cmp	r3, #0
 80259a6:	f340 80d7 	ble.w	8025b58 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 80259aa:	ee30 0a04 	vadd.f32	s0, s0, s8
 80259ae:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80259b0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80259b4:	eeb0 6a62 	vmov.f32	s12, s5
 80259b8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80259bc:	ee31 1a05 	vadd.f32	s2, s2, s10
 80259c0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80259c4:	ee16 4a10 	vmov	r4, s12
 80259c8:	eeb0 6a43 	vmov.f32	s12, s6
 80259cc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80259d0:	ee16 6a10 	vmov	r6, s12
 80259d4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80259d8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80259dc:	ee77 2a62 	vsub.f32	s5, s14, s5
 80259e0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80259e4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80259e8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80259ec:	ee12 2a90 	vmov	r2, s5
 80259f0:	eef0 2a47 	vmov.f32	s5, s14
 80259f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80259f8:	ee13 2a10 	vmov	r2, s6
 80259fc:	931f      	str	r3, [sp, #124]	; 0x7c
 80259fe:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025a00:	eeb0 3a67 	vmov.f32	s6, s15
 8025a04:	fb92 f3f3 	sdiv	r3, r2, r3
 8025a08:	9320      	str	r3, [sp, #128]	; 0x80
 8025a0a:	9b08      	ldr	r3, [sp, #32]
 8025a0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8025a0e:	3b01      	subs	r3, #1
 8025a10:	9308      	str	r3, [sp, #32]
 8025a12:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025a14:	bf08      	it	eq
 8025a16:	4613      	moveq	r3, r2
 8025a18:	9306      	str	r3, [sp, #24]
 8025a1a:	e6e4      	b.n	80257e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8025a1c:	2900      	cmp	r1, #0
 8025a1e:	f43f af4e 	beq.w	80258be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8025a22:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8025a26:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8025a2a:	9309      	str	r3, [sp, #36]	; 0x24
 8025a2c:	e747      	b.n	80258be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8025a2e:	f112 0a01 	adds.w	sl, r2, #1
 8025a32:	d481      	bmi.n	8025938 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8025a34:	4553      	cmp	r3, sl
 8025a36:	f6ff af7f 	blt.w	8025938 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8025a3a:	f11c 0a01 	adds.w	sl, ip, #1
 8025a3e:	f53f af7b 	bmi.w	8025938 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8025a42:	45d6      	cmp	lr, sl
 8025a44:	f6ff af78 	blt.w	8025938 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8025a48:	b21b      	sxth	r3, r3
 8025a4a:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 8025a4e:	fa0f f28e 	sxth.w	r2, lr
 8025a52:	9300      	str	r3, [sp, #0]
 8025a54:	463b      	mov	r3, r7
 8025a56:	9201      	str	r2, [sp, #4]
 8025a58:	9a07      	ldr	r2, [sp, #28]
 8025a5a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8025a5e:	4641      	mov	r1, r8
 8025a60:	9810      	ldr	r0, [sp, #64]	; 0x40
 8025a62:	f7ff fe21 	bl	80256a8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8025a66:	e767      	b.n	8025938 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8025a68:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025a6a:	1422      	asrs	r2, r4, #16
 8025a6c:	1431      	asrs	r1, r6, #16
 8025a6e:	9d07      	ldr	r5, [sp, #28]
 8025a70:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8025a74:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 8025a78:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8025a7c:	fb03 2101 	mla	r1, r3, r1, r2
 8025a80:	9a07      	ldr	r2, [sp, #28]
 8025a82:	440a      	add	r2, r1
 8025a84:	5c69      	ldrb	r1, [r5, r1]
 8025a86:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 8025a8a:	f1be 0f00 	cmp.w	lr, #0
 8025a8e:	d05c      	beq.n	8025b4a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 8025a90:	f892 c001 	ldrb.w	ip, [r2, #1]
 8025a94:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 8025a98:	950d      	str	r5, [sp, #52]	; 0x34
 8025a9a:	b150      	cbz	r0, 8025ab2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8025a9c:	eb02 0c03 	add.w	ip, r2, r3
 8025aa0:	5cd3      	ldrb	r3, [r2, r3]
 8025aa2:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8025aa6:	930a      	str	r3, [sp, #40]	; 0x28
 8025aa8:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8025aac:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8025ab0:	930e      	str	r3, [sp, #56]	; 0x38
 8025ab2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025ab4:	fb1e f200 	smulbb	r2, lr, r0
 8025ab8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8025aba:	f108 38ff 	add.w	r8, r8, #4294967295
 8025abe:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8025ac2:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8025ac6:	10d2      	asrs	r2, r2, #3
 8025ac8:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 8025acc:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8025ad0:	ea4c 0c03 	orr.w	ip, ip, r3
 8025ad4:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 8025ad8:	9311      	str	r3, [sp, #68]	; 0x44
 8025ada:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025adc:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8025ade:	041b      	lsls	r3, r3, #16
 8025ae0:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8025ae4:	ea43 030b 	orr.w	r3, r3, fp
 8025ae8:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8025aec:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8025af0:	4353      	muls	r3, r2
 8025af2:	fb05 3c0c 	mla	ip, r5, ip, r3
 8025af6:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8025afa:	ea43 0b01 	orr.w	fp, r3, r1
 8025afe:	f1c0 0110 	rsb	r1, r0, #16
 8025b02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025b04:	eba1 0e0e 	sub.w	lr, r1, lr
 8025b08:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 8025b0c:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8025b10:	fb0e cc0b 	mla	ip, lr, fp, ip
 8025b14:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 8025b18:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 8025b1c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8025b20:	ea4b 0e0e 	orr.w	lr, fp, lr
 8025b24:	fb02 cc0e 	mla	ip, r2, lr, ip
 8025b28:	ea4f 535c 	mov.w	r3, ip, lsr #21
 8025b2c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8025b30:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025b34:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8025b38:	ea43 0c0c 	orr.w	ip, r3, ip
 8025b3c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8025b3e:	441c      	add	r4, r3
 8025b40:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025b42:	f82a cb02 	strh.w	ip, [sl], #2
 8025b46:	441e      	add	r6, r3
 8025b48:	e723      	b.n	8025992 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8025b4a:	2800      	cmp	r0, #0
 8025b4c:	d0b1      	beq.n	8025ab2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8025b4e:	5cd3      	ldrb	r3, [r2, r3]
 8025b50:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8025b54:	930a      	str	r3, [sp, #40]	; 0x28
 8025b56:	e7ac      	b.n	8025ab2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8025b58:	b013      	add	sp, #76	; 0x4c
 8025b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025b5e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 8025b5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025b62:	880d      	ldrh	r5, [r1, #0]
 8025b64:	b087      	sub	sp, #28
 8025b66:	10ef      	asrs	r7, r5, #3
 8025b68:	9103      	str	r1, [sp, #12]
 8025b6a:	ea4f 2a25 	mov.w	sl, r5, asr #8
 8025b6e:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
 8025b72:	00ed      	lsls	r5, r5, #3
 8025b74:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8025b78:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
 8025b7c:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8025b80:	b2ed      	uxtb	r5, r5
 8025b82:	9701      	str	r7, [sp, #4]
 8025b84:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 8025b88:	9502      	str	r5, [sp, #8]
 8025b8a:	9d01      	ldr	r5, [sp, #4]
 8025b8c:	9902      	ldr	r1, [sp, #8]
 8025b8e:	022d      	lsls	r5, r5, #8
 8025b90:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 8025b94:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
 8025b98:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8025b9c:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 8025ba0:	430d      	orrs	r5, r1
 8025ba2:	fb06 0709 	mla	r7, r6, r9, r0
 8025ba6:	2e00      	cmp	r6, #0
 8025ba8:	9505      	str	r5, [sp, #20]
 8025baa:	eb02 0c07 	add.w	ip, r2, r7
 8025bae:	f2c0 80b6 	blt.w	8025d1e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 8025bb2:	45b3      	cmp	fp, r6
 8025bb4:	f340 80b3 	ble.w	8025d1e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 8025bb8:	2800      	cmp	r0, #0
 8025bba:	f2c0 80ae 	blt.w	8025d1a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 8025bbe:	4581      	cmp	r9, r0
 8025bc0:	f340 80ab 	ble.w	8025d1a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 8025bc4:	5dd7      	ldrb	r7, [r2, r7]
 8025bc6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8025bca:	441f      	add	r7, r3
 8025bcc:	1c42      	adds	r2, r0, #1
 8025bce:	f100 80a9 	bmi.w	8025d24 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 8025bd2:	4591      	cmp	r9, r2
 8025bd4:	f340 80a6 	ble.w	8025d24 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 8025bd8:	2c00      	cmp	r4, #0
 8025bda:	f000 80a3 	beq.w	8025d24 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 8025bde:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8025be2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8025be6:	441d      	add	r5, r3
 8025be8:	3601      	adds	r6, #1
 8025bea:	f100 809f 	bmi.w	8025d2c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 8025bee:	45b3      	cmp	fp, r6
 8025bf0:	f340 809c 	ble.w	8025d2c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 8025bf4:	f1be 0f00 	cmp.w	lr, #0
 8025bf8:	f000 8098 	beq.w	8025d2c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 8025bfc:	2800      	cmp	r0, #0
 8025bfe:	f2c0 8093 	blt.w	8025d28 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 8025c02:	4581      	cmp	r9, r0
 8025c04:	f340 8090 	ble.w	8025d28 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 8025c08:	f81c 6009 	ldrb.w	r6, [ip, r9]
 8025c0c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8025c10:	441e      	add	r6, r3
 8025c12:	3001      	adds	r0, #1
 8025c14:	f100 808d 	bmi.w	8025d32 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8025c18:	4581      	cmp	r9, r0
 8025c1a:	f340 808a 	ble.w	8025d32 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8025c1e:	2c00      	cmp	r4, #0
 8025c20:	f000 8087 	beq.w	8025d32 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8025c24:	44e1      	add	r9, ip
 8025c26:	f899 2001 	ldrb.w	r2, [r9, #1]
 8025c2a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025c2e:	4413      	add	r3, r2
 8025c30:	b2a4      	uxth	r4, r4
 8025c32:	f897 c002 	ldrb.w	ip, [r7, #2]
 8025c36:	fa1f fe8e 	uxth.w	lr, lr
 8025c3a:	9901      	ldr	r1, [sp, #4]
 8025c3c:	fb04 fb0e 	mul.w	fp, r4, lr
 8025c40:	0124      	lsls	r4, r4, #4
 8025c42:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 8025c46:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 8025c4a:	eba4 040b 	sub.w	r4, r4, fp
 8025c4e:	fa1f f08e 	uxth.w	r0, lr
 8025c52:	b2a2      	uxth	r2, r4
 8025c54:	78ac      	ldrb	r4, [r5, #2]
 8025c56:	eba9 0900 	sub.w	r9, r9, r0
 8025c5a:	fa1f fe88 	uxth.w	lr, r8
 8025c5e:	4354      	muls	r4, r2
 8025c60:	ea6f 0808 	mvn.w	r8, r8
 8025c64:	fa1f f989 	uxth.w	r9, r9
 8025c68:	fa5f f888 	uxtb.w	r8, r8
 8025c6c:	fb09 440c 	mla	r4, r9, ip, r4
 8025c70:	f896 c002 	ldrb.w	ip, [r6, #2]
 8025c74:	fb1a fa08 	smulbb	sl, sl, r8
 8025c78:	fb00 440c 	mla	r4, r0, ip, r4
 8025c7c:	f893 c002 	ldrb.w	ip, [r3, #2]
 8025c80:	fb0b 4c0c 	mla	ip, fp, ip, r4
 8025c84:	787c      	ldrb	r4, [r7, #1]
 8025c86:	783f      	ldrb	r7, [r7, #0]
 8025c88:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8025c8c:	fb0c ac0e 	mla	ip, ip, lr, sl
 8025c90:	f895 a001 	ldrb.w	sl, [r5, #1]
 8025c94:	782d      	ldrb	r5, [r5, #0]
 8025c96:	fb02 fa0a 	mul.w	sl, r2, sl
 8025c9a:	fa1f fc8c 	uxth.w	ip, ip
 8025c9e:	436a      	muls	r2, r5
 8025ca0:	7835      	ldrb	r5, [r6, #0]
 8025ca2:	fb09 aa04 	mla	sl, r9, r4, sl
 8025ca6:	7874      	ldrb	r4, [r6, #1]
 8025ca8:	fb09 2207 	mla	r2, r9, r7, r2
 8025cac:	fb00 aa04 	mla	sl, r0, r4, sl
 8025cb0:	785c      	ldrb	r4, [r3, #1]
 8025cb2:	fb00 2005 	mla	r0, r0, r5, r2
 8025cb6:	781b      	ldrb	r3, [r3, #0]
 8025cb8:	fb0b a404 	mla	r4, fp, r4, sl
 8025cbc:	fb11 fa08 	smulbb	sl, r1, r8
 8025cc0:	fb0b 0b03 	mla	fp, fp, r3, r0
 8025cc4:	9b02      	ldr	r3, [sp, #8]
 8025cc6:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8025cca:	fb13 f808 	smulbb	r8, r3, r8
 8025cce:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8025cd2:	fb04 a40e 	mla	r4, r4, lr, sl
 8025cd6:	f10c 0301 	add.w	r3, ip, #1
 8025cda:	fb0b 8e0e 	mla	lr, fp, lr, r8
 8025cde:	b2a4      	uxth	r4, r4
 8025ce0:	fa1f fe8e 	uxth.w	lr, lr
 8025ce4:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8025ce8:	f104 0a01 	add.w	sl, r4, #1
 8025cec:	f40c 4378 	and.w	r3, ip, #63488	; 0xf800
 8025cf0:	f10e 0c01 	add.w	ip, lr, #1
 8025cf4:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8025cf8:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8025cfc:	0964      	lsrs	r4, r4, #5
 8025cfe:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8025d02:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8025d06:	ea4c 0c03 	orr.w	ip, ip, r3
 8025d0a:	9b03      	ldr	r3, [sp, #12]
 8025d0c:	ea4c 0c04 	orr.w	ip, ip, r4
 8025d10:	f8a3 c000 	strh.w	ip, [r3]
 8025d14:	b007      	add	sp, #28
 8025d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025d1a:	af05      	add	r7, sp, #20
 8025d1c:	e756      	b.n	8025bcc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 8025d1e:	ad05      	add	r5, sp, #20
 8025d20:	462f      	mov	r7, r5
 8025d22:	e761      	b.n	8025be8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 8025d24:	ad05      	add	r5, sp, #20
 8025d26:	e75f      	b.n	8025be8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 8025d28:	ae05      	add	r6, sp, #20
 8025d2a:	e772      	b.n	8025c12 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 8025d2c:	ab05      	add	r3, sp, #20
 8025d2e:	461e      	mov	r6, r3
 8025d30:	e77e      	b.n	8025c30 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 8025d32:	ab05      	add	r3, sp, #20
 8025d34:	e77c      	b.n	8025c30 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

08025d36 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025d36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025d3a:	b095      	sub	sp, #84	; 0x54
 8025d3c:	9212      	str	r2, [sp, #72]	; 0x48
 8025d3e:	9309      	str	r3, [sp, #36]	; 0x24
 8025d40:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8025d42:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 8025d46:	9013      	str	r0, [sp, #76]	; 0x4c
 8025d48:	930f      	str	r3, [sp, #60]	; 0x3c
 8025d4a:	6850      	ldr	r0, [r2, #4]
 8025d4c:	910e      	str	r1, [sp, #56]	; 0x38
 8025d4e:	6812      	ldr	r2, [r2, #0]
 8025d50:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
 8025d54:	fb00 1303 	mla	r3, r0, r3, r1
 8025d58:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025d5c:	930a      	str	r3, [sp, #40]	; 0x28
 8025d5e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025d60:	681b      	ldr	r3, [r3, #0]
 8025d62:	930d      	str	r3, [sp, #52]	; 0x34
 8025d64:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025d66:	685c      	ldr	r4, [r3, #4]
 8025d68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8025d6a:	3404      	adds	r4, #4
 8025d6c:	43db      	mvns	r3, r3
 8025d6e:	b2db      	uxtb	r3, r3
 8025d70:	930b      	str	r3, [sp, #44]	; 0x2c
 8025d72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025d74:	2b00      	cmp	r3, #0
 8025d76:	dc03      	bgt.n	8025d80 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8025d78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8025d7a:	2b00      	cmp	r3, #0
 8025d7c:	f340 8255 	ble.w	802622a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 8025d80:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8025d82:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025d86:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025d8a:	1e48      	subs	r0, r1, #1
 8025d8c:	1e55      	subs	r5, r2, #1
 8025d8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025d90:	2b00      	cmp	r3, #0
 8025d92:	f340 80f9 	ble.w	8025f88 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8025d96:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8025d98:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025d9a:	1436      	asrs	r6, r6, #16
 8025d9c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8025da0:	d406      	bmi.n	8025db0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8025da2:	4286      	cmp	r6, r0
 8025da4:	da04      	bge.n	8025db0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8025da6:	2b00      	cmp	r3, #0
 8025da8:	db02      	blt.n	8025db0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8025daa:	42ab      	cmp	r3, r5
 8025dac:	f2c0 80ed 	blt.w	8025f8a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8025db0:	3601      	adds	r6, #1
 8025db2:	f100 80da 	bmi.w	8025f6a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8025db6:	42b1      	cmp	r1, r6
 8025db8:	f2c0 80d7 	blt.w	8025f6a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8025dbc:	3301      	adds	r3, #1
 8025dbe:	f100 80d4 	bmi.w	8025f6a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8025dc2:	429a      	cmp	r2, r3
 8025dc4:	f2c0 80d1 	blt.w	8025f6a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8025dc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025dca:	9311      	str	r3, [sp, #68]	; 0x44
 8025dcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025dce:	930c      	str	r3, [sp, #48]	; 0x30
 8025dd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025dd2:	2b00      	cmp	r3, #0
 8025dd4:	f340 80fa 	ble.w	8025fcc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8025dd8:	9826      	ldr	r0, [sp, #152]	; 0x98
 8025dda:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025ddc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8025dde:	68c6      	ldr	r6, [r0, #12]
 8025de0:	141d      	asrs	r5, r3, #16
 8025de2:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8025de4:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8025de8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8025dea:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8025dec:	1400      	asrs	r0, r0, #16
 8025dee:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8025df2:	6892      	ldr	r2, [r2, #8]
 8025df4:	f100 813e 	bmi.w	8026074 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8025df8:	1e57      	subs	r7, r2, #1
 8025dfa:	42b8      	cmp	r0, r7
 8025dfc:	f280 813a 	bge.w	8026074 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8025e00:	2d00      	cmp	r5, #0
 8025e02:	f2c0 8137 	blt.w	8026074 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8025e06:	1e77      	subs	r7, r6, #1
 8025e08:	42bd      	cmp	r5, r7
 8025e0a:	f280 8133 	bge.w	8026074 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8025e0e:	b212      	sxth	r2, r2
 8025e10:	fb05 0002 	mla	r0, r5, r2, r0
 8025e14:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8025e16:	f815 a000 	ldrb.w	sl, [r5, r0]
 8025e1a:	182e      	adds	r6, r5, r0
 8025e1c:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8025e20:	eb04 050a 	add.w	r5, r4, sl
 8025e24:	2b00      	cmp	r3, #0
 8025e26:	f000 8117 	beq.w	8026058 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8025e2a:	f896 c001 	ldrb.w	ip, [r6, #1]
 8025e2e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8025e32:	44a4      	add	ip, r4
 8025e34:	2900      	cmp	r1, #0
 8025e36:	f000 8117 	beq.w	8026068 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8025e3a:	18b0      	adds	r0, r6, r2
 8025e3c:	5cb2      	ldrb	r2, [r6, r2]
 8025e3e:	7840      	ldrb	r0, [r0, #1]
 8025e40:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025e44:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8025e48:	4422      	add	r2, r4
 8025e4a:	4420      	add	r0, r4
 8025e4c:	b29b      	uxth	r3, r3
 8025e4e:	f89c 7002 	ldrb.w	r7, [ip, #2]
 8025e52:	b289      	uxth	r1, r1
 8025e54:	f895 b002 	ldrb.w	fp, [r5, #2]
 8025e58:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8025e5a:	fb03 f901 	mul.w	r9, r3, r1
 8025e5e:	011b      	lsls	r3, r3, #4
 8025e60:	f8b6 e000 	ldrh.w	lr, [r6]
 8025e64:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8025e68:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 8025e6c:	eba3 0309 	sub.w	r3, r3, r9
 8025e70:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 8025e74:	b289      	uxth	r1, r1
 8025e76:	f814 a00a 	ldrb.w	sl, [r4, sl]
 8025e7a:	b29b      	uxth	r3, r3
 8025e7c:	eba8 0801 	sub.w	r8, r8, r1
 8025e80:	435f      	muls	r7, r3
 8025e82:	fa1f f888 	uxth.w	r8, r8
 8025e86:	9310      	str	r3, [sp, #64]	; 0x40
 8025e88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025e8a:	fb08 770b 	mla	r7, r8, fp, r7
 8025e8e:	f892 b002 	ldrb.w	fp, [r2, #2]
 8025e92:	fb01 770b 	mla	r7, r1, fp, r7
 8025e96:	f890 b002 	ldrb.w	fp, [r0, #2]
 8025e9a:	fb09 770b 	mla	r7, r9, fp, r7
 8025e9e:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 8025ea2:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8025ea6:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8025eaa:	fb1b fb03 	smulbb	fp, fp, r3
 8025eae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8025eb0:	fb07 b706 	mla	r7, r7, r6, fp
 8025eb4:	f895 b001 	ldrb.w	fp, [r5, #1]
 8025eb8:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8025ebc:	f89c c000 	ldrb.w	ip, [ip]
 8025ec0:	b2bf      	uxth	r7, r7
 8025ec2:	435d      	muls	r5, r3
 8025ec4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025ec6:	fb08 550b 	mla	r5, r8, fp, r5
 8025eca:	f892 b001 	ldrb.w	fp, [r2, #1]
 8025ece:	fb01 550b 	mla	r5, r1, fp, r5
 8025ed2:	f890 b001 	ldrb.w	fp, [r0, #1]
 8025ed6:	fb09 550b 	mla	r5, r9, fp, r5
 8025eda:	ea4f 0bee 	mov.w	fp, lr, asr #3
 8025ede:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8025ee2:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8025ee6:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8025eea:	fa5f fe8e 	uxtb.w	lr, lr
 8025eee:	fb1b fb03 	smulbb	fp, fp, r3
 8025ef2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8025ef4:	fb03 f30c 	mul.w	r3, r3, ip
 8025ef8:	f892 c000 	ldrb.w	ip, [r2]
 8025efc:	fb05 b506 	mla	r5, r5, r6, fp
 8025f00:	fb08 330a 	mla	r3, r8, sl, r3
 8025f04:	b2ad      	uxth	r5, r5
 8025f06:	fb01 330c 	mla	r3, r1, ip, r3
 8025f0a:	f890 c000 	ldrb.w	ip, [r0]
 8025f0e:	f105 0b01 	add.w	fp, r5, #1
 8025f12:	fb09 3c0c 	mla	ip, r9, ip, r3
 8025f16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025f18:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8025f1c:	fb1e fe03 	smulbb	lr, lr, r3
 8025f20:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8025f24:	1c7b      	adds	r3, r7, #1
 8025f26:	096d      	lsrs	r5, r5, #5
 8025f28:	fb0c e606 	mla	r6, ip, r6, lr
 8025f2c:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8025f30:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8025f34:	b2b6      	uxth	r6, r6
 8025f36:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 8025f3a:	1c77      	adds	r7, r6, #1
 8025f3c:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8025f40:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8025f44:	431f      	orrs	r7, r3
 8025f46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025f48:	433d      	orrs	r5, r7
 8025f4a:	801d      	strh	r5, [r3, #0]
 8025f4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025f4e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8025f50:	3302      	adds	r3, #2
 8025f52:	930c      	str	r3, [sp, #48]	; 0x30
 8025f54:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8025f56:	4413      	add	r3, r2
 8025f58:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8025f5a:	931f      	str	r3, [sp, #124]	; 0x7c
 8025f5c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025f5e:	4413      	add	r3, r2
 8025f60:	9320      	str	r3, [sp, #128]	; 0x80
 8025f62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025f64:	3b01      	subs	r3, #1
 8025f66:	9311      	str	r3, [sp, #68]	; 0x44
 8025f68:	e732      	b.n	8025dd0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8025f6a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8025f6c:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8025f6e:	4433      	add	r3, r6
 8025f70:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8025f72:	931f      	str	r3, [sp, #124]	; 0x7c
 8025f74:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025f76:	4433      	add	r3, r6
 8025f78:	9320      	str	r3, [sp, #128]	; 0x80
 8025f7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025f7c:	3b01      	subs	r3, #1
 8025f7e:	9309      	str	r3, [sp, #36]	; 0x24
 8025f80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025f82:	3302      	adds	r3, #2
 8025f84:	930a      	str	r3, [sp, #40]	; 0x28
 8025f86:	e702      	b.n	8025d8e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8025f88:	d027      	beq.n	8025fda <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8025f8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025f8c:	9821      	ldr	r0, [sp, #132]	; 0x84
 8025f8e:	3b01      	subs	r3, #1
 8025f90:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8025f92:	fb00 5003 	mla	r0, r0, r3, r5
 8025f96:	1400      	asrs	r0, r0, #16
 8025f98:	f53f af16 	bmi.w	8025dc8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025f9c:	3901      	subs	r1, #1
 8025f9e:	4288      	cmp	r0, r1
 8025fa0:	f6bf af12 	bge.w	8025dc8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025fa4:	9922      	ldr	r1, [sp, #136]	; 0x88
 8025fa6:	9820      	ldr	r0, [sp, #128]	; 0x80
 8025fa8:	fb01 0303 	mla	r3, r1, r3, r0
 8025fac:	141b      	asrs	r3, r3, #16
 8025fae:	f53f af0b 	bmi.w	8025dc8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025fb2:	3a01      	subs	r2, #1
 8025fb4:	4293      	cmp	r3, r2
 8025fb6:	f6bf af07 	bge.w	8025dc8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025fba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025fbc:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8025fc0:	9311      	str	r3, [sp, #68]	; 0x44
 8025fc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025fc4:	930c      	str	r3, [sp, #48]	; 0x30
 8025fc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025fc8:	2b00      	cmp	r3, #0
 8025fca:	dc70      	bgt.n	80260ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 8025fcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025fce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025fd0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8025fd4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025fd8:	930a      	str	r3, [sp, #40]	; 0x28
 8025fda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025fdc:	2b00      	cmp	r3, #0
 8025fde:	f340 8124 	ble.w	802622a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 8025fe2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025fe6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8025fe8:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025fec:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025ff0:	eef0 6a62 	vmov.f32	s13, s5
 8025ff4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025ff8:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025ffc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026000:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 8026004:	eef0 6a43 	vmov.f32	s13, s6
 8026008:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802600c:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 8026010:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026014:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026018:	ee77 2a62 	vsub.f32	s5, s14, s5
 802601c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026020:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026024:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026028:	ee12 2a90 	vmov	r2, s5
 802602c:	eef0 2a47 	vmov.f32	s5, s14
 8026030:	fb92 f3f3 	sdiv	r3, r2, r3
 8026034:	ee13 2a10 	vmov	r2, s6
 8026038:	9321      	str	r3, [sp, #132]	; 0x84
 802603a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802603c:	eeb0 3a67 	vmov.f32	s6, s15
 8026040:	fb92 f3f3 	sdiv	r3, r2, r3
 8026044:	9322      	str	r3, [sp, #136]	; 0x88
 8026046:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8026048:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802604a:	3b01      	subs	r3, #1
 802604c:	930e      	str	r3, [sp, #56]	; 0x38
 802604e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8026050:	bf08      	it	eq
 8026052:	4613      	moveq	r3, r2
 8026054:	9309      	str	r3, [sp, #36]	; 0x24
 8026056:	e68c      	b.n	8025d72 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8026058:	b149      	cbz	r1, 802606e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 802605a:	5cb2      	ldrb	r2, [r6, r2]
 802605c:	4628      	mov	r0, r5
 802605e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8026062:	4422      	add	r2, r4
 8026064:	46ac      	mov	ip, r5
 8026066:	e6f1      	b.n	8025e4c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8026068:	4628      	mov	r0, r5
 802606a:	462a      	mov	r2, r5
 802606c:	e6ee      	b.n	8025e4c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 802606e:	4628      	mov	r0, r5
 8026070:	462a      	mov	r2, r5
 8026072:	e7f7      	b.n	8026064 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8026074:	1c47      	adds	r7, r0, #1
 8026076:	f53f af69 	bmi.w	8025f4c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 802607a:	42ba      	cmp	r2, r7
 802607c:	f6ff af66 	blt.w	8025f4c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8026080:	1c6f      	adds	r7, r5, #1
 8026082:	f53f af63 	bmi.w	8025f4c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8026086:	42be      	cmp	r6, r7
 8026088:	f6ff af60 	blt.w	8025f4c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 802608c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 802608e:	b236      	sxth	r6, r6
 8026090:	b212      	sxth	r2, r2
 8026092:	9002      	str	r0, [sp, #8]
 8026094:	9601      	str	r6, [sp, #4]
 8026096:	9200      	str	r2, [sp, #0]
 8026098:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802609a:	e9cd 1705 	strd	r1, r7, [sp, #20]
 802609e:	e9cd 5303 	strd	r5, r3, [sp, #12]
 80260a2:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 80260a6:	4623      	mov	r3, r4
 80260a8:	f7ff fd59 	bl	8025b5e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 80260ac:	e74e      	b.n	8025f4c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 80260ae:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80260b0:	9820      	ldr	r0, [sp, #128]	; 0x80
 80260b2:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80260b6:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 80260b8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80260ba:	1400      	asrs	r0, r0, #16
 80260bc:	142d      	asrs	r5, r5, #16
 80260be:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80260c0:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80260c4:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80260c8:	fb02 5000 	mla	r0, r2, r0, r5
 80260cc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80260ce:	f815 9000 	ldrb.w	r9, [r5, r0]
 80260d2:	182e      	adds	r6, r5, r0
 80260d4:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80260d8:	eb04 0509 	add.w	r5, r4, r9
 80260dc:	2b00      	cmp	r3, #0
 80260de:	f000 8096 	beq.w	802620e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 80260e2:	7877      	ldrb	r7, [r6, #1]
 80260e4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80260e8:	4427      	add	r7, r4
 80260ea:	2900      	cmp	r1, #0
 80260ec:	f000 8097 	beq.w	802621e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 80260f0:	18b0      	adds	r0, r6, r2
 80260f2:	5cb2      	ldrb	r2, [r6, r2]
 80260f4:	7840      	ldrb	r0, [r0, #1]
 80260f6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80260fa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80260fe:	4422      	add	r2, r4
 8026100:	4420      	add	r0, r4
 8026102:	b29b      	uxth	r3, r3
 8026104:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8026106:	b289      	uxth	r1, r1
 8026108:	f895 b002 	ldrb.w	fp, [r5, #2]
 802610c:	f8b6 c000 	ldrh.w	ip, [r6]
 8026110:	fb03 f801 	mul.w	r8, r3, r1
 8026114:	011b      	lsls	r3, r3, #4
 8026116:	78be      	ldrb	r6, [r7, #2]
 8026118:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 802611c:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8026120:	eba3 0308 	sub.w	r3, r3, r8
 8026124:	f814 9009 	ldrb.w	r9, [r4, r9]
 8026128:	b289      	uxth	r1, r1
 802612a:	b29b      	uxth	r3, r3
 802612c:	ebae 0e01 	sub.w	lr, lr, r1
 8026130:	435e      	muls	r6, r3
 8026132:	fa1f fe8e 	uxth.w	lr, lr
 8026136:	9310      	str	r3, [sp, #64]	; 0x40
 8026138:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802613a:	fb0e 660b 	mla	r6, lr, fp, r6
 802613e:	f892 b002 	ldrb.w	fp, [r2, #2]
 8026142:	fb01 660b 	mla	r6, r1, fp, r6
 8026146:	f890 b002 	ldrb.w	fp, [r0, #2]
 802614a:	fb08 660b 	mla	r6, r8, fp, r6
 802614e:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 8026152:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8026156:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802615a:	fb1b fb03 	smulbb	fp, fp, r3
 802615e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8026160:	fb06 b60a 	mla	r6, r6, sl, fp
 8026164:	f895 b001 	ldrb.w	fp, [r5, #1]
 8026168:	787d      	ldrb	r5, [r7, #1]
 802616a:	783f      	ldrb	r7, [r7, #0]
 802616c:	b2b6      	uxth	r6, r6
 802616e:	435d      	muls	r5, r3
 8026170:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026172:	fb0e 550b 	mla	r5, lr, fp, r5
 8026176:	f892 b001 	ldrb.w	fp, [r2, #1]
 802617a:	fb01 550b 	mla	r5, r1, fp, r5
 802617e:	f890 b001 	ldrb.w	fp, [r0, #1]
 8026182:	fb08 550b 	mla	r5, r8, fp, r5
 8026186:	ea4f 0bec 	mov.w	fp, ip, asr #3
 802618a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802618e:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8026192:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8026196:	fa5f fc8c 	uxtb.w	ip, ip
 802619a:	fb1b fb03 	smulbb	fp, fp, r3
 802619e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80261a0:	437b      	muls	r3, r7
 80261a2:	7817      	ldrb	r7, [r2, #0]
 80261a4:	fb05 b50a 	mla	r5, r5, sl, fp
 80261a8:	fb0e 3309 	mla	r3, lr, r9, r3
 80261ac:	b2ad      	uxth	r5, r5
 80261ae:	fb01 3307 	mla	r3, r1, r7, r3
 80261b2:	7807      	ldrb	r7, [r0, #0]
 80261b4:	f105 0b01 	add.w	fp, r5, #1
 80261b8:	fb08 3707 	mla	r7, r8, r7, r3
 80261bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80261be:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 80261c2:	fb1c fc03 	smulbb	ip, ip, r3
 80261c6:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80261ca:	1c73      	adds	r3, r6, #1
 80261cc:	096d      	lsrs	r5, r5, #5
 80261ce:	fb07 c70a 	mla	r7, r7, sl, ip
 80261d2:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 80261d6:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80261da:	b2bf      	uxth	r7, r7
 80261dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80261de:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 80261e2:	1c7a      	adds	r2, r7, #1
 80261e4:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 80261e8:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80261ec:	4316      	orrs	r6, r2
 80261ee:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80261f0:	432e      	orrs	r6, r5
 80261f2:	f823 6b02 	strh.w	r6, [r3], #2
 80261f6:	930c      	str	r3, [sp, #48]	; 0x30
 80261f8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80261fa:	4413      	add	r3, r2
 80261fc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80261fe:	931f      	str	r3, [sp, #124]	; 0x7c
 8026200:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026202:	4413      	add	r3, r2
 8026204:	9320      	str	r3, [sp, #128]	; 0x80
 8026206:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8026208:	3b01      	subs	r3, #1
 802620a:	9311      	str	r3, [sp, #68]	; 0x44
 802620c:	e6db      	b.n	8025fc6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 802620e:	b149      	cbz	r1, 8026224 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 8026210:	5cb2      	ldrb	r2, [r6, r2]
 8026212:	4628      	mov	r0, r5
 8026214:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8026218:	4422      	add	r2, r4
 802621a:	462f      	mov	r7, r5
 802621c:	e771      	b.n	8026102 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 802621e:	4628      	mov	r0, r5
 8026220:	462a      	mov	r2, r5
 8026222:	e76e      	b.n	8026102 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8026224:	4628      	mov	r0, r5
 8026226:	462a      	mov	r2, r5
 8026228:	e7f7      	b.n	802621a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802622a:	b015      	add	sp, #84	; 0x54
 802622c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026230 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 8026230:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026234:	880f      	ldrh	r7, [r1, #0]
 8026236:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 802623a:	023c      	lsls	r4, r7, #8
 802623c:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8026240:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8026244:	f404 0b78 	and.w	fp, r4, #16252928	; 0xf80000
 8026248:	017c      	lsls	r4, r7, #5
 802624a:	00ff      	lsls	r7, r7, #3
 802624c:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8026250:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
 8026254:	b2ff      	uxtb	r7, r7
 8026256:	ea4b 0404 	orr.w	r4, fp, r4
 802625a:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	; 0x38
 802625e:	4327      	orrs	r7, r4
 8026260:	fb05 ca0e 	mla	sl, r5, lr, ip
 8026264:	2d00      	cmp	r5, #0
 8026266:	9701      	str	r7, [sp, #4]
 8026268:	eb02 080a 	add.w	r8, r2, sl
 802626c:	db7e      	blt.n	802636c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 802626e:	45a9      	cmp	r9, r5
 8026270:	dd7c      	ble.n	802636c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 8026272:	f1bc 0f00 	cmp.w	ip, #0
 8026276:	db77      	blt.n	8026368 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8026278:	45e6      	cmp	lr, ip
 802627a:	dd75      	ble.n	8026368 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 802627c:	f812 700a 	ldrb.w	r7, [r2, sl]
 8026280:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8026284:	441f      	add	r7, r3
 8026286:	f11c 0201 	adds.w	r2, ip, #1
 802628a:	d472      	bmi.n	8026372 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 802628c:	4596      	cmp	lr, r2
 802628e:	dd70      	ble.n	8026372 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8026290:	2800      	cmp	r0, #0
 8026292:	d06e      	beq.n	8026372 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8026294:	f898 4001 	ldrb.w	r4, [r8, #1]
 8026298:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802629c:	441c      	add	r4, r3
 802629e:	3501      	adds	r5, #1
 80262a0:	d46b      	bmi.n	802637a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 80262a2:	45a9      	cmp	r9, r5
 80262a4:	dd69      	ble.n	802637a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 80262a6:	2e00      	cmp	r6, #0
 80262a8:	d067      	beq.n	802637a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 80262aa:	f1bc 0f00 	cmp.w	ip, #0
 80262ae:	db62      	blt.n	8026376 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 80262b0:	45e6      	cmp	lr, ip
 80262b2:	dd60      	ble.n	8026376 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 80262b4:	f818 500e 	ldrb.w	r5, [r8, lr]
 80262b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80262bc:	441d      	add	r5, r3
 80262be:	f11c 0201 	adds.w	r2, ip, #1
 80262c2:	d45d      	bmi.n	8026380 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 80262c4:	4596      	cmp	lr, r2
 80262c6:	dd5b      	ble.n	8026380 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 80262c8:	2800      	cmp	r0, #0
 80262ca:	d059      	beq.n	8026380 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 80262cc:	44c6      	add	lr, r8
 80262ce:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80262d2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80262d6:	4413      	add	r3, r2
 80262d8:	b280      	uxth	r0, r0
 80262da:	f897 e002 	ldrb.w	lr, [r7, #2]
 80262de:	b2b2      	uxth	r2, r6
 80262e0:	f897 9000 	ldrb.w	r9, [r7]
 80262e4:	787f      	ldrb	r7, [r7, #1]
 80262e6:	fb00 f602 	mul.w	r6, r0, r2
 80262ea:	0100      	lsls	r0, r0, #4
 80262ec:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 80262f0:	f5c0 7880 	rsb	r8, r0, #256	; 0x100
 80262f4:	1b80      	subs	r0, r0, r6
 80262f6:	fa1f fc82 	uxth.w	ip, r2
 80262fa:	b282      	uxth	r2, r0
 80262fc:	78a0      	ldrb	r0, [r4, #2]
 80262fe:	eba8 080c 	sub.w	r8, r8, ip
 8026302:	4350      	muls	r0, r2
 8026304:	fa1f f888 	uxth.w	r8, r8
 8026308:	fb08 0e0e 	mla	lr, r8, lr, r0
 802630c:	78a8      	ldrb	r0, [r5, #2]
 802630e:	fb0c e000 	mla	r0, ip, r0, lr
 8026312:	f893 e002 	ldrb.w	lr, [r3, #2]
 8026316:	fb06 0e0e 	mla	lr, r6, lr, r0
 802631a:	f40e 4078 	and.w	r0, lr, #63488	; 0xf800
 802631e:	f894 e000 	ldrb.w	lr, [r4]
 8026322:	fb02 fe0e 	mul.w	lr, r2, lr
 8026326:	fb08 e909 	mla	r9, r8, r9, lr
 802632a:	f895 e000 	ldrb.w	lr, [r5]
 802632e:	fb0c 990e 	mla	r9, ip, lr, r9
 8026332:	f893 e000 	ldrb.w	lr, [r3]
 8026336:	785b      	ldrb	r3, [r3, #1]
 8026338:	fb06 9e0e 	mla	lr, r6, lr, r9
 802633c:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8026340:	ea4e 0e00 	orr.w	lr, lr, r0
 8026344:	7860      	ldrb	r0, [r4, #1]
 8026346:	4350      	muls	r0, r2
 8026348:	786a      	ldrb	r2, [r5, #1]
 802634a:	fb08 0007 	mla	r0, r8, r7, r0
 802634e:	fb0c 0202 	mla	r2, ip, r2, r0
 8026352:	fb06 2303 	mla	r3, r6, r3, r2
 8026356:	095b      	lsrs	r3, r3, #5
 8026358:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802635c:	ea4e 0303 	orr.w	r3, lr, r3
 8026360:	800b      	strh	r3, [r1, #0]
 8026362:	b003      	add	sp, #12
 8026364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026368:	af01      	add	r7, sp, #4
 802636a:	e78c      	b.n	8026286 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 802636c:	ac01      	add	r4, sp, #4
 802636e:	4627      	mov	r7, r4
 8026370:	e795      	b.n	802629e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8026372:	ac01      	add	r4, sp, #4
 8026374:	e793      	b.n	802629e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8026376:	ad01      	add	r5, sp, #4
 8026378:	e7a1      	b.n	80262be <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 802637a:	ab01      	add	r3, sp, #4
 802637c:	461d      	mov	r5, r3
 802637e:	e7ab      	b.n	80262d8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 8026380:	ab01      	add	r3, sp, #4
 8026382:	e7a9      	b.n	80262d8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

08026384 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026388:	b08f      	sub	sp, #60	; 0x3c
 802638a:	920c      	str	r2, [sp, #48]	; 0x30
 802638c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 802638e:	900d      	str	r0, [sp, #52]	; 0x34
 8026390:	910a      	str	r1, [sp, #40]	; 0x28
 8026392:	6850      	ldr	r0, [r2, #4]
 8026394:	9306      	str	r3, [sp, #24]
 8026396:	6812      	ldr	r2, [r2, #0]
 8026398:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
 802639c:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
 80263a0:	fb00 1303 	mla	r3, r0, r3, r1
 80263a4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80263a8:	9307      	str	r3, [sp, #28]
 80263aa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80263ac:	681b      	ldr	r3, [r3, #0]
 80263ae:	9308      	str	r3, [sp, #32]
 80263b0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80263b2:	685c      	ldr	r4, [r3, #4]
 80263b4:	3404      	adds	r4, #4
 80263b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80263b8:	2b00      	cmp	r3, #0
 80263ba:	dc03      	bgt.n	80263c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 80263bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80263be:	2b00      	cmp	r3, #0
 80263c0:	f340 81d5 	ble.w	802676e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 80263c4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80263c6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80263ca:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80263ce:	1e48      	subs	r0, r1, #1
 80263d0:	1e56      	subs	r6, r2, #1
 80263d2:	9b06      	ldr	r3, [sp, #24]
 80263d4:	2b00      	cmp	r3, #0
 80263d6:	f340 80b6 	ble.w	8026546 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 80263da:	ea5f 472b 	movs.w	r7, fp, asr #16
 80263de:	ea4f 4325 	mov.w	r3, r5, asr #16
 80263e2:	d406      	bmi.n	80263f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80263e4:	4287      	cmp	r7, r0
 80263e6:	da04      	bge.n	80263f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80263e8:	2b00      	cmp	r3, #0
 80263ea:	db02      	blt.n	80263f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80263ec:	42b3      	cmp	r3, r6
 80263ee:	f2c0 80ab 	blt.w	8026548 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 80263f2:	3701      	adds	r7, #1
 80263f4:	f100 809c 	bmi.w	8026530 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80263f8:	42b9      	cmp	r1, r7
 80263fa:	f2c0 8099 	blt.w	8026530 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80263fe:	3301      	adds	r3, #1
 8026400:	f100 8096 	bmi.w	8026530 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8026404:	429a      	cmp	r2, r3
 8026406:	f2c0 8093 	blt.w	8026530 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 802640a:	9b06      	ldr	r3, [sp, #24]
 802640c:	930b      	str	r3, [sp, #44]	; 0x2c
 802640e:	9b07      	ldr	r3, [sp, #28]
 8026410:	9309      	str	r3, [sp, #36]	; 0x24
 8026412:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026414:	2b00      	cmp	r3, #0
 8026416:	f340 80b4 	ble.w	8026582 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 802641a:	9820      	ldr	r0, [sp, #128]	; 0x80
 802641c:	142e      	asrs	r6, r5, #16
 802641e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8026420:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8026424:	68c7      	ldr	r7, [r0, #12]
 8026426:	ea5f 402b 	movs.w	r0, fp, asr #16
 802642a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802642e:	6892      	ldr	r2, [r2, #8]
 8026430:	f100 80fb 	bmi.w	802662a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8026434:	f102 3cff 	add.w	ip, r2, #4294967295
 8026438:	4560      	cmp	r0, ip
 802643a:	f280 80f6 	bge.w	802662a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 802643e:	2e00      	cmp	r6, #0
 8026440:	f2c0 80f3 	blt.w	802662a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8026444:	f107 3cff 	add.w	ip, r7, #4294967295
 8026448:	4566      	cmp	r6, ip
 802644a:	f280 80ee 	bge.w	802662a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 802644e:	b212      	sxth	r2, r2
 8026450:	fb06 0002 	mla	r0, r6, r2, r0
 8026454:	9e08      	ldr	r6, [sp, #32]
 8026456:	1837      	adds	r7, r6, r0
 8026458:	5c30      	ldrb	r0, [r6, r0]
 802645a:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 802645e:	eb04 0c08 	add.w	ip, r4, r8
 8026462:	2b00      	cmp	r3, #0
 8026464:	f000 80d3 	beq.w	802660e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8026468:	787e      	ldrb	r6, [r7, #1]
 802646a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802646e:	4426      	add	r6, r4
 8026470:	2900      	cmp	r1, #0
 8026472:	f000 80d4 	beq.w	802661e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8026476:	18b8      	adds	r0, r7, r2
 8026478:	5cba      	ldrb	r2, [r7, r2]
 802647a:	7840      	ldrb	r0, [r0, #1]
 802647c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8026480:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8026484:	4422      	add	r2, r4
 8026486:	4420      	add	r0, r4
 8026488:	b29b      	uxth	r3, r3
 802648a:	78b7      	ldrb	r7, [r6, #2]
 802648c:	b289      	uxth	r1, r1
 802648e:	f89c a002 	ldrb.w	sl, [ip, #2]
 8026492:	f89c c001 	ldrb.w	ip, [ip, #1]
 8026496:	fb03 f901 	mul.w	r9, r3, r1
 802649a:	011b      	lsls	r3, r3, #4
 802649c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80264a0:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80264a4:	eba3 0309 	sub.w	r3, r3, r9
 80264a8:	b289      	uxth	r1, r1
 80264aa:	b29b      	uxth	r3, r3
 80264ac:	ebae 0e01 	sub.w	lr, lr, r1
 80264b0:	435f      	muls	r7, r3
 80264b2:	fa1f fe8e 	uxth.w	lr, lr
 80264b6:	fb0e 770a 	mla	r7, lr, sl, r7
 80264ba:	f892 a002 	ldrb.w	sl, [r2, #2]
 80264be:	fb01 770a 	mla	r7, r1, sl, r7
 80264c2:	f890 a002 	ldrb.w	sl, [r0, #2]
 80264c6:	fb09 7a0a 	mla	sl, r9, sl, r7
 80264ca:	f814 7008 	ldrb.w	r7, [r4, r8]
 80264ce:	f896 8000 	ldrb.w	r8, [r6]
 80264d2:	7876      	ldrb	r6, [r6, #1]
 80264d4:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 80264d8:	fb03 f808 	mul.w	r8, r3, r8
 80264dc:	4373      	muls	r3, r6
 80264de:	fb0e 8807 	mla	r8, lr, r7, r8
 80264e2:	7817      	ldrb	r7, [r2, #0]
 80264e4:	fb0e 330c 	mla	r3, lr, ip, r3
 80264e8:	fb01 8807 	mla	r8, r1, r7, r8
 80264ec:	7807      	ldrb	r7, [r0, #0]
 80264ee:	fb09 8707 	mla	r7, r9, r7, r8
 80264f2:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80264f6:	ea47 070a 	orr.w	r7, r7, sl
 80264fa:	f892 a001 	ldrb.w	sl, [r2, #1]
 80264fe:	fb01 310a 	mla	r1, r1, sl, r3
 8026502:	f890 a001 	ldrb.w	sl, [r0, #1]
 8026506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026508:	fb09 1a0a 	mla	sl, r9, sl, r1
 802650c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8026510:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8026514:	ea47 070a 	orr.w	r7, r7, sl
 8026518:	801f      	strh	r7, [r3, #0]
 802651a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802651c:	3302      	adds	r3, #2
 802651e:	9309      	str	r3, [sp, #36]	; 0x24
 8026520:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8026522:	449b      	add	fp, r3
 8026524:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8026526:	441d      	add	r5, r3
 8026528:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802652a:	3b01      	subs	r3, #1
 802652c:	930b      	str	r3, [sp, #44]	; 0x2c
 802652e:	e770      	b.n	8026412 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8026530:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8026532:	449b      	add	fp, r3
 8026534:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8026536:	441d      	add	r5, r3
 8026538:	9b06      	ldr	r3, [sp, #24]
 802653a:	3b01      	subs	r3, #1
 802653c:	9306      	str	r3, [sp, #24]
 802653e:	9b07      	ldr	r3, [sp, #28]
 8026540:	3302      	adds	r3, #2
 8026542:	9307      	str	r3, [sp, #28]
 8026544:	e745      	b.n	80263d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8026546:	d023      	beq.n	8026590 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8026548:	9b06      	ldr	r3, [sp, #24]
 802654a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 802654c:	3b01      	subs	r3, #1
 802654e:	fb00 b003 	mla	r0, r0, r3, fp
 8026552:	1400      	asrs	r0, r0, #16
 8026554:	f53f af59 	bmi.w	802640a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8026558:	3901      	subs	r1, #1
 802655a:	4288      	cmp	r0, r1
 802655c:	f6bf af55 	bge.w	802640a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8026560:	991c      	ldr	r1, [sp, #112]	; 0x70
 8026562:	fb01 5303 	mla	r3, r1, r3, r5
 8026566:	141b      	asrs	r3, r3, #16
 8026568:	f53f af4f 	bmi.w	802640a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802656c:	3a01      	subs	r2, #1
 802656e:	4293      	cmp	r3, r2
 8026570:	f6bf af4b 	bge.w	802640a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8026574:	9b06      	ldr	r3, [sp, #24]
 8026576:	9309      	str	r3, [sp, #36]	; 0x24
 8026578:	9b07      	ldr	r3, [sp, #28]
 802657a:	930b      	str	r3, [sp, #44]	; 0x2c
 802657c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802657e:	2b00      	cmp	r3, #0
 8026580:	dc70      	bgt.n	8026664 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8026582:	9b06      	ldr	r3, [sp, #24]
 8026584:	9a07      	ldr	r2, [sp, #28]
 8026586:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802658a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802658e:	9307      	str	r3, [sp, #28]
 8026590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026592:	2b00      	cmp	r3, #0
 8026594:	f340 80eb 	ble.w	802676e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8026598:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802659c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802659e:	ee30 0a04 	vadd.f32	s0, s0, s8
 80265a2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80265a6:	eef0 6a62 	vmov.f32	s13, s5
 80265aa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80265ae:	ee31 1a05 	vadd.f32	s2, s2, s10
 80265b2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80265b6:	ee16 ba90 	vmov	fp, s13
 80265ba:	eef0 6a43 	vmov.f32	s13, s6
 80265be:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80265c2:	ee16 5a90 	vmov	r5, s13
 80265c6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80265ca:	ee61 7a27 	vmul.f32	s15, s2, s15
 80265ce:	ee77 2a62 	vsub.f32	s5, s14, s5
 80265d2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80265d6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80265da:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80265de:	ee12 2a90 	vmov	r2, s5
 80265e2:	eef0 2a47 	vmov.f32	s5, s14
 80265e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80265ea:	ee13 2a10 	vmov	r2, s6
 80265ee:	931b      	str	r3, [sp, #108]	; 0x6c
 80265f0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80265f2:	eeb0 3a67 	vmov.f32	s6, s15
 80265f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80265fa:	931c      	str	r3, [sp, #112]	; 0x70
 80265fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80265fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026600:	3b01      	subs	r3, #1
 8026602:	930a      	str	r3, [sp, #40]	; 0x28
 8026604:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8026606:	bf08      	it	eq
 8026608:	4613      	moveq	r3, r2
 802660a:	9306      	str	r3, [sp, #24]
 802660c:	e6d3      	b.n	80263b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 802660e:	b149      	cbz	r1, 8026624 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8026610:	5cba      	ldrb	r2, [r7, r2]
 8026612:	4660      	mov	r0, ip
 8026614:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8026618:	4422      	add	r2, r4
 802661a:	4666      	mov	r6, ip
 802661c:	e734      	b.n	8026488 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 802661e:	4660      	mov	r0, ip
 8026620:	4662      	mov	r2, ip
 8026622:	e731      	b.n	8026488 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 8026624:	4660      	mov	r0, ip
 8026626:	4662      	mov	r2, ip
 8026628:	e7f7      	b.n	802661a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 802662a:	f110 0c01 	adds.w	ip, r0, #1
 802662e:	f53f af74 	bmi.w	802651a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8026632:	4562      	cmp	r2, ip
 8026634:	f6ff af71 	blt.w	802651a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8026638:	f116 0c01 	adds.w	ip, r6, #1
 802663c:	f53f af6d 	bmi.w	802651a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8026640:	4567      	cmp	r7, ip
 8026642:	f6ff af6a 	blt.w	802651a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8026646:	b23f      	sxth	r7, r7
 8026648:	b212      	sxth	r2, r2
 802664a:	9701      	str	r7, [sp, #4]
 802664c:	9200      	str	r2, [sp, #0]
 802664e:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8026652:	e9cd 0602 	strd	r0, r6, [sp, #8]
 8026656:	4623      	mov	r3, r4
 8026658:	980d      	ldr	r0, [sp, #52]	; 0x34
 802665a:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 802665e:	f7ff fde7 	bl	8026230 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 8026662:	e75a      	b.n	802651a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8026664:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8026666:	ea4f 462b 	mov.w	r6, fp, asr #16
 802666a:	1428      	asrs	r0, r5, #16
 802666c:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8026670:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8026674:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8026678:	fb02 6000 	mla	r0, r2, r0, r6
 802667c:	9e08      	ldr	r6, [sp, #32]
 802667e:	f816 8000 	ldrb.w	r8, [r6, r0]
 8026682:	1837      	adds	r7, r6, r0
 8026684:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8026688:	eb04 0c08 	add.w	ip, r4, r8
 802668c:	2b00      	cmp	r3, #0
 802668e:	d060      	beq.n	8026752 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 8026690:	787e      	ldrb	r6, [r7, #1]
 8026692:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8026696:	4426      	add	r6, r4
 8026698:	2900      	cmp	r1, #0
 802669a:	d062      	beq.n	8026762 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 802669c:	18b8      	adds	r0, r7, r2
 802669e:	5cba      	ldrb	r2, [r7, r2]
 80266a0:	7840      	ldrb	r0, [r0, #1]
 80266a2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80266a6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80266aa:	4422      	add	r2, r4
 80266ac:	4420      	add	r0, r4
 80266ae:	b29b      	uxth	r3, r3
 80266b0:	78b7      	ldrb	r7, [r6, #2]
 80266b2:	b289      	uxth	r1, r1
 80266b4:	f89c a002 	ldrb.w	sl, [ip, #2]
 80266b8:	f89c c001 	ldrb.w	ip, [ip, #1]
 80266bc:	fb03 f901 	mul.w	r9, r3, r1
 80266c0:	011b      	lsls	r3, r3, #4
 80266c2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80266c6:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80266ca:	eba3 0309 	sub.w	r3, r3, r9
 80266ce:	b289      	uxth	r1, r1
 80266d0:	b29b      	uxth	r3, r3
 80266d2:	ebae 0e01 	sub.w	lr, lr, r1
 80266d6:	435f      	muls	r7, r3
 80266d8:	fa1f fe8e 	uxth.w	lr, lr
 80266dc:	fb0e 770a 	mla	r7, lr, sl, r7
 80266e0:	f892 a002 	ldrb.w	sl, [r2, #2]
 80266e4:	fb01 770a 	mla	r7, r1, sl, r7
 80266e8:	f890 a002 	ldrb.w	sl, [r0, #2]
 80266ec:	fb09 7a0a 	mla	sl, r9, sl, r7
 80266f0:	f814 7008 	ldrb.w	r7, [r4, r8]
 80266f4:	f896 8000 	ldrb.w	r8, [r6]
 80266f8:	7876      	ldrb	r6, [r6, #1]
 80266fa:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 80266fe:	fb03 f808 	mul.w	r8, r3, r8
 8026702:	4373      	muls	r3, r6
 8026704:	7856      	ldrb	r6, [r2, #1]
 8026706:	fb0e 8807 	mla	r8, lr, r7, r8
 802670a:	7817      	ldrb	r7, [r2, #0]
 802670c:	fb0e 330c 	mla	r3, lr, ip, r3
 8026710:	fb01 8807 	mla	r8, r1, r7, r8
 8026714:	7807      	ldrb	r7, [r0, #0]
 8026716:	fb01 3306 	mla	r3, r1, r6, r3
 802671a:	fb09 8707 	mla	r7, r9, r7, r8
 802671e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8026722:	ea47 070a 	orr.w	r7, r7, sl
 8026726:	f890 a001 	ldrb.w	sl, [r0, #1]
 802672a:	fb09 3a0a 	mla	sl, r9, sl, r3
 802672e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026730:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8026734:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8026738:	ea47 070a 	orr.w	r7, r7, sl
 802673c:	f823 7b02 	strh.w	r7, [r3], #2
 8026740:	930b      	str	r3, [sp, #44]	; 0x2c
 8026742:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8026744:	449b      	add	fp, r3
 8026746:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8026748:	441d      	add	r5, r3
 802674a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802674c:	3b01      	subs	r3, #1
 802674e:	9309      	str	r3, [sp, #36]	; 0x24
 8026750:	e714      	b.n	802657c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 8026752:	b149      	cbz	r1, 8026768 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8026754:	5cba      	ldrb	r2, [r7, r2]
 8026756:	4660      	mov	r0, ip
 8026758:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802675c:	4422      	add	r2, r4
 802675e:	4666      	mov	r6, ip
 8026760:	e7a5      	b.n	80266ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8026762:	4660      	mov	r0, ip
 8026764:	4662      	mov	r2, ip
 8026766:	e7a2      	b.n	80266ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8026768:	4660      	mov	r0, ip
 802676a:	4662      	mov	r2, ip
 802676c:	e7f7      	b.n	802675e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3da>
 802676e:	b00f      	add	sp, #60	; 0x3c
 8026770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026774 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 8026774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026778:	b085      	sub	sp, #20
 802677a:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
 802677e:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8026782:	9102      	str	r1, [sp, #8]
 8026784:	2c00      	cmp	r4, #0
 8026786:	fb04 710c 	mla	r1, r4, ip, r7
 802678a:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 802678e:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 8026792:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8026796:	eb02 0e01 	add.w	lr, r2, r1
 802679a:	f2c0 8122 	blt.w	80269e2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 802679e:	45a0      	cmp	r8, r4
 80267a0:	f340 811f 	ble.w	80269e2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 80267a4:	2f00      	cmp	r7, #0
 80267a6:	f2c0 811a 	blt.w	80269de <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 80267aa:	45bc      	cmp	ip, r7
 80267ac:	f340 8117 	ble.w	80269de <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 80267b0:	5c52      	ldrb	r2, [r2, r1]
 80267b2:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80267b6:	1c7a      	adds	r2, r7, #1
 80267b8:	f100 8116 	bmi.w	80269e8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 80267bc:	4594      	cmp	ip, r2
 80267be:	f340 8113 	ble.w	80269e8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 80267c2:	2e00      	cmp	r6, #0
 80267c4:	f000 8112 	beq.w	80269ec <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 80267c8:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80267cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80267d0:	3401      	adds	r4, #1
 80267d2:	f100 810f 	bmi.w	80269f4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 80267d6:	45a0      	cmp	r8, r4
 80267d8:	f340 810c 	ble.w	80269f4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 80267dc:	2800      	cmp	r0, #0
 80267de:	f000 810c 	beq.w	80269fa <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 80267e2:	2f00      	cmp	r7, #0
 80267e4:	f2c0 8104 	blt.w	80269f0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 80267e8:	45bc      	cmp	ip, r7
 80267ea:	f340 8101 	ble.w	80269f0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 80267ee:	f81e 200c 	ldrb.w	r2, [lr, ip]
 80267f2:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80267f6:	3701      	adds	r7, #1
 80267f8:	f100 8102 	bmi.w	8026a00 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 80267fc:	45bc      	cmp	ip, r7
 80267fe:	f340 80ff 	ble.w	8026a00 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 8026802:	2e00      	cmp	r6, #0
 8026804:	f000 80fe 	beq.w	8026a04 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 8026808:	44f4      	add	ip, lr
 802680a:	f89c 2001 	ldrb.w	r2, [ip, #1]
 802680e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8026812:	b2b6      	uxth	r6, r6
 8026814:	b280      	uxth	r0, r0
 8026816:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 802681a:	fb00 fe06 	mul.w	lr, r0, r6
 802681e:	0136      	lsls	r6, r6, #4
 8026820:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8026824:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8026828:	eba6 070e 	sub.w	r7, r6, lr
 802682c:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8026830:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8026834:	b280      	uxth	r0, r0
 8026836:	b2bf      	uxth	r7, r7
 8026838:	1a1b      	subs	r3, r3, r0
 802683a:	ea4f 6812 	mov.w	r8, r2, lsr #24
 802683e:	fb0a f607 	mul.w	r6, sl, r7
 8026842:	b29b      	uxth	r3, r3
 8026844:	fb0b 6603 	mla	r6, fp, r3, r6
 8026848:	fb00 6609 	mla	r6, r0, r9, r6
 802684c:	fb0e 6608 	mla	r6, lr, r8, r6
 8026850:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8026854:	9600      	str	r6, [sp, #0]
 8026856:	2e00      	cmp	r6, #0
 8026858:	f000 80be 	beq.w	80269d8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 802685c:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8026860:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8026864:	9e02      	ldr	r6, [sp, #8]
 8026866:	fb0b fc0c 	mul.w	ip, fp, ip
 802686a:	fb0b f505 	mul.w	r5, fp, r5
 802686e:	8836      	ldrh	r6, [r6, #0]
 8026870:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8026874:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8026878:	9501      	str	r5, [sp, #4]
 802687a:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 802687e:	44dc      	add	ip, fp
 8026880:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026884:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8026888:	9503      	str	r5, [sp, #12]
 802688a:	9d01      	ldr	r5, [sp, #4]
 802688c:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8026890:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8026894:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8026898:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 802689c:	fb0a fc0c 	mul.w	ip, sl, ip
 80268a0:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 80268a4:	fb0a fa01 	mul.w	sl, sl, r1
 80268a8:	ea4f 251c 	mov.w	r5, ip, lsr #8
 80268ac:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80268b0:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 80268b4:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80268b8:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 80268bc:	4465      	add	r5, ip
 80268be:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80268c2:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80268c6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80268ca:	fb09 fc0c 	mul.w	ip, r9, ip
 80268ce:	0a2d      	lsrs	r5, r5, #8
 80268d0:	fb09 f904 	mul.w	r9, r9, r4
 80268d4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80268d8:	ea4f 211c 	mov.w	r1, ip, lsr #8
 80268dc:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80268e0:	f509 7480 	add.w	r4, r9, #256	; 0x100
 80268e4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80268e8:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80268ec:	437d      	muls	r5, r7
 80268ee:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 80268f2:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 80268f6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80268fa:	4461      	add	r1, ip
 80268fc:	fb08 f404 	mul.w	r4, r8, r4
 8026900:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026904:	fb08 f802 	mul.w	r8, r8, r2
 8026908:	0a09      	lsrs	r1, r1, #8
 802690a:	0a22      	lsrs	r2, r4, #8
 802690c:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8026910:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8026914:	fb07 f70a 	mul.w	r7, r7, sl
 8026918:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802691c:	4414      	add	r4, r2
 802691e:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8026922:	0a24      	lsrs	r4, r4, #8
 8026924:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8026928:	9a03      	ldr	r2, [sp, #12]
 802692a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802692e:	fb02 5503 	mla	r5, r2, r3, r5
 8026932:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8026936:	9a00      	ldr	r2, [sp, #0]
 8026938:	fb04 540e 	mla	r4, r4, lr, r5
 802693c:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8026940:	1235      	asrs	r5, r6, #8
 8026942:	fb01 4100 	mla	r1, r1, r0, r4
 8026946:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802694a:	0a09      	lsrs	r1, r1, #8
 802694c:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8026950:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 8026954:	fb03 7101 	mla	r1, r3, r1, r7
 8026958:	fb0e 1e08 	mla	lr, lr, r8, r1
 802695c:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8026960:	fb00 e101 	mla	r1, r0, r1, lr
 8026964:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8026968:	b287      	uxth	r7, r0
 802696a:	0a09      	lsrs	r1, r1, #8
 802696c:	437a      	muls	r2, r7
 802696e:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8026972:	1c53      	adds	r3, r2, #1
 8026974:	4321      	orrs	r1, r4
 8026976:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802697a:	0c0a      	lsrs	r2, r1, #16
 802697c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8026980:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8026984:	b2c8      	uxtb	r0, r1
 8026986:	fb12 f207 	smulbb	r2, r2, r7
 802698a:	fb14 f407 	smulbb	r4, r4, r7
 802698e:	b2db      	uxtb	r3, r3
 8026990:	fb10 f007 	smulbb	r0, r0, r7
 8026994:	fb05 2503 	mla	r5, r5, r3, r2
 8026998:	10f2      	asrs	r2, r6, #3
 802699a:	00f6      	lsls	r6, r6, #3
 802699c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80269a0:	b2ad      	uxth	r5, r5
 80269a2:	b2f6      	uxtb	r6, r6
 80269a4:	fb02 4203 	mla	r2, r2, r3, r4
 80269a8:	fb06 0303 	mla	r3, r6, r3, r0
 80269ac:	b294      	uxth	r4, r2
 80269ae:	b299      	uxth	r1, r3
 80269b0:	1c6b      	adds	r3, r5, #1
 80269b2:	1c62      	adds	r2, r4, #1
 80269b4:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80269b8:	1c4b      	adds	r3, r1, #1
 80269ba:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80269be:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80269c2:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80269c6:	0952      	lsrs	r2, r2, #5
 80269c8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80269cc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80269d0:	432b      	orrs	r3, r5
 80269d2:	4313      	orrs	r3, r2
 80269d4:	9a02      	ldr	r2, [sp, #8]
 80269d6:	8013      	strh	r3, [r2, #0]
 80269d8:	b005      	add	sp, #20
 80269da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80269de:	2500      	movs	r5, #0
 80269e0:	e6e9      	b.n	80267b6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 80269e2:	2100      	movs	r1, #0
 80269e4:	460d      	mov	r5, r1
 80269e6:	e6f3      	b.n	80267d0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 80269e8:	2100      	movs	r1, #0
 80269ea:	e6f1      	b.n	80267d0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 80269ec:	4631      	mov	r1, r6
 80269ee:	e6ef      	b.n	80267d0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 80269f0:	2400      	movs	r4, #0
 80269f2:	e700      	b.n	80267f6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 80269f4:	2200      	movs	r2, #0
 80269f6:	4614      	mov	r4, r2
 80269f8:	e70b      	b.n	8026812 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 80269fa:	4602      	mov	r2, r0
 80269fc:	4604      	mov	r4, r0
 80269fe:	e708      	b.n	8026812 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8026a00:	2200      	movs	r2, #0
 8026a02:	e706      	b.n	8026812 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8026a04:	4632      	mov	r2, r6
 8026a06:	e704      	b.n	8026812 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

08026a08 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026a0c:	b09f      	sub	sp, #124	; 0x7c
 8026a0e:	921b      	str	r2, [sp, #108]	; 0x6c
 8026a10:	9309      	str	r3, [sp, #36]	; 0x24
 8026a12:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8026a14:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8026a18:	901d      	str	r0, [sp, #116]	; 0x74
 8026a1a:	931c      	str	r3, [sp, #112]	; 0x70
 8026a1c:	6850      	ldr	r0, [r2, #4]
 8026a1e:	9119      	str	r1, [sp, #100]	; 0x64
 8026a20:	6812      	ldr	r2, [r2, #0]
 8026a22:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8026a24:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8026a28:	fb00 1303 	mla	r3, r0, r3, r1
 8026a2c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8026a30:	930c      	str	r3, [sp, #48]	; 0x30
 8026a32:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8026a34:	681b      	ldr	r3, [r3, #0]
 8026a36:	9312      	str	r3, [sp, #72]	; 0x48
 8026a38:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8026a3a:	685e      	ldr	r6, [r3, #4]
 8026a3c:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8026a40:	3604      	adds	r6, #4
 8026a42:	930d      	str	r3, [sp, #52]	; 0x34
 8026a44:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8026a46:	2b00      	cmp	r3, #0
 8026a48:	dc03      	bgt.n	8026a52 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8026a4a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8026a4c:	2b00      	cmp	r3, #0
 8026a4e:	f340 8387 	ble.w	8027160 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 8026a52:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8026a54:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026a58:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026a5c:	1e48      	subs	r0, r1, #1
 8026a5e:	1e57      	subs	r7, r2, #1
 8026a60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026a62:	2b00      	cmp	r3, #0
 8026a64:	f340 8194 	ble.w	8026d90 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 8026a68:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8026a6a:	142b      	asrs	r3, r5, #16
 8026a6c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8026a70:	d406      	bmi.n	8026a80 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8026a72:	4584      	cmp	ip, r0
 8026a74:	da04      	bge.n	8026a80 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8026a76:	2b00      	cmp	r3, #0
 8026a78:	db02      	blt.n	8026a80 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8026a7a:	42bb      	cmp	r3, r7
 8026a7c:	f2c0 8189 	blt.w	8026d92 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8026a80:	f11c 0c01 	adds.w	ip, ip, #1
 8026a84:	f100 8177 	bmi.w	8026d76 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8026a88:	4561      	cmp	r1, ip
 8026a8a:	f2c0 8174 	blt.w	8026d76 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8026a8e:	3301      	adds	r3, #1
 8026a90:	f100 8171 	bmi.w	8026d76 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8026a94:	429a      	cmp	r2, r3
 8026a96:	f2c0 816e 	blt.w	8026d76 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8026a9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026a9c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8026a9e:	931a      	str	r3, [sp, #104]	; 0x68
 8026aa0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8026aa2:	2b00      	cmp	r3, #0
 8026aa4:	f340 8193 	ble.w	8026dce <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8026aa8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8026aaa:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8026aae:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8026ab2:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8026ab6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8026ab8:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8026abc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8026abe:	141b      	asrs	r3, r3, #16
 8026ac0:	f100 81d6 	bmi.w	8026e70 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8026ac4:	f100 38ff 	add.w	r8, r0, #4294967295
 8026ac8:	4543      	cmp	r3, r8
 8026aca:	f280 81d1 	bge.w	8026e70 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8026ace:	f1bc 0f00 	cmp.w	ip, #0
 8026ad2:	f2c0 81cd 	blt.w	8026e70 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8026ad6:	f10e 38ff 	add.w	r8, lr, #4294967295
 8026ada:	45c4      	cmp	ip, r8
 8026adc:	f280 81c8 	bge.w	8026e70 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8026ae0:	b200      	sxth	r0, r0
 8026ae2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026ae4:	fb0c 3300 	mla	r3, ip, r0, r3
 8026ae8:	eb04 0803 	add.w	r8, r4, r3
 8026aec:	5ce3      	ldrb	r3, [r4, r3]
 8026aee:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8026af2:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8026af6:	2a00      	cmp	r2, #0
 8026af8:	f000 81af 	beq.w	8026e5a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8026afc:	f898 c001 	ldrb.w	ip, [r8, #1]
 8026b00:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8026b04:	940e      	str	r4, [sp, #56]	; 0x38
 8026b06:	0e24      	lsrs	r4, r4, #24
 8026b08:	9415      	str	r4, [sp, #84]	; 0x54
 8026b0a:	b179      	cbz	r1, 8026b2c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8026b0c:	eb08 0c00 	add.w	ip, r8, r0
 8026b10:	f818 0000 	ldrb.w	r0, [r8, r0]
 8026b14:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8026b18:	900a      	str	r0, [sp, #40]	; 0x28
 8026b1a:	0e00      	lsrs	r0, r0, #24
 8026b1c:	9013      	str	r0, [sp, #76]	; 0x4c
 8026b1e:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8026b22:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8026b26:	900f      	str	r0, [sp, #60]	; 0x3c
 8026b28:	0e00      	lsrs	r0, r0, #24
 8026b2a:	9016      	str	r0, [sp, #88]	; 0x58
 8026b2c:	b292      	uxth	r2, r2
 8026b2e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8026b30:	b289      	uxth	r1, r1
 8026b32:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8026b34:	fb02 f901 	mul.w	r9, r2, r1
 8026b38:	0112      	lsls	r2, r2, #4
 8026b3a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8026b3e:	eba2 0809 	sub.w	r8, r2, r9
 8026b42:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8026b46:	b289      	uxth	r1, r1
 8026b48:	fa1f f888 	uxth.w	r8, r8
 8026b4c:	1a52      	subs	r2, r2, r1
 8026b4e:	fb08 f000 	mul.w	r0, r8, r0
 8026b52:	b292      	uxth	r2, r2
 8026b54:	fb02 000e 	mla	r0, r2, lr, r0
 8026b58:	fb01 0004 	mla	r0, r1, r4, r0
 8026b5c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8026b5e:	fb09 0004 	mla	r0, r9, r4, r0
 8026b62:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8026b66:	2800      	cmp	r0, #0
 8026b68:	f000 80fa 	beq.w	8026d60 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8026b6c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8026b70:	d01b      	beq.n	8026baa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8026b72:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8026b76:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026b7a:	fb0e fa0a 	mul.w	sl, lr, sl
 8026b7e:	fb0e fe03 	mul.w	lr, lr, r3
 8026b82:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8026b86:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8026b8a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8026b8e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026b92:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8026b96:	4453      	add	r3, sl
 8026b98:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026b9c:	0a1b      	lsrs	r3, r3, #8
 8026b9e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8026ba2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026ba6:	ea43 030c 	orr.w	r3, r3, ip
 8026baa:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8026bac:	2cff      	cmp	r4, #255	; 0xff
 8026bae:	d021      	beq.n	8026bf4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 8026bb0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026bb2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8026bb6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8026bb8:	fb04 fb0b 	mul.w	fp, r4, fp
 8026bbc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026bbe:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026bc2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8026bc4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026bc8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026bcc:	fb04 fa0a 	mul.w	sl, r4, sl
 8026bd0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026bd4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026bd8:	44de      	add	lr, fp
 8026bda:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026bde:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026be2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026be6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026bea:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026bee:	ea4e 040a 	orr.w	r4, lr, sl
 8026bf2:	940e      	str	r4, [sp, #56]	; 0x38
 8026bf4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8026bf6:	2cff      	cmp	r4, #255	; 0xff
 8026bf8:	d021      	beq.n	8026c3e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8026bfa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8026bfc:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8026c00:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8026c02:	fb04 fb0b 	mul.w	fp, r4, fp
 8026c06:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8026c08:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026c0c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8026c0e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026c12:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026c16:	fb04 fa0a 	mul.w	sl, r4, sl
 8026c1a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026c1e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026c22:	44de      	add	lr, fp
 8026c24:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026c28:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026c2c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026c30:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026c34:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026c38:	ea4e 040a 	orr.w	r4, lr, sl
 8026c3c:	940a      	str	r4, [sp, #40]	; 0x28
 8026c3e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8026c40:	2cff      	cmp	r4, #255	; 0xff
 8026c42:	d021      	beq.n	8026c88 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 8026c44:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8026c46:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8026c4a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8026c4c:	fb04 fb0b 	mul.w	fp, r4, fp
 8026c50:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8026c52:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026c56:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8026c58:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026c5c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026c60:	fb04 fa0a 	mul.w	sl, r4, sl
 8026c64:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026c68:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026c6c:	44de      	add	lr, fp
 8026c6e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026c72:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026c76:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026c7a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026c7e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026c82:	ea4e 040a 	orr.w	r4, lr, sl
 8026c86:	940f      	str	r4, [sp, #60]	; 0x3c
 8026c88:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026c8a:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8026c8e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026c92:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026c96:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8026c98:	fb08 fc0c 	mul.w	ip, r8, ip
 8026c9c:	fb02 cc0e 	mla	ip, r2, lr, ip
 8026ca0:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8026ca4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8026ca6:	fb01 cc0e 	mla	ip, r1, lr, ip
 8026caa:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8026cae:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026cb0:	fb09 cc0e 	mla	ip, r9, lr, ip
 8026cb4:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8026cb8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026cba:	fb08 f80e 	mul.w	r8, r8, lr
 8026cbe:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026cc2:	fb02 8303 	mla	r3, r2, r3, r8
 8026cc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026cc8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026ccc:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8026cd0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8026cd2:	fb01 330a 	mla	r3, r1, sl, r3
 8026cd6:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8026cda:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8026cdc:	fb09 3901 	mla	r9, r9, r1, r3
 8026ce0:	883b      	ldrh	r3, [r7, #0]
 8026ce2:	4342      	muls	r2, r0
 8026ce4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026ce8:	1c50      	adds	r0, r2, #1
 8026cea:	1219      	asrs	r1, r3, #8
 8026cec:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8026cf0:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8026cf4:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8026cf8:	ea4c 0c09 	orr.w	ip, ip, r9
 8026cfc:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8026d00:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8026d04:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8026d08:	b2c0      	uxtb	r0, r0
 8026d0a:	fb12 f204 	smulbb	r2, r2, r4
 8026d0e:	fa5f fc8c 	uxtb.w	ip, ip
 8026d12:	fb1e fe04 	smulbb	lr, lr, r4
 8026d16:	fb01 2100 	mla	r1, r1, r0, r2
 8026d1a:	10da      	asrs	r2, r3, #3
 8026d1c:	fb1c fc04 	smulbb	ip, ip, r4
 8026d20:	00db      	lsls	r3, r3, #3
 8026d22:	b289      	uxth	r1, r1
 8026d24:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8026d28:	b2db      	uxtb	r3, r3
 8026d2a:	fb02 e200 	mla	r2, r2, r0, lr
 8026d2e:	fb03 c300 	mla	r3, r3, r0, ip
 8026d32:	b292      	uxth	r2, r2
 8026d34:	fa1f fc83 	uxth.w	ip, r3
 8026d38:	1c4b      	adds	r3, r1, #1
 8026d3a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8026d3e:	f10c 0301 	add.w	r3, ip, #1
 8026d42:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8026d46:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8026d4a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026d4e:	430b      	orrs	r3, r1
 8026d50:	1c51      	adds	r1, r2, #1
 8026d52:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8026d56:	0952      	lsrs	r2, r2, #5
 8026d58:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026d5c:	4313      	orrs	r3, r2
 8026d5e:	803b      	strh	r3, [r7, #0]
 8026d60:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8026d62:	3702      	adds	r7, #2
 8026d64:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8026d66:	441a      	add	r2, r3
 8026d68:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026d6a:	441d      	add	r5, r3
 8026d6c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8026d6e:	9229      	str	r2, [sp, #164]	; 0xa4
 8026d70:	3b01      	subs	r3, #1
 8026d72:	931a      	str	r3, [sp, #104]	; 0x68
 8026d74:	e694      	b.n	8026aa0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8026d76:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8026d78:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8026d7a:	441c      	add	r4, r3
 8026d7c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026d7e:	441d      	add	r5, r3
 8026d80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026d82:	9429      	str	r4, [sp, #164]	; 0xa4
 8026d84:	3b01      	subs	r3, #1
 8026d86:	9309      	str	r3, [sp, #36]	; 0x24
 8026d88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026d8a:	3302      	adds	r3, #2
 8026d8c:	930c      	str	r3, [sp, #48]	; 0x30
 8026d8e:	e667      	b.n	8026a60 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8026d90:	d024      	beq.n	8026ddc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 8026d92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026d94:	982b      	ldr	r0, [sp, #172]	; 0xac
 8026d96:	3b01      	subs	r3, #1
 8026d98:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8026d9a:	fb00 4003 	mla	r0, r0, r3, r4
 8026d9e:	1400      	asrs	r0, r0, #16
 8026da0:	f53f ae7b 	bmi.w	8026a9a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8026da4:	3901      	subs	r1, #1
 8026da6:	4288      	cmp	r0, r1
 8026da8:	f6bf ae77 	bge.w	8026a9a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8026dac:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8026dae:	fb01 5303 	mla	r3, r1, r3, r5
 8026db2:	141b      	asrs	r3, r3, #16
 8026db4:	f53f ae71 	bmi.w	8026a9a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8026db8:	3a01      	subs	r2, #1
 8026dba:	4293      	cmp	r3, r2
 8026dbc:	f6bf ae6d 	bge.w	8026a9a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8026dc0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8026dc4:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8026dc8:	f1bb 0f00 	cmp.w	fp, #0
 8026dcc:	dc70      	bgt.n	8026eb0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 8026dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026dd0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026dd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026dd6:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8026dda:	930c      	str	r3, [sp, #48]	; 0x30
 8026ddc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8026dde:	2b00      	cmp	r3, #0
 8026de0:	f340 81be 	ble.w	8027160 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 8026de4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026de8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026dea:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026dee:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026df2:	eef0 6a62 	vmov.f32	s13, s5
 8026df6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026dfa:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026dfe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026e02:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8026e06:	eef0 6a43 	vmov.f32	s13, s6
 8026e0a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026e0e:	ee16 5a90 	vmov	r5, s13
 8026e12:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026e16:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026e1a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026e1e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026e22:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026e26:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026e2a:	ee12 2a90 	vmov	r2, s5
 8026e2e:	eef0 2a47 	vmov.f32	s5, s14
 8026e32:	fb92 f3f3 	sdiv	r3, r2, r3
 8026e36:	ee13 2a10 	vmov	r2, s6
 8026e3a:	932b      	str	r3, [sp, #172]	; 0xac
 8026e3c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026e3e:	eeb0 3a67 	vmov.f32	s6, s15
 8026e42:	fb92 f3f3 	sdiv	r3, r2, r3
 8026e46:	932c      	str	r3, [sp, #176]	; 0xb0
 8026e48:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8026e4a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8026e4c:	3b01      	subs	r3, #1
 8026e4e:	9319      	str	r3, [sp, #100]	; 0x64
 8026e50:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026e52:	bf08      	it	eq
 8026e54:	4613      	moveq	r3, r2
 8026e56:	9309      	str	r3, [sp, #36]	; 0x24
 8026e58:	e5f4      	b.n	8026a44 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8026e5a:	2900      	cmp	r1, #0
 8026e5c:	f43f ae66 	beq.w	8026b2c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8026e60:	f818 0000 	ldrb.w	r0, [r8, r0]
 8026e64:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8026e68:	900a      	str	r0, [sp, #40]	; 0x28
 8026e6a:	0e00      	lsrs	r0, r0, #24
 8026e6c:	9013      	str	r0, [sp, #76]	; 0x4c
 8026e6e:	e65d      	b.n	8026b2c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8026e70:	f113 0801 	adds.w	r8, r3, #1
 8026e74:	f53f af74 	bmi.w	8026d60 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8026e78:	4540      	cmp	r0, r8
 8026e7a:	f6ff af71 	blt.w	8026d60 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8026e7e:	f11c 0801 	adds.w	r8, ip, #1
 8026e82:	f53f af6d 	bmi.w	8026d60 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8026e86:	45c6      	cmp	lr, r8
 8026e88:	f6ff af6a 	blt.w	8026d60 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8026e8c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8026e8e:	b200      	sxth	r0, r0
 8026e90:	9302      	str	r3, [sp, #8]
 8026e92:	fa0f f38e 	sxth.w	r3, lr
 8026e96:	9000      	str	r0, [sp, #0]
 8026e98:	9301      	str	r3, [sp, #4]
 8026e9a:	4633      	mov	r3, r6
 8026e9c:	981d      	ldr	r0, [sp, #116]	; 0x74
 8026e9e:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8026ea2:	e9cd c203 	strd	ip, r2, [sp, #12]
 8026ea6:	4639      	mov	r1, r7
 8026ea8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8026eaa:	f7ff fc63 	bl	8026774 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 8026eae:	e757      	b.n	8026d60 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8026eb0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8026eb2:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8026eb6:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8026eb8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8026ebc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8026ebe:	1427      	asrs	r7, r4, #16
 8026ec0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026ec2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026ec6:	142b      	asrs	r3, r5, #16
 8026ec8:	fb01 7303 	mla	r3, r1, r3, r7
 8026ecc:	18e7      	adds	r7, r4, r3
 8026ece:	5ce3      	ldrb	r3, [r4, r3]
 8026ed0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8026ed4:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8026ed8:	2a00      	cmp	r2, #0
 8026eda:	f000 8137 	beq.w	802714c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 8026ede:	f897 e001 	ldrb.w	lr, [r7, #1]
 8026ee2:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8026ee6:	9410      	str	r4, [sp, #64]	; 0x40
 8026ee8:	0e24      	lsrs	r4, r4, #24
 8026eea:	9417      	str	r4, [sp, #92]	; 0x5c
 8026eec:	b170      	cbz	r0, 8026f0c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8026eee:	eb07 0e01 	add.w	lr, r7, r1
 8026ef2:	5c79      	ldrb	r1, [r7, r1]
 8026ef4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026ef8:	910b      	str	r1, [sp, #44]	; 0x2c
 8026efa:	0e09      	lsrs	r1, r1, #24
 8026efc:	9114      	str	r1, [sp, #80]	; 0x50
 8026efe:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8026f02:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026f06:	9111      	str	r1, [sp, #68]	; 0x44
 8026f08:	0e09      	lsrs	r1, r1, #24
 8026f0a:	9118      	str	r1, [sp, #96]	; 0x60
 8026f0c:	b292      	uxth	r2, r2
 8026f0e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8026f10:	b280      	uxth	r0, r0
 8026f12:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026f14:	fb02 f800 	mul.w	r8, r2, r0
 8026f18:	0112      	lsls	r2, r2, #4
 8026f1a:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8026f1e:	eba2 0e08 	sub.w	lr, r2, r8
 8026f22:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8026f26:	b280      	uxth	r0, r0
 8026f28:	fa1f fe8e 	uxth.w	lr, lr
 8026f2c:	1a12      	subs	r2, r2, r0
 8026f2e:	fb0e f101 	mul.w	r1, lr, r1
 8026f32:	b292      	uxth	r2, r2
 8026f34:	fb02 110c 	mla	r1, r2, ip, r1
 8026f38:	fb00 1104 	mla	r1, r0, r4, r1
 8026f3c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8026f3e:	fb08 1104 	mla	r1, r8, r4, r1
 8026f42:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8026f46:	2900      	cmp	r1, #0
 8026f48:	f000 80f5 	beq.w	8027136 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 8026f4c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8026f50:	d019      	beq.n	8026f86 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 8026f52:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8026f56:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026f5a:	fb0c fa0a 	mul.w	sl, ip, sl
 8026f5e:	fb0c fc03 	mul.w	ip, ip, r3
 8026f62:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8026f66:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8026f6a:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8026f6e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026f72:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8026f76:	4453      	add	r3, sl
 8026f78:	0a3f      	lsrs	r7, r7, #8
 8026f7a:	0a1b      	lsrs	r3, r3, #8
 8026f7c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8026f80:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026f84:	433b      	orrs	r3, r7
 8026f86:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8026f88:	2cff      	cmp	r4, #255	; 0xff
 8026f8a:	d020      	beq.n	8026fce <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 8026f8c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026f8e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8026f92:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8026f94:	4367      	muls	r7, r4
 8026f96:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026f98:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026f9c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026fa0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8026fa2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8026fa6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026faa:	fb04 fa0a 	mul.w	sl, r4, sl
 8026fae:	44bc      	add	ip, r7
 8026fb0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8026fb4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026fb8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026fbc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026fc0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026fc4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026fc8:	ea4c 040a 	orr.w	r4, ip, sl
 8026fcc:	9410      	str	r4, [sp, #64]	; 0x40
 8026fce:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026fd0:	2cff      	cmp	r4, #255	; 0xff
 8026fd2:	d020      	beq.n	8027016 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 8026fd4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026fd6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8026fda:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026fdc:	4367      	muls	r7, r4
 8026fde:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026fe0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026fe4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026fe8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026fea:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8026fee:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026ff2:	fb04 fa0a 	mul.w	sl, r4, sl
 8026ff6:	44bc      	add	ip, r7
 8026ff8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8026ffc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027000:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027004:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027008:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802700c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027010:	ea4c 040a 	orr.w	r4, ip, sl
 8027014:	940b      	str	r4, [sp, #44]	; 0x2c
 8027016:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8027018:	2cff      	cmp	r4, #255	; 0xff
 802701a:	d020      	beq.n	802705e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 802701c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802701e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8027022:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8027024:	4367      	muls	r7, r4
 8027026:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8027028:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802702c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8027030:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8027032:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8027036:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802703a:	fb04 fa0a 	mul.w	sl, r4, sl
 802703e:	44bc      	add	ip, r7
 8027040:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8027044:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027048:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802704c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027050:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027054:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027058:	ea4c 040a 	orr.w	r4, ip, sl
 802705c:	9411      	str	r4, [sp, #68]	; 0x44
 802705e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8027060:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8027064:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027068:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802706c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802706e:	fb0e f707 	mul.w	r7, lr, r7
 8027072:	fb02 770c 	mla	r7, r2, ip, r7
 8027076:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802707a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802707c:	fb00 770c 	mla	r7, r0, ip, r7
 8027080:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8027084:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8027086:	fb08 770c 	mla	r7, r8, ip, r7
 802708a:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 802708e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8027090:	fb0e fe0c 	mul.w	lr, lr, ip
 8027094:	0a3f      	lsrs	r7, r7, #8
 8027096:	fb02 e303 	mla	r3, r2, r3, lr
 802709a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802709c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80270a0:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80270a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80270a6:	fb00 330a 	mla	r3, r0, sl, r3
 80270aa:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80270ae:	f8b9 0000 	ldrh.w	r0, [r9]
 80270b2:	fb08 3c0c 	mla	ip, r8, ip, r3
 80270b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80270b8:	1202      	asrs	r2, r0, #8
 80270ba:	434b      	muls	r3, r1
 80270bc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80270c0:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80270c4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80270c8:	1c59      	adds	r1, r3, #1
 80270ca:	ea47 070c 	orr.w	r7, r7, ip
 80270ce:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80270d2:	0c3b      	lsrs	r3, r7, #16
 80270d4:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80270d8:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 80270dc:	b2ff      	uxtb	r7, r7
 80270de:	fb13 f304 	smulbb	r3, r3, r4
 80270e2:	b2c9      	uxtb	r1, r1
 80270e4:	fb1c fc04 	smulbb	ip, ip, r4
 80270e8:	fb02 3201 	mla	r2, r2, r1, r3
 80270ec:	10c3      	asrs	r3, r0, #3
 80270ee:	fb17 f704 	smulbb	r7, r7, r4
 80270f2:	00c0      	lsls	r0, r0, #3
 80270f4:	b292      	uxth	r2, r2
 80270f6:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80270fa:	b2c0      	uxtb	r0, r0
 80270fc:	fb03 c301 	mla	r3, r3, r1, ip
 8027100:	f102 0c01 	add.w	ip, r2, #1
 8027104:	fb00 7001 	mla	r0, r0, r1, r7
 8027108:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802710c:	b280      	uxth	r0, r0
 802710e:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 8027112:	b29b      	uxth	r3, r3
 8027114:	1c42      	adds	r2, r0, #1
 8027116:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802711a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802711e:	ea42 020c 	orr.w	r2, r2, ip
 8027122:	f103 0c01 	add.w	ip, r3, #1
 8027126:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 802712a:	095b      	lsrs	r3, r3, #5
 802712c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027130:	431a      	orrs	r2, r3
 8027132:	f8a9 2000 	strh.w	r2, [r9]
 8027136:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8027138:	f109 0902 	add.w	r9, r9, #2
 802713c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802713e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8027142:	441a      	add	r2, r3
 8027144:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027146:	9229      	str	r2, [sp, #164]	; 0xa4
 8027148:	441d      	add	r5, r3
 802714a:	e63d      	b.n	8026dc8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 802714c:	2800      	cmp	r0, #0
 802714e:	f43f aedd 	beq.w	8026f0c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8027152:	5c79      	ldrb	r1, [r7, r1]
 8027154:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8027158:	910b      	str	r1, [sp, #44]	; 0x2c
 802715a:	0e09      	lsrs	r1, r1, #24
 802715c:	9114      	str	r1, [sp, #80]	; 0x50
 802715e:	e6d5      	b.n	8026f0c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8027160:	b01f      	add	sp, #124	; 0x7c
 8027162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027166 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8027166:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802716a:	b089      	sub	sp, #36	; 0x24
 802716c:	9101      	str	r1, [sp, #4]
 802716e:	9801      	ldr	r0, [sp, #4]
 8027170:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
 8027174:	8800      	ldrh	r0, [r0, #0]
 8027176:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
 802717a:	1206      	asrs	r6, r0, #8
 802717c:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8027180:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 8027184:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8027188:	9602      	str	r6, [sp, #8]
 802718a:	10c6      	asrs	r6, r0, #3
 802718c:	00c0      	lsls	r0, r0, #3
 802718e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8027192:	b2c0      	uxtb	r0, r0
 8027194:	9603      	str	r6, [sp, #12]
 8027196:	9004      	str	r0, [sp, #16]
 8027198:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	; 0x50
 802719c:	fb07 100c 	mla	r0, r7, ip, r1
 80271a0:	2f00      	cmp	r7, #0
 80271a2:	eb02 0e00 	add.w	lr, r2, r0
 80271a6:	f2c0 810a 	blt.w	80273be <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 80271aa:	45b8      	cmp	r8, r7
 80271ac:	f340 8107 	ble.w	80273be <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 80271b0:	2900      	cmp	r1, #0
 80271b2:	f2c0 8102 	blt.w	80273ba <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 80271b6:	458c      	cmp	ip, r1
 80271b8:	f340 80ff 	ble.w	80273ba <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 80271bc:	5c12      	ldrb	r2, [r2, r0]
 80271be:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80271c2:	1c4a      	adds	r2, r1, #1
 80271c4:	f100 80fe 	bmi.w	80273c4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 80271c8:	4594      	cmp	ip, r2
 80271ca:	f340 80fb 	ble.w	80273c4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 80271ce:	2d00      	cmp	r5, #0
 80271d0:	f000 80fa 	beq.w	80273c8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 80271d4:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80271d8:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80271dc:	3701      	adds	r7, #1
 80271de:	f100 80f7 	bmi.w	80273d0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 80271e2:	45b8      	cmp	r8, r7
 80271e4:	f340 80f4 	ble.w	80273d0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 80271e8:	2c00      	cmp	r4, #0
 80271ea:	f000 80f4 	beq.w	80273d6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 80271ee:	2900      	cmp	r1, #0
 80271f0:	eb0e 020c 	add.w	r2, lr, ip
 80271f4:	f2c0 80ea 	blt.w	80273cc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 80271f8:	458c      	cmp	ip, r1
 80271fa:	f340 80e7 	ble.w	80273cc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 80271fe:	f81e 700c 	ldrb.w	r7, [lr, ip]
 8027202:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8027206:	3101      	adds	r1, #1
 8027208:	f100 80e8 	bmi.w	80273dc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 802720c:	458c      	cmp	ip, r1
 802720e:	f340 80e5 	ble.w	80273dc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8027212:	2d00      	cmp	r5, #0
 8027214:	f000 80e4 	beq.w	80273e0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 8027218:	7852      	ldrb	r2, [r2, #1]
 802721a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802721e:	0e0b      	lsrs	r3, r1, #24
 8027220:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8027224:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8027228:	9300      	str	r3, [sp, #0]
 802722a:	b2a4      	uxth	r4, r4
 802722c:	b2ab      	uxth	r3, r5
 802722e:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8027232:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8027236:	fb03 f904 	mul.w	r9, r3, r4
 802723a:	011b      	lsls	r3, r3, #4
 802723c:	fb0a f505 	mul.w	r5, sl, r5
 8027240:	ea4f 6817 	mov.w	r8, r7, lsr #24
 8027244:	eba3 0e09 	sub.w	lr, r3, r9
 8027248:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 802724c:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 8027250:	0a28      	lsrs	r0, r5, #8
 8027252:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8027256:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802725a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802725e:	fb0a f303 	mul.w	r3, sl, r3
 8027262:	fb08 f707 	mul.w	r7, r8, r7
 8027266:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 802726a:	4405      	add	r5, r0
 802726c:	fb08 fc0c 	mul.w	ip, r8, ip
 8027270:	b2a4      	uxth	r4, r4
 8027272:	0a2d      	lsrs	r5, r5, #8
 8027274:	fa1f fe8e 	uxth.w	lr, lr
 8027278:	1b12      	subs	r2, r2, r4
 802727a:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 802727e:	b292      	uxth	r2, r2
 8027280:	9005      	str	r0, [sp, #20]
 8027282:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8027286:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802728a:	ea4f 201c 	mov.w	r0, ip, lsr #8
 802728e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8027292:	0a1b      	lsrs	r3, r3, #8
 8027294:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8027298:	9306      	str	r3, [sp, #24]
 802729a:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 802729e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80272a2:	4460      	add	r0, ip
 80272a4:	fb0b f303 	mul.w	r3, fp, r3
 80272a8:	fb0b f606 	mul.w	r6, fp, r6
 80272ac:	0a00      	lsrs	r0, r0, #8
 80272ae:	0a1d      	lsrs	r5, r3, #8
 80272b0:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 80272b4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80272b8:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80272bc:	441d      	add	r5, r3
 80272be:	f506 7380 	add.w	r3, r6, #256	; 0x100
 80272c2:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 80272c6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80272ca:	0a2d      	lsrs	r5, r5, #8
 80272cc:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 80272d0:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 80272d4:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80272d8:	0a36      	lsrs	r6, r6, #8
 80272da:	0a1b      	lsrs	r3, r3, #8
 80272dc:	fb05 f50e 	mul.w	r5, r5, lr
 80272e0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80272e4:	9307      	str	r3, [sp, #28]
 80272e6:	0e0b      	lsrs	r3, r1, #24
 80272e8:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80272ec:	fb0e f606 	mul.w	r6, lr, r6
 80272f0:	435f      	muls	r7, r3
 80272f2:	4359      	muls	r1, r3
 80272f4:	9b05      	ldr	r3, [sp, #20]
 80272f6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80272fa:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80272fe:	fb03 5502 	mla	r5, r3, r2, r5
 8027302:	9b06      	ldr	r3, [sp, #24]
 8027304:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027308:	fb0e fe0b 	mul.w	lr, lr, fp
 802730c:	44bc      	add	ip, r7
 802730e:	f501 7780 	add.w	r7, r1, #256	; 0x100
 8027312:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027316:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 802731a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802731e:	0a09      	lsrs	r1, r1, #8
 8027320:	fb0c 5509 	mla	r5, ip, r9, r5
 8027324:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8027328:	fb00 5504 	mla	r5, r0, r4, r5
 802732c:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8027330:	9b07      	ldr	r3, [sp, #28]
 8027332:	fb02 6000 	mla	r0, r2, r0, r6
 8027336:	0a2d      	lsrs	r5, r5, #8
 8027338:	fb02 e20a 	mla	r2, r2, sl, lr
 802733c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027340:	fb09 0001 	mla	r0, r9, r1, r0
 8027344:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8027348:	fb04 0003 	mla	r0, r4, r3, r0
 802734c:	9b00      	ldr	r3, [sp, #0]
 802734e:	fb04 2408 	mla	r4, r4, r8, r2
 8027352:	9a04      	ldr	r2, [sp, #16]
 8027354:	0a00      	lsrs	r0, r0, #8
 8027356:	fb09 4903 	mla	r9, r9, r3, r4
 802735a:	9b02      	ldr	r3, [sp, #8]
 802735c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8027360:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8027364:	4305      	orrs	r5, r0
 8027366:	fa5f f989 	uxtb.w	r9, r9
 802736a:	fb03 f109 	mul.w	r1, r3, r9
 802736e:	9b03      	ldr	r3, [sp, #12]
 8027370:	fb03 f309 	mul.w	r3, r3, r9
 8027374:	fb02 f909 	mul.w	r9, r2, r9
 8027378:	1c4a      	adds	r2, r1, #1
 802737a:	1c58      	adds	r0, r3, #1
 802737c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8027380:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8027384:	0c2a      	lsrs	r2, r5, #16
 8027386:	0a2b      	lsrs	r3, r5, #8
 8027388:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 802738c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8027390:	0212      	lsls	r2, r2, #8
 8027392:	00db      	lsls	r3, r3, #3
 8027394:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8027398:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802739c:	4313      	orrs	r3, r2
 802739e:	f109 0201 	add.w	r2, r9, #1
 80273a2:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 80273a6:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 80273aa:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 80273ae:	431d      	orrs	r5, r3
 80273b0:	9b01      	ldr	r3, [sp, #4]
 80273b2:	801d      	strh	r5, [r3, #0]
 80273b4:	b009      	add	sp, #36	; 0x24
 80273b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80273ba:	2000      	movs	r0, #0
 80273bc:	e701      	b.n	80271c2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 80273be:	2600      	movs	r6, #0
 80273c0:	4630      	mov	r0, r6
 80273c2:	e70b      	b.n	80271dc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 80273c4:	2600      	movs	r6, #0
 80273c6:	e709      	b.n	80271dc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 80273c8:	462e      	mov	r6, r5
 80273ca:	e707      	b.n	80271dc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 80273cc:	2700      	movs	r7, #0
 80273ce:	e71a      	b.n	8027206 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 80273d0:	2100      	movs	r1, #0
 80273d2:	460f      	mov	r7, r1
 80273d4:	e723      	b.n	802721e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 80273d6:	4621      	mov	r1, r4
 80273d8:	4627      	mov	r7, r4
 80273da:	e720      	b.n	802721e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 80273dc:	2100      	movs	r1, #0
 80273de:	e71e      	b.n	802721e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 80273e0:	4629      	mov	r1, r5
 80273e2:	e71c      	b.n	802721e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>

080273e4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80273e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80273e8:	b09b      	sub	sp, #108	; 0x6c
 80273ea:	9218      	str	r2, [sp, #96]	; 0x60
 80273ec:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80273ee:	9019      	str	r0, [sp, #100]	; 0x64
 80273f0:	9116      	str	r1, [sp, #88]	; 0x58
 80273f2:	6850      	ldr	r0, [r2, #4]
 80273f4:	9307      	str	r3, [sp, #28]
 80273f6:	6812      	ldr	r2, [r2, #0]
 80273f8:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80273fa:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 80273fe:	fb00 1303 	mla	r3, r0, r3, r1
 8027402:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8027406:	930a      	str	r3, [sp, #40]	; 0x28
 8027408:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802740a:	681b      	ldr	r3, [r3, #0]
 802740c:	930f      	str	r3, [sp, #60]	; 0x3c
 802740e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027410:	685e      	ldr	r6, [r3, #4]
 8027412:	3604      	adds	r6, #4
 8027414:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8027416:	2b00      	cmp	r3, #0
 8027418:	dc03      	bgt.n	8027422 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 802741a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802741c:	2b00      	cmp	r3, #0
 802741e:	f340 8373 	ble.w	8027b08 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 8027422:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027424:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027428:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802742c:	1e48      	subs	r0, r1, #1
 802742e:	1e57      	subs	r7, r2, #1
 8027430:	9b07      	ldr	r3, [sp, #28]
 8027432:	2b00      	cmp	r3, #0
 8027434:	f340 818f 	ble.w	8027756 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8027438:	9c25      	ldr	r4, [sp, #148]	; 0x94
 802743a:	142b      	asrs	r3, r5, #16
 802743c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8027440:	d406      	bmi.n	8027450 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8027442:	4584      	cmp	ip, r0
 8027444:	da04      	bge.n	8027450 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8027446:	2b00      	cmp	r3, #0
 8027448:	db02      	blt.n	8027450 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802744a:	42bb      	cmp	r3, r7
 802744c:	f2c0 8184 	blt.w	8027758 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8027450:	f11c 0c01 	adds.w	ip, ip, #1
 8027454:	f100 8172 	bmi.w	802773c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8027458:	4561      	cmp	r1, ip
 802745a:	f2c0 816f 	blt.w	802773c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802745e:	3301      	adds	r3, #1
 8027460:	f100 816c 	bmi.w	802773c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8027464:	429a      	cmp	r2, r3
 8027466:	f2c0 8169 	blt.w	802773c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802746a:	9b07      	ldr	r3, [sp, #28]
 802746c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802746e:	9317      	str	r3, [sp, #92]	; 0x5c
 8027470:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027472:	2b00      	cmp	r3, #0
 8027474:	f340 818e 	ble.w	8027794 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 8027478:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802747a:	ea4f 4c25 	mov.w	ip, r5, asr #16
 802747e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8027482:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8027486:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027488:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 802748c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802748e:	141b      	asrs	r3, r3, #16
 8027490:	f100 81d1 	bmi.w	8027836 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8027494:	f101 38ff 	add.w	r8, r1, #4294967295
 8027498:	4543      	cmp	r3, r8
 802749a:	f280 81cc 	bge.w	8027836 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802749e:	f1bc 0f00 	cmp.w	ip, #0
 80274a2:	f2c0 81c8 	blt.w	8027836 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80274a6:	f10e 38ff 	add.w	r8, lr, #4294967295
 80274aa:	45c4      	cmp	ip, r8
 80274ac:	f280 81c3 	bge.w	8027836 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80274b0:	b209      	sxth	r1, r1
 80274b2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80274b4:	fb0c 3301 	mla	r3, ip, r1, r3
 80274b8:	eb04 0803 	add.w	r8, r4, r3
 80274bc:	5ce3      	ldrb	r3, [r4, r3]
 80274be:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80274c2:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80274c6:	2a00      	cmp	r2, #0
 80274c8:	f000 81aa 	beq.w	8027820 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 80274cc:	f898 c001 	ldrb.w	ip, [r8, #1]
 80274d0:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80274d4:	940b      	str	r4, [sp, #44]	; 0x2c
 80274d6:	0e24      	lsrs	r4, r4, #24
 80274d8:	9412      	str	r4, [sp, #72]	; 0x48
 80274da:	b178      	cbz	r0, 80274fc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 80274dc:	eb08 0c01 	add.w	ip, r8, r1
 80274e0:	f818 1001 	ldrb.w	r1, [r8, r1]
 80274e4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80274e8:	9108      	str	r1, [sp, #32]
 80274ea:	0e09      	lsrs	r1, r1, #24
 80274ec:	9110      	str	r1, [sp, #64]	; 0x40
 80274ee:	f89c 1001 	ldrb.w	r1, [ip, #1]
 80274f2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80274f6:	910c      	str	r1, [sp, #48]	; 0x30
 80274f8:	0e09      	lsrs	r1, r1, #24
 80274fa:	9113      	str	r1, [sp, #76]	; 0x4c
 80274fc:	b292      	uxth	r2, r2
 80274fe:	9912      	ldr	r1, [sp, #72]	; 0x48
 8027500:	b280      	uxth	r0, r0
 8027502:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8027504:	fb02 f900 	mul.w	r9, r2, r0
 8027508:	0112      	lsls	r2, r2, #4
 802750a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802750e:	eba2 0809 	sub.w	r8, r2, r9
 8027512:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8027516:	b280      	uxth	r0, r0
 8027518:	fa1f f888 	uxth.w	r8, r8
 802751c:	1a12      	subs	r2, r2, r0
 802751e:	fb08 f101 	mul.w	r1, r8, r1
 8027522:	b292      	uxth	r2, r2
 8027524:	fb02 110e 	mla	r1, r2, lr, r1
 8027528:	fb00 1104 	mla	r1, r0, r4, r1
 802752c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802752e:	fb09 1104 	mla	r1, r9, r4, r1
 8027532:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8027536:	2900      	cmp	r1, #0
 8027538:	f000 80f5 	beq.w	8027726 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802753c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8027540:	d01b      	beq.n	802757a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8027542:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8027546:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802754a:	fb0e fa0a 	mul.w	sl, lr, sl
 802754e:	fb0e fe03 	mul.w	lr, lr, r3
 8027552:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8027556:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802755a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802755e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027562:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8027566:	4453      	add	r3, sl
 8027568:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802756c:	0a1b      	lsrs	r3, r3, #8
 802756e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8027572:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027576:	ea43 030c 	orr.w	r3, r3, ip
 802757a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802757c:	2cff      	cmp	r4, #255	; 0xff
 802757e:	d021      	beq.n	80275c4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8027580:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8027582:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8027586:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8027588:	fb04 fb0b 	mul.w	fp, r4, fp
 802758c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802758e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8027592:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8027594:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027598:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802759c:	fb04 fa0a 	mul.w	sl, r4, sl
 80275a0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80275a4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80275a8:	44de      	add	lr, fp
 80275aa:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80275ae:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80275b2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80275b6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80275ba:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80275be:	ea4e 040a 	orr.w	r4, lr, sl
 80275c2:	940b      	str	r4, [sp, #44]	; 0x2c
 80275c4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80275c6:	2cff      	cmp	r4, #255	; 0xff
 80275c8:	d021      	beq.n	802760e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80275ca:	9c08      	ldr	r4, [sp, #32]
 80275cc:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80275d0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80275d2:	fb04 fb0b 	mul.w	fp, r4, fp
 80275d6:	9c08      	ldr	r4, [sp, #32]
 80275d8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80275dc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80275de:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80275e2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80275e6:	fb04 fa0a 	mul.w	sl, r4, sl
 80275ea:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80275ee:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80275f2:	44de      	add	lr, fp
 80275f4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80275f8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80275fc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027600:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027604:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027608:	ea4e 040a 	orr.w	r4, lr, sl
 802760c:	9408      	str	r4, [sp, #32]
 802760e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8027610:	2cff      	cmp	r4, #255	; 0xff
 8027612:	d021      	beq.n	8027658 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 8027614:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8027616:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802761a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802761c:	fb04 fb0b 	mul.w	fp, r4, fp
 8027620:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8027622:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8027626:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8027628:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802762c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027630:	fb04 fa0a 	mul.w	sl, r4, sl
 8027634:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027638:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802763c:	44de      	add	lr, fp
 802763e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027642:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027646:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802764a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802764e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027652:	ea4e 040a 	orr.w	r4, lr, sl
 8027656:	940c      	str	r4, [sp, #48]	; 0x30
 8027658:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802765a:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 802765e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027662:	43c9      	mvns	r1, r1
 8027664:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8027668:	9c08      	ldr	r4, [sp, #32]
 802766a:	fb08 fc0c 	mul.w	ip, r8, ip
 802766e:	fb02 cc0e 	mla	ip, r2, lr, ip
 8027672:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8027676:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8027678:	fb00 cc0e 	mla	ip, r0, lr, ip
 802767c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8027680:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8027682:	fb09 cc0e 	mla	ip, r9, lr, ip
 8027686:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 802768a:	fb08 f80e 	mul.w	r8, r8, lr
 802768e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027692:	fa5f fe81 	uxtb.w	lr, r1
 8027696:	fb02 8303 	mla	r3, r2, r3, r8
 802769a:	9a08      	ldr	r2, [sp, #32]
 802769c:	f8b7 8000 	ldrh.w	r8, [r7]
 80276a0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80276a4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80276a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80276aa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80276ae:	fb00 330a 	mla	r3, r0, sl, r3
 80276b2:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 80276b6:	ea4f 2228 	mov.w	r2, r8, asr #8
 80276ba:	fb09 3900 	mla	r9, r9, r0, r3
 80276be:	ea4f 00e8 	mov.w	r0, r8, asr #3
 80276c2:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80276c6:	b2c9      	uxtb	r1, r1
 80276c8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80276cc:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80276d0:	fb02 f20e 	mul.w	r2, r2, lr
 80276d4:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80276d8:	fb00 f00e 	mul.w	r0, r0, lr
 80276dc:	1c53      	adds	r3, r2, #1
 80276de:	fb01 f10e 	mul.w	r1, r1, lr
 80276e2:	ea4c 0c09 	orr.w	ip, ip, r9
 80276e6:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80276ea:	ea4f 431c 	mov.w	r3, ip, lsr #16
 80276ee:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80276f2:	4a60      	ldr	r2, [pc, #384]	; (8027874 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 80276f4:	b2db      	uxtb	r3, r3
 80276f6:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 80276fa:	1c43      	adds	r3, r0, #1
 80276fc:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8027700:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8027704:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8027708:	00db      	lsls	r3, r3, #3
 802770a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802770e:	4313      	orrs	r3, r2
 8027710:	1c4a      	adds	r2, r1, #1
 8027712:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8027716:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 802771a:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 802771e:	ea4c 0c03 	orr.w	ip, ip, r3
 8027722:	f8a7 c000 	strh.w	ip, [r7]
 8027726:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8027728:	3702      	adds	r7, #2
 802772a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 802772c:	441a      	add	r2, r3
 802772e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027730:	441d      	add	r5, r3
 8027732:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027734:	9225      	str	r2, [sp, #148]	; 0x94
 8027736:	3b01      	subs	r3, #1
 8027738:	9317      	str	r3, [sp, #92]	; 0x5c
 802773a:	e699      	b.n	8027470 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802773c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802773e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8027740:	441c      	add	r4, r3
 8027742:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027744:	441d      	add	r5, r3
 8027746:	9b07      	ldr	r3, [sp, #28]
 8027748:	9425      	str	r4, [sp, #148]	; 0x94
 802774a:	3b01      	subs	r3, #1
 802774c:	9307      	str	r3, [sp, #28]
 802774e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027750:	3302      	adds	r3, #2
 8027752:	930a      	str	r3, [sp, #40]	; 0x28
 8027754:	e66c      	b.n	8027430 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8027756:	d024      	beq.n	80277a2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 8027758:	9b07      	ldr	r3, [sp, #28]
 802775a:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802775c:	3b01      	subs	r3, #1
 802775e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8027760:	fb00 4003 	mla	r0, r0, r3, r4
 8027764:	1400      	asrs	r0, r0, #16
 8027766:	f53f ae80 	bmi.w	802746a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802776a:	3901      	subs	r1, #1
 802776c:	4288      	cmp	r0, r1
 802776e:	f6bf ae7c 	bge.w	802746a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8027772:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8027774:	fb01 5303 	mla	r3, r1, r3, r5
 8027778:	141b      	asrs	r3, r3, #16
 802777a:	f53f ae76 	bmi.w	802746a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802777e:	3a01      	subs	r2, #1
 8027780:	4293      	cmp	r3, r2
 8027782:	f6bf ae72 	bge.w	802746a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8027786:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802778a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 802778e:	f1bb 0f00 	cmp.w	fp, #0
 8027792:	dc71      	bgt.n	8027878 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8027794:	9b07      	ldr	r3, [sp, #28]
 8027796:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802779a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802779c:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80277a0:	930a      	str	r3, [sp, #40]	; 0x28
 80277a2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80277a4:	2b00      	cmp	r3, #0
 80277a6:	f340 81af 	ble.w	8027b08 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 80277aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80277ae:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80277b0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80277b4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80277b8:	eef0 6a62 	vmov.f32	s13, s5
 80277bc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80277c0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80277c4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80277c8:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 80277cc:	eef0 6a43 	vmov.f32	s13, s6
 80277d0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80277d4:	ee16 5a90 	vmov	r5, s13
 80277d8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80277dc:	ee61 7a27 	vmul.f32	s15, s2, s15
 80277e0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80277e4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80277e8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80277ec:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80277f0:	ee12 2a90 	vmov	r2, s5
 80277f4:	eef0 2a47 	vmov.f32	s5, s14
 80277f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80277fc:	ee13 2a10 	vmov	r2, s6
 8027800:	9327      	str	r3, [sp, #156]	; 0x9c
 8027802:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027804:	eeb0 3a67 	vmov.f32	s6, s15
 8027808:	fb92 f3f3 	sdiv	r3, r2, r3
 802780c:	9328      	str	r3, [sp, #160]	; 0xa0
 802780e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8027810:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8027812:	3b01      	subs	r3, #1
 8027814:	9316      	str	r3, [sp, #88]	; 0x58
 8027816:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027818:	bf08      	it	eq
 802781a:	4613      	moveq	r3, r2
 802781c:	9307      	str	r3, [sp, #28]
 802781e:	e5f9      	b.n	8027414 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8027820:	2800      	cmp	r0, #0
 8027822:	f43f ae6b 	beq.w	80274fc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8027826:	f818 1001 	ldrb.w	r1, [r8, r1]
 802782a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802782e:	9108      	str	r1, [sp, #32]
 8027830:	0e09      	lsrs	r1, r1, #24
 8027832:	9110      	str	r1, [sp, #64]	; 0x40
 8027834:	e662      	b.n	80274fc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8027836:	f113 0801 	adds.w	r8, r3, #1
 802783a:	f53f af74 	bmi.w	8027726 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802783e:	4541      	cmp	r1, r8
 8027840:	f6ff af71 	blt.w	8027726 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8027844:	f11c 0801 	adds.w	r8, ip, #1
 8027848:	f53f af6d 	bmi.w	8027726 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802784c:	45c6      	cmp	lr, r8
 802784e:	f6ff af6a 	blt.w	8027726 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8027852:	b209      	sxth	r1, r1
 8027854:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8027858:	fa0f f38e 	sxth.w	r3, lr
 802785c:	9100      	str	r1, [sp, #0]
 802785e:	4639      	mov	r1, r7
 8027860:	9301      	str	r3, [sp, #4]
 8027862:	4633      	mov	r3, r6
 8027864:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8027868:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802786a:	9819      	ldr	r0, [sp, #100]	; 0x64
 802786c:	f7ff fc7b 	bl	8027166 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 8027870:	e759      	b.n	8027726 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8027872:	bf00      	nop
 8027874:	fffff800 	.word	0xfffff800
 8027878:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802787a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802787e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8027880:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8027884:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027886:	1427      	asrs	r7, r4, #16
 8027888:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802788a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802788e:	142b      	asrs	r3, r5, #16
 8027890:	fb01 7303 	mla	r3, r1, r3, r7
 8027894:	18e7      	adds	r7, r4, r3
 8027896:	5ce3      	ldrb	r3, [r4, r3]
 8027898:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802789c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80278a0:	2a00      	cmp	r2, #0
 80278a2:	f000 8127 	beq.w	8027af4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 80278a6:	f897 e001 	ldrb.w	lr, [r7, #1]
 80278aa:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 80278ae:	940d      	str	r4, [sp, #52]	; 0x34
 80278b0:	0e24      	lsrs	r4, r4, #24
 80278b2:	9414      	str	r4, [sp, #80]	; 0x50
 80278b4:	b170      	cbz	r0, 80278d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 80278b6:	eb07 0e01 	add.w	lr, r7, r1
 80278ba:	5c79      	ldrb	r1, [r7, r1]
 80278bc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80278c0:	9109      	str	r1, [sp, #36]	; 0x24
 80278c2:	0e09      	lsrs	r1, r1, #24
 80278c4:	9111      	str	r1, [sp, #68]	; 0x44
 80278c6:	f89e 1001 	ldrb.w	r1, [lr, #1]
 80278ca:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80278ce:	910e      	str	r1, [sp, #56]	; 0x38
 80278d0:	0e09      	lsrs	r1, r1, #24
 80278d2:	9115      	str	r1, [sp, #84]	; 0x54
 80278d4:	b292      	uxth	r2, r2
 80278d6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80278d8:	b280      	uxth	r0, r0
 80278da:	fb02 f800 	mul.w	r8, r2, r0
 80278de:	0112      	lsls	r2, r2, #4
 80278e0:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 80278e4:	eba2 0e08 	sub.w	lr, r2, r8
 80278e8:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80278ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80278ee:	b280      	uxth	r0, r0
 80278f0:	fa1f fe8e 	uxth.w	lr, lr
 80278f4:	1a09      	subs	r1, r1, r0
 80278f6:	fb0e f202 	mul.w	r2, lr, r2
 80278fa:	b289      	uxth	r1, r1
 80278fc:	fb01 220c 	mla	r2, r1, ip, r2
 8027900:	fb00 2204 	mla	r2, r0, r4, r2
 8027904:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8027906:	fb08 2204 	mla	r2, r8, r4, r2
 802790a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802790e:	2a00      	cmp	r2, #0
 8027910:	f000 80e5 	beq.w	8027ade <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 8027914:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8027918:	d019      	beq.n	802794e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 802791a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802791e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027922:	fb0c fa0a 	mul.w	sl, ip, sl
 8027926:	fb0c fc03 	mul.w	ip, ip, r3
 802792a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802792e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8027932:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8027936:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802793a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802793e:	4453      	add	r3, sl
 8027940:	0a3f      	lsrs	r7, r7, #8
 8027942:	0a1b      	lsrs	r3, r3, #8
 8027944:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8027948:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802794c:	433b      	orrs	r3, r7
 802794e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8027950:	2cff      	cmp	r4, #255	; 0xff
 8027952:	d020      	beq.n	8027996 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 8027954:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8027956:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802795a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802795c:	4367      	muls	r7, r4
 802795e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8027960:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027964:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8027968:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802796a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802796e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027972:	fb04 fa0a 	mul.w	sl, r4, sl
 8027976:	44bc      	add	ip, r7
 8027978:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802797c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027980:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027984:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027988:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802798c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027990:	ea4c 040a 	orr.w	r4, ip, sl
 8027994:	940d      	str	r4, [sp, #52]	; 0x34
 8027996:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8027998:	2cff      	cmp	r4, #255	; 0xff
 802799a:	d020      	beq.n	80279de <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 802799c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802799e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80279a2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80279a4:	4367      	muls	r7, r4
 80279a6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80279a8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80279ac:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80279b0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80279b2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80279b6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80279ba:	fb04 fa0a 	mul.w	sl, r4, sl
 80279be:	44bc      	add	ip, r7
 80279c0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80279c4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80279c8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80279cc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80279d0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80279d4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80279d8:	ea4c 040a 	orr.w	r4, ip, sl
 80279dc:	9409      	str	r4, [sp, #36]	; 0x24
 80279de:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80279e0:	2cff      	cmp	r4, #255	; 0xff
 80279e2:	d020      	beq.n	8027a26 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 80279e4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80279e6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80279ea:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80279ec:	4367      	muls	r7, r4
 80279ee:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80279f0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80279f4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80279f8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80279fa:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80279fe:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027a02:	fb04 fa0a 	mul.w	sl, r4, sl
 8027a06:	44bc      	add	ip, r7
 8027a08:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8027a0c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027a10:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027a14:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027a18:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027a1c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027a20:	ea4c 040a 	orr.w	r4, ip, sl
 8027a24:	940e      	str	r4, [sp, #56]	; 0x38
 8027a26:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8027a28:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8027a2c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027a30:	43d2      	mvns	r2, r2
 8027a32:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8027a36:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8027a38:	b2d2      	uxtb	r2, r2
 8027a3a:	fb0e f707 	mul.w	r7, lr, r7
 8027a3e:	fb01 770c 	mla	r7, r1, ip, r7
 8027a42:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8027a46:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8027a48:	fb00 770c 	mla	r7, r0, ip, r7
 8027a4c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8027a50:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8027a52:	fb08 770c 	mla	r7, r8, ip, r7
 8027a56:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8027a5a:	fb0e fe0c 	mul.w	lr, lr, ip
 8027a5e:	0a3f      	lsrs	r7, r7, #8
 8027a60:	fb01 e303 	mla	r3, r1, r3, lr
 8027a64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8027a66:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8027a6a:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8027a6e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8027a70:	fb00 330a 	mla	r3, r0, sl, r3
 8027a74:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8027a78:	fb08 3c0c 	mla	ip, r8, ip, r3
 8027a7c:	f8b9 3000 	ldrh.w	r3, [r9]
 8027a80:	1218      	asrs	r0, r3, #8
 8027a82:	10d9      	asrs	r1, r3, #3
 8027a84:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027a88:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8027a8c:	00db      	lsls	r3, r3, #3
 8027a8e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8027a92:	4350      	muls	r0, r2
 8027a94:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8027a98:	b2db      	uxtb	r3, r3
 8027a9a:	4351      	muls	r1, r2
 8027a9c:	ea47 070c 	orr.w	r7, r7, ip
 8027aa0:	4353      	muls	r3, r2
 8027aa2:	1c42      	adds	r2, r0, #1
 8027aa4:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8027aa8:	0c3a      	lsrs	r2, r7, #16
 8027aaa:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8027aae:	4a18      	ldr	r2, [pc, #96]	; (8027b10 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 8027ab0:	b2c0      	uxtb	r0, r0
 8027ab2:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 8027ab6:	1c4a      	adds	r2, r1, #1
 8027ab8:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8027abc:	0a3a      	lsrs	r2, r7, #8
 8027abe:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8027ac2:	00c9      	lsls	r1, r1, #3
 8027ac4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8027ac8:	4301      	orrs	r1, r0
 8027aca:	1c58      	adds	r0, r3, #1
 8027acc:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8027ad0:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8027ad4:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 8027ad8:	4308      	orrs	r0, r1
 8027ada:	f8a9 0000 	strh.w	r0, [r9]
 8027ade:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8027ae0:	f109 0902 	add.w	r9, r9, #2
 8027ae4:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8027ae6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8027aea:	441a      	add	r2, r3
 8027aec:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027aee:	9225      	str	r2, [sp, #148]	; 0x94
 8027af0:	441d      	add	r5, r3
 8027af2:	e64c      	b.n	802778e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8027af4:	2800      	cmp	r0, #0
 8027af6:	f43f aeed 	beq.w	80278d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8027afa:	5c79      	ldrb	r1, [r7, r1]
 8027afc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8027b00:	9109      	str	r1, [sp, #36]	; 0x24
 8027b02:	0e09      	lsrs	r1, r1, #24
 8027b04:	9111      	str	r1, [sp, #68]	; 0x44
 8027b06:	e6e5      	b.n	80278d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8027b08:	b01b      	add	sp, #108	; 0x6c
 8027b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027b0e:	bf00      	nop
 8027b10:	fffff800 	.word	0xfffff800

08027b14 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 8027b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027b18:	b085      	sub	sp, #20
 8027b1a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 8027b1e:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8027b22:	2800      	cmp	r0, #0
 8027b24:	9103      	str	r1, [sp, #12]
 8027b26:	fb00 7406 	mla	r4, r0, r6, r7
 8027b2a:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 8027b2e:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 8027b32:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 8027b36:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8027b3a:	eb03 0904 	add.w	r9, r3, r4
 8027b3e:	9501      	str	r5, [sp, #4]
 8027b40:	f2c0 8150 	blt.w	8027de4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 8027b44:	4583      	cmp	fp, r0
 8027b46:	f340 814d 	ble.w	8027de4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 8027b4a:	2f00      	cmp	r7, #0
 8027b4c:	f2c0 8146 	blt.w	8027ddc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8027b50:	42be      	cmp	r6, r7
 8027b52:	f340 8143 	ble.w	8027ddc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8027b56:	f813 c004 	ldrb.w	ip, [r3, r4]
 8027b5a:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 8027b5e:	f64f 041f 	movw	r4, #63519	; 0xf81f
 8027b62:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8027b66:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 8027b6a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027b6e:	4355      	muls	r5, r2
 8027b70:	fb0c f203 	mul.w	r2, ip, r3
 8027b74:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8027b78:	f605 0501 	addw	r5, r5, #2049	; 0x801
 8027b7c:	441d      	add	r5, r3
 8027b7e:	f102 0320 	add.w	r3, r2, #32
 8027b82:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027b86:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 8027b8a:	0a1b      	lsrs	r3, r3, #8
 8027b8c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027b90:	431c      	orrs	r4, r3
 8027b92:	1c7b      	adds	r3, r7, #1
 8027b94:	f100 812b 	bmi.w	8027dee <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8027b98:	429e      	cmp	r6, r3
 8027b9a:	f340 8128 	ble.w	8027dee <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8027b9e:	2900      	cmp	r1, #0
 8027ba0:	f000 8128 	beq.w	8027df4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 8027ba4:	9a01      	ldr	r2, [sp, #4]
 8027ba6:	f899 3001 	ldrb.w	r3, [r9, #1]
 8027baa:	8855      	ldrh	r5, [r2, #2]
 8027bac:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8027bb0:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 8027bb4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8027bb8:	fb08 f802 	mul.w	r8, r8, r2
 8027bbc:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8027bc0:	435d      	muls	r5, r3
 8027bc2:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 8027bc6:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8027bca:	44d0      	add	r8, sl
 8027bcc:	f105 0a20 	add.w	sl, r5, #32
 8027bd0:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8027bd4:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8027bd8:	0a2d      	lsrs	r5, r5, #8
 8027bda:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8027bde:	432a      	orrs	r2, r5
 8027be0:	3001      	adds	r0, #1
 8027be2:	f100 810d 	bmi.w	8027e00 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 8027be6:	4583      	cmp	fp, r0
 8027be8:	f340 810a 	ble.w	8027e00 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 8027bec:	f1be 0f00 	cmp.w	lr, #0
 8027bf0:	f000 810b 	beq.w	8027e0a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 8027bf4:	2f00      	cmp	r7, #0
 8027bf6:	f2c0 8100 	blt.w	8027dfa <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 8027bfa:	42be      	cmp	r6, r7
 8027bfc:	f340 80fd 	ble.w	8027dfa <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 8027c00:	9801      	ldr	r0, [sp, #4]
 8027c02:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8027c06:	f819 5006 	ldrb.w	r5, [r9, r6]
 8027c0a:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 8027c0e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8027c12:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 8027c16:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8027c1a:	fb0a fa00 	mul.w	sl, sl, r0
 8027c1e:	fb05 f808 	mul.w	r8, r5, r8
 8027c22:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 8027c26:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8027c2a:	4482      	add	sl, r0
 8027c2c:	f108 0020 	add.w	r0, r8, #32
 8027c30:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8027c34:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 8027c38:	0a00      	lsrs	r0, r0, #8
 8027c3a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027c3e:	ea4b 0b00 	orr.w	fp, fp, r0
 8027c42:	3701      	adds	r7, #1
 8027c44:	f100 80e6 	bmi.w	8027e14 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 8027c48:	42be      	cmp	r6, r7
 8027c4a:	f340 80e3 	ble.w	8027e14 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 8027c4e:	2900      	cmp	r1, #0
 8027c50:	f000 80e3 	beq.w	8027e1a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 8027c54:	3601      	adds	r6, #1
 8027c56:	9801      	ldr	r0, [sp, #4]
 8027c58:	f819 7006 	ldrb.w	r7, [r9, r6]
 8027c5c:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 8027c60:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8027c64:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 8027c68:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027c6c:	fb09 f906 	mul.w	r9, r9, r6
 8027c70:	fb07 f800 	mul.w	r8, r7, r0
 8027c74:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8027c78:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8027c7c:	f609 0901 	addw	r9, r9, #2049	; 0x801
 8027c80:	44d1      	add	r9, sl
 8027c82:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 8027c86:	f108 0020 	add.w	r0, r8, #32
 8027c8a:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8027c8e:	0a00      	lsrs	r0, r0, #8
 8027c90:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027c94:	4330      	orrs	r0, r6
 8027c96:	b28e      	uxth	r6, r1
 8027c98:	fa1f f98e 	uxth.w	r9, lr
 8027c9c:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8027ca0:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8027ca4:	fb06 f809 	mul.w	r8, r6, r9
 8027ca8:	0136      	lsls	r6, r6, #4
 8027caa:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027cae:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8027cb2:	9601      	str	r6, [sp, #4]
 8027cb4:	ea4a 0404 	orr.w	r4, sl, r4
 8027cb8:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8027cbc:	fa1f f689 	uxth.w	r6, r9
 8027cc0:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027cc4:	fb11 f90e 	smulbb	r9, r1, lr
 8027cc8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027ccc:	9602      	str	r6, [sp, #8]
 8027cce:	4626      	mov	r6, r4
 8027cd0:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8027cd4:	f1ce 0410 	rsb	r4, lr, #16
 8027cd8:	ea4a 0202 	orr.w	r2, sl, r2
 8027cdc:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8027ce0:	1a64      	subs	r4, r4, r1
 8027ce2:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 8027ce6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027cea:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027cee:	434a      	muls	r2, r1
 8027cf0:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8027cf4:	ea4a 0000 	orr.w	r0, sl, r0
 8027cf8:	9903      	ldr	r1, [sp, #12]
 8027cfa:	fb04 2406 	mla	r4, r4, r6, r2
 8027cfe:	9e02      	ldr	r6, [sp, #8]
 8027d00:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8027d04:	fb09 4200 	mla	r2, r9, r0, r4
 8027d08:	ea4f 440b 	mov.w	r4, fp, lsl #16
 8027d0c:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8027d10:	8808      	ldrh	r0, [r1, #0]
 8027d12:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8027d16:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 8027d1a:	ea44 0b0b 	orr.w	fp, r4, fp
 8027d1e:	9c01      	ldr	r4, [sp, #4]
 8027d20:	b289      	uxth	r1, r1
 8027d22:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
 8027d26:	fb0e 2e0b 	mla	lr, lr, fp, r2
 8027d2a:	1ba4      	subs	r4, r4, r6
 8027d2c:	9e01      	ldr	r6, [sp, #4]
 8027d2e:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8027d32:	eba6 0608 	sub.w	r6, r6, r8
 8027d36:	b2a4      	uxth	r4, r4
 8027d38:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8027d3c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027d40:	b2b6      	uxth	r6, r6
 8027d42:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8027d46:	4373      	muls	r3, r6
 8027d48:	ea42 0e0e 	orr.w	lr, r2, lr
 8027d4c:	fb0c 3304 	mla	r3, ip, r4, r3
 8027d50:	9c02      	ldr	r4, [sp, #8]
 8027d52:	fa1f f28e 	uxth.w	r2, lr
 8027d56:	fb04 3505 	mla	r5, r4, r5, r3
 8027d5a:	10d4      	asrs	r4, r2, #3
 8027d5c:	fb08 5707 	mla	r7, r8, r7, r5
 8027d60:	1215      	asrs	r5, r2, #8
 8027d62:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8027d66:	00d2      	lsls	r2, r2, #3
 8027d68:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8027d6c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8027d70:	b2d2      	uxtb	r2, r2
 8027d72:	434f      	muls	r7, r1
 8027d74:	1c7b      	adds	r3, r7, #1
 8027d76:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8027d7a:	1203      	asrs	r3, r0, #8
 8027d7c:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 8027d80:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8027d84:	b2ff      	uxtb	r7, r7
 8027d86:	fb13 f307 	smulbb	r3, r3, r7
 8027d8a:	fb05 3501 	mla	r5, r5, r1, r3
 8027d8e:	10c3      	asrs	r3, r0, #3
 8027d90:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8027d94:	b2ad      	uxth	r5, r5
 8027d96:	fb13 f307 	smulbb	r3, r3, r7
 8027d9a:	fb04 3401 	mla	r4, r4, r1, r3
 8027d9e:	00c3      	lsls	r3, r0, #3
 8027da0:	b2db      	uxtb	r3, r3
 8027da2:	b2a4      	uxth	r4, r4
 8027da4:	fb13 f307 	smulbb	r3, r3, r7
 8027da8:	fb02 3101 	mla	r1, r2, r1, r3
 8027dac:	1c6b      	adds	r3, r5, #1
 8027dae:	1c62      	adds	r2, r4, #1
 8027db0:	b289      	uxth	r1, r1
 8027db2:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8027db6:	1c4b      	adds	r3, r1, #1
 8027db8:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8027dbc:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8027dc0:	9a03      	ldr	r2, [sp, #12]
 8027dc2:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8027dc6:	0964      	lsrs	r4, r4, #5
 8027dc8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027dcc:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8027dd0:	432b      	orrs	r3, r5
 8027dd2:	4323      	orrs	r3, r4
 8027dd4:	8013      	strh	r3, [r2, #0]
 8027dd6:	b005      	add	sp, #20
 8027dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027ddc:	f04f 0c00 	mov.w	ip, #0
 8027de0:	4664      	mov	r4, ip
 8027de2:	e6d6      	b.n	8027b92 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 8027de4:	2300      	movs	r3, #0
 8027de6:	469c      	mov	ip, r3
 8027de8:	461a      	mov	r2, r3
 8027dea:	461c      	mov	r4, r3
 8027dec:	e6f8      	b.n	8027be0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8027dee:	2300      	movs	r3, #0
 8027df0:	461a      	mov	r2, r3
 8027df2:	e6f5      	b.n	8027be0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8027df4:	460b      	mov	r3, r1
 8027df6:	460a      	mov	r2, r1
 8027df8:	e6f2      	b.n	8027be0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8027dfa:	2500      	movs	r5, #0
 8027dfc:	46ab      	mov	fp, r5
 8027dfe:	e720      	b.n	8027c42 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 8027e00:	2700      	movs	r7, #0
 8027e02:	463d      	mov	r5, r7
 8027e04:	4638      	mov	r0, r7
 8027e06:	46bb      	mov	fp, r7
 8027e08:	e745      	b.n	8027c96 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8027e0a:	4677      	mov	r7, lr
 8027e0c:	4675      	mov	r5, lr
 8027e0e:	4670      	mov	r0, lr
 8027e10:	46f3      	mov	fp, lr
 8027e12:	e740      	b.n	8027c96 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8027e14:	2700      	movs	r7, #0
 8027e16:	4638      	mov	r0, r7
 8027e18:	e73d      	b.n	8027c96 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8027e1a:	460f      	mov	r7, r1
 8027e1c:	4608      	mov	r0, r1
 8027e1e:	e73a      	b.n	8027c96 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

08027e20 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027e24:	b097      	sub	sp, #92	; 0x5c
 8027e26:	9214      	str	r2, [sp, #80]	; 0x50
 8027e28:	9308      	str	r3, [sp, #32]
 8027e2a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8027e2c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8027e30:	9015      	str	r0, [sp, #84]	; 0x54
 8027e32:	9312      	str	r3, [sp, #72]	; 0x48
 8027e34:	6850      	ldr	r0, [r2, #4]
 8027e36:	9111      	str	r1, [sp, #68]	; 0x44
 8027e38:	6812      	ldr	r2, [r2, #0]
 8027e3a:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8027e3e:	fb00 1303 	mla	r3, r0, r3, r1
 8027e42:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8027e46:	9309      	str	r3, [sp, #36]	; 0x24
 8027e48:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027e4a:	681b      	ldr	r3, [r3, #0]
 8027e4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8027e4e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027e50:	685b      	ldr	r3, [r3, #4]
 8027e52:	930c      	str	r3, [sp, #48]	; 0x30
 8027e54:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8027e58:	930a      	str	r3, [sp, #40]	; 0x28
 8027e5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8027e5c:	2b00      	cmp	r3, #0
 8027e5e:	dc03      	bgt.n	8027e68 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8027e60:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8027e62:	2b00      	cmp	r3, #0
 8027e64:	f340 83cd 	ble.w	8028602 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 8027e68:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027e6a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027e6e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027e72:	1e48      	subs	r0, r1, #1
 8027e74:	1e55      	subs	r5, r2, #1
 8027e76:	9b08      	ldr	r3, [sp, #32]
 8027e78:	2b00      	cmp	r3, #0
 8027e7a:	f340 81a5 	ble.w	80281c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8027e7e:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8027e80:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8027e82:	1436      	asrs	r6, r6, #16
 8027e84:	ea4f 4323 	mov.w	r3, r3, asr #16
 8027e88:	d406      	bmi.n	8027e98 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8027e8a:	4286      	cmp	r6, r0
 8027e8c:	da04      	bge.n	8027e98 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8027e8e:	2b00      	cmp	r3, #0
 8027e90:	db02      	blt.n	8027e98 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8027e92:	42ab      	cmp	r3, r5
 8027e94:	f2c0 8199 	blt.w	80281ca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8027e98:	3601      	adds	r6, #1
 8027e9a:	f100 8186 	bmi.w	80281aa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8027e9e:	42b1      	cmp	r1, r6
 8027ea0:	f2c0 8183 	blt.w	80281aa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8027ea4:	3301      	adds	r3, #1
 8027ea6:	f100 8180 	bmi.w	80281aa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8027eaa:	429a      	cmp	r2, r3
 8027eac:	f2c0 817d 	blt.w	80281aa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8027eb0:	9b08      	ldr	r3, [sp, #32]
 8027eb2:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8027eb6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8027eb8:	9313      	str	r3, [sp, #76]	; 0x4c
 8027eba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8027ebc:	2b00      	cmp	r3, #0
 8027ebe:	f340 81a6 	ble.w	802820e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8027ec2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8027ec4:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8027ec6:	1418      	asrs	r0, r3, #16
 8027ec8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8027eca:	142d      	asrs	r5, r5, #16
 8027ecc:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8027ed0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8027ed2:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8027ed6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027ed8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8027edc:	f100 81fa 	bmi.w	80282d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8027ee0:	f102 3eff 	add.w	lr, r2, #4294967295
 8027ee4:	4575      	cmp	r5, lr
 8027ee6:	f280 81f5 	bge.w	80282d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8027eea:	2800      	cmp	r0, #0
 8027eec:	f2c0 81f2 	blt.w	80282d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8027ef0:	f103 3eff 	add.w	lr, r3, #4294967295
 8027ef4:	4570      	cmp	r0, lr
 8027ef6:	f280 81ed 	bge.w	80282d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8027efa:	b212      	sxth	r2, r2
 8027efc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027efe:	fa1f fe81 	uxth.w	lr, r1
 8027f02:	fb00 5002 	mla	r0, r0, r2, r5
 8027f06:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8027f0a:	eb03 0a00 	add.w	sl, r3, r0
 8027f0e:	f813 9000 	ldrb.w	r9, [r3, r0]
 8027f12:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8027f16:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8027f1a:	b29b      	uxth	r3, r3
 8027f1c:	f1bc 0f00 	cmp.w	ip, #0
 8027f20:	f000 81bb 	beq.w	802829a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 8027f24:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8027f28:	eb0a 0b02 	add.w	fp, sl, r2
 8027f2c:	fa1f fa8c 	uxth.w	sl, ip
 8027f30:	940d      	str	r4, [sp, #52]	; 0x34
 8027f32:	fb0a fe0e 	mul.w	lr, sl, lr
 8027f36:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8027f3a:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8027f3e:	eba5 050e 	sub.w	r5, r5, lr
 8027f42:	940e      	str	r4, [sp, #56]	; 0x38
 8027f44:	fa1f fa8a 	uxth.w	sl, sl
 8027f48:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8027f4a:	b2ad      	uxth	r5, r5
 8027f4c:	eba3 030a 	sub.w	r3, r3, sl
 8027f50:	fb08 f505 	mul.w	r5, r8, r5
 8027f54:	b29b      	uxth	r3, r3
 8027f56:	fb09 5303 	mla	r3, r9, r3, r5
 8027f5a:	fb0a 3304 	mla	r3, sl, r4, r3
 8027f5e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8027f60:	fb0e 3304 	mla	r3, lr, r4, r3
 8027f64:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027f68:	2b00      	cmp	r3, #0
 8027f6a:	f000 8111 	beq.w	8028190 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8027f6e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8027f70:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8027f74:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8027f78:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8027f7c:	f000 8192 	beq.w	80282a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 8027f80:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8027f84:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8027f88:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027f8c:	fb0a fe0e 	mul.w	lr, sl, lr
 8027f90:	fb09 f000 	mul.w	r0, r9, r0
 8027f94:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8027f98:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8027f9c:	f100 0b20 	add.w	fp, r0, #32
 8027fa0:	44ce      	add	lr, r9
 8027fa2:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8027fa6:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8027faa:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027fae:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8027fb2:	ea4e 0909 	orr.w	r9, lr, r9
 8027fb6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8027fba:	8868      	ldrh	r0, [r5, #2]
 8027fbc:	d019      	beq.n	8027ff2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8027fbe:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8027fc2:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8027fc6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027fca:	fb0a fe0e 	mul.w	lr, sl, lr
 8027fce:	fb08 f800 	mul.w	r8, r8, r0
 8027fd2:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8027fd6:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8027fda:	f108 0b20 	add.w	fp, r8, #32
 8027fde:	4486      	add	lr, r0
 8027fe0:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8027fe4:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8027fe8:	0a00      	lsrs	r0, r0, #8
 8027fea:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027fee:	ea4e 0000 	orr.w	r0, lr, r0
 8027ff2:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8027ff6:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8027ffa:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8027ffe:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8028002:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8028006:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802800a:	ea4e 0909 	orr.w	r9, lr, r9
 802800e:	ea4a 0000 	orr.w	r0, sl, r0
 8028012:	f1bc 0f00 	cmp.w	ip, #0
 8028016:	f000 8147 	beq.w	80282a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 802801a:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 802801e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8028020:	3a01      	subs	r2, #1
 8028022:	2cff      	cmp	r4, #255	; 0xff
 8028024:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8028028:	f102 0202 	add.w	r2, r2, #2
 802802c:	eb05 0e02 	add.w	lr, r5, r2
 8028030:	5aaa      	ldrh	r2, [r5, r2]
 8028032:	d018      	beq.n	8028066 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8028034:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8028038:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802803c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8028040:	fb04 fa02 	mul.w	sl, r4, r2
 8028044:	fb08 f805 	mul.w	r8, r8, r5
 8028048:	f10a 0520 	add.w	r5, sl, #32
 802804c:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8028050:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8028054:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8028058:	4442      	add	r2, r8
 802805a:	0a2d      	lsrs	r5, r5, #8
 802805c:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8028060:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8028064:	432a      	orrs	r2, r5
 8028066:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8028068:	f8be 5002 	ldrh.w	r5, [lr, #2]
 802806c:	2cff      	cmp	r4, #255	; 0xff
 802806e:	d01a      	beq.n	80280a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 8028070:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8028074:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8028078:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802807c:	fb04 fa05 	mul.w	sl, r4, r5
 8028080:	fb08 f80e 	mul.w	r8, r8, lr
 8028084:	f10a 0e20 	add.w	lr, sl, #32
 8028088:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 802808c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8028090:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8028094:	4445      	add	r5, r8
 8028096:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802809a:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 802809e:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 80280a2:	ea45 050e 	orr.w	r5, r5, lr
 80280a6:	fb1c fe01 	smulbb	lr, ip, r1
 80280aa:	f1cc 0810 	rsb	r8, ip, #16
 80280ae:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80280b2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80280b6:	ea4f 0eee 	mov.w	lr, lr, asr #3
 80280ba:	eba8 0801 	sub.w	r8, r8, r1
 80280be:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 80280c2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80280c6:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 80280ca:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80280ce:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 80280d2:	ea4a 0202 	orr.w	r2, sl, r2
 80280d6:	4341      	muls	r1, r0
 80280d8:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 80280dc:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80280e0:	fb09 1108 	mla	r1, r9, r8, r1
 80280e4:	ea4b 0505 	orr.w	r5, fp, r5
 80280e8:	fb0c 1102 	mla	r1, ip, r2, r1
 80280ec:	fb0e 1e05 	mla	lr, lr, r5, r1
 80280f0:	ea4f 525e 	mov.w	r2, lr, lsr #21
 80280f4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80280f8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80280fc:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8028100:	ea42 0e0e 	orr.w	lr, r2, lr
 8028104:	fa1f f28e 	uxth.w	r2, lr
 8028108:	2bff      	cmp	r3, #255	; 0xff
 802810a:	d103      	bne.n	8028114 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802810c:	9912      	ldr	r1, [sp, #72]	; 0x48
 802810e:	29ff      	cmp	r1, #255	; 0xff
 8028110:	f000 80de 	beq.w	80282d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8028114:	990a      	ldr	r1, [sp, #40]	; 0x28
 8028116:	1215      	asrs	r5, r2, #8
 8028118:	8838      	ldrh	r0, [r7, #0]
 802811a:	434b      	muls	r3, r1
 802811c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8028120:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8028122:	f103 0c01 	add.w	ip, r3, #1
 8028126:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 802812a:	ea6f 2323 	mvn.w	r3, r3, asr #8
 802812e:	fa5f fc83 	uxtb.w	ip, r3
 8028132:	1203      	asrs	r3, r0, #8
 8028134:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8028138:	fb13 f30c 	smulbb	r3, r3, ip
 802813c:	fb05 3501 	mla	r5, r5, r1, r3
 8028140:	10c3      	asrs	r3, r0, #3
 8028142:	10d1      	asrs	r1, r2, #3
 8028144:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8028148:	00d2      	lsls	r2, r2, #3
 802814a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802814e:	b2ad      	uxth	r5, r5
 8028150:	fb13 f30c 	smulbb	r3, r3, ip
 8028154:	b2d2      	uxtb	r2, r2
 8028156:	fb01 3104 	mla	r1, r1, r4, r3
 802815a:	00c3      	lsls	r3, r0, #3
 802815c:	b2db      	uxtb	r3, r3
 802815e:	b289      	uxth	r1, r1
 8028160:	fb13 f30c 	smulbb	r3, r3, ip
 8028164:	fb02 3304 	mla	r3, r2, r4, r3
 8028168:	b29a      	uxth	r2, r3
 802816a:	1c6b      	adds	r3, r5, #1
 802816c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8028170:	1c53      	adds	r3, r2, #1
 8028172:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8028176:	1c4a      	adds	r2, r1, #1
 8028178:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 802817c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8028180:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8028184:	0949      	lsrs	r1, r1, #5
 8028186:	432b      	orrs	r3, r5
 8028188:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802818c:	430b      	orrs	r3, r1
 802818e:	803b      	strh	r3, [r7, #0]
 8028190:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8028192:	3702      	adds	r7, #2
 8028194:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8028196:	4413      	add	r3, r2
 8028198:	9a22      	ldr	r2, [sp, #136]	; 0x88
 802819a:	9321      	str	r3, [sp, #132]	; 0x84
 802819c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802819e:	441a      	add	r2, r3
 80281a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80281a2:	3b01      	subs	r3, #1
 80281a4:	9222      	str	r2, [sp, #136]	; 0x88
 80281a6:	9313      	str	r3, [sp, #76]	; 0x4c
 80281a8:	e687      	b.n	8027eba <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80281aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80281ac:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 80281ae:	9c22      	ldr	r4, [sp, #136]	; 0x88
 80281b0:	4433      	add	r3, r6
 80281b2:	9321      	str	r3, [sp, #132]	; 0x84
 80281b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80281b6:	441c      	add	r4, r3
 80281b8:	9b08      	ldr	r3, [sp, #32]
 80281ba:	3b01      	subs	r3, #1
 80281bc:	9422      	str	r4, [sp, #136]	; 0x88
 80281be:	9308      	str	r3, [sp, #32]
 80281c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80281c2:	3302      	adds	r3, #2
 80281c4:	9309      	str	r3, [sp, #36]	; 0x24
 80281c6:	e656      	b.n	8027e76 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 80281c8:	d028      	beq.n	802821c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 80281ca:	9b08      	ldr	r3, [sp, #32]
 80281cc:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80281ce:	3b01      	subs	r3, #1
 80281d0:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80281d2:	fb00 5003 	mla	r0, r0, r3, r5
 80281d6:	1400      	asrs	r0, r0, #16
 80281d8:	f53f ae6a 	bmi.w	8027eb0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80281dc:	3901      	subs	r1, #1
 80281de:	4288      	cmp	r0, r1
 80281e0:	f6bf ae66 	bge.w	8027eb0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80281e4:	9924      	ldr	r1, [sp, #144]	; 0x90
 80281e6:	9822      	ldr	r0, [sp, #136]	; 0x88
 80281e8:	fb01 0303 	mla	r3, r1, r3, r0
 80281ec:	141b      	asrs	r3, r3, #16
 80281ee:	f53f ae5f 	bmi.w	8027eb0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80281f2:	3a01      	subs	r2, #1
 80281f4:	4293      	cmp	r3, r2
 80281f6:	f6bf ae5b 	bge.w	8027eb0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80281fa:	9b08      	ldr	r3, [sp, #32]
 80281fc:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8028200:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8028204:	9313      	str	r3, [sp, #76]	; 0x4c
 8028206:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8028208:	2b00      	cmp	r3, #0
 802820a:	f300 8082 	bgt.w	8028312 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 802820e:	9b08      	ldr	r3, [sp, #32]
 8028210:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8028214:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028216:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802821a:	9309      	str	r3, [sp, #36]	; 0x24
 802821c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802821e:	2b00      	cmp	r3, #0
 8028220:	f340 81ef 	ble.w	8028602 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 8028224:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028228:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802822a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802822e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8028232:	eef0 6a62 	vmov.f32	s13, s5
 8028236:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802823a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802823e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028242:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
 8028246:	eef0 6a43 	vmov.f32	s13, s6
 802824a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802824e:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 8028252:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8028256:	ee61 7a27 	vmul.f32	s15, s2, s15
 802825a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802825e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8028262:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8028266:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802826a:	ee12 2a90 	vmov	r2, s5
 802826e:	eef0 2a47 	vmov.f32	s5, s14
 8028272:	fb92 f3f3 	sdiv	r3, r2, r3
 8028276:	ee13 2a10 	vmov	r2, s6
 802827a:	9323      	str	r3, [sp, #140]	; 0x8c
 802827c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802827e:	eeb0 3a67 	vmov.f32	s6, s15
 8028282:	fb92 f3f3 	sdiv	r3, r2, r3
 8028286:	9324      	str	r3, [sp, #144]	; 0x90
 8028288:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802828a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802828c:	3b01      	subs	r3, #1
 802828e:	9311      	str	r3, [sp, #68]	; 0x44
 8028290:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028292:	bf08      	it	eq
 8028294:	4613      	moveq	r3, r2
 8028296:	9308      	str	r3, [sp, #32]
 8028298:	e5df      	b.n	8027e5a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802829a:	fb08 f505 	mul.w	r5, r8, r5
 802829e:	fb09 5303 	mla	r3, r9, r3, r5
 80282a2:	e65f      	b.n	8027f64 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 80282a4:	4681      	mov	r9, r0
 80282a6:	e686      	b.n	8027fb6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 80282a8:	f1c1 0210 	rsb	r2, r1, #16
 80282ac:	4341      	muls	r1, r0
 80282ae:	fb09 1902 	mla	r9, r9, r2, r1
 80282b2:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80282b6:	ea4f 5259 	mov.w	r2, r9, lsr #21
 80282ba:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80282be:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80282c2:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80282c6:	ea42 0909 	orr.w	r9, r2, r9
 80282ca:	fa1f f289 	uxth.w	r2, r9
 80282ce:	e71b      	b.n	8028108 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 80282d0:	803a      	strh	r2, [r7, #0]
 80282d2:	e75d      	b.n	8028190 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80282d4:	f115 0e01 	adds.w	lr, r5, #1
 80282d8:	f53f af5a 	bmi.w	8028190 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80282dc:	4572      	cmp	r2, lr
 80282de:	f6ff af57 	blt.w	8028190 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80282e2:	f110 0e01 	adds.w	lr, r0, #1
 80282e6:	f53f af53 	bmi.w	8028190 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80282ea:	4573      	cmp	r3, lr
 80282ec:	f6ff af50 	blt.w	8028190 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80282f0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80282f2:	b21b      	sxth	r3, r3
 80282f4:	b212      	sxth	r2, r2
 80282f6:	9502      	str	r5, [sp, #8]
 80282f8:	9301      	str	r3, [sp, #4]
 80282fa:	9200      	str	r2, [sp, #0]
 80282fc:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8028300:	e9cd c405 	strd	ip, r4, [sp, #20]
 8028304:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 8028308:	4639      	mov	r1, r7
 802830a:	9815      	ldr	r0, [sp, #84]	; 0x54
 802830c:	f7ff fc02 	bl	8027b14 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8028310:	e73e      	b.n	8028190 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8028312:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8028314:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8028318:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802831a:	f3c3 3503 	ubfx	r5, r3, #12, #4
 802831e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028320:	fa1f fc82 	uxth.w	ip, r2
 8028324:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028328:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802832a:	ea4f 100c 	mov.w	r0, ip, lsl #4
 802832e:	141f      	asrs	r7, r3, #16
 8028330:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8028332:	141b      	asrs	r3, r3, #16
 8028334:	fb01 3707 	mla	r7, r1, r7, r3
 8028338:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802833a:	eb03 0a07 	add.w	sl, r3, r7
 802833e:	f813 9007 	ldrb.w	r9, [r3, r7]
 8028342:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8028346:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802834a:	b29b      	uxth	r3, r3
 802834c:	2d00      	cmp	r5, #0
 802834e:	f000 813d 	beq.w	80285cc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>
 8028352:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8028356:	eb0a 0b01 	add.w	fp, sl, r1
 802835a:	fa1f fa85 	uxth.w	sl, r5
 802835e:	940f      	str	r4, [sp, #60]	; 0x3c
 8028360:	fb0a fc0c 	mul.w	ip, sl, ip
 8028364:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8028368:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 802836c:	eba0 000c 	sub.w	r0, r0, ip
 8028370:	9410      	str	r4, [sp, #64]	; 0x40
 8028372:	fa1f fa8a 	uxth.w	sl, sl
 8028376:	b280      	uxth	r0, r0
 8028378:	eba3 030a 	sub.w	r3, r3, sl
 802837c:	fb08 f000 	mul.w	r0, r8, r0
 8028380:	b29b      	uxth	r3, r3
 8028382:	fb09 0303 	mla	r3, r9, r3, r0
 8028386:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8028388:	fb0a 3300 	mla	r3, sl, r0, r3
 802838c:	fb0c 3304 	mla	r3, ip, r4, r3
 8028390:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028394:	2b00      	cmp	r3, #0
 8028396:	f000 810b 	beq.w	80285b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 802839a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 802839c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80283a0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80283a2:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 80283a6:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 80283aa:	f000 8114 	beq.w	80285d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 80283ae:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80283b2:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80283b6:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80283ba:	fb0a fc0c 	mul.w	ip, sl, ip
 80283be:	fb09 f707 	mul.w	r7, r9, r7
 80283c2:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 80283c6:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80283ca:	f107 0b20 	add.w	fp, r7, #32
 80283ce:	44cc      	add	ip, r9
 80283d0:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 80283d4:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80283d8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80283dc:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80283e0:	ea4c 0909 	orr.w	r9, ip, r9
 80283e4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80283e8:	8847      	ldrh	r7, [r0, #2]
 80283ea:	d019      	beq.n	8028420 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
 80283ec:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80283f0:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80283f4:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80283f8:	fb0a fc0c 	mul.w	ip, sl, ip
 80283fc:	fb08 f807 	mul.w	r8, r8, r7
 8028400:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8028404:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8028408:	f108 0b20 	add.w	fp, r8, #32
 802840c:	44bc      	add	ip, r7
 802840e:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8028412:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8028416:	0a3f      	lsrs	r7, r7, #8
 8028418:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802841c:	ea4c 0707 	orr.w	r7, ip, r7
 8028420:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8028424:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8028428:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 802842c:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8028430:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8028434:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8028438:	ea4c 0909 	orr.w	r9, ip, r9
 802843c:	ea4a 0707 	orr.w	r7, sl, r7
 8028440:	2d00      	cmp	r5, #0
 8028442:	f000 80ca 	beq.w	80285da <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ba>
 8028446:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 802844a:	3901      	subs	r1, #1
 802844c:	0049      	lsls	r1, r1, #1
 802844e:	3102      	adds	r1, #2
 8028450:	eb00 0c01 	add.w	ip, r0, r1
 8028454:	5a41      	ldrh	r1, [r0, r1]
 8028456:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8028458:	28ff      	cmp	r0, #255	; 0xff
 802845a:	d019      	beq.n	8028490 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 802845c:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8028460:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8028462:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8028466:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802846a:	fb04 fa01 	mul.w	sl, r4, r1
 802846e:	fb08 f800 	mul.w	r8, r8, r0
 8028472:	f10a 0020 	add.w	r0, sl, #32
 8028476:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 802847a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802847e:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8028482:	4441      	add	r1, r8
 8028484:	0a00      	lsrs	r0, r0, #8
 8028486:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 802848a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802848e:	4301      	orrs	r1, r0
 8028490:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8028492:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8028496:	2cff      	cmp	r4, #255	; 0xff
 8028498:	d01a      	beq.n	80284d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
 802849a:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 802849e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80284a2:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80284a6:	fb04 fa00 	mul.w	sl, r4, r0
 80284aa:	fb08 f80c 	mul.w	r8, r8, ip
 80284ae:	f10a 0c20 	add.w	ip, sl, #32
 80284b2:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 80284b6:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80284ba:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 80284be:	4440      	add	r0, r8
 80284c0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80284c4:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 80284c8:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80284cc:	ea40 000c 	orr.w	r0, r0, ip
 80284d0:	fb15 fc02 	smulbb	ip, r5, r2
 80284d4:	f1c5 0810 	rsb	r8, r5, #16
 80284d8:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80284dc:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80284e0:	ea4f 0cec 	mov.w	ip, ip, asr #3
 80284e4:	eba8 0802 	sub.w	r8, r8, r2
 80284e8:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80284ec:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80284f0:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 80284f4:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80284f8:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 80284fc:	ea4a 0101 	orr.w	r1, sl, r1
 8028500:	437a      	muls	r2, r7
 8028502:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8028506:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802850a:	fb09 2208 	mla	r2, r9, r8, r2
 802850e:	ea4b 0000 	orr.w	r0, fp, r0
 8028512:	fb05 2201 	mla	r2, r5, r1, r2
 8028516:	fb0c 2200 	mla	r2, ip, r0, r2
 802851a:	0d57      	lsrs	r7, r2, #21
 802851c:	0952      	lsrs	r2, r2, #5
 802851e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8028522:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8028526:	433a      	orrs	r2, r7
 8028528:	2bff      	cmp	r3, #255	; 0xff
 802852a:	b292      	uxth	r2, r2
 802852c:	d102      	bne.n	8028534 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 802852e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8028530:	29ff      	cmp	r1, #255	; 0xff
 8028532:	d063      	beq.n	80285fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7dc>
 8028534:	980a      	ldr	r0, [sp, #40]	; 0x28
 8028536:	1215      	asrs	r5, r2, #8
 8028538:	f8be 1000 	ldrh.w	r1, [lr]
 802853c:	4343      	muls	r3, r0
 802853e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8028540:	10cf      	asrs	r7, r1, #3
 8028542:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8028546:	1c58      	adds	r0, r3, #1
 8028548:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802854c:	eb00 2323 	add.w	r3, r0, r3, asr #8
 8028550:	1208      	asrs	r0, r1, #8
 8028552:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8028556:	00c9      	lsls	r1, r1, #3
 8028558:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802855c:	b2db      	uxtb	r3, r3
 802855e:	b2c9      	uxtb	r1, r1
 8028560:	fb10 f003 	smulbb	r0, r0, r3
 8028564:	fb11 f103 	smulbb	r1, r1, r3
 8028568:	fb05 0504 	mla	r5, r5, r4, r0
 802856c:	10d0      	asrs	r0, r2, #3
 802856e:	fb17 f703 	smulbb	r7, r7, r3
 8028572:	00d2      	lsls	r2, r2, #3
 8028574:	b2ad      	uxth	r5, r5
 8028576:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802857a:	b2d2      	uxtb	r2, r2
 802857c:	fb00 7004 	mla	r0, r0, r4, r7
 8028580:	1c6b      	adds	r3, r5, #1
 8028582:	fb02 1204 	mla	r2, r2, r4, r1
 8028586:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802858a:	b292      	uxth	r2, r2
 802858c:	b280      	uxth	r0, r0
 802858e:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8028592:	1c57      	adds	r7, r2, #1
 8028594:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8028598:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 802859c:	433d      	orrs	r5, r7
 802859e:	1c47      	adds	r7, r0, #1
 80285a0:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 80285a4:	097f      	lsrs	r7, r7, #5
 80285a6:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80285aa:	433d      	orrs	r5, r7
 80285ac:	f8ae 5000 	strh.w	r5, [lr]
 80285b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80285b2:	f10e 0e02 	add.w	lr, lr, #2
 80285b6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80285b8:	4413      	add	r3, r2
 80285ba:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80285bc:	9321      	str	r3, [sp, #132]	; 0x84
 80285be:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80285c0:	441a      	add	r2, r3
 80285c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80285c4:	3b01      	subs	r3, #1
 80285c6:	9222      	str	r2, [sp, #136]	; 0x88
 80285c8:	9313      	str	r3, [sp, #76]	; 0x4c
 80285ca:	e61c      	b.n	8028206 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 80285cc:	fb08 f000 	mul.w	r0, r8, r0
 80285d0:	fb09 0303 	mla	r3, r9, r3, r0
 80285d4:	e6dc      	b.n	8028390 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
 80285d6:	46b9      	mov	r9, r7
 80285d8:	e704      	b.n	80283e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 80285da:	f1c2 0110 	rsb	r1, r2, #16
 80285de:	437a      	muls	r2, r7
 80285e0:	fb09 2901 	mla	r9, r9, r1, r2
 80285e4:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80285e8:	ea4f 5059 	mov.w	r0, r9, lsr #21
 80285ec:	ea4f 1259 	mov.w	r2, r9, lsr #5
 80285f0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80285f4:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80285f8:	4302      	orrs	r2, r0
 80285fa:	e795      	b.n	8028528 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
 80285fc:	f8ae 2000 	strh.w	r2, [lr]
 8028600:	e7d6      	b.n	80285b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 8028602:	b017      	add	sp, #92	; 0x5c
 8028604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08028608 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8028608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802860c:	b085      	sub	sp, #20
 802860e:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 8028612:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8028616:	2800      	cmp	r0, #0
 8028618:	9103      	str	r1, [sp, #12]
 802861a:	fb00 7406 	mla	r4, r0, r6, r7
 802861e:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 8028622:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 8028626:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 802862a:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 802862e:	eb02 0904 	add.w	r9, r2, r4
 8028632:	9501      	str	r5, [sp, #4]
 8028634:	f2c0 8141 	blt.w	80288ba <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 8028638:	4583      	cmp	fp, r0
 802863a:	f340 813e 	ble.w	80288ba <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 802863e:	2f00      	cmp	r7, #0
 8028640:	f2c0 8137 	blt.w	80288b2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 8028644:	42be      	cmp	r6, r7
 8028646:	f340 8134 	ble.w	80288b2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 802864a:	f812 c004 	ldrb.w	ip, [r2, r4]
 802864e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8028652:	f64f 041f 	movw	r4, #63519	; 0xf81f
 8028656:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802865a:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 802865e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028662:	4355      	muls	r5, r2
 8028664:	fb0c f203 	mul.w	r2, ip, r3
 8028668:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 802866c:	f605 0501 	addw	r5, r5, #2049	; 0x801
 8028670:	441d      	add	r5, r3
 8028672:	f102 0320 	add.w	r3, r2, #32
 8028676:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802867a:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 802867e:	0a1b      	lsrs	r3, r3, #8
 8028680:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028684:	431c      	orrs	r4, r3
 8028686:	1c7b      	adds	r3, r7, #1
 8028688:	f100 811c 	bmi.w	80288c4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 802868c:	429e      	cmp	r6, r3
 802868e:	f340 8119 	ble.w	80288c4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8028692:	2900      	cmp	r1, #0
 8028694:	f000 8119 	beq.w	80288ca <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 8028698:	9a01      	ldr	r2, [sp, #4]
 802869a:	f899 3001 	ldrb.w	r3, [r9, #1]
 802869e:	8855      	ldrh	r5, [r2, #2]
 80286a0:	ea4f 08e3 	mov.w	r8, r3, asr #3
 80286a4:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 80286a8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80286ac:	fb08 f802 	mul.w	r8, r8, r2
 80286b0:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80286b4:	435d      	muls	r5, r3
 80286b6:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 80286ba:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80286be:	44d0      	add	r8, sl
 80286c0:	f105 0a20 	add.w	sl, r5, #32
 80286c4:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 80286c8:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 80286cc:	0a2d      	lsrs	r5, r5, #8
 80286ce:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80286d2:	432a      	orrs	r2, r5
 80286d4:	3001      	adds	r0, #1
 80286d6:	f100 80fe 	bmi.w	80288d6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 80286da:	4583      	cmp	fp, r0
 80286dc:	f340 80fb 	ble.w	80288d6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 80286e0:	f1be 0f00 	cmp.w	lr, #0
 80286e4:	f000 80fc 	beq.w	80288e0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 80286e8:	2f00      	cmp	r7, #0
 80286ea:	f2c0 80f1 	blt.w	80288d0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 80286ee:	42be      	cmp	r6, r7
 80286f0:	f340 80ee 	ble.w	80288d0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 80286f4:	9801      	ldr	r0, [sp, #4]
 80286f6:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 80286fa:	f819 5006 	ldrb.w	r5, [r9, r6]
 80286fe:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 8028702:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8028706:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 802870a:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 802870e:	fb0a fa00 	mul.w	sl, sl, r0
 8028712:	fb05 f808 	mul.w	r8, r5, r8
 8028716:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 802871a:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 802871e:	4482      	add	sl, r0
 8028720:	f108 0020 	add.w	r0, r8, #32
 8028724:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8028728:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 802872c:	0a00      	lsrs	r0, r0, #8
 802872e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8028732:	ea4b 0b00 	orr.w	fp, fp, r0
 8028736:	3701      	adds	r7, #1
 8028738:	f100 80d7 	bmi.w	80288ea <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 802873c:	42be      	cmp	r6, r7
 802873e:	f340 80d4 	ble.w	80288ea <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 8028742:	2900      	cmp	r1, #0
 8028744:	f000 80d4 	beq.w	80288f0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 8028748:	3601      	adds	r6, #1
 802874a:	9801      	ldr	r0, [sp, #4]
 802874c:	f819 7006 	ldrb.w	r7, [r9, r6]
 8028750:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 8028754:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8028758:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 802875c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8028760:	fb09 f906 	mul.w	r9, r9, r6
 8028764:	fb07 f800 	mul.w	r8, r7, r0
 8028768:	f64f 001f 	movw	r0, #63519	; 0xf81f
 802876c:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8028770:	f609 0901 	addw	r9, r9, #2049	; 0x801
 8028774:	44d1      	add	r9, sl
 8028776:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 802877a:	f108 0020 	add.w	r0, r8, #32
 802877e:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8028782:	0a00      	lsrs	r0, r0, #8
 8028784:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8028788:	4330      	orrs	r0, r6
 802878a:	b28e      	uxth	r6, r1
 802878c:	fa1f f98e 	uxth.w	r9, lr
 8028790:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8028794:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8028798:	fb06 f809 	mul.w	r8, r6, r9
 802879c:	0136      	lsls	r6, r6, #4
 802879e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80287a2:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 80287a6:	9601      	str	r6, [sp, #4]
 80287a8:	ea4a 0404 	orr.w	r4, sl, r4
 80287ac:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80287b0:	fa1f f689 	uxth.w	r6, r9
 80287b4:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80287b8:	fb11 f90e 	smulbb	r9, r1, lr
 80287bc:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80287c0:	9602      	str	r6, [sp, #8]
 80287c2:	4626      	mov	r6, r4
 80287c4:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 80287c8:	f1ce 0410 	rsb	r4, lr, #16
 80287cc:	ea4a 0202 	orr.w	r2, sl, r2
 80287d0:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80287d4:	1a64      	subs	r4, r4, r1
 80287d6:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 80287da:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80287de:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80287e2:	434a      	muls	r2, r1
 80287e4:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 80287e8:	ea4a 0000 	orr.w	r0, sl, r0
 80287ec:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 80287f0:	fb04 2406 	mla	r4, r4, r6, r2
 80287f4:	9903      	ldr	r1, [sp, #12]
 80287f6:	fb09 4200 	mla	r2, r9, r0, r4
 80287fa:	ea4f 440b 	mov.w	r4, fp, lsl #16
 80287fe:	9801      	ldr	r0, [sp, #4]
 8028800:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8028804:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8028808:	8809      	ldrh	r1, [r1, #0]
 802880a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 802880e:	ea44 0b0b 	orr.w	fp, r4, fp
 8028812:	9c02      	ldr	r4, [sp, #8]
 8028814:	1b00      	subs	r0, r0, r4
 8028816:	9c01      	ldr	r4, [sp, #4]
 8028818:	fb0e 2e0b 	mla	lr, lr, fp, r2
 802881c:	eba4 0608 	sub.w	r6, r4, r8
 8028820:	b280      	uxth	r0, r0
 8028822:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8028826:	b2b6      	uxth	r6, r6
 8028828:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 802882c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028830:	4373      	muls	r3, r6
 8028832:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8028836:	fb0c 3300 	mla	r3, ip, r0, r3
 802883a:	9802      	ldr	r0, [sp, #8]
 802883c:	ea42 0e0e 	orr.w	lr, r2, lr
 8028840:	fb00 3505 	mla	r5, r0, r5, r3
 8028844:	120b      	asrs	r3, r1, #8
 8028846:	10c8      	asrs	r0, r1, #3
 8028848:	fb08 5707 	mla	r7, r8, r7, r5
 802884c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8028850:	00c9      	lsls	r1, r1, #3
 8028852:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8028856:	ea6f 2727 	mvn.w	r7, r7, asr #8
 802885a:	fa1f f28e 	uxth.w	r2, lr
 802885e:	b2c9      	uxtb	r1, r1
 8028860:	b2ff      	uxtb	r7, r7
 8028862:	437b      	muls	r3, r7
 8028864:	4378      	muls	r0, r7
 8028866:	434f      	muls	r7, r1
 8028868:	1c59      	adds	r1, r3, #1
 802886a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802886e:	1213      	asrs	r3, r2, #8
 8028870:	f023 0307 	bic.w	r3, r3, #7
 8028874:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8028878:	1c41      	adds	r1, r0, #1
 802887a:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802887e:	10d1      	asrs	r1, r2, #3
 8028880:	021b      	lsls	r3, r3, #8
 8028882:	f021 0103 	bic.w	r1, r1, #3
 8028886:	00d2      	lsls	r2, r2, #3
 8028888:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 802888c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8028890:	00c9      	lsls	r1, r1, #3
 8028892:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8028896:	430b      	orrs	r3, r1
 8028898:	1c79      	adds	r1, r7, #1
 802889a:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 802889e:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 80288a2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80288a6:	431a      	orrs	r2, r3
 80288a8:	9b03      	ldr	r3, [sp, #12]
 80288aa:	801a      	strh	r2, [r3, #0]
 80288ac:	b005      	add	sp, #20
 80288ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80288b2:	f04f 0c00 	mov.w	ip, #0
 80288b6:	4664      	mov	r4, ip
 80288b8:	e6e5      	b.n	8028686 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 80288ba:	2300      	movs	r3, #0
 80288bc:	469c      	mov	ip, r3
 80288be:	461a      	mov	r2, r3
 80288c0:	461c      	mov	r4, r3
 80288c2:	e707      	b.n	80286d4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 80288c4:	2300      	movs	r3, #0
 80288c6:	461a      	mov	r2, r3
 80288c8:	e704      	b.n	80286d4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 80288ca:	460b      	mov	r3, r1
 80288cc:	460a      	mov	r2, r1
 80288ce:	e701      	b.n	80286d4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 80288d0:	2500      	movs	r5, #0
 80288d2:	46ab      	mov	fp, r5
 80288d4:	e72f      	b.n	8028736 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 80288d6:	2700      	movs	r7, #0
 80288d8:	463d      	mov	r5, r7
 80288da:	4638      	mov	r0, r7
 80288dc:	46bb      	mov	fp, r7
 80288de:	e754      	b.n	802878a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 80288e0:	4677      	mov	r7, lr
 80288e2:	4675      	mov	r5, lr
 80288e4:	4670      	mov	r0, lr
 80288e6:	46f3      	mov	fp, lr
 80288e8:	e74f      	b.n	802878a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 80288ea:	2700      	movs	r7, #0
 80288ec:	4638      	mov	r0, r7
 80288ee:	e74c      	b.n	802878a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 80288f0:	460f      	mov	r7, r1
 80288f2:	4608      	mov	r0, r1
 80288f4:	e749      	b.n	802878a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

080288f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80288f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80288fc:	b093      	sub	sp, #76	; 0x4c
 80288fe:	9210      	str	r2, [sp, #64]	; 0x40
 8028900:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8028902:	9011      	str	r0, [sp, #68]	; 0x44
 8028904:	910e      	str	r1, [sp, #56]	; 0x38
 8028906:	6850      	ldr	r0, [r2, #4]
 8028908:	9306      	str	r3, [sp, #24]
 802890a:	6812      	ldr	r2, [r2, #0]
 802890c:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8028910:	fb00 1303 	mla	r3, r0, r3, r1
 8028914:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8028918:	9307      	str	r3, [sp, #28]
 802891a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802891c:	681b      	ldr	r3, [r3, #0]
 802891e:	9308      	str	r3, [sp, #32]
 8028920:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028922:	685b      	ldr	r3, [r3, #4]
 8028924:	9309      	str	r3, [sp, #36]	; 0x24
 8028926:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8028928:	2b00      	cmp	r3, #0
 802892a:	dc03      	bgt.n	8028934 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802892c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802892e:	2b00      	cmp	r3, #0
 8028930:	f340 83b6 	ble.w	80290a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 8028934:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028936:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802893a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802893e:	1e48      	subs	r0, r1, #1
 8028940:	1e55      	subs	r5, r2, #1
 8028942:	9b06      	ldr	r3, [sp, #24]
 8028944:	2b00      	cmp	r3, #0
 8028946:	f340 8165 	ble.w	8028c14 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 802894a:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 802894c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802894e:	1436      	asrs	r6, r6, #16
 8028950:	ea4f 4323 	mov.w	r3, r3, asr #16
 8028954:	d406      	bmi.n	8028964 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8028956:	4286      	cmp	r6, r0
 8028958:	da04      	bge.n	8028964 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802895a:	2b00      	cmp	r3, #0
 802895c:	db02      	blt.n	8028964 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802895e:	42ab      	cmp	r3, r5
 8028960:	f2c0 8159 	blt.w	8028c16 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8028964:	3601      	adds	r6, #1
 8028966:	f100 8146 	bmi.w	8028bf6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802896a:	42b1      	cmp	r1, r6
 802896c:	f2c0 8143 	blt.w	8028bf6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8028970:	3301      	adds	r3, #1
 8028972:	f100 8140 	bmi.w	8028bf6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8028976:	429a      	cmp	r2, r3
 8028978:	f2c0 813d 	blt.w	8028bf6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 802897c:	9b06      	ldr	r3, [sp, #24]
 802897e:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8028982:	9f07      	ldr	r7, [sp, #28]
 8028984:	930f      	str	r3, [sp, #60]	; 0x3c
 8028986:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8028988:	2b00      	cmp	r3, #0
 802898a:	f340 8166 	ble.w	8028c5a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802898e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8028990:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8028992:	1418      	asrs	r0, r3, #16
 8028994:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8028996:	142d      	asrs	r5, r5, #16
 8028998:	f3c3 3103 	ubfx	r1, r3, #12, #4
 802899c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802899e:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 80289a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80289a4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80289a8:	f100 81f0 	bmi.w	8028d8c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 80289ac:	f102 3eff 	add.w	lr, r2, #4294967295
 80289b0:	4575      	cmp	r5, lr
 80289b2:	f280 81eb 	bge.w	8028d8c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 80289b6:	2800      	cmp	r0, #0
 80289b8:	f2c0 81e8 	blt.w	8028d8c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 80289bc:	f103 3eff 	add.w	lr, r3, #4294967295
 80289c0:	4570      	cmp	r0, lr
 80289c2:	f280 81e3 	bge.w	8028d8c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 80289c6:	b212      	sxth	r2, r2
 80289c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80289ca:	fa1f fe81 	uxth.w	lr, r1
 80289ce:	fb00 5002 	mla	r0, r0, r2, r5
 80289d2:	ea4f 150e 	mov.w	r5, lr, lsl #4
 80289d6:	eb03 0a00 	add.w	sl, r3, r0
 80289da:	f813 9000 	ldrb.w	r9, [r3, r0]
 80289de:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 80289e2:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80289e6:	b29b      	uxth	r3, r3
 80289e8:	f1bc 0f00 	cmp.w	ip, #0
 80289ec:	f000 817b 	beq.w	8028ce6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80289f0:	f81a 4002 	ldrb.w	r4, [sl, r2]
 80289f4:	eb0a 0b02 	add.w	fp, sl, r2
 80289f8:	fa1f fa8c 	uxth.w	sl, ip
 80289fc:	940a      	str	r4, [sp, #40]	; 0x28
 80289fe:	fb0a fe0e 	mul.w	lr, sl, lr
 8028a02:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8028a06:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8028a0a:	eba5 050e 	sub.w	r5, r5, lr
 8028a0e:	940b      	str	r4, [sp, #44]	; 0x2c
 8028a10:	fa1f fa8a 	uxth.w	sl, sl
 8028a14:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8028a16:	b2ad      	uxth	r5, r5
 8028a18:	eba3 030a 	sub.w	r3, r3, sl
 8028a1c:	fb08 f505 	mul.w	r5, r8, r5
 8028a20:	b29b      	uxth	r3, r3
 8028a22:	fb09 5303 	mla	r3, r9, r3, r5
 8028a26:	fb0a 3304 	mla	r3, sl, r4, r3
 8028a2a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8028a2c:	fb0e 3304 	mla	r3, lr, r4, r3
 8028a30:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028a34:	2b00      	cmp	r3, #0
 8028a36:	f000 80d1 	beq.w	8028bdc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8028a3a:	9c08      	ldr	r4, [sp, #32]
 8028a3c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8028a40:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8028a44:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8028a48:	f000 8152 	beq.w	8028cf0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8028a4c:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8028a50:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8028a54:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8028a58:	fb0a fe0e 	mul.w	lr, sl, lr
 8028a5c:	fb09 f000 	mul.w	r0, r9, r0
 8028a60:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8028a64:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8028a68:	f100 0b20 	add.w	fp, r0, #32
 8028a6c:	44ce      	add	lr, r9
 8028a6e:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8028a72:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8028a76:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028a7a:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8028a7e:	ea4e 0909 	orr.w	r9, lr, r9
 8028a82:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8028a86:	8868      	ldrh	r0, [r5, #2]
 8028a88:	d019      	beq.n	8028abe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8028a8a:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8028a8e:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8028a92:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8028a96:	fb0a fe0e 	mul.w	lr, sl, lr
 8028a9a:	fb08 f800 	mul.w	r8, r8, r0
 8028a9e:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8028aa2:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8028aa6:	f108 0b20 	add.w	fp, r8, #32
 8028aaa:	4486      	add	lr, r0
 8028aac:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8028ab0:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8028ab4:	0a00      	lsrs	r0, r0, #8
 8028ab6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8028aba:	ea4e 0000 	orr.w	r0, lr, r0
 8028abe:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8028ac2:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8028ac6:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8028aca:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8028ace:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8028ad2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8028ad6:	ea4e 0909 	orr.w	r9, lr, r9
 8028ada:	ea4a 0000 	orr.w	r0, sl, r0
 8028ade:	f1bc 0f00 	cmp.w	ip, #0
 8028ae2:	f000 8107 	beq.w	8028cf4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 8028ae6:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8028aea:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8028aec:	3a01      	subs	r2, #1
 8028aee:	2cff      	cmp	r4, #255	; 0xff
 8028af0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8028af4:	f102 0202 	add.w	r2, r2, #2
 8028af8:	eb05 0e02 	add.w	lr, r5, r2
 8028afc:	5aaa      	ldrh	r2, [r5, r2]
 8028afe:	d018      	beq.n	8028b32 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8028b00:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8028b04:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028b08:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8028b0c:	fb04 fa02 	mul.w	sl, r4, r2
 8028b10:	fb08 f805 	mul.w	r8, r8, r5
 8028b14:	f10a 0520 	add.w	r5, sl, #32
 8028b18:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8028b1c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8028b20:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8028b24:	4442      	add	r2, r8
 8028b26:	0a2d      	lsrs	r5, r5, #8
 8028b28:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8028b2c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8028b30:	432a      	orrs	r2, r5
 8028b32:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8028b34:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8028b38:	2cff      	cmp	r4, #255	; 0xff
 8028b3a:	d01a      	beq.n	8028b72 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8028b3c:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8028b40:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8028b44:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8028b48:	fb04 fa05 	mul.w	sl, r4, r5
 8028b4c:	fb08 f80e 	mul.w	r8, r8, lr
 8028b50:	f10a 0e20 	add.w	lr, sl, #32
 8028b54:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8028b58:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8028b5c:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8028b60:	4445      	add	r5, r8
 8028b62:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028b66:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8028b6a:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8028b6e:	ea45 050e 	orr.w	r5, r5, lr
 8028b72:	fb1c fe01 	smulbb	lr, ip, r1
 8028b76:	f1cc 0810 	rsb	r8, ip, #16
 8028b7a:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8028b7e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8028b82:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8028b86:	eba8 0801 	sub.w	r8, r8, r1
 8028b8a:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8028b8e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8028b92:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8028b96:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8028b9a:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8028b9e:	ea4a 0202 	orr.w	r2, sl, r2
 8028ba2:	4341      	muls	r1, r0
 8028ba4:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8028ba8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8028bac:	fb09 1108 	mla	r1, r9, r8, r1
 8028bb0:	ea4b 0505 	orr.w	r5, fp, r5
 8028bb4:	fb0c 1102 	mla	r1, ip, r2, r1
 8028bb8:	fb0e 1e05 	mla	lr, lr, r5, r1
 8028bbc:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8028bc0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8028bc4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028bc8:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8028bcc:	ea42 0e0e 	orr.w	lr, r2, lr
 8028bd0:	fa1f f28e 	uxth.w	r2, lr
 8028bd4:	2bff      	cmp	r3, #255	; 0xff
 8028bd6:	f040 80a1 	bne.w	8028d1c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8028bda:	803a      	strh	r2, [r7, #0]
 8028bdc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8028bde:	3702      	adds	r7, #2
 8028be0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8028be2:	4413      	add	r3, r2
 8028be4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8028be6:	931d      	str	r3, [sp, #116]	; 0x74
 8028be8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028bea:	441a      	add	r2, r3
 8028bec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8028bee:	3b01      	subs	r3, #1
 8028bf0:	921e      	str	r2, [sp, #120]	; 0x78
 8028bf2:	930f      	str	r3, [sp, #60]	; 0x3c
 8028bf4:	e6c7      	b.n	8028986 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028bf6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8028bf8:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8028bfa:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8028bfc:	4433      	add	r3, r6
 8028bfe:	931d      	str	r3, [sp, #116]	; 0x74
 8028c00:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028c02:	441c      	add	r4, r3
 8028c04:	9b06      	ldr	r3, [sp, #24]
 8028c06:	3b01      	subs	r3, #1
 8028c08:	941e      	str	r4, [sp, #120]	; 0x78
 8028c0a:	9306      	str	r3, [sp, #24]
 8028c0c:	9b07      	ldr	r3, [sp, #28]
 8028c0e:	3302      	adds	r3, #2
 8028c10:	9307      	str	r3, [sp, #28]
 8028c12:	e696      	b.n	8028942 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8028c14:	d028      	beq.n	8028c68 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8028c16:	9b06      	ldr	r3, [sp, #24]
 8028c18:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8028c1a:	3b01      	subs	r3, #1
 8028c1c:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8028c1e:	fb00 5003 	mla	r0, r0, r3, r5
 8028c22:	1400      	asrs	r0, r0, #16
 8028c24:	f53f aeaa 	bmi.w	802897c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8028c28:	3901      	subs	r1, #1
 8028c2a:	4288      	cmp	r0, r1
 8028c2c:	f6bf aea6 	bge.w	802897c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8028c30:	9920      	ldr	r1, [sp, #128]	; 0x80
 8028c32:	981e      	ldr	r0, [sp, #120]	; 0x78
 8028c34:	fb01 0303 	mla	r3, r1, r3, r0
 8028c38:	141b      	asrs	r3, r3, #16
 8028c3a:	f53f ae9f 	bmi.w	802897c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8028c3e:	3a01      	subs	r2, #1
 8028c40:	4293      	cmp	r3, r2
 8028c42:	f6bf ae9b 	bge.w	802897c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8028c46:	9b06      	ldr	r3, [sp, #24]
 8028c48:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8028c4c:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8028c50:	930f      	str	r3, [sp, #60]	; 0x3c
 8028c52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8028c54:	2b00      	cmp	r3, #0
 8028c56:	f300 80b6 	bgt.w	8028dc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 8028c5a:	9b06      	ldr	r3, [sp, #24]
 8028c5c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8028c60:	9b07      	ldr	r3, [sp, #28]
 8028c62:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8028c66:	9307      	str	r3, [sp, #28]
 8028c68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8028c6a:	2b00      	cmp	r3, #0
 8028c6c:	f340 8218 	ble.w	80290a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 8028c70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028c74:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8028c76:	ee30 0a04 	vadd.f32	s0, s0, s8
 8028c7a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8028c7e:	eef0 6a62 	vmov.f32	s13, s5
 8028c82:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8028c86:	ee31 1a05 	vadd.f32	s2, s2, s10
 8028c8a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028c8e:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 8028c92:	eef0 6a43 	vmov.f32	s13, s6
 8028c96:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028c9a:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 8028c9e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8028ca2:	ee61 7a27 	vmul.f32	s15, s2, s15
 8028ca6:	ee77 2a62 	vsub.f32	s5, s14, s5
 8028caa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8028cae:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8028cb2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8028cb6:	ee12 2a90 	vmov	r2, s5
 8028cba:	eef0 2a47 	vmov.f32	s5, s14
 8028cbe:	fb92 f3f3 	sdiv	r3, r2, r3
 8028cc2:	ee13 2a10 	vmov	r2, s6
 8028cc6:	931f      	str	r3, [sp, #124]	; 0x7c
 8028cc8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8028cca:	eeb0 3a67 	vmov.f32	s6, s15
 8028cce:	fb92 f3f3 	sdiv	r3, r2, r3
 8028cd2:	9320      	str	r3, [sp, #128]	; 0x80
 8028cd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8028cd6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8028cd8:	3b01      	subs	r3, #1
 8028cda:	930e      	str	r3, [sp, #56]	; 0x38
 8028cdc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8028cde:	bf08      	it	eq
 8028ce0:	4613      	moveq	r3, r2
 8028ce2:	9306      	str	r3, [sp, #24]
 8028ce4:	e61f      	b.n	8028926 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8028ce6:	fb08 f505 	mul.w	r5, r8, r5
 8028cea:	fb09 5303 	mla	r3, r9, r3, r5
 8028cee:	e69f      	b.n	8028a30 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8028cf0:	4681      	mov	r9, r0
 8028cf2:	e6c6      	b.n	8028a82 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8028cf4:	f1c1 0210 	rsb	r2, r1, #16
 8028cf8:	4341      	muls	r1, r0
 8028cfa:	fb09 1902 	mla	r9, r9, r2, r1
 8028cfe:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8028d02:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8028d06:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8028d0a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028d0e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8028d12:	ea42 0909 	orr.w	r9, r2, r9
 8028d16:	fa1f f289 	uxth.w	r2, r9
 8028d1a:	e75b      	b.n	8028bd4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
 8028d1c:	f8b7 c000 	ldrh.w	ip, [r7]
 8028d20:	43db      	mvns	r3, r3
 8028d22:	ea4f 202c 	mov.w	r0, ip, asr #8
 8028d26:	fa5f fe83 	uxtb.w	lr, r3
 8028d2a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8028d2e:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8028d32:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8028d36:	fb00 f00e 	mul.w	r0, r0, lr
 8028d3a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8028d3e:	b2db      	uxtb	r3, r3
 8028d40:	1c41      	adds	r1, r0, #1
 8028d42:	fb05 f50e 	mul.w	r5, r5, lr
 8028d46:	fb03 f30e 	mul.w	r3, r3, lr
 8028d4a:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8028d4e:	1211      	asrs	r1, r2, #8
 8028d50:	f021 0107 	bic.w	r1, r1, #7
 8028d54:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8028d58:	48d3      	ldr	r0, [pc, #844]	; (80290a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 8028d5a:	b2c9      	uxtb	r1, r1
 8028d5c:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 8028d60:	1c69      	adds	r1, r5, #1
 8028d62:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8028d66:	10d1      	asrs	r1, r2, #3
 8028d68:	00d2      	lsls	r2, r2, #3
 8028d6a:	f021 0103 	bic.w	r1, r1, #3
 8028d6e:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8028d72:	00c9      	lsls	r1, r1, #3
 8028d74:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8028d78:	4301      	orrs	r1, r0
 8028d7a:	1c58      	adds	r0, r3, #1
 8028d7c:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8028d80:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8028d84:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8028d88:	430a      	orrs	r2, r1
 8028d8a:	e726      	b.n	8028bda <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 8028d8c:	f115 0e01 	adds.w	lr, r5, #1
 8028d90:	f53f af24 	bmi.w	8028bdc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8028d94:	4572      	cmp	r2, lr
 8028d96:	f6ff af21 	blt.w	8028bdc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8028d9a:	f110 0e01 	adds.w	lr, r0, #1
 8028d9e:	f53f af1d 	bmi.w	8028bdc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8028da2:	4573      	cmp	r3, lr
 8028da4:	f6ff af1a 	blt.w	8028bdc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8028da8:	b21b      	sxth	r3, r3
 8028daa:	b212      	sxth	r2, r2
 8028dac:	9301      	str	r3, [sp, #4]
 8028dae:	9200      	str	r2, [sp, #0]
 8028db0:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8028db4:	e9cd 5002 	strd	r5, r0, [sp, #8]
 8028db8:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8028dbc:	4639      	mov	r1, r7
 8028dbe:	9811      	ldr	r0, [sp, #68]	; 0x44
 8028dc0:	f7ff fc22 	bl	8028608 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8028dc4:	e70a      	b.n	8028bdc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8028dc6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8028dc8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8028dcc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8028dce:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8028dd2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028dd4:	fa1f fc82 	uxth.w	ip, r2
 8028dd8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028ddc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8028dde:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8028de2:	141f      	asrs	r7, r3, #16
 8028de4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8028de6:	141b      	asrs	r3, r3, #16
 8028de8:	fb01 3707 	mla	r7, r1, r7, r3
 8028dec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028dee:	eb03 0a07 	add.w	sl, r3, r7
 8028df2:	f813 9007 	ldrb.w	r9, [r3, r7]
 8028df6:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8028dfa:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8028dfe:	b29b      	uxth	r3, r3
 8028e00:	2d00      	cmp	r5, #0
 8028e02:	f000 80fe 	beq.w	8029002 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
 8028e06:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8028e0a:	eb0a 0b01 	add.w	fp, sl, r1
 8028e0e:	fa1f fa85 	uxth.w	sl, r5
 8028e12:	940c      	str	r4, [sp, #48]	; 0x30
 8028e14:	fb0a fc0c 	mul.w	ip, sl, ip
 8028e18:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8028e1c:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8028e20:	eba0 000c 	sub.w	r0, r0, ip
 8028e24:	940d      	str	r4, [sp, #52]	; 0x34
 8028e26:	fa1f fa8a 	uxth.w	sl, sl
 8028e2a:	b280      	uxth	r0, r0
 8028e2c:	eba3 030a 	sub.w	r3, r3, sl
 8028e30:	fb08 f000 	mul.w	r0, r8, r0
 8028e34:	b29b      	uxth	r3, r3
 8028e36:	fb09 0303 	mla	r3, r9, r3, r0
 8028e3a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8028e3c:	fb0a 3300 	mla	r3, sl, r0, r3
 8028e40:	fb0c 3304 	mla	r3, ip, r4, r3
 8028e44:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028e48:	2b00      	cmp	r3, #0
 8028e4a:	f000 80cc 	beq.w	8028fe6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 8028e4e:	9808      	ldr	r0, [sp, #32]
 8028e50:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8028e54:	9c08      	ldr	r4, [sp, #32]
 8028e56:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8028e5a:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8028e5e:	f000 80d5 	beq.w	802900c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 8028e62:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8028e66:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8028e6a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8028e6e:	fb0a fc0c 	mul.w	ip, sl, ip
 8028e72:	fb09 f707 	mul.w	r7, r9, r7
 8028e76:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8028e7a:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8028e7e:	f107 0b20 	add.w	fp, r7, #32
 8028e82:	44cc      	add	ip, r9
 8028e84:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8028e88:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8028e8c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028e90:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8028e94:	ea4c 0909 	orr.w	r9, ip, r9
 8028e98:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8028e9c:	8847      	ldrh	r7, [r0, #2]
 8028e9e:	d019      	beq.n	8028ed4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5dc>
 8028ea0:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8028ea4:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8028ea8:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8028eac:	fb0a fc0c 	mul.w	ip, sl, ip
 8028eb0:	fb08 f807 	mul.w	r8, r8, r7
 8028eb4:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8028eb8:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8028ebc:	f108 0b20 	add.w	fp, r8, #32
 8028ec0:	44bc      	add	ip, r7
 8028ec2:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8028ec6:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8028eca:	0a3f      	lsrs	r7, r7, #8
 8028ecc:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8028ed0:	ea4c 0707 	orr.w	r7, ip, r7
 8028ed4:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8028ed8:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8028edc:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8028ee0:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8028ee4:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8028ee8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8028eec:	ea4c 0909 	orr.w	r9, ip, r9
 8028ef0:	ea4a 0707 	orr.w	r7, sl, r7
 8028ef4:	2d00      	cmp	r5, #0
 8028ef6:	f000 808b 	beq.w	8029010 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8028efa:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8028efe:	3901      	subs	r1, #1
 8028f00:	0049      	lsls	r1, r1, #1
 8028f02:	3102      	adds	r1, #2
 8028f04:	eb00 0c01 	add.w	ip, r0, r1
 8028f08:	5a41      	ldrh	r1, [r0, r1]
 8028f0a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8028f0c:	28ff      	cmp	r0, #255	; 0xff
 8028f0e:	d019      	beq.n	8028f44 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 8028f10:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8028f14:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8028f16:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8028f1a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8028f1e:	fb04 fa01 	mul.w	sl, r4, r1
 8028f22:	fb08 f800 	mul.w	r8, r8, r0
 8028f26:	f10a 0020 	add.w	r0, sl, #32
 8028f2a:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8028f2e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8028f32:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8028f36:	4441      	add	r1, r8
 8028f38:	0a00      	lsrs	r0, r0, #8
 8028f3a:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8028f3e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8028f42:	4301      	orrs	r1, r0
 8028f44:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8028f46:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8028f4a:	2cff      	cmp	r4, #255	; 0xff
 8028f4c:	d01a      	beq.n	8028f84 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68c>
 8028f4e:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8028f52:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8028f56:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8028f5a:	fb04 fa00 	mul.w	sl, r4, r0
 8028f5e:	fb08 f80c 	mul.w	r8, r8, ip
 8028f62:	f10a 0c20 	add.w	ip, sl, #32
 8028f66:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8028f6a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8028f6e:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8028f72:	4440      	add	r0, r8
 8028f74:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028f78:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8028f7c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8028f80:	ea40 000c 	orr.w	r0, r0, ip
 8028f84:	fb15 fc02 	smulbb	ip, r5, r2
 8028f88:	f1c5 0810 	rsb	r8, r5, #16
 8028f8c:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8028f90:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8028f94:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8028f98:	eba8 0802 	sub.w	r8, r8, r2
 8028f9c:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8028fa0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8028fa4:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8028fa8:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8028fac:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8028fb0:	ea4a 0101 	orr.w	r1, sl, r1
 8028fb4:	437a      	muls	r2, r7
 8028fb6:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8028fba:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8028fbe:	fb09 2208 	mla	r2, r9, r8, r2
 8028fc2:	ea4b 0000 	orr.w	r0, fp, r0
 8028fc6:	fb05 2201 	mla	r2, r5, r1, r2
 8028fca:	fb0c 2200 	mla	r2, ip, r0, r2
 8028fce:	0d57      	lsrs	r7, r2, #21
 8028fd0:	0952      	lsrs	r2, r2, #5
 8028fd2:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8028fd6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8028fda:	433a      	orrs	r2, r7
 8028fdc:	2bff      	cmp	r3, #255	; 0xff
 8028fde:	b292      	uxth	r2, r2
 8028fe0:	d127      	bne.n	8029032 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73a>
 8028fe2:	f8ae 2000 	strh.w	r2, [lr]
 8028fe6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8028fe8:	f10e 0e02 	add.w	lr, lr, #2
 8028fec:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8028fee:	4413      	add	r3, r2
 8028ff0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8028ff2:	931d      	str	r3, [sp, #116]	; 0x74
 8028ff4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028ff6:	441a      	add	r2, r3
 8028ff8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8028ffa:	3b01      	subs	r3, #1
 8028ffc:	921e      	str	r2, [sp, #120]	; 0x78
 8028ffe:	930f      	str	r3, [sp, #60]	; 0x3c
 8029000:	e627      	b.n	8028c52 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8029002:	fb08 f000 	mul.w	r0, r8, r0
 8029006:	fb09 0303 	mla	r3, r9, r3, r0
 802900a:	e71b      	b.n	8028e44 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>
 802900c:	46b9      	mov	r9, r7
 802900e:	e743      	b.n	8028e98 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a0>
 8029010:	f1c2 0110 	rsb	r1, r2, #16
 8029014:	437a      	muls	r2, r7
 8029016:	fb09 2901 	mla	r9, r9, r1, r2
 802901a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802901e:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8029022:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8029026:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802902a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802902e:	4302      	orrs	r2, r0
 8029030:	e7d4      	b.n	8028fdc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e4>
 8029032:	f8be 7000 	ldrh.w	r7, [lr]
 8029036:	43db      	mvns	r3, r3
 8029038:	4c1b      	ldr	r4, [pc, #108]	; (80290a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 802903a:	1238      	asrs	r0, r7, #8
 802903c:	fa5f fc83 	uxtb.w	ip, r3
 8029040:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8029044:	10fd      	asrs	r5, r7, #3
 8029046:	00fb      	lsls	r3, r7, #3
 8029048:	fb00 f00c 	mul.w	r0, r0, ip
 802904c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8029050:	b2db      	uxtb	r3, r3
 8029052:	fb05 f10c 	mul.w	r1, r5, ip
 8029056:	1c45      	adds	r5, r0, #1
 8029058:	fb03 f30c 	mul.w	r3, r3, ip
 802905c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8029060:	1215      	asrs	r5, r2, #8
 8029062:	f025 0507 	bic.w	r5, r5, #7
 8029066:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802906a:	1c4d      	adds	r5, r1, #1
 802906c:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8029070:	10d1      	asrs	r1, r2, #3
 8029072:	b2c0      	uxtb	r0, r0
 8029074:	f021 0103 	bic.w	r1, r1, #3
 8029078:	00d2      	lsls	r2, r2, #3
 802907a:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 802907e:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8029082:	00c9      	lsls	r1, r1, #3
 8029084:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8029088:	4308      	orrs	r0, r1
 802908a:	1c59      	adds	r1, r3, #1
 802908c:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8029090:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8029094:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8029098:	4318      	orrs	r0, r3
 802909a:	f8ae 0000 	strh.w	r0, [lr]
 802909e:	e7a2      	b.n	8028fe6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 80290a0:	b013      	add	sp, #76	; 0x4c
 80290a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80290a6:	bf00      	nop
 80290a8:	fffff800 	.word	0xfffff800

080290ac <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 80290ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80290b0:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
 80290b4:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 80290b8:	fb05 4c03 	mla	ip, r5, r3, r4
 80290bc:	2d00      	cmp	r5, #0
 80290be:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 80290c2:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 80290c6:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 80290ca:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 80290ce:	8808      	ldrh	r0, [r1, #0]
 80290d0:	f2c0 80a7 	blt.w	8029222 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 80290d4:	45aa      	cmp	sl, r5
 80290d6:	f340 80a4 	ble.w	8029222 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 80290da:	2c00      	cmp	r4, #0
 80290dc:	f2c0 809f 	blt.w	802921e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 80290e0:	42a3      	cmp	r3, r4
 80290e2:	f340 809c 	ble.w	802921e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 80290e6:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 80290ea:	1c62      	adds	r2, r4, #1
 80290ec:	f100 809c 	bmi.w	8029228 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 80290f0:	4293      	cmp	r3, r2
 80290f2:	f340 8099 	ble.w	8029228 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 80290f6:	f1b9 0f00 	cmp.w	r9, #0
 80290fa:	f000 8095 	beq.w	8029228 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 80290fe:	f8be c002 	ldrh.w	ip, [lr, #2]
 8029102:	3501      	adds	r5, #1
 8029104:	f100 8094 	bmi.w	8029230 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8029108:	45aa      	cmp	sl, r5
 802910a:	f340 8091 	ble.w	8029230 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 802910e:	2f00      	cmp	r7, #0
 8029110:	f000 808e 	beq.w	8029230 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8029114:	2c00      	cmp	r4, #0
 8029116:	f2c0 8089 	blt.w	802922c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 802911a:	42a3      	cmp	r3, r4
 802911c:	f340 8086 	ble.w	802922c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8029120:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 8029124:	3401      	adds	r4, #1
 8029126:	f100 8086 	bmi.w	8029236 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 802912a:	42a3      	cmp	r3, r4
 802912c:	f340 8083 	ble.w	8029236 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8029130:	f1b9 0f00 	cmp.w	r9, #0
 8029134:	d07f      	beq.n	8029236 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8029136:	3301      	adds	r3, #1
 8029138:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 802913c:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8029140:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 8029144:	fb19 fe07 	smulbb	lr, r9, r7
 8029148:	f1c7 0210 	rsb	r2, r7, #16
 802914c:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8029150:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8029154:	eba2 0209 	sub.w	r2, r2, r9
 8029158:	ea44 0808 	orr.w	r8, r4, r8
 802915c:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8029160:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8029164:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8029168:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 802916c:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8029170:	ea44 0c0c 	orr.w	ip, r4, ip
 8029174:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8029178:	fb04 f40c 	mul.w	r4, r4, ip
 802917c:	fb02 4808 	mla	r8, r2, r8, r4
 8029180:	041a      	lsls	r2, r3, #16
 8029182:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8029186:	b2b4      	uxth	r4, r6
 8029188:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802918c:	43f6      	mvns	r6, r6
 802918e:	4313      	orrs	r3, r2
 8029190:	042a      	lsls	r2, r5, #16
 8029192:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8029196:	b2f6      	uxtb	r6, r6
 8029198:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802919c:	fb0e 8303 	mla	r3, lr, r3, r8
 80291a0:	432a      	orrs	r2, r5
 80291a2:	fb07 3202 	mla	r2, r7, r2, r3
 80291a6:	10c7      	asrs	r7, r0, #3
 80291a8:	0d53      	lsrs	r3, r2, #21
 80291aa:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80291ae:	0952      	lsrs	r2, r2, #5
 80291b0:	fb17 f706 	smulbb	r7, r7, r6
 80291b4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80291b8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80291bc:	431a      	orrs	r2, r3
 80291be:	b293      	uxth	r3, r2
 80291c0:	1202      	asrs	r2, r0, #8
 80291c2:	121d      	asrs	r5, r3, #8
 80291c4:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80291c8:	00c0      	lsls	r0, r0, #3
 80291ca:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80291ce:	fb12 f206 	smulbb	r2, r2, r6
 80291d2:	b2c0      	uxtb	r0, r0
 80291d4:	fb05 2504 	mla	r5, r5, r4, r2
 80291d8:	10da      	asrs	r2, r3, #3
 80291da:	fb10 f006 	smulbb	r0, r0, r6
 80291de:	00db      	lsls	r3, r3, #3
 80291e0:	b2ad      	uxth	r5, r5
 80291e2:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80291e6:	b2db      	uxtb	r3, r3
 80291e8:	fb02 7204 	mla	r2, r2, r4, r7
 80291ec:	fb03 0004 	mla	r0, r3, r4, r0
 80291f0:	1c6b      	adds	r3, r5, #1
 80291f2:	b292      	uxth	r2, r2
 80291f4:	b280      	uxth	r0, r0
 80291f6:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80291fa:	1c43      	adds	r3, r0, #1
 80291fc:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8029200:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8029204:	1c50      	adds	r0, r2, #1
 8029206:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 802920a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802920e:	0952      	lsrs	r2, r2, #5
 8029210:	432b      	orrs	r3, r5
 8029212:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8029216:	4313      	orrs	r3, r2
 8029218:	800b      	strh	r3, [r1, #0]
 802921a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802921e:	4680      	mov	r8, r0
 8029220:	e763      	b.n	80290ea <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 8029222:	4684      	mov	ip, r0
 8029224:	4680      	mov	r8, r0
 8029226:	e76c      	b.n	8029102 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8029228:	4684      	mov	ip, r0
 802922a:	e76a      	b.n	8029102 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 802922c:	4605      	mov	r5, r0
 802922e:	e779      	b.n	8029124 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 8029230:	4603      	mov	r3, r0
 8029232:	4605      	mov	r5, r0
 8029234:	e782      	b.n	802913c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 8029236:	4603      	mov	r3, r0
 8029238:	e780      	b.n	802913c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

0802923a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802923a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802923e:	b093      	sub	sp, #76	; 0x4c
 8029240:	461d      	mov	r5, r3
 8029242:	9210      	str	r2, [sp, #64]	; 0x40
 8029244:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8029246:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
 802924a:	910a      	str	r1, [sp, #40]	; 0x28
 802924c:	920b      	str	r2, [sp, #44]	; 0x2c
 802924e:	6859      	ldr	r1, [r3, #4]
 8029250:	681b      	ldr	r3, [r3, #0]
 8029252:	9011      	str	r0, [sp, #68]	; 0x44
 8029254:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
 8029258:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 802925c:	fb01 2707 	mla	r7, r1, r7, r2
 8029260:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8029264:	9307      	str	r3, [sp, #28]
 8029266:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029268:	681b      	ldr	r3, [r3, #0]
 802926a:	9309      	str	r3, [sp, #36]	; 0x24
 802926c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802926e:	43db      	mvns	r3, r3
 8029270:	b2db      	uxtb	r3, r3
 8029272:	9308      	str	r3, [sp, #32]
 8029274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029276:	2b00      	cmp	r3, #0
 8029278:	dc03      	bgt.n	8029282 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802927a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802927c:	2b00      	cmp	r3, #0
 802927e:	f340 8205 	ble.w	802968c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8029282:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029284:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029288:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802928c:	1e48      	subs	r0, r1, #1
 802928e:	f102 3cff 	add.w	ip, r2, #4294967295
 8029292:	2d00      	cmp	r5, #0
 8029294:	f340 80da 	ble.w	802944c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8029298:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802929c:	ea4f 4326 	mov.w	r3, r6, asr #16
 80292a0:	d406      	bmi.n	80292b0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80292a2:	4586      	cmp	lr, r0
 80292a4:	da04      	bge.n	80292b0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80292a6:	2b00      	cmp	r3, #0
 80292a8:	db02      	blt.n	80292b0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80292aa:	4563      	cmp	r3, ip
 80292ac:	f2c0 80cf 	blt.w	802944e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80292b0:	f11e 0e01 	adds.w	lr, lr, #1
 80292b4:	f100 80c1 	bmi.w	802943a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80292b8:	4571      	cmp	r1, lr
 80292ba:	f2c0 80be 	blt.w	802943a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80292be:	3301      	adds	r3, #1
 80292c0:	f100 80bb 	bmi.w	802943a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80292c4:	429a      	cmp	r2, r3
 80292c6:	f2c0 80b8 	blt.w	802943a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80292ca:	46a9      	mov	r9, r5
 80292cc:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80292d0:	f1b9 0f00 	cmp.w	r9, #0
 80292d4:	f340 80d8 	ble.w	8029488 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 80292d8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80292da:	1421      	asrs	r1, r4, #16
 80292dc:	ea4f 4026 	mov.w	r0, r6, asr #16
 80292e0:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80292e4:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80292e8:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 80292ec:	f100 8112 	bmi.w	8029514 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 80292f0:	f10e 3aff 	add.w	sl, lr, #4294967295
 80292f4:	4551      	cmp	r1, sl
 80292f6:	f280 810d 	bge.w	8029514 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 80292fa:	2800      	cmp	r0, #0
 80292fc:	f2c0 810a 	blt.w	8029514 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8029300:	f103 3aff 	add.w	sl, r3, #4294967295
 8029304:	4550      	cmp	r0, sl
 8029306:	f280 8105 	bge.w	8029514 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 802930a:	fa0f f38e 	sxth.w	r3, lr
 802930e:	fb00 1103 	mla	r1, r0, r3, r1
 8029312:	9809      	ldr	r0, [sp, #36]	; 0x24
 8029314:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 8029318:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 802931c:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8029320:	f1bc 0f00 	cmp.w	ip, #0
 8029324:	d007      	beq.n	8029336 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 8029326:	005b      	lsls	r3, r3, #1
 8029328:	eb0a 0003 	add.w	r0, sl, r3
 802932c:	f83a 3003 	ldrh.w	r3, [sl, r3]
 8029330:	930c      	str	r3, [sp, #48]	; 0x30
 8029332:	8843      	ldrh	r3, [r0, #2]
 8029334:	930d      	str	r3, [sp, #52]	; 0x34
 8029336:	ea4f 400e 	mov.w	r0, lr, lsl #16
 802933a:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802933e:	fb12 f30c 	smulbb	r3, r2, ip
 8029342:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8029346:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802934a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802934e:	10db      	asrs	r3, r3, #3
 8029350:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8029354:	ea40 000e 	orr.w	r0, r0, lr
 8029358:	f1cc 0e10 	rsb	lr, ip, #16
 802935c:	ea4a 0101 	orr.w	r1, sl, r1
 8029360:	9f08      	ldr	r7, [sp, #32]
 8029362:	ebae 0e02 	sub.w	lr, lr, r2
 8029366:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802936a:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 802936e:	4351      	muls	r1, r2
 8029370:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8029372:	fb0e 1e00 	mla	lr, lr, r0, r1
 8029376:	990c      	ldr	r1, [sp, #48]	; 0x30
 8029378:	0410      	lsls	r0, r2, #16
 802937a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802937e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8029382:	4310      	orrs	r0, r2
 8029384:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8029386:	0412      	lsls	r2, r2, #16
 8029388:	fb03 e000 	mla	r0, r3, r0, lr
 802938c:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8029390:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8029394:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8029398:	ea42 020e 	orr.w	r2, r2, lr
 802939c:	fb03 0302 	mla	r3, r3, r2, r0
 80293a0:	f8b8 0000 	ldrh.w	r0, [r8]
 80293a4:	0d5a      	lsrs	r2, r3, #21
 80293a6:	095b      	lsrs	r3, r3, #5
 80293a8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80293ac:	1201      	asrs	r1, r0, #8
 80293ae:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80293b2:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 80293b6:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80293ba:	00c0      	lsls	r0, r0, #3
 80293bc:	4313      	orrs	r3, r2
 80293be:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80293c2:	fb11 f107 	smulbb	r1, r1, r7
 80293c6:	b2c0      	uxtb	r0, r0
 80293c8:	b29b      	uxth	r3, r3
 80293ca:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 80293ce:	fb10 f007 	smulbb	r0, r0, r7
 80293d2:	fb1e fe07 	smulbb	lr, lr, r7
 80293d6:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80293da:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80293de:	fb0c 1c02 	mla	ip, ip, r2, r1
 80293e2:	10d9      	asrs	r1, r3, #3
 80293e4:	00db      	lsls	r3, r3, #3
 80293e6:	fa1f fc8c 	uxth.w	ip, ip
 80293ea:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80293ee:	b2db      	uxtb	r3, r3
 80293f0:	fb01 e102 	mla	r1, r1, r2, lr
 80293f4:	fb03 0302 	mla	r3, r3, r2, r0
 80293f8:	b289      	uxth	r1, r1
 80293fa:	b29a      	uxth	r2, r3
 80293fc:	f10c 0301 	add.w	r3, ip, #1
 8029400:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8029404:	1c53      	adds	r3, r2, #1
 8029406:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802940a:	1c4a      	adds	r2, r1, #1
 802940c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8029410:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8029414:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8029418:	0949      	lsrs	r1, r1, #5
 802941a:	ea43 030c 	orr.w	r3, r3, ip
 802941e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8029422:	430b      	orrs	r3, r1
 8029424:	f8a8 3000 	strh.w	r3, [r8]
 8029428:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802942a:	f108 0802 	add.w	r8, r8, #2
 802942e:	f109 39ff 	add.w	r9, r9, #4294967295
 8029432:	441c      	add	r4, r3
 8029434:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8029436:	441e      	add	r6, r3
 8029438:	e74a      	b.n	80292d0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802943a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802943c:	3d01      	subs	r5, #1
 802943e:	441c      	add	r4, r3
 8029440:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8029442:	441e      	add	r6, r3
 8029444:	9b07      	ldr	r3, [sp, #28]
 8029446:	3302      	adds	r3, #2
 8029448:	9307      	str	r3, [sp, #28]
 802944a:	e722      	b.n	8029292 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802944c:	d022      	beq.n	8029494 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 802944e:	1e6b      	subs	r3, r5, #1
 8029450:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8029452:	fb00 4003 	mla	r0, r0, r3, r4
 8029456:	1400      	asrs	r0, r0, #16
 8029458:	f53f af37 	bmi.w	80292ca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802945c:	3901      	subs	r1, #1
 802945e:	4288      	cmp	r0, r1
 8029460:	f6bf af33 	bge.w	80292ca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8029464:	9920      	ldr	r1, [sp, #128]	; 0x80
 8029466:	fb01 6303 	mla	r3, r1, r3, r6
 802946a:	141b      	asrs	r3, r3, #16
 802946c:	f53f af2d 	bmi.w	80292ca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8029470:	3a01      	subs	r2, #1
 8029472:	4293      	cmp	r3, r2
 8029474:	f6bf af29 	bge.w	80292ca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8029478:	46a8      	mov	r8, r5
 802947a:	f8dd 901c 	ldr.w	r9, [sp, #28]
 802947e:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 8029482:	f1b8 0f00 	cmp.w	r8, #0
 8029486:	dc60      	bgt.n	802954a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 8029488:	9b07      	ldr	r3, [sp, #28]
 802948a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802948e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8029492:	9307      	str	r3, [sp, #28]
 8029494:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029496:	2b00      	cmp	r3, #0
 8029498:	f340 80f8 	ble.w	802968c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802949c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80294a0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80294a2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80294a6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80294aa:	eef0 6a62 	vmov.f32	s13, s5
 80294ae:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80294b2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80294b6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80294ba:	ee16 4a90 	vmov	r4, s13
 80294be:	eef0 6a43 	vmov.f32	s13, s6
 80294c2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80294c6:	ee16 6a90 	vmov	r6, s13
 80294ca:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80294ce:	ee61 7a27 	vmul.f32	s15, s2, s15
 80294d2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80294d6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80294da:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80294de:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80294e2:	ee12 2a90 	vmov	r2, s5
 80294e6:	eef0 2a47 	vmov.f32	s5, s14
 80294ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80294ee:	ee13 2a10 	vmov	r2, s6
 80294f2:	931f      	str	r3, [sp, #124]	; 0x7c
 80294f4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80294f6:	eeb0 3a67 	vmov.f32	s6, s15
 80294fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80294fe:	9320      	str	r3, [sp, #128]	; 0x80
 8029500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029502:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8029504:	3b01      	subs	r3, #1
 8029506:	930a      	str	r3, [sp, #40]	; 0x28
 8029508:	bf08      	it	eq
 802950a:	4615      	moveq	r5, r2
 802950c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802950e:	bf18      	it	ne
 8029510:	461d      	movne	r5, r3
 8029512:	e6af      	b.n	8029274 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8029514:	f111 0a01 	adds.w	sl, r1, #1
 8029518:	d486      	bmi.n	8029428 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802951a:	45d6      	cmp	lr, sl
 802951c:	db84      	blt.n	8029428 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802951e:	f110 0a01 	adds.w	sl, r0, #1
 8029522:	d481      	bmi.n	8029428 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8029524:	4553      	cmp	r3, sl
 8029526:	f6ff af7f 	blt.w	8029428 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802952a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 802952c:	b21b      	sxth	r3, r3
 802952e:	9101      	str	r1, [sp, #4]
 8029530:	4641      	mov	r1, r8
 8029532:	9300      	str	r3, [sp, #0]
 8029534:	fa0f f38e 	sxth.w	r3, lr
 8029538:	e9cd 0202 	strd	r0, r2, [sp, #8]
 802953c:	e9cd c704 	strd	ip, r7, [sp, #16]
 8029540:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8029542:	9811      	ldr	r0, [sp, #68]	; 0x44
 8029544:	f7ff fdb2 	bl	80290ac <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 8029548:	e76e      	b.n	8029428 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802954a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802954c:	1430      	asrs	r0, r6, #16
 802954e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8029550:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8029554:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029558:	1423      	asrs	r3, r4, #16
 802955a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802955e:	fb01 3000 	mla	r0, r1, r0, r3
 8029562:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029564:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8029568:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 802956c:	8858      	ldrh	r0, [r3, #2]
 802956e:	f1be 0f00 	cmp.w	lr, #0
 8029572:	d00b      	beq.n	802958c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8029574:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8029578:	3901      	subs	r1, #1
 802957a:	0049      	lsls	r1, r1, #1
 802957c:	3102      	adds	r1, #2
 802957e:	eb03 0b01 	add.w	fp, r3, r1
 8029582:	5a5b      	ldrh	r3, [r3, r1]
 8029584:	930e      	str	r3, [sp, #56]	; 0x38
 8029586:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 802958a:	930f      	str	r3, [sp, #60]	; 0x3c
 802958c:	ea4f 410c 	mov.w	r1, ip, lsl #16
 8029590:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8029594:	fb12 f30e 	smulbb	r3, r2, lr
 8029598:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 802959c:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 80295a0:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80295a4:	10db      	asrs	r3, r3, #3
 80295a6:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80295aa:	ea41 010c 	orr.w	r1, r1, ip
 80295ae:	f1ce 0c10 	rsb	ip, lr, #16
 80295b2:	ea4b 0000 	orr.w	r0, fp, r0
 80295b6:	9f08      	ldr	r7, [sp, #32]
 80295b8:	ebac 0c02 	sub.w	ip, ip, r2
 80295bc:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80295c0:	f108 38ff 	add.w	r8, r8, #4294967295
 80295c4:	4350      	muls	r0, r2
 80295c6:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 80295ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80295cc:	fb0c 0c01 	mla	ip, ip, r1, r0
 80295d0:	980e      	ldr	r0, [sp, #56]	; 0x38
 80295d2:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 80295d6:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 80295da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80295dc:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80295e0:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80295e4:	0412      	lsls	r2, r2, #16
 80295e6:	ea4b 0101 	orr.w	r1, fp, r1
 80295ea:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80295ee:	fb03 c101 	mla	r1, r3, r1, ip
 80295f2:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 80295f6:	4302      	orrs	r2, r0
 80295f8:	fb03 1202 	mla	r2, r3, r2, r1
 80295fc:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 8029600:	0952      	lsrs	r2, r2, #5
 8029602:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8029606:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 802960a:	f8b9 2000 	ldrh.w	r2, [r9]
 802960e:	ea4b 0303 	orr.w	r3, fp, r3
 8029612:	1211      	asrs	r1, r2, #8
 8029614:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8029618:	b29b      	uxth	r3, r3
 802961a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802961e:	00d2      	lsls	r2, r2, #3
 8029620:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8029624:	fb11 f107 	smulbb	r1, r1, r7
 8029628:	1218      	asrs	r0, r3, #8
 802962a:	fb1c fc07 	smulbb	ip, ip, r7
 802962e:	b2d2      	uxtb	r2, r2
 8029630:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8029634:	fb12 f207 	smulbb	r2, r2, r7
 8029638:	fb00 100a 	mla	r0, r0, sl, r1
 802963c:	10d9      	asrs	r1, r3, #3
 802963e:	00db      	lsls	r3, r3, #3
 8029640:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8029644:	b280      	uxth	r0, r0
 8029646:	b2db      	uxtb	r3, r3
 8029648:	fb01 c10a 	mla	r1, r1, sl, ip
 802964c:	fb03 230a 	mla	r3, r3, sl, r2
 8029650:	1c42      	adds	r2, r0, #1
 8029652:	b289      	uxth	r1, r1
 8029654:	b29b      	uxth	r3, r3
 8029656:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802965a:	f101 0c01 	add.w	ip, r1, #1
 802965e:	1c5a      	adds	r2, r3, #1
 8029660:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8029664:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8029668:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802966c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802966e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8029672:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8029676:	441c      	add	r4, r3
 8029678:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802967c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802967e:	4310      	orrs	r0, r2
 8029680:	441e      	add	r6, r3
 8029682:	ea40 000c 	orr.w	r0, r0, ip
 8029686:	f829 0b02 	strh.w	r0, [r9], #2
 802968a:	e6fa      	b.n	8029482 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 802968c:	b013      	add	sp, #76	; 0x4c
 802968e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08029692 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 8029692:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8029696:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 802969a:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 802969e:	fb0e 4703 	mla	r7, lr, r3, r4
 80296a2:	f1be 0f00 	cmp.w	lr, #0
 80296a6:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 80296aa:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 80296ae:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 80296b2:	8808      	ldrh	r0, [r1, #0]
 80296b4:	db60      	blt.n	8029778 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 80296b6:	45f1      	cmp	r9, lr
 80296b8:	dd5e      	ble.n	8029778 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 80296ba:	2c00      	cmp	r4, #0
 80296bc:	db5a      	blt.n	8029774 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 80296be:	42a3      	cmp	r3, r4
 80296c0:	dd58      	ble.n	8029774 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 80296c2:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 80296c6:	1c62      	adds	r2, r4, #1
 80296c8:	d459      	bmi.n	802977e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 80296ca:	4293      	cmp	r3, r2
 80296cc:	dd57      	ble.n	802977e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 80296ce:	2d00      	cmp	r5, #0
 80296d0:	d055      	beq.n	802977e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 80296d2:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 80296d6:	f11e 0e01 	adds.w	lr, lr, #1
 80296da:	d454      	bmi.n	8029786 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 80296dc:	45f1      	cmp	r9, lr
 80296de:	dd52      	ble.n	8029786 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 80296e0:	2e00      	cmp	r6, #0
 80296e2:	d050      	beq.n	8029786 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 80296e4:	2c00      	cmp	r4, #0
 80296e6:	db4c      	blt.n	8029782 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 80296e8:	42a3      	cmp	r3, r4
 80296ea:	dd4a      	ble.n	8029782 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 80296ec:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 80296f0:	3401      	adds	r4, #1
 80296f2:	d405      	bmi.n	8029700 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 80296f4:	42a3      	cmp	r3, r4
 80296f6:	dd03      	ble.n	8029700 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 80296f8:	b115      	cbz	r5, 8029700 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 80296fa:	3301      	adds	r3, #1
 80296fc:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 8029700:	fb15 f406 	smulbb	r4, r5, r6
 8029704:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8029708:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 802970c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8029710:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8029714:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 8029718:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 802971c:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8029720:	ea43 0c0c 	orr.w	ip, r3, ip
 8029724:	f1c6 0310 	rsb	r3, r6, #16
 8029728:	ea4e 0707 	orr.w	r7, lr, r7
 802972c:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8029730:	1b5b      	subs	r3, r3, r5
 8029732:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 8029736:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 802973a:	437d      	muls	r5, r7
 802973c:	fb03 5c0c 	mla	ip, r3, ip, r5
 8029740:	0403      	lsls	r3, r0, #16
 8029742:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8029746:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802974a:	4318      	orrs	r0, r3
 802974c:	0413      	lsls	r3, r2, #16
 802974e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8029752:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8029756:	fb04 c000 	mla	r0, r4, r0, ip
 802975a:	4313      	orrs	r3, r2
 802975c:	fb06 0003 	mla	r0, r6, r3, r0
 8029760:	0d43      	lsrs	r3, r0, #21
 8029762:	0940      	lsrs	r0, r0, #5
 8029764:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8029768:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802976c:	4318      	orrs	r0, r3
 802976e:	8008      	strh	r0, [r1, #0]
 8029770:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8029774:	4684      	mov	ip, r0
 8029776:	e7a6      	b.n	80296c6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 8029778:	4607      	mov	r7, r0
 802977a:	4684      	mov	ip, r0
 802977c:	e7ab      	b.n	80296d6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 802977e:	4607      	mov	r7, r0
 8029780:	e7a9      	b.n	80296d6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 8029782:	4602      	mov	r2, r0
 8029784:	e7b4      	b.n	80296f0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 8029786:	4602      	mov	r2, r0
 8029788:	e7ba      	b.n	8029700 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

0802978a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802978a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802978e:	b08f      	sub	sp, #60	; 0x3c
 8029790:	461d      	mov	r5, r3
 8029792:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8029794:	9107      	str	r1, [sp, #28]
 8029796:	920c      	str	r2, [sp, #48]	; 0x30
 8029798:	6859      	ldr	r1, [r3, #4]
 802979a:	681b      	ldr	r3, [r3, #0]
 802979c:	900d      	str	r0, [sp, #52]	; 0x34
 802979e:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
 80297a2:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
 80297a6:	fb01 2707 	mla	r7, r1, r7, r2
 80297aa:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 80297ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80297b0:	f8d3 8000 	ldr.w	r8, [r3]
 80297b4:	9b07      	ldr	r3, [sp, #28]
 80297b6:	2b00      	cmp	r3, #0
 80297b8:	dc03      	bgt.n	80297c2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80297ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80297bc:	2b00      	cmp	r3, #0
 80297be:	f340 8182 	ble.w	8029ac6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 80297c2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80297c4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80297c8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80297cc:	1e48      	subs	r0, r1, #1
 80297ce:	f102 3cff 	add.w	ip, r2, #4294967295
 80297d2:	2d00      	cmp	r5, #0
 80297d4:	f340 809b 	ble.w	802990e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 80297d8:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80297dc:	ea4f 4326 	mov.w	r3, r6, asr #16
 80297e0:	d406      	bmi.n	80297f0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80297e2:	4586      	cmp	lr, r0
 80297e4:	da04      	bge.n	80297f0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80297e6:	2b00      	cmp	r3, #0
 80297e8:	db02      	blt.n	80297f0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80297ea:	4563      	cmp	r3, ip
 80297ec:	f2c0 8090 	blt.w	8029910 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80297f0:	f11e 0e01 	adds.w	lr, lr, #1
 80297f4:	f100 8084 	bmi.w	8029900 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80297f8:	4571      	cmp	r1, lr
 80297fa:	f2c0 8081 	blt.w	8029900 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80297fe:	3301      	adds	r3, #1
 8029800:	d47e      	bmi.n	8029900 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8029802:	429a      	cmp	r2, r3
 8029804:	db7c      	blt.n	8029900 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8029806:	46aa      	mov	sl, r5
 8029808:	46b9      	mov	r9, r7
 802980a:	f1ba 0f00 	cmp.w	sl, #0
 802980e:	f340 8099 	ble.w	8029944 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8029812:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8029814:	1421      	asrs	r1, r4, #16
 8029816:	ea4f 4026 	mov.w	r0, r6, asr #16
 802981a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802981e:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8029822:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8029826:	f100 80d1 	bmi.w	80299cc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 802982a:	f10e 3bff 	add.w	fp, lr, #4294967295
 802982e:	4559      	cmp	r1, fp
 8029830:	f280 80cc 	bge.w	80299cc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8029834:	2800      	cmp	r0, #0
 8029836:	f2c0 80c9 	blt.w	80299cc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 802983a:	f103 3bff 	add.w	fp, r3, #4294967295
 802983e:	4558      	cmp	r0, fp
 8029840:	f280 80c4 	bge.w	80299cc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8029844:	fa0f fe8e 	sxth.w	lr, lr
 8029848:	fb00 110e 	mla	r1, r0, lr, r1
 802984c:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8029850:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 8029854:	8841      	ldrh	r1, [r0, #2]
 8029856:	f1bc 0f00 	cmp.w	ip, #0
 802985a:	d00b      	beq.n	8029874 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 802985c:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 8029860:	3b01      	subs	r3, #1
 8029862:	005b      	lsls	r3, r3, #1
 8029864:	3302      	adds	r3, #2
 8029866:	eb00 0e03 	add.w	lr, r0, r3
 802986a:	5ac3      	ldrh	r3, [r0, r3]
 802986c:	9308      	str	r3, [sp, #32]
 802986e:	f8be 3002 	ldrh.w	r3, [lr, #2]
 8029872:	9309      	str	r3, [sp, #36]	; 0x24
 8029874:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8029878:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 802987c:	fb12 f30c 	smulbb	r3, r2, ip
 8029880:	f1cc 0e10 	rsb	lr, ip, #16
 8029884:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8029888:	10db      	asrs	r3, r3, #3
 802988a:	ebae 0e02 	sub.w	lr, lr, r2
 802988e:	ea40 000b 	orr.w	r0, r0, fp
 8029892:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8029896:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802989a:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802989e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80298a2:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 80298a6:	ea4b 0101 	orr.w	r1, fp, r1
 80298aa:	4351      	muls	r1, r2
 80298ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80298ae:	fb0e 1e00 	mla	lr, lr, r0, r1
 80298b2:	0410      	lsls	r0, r2, #16
 80298b4:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80298b8:	9908      	ldr	r1, [sp, #32]
 80298ba:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80298be:	4310      	orrs	r0, r2
 80298c0:	9a08      	ldr	r2, [sp, #32]
 80298c2:	0412      	lsls	r2, r2, #16
 80298c4:	fb03 e000 	mla	r0, r3, r0, lr
 80298c8:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 80298cc:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 80298d0:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80298d4:	ea42 020e 	orr.w	r2, r2, lr
 80298d8:	fb03 0302 	mla	r3, r3, r2, r0
 80298dc:	0d5a      	lsrs	r2, r3, #21
 80298de:	095b      	lsrs	r3, r3, #5
 80298e0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80298e4:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80298e8:	4313      	orrs	r3, r2
 80298ea:	f8a9 3000 	strh.w	r3, [r9]
 80298ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80298f0:	f109 0902 	add.w	r9, r9, #2
 80298f4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80298f8:	441c      	add	r4, r3
 80298fa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80298fc:	441e      	add	r6, r3
 80298fe:	e784      	b.n	802980a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8029900:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8029902:	3d01      	subs	r5, #1
 8029904:	3702      	adds	r7, #2
 8029906:	441c      	add	r4, r3
 8029908:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802990a:	441e      	add	r6, r3
 802990c:	e761      	b.n	80297d2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802990e:	d01d      	beq.n	802994c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8029910:	1e6b      	subs	r3, r5, #1
 8029912:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8029914:	fb00 4003 	mla	r0, r0, r3, r4
 8029918:	1400      	asrs	r0, r0, #16
 802991a:	f53f af74 	bmi.w	8029806 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802991e:	3901      	subs	r1, #1
 8029920:	4288      	cmp	r0, r1
 8029922:	f6bf af70 	bge.w	8029806 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8029926:	991c      	ldr	r1, [sp, #112]	; 0x70
 8029928:	fb01 6303 	mla	r3, r1, r3, r6
 802992c:	141b      	asrs	r3, r3, #16
 802992e:	f53f af6a 	bmi.w	8029806 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8029932:	3a01      	subs	r2, #1
 8029934:	4293      	cmp	r3, r2
 8029936:	f6bf af66 	bge.w	8029806 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802993a:	46a9      	mov	r9, r5
 802993c:	46ba      	mov	sl, r7
 802993e:	f1b9 0f00 	cmp.w	r9, #0
 8029942:	dc5b      	bgt.n	80299fc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8029944:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8029948:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 802994c:	9b07      	ldr	r3, [sp, #28]
 802994e:	2b00      	cmp	r3, #0
 8029950:	f340 80b9 	ble.w	8029ac6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 8029954:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8029958:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802995a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802995e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8029962:	eef0 6a62 	vmov.f32	s13, s5
 8029966:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802996a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802996e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029972:	ee16 4a90 	vmov	r4, s13
 8029976:	eef0 6a43 	vmov.f32	s13, s6
 802997a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802997e:	ee16 6a90 	vmov	r6, s13
 8029982:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8029986:	ee61 7a27 	vmul.f32	s15, s2, s15
 802998a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802998e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8029992:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8029996:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802999a:	ee12 2a90 	vmov	r2, s5
 802999e:	eef0 2a47 	vmov.f32	s5, s14
 80299a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80299a6:	ee13 2a10 	vmov	r2, s6
 80299aa:	931b      	str	r3, [sp, #108]	; 0x6c
 80299ac:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80299ae:	eeb0 3a67 	vmov.f32	s6, s15
 80299b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80299b6:	931c      	str	r3, [sp, #112]	; 0x70
 80299b8:	9b07      	ldr	r3, [sp, #28]
 80299ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80299bc:	3b01      	subs	r3, #1
 80299be:	9307      	str	r3, [sp, #28]
 80299c0:	bf08      	it	eq
 80299c2:	4615      	moveq	r5, r2
 80299c4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80299c6:	bf18      	it	ne
 80299c8:	461d      	movne	r5, r3
 80299ca:	e6f3      	b.n	80297b4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 80299cc:	f111 0b01 	adds.w	fp, r1, #1
 80299d0:	d48d      	bmi.n	80298ee <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80299d2:	45de      	cmp	lr, fp
 80299d4:	db8b      	blt.n	80298ee <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80299d6:	f110 0b01 	adds.w	fp, r0, #1
 80299da:	d488      	bmi.n	80298ee <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80299dc:	455b      	cmp	r3, fp
 80299de:	db86      	blt.n	80298ee <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80299e0:	b21b      	sxth	r3, r3
 80299e2:	e9cd 1001 	strd	r1, r0, [sp, #4]
 80299e6:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 80299ea:	9300      	str	r3, [sp, #0]
 80299ec:	4642      	mov	r2, r8
 80299ee:	fa0f f38e 	sxth.w	r3, lr
 80299f2:	4649      	mov	r1, r9
 80299f4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80299f6:	f7ff fe4c 	bl	8029692 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 80299fa:	e778      	b.n	80298ee <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80299fc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80299fe:	1420      	asrs	r0, r4, #16
 8029a00:	1431      	asrs	r1, r6, #16
 8029a02:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8029a06:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8029a0a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8029a0e:	fb03 0101 	mla	r1, r3, r1, r0
 8029a12:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8029a16:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8029a1a:	8841      	ldrh	r1, [r0, #2]
 8029a1c:	f1be 0f00 	cmp.w	lr, #0
 8029a20:	d00b      	beq.n	8029a3a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8029a22:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8029a26:	3b01      	subs	r3, #1
 8029a28:	005b      	lsls	r3, r3, #1
 8029a2a:	3302      	adds	r3, #2
 8029a2c:	eb00 0b03 	add.w	fp, r0, r3
 8029a30:	5ac3      	ldrh	r3, [r0, r3]
 8029a32:	930a      	str	r3, [sp, #40]	; 0x28
 8029a34:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8029a38:	930b      	str	r3, [sp, #44]	; 0x2c
 8029a3a:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8029a3e:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8029a42:	fb12 f30e 	smulbb	r3, r2, lr
 8029a46:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8029a4a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8029a4e:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8029a52:	10db      	asrs	r3, r3, #3
 8029a54:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8029a58:	ea40 000c 	orr.w	r0, r0, ip
 8029a5c:	f1ce 0c10 	rsb	ip, lr, #16
 8029a60:	ea4b 0101 	orr.w	r1, fp, r1
 8029a64:	f109 39ff 	add.w	r9, r9, #4294967295
 8029a68:	ebac 0c02 	sub.w	ip, ip, r2
 8029a6c:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8029a70:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8029a74:	4351      	muls	r1, r2
 8029a76:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8029a78:	fb0c 1c00 	mla	ip, ip, r0, r1
 8029a7c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8029a7e:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8029a82:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 8029a86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8029a88:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8029a8c:	0412      	lsls	r2, r2, #16
 8029a8e:	ea4b 0000 	orr.w	r0, fp, r0
 8029a92:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 8029a96:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8029a9a:	fb03 c000 	mla	r0, r3, r0, ip
 8029a9e:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8029aa2:	ea42 0b0b 	orr.w	fp, r2, fp
 8029aa6:	fb03 000b 	mla	r0, r3, fp, r0
 8029aaa:	0d43      	lsrs	r3, r0, #21
 8029aac:	0940      	lsrs	r0, r0, #5
 8029aae:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8029ab2:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8029ab6:	4318      	orrs	r0, r3
 8029ab8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8029aba:	441c      	add	r4, r3
 8029abc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8029abe:	f82a 0b02 	strh.w	r0, [sl], #2
 8029ac2:	441e      	add	r6, r3
 8029ac4:	e73b      	b.n	802993e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8029ac6:	b00f      	add	sp, #60	; 0x3c
 8029ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08029acc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 8029acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029ad0:	b085      	sub	sp, #20
 8029ad2:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 8029ad6:	9102      	str	r1, [sp, #8]
 8029ad8:	2c00      	cmp	r4, #0
 8029ada:	fb04 7103 	mla	r1, r4, r3, r7
 8029ade:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8029ae2:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8029ae6:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8029aea:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8029aee:	f2c0 811b 	blt.w	8029d28 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8029af2:	45a6      	cmp	lr, r4
 8029af4:	f340 8118 	ble.w	8029d28 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8029af8:	2f00      	cmp	r7, #0
 8029afa:	f2c0 8113 	blt.w	8029d24 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8029afe:	42bb      	cmp	r3, r7
 8029b00:	f340 8110 	ble.w	8029d24 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8029b04:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8029b08:	1c7a      	adds	r2, r7, #1
 8029b0a:	f100 8110 	bmi.w	8029d2e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8029b0e:	4293      	cmp	r3, r2
 8029b10:	f340 810d 	ble.w	8029d2e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8029b14:	2e00      	cmp	r6, #0
 8029b16:	f000 810c 	beq.w	8029d32 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 8029b1a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8029b1e:	3401      	adds	r4, #1
 8029b20:	f100 810b 	bmi.w	8029d3a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8029b24:	45a6      	cmp	lr, r4
 8029b26:	f340 8108 	ble.w	8029d3a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8029b2a:	2800      	cmp	r0, #0
 8029b2c:	f000 8108 	beq.w	8029d40 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 8029b30:	2f00      	cmp	r7, #0
 8029b32:	f2c0 8100 	blt.w	8029d36 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8029b36:	42bb      	cmp	r3, r7
 8029b38:	f340 80fd 	ble.w	8029d36 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8029b3c:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8029b40:	3701      	adds	r7, #1
 8029b42:	f100 8100 	bmi.w	8029d46 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8029b46:	42bb      	cmp	r3, r7
 8029b48:	f340 80fd 	ble.w	8029d46 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8029b4c:	2e00      	cmp	r6, #0
 8029b4e:	f000 80fc 	beq.w	8029d4a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 8029b52:	3301      	adds	r3, #1
 8029b54:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8029b58:	b2b6      	uxth	r6, r6
 8029b5a:	b280      	uxth	r0, r0
 8029b5c:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8029b60:	fb00 fe06 	mul.w	lr, r0, r6
 8029b64:	0136      	lsls	r6, r6, #4
 8029b66:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8029b6a:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8029b6e:	eba6 070e 	sub.w	r7, r6, lr
 8029b72:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8029b76:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8029b7a:	b280      	uxth	r0, r0
 8029b7c:	b2bf      	uxth	r7, r7
 8029b7e:	1a1b      	subs	r3, r3, r0
 8029b80:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8029b84:	fb0a f607 	mul.w	r6, sl, r7
 8029b88:	b29b      	uxth	r3, r3
 8029b8a:	fb0b 6603 	mla	r6, fp, r3, r6
 8029b8e:	fb00 6609 	mla	r6, r0, r9, r6
 8029b92:	fb0e 6608 	mla	r6, lr, r8, r6
 8029b96:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8029b9a:	9600      	str	r6, [sp, #0]
 8029b9c:	2e00      	cmp	r6, #0
 8029b9e:	f000 80be 	beq.w	8029d1e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 8029ba2:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8029ba6:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8029baa:	9e02      	ldr	r6, [sp, #8]
 8029bac:	fb0b fc0c 	mul.w	ip, fp, ip
 8029bb0:	fb0b f505 	mul.w	r5, fp, r5
 8029bb4:	8836      	ldrh	r6, [r6, #0]
 8029bb6:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8029bba:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8029bbe:	9501      	str	r5, [sp, #4]
 8029bc0:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8029bc4:	44dc      	add	ip, fp
 8029bc6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029bca:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8029bce:	9503      	str	r5, [sp, #12]
 8029bd0:	9d01      	ldr	r5, [sp, #4]
 8029bd2:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8029bd6:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8029bda:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8029bde:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8029be2:	fb0a fc0c 	mul.w	ip, sl, ip
 8029be6:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8029bea:	fb0a fa01 	mul.w	sl, sl, r1
 8029bee:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8029bf2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8029bf6:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 8029bfa:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8029bfe:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8029c02:	4465      	add	r5, ip
 8029c04:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8029c08:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8029c0c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029c10:	fb09 fc0c 	mul.w	ip, r9, ip
 8029c14:	0a2d      	lsrs	r5, r5, #8
 8029c16:	fb09 f904 	mul.w	r9, r9, r4
 8029c1a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029c1e:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8029c22:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8029c26:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8029c2a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8029c2e:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8029c32:	437d      	muls	r5, r7
 8029c34:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8029c38:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8029c3c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8029c40:	4461      	add	r1, ip
 8029c42:	fb08 f404 	mul.w	r4, r8, r4
 8029c46:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8029c4a:	fb08 f802 	mul.w	r8, r8, r2
 8029c4e:	0a09      	lsrs	r1, r1, #8
 8029c50:	0a22      	lsrs	r2, r4, #8
 8029c52:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8029c56:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8029c5a:	fb07 f70a 	mul.w	r7, r7, sl
 8029c5e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8029c62:	4414      	add	r4, r2
 8029c64:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8029c68:	0a24      	lsrs	r4, r4, #8
 8029c6a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8029c6e:	9a03      	ldr	r2, [sp, #12]
 8029c70:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8029c74:	fb02 5503 	mla	r5, r2, r3, r5
 8029c78:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8029c7c:	9a00      	ldr	r2, [sp, #0]
 8029c7e:	fb04 540e 	mla	r4, r4, lr, r5
 8029c82:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8029c86:	1235      	asrs	r5, r6, #8
 8029c88:	fb01 4100 	mla	r1, r1, r0, r4
 8029c8c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8029c90:	0a09      	lsrs	r1, r1, #8
 8029c92:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8029c96:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 8029c9a:	fb03 7101 	mla	r1, r3, r1, r7
 8029c9e:	fb0e 1e08 	mla	lr, lr, r8, r1
 8029ca2:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8029ca6:	fb00 e101 	mla	r1, r0, r1, lr
 8029caa:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8029cae:	b287      	uxth	r7, r0
 8029cb0:	0a09      	lsrs	r1, r1, #8
 8029cb2:	437a      	muls	r2, r7
 8029cb4:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8029cb8:	1c53      	adds	r3, r2, #1
 8029cba:	4321      	orrs	r1, r4
 8029cbc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8029cc0:	0c0a      	lsrs	r2, r1, #16
 8029cc2:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8029cc6:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8029cca:	b2c8      	uxtb	r0, r1
 8029ccc:	fb12 f207 	smulbb	r2, r2, r7
 8029cd0:	fb14 f407 	smulbb	r4, r4, r7
 8029cd4:	b2db      	uxtb	r3, r3
 8029cd6:	fb10 f007 	smulbb	r0, r0, r7
 8029cda:	fb05 2503 	mla	r5, r5, r3, r2
 8029cde:	10f2      	asrs	r2, r6, #3
 8029ce0:	00f6      	lsls	r6, r6, #3
 8029ce2:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8029ce6:	b2ad      	uxth	r5, r5
 8029ce8:	b2f6      	uxtb	r6, r6
 8029cea:	fb02 4203 	mla	r2, r2, r3, r4
 8029cee:	fb06 0303 	mla	r3, r6, r3, r0
 8029cf2:	b294      	uxth	r4, r2
 8029cf4:	b299      	uxth	r1, r3
 8029cf6:	1c6b      	adds	r3, r5, #1
 8029cf8:	1c62      	adds	r2, r4, #1
 8029cfa:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8029cfe:	1c4b      	adds	r3, r1, #1
 8029d00:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8029d04:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8029d08:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8029d0c:	0952      	lsrs	r2, r2, #5
 8029d0e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8029d12:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8029d16:	432b      	orrs	r3, r5
 8029d18:	4313      	orrs	r3, r2
 8029d1a:	9a02      	ldr	r2, [sp, #8]
 8029d1c:	8013      	strh	r3, [r2, #0]
 8029d1e:	b005      	add	sp, #20
 8029d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029d24:	2500      	movs	r5, #0
 8029d26:	e6ef      	b.n	8029b08 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 8029d28:	2100      	movs	r1, #0
 8029d2a:	460d      	mov	r5, r1
 8029d2c:	e6f7      	b.n	8029b1e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8029d2e:	2100      	movs	r1, #0
 8029d30:	e6f5      	b.n	8029b1e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8029d32:	4631      	mov	r1, r6
 8029d34:	e6f3      	b.n	8029b1e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8029d36:	2400      	movs	r4, #0
 8029d38:	e702      	b.n	8029b40 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 8029d3a:	2200      	movs	r2, #0
 8029d3c:	4614      	mov	r4, r2
 8029d3e:	e70b      	b.n	8029b58 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8029d40:	4602      	mov	r2, r0
 8029d42:	4604      	mov	r4, r0
 8029d44:	e708      	b.n	8029b58 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8029d46:	2200      	movs	r2, #0
 8029d48:	e706      	b.n	8029b58 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8029d4a:	4632      	mov	r2, r6
 8029d4c:	e704      	b.n	8029b58 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

08029d4e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8029d4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029d52:	b09d      	sub	sp, #116	; 0x74
 8029d54:	9219      	str	r2, [sp, #100]	; 0x64
 8029d56:	9307      	str	r3, [sp, #28]
 8029d58:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8029d5a:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 8029d5e:	901b      	str	r0, [sp, #108]	; 0x6c
 8029d60:	931a      	str	r3, [sp, #104]	; 0x68
 8029d62:	6850      	ldr	r0, [r2, #4]
 8029d64:	9117      	str	r1, [sp, #92]	; 0x5c
 8029d66:	6812      	ldr	r2, [r2, #0]
 8029d68:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8029d6c:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 8029d70:	fb00 1303 	mla	r3, r0, r3, r1
 8029d74:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8029d78:	930a      	str	r3, [sp, #40]	; 0x28
 8029d7a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8029d7c:	681b      	ldr	r3, [r3, #0]
 8029d7e:	9310      	str	r3, [sp, #64]	; 0x40
 8029d80:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8029d84:	930b      	str	r3, [sp, #44]	; 0x2c
 8029d86:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8029d88:	2b00      	cmp	r3, #0
 8029d8a:	dc03      	bgt.n	8029d94 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8029d8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8029d8e:	2b00      	cmp	r3, #0
 8029d90:	f340 8375 	ble.w	802a47e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8029d94:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8029d96:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029d9a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8029d9e:	1e48      	subs	r0, r1, #1
 8029da0:	1e57      	subs	r7, r2, #1
 8029da2:	9b07      	ldr	r3, [sp, #28]
 8029da4:	2b00      	cmp	r3, #0
 8029da6:	f340 818e 	ble.w	802a0c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 8029daa:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8029dae:	ea4f 4326 	mov.w	r3, r6, asr #16
 8029db2:	d406      	bmi.n	8029dc2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8029db4:	4584      	cmp	ip, r0
 8029db6:	da04      	bge.n	8029dc2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8029db8:	2b00      	cmp	r3, #0
 8029dba:	db02      	blt.n	8029dc2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8029dbc:	42bb      	cmp	r3, r7
 8029dbe:	f2c0 8183 	blt.w	802a0c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8029dc2:	f11c 0c01 	adds.w	ip, ip, #1
 8029dc6:	f100 8173 	bmi.w	802a0b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8029dca:	4561      	cmp	r1, ip
 8029dcc:	f2c0 8170 	blt.w	802a0b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8029dd0:	3301      	adds	r3, #1
 8029dd2:	f100 816d 	bmi.w	802a0b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8029dd6:	429a      	cmp	r2, r3
 8029dd8:	f2c0 816a 	blt.w	802a0b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8029ddc:	9b07      	ldr	r3, [sp, #28]
 8029dde:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8029de0:	9318      	str	r3, [sp, #96]	; 0x60
 8029de2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8029de4:	2b00      	cmp	r3, #0
 8029de6:	f340 818c 	ble.w	802a102 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 8029dea:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8029dec:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8029df0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8029df2:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8029df6:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8029dfa:	1422      	asrs	r2, r4, #16
 8029dfc:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8029e00:	689b      	ldr	r3, [r3, #8]
 8029e02:	f100 81cd 	bmi.w	802a1a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8029e06:	f103 38ff 	add.w	r8, r3, #4294967295
 8029e0a:	4542      	cmp	r2, r8
 8029e0c:	f280 81c8 	bge.w	802a1a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8029e10:	f1bc 0f00 	cmp.w	ip, #0
 8029e14:	f2c0 81c4 	blt.w	802a1a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8029e18:	f10e 38ff 	add.w	r8, lr, #4294967295
 8029e1c:	45c4      	cmp	ip, r8
 8029e1e:	f280 81bf 	bge.w	802a1a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8029e22:	b21b      	sxth	r3, r3
 8029e24:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8029e26:	fb0c 2203 	mla	r2, ip, r3, r2
 8029e2a:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8029e2e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8029e32:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8029e36:	2800      	cmp	r0, #0
 8029e38:	f000 81a9 	beq.w	802a18e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 8029e3c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8029e40:	950c      	str	r5, [sp, #48]	; 0x30
 8029e42:	0e2d      	lsrs	r5, r5, #24
 8029e44:	9513      	str	r5, [sp, #76]	; 0x4c
 8029e46:	b181      	cbz	r1, 8029e6a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8029e48:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8029e4c:	3b01      	subs	r3, #1
 8029e4e:	009b      	lsls	r3, r3, #2
 8029e50:	3304      	adds	r3, #4
 8029e52:	eb08 0c03 	add.w	ip, r8, r3
 8029e56:	f858 3003 	ldr.w	r3, [r8, r3]
 8029e5a:	9308      	str	r3, [sp, #32]
 8029e5c:	0e1b      	lsrs	r3, r3, #24
 8029e5e:	9311      	str	r3, [sp, #68]	; 0x44
 8029e60:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8029e64:	930d      	str	r3, [sp, #52]	; 0x34
 8029e66:	0e1b      	lsrs	r3, r3, #24
 8029e68:	9314      	str	r3, [sp, #80]	; 0x50
 8029e6a:	b280      	uxth	r0, r0
 8029e6c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8029e6e:	b289      	uxth	r1, r1
 8029e70:	fb00 f901 	mul.w	r9, r0, r1
 8029e74:	0100      	lsls	r0, r0, #4
 8029e76:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8029e7a:	eba0 0809 	sub.w	r8, r0, r9
 8029e7e:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8029e82:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8029e84:	b289      	uxth	r1, r1
 8029e86:	fa1f f888 	uxth.w	r8, r8
 8029e8a:	1a5b      	subs	r3, r3, r1
 8029e8c:	fb08 f000 	mul.w	r0, r8, r0
 8029e90:	b29b      	uxth	r3, r3
 8029e92:	fb03 000e 	mla	r0, r3, lr, r0
 8029e96:	fb01 0005 	mla	r0, r1, r5, r0
 8029e9a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8029e9c:	fb09 0005 	mla	r0, r9, r5, r0
 8029ea0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8029ea4:	2800      	cmp	r0, #0
 8029ea6:	f000 80fa 	beq.w	802a09e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8029eaa:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8029eae:	d01b      	beq.n	8029ee8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8029eb0:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8029eb4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8029eb8:	fb0e fa0a 	mul.w	sl, lr, sl
 8029ebc:	fb0e fe02 	mul.w	lr, lr, r2
 8029ec0:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8029ec4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8029ec8:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8029ecc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8029ed0:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8029ed4:	4452      	add	r2, sl
 8029ed6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029eda:	0a12      	lsrs	r2, r2, #8
 8029edc:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8029ee0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8029ee4:	ea42 020c 	orr.w	r2, r2, ip
 8029ee8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8029eea:	2dff      	cmp	r5, #255	; 0xff
 8029eec:	d021      	beq.n	8029f32 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 8029eee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8029ef0:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8029ef4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8029ef6:	fb05 fb0b 	mul.w	fp, r5, fp
 8029efa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8029efc:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8029f00:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8029f02:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8029f06:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8029f0a:	fb05 fa0a 	mul.w	sl, r5, sl
 8029f0e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8029f12:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8029f16:	44de      	add	lr, fp
 8029f18:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8029f1c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029f20:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029f24:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8029f28:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029f2c:	ea4e 050a 	orr.w	r5, lr, sl
 8029f30:	950c      	str	r5, [sp, #48]	; 0x30
 8029f32:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8029f34:	2dff      	cmp	r5, #255	; 0xff
 8029f36:	d021      	beq.n	8029f7c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8029f38:	9d08      	ldr	r5, [sp, #32]
 8029f3a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8029f3e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8029f40:	fb05 fb0b 	mul.w	fp, r5, fp
 8029f44:	9d08      	ldr	r5, [sp, #32]
 8029f46:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8029f4a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8029f4c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8029f50:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8029f54:	fb05 fa0a 	mul.w	sl, r5, sl
 8029f58:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8029f5c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8029f60:	44de      	add	lr, fp
 8029f62:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8029f66:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029f6a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029f6e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8029f72:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029f76:	ea4e 050a 	orr.w	r5, lr, sl
 8029f7a:	9508      	str	r5, [sp, #32]
 8029f7c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8029f7e:	2dff      	cmp	r5, #255	; 0xff
 8029f80:	d021      	beq.n	8029fc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8029f82:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8029f84:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8029f88:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8029f8a:	fb05 fb0b 	mul.w	fp, r5, fp
 8029f8e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8029f90:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8029f94:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8029f96:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8029f9a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8029f9e:	fb05 fa0a 	mul.w	sl, r5, sl
 8029fa2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8029fa6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8029faa:	44de      	add	lr, fp
 8029fac:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8029fb0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029fb4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029fb8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8029fbc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029fc0:	ea4e 050a 	orr.w	r5, lr, sl
 8029fc4:	950d      	str	r5, [sp, #52]	; 0x34
 8029fc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8029fc8:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8029fcc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8029fd0:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8029fd4:	9d08      	ldr	r5, [sp, #32]
 8029fd6:	fb08 fc0c 	mul.w	ip, r8, ip
 8029fda:	fb03 cc0e 	mla	ip, r3, lr, ip
 8029fde:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8029fe2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8029fe4:	fb01 cc0e 	mla	ip, r1, lr, ip
 8029fe8:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8029fec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8029fee:	fb09 cc0e 	mla	ip, r9, lr, ip
 8029ff2:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8029ff6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8029ff8:	fb08 f80e 	mul.w	r8, r8, lr
 8029ffc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a000:	fb03 8202 	mla	r2, r3, r2, r8
 802a004:	9b08      	ldr	r3, [sp, #32]
 802a006:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802a00a:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 802a00e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802a010:	fb01 220a 	mla	r2, r1, sl, r2
 802a014:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 802a018:	883b      	ldrh	r3, [r7, #0]
 802a01a:	fb09 2901 	mla	r9, r9, r1, r2
 802a01e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802a020:	1219      	asrs	r1, r3, #8
 802a022:	4342      	muls	r2, r0
 802a024:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802a028:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802a02c:	1c50      	adds	r0, r2, #1
 802a02e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802a032:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 802a036:	ea4c 0c09 	orr.w	ip, ip, r9
 802a03a:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 802a03e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 802a042:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 802a046:	fa5f fc8c 	uxtb.w	ip, ip
 802a04a:	fb12 f205 	smulbb	r2, r2, r5
 802a04e:	b2c0      	uxtb	r0, r0
 802a050:	fb1c fc05 	smulbb	ip, ip, r5
 802a054:	fb01 2100 	mla	r1, r1, r0, r2
 802a058:	10da      	asrs	r2, r3, #3
 802a05a:	fb1e fe05 	smulbb	lr, lr, r5
 802a05e:	00db      	lsls	r3, r3, #3
 802a060:	b289      	uxth	r1, r1
 802a062:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802a066:	b2db      	uxtb	r3, r3
 802a068:	fb02 e200 	mla	r2, r2, r0, lr
 802a06c:	fb03 c300 	mla	r3, r3, r0, ip
 802a070:	b292      	uxth	r2, r2
 802a072:	fa1f fc83 	uxth.w	ip, r3
 802a076:	1c4b      	adds	r3, r1, #1
 802a078:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802a07c:	f10c 0301 	add.w	r3, ip, #1
 802a080:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 802a084:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 802a088:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802a08c:	430b      	orrs	r3, r1
 802a08e:	1c51      	adds	r1, r2, #1
 802a090:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802a094:	0952      	lsrs	r2, r2, #5
 802a096:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802a09a:	4313      	orrs	r3, r2
 802a09c:	803b      	strh	r3, [r7, #0]
 802a09e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802a0a0:	3702      	adds	r7, #2
 802a0a2:	441c      	add	r4, r3
 802a0a4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802a0a6:	441e      	add	r6, r3
 802a0a8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802a0aa:	3b01      	subs	r3, #1
 802a0ac:	9318      	str	r3, [sp, #96]	; 0x60
 802a0ae:	e698      	b.n	8029de2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802a0b0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802a0b2:	441c      	add	r4, r3
 802a0b4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802a0b6:	441e      	add	r6, r3
 802a0b8:	9b07      	ldr	r3, [sp, #28]
 802a0ba:	3b01      	subs	r3, #1
 802a0bc:	9307      	str	r3, [sp, #28]
 802a0be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a0c0:	3302      	adds	r3, #2
 802a0c2:	930a      	str	r3, [sp, #40]	; 0x28
 802a0c4:	e66d      	b.n	8029da2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 802a0c6:	d023      	beq.n	802a110 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 802a0c8:	9b07      	ldr	r3, [sp, #28]
 802a0ca:	9829      	ldr	r0, [sp, #164]	; 0xa4
 802a0cc:	3b01      	subs	r3, #1
 802a0ce:	fb00 4003 	mla	r0, r0, r3, r4
 802a0d2:	1400      	asrs	r0, r0, #16
 802a0d4:	f53f ae82 	bmi.w	8029ddc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802a0d8:	3901      	subs	r1, #1
 802a0da:	4288      	cmp	r0, r1
 802a0dc:	f6bf ae7e 	bge.w	8029ddc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802a0e0:	992a      	ldr	r1, [sp, #168]	; 0xa8
 802a0e2:	fb01 6303 	mla	r3, r1, r3, r6
 802a0e6:	141b      	asrs	r3, r3, #16
 802a0e8:	f53f ae78 	bmi.w	8029ddc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802a0ec:	3a01      	subs	r2, #1
 802a0ee:	4293      	cmp	r3, r2
 802a0f0:	f6bf ae74 	bge.w	8029ddc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802a0f4:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802a0f8:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 802a0fc:	f1bb 0f00 	cmp.w	fp, #0
 802a100:	dc6c      	bgt.n	802a1dc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 802a102:	9b07      	ldr	r3, [sp, #28]
 802a104:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802a108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a10a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802a10e:	930a      	str	r3, [sp, #40]	; 0x28
 802a110:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802a112:	2b00      	cmp	r3, #0
 802a114:	f340 81b3 	ble.w	802a47e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 802a118:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802a11c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802a11e:	ee30 0a04 	vadd.f32	s0, s0, s8
 802a122:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802a126:	eef0 6a62 	vmov.f32	s13, s5
 802a12a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802a12e:	ee31 1a05 	vadd.f32	s2, s2, s10
 802a132:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a136:	ee16 4a90 	vmov	r4, s13
 802a13a:	eef0 6a43 	vmov.f32	s13, s6
 802a13e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a142:	ee16 6a90 	vmov	r6, s13
 802a146:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802a14a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802a14e:	ee77 2a62 	vsub.f32	s5, s14, s5
 802a152:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802a156:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802a15a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802a15e:	ee12 2a90 	vmov	r2, s5
 802a162:	eef0 2a47 	vmov.f32	s5, s14
 802a166:	fb92 f3f3 	sdiv	r3, r2, r3
 802a16a:	ee13 2a10 	vmov	r2, s6
 802a16e:	9329      	str	r3, [sp, #164]	; 0xa4
 802a170:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802a172:	eeb0 3a67 	vmov.f32	s6, s15
 802a176:	fb92 f3f3 	sdiv	r3, r2, r3
 802a17a:	932a      	str	r3, [sp, #168]	; 0xa8
 802a17c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802a17e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 802a180:	3b01      	subs	r3, #1
 802a182:	9317      	str	r3, [sp, #92]	; 0x5c
 802a184:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802a186:	bf08      	it	eq
 802a188:	4613      	moveq	r3, r2
 802a18a:	9307      	str	r3, [sp, #28]
 802a18c:	e5fb      	b.n	8029d86 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 802a18e:	2900      	cmp	r1, #0
 802a190:	f43f ae6b 	beq.w	8029e6a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 802a194:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 802a198:	9308      	str	r3, [sp, #32]
 802a19a:	0e1b      	lsrs	r3, r3, #24
 802a19c:	9311      	str	r3, [sp, #68]	; 0x44
 802a19e:	e664      	b.n	8029e6a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 802a1a0:	f112 0801 	adds.w	r8, r2, #1
 802a1a4:	f53f af7b 	bmi.w	802a09e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802a1a8:	4543      	cmp	r3, r8
 802a1aa:	f6ff af78 	blt.w	802a09e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802a1ae:	f11c 0801 	adds.w	r8, ip, #1
 802a1b2:	f53f af74 	bmi.w	802a09e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802a1b6:	45c6      	cmp	lr, r8
 802a1b8:	f6ff af71 	blt.w	802a09e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802a1bc:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 802a1be:	b21b      	sxth	r3, r3
 802a1c0:	9201      	str	r2, [sp, #4]
 802a1c2:	fa0f f28e 	sxth.w	r2, lr
 802a1c6:	e9cd 1504 	strd	r1, r5, [sp, #16]
 802a1ca:	e9cd c002 	strd	ip, r0, [sp, #8]
 802a1ce:	9200      	str	r2, [sp, #0]
 802a1d0:	4639      	mov	r1, r7
 802a1d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802a1d4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 802a1d6:	f7ff fc79 	bl	8029acc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 802a1da:	e760      	b.n	802a09e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802a1dc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802a1de:	1427      	asrs	r7, r4, #16
 802a1e0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802a1e2:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802a1e6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802a1ea:	1433      	asrs	r3, r6, #16
 802a1ec:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802a1f0:	fb01 7303 	mla	r3, r1, r3, r7
 802a1f4:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 802a1f8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 802a1fc:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802a200:	2a00      	cmp	r2, #0
 802a202:	f000 8133 	beq.w	802a46c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 802a206:	687d      	ldr	r5, [r7, #4]
 802a208:	950e      	str	r5, [sp, #56]	; 0x38
 802a20a:	0e2d      	lsrs	r5, r5, #24
 802a20c:	9515      	str	r5, [sp, #84]	; 0x54
 802a20e:	b178      	cbz	r0, 802a230 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 802a210:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 802a214:	3901      	subs	r1, #1
 802a216:	0089      	lsls	r1, r1, #2
 802a218:	3104      	adds	r1, #4
 802a21a:	eb07 0e01 	add.w	lr, r7, r1
 802a21e:	5879      	ldr	r1, [r7, r1]
 802a220:	9109      	str	r1, [sp, #36]	; 0x24
 802a222:	0e09      	lsrs	r1, r1, #24
 802a224:	9112      	str	r1, [sp, #72]	; 0x48
 802a226:	f8de 1004 	ldr.w	r1, [lr, #4]
 802a22a:	910f      	str	r1, [sp, #60]	; 0x3c
 802a22c:	0e09      	lsrs	r1, r1, #24
 802a22e:	9116      	str	r1, [sp, #88]	; 0x58
 802a230:	b292      	uxth	r2, r2
 802a232:	9915      	ldr	r1, [sp, #84]	; 0x54
 802a234:	b280      	uxth	r0, r0
 802a236:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802a238:	fb02 f800 	mul.w	r8, r2, r0
 802a23c:	0112      	lsls	r2, r2, #4
 802a23e:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 802a242:	eba2 0e08 	sub.w	lr, r2, r8
 802a246:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802a24a:	b280      	uxth	r0, r0
 802a24c:	fa1f fe8e 	uxth.w	lr, lr
 802a250:	1a12      	subs	r2, r2, r0
 802a252:	fb0e f101 	mul.w	r1, lr, r1
 802a256:	b292      	uxth	r2, r2
 802a258:	fb02 110c 	mla	r1, r2, ip, r1
 802a25c:	fb00 1105 	mla	r1, r0, r5, r1
 802a260:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802a262:	fb08 1105 	mla	r1, r8, r5, r1
 802a266:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802a26a:	2900      	cmp	r1, #0
 802a26c:	f000 80f5 	beq.w	802a45a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 802a270:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802a274:	d019      	beq.n	802a2aa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 802a276:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802a27a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802a27e:	fb0c fa0a 	mul.w	sl, ip, sl
 802a282:	fb0c fc03 	mul.w	ip, ip, r3
 802a286:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802a28a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802a28e:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802a292:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802a296:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802a29a:	4453      	add	r3, sl
 802a29c:	0a3f      	lsrs	r7, r7, #8
 802a29e:	0a1b      	lsrs	r3, r3, #8
 802a2a0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802a2a4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802a2a8:	433b      	orrs	r3, r7
 802a2aa:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802a2ac:	2dff      	cmp	r5, #255	; 0xff
 802a2ae:	d020      	beq.n	802a2f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 802a2b0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802a2b2:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802a2b6:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802a2b8:	436f      	muls	r7, r5
 802a2ba:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802a2bc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802a2c0:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802a2c4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802a2c6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802a2ca:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802a2ce:	fb05 fa0a 	mul.w	sl, r5, sl
 802a2d2:	44bc      	add	ip, r7
 802a2d4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802a2d8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a2dc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802a2e0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802a2e4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a2e8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802a2ec:	ea4c 050a 	orr.w	r5, ip, sl
 802a2f0:	950e      	str	r5, [sp, #56]	; 0x38
 802a2f2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802a2f4:	2dff      	cmp	r5, #255	; 0xff
 802a2f6:	d020      	beq.n	802a33a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 802a2f8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802a2fa:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802a2fe:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802a300:	436f      	muls	r7, r5
 802a302:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802a304:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802a308:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802a30c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802a30e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802a312:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802a316:	fb05 fa0a 	mul.w	sl, r5, sl
 802a31a:	44bc      	add	ip, r7
 802a31c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802a320:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a324:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802a328:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802a32c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a330:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802a334:	ea4c 050a 	orr.w	r5, ip, sl
 802a338:	9509      	str	r5, [sp, #36]	; 0x24
 802a33a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802a33c:	2dff      	cmp	r5, #255	; 0xff
 802a33e:	d020      	beq.n	802a382 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 802a340:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802a342:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802a346:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802a348:	436f      	muls	r7, r5
 802a34a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802a34c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802a350:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802a354:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802a356:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802a35a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802a35e:	fb05 fa0a 	mul.w	sl, r5, sl
 802a362:	44bc      	add	ip, r7
 802a364:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802a368:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a36c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802a370:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802a374:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a378:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802a37c:	ea4c 050a 	orr.w	r5, ip, sl
 802a380:	950f      	str	r5, [sp, #60]	; 0x3c
 802a382:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802a384:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802a388:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802a38c:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802a390:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802a392:	fb0e f707 	mul.w	r7, lr, r7
 802a396:	fb02 770c 	mla	r7, r2, ip, r7
 802a39a:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802a39e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802a3a0:	fb00 770c 	mla	r7, r0, ip, r7
 802a3a4:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802a3a8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802a3aa:	fb08 770c 	mla	r7, r8, ip, r7
 802a3ae:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 802a3b2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802a3b4:	fb0e fe0c 	mul.w	lr, lr, ip
 802a3b8:	0a3f      	lsrs	r7, r7, #8
 802a3ba:	fb02 e303 	mla	r3, r2, r3, lr
 802a3be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802a3c0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802a3c4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 802a3c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802a3ca:	fb00 330a 	mla	r3, r0, sl, r3
 802a3ce:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 802a3d2:	f8b9 0000 	ldrh.w	r0, [r9]
 802a3d6:	fb08 3c0c 	mla	ip, r8, ip, r3
 802a3da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802a3dc:	1202      	asrs	r2, r0, #8
 802a3de:	4359      	muls	r1, r3
 802a3e0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a3e4:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802a3e8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802a3ec:	1c4b      	adds	r3, r1, #1
 802a3ee:	ea47 070c 	orr.w	r7, r7, ip
 802a3f2:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802a3f6:	0c3b      	lsrs	r3, r7, #16
 802a3f8:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802a3fc:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 802a400:	b2ff      	uxtb	r7, r7
 802a402:	fb13 f305 	smulbb	r3, r3, r5
 802a406:	b2c9      	uxtb	r1, r1
 802a408:	fb17 f705 	smulbb	r7, r7, r5
 802a40c:	fb02 3201 	mla	r2, r2, r1, r3
 802a410:	10c3      	asrs	r3, r0, #3
 802a412:	fb1c fc05 	smulbb	ip, ip, r5
 802a416:	00c0      	lsls	r0, r0, #3
 802a418:	b292      	uxth	r2, r2
 802a41a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 802a41e:	b2c0      	uxtb	r0, r0
 802a420:	fb03 c301 	mla	r3, r3, r1, ip
 802a424:	fb00 7001 	mla	r0, r0, r1, r7
 802a428:	1c51      	adds	r1, r2, #1
 802a42a:	b29b      	uxth	r3, r3
 802a42c:	b280      	uxth	r0, r0
 802a42e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802a432:	f100 0c01 	add.w	ip, r0, #1
 802a436:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 802a43a:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 802a43e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 802a442:	ea4c 0202 	orr.w	r2, ip, r2
 802a446:	f103 0c01 	add.w	ip, r3, #1
 802a44a:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 802a44e:	095b      	lsrs	r3, r3, #5
 802a450:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802a454:	431a      	orrs	r2, r3
 802a456:	f8a9 2000 	strh.w	r2, [r9]
 802a45a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802a45c:	f109 0902 	add.w	r9, r9, #2
 802a460:	f10b 3bff 	add.w	fp, fp, #4294967295
 802a464:	441c      	add	r4, r3
 802a466:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802a468:	441e      	add	r6, r3
 802a46a:	e647      	b.n	802a0fc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 802a46c:	2800      	cmp	r0, #0
 802a46e:	f43f aedf 	beq.w	802a230 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 802a472:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 802a476:	9109      	str	r1, [sp, #36]	; 0x24
 802a478:	0e09      	lsrs	r1, r1, #24
 802a47a:	9112      	str	r1, [sp, #72]	; 0x48
 802a47c:	e6d8      	b.n	802a230 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 802a47e:	b01d      	add	sp, #116	; 0x74
 802a480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802a484 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 802a484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a488:	b085      	sub	sp, #20
 802a48a:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 802a48e:	9102      	str	r1, [sp, #8]
 802a490:	2c00      	cmp	r4, #0
 802a492:	fb04 7103 	mla	r1, r4, r3, r7
 802a496:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 802a49a:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 802a49e:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 802a4a2:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 802a4a6:	f2c0 810c 	blt.w	802a6c2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 802a4aa:	45a6      	cmp	lr, r4
 802a4ac:	f340 8109 	ble.w	802a6c2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 802a4b0:	2f00      	cmp	r7, #0
 802a4b2:	f2c0 8104 	blt.w	802a6be <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 802a4b6:	42bb      	cmp	r3, r7
 802a4b8:	f340 8101 	ble.w	802a6be <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 802a4bc:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 802a4c0:	1c7a      	adds	r2, r7, #1
 802a4c2:	f100 8101 	bmi.w	802a6c8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 802a4c6:	4293      	cmp	r3, r2
 802a4c8:	f340 80fe 	ble.w	802a6c8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 802a4cc:	2e00      	cmp	r6, #0
 802a4ce:	f000 80fd 	beq.w	802a6cc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 802a4d2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 802a4d6:	3401      	adds	r4, #1
 802a4d8:	f100 80fc 	bmi.w	802a6d4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 802a4dc:	45a6      	cmp	lr, r4
 802a4de:	f340 80f9 	ble.w	802a6d4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 802a4e2:	2800      	cmp	r0, #0
 802a4e4:	f000 80f9 	beq.w	802a6da <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 802a4e8:	2f00      	cmp	r7, #0
 802a4ea:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 802a4ee:	f2c0 80ef 	blt.w	802a6d0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 802a4f2:	42bb      	cmp	r3, r7
 802a4f4:	f340 80ec 	ble.w	802a6d0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 802a4f8:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 802a4fc:	3701      	adds	r7, #1
 802a4fe:	f100 80ef 	bmi.w	802a6e0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 802a502:	42bb      	cmp	r3, r7
 802a504:	f340 80ec 	ble.w	802a6e0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 802a508:	2e00      	cmp	r6, #0
 802a50a:	f000 80eb 	beq.w	802a6e4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 802a50e:	6852      	ldr	r2, [r2, #4]
 802a510:	b2b6      	uxth	r6, r6
 802a512:	b280      	uxth	r0, r0
 802a514:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 802a518:	fb00 fe06 	mul.w	lr, r0, r6
 802a51c:	0136      	lsls	r6, r6, #4
 802a51e:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 802a522:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 802a526:	eba6 070e 	sub.w	r7, r6, lr
 802a52a:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 802a52e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802a532:	b280      	uxth	r0, r0
 802a534:	b2bf      	uxth	r7, r7
 802a536:	1a1b      	subs	r3, r3, r0
 802a538:	ea4f 6812 	mov.w	r8, r2, lsr #24
 802a53c:	fb07 f60a 	mul.w	r6, r7, sl
 802a540:	b29b      	uxth	r3, r3
 802a542:	fb0b 6603 	mla	r6, fp, r3, r6
 802a546:	fb00 6609 	mla	r6, r0, r9, r6
 802a54a:	fb0e 6608 	mla	r6, lr, r8, r6
 802a54e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802a552:	9600      	str	r6, [sp, #0]
 802a554:	2e00      	cmp	r6, #0
 802a556:	f000 80af 	beq.w	802a6b8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 802a55a:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802a55e:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 802a562:	9e02      	ldr	r6, [sp, #8]
 802a564:	fb0b fc0c 	mul.w	ip, fp, ip
 802a568:	fb0b f505 	mul.w	r5, fp, r5
 802a56c:	8836      	ldrh	r6, [r6, #0]
 802a56e:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 802a572:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802a576:	9501      	str	r5, [sp, #4]
 802a578:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 802a57c:	44dc      	add	ip, fp
 802a57e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a582:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 802a586:	9503      	str	r5, [sp, #12]
 802a588:	9d01      	ldr	r5, [sp, #4]
 802a58a:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 802a58e:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802a592:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 802a596:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 802a59a:	fb0a fc0c 	mul.w	ip, sl, ip
 802a59e:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 802a5a2:	fb0a fa01 	mul.w	sl, sl, r1
 802a5a6:	ea4f 251c 	mov.w	r5, ip, lsr #8
 802a5aa:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802a5ae:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 802a5b2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802a5b6:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 802a5ba:	4465      	add	r5, ip
 802a5bc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802a5c0:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802a5c4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a5c8:	fb09 fc0c 	mul.w	ip, r9, ip
 802a5cc:	0a2d      	lsrs	r5, r5, #8
 802a5ce:	fb09 f904 	mul.w	r9, r9, r4
 802a5d2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802a5d6:	ea4f 211c 	mov.w	r1, ip, lsr #8
 802a5da:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802a5de:	f509 7480 	add.w	r4, r9, #256	; 0x100
 802a5e2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802a5e6:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802a5ea:	437d      	muls	r5, r7
 802a5ec:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 802a5f0:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 802a5f4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802a5f8:	4461      	add	r1, ip
 802a5fa:	fb08 f404 	mul.w	r4, r8, r4
 802a5fe:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802a602:	fb08 f802 	mul.w	r8, r8, r2
 802a606:	0a09      	lsrs	r1, r1, #8
 802a608:	0a22      	lsrs	r2, r4, #8
 802a60a:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 802a60e:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802a612:	fb07 f70a 	mul.w	r7, r7, sl
 802a616:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802a61a:	4414      	add	r4, r2
 802a61c:	f508 7280 	add.w	r2, r8, #256	; 0x100
 802a620:	0a24      	lsrs	r4, r4, #8
 802a622:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 802a626:	9a03      	ldr	r2, [sp, #12]
 802a628:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802a62c:	fb02 5503 	mla	r5, r2, r3, r5
 802a630:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802a634:	fb04 540e 	mla	r4, r4, lr, r5
 802a638:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802a63c:	fb01 4100 	mla	r1, r1, r0, r4
 802a640:	0a09      	lsrs	r1, r1, #8
 802a642:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 802a646:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 802a64a:	fb03 7101 	mla	r1, r3, r1, r7
 802a64e:	9b00      	ldr	r3, [sp, #0]
 802a650:	fb0e 1e08 	mla	lr, lr, r8, r1
 802a654:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 802a658:	43da      	mvns	r2, r3
 802a65a:	1233      	asrs	r3, r6, #8
 802a65c:	fb00 e101 	mla	r1, r0, r1, lr
 802a660:	10f0      	asrs	r0, r6, #3
 802a662:	b2d2      	uxtb	r2, r2
 802a664:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 802a668:	0a09      	lsrs	r1, r1, #8
 802a66a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802a66e:	00f6      	lsls	r6, r6, #3
 802a670:	4353      	muls	r3, r2
 802a672:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 802a676:	4350      	muls	r0, r2
 802a678:	b2f6      	uxtb	r6, r6
 802a67a:	4321      	orrs	r1, r4
 802a67c:	4356      	muls	r6, r2
 802a67e:	1c5a      	adds	r2, r3, #1
 802a680:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802a684:	0c0b      	lsrs	r3, r1, #16
 802a686:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802a68a:	1c42      	adds	r2, r0, #1
 802a68c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802a690:	0a0a      	lsrs	r2, r1, #8
 802a692:	021b      	lsls	r3, r3, #8
 802a694:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802a698:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 802a69c:	00d2      	lsls	r2, r2, #3
 802a69e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802a6a2:	4313      	orrs	r3, r2
 802a6a4:	1c72      	adds	r2, r6, #1
 802a6a6:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 802a6aa:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 802a6ae:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 802a6b2:	4319      	orrs	r1, r3
 802a6b4:	9b02      	ldr	r3, [sp, #8]
 802a6b6:	8019      	strh	r1, [r3, #0]
 802a6b8:	b005      	add	sp, #20
 802a6ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a6be:	2500      	movs	r5, #0
 802a6c0:	e6fe      	b.n	802a4c0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 802a6c2:	2100      	movs	r1, #0
 802a6c4:	460d      	mov	r5, r1
 802a6c6:	e706      	b.n	802a4d6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 802a6c8:	2100      	movs	r1, #0
 802a6ca:	e704      	b.n	802a4d6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 802a6cc:	4631      	mov	r1, r6
 802a6ce:	e702      	b.n	802a4d6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 802a6d0:	2400      	movs	r4, #0
 802a6d2:	e713      	b.n	802a4fc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 802a6d4:	2200      	movs	r2, #0
 802a6d6:	4614      	mov	r4, r2
 802a6d8:	e71a      	b.n	802a510 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 802a6da:	4602      	mov	r2, r0
 802a6dc:	4604      	mov	r4, r0
 802a6de:	e717      	b.n	802a510 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 802a6e0:	2200      	movs	r2, #0
 802a6e2:	e715      	b.n	802a510 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 802a6e4:	4632      	mov	r2, r6
 802a6e6:	e713      	b.n	802a510 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>

0802a6e8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802a6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a6ec:	b09b      	sub	sp, #108	; 0x6c
 802a6ee:	9218      	str	r2, [sp, #96]	; 0x60
 802a6f0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802a6f2:	9019      	str	r0, [sp, #100]	; 0x64
 802a6f4:	9116      	str	r1, [sp, #88]	; 0x58
 802a6f6:	6850      	ldr	r0, [r2, #4]
 802a6f8:	9307      	str	r3, [sp, #28]
 802a6fa:	6812      	ldr	r2, [r2, #0]
 802a6fc:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 802a700:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 802a704:	fb00 1303 	mla	r3, r0, r3, r1
 802a708:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802a70c:	930a      	str	r3, [sp, #40]	; 0x28
 802a70e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802a710:	681b      	ldr	r3, [r3, #0]
 802a712:	930f      	str	r3, [sp, #60]	; 0x3c
 802a714:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802a716:	2b00      	cmp	r3, #0
 802a718:	dc03      	bgt.n	802a722 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802a71a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802a71c:	2b00      	cmp	r3, #0
 802a71e:	f340 8387 	ble.w	802ae30 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 802a722:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802a724:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802a728:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802a72c:	1e48      	subs	r0, r1, #1
 802a72e:	1e57      	subs	r7, r2, #1
 802a730:	9b07      	ldr	r3, [sp, #28]
 802a732:	2b00      	cmp	r3, #0
 802a734:	f340 8166 	ble.w	802aa04 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 802a738:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802a73c:	ea4f 4326 	mov.w	r3, r6, asr #16
 802a740:	d406      	bmi.n	802a750 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802a742:	4584      	cmp	ip, r0
 802a744:	da04      	bge.n	802a750 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802a746:	2b00      	cmp	r3, #0
 802a748:	db02      	blt.n	802a750 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802a74a:	42bb      	cmp	r3, r7
 802a74c:	f2c0 815b 	blt.w	802aa06 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 802a750:	f11c 0c01 	adds.w	ip, ip, #1
 802a754:	f100 814b 	bmi.w	802a9ee <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802a758:	4561      	cmp	r1, ip
 802a75a:	f2c0 8148 	blt.w	802a9ee <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802a75e:	3301      	adds	r3, #1
 802a760:	f100 8145 	bmi.w	802a9ee <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802a764:	429a      	cmp	r2, r3
 802a766:	f2c0 8142 	blt.w	802a9ee <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802a76a:	9b07      	ldr	r3, [sp, #28]
 802a76c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802a76e:	9317      	str	r3, [sp, #92]	; 0x5c
 802a770:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802a772:	2b00      	cmp	r3, #0
 802a774:	f340 8165 	ble.w	802aa42 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 802a778:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802a77a:	ea4f 4c26 	mov.w	ip, r6, asr #16
 802a77e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802a780:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802a784:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802a788:	1422      	asrs	r2, r4, #16
 802a78a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802a78e:	689b      	ldr	r3, [r3, #8]
 802a790:	f100 81d5 	bmi.w	802ab3e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 802a794:	f103 38ff 	add.w	r8, r3, #4294967295
 802a798:	4542      	cmp	r2, r8
 802a79a:	f280 81d0 	bge.w	802ab3e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 802a79e:	f1bc 0f00 	cmp.w	ip, #0
 802a7a2:	f2c0 81cc 	blt.w	802ab3e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 802a7a6:	f10e 38ff 	add.w	r8, lr, #4294967295
 802a7aa:	45c4      	cmp	ip, r8
 802a7ac:	f280 81c7 	bge.w	802ab3e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 802a7b0:	b21b      	sxth	r3, r3
 802a7b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802a7b4:	fb0c 2203 	mla	r2, ip, r3, r2
 802a7b8:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 802a7bc:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802a7c0:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 802a7c4:	2900      	cmp	r1, #0
 802a7c6:	f000 8182 	beq.w	802aace <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 802a7ca:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802a7ce:	950b      	str	r5, [sp, #44]	; 0x2c
 802a7d0:	0e2d      	lsrs	r5, r5, #24
 802a7d2:	9512      	str	r5, [sp, #72]	; 0x48
 802a7d4:	b180      	cbz	r0, 802a7f8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 802a7d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802a7da:	3b01      	subs	r3, #1
 802a7dc:	009b      	lsls	r3, r3, #2
 802a7de:	3304      	adds	r3, #4
 802a7e0:	eb08 0c03 	add.w	ip, r8, r3
 802a7e4:	f858 3003 	ldr.w	r3, [r8, r3]
 802a7e8:	9308      	str	r3, [sp, #32]
 802a7ea:	0e1b      	lsrs	r3, r3, #24
 802a7ec:	9310      	str	r3, [sp, #64]	; 0x40
 802a7ee:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802a7f2:	930c      	str	r3, [sp, #48]	; 0x30
 802a7f4:	0e1b      	lsrs	r3, r3, #24
 802a7f6:	9313      	str	r3, [sp, #76]	; 0x4c
 802a7f8:	b289      	uxth	r1, r1
 802a7fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802a7fc:	b280      	uxth	r0, r0
 802a7fe:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802a800:	fb01 f900 	mul.w	r9, r1, r0
 802a804:	0109      	lsls	r1, r1, #4
 802a806:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802a80a:	eba1 0809 	sub.w	r8, r1, r9
 802a80e:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 802a812:	b280      	uxth	r0, r0
 802a814:	fa1f f888 	uxth.w	r8, r8
 802a818:	1a09      	subs	r1, r1, r0
 802a81a:	fb08 f303 	mul.w	r3, r8, r3
 802a81e:	b289      	uxth	r1, r1
 802a820:	fb01 330e 	mla	r3, r1, lr, r3
 802a824:	fb00 3305 	mla	r3, r0, r5, r3
 802a828:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802a82a:	fb09 3305 	mla	r3, r9, r5, r3
 802a82e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a832:	2b00      	cmp	r3, #0
 802a834:	f000 80d2 	beq.w	802a9dc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802a838:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802a83c:	d01b      	beq.n	802a876 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 802a83e:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 802a842:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802a846:	fb0e fa0a 	mul.w	sl, lr, sl
 802a84a:	fb0e fe02 	mul.w	lr, lr, r2
 802a84e:	ea4f 221a 	mov.w	r2, sl, lsr #8
 802a852:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802a856:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802a85a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802a85e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802a862:	4452      	add	r2, sl
 802a864:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a868:	0a12      	lsrs	r2, r2, #8
 802a86a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802a86e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802a872:	ea42 020c 	orr.w	r2, r2, ip
 802a876:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802a878:	2dff      	cmp	r5, #255	; 0xff
 802a87a:	d021      	beq.n	802a8c0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 802a87c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802a87e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802a882:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802a884:	fb05 fb0b 	mul.w	fp, r5, fp
 802a888:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802a88a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802a88e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802a890:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802a894:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802a898:	fb05 fa0a 	mul.w	sl, r5, sl
 802a89c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802a8a0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802a8a4:	44de      	add	lr, fp
 802a8a6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802a8aa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802a8ae:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a8b2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802a8b6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802a8ba:	ea4e 050a 	orr.w	r5, lr, sl
 802a8be:	950b      	str	r5, [sp, #44]	; 0x2c
 802a8c0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802a8c2:	2dff      	cmp	r5, #255	; 0xff
 802a8c4:	d021      	beq.n	802a90a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 802a8c6:	9d08      	ldr	r5, [sp, #32]
 802a8c8:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802a8cc:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802a8ce:	fb05 fb0b 	mul.w	fp, r5, fp
 802a8d2:	9d08      	ldr	r5, [sp, #32]
 802a8d4:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802a8d8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802a8da:	fb05 fa0e 	mul.w	sl, r5, lr
 802a8de:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802a8e2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802a8e6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802a8ea:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802a8ee:	44de      	add	lr, fp
 802a8f0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802a8f4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802a8f8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a8fc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802a900:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802a904:	ea4e 050a 	orr.w	r5, lr, sl
 802a908:	9508      	str	r5, [sp, #32]
 802a90a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802a90c:	2dff      	cmp	r5, #255	; 0xff
 802a90e:	d021      	beq.n	802a954 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 802a910:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802a912:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802a916:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802a918:	fb05 fb0b 	mul.w	fp, r5, fp
 802a91c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802a91e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802a922:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802a924:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802a928:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802a92c:	fb05 fa0a 	mul.w	sl, r5, sl
 802a930:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802a934:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802a938:	44de      	add	lr, fp
 802a93a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802a93e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802a942:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a946:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802a94a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802a94e:	ea4e 050a 	orr.w	r5, lr, sl
 802a952:	950c      	str	r5, [sp, #48]	; 0x30
 802a954:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802a956:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802a95a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802a95e:	2bff      	cmp	r3, #255	; 0xff
 802a960:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802a964:	9d08      	ldr	r5, [sp, #32]
 802a966:	fb08 fc0c 	mul.w	ip, r8, ip
 802a96a:	fb01 cc0e 	mla	ip, r1, lr, ip
 802a96e:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802a972:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802a974:	fb00 cc0e 	mla	ip, r0, lr, ip
 802a978:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802a97c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802a97e:	fb09 cc0e 	mla	ip, r9, lr, ip
 802a982:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802a986:	fb08 f80e 	mul.w	r8, r8, lr
 802a98a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a98e:	fb01 8202 	mla	r2, r1, r2, r8
 802a992:	9908      	ldr	r1, [sp, #32]
 802a994:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802a998:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802a99c:	990c      	ldr	r1, [sp, #48]	; 0x30
 802a99e:	fb00 220a 	mla	r2, r0, sl, r2
 802a9a2:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 802a9a6:	fb09 2900 	mla	r9, r9, r0, r2
 802a9aa:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802a9ae:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802a9b2:	ea4c 0c09 	orr.w	ip, ip, r9
 802a9b6:	ea4f 221c 	mov.w	r2, ip, lsr #8
 802a9ba:	f040 8091 	bne.w	802aae0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 802a9be:	ea4f 135c 	mov.w	r3, ip, lsr #5
 802a9c2:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 802a9c6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802a9ca:	f022 0207 	bic.w	r2, r2, #7
 802a9ce:	431a      	orrs	r2, r3
 802a9d0:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 802a9d4:	ea4c 0c02 	orr.w	ip, ip, r2
 802a9d8:	f8a7 c000 	strh.w	ip, [r7]
 802a9dc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802a9de:	3702      	adds	r7, #2
 802a9e0:	441c      	add	r4, r3
 802a9e2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802a9e4:	441e      	add	r6, r3
 802a9e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802a9e8:	3b01      	subs	r3, #1
 802a9ea:	9317      	str	r3, [sp, #92]	; 0x5c
 802a9ec:	e6c0      	b.n	802a770 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 802a9ee:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802a9f0:	441c      	add	r4, r3
 802a9f2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802a9f4:	441e      	add	r6, r3
 802a9f6:	9b07      	ldr	r3, [sp, #28]
 802a9f8:	3b01      	subs	r3, #1
 802a9fa:	9307      	str	r3, [sp, #28]
 802a9fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a9fe:	3302      	adds	r3, #2
 802aa00:	930a      	str	r3, [sp, #40]	; 0x28
 802aa02:	e695      	b.n	802a730 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802aa04:	d024      	beq.n	802aa50 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 802aa06:	9b07      	ldr	r3, [sp, #28]
 802aa08:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802aa0a:	3b01      	subs	r3, #1
 802aa0c:	fb00 4003 	mla	r0, r0, r3, r4
 802aa10:	1400      	asrs	r0, r0, #16
 802aa12:	f53f aeaa 	bmi.w	802a76a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802aa16:	3901      	subs	r1, #1
 802aa18:	4288      	cmp	r0, r1
 802aa1a:	f6bf aea6 	bge.w	802a76a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802aa1e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802aa20:	fb01 6303 	mla	r3, r1, r3, r6
 802aa24:	141b      	asrs	r3, r3, #16
 802aa26:	f53f aea0 	bmi.w	802a76a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802aa2a:	3a01      	subs	r2, #1
 802aa2c:	4293      	cmp	r3, r2
 802aa2e:	f6bf ae9c 	bge.w	802a76a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802aa32:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802aa36:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 802aa3a:	f1bb 0f00 	cmp.w	fp, #0
 802aa3e:	f300 809a 	bgt.w	802ab76 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 802aa42:	9b07      	ldr	r3, [sp, #28]
 802aa44:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802aa48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802aa4a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802aa4e:	930a      	str	r3, [sp, #40]	; 0x28
 802aa50:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802aa52:	2b00      	cmp	r3, #0
 802aa54:	f340 81ec 	ble.w	802ae30 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 802aa58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802aa5c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802aa5e:	ee30 0a04 	vadd.f32	s0, s0, s8
 802aa62:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802aa66:	eef0 6a62 	vmov.f32	s13, s5
 802aa6a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802aa6e:	ee31 1a05 	vadd.f32	s2, s2, s10
 802aa72:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802aa76:	ee16 4a90 	vmov	r4, s13
 802aa7a:	eef0 6a43 	vmov.f32	s13, s6
 802aa7e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802aa82:	ee16 6a90 	vmov	r6, s13
 802aa86:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802aa8a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802aa8e:	ee77 2a62 	vsub.f32	s5, s14, s5
 802aa92:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802aa96:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802aa9a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802aa9e:	ee12 2a90 	vmov	r2, s5
 802aaa2:	eef0 2a47 	vmov.f32	s5, s14
 802aaa6:	fb92 f3f3 	sdiv	r3, r2, r3
 802aaaa:	ee13 2a10 	vmov	r2, s6
 802aaae:	9327      	str	r3, [sp, #156]	; 0x9c
 802aab0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802aab2:	eeb0 3a67 	vmov.f32	s6, s15
 802aab6:	fb92 f3f3 	sdiv	r3, r2, r3
 802aaba:	9328      	str	r3, [sp, #160]	; 0xa0
 802aabc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802aabe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802aac0:	3b01      	subs	r3, #1
 802aac2:	9316      	str	r3, [sp, #88]	; 0x58
 802aac4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802aac6:	bf08      	it	eq
 802aac8:	4613      	moveq	r3, r2
 802aaca:	9307      	str	r3, [sp, #28]
 802aacc:	e622      	b.n	802a714 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 802aace:	2800      	cmp	r0, #0
 802aad0:	f43f ae92 	beq.w	802a7f8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 802aad4:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 802aad8:	9308      	str	r3, [sp, #32]
 802aada:	0e1b      	lsrs	r3, r3, #24
 802aadc:	9310      	str	r3, [sp, #64]	; 0x40
 802aade:	e68b      	b.n	802a7f8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 802aae0:	8839      	ldrh	r1, [r7, #0]
 802aae2:	43db      	mvns	r3, r3
 802aae4:	4dd4      	ldr	r5, [pc, #848]	; (802ae38 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 802aae6:	ea4f 2e21 	mov.w	lr, r1, asr #8
 802aaea:	fa5f f883 	uxtb.w	r8, r3
 802aaee:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 802aaf2:	10c8      	asrs	r0, r1, #3
 802aaf4:	00cb      	lsls	r3, r1, #3
 802aaf6:	fb0e fe08 	mul.w	lr, lr, r8
 802aafa:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802aafe:	b2db      	uxtb	r3, r3
 802ab00:	f10e 0101 	add.w	r1, lr, #1
 802ab04:	fb00 f008 	mul.w	r0, r0, r8
 802ab08:	fb03 f308 	mul.w	r3, r3, r8
 802ab0c:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 802ab10:	ea4f 411c 	mov.w	r1, ip, lsr #16
 802ab14:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 802ab18:	f100 0e01 	add.w	lr, r0, #1
 802ab1c:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 802ab20:	b2c9      	uxtb	r1, r1
 802ab22:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802ab26:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 802ab2a:	00d2      	lsls	r2, r2, #3
 802ab2c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802ab30:	430a      	orrs	r2, r1
 802ab32:	1c59      	adds	r1, r3, #1
 802ab34:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802ab38:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 802ab3c:	e748      	b.n	802a9d0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 802ab3e:	f112 0801 	adds.w	r8, r2, #1
 802ab42:	f53f af4b 	bmi.w	802a9dc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802ab46:	4543      	cmp	r3, r8
 802ab48:	f6ff af48 	blt.w	802a9dc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802ab4c:	f11c 0801 	adds.w	r8, ip, #1
 802ab50:	f53f af44 	bmi.w	802a9dc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802ab54:	45c6      	cmp	lr, r8
 802ab56:	f6ff af41 	blt.w	802a9dc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802ab5a:	b21b      	sxth	r3, r3
 802ab5c:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 802ab60:	fa0f f28e 	sxth.w	r2, lr
 802ab64:	e9cd 1003 	strd	r1, r0, [sp, #12]
 802ab68:	9200      	str	r2, [sp, #0]
 802ab6a:	4639      	mov	r1, r7
 802ab6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802ab6e:	9819      	ldr	r0, [sp, #100]	; 0x64
 802ab70:	f7ff fc88 	bl	802a484 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 802ab74:	e732      	b.n	802a9dc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802ab76:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802ab78:	1421      	asrs	r1, r4, #16
 802ab7a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802ab7c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802ab80:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 802ab84:	1433      	asrs	r3, r6, #16
 802ab86:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802ab8a:	fb07 1303 	mla	r3, r7, r3, r1
 802ab8e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802ab90:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 802ab94:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 802ab98:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802ab9c:	2a00      	cmp	r2, #0
 802ab9e:	f000 8108 	beq.w	802adb2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 802aba2:	684d      	ldr	r5, [r1, #4]
 802aba4:	950d      	str	r5, [sp, #52]	; 0x34
 802aba6:	0e2d      	lsrs	r5, r5, #24
 802aba8:	9514      	str	r5, [sp, #80]	; 0x50
 802abaa:	b178      	cbz	r0, 802abcc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802abac:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 802abb0:	3f01      	subs	r7, #1
 802abb2:	00bf      	lsls	r7, r7, #2
 802abb4:	3704      	adds	r7, #4
 802abb6:	eb01 0e07 	add.w	lr, r1, r7
 802abba:	59c9      	ldr	r1, [r1, r7]
 802abbc:	9109      	str	r1, [sp, #36]	; 0x24
 802abbe:	0e09      	lsrs	r1, r1, #24
 802abc0:	9111      	str	r1, [sp, #68]	; 0x44
 802abc2:	f8de 1004 	ldr.w	r1, [lr, #4]
 802abc6:	910e      	str	r1, [sp, #56]	; 0x38
 802abc8:	0e09      	lsrs	r1, r1, #24
 802abca:	9115      	str	r1, [sp, #84]	; 0x54
 802abcc:	b292      	uxth	r2, r2
 802abce:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802abd0:	b280      	uxth	r0, r0
 802abd2:	fb02 f900 	mul.w	r9, r2, r0
 802abd6:	0112      	lsls	r2, r2, #4
 802abd8:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802abdc:	eba2 0e09 	sub.w	lr, r2, r9
 802abe0:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802abe4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802abe6:	b280      	uxth	r0, r0
 802abe8:	fa1f fe8e 	uxth.w	lr, lr
 802abec:	1a09      	subs	r1, r1, r0
 802abee:	fb0e f202 	mul.w	r2, lr, r2
 802abf2:	b289      	uxth	r1, r1
 802abf4:	fb01 220c 	mla	r2, r1, ip, r2
 802abf8:	fb00 2205 	mla	r2, r0, r5, r2
 802abfc:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802abfe:	fb09 2205 	mla	r2, r9, r5, r2
 802ac02:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802ac06:	2a00      	cmp	r2, #0
 802ac08:	f000 80ca 	beq.w	802ada0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 802ac0c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802ac10:	d019      	beq.n	802ac46 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 802ac12:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802ac16:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802ac1a:	fb0c fa0a 	mul.w	sl, ip, sl
 802ac1e:	fb0c fc03 	mul.w	ip, ip, r3
 802ac22:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802ac26:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802ac2a:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802ac2e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802ac32:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802ac36:	4453      	add	r3, sl
 802ac38:	0a3f      	lsrs	r7, r7, #8
 802ac3a:	0a1b      	lsrs	r3, r3, #8
 802ac3c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802ac40:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802ac44:	433b      	orrs	r3, r7
 802ac46:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802ac48:	2dff      	cmp	r5, #255	; 0xff
 802ac4a:	d020      	beq.n	802ac8e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 802ac4c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802ac4e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802ac52:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802ac54:	436f      	muls	r7, r5
 802ac56:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802ac58:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802ac5c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802ac60:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802ac62:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802ac66:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802ac6a:	fb05 fa0a 	mul.w	sl, r5, sl
 802ac6e:	44bc      	add	ip, r7
 802ac70:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802ac74:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802ac78:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802ac7c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802ac80:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802ac84:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802ac88:	ea4c 050a 	orr.w	r5, ip, sl
 802ac8c:	950d      	str	r5, [sp, #52]	; 0x34
 802ac8e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802ac90:	2dff      	cmp	r5, #255	; 0xff
 802ac92:	d020      	beq.n	802acd6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 802ac94:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802ac96:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802ac9a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802ac9c:	436f      	muls	r7, r5
 802ac9e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802aca0:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 802aca4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802aca6:	fb05 fa0c 	mul.w	sl, r5, ip
 802acaa:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802acae:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802acb2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802acb6:	44bc      	add	ip, r7
 802acb8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802acbc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802acc0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802acc4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802acc8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802accc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802acd0:	ea4c 050a 	orr.w	r5, ip, sl
 802acd4:	9509      	str	r5, [sp, #36]	; 0x24
 802acd6:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802acd8:	2dff      	cmp	r5, #255	; 0xff
 802acda:	d020      	beq.n	802ad1e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 802acdc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802acde:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802ace2:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802ace4:	436f      	muls	r7, r5
 802ace6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802ace8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802acec:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802acf0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802acf2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802acf6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802acfa:	fb05 fa0a 	mul.w	sl, r5, sl
 802acfe:	44bc      	add	ip, r7
 802ad00:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802ad04:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802ad08:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802ad0c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802ad10:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802ad14:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802ad18:	ea4c 050a 	orr.w	r5, ip, sl
 802ad1c:	950e      	str	r5, [sp, #56]	; 0x38
 802ad1e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802ad20:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802ad24:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802ad28:	2aff      	cmp	r2, #255	; 0xff
 802ad2a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802ad2e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802ad30:	fb0e f707 	mul.w	r7, lr, r7
 802ad34:	fb01 770c 	mla	r7, r1, ip, r7
 802ad38:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802ad3c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802ad3e:	fb00 770c 	mla	r7, r0, ip, r7
 802ad42:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802ad46:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802ad48:	fb09 770c 	mla	r7, r9, ip, r7
 802ad4c:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 802ad50:	fb0e fe0c 	mul.w	lr, lr, ip
 802ad54:	ea4f 2717 	mov.w	r7, r7, lsr #8
 802ad58:	fb01 e303 	mla	r3, r1, r3, lr
 802ad5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 802ad5e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802ad62:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802ad66:	990e      	ldr	r1, [sp, #56]	; 0x38
 802ad68:	fb00 330a 	mla	r3, r0, sl, r3
 802ad6c:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 802ad70:	fb09 3c0c 	mla	ip, r9, ip, r3
 802ad74:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802ad78:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802ad7c:	ea47 070c 	orr.w	r7, r7, ip
 802ad80:	ea4f 2317 	mov.w	r3, r7, lsr #8
 802ad84:	d11e      	bne.n	802adc4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 802ad86:	097a      	lsrs	r2, r7, #5
 802ad88:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 802ad8c:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 802ad90:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802ad94:	f023 0307 	bic.w	r3, r3, #7
 802ad98:	4313      	orrs	r3, r2
 802ad9a:	431f      	orrs	r7, r3
 802ad9c:	f8a8 7000 	strh.w	r7, [r8]
 802ada0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802ada2:	f108 0802 	add.w	r8, r8, #2
 802ada6:	f10b 3bff 	add.w	fp, fp, #4294967295
 802adaa:	441c      	add	r4, r3
 802adac:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802adae:	441e      	add	r6, r3
 802adb0:	e643      	b.n	802aa3a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 802adb2:	2800      	cmp	r0, #0
 802adb4:	f43f af0a 	beq.w	802abcc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802adb8:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 802adbc:	9109      	str	r1, [sp, #36]	; 0x24
 802adbe:	0e09      	lsrs	r1, r1, #24
 802adc0:	9111      	str	r1, [sp, #68]	; 0x44
 802adc2:	e703      	b.n	802abcc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802adc4:	f8b8 1000 	ldrh.w	r1, [r8]
 802adc8:	43d2      	mvns	r2, r2
 802adca:	ea4f 2c21 	mov.w	ip, r1, asr #8
 802adce:	fa5f fe82 	uxtb.w	lr, r2
 802add2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802add6:	10c8      	asrs	r0, r1, #3
 802add8:	00ca      	lsls	r2, r1, #3
 802adda:	fb0c fc0e 	mul.w	ip, ip, lr
 802adde:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802ade2:	b2d2      	uxtb	r2, r2
 802ade4:	f10c 0101 	add.w	r1, ip, #1
 802ade8:	fb00 f00e 	mul.w	r0, r0, lr
 802adec:	fb02 f20e 	mul.w	r2, r2, lr
 802adf0:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802adf4:	0c39      	lsrs	r1, r7, #16
 802adf6:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802adfa:	490f      	ldr	r1, [pc, #60]	; (802ae38 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 802adfc:	fa5f fc8c 	uxtb.w	ip, ip
 802ae00:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 802ae04:	1c41      	adds	r1, r0, #1
 802ae06:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802ae0a:	1c51      	adds	r1, r2, #1
 802ae0c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802ae10:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802ae14:	00c0      	lsls	r0, r0, #3
 802ae16:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 802ae1a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802ae1e:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 802ae22:	ea4c 0c00 	orr.w	ip, ip, r0
 802ae26:	ea47 0c0c 	orr.w	ip, r7, ip
 802ae2a:	f8a8 c000 	strh.w	ip, [r8]
 802ae2e:	e7b7      	b.n	802ada0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 802ae30:	b01b      	add	sp, #108	; 0x6c
 802ae32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ae36:	bf00      	nop
 802ae38:	fffff800 	.word	0xfffff800

0802ae3c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 802ae3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802ae40:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 802ae44:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802ae48:	2d00      	cmp	r5, #0
 802ae4a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802ae4e:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 802ae52:	fb05 0e03 	mla	lr, r5, r3, r0
 802ae56:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 802ae5a:	f2c0 808c 	blt.w	802af76 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 802ae5e:	45a9      	cmp	r9, r5
 802ae60:	f340 8089 	ble.w	802af76 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 802ae64:	2800      	cmp	r0, #0
 802ae66:	f2c0 8084 	blt.w	802af72 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 802ae6a:	4580      	cmp	r8, r0
 802ae6c:	f340 8081 	ble.w	802af72 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 802ae70:	ea4f 045e 	mov.w	r4, lr, lsr #1
 802ae74:	f01e 0f01 	tst.w	lr, #1
 802ae78:	5d16      	ldrb	r6, [r2, r4]
 802ae7a:	bf0c      	ite	eq
 802ae7c:	f006 060f 	andeq.w	r6, r6, #15
 802ae80:	1136      	asrne	r6, r6, #4
 802ae82:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802ae86:	b2f6      	uxtb	r6, r6
 802ae88:	1c44      	adds	r4, r0, #1
 802ae8a:	d477      	bmi.n	802af7c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 802ae8c:	45a0      	cmp	r8, r4
 802ae8e:	dd75      	ble.n	802af7c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 802ae90:	2f00      	cmp	r7, #0
 802ae92:	d075      	beq.n	802af80 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 802ae94:	f10e 0a01 	add.w	sl, lr, #1
 802ae98:	ea4f 045a 	mov.w	r4, sl, lsr #1
 802ae9c:	f01a 0f01 	tst.w	sl, #1
 802aea0:	5d14      	ldrb	r4, [r2, r4]
 802aea2:	bf0c      	ite	eq
 802aea4:	f004 040f 	andeq.w	r4, r4, #15
 802aea8:	1124      	asrne	r4, r4, #4
 802aeaa:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802aeae:	b2e4      	uxtb	r4, r4
 802aeb0:	3501      	adds	r5, #1
 802aeb2:	d469      	bmi.n	802af88 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 802aeb4:	45a9      	cmp	r9, r5
 802aeb6:	dd67      	ble.n	802af88 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 802aeb8:	f1bc 0f00 	cmp.w	ip, #0
 802aebc:	d067      	beq.n	802af8e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 802aebe:	2800      	cmp	r0, #0
 802aec0:	db60      	blt.n	802af84 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 802aec2:	4580      	cmp	r8, r0
 802aec4:	dd5e      	ble.n	802af84 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 802aec6:	eb03 090e 	add.w	r9, r3, lr
 802aeca:	ea4f 0559 	mov.w	r5, r9, lsr #1
 802aece:	f019 0f01 	tst.w	r9, #1
 802aed2:	5d55      	ldrb	r5, [r2, r5]
 802aed4:	bf0c      	ite	eq
 802aed6:	f005 050f 	andeq.w	r5, r5, #15
 802aeda:	112d      	asrne	r5, r5, #4
 802aedc:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 802aee0:	b2ed      	uxtb	r5, r5
 802aee2:	3001      	adds	r0, #1
 802aee4:	d456      	bmi.n	802af94 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 802aee6:	4580      	cmp	r8, r0
 802aee8:	dd54      	ble.n	802af94 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 802aeea:	2f00      	cmp	r7, #0
 802aeec:	d054      	beq.n	802af98 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 802aeee:	3301      	adds	r3, #1
 802aef0:	449e      	add	lr, r3
 802aef2:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802aef6:	f01e 0f01 	tst.w	lr, #1
 802aefa:	5cd0      	ldrb	r0, [r2, r3]
 802aefc:	bf0c      	ite	eq
 802aefe:	f000 000f 	andeq.w	r0, r0, #15
 802af02:	1100      	asrne	r0, r0, #4
 802af04:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802af08:	b2c3      	uxtb	r3, r0
 802af0a:	b2ba      	uxth	r2, r7
 802af0c:	fa1f fc8c 	uxth.w	ip, ip
 802af10:	fb02 f00c 	mul.w	r0, r2, ip
 802af14:	0112      	lsls	r2, r2, #4
 802af16:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 802af1a:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 802af1e:	1a12      	subs	r2, r2, r0
 802af20:	fa1f fc8c 	uxth.w	ip, ip
 802af24:	b292      	uxth	r2, r2
 802af26:	eba7 070c 	sub.w	r7, r7, ip
 802af2a:	4362      	muls	r2, r4
 802af2c:	b2bf      	uxth	r7, r7
 802af2e:	fb06 2207 	mla	r2, r6, r7, r2
 802af32:	fb0c 2505 	mla	r5, ip, r5, r2
 802af36:	fb00 5303 	mla	r3, r0, r3, r5
 802af3a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802af3e:	b1b3      	cbz	r3, 802af6e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 802af40:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 802af44:	435a      	muls	r2, r3
 802af46:	1c53      	adds	r3, r2, #1
 802af48:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802af4c:	4a2d      	ldr	r2, [pc, #180]	; (802b004 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 802af4e:	121b      	asrs	r3, r3, #8
 802af50:	6812      	ldr	r2, [r2, #0]
 802af52:	2bff      	cmp	r3, #255	; 0xff
 802af54:	ea4f 2612 	mov.w	r6, r2, lsr #8
 802af58:	d120      	bne.n	802af9c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 802af5a:	0950      	lsrs	r0, r2, #5
 802af5c:	4b2a      	ldr	r3, [pc, #168]	; (802b008 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 802af5e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802af62:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802af66:	4033      	ands	r3, r6
 802af68:	4318      	orrs	r0, r3
 802af6a:	4302      	orrs	r2, r0
 802af6c:	800a      	strh	r2, [r1, #0]
 802af6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802af72:	2600      	movs	r6, #0
 802af74:	e788      	b.n	802ae88 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 802af76:	2400      	movs	r4, #0
 802af78:	4626      	mov	r6, r4
 802af7a:	e799      	b.n	802aeb0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 802af7c:	2400      	movs	r4, #0
 802af7e:	e797      	b.n	802aeb0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 802af80:	463c      	mov	r4, r7
 802af82:	e795      	b.n	802aeb0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 802af84:	2500      	movs	r5, #0
 802af86:	e7ac      	b.n	802aee2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 802af88:	2300      	movs	r3, #0
 802af8a:	461d      	mov	r5, r3
 802af8c:	e7bd      	b.n	802af0a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 802af8e:	4663      	mov	r3, ip
 802af90:	4665      	mov	r5, ip
 802af92:	e7ba      	b.n	802af0a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 802af94:	2300      	movs	r3, #0
 802af96:	e7b8      	b.n	802af0a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 802af98:	463b      	mov	r3, r7
 802af9a:	e7b6      	b.n	802af0a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 802af9c:	880d      	ldrh	r5, [r1, #0]
 802af9e:	b29f      	uxth	r7, r3
 802afa0:	f3c2 4007 	ubfx	r0, r2, #16, #8
 802afa4:	43db      	mvns	r3, r3
 802afa6:	122c      	asrs	r4, r5, #8
 802afa8:	fb10 f007 	smulbb	r0, r0, r7
 802afac:	b2db      	uxtb	r3, r3
 802afae:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802afb2:	b2f6      	uxtb	r6, r6
 802afb4:	b2d2      	uxtb	r2, r2
 802afb6:	fb04 0403 	mla	r4, r4, r3, r0
 802afba:	10e8      	asrs	r0, r5, #3
 802afbc:	fb12 f207 	smulbb	r2, r2, r7
 802afc0:	00ed      	lsls	r5, r5, #3
 802afc2:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802afc6:	b2a4      	uxth	r4, r4
 802afc8:	fb16 f607 	smulbb	r6, r6, r7
 802afcc:	b2ed      	uxtb	r5, r5
 802afce:	fb00 6603 	mla	r6, r0, r3, r6
 802afd2:	fb05 2303 	mla	r3, r5, r3, r2
 802afd6:	b2b0      	uxth	r0, r6
 802afd8:	b29a      	uxth	r2, r3
 802afda:	1c63      	adds	r3, r4, #1
 802afdc:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802afe0:	1c53      	adds	r3, r2, #1
 802afe2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802afe6:	1c42      	adds	r2, r0, #1
 802afe8:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802afec:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802aff0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802aff4:	0940      	lsrs	r0, r0, #5
 802aff6:	4323      	orrs	r3, r4
 802aff8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802affc:	4303      	orrs	r3, r0
 802affe:	800b      	strh	r3, [r1, #0]
 802b000:	e7b5      	b.n	802af6e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 802b002:	bf00      	nop
 802b004:	2400baf8 	.word	0x2400baf8
 802b008:	00fff800 	.word	0x00fff800

0802b00c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802b00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b010:	b097      	sub	sp, #92	; 0x5c
 802b012:	9214      	str	r2, [sp, #80]	; 0x50
 802b014:	9309      	str	r3, [sp, #36]	; 0x24
 802b016:	9a25      	ldr	r2, [sp, #148]	; 0x94
 802b018:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 802b01c:	9015      	str	r0, [sp, #84]	; 0x54
 802b01e:	910d      	str	r1, [sp, #52]	; 0x34
 802b020:	6850      	ldr	r0, [r2, #4]
 802b022:	930f      	str	r3, [sp, #60]	; 0x3c
 802b024:	6812      	ldr	r2, [r2, #0]
 802b026:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 802b02a:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 802b02e:	fb00 1303 	mla	r3, r0, r3, r1
 802b032:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802b036:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802b038:	689b      	ldr	r3, [r3, #8]
 802b03a:	3301      	adds	r3, #1
 802b03c:	f023 0301 	bic.w	r3, r3, #1
 802b040:	930a      	str	r3, [sp, #40]	; 0x28
 802b042:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802b044:	681f      	ldr	r7, [r3, #0]
 802b046:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802b048:	2b00      	cmp	r3, #0
 802b04a:	dc03      	bgt.n	802b054 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802b04c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802b04e:	2b00      	cmp	r3, #0
 802b050:	f340 8289 	ble.w	802b566 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 802b054:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802b056:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802b05a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802b05e:	1e48      	subs	r0, r1, #1
 802b060:	f102 3cff 	add.w	ip, r2, #4294967295
 802b064:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b066:	2b00      	cmp	r3, #0
 802b068:	f340 80c5 	ble.w	802b1f6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802b06c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802b070:	ea4f 4326 	mov.w	r3, r6, asr #16
 802b074:	d406      	bmi.n	802b084 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802b076:	4586      	cmp	lr, r0
 802b078:	da04      	bge.n	802b084 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802b07a:	2b00      	cmp	r3, #0
 802b07c:	db02      	blt.n	802b084 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802b07e:	4563      	cmp	r3, ip
 802b080:	f2c0 80ba 	blt.w	802b1f8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 802b084:	f11e 0e01 	adds.w	lr, lr, #1
 802b088:	f100 80ab 	bmi.w	802b1e2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 802b08c:	4571      	cmp	r1, lr
 802b08e:	f2c0 80a8 	blt.w	802b1e2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 802b092:	3301      	adds	r3, #1
 802b094:	f100 80a5 	bmi.w	802b1e2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 802b098:	429a      	cmp	r2, r3
 802b09a:	f2c0 80a2 	blt.w	802b1e2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 802b09e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b0a0:	46c8      	mov	r8, r9
 802b0a2:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 802b0a6:	930e      	str	r3, [sp, #56]	; 0x38
 802b0a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802b0aa:	2b00      	cmp	r3, #0
 802b0ac:	f340 80c4 	ble.w	802b238 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 802b0b0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802b0b2:	1430      	asrs	r0, r6, #16
 802b0b4:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802b0b8:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802b0bc:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802b0c0:	1423      	asrs	r3, r4, #16
 802b0c2:	f100 814f 	bmi.w	802b364 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802b0c6:	f10c 3bff 	add.w	fp, ip, #4294967295
 802b0ca:	455b      	cmp	r3, fp
 802b0cc:	f280 814a 	bge.w	802b364 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802b0d0:	2800      	cmp	r0, #0
 802b0d2:	f2c0 8147 	blt.w	802b364 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802b0d6:	f10e 3bff 	add.w	fp, lr, #4294967295
 802b0da:	4558      	cmp	r0, fp
 802b0dc:	f280 8142 	bge.w	802b364 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802b0e0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802b0e2:	fb00 3305 	mla	r3, r0, r5, r3
 802b0e6:	0858      	lsrs	r0, r3, #1
 802b0e8:	07dd      	lsls	r5, r3, #31
 802b0ea:	f817 c000 	ldrb.w	ip, [r7, r0]
 802b0ee:	bf54      	ite	pl
 802b0f0:	f00c 0c0f 	andpl.w	ip, ip, #15
 802b0f4:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802b0f8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802b0fc:	fa5f fc8c 	uxtb.w	ip, ip
 802b100:	2a00      	cmp	r2, #0
 802b102:	f000 80dd 	beq.w	802b2c0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 802b106:	1c58      	adds	r0, r3, #1
 802b108:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802b10c:	07c0      	lsls	r0, r0, #31
 802b10e:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802b112:	bf54      	ite	pl
 802b114:	f00e 0e0f 	andpl.w	lr, lr, #15
 802b118:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802b11c:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802b120:	fa5f f08e 	uxtb.w	r0, lr
 802b124:	9010      	str	r0, [sp, #64]	; 0x40
 802b126:	b1d9      	cbz	r1, 802b160 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 802b128:	4453      	add	r3, sl
 802b12a:	0858      	lsrs	r0, r3, #1
 802b12c:	07dd      	lsls	r5, r3, #31
 802b12e:	f103 0301 	add.w	r3, r3, #1
 802b132:	5c38      	ldrb	r0, [r7, r0]
 802b134:	bf54      	ite	pl
 802b136:	f000 000f 	andpl.w	r0, r0, #15
 802b13a:	1100      	asrmi	r0, r0, #4
 802b13c:	07dd      	lsls	r5, r3, #31
 802b13e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802b142:	b2c0      	uxtb	r0, r0
 802b144:	900b      	str	r0, [sp, #44]	; 0x2c
 802b146:	ea4f 0053 	mov.w	r0, r3, lsr #1
 802b14a:	f817 e000 	ldrb.w	lr, [r7, r0]
 802b14e:	bf54      	ite	pl
 802b150:	f00e 030f 	andpl.w	r3, lr, #15
 802b154:	ea4f 132e 	movmi.w	r3, lr, asr #4
 802b158:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802b15c:	b2db      	uxtb	r3, r3
 802b15e:	9311      	str	r3, [sp, #68]	; 0x44
 802b160:	b292      	uxth	r2, r2
 802b162:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802b164:	b289      	uxth	r1, r1
 802b166:	fb02 f301 	mul.w	r3, r2, r1
 802b16a:	0112      	lsls	r2, r2, #4
 802b16c:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802b170:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 802b174:	1ad2      	subs	r2, r2, r3
 802b176:	b289      	uxth	r1, r1
 802b178:	b292      	uxth	r2, r2
 802b17a:	1a40      	subs	r0, r0, r1
 802b17c:	436a      	muls	r2, r5
 802b17e:	b280      	uxth	r0, r0
 802b180:	fb0c 2c00 	mla	ip, ip, r0, r2
 802b184:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802b186:	fb01 c102 	mla	r1, r1, r2, ip
 802b18a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802b18c:	fb03 1302 	mla	r3, r3, r2, r1
 802b190:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802b194:	b1db      	cbz	r3, 802b1ce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802b196:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802b198:	4353      	muls	r3, r2
 802b19a:	1c5a      	adds	r2, r3, #1
 802b19c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802b1a0:	4ac6      	ldr	r2, [pc, #792]	; (802b4bc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 802b1a2:	121b      	asrs	r3, r3, #8
 802b1a4:	6812      	ldr	r2, [r2, #0]
 802b1a6:	2bff      	cmp	r3, #255	; 0xff
 802b1a8:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 802b1ac:	f040 8099 	bne.w	802b2e2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 802b1b0:	0953      	lsrs	r3, r2, #5
 802b1b2:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 802b1b6:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802b1ba:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802b1be:	f02c 0c07 	bic.w	ip, ip, #7
 802b1c2:	ea43 0c0c 	orr.w	ip, r3, ip
 802b1c6:	ea4c 0202 	orr.w	r2, ip, r2
 802b1ca:	f8a8 2000 	strh.w	r2, [r8]
 802b1ce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802b1d0:	f108 0802 	add.w	r8, r8, #2
 802b1d4:	441c      	add	r4, r3
 802b1d6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802b1d8:	441e      	add	r6, r3
 802b1da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802b1dc:	3b01      	subs	r3, #1
 802b1de:	930e      	str	r3, [sp, #56]	; 0x38
 802b1e0:	e762      	b.n	802b0a8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802b1e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802b1e4:	f109 0902 	add.w	r9, r9, #2
 802b1e8:	441c      	add	r4, r3
 802b1ea:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802b1ec:	441e      	add	r6, r3
 802b1ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b1f0:	3b01      	subs	r3, #1
 802b1f2:	9309      	str	r3, [sp, #36]	; 0x24
 802b1f4:	e736      	b.n	802b064 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802b1f6:	d024      	beq.n	802b242 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 802b1f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b1fa:	9823      	ldr	r0, [sp, #140]	; 0x8c
 802b1fc:	3b01      	subs	r3, #1
 802b1fe:	fb00 4003 	mla	r0, r0, r3, r4
 802b202:	1400      	asrs	r0, r0, #16
 802b204:	f53f af4b 	bmi.w	802b09e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802b208:	3901      	subs	r1, #1
 802b20a:	4288      	cmp	r0, r1
 802b20c:	f6bf af47 	bge.w	802b09e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802b210:	9924      	ldr	r1, [sp, #144]	; 0x90
 802b212:	fb01 6303 	mla	r3, r1, r3, r6
 802b216:	141b      	asrs	r3, r3, #16
 802b218:	f53f af41 	bmi.w	802b09e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802b21c:	3a01      	subs	r2, #1
 802b21e:	4293      	cmp	r3, r2
 802b220:	f6bf af3d 	bge.w	802b09e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802b224:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 802b228:	46c8      	mov	r8, r9
 802b22a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 802b22e:	930e      	str	r3, [sp, #56]	; 0x38
 802b230:	f1bb 0f00 	cmp.w	fp, #0
 802b234:	f300 80b7 	bgt.w	802b3a6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 802b238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b23a:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802b23e:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802b242:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802b244:	2b00      	cmp	r3, #0
 802b246:	f340 818e 	ble.w	802b566 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 802b24a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802b24e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802b250:	ee30 0a04 	vadd.f32	s0, s0, s8
 802b254:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802b258:	eef0 6a62 	vmov.f32	s13, s5
 802b25c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802b260:	ee31 1a05 	vadd.f32	s2, s2, s10
 802b264:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802b268:	ee16 4a90 	vmov	r4, s13
 802b26c:	eef0 6a43 	vmov.f32	s13, s6
 802b270:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802b274:	ee16 6a90 	vmov	r6, s13
 802b278:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802b27c:	ee61 7a27 	vmul.f32	s15, s2, s15
 802b280:	ee77 2a62 	vsub.f32	s5, s14, s5
 802b284:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802b288:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802b28c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802b290:	ee12 2a90 	vmov	r2, s5
 802b294:	eef0 2a47 	vmov.f32	s5, s14
 802b298:	fb92 f3f3 	sdiv	r3, r2, r3
 802b29c:	ee13 2a10 	vmov	r2, s6
 802b2a0:	9323      	str	r3, [sp, #140]	; 0x8c
 802b2a2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802b2a4:	eeb0 3a67 	vmov.f32	s6, s15
 802b2a8:	fb92 f3f3 	sdiv	r3, r2, r3
 802b2ac:	9324      	str	r3, [sp, #144]	; 0x90
 802b2ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802b2b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802b2b2:	3b01      	subs	r3, #1
 802b2b4:	930d      	str	r3, [sp, #52]	; 0x34
 802b2b6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802b2b8:	bf08      	it	eq
 802b2ba:	4613      	moveq	r3, r2
 802b2bc:	9309      	str	r3, [sp, #36]	; 0x24
 802b2be:	e6c2      	b.n	802b046 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802b2c0:	2900      	cmp	r1, #0
 802b2c2:	f43f af4d 	beq.w	802b160 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 802b2c6:	eb0a 0003 	add.w	r0, sl, r3
 802b2ca:	0843      	lsrs	r3, r0, #1
 802b2cc:	07c0      	lsls	r0, r0, #31
 802b2ce:	5cfb      	ldrb	r3, [r7, r3]
 802b2d0:	bf54      	ite	pl
 802b2d2:	f003 030f 	andpl.w	r3, r3, #15
 802b2d6:	111b      	asrmi	r3, r3, #4
 802b2d8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802b2dc:	b2db      	uxtb	r3, r3
 802b2de:	930b      	str	r3, [sp, #44]	; 0x2c
 802b2e0:	e73e      	b.n	802b160 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 802b2e2:	f8b8 e000 	ldrh.w	lr, [r8]
 802b2e6:	fa1f fb83 	uxth.w	fp, r3
 802b2ea:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802b2ee:	43db      	mvns	r3, r3
 802b2f0:	ea4f 202e 	mov.w	r0, lr, asr #8
 802b2f4:	fb11 f10b 	smulbb	r1, r1, fp
 802b2f8:	b2db      	uxtb	r3, r3
 802b2fa:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802b2fe:	fa5f fc8c 	uxtb.w	ip, ip
 802b302:	b2d2      	uxtb	r2, r2
 802b304:	fb00 1003 	mla	r0, r0, r3, r1
 802b308:	ea4f 01ee 	mov.w	r1, lr, asr #3
 802b30c:	fb1c fc0b 	smulbb	ip, ip, fp
 802b310:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802b314:	b280      	uxth	r0, r0
 802b316:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802b31a:	fb12 fb0b 	smulbb	fp, r2, fp
 802b31e:	fa5f fe8e 	uxtb.w	lr, lr
 802b322:	fb01 cc03 	mla	ip, r1, r3, ip
 802b326:	fb0e bb03 	mla	fp, lr, r3, fp
 802b32a:	1c43      	adds	r3, r0, #1
 802b32c:	fa1f fc8c 	uxth.w	ip, ip
 802b330:	fa1f fb8b 	uxth.w	fp, fp
 802b334:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802b338:	f10c 0101 	add.w	r1, ip, #1
 802b33c:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 802b340:	f10b 0001 	add.w	r0, fp, #1
 802b344:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802b348:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 802b34c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802b350:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802b354:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802b358:	4318      	orrs	r0, r3
 802b35a:	ea40 000c 	orr.w	r0, r0, ip
 802b35e:	f8a8 0000 	strh.w	r0, [r8]
 802b362:	e734      	b.n	802b1ce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802b364:	f113 0b01 	adds.w	fp, r3, #1
 802b368:	f53f af31 	bmi.w	802b1ce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802b36c:	45dc      	cmp	ip, fp
 802b36e:	f6ff af2e 	blt.w	802b1ce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802b372:	f110 0b01 	adds.w	fp, r0, #1
 802b376:	f53f af2a 	bmi.w	802b1ce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802b37a:	45de      	cmp	lr, fp
 802b37c:	f6ff af27 	blt.w	802b1ce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802b380:	9302      	str	r3, [sp, #8]
 802b382:	fa0f f38e 	sxth.w	r3, lr
 802b386:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802b388:	9301      	str	r3, [sp, #4]
 802b38a:	fa0f f38c 	sxth.w	r3, ip
 802b38e:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802b392:	e9cd 1505 	strd	r1, r5, [sp, #20]
 802b396:	9300      	str	r3, [sp, #0]
 802b398:	463a      	mov	r2, r7
 802b39a:	4653      	mov	r3, sl
 802b39c:	4641      	mov	r1, r8
 802b39e:	9815      	ldr	r0, [sp, #84]	; 0x54
 802b3a0:	f7ff fd4c 	bl	802ae3c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 802b3a4:	e713      	b.n	802b1ce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802b3a6:	1422      	asrs	r2, r4, #16
 802b3a8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802b3aa:	1433      	asrs	r3, r6, #16
 802b3ac:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802b3b0:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802b3b4:	fb05 2303 	mla	r3, r5, r3, r2
 802b3b8:	085a      	lsrs	r2, r3, #1
 802b3ba:	07dd      	lsls	r5, r3, #31
 802b3bc:	5cba      	ldrb	r2, [r7, r2]
 802b3be:	bf54      	ite	pl
 802b3c0:	f002 020f 	andpl.w	r2, r2, #15
 802b3c4:	1112      	asrmi	r2, r2, #4
 802b3c6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802b3ca:	b2d2      	uxtb	r2, r2
 802b3cc:	2900      	cmp	r1, #0
 802b3ce:	d077      	beq.n	802b4c0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 802b3d0:	f103 0e01 	add.w	lr, r3, #1
 802b3d4:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 802b3d8:	f01e 0f01 	tst.w	lr, #1
 802b3dc:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802b3e0:	bf0c      	ite	eq
 802b3e2:	f00c 0c0f 	andeq.w	ip, ip, #15
 802b3e6:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802b3ea:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802b3ee:	fa5f f58c 	uxtb.w	r5, ip
 802b3f2:	9512      	str	r5, [sp, #72]	; 0x48
 802b3f4:	b308      	cbz	r0, 802b43a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 802b3f6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802b3f8:	442b      	add	r3, r5
 802b3fa:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802b3fe:	07dd      	lsls	r5, r3, #31
 802b400:	f103 0301 	add.w	r3, r3, #1
 802b404:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802b408:	bf54      	ite	pl
 802b40a:	f00c 0c0f 	andpl.w	ip, ip, #15
 802b40e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802b412:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802b416:	fa5f f58c 	uxtb.w	r5, ip
 802b41a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802b41e:	950c      	str	r5, [sp, #48]	; 0x30
 802b420:	07dd      	lsls	r5, r3, #31
 802b422:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802b426:	bf54      	ite	pl
 802b428:	f00c 0c0f 	andpl.w	ip, ip, #15
 802b42c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802b430:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802b434:	fa5f f38c 	uxtb.w	r3, ip
 802b438:	9313      	str	r3, [sp, #76]	; 0x4c
 802b43a:	b289      	uxth	r1, r1
 802b43c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802b43e:	b280      	uxth	r0, r0
 802b440:	fb01 f300 	mul.w	r3, r1, r0
 802b444:	0109      	lsls	r1, r1, #4
 802b446:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 802b44a:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 802b44e:	1ac9      	subs	r1, r1, r3
 802b450:	b280      	uxth	r0, r0
 802b452:	b289      	uxth	r1, r1
 802b454:	ebac 0c00 	sub.w	ip, ip, r0
 802b458:	4369      	muls	r1, r5
 802b45a:	fa1f fc8c 	uxth.w	ip, ip
 802b45e:	fb02 120c 	mla	r2, r2, ip, r1
 802b462:	990c      	ldr	r1, [sp, #48]	; 0x30
 802b464:	fb00 2001 	mla	r0, r0, r1, r2
 802b468:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802b46a:	fb03 0302 	mla	r3, r3, r2, r0
 802b46e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802b472:	b1d3      	cbz	r3, 802b4aa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 802b474:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802b476:	4353      	muls	r3, r2
 802b478:	1c5a      	adds	r2, r3, #1
 802b47a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802b47e:	4a0f      	ldr	r2, [pc, #60]	; (802b4bc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 802b480:	121b      	asrs	r3, r3, #8
 802b482:	6812      	ldr	r2, [r2, #0]
 802b484:	2bff      	cmp	r3, #255	; 0xff
 802b486:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 802b48a:	d12d      	bne.n	802b4e8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 802b48c:	0953      	lsrs	r3, r2, #5
 802b48e:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 802b492:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802b496:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802b49a:	f02c 0c07 	bic.w	ip, ip, #7
 802b49e:	ea43 0c0c 	orr.w	ip, r3, ip
 802b4a2:	ea4c 0202 	orr.w	r2, ip, r2
 802b4a6:	f8a8 2000 	strh.w	r2, [r8]
 802b4aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802b4ac:	f108 0802 	add.w	r8, r8, #2
 802b4b0:	f10b 3bff 	add.w	fp, fp, #4294967295
 802b4b4:	441c      	add	r4, r3
 802b4b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802b4b8:	441e      	add	r6, r3
 802b4ba:	e6b9      	b.n	802b230 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 802b4bc:	2400baf8 	.word	0x2400baf8
 802b4c0:	2800      	cmp	r0, #0
 802b4c2:	d0ba      	beq.n	802b43a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 802b4c4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802b4c6:	442b      	add	r3, r5
 802b4c8:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802b4cc:	07db      	lsls	r3, r3, #31
 802b4ce:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802b4d2:	bf54      	ite	pl
 802b4d4:	f00c 0c0f 	andpl.w	ip, ip, #15
 802b4d8:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802b4dc:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802b4e0:	fa5f f38c 	uxtb.w	r3, ip
 802b4e4:	930c      	str	r3, [sp, #48]	; 0x30
 802b4e6:	e7a8      	b.n	802b43a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 802b4e8:	f8b8 e000 	ldrh.w	lr, [r8]
 802b4ec:	fa1f fa83 	uxth.w	sl, r3
 802b4f0:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802b4f4:	43db      	mvns	r3, r3
 802b4f6:	ea4f 202e 	mov.w	r0, lr, asr #8
 802b4fa:	fb11 f10a 	smulbb	r1, r1, sl
 802b4fe:	b2db      	uxtb	r3, r3
 802b500:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802b504:	b2d2      	uxtb	r2, r2
 802b506:	fa5f fc8c 	uxtb.w	ip, ip
 802b50a:	fb00 1003 	mla	r0, r0, r3, r1
 802b50e:	ea4f 01ee 	mov.w	r1, lr, asr #3
 802b512:	fb12 f20a 	smulbb	r2, r2, sl
 802b516:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802b51a:	b280      	uxth	r0, r0
 802b51c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802b520:	fb1c fc0a 	smulbb	ip, ip, sl
 802b524:	fa5f fe8e 	uxtb.w	lr, lr
 802b528:	fb0e 2203 	mla	r2, lr, r3, r2
 802b52c:	fb01 cc03 	mla	ip, r1, r3, ip
 802b530:	1c43      	adds	r3, r0, #1
 802b532:	b292      	uxth	r2, r2
 802b534:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802b538:	1c51      	adds	r1, r2, #1
 802b53a:	fa1f fc8c 	uxth.w	ip, ip
 802b53e:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802b542:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 802b546:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802b54a:	4308      	orrs	r0, r1
 802b54c:	f10c 0101 	add.w	r1, ip, #1
 802b550:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802b554:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802b558:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802b55c:	ea40 000c 	orr.w	r0, r0, ip
 802b560:	f8a8 0000 	strh.w	r0, [r8]
 802b564:	e7a1      	b.n	802b4aa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 802b566:	b017      	add	sp, #92	; 0x5c
 802b568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802b56c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 802b56c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802b570:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 802b574:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802b578:	2d00      	cmp	r5, #0
 802b57a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802b57e:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 802b582:	fb05 0e03 	mla	lr, r5, r3, r0
 802b586:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 802b58a:	f2c0 80b0 	blt.w	802b6ee <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 802b58e:	45a9      	cmp	r9, r5
 802b590:	f340 80ad 	ble.w	802b6ee <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 802b594:	2800      	cmp	r0, #0
 802b596:	f2c0 80a8 	blt.w	802b6ea <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 802b59a:	4580      	cmp	r8, r0
 802b59c:	f340 80a5 	ble.w	802b6ea <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 802b5a0:	ea4f 045e 	mov.w	r4, lr, lsr #1
 802b5a4:	f01e 0f01 	tst.w	lr, #1
 802b5a8:	5d16      	ldrb	r6, [r2, r4]
 802b5aa:	bf0c      	ite	eq
 802b5ac:	f006 060f 	andeq.w	r6, r6, #15
 802b5b0:	1136      	asrne	r6, r6, #4
 802b5b2:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802b5b6:	b2f6      	uxtb	r6, r6
 802b5b8:	1c44      	adds	r4, r0, #1
 802b5ba:	f100 809b 	bmi.w	802b6f4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 802b5be:	45a0      	cmp	r8, r4
 802b5c0:	f340 8098 	ble.w	802b6f4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 802b5c4:	2f00      	cmp	r7, #0
 802b5c6:	f000 8097 	beq.w	802b6f8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 802b5ca:	f10e 0a01 	add.w	sl, lr, #1
 802b5ce:	ea4f 045a 	mov.w	r4, sl, lsr #1
 802b5d2:	f01a 0f01 	tst.w	sl, #1
 802b5d6:	5d14      	ldrb	r4, [r2, r4]
 802b5d8:	bf0c      	ite	eq
 802b5da:	f004 040f 	andeq.w	r4, r4, #15
 802b5de:	1124      	asrne	r4, r4, #4
 802b5e0:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802b5e4:	b2e4      	uxtb	r4, r4
 802b5e6:	3501      	adds	r5, #1
 802b5e8:	f100 808a 	bmi.w	802b700 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 802b5ec:	45a9      	cmp	r9, r5
 802b5ee:	f340 8087 	ble.w	802b700 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 802b5f2:	f1bc 0f00 	cmp.w	ip, #0
 802b5f6:	f000 8086 	beq.w	802b706 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 802b5fa:	2800      	cmp	r0, #0
 802b5fc:	db7e      	blt.n	802b6fc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 802b5fe:	4580      	cmp	r8, r0
 802b600:	dd7c      	ble.n	802b6fc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 802b602:	eb03 090e 	add.w	r9, r3, lr
 802b606:	ea4f 0559 	mov.w	r5, r9, lsr #1
 802b60a:	f019 0f01 	tst.w	r9, #1
 802b60e:	5d55      	ldrb	r5, [r2, r5]
 802b610:	bf0c      	ite	eq
 802b612:	f005 050f 	andeq.w	r5, r5, #15
 802b616:	112d      	asrne	r5, r5, #4
 802b618:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 802b61c:	b2ed      	uxtb	r5, r5
 802b61e:	3001      	adds	r0, #1
 802b620:	d474      	bmi.n	802b70c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802b622:	4580      	cmp	r8, r0
 802b624:	dd72      	ble.n	802b70c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802b626:	2f00      	cmp	r7, #0
 802b628:	d072      	beq.n	802b710 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 802b62a:	3301      	adds	r3, #1
 802b62c:	449e      	add	lr, r3
 802b62e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802b632:	f01e 0f01 	tst.w	lr, #1
 802b636:	5cd0      	ldrb	r0, [r2, r3]
 802b638:	bf0c      	ite	eq
 802b63a:	f000 000f 	andeq.w	r0, r0, #15
 802b63e:	1100      	asrne	r0, r0, #4
 802b640:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802b644:	b2c3      	uxtb	r3, r0
 802b646:	b2ba      	uxth	r2, r7
 802b648:	fa1f fc8c 	uxth.w	ip, ip
 802b64c:	fb02 f00c 	mul.w	r0, r2, ip
 802b650:	0112      	lsls	r2, r2, #4
 802b652:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 802b656:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 802b65a:	1a12      	subs	r2, r2, r0
 802b65c:	fa1f fc8c 	uxth.w	ip, ip
 802b660:	b292      	uxth	r2, r2
 802b662:	eba7 070c 	sub.w	r7, r7, ip
 802b666:	4362      	muls	r2, r4
 802b668:	b2bf      	uxth	r7, r7
 802b66a:	fb06 2207 	mla	r2, r6, r7, r2
 802b66e:	fb0c 2505 	mla	r5, ip, r5, r2
 802b672:	fb00 5303 	mla	r3, r0, r3, r5
 802b676:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802b67a:	b3a3      	cbz	r3, 802b6e6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 802b67c:	4a25      	ldr	r2, [pc, #148]	; (802b714 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 802b67e:	880e      	ldrh	r6, [r1, #0]
 802b680:	6815      	ldr	r5, [r2, #0]
 802b682:	b29a      	uxth	r2, r3
 802b684:	1234      	asrs	r4, r6, #8
 802b686:	43db      	mvns	r3, r3
 802b688:	f3c5 4007 	ubfx	r0, r5, #16, #8
 802b68c:	f3c5 2707 	ubfx	r7, r5, #8, #8
 802b690:	b2db      	uxtb	r3, r3
 802b692:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802b696:	fb10 f002 	smulbb	r0, r0, r2
 802b69a:	b2ed      	uxtb	r5, r5
 802b69c:	fb17 f702 	smulbb	r7, r7, r2
 802b6a0:	fb04 0403 	mla	r4, r4, r3, r0
 802b6a4:	10f0      	asrs	r0, r6, #3
 802b6a6:	fb15 f202 	smulbb	r2, r5, r2
 802b6aa:	00f6      	lsls	r6, r6, #3
 802b6ac:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802b6b0:	b2a4      	uxth	r4, r4
 802b6b2:	b2f6      	uxtb	r6, r6
 802b6b4:	fb00 7003 	mla	r0, r0, r3, r7
 802b6b8:	fb06 2303 	mla	r3, r6, r3, r2
 802b6bc:	b280      	uxth	r0, r0
 802b6be:	b29a      	uxth	r2, r3
 802b6c0:	1c63      	adds	r3, r4, #1
 802b6c2:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802b6c6:	1c53      	adds	r3, r2, #1
 802b6c8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802b6cc:	1c42      	adds	r2, r0, #1
 802b6ce:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802b6d2:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802b6d6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802b6da:	0940      	lsrs	r0, r0, #5
 802b6dc:	4323      	orrs	r3, r4
 802b6de:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802b6e2:	4303      	orrs	r3, r0
 802b6e4:	800b      	strh	r3, [r1, #0]
 802b6e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b6ea:	2600      	movs	r6, #0
 802b6ec:	e764      	b.n	802b5b8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 802b6ee:	2400      	movs	r4, #0
 802b6f0:	4626      	mov	r6, r4
 802b6f2:	e778      	b.n	802b5e6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802b6f4:	2400      	movs	r4, #0
 802b6f6:	e776      	b.n	802b5e6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802b6f8:	463c      	mov	r4, r7
 802b6fa:	e774      	b.n	802b5e6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802b6fc:	2500      	movs	r5, #0
 802b6fe:	e78e      	b.n	802b61e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 802b700:	2300      	movs	r3, #0
 802b702:	461d      	mov	r5, r3
 802b704:	e79f      	b.n	802b646 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802b706:	4663      	mov	r3, ip
 802b708:	4665      	mov	r5, ip
 802b70a:	e79c      	b.n	802b646 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802b70c:	2300      	movs	r3, #0
 802b70e:	e79a      	b.n	802b646 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802b710:	463b      	mov	r3, r7
 802b712:	e798      	b.n	802b646 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802b714:	2400baf8 	.word	0x2400baf8

0802b718 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802b718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b71c:	b093      	sub	sp, #76	; 0x4c
 802b71e:	461d      	mov	r5, r3
 802b720:	920c      	str	r2, [sp, #48]	; 0x30
 802b722:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802b724:	9011      	str	r0, [sp, #68]	; 0x44
 802b726:	9107      	str	r1, [sp, #28]
 802b728:	6850      	ldr	r0, [r2, #4]
 802b72a:	6812      	ldr	r2, [r2, #0]
 802b72c:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 802b730:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 802b734:	fb00 1303 	mla	r3, r0, r3, r1
 802b738:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802b73c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802b73e:	689b      	ldr	r3, [r3, #8]
 802b740:	3301      	adds	r3, #1
 802b742:	f023 0301 	bic.w	r3, r3, #1
 802b746:	9306      	str	r3, [sp, #24]
 802b748:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802b74a:	681f      	ldr	r7, [r3, #0]
 802b74c:	9b07      	ldr	r3, [sp, #28]
 802b74e:	2b00      	cmp	r3, #0
 802b750:	dc03      	bgt.n	802b75a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 802b752:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802b754:	2b00      	cmp	r3, #0
 802b756:	f340 8267 	ble.w	802bc28 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 802b75a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802b75c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802b760:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802b764:	1e48      	subs	r0, r1, #1
 802b766:	f102 3cff 	add.w	ip, r2, #4294967295
 802b76a:	2d00      	cmp	r5, #0
 802b76c:	f340 80b7 	ble.w	802b8de <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802b770:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802b774:	ea4f 4326 	mov.w	r3, r6, asr #16
 802b778:	d406      	bmi.n	802b788 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802b77a:	4586      	cmp	lr, r0
 802b77c:	da04      	bge.n	802b788 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802b77e:	2b00      	cmp	r3, #0
 802b780:	db02      	blt.n	802b788 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802b782:	4563      	cmp	r3, ip
 802b784:	f2c0 80ac 	blt.w	802b8e0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 802b788:	f11e 0e01 	adds.w	lr, lr, #1
 802b78c:	f100 809f 	bmi.w	802b8ce <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802b790:	4571      	cmp	r1, lr
 802b792:	f2c0 809c 	blt.w	802b8ce <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802b796:	3301      	adds	r3, #1
 802b798:	f100 8099 	bmi.w	802b8ce <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802b79c:	429a      	cmp	r2, r3
 802b79e:	f2c0 8096 	blt.w	802b8ce <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802b7a2:	46c8      	mov	r8, r9
 802b7a4:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 802b7a8:	9509      	str	r5, [sp, #36]	; 0x24
 802b7aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b7ac:	2b00      	cmp	r3, #0
 802b7ae:	f340 80b5 	ble.w	802b91c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802b7b2:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802b7b6:	1430      	asrs	r0, r6, #16
 802b7b8:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802b7bc:	9308      	str	r3, [sp, #32]
 802b7be:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802b7c0:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802b7c4:	1423      	asrs	r3, r4, #16
 802b7c6:	f100 813f 	bmi.w	802ba48 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802b7ca:	f10c 3bff 	add.w	fp, ip, #4294967295
 802b7ce:	455b      	cmp	r3, fp
 802b7d0:	f280 813a 	bge.w	802ba48 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802b7d4:	2800      	cmp	r0, #0
 802b7d6:	f2c0 8137 	blt.w	802ba48 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802b7da:	f10e 3bff 	add.w	fp, lr, #4294967295
 802b7de:	4558      	cmp	r0, fp
 802b7e0:	f280 8132 	bge.w	802ba48 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802b7e4:	9a06      	ldr	r2, [sp, #24]
 802b7e6:	fb00 3302 	mla	r3, r0, r2, r3
 802b7ea:	0858      	lsrs	r0, r3, #1
 802b7ec:	07da      	lsls	r2, r3, #31
 802b7ee:	9a08      	ldr	r2, [sp, #32]
 802b7f0:	f817 c000 	ldrb.w	ip, [r7, r0]
 802b7f4:	bf54      	ite	pl
 802b7f6:	f00c 0c0f 	andpl.w	ip, ip, #15
 802b7fa:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802b7fe:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802b802:	fa5f fc8c 	uxtb.w	ip, ip
 802b806:	2a00      	cmp	r2, #0
 802b808:	f000 80cc 	beq.w	802b9a4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 802b80c:	1c58      	adds	r0, r3, #1
 802b80e:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802b812:	07c0      	lsls	r0, r0, #31
 802b814:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802b818:	bf54      	ite	pl
 802b81a:	f00e 0e0f 	andpl.w	lr, lr, #15
 802b81e:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802b822:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802b826:	fa5f fe8e 	uxtb.w	lr, lr
 802b82a:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 802b82e:	b1b9      	cbz	r1, 802b860 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802b830:	4453      	add	r3, sl
 802b832:	0858      	lsrs	r0, r3, #1
 802b834:	07da      	lsls	r2, r3, #31
 802b836:	5c38      	ldrb	r0, [r7, r0]
 802b838:	bf54      	ite	pl
 802b83a:	f000 000f 	andpl.w	r0, r0, #15
 802b83e:	1100      	asrmi	r0, r0, #4
 802b840:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802b844:	b2c0      	uxtb	r0, r0
 802b846:	900a      	str	r0, [sp, #40]	; 0x28
 802b848:	1c58      	adds	r0, r3, #1
 802b84a:	0843      	lsrs	r3, r0, #1
 802b84c:	07c2      	lsls	r2, r0, #31
 802b84e:	5cfb      	ldrb	r3, [r7, r3]
 802b850:	bf54      	ite	pl
 802b852:	f003 030f 	andpl.w	r3, r3, #15
 802b856:	111b      	asrmi	r3, r3, #4
 802b858:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802b85c:	b2db      	uxtb	r3, r3
 802b85e:	930e      	str	r3, [sp, #56]	; 0x38
 802b860:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802b864:	b289      	uxth	r1, r1
 802b866:	fb02 f301 	mul.w	r3, r2, r1
 802b86a:	0112      	lsls	r2, r2, #4
 802b86c:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802b870:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 802b874:	1ad2      	subs	r2, r2, r3
 802b876:	b289      	uxth	r1, r1
 802b878:	b292      	uxth	r2, r2
 802b87a:	1a40      	subs	r0, r0, r1
 802b87c:	fa1f fe80 	uxth.w	lr, r0
 802b880:	980d      	ldr	r0, [sp, #52]	; 0x34
 802b882:	4342      	muls	r2, r0
 802b884:	fb0c 2c0e 	mla	ip, ip, lr, r2
 802b888:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802b88a:	fb01 c102 	mla	r1, r1, r2, ip
 802b88e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802b890:	fb03 1302 	mla	r3, r3, r2, r1
 802b894:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802b898:	2bff      	cmp	r3, #255	; 0xff
 802b89a:	f040 8094 	bne.w	802b9c6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 802b89e:	4bbf      	ldr	r3, [pc, #764]	; (802bb9c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802b8a0:	681a      	ldr	r2, [r3, #0]
 802b8a2:	4bbf      	ldr	r3, [pc, #764]	; (802bba0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 802b8a4:	0951      	lsrs	r1, r2, #5
 802b8a6:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802b8aa:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802b8ae:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802b8b2:	430b      	orrs	r3, r1
 802b8b4:	4313      	orrs	r3, r2
 802b8b6:	f8a8 3000 	strh.w	r3, [r8]
 802b8ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802b8bc:	f108 0802 	add.w	r8, r8, #2
 802b8c0:	441c      	add	r4, r3
 802b8c2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802b8c4:	441e      	add	r6, r3
 802b8c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b8c8:	3b01      	subs	r3, #1
 802b8ca:	9309      	str	r3, [sp, #36]	; 0x24
 802b8cc:	e76d      	b.n	802b7aa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802b8ce:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802b8d0:	3d01      	subs	r5, #1
 802b8d2:	f109 0902 	add.w	r9, r9, #2
 802b8d6:	441c      	add	r4, r3
 802b8d8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802b8da:	441e      	add	r6, r3
 802b8dc:	e745      	b.n	802b76a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802b8de:	d021      	beq.n	802b924 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 802b8e0:	1e6b      	subs	r3, r5, #1
 802b8e2:	981f      	ldr	r0, [sp, #124]	; 0x7c
 802b8e4:	fb00 4003 	mla	r0, r0, r3, r4
 802b8e8:	1400      	asrs	r0, r0, #16
 802b8ea:	f53f af5a 	bmi.w	802b7a2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802b8ee:	3901      	subs	r1, #1
 802b8f0:	4288      	cmp	r0, r1
 802b8f2:	f6bf af56 	bge.w	802b7a2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802b8f6:	9920      	ldr	r1, [sp, #128]	; 0x80
 802b8f8:	fb01 6303 	mla	r3, r1, r3, r6
 802b8fc:	141b      	asrs	r3, r3, #16
 802b8fe:	f53f af50 	bmi.w	802b7a2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802b902:	3a01      	subs	r2, #1
 802b904:	4293      	cmp	r3, r2
 802b906:	f6bf af4c 	bge.w	802b7a2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802b90a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 802b90e:	46a8      	mov	r8, r5
 802b910:	46ce      	mov	lr, r9
 802b912:	9308      	str	r3, [sp, #32]
 802b914:	f1b8 0f00 	cmp.w	r8, #0
 802b918:	f300 80b6 	bgt.w	802ba88 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 802b91c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802b920:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802b924:	9b07      	ldr	r3, [sp, #28]
 802b926:	2b00      	cmp	r3, #0
 802b928:	f340 817e 	ble.w	802bc28 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 802b92c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802b930:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802b932:	ee30 0a04 	vadd.f32	s0, s0, s8
 802b936:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802b93a:	eef0 6a62 	vmov.f32	s13, s5
 802b93e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802b942:	ee31 1a05 	vadd.f32	s2, s2, s10
 802b946:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802b94a:	ee16 4a90 	vmov	r4, s13
 802b94e:	eef0 6a43 	vmov.f32	s13, s6
 802b952:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802b956:	ee16 6a90 	vmov	r6, s13
 802b95a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802b95e:	ee61 7a27 	vmul.f32	s15, s2, s15
 802b962:	ee77 2a62 	vsub.f32	s5, s14, s5
 802b966:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802b96a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802b96e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802b972:	ee12 2a90 	vmov	r2, s5
 802b976:	eef0 2a47 	vmov.f32	s5, s14
 802b97a:	fb92 f3f3 	sdiv	r3, r2, r3
 802b97e:	ee13 2a10 	vmov	r2, s6
 802b982:	931f      	str	r3, [sp, #124]	; 0x7c
 802b984:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802b986:	eeb0 3a67 	vmov.f32	s6, s15
 802b98a:	fb92 f3f3 	sdiv	r3, r2, r3
 802b98e:	9320      	str	r3, [sp, #128]	; 0x80
 802b990:	9b07      	ldr	r3, [sp, #28]
 802b992:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802b994:	3b01      	subs	r3, #1
 802b996:	9307      	str	r3, [sp, #28]
 802b998:	bf08      	it	eq
 802b99a:	4615      	moveq	r5, r2
 802b99c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802b99e:	bf18      	it	ne
 802b9a0:	461d      	movne	r5, r3
 802b9a2:	e6d3      	b.n	802b74c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 802b9a4:	2900      	cmp	r1, #0
 802b9a6:	f43f af5b 	beq.w	802b860 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802b9aa:	eb0a 0003 	add.w	r0, sl, r3
 802b9ae:	0843      	lsrs	r3, r0, #1
 802b9b0:	07c0      	lsls	r0, r0, #31
 802b9b2:	5cfb      	ldrb	r3, [r7, r3]
 802b9b4:	bf54      	ite	pl
 802b9b6:	f003 030f 	andpl.w	r3, r3, #15
 802b9ba:	111b      	asrmi	r3, r3, #4
 802b9bc:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802b9c0:	b2db      	uxtb	r3, r3
 802b9c2:	930a      	str	r3, [sp, #40]	; 0x28
 802b9c4:	e74c      	b.n	802b860 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802b9c6:	2b00      	cmp	r3, #0
 802b9c8:	f43f af77 	beq.w	802b8ba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802b9cc:	4a73      	ldr	r2, [pc, #460]	; (802bb9c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802b9ce:	fa1f fe83 	uxth.w	lr, r3
 802b9d2:	f8b8 c000 	ldrh.w	ip, [r8]
 802b9d6:	43db      	mvns	r3, r3
 802b9d8:	6810      	ldr	r0, [r2, #0]
 802b9da:	ea4f 212c 	mov.w	r1, ip, asr #8
 802b9de:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802b9e2:	b2db      	uxtb	r3, r3
 802b9e4:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802b9e8:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802b9ec:	fb12 f20e 	smulbb	r2, r2, lr
 802b9f0:	b2c0      	uxtb	r0, r0
 802b9f2:	fb1b fb0e 	smulbb	fp, fp, lr
 802b9f6:	fb01 2103 	mla	r1, r1, r3, r2
 802b9fa:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802b9fe:	fb10 fe0e 	smulbb	lr, r0, lr
 802ba02:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802ba06:	b289      	uxth	r1, r1
 802ba08:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802ba0c:	fa5f fc8c 	uxtb.w	ip, ip
 802ba10:	fb02 b203 	mla	r2, r2, r3, fp
 802ba14:	1c48      	adds	r0, r1, #1
 802ba16:	fb0c e303 	mla	r3, ip, r3, lr
 802ba1a:	b292      	uxth	r2, r2
 802ba1c:	b29b      	uxth	r3, r3
 802ba1e:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802ba22:	f102 0b01 	add.w	fp, r2, #1
 802ba26:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 802ba2a:	1c59      	adds	r1, r3, #1
 802ba2c:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802ba30:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802ba34:	0952      	lsrs	r2, r2, #5
 802ba36:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802ba3a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802ba3e:	4301      	orrs	r1, r0
 802ba40:	4311      	orrs	r1, r2
 802ba42:	f8a8 1000 	strh.w	r1, [r8]
 802ba46:	e738      	b.n	802b8ba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802ba48:	f113 0b01 	adds.w	fp, r3, #1
 802ba4c:	f53f af35 	bmi.w	802b8ba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802ba50:	45dc      	cmp	ip, fp
 802ba52:	f6ff af32 	blt.w	802b8ba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802ba56:	f110 0b01 	adds.w	fp, r0, #1
 802ba5a:	f53f af2e 	bmi.w	802b8ba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802ba5e:	45de      	cmp	lr, fp
 802ba60:	f6ff af2b 	blt.w	802b8ba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802ba64:	9302      	str	r3, [sp, #8]
 802ba66:	fa0f f38e 	sxth.w	r3, lr
 802ba6a:	9a08      	ldr	r2, [sp, #32]
 802ba6c:	9301      	str	r3, [sp, #4]
 802ba6e:	fa0f f38c 	sxth.w	r3, ip
 802ba72:	9105      	str	r1, [sp, #20]
 802ba74:	4641      	mov	r1, r8
 802ba76:	9300      	str	r3, [sp, #0]
 802ba78:	4653      	mov	r3, sl
 802ba7a:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802ba7e:	463a      	mov	r2, r7
 802ba80:	9811      	ldr	r0, [sp, #68]	; 0x44
 802ba82:	f7ff fd73 	bl	802b56c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 802ba86:	e718      	b.n	802b8ba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802ba88:	1422      	asrs	r2, r4, #16
 802ba8a:	9906      	ldr	r1, [sp, #24]
 802ba8c:	1433      	asrs	r3, r6, #16
 802ba8e:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802ba92:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802ba96:	fb01 2303 	mla	r3, r1, r3, r2
 802ba9a:	085a      	lsrs	r2, r3, #1
 802ba9c:	07d9      	lsls	r1, r3, #31
 802ba9e:	5cba      	ldrb	r2, [r7, r2]
 802baa0:	bf54      	ite	pl
 802baa2:	f002 020f 	andpl.w	r2, r2, #15
 802baa6:	1112      	asrmi	r2, r2, #4
 802baa8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802baac:	b2d2      	uxtb	r2, r2
 802baae:	2800      	cmp	r0, #0
 802bab0:	d063      	beq.n	802bb7a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 802bab2:	f103 0a01 	add.w	sl, r3, #1
 802bab6:	ea4f 015a 	mov.w	r1, sl, lsr #1
 802baba:	f01a 0f01 	tst.w	sl, #1
 802babe:	5c79      	ldrb	r1, [r7, r1]
 802bac0:	bf0c      	ite	eq
 802bac2:	f001 010f 	andeq.w	r1, r1, #15
 802bac6:	1109      	asrne	r1, r1, #4
 802bac8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802bacc:	b2c9      	uxtb	r1, r1
 802bace:	910f      	str	r1, [sp, #60]	; 0x3c
 802bad0:	f1bc 0f00 	cmp.w	ip, #0
 802bad4:	d01a      	beq.n	802bb0c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 802bad6:	9908      	ldr	r1, [sp, #32]
 802bad8:	440b      	add	r3, r1
 802bada:	0859      	lsrs	r1, r3, #1
 802badc:	f013 0f01 	tst.w	r3, #1
 802bae0:	f103 0301 	add.w	r3, r3, #1
 802bae4:	5c79      	ldrb	r1, [r7, r1]
 802bae6:	bf0c      	ite	eq
 802bae8:	f001 010f 	andeq.w	r1, r1, #15
 802baec:	1109      	asrne	r1, r1, #4
 802baee:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802baf2:	b2c9      	uxtb	r1, r1
 802baf4:	910b      	str	r1, [sp, #44]	; 0x2c
 802baf6:	0859      	lsrs	r1, r3, #1
 802baf8:	07db      	lsls	r3, r3, #31
 802bafa:	5c79      	ldrb	r1, [r7, r1]
 802bafc:	bf54      	ite	pl
 802bafe:	f001 010f 	andpl.w	r1, r1, #15
 802bb02:	1109      	asrmi	r1, r1, #4
 802bb04:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802bb08:	b2c9      	uxtb	r1, r1
 802bb0a:	9110      	str	r1, [sp, #64]	; 0x40
 802bb0c:	b280      	uxth	r0, r0
 802bb0e:	fa1f fc8c 	uxth.w	ip, ip
 802bb12:	fb00 f30c 	mul.w	r3, r0, ip
 802bb16:	0100      	lsls	r0, r0, #4
 802bb18:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 802bb1c:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 802bb20:	1ac0      	subs	r0, r0, r3
 802bb22:	fa1f fc8c 	uxth.w	ip, ip
 802bb26:	b280      	uxth	r0, r0
 802bb28:	eba1 010c 	sub.w	r1, r1, ip
 802bb2c:	fa1f fa81 	uxth.w	sl, r1
 802bb30:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802bb32:	4348      	muls	r0, r1
 802bb34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802bb36:	fb02 020a 	mla	r2, r2, sl, r0
 802bb3a:	fb0c 2c01 	mla	ip, ip, r1, r2
 802bb3e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802bb40:	fb03 c302 	mla	r3, r3, r2, ip
 802bb44:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802bb48:	2bff      	cmp	r3, #255	; 0xff
 802bb4a:	d12b      	bne.n	802bba4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 802bb4c:	4b13      	ldr	r3, [pc, #76]	; (802bb9c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802bb4e:	681a      	ldr	r2, [r3, #0]
 802bb50:	4b13      	ldr	r3, [pc, #76]	; (802bba0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 802bb52:	0951      	lsrs	r1, r2, #5
 802bb54:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802bb58:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802bb5c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802bb60:	430b      	orrs	r3, r1
 802bb62:	4313      	orrs	r3, r2
 802bb64:	f8ae 3000 	strh.w	r3, [lr]
 802bb68:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802bb6a:	f10e 0e02 	add.w	lr, lr, #2
 802bb6e:	f108 38ff 	add.w	r8, r8, #4294967295
 802bb72:	441c      	add	r4, r3
 802bb74:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802bb76:	441e      	add	r6, r3
 802bb78:	e6cc      	b.n	802b914 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 802bb7a:	f1bc 0f00 	cmp.w	ip, #0
 802bb7e:	d0c5      	beq.n	802bb0c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 802bb80:	9908      	ldr	r1, [sp, #32]
 802bb82:	440b      	add	r3, r1
 802bb84:	0859      	lsrs	r1, r3, #1
 802bb86:	07db      	lsls	r3, r3, #31
 802bb88:	5c79      	ldrb	r1, [r7, r1]
 802bb8a:	bf54      	ite	pl
 802bb8c:	f001 010f 	andpl.w	r1, r1, #15
 802bb90:	1109      	asrmi	r1, r1, #4
 802bb92:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802bb96:	b2c9      	uxtb	r1, r1
 802bb98:	910b      	str	r1, [sp, #44]	; 0x2c
 802bb9a:	e7b7      	b.n	802bb0c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 802bb9c:	2400baf8 	.word	0x2400baf8
 802bba0:	fffff800 	.word	0xfffff800
 802bba4:	2b00      	cmp	r3, #0
 802bba6:	d0df      	beq.n	802bb68 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 802bba8:	4a21      	ldr	r2, [pc, #132]	; (802bc30 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>)
 802bbaa:	fa1f fa83 	uxth.w	sl, r3
 802bbae:	f8be c000 	ldrh.w	ip, [lr]
 802bbb2:	43db      	mvns	r3, r3
 802bbb4:	6810      	ldr	r0, [r2, #0]
 802bbb6:	ea4f 212c 	mov.w	r1, ip, asr #8
 802bbba:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802bbbe:	b2db      	uxtb	r3, r3
 802bbc0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802bbc4:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802bbc8:	fb12 f20a 	smulbb	r2, r2, sl
 802bbcc:	b2c0      	uxtb	r0, r0
 802bbce:	fb1b fb0a 	smulbb	fp, fp, sl
 802bbd2:	fb01 2103 	mla	r1, r1, r3, r2
 802bbd6:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802bbda:	fb10 f00a 	smulbb	r0, r0, sl
 802bbde:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802bbe2:	b289      	uxth	r1, r1
 802bbe4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802bbe8:	fa5f fc8c 	uxtb.w	ip, ip
 802bbec:	fb02 b203 	mla	r2, r2, r3, fp
 802bbf0:	fb0c 0003 	mla	r0, ip, r3, r0
 802bbf4:	1c4b      	adds	r3, r1, #1
 802bbf6:	b292      	uxth	r2, r2
 802bbf8:	b280      	uxth	r0, r0
 802bbfa:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802bbfe:	f100 0b01 	add.w	fp, r0, #1
 802bc02:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 802bc06:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 802bc0a:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 802bc0e:	ea4b 0101 	orr.w	r1, fp, r1
 802bc12:	f102 0b01 	add.w	fp, r2, #1
 802bc16:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802bc1a:	0952      	lsrs	r2, r2, #5
 802bc1c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802bc20:	4311      	orrs	r1, r2
 802bc22:	f8ae 1000 	strh.w	r1, [lr]
 802bc26:	e79f      	b.n	802bb68 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 802bc28:	b013      	add	sp, #76	; 0x4c
 802bc2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802bc2e:	bf00      	nop
 802bc30:	2400baf8 	.word	0x2400baf8

0802bc34 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>:
 802bc34:	b570      	push	{r4, r5, r6, lr}
 802bc36:	1208      	asrs	r0, r1, #8
 802bc38:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 802bc3c:	b29e      	uxth	r6, r3
 802bc3e:	1213      	asrs	r3, r2, #8
 802bc40:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802bc44:	10cc      	asrs	r4, r1, #3
 802bc46:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 802bc4a:	00c9      	lsls	r1, r1, #3
 802bc4c:	fb10 f006 	smulbb	r0, r0, r6
 802bc50:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 802bc54:	fb13 f305 	smulbb	r3, r3, r5
 802bc58:	fb14 f406 	smulbb	r4, r4, r6
 802bc5c:	4418      	add	r0, r3
 802bc5e:	10d3      	asrs	r3, r2, #3
 802bc60:	00d2      	lsls	r2, r2, #3
 802bc62:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 802bc66:	b280      	uxth	r0, r0
 802bc68:	b2d2      	uxtb	r2, r2
 802bc6a:	fb13 f305 	smulbb	r3, r3, r5
 802bc6e:	fb12 f205 	smulbb	r2, r2, r5
 802bc72:	441c      	add	r4, r3
 802bc74:	b2cb      	uxtb	r3, r1
 802bc76:	fb13 f306 	smulbb	r3, r3, r6
 802bc7a:	b2a4      	uxth	r4, r4
 802bc7c:	4413      	add	r3, r2
 802bc7e:	1c42      	adds	r2, r0, #1
 802bc80:	b29b      	uxth	r3, r3
 802bc82:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802bc86:	f400 4278 	and.w	r2, r0, #63488	; 0xf800
 802bc8a:	1c58      	adds	r0, r3, #1
 802bc8c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802bc90:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802bc94:	4310      	orrs	r0, r2
 802bc96:	1c62      	adds	r2, r4, #1
 802bc98:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 802bc9c:	0964      	lsrs	r4, r4, #5
 802bc9e:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 802bca2:	4320      	orrs	r0, r4
 802bca4:	bd70      	pop	{r4, r5, r6, pc}
	...

0802bca8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 802bca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bcac:	b08f      	sub	sp, #60	; 0x3c
 802bcae:	461c      	mov	r4, r3
 802bcb0:	460d      	mov	r5, r1
 802bcb2:	4616      	mov	r6, r2
 802bcb4:	f89d 7064 	ldrb.w	r7, [sp, #100]	; 0x64
 802bcb8:	9004      	str	r0, [sp, #16]
 802bcba:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802bcbc:	2f00      	cmp	r7, #0
 802bcbe:	f000 80f6 	beq.w	802beae <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x206>
 802bcc2:	6820      	ldr	r0, [r4, #0]
 802bcc4:	aa0a      	add	r2, sp, #40	; 0x28
 802bcc6:	6861      	ldr	r1, [r4, #4]
 802bcc8:	f04f 0802 	mov.w	r8, #2
 802bccc:	3604      	adds	r6, #4
 802bcce:	c203      	stmia	r2!, {r0, r1}
 802bcd0:	6818      	ldr	r0, [r3, #0]
 802bcd2:	aa0c      	add	r2, sp, #48	; 0x30
 802bcd4:	6859      	ldr	r1, [r3, #4]
 802bcd6:	c203      	stmia	r2!, {r0, r1}
 802bcd8:	a80a      	add	r0, sp, #40	; 0x28
 802bcda:	f7ef fccd 	bl	801b678 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802bcde:	4621      	mov	r1, r4
 802bce0:	a80c      	add	r0, sp, #48	; 0x30
 802bce2:	f7ef fcf1 	bl	801b6c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802bce6:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 802bcea:	f9bd b036 	ldrsh.w	fp, [sp, #54]	; 0x36
 802bcee:	f002 0301 	and.w	r3, r2, #1
 802bcf2:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 802bcf6:	9306      	str	r3, [sp, #24]
 802bcf8:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 802bcfc:	f003 0101 	and.w	r1, r3, #1
 802bd00:	9105      	str	r1, [sp, #20]
 802bd02:	9805      	ldr	r0, [sp, #20]
 802bd04:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 802bd08:	4403      	add	r3, r0
 802bd0a:	fb01 2303 	mla	r3, r1, r3, r2
 802bd0e:	fb93 f3f8 	sdiv	r3, r3, r8
 802bd12:	441d      	add	r5, r3
 802bd14:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 802bd18:	441a      	add	r2, r3
 802bd1a:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 802bd1e:	4419      	add	r1, r3
 802bd20:	4b64      	ldr	r3, [pc, #400]	; (802beb4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 802bd22:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 802bd26:	6818      	ldr	r0, [r3, #0]
 802bd28:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32
 802bd2c:	6803      	ldr	r3, [r0, #0]
 802bd2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802bd30:	4798      	blx	r3
 802bd32:	4a61      	ldr	r2, [pc, #388]	; (802beb8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x210>)
 802bd34:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	; 0x32
 802bd38:	2fff      	cmp	r7, #255	; 0xff
 802bd3a:	8813      	ldrh	r3, [r2, #0]
 802bd3c:	4611      	mov	r1, r2
 802bd3e:	f9bd a030 	ldrsh.w	sl, [sp, #48]	; 0x30
 802bd42:	fb03 fb0b 	mul.w	fp, r3, fp
 802bd46:	fb03 a404 	mla	r4, r3, r4, sl
 802bd4a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802bd4e:	d06b      	beq.n	802be28 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x180>
 802bd50:	f1c7 03ff 	rsb	r3, r7, #255	; 0xff
 802bd54:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 802bd58:	9303      	str	r3, [sp, #12]
 802bd5a:	eb04 034b 	add.w	r3, r4, fp, lsl #1
 802bd5e:	e9cd 3207 	strd	r3, r2, [sp, #28]
 802bd62:	9b07      	ldr	r3, [sp, #28]
 802bd64:	42a3      	cmp	r3, r4
 802bd66:	f240 809d 	bls.w	802bea4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 802bd6a:	9b06      	ldr	r3, [sp, #24]
 802bd6c:	2b00      	cmp	r3, #0
 802bd6e:	d039      	beq.n	802bde4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13c>
 802bd70:	782b      	ldrb	r3, [r5, #0]
 802bd72:	f105 0801 	add.w	r8, r5, #1
 802bd76:	f109 3bff 	add.w	fp, r9, #4294967295
 802bd7a:	8822      	ldrh	r2, [r4, #0]
 802bd7c:	f003 030f 	and.w	r3, r3, #15
 802bd80:	9804      	ldr	r0, [sp, #16]
 802bd82:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 802bd86:	9b03      	ldr	r3, [sp, #12]
 802bd88:	9300      	str	r3, [sp, #0]
 802bd8a:	463b      	mov	r3, r7
 802bd8c:	f7ff ff52 	bl	802bc34 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 802bd90:	f824 0b02 	strh.w	r0, [r4], #2
 802bd94:	f1bb 0f01 	cmp.w	fp, #1
 802bd98:	46a2      	mov	sl, r4
 802bd9a:	f104 0404 	add.w	r4, r4, #4
 802bd9e:	dd24      	ble.n	802bdea <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x142>
 802bda0:	f898 3000 	ldrb.w	r3, [r8]
 802bda4:	f1ab 0b02 	sub.w	fp, fp, #2
 802bda8:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 802bdac:	091b      	lsrs	r3, r3, #4
 802bdae:	9804      	ldr	r0, [sp, #16]
 802bdb0:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 802bdb4:	9b03      	ldr	r3, [sp, #12]
 802bdb6:	9300      	str	r3, [sp, #0]
 802bdb8:	463b      	mov	r3, r7
 802bdba:	f7ff ff3b 	bl	802bc34 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 802bdbe:	f824 0c04 	strh.w	r0, [r4, #-4]
 802bdc2:	f818 3b01 	ldrb.w	r3, [r8], #1
 802bdc6:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 802bdca:	f003 030f 	and.w	r3, r3, #15
 802bdce:	9804      	ldr	r0, [sp, #16]
 802bdd0:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 802bdd4:	9b03      	ldr	r3, [sp, #12]
 802bdd6:	9300      	str	r3, [sp, #0]
 802bdd8:	463b      	mov	r3, r7
 802bdda:	f7ff ff2b 	bl	802bc34 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 802bdde:	f824 0c02 	strh.w	r0, [r4, #-2]
 802bde2:	e7d7      	b.n	802bd94 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xec>
 802bde4:	46a8      	mov	r8, r5
 802bde6:	46cb      	mov	fp, r9
 802bde8:	e7d4      	b.n	802bd94 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xec>
 802bdea:	d10e      	bne.n	802be0a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x162>
 802bdec:	f898 3000 	ldrb.w	r3, [r8]
 802bdf0:	f8ba 2000 	ldrh.w	r2, [sl]
 802bdf4:	091b      	lsrs	r3, r3, #4
 802bdf6:	9804      	ldr	r0, [sp, #16]
 802bdf8:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 802bdfc:	9b03      	ldr	r3, [sp, #12]
 802bdfe:	9300      	str	r3, [sp, #0]
 802be00:	463b      	mov	r3, r7
 802be02:	f7ff ff17 	bl	802bc34 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 802be06:	f82a 0b02 	strh.w	r0, [sl], #2
 802be0a:	9b08      	ldr	r3, [sp, #32]
 802be0c:	9a05      	ldr	r2, [sp, #20]
 802be0e:	881c      	ldrh	r4, [r3, #0]
 802be10:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 802be14:	eba4 0409 	sub.w	r4, r4, r9
 802be18:	4413      	add	r3, r2
 802be1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802be1c:	eb0a 0444 	add.w	r4, sl, r4, lsl #1
 802be20:	fb93 f3f2 	sdiv	r3, r3, r2
 802be24:	441d      	add	r5, r3
 802be26:	e79c      	b.n	802bd62 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xba>
 802be28:	eb04 0b4b 	add.w	fp, r4, fp, lsl #1
 802be2c:	45a3      	cmp	fp, r4
 802be2e:	d939      	bls.n	802bea4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 802be30:	9b06      	ldr	r3, [sp, #24]
 802be32:	b1fb      	cbz	r3, 802be74 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1cc>
 802be34:	782b      	ldrb	r3, [r5, #0]
 802be36:	1c6a      	adds	r2, r5, #1
 802be38:	f109 30ff 	add.w	r0, r9, #4294967295
 802be3c:	3402      	adds	r4, #2
 802be3e:	f003 030f 	and.w	r3, r3, #15
 802be42:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802be46:	f824 3c02 	strh.w	r3, [r4, #-2]
 802be4a:	2801      	cmp	r0, #1
 802be4c:	4623      	mov	r3, r4
 802be4e:	f104 0404 	add.w	r4, r4, #4
 802be52:	dd12      	ble.n	802be7a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1d2>
 802be54:	7813      	ldrb	r3, [r2, #0]
 802be56:	3802      	subs	r0, #2
 802be58:	091b      	lsrs	r3, r3, #4
 802be5a:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802be5e:	f824 3c04 	strh.w	r3, [r4, #-4]
 802be62:	f812 3b01 	ldrb.w	r3, [r2], #1
 802be66:	f003 030f 	and.w	r3, r3, #15
 802be6a:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802be6e:	f824 3c02 	strh.w	r3, [r4, #-2]
 802be72:	e7ea      	b.n	802be4a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 802be74:	462a      	mov	r2, r5
 802be76:	4648      	mov	r0, r9
 802be78:	e7e7      	b.n	802be4a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 802be7a:	d106      	bne.n	802be8a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e2>
 802be7c:	7812      	ldrb	r2, [r2, #0]
 802be7e:	3302      	adds	r3, #2
 802be80:	0912      	lsrs	r2, r2, #4
 802be82:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 802be86:	f823 2c02 	strh.w	r2, [r3, #-2]
 802be8a:	880c      	ldrh	r4, [r1, #0]
 802be8c:	9a05      	ldr	r2, [sp, #20]
 802be8e:	eba4 0409 	sub.w	r4, r4, r9
 802be92:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 802be96:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 802be9a:	4413      	add	r3, r2
 802be9c:	fb93 f3f8 	sdiv	r3, r3, r8
 802bea0:	441d      	add	r5, r3
 802bea2:	e7c3      	b.n	802be2c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x184>
 802bea4:	4b03      	ldr	r3, [pc, #12]	; (802beb4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 802bea6:	6818      	ldr	r0, [r3, #0]
 802bea8:	6803      	ldr	r3, [r0, #0]
 802beaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802beac:	4798      	blx	r3
 802beae:	b00f      	add	sp, #60	; 0x3c
 802beb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802beb4:	2400baf0 	.word	0x2400baf0
 802beb8:	2400baea 	.word	0x2400baea

0802bebc <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>:
 802bebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 802bebe:	f89d 5014 	ldrb.w	r5, [sp, #20]
 802bec2:	0a0f      	lsrs	r7, r1, #8
 802bec4:	2dff      	cmp	r5, #255	; 0xff
 802bec6:	d10c      	bne.n	802bee2 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 802bec8:	2bff      	cmp	r3, #255	; 0xff
 802beca:	d10a      	bne.n	802bee2 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 802becc:	0948      	lsrs	r0, r1, #5
 802bece:	4b25      	ldr	r3, [pc, #148]	; (802bf64 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0xa8>)
 802bed0:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 802bed4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802bed8:	403b      	ands	r3, r7
 802beda:	4318      	orrs	r0, r3
 802bedc:	4308      	orrs	r0, r1
 802bede:	b280      	uxth	r0, r0
 802bee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802bee2:	fb15 f503 	smulbb	r5, r5, r3
 802bee6:	1214      	asrs	r4, r2, #8
 802bee8:	10d6      	asrs	r6, r2, #3
 802beea:	b2ab      	uxth	r3, r5
 802beec:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802bef0:	00d0      	lsls	r0, r2, #3
 802bef2:	f3c1 4207 	ubfx	r2, r1, #16, #8
 802bef6:	1c5d      	adds	r5, r3, #1
 802bef8:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 802befc:	b2c0      	uxtb	r0, r0
 802befe:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802bf02:	eb05 2513 	add.w	r5, r5, r3, lsr #8
 802bf06:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 802bf0a:	f3c5 2507 	ubfx	r5, r5, #8, #8
 802bf0e:	fa1f fc85 	uxth.w	ip, r5
 802bf12:	43ed      	mvns	r5, r5
 802bf14:	fb12 f20c 	smulbb	r2, r2, ip
 802bf18:	b2eb      	uxtb	r3, r5
 802bf1a:	b2fd      	uxtb	r5, r7
 802bf1c:	fb04 2403 	mla	r4, r4, r3, r2
 802bf20:	ea40 1250 	orr.w	r2, r0, r0, lsr #5
 802bf24:	fb15 f50c 	smulbb	r5, r5, ip
 802bf28:	b2c8      	uxtb	r0, r1
 802bf2a:	b2a4      	uxth	r4, r4
 802bf2c:	fb10 f00c 	smulbb	r0, r0, ip
 802bf30:	fb06 5503 	mla	r5, r6, r3, r5
 802bf34:	fb02 0003 	mla	r0, r2, r3, r0
 802bf38:	b2ad      	uxth	r5, r5
 802bf3a:	b283      	uxth	r3, r0
 802bf3c:	1c60      	adds	r0, r4, #1
 802bf3e:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 802bf42:	1c58      	adds	r0, r3, #1
 802bf44:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802bf48:	1c6b      	adds	r3, r5, #1
 802bf4a:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802bf4e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802bf52:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802bf56:	096d      	lsrs	r5, r5, #5
 802bf58:	4320      	orrs	r0, r4
 802bf5a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802bf5e:	4328      	orrs	r0, r5
 802bf60:	e7be      	b.n	802bee0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x24>
 802bf62:	bf00      	nop
 802bf64:	00fff800 	.word	0x00fff800

0802bf68 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 802bf68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bf6c:	461c      	mov	r4, r3
 802bf6e:	b08d      	sub	sp, #52	; 0x34
 802bf70:	460d      	mov	r5, r1
 802bf72:	4616      	mov	r6, r2
 802bf74:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802bf76:	4680      	mov	r8, r0
 802bf78:	6861      	ldr	r1, [r4, #4]
 802bf7a:	aa08      	add	r2, sp, #32
 802bf7c:	6820      	ldr	r0, [r4, #0]
 802bf7e:	f04f 0a02 	mov.w	sl, #2
 802bf82:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
 802bf86:	3604      	adds	r6, #4
 802bf88:	c203      	stmia	r2!, {r0, r1}
 802bf8a:	6818      	ldr	r0, [r3, #0]
 802bf8c:	aa0a      	add	r2, sp, #40	; 0x28
 802bf8e:	6859      	ldr	r1, [r3, #4]
 802bf90:	c203      	stmia	r2!, {r0, r1}
 802bf92:	a808      	add	r0, sp, #32
 802bf94:	f7ef fb70 	bl	801b678 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802bf98:	4621      	mov	r1, r4
 802bf9a:	a80a      	add	r0, sp, #40	; 0x28
 802bf9c:	f7ef fb94 	bl	801b6c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802bfa0:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 802bfa4:	f9bd 702e 	ldrsh.w	r7, [sp, #46]	; 0x2e
 802bfa8:	f002 0301 	and.w	r3, r2, #1
 802bfac:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 802bfb0:	9303      	str	r3, [sp, #12]
 802bfb2:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 802bfb6:	f003 0101 	and.w	r1, r3, #1
 802bfba:	9102      	str	r1, [sp, #8]
 802bfbc:	9802      	ldr	r0, [sp, #8]
 802bfbe:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 802bfc2:	4403      	add	r3, r0
 802bfc4:	fb01 2303 	mla	r3, r1, r3, r2
 802bfc8:	fb93 f3fa 	sdiv	r3, r3, sl
 802bfcc:	441d      	add	r5, r3
 802bfce:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802bfd2:	441a      	add	r2, r3
 802bfd4:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 802bfd8:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 802bfdc:	4419      	add	r1, r3
 802bfde:	4a3e      	ldr	r2, [pc, #248]	; (802c0d8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x170>)
 802bfe0:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
 802bfe4:	6810      	ldr	r0, [r2, #0]
 802bfe6:	9205      	str	r2, [sp, #20]
 802bfe8:	6803      	ldr	r3, [r0, #0]
 802bfea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802bfec:	4798      	blx	r3
 802bfee:	4b3b      	ldr	r3, [pc, #236]	; (802c0dc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x174>)
 802bff0:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	; 0x2a
 802bff4:	8819      	ldrh	r1, [r3, #0]
 802bff6:	f9bd c028 	ldrsh.w	ip, [sp, #40]	; 0x28
 802bffa:	434f      	muls	r7, r1
 802bffc:	fb01 c404 	mla	r4, r1, r4, ip
 802c000:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802c004:	eb04 0247 	add.w	r2, r4, r7, lsl #1
 802c008:	e9cd 3a06 	strd	r3, sl, [sp, #24]
 802c00c:	9204      	str	r2, [sp, #16]
 802c00e:	9b04      	ldr	r3, [sp, #16]
 802c010:	429c      	cmp	r4, r3
 802c012:	d258      	bcs.n	802c0c6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x15e>
 802c014:	9b03      	ldr	r3, [sp, #12]
 802c016:	2b00      	cmp	r3, #0
 802c018:	d034      	beq.n	802c084 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 802c01a:	782b      	ldrb	r3, [r5, #0]
 802c01c:	1c6f      	adds	r7, r5, #1
 802c01e:	f003 030f 	and.w	r3, r3, #15
 802c022:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802c026:	0e0b      	lsrs	r3, r1, #24
 802c028:	d006      	beq.n	802c038 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd0>
 802c02a:	8822      	ldrh	r2, [r4, #0]
 802c02c:	4640      	mov	r0, r8
 802c02e:	9300      	str	r3, [sp, #0]
 802c030:	464b      	mov	r3, r9
 802c032:	f7ff ff43 	bl	802bebc <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 802c036:	8020      	strh	r0, [r4, #0]
 802c038:	3402      	adds	r4, #2
 802c03a:	f10b 3aff 	add.w	sl, fp, #4294967295
 802c03e:	f1ba 0f01 	cmp.w	sl, #1
 802c042:	dd22      	ble.n	802c08a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 802c044:	783b      	ldrb	r3, [r7, #0]
 802c046:	091b      	lsrs	r3, r3, #4
 802c048:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802c04c:	0e0b      	lsrs	r3, r1, #24
 802c04e:	d006      	beq.n	802c05e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf6>
 802c050:	8822      	ldrh	r2, [r4, #0]
 802c052:	4640      	mov	r0, r8
 802c054:	9300      	str	r3, [sp, #0]
 802c056:	464b      	mov	r3, r9
 802c058:	f7ff ff30 	bl	802bebc <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 802c05c:	8020      	strh	r0, [r4, #0]
 802c05e:	f817 3b01 	ldrb.w	r3, [r7], #1
 802c062:	f003 030f 	and.w	r3, r3, #15
 802c066:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802c06a:	0e0b      	lsrs	r3, r1, #24
 802c06c:	d006      	beq.n	802c07c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x114>
 802c06e:	8862      	ldrh	r2, [r4, #2]
 802c070:	4640      	mov	r0, r8
 802c072:	9300      	str	r3, [sp, #0]
 802c074:	464b      	mov	r3, r9
 802c076:	f7ff ff21 	bl	802bebc <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 802c07a:	8060      	strh	r0, [r4, #2]
 802c07c:	3404      	adds	r4, #4
 802c07e:	f1aa 0a02 	sub.w	sl, sl, #2
 802c082:	e7dc      	b.n	802c03e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 802c084:	462f      	mov	r7, r5
 802c086:	46da      	mov	sl, fp
 802c088:	e7d9      	b.n	802c03e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 802c08a:	d10d      	bne.n	802c0a8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x140>
 802c08c:	783b      	ldrb	r3, [r7, #0]
 802c08e:	091b      	lsrs	r3, r3, #4
 802c090:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802c094:	0e0b      	lsrs	r3, r1, #24
 802c096:	d006      	beq.n	802c0a6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 802c098:	8822      	ldrh	r2, [r4, #0]
 802c09a:	4640      	mov	r0, r8
 802c09c:	9300      	str	r3, [sp, #0]
 802c09e:	464b      	mov	r3, r9
 802c0a0:	f7ff ff0c 	bl	802bebc <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 802c0a4:	8020      	strh	r0, [r4, #0]
 802c0a6:	3402      	adds	r4, #2
 802c0a8:	9b06      	ldr	r3, [sp, #24]
 802c0aa:	9a02      	ldr	r2, [sp, #8]
 802c0ac:	881b      	ldrh	r3, [r3, #0]
 802c0ae:	eba3 030b 	sub.w	r3, r3, fp
 802c0b2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802c0b6:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 802c0ba:	4413      	add	r3, r2
 802c0bc:	9a07      	ldr	r2, [sp, #28]
 802c0be:	fb93 f3f2 	sdiv	r3, r3, r2
 802c0c2:	441d      	add	r5, r3
 802c0c4:	e7a3      	b.n	802c00e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa6>
 802c0c6:	9b05      	ldr	r3, [sp, #20]
 802c0c8:	6818      	ldr	r0, [r3, #0]
 802c0ca:	6803      	ldr	r3, [r0, #0]
 802c0cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802c0ce:	4798      	blx	r3
 802c0d0:	b00d      	add	sp, #52	; 0x34
 802c0d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c0d6:	bf00      	nop
 802c0d8:	2400baf0 	.word	0x2400baf0
 802c0dc:	2400baea 	.word	0x2400baea

0802c0e0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>:
 802c0e0:	b570      	push	{r4, r5, r6, lr}
 802c0e2:	1214      	asrs	r4, r2, #8
 802c0e4:	788d      	ldrb	r5, [r1, #2]
 802c0e6:	f89d 6010 	ldrb.w	r6, [sp, #16]
 802c0ea:	10d0      	asrs	r0, r2, #3
 802c0ec:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802c0f0:	00d2      	lsls	r2, r2, #3
 802c0f2:	fb15 f503 	smulbb	r5, r5, r3
 802c0f6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802c0fa:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 802c0fe:	b2d2      	uxtb	r2, r2
 802c100:	fb04 5506 	mla	r5, r4, r6, r5
 802c104:	784c      	ldrb	r4, [r1, #1]
 802c106:	7809      	ldrb	r1, [r1, #0]
 802c108:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 802c10c:	fb14 f403 	smulbb	r4, r4, r3
 802c110:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 802c114:	fb11 f303 	smulbb	r3, r1, r3
 802c118:	b2ad      	uxth	r5, r5
 802c11a:	fb00 4406 	mla	r4, r0, r6, r4
 802c11e:	fb02 3306 	mla	r3, r2, r6, r3
 802c122:	1c68      	adds	r0, r5, #1
 802c124:	b2a4      	uxth	r4, r4
 802c126:	b29b      	uxth	r3, r3
 802c128:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 802c12c:	1c62      	adds	r2, r4, #1
 802c12e:	1c58      	adds	r0, r3, #1
 802c130:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 802c134:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 802c138:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802c13c:	0964      	lsrs	r4, r4, #5
 802c13e:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802c142:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 802c146:	4328      	orrs	r0, r5
 802c148:	4320      	orrs	r0, r4
 802c14a:	bd70      	pop	{r4, r5, r6, pc}

0802c14c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 802c14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c150:	b08f      	sub	sp, #60	; 0x3c
 802c152:	461c      	mov	r4, r3
 802c154:	4682      	mov	sl, r0
 802c156:	460e      	mov	r6, r1
 802c158:	f89d 7064 	ldrb.w	r7, [sp, #100]	; 0x64
 802c15c:	4615      	mov	r5, r2
 802c15e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802c160:	2f00      	cmp	r7, #0
 802c162:	f000 8141 	beq.w	802c3e8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x29c>
 802c166:	6820      	ldr	r0, [r4, #0]
 802c168:	aa0a      	add	r2, sp, #40	; 0x28
 802c16a:	6861      	ldr	r1, [r4, #4]
 802c16c:	f04f 0802 	mov.w	r8, #2
 802c170:	3504      	adds	r5, #4
 802c172:	c203      	stmia	r2!, {r0, r1}
 802c174:	6818      	ldr	r0, [r3, #0]
 802c176:	aa0c      	add	r2, sp, #48	; 0x30
 802c178:	6859      	ldr	r1, [r3, #4]
 802c17a:	c203      	stmia	r2!, {r0, r1}
 802c17c:	a80a      	add	r0, sp, #40	; 0x28
 802c17e:	f7ef fa7b 	bl	801b678 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802c182:	4621      	mov	r1, r4
 802c184:	a80c      	add	r0, sp, #48	; 0x30
 802c186:	f7ef fa9f 	bl	801b6c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802c18a:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 802c18e:	f9bd b036 	ldrsh.w	fp, [sp, #54]	; 0x36
 802c192:	f002 0301 	and.w	r3, r2, #1
 802c196:	9306      	str	r3, [sp, #24]
 802c198:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 802c19c:	f003 0101 	and.w	r1, r3, #1
 802c1a0:	9105      	str	r1, [sp, #20]
 802c1a2:	9805      	ldr	r0, [sp, #20]
 802c1a4:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 802c1a8:	4403      	add	r3, r0
 802c1aa:	fb01 2303 	mla	r3, r1, r3, r2
 802c1ae:	fb93 f3f8 	sdiv	r3, r3, r8
 802c1b2:	441e      	add	r6, r3
 802c1b4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 802c1b8:	441a      	add	r2, r3
 802c1ba:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 802c1be:	4419      	add	r1, r3
 802c1c0:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 802c1c4:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 802c1c8:	9303      	str	r3, [sp, #12]
 802c1ca:	4b89      	ldr	r3, [pc, #548]	; (802c3f0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 802c1cc:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32
 802c1d0:	6818      	ldr	r0, [r3, #0]
 802c1d2:	6803      	ldr	r3, [r0, #0]
 802c1d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802c1d6:	4798      	blx	r3
 802c1d8:	4a86      	ldr	r2, [pc, #536]	; (802c3f4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a8>)
 802c1da:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	; 0x32
 802c1de:	2fff      	cmp	r7, #255	; 0xff
 802c1e0:	8813      	ldrh	r3, [r2, #0]
 802c1e2:	4694      	mov	ip, r2
 802c1e4:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	; 0x30
 802c1e8:	fb03 9404 	mla	r4, r3, r4, r9
 802c1ec:	fb03 f30b 	mul.w	r3, r3, fp
 802c1f0:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802c1f4:	d071      	beq.n	802c2da <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x18e>
 802c1f6:	43f9      	mvns	r1, r7
 802c1f8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 802c1fc:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 802c200:	b2c9      	uxtb	r1, r1
 802c202:	e9cd 3207 	strd	r3, r2, [sp, #28]
 802c206:	9104      	str	r1, [sp, #16]
 802c208:	9b07      	ldr	r3, [sp, #28]
 802c20a:	42a3      	cmp	r3, r4
 802c20c:	f240 80e7 	bls.w	802c3de <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x292>
 802c210:	9b06      	ldr	r3, [sp, #24]
 802c212:	2b00      	cmp	r3, #0
 802c214:	d03d      	beq.n	802c292 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x146>
 802c216:	7831      	ldrb	r1, [r6, #0]
 802c218:	4650      	mov	r0, sl
 802c21a:	9b04      	ldr	r3, [sp, #16]
 802c21c:	f106 0801 	add.w	r8, r6, #1
 802c220:	f001 010f 	and.w	r1, r1, #15
 802c224:	8822      	ldrh	r2, [r4, #0]
 802c226:	9300      	str	r3, [sp, #0]
 802c228:	463b      	mov	r3, r7
 802c22a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802c22e:	4429      	add	r1, r5
 802c230:	f7ff ff56 	bl	802c0e0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 802c234:	9b03      	ldr	r3, [sp, #12]
 802c236:	f824 0b02 	strh.w	r0, [r4], #2
 802c23a:	f103 3bff 	add.w	fp, r3, #4294967295
 802c23e:	f1bb 0f01 	cmp.w	fp, #1
 802c242:	46a1      	mov	r9, r4
 802c244:	f104 0404 	add.w	r4, r4, #4
 802c248:	dd27      	ble.n	802c29a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x14e>
 802c24a:	f898 1000 	ldrb.w	r1, [r8]
 802c24e:	4650      	mov	r0, sl
 802c250:	9b04      	ldr	r3, [sp, #16]
 802c252:	f1ab 0b02 	sub.w	fp, fp, #2
 802c256:	0909      	lsrs	r1, r1, #4
 802c258:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 802c25c:	9300      	str	r3, [sp, #0]
 802c25e:	463b      	mov	r3, r7
 802c260:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802c264:	4429      	add	r1, r5
 802c266:	f7ff ff3b 	bl	802c0e0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 802c26a:	f824 0c04 	strh.w	r0, [r4, #-4]
 802c26e:	f818 1b01 	ldrb.w	r1, [r8], #1
 802c272:	4650      	mov	r0, sl
 802c274:	9b04      	ldr	r3, [sp, #16]
 802c276:	f001 010f 	and.w	r1, r1, #15
 802c27a:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 802c27e:	9300      	str	r3, [sp, #0]
 802c280:	463b      	mov	r3, r7
 802c282:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802c286:	4429      	add	r1, r5
 802c288:	f7ff ff2a 	bl	802c0e0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 802c28c:	f824 0c02 	strh.w	r0, [r4, #-2]
 802c290:	e7d5      	b.n	802c23e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf2>
 802c292:	46b0      	mov	r8, r6
 802c294:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802c298:	e7d1      	b.n	802c23e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf2>
 802c29a:	d10f      	bne.n	802c2bc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x170>
 802c29c:	f898 1000 	ldrb.w	r1, [r8]
 802c2a0:	4650      	mov	r0, sl
 802c2a2:	9b04      	ldr	r3, [sp, #16]
 802c2a4:	0909      	lsrs	r1, r1, #4
 802c2a6:	f8b9 2000 	ldrh.w	r2, [r9]
 802c2aa:	9300      	str	r3, [sp, #0]
 802c2ac:	463b      	mov	r3, r7
 802c2ae:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802c2b2:	4429      	add	r1, r5
 802c2b4:	f7ff ff14 	bl	802c0e0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 802c2b8:	f829 0b02 	strh.w	r0, [r9], #2
 802c2bc:	9b08      	ldr	r3, [sp, #32]
 802c2be:	9a05      	ldr	r2, [sp, #20]
 802c2c0:	881c      	ldrh	r4, [r3, #0]
 802c2c2:	9b03      	ldr	r3, [sp, #12]
 802c2c4:	1ae4      	subs	r4, r4, r3
 802c2c6:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 802c2ca:	4413      	add	r3, r2
 802c2cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802c2ce:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 802c2d2:	fb93 f3f2 	sdiv	r3, r3, r2
 802c2d6:	441e      	add	r6, r3
 802c2d8:	e796      	b.n	802c208 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xbc>
 802c2da:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 802c2de:	4f46      	ldr	r7, [pc, #280]	; (802c3f8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ac>)
 802c2e0:	42a3      	cmp	r3, r4
 802c2e2:	d97c      	bls.n	802c3de <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x292>
 802c2e4:	9a06      	ldr	r2, [sp, #24]
 802c2e6:	2a00      	cmp	r2, #0
 802c2e8:	d054      	beq.n	802c394 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x248>
 802c2ea:	7830      	ldrb	r0, [r6, #0]
 802c2ec:	1c71      	adds	r1, r6, #1
 802c2ee:	f000 000f 	and.w	r0, r0, #15
 802c2f2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802c2f6:	eb05 0e00 	add.w	lr, r5, r0
 802c2fa:	5c28      	ldrb	r0, [r5, r0]
 802c2fc:	f89e 2002 	ldrb.w	r2, [lr, #2]
 802c300:	f89e e001 	ldrb.w	lr, [lr, #1]
 802c304:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 802c308:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802c30c:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 802c310:	ea42 020e 	orr.w	r2, r2, lr
 802c314:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
 802c318:	f824 2b02 	strh.w	r2, [r4], #2
 802c31c:	9a03      	ldr	r2, [sp, #12]
 802c31e:	f102 3eff 	add.w	lr, r2, #4294967295
 802c322:	f1be 0f01 	cmp.w	lr, #1
 802c326:	4620      	mov	r0, r4
 802c328:	f104 0404 	add.w	r4, r4, #4
 802c32c:	dd36      	ble.n	802c39c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x250>
 802c32e:	7808      	ldrb	r0, [r1, #0]
 802c330:	f1ae 0e02 	sub.w	lr, lr, #2
 802c334:	0900      	lsrs	r0, r0, #4
 802c336:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802c33a:	eb05 0a00 	add.w	sl, r5, r0
 802c33e:	f89a 2001 	ldrb.w	r2, [sl, #1]
 802c342:	f89a 9002 	ldrb.w	r9, [sl, #2]
 802c346:	00d2      	lsls	r2, r2, #3
 802c348:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 802c34c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802c350:	ea49 0202 	orr.w	r2, r9, r2
 802c354:	f815 9000 	ldrb.w	r9, [r5, r0]
 802c358:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 802c35c:	f824 2c04 	strh.w	r2, [r4, #-4]
 802c360:	f811 0b01 	ldrb.w	r0, [r1], #1
 802c364:	f000 000f 	and.w	r0, r0, #15
 802c368:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802c36c:	eb05 0a00 	add.w	sl, r5, r0
 802c370:	f89a 2001 	ldrb.w	r2, [sl, #1]
 802c374:	f89a 9002 	ldrb.w	r9, [sl, #2]
 802c378:	00d2      	lsls	r2, r2, #3
 802c37a:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 802c37e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802c382:	ea49 0202 	orr.w	r2, r9, r2
 802c386:	f815 9000 	ldrb.w	r9, [r5, r0]
 802c38a:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 802c38e:	f824 2c02 	strh.w	r2, [r4, #-2]
 802c392:	e7c6      	b.n	802c322 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d6>
 802c394:	4631      	mov	r1, r6
 802c396:	f8dd e00c 	ldr.w	lr, [sp, #12]
 802c39a:	e7c2      	b.n	802c322 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d6>
 802c39c:	d111      	bne.n	802c3c2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x276>
 802c39e:	7809      	ldrb	r1, [r1, #0]
 802c3a0:	0909      	lsrs	r1, r1, #4
 802c3a2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802c3a6:	186c      	adds	r4, r5, r1
 802c3a8:	5c69      	ldrb	r1, [r5, r1]
 802c3aa:	78a2      	ldrb	r2, [r4, #2]
 802c3ac:	7864      	ldrb	r4, [r4, #1]
 802c3ae:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 802c3b2:	00e4      	lsls	r4, r4, #3
 802c3b4:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 802c3b8:	4322      	orrs	r2, r4
 802c3ba:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
 802c3be:	f820 2b02 	strh.w	r2, [r0], #2
 802c3c2:	9a03      	ldr	r2, [sp, #12]
 802c3c4:	f8bc 4000 	ldrh.w	r4, [ip]
 802c3c8:	9905      	ldr	r1, [sp, #20]
 802c3ca:	1aa4      	subs	r4, r4, r2
 802c3cc:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 802c3d0:	440a      	add	r2, r1
 802c3d2:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802c3d6:	fb92 f2f8 	sdiv	r2, r2, r8
 802c3da:	4416      	add	r6, r2
 802c3dc:	e780      	b.n	802c2e0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x194>
 802c3de:	4b04      	ldr	r3, [pc, #16]	; (802c3f0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 802c3e0:	6818      	ldr	r0, [r3, #0]
 802c3e2:	6803      	ldr	r3, [r0, #0]
 802c3e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802c3e6:	4798      	blx	r3
 802c3e8:	b00f      	add	sp, #60	; 0x3c
 802c3ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c3ee:	bf00      	nop
 802c3f0:	2400baf0 	.word	0x2400baf0
 802c3f4:	2400baea 	.word	0x2400baea
 802c3f8:	fffff800 	.word	0xfffff800

0802c3fc <CRC_Lock>:
 802c3fc:	4a20      	ldr	r2, [pc, #128]	; (802c480 <CRC_Lock+0x84>)
 802c3fe:	b530      	push	{r4, r5, lr}
 802c400:	6813      	ldr	r3, [r2, #0]
 802c402:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 802c406:	f24c 2540 	movw	r5, #49728	; 0xc240
 802c40a:	f023 0301 	bic.w	r3, r3, #1
 802c40e:	6013      	str	r3, [r2, #0]
 802c410:	4b1c      	ldr	r3, [pc, #112]	; (802c484 <CRC_Lock+0x88>)
 802c412:	681a      	ldr	r2, [r3, #0]
 802c414:	4022      	ands	r2, r4
 802c416:	42aa      	cmp	r2, r5
 802c418:	d005      	beq.n	802c426 <CRC_Lock+0x2a>
 802c41a:	681b      	ldr	r3, [r3, #0]
 802c41c:	f24c 2270 	movw	r2, #49776	; 0xc270
 802c420:	4023      	ands	r3, r4
 802c422:	4293      	cmp	r3, r2
 802c424:	d124      	bne.n	802c470 <CRC_Lock+0x74>
 802c426:	4b18      	ldr	r3, [pc, #96]	; (802c488 <CRC_Lock+0x8c>)
 802c428:	681b      	ldr	r3, [r3, #0]
 802c42a:	bb0b      	cbnz	r3, 802c470 <CRC_Lock+0x74>
 802c42c:	4b17      	ldr	r3, [pc, #92]	; (802c48c <CRC_Lock+0x90>)
 802c42e:	681a      	ldr	r2, [r3, #0]
 802c430:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802c434:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 802c438:	d00d      	beq.n	802c456 <CRC_Lock+0x5a>
 802c43a:	681a      	ldr	r2, [r3, #0]
 802c43c:	f240 4483 	movw	r4, #1155	; 0x483
 802c440:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802c444:	42a2      	cmp	r2, r4
 802c446:	d006      	beq.n	802c456 <CRC_Lock+0x5a>
 802c448:	681b      	ldr	r3, [r3, #0]
 802c44a:	f240 4285 	movw	r2, #1157	; 0x485
 802c44e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802c452:	4293      	cmp	r3, r2
 802c454:	d10c      	bne.n	802c470 <CRC_Lock+0x74>
 802c456:	4b0e      	ldr	r3, [pc, #56]	; (802c490 <CRC_Lock+0x94>)
 802c458:	2201      	movs	r2, #1
 802c45a:	601a      	str	r2, [r3, #0]
 802c45c:	681a      	ldr	r2, [r3, #0]
 802c45e:	2a00      	cmp	r2, #0
 802c460:	d1fc      	bne.n	802c45c <CRC_Lock+0x60>
 802c462:	4b0c      	ldr	r3, [pc, #48]	; (802c494 <CRC_Lock+0x98>)
 802c464:	6018      	str	r0, [r3, #0]
 802c466:	6818      	ldr	r0, [r3, #0]
 802c468:	1a43      	subs	r3, r0, r1
 802c46a:	4258      	negs	r0, r3
 802c46c:	4158      	adcs	r0, r3
 802c46e:	bd30      	pop	{r4, r5, pc}
 802c470:	4b09      	ldr	r3, [pc, #36]	; (802c498 <CRC_Lock+0x9c>)
 802c472:	2201      	movs	r2, #1
 802c474:	601a      	str	r2, [r3, #0]
 802c476:	681a      	ldr	r2, [r3, #0]
 802c478:	2a00      	cmp	r2, #0
 802c47a:	d1fc      	bne.n	802c476 <CRC_Lock+0x7a>
 802c47c:	4b07      	ldr	r3, [pc, #28]	; (802c49c <CRC_Lock+0xa0>)
 802c47e:	e7f1      	b.n	802c464 <CRC_Lock+0x68>
 802c480:	e0002000 	.word	0xe0002000
 802c484:	e000ed00 	.word	0xe000ed00
 802c488:	e0042000 	.word	0xe0042000
 802c48c:	5c001000 	.word	0x5c001000
 802c490:	58024c08 	.word	0x58024c08
 802c494:	58024c00 	.word	0x58024c00
 802c498:	40023008 	.word	0x40023008
 802c49c:	40023000 	.word	0x40023000

0802c4a0 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 802c4a0:	6101      	str	r1, [r0, #16]
 802c4a2:	4770      	bx	lr

0802c4a4 <_ZN8touchgfx8Gestures4tickEv>:
 802c4a4:	7b83      	ldrb	r3, [r0, #14]
 802c4a6:	b14b      	cbz	r3, 802c4bc <_ZN8touchgfx8Gestures4tickEv+0x18>
 802c4a8:	8903      	ldrh	r3, [r0, #8]
 802c4aa:	3301      	adds	r3, #1
 802c4ac:	b29b      	uxth	r3, r3
 802c4ae:	2b07      	cmp	r3, #7
 802c4b0:	8103      	strh	r3, [r0, #8]
 802c4b2:	bf81      	itttt	hi
 802c4b4:	2300      	movhi	r3, #0
 802c4b6:	8143      	strhhi	r3, [r0, #10]
 802c4b8:	8183      	strhhi	r3, [r0, #12]
 802c4ba:	7383      	strbhi	r3, [r0, #14]
 802c4bc:	4770      	bx	lr
	...

0802c4c0 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 802c4c0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802c4c4:	4698      	mov	r8, r3
 802c4c6:	8883      	ldrh	r3, [r0, #4]
 802c4c8:	4604      	mov	r4, r0
 802c4ca:	4617      	mov	r7, r2
 802c4cc:	f8ad 3006 	strh.w	r3, [sp, #6]
 802c4d0:	eba8 0303 	sub.w	r3, r8, r3
 802c4d4:	4a19      	ldr	r2, [pc, #100]	; (802c53c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 802c4d6:	460e      	mov	r6, r1
 802c4d8:	b21b      	sxth	r3, r3
 802c4da:	88c1      	ldrh	r1, [r0, #6]
 802c4dc:	9200      	str	r2, [sp, #0]
 802c4de:	2000      	movs	r0, #0
 802c4e0:	2b00      	cmp	r3, #0
 802c4e2:	8aa2      	ldrh	r2, [r4, #20]
 802c4e4:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 802c4e8:	bfb8      	it	lt
 802c4ea:	425b      	neglt	r3, r3
 802c4ec:	f88d 0004 	strb.w	r0, [sp, #4]
 802c4f0:	f8ad 1008 	strh.w	r1, [sp, #8]
 802c4f4:	b21b      	sxth	r3, r3
 802c4f6:	f8ad 800a 	strh.w	r8, [sp, #10]
 802c4fa:	f8ad 500c 	strh.w	r5, [sp, #12]
 802c4fe:	4293      	cmp	r3, r2
 802c500:	dc07      	bgt.n	802c512 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 802c502:	1a69      	subs	r1, r5, r1
 802c504:	b209      	sxth	r1, r1
 802c506:	2900      	cmp	r1, #0
 802c508:	bfb8      	it	lt
 802c50a:	4249      	neglt	r1, r1
 802c50c:	b209      	sxth	r1, r1
 802c50e:	428a      	cmp	r2, r1
 802c510:	da10      	bge.n	802c534 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 802c512:	6920      	ldr	r0, [r4, #16]
 802c514:	4669      	mov	r1, sp
 802c516:	eba8 0606 	sub.w	r6, r8, r6
 802c51a:	1bef      	subs	r7, r5, r7
 802c51c:	6803      	ldr	r3, [r0, #0]
 802c51e:	685b      	ldr	r3, [r3, #4]
 802c520:	4798      	blx	r3
 802c522:	2300      	movs	r3, #0
 802c524:	2001      	movs	r0, #1
 802c526:	8166      	strh	r6, [r4, #10]
 802c528:	8123      	strh	r3, [r4, #8]
 802c52a:	81a7      	strh	r7, [r4, #12]
 802c52c:	f8a4 8004 	strh.w	r8, [r4, #4]
 802c530:	80e5      	strh	r5, [r4, #6]
 802c532:	73a0      	strb	r0, [r4, #14]
 802c534:	b004      	add	sp, #16
 802c536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c53a:	bf00      	nop
 802c53c:	0802fbac 	.word	0x0802fbac

0802c540 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802c540:	b5f0      	push	{r4, r5, r6, r7, lr}
 802c542:	461e      	mov	r6, r3
 802c544:	1e4b      	subs	r3, r1, #1
 802c546:	b085      	sub	sp, #20
 802c548:	4604      	mov	r4, r0
 802c54a:	2b01      	cmp	r3, #1
 802c54c:	460d      	mov	r5, r1
 802c54e:	4617      	mov	r7, r2
 802c550:	d84b      	bhi.n	802c5ea <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802c552:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802c556:	1cd3      	adds	r3, r2, #3
 802c558:	b29b      	uxth	r3, r3
 802c55a:	2b06      	cmp	r3, #6
 802c55c:	d916      	bls.n	802c58c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802c55e:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 802c600 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802c562:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802c566:	f8cd c004 	str.w	ip, [sp, #4]
 802c56a:	f04f 0c00 	mov.w	ip, #0
 802c56e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802c572:	6900      	ldr	r0, [r0, #16]
 802c574:	f8ad 100c 	strh.w	r1, [sp, #12]
 802c578:	a901      	add	r1, sp, #4
 802c57a:	f88d c008 	strb.w	ip, [sp, #8]
 802c57e:	f8ad 200a 	strh.w	r2, [sp, #10]
 802c582:	f8ad 300e 	strh.w	r3, [sp, #14]
 802c586:	6803      	ldr	r3, [r0, #0]
 802c588:	689b      	ldr	r3, [r3, #8]
 802c58a:	4798      	blx	r3
 802c58c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802c590:	1cd3      	adds	r3, r2, #3
 802c592:	b29b      	uxth	r3, r3
 802c594:	2b06      	cmp	r3, #6
 802c596:	d916      	bls.n	802c5c6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802c598:	f8df c064 	ldr.w	ip, [pc, #100]	; 802c600 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802c59c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802c5a0:	f8cd c004 	str.w	ip, [sp, #4]
 802c5a4:	f04f 0c01 	mov.w	ip, #1
 802c5a8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802c5ac:	6920      	ldr	r0, [r4, #16]
 802c5ae:	f8ad 100c 	strh.w	r1, [sp, #12]
 802c5b2:	a901      	add	r1, sp, #4
 802c5b4:	f88d c008 	strb.w	ip, [sp, #8]
 802c5b8:	f8ad 200a 	strh.w	r2, [sp, #10]
 802c5bc:	f8ad 300e 	strh.w	r3, [sp, #14]
 802c5c0:	6803      	ldr	r3, [r0, #0]
 802c5c2:	689b      	ldr	r3, [r3, #8]
 802c5c4:	4798      	blx	r3
 802c5c6:	4b0d      	ldr	r3, [pc, #52]	; (802c5fc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 802c5c8:	a901      	add	r1, sp, #4
 802c5ca:	6920      	ldr	r0, [r4, #16]
 802c5cc:	9301      	str	r3, [sp, #4]
 802c5ce:	2300      	movs	r3, #0
 802c5d0:	f88d 5008 	strb.w	r5, [sp, #8]
 802c5d4:	f8ad 700a 	strh.w	r7, [sp, #10]
 802c5d8:	f8ad 600c 	strh.w	r6, [sp, #12]
 802c5dc:	f8ad 300e 	strh.w	r3, [sp, #14]
 802c5e0:	6803      	ldr	r3, [r0, #0]
 802c5e2:	681b      	ldr	r3, [r3, #0]
 802c5e4:	4798      	blx	r3
 802c5e6:	b005      	add	sp, #20
 802c5e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802c5ea:	2900      	cmp	r1, #0
 802c5ec:	d1eb      	bne.n	802c5c6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802c5ee:	80a2      	strh	r2, [r4, #4]
 802c5f0:	80c6      	strh	r6, [r0, #6]
 802c5f2:	60a1      	str	r1, [r4, #8]
 802c5f4:	81a1      	strh	r1, [r4, #12]
 802c5f6:	73a1      	strb	r1, [r4, #14]
 802c5f8:	e7e5      	b.n	802c5c6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802c5fa:	bf00      	nop
 802c5fc:	0802fb98 	.word	0x0802fb98
 802c600:	0802fbc0 	.word	0x0802fbc0

0802c604 <__aeabi_atexit>:
 802c604:	460b      	mov	r3, r1
 802c606:	4601      	mov	r1, r0
 802c608:	4618      	mov	r0, r3
 802c60a:	f000 b90f 	b.w	802c82c <__cxa_atexit>

0802c60e <_ZdlPvj>:
 802c60e:	f000 b812 	b.w	802c636 <_ZdlPv>

0802c612 <__cxa_guard_acquire>:
 802c612:	6803      	ldr	r3, [r0, #0]
 802c614:	07db      	lsls	r3, r3, #31
 802c616:	d406      	bmi.n	802c626 <__cxa_guard_acquire+0x14>
 802c618:	7843      	ldrb	r3, [r0, #1]
 802c61a:	b103      	cbz	r3, 802c61e <__cxa_guard_acquire+0xc>
 802c61c:	deff      	udf	#255	; 0xff
 802c61e:	2301      	movs	r3, #1
 802c620:	7043      	strb	r3, [r0, #1]
 802c622:	4618      	mov	r0, r3
 802c624:	4770      	bx	lr
 802c626:	2000      	movs	r0, #0
 802c628:	4770      	bx	lr

0802c62a <__cxa_guard_release>:
 802c62a:	2301      	movs	r3, #1
 802c62c:	6003      	str	r3, [r0, #0]
 802c62e:	4770      	bx	lr

0802c630 <__cxa_pure_virtual>:
 802c630:	b508      	push	{r3, lr}
 802c632:	f000 f80f 	bl	802c654 <_ZSt9terminatev>

0802c636 <_ZdlPv>:
 802c636:	f000 b845 	b.w	802c6c4 <free>

0802c63a <_ZN10__cxxabiv111__terminateEPFvvE>:
 802c63a:	b508      	push	{r3, lr}
 802c63c:	4780      	blx	r0
 802c63e:	f000 f80e 	bl	802c65e <abort>
	...

0802c644 <_ZSt13get_terminatev>:
 802c644:	4b02      	ldr	r3, [pc, #8]	; (802c650 <_ZSt13get_terminatev+0xc>)
 802c646:	6818      	ldr	r0, [r3, #0]
 802c648:	f3bf 8f5b 	dmb	ish
 802c64c:	4770      	bx	lr
 802c64e:	bf00      	nop
 802c650:	240000d0 	.word	0x240000d0

0802c654 <_ZSt9terminatev>:
 802c654:	b508      	push	{r3, lr}
 802c656:	f7ff fff5 	bl	802c644 <_ZSt13get_terminatev>
 802c65a:	f7ff ffee 	bl	802c63a <_ZN10__cxxabiv111__terminateEPFvvE>

0802c65e <abort>:
 802c65e:	b508      	push	{r3, lr}
 802c660:	2006      	movs	r0, #6
 802c662:	f000 fa39 	bl	802cad8 <raise>
 802c666:	2001      	movs	r0, #1
 802c668:	f7d5 f860 	bl	800172c <_exit>

0802c66c <__assert_func>:
 802c66c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802c66e:	4614      	mov	r4, r2
 802c670:	461a      	mov	r2, r3
 802c672:	4b09      	ldr	r3, [pc, #36]	; (802c698 <__assert_func+0x2c>)
 802c674:	681b      	ldr	r3, [r3, #0]
 802c676:	4605      	mov	r5, r0
 802c678:	68d8      	ldr	r0, [r3, #12]
 802c67a:	b14c      	cbz	r4, 802c690 <__assert_func+0x24>
 802c67c:	4b07      	ldr	r3, [pc, #28]	; (802c69c <__assert_func+0x30>)
 802c67e:	9100      	str	r1, [sp, #0]
 802c680:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802c684:	4906      	ldr	r1, [pc, #24]	; (802c6a0 <__assert_func+0x34>)
 802c686:	462b      	mov	r3, r5
 802c688:	f000 f982 	bl	802c990 <fiprintf>
 802c68c:	f7ff ffe7 	bl	802c65e <abort>
 802c690:	4b04      	ldr	r3, [pc, #16]	; (802c6a4 <__assert_func+0x38>)
 802c692:	461c      	mov	r4, r3
 802c694:	e7f3      	b.n	802c67e <__assert_func+0x12>
 802c696:	bf00      	nop
 802c698:	2400012c 	.word	0x2400012c
 802c69c:	0802fedc 	.word	0x0802fedc
 802c6a0:	0802fee9 	.word	0x0802fee9
 802c6a4:	0802ff17 	.word	0x0802ff17

0802c6a8 <atexit>:
 802c6a8:	2300      	movs	r3, #0
 802c6aa:	4601      	mov	r1, r0
 802c6ac:	461a      	mov	r2, r3
 802c6ae:	4618      	mov	r0, r3
 802c6b0:	f000 bb16 	b.w	802cce0 <__register_exitproc>

0802c6b4 <malloc>:
 802c6b4:	4b02      	ldr	r3, [pc, #8]	; (802c6c0 <malloc+0xc>)
 802c6b6:	4601      	mov	r1, r0
 802c6b8:	6818      	ldr	r0, [r3, #0]
 802c6ba:	f000 b82b 	b.w	802c714 <_malloc_r>
 802c6be:	bf00      	nop
 802c6c0:	2400012c 	.word	0x2400012c

0802c6c4 <free>:
 802c6c4:	4b02      	ldr	r3, [pc, #8]	; (802c6d0 <free+0xc>)
 802c6c6:	4601      	mov	r1, r0
 802c6c8:	6818      	ldr	r0, [r3, #0]
 802c6ca:	f000 bb67 	b.w	802cd9c <_free_r>
 802c6ce:	bf00      	nop
 802c6d0:	2400012c 	.word	0x2400012c

0802c6d4 <sbrk_aligned>:
 802c6d4:	b570      	push	{r4, r5, r6, lr}
 802c6d6:	4e0e      	ldr	r6, [pc, #56]	; (802c710 <sbrk_aligned+0x3c>)
 802c6d8:	460c      	mov	r4, r1
 802c6da:	6831      	ldr	r1, [r6, #0]
 802c6dc:	4605      	mov	r5, r0
 802c6de:	b911      	cbnz	r1, 802c6e6 <sbrk_aligned+0x12>
 802c6e0:	f000 faa0 	bl	802cc24 <_sbrk_r>
 802c6e4:	6030      	str	r0, [r6, #0]
 802c6e6:	4621      	mov	r1, r4
 802c6e8:	4628      	mov	r0, r5
 802c6ea:	f000 fa9b 	bl	802cc24 <_sbrk_r>
 802c6ee:	1c43      	adds	r3, r0, #1
 802c6f0:	d00a      	beq.n	802c708 <sbrk_aligned+0x34>
 802c6f2:	1cc4      	adds	r4, r0, #3
 802c6f4:	f024 0403 	bic.w	r4, r4, #3
 802c6f8:	42a0      	cmp	r0, r4
 802c6fa:	d007      	beq.n	802c70c <sbrk_aligned+0x38>
 802c6fc:	1a21      	subs	r1, r4, r0
 802c6fe:	4628      	mov	r0, r5
 802c700:	f000 fa90 	bl	802cc24 <_sbrk_r>
 802c704:	3001      	adds	r0, #1
 802c706:	d101      	bne.n	802c70c <sbrk_aligned+0x38>
 802c708:	f04f 34ff 	mov.w	r4, #4294967295
 802c70c:	4620      	mov	r0, r4
 802c70e:	bd70      	pop	{r4, r5, r6, pc}
 802c710:	2400c440 	.word	0x2400c440

0802c714 <_malloc_r>:
 802c714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c718:	1ccd      	adds	r5, r1, #3
 802c71a:	f025 0503 	bic.w	r5, r5, #3
 802c71e:	3508      	adds	r5, #8
 802c720:	2d0c      	cmp	r5, #12
 802c722:	bf38      	it	cc
 802c724:	250c      	movcc	r5, #12
 802c726:	2d00      	cmp	r5, #0
 802c728:	4607      	mov	r7, r0
 802c72a:	db01      	blt.n	802c730 <_malloc_r+0x1c>
 802c72c:	42a9      	cmp	r1, r5
 802c72e:	d905      	bls.n	802c73c <_malloc_r+0x28>
 802c730:	230c      	movs	r3, #12
 802c732:	603b      	str	r3, [r7, #0]
 802c734:	2600      	movs	r6, #0
 802c736:	4630      	mov	r0, r6
 802c738:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802c73c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 802c810 <_malloc_r+0xfc>
 802c740:	f000 f868 	bl	802c814 <__malloc_lock>
 802c744:	f8d8 3000 	ldr.w	r3, [r8]
 802c748:	461c      	mov	r4, r3
 802c74a:	bb5c      	cbnz	r4, 802c7a4 <_malloc_r+0x90>
 802c74c:	4629      	mov	r1, r5
 802c74e:	4638      	mov	r0, r7
 802c750:	f7ff ffc0 	bl	802c6d4 <sbrk_aligned>
 802c754:	1c43      	adds	r3, r0, #1
 802c756:	4604      	mov	r4, r0
 802c758:	d155      	bne.n	802c806 <_malloc_r+0xf2>
 802c75a:	f8d8 4000 	ldr.w	r4, [r8]
 802c75e:	4626      	mov	r6, r4
 802c760:	2e00      	cmp	r6, #0
 802c762:	d145      	bne.n	802c7f0 <_malloc_r+0xdc>
 802c764:	2c00      	cmp	r4, #0
 802c766:	d048      	beq.n	802c7fa <_malloc_r+0xe6>
 802c768:	6823      	ldr	r3, [r4, #0]
 802c76a:	4631      	mov	r1, r6
 802c76c:	4638      	mov	r0, r7
 802c76e:	eb04 0903 	add.w	r9, r4, r3
 802c772:	f000 fa57 	bl	802cc24 <_sbrk_r>
 802c776:	4581      	cmp	r9, r0
 802c778:	d13f      	bne.n	802c7fa <_malloc_r+0xe6>
 802c77a:	6821      	ldr	r1, [r4, #0]
 802c77c:	1a6d      	subs	r5, r5, r1
 802c77e:	4629      	mov	r1, r5
 802c780:	4638      	mov	r0, r7
 802c782:	f7ff ffa7 	bl	802c6d4 <sbrk_aligned>
 802c786:	3001      	adds	r0, #1
 802c788:	d037      	beq.n	802c7fa <_malloc_r+0xe6>
 802c78a:	6823      	ldr	r3, [r4, #0]
 802c78c:	442b      	add	r3, r5
 802c78e:	6023      	str	r3, [r4, #0]
 802c790:	f8d8 3000 	ldr.w	r3, [r8]
 802c794:	2b00      	cmp	r3, #0
 802c796:	d038      	beq.n	802c80a <_malloc_r+0xf6>
 802c798:	685a      	ldr	r2, [r3, #4]
 802c79a:	42a2      	cmp	r2, r4
 802c79c:	d12b      	bne.n	802c7f6 <_malloc_r+0xe2>
 802c79e:	2200      	movs	r2, #0
 802c7a0:	605a      	str	r2, [r3, #4]
 802c7a2:	e00f      	b.n	802c7c4 <_malloc_r+0xb0>
 802c7a4:	6822      	ldr	r2, [r4, #0]
 802c7a6:	1b52      	subs	r2, r2, r5
 802c7a8:	d41f      	bmi.n	802c7ea <_malloc_r+0xd6>
 802c7aa:	2a0b      	cmp	r2, #11
 802c7ac:	d917      	bls.n	802c7de <_malloc_r+0xca>
 802c7ae:	1961      	adds	r1, r4, r5
 802c7b0:	42a3      	cmp	r3, r4
 802c7b2:	6025      	str	r5, [r4, #0]
 802c7b4:	bf18      	it	ne
 802c7b6:	6059      	strne	r1, [r3, #4]
 802c7b8:	6863      	ldr	r3, [r4, #4]
 802c7ba:	bf08      	it	eq
 802c7bc:	f8c8 1000 	streq.w	r1, [r8]
 802c7c0:	5162      	str	r2, [r4, r5]
 802c7c2:	604b      	str	r3, [r1, #4]
 802c7c4:	4638      	mov	r0, r7
 802c7c6:	f104 060b 	add.w	r6, r4, #11
 802c7ca:	f000 f829 	bl	802c820 <__malloc_unlock>
 802c7ce:	f026 0607 	bic.w	r6, r6, #7
 802c7d2:	1d23      	adds	r3, r4, #4
 802c7d4:	1af2      	subs	r2, r6, r3
 802c7d6:	d0ae      	beq.n	802c736 <_malloc_r+0x22>
 802c7d8:	1b9b      	subs	r3, r3, r6
 802c7da:	50a3      	str	r3, [r4, r2]
 802c7dc:	e7ab      	b.n	802c736 <_malloc_r+0x22>
 802c7de:	42a3      	cmp	r3, r4
 802c7e0:	6862      	ldr	r2, [r4, #4]
 802c7e2:	d1dd      	bne.n	802c7a0 <_malloc_r+0x8c>
 802c7e4:	f8c8 2000 	str.w	r2, [r8]
 802c7e8:	e7ec      	b.n	802c7c4 <_malloc_r+0xb0>
 802c7ea:	4623      	mov	r3, r4
 802c7ec:	6864      	ldr	r4, [r4, #4]
 802c7ee:	e7ac      	b.n	802c74a <_malloc_r+0x36>
 802c7f0:	4634      	mov	r4, r6
 802c7f2:	6876      	ldr	r6, [r6, #4]
 802c7f4:	e7b4      	b.n	802c760 <_malloc_r+0x4c>
 802c7f6:	4613      	mov	r3, r2
 802c7f8:	e7cc      	b.n	802c794 <_malloc_r+0x80>
 802c7fa:	230c      	movs	r3, #12
 802c7fc:	603b      	str	r3, [r7, #0]
 802c7fe:	4638      	mov	r0, r7
 802c800:	f000 f80e 	bl	802c820 <__malloc_unlock>
 802c804:	e797      	b.n	802c736 <_malloc_r+0x22>
 802c806:	6025      	str	r5, [r4, #0]
 802c808:	e7dc      	b.n	802c7c4 <_malloc_r+0xb0>
 802c80a:	605b      	str	r3, [r3, #4]
 802c80c:	deff      	udf	#255	; 0xff
 802c80e:	bf00      	nop
 802c810:	2400c43c 	.word	0x2400c43c

0802c814 <__malloc_lock>:
 802c814:	4801      	ldr	r0, [pc, #4]	; (802c81c <__malloc_lock+0x8>)
 802c816:	f000 ba52 	b.w	802ccbe <__retarget_lock_acquire_recursive>
 802c81a:	bf00      	nop
 802c81c:	2400c585 	.word	0x2400c585

0802c820 <__malloc_unlock>:
 802c820:	4801      	ldr	r0, [pc, #4]	; (802c828 <__malloc_unlock+0x8>)
 802c822:	f000 ba4d 	b.w	802ccc0 <__retarget_lock_release_recursive>
 802c826:	bf00      	nop
 802c828:	2400c585 	.word	0x2400c585

0802c82c <__cxa_atexit>:
 802c82c:	b510      	push	{r4, lr}
 802c82e:	4c05      	ldr	r4, [pc, #20]	; (802c844 <__cxa_atexit+0x18>)
 802c830:	4613      	mov	r3, r2
 802c832:	b12c      	cbz	r4, 802c840 <__cxa_atexit+0x14>
 802c834:	460a      	mov	r2, r1
 802c836:	4601      	mov	r1, r0
 802c838:	2002      	movs	r0, #2
 802c83a:	f000 fa51 	bl	802cce0 <__register_exitproc>
 802c83e:	bd10      	pop	{r4, pc}
 802c840:	4620      	mov	r0, r4
 802c842:	e7fc      	b.n	802c83e <__cxa_atexit+0x12>
 802c844:	0802cce1 	.word	0x0802cce1

0802c848 <std>:
 802c848:	2300      	movs	r3, #0
 802c84a:	b510      	push	{r4, lr}
 802c84c:	4604      	mov	r4, r0
 802c84e:	e9c0 3300 	strd	r3, r3, [r0]
 802c852:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802c856:	6083      	str	r3, [r0, #8]
 802c858:	8181      	strh	r1, [r0, #12]
 802c85a:	6643      	str	r3, [r0, #100]	; 0x64
 802c85c:	81c2      	strh	r2, [r0, #14]
 802c85e:	6183      	str	r3, [r0, #24]
 802c860:	4619      	mov	r1, r3
 802c862:	2208      	movs	r2, #8
 802c864:	305c      	adds	r0, #92	; 0x5c
 802c866:	f000 f906 	bl	802ca76 <memset>
 802c86a:	4b0d      	ldr	r3, [pc, #52]	; (802c8a0 <std+0x58>)
 802c86c:	6263      	str	r3, [r4, #36]	; 0x24
 802c86e:	4b0d      	ldr	r3, [pc, #52]	; (802c8a4 <std+0x5c>)
 802c870:	62a3      	str	r3, [r4, #40]	; 0x28
 802c872:	4b0d      	ldr	r3, [pc, #52]	; (802c8a8 <std+0x60>)
 802c874:	62e3      	str	r3, [r4, #44]	; 0x2c
 802c876:	4b0d      	ldr	r3, [pc, #52]	; (802c8ac <std+0x64>)
 802c878:	6323      	str	r3, [r4, #48]	; 0x30
 802c87a:	4b0d      	ldr	r3, [pc, #52]	; (802c8b0 <std+0x68>)
 802c87c:	6224      	str	r4, [r4, #32]
 802c87e:	429c      	cmp	r4, r3
 802c880:	d006      	beq.n	802c890 <std+0x48>
 802c882:	f103 0268 	add.w	r2, r3, #104	; 0x68
 802c886:	4294      	cmp	r4, r2
 802c888:	d002      	beq.n	802c890 <std+0x48>
 802c88a:	33d0      	adds	r3, #208	; 0xd0
 802c88c:	429c      	cmp	r4, r3
 802c88e:	d105      	bne.n	802c89c <std+0x54>
 802c890:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802c894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802c898:	f000 ba10 	b.w	802ccbc <__retarget_lock_init_recursive>
 802c89c:	bd10      	pop	{r4, pc}
 802c89e:	bf00      	nop
 802c8a0:	0802c9f1 	.word	0x0802c9f1
 802c8a4:	0802ca13 	.word	0x0802ca13
 802c8a8:	0802ca4b 	.word	0x0802ca4b
 802c8ac:	0802ca6f 	.word	0x0802ca6f
 802c8b0:	2400c444 	.word	0x2400c444

0802c8b4 <stdio_exit_handler>:
 802c8b4:	4a02      	ldr	r2, [pc, #8]	; (802c8c0 <stdio_exit_handler+0xc>)
 802c8b6:	4903      	ldr	r1, [pc, #12]	; (802c8c4 <stdio_exit_handler+0x10>)
 802c8b8:	4803      	ldr	r0, [pc, #12]	; (802c8c8 <stdio_exit_handler+0x14>)
 802c8ba:	f000 b87b 	b.w	802c9b4 <_fwalk_sglue>
 802c8be:	bf00      	nop
 802c8c0:	240000d4 	.word	0x240000d4
 802c8c4:	0802d4e9 	.word	0x0802d4e9
 802c8c8:	240000e0 	.word	0x240000e0

0802c8cc <cleanup_stdio>:
 802c8cc:	6841      	ldr	r1, [r0, #4]
 802c8ce:	4b0c      	ldr	r3, [pc, #48]	; (802c900 <cleanup_stdio+0x34>)
 802c8d0:	4299      	cmp	r1, r3
 802c8d2:	b510      	push	{r4, lr}
 802c8d4:	4604      	mov	r4, r0
 802c8d6:	d001      	beq.n	802c8dc <cleanup_stdio+0x10>
 802c8d8:	f000 fe06 	bl	802d4e8 <_fflush_r>
 802c8dc:	68a1      	ldr	r1, [r4, #8]
 802c8de:	4b09      	ldr	r3, [pc, #36]	; (802c904 <cleanup_stdio+0x38>)
 802c8e0:	4299      	cmp	r1, r3
 802c8e2:	d002      	beq.n	802c8ea <cleanup_stdio+0x1e>
 802c8e4:	4620      	mov	r0, r4
 802c8e6:	f000 fdff 	bl	802d4e8 <_fflush_r>
 802c8ea:	68e1      	ldr	r1, [r4, #12]
 802c8ec:	4b06      	ldr	r3, [pc, #24]	; (802c908 <cleanup_stdio+0x3c>)
 802c8ee:	4299      	cmp	r1, r3
 802c8f0:	d004      	beq.n	802c8fc <cleanup_stdio+0x30>
 802c8f2:	4620      	mov	r0, r4
 802c8f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802c8f8:	f000 bdf6 	b.w	802d4e8 <_fflush_r>
 802c8fc:	bd10      	pop	{r4, pc}
 802c8fe:	bf00      	nop
 802c900:	2400c444 	.word	0x2400c444
 802c904:	2400c4ac 	.word	0x2400c4ac
 802c908:	2400c514 	.word	0x2400c514

0802c90c <global_stdio_init.part.0>:
 802c90c:	b510      	push	{r4, lr}
 802c90e:	4b0b      	ldr	r3, [pc, #44]	; (802c93c <global_stdio_init.part.0+0x30>)
 802c910:	4c0b      	ldr	r4, [pc, #44]	; (802c940 <global_stdio_init.part.0+0x34>)
 802c912:	4a0c      	ldr	r2, [pc, #48]	; (802c944 <global_stdio_init.part.0+0x38>)
 802c914:	601a      	str	r2, [r3, #0]
 802c916:	4620      	mov	r0, r4
 802c918:	2200      	movs	r2, #0
 802c91a:	2104      	movs	r1, #4
 802c91c:	f7ff ff94 	bl	802c848 <std>
 802c920:	f104 0068 	add.w	r0, r4, #104	; 0x68
 802c924:	2201      	movs	r2, #1
 802c926:	2109      	movs	r1, #9
 802c928:	f7ff ff8e 	bl	802c848 <std>
 802c92c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 802c930:	2202      	movs	r2, #2
 802c932:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802c936:	2112      	movs	r1, #18
 802c938:	f7ff bf86 	b.w	802c848 <std>
 802c93c:	2400c57c 	.word	0x2400c57c
 802c940:	2400c444 	.word	0x2400c444
 802c944:	0802c8b5 	.word	0x0802c8b5

0802c948 <__sfp_lock_acquire>:
 802c948:	4801      	ldr	r0, [pc, #4]	; (802c950 <__sfp_lock_acquire+0x8>)
 802c94a:	f000 b9b8 	b.w	802ccbe <__retarget_lock_acquire_recursive>
 802c94e:	bf00      	nop
 802c950:	2400c586 	.word	0x2400c586

0802c954 <__sfp_lock_release>:
 802c954:	4801      	ldr	r0, [pc, #4]	; (802c95c <__sfp_lock_release+0x8>)
 802c956:	f000 b9b3 	b.w	802ccc0 <__retarget_lock_release_recursive>
 802c95a:	bf00      	nop
 802c95c:	2400c586 	.word	0x2400c586

0802c960 <__sinit>:
 802c960:	b510      	push	{r4, lr}
 802c962:	4604      	mov	r4, r0
 802c964:	f7ff fff0 	bl	802c948 <__sfp_lock_acquire>
 802c968:	6a23      	ldr	r3, [r4, #32]
 802c96a:	b11b      	cbz	r3, 802c974 <__sinit+0x14>
 802c96c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802c970:	f7ff bff0 	b.w	802c954 <__sfp_lock_release>
 802c974:	4b04      	ldr	r3, [pc, #16]	; (802c988 <__sinit+0x28>)
 802c976:	6223      	str	r3, [r4, #32]
 802c978:	4b04      	ldr	r3, [pc, #16]	; (802c98c <__sinit+0x2c>)
 802c97a:	681b      	ldr	r3, [r3, #0]
 802c97c:	2b00      	cmp	r3, #0
 802c97e:	d1f5      	bne.n	802c96c <__sinit+0xc>
 802c980:	f7ff ffc4 	bl	802c90c <global_stdio_init.part.0>
 802c984:	e7f2      	b.n	802c96c <__sinit+0xc>
 802c986:	bf00      	nop
 802c988:	0802c8cd 	.word	0x0802c8cd
 802c98c:	2400c57c 	.word	0x2400c57c

0802c990 <fiprintf>:
 802c990:	b40e      	push	{r1, r2, r3}
 802c992:	b503      	push	{r0, r1, lr}
 802c994:	4601      	mov	r1, r0
 802c996:	ab03      	add	r3, sp, #12
 802c998:	4805      	ldr	r0, [pc, #20]	; (802c9b0 <fiprintf+0x20>)
 802c99a:	f853 2b04 	ldr.w	r2, [r3], #4
 802c99e:	6800      	ldr	r0, [r0, #0]
 802c9a0:	9301      	str	r3, [sp, #4]
 802c9a2:	f000 fa71 	bl	802ce88 <_vfiprintf_r>
 802c9a6:	b002      	add	sp, #8
 802c9a8:	f85d eb04 	ldr.w	lr, [sp], #4
 802c9ac:	b003      	add	sp, #12
 802c9ae:	4770      	bx	lr
 802c9b0:	2400012c 	.word	0x2400012c

0802c9b4 <_fwalk_sglue>:
 802c9b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c9b8:	4607      	mov	r7, r0
 802c9ba:	4688      	mov	r8, r1
 802c9bc:	4614      	mov	r4, r2
 802c9be:	2600      	movs	r6, #0
 802c9c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802c9c4:	f1b9 0901 	subs.w	r9, r9, #1
 802c9c8:	d505      	bpl.n	802c9d6 <_fwalk_sglue+0x22>
 802c9ca:	6824      	ldr	r4, [r4, #0]
 802c9cc:	2c00      	cmp	r4, #0
 802c9ce:	d1f7      	bne.n	802c9c0 <_fwalk_sglue+0xc>
 802c9d0:	4630      	mov	r0, r6
 802c9d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802c9d6:	89ab      	ldrh	r3, [r5, #12]
 802c9d8:	2b01      	cmp	r3, #1
 802c9da:	d907      	bls.n	802c9ec <_fwalk_sglue+0x38>
 802c9dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802c9e0:	3301      	adds	r3, #1
 802c9e2:	d003      	beq.n	802c9ec <_fwalk_sglue+0x38>
 802c9e4:	4629      	mov	r1, r5
 802c9e6:	4638      	mov	r0, r7
 802c9e8:	47c0      	blx	r8
 802c9ea:	4306      	orrs	r6, r0
 802c9ec:	3568      	adds	r5, #104	; 0x68
 802c9ee:	e7e9      	b.n	802c9c4 <_fwalk_sglue+0x10>

0802c9f0 <__sread>:
 802c9f0:	b510      	push	{r4, lr}
 802c9f2:	460c      	mov	r4, r1
 802c9f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c9f8:	f000 f8ee 	bl	802cbd8 <_read_r>
 802c9fc:	2800      	cmp	r0, #0
 802c9fe:	bfab      	itete	ge
 802ca00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802ca02:	89a3      	ldrhlt	r3, [r4, #12]
 802ca04:	181b      	addge	r3, r3, r0
 802ca06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802ca0a:	bfac      	ite	ge
 802ca0c:	6563      	strge	r3, [r4, #84]	; 0x54
 802ca0e:	81a3      	strhlt	r3, [r4, #12]
 802ca10:	bd10      	pop	{r4, pc}

0802ca12 <__swrite>:
 802ca12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ca16:	461f      	mov	r7, r3
 802ca18:	898b      	ldrh	r3, [r1, #12]
 802ca1a:	05db      	lsls	r3, r3, #23
 802ca1c:	4605      	mov	r5, r0
 802ca1e:	460c      	mov	r4, r1
 802ca20:	4616      	mov	r6, r2
 802ca22:	d505      	bpl.n	802ca30 <__swrite+0x1e>
 802ca24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ca28:	2302      	movs	r3, #2
 802ca2a:	2200      	movs	r2, #0
 802ca2c:	f000 f8c2 	bl	802cbb4 <_lseek_r>
 802ca30:	89a3      	ldrh	r3, [r4, #12]
 802ca32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802ca36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802ca3a:	81a3      	strh	r3, [r4, #12]
 802ca3c:	4632      	mov	r2, r6
 802ca3e:	463b      	mov	r3, r7
 802ca40:	4628      	mov	r0, r5
 802ca42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802ca46:	f000 b8fd 	b.w	802cc44 <_write_r>

0802ca4a <__sseek>:
 802ca4a:	b510      	push	{r4, lr}
 802ca4c:	460c      	mov	r4, r1
 802ca4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ca52:	f000 f8af 	bl	802cbb4 <_lseek_r>
 802ca56:	1c43      	adds	r3, r0, #1
 802ca58:	89a3      	ldrh	r3, [r4, #12]
 802ca5a:	bf15      	itete	ne
 802ca5c:	6560      	strne	r0, [r4, #84]	; 0x54
 802ca5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802ca62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802ca66:	81a3      	strheq	r3, [r4, #12]
 802ca68:	bf18      	it	ne
 802ca6a:	81a3      	strhne	r3, [r4, #12]
 802ca6c:	bd10      	pop	{r4, pc}

0802ca6e <__sclose>:
 802ca6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ca72:	f000 b839 	b.w	802cae8 <_close_r>

0802ca76 <memset>:
 802ca76:	4402      	add	r2, r0
 802ca78:	4603      	mov	r3, r0
 802ca7a:	4293      	cmp	r3, r2
 802ca7c:	d100      	bne.n	802ca80 <memset+0xa>
 802ca7e:	4770      	bx	lr
 802ca80:	f803 1b01 	strb.w	r1, [r3], #1
 802ca84:	e7f9      	b.n	802ca7a <memset+0x4>

0802ca86 <_raise_r>:
 802ca86:	291f      	cmp	r1, #31
 802ca88:	b538      	push	{r3, r4, r5, lr}
 802ca8a:	4604      	mov	r4, r0
 802ca8c:	460d      	mov	r5, r1
 802ca8e:	d904      	bls.n	802ca9a <_raise_r+0x14>
 802ca90:	2316      	movs	r3, #22
 802ca92:	6003      	str	r3, [r0, #0]
 802ca94:	f04f 30ff 	mov.w	r0, #4294967295
 802ca98:	bd38      	pop	{r3, r4, r5, pc}
 802ca9a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 802ca9c:	b112      	cbz	r2, 802caa4 <_raise_r+0x1e>
 802ca9e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802caa2:	b94b      	cbnz	r3, 802cab8 <_raise_r+0x32>
 802caa4:	4620      	mov	r0, r4
 802caa6:	f000 f8bb 	bl	802cc20 <_getpid_r>
 802caaa:	462a      	mov	r2, r5
 802caac:	4601      	mov	r1, r0
 802caae:	4620      	mov	r0, r4
 802cab0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802cab4:	f000 b8a2 	b.w	802cbfc <_kill_r>
 802cab8:	2b01      	cmp	r3, #1
 802caba:	d00a      	beq.n	802cad2 <_raise_r+0x4c>
 802cabc:	1c59      	adds	r1, r3, #1
 802cabe:	d103      	bne.n	802cac8 <_raise_r+0x42>
 802cac0:	2316      	movs	r3, #22
 802cac2:	6003      	str	r3, [r0, #0]
 802cac4:	2001      	movs	r0, #1
 802cac6:	e7e7      	b.n	802ca98 <_raise_r+0x12>
 802cac8:	2400      	movs	r4, #0
 802caca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802cace:	4628      	mov	r0, r5
 802cad0:	4798      	blx	r3
 802cad2:	2000      	movs	r0, #0
 802cad4:	e7e0      	b.n	802ca98 <_raise_r+0x12>
	...

0802cad8 <raise>:
 802cad8:	4b02      	ldr	r3, [pc, #8]	; (802cae4 <raise+0xc>)
 802cada:	4601      	mov	r1, r0
 802cadc:	6818      	ldr	r0, [r3, #0]
 802cade:	f7ff bfd2 	b.w	802ca86 <_raise_r>
 802cae2:	bf00      	nop
 802cae4:	2400012c 	.word	0x2400012c

0802cae8 <_close_r>:
 802cae8:	b538      	push	{r3, r4, r5, lr}
 802caea:	4d06      	ldr	r5, [pc, #24]	; (802cb04 <_close_r+0x1c>)
 802caec:	2300      	movs	r3, #0
 802caee:	4604      	mov	r4, r0
 802caf0:	4608      	mov	r0, r1
 802caf2:	602b      	str	r3, [r5, #0]
 802caf4:	f7d4 fe5d 	bl	80017b2 <_close>
 802caf8:	1c43      	adds	r3, r0, #1
 802cafa:	d102      	bne.n	802cb02 <_close_r+0x1a>
 802cafc:	682b      	ldr	r3, [r5, #0]
 802cafe:	b103      	cbz	r3, 802cb02 <_close_r+0x1a>
 802cb00:	6023      	str	r3, [r4, #0]
 802cb02:	bd38      	pop	{r3, r4, r5, pc}
 802cb04:	2400c580 	.word	0x2400c580

0802cb08 <_reclaim_reent>:
 802cb08:	4b29      	ldr	r3, [pc, #164]	; (802cbb0 <_reclaim_reent+0xa8>)
 802cb0a:	681b      	ldr	r3, [r3, #0]
 802cb0c:	4283      	cmp	r3, r0
 802cb0e:	b570      	push	{r4, r5, r6, lr}
 802cb10:	4604      	mov	r4, r0
 802cb12:	d04b      	beq.n	802cbac <_reclaim_reent+0xa4>
 802cb14:	69c3      	ldr	r3, [r0, #28]
 802cb16:	b143      	cbz	r3, 802cb2a <_reclaim_reent+0x22>
 802cb18:	68db      	ldr	r3, [r3, #12]
 802cb1a:	2b00      	cmp	r3, #0
 802cb1c:	d144      	bne.n	802cba8 <_reclaim_reent+0xa0>
 802cb1e:	69e3      	ldr	r3, [r4, #28]
 802cb20:	6819      	ldr	r1, [r3, #0]
 802cb22:	b111      	cbz	r1, 802cb2a <_reclaim_reent+0x22>
 802cb24:	4620      	mov	r0, r4
 802cb26:	f000 f939 	bl	802cd9c <_free_r>
 802cb2a:	6961      	ldr	r1, [r4, #20]
 802cb2c:	b111      	cbz	r1, 802cb34 <_reclaim_reent+0x2c>
 802cb2e:	4620      	mov	r0, r4
 802cb30:	f000 f934 	bl	802cd9c <_free_r>
 802cb34:	69e1      	ldr	r1, [r4, #28]
 802cb36:	b111      	cbz	r1, 802cb3e <_reclaim_reent+0x36>
 802cb38:	4620      	mov	r0, r4
 802cb3a:	f000 f92f 	bl	802cd9c <_free_r>
 802cb3e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 802cb40:	b111      	cbz	r1, 802cb48 <_reclaim_reent+0x40>
 802cb42:	4620      	mov	r0, r4
 802cb44:	f000 f92a 	bl	802cd9c <_free_r>
 802cb48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802cb4a:	b111      	cbz	r1, 802cb52 <_reclaim_reent+0x4a>
 802cb4c:	4620      	mov	r0, r4
 802cb4e:	f000 f925 	bl	802cd9c <_free_r>
 802cb52:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802cb54:	b111      	cbz	r1, 802cb5c <_reclaim_reent+0x54>
 802cb56:	4620      	mov	r0, r4
 802cb58:	f000 f920 	bl	802cd9c <_free_r>
 802cb5c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 802cb5e:	b111      	cbz	r1, 802cb66 <_reclaim_reent+0x5e>
 802cb60:	4620      	mov	r0, r4
 802cb62:	f000 f91b 	bl	802cd9c <_free_r>
 802cb66:	6c61      	ldr	r1, [r4, #68]	; 0x44
 802cb68:	b111      	cbz	r1, 802cb70 <_reclaim_reent+0x68>
 802cb6a:	4620      	mov	r0, r4
 802cb6c:	f000 f916 	bl	802cd9c <_free_r>
 802cb70:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 802cb72:	b111      	cbz	r1, 802cb7a <_reclaim_reent+0x72>
 802cb74:	4620      	mov	r0, r4
 802cb76:	f000 f911 	bl	802cd9c <_free_r>
 802cb7a:	6a23      	ldr	r3, [r4, #32]
 802cb7c:	b1b3      	cbz	r3, 802cbac <_reclaim_reent+0xa4>
 802cb7e:	4620      	mov	r0, r4
 802cb80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802cb84:	4718      	bx	r3
 802cb86:	5949      	ldr	r1, [r1, r5]
 802cb88:	b941      	cbnz	r1, 802cb9c <_reclaim_reent+0x94>
 802cb8a:	3504      	adds	r5, #4
 802cb8c:	69e3      	ldr	r3, [r4, #28]
 802cb8e:	2d80      	cmp	r5, #128	; 0x80
 802cb90:	68d9      	ldr	r1, [r3, #12]
 802cb92:	d1f8      	bne.n	802cb86 <_reclaim_reent+0x7e>
 802cb94:	4620      	mov	r0, r4
 802cb96:	f000 f901 	bl	802cd9c <_free_r>
 802cb9a:	e7c0      	b.n	802cb1e <_reclaim_reent+0x16>
 802cb9c:	680e      	ldr	r6, [r1, #0]
 802cb9e:	4620      	mov	r0, r4
 802cba0:	f000 f8fc 	bl	802cd9c <_free_r>
 802cba4:	4631      	mov	r1, r6
 802cba6:	e7ef      	b.n	802cb88 <_reclaim_reent+0x80>
 802cba8:	2500      	movs	r5, #0
 802cbaa:	e7ef      	b.n	802cb8c <_reclaim_reent+0x84>
 802cbac:	bd70      	pop	{r4, r5, r6, pc}
 802cbae:	bf00      	nop
 802cbb0:	2400012c 	.word	0x2400012c

0802cbb4 <_lseek_r>:
 802cbb4:	b538      	push	{r3, r4, r5, lr}
 802cbb6:	4d07      	ldr	r5, [pc, #28]	; (802cbd4 <_lseek_r+0x20>)
 802cbb8:	4604      	mov	r4, r0
 802cbba:	4608      	mov	r0, r1
 802cbbc:	4611      	mov	r1, r2
 802cbbe:	2200      	movs	r2, #0
 802cbc0:	602a      	str	r2, [r5, #0]
 802cbc2:	461a      	mov	r2, r3
 802cbc4:	f7d4 fe1c 	bl	8001800 <_lseek>
 802cbc8:	1c43      	adds	r3, r0, #1
 802cbca:	d102      	bne.n	802cbd2 <_lseek_r+0x1e>
 802cbcc:	682b      	ldr	r3, [r5, #0]
 802cbce:	b103      	cbz	r3, 802cbd2 <_lseek_r+0x1e>
 802cbd0:	6023      	str	r3, [r4, #0]
 802cbd2:	bd38      	pop	{r3, r4, r5, pc}
 802cbd4:	2400c580 	.word	0x2400c580

0802cbd8 <_read_r>:
 802cbd8:	b538      	push	{r3, r4, r5, lr}
 802cbda:	4d07      	ldr	r5, [pc, #28]	; (802cbf8 <_read_r+0x20>)
 802cbdc:	4604      	mov	r4, r0
 802cbde:	4608      	mov	r0, r1
 802cbe0:	4611      	mov	r1, r2
 802cbe2:	2200      	movs	r2, #0
 802cbe4:	602a      	str	r2, [r5, #0]
 802cbe6:	461a      	mov	r2, r3
 802cbe8:	f7d4 fdaa 	bl	8001740 <_read>
 802cbec:	1c43      	adds	r3, r0, #1
 802cbee:	d102      	bne.n	802cbf6 <_read_r+0x1e>
 802cbf0:	682b      	ldr	r3, [r5, #0]
 802cbf2:	b103      	cbz	r3, 802cbf6 <_read_r+0x1e>
 802cbf4:	6023      	str	r3, [r4, #0]
 802cbf6:	bd38      	pop	{r3, r4, r5, pc}
 802cbf8:	2400c580 	.word	0x2400c580

0802cbfc <_kill_r>:
 802cbfc:	b538      	push	{r3, r4, r5, lr}
 802cbfe:	4d07      	ldr	r5, [pc, #28]	; (802cc1c <_kill_r+0x20>)
 802cc00:	2300      	movs	r3, #0
 802cc02:	4604      	mov	r4, r0
 802cc04:	4608      	mov	r0, r1
 802cc06:	4611      	mov	r1, r2
 802cc08:	602b      	str	r3, [r5, #0]
 802cc0a:	f7d4 fd7f 	bl	800170c <_kill>
 802cc0e:	1c43      	adds	r3, r0, #1
 802cc10:	d102      	bne.n	802cc18 <_kill_r+0x1c>
 802cc12:	682b      	ldr	r3, [r5, #0]
 802cc14:	b103      	cbz	r3, 802cc18 <_kill_r+0x1c>
 802cc16:	6023      	str	r3, [r4, #0]
 802cc18:	bd38      	pop	{r3, r4, r5, pc}
 802cc1a:	bf00      	nop
 802cc1c:	2400c580 	.word	0x2400c580

0802cc20 <_getpid_r>:
 802cc20:	f7d4 bd6c 	b.w	80016fc <_getpid>

0802cc24 <_sbrk_r>:
 802cc24:	b538      	push	{r3, r4, r5, lr}
 802cc26:	4d06      	ldr	r5, [pc, #24]	; (802cc40 <_sbrk_r+0x1c>)
 802cc28:	2300      	movs	r3, #0
 802cc2a:	4604      	mov	r4, r0
 802cc2c:	4608      	mov	r0, r1
 802cc2e:	602b      	str	r3, [r5, #0]
 802cc30:	f7d4 fdf4 	bl	800181c <_sbrk>
 802cc34:	1c43      	adds	r3, r0, #1
 802cc36:	d102      	bne.n	802cc3e <_sbrk_r+0x1a>
 802cc38:	682b      	ldr	r3, [r5, #0]
 802cc3a:	b103      	cbz	r3, 802cc3e <_sbrk_r+0x1a>
 802cc3c:	6023      	str	r3, [r4, #0]
 802cc3e:	bd38      	pop	{r3, r4, r5, pc}
 802cc40:	2400c580 	.word	0x2400c580

0802cc44 <_write_r>:
 802cc44:	b538      	push	{r3, r4, r5, lr}
 802cc46:	4d07      	ldr	r5, [pc, #28]	; (802cc64 <_write_r+0x20>)
 802cc48:	4604      	mov	r4, r0
 802cc4a:	4608      	mov	r0, r1
 802cc4c:	4611      	mov	r1, r2
 802cc4e:	2200      	movs	r2, #0
 802cc50:	602a      	str	r2, [r5, #0]
 802cc52:	461a      	mov	r2, r3
 802cc54:	f7d4 fd91 	bl	800177a <_write>
 802cc58:	1c43      	adds	r3, r0, #1
 802cc5a:	d102      	bne.n	802cc62 <_write_r+0x1e>
 802cc5c:	682b      	ldr	r3, [r5, #0]
 802cc5e:	b103      	cbz	r3, 802cc62 <_write_r+0x1e>
 802cc60:	6023      	str	r3, [r4, #0]
 802cc62:	bd38      	pop	{r3, r4, r5, pc}
 802cc64:	2400c580 	.word	0x2400c580

0802cc68 <__errno>:
 802cc68:	4b01      	ldr	r3, [pc, #4]	; (802cc70 <__errno+0x8>)
 802cc6a:	6818      	ldr	r0, [r3, #0]
 802cc6c:	4770      	bx	lr
 802cc6e:	bf00      	nop
 802cc70:	2400012c 	.word	0x2400012c

0802cc74 <__libc_init_array>:
 802cc74:	b570      	push	{r4, r5, r6, lr}
 802cc76:	4d0d      	ldr	r5, [pc, #52]	; (802ccac <__libc_init_array+0x38>)
 802cc78:	4c0d      	ldr	r4, [pc, #52]	; (802ccb0 <__libc_init_array+0x3c>)
 802cc7a:	1b64      	subs	r4, r4, r5
 802cc7c:	10a4      	asrs	r4, r4, #2
 802cc7e:	2600      	movs	r6, #0
 802cc80:	42a6      	cmp	r6, r4
 802cc82:	d109      	bne.n	802cc98 <__libc_init_array+0x24>
 802cc84:	4d0b      	ldr	r5, [pc, #44]	; (802ccb4 <__libc_init_array+0x40>)
 802cc86:	4c0c      	ldr	r4, [pc, #48]	; (802ccb8 <__libc_init_array+0x44>)
 802cc88:	f000 fd70 	bl	802d76c <_init>
 802cc8c:	1b64      	subs	r4, r4, r5
 802cc8e:	10a4      	asrs	r4, r4, #2
 802cc90:	2600      	movs	r6, #0
 802cc92:	42a6      	cmp	r6, r4
 802cc94:	d105      	bne.n	802cca2 <__libc_init_array+0x2e>
 802cc96:	bd70      	pop	{r4, r5, r6, pc}
 802cc98:	f855 3b04 	ldr.w	r3, [r5], #4
 802cc9c:	4798      	blx	r3
 802cc9e:	3601      	adds	r6, #1
 802cca0:	e7ee      	b.n	802cc80 <__libc_init_array+0xc>
 802cca2:	f855 3b04 	ldr.w	r3, [r5], #4
 802cca6:	4798      	blx	r3
 802cca8:	3601      	adds	r6, #1
 802ccaa:	e7f2      	b.n	802cc92 <__libc_init_array+0x1e>
 802ccac:	0802ff78 	.word	0x0802ff78
 802ccb0:	0802ff78 	.word	0x0802ff78
 802ccb4:	0802ff78 	.word	0x0802ff78
 802ccb8:	0802ff8c 	.word	0x0802ff8c

0802ccbc <__retarget_lock_init_recursive>:
 802ccbc:	4770      	bx	lr

0802ccbe <__retarget_lock_acquire_recursive>:
 802ccbe:	4770      	bx	lr

0802ccc0 <__retarget_lock_release_recursive>:
 802ccc0:	4770      	bx	lr

0802ccc2 <memcpy>:
 802ccc2:	440a      	add	r2, r1
 802ccc4:	4291      	cmp	r1, r2
 802ccc6:	f100 33ff 	add.w	r3, r0, #4294967295
 802ccca:	d100      	bne.n	802ccce <memcpy+0xc>
 802cccc:	4770      	bx	lr
 802ccce:	b510      	push	{r4, lr}
 802ccd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 802ccd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 802ccd8:	4291      	cmp	r1, r2
 802ccda:	d1f9      	bne.n	802ccd0 <memcpy+0xe>
 802ccdc:	bd10      	pop	{r4, pc}
	...

0802cce0 <__register_exitproc>:
 802cce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802cce4:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 802cd98 <__register_exitproc+0xb8>
 802cce8:	4606      	mov	r6, r0
 802ccea:	f8d8 0000 	ldr.w	r0, [r8]
 802ccee:	461f      	mov	r7, r3
 802ccf0:	460d      	mov	r5, r1
 802ccf2:	4691      	mov	r9, r2
 802ccf4:	f7ff ffe3 	bl	802ccbe <__retarget_lock_acquire_recursive>
 802ccf8:	4b23      	ldr	r3, [pc, #140]	; (802cd88 <__register_exitproc+0xa8>)
 802ccfa:	681c      	ldr	r4, [r3, #0]
 802ccfc:	b934      	cbnz	r4, 802cd0c <__register_exitproc+0x2c>
 802ccfe:	4c23      	ldr	r4, [pc, #140]	; (802cd8c <__register_exitproc+0xac>)
 802cd00:	601c      	str	r4, [r3, #0]
 802cd02:	4b23      	ldr	r3, [pc, #140]	; (802cd90 <__register_exitproc+0xb0>)
 802cd04:	b113      	cbz	r3, 802cd0c <__register_exitproc+0x2c>
 802cd06:	681b      	ldr	r3, [r3, #0]
 802cd08:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802cd0c:	6863      	ldr	r3, [r4, #4]
 802cd0e:	2b1f      	cmp	r3, #31
 802cd10:	dd07      	ble.n	802cd22 <__register_exitproc+0x42>
 802cd12:	f8d8 0000 	ldr.w	r0, [r8]
 802cd16:	f7ff ffd3 	bl	802ccc0 <__retarget_lock_release_recursive>
 802cd1a:	f04f 30ff 	mov.w	r0, #4294967295
 802cd1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802cd22:	b32e      	cbz	r6, 802cd70 <__register_exitproc+0x90>
 802cd24:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802cd28:	b968      	cbnz	r0, 802cd46 <__register_exitproc+0x66>
 802cd2a:	4b1a      	ldr	r3, [pc, #104]	; (802cd94 <__register_exitproc+0xb4>)
 802cd2c:	2b00      	cmp	r3, #0
 802cd2e:	d0f0      	beq.n	802cd12 <__register_exitproc+0x32>
 802cd30:	f44f 7084 	mov.w	r0, #264	; 0x108
 802cd34:	f7ff fcbe 	bl	802c6b4 <malloc>
 802cd38:	2800      	cmp	r0, #0
 802cd3a:	d0ea      	beq.n	802cd12 <__register_exitproc+0x32>
 802cd3c:	2300      	movs	r3, #0
 802cd3e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802cd42:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802cd46:	6863      	ldr	r3, [r4, #4]
 802cd48:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802cd4c:	2201      	movs	r2, #1
 802cd4e:	409a      	lsls	r2, r3
 802cd50:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802cd54:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 802cd58:	4313      	orrs	r3, r2
 802cd5a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802cd5e:	2e02      	cmp	r6, #2
 802cd60:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 802cd64:	bf02      	ittt	eq
 802cd66:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802cd6a:	4313      	orreq	r3, r2
 802cd6c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 802cd70:	6863      	ldr	r3, [r4, #4]
 802cd72:	f8d8 0000 	ldr.w	r0, [r8]
 802cd76:	1c5a      	adds	r2, r3, #1
 802cd78:	3302      	adds	r3, #2
 802cd7a:	6062      	str	r2, [r4, #4]
 802cd7c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 802cd80:	f7ff ff9e 	bl	802ccc0 <__retarget_lock_release_recursive>
 802cd84:	2000      	movs	r0, #0
 802cd86:	e7ca      	b.n	802cd1e <__register_exitproc+0x3e>
 802cd88:	2400c614 	.word	0x2400c614
 802cd8c:	2400c588 	.word	0x2400c588
 802cd90:	0802ff18 	.word	0x0802ff18
 802cd94:	0802c6b5 	.word	0x0802c6b5
 802cd98:	24000130 	.word	0x24000130

0802cd9c <_free_r>:
 802cd9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802cd9e:	2900      	cmp	r1, #0
 802cda0:	d044      	beq.n	802ce2c <_free_r+0x90>
 802cda2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802cda6:	9001      	str	r0, [sp, #4]
 802cda8:	2b00      	cmp	r3, #0
 802cdaa:	f1a1 0404 	sub.w	r4, r1, #4
 802cdae:	bfb8      	it	lt
 802cdb0:	18e4      	addlt	r4, r4, r3
 802cdb2:	f7ff fd2f 	bl	802c814 <__malloc_lock>
 802cdb6:	4a1e      	ldr	r2, [pc, #120]	; (802ce30 <_free_r+0x94>)
 802cdb8:	9801      	ldr	r0, [sp, #4]
 802cdba:	6813      	ldr	r3, [r2, #0]
 802cdbc:	b933      	cbnz	r3, 802cdcc <_free_r+0x30>
 802cdbe:	6063      	str	r3, [r4, #4]
 802cdc0:	6014      	str	r4, [r2, #0]
 802cdc2:	b003      	add	sp, #12
 802cdc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802cdc8:	f7ff bd2a 	b.w	802c820 <__malloc_unlock>
 802cdcc:	42a3      	cmp	r3, r4
 802cdce:	d908      	bls.n	802cde2 <_free_r+0x46>
 802cdd0:	6825      	ldr	r5, [r4, #0]
 802cdd2:	1961      	adds	r1, r4, r5
 802cdd4:	428b      	cmp	r3, r1
 802cdd6:	bf01      	itttt	eq
 802cdd8:	6819      	ldreq	r1, [r3, #0]
 802cdda:	685b      	ldreq	r3, [r3, #4]
 802cddc:	1949      	addeq	r1, r1, r5
 802cdde:	6021      	streq	r1, [r4, #0]
 802cde0:	e7ed      	b.n	802cdbe <_free_r+0x22>
 802cde2:	461a      	mov	r2, r3
 802cde4:	685b      	ldr	r3, [r3, #4]
 802cde6:	b10b      	cbz	r3, 802cdec <_free_r+0x50>
 802cde8:	42a3      	cmp	r3, r4
 802cdea:	d9fa      	bls.n	802cde2 <_free_r+0x46>
 802cdec:	6811      	ldr	r1, [r2, #0]
 802cdee:	1855      	adds	r5, r2, r1
 802cdf0:	42a5      	cmp	r5, r4
 802cdf2:	d10b      	bne.n	802ce0c <_free_r+0x70>
 802cdf4:	6824      	ldr	r4, [r4, #0]
 802cdf6:	4421      	add	r1, r4
 802cdf8:	1854      	adds	r4, r2, r1
 802cdfa:	42a3      	cmp	r3, r4
 802cdfc:	6011      	str	r1, [r2, #0]
 802cdfe:	d1e0      	bne.n	802cdc2 <_free_r+0x26>
 802ce00:	681c      	ldr	r4, [r3, #0]
 802ce02:	685b      	ldr	r3, [r3, #4]
 802ce04:	6053      	str	r3, [r2, #4]
 802ce06:	440c      	add	r4, r1
 802ce08:	6014      	str	r4, [r2, #0]
 802ce0a:	e7da      	b.n	802cdc2 <_free_r+0x26>
 802ce0c:	d902      	bls.n	802ce14 <_free_r+0x78>
 802ce0e:	230c      	movs	r3, #12
 802ce10:	6003      	str	r3, [r0, #0]
 802ce12:	e7d6      	b.n	802cdc2 <_free_r+0x26>
 802ce14:	6825      	ldr	r5, [r4, #0]
 802ce16:	1961      	adds	r1, r4, r5
 802ce18:	428b      	cmp	r3, r1
 802ce1a:	bf04      	itt	eq
 802ce1c:	6819      	ldreq	r1, [r3, #0]
 802ce1e:	685b      	ldreq	r3, [r3, #4]
 802ce20:	6063      	str	r3, [r4, #4]
 802ce22:	bf04      	itt	eq
 802ce24:	1949      	addeq	r1, r1, r5
 802ce26:	6021      	streq	r1, [r4, #0]
 802ce28:	6054      	str	r4, [r2, #4]
 802ce2a:	e7ca      	b.n	802cdc2 <_free_r+0x26>
 802ce2c:	b003      	add	sp, #12
 802ce2e:	bd30      	pop	{r4, r5, pc}
 802ce30:	2400c43c 	.word	0x2400c43c

0802ce34 <__sfputc_r>:
 802ce34:	6893      	ldr	r3, [r2, #8]
 802ce36:	3b01      	subs	r3, #1
 802ce38:	2b00      	cmp	r3, #0
 802ce3a:	b410      	push	{r4}
 802ce3c:	6093      	str	r3, [r2, #8]
 802ce3e:	da08      	bge.n	802ce52 <__sfputc_r+0x1e>
 802ce40:	6994      	ldr	r4, [r2, #24]
 802ce42:	42a3      	cmp	r3, r4
 802ce44:	db01      	blt.n	802ce4a <__sfputc_r+0x16>
 802ce46:	290a      	cmp	r1, #10
 802ce48:	d103      	bne.n	802ce52 <__sfputc_r+0x1e>
 802ce4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802ce4e:	f000 bb73 	b.w	802d538 <__swbuf_r>
 802ce52:	6813      	ldr	r3, [r2, #0]
 802ce54:	1c58      	adds	r0, r3, #1
 802ce56:	6010      	str	r0, [r2, #0]
 802ce58:	7019      	strb	r1, [r3, #0]
 802ce5a:	4608      	mov	r0, r1
 802ce5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 802ce60:	4770      	bx	lr

0802ce62 <__sfputs_r>:
 802ce62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ce64:	4606      	mov	r6, r0
 802ce66:	460f      	mov	r7, r1
 802ce68:	4614      	mov	r4, r2
 802ce6a:	18d5      	adds	r5, r2, r3
 802ce6c:	42ac      	cmp	r4, r5
 802ce6e:	d101      	bne.n	802ce74 <__sfputs_r+0x12>
 802ce70:	2000      	movs	r0, #0
 802ce72:	e007      	b.n	802ce84 <__sfputs_r+0x22>
 802ce74:	f814 1b01 	ldrb.w	r1, [r4], #1
 802ce78:	463a      	mov	r2, r7
 802ce7a:	4630      	mov	r0, r6
 802ce7c:	f7ff ffda 	bl	802ce34 <__sfputc_r>
 802ce80:	1c43      	adds	r3, r0, #1
 802ce82:	d1f3      	bne.n	802ce6c <__sfputs_r+0xa>
 802ce84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802ce88 <_vfiprintf_r>:
 802ce88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ce8c:	460d      	mov	r5, r1
 802ce8e:	b09d      	sub	sp, #116	; 0x74
 802ce90:	4614      	mov	r4, r2
 802ce92:	4698      	mov	r8, r3
 802ce94:	4606      	mov	r6, r0
 802ce96:	b118      	cbz	r0, 802cea0 <_vfiprintf_r+0x18>
 802ce98:	6a03      	ldr	r3, [r0, #32]
 802ce9a:	b90b      	cbnz	r3, 802cea0 <_vfiprintf_r+0x18>
 802ce9c:	f7ff fd60 	bl	802c960 <__sinit>
 802cea0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802cea2:	07d9      	lsls	r1, r3, #31
 802cea4:	d405      	bmi.n	802ceb2 <_vfiprintf_r+0x2a>
 802cea6:	89ab      	ldrh	r3, [r5, #12]
 802cea8:	059a      	lsls	r2, r3, #22
 802ceaa:	d402      	bmi.n	802ceb2 <_vfiprintf_r+0x2a>
 802ceac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802ceae:	f7ff ff06 	bl	802ccbe <__retarget_lock_acquire_recursive>
 802ceb2:	89ab      	ldrh	r3, [r5, #12]
 802ceb4:	071b      	lsls	r3, r3, #28
 802ceb6:	d501      	bpl.n	802cebc <_vfiprintf_r+0x34>
 802ceb8:	692b      	ldr	r3, [r5, #16]
 802ceba:	b99b      	cbnz	r3, 802cee4 <_vfiprintf_r+0x5c>
 802cebc:	4629      	mov	r1, r5
 802cebe:	4630      	mov	r0, r6
 802cec0:	f000 fb78 	bl	802d5b4 <__swsetup_r>
 802cec4:	b170      	cbz	r0, 802cee4 <_vfiprintf_r+0x5c>
 802cec6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802cec8:	07dc      	lsls	r4, r3, #31
 802ceca:	d504      	bpl.n	802ced6 <_vfiprintf_r+0x4e>
 802cecc:	f04f 30ff 	mov.w	r0, #4294967295
 802ced0:	b01d      	add	sp, #116	; 0x74
 802ced2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ced6:	89ab      	ldrh	r3, [r5, #12]
 802ced8:	0598      	lsls	r0, r3, #22
 802ceda:	d4f7      	bmi.n	802cecc <_vfiprintf_r+0x44>
 802cedc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802cede:	f7ff feef 	bl	802ccc0 <__retarget_lock_release_recursive>
 802cee2:	e7f3      	b.n	802cecc <_vfiprintf_r+0x44>
 802cee4:	2300      	movs	r3, #0
 802cee6:	9309      	str	r3, [sp, #36]	; 0x24
 802cee8:	2320      	movs	r3, #32
 802ceea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802ceee:	f8cd 800c 	str.w	r8, [sp, #12]
 802cef2:	2330      	movs	r3, #48	; 0x30
 802cef4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 802d0a8 <_vfiprintf_r+0x220>
 802cef8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802cefc:	f04f 0901 	mov.w	r9, #1
 802cf00:	4623      	mov	r3, r4
 802cf02:	469a      	mov	sl, r3
 802cf04:	f813 2b01 	ldrb.w	r2, [r3], #1
 802cf08:	b10a      	cbz	r2, 802cf0e <_vfiprintf_r+0x86>
 802cf0a:	2a25      	cmp	r2, #37	; 0x25
 802cf0c:	d1f9      	bne.n	802cf02 <_vfiprintf_r+0x7a>
 802cf0e:	ebba 0b04 	subs.w	fp, sl, r4
 802cf12:	d00b      	beq.n	802cf2c <_vfiprintf_r+0xa4>
 802cf14:	465b      	mov	r3, fp
 802cf16:	4622      	mov	r2, r4
 802cf18:	4629      	mov	r1, r5
 802cf1a:	4630      	mov	r0, r6
 802cf1c:	f7ff ffa1 	bl	802ce62 <__sfputs_r>
 802cf20:	3001      	adds	r0, #1
 802cf22:	f000 80a9 	beq.w	802d078 <_vfiprintf_r+0x1f0>
 802cf26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802cf28:	445a      	add	r2, fp
 802cf2a:	9209      	str	r2, [sp, #36]	; 0x24
 802cf2c:	f89a 3000 	ldrb.w	r3, [sl]
 802cf30:	2b00      	cmp	r3, #0
 802cf32:	f000 80a1 	beq.w	802d078 <_vfiprintf_r+0x1f0>
 802cf36:	2300      	movs	r3, #0
 802cf38:	f04f 32ff 	mov.w	r2, #4294967295
 802cf3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802cf40:	f10a 0a01 	add.w	sl, sl, #1
 802cf44:	9304      	str	r3, [sp, #16]
 802cf46:	9307      	str	r3, [sp, #28]
 802cf48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802cf4c:	931a      	str	r3, [sp, #104]	; 0x68
 802cf4e:	4654      	mov	r4, sl
 802cf50:	2205      	movs	r2, #5
 802cf52:	f814 1b01 	ldrb.w	r1, [r4], #1
 802cf56:	4854      	ldr	r0, [pc, #336]	; (802d0a8 <_vfiprintf_r+0x220>)
 802cf58:	f7d3 f9c2 	bl	80002e0 <memchr>
 802cf5c:	9a04      	ldr	r2, [sp, #16]
 802cf5e:	b9d8      	cbnz	r0, 802cf98 <_vfiprintf_r+0x110>
 802cf60:	06d1      	lsls	r1, r2, #27
 802cf62:	bf44      	itt	mi
 802cf64:	2320      	movmi	r3, #32
 802cf66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802cf6a:	0713      	lsls	r3, r2, #28
 802cf6c:	bf44      	itt	mi
 802cf6e:	232b      	movmi	r3, #43	; 0x2b
 802cf70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802cf74:	f89a 3000 	ldrb.w	r3, [sl]
 802cf78:	2b2a      	cmp	r3, #42	; 0x2a
 802cf7a:	d015      	beq.n	802cfa8 <_vfiprintf_r+0x120>
 802cf7c:	9a07      	ldr	r2, [sp, #28]
 802cf7e:	4654      	mov	r4, sl
 802cf80:	2000      	movs	r0, #0
 802cf82:	f04f 0c0a 	mov.w	ip, #10
 802cf86:	4621      	mov	r1, r4
 802cf88:	f811 3b01 	ldrb.w	r3, [r1], #1
 802cf8c:	3b30      	subs	r3, #48	; 0x30
 802cf8e:	2b09      	cmp	r3, #9
 802cf90:	d94d      	bls.n	802d02e <_vfiprintf_r+0x1a6>
 802cf92:	b1b0      	cbz	r0, 802cfc2 <_vfiprintf_r+0x13a>
 802cf94:	9207      	str	r2, [sp, #28]
 802cf96:	e014      	b.n	802cfc2 <_vfiprintf_r+0x13a>
 802cf98:	eba0 0308 	sub.w	r3, r0, r8
 802cf9c:	fa09 f303 	lsl.w	r3, r9, r3
 802cfa0:	4313      	orrs	r3, r2
 802cfa2:	9304      	str	r3, [sp, #16]
 802cfa4:	46a2      	mov	sl, r4
 802cfa6:	e7d2      	b.n	802cf4e <_vfiprintf_r+0xc6>
 802cfa8:	9b03      	ldr	r3, [sp, #12]
 802cfaa:	1d19      	adds	r1, r3, #4
 802cfac:	681b      	ldr	r3, [r3, #0]
 802cfae:	9103      	str	r1, [sp, #12]
 802cfb0:	2b00      	cmp	r3, #0
 802cfb2:	bfbb      	ittet	lt
 802cfb4:	425b      	neglt	r3, r3
 802cfb6:	f042 0202 	orrlt.w	r2, r2, #2
 802cfba:	9307      	strge	r3, [sp, #28]
 802cfbc:	9307      	strlt	r3, [sp, #28]
 802cfbe:	bfb8      	it	lt
 802cfc0:	9204      	strlt	r2, [sp, #16]
 802cfc2:	7823      	ldrb	r3, [r4, #0]
 802cfc4:	2b2e      	cmp	r3, #46	; 0x2e
 802cfc6:	d10c      	bne.n	802cfe2 <_vfiprintf_r+0x15a>
 802cfc8:	7863      	ldrb	r3, [r4, #1]
 802cfca:	2b2a      	cmp	r3, #42	; 0x2a
 802cfcc:	d134      	bne.n	802d038 <_vfiprintf_r+0x1b0>
 802cfce:	9b03      	ldr	r3, [sp, #12]
 802cfd0:	1d1a      	adds	r2, r3, #4
 802cfd2:	681b      	ldr	r3, [r3, #0]
 802cfd4:	9203      	str	r2, [sp, #12]
 802cfd6:	2b00      	cmp	r3, #0
 802cfd8:	bfb8      	it	lt
 802cfda:	f04f 33ff 	movlt.w	r3, #4294967295
 802cfde:	3402      	adds	r4, #2
 802cfe0:	9305      	str	r3, [sp, #20]
 802cfe2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 802d0b8 <_vfiprintf_r+0x230>
 802cfe6:	7821      	ldrb	r1, [r4, #0]
 802cfe8:	2203      	movs	r2, #3
 802cfea:	4650      	mov	r0, sl
 802cfec:	f7d3 f978 	bl	80002e0 <memchr>
 802cff0:	b138      	cbz	r0, 802d002 <_vfiprintf_r+0x17a>
 802cff2:	9b04      	ldr	r3, [sp, #16]
 802cff4:	eba0 000a 	sub.w	r0, r0, sl
 802cff8:	2240      	movs	r2, #64	; 0x40
 802cffa:	4082      	lsls	r2, r0
 802cffc:	4313      	orrs	r3, r2
 802cffe:	3401      	adds	r4, #1
 802d000:	9304      	str	r3, [sp, #16]
 802d002:	f814 1b01 	ldrb.w	r1, [r4], #1
 802d006:	4829      	ldr	r0, [pc, #164]	; (802d0ac <_vfiprintf_r+0x224>)
 802d008:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802d00c:	2206      	movs	r2, #6
 802d00e:	f7d3 f967 	bl	80002e0 <memchr>
 802d012:	2800      	cmp	r0, #0
 802d014:	d03f      	beq.n	802d096 <_vfiprintf_r+0x20e>
 802d016:	4b26      	ldr	r3, [pc, #152]	; (802d0b0 <_vfiprintf_r+0x228>)
 802d018:	bb1b      	cbnz	r3, 802d062 <_vfiprintf_r+0x1da>
 802d01a:	9b03      	ldr	r3, [sp, #12]
 802d01c:	3307      	adds	r3, #7
 802d01e:	f023 0307 	bic.w	r3, r3, #7
 802d022:	3308      	adds	r3, #8
 802d024:	9303      	str	r3, [sp, #12]
 802d026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802d028:	443b      	add	r3, r7
 802d02a:	9309      	str	r3, [sp, #36]	; 0x24
 802d02c:	e768      	b.n	802cf00 <_vfiprintf_r+0x78>
 802d02e:	fb0c 3202 	mla	r2, ip, r2, r3
 802d032:	460c      	mov	r4, r1
 802d034:	2001      	movs	r0, #1
 802d036:	e7a6      	b.n	802cf86 <_vfiprintf_r+0xfe>
 802d038:	2300      	movs	r3, #0
 802d03a:	3401      	adds	r4, #1
 802d03c:	9305      	str	r3, [sp, #20]
 802d03e:	4619      	mov	r1, r3
 802d040:	f04f 0c0a 	mov.w	ip, #10
 802d044:	4620      	mov	r0, r4
 802d046:	f810 2b01 	ldrb.w	r2, [r0], #1
 802d04a:	3a30      	subs	r2, #48	; 0x30
 802d04c:	2a09      	cmp	r2, #9
 802d04e:	d903      	bls.n	802d058 <_vfiprintf_r+0x1d0>
 802d050:	2b00      	cmp	r3, #0
 802d052:	d0c6      	beq.n	802cfe2 <_vfiprintf_r+0x15a>
 802d054:	9105      	str	r1, [sp, #20]
 802d056:	e7c4      	b.n	802cfe2 <_vfiprintf_r+0x15a>
 802d058:	fb0c 2101 	mla	r1, ip, r1, r2
 802d05c:	4604      	mov	r4, r0
 802d05e:	2301      	movs	r3, #1
 802d060:	e7f0      	b.n	802d044 <_vfiprintf_r+0x1bc>
 802d062:	ab03      	add	r3, sp, #12
 802d064:	9300      	str	r3, [sp, #0]
 802d066:	462a      	mov	r2, r5
 802d068:	4b12      	ldr	r3, [pc, #72]	; (802d0b4 <_vfiprintf_r+0x22c>)
 802d06a:	a904      	add	r1, sp, #16
 802d06c:	4630      	mov	r0, r6
 802d06e:	f3af 8000 	nop.w
 802d072:	4607      	mov	r7, r0
 802d074:	1c78      	adds	r0, r7, #1
 802d076:	d1d6      	bne.n	802d026 <_vfiprintf_r+0x19e>
 802d078:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802d07a:	07d9      	lsls	r1, r3, #31
 802d07c:	d405      	bmi.n	802d08a <_vfiprintf_r+0x202>
 802d07e:	89ab      	ldrh	r3, [r5, #12]
 802d080:	059a      	lsls	r2, r3, #22
 802d082:	d402      	bmi.n	802d08a <_vfiprintf_r+0x202>
 802d084:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802d086:	f7ff fe1b 	bl	802ccc0 <__retarget_lock_release_recursive>
 802d08a:	89ab      	ldrh	r3, [r5, #12]
 802d08c:	065b      	lsls	r3, r3, #25
 802d08e:	f53f af1d 	bmi.w	802cecc <_vfiprintf_r+0x44>
 802d092:	9809      	ldr	r0, [sp, #36]	; 0x24
 802d094:	e71c      	b.n	802ced0 <_vfiprintf_r+0x48>
 802d096:	ab03      	add	r3, sp, #12
 802d098:	9300      	str	r3, [sp, #0]
 802d09a:	462a      	mov	r2, r5
 802d09c:	4b05      	ldr	r3, [pc, #20]	; (802d0b4 <_vfiprintf_r+0x22c>)
 802d09e:	a904      	add	r1, sp, #16
 802d0a0:	4630      	mov	r0, r6
 802d0a2:	f000 f879 	bl	802d198 <_printf_i>
 802d0a6:	e7e4      	b.n	802d072 <_vfiprintf_r+0x1ea>
 802d0a8:	0802ff1c 	.word	0x0802ff1c
 802d0ac:	0802ff26 	.word	0x0802ff26
 802d0b0:	00000000 	.word	0x00000000
 802d0b4:	0802ce63 	.word	0x0802ce63
 802d0b8:	0802ff22 	.word	0x0802ff22

0802d0bc <_printf_common>:
 802d0bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802d0c0:	4616      	mov	r6, r2
 802d0c2:	4699      	mov	r9, r3
 802d0c4:	688a      	ldr	r2, [r1, #8]
 802d0c6:	690b      	ldr	r3, [r1, #16]
 802d0c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802d0cc:	4293      	cmp	r3, r2
 802d0ce:	bfb8      	it	lt
 802d0d0:	4613      	movlt	r3, r2
 802d0d2:	6033      	str	r3, [r6, #0]
 802d0d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802d0d8:	4607      	mov	r7, r0
 802d0da:	460c      	mov	r4, r1
 802d0dc:	b10a      	cbz	r2, 802d0e2 <_printf_common+0x26>
 802d0de:	3301      	adds	r3, #1
 802d0e0:	6033      	str	r3, [r6, #0]
 802d0e2:	6823      	ldr	r3, [r4, #0]
 802d0e4:	0699      	lsls	r1, r3, #26
 802d0e6:	bf42      	ittt	mi
 802d0e8:	6833      	ldrmi	r3, [r6, #0]
 802d0ea:	3302      	addmi	r3, #2
 802d0ec:	6033      	strmi	r3, [r6, #0]
 802d0ee:	6825      	ldr	r5, [r4, #0]
 802d0f0:	f015 0506 	ands.w	r5, r5, #6
 802d0f4:	d106      	bne.n	802d104 <_printf_common+0x48>
 802d0f6:	f104 0a19 	add.w	sl, r4, #25
 802d0fa:	68e3      	ldr	r3, [r4, #12]
 802d0fc:	6832      	ldr	r2, [r6, #0]
 802d0fe:	1a9b      	subs	r3, r3, r2
 802d100:	42ab      	cmp	r3, r5
 802d102:	dc26      	bgt.n	802d152 <_printf_common+0x96>
 802d104:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802d108:	1e13      	subs	r3, r2, #0
 802d10a:	6822      	ldr	r2, [r4, #0]
 802d10c:	bf18      	it	ne
 802d10e:	2301      	movne	r3, #1
 802d110:	0692      	lsls	r2, r2, #26
 802d112:	d42b      	bmi.n	802d16c <_printf_common+0xb0>
 802d114:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802d118:	4649      	mov	r1, r9
 802d11a:	4638      	mov	r0, r7
 802d11c:	47c0      	blx	r8
 802d11e:	3001      	adds	r0, #1
 802d120:	d01e      	beq.n	802d160 <_printf_common+0xa4>
 802d122:	6823      	ldr	r3, [r4, #0]
 802d124:	6922      	ldr	r2, [r4, #16]
 802d126:	f003 0306 	and.w	r3, r3, #6
 802d12a:	2b04      	cmp	r3, #4
 802d12c:	bf02      	ittt	eq
 802d12e:	68e5      	ldreq	r5, [r4, #12]
 802d130:	6833      	ldreq	r3, [r6, #0]
 802d132:	1aed      	subeq	r5, r5, r3
 802d134:	68a3      	ldr	r3, [r4, #8]
 802d136:	bf0c      	ite	eq
 802d138:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802d13c:	2500      	movne	r5, #0
 802d13e:	4293      	cmp	r3, r2
 802d140:	bfc4      	itt	gt
 802d142:	1a9b      	subgt	r3, r3, r2
 802d144:	18ed      	addgt	r5, r5, r3
 802d146:	2600      	movs	r6, #0
 802d148:	341a      	adds	r4, #26
 802d14a:	42b5      	cmp	r5, r6
 802d14c:	d11a      	bne.n	802d184 <_printf_common+0xc8>
 802d14e:	2000      	movs	r0, #0
 802d150:	e008      	b.n	802d164 <_printf_common+0xa8>
 802d152:	2301      	movs	r3, #1
 802d154:	4652      	mov	r2, sl
 802d156:	4649      	mov	r1, r9
 802d158:	4638      	mov	r0, r7
 802d15a:	47c0      	blx	r8
 802d15c:	3001      	adds	r0, #1
 802d15e:	d103      	bne.n	802d168 <_printf_common+0xac>
 802d160:	f04f 30ff 	mov.w	r0, #4294967295
 802d164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802d168:	3501      	adds	r5, #1
 802d16a:	e7c6      	b.n	802d0fa <_printf_common+0x3e>
 802d16c:	18e1      	adds	r1, r4, r3
 802d16e:	1c5a      	adds	r2, r3, #1
 802d170:	2030      	movs	r0, #48	; 0x30
 802d172:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802d176:	4422      	add	r2, r4
 802d178:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802d17c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802d180:	3302      	adds	r3, #2
 802d182:	e7c7      	b.n	802d114 <_printf_common+0x58>
 802d184:	2301      	movs	r3, #1
 802d186:	4622      	mov	r2, r4
 802d188:	4649      	mov	r1, r9
 802d18a:	4638      	mov	r0, r7
 802d18c:	47c0      	blx	r8
 802d18e:	3001      	adds	r0, #1
 802d190:	d0e6      	beq.n	802d160 <_printf_common+0xa4>
 802d192:	3601      	adds	r6, #1
 802d194:	e7d9      	b.n	802d14a <_printf_common+0x8e>
	...

0802d198 <_printf_i>:
 802d198:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802d19c:	7e0f      	ldrb	r7, [r1, #24]
 802d19e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802d1a0:	2f78      	cmp	r7, #120	; 0x78
 802d1a2:	4691      	mov	r9, r2
 802d1a4:	4680      	mov	r8, r0
 802d1a6:	460c      	mov	r4, r1
 802d1a8:	469a      	mov	sl, r3
 802d1aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802d1ae:	d807      	bhi.n	802d1c0 <_printf_i+0x28>
 802d1b0:	2f62      	cmp	r7, #98	; 0x62
 802d1b2:	d80a      	bhi.n	802d1ca <_printf_i+0x32>
 802d1b4:	2f00      	cmp	r7, #0
 802d1b6:	f000 80d4 	beq.w	802d362 <_printf_i+0x1ca>
 802d1ba:	2f58      	cmp	r7, #88	; 0x58
 802d1bc:	f000 80c0 	beq.w	802d340 <_printf_i+0x1a8>
 802d1c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802d1c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802d1c8:	e03a      	b.n	802d240 <_printf_i+0xa8>
 802d1ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802d1ce:	2b15      	cmp	r3, #21
 802d1d0:	d8f6      	bhi.n	802d1c0 <_printf_i+0x28>
 802d1d2:	a101      	add	r1, pc, #4	; (adr r1, 802d1d8 <_printf_i+0x40>)
 802d1d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802d1d8:	0802d231 	.word	0x0802d231
 802d1dc:	0802d245 	.word	0x0802d245
 802d1e0:	0802d1c1 	.word	0x0802d1c1
 802d1e4:	0802d1c1 	.word	0x0802d1c1
 802d1e8:	0802d1c1 	.word	0x0802d1c1
 802d1ec:	0802d1c1 	.word	0x0802d1c1
 802d1f0:	0802d245 	.word	0x0802d245
 802d1f4:	0802d1c1 	.word	0x0802d1c1
 802d1f8:	0802d1c1 	.word	0x0802d1c1
 802d1fc:	0802d1c1 	.word	0x0802d1c1
 802d200:	0802d1c1 	.word	0x0802d1c1
 802d204:	0802d349 	.word	0x0802d349
 802d208:	0802d271 	.word	0x0802d271
 802d20c:	0802d303 	.word	0x0802d303
 802d210:	0802d1c1 	.word	0x0802d1c1
 802d214:	0802d1c1 	.word	0x0802d1c1
 802d218:	0802d36b 	.word	0x0802d36b
 802d21c:	0802d1c1 	.word	0x0802d1c1
 802d220:	0802d271 	.word	0x0802d271
 802d224:	0802d1c1 	.word	0x0802d1c1
 802d228:	0802d1c1 	.word	0x0802d1c1
 802d22c:	0802d30b 	.word	0x0802d30b
 802d230:	682b      	ldr	r3, [r5, #0]
 802d232:	1d1a      	adds	r2, r3, #4
 802d234:	681b      	ldr	r3, [r3, #0]
 802d236:	602a      	str	r2, [r5, #0]
 802d238:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802d23c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802d240:	2301      	movs	r3, #1
 802d242:	e09f      	b.n	802d384 <_printf_i+0x1ec>
 802d244:	6820      	ldr	r0, [r4, #0]
 802d246:	682b      	ldr	r3, [r5, #0]
 802d248:	0607      	lsls	r7, r0, #24
 802d24a:	f103 0104 	add.w	r1, r3, #4
 802d24e:	6029      	str	r1, [r5, #0]
 802d250:	d501      	bpl.n	802d256 <_printf_i+0xbe>
 802d252:	681e      	ldr	r6, [r3, #0]
 802d254:	e003      	b.n	802d25e <_printf_i+0xc6>
 802d256:	0646      	lsls	r6, r0, #25
 802d258:	d5fb      	bpl.n	802d252 <_printf_i+0xba>
 802d25a:	f9b3 6000 	ldrsh.w	r6, [r3]
 802d25e:	2e00      	cmp	r6, #0
 802d260:	da03      	bge.n	802d26a <_printf_i+0xd2>
 802d262:	232d      	movs	r3, #45	; 0x2d
 802d264:	4276      	negs	r6, r6
 802d266:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802d26a:	485a      	ldr	r0, [pc, #360]	; (802d3d4 <_printf_i+0x23c>)
 802d26c:	230a      	movs	r3, #10
 802d26e:	e012      	b.n	802d296 <_printf_i+0xfe>
 802d270:	682b      	ldr	r3, [r5, #0]
 802d272:	6820      	ldr	r0, [r4, #0]
 802d274:	1d19      	adds	r1, r3, #4
 802d276:	6029      	str	r1, [r5, #0]
 802d278:	0605      	lsls	r5, r0, #24
 802d27a:	d501      	bpl.n	802d280 <_printf_i+0xe8>
 802d27c:	681e      	ldr	r6, [r3, #0]
 802d27e:	e002      	b.n	802d286 <_printf_i+0xee>
 802d280:	0641      	lsls	r1, r0, #25
 802d282:	d5fb      	bpl.n	802d27c <_printf_i+0xe4>
 802d284:	881e      	ldrh	r6, [r3, #0]
 802d286:	4853      	ldr	r0, [pc, #332]	; (802d3d4 <_printf_i+0x23c>)
 802d288:	2f6f      	cmp	r7, #111	; 0x6f
 802d28a:	bf0c      	ite	eq
 802d28c:	2308      	moveq	r3, #8
 802d28e:	230a      	movne	r3, #10
 802d290:	2100      	movs	r1, #0
 802d292:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802d296:	6865      	ldr	r5, [r4, #4]
 802d298:	60a5      	str	r5, [r4, #8]
 802d29a:	2d00      	cmp	r5, #0
 802d29c:	bfa2      	ittt	ge
 802d29e:	6821      	ldrge	r1, [r4, #0]
 802d2a0:	f021 0104 	bicge.w	r1, r1, #4
 802d2a4:	6021      	strge	r1, [r4, #0]
 802d2a6:	b90e      	cbnz	r6, 802d2ac <_printf_i+0x114>
 802d2a8:	2d00      	cmp	r5, #0
 802d2aa:	d04b      	beq.n	802d344 <_printf_i+0x1ac>
 802d2ac:	4615      	mov	r5, r2
 802d2ae:	fbb6 f1f3 	udiv	r1, r6, r3
 802d2b2:	fb03 6711 	mls	r7, r3, r1, r6
 802d2b6:	5dc7      	ldrb	r7, [r0, r7]
 802d2b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802d2bc:	4637      	mov	r7, r6
 802d2be:	42bb      	cmp	r3, r7
 802d2c0:	460e      	mov	r6, r1
 802d2c2:	d9f4      	bls.n	802d2ae <_printf_i+0x116>
 802d2c4:	2b08      	cmp	r3, #8
 802d2c6:	d10b      	bne.n	802d2e0 <_printf_i+0x148>
 802d2c8:	6823      	ldr	r3, [r4, #0]
 802d2ca:	07de      	lsls	r6, r3, #31
 802d2cc:	d508      	bpl.n	802d2e0 <_printf_i+0x148>
 802d2ce:	6923      	ldr	r3, [r4, #16]
 802d2d0:	6861      	ldr	r1, [r4, #4]
 802d2d2:	4299      	cmp	r1, r3
 802d2d4:	bfde      	ittt	le
 802d2d6:	2330      	movle	r3, #48	; 0x30
 802d2d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 802d2dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 802d2e0:	1b52      	subs	r2, r2, r5
 802d2e2:	6122      	str	r2, [r4, #16]
 802d2e4:	f8cd a000 	str.w	sl, [sp]
 802d2e8:	464b      	mov	r3, r9
 802d2ea:	aa03      	add	r2, sp, #12
 802d2ec:	4621      	mov	r1, r4
 802d2ee:	4640      	mov	r0, r8
 802d2f0:	f7ff fee4 	bl	802d0bc <_printf_common>
 802d2f4:	3001      	adds	r0, #1
 802d2f6:	d14a      	bne.n	802d38e <_printf_i+0x1f6>
 802d2f8:	f04f 30ff 	mov.w	r0, #4294967295
 802d2fc:	b004      	add	sp, #16
 802d2fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802d302:	6823      	ldr	r3, [r4, #0]
 802d304:	f043 0320 	orr.w	r3, r3, #32
 802d308:	6023      	str	r3, [r4, #0]
 802d30a:	4833      	ldr	r0, [pc, #204]	; (802d3d8 <_printf_i+0x240>)
 802d30c:	2778      	movs	r7, #120	; 0x78
 802d30e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802d312:	6823      	ldr	r3, [r4, #0]
 802d314:	6829      	ldr	r1, [r5, #0]
 802d316:	061f      	lsls	r7, r3, #24
 802d318:	f851 6b04 	ldr.w	r6, [r1], #4
 802d31c:	d402      	bmi.n	802d324 <_printf_i+0x18c>
 802d31e:	065f      	lsls	r7, r3, #25
 802d320:	bf48      	it	mi
 802d322:	b2b6      	uxthmi	r6, r6
 802d324:	07df      	lsls	r7, r3, #31
 802d326:	bf48      	it	mi
 802d328:	f043 0320 	orrmi.w	r3, r3, #32
 802d32c:	6029      	str	r1, [r5, #0]
 802d32e:	bf48      	it	mi
 802d330:	6023      	strmi	r3, [r4, #0]
 802d332:	b91e      	cbnz	r6, 802d33c <_printf_i+0x1a4>
 802d334:	6823      	ldr	r3, [r4, #0]
 802d336:	f023 0320 	bic.w	r3, r3, #32
 802d33a:	6023      	str	r3, [r4, #0]
 802d33c:	2310      	movs	r3, #16
 802d33e:	e7a7      	b.n	802d290 <_printf_i+0xf8>
 802d340:	4824      	ldr	r0, [pc, #144]	; (802d3d4 <_printf_i+0x23c>)
 802d342:	e7e4      	b.n	802d30e <_printf_i+0x176>
 802d344:	4615      	mov	r5, r2
 802d346:	e7bd      	b.n	802d2c4 <_printf_i+0x12c>
 802d348:	682b      	ldr	r3, [r5, #0]
 802d34a:	6826      	ldr	r6, [r4, #0]
 802d34c:	6961      	ldr	r1, [r4, #20]
 802d34e:	1d18      	adds	r0, r3, #4
 802d350:	6028      	str	r0, [r5, #0]
 802d352:	0635      	lsls	r5, r6, #24
 802d354:	681b      	ldr	r3, [r3, #0]
 802d356:	d501      	bpl.n	802d35c <_printf_i+0x1c4>
 802d358:	6019      	str	r1, [r3, #0]
 802d35a:	e002      	b.n	802d362 <_printf_i+0x1ca>
 802d35c:	0670      	lsls	r0, r6, #25
 802d35e:	d5fb      	bpl.n	802d358 <_printf_i+0x1c0>
 802d360:	8019      	strh	r1, [r3, #0]
 802d362:	2300      	movs	r3, #0
 802d364:	6123      	str	r3, [r4, #16]
 802d366:	4615      	mov	r5, r2
 802d368:	e7bc      	b.n	802d2e4 <_printf_i+0x14c>
 802d36a:	682b      	ldr	r3, [r5, #0]
 802d36c:	1d1a      	adds	r2, r3, #4
 802d36e:	602a      	str	r2, [r5, #0]
 802d370:	681d      	ldr	r5, [r3, #0]
 802d372:	6862      	ldr	r2, [r4, #4]
 802d374:	2100      	movs	r1, #0
 802d376:	4628      	mov	r0, r5
 802d378:	f7d2 ffb2 	bl	80002e0 <memchr>
 802d37c:	b108      	cbz	r0, 802d382 <_printf_i+0x1ea>
 802d37e:	1b40      	subs	r0, r0, r5
 802d380:	6060      	str	r0, [r4, #4]
 802d382:	6863      	ldr	r3, [r4, #4]
 802d384:	6123      	str	r3, [r4, #16]
 802d386:	2300      	movs	r3, #0
 802d388:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802d38c:	e7aa      	b.n	802d2e4 <_printf_i+0x14c>
 802d38e:	6923      	ldr	r3, [r4, #16]
 802d390:	462a      	mov	r2, r5
 802d392:	4649      	mov	r1, r9
 802d394:	4640      	mov	r0, r8
 802d396:	47d0      	blx	sl
 802d398:	3001      	adds	r0, #1
 802d39a:	d0ad      	beq.n	802d2f8 <_printf_i+0x160>
 802d39c:	6823      	ldr	r3, [r4, #0]
 802d39e:	079b      	lsls	r3, r3, #30
 802d3a0:	d413      	bmi.n	802d3ca <_printf_i+0x232>
 802d3a2:	68e0      	ldr	r0, [r4, #12]
 802d3a4:	9b03      	ldr	r3, [sp, #12]
 802d3a6:	4298      	cmp	r0, r3
 802d3a8:	bfb8      	it	lt
 802d3aa:	4618      	movlt	r0, r3
 802d3ac:	e7a6      	b.n	802d2fc <_printf_i+0x164>
 802d3ae:	2301      	movs	r3, #1
 802d3b0:	4632      	mov	r2, r6
 802d3b2:	4649      	mov	r1, r9
 802d3b4:	4640      	mov	r0, r8
 802d3b6:	47d0      	blx	sl
 802d3b8:	3001      	adds	r0, #1
 802d3ba:	d09d      	beq.n	802d2f8 <_printf_i+0x160>
 802d3bc:	3501      	adds	r5, #1
 802d3be:	68e3      	ldr	r3, [r4, #12]
 802d3c0:	9903      	ldr	r1, [sp, #12]
 802d3c2:	1a5b      	subs	r3, r3, r1
 802d3c4:	42ab      	cmp	r3, r5
 802d3c6:	dcf2      	bgt.n	802d3ae <_printf_i+0x216>
 802d3c8:	e7eb      	b.n	802d3a2 <_printf_i+0x20a>
 802d3ca:	2500      	movs	r5, #0
 802d3cc:	f104 0619 	add.w	r6, r4, #25
 802d3d0:	e7f5      	b.n	802d3be <_printf_i+0x226>
 802d3d2:	bf00      	nop
 802d3d4:	0802ff2d 	.word	0x0802ff2d
 802d3d8:	0802ff3e 	.word	0x0802ff3e

0802d3dc <__sflush_r>:
 802d3dc:	898a      	ldrh	r2, [r1, #12]
 802d3de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802d3e2:	4605      	mov	r5, r0
 802d3e4:	0710      	lsls	r0, r2, #28
 802d3e6:	460c      	mov	r4, r1
 802d3e8:	d458      	bmi.n	802d49c <__sflush_r+0xc0>
 802d3ea:	684b      	ldr	r3, [r1, #4]
 802d3ec:	2b00      	cmp	r3, #0
 802d3ee:	dc05      	bgt.n	802d3fc <__sflush_r+0x20>
 802d3f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802d3f2:	2b00      	cmp	r3, #0
 802d3f4:	dc02      	bgt.n	802d3fc <__sflush_r+0x20>
 802d3f6:	2000      	movs	r0, #0
 802d3f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802d3fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802d3fe:	2e00      	cmp	r6, #0
 802d400:	d0f9      	beq.n	802d3f6 <__sflush_r+0x1a>
 802d402:	2300      	movs	r3, #0
 802d404:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802d408:	682f      	ldr	r7, [r5, #0]
 802d40a:	6a21      	ldr	r1, [r4, #32]
 802d40c:	602b      	str	r3, [r5, #0]
 802d40e:	d032      	beq.n	802d476 <__sflush_r+0x9a>
 802d410:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802d412:	89a3      	ldrh	r3, [r4, #12]
 802d414:	075a      	lsls	r2, r3, #29
 802d416:	d505      	bpl.n	802d424 <__sflush_r+0x48>
 802d418:	6863      	ldr	r3, [r4, #4]
 802d41a:	1ac0      	subs	r0, r0, r3
 802d41c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802d41e:	b10b      	cbz	r3, 802d424 <__sflush_r+0x48>
 802d420:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802d422:	1ac0      	subs	r0, r0, r3
 802d424:	2300      	movs	r3, #0
 802d426:	4602      	mov	r2, r0
 802d428:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802d42a:	6a21      	ldr	r1, [r4, #32]
 802d42c:	4628      	mov	r0, r5
 802d42e:	47b0      	blx	r6
 802d430:	1c43      	adds	r3, r0, #1
 802d432:	89a3      	ldrh	r3, [r4, #12]
 802d434:	d106      	bne.n	802d444 <__sflush_r+0x68>
 802d436:	6829      	ldr	r1, [r5, #0]
 802d438:	291d      	cmp	r1, #29
 802d43a:	d82b      	bhi.n	802d494 <__sflush_r+0xb8>
 802d43c:	4a29      	ldr	r2, [pc, #164]	; (802d4e4 <__sflush_r+0x108>)
 802d43e:	410a      	asrs	r2, r1
 802d440:	07d6      	lsls	r6, r2, #31
 802d442:	d427      	bmi.n	802d494 <__sflush_r+0xb8>
 802d444:	2200      	movs	r2, #0
 802d446:	6062      	str	r2, [r4, #4]
 802d448:	04d9      	lsls	r1, r3, #19
 802d44a:	6922      	ldr	r2, [r4, #16]
 802d44c:	6022      	str	r2, [r4, #0]
 802d44e:	d504      	bpl.n	802d45a <__sflush_r+0x7e>
 802d450:	1c42      	adds	r2, r0, #1
 802d452:	d101      	bne.n	802d458 <__sflush_r+0x7c>
 802d454:	682b      	ldr	r3, [r5, #0]
 802d456:	b903      	cbnz	r3, 802d45a <__sflush_r+0x7e>
 802d458:	6560      	str	r0, [r4, #84]	; 0x54
 802d45a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802d45c:	602f      	str	r7, [r5, #0]
 802d45e:	2900      	cmp	r1, #0
 802d460:	d0c9      	beq.n	802d3f6 <__sflush_r+0x1a>
 802d462:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802d466:	4299      	cmp	r1, r3
 802d468:	d002      	beq.n	802d470 <__sflush_r+0x94>
 802d46a:	4628      	mov	r0, r5
 802d46c:	f7ff fc96 	bl	802cd9c <_free_r>
 802d470:	2000      	movs	r0, #0
 802d472:	6360      	str	r0, [r4, #52]	; 0x34
 802d474:	e7c0      	b.n	802d3f8 <__sflush_r+0x1c>
 802d476:	2301      	movs	r3, #1
 802d478:	4628      	mov	r0, r5
 802d47a:	47b0      	blx	r6
 802d47c:	1c41      	adds	r1, r0, #1
 802d47e:	d1c8      	bne.n	802d412 <__sflush_r+0x36>
 802d480:	682b      	ldr	r3, [r5, #0]
 802d482:	2b00      	cmp	r3, #0
 802d484:	d0c5      	beq.n	802d412 <__sflush_r+0x36>
 802d486:	2b1d      	cmp	r3, #29
 802d488:	d001      	beq.n	802d48e <__sflush_r+0xb2>
 802d48a:	2b16      	cmp	r3, #22
 802d48c:	d101      	bne.n	802d492 <__sflush_r+0xb6>
 802d48e:	602f      	str	r7, [r5, #0]
 802d490:	e7b1      	b.n	802d3f6 <__sflush_r+0x1a>
 802d492:	89a3      	ldrh	r3, [r4, #12]
 802d494:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802d498:	81a3      	strh	r3, [r4, #12]
 802d49a:	e7ad      	b.n	802d3f8 <__sflush_r+0x1c>
 802d49c:	690f      	ldr	r7, [r1, #16]
 802d49e:	2f00      	cmp	r7, #0
 802d4a0:	d0a9      	beq.n	802d3f6 <__sflush_r+0x1a>
 802d4a2:	0793      	lsls	r3, r2, #30
 802d4a4:	680e      	ldr	r6, [r1, #0]
 802d4a6:	bf08      	it	eq
 802d4a8:	694b      	ldreq	r3, [r1, #20]
 802d4aa:	600f      	str	r7, [r1, #0]
 802d4ac:	bf18      	it	ne
 802d4ae:	2300      	movne	r3, #0
 802d4b0:	eba6 0807 	sub.w	r8, r6, r7
 802d4b4:	608b      	str	r3, [r1, #8]
 802d4b6:	f1b8 0f00 	cmp.w	r8, #0
 802d4ba:	dd9c      	ble.n	802d3f6 <__sflush_r+0x1a>
 802d4bc:	6a21      	ldr	r1, [r4, #32]
 802d4be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802d4c0:	4643      	mov	r3, r8
 802d4c2:	463a      	mov	r2, r7
 802d4c4:	4628      	mov	r0, r5
 802d4c6:	47b0      	blx	r6
 802d4c8:	2800      	cmp	r0, #0
 802d4ca:	dc06      	bgt.n	802d4da <__sflush_r+0xfe>
 802d4cc:	89a3      	ldrh	r3, [r4, #12]
 802d4ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802d4d2:	81a3      	strh	r3, [r4, #12]
 802d4d4:	f04f 30ff 	mov.w	r0, #4294967295
 802d4d8:	e78e      	b.n	802d3f8 <__sflush_r+0x1c>
 802d4da:	4407      	add	r7, r0
 802d4dc:	eba8 0800 	sub.w	r8, r8, r0
 802d4e0:	e7e9      	b.n	802d4b6 <__sflush_r+0xda>
 802d4e2:	bf00      	nop
 802d4e4:	dfbffffe 	.word	0xdfbffffe

0802d4e8 <_fflush_r>:
 802d4e8:	b538      	push	{r3, r4, r5, lr}
 802d4ea:	690b      	ldr	r3, [r1, #16]
 802d4ec:	4605      	mov	r5, r0
 802d4ee:	460c      	mov	r4, r1
 802d4f0:	b913      	cbnz	r3, 802d4f8 <_fflush_r+0x10>
 802d4f2:	2500      	movs	r5, #0
 802d4f4:	4628      	mov	r0, r5
 802d4f6:	bd38      	pop	{r3, r4, r5, pc}
 802d4f8:	b118      	cbz	r0, 802d502 <_fflush_r+0x1a>
 802d4fa:	6a03      	ldr	r3, [r0, #32]
 802d4fc:	b90b      	cbnz	r3, 802d502 <_fflush_r+0x1a>
 802d4fe:	f7ff fa2f 	bl	802c960 <__sinit>
 802d502:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802d506:	2b00      	cmp	r3, #0
 802d508:	d0f3      	beq.n	802d4f2 <_fflush_r+0xa>
 802d50a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802d50c:	07d0      	lsls	r0, r2, #31
 802d50e:	d404      	bmi.n	802d51a <_fflush_r+0x32>
 802d510:	0599      	lsls	r1, r3, #22
 802d512:	d402      	bmi.n	802d51a <_fflush_r+0x32>
 802d514:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802d516:	f7ff fbd2 	bl	802ccbe <__retarget_lock_acquire_recursive>
 802d51a:	4628      	mov	r0, r5
 802d51c:	4621      	mov	r1, r4
 802d51e:	f7ff ff5d 	bl	802d3dc <__sflush_r>
 802d522:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802d524:	07da      	lsls	r2, r3, #31
 802d526:	4605      	mov	r5, r0
 802d528:	d4e4      	bmi.n	802d4f4 <_fflush_r+0xc>
 802d52a:	89a3      	ldrh	r3, [r4, #12]
 802d52c:	059b      	lsls	r3, r3, #22
 802d52e:	d4e1      	bmi.n	802d4f4 <_fflush_r+0xc>
 802d530:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802d532:	f7ff fbc5 	bl	802ccc0 <__retarget_lock_release_recursive>
 802d536:	e7dd      	b.n	802d4f4 <_fflush_r+0xc>

0802d538 <__swbuf_r>:
 802d538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d53a:	460e      	mov	r6, r1
 802d53c:	4614      	mov	r4, r2
 802d53e:	4605      	mov	r5, r0
 802d540:	b118      	cbz	r0, 802d54a <__swbuf_r+0x12>
 802d542:	6a03      	ldr	r3, [r0, #32]
 802d544:	b90b      	cbnz	r3, 802d54a <__swbuf_r+0x12>
 802d546:	f7ff fa0b 	bl	802c960 <__sinit>
 802d54a:	69a3      	ldr	r3, [r4, #24]
 802d54c:	60a3      	str	r3, [r4, #8]
 802d54e:	89a3      	ldrh	r3, [r4, #12]
 802d550:	071a      	lsls	r2, r3, #28
 802d552:	d525      	bpl.n	802d5a0 <__swbuf_r+0x68>
 802d554:	6923      	ldr	r3, [r4, #16]
 802d556:	b31b      	cbz	r3, 802d5a0 <__swbuf_r+0x68>
 802d558:	6823      	ldr	r3, [r4, #0]
 802d55a:	6922      	ldr	r2, [r4, #16]
 802d55c:	1a98      	subs	r0, r3, r2
 802d55e:	6963      	ldr	r3, [r4, #20]
 802d560:	b2f6      	uxtb	r6, r6
 802d562:	4283      	cmp	r3, r0
 802d564:	4637      	mov	r7, r6
 802d566:	dc04      	bgt.n	802d572 <__swbuf_r+0x3a>
 802d568:	4621      	mov	r1, r4
 802d56a:	4628      	mov	r0, r5
 802d56c:	f7ff ffbc 	bl	802d4e8 <_fflush_r>
 802d570:	b9e0      	cbnz	r0, 802d5ac <__swbuf_r+0x74>
 802d572:	68a3      	ldr	r3, [r4, #8]
 802d574:	3b01      	subs	r3, #1
 802d576:	60a3      	str	r3, [r4, #8]
 802d578:	6823      	ldr	r3, [r4, #0]
 802d57a:	1c5a      	adds	r2, r3, #1
 802d57c:	6022      	str	r2, [r4, #0]
 802d57e:	701e      	strb	r6, [r3, #0]
 802d580:	6962      	ldr	r2, [r4, #20]
 802d582:	1c43      	adds	r3, r0, #1
 802d584:	429a      	cmp	r2, r3
 802d586:	d004      	beq.n	802d592 <__swbuf_r+0x5a>
 802d588:	89a3      	ldrh	r3, [r4, #12]
 802d58a:	07db      	lsls	r3, r3, #31
 802d58c:	d506      	bpl.n	802d59c <__swbuf_r+0x64>
 802d58e:	2e0a      	cmp	r6, #10
 802d590:	d104      	bne.n	802d59c <__swbuf_r+0x64>
 802d592:	4621      	mov	r1, r4
 802d594:	4628      	mov	r0, r5
 802d596:	f7ff ffa7 	bl	802d4e8 <_fflush_r>
 802d59a:	b938      	cbnz	r0, 802d5ac <__swbuf_r+0x74>
 802d59c:	4638      	mov	r0, r7
 802d59e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802d5a0:	4621      	mov	r1, r4
 802d5a2:	4628      	mov	r0, r5
 802d5a4:	f000 f806 	bl	802d5b4 <__swsetup_r>
 802d5a8:	2800      	cmp	r0, #0
 802d5aa:	d0d5      	beq.n	802d558 <__swbuf_r+0x20>
 802d5ac:	f04f 37ff 	mov.w	r7, #4294967295
 802d5b0:	e7f4      	b.n	802d59c <__swbuf_r+0x64>
	...

0802d5b4 <__swsetup_r>:
 802d5b4:	b538      	push	{r3, r4, r5, lr}
 802d5b6:	4b2a      	ldr	r3, [pc, #168]	; (802d660 <__swsetup_r+0xac>)
 802d5b8:	4605      	mov	r5, r0
 802d5ba:	6818      	ldr	r0, [r3, #0]
 802d5bc:	460c      	mov	r4, r1
 802d5be:	b118      	cbz	r0, 802d5c8 <__swsetup_r+0x14>
 802d5c0:	6a03      	ldr	r3, [r0, #32]
 802d5c2:	b90b      	cbnz	r3, 802d5c8 <__swsetup_r+0x14>
 802d5c4:	f7ff f9cc 	bl	802c960 <__sinit>
 802d5c8:	89a3      	ldrh	r3, [r4, #12]
 802d5ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802d5ce:	0718      	lsls	r0, r3, #28
 802d5d0:	d422      	bmi.n	802d618 <__swsetup_r+0x64>
 802d5d2:	06d9      	lsls	r1, r3, #27
 802d5d4:	d407      	bmi.n	802d5e6 <__swsetup_r+0x32>
 802d5d6:	2309      	movs	r3, #9
 802d5d8:	602b      	str	r3, [r5, #0]
 802d5da:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802d5de:	81a3      	strh	r3, [r4, #12]
 802d5e0:	f04f 30ff 	mov.w	r0, #4294967295
 802d5e4:	e034      	b.n	802d650 <__swsetup_r+0x9c>
 802d5e6:	0758      	lsls	r0, r3, #29
 802d5e8:	d512      	bpl.n	802d610 <__swsetup_r+0x5c>
 802d5ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802d5ec:	b141      	cbz	r1, 802d600 <__swsetup_r+0x4c>
 802d5ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802d5f2:	4299      	cmp	r1, r3
 802d5f4:	d002      	beq.n	802d5fc <__swsetup_r+0x48>
 802d5f6:	4628      	mov	r0, r5
 802d5f8:	f7ff fbd0 	bl	802cd9c <_free_r>
 802d5fc:	2300      	movs	r3, #0
 802d5fe:	6363      	str	r3, [r4, #52]	; 0x34
 802d600:	89a3      	ldrh	r3, [r4, #12]
 802d602:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802d606:	81a3      	strh	r3, [r4, #12]
 802d608:	2300      	movs	r3, #0
 802d60a:	6063      	str	r3, [r4, #4]
 802d60c:	6923      	ldr	r3, [r4, #16]
 802d60e:	6023      	str	r3, [r4, #0]
 802d610:	89a3      	ldrh	r3, [r4, #12]
 802d612:	f043 0308 	orr.w	r3, r3, #8
 802d616:	81a3      	strh	r3, [r4, #12]
 802d618:	6923      	ldr	r3, [r4, #16]
 802d61a:	b94b      	cbnz	r3, 802d630 <__swsetup_r+0x7c>
 802d61c:	89a3      	ldrh	r3, [r4, #12]
 802d61e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802d622:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802d626:	d003      	beq.n	802d630 <__swsetup_r+0x7c>
 802d628:	4621      	mov	r1, r4
 802d62a:	4628      	mov	r0, r5
 802d62c:	f000 f840 	bl	802d6b0 <__smakebuf_r>
 802d630:	89a0      	ldrh	r0, [r4, #12]
 802d632:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802d636:	f010 0301 	ands.w	r3, r0, #1
 802d63a:	d00a      	beq.n	802d652 <__swsetup_r+0x9e>
 802d63c:	2300      	movs	r3, #0
 802d63e:	60a3      	str	r3, [r4, #8]
 802d640:	6963      	ldr	r3, [r4, #20]
 802d642:	425b      	negs	r3, r3
 802d644:	61a3      	str	r3, [r4, #24]
 802d646:	6923      	ldr	r3, [r4, #16]
 802d648:	b943      	cbnz	r3, 802d65c <__swsetup_r+0xa8>
 802d64a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802d64e:	d1c4      	bne.n	802d5da <__swsetup_r+0x26>
 802d650:	bd38      	pop	{r3, r4, r5, pc}
 802d652:	0781      	lsls	r1, r0, #30
 802d654:	bf58      	it	pl
 802d656:	6963      	ldrpl	r3, [r4, #20]
 802d658:	60a3      	str	r3, [r4, #8]
 802d65a:	e7f4      	b.n	802d646 <__swsetup_r+0x92>
 802d65c:	2000      	movs	r0, #0
 802d65e:	e7f7      	b.n	802d650 <__swsetup_r+0x9c>
 802d660:	2400012c 	.word	0x2400012c

0802d664 <__swhatbuf_r>:
 802d664:	b570      	push	{r4, r5, r6, lr}
 802d666:	460c      	mov	r4, r1
 802d668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d66c:	2900      	cmp	r1, #0
 802d66e:	b096      	sub	sp, #88	; 0x58
 802d670:	4615      	mov	r5, r2
 802d672:	461e      	mov	r6, r3
 802d674:	da0d      	bge.n	802d692 <__swhatbuf_r+0x2e>
 802d676:	89a3      	ldrh	r3, [r4, #12]
 802d678:	f013 0f80 	tst.w	r3, #128	; 0x80
 802d67c:	f04f 0100 	mov.w	r1, #0
 802d680:	bf0c      	ite	eq
 802d682:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 802d686:	2340      	movne	r3, #64	; 0x40
 802d688:	2000      	movs	r0, #0
 802d68a:	6031      	str	r1, [r6, #0]
 802d68c:	602b      	str	r3, [r5, #0]
 802d68e:	b016      	add	sp, #88	; 0x58
 802d690:	bd70      	pop	{r4, r5, r6, pc}
 802d692:	466a      	mov	r2, sp
 802d694:	f000 f848 	bl	802d728 <_fstat_r>
 802d698:	2800      	cmp	r0, #0
 802d69a:	dbec      	blt.n	802d676 <__swhatbuf_r+0x12>
 802d69c:	9901      	ldr	r1, [sp, #4]
 802d69e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 802d6a2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 802d6a6:	4259      	negs	r1, r3
 802d6a8:	4159      	adcs	r1, r3
 802d6aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802d6ae:	e7eb      	b.n	802d688 <__swhatbuf_r+0x24>

0802d6b0 <__smakebuf_r>:
 802d6b0:	898b      	ldrh	r3, [r1, #12]
 802d6b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802d6b4:	079d      	lsls	r5, r3, #30
 802d6b6:	4606      	mov	r6, r0
 802d6b8:	460c      	mov	r4, r1
 802d6ba:	d507      	bpl.n	802d6cc <__smakebuf_r+0x1c>
 802d6bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802d6c0:	6023      	str	r3, [r4, #0]
 802d6c2:	6123      	str	r3, [r4, #16]
 802d6c4:	2301      	movs	r3, #1
 802d6c6:	6163      	str	r3, [r4, #20]
 802d6c8:	b002      	add	sp, #8
 802d6ca:	bd70      	pop	{r4, r5, r6, pc}
 802d6cc:	ab01      	add	r3, sp, #4
 802d6ce:	466a      	mov	r2, sp
 802d6d0:	f7ff ffc8 	bl	802d664 <__swhatbuf_r>
 802d6d4:	9900      	ldr	r1, [sp, #0]
 802d6d6:	4605      	mov	r5, r0
 802d6d8:	4630      	mov	r0, r6
 802d6da:	f7ff f81b 	bl	802c714 <_malloc_r>
 802d6de:	b948      	cbnz	r0, 802d6f4 <__smakebuf_r+0x44>
 802d6e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802d6e4:	059a      	lsls	r2, r3, #22
 802d6e6:	d4ef      	bmi.n	802d6c8 <__smakebuf_r+0x18>
 802d6e8:	f023 0303 	bic.w	r3, r3, #3
 802d6ec:	f043 0302 	orr.w	r3, r3, #2
 802d6f0:	81a3      	strh	r3, [r4, #12]
 802d6f2:	e7e3      	b.n	802d6bc <__smakebuf_r+0xc>
 802d6f4:	89a3      	ldrh	r3, [r4, #12]
 802d6f6:	6020      	str	r0, [r4, #0]
 802d6f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802d6fc:	81a3      	strh	r3, [r4, #12]
 802d6fe:	9b00      	ldr	r3, [sp, #0]
 802d700:	6163      	str	r3, [r4, #20]
 802d702:	9b01      	ldr	r3, [sp, #4]
 802d704:	6120      	str	r0, [r4, #16]
 802d706:	b15b      	cbz	r3, 802d720 <__smakebuf_r+0x70>
 802d708:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802d70c:	4630      	mov	r0, r6
 802d70e:	f000 f81d 	bl	802d74c <_isatty_r>
 802d712:	b128      	cbz	r0, 802d720 <__smakebuf_r+0x70>
 802d714:	89a3      	ldrh	r3, [r4, #12]
 802d716:	f023 0303 	bic.w	r3, r3, #3
 802d71a:	f043 0301 	orr.w	r3, r3, #1
 802d71e:	81a3      	strh	r3, [r4, #12]
 802d720:	89a3      	ldrh	r3, [r4, #12]
 802d722:	431d      	orrs	r5, r3
 802d724:	81a5      	strh	r5, [r4, #12]
 802d726:	e7cf      	b.n	802d6c8 <__smakebuf_r+0x18>

0802d728 <_fstat_r>:
 802d728:	b538      	push	{r3, r4, r5, lr}
 802d72a:	4d07      	ldr	r5, [pc, #28]	; (802d748 <_fstat_r+0x20>)
 802d72c:	2300      	movs	r3, #0
 802d72e:	4604      	mov	r4, r0
 802d730:	4608      	mov	r0, r1
 802d732:	4611      	mov	r1, r2
 802d734:	602b      	str	r3, [r5, #0]
 802d736:	f7d4 f848 	bl	80017ca <_fstat>
 802d73a:	1c43      	adds	r3, r0, #1
 802d73c:	d102      	bne.n	802d744 <_fstat_r+0x1c>
 802d73e:	682b      	ldr	r3, [r5, #0]
 802d740:	b103      	cbz	r3, 802d744 <_fstat_r+0x1c>
 802d742:	6023      	str	r3, [r4, #0]
 802d744:	bd38      	pop	{r3, r4, r5, pc}
 802d746:	bf00      	nop
 802d748:	2400c580 	.word	0x2400c580

0802d74c <_isatty_r>:
 802d74c:	b538      	push	{r3, r4, r5, lr}
 802d74e:	4d06      	ldr	r5, [pc, #24]	; (802d768 <_isatty_r+0x1c>)
 802d750:	2300      	movs	r3, #0
 802d752:	4604      	mov	r4, r0
 802d754:	4608      	mov	r0, r1
 802d756:	602b      	str	r3, [r5, #0]
 802d758:	f7d4 f847 	bl	80017ea <_isatty>
 802d75c:	1c43      	adds	r3, r0, #1
 802d75e:	d102      	bne.n	802d766 <_isatty_r+0x1a>
 802d760:	682b      	ldr	r3, [r5, #0]
 802d762:	b103      	cbz	r3, 802d766 <_isatty_r+0x1a>
 802d764:	6023      	str	r3, [r4, #0]
 802d766:	bd38      	pop	{r3, r4, r5, pc}
 802d768:	2400c580 	.word	0x2400c580

0802d76c <_init>:
 802d76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d76e:	bf00      	nop
 802d770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802d772:	bc08      	pop	{r3}
 802d774:	469e      	mov	lr, r3
 802d776:	4770      	bx	lr

0802d778 <_fini>:
 802d778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d77a:	bf00      	nop
 802d77c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802d77e:	bc08      	pop	{r3}
 802d780:	469e      	mov	lr, r3
 802d782:	4770      	bx	lr
